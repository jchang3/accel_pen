
test_niosII_uart_sdcard.elf:     file format elf32-littlenios2
test_niosII_uart_sdcard.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001a0

Program Header:
    LOAD off    0x00001020 vaddr 0x01904020 paddr 0x00800000 align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags r-x
    LOAD off    0x000021a0 vaddr 0x008001a0 paddr 0x008001a0 align 2**12
         filesz 0x0001b31c memsz 0x0001b31c flags r-x
    LOAD off    0x0001d4bc vaddr 0x0081b4bc paddr 0x0081d024 align 2**12
         filesz 0x00001b68 memsz 0x00001b68 flags rw-
    LOAD off    0x0001fb8c vaddr 0x0081eb8c paddr 0x0081eb8c align 2**12
         filesz 0x00000000 memsz 0x0000bb20 flags rw-
    LOAD off    0x00020000 vaddr 0x01904000 paddr 0x01904000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01904000  01904000  00020000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  01904020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001aa64  008001a0  008001a0  000021a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008b8  0081ac04  0081ac04  0001cc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b68  0081b4bc  0081d024  0001d4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000bb20  0081eb8c  0081eb8c  0001fb8c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e98  00000000  00000000  00020048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002942  00000000  00000000  00020ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003536b  00000000  00000000  00023822  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009afb  00000000  00000000  00058b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001deb6  00000000  00000000  00062688  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002b64  00000000  00000000  00080540  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000027cd  00000000  00000000  000830a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dbf4  00000000  00000000  00085871  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00093468  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009f8  00000000  00000000  00093478  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000993eb  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000993f1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000993fd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000993fe  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000993ff  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00099403  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00099407  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0009940b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00099416  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00099421  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0009942c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000047  00000000  00000000  00099439  2**0
                  CONTENTS, READONLY
 29 .jdi          00005269  00000000  00000000  00099480  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007096a  00000000  00000000  0009e6e9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01904000 l    d  .entry	00000000 .entry
01904020 l    d  .exceptions	00000000 .exceptions
008001a0 l    d  .text	00000000 .text
0081ac04 l    d  .rodata	00000000 .rodata
0081b4bc l    d  .rwdata	00000000 .rwdata
0081eb8c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001d8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
008009d8 l     F .text	00000058 __sprint_r
0081b072 l     O .rodata	00000010 blanks.3452
0081b062 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00802a54 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080447c l     F .text	00000058 std
00804588 l     F .text	00000008 __fp_lock
00804590 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0081b4bc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0081cf74 l     O .rwdata	00000004 charset
0081b0a8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0081b1f0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
008088a4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
008099d0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080a30c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080a36c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080a470 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080a594 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080a674 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080a7d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0080acb8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081cf98 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080af70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0081cf9c l     O .rwdata	00000004 lockid
0081ebc8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0081cfa0 l     O .rwdata	00000004 lockid
0081ebd0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0080c9a8 l     F .text	00000044 OS_InitMisc
0080c9ec l     F .text	0000006c OS_InitRdyList
0080cb50 l     F .text	000000e0 OS_InitTCBList
0080c8cc l     F .text	000000dc OS_InitEventList
0080ca58 l     F .text	0000007c OS_InitTaskIdle
0080cad4 l     F .text	0000007c OS_InitTaskStat
0080cdc4 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0080ece4 l     F .text	00000110 OS_FlagTaskRdy
0080ea3c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081be78 l     O .rwdata	0000106c jtag_uart_0
0081cee4 l     O .rwdata	0000002c character_lcd_0
0081cf10 l     O .rwdata	0000002c rs232_0
0081cf3c l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
0081365c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0081390c l     F .text	000002c8 altera_avalon_jtag_uart_irq
00813bd4 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008143ec l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00819414 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008195ec l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
008198fc l     F .text	000000f8 alt_file_locked
00819b80 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0081a9e0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0081ab94 l     F .text	00000040 alt_sim_halt
0081ec30 g     O .bss	00000004 aux_status_register
008061d4 g     F .text	00000094 _mprec_log10
0081cfee g     O .rwdata	00000002 OSTaskNameSize
008062c0 g     F .text	00000088 __any_on
00807a78 g     F .text	00000070 _isatty_r
0081b1c8 g     O .rodata	00000028 __mprec_tinytens
0080a834 g     F .text	000000c8 alt_main
008008b0 g     F .text	000000a0 _puts_r
0082a41c g     O .bss	00000100 alt_irq
00807ae8 g     F .text	00000078 _lseek_r
0080f5d8 g     F .text	000000d4 OS_MemInit
0081d024 g       *ABS*	00000000 __flash_rwdata_start
00813538 g     F .text	00000064 OSTimeSet
00814564 g     F .text	00000034 alt_up_character_lcd_send_cmd
008093c4 g     F .text	00000088 __eqdf2
00815160 g     F .text	000001b0 Check_for_Master_Boot_Record
0080b524 g     F .text	000006b4 OSEventPendMulti
0082a6ac g       *ABS*	00000000 __alt_heap_start
0081a188 g     F .text	00000020 OSTaskCreateHook
0081901c g     F .text	000001d4 alt_up_sd_card_fclose
00800838 g     F .text	00000044 printf
0081cfc6 g     O .rwdata	00000002 OSMboxEn
0080bc2c g     F .text	0000007c OSIntEnter
00807530 g     F .text	00000068 __sseek
008044e4 g     F .text	000000a4 __sinit
0081a760 g     F .text	00000130 __swbuf_r
0081cfd6 g     O .rwdata	00000002 OSQEn
008051f0 g     F .text	00000084 _setlocale_r
008045e4 g     F .text	0000009c __sfmoreglue
0080b1e0 g     F .text	000000d0 __malloc_unlock
0081a1e4 g     F .text	0000001c OSTaskStatHook
00814c4c g     F .text	00000090 alt_up_rs232_read_fd
0081ebd8 g     O .bss	00000001 OSLockNesting
0081ec54 g     O .bss	00000004 current_sector_modified
0081d014 g     O .rwdata	00000002 OSDataSize
0081ebd9 g     O .bss	00000001 OSRunning
00805ce8 g     F .text	000000e0 memmove
0081a21c g     F .text	0000001c OSInitHookBegin
0081d00c g     O .rwdata	00000002 OSTmrSize
008045d4 g     F .text	00000010 _cleanup
00806348 g     F .text	000000bc _Balloc
00817bd8 g     F .text	000000c8 alt_up_sd_card_is_Present
00814e78 g     F .text	00000050 Save_Modified_Sector
0081ebdc g     O .bss	00000004 OSIdleCtr
008094d4 g     F .text	00000088 __gtdf2
00819e54 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
008144e8 g     F .text	0000007c get_DDRAM_addr
0080d0f8 g     F .text	000002e0 OS_TCBInit
01904000 g     F .entry	0000000c __reset
0081ec4c g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
0081d012 g     O .rwdata	00000002 OSTmrWheelTblSize
00800000 g       *ABS*	00000000 __flash_exceptions_start
0081cfb2 g     O .rwdata	00000002 OSEventSize
0081ebe0 g     O .bss	00000001 OSPrioHighRdy
00807a04 g     F .text	00000074 _fstat_r
0081a1a8 g     F .text	00000020 OSTaskDelHook
0081ebb4 g     O .bss	00000004 errno
00819e34 g       .text	00000000 OSStartHighRdy
00811cf0 g     F .text	00000200 OSTaskCreateExt
0080e558 g     F .text	00000068 OSFlagPendGetFlagsRdy
0081cff2 g     O .rwdata	00000002 OSTaskStatStkSize
0080d564 g     F .text	00000334 OSFlagAccept
0080fd14 g     F .text	000000c8 OSQFlush
0080f6ac g     F .text	00000154 OSQAccept
0081ebc0 g     O .bss	00000004 alt_argv
00824f68 g       *ABS*	00000000 _gp
00818198 g     F .text	000003a8 alt_up_sd_card_fopen
00817d14 g     F .text	000000d4 alt_up_sd_card_find_first
00811b1c g     F .text	000001d4 OSTaskCreate
0081ec40 g     O .bss	00000004 command_argument_register
008115a8 g     F .text	00000574 OSTaskChangePrio
0081ebd4 g     O .bss	00000004 alt_heapsem
00800528 g     F .text	0000015c taskReadSDCard
0080d3d8 g     F .text	0000018c OSDebugInit
00811ef0 g     F .text	0000040c OSTaskDel
0081bcf8 g     O .rwdata	00000180 alt_fd_list
0081eb8c g     O .bss	00000004 readsem
00826c90 g     O .bss	00000370 OSFlagTbl
0080c6a8 g     F .text	000000b8 OS_EventTaskRemove
00817400 g     F .text	0000012c find_first_empty_record_in_root_directory
0081953c g     F .text	00000094 alt_find_dev
00805c48 g     F .text	000000a0 memcpy
0081cfdc g     O .rwdata	00000002 OSRdyTblSize
008146fc g     F .text	0000004c alt_up_character_lcd_write_fd
008045c8 g     F .text	0000000c _cleanup_r
0080966c g     F .text	000000f8 __floatsidf
008196c4 g     F .text	00000078 alt_io_redirect
008095e4 g     F .text	00000088 __ltdf2
00800358 g     F .text	000001d0 taskWriteSDCard
0081ac04 g       *ABS*	00000000 __DTOR_END__
00814bd8 g     F .text	00000074 alt_up_rs232_read_data
00800950 g     F .text	00000014 puts
0080b2b0 g     F .text	00000130 OSEventNameGet
0081cfc0 g     O .rwdata	00000002 OSFlagMax
00817010 g     F .text	000001a4 find_first_empty_cluster
00806124 g     F .text	000000b0 __ratio
00817b14 g     F .text	000000c4 alt_up_sd_card_open_dev
0080bca8 g     F .text	00000100 OSIntExit
0081cffa g     O .rwdata	00000002 OSTCBSize
0081ebe1 g     O .bss	00000001 OSPrioCur
00813e50 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0080087c g     F .text	00000034 _printf_r
01904000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00809b0c g     F .text	00000008 __udivsi3
0080a4d0 g     F .text	000000c4 isatty
0081cfe0 g     O .rwdata	00000002 OSStkWidth
0081eb90 g     O .bss	00000004 writesem
0081b0d8 g     O .rodata	000000c8 __mprec_tens
0081cfd4 g     O .rwdata	00000002 OSPtrSize
008051cc g     F .text	00000008 __locale_charset
0081cfb4 g     O .rwdata	00000002 OSEventTblSize
00819da8 g       .text	00000000 OSCtxSw
0081eba8 g     O .bss	00000004 __malloc_top_pad
0081ebe4 g     O .bss	00000004 OSTCBList
0081ebb8 g     O .bss	00000004 alt_fd_list_lock
0081cf70 g     O .rwdata	00000004 __mb_cur_max
008051d4 g     F .text	0000000c _localeconv_r
00806aac g     F .text	0000003c __i2b
00804bb0 g     F .text	0000049c __sfvwrite_r
008162ec g     F .text	000000c0 get_dir_divider_location
00827000 g     O .bss	00000c30 OSMemTbl
0081ebe8 g     O .bss	00000001 OSTickStepState
008074b8 g     F .text	00000070 _sbrk_r
00815f8c g     F .text	000000d0 filename_to_upper_case
0081cfd8 g     O .rwdata	00000002 OSQMax
00818540 g     F .text	00000090 alt_up_sd_card_set_attributes
00827c30 g     O .bss	00000800 OSTaskStatStk
0080f1c0 g     F .text	0000010c OSMemNameGet
00815310 g     F .text	00000284 Read_File_Record_At_Offset
0081cfb8 g     O .rwdata	00000002 OSFlagEn
00807b60 g     F .text	00000078 _read_r
0081cffe g     O .rwdata	00000002 OSTimeTickHookEn
00810278 g     F .text	00000180 OSQPost
0080edf4 g     F .text	000000ac OS_FlagUnlink
0081b8bc g     O .rwdata	0000000c __lc_ctype
0081cf90 g     O .rwdata	00000004 alt_max_fd
00814b40 g     F .text	00000050 alt_up_rs232_check_parity
0080cc84 g     F .text	0000006c OS_MemCopy
0080ccf0 g     F .text	000000d4 OS_Sched
0080a00c g     F .text	00000138 __unpack_d
00816bac g     F .text	00000464 find_file_in_directory
008078e0 g     F .text	00000110 _fclose_r
0080f0bc g     F .text	00000104 OSMemGet
00812624 g     F .text	000001c4 OSTaskNameSet
00804448 g     F .text	00000034 fflush
0081ebac g     O .bss	00000004 __malloc_max_sbrked_mem
0081ebec g     O .bss	00000004 OSCtxSwCtr
0081a200 g     F .text	0000001c OSTimeTickHook
0081973c g     F .text	000001c0 alt_irq_register
0081cfc2 g     O .rwdata	00000002 OSFlagNameSize
0080c760 g     F .text	00000104 OS_EventTaskRemoveMulti
00817ca0 g     F .text	00000074 alt_up_sd_card_is_FAT16
00808d34 g     F .text	00000074 __adddf3
0080c554 g     F .text	00000154 OS_EventTaskWaitMulti
00806004 g     F .text	00000120 __b2d
0081cfda g     O .rwdata	00000002 OSQSize
00808244 g     F .text	00000660 __umoddi3
0080a6e0 g     F .text	000000f4 lseek
00810e54 g     F .text	0000027c OSSemPend
0081cf6c g     O .rwdata	00000004 _global_impure_ptr
00816698 g     F .text	00000514 get_home_directory_cluster_for_file
00806e54 g     F .text	000005f4 _realloc_r
0081cfc4 g     O .rwdata	00000002 OSLowestPrio
0082a6ac g       *ABS*	00000000 __bss_end
0081a270 g     F .text	00000020 OSTCBInitHook
0081d00a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00819c78 g     F .text	00000110 alt_tick
00807bd8 g     F .text	0000066c __udivdi3
0081cfac g     O .rwdata	00000002 OSEventEn
0081b1a0 g     O .rodata	00000028 __mprec_bigtens
00806d34 g     F .text	00000120 __s2b
0081d006 g     O .rwdata	00000002 OSTmrCfgNameSize
0080983c g     F .text	00000194 __floatunsidf
00805f24 g     F .text	00000060 __mcmp
0081ec58 g     O .bss	00000004 current_sector_index
008045b0 g     F .text	00000018 __fp_lock_all
0080ec00 g     F .text	000000e4 OS_FlagInit
00819be0 g     F .text	00000098 alt_alarm_stop
0081507c g     F .text	000000e4 mark_cluster
0081cfe8 g     O .rwdata	00000002 OSTaskIdleStkSize
0081ec5c g     O .bss	00000004 alt_irq_active
008109e0 g     F .text	000000c0 OSSemAccept
0080f3ec g     F .text	000000f0 OSMemPut
0080eea0 g     F .text	0000021c OSMemCreate
0081ebf0 g     O .bss	00000004 OSIdleCtrMax
019040ec g     F .exceptions	000000d4 alt_irq_handler
0081bcd0 g     O .rwdata	00000028 alt_dev_null
0081cffc g     O .rwdata	00000002 OSTicksPerSec
0081752c g     F .text	000001b8 convert_filename_to_name_extension
008149e4 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00819da8 g       .text	00000000 OSIntCtxSw
00819344 g     F .text	0000001c alt_dcache_flush_all
00805df0 g     F .text	00000070 __hi0bits
0081ec2c g     O .bss	00000004 is_sd_card_formated_as_FAT16
00809764 g     F .text	000000d8 __fixdfsi
008171b4 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0081ebf4 g     O .bss	00000004 OSTCBFreeList
0081d024 g       *ABS*	00000000 __ram_rwdata_end
008110d0 g     F .text	0000017c OSSemPendAbort
0081cf88 g     O .rwdata	00000008 alt_dev_list
0080ae4c g     F .text	00000124 write
0081a678 g     F .text	000000e8 _putc_r
0081ec50 g     O .bss	00000004 device_pointer
0081d000 g     O .rwdata	00000002 OSVersionNbr
0081b4bc g       *ABS*	00000000 __ram_rodata_end
0080a398 g     F .text	000000d8 fstat
00814cdc g     F .text	00000094 alt_up_rs232_write_fd
0081cfa8 g     O .rwdata	00000004 OSEndiannessTest
00806c14 g     F .text	00000120 __pow5mult
0081eb9c g     O .bss	00000004 __nlocale_changed
00809b14 g     F .text	00000008 __umodsi3
0081cfba g     O .rwdata	00000002 OSFlagGrpSize
0082a6ac g       *ABS*	00000000 end
008137dc g     F .text	00000130 altera_avalon_jtag_uart_init
0080cf68 g     F .text	000000c8 OS_TaskStat
0081ac00 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00814460 g     F .text	00000088 alt_avalon_timer_sc_init
00809c78 g     F .text	00000080 __clzsi2
00814110 g     F .text	000002dc altera_avalon_jtag_uart_write
008044d4 g     F .text	00000004 __sfp_lock_acquire
00805b64 g     F .text	000000e4 memchr
0080cc30 g     F .text	00000054 OS_MemClr
0081460c g     F .text	00000078 alt_up_character_lcd_write
00800a30 g     F .text	00001ec4 ___vfprintf_internal_r
00819e78 g     F .text	00000310 OSTaskStkInit
0080489c g     F .text	00000314 _free_r
0080a8fc g     F .text	00000258 alt_printf
0080c2b0 g     F .text	00000194 OS_EventTaskRdy
0081a9e4 g     F .text	000001b0 __call_exitprocs
0081ebf8 g     O .bss	00000001 OSCPUUsage
0081eba0 g     O .bss	00000004 __mlocale_changed
0081cf7c g     O .rwdata	00000004 __malloc_sbrk_base
008001a0 g     F .text	0000003c _start
0081ec60 g     O .bss	00000004 _alt_tick_rate
0080fddc g     F .text	00000320 OSQPend
00812fe8 g     F .text	0000014c OSTimeDly
0080670c g     F .text	0000014c __lshift
0081ec64 g     O .bss	00000004 _alt_nticks
0080ab94 g     F .text	00000124 read
008135d0 g     F .text	0000008c alt_sys_init
00814870 g     F .text	000000b0 alt_up_character_lcd_shift_display
0081a8ac g     F .text	00000134 __register_exitproc
0081ebf9 g     O .bss	00000001 OSTaskCtr
0081ec90 g     O .bss	00002000 taskReadSDCard_stk
00814b00 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
00813134 g     F .text	00000190 OSTimeDlyHMSM
00806858 g     F .text	00000254 __multiply
00814920 g     F .text	00000090 alt_up_character_lcd_erase_pos
00813ce8 g     F .text	00000074 altera_avalon_jtag_uart_close
00809b1c g     F .text	00000038 __mulsi3
0081b4bc g       *ABS*	00000000 __ram_rwdata_start
0081ac04 g       *ABS*	00000000 __ram_rodata_start
0081ec68 g     O .bss	00000028 __malloc_current_mallinfo
0081cfae g     O .rwdata	00000002 OSEventMax
00806404 g     F .text	0000017c __d2b
0081124c g     F .text	00000128 OSSemPost
0081ec28 g     O .bss	00000004 initialized
0080be34 g     F .text	000000e4 OSSchedUnlock
00813694 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0081a3b0 g     F .text	00000104 alt_get_fd
0081ebfc g     O .bss	00000004 OSMemFreeList
0080bf88 g     F .text	000000ac OSStatInit
00829eb4 g     O .bss	00000014 search_data
0080e968 g     F .text	000000d4 OSFlagQuery
0080a144 g     F .text	000000c8 __fpcmp_parts_d
0081cfe4 g     O .rwdata	00000002 OSTaskCreateExtEn
00807870 g     F .text	00000070 _close_r
00820c90 g     O .bss	00002000 taskWriteSDCard_stk
0081a500 g     F .text	00000074 memcmp
0080c294 g     F .text	0000001c OS_Dummy
00813744 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0082a6ac g       *ABS*	00000000 __alt_stack_base
0081378c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00802918 g     F .text	0000013c __swsetup_r
00828430 g     O .bss	000001e0 OSQTbl
0080916c g     F .text	00000258 __divdf3
00804680 g     F .text	000000f0 __sfp
00829ec8 g     O .bss	00000054 boot_sector_data
00806268 g     F .text	00000058 __copybits
0081b8c8 g     O .rwdata	00000408 __malloc_av_
008044e0 g     F .text	00000004 __sinit_lock_release
00822c90 g     O .bss	00002000 taskUartRead_stk
0081ec00 g     O .bss	00000004 OSTCBHighRdy
00808da8 g     F .text	000003c4 __muldf3
00807614 g     F .text	00000060 __sread
0081ec04 g     O .bss	00000004 OSQFreeList
00814a6c g     F .text	00000058 alt_up_rs232_disable_read_interrupt
0081a290 g     F .text	00000120 alt_find_file
00819360 g     F .text	000000b4 alt_dev_llist_insert
0080b0d8 g     F .text	00000108 __malloc_lock
0080ad90 g     F .text	000000bc sbrk
0080b3e0 g     F .text	00000144 OSEventNameSet
0080424c g     F .text	000001fc _fflush_r
008077a8 g     F .text	000000c8 _calloc_r
0081ec08 g     O .bss	00000001 OSRdyGrp
0081eb8c g       *ABS*	00000000 __bss_start
008007a0 g     F .text	00000098 memset
0081eb94 g     O .bss	00000001 err
00800684 g     F .text	0000011c main
0081ebc4 g     O .bss	00000004 alt_envp
0081ebb0 g     O .bss	00000004 __malloc_max_total_mem
008136ec g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0081a890 g     F .text	0000001c __swbuf
0081b330 g     O .rodata	00000100 OSUnMapTbl
008185d0 g     F .text	0000008c alt_up_sd_card_get_attributes
0081cfde g     O .rwdata	00000002 OSSemEn
00814db0 g     F .text	000000c8 Write_Sector_Data
008189f8 g     F .text	00000624 alt_up_sd_card_write
008147c0 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0080e5c0 g     F .text	000003a8 OSFlagPost
00807528 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008079f0 g     F .text	00000014 fclose
0080c444 g     F .text	00000110 OS_EventTaskWait
0080d030 g     F .text	000000c8 OS_TaskStatStkChk
0082a51c g     O .bss	00000190 _atexit0
008122fc g     F .text	00000170 OSTaskDelReq
00802c98 g     F .text	000015b4 _dtoa_r
00805424 g     F .text	00000740 _malloc_r
0081cf94 g     O .rwdata	00000004 alt_errno
0080bf18 g     F .text	00000070 OSStart
0080b07c g     F .text	0000005c __env_unlock
00805114 g     F .text	000000b8 _fwalk
008127e8 g     F .text	00000218 OSTaskResume
0080f4dc g     F .text	000000fc OSMemQuery
0081cff0 g     O .rwdata	00000002 OSTaskStatEn
0081cfca g     O .rwdata	00000002 OSMemMax
008103f8 g     F .text	00000188 OSQPostFront
0081a574 g     F .text	00000104 putc
00809a4c g     F .text	00000060 __divsi3
0081ec09 g     O .bss	00000003 OSRdyTbl
0081cfa4 g     O .rwdata	00000002 OSDebugEn
0081b1fc g     O .rodata	00000014 __thenan_df
008145cc g     F .text	00000040 alt_up_character_lcd_open_dev
00804770 g     F .text	0000012c _malloc_trim_r
0081ac04 g       *ABS*	00000000 __CTOR_END__
0081cfbc g     O .rwdata	00000002 OSFlagNodeSize
0081ec34 g     O .bss	00000004 status_register
0081d004 g     O .rwdata	00000002 OSTmrCfgMax
00814598 g     F .text	00000034 alt_up_character_lcd_init
00807674 g     F .text	000000bc strcmp
0081ec3c g     O .bss	00000004 command_register
0080f800 g     F .text	00000214 OSQCreate
0081246c g     F .text	000001b8 OSTaskNameGet
0081ac04 g       *ABS*	00000000 __flash_rodata_start
00810580 g     F .text	00000234 OSQPostOpt
0080c034 g     F .text	00000240 OSTimeTick
0081cfec g     O .rwdata	00000002 OSTaskMax
0081ac04 g       *ABS*	00000000 __DTOR_LIST__
00810aa0 g     F .text	00000114 OSSemCreate
0081d010 g     O .rwdata	00000002 OSTmrWheelSize
00814d70 g     F .text	00000040 alt_up_rs232_open_dev
0080944c g     F .text	00000088 __nedf2
0081cfe6 g     O .rwdata	00000002 OSTaskDelEn
01880000 g       *ABS*	00000000 __alt_mem_sram_0
00811374 g     F .text	00000130 OSSemQuery
0080fa14 g     F .text	00000300 OSQDel
008100fc g     F .text	0000017c OSQPendAbort
0081359c g     F .text	00000034 alt_irq_init
0080ad18 g     F .text	00000078 alt_release_fd
00814fc4 g     F .text	000000b8 get_cluster_flag
008149b0 g     F .text	00000034 alt_up_character_lcd_cursor_off
0081b210 g     O .rodata	00000100 __clz_tab
00815594 g     F .text	000002b8 Write_File_Record_At_Offset
0081eba4 g     O .bss	00000004 _PathLocale
01400000 g       *ABS*	00000000 __alt_mem_generic_tristate_controller_0
0081a4b4 g     F .text	00000014 atexit
00807730 g     F .text	00000078 _write_r
0080bda8 g     F .text	0000008c OSSchedLock
00805274 g     F .text	0000001c setlocale
0080d898 g     F .text	0000013c OSFlagCreate
0081584c g     F .text	00000648 Check_for_DOS_FAT
008176e4 g     F .text	000002dc create_file
0081cf68 g     O .rwdata	00000004 _impure_ptr
0081ec38 g     O .bss	00000004 CSD_register_w0
0081ebbc g     O .bss	00000004 alt_argc
008194d8 g     F .text	00000064 _do_dtors
0081cfb6 g     O .rwdata	00000002 OSEventMultiEn
0080d9d4 g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
0081ec0c g     O .bss	00000004 OSEventFreeList
01904020 g       .exceptions	00000000 alt_irq_entry
00805f84 g     F .text	00000080 __ulp
00807448 g     F .text	00000040 __isinfd
0080df14 g     F .text	00000644 OSFlagPend
0081d002 g     O .rwdata	00000002 OSTmrEn
00804598 g     F .text	00000018 __fp_unlock_all
0081cf80 g     O .rwdata	00000008 alt_fs_list
0081605c g     F .text	00000290 check_file_name_for_FAT16_compliance
0080ce34 g     F .text	00000080 OS_StrCopy
0081ec44 g     O .bss	00000004 buffer_memory
00814a18 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
00824c90 g     O .bss	00002000 SWQ_stk
00814b90 g     F .text	00000048 alt_up_rs232_write_data
0081cfcc g     O .rwdata	00000002 OSMemNameSize
0081a238 g     F .text	0000001c OSInitHookEnd
01904020 g       *ABS*	00000000 __ram_exceptions_start
0081cff8 g     O .rwdata	00000002 OSTCBPrioTblMax
008051e0 g     F .text	00000010 localeconv
0081cff4 g     O .rwdata	00000002 OSTaskStatStkChkEn
0081cfc8 g     O .rwdata	00000002 OSMemEn
0081ec48 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
0081cfd2 g     O .rwdata	00000002 OSMutexEn
0081d024 g       *ABS*	00000000 _edata
0082a6ac g       *ABS*	00000000 _end
00829f1c g     O .bss	00000500 active_files
0081ec10 g     O .bss	00000001 OSIntNesting
008001dc g     F .text	0000017c taskUartRead
019041c0 g       *ABS*	00000000 __ram_exceptions_end
008179c0 g     F .text	00000154 copy_file_record_name_to_string
00813d5c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
008132c4 g     F .text	00000210 OSTimeDlyResume
00815e94 g     F .text	000000f8 Look_for_FAT16
0080ddc0 g     F .text	00000154 OSFlagNameSet
00812a00 g     F .text	000001fc OSTaskStkChk
0081cfce g     O .rwdata	00000002 OSMemSize
00807598 g     F .text	0000007c __swrite
0081cf78 g     O .rwdata	00000004 __malloc_trim_threshold
00819d88 g     F .text	00000020 altera_nios2_qsys_irq_init
0081ec14 g     O .bss	00000004 OSTCBCur
0081a4c8 g     F .text	00000038 exit
00817de8 g     F .text	000003b0 alt_up_sd_card_find_next
0081cfd0 g     O .rwdata	00000002 OSMemTblSize
0080504c g     F .text	000000c8 _fwalk_reent
0081eb98 g     O .bss	00000004 SWQ
00806580 g     F .text	0000018c __mdiff
00809aac g     F .text	00000060 __modsi3
00814ec8 g     F .text	000000fc Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
01904020 g     F .exceptions	00000000 alt_exception
008044d8 g     F .text	00000004 __sfp_lock_release
0080bbd8 g     F .text	00000054 OSInit
00812e28 g     F .text	00000144 OSTaskQuery
00814684 g     F .text	00000078 alt_up_character_lcd_string
00810934 g     F .text	000000ac OS_QInit
0080ceb4 g     F .text	00000058 OS_StrLen
0080f2cc g     F .text	00000120 OSMemNameSet
0081cfea g     O .rwdata	00000002 OSTaskProfileEn
0081ec18 g     O .bss	00000004 OSTime
00828610 g     O .bss	00000800 OSTaskIdleStk
0081abd4 g     F .text	0000002c _exit
00807488 g     F .text	00000030 __isnand
008191f0 g     F .text	00000154 alt_alarm_start
0080dc7c g     F .text	00000144 OSFlagNameGet
008134d4 g     F .text	00000064 OSTimeGet
00809b54 g     F .text	00000124 __muldi3
0081865c g     F .text	0000039c alt_up_sd_card_read
00805290 g     F .text	00000194 __smakebuf_r
00800964 g     F .text	00000074 strlen
0081a1c8 g     F .text	0000001c OSTaskSwHook
008199f4 g     F .text	0000018c open
00828e10 g     O .bss	00000b40 OSEventTbl
0080955c g     F .text	00000088 __gedf2
0080ab54 g     F .text	00000040 alt_putchar
00829950 g     O .bss	00000510 OSTCBTbl
008114a4 g     F .text	00000104 OSSemSet
008195d0 g     F .text	0000001c alt_icache_flush_all
00814748 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0081d018 g     O .rwdata	00000004 alt_priority_mask
00810bb4 g     F .text	000002a0 OSSemDel
0081ec1c g     O .bss	00000004 OSFlagFreeList
0081cfb0 g     O .rwdata	00000002 OSEventNameSize
008028f4 g     F .text	00000024 __vfprintf_internal
0081ec20 g     O .bss	00000001 OSStatRdy
00829e60 g     O .bss	00000054 OSTCBPrioTbl
0080afd0 g     F .text	000000ac __env_lock
0081cff6 g     O .rwdata	00000002 OSTaskSwHookEn
00808cb4 g     F .text	00000080 __subdf3
00805e60 g     F .text	000000c4 __lo0bits
0081d01c g     O .rwdata	00000008 alt_alarm_list
0081cfbe g     O .rwdata	00000002 OSFlagWidth
00819474 g     F .text	00000064 _do_ctors
00814ac4 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0080a20c g     F .text	00000100 close
0081ebcc g     O .bss	00000004 alt_envsem
0081ec24 g     O .bss	00000004 OSIdleCtrRun
0080c274 g     F .text	00000020 OSVersion
0081d008 g     O .rwdata	00000002 OSTmrCfgWheelSize
0080a5f4 g     F .text	00000080 alt_load
00812f6c g     F .text	0000007c OS_TaskStkClr
00809cf8 g     F .text	00000314 __pack_d
0081cfe2 g     O .rwdata	00000002 OSTaskCreateEn
008163ac g     F .text	000002ec match_file_record_to_name_ext
0080c864 g     F .text	00000068 OS_EventWaitListInit
0081a254 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
008044dc g     F .text	00000004 __sinit_lock_acquire
00806ae8 g     F .text	0000012c __multadd
00812bfc g     F .text	0000022c OSTaskSuspend
00805dc8 g     F .text	00000028 _Bfree
0080cf0c g     F .text	0000005c OS_TaskIdle
0081d00e g     O .rwdata	00000002 OSTmrTblSize
008107b4 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01904000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1904000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1904004:	08406814 	ori	at,at,416
    jmp r1
 1904008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01904020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1904020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1904024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1904028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 190402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1904030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1904034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1904038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 190403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1904040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1904044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1904048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 190404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1904050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1904054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1904058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 190405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1904060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1904064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1904068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 190406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1904070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1904074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1904078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 190407c:	10000326 	beq	r2,zero,190408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1904080:	20000226 	beq	r4,zero,190408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1904084:	19040ec0 	call	19040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1904088:	00000306 	br	1904098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 190408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1904090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1904094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1904098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 190409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 19040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 19040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 19040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 19040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 19040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 19040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 19040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 19040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 19040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 19040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 19040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 19040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 19040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 19040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 19040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 19040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 19040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 19040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 19040e8:	ef80083a 	eret

019040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 19040ec:	defff904 	addi	sp,sp,-28
 19040f0:	dfc00615 	stw	ra,24(sp)
 19040f4:	df000515 	stw	fp,20(sp)
 19040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 19040fc:	080bc2c0 	call	80bc2c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1904100:	0005313a 	rdctl	r2,ipending
 1904104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1904108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 190410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1904110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1904114:	00800044 	movi	r2,1
 1904118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 190411c:	e0ffff17 	ldw	r3,-4(fp)
 1904120:	e0bffe17 	ldw	r2,-8(fp)
 1904124:	1884703a 	and	r2,r3,r2
 1904128:	1005003a 	cmpeq	r2,r2,zero
 190412c:	1000171e 	bne	r2,zero,190418c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1904130:	e0bffd17 	ldw	r2,-12(fp)
 1904134:	00c020f4 	movhi	r3,131
 1904138:	18e90704 	addi	r3,r3,-23524
 190413c:	100490fa 	slli	r2,r2,3
 1904140:	10c5883a 	add	r2,r2,r3
 1904144:	11800017 	ldw	r6,0(r2)
 1904148:	e0bffd17 	ldw	r2,-12(fp)
 190414c:	00c020f4 	movhi	r3,131
 1904150:	18e90704 	addi	r3,r3,-23524
 1904154:	100490fa 	slli	r2,r2,3
 1904158:	10c5883a 	add	r2,r2,r3
 190415c:	10800104 	addi	r2,r2,4
 1904160:	11000017 	ldw	r4,0(r2)
 1904164:	e17ffd17 	ldw	r5,-12(fp)
 1904168:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 190416c:	0005313a 	rdctl	r2,ipending
 1904170:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1904174:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1904178:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 190417c:	e0bfff17 	ldw	r2,-4(fp)
 1904180:	1004c03a 	cmpne	r2,r2,zero
 1904184:	103fe21e 	bne	r2,zero,1904110 <alt_irq_handler+0x24>
 1904188:	00000706 	br	19041a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 190418c:	e0bffe17 	ldw	r2,-8(fp)
 1904190:	1085883a 	add	r2,r2,r2
 1904194:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1904198:	e0bffd17 	ldw	r2,-12(fp)
 190419c:	10800044 	addi	r2,r2,1
 19041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19041a4:	003fdd06 	br	190411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 19041a8:	080bca80 	call	80bca8 <OSIntExit>
}
 19041ac:	e037883a 	mov	sp,fp
 19041b0:	dfc00117 	ldw	ra,4(sp)
 19041b4:	df000017 	ldw	fp,0(sp)
 19041b8:	dec00204 	addi	sp,sp,8
 19041bc:	f800283a 	ret

Disassembly of section .text:

008001a0 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001a0:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001a4:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001a8:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001ac:	d693da14 	ori	gp,gp,20328
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001b0:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001b4:	10bae314 	ori	r2,r2,60300

    movhi r3, %hi(__bss_end)
  8001b8:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  8001bc:	18e9ab14 	ori	r3,r3,42668

    beq r2, r3, 1f
  8001c0:	10c00326 	beq	r2,r3,8001d0 <_start+0x30>

0:
    stw zero, (r2)
  8001c4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001c8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001cc:	10fffd36 	bltu	r2,r3,8001c4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001d0:	080a5f40 	call	80a5f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001d4:	080a8340 	call	80a834 <alt_main>

008001d8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001d8:	003fff06 	br	8001d8 <alt_after_alt_main>

008001dc <taskUartRead>:
INT8U err;



/* UART task: read and write */
void taskUartRead(void* pdata) {
  8001dc:	defff604 	addi	sp,sp,-40
  8001e0:	dfc00915 	stw	ra,36(sp)
  8001e4:	df000815 	stw	fp,32(sp)
  8001e8:	df000804 	addi	fp,sp,32
  8001ec:	e13fff15 	stw	r4,-4(fp)
	alt_u32 write_FIFO_space;
	alt_u16 read_FIFO_used;
	alt_u8 data_W8;
	alt_u8 data_R8;
	int enter = 0;
  8001f0:	e03ffa15 	stw	zero,-24(fp)
	unsigned p_error;
	alt_up_rs232_dev* rs232_dev;

	// open the RS232 UART port
	rs232_dev = alt_up_rs232_open_dev("/dev/rs232_0");
  8001f4:	010020b4 	movhi	r4,130
  8001f8:	212b0104 	addi	r4,r4,-21500
  8001fc:	0814d700 	call	814d70 <alt_up_rs232_open_dev>
  800200:	e0bff915 	stw	r2,-28(fp)
	if (rs232_dev == NULL)
  800204:	e0bff917 	ldw	r2,-28(fp)
  800208:	1004c03a 	cmpne	r2,r2,zero
  80020c:	1000041e 	bne	r2,zero,800220 <taskUartRead+0x44>
		alt_printf("Error: could not open RS232 UART\n");
  800210:	010020b4 	movhi	r4,130
  800214:	212b0504 	addi	r4,r4,-21484
  800218:	080a8fc0 	call	80a8fc <alt_printf>
  80021c:	00000306 	br	80022c <taskUartRead+0x50>
	else
		alt_printf("Opened RS232 UART device\n");
  800220:	010020b4 	movhi	r4,130
  800224:	212b0e04 	addi	r4,r4,-21448
  800228:	080a8fc0 	call	80a8fc <alt_printf>

	alt_up_rs232_enable_read_interrupt(rs232_dev);
  80022c:	e13ff917 	ldw	r4,-28(fp)
  800230:	0814a180 	call	814a18 <alt_up_rs232_enable_read_interrupt>
  800234:	00000006 	br	800238 <taskUartRead+0x5c>
	while (1) {
		int sw = OSQPend(SWQ, 0, &err);
  800238:	d1270c17 	ldw	r4,-25552(gp)
  80023c:	000b883a 	mov	r5,zero
  800240:	d1a70b04 	addi	r6,gp,-25556
  800244:	080fddc0 	call	80fddc <OSQPend>
  800248:	e0bff815 	stw	r2,-32(fp)
		if (sw == SW_WRITE) {
  80024c:	e0bff817 	ldw	r2,-32(fp)
  800250:	10800098 	cmpnei	r2,r2,2
  800254:	1000241e 	bne	r2,zero,8002e8 <taskUartRead+0x10c>
			alt_up_rs232_disable_read_interrupt(rs232_dev);
  800258:	e13ff917 	ldw	r4,-28(fp)
  80025c:	0814a6c0 	call	814a6c <alt_up_rs232_disable_read_interrupt>
			if (enter == 0) {
  800260:	e0bffa17 	ldw	r2,-24(fp)
  800264:	1004c03a 	cmpne	r2,r2,zero
  800268:	1000051e 	bne	r2,zero,800280 <taskUartRead+0xa4>
				data_W8 = 'A';
  80026c:	00801044 	movi	r2,65
  800270:	e0bffb05 	stb	r2,-20(fp)
				enter = 1;
  800274:	00800044 	movi	r2,1
  800278:	e0bffa15 	stw	r2,-24(fp)
  80027c:	00000606 	br	800298 <taskUartRead+0xbc>
			} else if (enter == 1) {
  800280:	e0bffa17 	ldw	r2,-24(fp)
  800284:	10800058 	cmpnei	r2,r2,1
  800288:	1000031e 	bne	r2,zero,800298 <taskUartRead+0xbc>
				data_W8 = '\n';
  80028c:	00800284 	movi	r2,10
  800290:	e0bffb05 	stb	r2,-20(fp)
				enter = 0;
  800294:	e03ffa15 	stw	zero,-24(fp)
			}
			write_FIFO_space = alt_up_rs232_get_available_space_in_write_FIFO(
  800298:	e13ff917 	ldw	r4,-28(fp)
  80029c:	0814b000 	call	814b00 <alt_up_rs232_get_available_space_in_write_FIFO>
  8002a0:	e0bffc15 	stw	r2,-16(fp)
					rs232_dev);
			if (write_FIFO_space >= WRITE_FIFO_EMPTY) {
  8002a4:	e0bffc17 	ldw	r2,-16(fp)
  8002a8:	10802030 	cmpltui	r2,r2,128
  8002ac:	1000071e 	bne	r2,zero,8002cc <taskUartRead+0xf0>
				alt_up_rs232_write_data(rs232_dev, data_W8);
  8002b0:	e17ffb03 	ldbu	r5,-20(fp)
  8002b4:	e13ff917 	ldw	r4,-28(fp)
  8002b8:	0814b900 	call	814b90 <alt_up_rs232_write_data>
				alt_printf("write %c to RS232 UART\n", data_W8);
  8002bc:	e17ffb03 	ldbu	r5,-20(fp)
  8002c0:	010020b4 	movhi	r4,130
  8002c4:	212b1504 	addi	r4,r4,-21420
  8002c8:	080a8fc0 	call	80a8fc <alt_printf>
			}
			OSTimeDlyHMSM(0, 0, 1, 0);
  8002cc:	0009883a 	mov	r4,zero
  8002d0:	000b883a 	mov	r5,zero
  8002d4:	01800044 	movi	r6,1
  8002d8:	000f883a 	mov	r7,zero
  8002dc:	08131340 	call	813134 <OSTimeDlyHMSM>
			alt_up_rs232_enable_read_interrupt(rs232_dev);
  8002e0:	e13ff917 	ldw	r4,-28(fp)
  8002e4:	0814a180 	call	814a18 <alt_up_rs232_enable_read_interrupt>
		}
		if (sw == SW_READ) {
  8002e8:	e0bff817 	ldw	r2,-32(fp)
  8002ec:	10800058 	cmpnei	r2,r2,1
  8002f0:	103fd11e 	bne	r2,zero,800238 <taskUartRead+0x5c>
			read_FIFO_used = alt_up_rs232_get_used_space_in_read_FIFO(
  8002f4:	e13ff917 	ldw	r4,-28(fp)
  8002f8:	0814ac40 	call	814ac4 <alt_up_rs232_get_used_space_in_read_FIFO>
  8002fc:	e0bffb8d 	sth	r2,-18(fp)
					rs232_dev);
			if (read_FIFO_used > READ_FIFO_EMPTY) {
  800300:	e0bffb8b 	ldhu	r2,-18(fp)
  800304:	1005003a 	cmpeq	r2,r2,zero
  800308:	10000d1e 	bne	r2,zero,800340 <taskUartRead+0x164>
				alt_printf("char stored in read_FIFO: %x\n", read_FIFO_used);
  80030c:	e17ffb8b 	ldhu	r5,-18(fp)
  800310:	010020b4 	movhi	r4,130
  800314:	212b1b04 	addi	r4,r4,-21396
  800318:	080a8fc0 	call	80a8fc <alt_printf>
				alt_up_rs232_read_data(rs232_dev, &data_R8, &p_error);
  80031c:	e1bffe04 	addi	r6,fp,-8
  800320:	e17ffd04 	addi	r5,fp,-12
  800324:	e13ff917 	ldw	r4,-28(fp)
  800328:	0814bd80 	call	814bd8 <alt_up_rs232_read_data>
				alt_printf("read %c from RS232 UART\n", data_R8);
  80032c:	e0bffd03 	ldbu	r2,-12(fp)
  800330:	11403fcc 	andi	r5,r2,255
  800334:	010020b4 	movhi	r4,130
  800338:	212b2304 	addi	r4,r4,-21364
  80033c:	080a8fc0 	call	80a8fc <alt_printf>
			}
			OSTimeDlyHMSM(0, 0, 1, 0);
  800340:	0009883a 	mov	r4,zero
  800344:	000b883a 	mov	r5,zero
  800348:	01800044 	movi	r6,1
  80034c:	000f883a 	mov	r7,zero
  800350:	08131340 	call	813134 <OSTimeDlyHMSM>
		}
	}
  800354:	003fb806 	br	800238 <taskUartRead+0x5c>

00800358 <taskWriteSDCard>:
}

/* Checks for an SDCard, and Writes to the card if it is FAT16 */
void taskWriteSDCard(void* pdata) {
  800358:	deff7904 	addi	sp,sp,-540
  80035c:	dfc08615 	stw	ra,536(sp)
  800360:	df008515 	stw	fp,532(sp)
  800364:	df008504 	addi	fp,sp,532
  800368:	e13fff15 	stw	r4,-4(fp)
	short int sd_fileh;
	int index;
	char buffer[SD_BUFFER_SIZE] = "SD CARD test message\r\n\0";
  80036c:	00c020b4 	movhi	r3,130
  800370:	18eb6104 	addi	r3,r3,-21116
  800374:	1880000b 	ldhu	r2,0(r3)
  800378:	e0bf7e8d 	sth	r2,-518(fp)
  80037c:	1880008b 	ldhu	r2,2(r3)
  800380:	e0bf7f0d 	sth	r2,-516(fp)
  800384:	1880010b 	ldhu	r2,4(r3)
  800388:	e0bf7f8d 	sth	r2,-514(fp)
  80038c:	1880018b 	ldhu	r2,6(r3)
  800390:	e0bf800d 	sth	r2,-512(fp)
  800394:	1880020b 	ldhu	r2,8(r3)
  800398:	e0bf808d 	sth	r2,-510(fp)
  80039c:	1880028b 	ldhu	r2,10(r3)
  8003a0:	e0bf810d 	sth	r2,-508(fp)
  8003a4:	1880030b 	ldhu	r2,12(r3)
  8003a8:	e0bf818d 	sth	r2,-506(fp)
  8003ac:	1880038b 	ldhu	r2,14(r3)
  8003b0:	e0bf820d 	sth	r2,-504(fp)
  8003b4:	1880040b 	ldhu	r2,16(r3)
  8003b8:	e0bf828d 	sth	r2,-502(fp)
  8003bc:	1880048b 	ldhu	r2,18(r3)
  8003c0:	e0bf830d 	sth	r2,-500(fp)
  8003c4:	1880050b 	ldhu	r2,20(r3)
  8003c8:	e0bf838d 	sth	r2,-498(fp)
  8003cc:	1880058b 	ldhu	r2,22(r3)
  8003d0:	e0bf840d 	sth	r2,-496(fp)
  8003d4:	e13f8484 	addi	r4,fp,-494
  8003d8:	01807a04 	movi	r6,488
  8003dc:	000b883a 	mov	r5,zero
  8003e0:	08007a00 	call	8007a0 <memset>
  8003e4:	00000006 	br	8003e8 <taskWriteSDCard+0x90>
	while (1) {

		OSSemPend(writesem, 0, &err);
  8003e8:	d1270a17 	ldw	r4,-25560(gp)
  8003ec:	000b883a 	mov	r5,zero
  8003f0:	d1a70b04 	addi	r6,gp,-25556
  8003f4:	0810e540 	call	810e54 <OSSemPend>
		printf("SD Card Write Test\n");
  8003f8:	010020b4 	movhi	r4,130
  8003fc:	212b2a04 	addi	r4,r4,-21336
  800400:	08009500 	call	800950 <puts>

		alt_up_sd_card_dev *sd_card_dev = alt_up_sd_card_open_dev(
				ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
  800404:	010020b4 	movhi	r4,130
  800408:	212b2f04 	addi	r4,r4,-21316
  80040c:	0817b140 	call	817b14 <alt_up_sd_card_open_dev>
  800410:	e0bf7c15 	stw	r2,-528(fp)

		if (sd_card_dev != 0) {
  800414:	e0bf7c17 	ldw	r2,-528(fp)
  800418:	1005003a 	cmpeq	r2,r2,zero
  80041c:	103ff21e 	bne	r2,zero,8003e8 <taskWriteSDCard+0x90>
			if (alt_up_sd_card_is_Present()) {
  800420:	0817bd80 	call	817bd8 <alt_up_sd_card_is_Present>
  800424:	1005003a 	cmpeq	r2,r2,zero
  800428:	103fef1e 	bne	r2,zero,8003e8 <taskWriteSDCard+0x90>
				if (alt_up_sd_card_is_FAT16())
  80042c:	0817ca00 	call	817ca0 <alt_up_sd_card_is_FAT16>
  800430:	1005003a 	cmpeq	r2,r2,zero
  800434:	1000041e 	bne	r2,zero,800448 <taskWriteSDCard+0xf0>
					printf("Card is FAT16\n");
  800438:	010020b4 	movhi	r4,130
  80043c:	212b3a04 	addi	r4,r4,-21272
  800440:	08009500 	call	800950 <puts>
  800444:	00000306 	br	800454 <taskWriteSDCard+0xfc>
				else
					printf("Card is not FAT16\n");
  800448:	010020b4 	movhi	r4,130
  80044c:	212b3e04 	addi	r4,r4,-21256
  800450:	08009500 	call	800950 <puts>

				sd_fileh = alt_up_sd_card_fopen("file.txt", false);
  800454:	010020b4 	movhi	r4,130
  800458:	212b4304 	addi	r4,r4,-21236
  80045c:	000b883a 	mov	r5,zero
  800460:	08181980 	call	818198 <alt_up_sd_card_fopen>
  800464:	e0bf7e0d 	sth	r2,-520(fp)

				if (sd_fileh < 0)
  800468:	e0bf7e0f 	ldh	r2,-520(fp)
  80046c:	1004403a 	cmpge	r2,r2,zero
  800470:	1000051e 	bne	r2,zero,800488 <taskWriteSDCard+0x130>
					printf("Problem creating file. Error %i", sd_fileh);
  800474:	e17f7e0f 	ldh	r5,-520(fp)
  800478:	010020b4 	movhi	r4,130
  80047c:	212b4604 	addi	r4,r4,-21224
  800480:	08008380 	call	800838 <printf>
  800484:	003fd806 	br	8003e8 <taskWriteSDCard+0x90>
				else {
					printf("SD Accessed Successfully, writing data...");
  800488:	010020b4 	movhi	r4,130
  80048c:	212b4e04 	addi	r4,r4,-21192
  800490:	08008380 	call	800838 <printf>

					int index = 0;
  800494:	e03f7b15 	stw	zero,-532(fp)
					while (buffer[index] != '\0') {
  800498:	00000c06 	br	8004cc <taskWriteSDCard+0x174>
						alt_up_sd_card_write(sd_fileh, buffer[index]);
  80049c:	e13f7e0f 	ldh	r4,-520(fp)
  8004a0:	e0ff7b17 	ldw	r3,-532(fp)
  8004a4:	e0bf7e84 	addi	r2,fp,-518
  8004a8:	10c5883a 	add	r2,r2,r3
  8004ac:	10800003 	ldbu	r2,0(r2)
  8004b0:	11403fcc 	andi	r5,r2,255
  8004b4:	2940201c 	xori	r5,r5,128
  8004b8:	297fe004 	addi	r5,r5,-128
  8004bc:	08189f80 	call	8189f8 <alt_up_sd_card_write>
						index = index + 1;
  8004c0:	e0bf7b17 	ldw	r2,-532(fp)
  8004c4:	10800044 	addi	r2,r2,1
  8004c8:	e0bf7b15 	stw	r2,-532(fp)
					printf("Problem creating file. Error %i", sd_fileh);
				else {
					printf("SD Accessed Successfully, writing data...");

					int index = 0;
					while (buffer[index] != '\0') {
  8004cc:	e0ff7b17 	ldw	r3,-532(fp)
  8004d0:	e0bf7e84 	addi	r2,fp,-518
  8004d4:	10c5883a 	add	r2,r2,r3
  8004d8:	10800003 	ldbu	r2,0(r2)
  8004dc:	10803fcc 	andi	r2,r2,255
  8004e0:	1080201c 	xori	r2,r2,128
  8004e4:	10bfe004 	addi	r2,r2,-128
  8004e8:	1004c03a 	cmpne	r2,r2,zero
  8004ec:	103feb1e 	bne	r2,zero,80049c <taskWriteSDCard+0x144>
						alt_up_sd_card_write(sd_fileh, buffer[index]);
						index = index + 1;
					}

					printf("Done!\n");
  8004f0:	010020b4 	movhi	r4,130
  8004f4:	212b5904 	addi	r4,r4,-21148
  8004f8:	08009500 	call	800950 <puts>
					printf("Closing File...");
  8004fc:	010020b4 	movhi	r4,130
  800500:	212b5b04 	addi	r4,r4,-21140
  800504:	08008380 	call	800838 <printf>
					alt_up_sd_card_fclose(sd_fileh);
  800508:	e13f7e0f 	ldh	r4,-520(fp)
  80050c:	081901c0 	call	81901c <alt_up_sd_card_fclose>
					printf("Done!\n\n");
  800510:	010020b4 	movhi	r4,130
  800514:	212b5f04 	addi	r4,r4,-21124
  800518:	08009500 	call	800950 <puts>

					OSSemPost(readsem);
  80051c:	d1270917 	ldw	r4,-25564(gp)
  800520:	081124c0 	call	81124c <OSSemPost>
				}
			}
		}
	}
  800524:	003fb006 	br	8003e8 <taskWriteSDCard+0x90>

00800528 <taskReadSDCard>:
}

/* Checks for an SDCard, and Reads from the card if it is FAT16 from the file written to by taskWriteSDCard  */
void taskReadSDCard(void* pdata) {
  800528:	defdf804 	addi	sp,sp,-2080
  80052c:	dfc20715 	stw	ra,2076(sp)
  800530:	df020615 	stw	fp,2072(sp)
  800534:	df020604 	addi	fp,sp,2072
  800538:	e13fff15 	stw	r4,-4(fp)
  80053c:	00000006 	br	800540 <taskReadSDCard+0x18>
	char * read_buffer[SD_BUFFER_SIZE];
	int index;

	while (1) {

		OSSemPend(readsem, 0, &err);
  800540:	d1270917 	ldw	r4,-25564(gp)
  800544:	000b883a 	mov	r5,zero
  800548:	d1a70b04 	addi	r6,gp,-25556
  80054c:	0810e540 	call	810e54 <OSSemPend>
		printf("SD Card Read Test\n");
  800550:	010020b4 	movhi	r4,130
  800554:	212be104 	addi	r4,r4,-20604
  800558:	08009500 	call	800950 <puts>

		alt_up_sd_card_dev *sd_card_dev = alt_up_sd_card_open_dev(
				ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
  80055c:	010020b4 	movhi	r4,130
  800560:	212b2f04 	addi	r4,r4,-21316
  800564:	0817b140 	call	817b14 <alt_up_sd_card_open_dev>
  800568:	e0bdfc15 	stw	r2,-2064(fp)

		if (sd_card_dev != 0) {
  80056c:	e0bdfc17 	ldw	r2,-2064(fp)
  800570:	1005003a 	cmpeq	r2,r2,zero
  800574:	103ff21e 	bne	r2,zero,800540 <taskReadSDCard+0x18>
			if (alt_up_sd_card_is_Present()) {
  800578:	0817bd80 	call	817bd8 <alt_up_sd_card_is_Present>
  80057c:	1005003a 	cmpeq	r2,r2,zero
  800580:	103fef1e 	bne	r2,zero,800540 <taskReadSDCard+0x18>
				if (alt_up_sd_card_is_FAT16())
  800584:	0817ca00 	call	817ca0 <alt_up_sd_card_is_FAT16>
  800588:	1005003a 	cmpeq	r2,r2,zero
  80058c:	1000041e 	bne	r2,zero,8005a0 <taskReadSDCard+0x78>
					printf("Card is FAT16\n");
  800590:	010020b4 	movhi	r4,130
  800594:	212b3a04 	addi	r4,r4,-21272
  800598:	08009500 	call	800950 <puts>
  80059c:	00000306 	br	8005ac <taskReadSDCard+0x84>
				else
					printf("Card is not FAT16\n");
  8005a0:	010020b4 	movhi	r4,130
  8005a4:	212b3e04 	addi	r4,r4,-21256
  8005a8:	08009500 	call	800950 <puts>

				sd_fileh = alt_up_sd_card_fopen("file.txt", false);
  8005ac:	010020b4 	movhi	r4,130
  8005b0:	212b4304 	addi	r4,r4,-21236
  8005b4:	000b883a 	mov	r5,zero
  8005b8:	08181980 	call	818198 <alt_up_sd_card_fopen>
  8005bc:	e0bdfe0d 	sth	r2,-2056(fp)

				if (sd_fileh < 0)
  8005c0:	e0bdfe0f 	ldh	r2,-2056(fp)
  8005c4:	1004403a 	cmpge	r2,r2,zero
  8005c8:	1000051e 	bne	r2,zero,8005e0 <taskReadSDCard+0xb8>
					printf("Problem accessing file. Error %i", sd_fileh);
  8005cc:	e17dfe0f 	ldh	r5,-2056(fp)
  8005d0:	010020b4 	movhi	r4,130
  8005d4:	212be604 	addi	r4,r4,-20584
  8005d8:	08008380 	call	800838 <printf>
  8005dc:	003fd806 	br	800540 <taskReadSDCard+0x18>
				else {
					printf("SD Accessed Successfully, reading data...");
  8005e0:	010020b4 	movhi	r4,130
  8005e4:	212bef04 	addi	r4,r4,-20548
  8005e8:	08008380 	call	800838 <printf>

					char * pbuffer = read_buffer;
  8005ec:	e0bdff04 	addi	r2,fp,-2052
  8005f0:	e0bdfb15 	stw	r2,-2068(fp)
					char data = 1;
  8005f4:	00800044 	movi	r2,1
  8005f8:	e0bdfa05 	stb	r2,-2072(fp)
					for (index = 0; data != '\0'; index++) {
  8005fc:	e03dfd15 	stw	zero,-2060(fp)
  800600:	00000c06 	br	800634 <taskReadSDCard+0x10c>
						data = alt_up_sd_card_read(sd_fileh);
  800604:	e13dfe0f 	ldh	r4,-2056(fp)
  800608:	081865c0 	call	81865c <alt_up_sd_card_read>
  80060c:	e0bdfa05 	stb	r2,-2072(fp)
						*pbuffer = data;
  800610:	e0fdfb17 	ldw	r3,-2068(fp)
  800614:	e0bdfa03 	ldbu	r2,-2072(fp)
  800618:	18800005 	stb	r2,0(r3)
						pbuffer = pbuffer + (sizeof(char));
  80061c:	e0bdfb17 	ldw	r2,-2068(fp)
  800620:	10800044 	addi	r2,r2,1
  800624:	e0bdfb15 	stw	r2,-2068(fp)
				else {
					printf("SD Accessed Successfully, reading data...");

					char * pbuffer = read_buffer;
					char data = 1;
					for (index = 0; data != '\0'; index++) {
  800628:	e0bdfd17 	ldw	r2,-2060(fp)
  80062c:	10800044 	addi	r2,r2,1
  800630:	e0bdfd15 	stw	r2,-2060(fp)
  800634:	e0bdfa07 	ldb	r2,-2072(fp)
  800638:	1004c03a 	cmpne	r2,r2,zero
  80063c:	103ff11e 	bne	r2,zero,800604 <taskReadSDCard+0xdc>
						data = alt_up_sd_card_read(sd_fileh);
						*pbuffer = data;
						pbuffer = pbuffer + (sizeof(char));
					}

					printf("Done!\n");
  800640:	010020b4 	movhi	r4,130
  800644:	212b5904 	addi	r4,r4,-21148
  800648:	08009500 	call	800950 <puts>
					printf("Closing File...");
  80064c:	010020b4 	movhi	r4,130
  800650:	212b5b04 	addi	r4,r4,-21140
  800654:	08008380 	call	800838 <printf>
					alt_up_sd_card_fclose(sd_fileh);
  800658:	e13dfe0f 	ldh	r4,-2056(fp)
  80065c:	081901c0 	call	81901c <alt_up_sd_card_fclose>
					printf("Done!\n");
  800660:	010020b4 	movhi	r4,130
  800664:	212b5904 	addi	r4,r4,-21148
  800668:	08009500 	call	800950 <puts>
					printf("read buffer contains: ");
  80066c:	010020b4 	movhi	r4,130
  800670:	212bfa04 	addi	r4,r4,-20504
  800674:	08008380 	call	800838 <printf>
					printf("%s\n", read_buffer);
  800678:	e13dff04 	addi	r4,fp,-2052
  80067c:	08009500 	call	800950 <puts>
				}
			}
		}
	}
  800680:	003faf06 	br	800540 <taskReadSDCard+0x18>

00800684 <main>:
}

/* The main function creates two tasks. The SD read task pends on the SD write task */
int main(void) {
  800684:	defff904 	addi	sp,sp,-28
  800688:	dfc00615 	stw	ra,24(sp)
  80068c:	df000515 	stw	fp,20(sp)
  800690:	df000504 	addi	fp,sp,20
	writesem = OSSemCreate(1);
  800694:	01000044 	movi	r4,1
  800698:	0810aa00 	call	810aa0 <OSSemCreate>
  80069c:	d0a70a15 	stw	r2,-25560(gp)
	readsem = OSSemCreate(0);
  8006a0:	0009883a 	mov	r4,zero
  8006a4:	0810aa00 	call	810aa0 <OSSemCreate>
  8006a8:	d0a70915 	stw	r2,-25564(gp)
	SWQ = OSQCreate(SWQ_stk, TASK_STACKSIZE);
  8006ac:	010020b4 	movhi	r4,130
  8006b0:	21132404 	addi	r4,r4,19600
  8006b4:	01420004 	movi	r5,2048
  8006b8:	080f8000 	call	80f800 <OSQCreate>
  8006bc:	d0a70c15 	stw	r2,-25552(gp)

	OSTaskCreateExt(taskUartRead, NULL, (void *) &taskUartRead_stk[TASK_STACKSIZE - 1],
  8006c0:	018020b4 	movhi	r6,130
  8006c4:	31932304 	addi	r6,r6,19596
  8006c8:	00800044 	movi	r2,1
  8006cc:	d8800015 	stw	r2,0(sp)
  8006d0:	008020b4 	movhi	r2,130
  8006d4:	108b2404 	addi	r2,r2,11408
  8006d8:	d8800115 	stw	r2,4(sp)
  8006dc:	00820004 	movi	r2,2048
  8006e0:	d8800215 	stw	r2,8(sp)
  8006e4:	d8000315 	stw	zero,12(sp)
  8006e8:	d8000415 	stw	zero,16(sp)
  8006ec:	01002034 	movhi	r4,128
  8006f0:	21007704 	addi	r4,r4,476
  8006f4:	000b883a 	mov	r5,zero
  8006f8:	01c00044 	movi	r7,1
  8006fc:	0811cf00 	call	811cf0 <OSTaskCreateExt>
			TASKUARTREAD_PRIORITY, TASKUARTREAD_PRIORITY, taskUartRead_stk, TASK_STACKSIZE, NULL, 0);
	OSStart();
  800700:	080bf180 	call	80bf18 <OSStart>

	OSTaskCreateExt(taskWriteSDCard, NULL, (void *) &taskWriteSDCard_stk[TASK_STACKSIZE - 1],
  800704:	018020b4 	movhi	r6,130
  800708:	318b2304 	addi	r6,r6,11404
  80070c:	00800084 	movi	r2,2
  800710:	d8800015 	stw	r2,0(sp)
  800714:	008020b4 	movhi	r2,130
  800718:	10832404 	addi	r2,r2,3216
  80071c:	d8800115 	stw	r2,4(sp)
  800720:	00820004 	movi	r2,2048
  800724:	d8800215 	stw	r2,8(sp)
  800728:	d8000315 	stw	zero,12(sp)
  80072c:	d8000415 	stw	zero,16(sp)
  800730:	01002034 	movhi	r4,128
  800734:	2100d604 	addi	r4,r4,856
  800738:	000b883a 	mov	r5,zero
  80073c:	01c00084 	movi	r7,2
  800740:	0811cf00 	call	811cf0 <OSTaskCreateExt>
			TASKWRITESDCARD_PRIORITY, TASKWRITESDCARD_PRIORITY, taskWriteSDCard_stk, TASK_STACKSIZE, NULL, 0);



	OSTaskCreateExt(taskReadSDCard, NULL, (void *) &taskReadSDCard_stk[TASK_STACKSIZE - 1],
  800744:	018020b4 	movhi	r6,130
  800748:	31832304 	addi	r6,r6,3212
  80074c:	008000c4 	movi	r2,3
  800750:	d8800015 	stw	r2,0(sp)
  800754:	008020b4 	movhi	r2,130
  800758:	10bb2404 	addi	r2,r2,-4976
  80075c:	d8800115 	stw	r2,4(sp)
  800760:	00820004 	movi	r2,2048
  800764:	d8800215 	stw	r2,8(sp)
  800768:	d8000315 	stw	zero,12(sp)
  80076c:	d8000415 	stw	zero,16(sp)
  800770:	01002034 	movhi	r4,128
  800774:	21014a04 	addi	r4,r4,1320
  800778:	000b883a 	mov	r5,zero
  80077c:	01c000c4 	movi	r7,3
  800780:	0811cf00 	call	811cf0 <OSTaskCreateExt>
			TASKREADSDCARD_PRIORITY, TASKREADSDCARD_PRIORITY, taskReadSDCard_stk, TASK_STACKSIZE, NULL, 0);
	OSStart();
  800784:	080bf180 	call	80bf18 <OSStart>
	return 0;
  800788:	0005883a 	mov	r2,zero
}
  80078c:	e037883a 	mov	sp,fp
  800790:	dfc00117 	ldw	ra,4(sp)
  800794:	df000017 	ldw	fp,0(sp)
  800798:	dec00204 	addi	sp,sp,8
  80079c:	f800283a 	ret

008007a0 <memset>:
  8007a0:	008000c4 	movi	r2,3
  8007a4:	29403fcc 	andi	r5,r5,255
  8007a8:	2007883a 	mov	r3,r4
  8007ac:	1180022e 	bgeu	r2,r6,8007b8 <memset+0x18>
  8007b0:	2084703a 	and	r2,r4,r2
  8007b4:	10000826 	beq	r2,zero,8007d8 <memset+0x38>
  8007b8:	30000526 	beq	r6,zero,8007d0 <memset+0x30>
  8007bc:	2805883a 	mov	r2,r5
  8007c0:	30cd883a 	add	r6,r6,r3
  8007c4:	18800005 	stb	r2,0(r3)
  8007c8:	18c00044 	addi	r3,r3,1
  8007cc:	19bffd1e 	bne	r3,r6,8007c4 <memset+0x24>
  8007d0:	2005883a 	mov	r2,r4
  8007d4:	f800283a 	ret
  8007d8:	2804923a 	slli	r2,r5,8
  8007dc:	020003c4 	movi	r8,15
  8007e0:	200f883a 	mov	r7,r4
  8007e4:	2884b03a 	or	r2,r5,r2
  8007e8:	1006943a 	slli	r3,r2,16
  8007ec:	10c6b03a 	or	r3,r2,r3
  8007f0:	41800a2e 	bgeu	r8,r6,80081c <memset+0x7c>
  8007f4:	4005883a 	mov	r2,r8
  8007f8:	31bffc04 	addi	r6,r6,-16
  8007fc:	38c00015 	stw	r3,0(r7)
  800800:	38c00115 	stw	r3,4(r7)
  800804:	38c00215 	stw	r3,8(r7)
  800808:	38c00315 	stw	r3,12(r7)
  80080c:	39c00404 	addi	r7,r7,16
  800810:	11bff936 	bltu	r2,r6,8007f8 <memset+0x58>
  800814:	008000c4 	movi	r2,3
  800818:	1180052e 	bgeu	r2,r6,800830 <memset+0x90>
  80081c:	31bfff04 	addi	r6,r6,-4
  800820:	008000c4 	movi	r2,3
  800824:	38c00015 	stw	r3,0(r7)
  800828:	39c00104 	addi	r7,r7,4
  80082c:	11bffb36 	bltu	r2,r6,80081c <memset+0x7c>
  800830:	3807883a 	mov	r3,r7
  800834:	003fe006 	br	8007b8 <memset+0x18>

00800838 <printf>:
  800838:	defffb04 	addi	sp,sp,-20
  80083c:	dfc00115 	stw	ra,4(sp)
  800840:	d9400215 	stw	r5,8(sp)
  800844:	d9800315 	stw	r6,12(sp)
  800848:	d9c00415 	stw	r7,16(sp)
  80084c:	008020b4 	movhi	r2,130
  800850:	10b3da04 	addi	r2,r2,-12440
  800854:	10c00017 	ldw	r3,0(r2)
  800858:	200b883a 	mov	r5,r4
  80085c:	d8800204 	addi	r2,sp,8
  800860:	19000217 	ldw	r4,8(r3)
  800864:	100d883a 	mov	r6,r2
  800868:	d8800015 	stw	r2,0(sp)
  80086c:	08028f40 	call	8028f4 <__vfprintf_internal>
  800870:	dfc00117 	ldw	ra,4(sp)
  800874:	dec00504 	addi	sp,sp,20
  800878:	f800283a 	ret

0080087c <_printf_r>:
  80087c:	defffc04 	addi	sp,sp,-16
  800880:	dfc00115 	stw	ra,4(sp)
  800884:	d9800215 	stw	r6,8(sp)
  800888:	d9c00315 	stw	r7,12(sp)
  80088c:	280d883a 	mov	r6,r5
  800890:	21400217 	ldw	r5,8(r4)
  800894:	d8c00204 	addi	r3,sp,8
  800898:	180f883a 	mov	r7,r3
  80089c:	d8c00015 	stw	r3,0(sp)
  8008a0:	0800a300 	call	800a30 <___vfprintf_internal_r>
  8008a4:	dfc00117 	ldw	ra,4(sp)
  8008a8:	dec00404 	addi	sp,sp,16
  8008ac:	f800283a 	ret

008008b0 <_puts_r>:
  8008b0:	defff604 	addi	sp,sp,-40
  8008b4:	dc400715 	stw	r17,28(sp)
  8008b8:	2023883a 	mov	r17,r4
  8008bc:	2809883a 	mov	r4,r5
  8008c0:	dfc00915 	stw	ra,36(sp)
  8008c4:	dcc00815 	stw	r19,32(sp)
  8008c8:	2827883a 	mov	r19,r5
  8008cc:	08009640 	call	800964 <strlen>
  8008d0:	89400217 	ldw	r5,8(r17)
  8008d4:	00c020b4 	movhi	r3,130
  8008d8:	18ec0004 	addi	r3,r3,-20480
  8008dc:	01c00044 	movi	r7,1
  8008e0:	12000044 	addi	r8,r2,1
  8008e4:	d8c00515 	stw	r3,20(sp)
  8008e8:	d9c00615 	stw	r7,24(sp)
  8008ec:	d8c00304 	addi	r3,sp,12
  8008f0:	01c00084 	movi	r7,2
  8008f4:	8809883a 	mov	r4,r17
  8008f8:	d80d883a 	mov	r6,sp
  8008fc:	d8c00015 	stw	r3,0(sp)
  800900:	dcc00315 	stw	r19,12(sp)
  800904:	da000215 	stw	r8,8(sp)
  800908:	d9c00115 	stw	r7,4(sp)
  80090c:	d8800415 	stw	r2,16(sp)
  800910:	0804bb00 	call	804bb0 <__sfvwrite_r>
  800914:	00ffffc4 	movi	r3,-1
  800918:	10000626 	beq	r2,zero,800934 <_puts_r+0x84>
  80091c:	1805883a 	mov	r2,r3
  800920:	dfc00917 	ldw	ra,36(sp)
  800924:	dcc00817 	ldw	r19,32(sp)
  800928:	dc400717 	ldw	r17,28(sp)
  80092c:	dec00a04 	addi	sp,sp,40
  800930:	f800283a 	ret
  800934:	00c00284 	movi	r3,10
  800938:	1805883a 	mov	r2,r3
  80093c:	dfc00917 	ldw	ra,36(sp)
  800940:	dcc00817 	ldw	r19,32(sp)
  800944:	dc400717 	ldw	r17,28(sp)
  800948:	dec00a04 	addi	sp,sp,40
  80094c:	f800283a 	ret

00800950 <puts>:
  800950:	008020b4 	movhi	r2,130
  800954:	10b3da04 	addi	r2,r2,-12440
  800958:	200b883a 	mov	r5,r4
  80095c:	11000017 	ldw	r4,0(r2)
  800960:	08008b01 	jmpi	8008b0 <_puts_r>

00800964 <strlen>:
  800964:	208000cc 	andi	r2,r4,3
  800968:	2011883a 	mov	r8,r4
  80096c:	1000161e 	bne	r2,zero,8009c8 <strlen+0x64>
  800970:	20c00017 	ldw	r3,0(r4)
  800974:	017fbff4 	movhi	r5,65279
  800978:	297fbfc4 	addi	r5,r5,-257
  80097c:	01e02074 	movhi	r7,32897
  800980:	39e02004 	addi	r7,r7,-32640
  800984:	1945883a 	add	r2,r3,r5
  800988:	11c4703a 	and	r2,r2,r7
  80098c:	00c6303a 	nor	r3,zero,r3
  800990:	1886703a 	and	r3,r3,r2
  800994:	18000c1e 	bne	r3,zero,8009c8 <strlen+0x64>
  800998:	280d883a 	mov	r6,r5
  80099c:	380b883a 	mov	r5,r7
  8009a0:	21000104 	addi	r4,r4,4
  8009a4:	20800017 	ldw	r2,0(r4)
  8009a8:	1187883a 	add	r3,r2,r6
  8009ac:	1946703a 	and	r3,r3,r5
  8009b0:	0084303a 	nor	r2,zero,r2
  8009b4:	10c4703a 	and	r2,r2,r3
  8009b8:	103ff926 	beq	r2,zero,8009a0 <strlen+0x3c>
  8009bc:	20800007 	ldb	r2,0(r4)
  8009c0:	10000326 	beq	r2,zero,8009d0 <strlen+0x6c>
  8009c4:	21000044 	addi	r4,r4,1
  8009c8:	20800007 	ldb	r2,0(r4)
  8009cc:	103ffd1e 	bne	r2,zero,8009c4 <strlen+0x60>
  8009d0:	2205c83a 	sub	r2,r4,r8
  8009d4:	f800283a 	ret

008009d8 <__sprint_r>:
  8009d8:	30800217 	ldw	r2,8(r6)
  8009dc:	defffe04 	addi	sp,sp,-8
  8009e0:	dc000015 	stw	r16,0(sp)
  8009e4:	dfc00115 	stw	ra,4(sp)
  8009e8:	3021883a 	mov	r16,r6
  8009ec:	0007883a 	mov	r3,zero
  8009f0:	1000061e 	bne	r2,zero,800a0c <__sprint_r+0x34>
  8009f4:	1805883a 	mov	r2,r3
  8009f8:	30000115 	stw	zero,4(r6)
  8009fc:	dfc00117 	ldw	ra,4(sp)
  800a00:	dc000017 	ldw	r16,0(sp)
  800a04:	dec00204 	addi	sp,sp,8
  800a08:	f800283a 	ret
  800a0c:	0804bb00 	call	804bb0 <__sfvwrite_r>
  800a10:	1007883a 	mov	r3,r2
  800a14:	1805883a 	mov	r2,r3
  800a18:	80000115 	stw	zero,4(r16)
  800a1c:	80000215 	stw	zero,8(r16)
  800a20:	dfc00117 	ldw	ra,4(sp)
  800a24:	dc000017 	ldw	r16,0(sp)
  800a28:	dec00204 	addi	sp,sp,8
  800a2c:	f800283a 	ret

00800a30 <___vfprintf_internal_r>:
  800a30:	defea404 	addi	sp,sp,-1392
  800a34:	dd815815 	stw	r22,1376(sp)
  800a38:	dc015215 	stw	r16,1352(sp)
  800a3c:	d9c15115 	stw	r7,1348(sp)
  800a40:	dfc15b15 	stw	ra,1388(sp)
  800a44:	df015a15 	stw	fp,1384(sp)
  800a48:	ddc15915 	stw	r23,1380(sp)
  800a4c:	dd415715 	stw	r21,1372(sp)
  800a50:	dd015615 	stw	r20,1368(sp)
  800a54:	dcc15515 	stw	r19,1364(sp)
  800a58:	dc815415 	stw	r18,1360(sp)
  800a5c:	dc415315 	stw	r17,1356(sp)
  800a60:	282d883a 	mov	r22,r5
  800a64:	3021883a 	mov	r16,r6
  800a68:	d9014f15 	stw	r4,1340(sp)
  800a6c:	08051d40 	call	8051d4 <_localeconv_r>
  800a70:	10800017 	ldw	r2,0(r2)
  800a74:	d9c15117 	ldw	r7,1348(sp)
  800a78:	d8814915 	stw	r2,1316(sp)
  800a7c:	d8814f17 	ldw	r2,1340(sp)
  800a80:	10000226 	beq	r2,zero,800a8c <___vfprintf_internal_r+0x5c>
  800a84:	10800e17 	ldw	r2,56(r2)
  800a88:	10020d26 	beq	r2,zero,8012c0 <___vfprintf_internal_r+0x890>
  800a8c:	b080030b 	ldhu	r2,12(r22)
  800a90:	1080020c 	andi	r2,r2,8
  800a94:	10020e26 	beq	r2,zero,8012d0 <___vfprintf_internal_r+0x8a0>
  800a98:	b0800417 	ldw	r2,16(r22)
  800a9c:	10020c26 	beq	r2,zero,8012d0 <___vfprintf_internal_r+0x8a0>
  800aa0:	b200030b 	ldhu	r8,12(r22)
  800aa4:	00800284 	movi	r2,10
  800aa8:	40c0068c 	andi	r3,r8,26
  800aac:	18802f1e 	bne	r3,r2,800b6c <___vfprintf_internal_r+0x13c>
  800ab0:	b080038f 	ldh	r2,14(r22)
  800ab4:	10002d16 	blt	r2,zero,800b6c <___vfprintf_internal_r+0x13c>
  800ab8:	b240038b 	ldhu	r9,14(r22)
  800abc:	b2800717 	ldw	r10,28(r22)
  800ac0:	b2c00917 	ldw	r11,36(r22)
  800ac4:	d9014f17 	ldw	r4,1340(sp)
  800ac8:	dc402904 	addi	r17,sp,164
  800acc:	d8804004 	addi	r2,sp,256
  800ad0:	00c10004 	movi	r3,1024
  800ad4:	423fff4c 	andi	r8,r8,65533
  800ad8:	800d883a 	mov	r6,r16
  800adc:	880b883a 	mov	r5,r17
  800ae0:	da002c0d 	sth	r8,176(sp)
  800ae4:	da402c8d 	sth	r9,178(sp)
  800ae8:	da803015 	stw	r10,192(sp)
  800aec:	dac03215 	stw	r11,200(sp)
  800af0:	d8802d15 	stw	r2,180(sp)
  800af4:	d8c02e15 	stw	r3,184(sp)
  800af8:	d8802915 	stw	r2,164(sp)
  800afc:	d8c02b15 	stw	r3,172(sp)
  800b00:	d8002f15 	stw	zero,188(sp)
  800b04:	0800a300 	call	800a30 <___vfprintf_internal_r>
  800b08:	d8814b15 	stw	r2,1324(sp)
  800b0c:	10000416 	blt	r2,zero,800b20 <___vfprintf_internal_r+0xf0>
  800b10:	d9014f17 	ldw	r4,1340(sp)
  800b14:	880b883a 	mov	r5,r17
  800b18:	080424c0 	call	80424c <_fflush_r>
  800b1c:	1002321e 	bne	r2,zero,8013e8 <___vfprintf_internal_r+0x9b8>
  800b20:	d8802c0b 	ldhu	r2,176(sp)
  800b24:	1080100c 	andi	r2,r2,64
  800b28:	10000326 	beq	r2,zero,800b38 <___vfprintf_internal_r+0x108>
  800b2c:	b080030b 	ldhu	r2,12(r22)
  800b30:	10801014 	ori	r2,r2,64
  800b34:	b080030d 	sth	r2,12(r22)
  800b38:	d8814b17 	ldw	r2,1324(sp)
  800b3c:	dfc15b17 	ldw	ra,1388(sp)
  800b40:	df015a17 	ldw	fp,1384(sp)
  800b44:	ddc15917 	ldw	r23,1380(sp)
  800b48:	dd815817 	ldw	r22,1376(sp)
  800b4c:	dd415717 	ldw	r21,1372(sp)
  800b50:	dd015617 	ldw	r20,1368(sp)
  800b54:	dcc15517 	ldw	r19,1364(sp)
  800b58:	dc815417 	ldw	r18,1360(sp)
  800b5c:	dc415317 	ldw	r17,1356(sp)
  800b60:	dc015217 	ldw	r16,1352(sp)
  800b64:	dec15c04 	addi	sp,sp,1392
  800b68:	f800283a 	ret
  800b6c:	0005883a 	mov	r2,zero
  800b70:	0007883a 	mov	r3,zero
  800b74:	dd401904 	addi	r21,sp,100
  800b78:	d8814215 	stw	r2,1288(sp)
  800b7c:	802f883a 	mov	r23,r16
  800b80:	d8c14315 	stw	r3,1292(sp)
  800b84:	d8014b15 	stw	zero,1324(sp)
  800b88:	d8014815 	stw	zero,1312(sp)
  800b8c:	d8014415 	stw	zero,1296(sp)
  800b90:	d8014715 	stw	zero,1308(sp)
  800b94:	dd400c15 	stw	r21,48(sp)
  800b98:	d8000e15 	stw	zero,56(sp)
  800b9c:	d8000d15 	stw	zero,52(sp)
  800ba0:	b8800007 	ldb	r2,0(r23)
  800ba4:	10001926 	beq	r2,zero,800c0c <___vfprintf_internal_r+0x1dc>
  800ba8:	00c00944 	movi	r3,37
  800bac:	10c01726 	beq	r2,r3,800c0c <___vfprintf_internal_r+0x1dc>
  800bb0:	b821883a 	mov	r16,r23
  800bb4:	00000106 	br	800bbc <___vfprintf_internal_r+0x18c>
  800bb8:	10c00326 	beq	r2,r3,800bc8 <___vfprintf_internal_r+0x198>
  800bbc:	84000044 	addi	r16,r16,1
  800bc0:	80800007 	ldb	r2,0(r16)
  800bc4:	103ffc1e 	bne	r2,zero,800bb8 <___vfprintf_internal_r+0x188>
  800bc8:	85e7c83a 	sub	r19,r16,r23
  800bcc:	98000e26 	beq	r19,zero,800c08 <___vfprintf_internal_r+0x1d8>
  800bd0:	dc800e17 	ldw	r18,56(sp)
  800bd4:	dc400d17 	ldw	r17,52(sp)
  800bd8:	008001c4 	movi	r2,7
  800bdc:	94e5883a 	add	r18,r18,r19
  800be0:	8c400044 	addi	r17,r17,1
  800be4:	adc00015 	stw	r23,0(r21)
  800be8:	dc800e15 	stw	r18,56(sp)
  800bec:	acc00115 	stw	r19,4(r21)
  800bf0:	dc400d15 	stw	r17,52(sp)
  800bf4:	14428b16 	blt	r2,r17,801624 <___vfprintf_internal_r+0xbf4>
  800bf8:	ad400204 	addi	r21,r21,8
  800bfc:	d9014b17 	ldw	r4,1324(sp)
  800c00:	24c9883a 	add	r4,r4,r19
  800c04:	d9014b15 	stw	r4,1324(sp)
  800c08:	802f883a 	mov	r23,r16
  800c0c:	b8800007 	ldb	r2,0(r23)
  800c10:	10013c26 	beq	r2,zero,801104 <___vfprintf_internal_r+0x6d4>
  800c14:	bdc00044 	addi	r23,r23,1
  800c18:	d8000405 	stb	zero,16(sp)
  800c1c:	b8c00007 	ldb	r3,0(r23)
  800c20:	04ffffc4 	movi	r19,-1
  800c24:	d8014c15 	stw	zero,1328(sp)
  800c28:	d8014a15 	stw	zero,1320(sp)
  800c2c:	d8c14d15 	stw	r3,1332(sp)
  800c30:	bdc00044 	addi	r23,r23,1
  800c34:	d9414d17 	ldw	r5,1332(sp)
  800c38:	00801604 	movi	r2,88
  800c3c:	28fff804 	addi	r3,r5,-32
  800c40:	10c06036 	bltu	r2,r3,800dc4 <___vfprintf_internal_r+0x394>
  800c44:	18c5883a 	add	r2,r3,r3
  800c48:	1085883a 	add	r2,r2,r2
  800c4c:	00c02034 	movhi	r3,128
  800c50:	18c31804 	addi	r3,r3,3168
  800c54:	10c5883a 	add	r2,r2,r3
  800c58:	11000017 	ldw	r4,0(r2)
  800c5c:	2000683a 	jmp	r4
  800c60:	00801bd4 	movui	r2,111
  800c64:	00800dc4 	movi	r2,55
  800c68:	00800dc4 	movi	r2,55
  800c6c:	00801bc0 	call	801bc <OSCtxSw_SWITCH_PC+0x8017c>
  800c70:	00800dc4 	movi	r2,55
  800c74:	00800dc4 	movi	r2,55
  800c78:	00800dc4 	movi	r2,55
  800c7c:	00800dc4 	movi	r2,55
  800c80:	00800dc4 	movi	r2,55
  800c84:	00800dc4 	movi	r2,55
  800c88:	008019a0 	cmpeqi	r2,zero,102
  800c8c:	00801bb0 	cmpltui	r2,zero,110
  800c90:	00800dc4 	movi	r2,55
  800c94:	008019b8 	rdprs	r2,zero,102
  800c98:	00801c58 	cmpnei	r2,zero,113
  800c9c:	00800dc4 	movi	r2,55
  800ca0:	00801c44 	movi	r2,113
  800ca4:	00801c00 	call	801c0 <OSCtxSw_SWITCH_PC+0x80180>
  800ca8:	00801c00 	call	801c0 <OSCtxSw_SWITCH_PC+0x80180>
  800cac:	00801c00 	call	801c0 <OSCtxSw_SWITCH_PC+0x80180>
  800cb0:	00801c00 	call	801c0 <OSCtxSw_SWITCH_PC+0x80180>
  800cb4:	00801c00 	call	801c0 <OSCtxSw_SWITCH_PC+0x80180>
  800cb8:	00801c00 	call	801c0 <OSCtxSw_SWITCH_PC+0x80180>
  800cbc:	00801c00 	call	801c0 <OSCtxSw_SWITCH_PC+0x80180>
  800cc0:	00801c00 	call	801c0 <OSCtxSw_SWITCH_PC+0x80180>
  800cc4:	00801c00 	call	801c0 <OSCtxSw_SWITCH_PC+0x80180>
  800cc8:	00800dc4 	movi	r2,55
  800ccc:	00800dc4 	movi	r2,55
  800cd0:	00800dc4 	movi	r2,55
  800cd4:	00800dc4 	movi	r2,55
  800cd8:	00800dc4 	movi	r2,55
  800cdc:	00800dc4 	movi	r2,55
  800ce0:	00800dc4 	movi	r2,55
  800ce4:	00800dc4 	movi	r2,55
  800ce8:	00800dc4 	movi	r2,55
  800cec:	00800dc4 	movi	r2,55
  800cf0:	0080141c 	xori	r2,zero,80
  800cf4:	00801a88 	cmpgei	r2,zero,106
  800cf8:	00800dc4 	movi	r2,55
  800cfc:	00801a88 	cmpgei	r2,zero,106
  800d00:	00800dc4 	movi	r2,55
  800d04:	00800dc4 	movi	r2,55
  800d08:	00800dc4 	movi	r2,55
  800d0c:	00800dc4 	movi	r2,55
  800d10:	00801bec 	andhi	r2,zero,111
  800d14:	00800dc4 	movi	r2,55
  800d18:	00800dc4 	movi	r2,55
  800d1c:	008014d0 	cmplti	r2,zero,83
  800d20:	00800dc4 	movi	r2,55
  800d24:	00800dc4 	movi	r2,55
  800d28:	00800dc4 	movi	r2,55
  800d2c:	00800dc4 	movi	r2,55
  800d30:	00800dc4 	movi	r2,55
  800d34:	0080151c 	xori	r2,zero,84
  800d38:	00800dc4 	movi	r2,55
  800d3c:	00800dc4 	movi	r2,55
  800d40:	00801b3c 	xorhi	r2,zero,108
  800d44:	00800dc4 	movi	r2,55
  800d48:	00800dc4 	movi	r2,55
  800d4c:	00800dc4 	movi	r2,55
  800d50:	00800dc4 	movi	r2,55
  800d54:	00800dc4 	movi	r2,55
  800d58:	00800dc4 	movi	r2,55
  800d5c:	00800dc4 	movi	r2,55
  800d60:	00800dc4 	movi	r2,55
  800d64:	00800dc4 	movi	r2,55
  800d68:	00800dc4 	movi	r2,55
  800d6c:	00801b10 	cmplti	r2,zero,108
  800d70:	00801428 	cmpgeui	r2,zero,80
  800d74:	00801a88 	cmpgei	r2,zero,106
  800d78:	00801a88 	cmpgei	r2,zero,106
  800d7c:	00801a88 	cmpgei	r2,zero,106
  800d80:	00801a74 	movhi	r2,105
  800d84:	00801428 	cmpgeui	r2,zero,80
  800d88:	00800dc4 	movi	r2,55
  800d8c:	00800dc4 	movi	r2,55
  800d90:	008019fc 	xorhi	r2,zero,103
  800d94:	00800dc4 	movi	r2,55
  800d98:	008019cc 	andi	r2,zero,103
  800d9c:	008014dc 	xori	r2,zero,83
  800da0:	00801a2c 	andhi	r2,zero,104
  800da4:	00801a18 	cmpnei	r2,zero,104
  800da8:	00800dc4 	movi	r2,55
  800dac:	00801cc0 	call	801cc <OSCtxSw_SWITCH_PC+0x8018c>
  800db0:	00800dc4 	movi	r2,55
  800db4:	00801528 	cmpgeui	r2,zero,84
  800db8:	00800dc4 	movi	r2,55
  800dbc:	00800dc4 	movi	r2,55
  800dc0:	00801ba0 	cmpeqi	r2,zero,110
  800dc4:	d9014d17 	ldw	r4,1332(sp)
  800dc8:	2000ce26 	beq	r4,zero,801104 <___vfprintf_internal_r+0x6d4>
  800dcc:	01400044 	movi	r5,1
  800dd0:	d9800f04 	addi	r6,sp,60
  800dd4:	d9c14015 	stw	r7,1280(sp)
  800dd8:	d9414515 	stw	r5,1300(sp)
  800ddc:	d9814115 	stw	r6,1284(sp)
  800de0:	280f883a 	mov	r7,r5
  800de4:	d9000f05 	stb	r4,60(sp)
  800de8:	d8000405 	stb	zero,16(sp)
  800dec:	d8014615 	stw	zero,1304(sp)
  800df0:	d8c14c17 	ldw	r3,1328(sp)
  800df4:	1880008c 	andi	r2,r3,2
  800df8:	1005003a 	cmpeq	r2,r2,zero
  800dfc:	d8815015 	stw	r2,1344(sp)
  800e00:	1000031e 	bne	r2,zero,800e10 <___vfprintf_internal_r+0x3e0>
  800e04:	d9014517 	ldw	r4,1300(sp)
  800e08:	21000084 	addi	r4,r4,2
  800e0c:	d9014515 	stw	r4,1300(sp)
  800e10:	d9414c17 	ldw	r5,1328(sp)
  800e14:	2940210c 	andi	r5,r5,132
  800e18:	d9414e15 	stw	r5,1336(sp)
  800e1c:	28002d1e 	bne	r5,zero,800ed4 <___vfprintf_internal_r+0x4a4>
  800e20:	d9814a17 	ldw	r6,1320(sp)
  800e24:	d8814517 	ldw	r2,1300(sp)
  800e28:	30a1c83a 	sub	r16,r6,r2
  800e2c:	0400290e 	bge	zero,r16,800ed4 <___vfprintf_internal_r+0x4a4>
  800e30:	00800404 	movi	r2,16
  800e34:	14045e0e 	bge	r2,r16,801fb0 <___vfprintf_internal_r+0x1580>
  800e38:	dc800e17 	ldw	r18,56(sp)
  800e3c:	dc400d17 	ldw	r17,52(sp)
  800e40:	1027883a 	mov	r19,r2
  800e44:	070020b4 	movhi	fp,130
  800e48:	e72c1c84 	addi	fp,fp,-20366
  800e4c:	050001c4 	movi	r20,7
  800e50:	00000306 	br	800e60 <___vfprintf_internal_r+0x430>
  800e54:	843ffc04 	addi	r16,r16,-16
  800e58:	ad400204 	addi	r21,r21,8
  800e5c:	9c00130e 	bge	r19,r16,800eac <___vfprintf_internal_r+0x47c>
  800e60:	94800404 	addi	r18,r18,16
  800e64:	8c400044 	addi	r17,r17,1
  800e68:	af000015 	stw	fp,0(r21)
  800e6c:	acc00115 	stw	r19,4(r21)
  800e70:	dc800e15 	stw	r18,56(sp)
  800e74:	dc400d15 	stw	r17,52(sp)
  800e78:	a47ff60e 	bge	r20,r17,800e54 <___vfprintf_internal_r+0x424>
  800e7c:	d9014f17 	ldw	r4,1340(sp)
  800e80:	b00b883a 	mov	r5,r22
  800e84:	d9800c04 	addi	r6,sp,48
  800e88:	d9c15115 	stw	r7,1348(sp)
  800e8c:	08009d80 	call	8009d8 <__sprint_r>
  800e90:	d9c15117 	ldw	r7,1348(sp)
  800e94:	10009e1e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  800e98:	843ffc04 	addi	r16,r16,-16
  800e9c:	dc800e17 	ldw	r18,56(sp)
  800ea0:	dc400d17 	ldw	r17,52(sp)
  800ea4:	dd401904 	addi	r21,sp,100
  800ea8:	9c3fed16 	blt	r19,r16,800e60 <___vfprintf_internal_r+0x430>
  800eac:	9425883a 	add	r18,r18,r16
  800eb0:	8c400044 	addi	r17,r17,1
  800eb4:	008001c4 	movi	r2,7
  800eb8:	af000015 	stw	fp,0(r21)
  800ebc:	ac000115 	stw	r16,4(r21)
  800ec0:	dc800e15 	stw	r18,56(sp)
  800ec4:	dc400d15 	stw	r17,52(sp)
  800ec8:	1441f516 	blt	r2,r17,8016a0 <___vfprintf_internal_r+0xc70>
  800ecc:	ad400204 	addi	r21,r21,8
  800ed0:	00000206 	br	800edc <___vfprintf_internal_r+0x4ac>
  800ed4:	dc800e17 	ldw	r18,56(sp)
  800ed8:	dc400d17 	ldw	r17,52(sp)
  800edc:	d8800407 	ldb	r2,16(sp)
  800ee0:	10000b26 	beq	r2,zero,800f10 <___vfprintf_internal_r+0x4e0>
  800ee4:	00800044 	movi	r2,1
  800ee8:	94800044 	addi	r18,r18,1
  800eec:	8c400044 	addi	r17,r17,1
  800ef0:	a8800115 	stw	r2,4(r21)
  800ef4:	d8c00404 	addi	r3,sp,16
  800ef8:	008001c4 	movi	r2,7
  800efc:	a8c00015 	stw	r3,0(r21)
  800f00:	dc800e15 	stw	r18,56(sp)
  800f04:	dc400d15 	stw	r17,52(sp)
  800f08:	1441da16 	blt	r2,r17,801674 <___vfprintf_internal_r+0xc44>
  800f0c:	ad400204 	addi	r21,r21,8
  800f10:	d9015017 	ldw	r4,1344(sp)
  800f14:	20000b1e 	bne	r4,zero,800f44 <___vfprintf_internal_r+0x514>
  800f18:	d8800444 	addi	r2,sp,17
  800f1c:	94800084 	addi	r18,r18,2
  800f20:	8c400044 	addi	r17,r17,1
  800f24:	a8800015 	stw	r2,0(r21)
  800f28:	00c00084 	movi	r3,2
  800f2c:	008001c4 	movi	r2,7
  800f30:	a8c00115 	stw	r3,4(r21)
  800f34:	dc800e15 	stw	r18,56(sp)
  800f38:	dc400d15 	stw	r17,52(sp)
  800f3c:	1441c216 	blt	r2,r17,801648 <___vfprintf_internal_r+0xc18>
  800f40:	ad400204 	addi	r21,r21,8
  800f44:	d9414e17 	ldw	r5,1336(sp)
  800f48:	00802004 	movi	r2,128
  800f4c:	2880b126 	beq	r5,r2,801214 <___vfprintf_internal_r+0x7e4>
  800f50:	d8c14617 	ldw	r3,1304(sp)
  800f54:	19e1c83a 	sub	r16,r3,r7
  800f58:	0400260e 	bge	zero,r16,800ff4 <___vfprintf_internal_r+0x5c4>
  800f5c:	00800404 	movi	r2,16
  800f60:	1403cf0e 	bge	r2,r16,801ea0 <___vfprintf_internal_r+0x1470>
  800f64:	1027883a 	mov	r19,r2
  800f68:	070020b4 	movhi	fp,130
  800f6c:	e72c1884 	addi	fp,fp,-20382
  800f70:	050001c4 	movi	r20,7
  800f74:	00000306 	br	800f84 <___vfprintf_internal_r+0x554>
  800f78:	843ffc04 	addi	r16,r16,-16
  800f7c:	ad400204 	addi	r21,r21,8
  800f80:	9c00130e 	bge	r19,r16,800fd0 <___vfprintf_internal_r+0x5a0>
  800f84:	94800404 	addi	r18,r18,16
  800f88:	8c400044 	addi	r17,r17,1
  800f8c:	af000015 	stw	fp,0(r21)
  800f90:	acc00115 	stw	r19,4(r21)
  800f94:	dc800e15 	stw	r18,56(sp)
  800f98:	dc400d15 	stw	r17,52(sp)
  800f9c:	a47ff60e 	bge	r20,r17,800f78 <___vfprintf_internal_r+0x548>
  800fa0:	d9014f17 	ldw	r4,1340(sp)
  800fa4:	b00b883a 	mov	r5,r22
  800fa8:	d9800c04 	addi	r6,sp,48
  800fac:	d9c15115 	stw	r7,1348(sp)
  800fb0:	08009d80 	call	8009d8 <__sprint_r>
  800fb4:	d9c15117 	ldw	r7,1348(sp)
  800fb8:	1000551e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  800fbc:	843ffc04 	addi	r16,r16,-16
  800fc0:	dc800e17 	ldw	r18,56(sp)
  800fc4:	dc400d17 	ldw	r17,52(sp)
  800fc8:	dd401904 	addi	r21,sp,100
  800fcc:	9c3fed16 	blt	r19,r16,800f84 <___vfprintf_internal_r+0x554>
  800fd0:	9425883a 	add	r18,r18,r16
  800fd4:	8c400044 	addi	r17,r17,1
  800fd8:	008001c4 	movi	r2,7
  800fdc:	af000015 	stw	fp,0(r21)
  800fe0:	ac000115 	stw	r16,4(r21)
  800fe4:	dc800e15 	stw	r18,56(sp)
  800fe8:	dc400d15 	stw	r17,52(sp)
  800fec:	14418216 	blt	r2,r17,8015f8 <___vfprintf_internal_r+0xbc8>
  800ff0:	ad400204 	addi	r21,r21,8
  800ff4:	d9014c17 	ldw	r4,1328(sp)
  800ff8:	2080400c 	andi	r2,r4,256
  800ffc:	10004a1e 	bne	r2,zero,801128 <___vfprintf_internal_r+0x6f8>
  801000:	d9414117 	ldw	r5,1284(sp)
  801004:	91e5883a 	add	r18,r18,r7
  801008:	8c400044 	addi	r17,r17,1
  80100c:	008001c4 	movi	r2,7
  801010:	a9400015 	stw	r5,0(r21)
  801014:	a9c00115 	stw	r7,4(r21)
  801018:	dc800e15 	stw	r18,56(sp)
  80101c:	dc400d15 	stw	r17,52(sp)
  801020:	14416716 	blt	r2,r17,8015c0 <___vfprintf_internal_r+0xb90>
  801024:	a8c00204 	addi	r3,r21,8
  801028:	d9814c17 	ldw	r6,1328(sp)
  80102c:	3080010c 	andi	r2,r6,4
  801030:	10002826 	beq	r2,zero,8010d4 <___vfprintf_internal_r+0x6a4>
  801034:	d8814a17 	ldw	r2,1320(sp)
  801038:	d9014517 	ldw	r4,1300(sp)
  80103c:	1121c83a 	sub	r16,r2,r4
  801040:	0400240e 	bge	zero,r16,8010d4 <___vfprintf_internal_r+0x6a4>
  801044:	00800404 	movi	r2,16
  801048:	1404550e 	bge	r2,r16,8021a0 <___vfprintf_internal_r+0x1770>
  80104c:	dc400d17 	ldw	r17,52(sp)
  801050:	1027883a 	mov	r19,r2
  801054:	070020b4 	movhi	fp,130
  801058:	e72c1c84 	addi	fp,fp,-20366
  80105c:	050001c4 	movi	r20,7
  801060:	00000306 	br	801070 <___vfprintf_internal_r+0x640>
  801064:	843ffc04 	addi	r16,r16,-16
  801068:	18c00204 	addi	r3,r3,8
  80106c:	9c00110e 	bge	r19,r16,8010b4 <___vfprintf_internal_r+0x684>
  801070:	94800404 	addi	r18,r18,16
  801074:	8c400044 	addi	r17,r17,1
  801078:	1f000015 	stw	fp,0(r3)
  80107c:	1cc00115 	stw	r19,4(r3)
  801080:	dc800e15 	stw	r18,56(sp)
  801084:	dc400d15 	stw	r17,52(sp)
  801088:	a47ff60e 	bge	r20,r17,801064 <___vfprintf_internal_r+0x634>
  80108c:	d9014f17 	ldw	r4,1340(sp)
  801090:	b00b883a 	mov	r5,r22
  801094:	d9800c04 	addi	r6,sp,48
  801098:	08009d80 	call	8009d8 <__sprint_r>
  80109c:	10001c1e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  8010a0:	843ffc04 	addi	r16,r16,-16
  8010a4:	dc800e17 	ldw	r18,56(sp)
  8010a8:	dc400d17 	ldw	r17,52(sp)
  8010ac:	d8c01904 	addi	r3,sp,100
  8010b0:	9c3fef16 	blt	r19,r16,801070 <___vfprintf_internal_r+0x640>
  8010b4:	9425883a 	add	r18,r18,r16
  8010b8:	8c400044 	addi	r17,r17,1
  8010bc:	008001c4 	movi	r2,7
  8010c0:	1f000015 	stw	fp,0(r3)
  8010c4:	1c000115 	stw	r16,4(r3)
  8010c8:	dc800e15 	stw	r18,56(sp)
  8010cc:	dc400d15 	stw	r17,52(sp)
  8010d0:	1440cb16 	blt	r2,r17,801400 <___vfprintf_internal_r+0x9d0>
  8010d4:	d8814a17 	ldw	r2,1320(sp)
  8010d8:	d9414517 	ldw	r5,1300(sp)
  8010dc:	1140010e 	bge	r2,r5,8010e4 <___vfprintf_internal_r+0x6b4>
  8010e0:	2805883a 	mov	r2,r5
  8010e4:	d9814b17 	ldw	r6,1324(sp)
  8010e8:	308d883a 	add	r6,r6,r2
  8010ec:	d9814b15 	stw	r6,1324(sp)
  8010f0:	90013b1e 	bne	r18,zero,8015e0 <___vfprintf_internal_r+0xbb0>
  8010f4:	d9c14017 	ldw	r7,1280(sp)
  8010f8:	dd401904 	addi	r21,sp,100
  8010fc:	d8000d15 	stw	zero,52(sp)
  801100:	003ea706 	br	800ba0 <___vfprintf_internal_r+0x170>
  801104:	d8800e17 	ldw	r2,56(sp)
  801108:	1005451e 	bne	r2,zero,802620 <___vfprintf_internal_r+0x1bf0>
  80110c:	d8000d15 	stw	zero,52(sp)
  801110:	b080030b 	ldhu	r2,12(r22)
  801114:	1080100c 	andi	r2,r2,64
  801118:	103e8726 	beq	r2,zero,800b38 <___vfprintf_internal_r+0x108>
  80111c:	00bfffc4 	movi	r2,-1
  801120:	d8814b15 	stw	r2,1324(sp)
  801124:	003e8406 	br	800b38 <___vfprintf_internal_r+0x108>
  801128:	d9814d17 	ldw	r6,1332(sp)
  80112c:	00801944 	movi	r2,101
  801130:	11806e16 	blt	r2,r6,8012ec <___vfprintf_internal_r+0x8bc>
  801134:	d9414717 	ldw	r5,1308(sp)
  801138:	00c00044 	movi	r3,1
  80113c:	1943490e 	bge	r3,r5,801e64 <___vfprintf_internal_r+0x1434>
  801140:	d8814117 	ldw	r2,1284(sp)
  801144:	94800044 	addi	r18,r18,1
  801148:	8c400044 	addi	r17,r17,1
  80114c:	a8800015 	stw	r2,0(r21)
  801150:	008001c4 	movi	r2,7
  801154:	a8c00115 	stw	r3,4(r21)
  801158:	dc800e15 	stw	r18,56(sp)
  80115c:	dc400d15 	stw	r17,52(sp)
  801160:	1441ca16 	blt	r2,r17,80188c <___vfprintf_internal_r+0xe5c>
  801164:	a8c00204 	addi	r3,r21,8
  801168:	d9014917 	ldw	r4,1316(sp)
  80116c:	00800044 	movi	r2,1
  801170:	94800044 	addi	r18,r18,1
  801174:	8c400044 	addi	r17,r17,1
  801178:	18800115 	stw	r2,4(r3)
  80117c:	008001c4 	movi	r2,7
  801180:	19000015 	stw	r4,0(r3)
  801184:	dc800e15 	stw	r18,56(sp)
  801188:	dc400d15 	stw	r17,52(sp)
  80118c:	1441b616 	blt	r2,r17,801868 <___vfprintf_internal_r+0xe38>
  801190:	1cc00204 	addi	r19,r3,8
  801194:	d9014217 	ldw	r4,1288(sp)
  801198:	d9414317 	ldw	r5,1292(sp)
  80119c:	000d883a 	mov	r6,zero
  8011a0:	000f883a 	mov	r7,zero
  8011a4:	080944c0 	call	80944c <__nedf2>
  8011a8:	10017426 	beq	r2,zero,80177c <___vfprintf_internal_r+0xd4c>
  8011ac:	d9414717 	ldw	r5,1308(sp)
  8011b0:	d9814117 	ldw	r6,1284(sp)
  8011b4:	8c400044 	addi	r17,r17,1
  8011b8:	2c85883a 	add	r2,r5,r18
  8011bc:	14bfffc4 	addi	r18,r2,-1
  8011c0:	28bfffc4 	addi	r2,r5,-1
  8011c4:	30c00044 	addi	r3,r6,1
  8011c8:	98800115 	stw	r2,4(r19)
  8011cc:	008001c4 	movi	r2,7
  8011d0:	98c00015 	stw	r3,0(r19)
  8011d4:	dc800e15 	stw	r18,56(sp)
  8011d8:	dc400d15 	stw	r17,52(sp)
  8011dc:	14418e16 	blt	r2,r17,801818 <___vfprintf_internal_r+0xde8>
  8011e0:	9cc00204 	addi	r19,r19,8
  8011e4:	d9414817 	ldw	r5,1312(sp)
  8011e8:	d8800804 	addi	r2,sp,32
  8011ec:	8c400044 	addi	r17,r17,1
  8011f0:	9165883a 	add	r18,r18,r5
  8011f4:	98800015 	stw	r2,0(r19)
  8011f8:	008001c4 	movi	r2,7
  8011fc:	99400115 	stw	r5,4(r19)
  801200:	dc800e15 	stw	r18,56(sp)
  801204:	dc400d15 	stw	r17,52(sp)
  801208:	1440ed16 	blt	r2,r17,8015c0 <___vfprintf_internal_r+0xb90>
  80120c:	98c00204 	addi	r3,r19,8
  801210:	003f8506 	br	801028 <___vfprintf_internal_r+0x5f8>
  801214:	d9814a17 	ldw	r6,1320(sp)
  801218:	d8814517 	ldw	r2,1300(sp)
  80121c:	30a1c83a 	sub	r16,r6,r2
  801220:	043f4b0e 	bge	zero,r16,800f50 <___vfprintf_internal_r+0x520>
  801224:	00800404 	movi	r2,16
  801228:	14043a0e 	bge	r2,r16,802314 <___vfprintf_internal_r+0x18e4>
  80122c:	1027883a 	mov	r19,r2
  801230:	070020b4 	movhi	fp,130
  801234:	e72c1884 	addi	fp,fp,-20382
  801238:	050001c4 	movi	r20,7
  80123c:	00000306 	br	80124c <___vfprintf_internal_r+0x81c>
  801240:	843ffc04 	addi	r16,r16,-16
  801244:	ad400204 	addi	r21,r21,8
  801248:	9c00130e 	bge	r19,r16,801298 <___vfprintf_internal_r+0x868>
  80124c:	94800404 	addi	r18,r18,16
  801250:	8c400044 	addi	r17,r17,1
  801254:	af000015 	stw	fp,0(r21)
  801258:	acc00115 	stw	r19,4(r21)
  80125c:	dc800e15 	stw	r18,56(sp)
  801260:	dc400d15 	stw	r17,52(sp)
  801264:	a47ff60e 	bge	r20,r17,801240 <___vfprintf_internal_r+0x810>
  801268:	d9014f17 	ldw	r4,1340(sp)
  80126c:	b00b883a 	mov	r5,r22
  801270:	d9800c04 	addi	r6,sp,48
  801274:	d9c15115 	stw	r7,1348(sp)
  801278:	08009d80 	call	8009d8 <__sprint_r>
  80127c:	d9c15117 	ldw	r7,1348(sp)
  801280:	103fa31e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  801284:	843ffc04 	addi	r16,r16,-16
  801288:	dc800e17 	ldw	r18,56(sp)
  80128c:	dc400d17 	ldw	r17,52(sp)
  801290:	dd401904 	addi	r21,sp,100
  801294:	9c3fed16 	blt	r19,r16,80124c <___vfprintf_internal_r+0x81c>
  801298:	9425883a 	add	r18,r18,r16
  80129c:	8c400044 	addi	r17,r17,1
  8012a0:	008001c4 	movi	r2,7
  8012a4:	af000015 	stw	fp,0(r21)
  8012a8:	ac000115 	stw	r16,4(r21)
  8012ac:	dc800e15 	stw	r18,56(sp)
  8012b0:	dc400d15 	stw	r17,52(sp)
  8012b4:	14416116 	blt	r2,r17,80183c <___vfprintf_internal_r+0xe0c>
  8012b8:	ad400204 	addi	r21,r21,8
  8012bc:	003f2406 	br	800f50 <___vfprintf_internal_r+0x520>
  8012c0:	d9014f17 	ldw	r4,1340(sp)
  8012c4:	08044e40 	call	8044e4 <__sinit>
  8012c8:	d9c15117 	ldw	r7,1348(sp)
  8012cc:	003def06 	br	800a8c <___vfprintf_internal_r+0x5c>
  8012d0:	d9014f17 	ldw	r4,1340(sp)
  8012d4:	b00b883a 	mov	r5,r22
  8012d8:	d9c15115 	stw	r7,1348(sp)
  8012dc:	08029180 	call	802918 <__swsetup_r>
  8012e0:	d9c15117 	ldw	r7,1348(sp)
  8012e4:	103dee26 	beq	r2,zero,800aa0 <___vfprintf_internal_r+0x70>
  8012e8:	003f8c06 	br	80111c <___vfprintf_internal_r+0x6ec>
  8012ec:	d9014217 	ldw	r4,1288(sp)
  8012f0:	d9414317 	ldw	r5,1292(sp)
  8012f4:	000d883a 	mov	r6,zero
  8012f8:	000f883a 	mov	r7,zero
  8012fc:	08093c40 	call	8093c4 <__eqdf2>
  801300:	1000f21e 	bne	r2,zero,8016cc <___vfprintf_internal_r+0xc9c>
  801304:	008020b4 	movhi	r2,130
  801308:	10ac1804 	addi	r2,r2,-20384
  80130c:	94800044 	addi	r18,r18,1
  801310:	8c400044 	addi	r17,r17,1
  801314:	a8800015 	stw	r2,0(r21)
  801318:	00c00044 	movi	r3,1
  80131c:	008001c4 	movi	r2,7
  801320:	a8c00115 	stw	r3,4(r21)
  801324:	dc800e15 	stw	r18,56(sp)
  801328:	dc400d15 	stw	r17,52(sp)
  80132c:	14430016 	blt	r2,r17,801f30 <___vfprintf_internal_r+0x1500>
  801330:	a8c00204 	addi	r3,r21,8
  801334:	d8800517 	ldw	r2,20(sp)
  801338:	d9014717 	ldw	r4,1308(sp)
  80133c:	11015c0e 	bge	r2,r4,8018b0 <___vfprintf_internal_r+0xe80>
  801340:	dc400d17 	ldw	r17,52(sp)
  801344:	d9814917 	ldw	r6,1316(sp)
  801348:	00800044 	movi	r2,1
  80134c:	94800044 	addi	r18,r18,1
  801350:	8c400044 	addi	r17,r17,1
  801354:	18800115 	stw	r2,4(r3)
  801358:	008001c4 	movi	r2,7
  80135c:	19800015 	stw	r6,0(r3)
  801360:	dc800e15 	stw	r18,56(sp)
  801364:	dc400d15 	stw	r17,52(sp)
  801368:	14431616 	blt	r2,r17,801fc4 <___vfprintf_internal_r+0x1594>
  80136c:	18c00204 	addi	r3,r3,8
  801370:	d8814717 	ldw	r2,1308(sp)
  801374:	143fffc4 	addi	r16,r2,-1
  801378:	043f2b0e 	bge	zero,r16,801028 <___vfprintf_internal_r+0x5f8>
  80137c:	00800404 	movi	r2,16
  801380:	1402a80e 	bge	r2,r16,801e24 <___vfprintf_internal_r+0x13f4>
  801384:	dc400d17 	ldw	r17,52(sp)
  801388:	1027883a 	mov	r19,r2
  80138c:	070020b4 	movhi	fp,130
  801390:	e72c1884 	addi	fp,fp,-20382
  801394:	050001c4 	movi	r20,7
  801398:	00000306 	br	8013a8 <___vfprintf_internal_r+0x978>
  80139c:	18c00204 	addi	r3,r3,8
  8013a0:	843ffc04 	addi	r16,r16,-16
  8013a4:	9c02a20e 	bge	r19,r16,801e30 <___vfprintf_internal_r+0x1400>
  8013a8:	94800404 	addi	r18,r18,16
  8013ac:	8c400044 	addi	r17,r17,1
  8013b0:	1f000015 	stw	fp,0(r3)
  8013b4:	1cc00115 	stw	r19,4(r3)
  8013b8:	dc800e15 	stw	r18,56(sp)
  8013bc:	dc400d15 	stw	r17,52(sp)
  8013c0:	a47ff60e 	bge	r20,r17,80139c <___vfprintf_internal_r+0x96c>
  8013c4:	d9014f17 	ldw	r4,1340(sp)
  8013c8:	b00b883a 	mov	r5,r22
  8013cc:	d9800c04 	addi	r6,sp,48
  8013d0:	08009d80 	call	8009d8 <__sprint_r>
  8013d4:	103f4e1e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  8013d8:	dc800e17 	ldw	r18,56(sp)
  8013dc:	dc400d17 	ldw	r17,52(sp)
  8013e0:	d8c01904 	addi	r3,sp,100
  8013e4:	003fee06 	br	8013a0 <___vfprintf_internal_r+0x970>
  8013e8:	d8802c0b 	ldhu	r2,176(sp)
  8013ec:	00ffffc4 	movi	r3,-1
  8013f0:	d8c14b15 	stw	r3,1324(sp)
  8013f4:	1080100c 	andi	r2,r2,64
  8013f8:	103dcc1e 	bne	r2,zero,800b2c <___vfprintf_internal_r+0xfc>
  8013fc:	003dce06 	br	800b38 <___vfprintf_internal_r+0x108>
  801400:	d9014f17 	ldw	r4,1340(sp)
  801404:	b00b883a 	mov	r5,r22
  801408:	d9800c04 	addi	r6,sp,48
  80140c:	08009d80 	call	8009d8 <__sprint_r>
  801410:	103f3f1e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  801414:	dc800e17 	ldw	r18,56(sp)
  801418:	003f2e06 	br	8010d4 <___vfprintf_internal_r+0x6a4>
  80141c:	d9414c17 	ldw	r5,1328(sp)
  801420:	29400414 	ori	r5,r5,16
  801424:	d9414c15 	stw	r5,1328(sp)
  801428:	d9814c17 	ldw	r6,1328(sp)
  80142c:	3080080c 	andi	r2,r6,32
  801430:	10014f1e 	bne	r2,zero,801970 <___vfprintf_internal_r+0xf40>
  801434:	d8c14c17 	ldw	r3,1328(sp)
  801438:	1880040c 	andi	r2,r3,16
  80143c:	1002f01e 	bne	r2,zero,802000 <___vfprintf_internal_r+0x15d0>
  801440:	d9014c17 	ldw	r4,1328(sp)
  801444:	2080100c 	andi	r2,r4,64
  801448:	1002ed26 	beq	r2,zero,802000 <___vfprintf_internal_r+0x15d0>
  80144c:	3880000f 	ldh	r2,0(r7)
  801450:	39c00104 	addi	r7,r7,4
  801454:	d9c14015 	stw	r7,1280(sp)
  801458:	1023d7fa 	srai	r17,r2,31
  80145c:	1021883a 	mov	r16,r2
  801460:	88037816 	blt	r17,zero,802244 <___vfprintf_internal_r+0x1814>
  801464:	01000044 	movi	r4,1
  801468:	98000416 	blt	r19,zero,80147c <___vfprintf_internal_r+0xa4c>
  80146c:	d8c14c17 	ldw	r3,1328(sp)
  801470:	00bfdfc4 	movi	r2,-129
  801474:	1886703a 	and	r3,r3,r2
  801478:	d8c14c15 	stw	r3,1328(sp)
  80147c:	8444b03a 	or	r2,r16,r17
  801480:	10022c1e 	bne	r2,zero,801d34 <___vfprintf_internal_r+0x1304>
  801484:	98022b1e 	bne	r19,zero,801d34 <___vfprintf_internal_r+0x1304>
  801488:	20803fcc 	andi	r2,r4,255
  80148c:	1002a126 	beq	r2,zero,801f14 <___vfprintf_internal_r+0x14e4>
  801490:	d8c01904 	addi	r3,sp,100
  801494:	dd000f04 	addi	r20,sp,60
  801498:	d8c14115 	stw	r3,1284(sp)
  80149c:	d8c14117 	ldw	r3,1284(sp)
  8014a0:	dcc14515 	stw	r19,1300(sp)
  8014a4:	a0c5c83a 	sub	r2,r20,r3
  8014a8:	11c00a04 	addi	r7,r2,40
  8014ac:	99c0010e 	bge	r19,r7,8014b4 <___vfprintf_internal_r+0xa84>
  8014b0:	d9c14515 	stw	r7,1300(sp)
  8014b4:	dcc14615 	stw	r19,1304(sp)
  8014b8:	d8800407 	ldb	r2,16(sp)
  8014bc:	103e4c26 	beq	r2,zero,800df0 <___vfprintf_internal_r+0x3c0>
  8014c0:	d8814517 	ldw	r2,1300(sp)
  8014c4:	10800044 	addi	r2,r2,1
  8014c8:	d8814515 	stw	r2,1300(sp)
  8014cc:	003e4806 	br	800df0 <___vfprintf_internal_r+0x3c0>
  8014d0:	d9814c17 	ldw	r6,1328(sp)
  8014d4:	31800414 	ori	r6,r6,16
  8014d8:	d9814c15 	stw	r6,1328(sp)
  8014dc:	d8c14c17 	ldw	r3,1328(sp)
  8014e0:	1880080c 	andi	r2,r3,32
  8014e4:	1001271e 	bne	r2,zero,801984 <___vfprintf_internal_r+0xf54>
  8014e8:	d9414c17 	ldw	r5,1328(sp)
  8014ec:	2880040c 	andi	r2,r5,16
  8014f0:	1002bc1e 	bne	r2,zero,801fe4 <___vfprintf_internal_r+0x15b4>
  8014f4:	d9814c17 	ldw	r6,1328(sp)
  8014f8:	3080100c 	andi	r2,r6,64
  8014fc:	1002b926 	beq	r2,zero,801fe4 <___vfprintf_internal_r+0x15b4>
  801500:	3c00000b 	ldhu	r16,0(r7)
  801504:	0009883a 	mov	r4,zero
  801508:	39c00104 	addi	r7,r7,4
  80150c:	0023883a 	mov	r17,zero
  801510:	d9c14015 	stw	r7,1280(sp)
  801514:	d8000405 	stb	zero,16(sp)
  801518:	003fd306 	br	801468 <___vfprintf_internal_r+0xa38>
  80151c:	d9014c17 	ldw	r4,1328(sp)
  801520:	21000414 	ori	r4,r4,16
  801524:	d9014c15 	stw	r4,1328(sp)
  801528:	d9414c17 	ldw	r5,1328(sp)
  80152c:	2880080c 	andi	r2,r5,32
  801530:	1001081e 	bne	r2,zero,801954 <___vfprintf_internal_r+0xf24>
  801534:	d8c14c17 	ldw	r3,1328(sp)
  801538:	1880040c 	andi	r2,r3,16
  80153c:	1002b61e 	bne	r2,zero,802018 <___vfprintf_internal_r+0x15e8>
  801540:	d9014c17 	ldw	r4,1328(sp)
  801544:	2080100c 	andi	r2,r4,64
  801548:	1002b326 	beq	r2,zero,802018 <___vfprintf_internal_r+0x15e8>
  80154c:	3c00000b 	ldhu	r16,0(r7)
  801550:	01000044 	movi	r4,1
  801554:	39c00104 	addi	r7,r7,4
  801558:	0023883a 	mov	r17,zero
  80155c:	d9c14015 	stw	r7,1280(sp)
  801560:	d8000405 	stb	zero,16(sp)
  801564:	003fc006 	br	801468 <___vfprintf_internal_r+0xa38>
  801568:	d9014f17 	ldw	r4,1340(sp)
  80156c:	b00b883a 	mov	r5,r22
  801570:	d9800c04 	addi	r6,sp,48
  801574:	08009d80 	call	8009d8 <__sprint_r>
  801578:	103ee51e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  80157c:	dc800e17 	ldw	r18,56(sp)
  801580:	d8c01904 	addi	r3,sp,100
  801584:	d9814c17 	ldw	r6,1328(sp)
  801588:	3080004c 	andi	r2,r6,1
  80158c:	1005003a 	cmpeq	r2,r2,zero
  801590:	103ea51e 	bne	r2,zero,801028 <___vfprintf_internal_r+0x5f8>
  801594:	00800044 	movi	r2,1
  801598:	dc400d17 	ldw	r17,52(sp)
  80159c:	18800115 	stw	r2,4(r3)
  8015a0:	d8814917 	ldw	r2,1316(sp)
  8015a4:	94800044 	addi	r18,r18,1
  8015a8:	8c400044 	addi	r17,r17,1
  8015ac:	18800015 	stw	r2,0(r3)
  8015b0:	008001c4 	movi	r2,7
  8015b4:	dc800e15 	stw	r18,56(sp)
  8015b8:	dc400d15 	stw	r17,52(sp)
  8015bc:	1442240e 	bge	r2,r17,801e50 <___vfprintf_internal_r+0x1420>
  8015c0:	d9014f17 	ldw	r4,1340(sp)
  8015c4:	b00b883a 	mov	r5,r22
  8015c8:	d9800c04 	addi	r6,sp,48
  8015cc:	08009d80 	call	8009d8 <__sprint_r>
  8015d0:	103ecf1e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  8015d4:	dc800e17 	ldw	r18,56(sp)
  8015d8:	d8c01904 	addi	r3,sp,100
  8015dc:	003e9206 	br	801028 <___vfprintf_internal_r+0x5f8>
  8015e0:	d9014f17 	ldw	r4,1340(sp)
  8015e4:	b00b883a 	mov	r5,r22
  8015e8:	d9800c04 	addi	r6,sp,48
  8015ec:	08009d80 	call	8009d8 <__sprint_r>
  8015f0:	103ec026 	beq	r2,zero,8010f4 <___vfprintf_internal_r+0x6c4>
  8015f4:	003ec606 	br	801110 <___vfprintf_internal_r+0x6e0>
  8015f8:	d9014f17 	ldw	r4,1340(sp)
  8015fc:	b00b883a 	mov	r5,r22
  801600:	d9800c04 	addi	r6,sp,48
  801604:	d9c15115 	stw	r7,1348(sp)
  801608:	08009d80 	call	8009d8 <__sprint_r>
  80160c:	d9c15117 	ldw	r7,1348(sp)
  801610:	103ebf1e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  801614:	dc800e17 	ldw	r18,56(sp)
  801618:	dc400d17 	ldw	r17,52(sp)
  80161c:	dd401904 	addi	r21,sp,100
  801620:	003e7406 	br	800ff4 <___vfprintf_internal_r+0x5c4>
  801624:	d9014f17 	ldw	r4,1340(sp)
  801628:	b00b883a 	mov	r5,r22
  80162c:	d9800c04 	addi	r6,sp,48
  801630:	d9c15115 	stw	r7,1348(sp)
  801634:	08009d80 	call	8009d8 <__sprint_r>
  801638:	d9c15117 	ldw	r7,1348(sp)
  80163c:	103eb41e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  801640:	dd401904 	addi	r21,sp,100
  801644:	003d6d06 	br	800bfc <___vfprintf_internal_r+0x1cc>
  801648:	d9014f17 	ldw	r4,1340(sp)
  80164c:	b00b883a 	mov	r5,r22
  801650:	d9800c04 	addi	r6,sp,48
  801654:	d9c15115 	stw	r7,1348(sp)
  801658:	08009d80 	call	8009d8 <__sprint_r>
  80165c:	d9c15117 	ldw	r7,1348(sp)
  801660:	103eab1e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  801664:	dc800e17 	ldw	r18,56(sp)
  801668:	dc400d17 	ldw	r17,52(sp)
  80166c:	dd401904 	addi	r21,sp,100
  801670:	003e3406 	br	800f44 <___vfprintf_internal_r+0x514>
  801674:	d9014f17 	ldw	r4,1340(sp)
  801678:	b00b883a 	mov	r5,r22
  80167c:	d9800c04 	addi	r6,sp,48
  801680:	d9c15115 	stw	r7,1348(sp)
  801684:	08009d80 	call	8009d8 <__sprint_r>
  801688:	d9c15117 	ldw	r7,1348(sp)
  80168c:	103ea01e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  801690:	dc800e17 	ldw	r18,56(sp)
  801694:	dc400d17 	ldw	r17,52(sp)
  801698:	dd401904 	addi	r21,sp,100
  80169c:	003e1c06 	br	800f10 <___vfprintf_internal_r+0x4e0>
  8016a0:	d9014f17 	ldw	r4,1340(sp)
  8016a4:	b00b883a 	mov	r5,r22
  8016a8:	d9800c04 	addi	r6,sp,48
  8016ac:	d9c15115 	stw	r7,1348(sp)
  8016b0:	08009d80 	call	8009d8 <__sprint_r>
  8016b4:	d9c15117 	ldw	r7,1348(sp)
  8016b8:	103e951e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  8016bc:	dc800e17 	ldw	r18,56(sp)
  8016c0:	dc400d17 	ldw	r17,52(sp)
  8016c4:	dd401904 	addi	r21,sp,100
  8016c8:	003e0406 	br	800edc <___vfprintf_internal_r+0x4ac>
  8016cc:	d9000517 	ldw	r4,20(sp)
  8016d0:	0102580e 	bge	zero,r4,802034 <___vfprintf_internal_r+0x1604>
  8016d4:	d9814717 	ldw	r6,1308(sp)
  8016d8:	21807a16 	blt	r4,r6,8018c4 <___vfprintf_internal_r+0xe94>
  8016dc:	d8814117 	ldw	r2,1284(sp)
  8016e0:	91a5883a 	add	r18,r18,r6
  8016e4:	8c400044 	addi	r17,r17,1
  8016e8:	a8800015 	stw	r2,0(r21)
  8016ec:	008001c4 	movi	r2,7
  8016f0:	a9800115 	stw	r6,4(r21)
  8016f4:	dc800e15 	stw	r18,56(sp)
  8016f8:	dc400d15 	stw	r17,52(sp)
  8016fc:	1442fc16 	blt	r2,r17,8022f0 <___vfprintf_internal_r+0x18c0>
  801700:	a8c00204 	addi	r3,r21,8
  801704:	d9414717 	ldw	r5,1308(sp)
  801708:	2161c83a 	sub	r16,r4,r5
  80170c:	043f9d0e 	bge	zero,r16,801584 <___vfprintf_internal_r+0xb54>
  801710:	00800404 	movi	r2,16
  801714:	1402190e 	bge	r2,r16,801f7c <___vfprintf_internal_r+0x154c>
  801718:	dc400d17 	ldw	r17,52(sp)
  80171c:	1027883a 	mov	r19,r2
  801720:	070020b4 	movhi	fp,130
  801724:	e72c1884 	addi	fp,fp,-20382
  801728:	050001c4 	movi	r20,7
  80172c:	00000306 	br	80173c <___vfprintf_internal_r+0xd0c>
  801730:	18c00204 	addi	r3,r3,8
  801734:	843ffc04 	addi	r16,r16,-16
  801738:	9c02130e 	bge	r19,r16,801f88 <___vfprintf_internal_r+0x1558>
  80173c:	94800404 	addi	r18,r18,16
  801740:	8c400044 	addi	r17,r17,1
  801744:	1f000015 	stw	fp,0(r3)
  801748:	1cc00115 	stw	r19,4(r3)
  80174c:	dc800e15 	stw	r18,56(sp)
  801750:	dc400d15 	stw	r17,52(sp)
  801754:	a47ff60e 	bge	r20,r17,801730 <___vfprintf_internal_r+0xd00>
  801758:	d9014f17 	ldw	r4,1340(sp)
  80175c:	b00b883a 	mov	r5,r22
  801760:	d9800c04 	addi	r6,sp,48
  801764:	08009d80 	call	8009d8 <__sprint_r>
  801768:	103e691e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  80176c:	dc800e17 	ldw	r18,56(sp)
  801770:	dc400d17 	ldw	r17,52(sp)
  801774:	d8c01904 	addi	r3,sp,100
  801778:	003fee06 	br	801734 <___vfprintf_internal_r+0xd04>
  80177c:	d8814717 	ldw	r2,1308(sp)
  801780:	143fffc4 	addi	r16,r2,-1
  801784:	043e970e 	bge	zero,r16,8011e4 <___vfprintf_internal_r+0x7b4>
  801788:	00800404 	movi	r2,16
  80178c:	1400180e 	bge	r2,r16,8017f0 <___vfprintf_internal_r+0xdc0>
  801790:	1029883a 	mov	r20,r2
  801794:	070020b4 	movhi	fp,130
  801798:	e72c1884 	addi	fp,fp,-20382
  80179c:	054001c4 	movi	r21,7
  8017a0:	00000306 	br	8017b0 <___vfprintf_internal_r+0xd80>
  8017a4:	9cc00204 	addi	r19,r19,8
  8017a8:	843ffc04 	addi	r16,r16,-16
  8017ac:	a400120e 	bge	r20,r16,8017f8 <___vfprintf_internal_r+0xdc8>
  8017b0:	94800404 	addi	r18,r18,16
  8017b4:	8c400044 	addi	r17,r17,1
  8017b8:	9f000015 	stw	fp,0(r19)
  8017bc:	9d000115 	stw	r20,4(r19)
  8017c0:	dc800e15 	stw	r18,56(sp)
  8017c4:	dc400d15 	stw	r17,52(sp)
  8017c8:	ac7ff60e 	bge	r21,r17,8017a4 <___vfprintf_internal_r+0xd74>
  8017cc:	d9014f17 	ldw	r4,1340(sp)
  8017d0:	b00b883a 	mov	r5,r22
  8017d4:	d9800c04 	addi	r6,sp,48
  8017d8:	08009d80 	call	8009d8 <__sprint_r>
  8017dc:	103e4c1e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  8017e0:	dc800e17 	ldw	r18,56(sp)
  8017e4:	dc400d17 	ldw	r17,52(sp)
  8017e8:	dcc01904 	addi	r19,sp,100
  8017ec:	003fee06 	br	8017a8 <___vfprintf_internal_r+0xd78>
  8017f0:	070020b4 	movhi	fp,130
  8017f4:	e72c1884 	addi	fp,fp,-20382
  8017f8:	9425883a 	add	r18,r18,r16
  8017fc:	8c400044 	addi	r17,r17,1
  801800:	008001c4 	movi	r2,7
  801804:	9f000015 	stw	fp,0(r19)
  801808:	9c000115 	stw	r16,4(r19)
  80180c:	dc800e15 	stw	r18,56(sp)
  801810:	dc400d15 	stw	r17,52(sp)
  801814:	147e720e 	bge	r2,r17,8011e0 <___vfprintf_internal_r+0x7b0>
  801818:	d9014f17 	ldw	r4,1340(sp)
  80181c:	b00b883a 	mov	r5,r22
  801820:	d9800c04 	addi	r6,sp,48
  801824:	08009d80 	call	8009d8 <__sprint_r>
  801828:	103e391e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  80182c:	dc800e17 	ldw	r18,56(sp)
  801830:	dc400d17 	ldw	r17,52(sp)
  801834:	dcc01904 	addi	r19,sp,100
  801838:	003e6a06 	br	8011e4 <___vfprintf_internal_r+0x7b4>
  80183c:	d9014f17 	ldw	r4,1340(sp)
  801840:	b00b883a 	mov	r5,r22
  801844:	d9800c04 	addi	r6,sp,48
  801848:	d9c15115 	stw	r7,1348(sp)
  80184c:	08009d80 	call	8009d8 <__sprint_r>
  801850:	d9c15117 	ldw	r7,1348(sp)
  801854:	103e2e1e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  801858:	dc800e17 	ldw	r18,56(sp)
  80185c:	dc400d17 	ldw	r17,52(sp)
  801860:	dd401904 	addi	r21,sp,100
  801864:	003dba06 	br	800f50 <___vfprintf_internal_r+0x520>
  801868:	d9014f17 	ldw	r4,1340(sp)
  80186c:	b00b883a 	mov	r5,r22
  801870:	d9800c04 	addi	r6,sp,48
  801874:	08009d80 	call	8009d8 <__sprint_r>
  801878:	103e251e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  80187c:	dc800e17 	ldw	r18,56(sp)
  801880:	dc400d17 	ldw	r17,52(sp)
  801884:	dcc01904 	addi	r19,sp,100
  801888:	003e4206 	br	801194 <___vfprintf_internal_r+0x764>
  80188c:	d9014f17 	ldw	r4,1340(sp)
  801890:	b00b883a 	mov	r5,r22
  801894:	d9800c04 	addi	r6,sp,48
  801898:	08009d80 	call	8009d8 <__sprint_r>
  80189c:	103e1c1e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  8018a0:	dc800e17 	ldw	r18,56(sp)
  8018a4:	dc400d17 	ldw	r17,52(sp)
  8018a8:	d8c01904 	addi	r3,sp,100
  8018ac:	003e2e06 	br	801168 <___vfprintf_internal_r+0x738>
  8018b0:	d9414c17 	ldw	r5,1328(sp)
  8018b4:	2880004c 	andi	r2,r5,1
  8018b8:	1005003a 	cmpeq	r2,r2,zero
  8018bc:	103dda1e 	bne	r2,zero,801028 <___vfprintf_internal_r+0x5f8>
  8018c0:	003e9f06 	br	801340 <___vfprintf_internal_r+0x910>
  8018c4:	d8c14117 	ldw	r3,1284(sp)
  8018c8:	9125883a 	add	r18,r18,r4
  8018cc:	8c400044 	addi	r17,r17,1
  8018d0:	008001c4 	movi	r2,7
  8018d4:	a8c00015 	stw	r3,0(r21)
  8018d8:	a9000115 	stw	r4,4(r21)
  8018dc:	dc800e15 	stw	r18,56(sp)
  8018e0:	dc400d15 	stw	r17,52(sp)
  8018e4:	14426c16 	blt	r2,r17,802298 <___vfprintf_internal_r+0x1868>
  8018e8:	a8c00204 	addi	r3,r21,8
  8018ec:	d9414917 	ldw	r5,1316(sp)
  8018f0:	00800044 	movi	r2,1
  8018f4:	94800044 	addi	r18,r18,1
  8018f8:	8c400044 	addi	r17,r17,1
  8018fc:	18800115 	stw	r2,4(r3)
  801900:	008001c4 	movi	r2,7
  801904:	19400015 	stw	r5,0(r3)
  801908:	dc800e15 	stw	r18,56(sp)
  80190c:	dc400d15 	stw	r17,52(sp)
  801910:	2021883a 	mov	r16,r4
  801914:	14425616 	blt	r2,r17,802270 <___vfprintf_internal_r+0x1840>
  801918:	19400204 	addi	r5,r3,8
  80191c:	d9814717 	ldw	r6,1308(sp)
  801920:	8c400044 	addi	r17,r17,1
  801924:	dc400d15 	stw	r17,52(sp)
  801928:	3107c83a 	sub	r3,r6,r4
  80192c:	d9014117 	ldw	r4,1284(sp)
  801930:	90e5883a 	add	r18,r18,r3
  801934:	28c00115 	stw	r3,4(r5)
  801938:	8105883a 	add	r2,r16,r4
  80193c:	28800015 	stw	r2,0(r5)
  801940:	008001c4 	movi	r2,7
  801944:	dc800e15 	stw	r18,56(sp)
  801948:	147f1d16 	blt	r2,r17,8015c0 <___vfprintf_internal_r+0xb90>
  80194c:	28c00204 	addi	r3,r5,8
  801950:	003db506 	br	801028 <___vfprintf_internal_r+0x5f8>
  801954:	3c000017 	ldw	r16,0(r7)
  801958:	3c400117 	ldw	r17,4(r7)
  80195c:	39800204 	addi	r6,r7,8
  801960:	01000044 	movi	r4,1
  801964:	d9814015 	stw	r6,1280(sp)
  801968:	d8000405 	stb	zero,16(sp)
  80196c:	003ebe06 	br	801468 <___vfprintf_internal_r+0xa38>
  801970:	3c000017 	ldw	r16,0(r7)
  801974:	3c400117 	ldw	r17,4(r7)
  801978:	38800204 	addi	r2,r7,8
  80197c:	d8814015 	stw	r2,1280(sp)
  801980:	003eb706 	br	801460 <___vfprintf_internal_r+0xa30>
  801984:	3c000017 	ldw	r16,0(r7)
  801988:	3c400117 	ldw	r17,4(r7)
  80198c:	39000204 	addi	r4,r7,8
  801990:	d9014015 	stw	r4,1280(sp)
  801994:	0009883a 	mov	r4,zero
  801998:	d8000405 	stb	zero,16(sp)
  80199c:	003eb206 	br	801468 <___vfprintf_internal_r+0xa38>
  8019a0:	38c00017 	ldw	r3,0(r7)
  8019a4:	39c00104 	addi	r7,r7,4
  8019a8:	d8c14a15 	stw	r3,1320(sp)
  8019ac:	1800d70e 	bge	r3,zero,801d0c <___vfprintf_internal_r+0x12dc>
  8019b0:	00c7c83a 	sub	r3,zero,r3
  8019b4:	d8c14a15 	stw	r3,1320(sp)
  8019b8:	d9014c17 	ldw	r4,1328(sp)
  8019bc:	b8c00007 	ldb	r3,0(r23)
  8019c0:	21000114 	ori	r4,r4,4
  8019c4:	d9014c15 	stw	r4,1328(sp)
  8019c8:	003c9806 	br	800c2c <___vfprintf_internal_r+0x1fc>
  8019cc:	d9814c17 	ldw	r6,1328(sp)
  8019d0:	3080080c 	andi	r2,r6,32
  8019d4:	1001f626 	beq	r2,zero,8021b0 <___vfprintf_internal_r+0x1780>
  8019d8:	d9014b17 	ldw	r4,1324(sp)
  8019dc:	38800017 	ldw	r2,0(r7)
  8019e0:	39c00104 	addi	r7,r7,4
  8019e4:	d9c14015 	stw	r7,1280(sp)
  8019e8:	2007d7fa 	srai	r3,r4,31
  8019ec:	d9c14017 	ldw	r7,1280(sp)
  8019f0:	11000015 	stw	r4,0(r2)
  8019f4:	10c00115 	stw	r3,4(r2)
  8019f8:	003c6906 	br	800ba0 <___vfprintf_internal_r+0x170>
  8019fc:	b8c00007 	ldb	r3,0(r23)
  801a00:	00801b04 	movi	r2,108
  801a04:	18825526 	beq	r3,r2,80235c <___vfprintf_internal_r+0x192c>
  801a08:	d9414c17 	ldw	r5,1328(sp)
  801a0c:	29400414 	ori	r5,r5,16
  801a10:	d9414c15 	stw	r5,1328(sp)
  801a14:	003c8506 	br	800c2c <___vfprintf_internal_r+0x1fc>
  801a18:	d9814c17 	ldw	r6,1328(sp)
  801a1c:	b8c00007 	ldb	r3,0(r23)
  801a20:	31800814 	ori	r6,r6,32
  801a24:	d9814c15 	stw	r6,1328(sp)
  801a28:	003c8006 	br	800c2c <___vfprintf_internal_r+0x1fc>
  801a2c:	d8814c17 	ldw	r2,1328(sp)
  801a30:	3c000017 	ldw	r16,0(r7)
  801a34:	00c01e04 	movi	r3,120
  801a38:	10800094 	ori	r2,r2,2
  801a3c:	d8814c15 	stw	r2,1328(sp)
  801a40:	39c00104 	addi	r7,r7,4
  801a44:	014020b4 	movhi	r5,130
  801a48:	296c0104 	addi	r5,r5,-20476
  801a4c:	00800c04 	movi	r2,48
  801a50:	0023883a 	mov	r17,zero
  801a54:	01000084 	movi	r4,2
  801a58:	d9c14015 	stw	r7,1280(sp)
  801a5c:	d8c14d15 	stw	r3,1332(sp)
  801a60:	d9414415 	stw	r5,1296(sp)
  801a64:	d8800445 	stb	r2,17(sp)
  801a68:	d8c00485 	stb	r3,18(sp)
  801a6c:	d8000405 	stb	zero,16(sp)
  801a70:	003e7d06 	br	801468 <___vfprintf_internal_r+0xa38>
  801a74:	d8814c17 	ldw	r2,1328(sp)
  801a78:	b8c00007 	ldb	r3,0(r23)
  801a7c:	10801014 	ori	r2,r2,64
  801a80:	d8814c15 	stw	r2,1328(sp)
  801a84:	003c6906 	br	800c2c <___vfprintf_internal_r+0x1fc>
  801a88:	d9414c17 	ldw	r5,1328(sp)
  801a8c:	2880020c 	andi	r2,r5,8
  801a90:	1001e526 	beq	r2,zero,802228 <___vfprintf_internal_r+0x17f8>
  801a94:	39800017 	ldw	r6,0(r7)
  801a98:	38800204 	addi	r2,r7,8
  801a9c:	d8814015 	stw	r2,1280(sp)
  801aa0:	d9814215 	stw	r6,1288(sp)
  801aa4:	39c00117 	ldw	r7,4(r7)
  801aa8:	d9c14315 	stw	r7,1292(sp)
  801aac:	d9014217 	ldw	r4,1288(sp)
  801ab0:	d9414317 	ldw	r5,1292(sp)
  801ab4:	08074480 	call	807448 <__isinfd>
  801ab8:	10021d26 	beq	r2,zero,802330 <___vfprintf_internal_r+0x1900>
  801abc:	d9014217 	ldw	r4,1288(sp)
  801ac0:	d9414317 	ldw	r5,1292(sp)
  801ac4:	000d883a 	mov	r6,zero
  801ac8:	000f883a 	mov	r7,zero
  801acc:	08095e40 	call	8095e4 <__ltdf2>
  801ad0:	1002d016 	blt	r2,zero,802614 <___vfprintf_internal_r+0x1be4>
  801ad4:	d9414d17 	ldw	r5,1332(sp)
  801ad8:	008011c4 	movi	r2,71
  801adc:	11421016 	blt	r2,r5,802320 <___vfprintf_internal_r+0x18f0>
  801ae0:	018020b4 	movhi	r6,130
  801ae4:	31ac0604 	addi	r6,r6,-20456
  801ae8:	d9814115 	stw	r6,1284(sp)
  801aec:	d9014c17 	ldw	r4,1328(sp)
  801af0:	00c000c4 	movi	r3,3
  801af4:	00bfdfc4 	movi	r2,-129
  801af8:	2088703a 	and	r4,r4,r2
  801afc:	180f883a 	mov	r7,r3
  801b00:	d8c14515 	stw	r3,1300(sp)
  801b04:	d9014c15 	stw	r4,1328(sp)
  801b08:	d8014615 	stw	zero,1304(sp)
  801b0c:	003e6a06 	br	8014b8 <___vfprintf_internal_r+0xa88>
  801b10:	38800017 	ldw	r2,0(r7)
  801b14:	00c00044 	movi	r3,1
  801b18:	39c00104 	addi	r7,r7,4
  801b1c:	d9c14015 	stw	r7,1280(sp)
  801b20:	d9000f04 	addi	r4,sp,60
  801b24:	180f883a 	mov	r7,r3
  801b28:	d8c14515 	stw	r3,1300(sp)
  801b2c:	d9014115 	stw	r4,1284(sp)
  801b30:	d8800f05 	stb	r2,60(sp)
  801b34:	d8000405 	stb	zero,16(sp)
  801b38:	003cac06 	br	800dec <___vfprintf_internal_r+0x3bc>
  801b3c:	014020b4 	movhi	r5,130
  801b40:	296c0c04 	addi	r5,r5,-20432
  801b44:	d9414415 	stw	r5,1296(sp)
  801b48:	d9814c17 	ldw	r6,1328(sp)
  801b4c:	3080080c 	andi	r2,r6,32
  801b50:	1000ff26 	beq	r2,zero,801f50 <___vfprintf_internal_r+0x1520>
  801b54:	3c000017 	ldw	r16,0(r7)
  801b58:	3c400117 	ldw	r17,4(r7)
  801b5c:	38800204 	addi	r2,r7,8
  801b60:	d8814015 	stw	r2,1280(sp)
  801b64:	d9414c17 	ldw	r5,1328(sp)
  801b68:	2880004c 	andi	r2,r5,1
  801b6c:	1005003a 	cmpeq	r2,r2,zero
  801b70:	1000b91e 	bne	r2,zero,801e58 <___vfprintf_internal_r+0x1428>
  801b74:	8444b03a 	or	r2,r16,r17
  801b78:	1000b726 	beq	r2,zero,801e58 <___vfprintf_internal_r+0x1428>
  801b7c:	d9814d17 	ldw	r6,1332(sp)
  801b80:	29400094 	ori	r5,r5,2
  801b84:	00800c04 	movi	r2,48
  801b88:	01000084 	movi	r4,2
  801b8c:	d9414c15 	stw	r5,1328(sp)
  801b90:	d8800445 	stb	r2,17(sp)
  801b94:	d9800485 	stb	r6,18(sp)
  801b98:	d8000405 	stb	zero,16(sp)
  801b9c:	003e3206 	br	801468 <___vfprintf_internal_r+0xa38>
  801ba0:	018020b4 	movhi	r6,130
  801ba4:	31ac0104 	addi	r6,r6,-20476
  801ba8:	d9814415 	stw	r6,1296(sp)
  801bac:	003fe606 	br	801b48 <___vfprintf_internal_r+0x1118>
  801bb0:	00800ac4 	movi	r2,43
  801bb4:	d8800405 	stb	r2,16(sp)
  801bb8:	b8c00007 	ldb	r3,0(r23)
  801bbc:	003c1b06 	br	800c2c <___vfprintf_internal_r+0x1fc>
  801bc0:	d8814c17 	ldw	r2,1328(sp)
  801bc4:	b8c00007 	ldb	r3,0(r23)
  801bc8:	10800054 	ori	r2,r2,1
  801bcc:	d8814c15 	stw	r2,1328(sp)
  801bd0:	003c1606 	br	800c2c <___vfprintf_internal_r+0x1fc>
  801bd4:	d8800407 	ldb	r2,16(sp)
  801bd8:	10004c1e 	bne	r2,zero,801d0c <___vfprintf_internal_r+0x12dc>
  801bdc:	00800804 	movi	r2,32
  801be0:	d8800405 	stb	r2,16(sp)
  801be4:	b8c00007 	ldb	r3,0(r23)
  801be8:	003c1006 	br	800c2c <___vfprintf_internal_r+0x1fc>
  801bec:	d9814c17 	ldw	r6,1328(sp)
  801bf0:	b8c00007 	ldb	r3,0(r23)
  801bf4:	31800214 	ori	r6,r6,8
  801bf8:	d9814c15 	stw	r6,1328(sp)
  801bfc:	003c0b06 	br	800c2c <___vfprintf_internal_r+0x1fc>
  801c00:	0009883a 	mov	r4,zero
  801c04:	04000244 	movi	r16,9
  801c08:	01400284 	movi	r5,10
  801c0c:	d9c15115 	stw	r7,1348(sp)
  801c10:	0809b1c0 	call	809b1c <__mulsi3>
  801c14:	b9000007 	ldb	r4,0(r23)
  801c18:	d8c14d17 	ldw	r3,1332(sp)
  801c1c:	bdc00044 	addi	r23,r23,1
  801c20:	d9014d15 	stw	r4,1332(sp)
  801c24:	d9414d17 	ldw	r5,1332(sp)
  801c28:	1885883a 	add	r2,r3,r2
  801c2c:	113ff404 	addi	r4,r2,-48
  801c30:	28bff404 	addi	r2,r5,-48
  801c34:	d9c15117 	ldw	r7,1348(sp)
  801c38:	80bff32e 	bgeu	r16,r2,801c08 <___vfprintf_internal_r+0x11d8>
  801c3c:	d9014a15 	stw	r4,1320(sp)
  801c40:	003bfc06 	br	800c34 <___vfprintf_internal_r+0x204>
  801c44:	d8814c17 	ldw	r2,1328(sp)
  801c48:	b8c00007 	ldb	r3,0(r23)
  801c4c:	10802014 	ori	r2,r2,128
  801c50:	d8814c15 	stw	r2,1328(sp)
  801c54:	003bf506 	br	800c2c <___vfprintf_internal_r+0x1fc>
  801c58:	b8c00007 	ldb	r3,0(r23)
  801c5c:	00800a84 	movi	r2,42
  801c60:	bdc00044 	addi	r23,r23,1
  801c64:	18831826 	beq	r3,r2,8028c8 <___vfprintf_internal_r+0x1e98>
  801c68:	d8c14d15 	stw	r3,1332(sp)
  801c6c:	18bff404 	addi	r2,r3,-48
  801c70:	00c00244 	movi	r3,9
  801c74:	18827b36 	bltu	r3,r2,802664 <___vfprintf_internal_r+0x1c34>
  801c78:	1821883a 	mov	r16,r3
  801c7c:	0009883a 	mov	r4,zero
  801c80:	01400284 	movi	r5,10
  801c84:	d9c15115 	stw	r7,1348(sp)
  801c88:	0809b1c0 	call	809b1c <__mulsi3>
  801c8c:	d9414d17 	ldw	r5,1332(sp)
  801c90:	b9800007 	ldb	r6,0(r23)
  801c94:	d9c15117 	ldw	r7,1348(sp)
  801c98:	1145883a 	add	r2,r2,r5
  801c9c:	113ff404 	addi	r4,r2,-48
  801ca0:	30bff404 	addi	r2,r6,-48
  801ca4:	d9814d15 	stw	r6,1332(sp)
  801ca8:	bdc00044 	addi	r23,r23,1
  801cac:	80bff42e 	bgeu	r16,r2,801c80 <___vfprintf_internal_r+0x1250>
  801cb0:	2027883a 	mov	r19,r4
  801cb4:	203bdf0e 	bge	r4,zero,800c34 <___vfprintf_internal_r+0x204>
  801cb8:	04ffffc4 	movi	r19,-1
  801cbc:	003bdd06 	br	800c34 <___vfprintf_internal_r+0x204>
  801cc0:	d8000405 	stb	zero,16(sp)
  801cc4:	39800017 	ldw	r6,0(r7)
  801cc8:	39c00104 	addi	r7,r7,4
  801ccc:	d9c14015 	stw	r7,1280(sp)
  801cd0:	d9814115 	stw	r6,1284(sp)
  801cd4:	3001c926 	beq	r6,zero,8023fc <___vfprintf_internal_r+0x19cc>
  801cd8:	98000e16 	blt	r19,zero,801d14 <___vfprintf_internal_r+0x12e4>
  801cdc:	d9014117 	ldw	r4,1284(sp)
  801ce0:	000b883a 	mov	r5,zero
  801ce4:	980d883a 	mov	r6,r19
  801ce8:	0805b640 	call	805b64 <memchr>
  801cec:	10025926 	beq	r2,zero,802654 <___vfprintf_internal_r+0x1c24>
  801cf0:	d8c14117 	ldw	r3,1284(sp)
  801cf4:	10cfc83a 	sub	r7,r2,r3
  801cf8:	99c19e16 	blt	r19,r7,802374 <___vfprintf_internal_r+0x1944>
  801cfc:	d9c14515 	stw	r7,1300(sp)
  801d00:	38000916 	blt	r7,zero,801d28 <___vfprintf_internal_r+0x12f8>
  801d04:	d8014615 	stw	zero,1304(sp)
  801d08:	003deb06 	br	8014b8 <___vfprintf_internal_r+0xa88>
  801d0c:	b8c00007 	ldb	r3,0(r23)
  801d10:	003bc606 	br	800c2c <___vfprintf_internal_r+0x1fc>
  801d14:	d9014117 	ldw	r4,1284(sp)
  801d18:	08009640 	call	800964 <strlen>
  801d1c:	d8814515 	stw	r2,1300(sp)
  801d20:	100f883a 	mov	r7,r2
  801d24:	103ff70e 	bge	r2,zero,801d04 <___vfprintf_internal_r+0x12d4>
  801d28:	d8014515 	stw	zero,1300(sp)
  801d2c:	d8014615 	stw	zero,1304(sp)
  801d30:	003de106 	br	8014b8 <___vfprintf_internal_r+0xa88>
  801d34:	20c03fcc 	andi	r3,r4,255
  801d38:	00800044 	movi	r2,1
  801d3c:	18802d26 	beq	r3,r2,801df4 <___vfprintf_internal_r+0x13c4>
  801d40:	18800e36 	bltu	r3,r2,801d7c <___vfprintf_internal_r+0x134c>
  801d44:	00800084 	movi	r2,2
  801d48:	1880fa26 	beq	r3,r2,802134 <___vfprintf_internal_r+0x1704>
  801d4c:	010020b4 	movhi	r4,130
  801d50:	212c1104 	addi	r4,r4,-20412
  801d54:	08009640 	call	800964 <strlen>
  801d58:	100f883a 	mov	r7,r2
  801d5c:	dcc14515 	stw	r19,1300(sp)
  801d60:	9880010e 	bge	r19,r2,801d68 <___vfprintf_internal_r+0x1338>
  801d64:	d8814515 	stw	r2,1300(sp)
  801d68:	008020b4 	movhi	r2,130
  801d6c:	10ac1104 	addi	r2,r2,-20412
  801d70:	dcc14615 	stw	r19,1304(sp)
  801d74:	d8814115 	stw	r2,1284(sp)
  801d78:	003dcf06 	br	8014b8 <___vfprintf_internal_r+0xa88>
  801d7c:	d9401904 	addi	r5,sp,100
  801d80:	dd000f04 	addi	r20,sp,60
  801d84:	d9414115 	stw	r5,1284(sp)
  801d88:	880a977a 	slli	r5,r17,29
  801d8c:	d9814117 	ldw	r6,1284(sp)
  801d90:	8004d0fa 	srli	r2,r16,3
  801d94:	8806d0fa 	srli	r3,r17,3
  801d98:	810001cc 	andi	r4,r16,7
  801d9c:	2884b03a 	or	r2,r5,r2
  801da0:	31bfffc4 	addi	r6,r6,-1
  801da4:	21000c04 	addi	r4,r4,48
  801da8:	d9814115 	stw	r6,1284(sp)
  801dac:	10cab03a 	or	r5,r2,r3
  801db0:	31000005 	stb	r4,0(r6)
  801db4:	1021883a 	mov	r16,r2
  801db8:	1823883a 	mov	r17,r3
  801dbc:	283ff21e 	bne	r5,zero,801d88 <___vfprintf_internal_r+0x1358>
  801dc0:	d8c14c17 	ldw	r3,1328(sp)
  801dc4:	1880004c 	andi	r2,r3,1
  801dc8:	1005003a 	cmpeq	r2,r2,zero
  801dcc:	103db31e 	bne	r2,zero,80149c <___vfprintf_internal_r+0xa6c>
  801dd0:	20803fcc 	andi	r2,r4,255
  801dd4:	1080201c 	xori	r2,r2,128
  801dd8:	10bfe004 	addi	r2,r2,-128
  801ddc:	00c00c04 	movi	r3,48
  801de0:	10fdae26 	beq	r2,r3,80149c <___vfprintf_internal_r+0xa6c>
  801de4:	31bfffc4 	addi	r6,r6,-1
  801de8:	d9814115 	stw	r6,1284(sp)
  801dec:	30c00005 	stb	r3,0(r6)
  801df0:	003daa06 	br	80149c <___vfprintf_internal_r+0xa6c>
  801df4:	88800068 	cmpgeui	r2,r17,1
  801df8:	10002c1e 	bne	r2,zero,801eac <___vfprintf_internal_r+0x147c>
  801dfc:	8800021e 	bne	r17,zero,801e08 <___vfprintf_internal_r+0x13d8>
  801e00:	00800244 	movi	r2,9
  801e04:	14002936 	bltu	r2,r16,801eac <___vfprintf_internal_r+0x147c>
  801e08:	d90018c4 	addi	r4,sp,99
  801e0c:	dd000f04 	addi	r20,sp,60
  801e10:	d9014115 	stw	r4,1284(sp)
  801e14:	d9014117 	ldw	r4,1284(sp)
  801e18:	80800c04 	addi	r2,r16,48
  801e1c:	20800005 	stb	r2,0(r4)
  801e20:	003d9e06 	br	80149c <___vfprintf_internal_r+0xa6c>
  801e24:	dc400d17 	ldw	r17,52(sp)
  801e28:	070020b4 	movhi	fp,130
  801e2c:	e72c1884 	addi	fp,fp,-20382
  801e30:	9425883a 	add	r18,r18,r16
  801e34:	8c400044 	addi	r17,r17,1
  801e38:	008001c4 	movi	r2,7
  801e3c:	1f000015 	stw	fp,0(r3)
  801e40:	1c000115 	stw	r16,4(r3)
  801e44:	dc800e15 	stw	r18,56(sp)
  801e48:	dc400d15 	stw	r17,52(sp)
  801e4c:	147ddc16 	blt	r2,r17,8015c0 <___vfprintf_internal_r+0xb90>
  801e50:	18c00204 	addi	r3,r3,8
  801e54:	003c7406 	br	801028 <___vfprintf_internal_r+0x5f8>
  801e58:	01000084 	movi	r4,2
  801e5c:	d8000405 	stb	zero,16(sp)
  801e60:	003d8106 	br	801468 <___vfprintf_internal_r+0xa38>
  801e64:	d9814c17 	ldw	r6,1328(sp)
  801e68:	30c4703a 	and	r2,r6,r3
  801e6c:	1005003a 	cmpeq	r2,r2,zero
  801e70:	103cb326 	beq	r2,zero,801140 <___vfprintf_internal_r+0x710>
  801e74:	d9014117 	ldw	r4,1284(sp)
  801e78:	94800044 	addi	r18,r18,1
  801e7c:	8c400044 	addi	r17,r17,1
  801e80:	008001c4 	movi	r2,7
  801e84:	a9000015 	stw	r4,0(r21)
  801e88:	a8c00115 	stw	r3,4(r21)
  801e8c:	dc800e15 	stw	r18,56(sp)
  801e90:	dc400d15 	stw	r17,52(sp)
  801e94:	147e6016 	blt	r2,r17,801818 <___vfprintf_internal_r+0xde8>
  801e98:	acc00204 	addi	r19,r21,8
  801e9c:	003cd106 	br	8011e4 <___vfprintf_internal_r+0x7b4>
  801ea0:	070020b4 	movhi	fp,130
  801ea4:	e72c1884 	addi	fp,fp,-20382
  801ea8:	003c4906 	br	800fd0 <___vfprintf_internal_r+0x5a0>
  801eac:	dd000f04 	addi	r20,sp,60
  801eb0:	dc801904 	addi	r18,sp,100
  801eb4:	8009883a 	mov	r4,r16
  801eb8:	880b883a 	mov	r5,r17
  801ebc:	01800284 	movi	r6,10
  801ec0:	000f883a 	mov	r7,zero
  801ec4:	08082440 	call	808244 <__umoddi3>
  801ec8:	12000c04 	addi	r8,r2,48
  801ecc:	94bfffc4 	addi	r18,r18,-1
  801ed0:	8009883a 	mov	r4,r16
  801ed4:	880b883a 	mov	r5,r17
  801ed8:	01800284 	movi	r6,10
  801edc:	000f883a 	mov	r7,zero
  801ee0:	92000005 	stb	r8,0(r18)
  801ee4:	0807bd80 	call	807bd8 <__udivdi3>
  801ee8:	1009883a 	mov	r4,r2
  801eec:	1021883a 	mov	r16,r2
  801ef0:	18800068 	cmpgeui	r2,r3,1
  801ef4:	1823883a 	mov	r17,r3
  801ef8:	103fee1e 	bne	r2,zero,801eb4 <___vfprintf_internal_r+0x1484>
  801efc:	1800021e 	bne	r3,zero,801f08 <___vfprintf_internal_r+0x14d8>
  801f00:	00800244 	movi	r2,9
  801f04:	113feb36 	bltu	r2,r4,801eb4 <___vfprintf_internal_r+0x1484>
  801f08:	94bfffc4 	addi	r18,r18,-1
  801f0c:	dc814115 	stw	r18,1284(sp)
  801f10:	003fc006 	br	801e14 <___vfprintf_internal_r+0x13e4>
  801f14:	d9014c17 	ldw	r4,1328(sp)
  801f18:	2080004c 	andi	r2,r4,1
  801f1c:	10009a1e 	bne	r2,zero,802188 <___vfprintf_internal_r+0x1758>
  801f20:	d9401904 	addi	r5,sp,100
  801f24:	dd000f04 	addi	r20,sp,60
  801f28:	d9414115 	stw	r5,1284(sp)
  801f2c:	003d5b06 	br	80149c <___vfprintf_internal_r+0xa6c>
  801f30:	d9014f17 	ldw	r4,1340(sp)
  801f34:	b00b883a 	mov	r5,r22
  801f38:	d9800c04 	addi	r6,sp,48
  801f3c:	08009d80 	call	8009d8 <__sprint_r>
  801f40:	103c731e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  801f44:	dc800e17 	ldw	r18,56(sp)
  801f48:	d8c01904 	addi	r3,sp,100
  801f4c:	003cf906 	br	801334 <___vfprintf_internal_r+0x904>
  801f50:	d8c14c17 	ldw	r3,1328(sp)
  801f54:	1880040c 	andi	r2,r3,16
  801f58:	1000711e 	bne	r2,zero,802120 <___vfprintf_internal_r+0x16f0>
  801f5c:	d9014c17 	ldw	r4,1328(sp)
  801f60:	2080100c 	andi	r2,r4,64
  801f64:	10006e26 	beq	r2,zero,802120 <___vfprintf_internal_r+0x16f0>
  801f68:	3c00000b 	ldhu	r16,0(r7)
  801f6c:	0023883a 	mov	r17,zero
  801f70:	39c00104 	addi	r7,r7,4
  801f74:	d9c14015 	stw	r7,1280(sp)
  801f78:	003efa06 	br	801b64 <___vfprintf_internal_r+0x1134>
  801f7c:	dc400d17 	ldw	r17,52(sp)
  801f80:	070020b4 	movhi	fp,130
  801f84:	e72c1884 	addi	fp,fp,-20382
  801f88:	9425883a 	add	r18,r18,r16
  801f8c:	8c400044 	addi	r17,r17,1
  801f90:	008001c4 	movi	r2,7
  801f94:	1f000015 	stw	fp,0(r3)
  801f98:	1c000115 	stw	r16,4(r3)
  801f9c:	dc800e15 	stw	r18,56(sp)
  801fa0:	dc400d15 	stw	r17,52(sp)
  801fa4:	147d7016 	blt	r2,r17,801568 <___vfprintf_internal_r+0xb38>
  801fa8:	18c00204 	addi	r3,r3,8
  801fac:	003d7506 	br	801584 <___vfprintf_internal_r+0xb54>
  801fb0:	dc800e17 	ldw	r18,56(sp)
  801fb4:	dc400d17 	ldw	r17,52(sp)
  801fb8:	070020b4 	movhi	fp,130
  801fbc:	e72c1c84 	addi	fp,fp,-20366
  801fc0:	003bba06 	br	800eac <___vfprintf_internal_r+0x47c>
  801fc4:	d9014f17 	ldw	r4,1340(sp)
  801fc8:	b00b883a 	mov	r5,r22
  801fcc:	d9800c04 	addi	r6,sp,48
  801fd0:	08009d80 	call	8009d8 <__sprint_r>
  801fd4:	103c4e1e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  801fd8:	dc800e17 	ldw	r18,56(sp)
  801fdc:	d8c01904 	addi	r3,sp,100
  801fe0:	003ce306 	br	801370 <___vfprintf_internal_r+0x940>
  801fe4:	3c000017 	ldw	r16,0(r7)
  801fe8:	0009883a 	mov	r4,zero
  801fec:	39c00104 	addi	r7,r7,4
  801ff0:	0023883a 	mov	r17,zero
  801ff4:	d9c14015 	stw	r7,1280(sp)
  801ff8:	d8000405 	stb	zero,16(sp)
  801ffc:	003d1a06 	br	801468 <___vfprintf_internal_r+0xa38>
  802000:	38800017 	ldw	r2,0(r7)
  802004:	39c00104 	addi	r7,r7,4
  802008:	d9c14015 	stw	r7,1280(sp)
  80200c:	1023d7fa 	srai	r17,r2,31
  802010:	1021883a 	mov	r16,r2
  802014:	003d1206 	br	801460 <___vfprintf_internal_r+0xa30>
  802018:	3c000017 	ldw	r16,0(r7)
  80201c:	01000044 	movi	r4,1
  802020:	39c00104 	addi	r7,r7,4
  802024:	0023883a 	mov	r17,zero
  802028:	d9c14015 	stw	r7,1280(sp)
  80202c:	d8000405 	stb	zero,16(sp)
  802030:	003d0d06 	br	801468 <___vfprintf_internal_r+0xa38>
  802034:	008020b4 	movhi	r2,130
  802038:	10ac1804 	addi	r2,r2,-20384
  80203c:	94800044 	addi	r18,r18,1
  802040:	8c400044 	addi	r17,r17,1
  802044:	a8800015 	stw	r2,0(r21)
  802048:	00c00044 	movi	r3,1
  80204c:	008001c4 	movi	r2,7
  802050:	a8c00115 	stw	r3,4(r21)
  802054:	dc800e15 	stw	r18,56(sp)
  802058:	dc400d15 	stw	r17,52(sp)
  80205c:	1440ca16 	blt	r2,r17,802388 <___vfprintf_internal_r+0x1958>
  802060:	a8c00204 	addi	r3,r21,8
  802064:	2000061e 	bne	r4,zero,802080 <___vfprintf_internal_r+0x1650>
  802068:	d9414717 	ldw	r5,1308(sp)
  80206c:	2800041e 	bne	r5,zero,802080 <___vfprintf_internal_r+0x1650>
  802070:	d9814c17 	ldw	r6,1328(sp)
  802074:	3080004c 	andi	r2,r6,1
  802078:	1005003a 	cmpeq	r2,r2,zero
  80207c:	103bea1e 	bne	r2,zero,801028 <___vfprintf_internal_r+0x5f8>
  802080:	00800044 	movi	r2,1
  802084:	dc400d17 	ldw	r17,52(sp)
  802088:	18800115 	stw	r2,4(r3)
  80208c:	d8814917 	ldw	r2,1316(sp)
  802090:	94800044 	addi	r18,r18,1
  802094:	8c400044 	addi	r17,r17,1
  802098:	18800015 	stw	r2,0(r3)
  80209c:	008001c4 	movi	r2,7
  8020a0:	dc800e15 	stw	r18,56(sp)
  8020a4:	dc400d15 	stw	r17,52(sp)
  8020a8:	1440ca16 	blt	r2,r17,8023d4 <___vfprintf_internal_r+0x19a4>
  8020ac:	18c00204 	addi	r3,r3,8
  8020b0:	0121c83a 	sub	r16,zero,r4
  8020b4:	0400500e 	bge	zero,r16,8021f8 <___vfprintf_internal_r+0x17c8>
  8020b8:	00800404 	movi	r2,16
  8020bc:	1400800e 	bge	r2,r16,8022c0 <___vfprintf_internal_r+0x1890>
  8020c0:	1027883a 	mov	r19,r2
  8020c4:	070020b4 	movhi	fp,130
  8020c8:	e72c1884 	addi	fp,fp,-20382
  8020cc:	050001c4 	movi	r20,7
  8020d0:	00000306 	br	8020e0 <___vfprintf_internal_r+0x16b0>
  8020d4:	18c00204 	addi	r3,r3,8
  8020d8:	843ffc04 	addi	r16,r16,-16
  8020dc:	9c007a0e 	bge	r19,r16,8022c8 <___vfprintf_internal_r+0x1898>
  8020e0:	94800404 	addi	r18,r18,16
  8020e4:	8c400044 	addi	r17,r17,1
  8020e8:	1f000015 	stw	fp,0(r3)
  8020ec:	1cc00115 	stw	r19,4(r3)
  8020f0:	dc800e15 	stw	r18,56(sp)
  8020f4:	dc400d15 	stw	r17,52(sp)
  8020f8:	a47ff60e 	bge	r20,r17,8020d4 <___vfprintf_internal_r+0x16a4>
  8020fc:	d9014f17 	ldw	r4,1340(sp)
  802100:	b00b883a 	mov	r5,r22
  802104:	d9800c04 	addi	r6,sp,48
  802108:	08009d80 	call	8009d8 <__sprint_r>
  80210c:	103c001e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  802110:	dc800e17 	ldw	r18,56(sp)
  802114:	dc400d17 	ldw	r17,52(sp)
  802118:	d8c01904 	addi	r3,sp,100
  80211c:	003fee06 	br	8020d8 <___vfprintf_internal_r+0x16a8>
  802120:	3c000017 	ldw	r16,0(r7)
  802124:	0023883a 	mov	r17,zero
  802128:	39c00104 	addi	r7,r7,4
  80212c:	d9c14015 	stw	r7,1280(sp)
  802130:	003e8c06 	br	801b64 <___vfprintf_internal_r+0x1134>
  802134:	d9401904 	addi	r5,sp,100
  802138:	dd000f04 	addi	r20,sp,60
  80213c:	d9414115 	stw	r5,1284(sp)
  802140:	d9814417 	ldw	r6,1296(sp)
  802144:	880a973a 	slli	r5,r17,28
  802148:	8004d13a 	srli	r2,r16,4
  80214c:	810003cc 	andi	r4,r16,15
  802150:	3109883a 	add	r4,r6,r4
  802154:	2884b03a 	or	r2,r5,r2
  802158:	21400003 	ldbu	r5,0(r4)
  80215c:	d9014117 	ldw	r4,1284(sp)
  802160:	8806d13a 	srli	r3,r17,4
  802164:	1021883a 	mov	r16,r2
  802168:	213fffc4 	addi	r4,r4,-1
  80216c:	d9014115 	stw	r4,1284(sp)
  802170:	d9814117 	ldw	r6,1284(sp)
  802174:	10c8b03a 	or	r4,r2,r3
  802178:	1823883a 	mov	r17,r3
  80217c:	31400005 	stb	r5,0(r6)
  802180:	203fef1e 	bne	r4,zero,802140 <___vfprintf_internal_r+0x1710>
  802184:	003cc506 	br	80149c <___vfprintf_internal_r+0xa6c>
  802188:	00800c04 	movi	r2,48
  80218c:	d98018c4 	addi	r6,sp,99
  802190:	dd000f04 	addi	r20,sp,60
  802194:	d88018c5 	stb	r2,99(sp)
  802198:	d9814115 	stw	r6,1284(sp)
  80219c:	003cbf06 	br	80149c <___vfprintf_internal_r+0xa6c>
  8021a0:	dc400d17 	ldw	r17,52(sp)
  8021a4:	070020b4 	movhi	fp,130
  8021a8:	e72c1c84 	addi	fp,fp,-20366
  8021ac:	003bc106 	br	8010b4 <___vfprintf_internal_r+0x684>
  8021b0:	d9414c17 	ldw	r5,1328(sp)
  8021b4:	2880040c 	andi	r2,r5,16
  8021b8:	10007c26 	beq	r2,zero,8023ac <___vfprintf_internal_r+0x197c>
  8021bc:	38800017 	ldw	r2,0(r7)
  8021c0:	39c00104 	addi	r7,r7,4
  8021c4:	d9c14015 	stw	r7,1280(sp)
  8021c8:	d9814b17 	ldw	r6,1324(sp)
  8021cc:	d9c14017 	ldw	r7,1280(sp)
  8021d0:	11800015 	stw	r6,0(r2)
  8021d4:	003a7206 	br	800ba0 <___vfprintf_internal_r+0x170>
  8021d8:	d9014f17 	ldw	r4,1340(sp)
  8021dc:	b00b883a 	mov	r5,r22
  8021e0:	d9800c04 	addi	r6,sp,48
  8021e4:	08009d80 	call	8009d8 <__sprint_r>
  8021e8:	103bc91e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  8021ec:	dc800e17 	ldw	r18,56(sp)
  8021f0:	dc400d17 	ldw	r17,52(sp)
  8021f4:	d8c01904 	addi	r3,sp,100
  8021f8:	d9014717 	ldw	r4,1308(sp)
  8021fc:	d9414117 	ldw	r5,1284(sp)
  802200:	8c400044 	addi	r17,r17,1
  802204:	9125883a 	add	r18,r18,r4
  802208:	008001c4 	movi	r2,7
  80220c:	19400015 	stw	r5,0(r3)
  802210:	19000115 	stw	r4,4(r3)
  802214:	dc800e15 	stw	r18,56(sp)
  802218:	dc400d15 	stw	r17,52(sp)
  80221c:	147ce816 	blt	r2,r17,8015c0 <___vfprintf_internal_r+0xb90>
  802220:	18c00204 	addi	r3,r3,8
  802224:	003b8006 	br	801028 <___vfprintf_internal_r+0x5f8>
  802228:	38c00017 	ldw	r3,0(r7)
  80222c:	39000204 	addi	r4,r7,8
  802230:	d9014015 	stw	r4,1280(sp)
  802234:	d8c14215 	stw	r3,1288(sp)
  802238:	39c00117 	ldw	r7,4(r7)
  80223c:	d9c14315 	stw	r7,1292(sp)
  802240:	003e1a06 	br	801aac <___vfprintf_internal_r+0x107c>
  802244:	0005883a 	mov	r2,zero
  802248:	1409c83a 	sub	r4,r2,r16
  80224c:	1105803a 	cmpltu	r2,r2,r4
  802250:	044bc83a 	sub	r5,zero,r17
  802254:	2885c83a 	sub	r2,r5,r2
  802258:	2021883a 	mov	r16,r4
  80225c:	1023883a 	mov	r17,r2
  802260:	01000044 	movi	r4,1
  802264:	00800b44 	movi	r2,45
  802268:	d8800405 	stb	r2,16(sp)
  80226c:	003c7e06 	br	801468 <___vfprintf_internal_r+0xa38>
  802270:	d9014f17 	ldw	r4,1340(sp)
  802274:	b00b883a 	mov	r5,r22
  802278:	d9800c04 	addi	r6,sp,48
  80227c:	08009d80 	call	8009d8 <__sprint_r>
  802280:	103ba31e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  802284:	dc800e17 	ldw	r18,56(sp)
  802288:	dc400d17 	ldw	r17,52(sp)
  80228c:	d9000517 	ldw	r4,20(sp)
  802290:	d9401904 	addi	r5,sp,100
  802294:	003da106 	br	80191c <___vfprintf_internal_r+0xeec>
  802298:	d9014f17 	ldw	r4,1340(sp)
  80229c:	b00b883a 	mov	r5,r22
  8022a0:	d9800c04 	addi	r6,sp,48
  8022a4:	08009d80 	call	8009d8 <__sprint_r>
  8022a8:	103b991e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  8022ac:	dc800e17 	ldw	r18,56(sp)
  8022b0:	dc400d17 	ldw	r17,52(sp)
  8022b4:	d9000517 	ldw	r4,20(sp)
  8022b8:	d8c01904 	addi	r3,sp,100
  8022bc:	003d8b06 	br	8018ec <___vfprintf_internal_r+0xebc>
  8022c0:	070020b4 	movhi	fp,130
  8022c4:	e72c1884 	addi	fp,fp,-20382
  8022c8:	9425883a 	add	r18,r18,r16
  8022cc:	8c400044 	addi	r17,r17,1
  8022d0:	008001c4 	movi	r2,7
  8022d4:	1f000015 	stw	fp,0(r3)
  8022d8:	1c000115 	stw	r16,4(r3)
  8022dc:	dc800e15 	stw	r18,56(sp)
  8022e0:	dc400d15 	stw	r17,52(sp)
  8022e4:	147fbc16 	blt	r2,r17,8021d8 <___vfprintf_internal_r+0x17a8>
  8022e8:	18c00204 	addi	r3,r3,8
  8022ec:	003fc206 	br	8021f8 <___vfprintf_internal_r+0x17c8>
  8022f0:	d9014f17 	ldw	r4,1340(sp)
  8022f4:	b00b883a 	mov	r5,r22
  8022f8:	d9800c04 	addi	r6,sp,48
  8022fc:	08009d80 	call	8009d8 <__sprint_r>
  802300:	103b831e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  802304:	dc800e17 	ldw	r18,56(sp)
  802308:	d9000517 	ldw	r4,20(sp)
  80230c:	d8c01904 	addi	r3,sp,100
  802310:	003cfc06 	br	801704 <___vfprintf_internal_r+0xcd4>
  802314:	070020b4 	movhi	fp,130
  802318:	e72c1884 	addi	fp,fp,-20382
  80231c:	003bde06 	br	801298 <___vfprintf_internal_r+0x868>
  802320:	008020b4 	movhi	r2,130
  802324:	10ac0704 	addi	r2,r2,-20452
  802328:	d8814115 	stw	r2,1284(sp)
  80232c:	003def06 	br	801aec <___vfprintf_internal_r+0x10bc>
  802330:	d9014217 	ldw	r4,1288(sp)
  802334:	d9414317 	ldw	r5,1292(sp)
  802338:	08074880 	call	807488 <__isnand>
  80233c:	10003926 	beq	r2,zero,802424 <___vfprintf_internal_r+0x19f4>
  802340:	d9414d17 	ldw	r5,1332(sp)
  802344:	008011c4 	movi	r2,71
  802348:	1140ce16 	blt	r2,r5,802684 <___vfprintf_internal_r+0x1c54>
  80234c:	018020b4 	movhi	r6,130
  802350:	31ac0804 	addi	r6,r6,-20448
  802354:	d9814115 	stw	r6,1284(sp)
  802358:	003de406 	br	801aec <___vfprintf_internal_r+0x10bc>
  80235c:	d9014c17 	ldw	r4,1328(sp)
  802360:	bdc00044 	addi	r23,r23,1
  802364:	b8c00007 	ldb	r3,0(r23)
  802368:	21000814 	ori	r4,r4,32
  80236c:	d9014c15 	stw	r4,1328(sp)
  802370:	003a2e06 	br	800c2c <___vfprintf_internal_r+0x1fc>
  802374:	dcc14515 	stw	r19,1300(sp)
  802378:	98011016 	blt	r19,zero,8027bc <___vfprintf_internal_r+0x1d8c>
  80237c:	980f883a 	mov	r7,r19
  802380:	d8014615 	stw	zero,1304(sp)
  802384:	003c4c06 	br	8014b8 <___vfprintf_internal_r+0xa88>
  802388:	d9014f17 	ldw	r4,1340(sp)
  80238c:	b00b883a 	mov	r5,r22
  802390:	d9800c04 	addi	r6,sp,48
  802394:	08009d80 	call	8009d8 <__sprint_r>
  802398:	103b5d1e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  80239c:	dc800e17 	ldw	r18,56(sp)
  8023a0:	d9000517 	ldw	r4,20(sp)
  8023a4:	d8c01904 	addi	r3,sp,100
  8023a8:	003f2e06 	br	802064 <___vfprintf_internal_r+0x1634>
  8023ac:	d8c14c17 	ldw	r3,1328(sp)
  8023b0:	1880100c 	andi	r2,r3,64
  8023b4:	1000a026 	beq	r2,zero,802638 <___vfprintf_internal_r+0x1c08>
  8023b8:	38800017 	ldw	r2,0(r7)
  8023bc:	39c00104 	addi	r7,r7,4
  8023c0:	d9c14015 	stw	r7,1280(sp)
  8023c4:	d9014b17 	ldw	r4,1324(sp)
  8023c8:	d9c14017 	ldw	r7,1280(sp)
  8023cc:	1100000d 	sth	r4,0(r2)
  8023d0:	0039f306 	br	800ba0 <___vfprintf_internal_r+0x170>
  8023d4:	d9014f17 	ldw	r4,1340(sp)
  8023d8:	b00b883a 	mov	r5,r22
  8023dc:	d9800c04 	addi	r6,sp,48
  8023e0:	08009d80 	call	8009d8 <__sprint_r>
  8023e4:	103b4a1e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  8023e8:	dc800e17 	ldw	r18,56(sp)
  8023ec:	dc400d17 	ldw	r17,52(sp)
  8023f0:	d9000517 	ldw	r4,20(sp)
  8023f4:	d8c01904 	addi	r3,sp,100
  8023f8:	003f2d06 	br	8020b0 <___vfprintf_internal_r+0x1680>
  8023fc:	00800184 	movi	r2,6
  802400:	14c09a36 	bltu	r2,r19,80266c <___vfprintf_internal_r+0x1c3c>
  802404:	dcc14515 	stw	r19,1300(sp)
  802408:	9800010e 	bge	r19,zero,802410 <___vfprintf_internal_r+0x19e0>
  80240c:	d8014515 	stw	zero,1300(sp)
  802410:	008020b4 	movhi	r2,130
  802414:	10ac0a04 	addi	r2,r2,-20440
  802418:	980f883a 	mov	r7,r19
  80241c:	d8814115 	stw	r2,1284(sp)
  802420:	003a7206 	br	800dec <___vfprintf_internal_r+0x3bc>
  802424:	00bfffc4 	movi	r2,-1
  802428:	9880e226 	beq	r19,r2,8027b4 <___vfprintf_internal_r+0x1d84>
  80242c:	d9414d17 	ldw	r5,1332(sp)
  802430:	008019c4 	movi	r2,103
  802434:	2880dc26 	beq	r5,r2,8027a8 <___vfprintf_internal_r+0x1d78>
  802438:	008011c4 	movi	r2,71
  80243c:	2880da26 	beq	r5,r2,8027a8 <___vfprintf_internal_r+0x1d78>
  802440:	d9414c17 	ldw	r5,1328(sp)
  802444:	d9014317 	ldw	r4,1292(sp)
  802448:	d9814217 	ldw	r6,1288(sp)
  80244c:	29404014 	ori	r5,r5,256
  802450:	d9414c15 	stw	r5,1328(sp)
  802454:	2000cc16 	blt	r4,zero,802788 <___vfprintf_internal_r+0x1d58>
  802458:	3021883a 	mov	r16,r6
  80245c:	2023883a 	mov	r17,r4
  802460:	0039883a 	mov	fp,zero
  802464:	d9414d17 	ldw	r5,1332(sp)
  802468:	00801984 	movi	r2,102
  80246c:	2880b726 	beq	r5,r2,80274c <___vfprintf_internal_r+0x1d1c>
  802470:	00801184 	movi	r2,70
  802474:	2880b526 	beq	r5,r2,80274c <___vfprintf_internal_r+0x1d1c>
  802478:	00801944 	movi	r2,101
  80247c:	2880c826 	beq	r5,r2,8027a0 <___vfprintf_internal_r+0x1d70>
  802480:	00801144 	movi	r2,69
  802484:	2880c626 	beq	r5,r2,8027a0 <___vfprintf_internal_r+0x1d70>
  802488:	9829883a 	mov	r20,r19
  80248c:	d9014f17 	ldw	r4,1340(sp)
  802490:	d8800504 	addi	r2,sp,20
  802494:	880d883a 	mov	r6,r17
  802498:	d8800115 	stw	r2,4(sp)
  80249c:	d8c00604 	addi	r3,sp,24
  8024a0:	d8800704 	addi	r2,sp,28
  8024a4:	800b883a 	mov	r5,r16
  8024a8:	01c00084 	movi	r7,2
  8024ac:	d8c00215 	stw	r3,8(sp)
  8024b0:	d8800315 	stw	r2,12(sp)
  8024b4:	dd000015 	stw	r20,0(sp)
  8024b8:	0802c980 	call	802c98 <_dtoa_r>
  8024bc:	d9814d17 	ldw	r6,1332(sp)
  8024c0:	d8814115 	stw	r2,1284(sp)
  8024c4:	008019c4 	movi	r2,103
  8024c8:	30809526 	beq	r6,r2,802720 <___vfprintf_internal_r+0x1cf0>
  8024cc:	d8c14d17 	ldw	r3,1332(sp)
  8024d0:	008011c4 	movi	r2,71
  8024d4:	18809226 	beq	r3,r2,802720 <___vfprintf_internal_r+0x1cf0>
  8024d8:	d9414117 	ldw	r5,1284(sp)
  8024dc:	d9814d17 	ldw	r6,1332(sp)
  8024e0:	00801984 	movi	r2,102
  8024e4:	2d25883a 	add	r18,r5,r20
  8024e8:	30808626 	beq	r6,r2,802704 <___vfprintf_internal_r+0x1cd4>
  8024ec:	00801184 	movi	r2,70
  8024f0:	30808426 	beq	r6,r2,802704 <___vfprintf_internal_r+0x1cd4>
  8024f4:	000d883a 	mov	r6,zero
  8024f8:	000f883a 	mov	r7,zero
  8024fc:	880b883a 	mov	r5,r17
  802500:	8009883a 	mov	r4,r16
  802504:	08093c40 	call	8093c4 <__eqdf2>
  802508:	1000751e 	bne	r2,zero,8026e0 <___vfprintf_internal_r+0x1cb0>
  80250c:	9005883a 	mov	r2,r18
  802510:	dc800715 	stw	r18,28(sp)
  802514:	d9014117 	ldw	r4,1284(sp)
  802518:	d9414d17 	ldw	r5,1332(sp)
  80251c:	00c019c4 	movi	r3,103
  802520:	1125c83a 	sub	r18,r2,r4
  802524:	28c06826 	beq	r5,r3,8026c8 <___vfprintf_internal_r+0x1c98>
  802528:	008011c4 	movi	r2,71
  80252c:	28806626 	beq	r5,r2,8026c8 <___vfprintf_internal_r+0x1c98>
  802530:	d9000517 	ldw	r4,20(sp)
  802534:	d8c14d17 	ldw	r3,1332(sp)
  802538:	00801944 	movi	r2,101
  80253c:	10c05516 	blt	r2,r3,802694 <___vfprintf_internal_r+0x1c64>
  802540:	213fffc4 	addi	r4,r4,-1
  802544:	d9000515 	stw	r4,20(sp)
  802548:	d8c00805 	stb	r3,32(sp)
  80254c:	2021883a 	mov	r16,r4
  802550:	2000c116 	blt	r4,zero,802858 <___vfprintf_internal_r+0x1e28>
  802554:	00800ac4 	movi	r2,43
  802558:	d8800845 	stb	r2,33(sp)
  80255c:	00800244 	movi	r2,9
  802560:	1400af0e 	bge	r2,r16,802820 <___vfprintf_internal_r+0x1df0>
  802564:	1027883a 	mov	r19,r2
  802568:	dc400b84 	addi	r17,sp,46
  80256c:	8009883a 	mov	r4,r16
  802570:	01400284 	movi	r5,10
  802574:	0809aac0 	call	809aac <__modsi3>
  802578:	10800c04 	addi	r2,r2,48
  80257c:	8c7fffc4 	addi	r17,r17,-1
  802580:	8009883a 	mov	r4,r16
  802584:	01400284 	movi	r5,10
  802588:	88800005 	stb	r2,0(r17)
  80258c:	0809a4c0 	call	809a4c <__divsi3>
  802590:	1021883a 	mov	r16,r2
  802594:	98bff516 	blt	r19,r2,80256c <___vfprintf_internal_r+0x1b3c>
  802598:	10c00c04 	addi	r3,r2,48
  80259c:	d88009c4 	addi	r2,sp,39
  8025a0:	108001c4 	addi	r2,r2,7
  8025a4:	897fffc4 	addi	r5,r17,-1
  8025a8:	88ffffc5 	stb	r3,-1(r17)
  8025ac:	2880a72e 	bgeu	r5,r2,80284c <___vfprintf_internal_r+0x1e1c>
  8025b0:	1009883a 	mov	r4,r2
  8025b4:	d9800804 	addi	r6,sp,32
  8025b8:	d8c00884 	addi	r3,sp,34
  8025bc:	28800003 	ldbu	r2,0(r5)
  8025c0:	29400044 	addi	r5,r5,1
  8025c4:	18800005 	stb	r2,0(r3)
  8025c8:	18c00044 	addi	r3,r3,1
  8025cc:	293ffb36 	bltu	r5,r4,8025bc <___vfprintf_internal_r+0x1b8c>
  8025d0:	1987c83a 	sub	r3,r3,r6
  8025d4:	00800044 	movi	r2,1
  8025d8:	d8c14815 	stw	r3,1312(sp)
  8025dc:	90cf883a 	add	r7,r18,r3
  8025e0:	1480960e 	bge	r2,r18,80283c <___vfprintf_internal_r+0x1e0c>
  8025e4:	39c00044 	addi	r7,r7,1
  8025e8:	d9c14515 	stw	r7,1300(sp)
  8025ec:	38003416 	blt	r7,zero,8026c0 <___vfprintf_internal_r+0x1c90>
  8025f0:	e0803fcc 	andi	r2,fp,255
  8025f4:	1080201c 	xori	r2,r2,128
  8025f8:	10bfe004 	addi	r2,r2,-128
  8025fc:	10004e26 	beq	r2,zero,802738 <___vfprintf_internal_r+0x1d08>
  802600:	00800b44 	movi	r2,45
  802604:	dc814715 	stw	r18,1308(sp)
  802608:	d8014615 	stw	zero,1304(sp)
  80260c:	d8800405 	stb	r2,16(sp)
  802610:	003bab06 	br	8014c0 <___vfprintf_internal_r+0xa90>
  802614:	00800b44 	movi	r2,45
  802618:	d8800405 	stb	r2,16(sp)
  80261c:	003d2d06 	br	801ad4 <___vfprintf_internal_r+0x10a4>
  802620:	d9014f17 	ldw	r4,1340(sp)
  802624:	b00b883a 	mov	r5,r22
  802628:	d9800c04 	addi	r6,sp,48
  80262c:	08009d80 	call	8009d8 <__sprint_r>
  802630:	103ab71e 	bne	r2,zero,801110 <___vfprintf_internal_r+0x6e0>
  802634:	003ab506 	br	80110c <___vfprintf_internal_r+0x6dc>
  802638:	38800017 	ldw	r2,0(r7)
  80263c:	39c00104 	addi	r7,r7,4
  802640:	d9c14015 	stw	r7,1280(sp)
  802644:	d9414b17 	ldw	r5,1324(sp)
  802648:	d9c14017 	ldw	r7,1280(sp)
  80264c:	11400015 	stw	r5,0(r2)
  802650:	00395306 	br	800ba0 <___vfprintf_internal_r+0x170>
  802654:	980f883a 	mov	r7,r19
  802658:	dcc14515 	stw	r19,1300(sp)
  80265c:	d8014615 	stw	zero,1304(sp)
  802660:	003b9506 	br	8014b8 <___vfprintf_internal_r+0xa88>
  802664:	0027883a 	mov	r19,zero
  802668:	00397206 	br	800c34 <___vfprintf_internal_r+0x204>
  80266c:	00c020b4 	movhi	r3,130
  802670:	18ec0a04 	addi	r3,r3,-20440
  802674:	100f883a 	mov	r7,r2
  802678:	d8814515 	stw	r2,1300(sp)
  80267c:	d8c14115 	stw	r3,1284(sp)
  802680:	0039da06 	br	800dec <___vfprintf_internal_r+0x3bc>
  802684:	008020b4 	movhi	r2,130
  802688:	10ac0904 	addi	r2,r2,-20444
  80268c:	d8814115 	stw	r2,1284(sp)
  802690:	003d1606 	br	801aec <___vfprintf_internal_r+0x10bc>
  802694:	d9414d17 	ldw	r5,1332(sp)
  802698:	00801984 	movi	r2,102
  80269c:	28804926 	beq	r5,r2,8027c4 <___vfprintf_internal_r+0x1d94>
  8026a0:	200f883a 	mov	r7,r4
  8026a4:	24805716 	blt	r4,r18,802804 <___vfprintf_internal_r+0x1dd4>
  8026a8:	d9414c17 	ldw	r5,1328(sp)
  8026ac:	2880004c 	andi	r2,r5,1
  8026b0:	10000126 	beq	r2,zero,8026b8 <___vfprintf_internal_r+0x1c88>
  8026b4:	21c00044 	addi	r7,r4,1
  8026b8:	d9c14515 	stw	r7,1300(sp)
  8026bc:	383fcc0e 	bge	r7,zero,8025f0 <___vfprintf_internal_r+0x1bc0>
  8026c0:	d8014515 	stw	zero,1300(sp)
  8026c4:	003fca06 	br	8025f0 <___vfprintf_internal_r+0x1bc0>
  8026c8:	d9000517 	ldw	r4,20(sp)
  8026cc:	00bfff04 	movi	r2,-4
  8026d0:	1100480e 	bge	r2,r4,8027f4 <___vfprintf_internal_r+0x1dc4>
  8026d4:	99004716 	blt	r19,r4,8027f4 <___vfprintf_internal_r+0x1dc4>
  8026d8:	d8c14d15 	stw	r3,1332(sp)
  8026dc:	003ff006 	br	8026a0 <___vfprintf_internal_r+0x1c70>
  8026e0:	d8800717 	ldw	r2,28(sp)
  8026e4:	14bf8b2e 	bgeu	r2,r18,802514 <___vfprintf_internal_r+0x1ae4>
  8026e8:	9007883a 	mov	r3,r18
  8026ec:	01000c04 	movi	r4,48
  8026f0:	11000005 	stb	r4,0(r2)
  8026f4:	10800044 	addi	r2,r2,1
  8026f8:	d8800715 	stw	r2,28(sp)
  8026fc:	18bffc1e 	bne	r3,r2,8026f0 <___vfprintf_internal_r+0x1cc0>
  802700:	003f8406 	br	802514 <___vfprintf_internal_r+0x1ae4>
  802704:	d8814117 	ldw	r2,1284(sp)
  802708:	10c00007 	ldb	r3,0(r2)
  80270c:	00800c04 	movi	r2,48
  802710:	18805b26 	beq	r3,r2,802880 <___vfprintf_internal_r+0x1e50>
  802714:	d9000517 	ldw	r4,20(sp)
  802718:	9125883a 	add	r18,r18,r4
  80271c:	003f7506 	br	8024f4 <___vfprintf_internal_r+0x1ac4>
  802720:	d9014c17 	ldw	r4,1328(sp)
  802724:	2080004c 	andi	r2,r4,1
  802728:	1005003a 	cmpeq	r2,r2,zero
  80272c:	103f6a26 	beq	r2,zero,8024d8 <___vfprintf_internal_r+0x1aa8>
  802730:	d8800717 	ldw	r2,28(sp)
  802734:	003f7706 	br	802514 <___vfprintf_internal_r+0x1ae4>
  802738:	d9c14515 	stw	r7,1300(sp)
  80273c:	38004d16 	blt	r7,zero,802874 <___vfprintf_internal_r+0x1e44>
  802740:	dc814715 	stw	r18,1308(sp)
  802744:	d8014615 	stw	zero,1304(sp)
  802748:	003b5b06 	br	8014b8 <___vfprintf_internal_r+0xa88>
  80274c:	d9014f17 	ldw	r4,1340(sp)
  802750:	d8800504 	addi	r2,sp,20
  802754:	d8800115 	stw	r2,4(sp)
  802758:	d8c00604 	addi	r3,sp,24
  80275c:	d8800704 	addi	r2,sp,28
  802760:	800b883a 	mov	r5,r16
  802764:	880d883a 	mov	r6,r17
  802768:	01c000c4 	movi	r7,3
  80276c:	d8c00215 	stw	r3,8(sp)
  802770:	d8800315 	stw	r2,12(sp)
  802774:	dcc00015 	stw	r19,0(sp)
  802778:	9829883a 	mov	r20,r19
  80277c:	0802c980 	call	802c98 <_dtoa_r>
  802780:	d8814115 	stw	r2,1284(sp)
  802784:	003f5106 	br	8024cc <___vfprintf_internal_r+0x1a9c>
  802788:	d8c14217 	ldw	r3,1288(sp)
  80278c:	d9014317 	ldw	r4,1292(sp)
  802790:	07000b44 	movi	fp,45
  802794:	1821883a 	mov	r16,r3
  802798:	2460003c 	xorhi	r17,r4,32768
  80279c:	003f3106 	br	802464 <___vfprintf_internal_r+0x1a34>
  8027a0:	9d000044 	addi	r20,r19,1
  8027a4:	003f3906 	br	80248c <___vfprintf_internal_r+0x1a5c>
  8027a8:	983f251e 	bne	r19,zero,802440 <___vfprintf_internal_r+0x1a10>
  8027ac:	04c00044 	movi	r19,1
  8027b0:	003f2306 	br	802440 <___vfprintf_internal_r+0x1a10>
  8027b4:	04c00184 	movi	r19,6
  8027b8:	003f2106 	br	802440 <___vfprintf_internal_r+0x1a10>
  8027bc:	d8014515 	stw	zero,1300(sp)
  8027c0:	003eee06 	br	80237c <___vfprintf_internal_r+0x194c>
  8027c4:	200f883a 	mov	r7,r4
  8027c8:	0100370e 	bge	zero,r4,8028a8 <___vfprintf_internal_r+0x1e78>
  8027cc:	9800031e 	bne	r19,zero,8027dc <___vfprintf_internal_r+0x1dac>
  8027d0:	d9814c17 	ldw	r6,1328(sp)
  8027d4:	3080004c 	andi	r2,r6,1
  8027d8:	103fb726 	beq	r2,zero,8026b8 <___vfprintf_internal_r+0x1c88>
  8027dc:	20800044 	addi	r2,r4,1
  8027e0:	98a7883a 	add	r19,r19,r2
  8027e4:	dcc14515 	stw	r19,1300(sp)
  8027e8:	980f883a 	mov	r7,r19
  8027ec:	983f800e 	bge	r19,zero,8025f0 <___vfprintf_internal_r+0x1bc0>
  8027f0:	003fb306 	br	8026c0 <___vfprintf_internal_r+0x1c90>
  8027f4:	d9814d17 	ldw	r6,1332(sp)
  8027f8:	31bfff84 	addi	r6,r6,-2
  8027fc:	d9814d15 	stw	r6,1332(sp)
  802800:	003f4c06 	br	802534 <___vfprintf_internal_r+0x1b04>
  802804:	0100180e 	bge	zero,r4,802868 <___vfprintf_internal_r+0x1e38>
  802808:	00800044 	movi	r2,1
  80280c:	1485883a 	add	r2,r2,r18
  802810:	d8814515 	stw	r2,1300(sp)
  802814:	100f883a 	mov	r7,r2
  802818:	103f750e 	bge	r2,zero,8025f0 <___vfprintf_internal_r+0x1bc0>
  80281c:	003fa806 	br	8026c0 <___vfprintf_internal_r+0x1c90>
  802820:	80c00c04 	addi	r3,r16,48
  802824:	00800c04 	movi	r2,48
  802828:	d8c008c5 	stb	r3,35(sp)
  80282c:	d9800804 	addi	r6,sp,32
  802830:	d8c00904 	addi	r3,sp,36
  802834:	d8800885 	stb	r2,34(sp)
  802838:	003f6506 	br	8025d0 <___vfprintf_internal_r+0x1ba0>
  80283c:	d9014c17 	ldw	r4,1328(sp)
  802840:	2084703a 	and	r2,r4,r2
  802844:	103f9c26 	beq	r2,zero,8026b8 <___vfprintf_internal_r+0x1c88>
  802848:	003f6606 	br	8025e4 <___vfprintf_internal_r+0x1bb4>
  80284c:	d9800804 	addi	r6,sp,32
  802850:	d8c00884 	addi	r3,sp,34
  802854:	003f5e06 	br	8025d0 <___vfprintf_internal_r+0x1ba0>
  802858:	00800b44 	movi	r2,45
  80285c:	0121c83a 	sub	r16,zero,r4
  802860:	d8800845 	stb	r2,33(sp)
  802864:	003f3d06 	br	80255c <___vfprintf_internal_r+0x1b2c>
  802868:	00800084 	movi	r2,2
  80286c:	1105c83a 	sub	r2,r2,r4
  802870:	003fe606 	br	80280c <___vfprintf_internal_r+0x1ddc>
  802874:	d8014515 	stw	zero,1300(sp)
  802878:	dc814715 	stw	r18,1308(sp)
  80287c:	003fb106 	br	802744 <___vfprintf_internal_r+0x1d14>
  802880:	000d883a 	mov	r6,zero
  802884:	000f883a 	mov	r7,zero
  802888:	8009883a 	mov	r4,r16
  80288c:	880b883a 	mov	r5,r17
  802890:	080944c0 	call	80944c <__nedf2>
  802894:	103f9f26 	beq	r2,zero,802714 <___vfprintf_internal_r+0x1ce4>
  802898:	00800044 	movi	r2,1
  80289c:	1509c83a 	sub	r4,r2,r20
  8028a0:	d9000515 	stw	r4,20(sp)
  8028a4:	003f9b06 	br	802714 <___vfprintf_internal_r+0x1ce4>
  8028a8:	98000d1e 	bne	r19,zero,8028e0 <___vfprintf_internal_r+0x1eb0>
  8028ac:	d8c14c17 	ldw	r3,1328(sp)
  8028b0:	1880004c 	andi	r2,r3,1
  8028b4:	10000a1e 	bne	r2,zero,8028e0 <___vfprintf_internal_r+0x1eb0>
  8028b8:	01000044 	movi	r4,1
  8028bc:	200f883a 	mov	r7,r4
  8028c0:	d9014515 	stw	r4,1300(sp)
  8028c4:	003f4a06 	br	8025f0 <___vfprintf_internal_r+0x1bc0>
  8028c8:	3cc00017 	ldw	r19,0(r7)
  8028cc:	39c00104 	addi	r7,r7,4
  8028d0:	983d0e0e 	bge	r19,zero,801d0c <___vfprintf_internal_r+0x12dc>
  8028d4:	b8c00007 	ldb	r3,0(r23)
  8028d8:	04ffffc4 	movi	r19,-1
  8028dc:	0038d306 	br	800c2c <___vfprintf_internal_r+0x1fc>
  8028e0:	9cc00084 	addi	r19,r19,2
  8028e4:	dcc14515 	stw	r19,1300(sp)
  8028e8:	980f883a 	mov	r7,r19
  8028ec:	983f400e 	bge	r19,zero,8025f0 <___vfprintf_internal_r+0x1bc0>
  8028f0:	003f7306 	br	8026c0 <___vfprintf_internal_r+0x1c90>

008028f4 <__vfprintf_internal>:
  8028f4:	008020b4 	movhi	r2,130
  8028f8:	10b3da04 	addi	r2,r2,-12440
  8028fc:	2013883a 	mov	r9,r4
  802900:	11000017 	ldw	r4,0(r2)
  802904:	2805883a 	mov	r2,r5
  802908:	300f883a 	mov	r7,r6
  80290c:	480b883a 	mov	r5,r9
  802910:	100d883a 	mov	r6,r2
  802914:	0800a301 	jmpi	800a30 <___vfprintf_internal_r>

00802918 <__swsetup_r>:
  802918:	008020b4 	movhi	r2,130
  80291c:	10b3da04 	addi	r2,r2,-12440
  802920:	10c00017 	ldw	r3,0(r2)
  802924:	defffd04 	addi	sp,sp,-12
  802928:	dc400115 	stw	r17,4(sp)
  80292c:	dc000015 	stw	r16,0(sp)
  802930:	dfc00215 	stw	ra,8(sp)
  802934:	2023883a 	mov	r17,r4
  802938:	2821883a 	mov	r16,r5
  80293c:	18000226 	beq	r3,zero,802948 <__swsetup_r+0x30>
  802940:	18800e17 	ldw	r2,56(r3)
  802944:	10001f26 	beq	r2,zero,8029c4 <__swsetup_r+0xac>
  802948:	8100030b 	ldhu	r4,12(r16)
  80294c:	2080020c 	andi	r2,r4,8
  802950:	10002826 	beq	r2,zero,8029f4 <__swsetup_r+0xdc>
  802954:	81400417 	ldw	r5,16(r16)
  802958:	28001d26 	beq	r5,zero,8029d0 <__swsetup_r+0xb8>
  80295c:	2080004c 	andi	r2,r4,1
  802960:	1005003a 	cmpeq	r2,r2,zero
  802964:	10000b26 	beq	r2,zero,802994 <__swsetup_r+0x7c>
  802968:	2080008c 	andi	r2,r4,2
  80296c:	10001226 	beq	r2,zero,8029b8 <__swsetup_r+0xa0>
  802970:	0005883a 	mov	r2,zero
  802974:	80800215 	stw	r2,8(r16)
  802978:	28000b26 	beq	r5,zero,8029a8 <__swsetup_r+0x90>
  80297c:	0005883a 	mov	r2,zero
  802980:	dfc00217 	ldw	ra,8(sp)
  802984:	dc400117 	ldw	r17,4(sp)
  802988:	dc000017 	ldw	r16,0(sp)
  80298c:	dec00304 	addi	sp,sp,12
  802990:	f800283a 	ret
  802994:	80800517 	ldw	r2,20(r16)
  802998:	80000215 	stw	zero,8(r16)
  80299c:	0085c83a 	sub	r2,zero,r2
  8029a0:	80800615 	stw	r2,24(r16)
  8029a4:	283ff51e 	bne	r5,zero,80297c <__swsetup_r+0x64>
  8029a8:	2080200c 	andi	r2,r4,128
  8029ac:	103ff326 	beq	r2,zero,80297c <__swsetup_r+0x64>
  8029b0:	00bfffc4 	movi	r2,-1
  8029b4:	003ff206 	br	802980 <__swsetup_r+0x68>
  8029b8:	80800517 	ldw	r2,20(r16)
  8029bc:	80800215 	stw	r2,8(r16)
  8029c0:	003fed06 	br	802978 <__swsetup_r+0x60>
  8029c4:	1809883a 	mov	r4,r3
  8029c8:	08044e40 	call	8044e4 <__sinit>
  8029cc:	003fde06 	br	802948 <__swsetup_r+0x30>
  8029d0:	20c0a00c 	andi	r3,r4,640
  8029d4:	00808004 	movi	r2,512
  8029d8:	18bfe026 	beq	r3,r2,80295c <__swsetup_r+0x44>
  8029dc:	8809883a 	mov	r4,r17
  8029e0:	800b883a 	mov	r5,r16
  8029e4:	08052900 	call	805290 <__smakebuf_r>
  8029e8:	8100030b 	ldhu	r4,12(r16)
  8029ec:	81400417 	ldw	r5,16(r16)
  8029f0:	003fda06 	br	80295c <__swsetup_r+0x44>
  8029f4:	2080040c 	andi	r2,r4,16
  8029f8:	103fed26 	beq	r2,zero,8029b0 <__swsetup_r+0x98>
  8029fc:	2080010c 	andi	r2,r4,4
  802a00:	10001226 	beq	r2,zero,802a4c <__swsetup_r+0x134>
  802a04:	81400c17 	ldw	r5,48(r16)
  802a08:	28000526 	beq	r5,zero,802a20 <__swsetup_r+0x108>
  802a0c:	80801004 	addi	r2,r16,64
  802a10:	28800226 	beq	r5,r2,802a1c <__swsetup_r+0x104>
  802a14:	8809883a 	mov	r4,r17
  802a18:	080489c0 	call	80489c <_free_r>
  802a1c:	80000c15 	stw	zero,48(r16)
  802a20:	8080030b 	ldhu	r2,12(r16)
  802a24:	81400417 	ldw	r5,16(r16)
  802a28:	80000115 	stw	zero,4(r16)
  802a2c:	10bff6cc 	andi	r2,r2,65499
  802a30:	8080030d 	sth	r2,12(r16)
  802a34:	81400015 	stw	r5,0(r16)
  802a38:	8080030b 	ldhu	r2,12(r16)
  802a3c:	10800214 	ori	r2,r2,8
  802a40:	113fffcc 	andi	r4,r2,65535
  802a44:	8080030d 	sth	r2,12(r16)
  802a48:	003fc306 	br	802958 <__swsetup_r+0x40>
  802a4c:	81400417 	ldw	r5,16(r16)
  802a50:	003ff906 	br	802a38 <__swsetup_r+0x120>

00802a54 <quorem>:
  802a54:	28c00417 	ldw	r3,16(r5)
  802a58:	20800417 	ldw	r2,16(r4)
  802a5c:	defff104 	addi	sp,sp,-60
  802a60:	dfc00e15 	stw	ra,56(sp)
  802a64:	df000d15 	stw	fp,52(sp)
  802a68:	ddc00c15 	stw	r23,48(sp)
  802a6c:	dd800b15 	stw	r22,44(sp)
  802a70:	dd400a15 	stw	r21,40(sp)
  802a74:	dd000915 	stw	r20,36(sp)
  802a78:	dcc00815 	stw	r19,32(sp)
  802a7c:	dc800715 	stw	r18,28(sp)
  802a80:	dc400615 	stw	r17,24(sp)
  802a84:	dc000515 	stw	r16,20(sp)
  802a88:	d9000315 	stw	r4,12(sp)
  802a8c:	d9400415 	stw	r5,16(sp)
  802a90:	10c07f16 	blt	r2,r3,802c90 <quorem+0x23c>
  802a94:	1d3fffc4 	addi	r20,r3,-1
  802a98:	d8c00417 	ldw	r3,16(sp)
  802a9c:	d9000317 	ldw	r4,12(sp)
  802aa0:	a505883a 	add	r2,r20,r20
  802aa4:	1085883a 	add	r2,r2,r2
  802aa8:	1cc00504 	addi	r19,r3,20
  802aac:	25c00504 	addi	r23,r4,20
  802ab0:	98ad883a 	add	r22,r19,r2
  802ab4:	15c7883a 	add	r3,r2,r23
  802ab8:	b1400017 	ldw	r5,0(r22)
  802abc:	19000017 	ldw	r4,0(r3)
  802ac0:	d8c00015 	stw	r3,0(sp)
  802ac4:	29400044 	addi	r5,r5,1
  802ac8:	d9000215 	stw	r4,8(sp)
  802acc:	0809b0c0 	call	809b0c <__udivsi3>
  802ad0:	1039883a 	mov	fp,r2
  802ad4:	10003d1e 	bne	r2,zero,802bcc <quorem+0x178>
  802ad8:	d9400417 	ldw	r5,16(sp)
  802adc:	d9000317 	ldw	r4,12(sp)
  802ae0:	0805f240 	call	805f24 <__mcmp>
  802ae4:	10002c16 	blt	r2,zero,802b98 <quorem+0x144>
  802ae8:	e7000044 	addi	fp,fp,1
  802aec:	b80f883a 	mov	r7,r23
  802af0:	0011883a 	mov	r8,zero
  802af4:	0009883a 	mov	r4,zero
  802af8:	99400017 	ldw	r5,0(r19)
  802afc:	38c00017 	ldw	r3,0(r7)
  802b00:	9cc00104 	addi	r19,r19,4
  802b04:	28bfffcc 	andi	r2,r5,65535
  802b08:	2085883a 	add	r2,r4,r2
  802b0c:	11bfffcc 	andi	r6,r2,65535
  802b10:	193fffcc 	andi	r4,r3,65535
  802b14:	1004d43a 	srli	r2,r2,16
  802b18:	280ad43a 	srli	r5,r5,16
  802b1c:	2189c83a 	sub	r4,r4,r6
  802b20:	2209883a 	add	r4,r4,r8
  802b24:	1806d43a 	srli	r3,r3,16
  802b28:	288b883a 	add	r5,r5,r2
  802b2c:	200dd43a 	srai	r6,r4,16
  802b30:	28bfffcc 	andi	r2,r5,65535
  802b34:	1887c83a 	sub	r3,r3,r2
  802b38:	1987883a 	add	r3,r3,r6
  802b3c:	3900000d 	sth	r4,0(r7)
  802b40:	38c0008d 	sth	r3,2(r7)
  802b44:	2808d43a 	srli	r4,r5,16
  802b48:	39c00104 	addi	r7,r7,4
  802b4c:	1811d43a 	srai	r8,r3,16
  802b50:	b4ffe92e 	bgeu	r22,r19,802af8 <quorem+0xa4>
  802b54:	a505883a 	add	r2,r20,r20
  802b58:	1085883a 	add	r2,r2,r2
  802b5c:	b885883a 	add	r2,r23,r2
  802b60:	10c00017 	ldw	r3,0(r2)
  802b64:	18000c1e 	bne	r3,zero,802b98 <quorem+0x144>
  802b68:	113fff04 	addi	r4,r2,-4
  802b6c:	b900082e 	bgeu	r23,r4,802b90 <quorem+0x13c>
  802b70:	10bfff17 	ldw	r2,-4(r2)
  802b74:	10000326 	beq	r2,zero,802b84 <quorem+0x130>
  802b78:	00000506 	br	802b90 <quorem+0x13c>
  802b7c:	20800017 	ldw	r2,0(r4)
  802b80:	1000031e 	bne	r2,zero,802b90 <quorem+0x13c>
  802b84:	213fff04 	addi	r4,r4,-4
  802b88:	a53fffc4 	addi	r20,r20,-1
  802b8c:	b93ffb36 	bltu	r23,r4,802b7c <quorem+0x128>
  802b90:	d9000317 	ldw	r4,12(sp)
  802b94:	25000415 	stw	r20,16(r4)
  802b98:	e005883a 	mov	r2,fp
  802b9c:	dfc00e17 	ldw	ra,56(sp)
  802ba0:	df000d17 	ldw	fp,52(sp)
  802ba4:	ddc00c17 	ldw	r23,48(sp)
  802ba8:	dd800b17 	ldw	r22,44(sp)
  802bac:	dd400a17 	ldw	r21,40(sp)
  802bb0:	dd000917 	ldw	r20,36(sp)
  802bb4:	dcc00817 	ldw	r19,32(sp)
  802bb8:	dc800717 	ldw	r18,28(sp)
  802bbc:	dc400617 	ldw	r17,24(sp)
  802bc0:	dc000517 	ldw	r16,20(sp)
  802bc4:	dec00f04 	addi	sp,sp,60
  802bc8:	f800283a 	ret
  802bcc:	b823883a 	mov	r17,r23
  802bd0:	9825883a 	mov	r18,r19
  802bd4:	d8000115 	stw	zero,4(sp)
  802bd8:	002b883a 	mov	r21,zero
  802bdc:	94000017 	ldw	r16,0(r18)
  802be0:	e009883a 	mov	r4,fp
  802be4:	94800104 	addi	r18,r18,4
  802be8:	817fffcc 	andi	r5,r16,65535
  802bec:	0809b1c0 	call	809b1c <__mulsi3>
  802bf0:	800ad43a 	srli	r5,r16,16
  802bf4:	e009883a 	mov	r4,fp
  802bf8:	a8a1883a 	add	r16,r21,r2
  802bfc:	0809b1c0 	call	809b1c <__mulsi3>
  802c00:	89000017 	ldw	r4,0(r17)
  802c04:	80ffffcc 	andi	r3,r16,65535
  802c08:	8020d43a 	srli	r16,r16,16
  802c0c:	217fffcc 	andi	r5,r4,65535
  802c10:	28cbc83a 	sub	r5,r5,r3
  802c14:	d8c00117 	ldw	r3,4(sp)
  802c18:	2008d43a 	srli	r4,r4,16
  802c1c:	1405883a 	add	r2,r2,r16
  802c20:	28cb883a 	add	r5,r5,r3
  802c24:	280dd43a 	srai	r6,r5,16
  802c28:	10ffffcc 	andi	r3,r2,65535
  802c2c:	20c9c83a 	sub	r4,r4,r3
  802c30:	2189883a 	add	r4,r4,r6
  802c34:	8900008d 	sth	r4,2(r17)
  802c38:	2009d43a 	srai	r4,r4,16
  802c3c:	8940000d 	sth	r5,0(r17)
  802c40:	102ad43a 	srli	r21,r2,16
  802c44:	8c400104 	addi	r17,r17,4
  802c48:	d9000115 	stw	r4,4(sp)
  802c4c:	b4bfe32e 	bgeu	r22,r18,802bdc <quorem+0x188>
  802c50:	d9000217 	ldw	r4,8(sp)
  802c54:	203fa01e 	bne	r4,zero,802ad8 <quorem+0x84>
  802c58:	d8800017 	ldw	r2,0(sp)
  802c5c:	10ffff04 	addi	r3,r2,-4
  802c60:	b8c0082e 	bgeu	r23,r3,802c84 <quorem+0x230>
  802c64:	10bfff17 	ldw	r2,-4(r2)
  802c68:	10000326 	beq	r2,zero,802c78 <quorem+0x224>
  802c6c:	00000506 	br	802c84 <quorem+0x230>
  802c70:	18800017 	ldw	r2,0(r3)
  802c74:	1000031e 	bne	r2,zero,802c84 <quorem+0x230>
  802c78:	18ffff04 	addi	r3,r3,-4
  802c7c:	a53fffc4 	addi	r20,r20,-1
  802c80:	b8fffb36 	bltu	r23,r3,802c70 <quorem+0x21c>
  802c84:	d8c00317 	ldw	r3,12(sp)
  802c88:	1d000415 	stw	r20,16(r3)
  802c8c:	003f9206 	br	802ad8 <quorem+0x84>
  802c90:	0005883a 	mov	r2,zero
  802c94:	003fc106 	br	802b9c <quorem+0x148>

00802c98 <_dtoa_r>:
  802c98:	22001017 	ldw	r8,64(r4)
  802c9c:	deffda04 	addi	sp,sp,-152
  802ca0:	dd402115 	stw	r21,132(sp)
  802ca4:	dd002015 	stw	r20,128(sp)
  802ca8:	dc801e15 	stw	r18,120(sp)
  802cac:	dc401d15 	stw	r17,116(sp)
  802cb0:	dfc02515 	stw	ra,148(sp)
  802cb4:	df002415 	stw	fp,144(sp)
  802cb8:	ddc02315 	stw	r23,140(sp)
  802cbc:	dd802215 	stw	r22,136(sp)
  802cc0:	dcc01f15 	stw	r19,124(sp)
  802cc4:	dc001c15 	stw	r16,112(sp)
  802cc8:	d9001615 	stw	r4,88(sp)
  802ccc:	3023883a 	mov	r17,r6
  802cd0:	2829883a 	mov	r20,r5
  802cd4:	d9c01715 	stw	r7,92(sp)
  802cd8:	dc802817 	ldw	r18,160(sp)
  802cdc:	302b883a 	mov	r21,r6
  802ce0:	40000a26 	beq	r8,zero,802d0c <_dtoa_r+0x74>
  802ce4:	20801117 	ldw	r2,68(r4)
  802ce8:	400b883a 	mov	r5,r8
  802cec:	40800115 	stw	r2,4(r8)
  802cf0:	20c01117 	ldw	r3,68(r4)
  802cf4:	00800044 	movi	r2,1
  802cf8:	10c4983a 	sll	r2,r2,r3
  802cfc:	40800215 	stw	r2,8(r8)
  802d00:	0805dc80 	call	805dc8 <_Bfree>
  802d04:	d8c01617 	ldw	r3,88(sp)
  802d08:	18001015 	stw	zero,64(r3)
  802d0c:	8800a316 	blt	r17,zero,802f9c <_dtoa_r+0x304>
  802d10:	90000015 	stw	zero,0(r18)
  802d14:	a8dffc2c 	andhi	r3,r21,32752
  802d18:	009ffc34 	movhi	r2,32752
  802d1c:	18809126 	beq	r3,r2,802f64 <_dtoa_r+0x2cc>
  802d20:	000d883a 	mov	r6,zero
  802d24:	000f883a 	mov	r7,zero
  802d28:	a009883a 	mov	r4,r20
  802d2c:	a80b883a 	mov	r5,r21
  802d30:	dd001215 	stw	r20,72(sp)
  802d34:	dd401315 	stw	r21,76(sp)
  802d38:	080944c0 	call	80944c <__nedf2>
  802d3c:	1000171e 	bne	r2,zero,802d9c <_dtoa_r+0x104>
  802d40:	d9802717 	ldw	r6,156(sp)
  802d44:	00800044 	movi	r2,1
  802d48:	30800015 	stw	r2,0(r6)
  802d4c:	d8802917 	ldw	r2,164(sp)
  802d50:	10029b26 	beq	r2,zero,8037c0 <_dtoa_r+0xb28>
  802d54:	d9002917 	ldw	r4,164(sp)
  802d58:	008020b4 	movhi	r2,130
  802d5c:	10ac1844 	addi	r2,r2,-20383
  802d60:	10ffffc4 	addi	r3,r2,-1
  802d64:	20800015 	stw	r2,0(r4)
  802d68:	1805883a 	mov	r2,r3
  802d6c:	dfc02517 	ldw	ra,148(sp)
  802d70:	df002417 	ldw	fp,144(sp)
  802d74:	ddc02317 	ldw	r23,140(sp)
  802d78:	dd802217 	ldw	r22,136(sp)
  802d7c:	dd402117 	ldw	r21,132(sp)
  802d80:	dd002017 	ldw	r20,128(sp)
  802d84:	dcc01f17 	ldw	r19,124(sp)
  802d88:	dc801e17 	ldw	r18,120(sp)
  802d8c:	dc401d17 	ldw	r17,116(sp)
  802d90:	dc001c17 	ldw	r16,112(sp)
  802d94:	dec02604 	addi	sp,sp,152
  802d98:	f800283a 	ret
  802d9c:	d9001617 	ldw	r4,88(sp)
  802da0:	d9401217 	ldw	r5,72(sp)
  802da4:	d8800104 	addi	r2,sp,4
  802da8:	a80d883a 	mov	r6,r21
  802dac:	d9c00204 	addi	r7,sp,8
  802db0:	d8800015 	stw	r2,0(sp)
  802db4:	08064040 	call	806404 <__d2b>
  802db8:	d8800715 	stw	r2,28(sp)
  802dbc:	a804d53a 	srli	r2,r21,20
  802dc0:	1101ffcc 	andi	r4,r2,2047
  802dc4:	20008626 	beq	r4,zero,802fe0 <_dtoa_r+0x348>
  802dc8:	d8c01217 	ldw	r3,72(sp)
  802dcc:	00800434 	movhi	r2,16
  802dd0:	10bfffc4 	addi	r2,r2,-1
  802dd4:	ddc00117 	ldw	r23,4(sp)
  802dd8:	a884703a 	and	r2,r21,r2
  802ddc:	1811883a 	mov	r8,r3
  802de0:	124ffc34 	orhi	r9,r2,16368
  802de4:	25bf0044 	addi	r22,r4,-1023
  802de8:	d8000815 	stw	zero,32(sp)
  802dec:	0005883a 	mov	r2,zero
  802df0:	00cffe34 	movhi	r3,16376
  802df4:	480b883a 	mov	r5,r9
  802df8:	4009883a 	mov	r4,r8
  802dfc:	180f883a 	mov	r7,r3
  802e00:	100d883a 	mov	r6,r2
  802e04:	0808cb40 	call	808cb4 <__subdf3>
  802e08:	0218dbf4 	movhi	r8,25455
  802e0c:	4210d844 	addi	r8,r8,17249
  802e10:	024ff4f4 	movhi	r9,16339
  802e14:	4a61e9c4 	addi	r9,r9,-30809
  802e18:	480f883a 	mov	r7,r9
  802e1c:	400d883a 	mov	r6,r8
  802e20:	180b883a 	mov	r5,r3
  802e24:	1009883a 	mov	r4,r2
  802e28:	0808da80 	call	808da8 <__muldf3>
  802e2c:	0222d874 	movhi	r8,35681
  802e30:	42322cc4 	addi	r8,r8,-14157
  802e34:	024ff1f4 	movhi	r9,16327
  802e38:	4a628a04 	addi	r9,r9,-30168
  802e3c:	480f883a 	mov	r7,r9
  802e40:	400d883a 	mov	r6,r8
  802e44:	180b883a 	mov	r5,r3
  802e48:	1009883a 	mov	r4,r2
  802e4c:	0808d340 	call	808d34 <__adddf3>
  802e50:	b009883a 	mov	r4,r22
  802e54:	1021883a 	mov	r16,r2
  802e58:	1823883a 	mov	r17,r3
  802e5c:	080966c0 	call	80966c <__floatsidf>
  802e60:	021427f4 	movhi	r8,20639
  802e64:	421e7ec4 	addi	r8,r8,31227
  802e68:	024ff4f4 	movhi	r9,16339
  802e6c:	4a5104c4 	addi	r9,r9,17427
  802e70:	480f883a 	mov	r7,r9
  802e74:	400d883a 	mov	r6,r8
  802e78:	180b883a 	mov	r5,r3
  802e7c:	1009883a 	mov	r4,r2
  802e80:	0808da80 	call	808da8 <__muldf3>
  802e84:	180f883a 	mov	r7,r3
  802e88:	880b883a 	mov	r5,r17
  802e8c:	100d883a 	mov	r6,r2
  802e90:	8009883a 	mov	r4,r16
  802e94:	0808d340 	call	808d34 <__adddf3>
  802e98:	1009883a 	mov	r4,r2
  802e9c:	180b883a 	mov	r5,r3
  802ea0:	1021883a 	mov	r16,r2
  802ea4:	1823883a 	mov	r17,r3
  802ea8:	08097640 	call	809764 <__fixdfsi>
  802eac:	000d883a 	mov	r6,zero
  802eb0:	000f883a 	mov	r7,zero
  802eb4:	8009883a 	mov	r4,r16
  802eb8:	880b883a 	mov	r5,r17
  802ebc:	d8800d15 	stw	r2,52(sp)
  802ec0:	08095e40 	call	8095e4 <__ltdf2>
  802ec4:	10031716 	blt	r2,zero,803b24 <_dtoa_r+0xe8c>
  802ec8:	d8c00d17 	ldw	r3,52(sp)
  802ecc:	00800584 	movi	r2,22
  802ed0:	10c1482e 	bgeu	r2,r3,8033f4 <_dtoa_r+0x75c>
  802ed4:	01000044 	movi	r4,1
  802ed8:	d9000c15 	stw	r4,48(sp)
  802edc:	bd85c83a 	sub	r2,r23,r22
  802ee0:	11bfffc4 	addi	r6,r2,-1
  802ee4:	30030b16 	blt	r6,zero,803b14 <_dtoa_r+0xe7c>
  802ee8:	d9800a15 	stw	r6,40(sp)
  802eec:	d8001115 	stw	zero,68(sp)
  802ef0:	d8c00d17 	ldw	r3,52(sp)
  802ef4:	1802ff16 	blt	r3,zero,803af4 <_dtoa_r+0xe5c>
  802ef8:	d9000a17 	ldw	r4,40(sp)
  802efc:	d8c00915 	stw	r3,36(sp)
  802f00:	d8001015 	stw	zero,64(sp)
  802f04:	20c9883a 	add	r4,r4,r3
  802f08:	d9000a15 	stw	r4,40(sp)
  802f0c:	d9001717 	ldw	r4,92(sp)
  802f10:	00800244 	movi	r2,9
  802f14:	11004636 	bltu	r2,r4,803030 <_dtoa_r+0x398>
  802f18:	00800144 	movi	r2,5
  802f1c:	11020416 	blt	r2,r4,803730 <_dtoa_r+0xa98>
  802f20:	04400044 	movi	r17,1
  802f24:	d8c01717 	ldw	r3,92(sp)
  802f28:	00800144 	movi	r2,5
  802f2c:	10c1ed36 	bltu	r2,r3,8036e4 <_dtoa_r+0xa4c>
  802f30:	18c5883a 	add	r2,r3,r3
  802f34:	1085883a 	add	r2,r2,r2
  802f38:	00c02034 	movhi	r3,128
  802f3c:	18cbd304 	addi	r3,r3,12108
  802f40:	10c5883a 	add	r2,r2,r3
  802f44:	11000017 	ldw	r4,0(r2)
  802f48:	2000683a 	jmp	r4
  802f4c:	00803038 	rdprs	r2,zero,192
  802f50:	00803038 	rdprs	r2,zero,192
  802f54:	00803a38 	rdprs	r2,zero,232
  802f58:	00803a10 	cmplti	r2,zero,232
  802f5c:	00803a54 	movui	r2,233
  802f60:	00803a60 	cmpeqi	r2,zero,233
  802f64:	d9002717 	ldw	r4,156(sp)
  802f68:	0089c3c4 	movi	r2,9999
  802f6c:	20800015 	stw	r2,0(r4)
  802f70:	a0001026 	beq	r20,zero,802fb4 <_dtoa_r+0x31c>
  802f74:	00c020b4 	movhi	r3,130
  802f78:	18ec2404 	addi	r3,r3,-20336
  802f7c:	d9802917 	ldw	r6,164(sp)
  802f80:	303f7926 	beq	r6,zero,802d68 <_dtoa_r+0xd0>
  802f84:	188000c7 	ldb	r2,3(r3)
  802f88:	190000c4 	addi	r4,r3,3
  802f8c:	1000101e 	bne	r2,zero,802fd0 <_dtoa_r+0x338>
  802f90:	d8802917 	ldw	r2,164(sp)
  802f94:	11000015 	stw	r4,0(r2)
  802f98:	003f7306 	br	802d68 <_dtoa_r+0xd0>
  802f9c:	00a00034 	movhi	r2,32768
  802fa0:	10bfffc4 	addi	r2,r2,-1
  802fa4:	00c00044 	movi	r3,1
  802fa8:	88aa703a 	and	r21,r17,r2
  802fac:	90c00015 	stw	r3,0(r18)
  802fb0:	003f5806 	br	802d14 <_dtoa_r+0x7c>
  802fb4:	00800434 	movhi	r2,16
  802fb8:	10bfffc4 	addi	r2,r2,-1
  802fbc:	a884703a 	and	r2,r21,r2
  802fc0:	103fec1e 	bne	r2,zero,802f74 <_dtoa_r+0x2dc>
  802fc4:	00c020b4 	movhi	r3,130
  802fc8:	18ec2104 	addi	r3,r3,-20348
  802fcc:	003feb06 	br	802f7c <_dtoa_r+0x2e4>
  802fd0:	d8802917 	ldw	r2,164(sp)
  802fd4:	19000204 	addi	r4,r3,8
  802fd8:	11000015 	stw	r4,0(r2)
  802fdc:	003f6206 	br	802d68 <_dtoa_r+0xd0>
  802fe0:	ddc00117 	ldw	r23,4(sp)
  802fe4:	d8800217 	ldw	r2,8(sp)
  802fe8:	01000804 	movi	r4,32
  802fec:	b8c10c84 	addi	r3,r23,1074
  802ff0:	18a3883a 	add	r17,r3,r2
  802ff4:	2441b80e 	bge	r4,r17,8036d8 <_dtoa_r+0xa40>
  802ff8:	00c01004 	movi	r3,64
  802ffc:	1c47c83a 	sub	r3,r3,r17
  803000:	88bff804 	addi	r2,r17,-32
  803004:	a8c6983a 	sll	r3,r21,r3
  803008:	a084d83a 	srl	r2,r20,r2
  80300c:	1888b03a 	or	r4,r3,r2
  803010:	080983c0 	call	80983c <__floatunsidf>
  803014:	1011883a 	mov	r8,r2
  803018:	00bf8434 	movhi	r2,65040
  80301c:	01000044 	movi	r4,1
  803020:	10d3883a 	add	r9,r2,r3
  803024:	8dbef344 	addi	r22,r17,-1075
  803028:	d9000815 	stw	r4,32(sp)
  80302c:	003f6f06 	br	802dec <_dtoa_r+0x154>
  803030:	d8001715 	stw	zero,92(sp)
  803034:	04400044 	movi	r17,1
  803038:	00bfffc4 	movi	r2,-1
  80303c:	00c00044 	movi	r3,1
  803040:	d8800e15 	stw	r2,56(sp)
  803044:	d8002615 	stw	zero,152(sp)
  803048:	d8800f15 	stw	r2,60(sp)
  80304c:	d8c00b15 	stw	r3,44(sp)
  803050:	1021883a 	mov	r16,r2
  803054:	d8801617 	ldw	r2,88(sp)
  803058:	10001115 	stw	zero,68(r2)
  80305c:	d8801617 	ldw	r2,88(sp)
  803060:	11401117 	ldw	r5,68(r2)
  803064:	1009883a 	mov	r4,r2
  803068:	08063480 	call	806348 <_Balloc>
  80306c:	d8c01617 	ldw	r3,88(sp)
  803070:	d8800515 	stw	r2,20(sp)
  803074:	18801015 	stw	r2,64(r3)
  803078:	00800384 	movi	r2,14
  80307c:	14006836 	bltu	r2,r16,803220 <_dtoa_r+0x588>
  803080:	8805003a 	cmpeq	r2,r17,zero
  803084:	1000661e 	bne	r2,zero,803220 <_dtoa_r+0x588>
  803088:	d9000d17 	ldw	r4,52(sp)
  80308c:	0102300e 	bge	zero,r4,803950 <_dtoa_r+0xcb8>
  803090:	208003cc 	andi	r2,r4,15
  803094:	100490fa 	slli	r2,r2,3
  803098:	2025d13a 	srai	r18,r4,4
  80309c:	00c020b4 	movhi	r3,130
  8030a0:	18ec3604 	addi	r3,r3,-20264
  8030a4:	10c5883a 	add	r2,r2,r3
  8030a8:	90c0040c 	andi	r3,r18,16
  8030ac:	14000017 	ldw	r16,0(r2)
  8030b0:	14400117 	ldw	r17,4(r2)
  8030b4:	18036a1e 	bne	r3,zero,803e60 <_dtoa_r+0x11c8>
  8030b8:	05800084 	movi	r22,2
  8030bc:	90001026 	beq	r18,zero,803100 <_dtoa_r+0x468>
  8030c0:	04c020b4 	movhi	r19,130
  8030c4:	9cec6804 	addi	r19,r19,-20064
  8030c8:	9080004c 	andi	r2,r18,1
  8030cc:	1005003a 	cmpeq	r2,r2,zero
  8030d0:	1000081e 	bne	r2,zero,8030f4 <_dtoa_r+0x45c>
  8030d4:	99800017 	ldw	r6,0(r19)
  8030d8:	99c00117 	ldw	r7,4(r19)
  8030dc:	880b883a 	mov	r5,r17
  8030e0:	8009883a 	mov	r4,r16
  8030e4:	0808da80 	call	808da8 <__muldf3>
  8030e8:	1021883a 	mov	r16,r2
  8030ec:	b5800044 	addi	r22,r22,1
  8030f0:	1823883a 	mov	r17,r3
  8030f4:	9025d07a 	srai	r18,r18,1
  8030f8:	9cc00204 	addi	r19,r19,8
  8030fc:	903ff21e 	bne	r18,zero,8030c8 <_dtoa_r+0x430>
  803100:	a80b883a 	mov	r5,r21
  803104:	a009883a 	mov	r4,r20
  803108:	880f883a 	mov	r7,r17
  80310c:	800d883a 	mov	r6,r16
  803110:	080916c0 	call	80916c <__divdf3>
  803114:	1029883a 	mov	r20,r2
  803118:	182b883a 	mov	r21,r3
  80311c:	d8c00c17 	ldw	r3,48(sp)
  803120:	1805003a 	cmpeq	r2,r3,zero
  803124:	1000081e 	bne	r2,zero,803148 <_dtoa_r+0x4b0>
  803128:	0005883a 	mov	r2,zero
  80312c:	00cffc34 	movhi	r3,16368
  803130:	180f883a 	mov	r7,r3
  803134:	a009883a 	mov	r4,r20
  803138:	a80b883a 	mov	r5,r21
  80313c:	100d883a 	mov	r6,r2
  803140:	08095e40 	call	8095e4 <__ltdf2>
  803144:	1003fe16 	blt	r2,zero,804140 <_dtoa_r+0x14a8>
  803148:	b009883a 	mov	r4,r22
  80314c:	080966c0 	call	80966c <__floatsidf>
  803150:	180b883a 	mov	r5,r3
  803154:	1009883a 	mov	r4,r2
  803158:	a00d883a 	mov	r6,r20
  80315c:	a80f883a 	mov	r7,r21
  803160:	0808da80 	call	808da8 <__muldf3>
  803164:	0011883a 	mov	r8,zero
  803168:	02500734 	movhi	r9,16412
  80316c:	1009883a 	mov	r4,r2
  803170:	180b883a 	mov	r5,r3
  803174:	480f883a 	mov	r7,r9
  803178:	400d883a 	mov	r6,r8
  80317c:	0808d340 	call	808d34 <__adddf3>
  803180:	d9000f17 	ldw	r4,60(sp)
  803184:	102d883a 	mov	r22,r2
  803188:	00bf3034 	movhi	r2,64704
  80318c:	18b9883a 	add	fp,r3,r2
  803190:	e02f883a 	mov	r23,fp
  803194:	20028f1e 	bne	r4,zero,803bd4 <_dtoa_r+0xf3c>
  803198:	0005883a 	mov	r2,zero
  80319c:	00d00534 	movhi	r3,16404
  8031a0:	a009883a 	mov	r4,r20
  8031a4:	a80b883a 	mov	r5,r21
  8031a8:	180f883a 	mov	r7,r3
  8031ac:	100d883a 	mov	r6,r2
  8031b0:	0808cb40 	call	808cb4 <__subdf3>
  8031b4:	1009883a 	mov	r4,r2
  8031b8:	e00f883a 	mov	r7,fp
  8031bc:	180b883a 	mov	r5,r3
  8031c0:	b00d883a 	mov	r6,r22
  8031c4:	1025883a 	mov	r18,r2
  8031c8:	1827883a 	mov	r19,r3
  8031cc:	08094d40 	call	8094d4 <__gtdf2>
  8031d0:	00834f16 	blt	zero,r2,803f10 <_dtoa_r+0x1278>
  8031d4:	e0e0003c 	xorhi	r3,fp,32768
  8031d8:	9009883a 	mov	r4,r18
  8031dc:	980b883a 	mov	r5,r19
  8031e0:	180f883a 	mov	r7,r3
  8031e4:	b00d883a 	mov	r6,r22
  8031e8:	08095e40 	call	8095e4 <__ltdf2>
  8031ec:	1000080e 	bge	r2,zero,803210 <_dtoa_r+0x578>
  8031f0:	0027883a 	mov	r19,zero
  8031f4:	0025883a 	mov	r18,zero
  8031f8:	d8802617 	ldw	r2,152(sp)
  8031fc:	df000517 	ldw	fp,20(sp)
  803200:	d8000615 	stw	zero,24(sp)
  803204:	0084303a 	nor	r2,zero,r2
  803208:	d8800d15 	stw	r2,52(sp)
  80320c:	00019b06 	br	80387c <_dtoa_r+0xbe4>
  803210:	d9801217 	ldw	r6,72(sp)
  803214:	d8801317 	ldw	r2,76(sp)
  803218:	3029883a 	mov	r20,r6
  80321c:	102b883a 	mov	r21,r2
  803220:	d8c00217 	ldw	r3,8(sp)
  803224:	18008516 	blt	r3,zero,80343c <_dtoa_r+0x7a4>
  803228:	d9000d17 	ldw	r4,52(sp)
  80322c:	00800384 	movi	r2,14
  803230:	11008216 	blt	r2,r4,80343c <_dtoa_r+0x7a4>
  803234:	200490fa 	slli	r2,r4,3
  803238:	d9802617 	ldw	r6,152(sp)
  80323c:	00c020b4 	movhi	r3,130
  803240:	18ec3604 	addi	r3,r3,-20264
  803244:	10c5883a 	add	r2,r2,r3
  803248:	14800017 	ldw	r18,0(r2)
  80324c:	14c00117 	ldw	r19,4(r2)
  803250:	30031e16 	blt	r6,zero,803ecc <_dtoa_r+0x1234>
  803254:	d9000517 	ldw	r4,20(sp)
  803258:	d8c00f17 	ldw	r3,60(sp)
  80325c:	a823883a 	mov	r17,r21
  803260:	a021883a 	mov	r16,r20
  803264:	192b883a 	add	r21,r3,r4
  803268:	2039883a 	mov	fp,r4
  80326c:	00000f06 	br	8032ac <_dtoa_r+0x614>
  803270:	0005883a 	mov	r2,zero
  803274:	00d00934 	movhi	r3,16420
  803278:	5009883a 	mov	r4,r10
  80327c:	580b883a 	mov	r5,r11
  803280:	180f883a 	mov	r7,r3
  803284:	100d883a 	mov	r6,r2
  803288:	0808da80 	call	808da8 <__muldf3>
  80328c:	180b883a 	mov	r5,r3
  803290:	000d883a 	mov	r6,zero
  803294:	000f883a 	mov	r7,zero
  803298:	1009883a 	mov	r4,r2
  80329c:	1021883a 	mov	r16,r2
  8032a0:	1823883a 	mov	r17,r3
  8032a4:	080944c0 	call	80944c <__nedf2>
  8032a8:	10004526 	beq	r2,zero,8033c0 <_dtoa_r+0x728>
  8032ac:	900d883a 	mov	r6,r18
  8032b0:	980f883a 	mov	r7,r19
  8032b4:	8009883a 	mov	r4,r16
  8032b8:	880b883a 	mov	r5,r17
  8032bc:	080916c0 	call	80916c <__divdf3>
  8032c0:	180b883a 	mov	r5,r3
  8032c4:	1009883a 	mov	r4,r2
  8032c8:	08097640 	call	809764 <__fixdfsi>
  8032cc:	1009883a 	mov	r4,r2
  8032d0:	1029883a 	mov	r20,r2
  8032d4:	080966c0 	call	80966c <__floatsidf>
  8032d8:	180f883a 	mov	r7,r3
  8032dc:	9009883a 	mov	r4,r18
  8032e0:	980b883a 	mov	r5,r19
  8032e4:	100d883a 	mov	r6,r2
  8032e8:	0808da80 	call	808da8 <__muldf3>
  8032ec:	180f883a 	mov	r7,r3
  8032f0:	880b883a 	mov	r5,r17
  8032f4:	8009883a 	mov	r4,r16
  8032f8:	100d883a 	mov	r6,r2
  8032fc:	0808cb40 	call	808cb4 <__subdf3>
  803300:	1015883a 	mov	r10,r2
  803304:	a0800c04 	addi	r2,r20,48
  803308:	e0800005 	stb	r2,0(fp)
  80330c:	e7000044 	addi	fp,fp,1
  803310:	1817883a 	mov	r11,r3
  803314:	e57fd61e 	bne	fp,r21,803270 <_dtoa_r+0x5d8>
  803318:	500d883a 	mov	r6,r10
  80331c:	180f883a 	mov	r7,r3
  803320:	5009883a 	mov	r4,r10
  803324:	180b883a 	mov	r5,r3
  803328:	0808d340 	call	808d34 <__adddf3>
  80332c:	100d883a 	mov	r6,r2
  803330:	9009883a 	mov	r4,r18
  803334:	980b883a 	mov	r5,r19
  803338:	180f883a 	mov	r7,r3
  80333c:	1021883a 	mov	r16,r2
  803340:	1823883a 	mov	r17,r3
  803344:	08095e40 	call	8095e4 <__ltdf2>
  803348:	10000816 	blt	r2,zero,80336c <_dtoa_r+0x6d4>
  80334c:	980b883a 	mov	r5,r19
  803350:	800d883a 	mov	r6,r16
  803354:	880f883a 	mov	r7,r17
  803358:	9009883a 	mov	r4,r18
  80335c:	08093c40 	call	8093c4 <__eqdf2>
  803360:	1000171e 	bne	r2,zero,8033c0 <_dtoa_r+0x728>
  803364:	a080004c 	andi	r2,r20,1
  803368:	10001526 	beq	r2,zero,8033c0 <_dtoa_r+0x728>
  80336c:	d8800d17 	ldw	r2,52(sp)
  803370:	d8800415 	stw	r2,16(sp)
  803374:	e009883a 	mov	r4,fp
  803378:	213fffc4 	addi	r4,r4,-1
  80337c:	20c00007 	ldb	r3,0(r4)
  803380:	00800e44 	movi	r2,57
  803384:	1880081e 	bne	r3,r2,8033a8 <_dtoa_r+0x710>
  803388:	d8800517 	ldw	r2,20(sp)
  80338c:	113ffa1e 	bne	r2,r4,803378 <_dtoa_r+0x6e0>
  803390:	d8c00417 	ldw	r3,16(sp)
  803394:	d9800517 	ldw	r6,20(sp)
  803398:	00800c04 	movi	r2,48
  80339c:	18c00044 	addi	r3,r3,1
  8033a0:	d8c00415 	stw	r3,16(sp)
  8033a4:	30800005 	stb	r2,0(r6)
  8033a8:	20800003 	ldbu	r2,0(r4)
  8033ac:	d8c00417 	ldw	r3,16(sp)
  8033b0:	27000044 	addi	fp,r4,1
  8033b4:	10800044 	addi	r2,r2,1
  8033b8:	d8c00d15 	stw	r3,52(sp)
  8033bc:	20800005 	stb	r2,0(r4)
  8033c0:	d9001617 	ldw	r4,88(sp)
  8033c4:	d9400717 	ldw	r5,28(sp)
  8033c8:	0805dc80 	call	805dc8 <_Bfree>
  8033cc:	e0000005 	stb	zero,0(fp)
  8033d0:	d9800d17 	ldw	r6,52(sp)
  8033d4:	d8c02717 	ldw	r3,156(sp)
  8033d8:	d9002917 	ldw	r4,164(sp)
  8033dc:	30800044 	addi	r2,r6,1
  8033e0:	18800015 	stw	r2,0(r3)
  8033e4:	20029c26 	beq	r4,zero,803e58 <_dtoa_r+0x11c0>
  8033e8:	d8c00517 	ldw	r3,20(sp)
  8033ec:	27000015 	stw	fp,0(r4)
  8033f0:	003e5d06 	br	802d68 <_dtoa_r+0xd0>
  8033f4:	d9800d17 	ldw	r6,52(sp)
  8033f8:	00c020b4 	movhi	r3,130
  8033fc:	18ec3604 	addi	r3,r3,-20264
  803400:	d9001217 	ldw	r4,72(sp)
  803404:	300490fa 	slli	r2,r6,3
  803408:	d9401317 	ldw	r5,76(sp)
  80340c:	10c5883a 	add	r2,r2,r3
  803410:	12000017 	ldw	r8,0(r2)
  803414:	12400117 	ldw	r9,4(r2)
  803418:	400d883a 	mov	r6,r8
  80341c:	480f883a 	mov	r7,r9
  803420:	08095e40 	call	8095e4 <__ltdf2>
  803424:	1000030e 	bge	r2,zero,803434 <_dtoa_r+0x79c>
  803428:	d8800d17 	ldw	r2,52(sp)
  80342c:	10bfffc4 	addi	r2,r2,-1
  803430:	d8800d15 	stw	r2,52(sp)
  803434:	d8000c15 	stw	zero,48(sp)
  803438:	003ea806 	br	802edc <_dtoa_r+0x244>
  80343c:	d9000b17 	ldw	r4,44(sp)
  803440:	202cc03a 	cmpne	r22,r4,zero
  803444:	b000c71e 	bne	r22,zero,803764 <_dtoa_r+0xacc>
  803448:	dc001117 	ldw	r16,68(sp)
  80344c:	dc801017 	ldw	r18,64(sp)
  803450:	0027883a 	mov	r19,zero
  803454:	04000b0e 	bge	zero,r16,803484 <_dtoa_r+0x7ec>
  803458:	d8c00a17 	ldw	r3,40(sp)
  80345c:	00c0090e 	bge	zero,r3,803484 <_dtoa_r+0x7ec>
  803460:	8005883a 	mov	r2,r16
  803464:	1c011316 	blt	r3,r16,8038b4 <_dtoa_r+0xc1c>
  803468:	d9000a17 	ldw	r4,40(sp)
  80346c:	d9801117 	ldw	r6,68(sp)
  803470:	80a1c83a 	sub	r16,r16,r2
  803474:	2089c83a 	sub	r4,r4,r2
  803478:	308dc83a 	sub	r6,r6,r2
  80347c:	d9000a15 	stw	r4,40(sp)
  803480:	d9801115 	stw	r6,68(sp)
  803484:	d8801017 	ldw	r2,64(sp)
  803488:	0080150e 	bge	zero,r2,8034e0 <_dtoa_r+0x848>
  80348c:	d8c00b17 	ldw	r3,44(sp)
  803490:	1805003a 	cmpeq	r2,r3,zero
  803494:	1001c91e 	bne	r2,zero,803bbc <_dtoa_r+0xf24>
  803498:	04800e0e 	bge	zero,r18,8034d4 <_dtoa_r+0x83c>
  80349c:	d9001617 	ldw	r4,88(sp)
  8034a0:	980b883a 	mov	r5,r19
  8034a4:	900d883a 	mov	r6,r18
  8034a8:	0806c140 	call	806c14 <__pow5mult>
  8034ac:	d9001617 	ldw	r4,88(sp)
  8034b0:	d9800717 	ldw	r6,28(sp)
  8034b4:	100b883a 	mov	r5,r2
  8034b8:	1027883a 	mov	r19,r2
  8034bc:	08068580 	call	806858 <__multiply>
  8034c0:	d9001617 	ldw	r4,88(sp)
  8034c4:	d9400717 	ldw	r5,28(sp)
  8034c8:	1023883a 	mov	r17,r2
  8034cc:	0805dc80 	call	805dc8 <_Bfree>
  8034d0:	dc400715 	stw	r17,28(sp)
  8034d4:	d9001017 	ldw	r4,64(sp)
  8034d8:	248dc83a 	sub	r6,r4,r18
  8034dc:	30010e1e 	bne	r6,zero,803918 <_dtoa_r+0xc80>
  8034e0:	d9001617 	ldw	r4,88(sp)
  8034e4:	04400044 	movi	r17,1
  8034e8:	880b883a 	mov	r5,r17
  8034ec:	0806aac0 	call	806aac <__i2b>
  8034f0:	d9800917 	ldw	r6,36(sp)
  8034f4:	1025883a 	mov	r18,r2
  8034f8:	0180040e 	bge	zero,r6,80350c <_dtoa_r+0x874>
  8034fc:	d9001617 	ldw	r4,88(sp)
  803500:	100b883a 	mov	r5,r2
  803504:	0806c140 	call	806c14 <__pow5mult>
  803508:	1025883a 	mov	r18,r2
  80350c:	d8801717 	ldw	r2,92(sp)
  803510:	8880f30e 	bge	r17,r2,8038e0 <_dtoa_r+0xc48>
  803514:	0023883a 	mov	r17,zero
  803518:	d9800917 	ldw	r6,36(sp)
  80351c:	30019e1e 	bne	r6,zero,803b98 <_dtoa_r+0xf00>
  803520:	00c00044 	movi	r3,1
  803524:	d9000a17 	ldw	r4,40(sp)
  803528:	20c5883a 	add	r2,r4,r3
  80352c:	10c007cc 	andi	r3,r2,31
  803530:	1800841e 	bne	r3,zero,803744 <_dtoa_r+0xaac>
  803534:	00800704 	movi	r2,28
  803538:	d9000a17 	ldw	r4,40(sp)
  80353c:	d9801117 	ldw	r6,68(sp)
  803540:	80a1883a 	add	r16,r16,r2
  803544:	2089883a 	add	r4,r4,r2
  803548:	308d883a 	add	r6,r6,r2
  80354c:	d9000a15 	stw	r4,40(sp)
  803550:	d9801115 	stw	r6,68(sp)
  803554:	d8801117 	ldw	r2,68(sp)
  803558:	0080050e 	bge	zero,r2,803570 <_dtoa_r+0x8d8>
  80355c:	d9400717 	ldw	r5,28(sp)
  803560:	d9001617 	ldw	r4,88(sp)
  803564:	100d883a 	mov	r6,r2
  803568:	080670c0 	call	80670c <__lshift>
  80356c:	d8800715 	stw	r2,28(sp)
  803570:	d8c00a17 	ldw	r3,40(sp)
  803574:	00c0050e 	bge	zero,r3,80358c <_dtoa_r+0x8f4>
  803578:	d9001617 	ldw	r4,88(sp)
  80357c:	900b883a 	mov	r5,r18
  803580:	180d883a 	mov	r6,r3
  803584:	080670c0 	call	80670c <__lshift>
  803588:	1025883a 	mov	r18,r2
  80358c:	d9000c17 	ldw	r4,48(sp)
  803590:	2005003a 	cmpeq	r2,r4,zero
  803594:	10016f26 	beq	r2,zero,803b54 <_dtoa_r+0xebc>
  803598:	d9000f17 	ldw	r4,60(sp)
  80359c:	0102170e 	bge	zero,r4,803dfc <_dtoa_r+0x1164>
  8035a0:	d9800b17 	ldw	r6,44(sp)
  8035a4:	3005003a 	cmpeq	r2,r6,zero
  8035a8:	1000881e 	bne	r2,zero,8037cc <_dtoa_r+0xb34>
  8035ac:	0400050e 	bge	zero,r16,8035c4 <_dtoa_r+0x92c>
  8035b0:	d9001617 	ldw	r4,88(sp)
  8035b4:	980b883a 	mov	r5,r19
  8035b8:	800d883a 	mov	r6,r16
  8035bc:	080670c0 	call	80670c <__lshift>
  8035c0:	1027883a 	mov	r19,r2
  8035c4:	8804c03a 	cmpne	r2,r17,zero
  8035c8:	1002541e 	bne	r2,zero,803f1c <_dtoa_r+0x1284>
  8035cc:	980b883a 	mov	r5,r19
  8035d0:	dd800517 	ldw	r22,20(sp)
  8035d4:	dcc00615 	stw	r19,24(sp)
  8035d8:	a700004c 	andi	fp,r20,1
  8035dc:	2827883a 	mov	r19,r5
  8035e0:	d9000717 	ldw	r4,28(sp)
  8035e4:	900b883a 	mov	r5,r18
  8035e8:	0802a540 	call	802a54 <quorem>
  8035ec:	d9000717 	ldw	r4,28(sp)
  8035f0:	d9400617 	ldw	r5,24(sp)
  8035f4:	1023883a 	mov	r17,r2
  8035f8:	8dc00c04 	addi	r23,r17,48
  8035fc:	0805f240 	call	805f24 <__mcmp>
  803600:	d9001617 	ldw	r4,88(sp)
  803604:	900b883a 	mov	r5,r18
  803608:	980d883a 	mov	r6,r19
  80360c:	1029883a 	mov	r20,r2
  803610:	08065800 	call	806580 <__mdiff>
  803614:	102b883a 	mov	r21,r2
  803618:	10800317 	ldw	r2,12(r2)
  80361c:	1001281e 	bne	r2,zero,803ac0 <_dtoa_r+0xe28>
  803620:	d9000717 	ldw	r4,28(sp)
  803624:	a80b883a 	mov	r5,r21
  803628:	0805f240 	call	805f24 <__mcmp>
  80362c:	d9001617 	ldw	r4,88(sp)
  803630:	1021883a 	mov	r16,r2
  803634:	a80b883a 	mov	r5,r21
  803638:	0805dc80 	call	805dc8 <_Bfree>
  80363c:	8000041e 	bne	r16,zero,803650 <_dtoa_r+0x9b8>
  803640:	d8801717 	ldw	r2,92(sp)
  803644:	1000021e 	bne	r2,zero,803650 <_dtoa_r+0x9b8>
  803648:	e004c03a 	cmpne	r2,fp,zero
  80364c:	10011726 	beq	r2,zero,803aac <_dtoa_r+0xe14>
  803650:	a0010616 	blt	r20,zero,803a6c <_dtoa_r+0xdd4>
  803654:	a000041e 	bne	r20,zero,803668 <_dtoa_r+0x9d0>
  803658:	d8c01717 	ldw	r3,92(sp)
  80365c:	1800021e 	bne	r3,zero,803668 <_dtoa_r+0x9d0>
  803660:	e004c03a 	cmpne	r2,fp,zero
  803664:	10010126 	beq	r2,zero,803a6c <_dtoa_r+0xdd4>
  803668:	04023d16 	blt	zero,r16,803f60 <_dtoa_r+0x12c8>
  80366c:	b5c00005 	stb	r23,0(r22)
  803670:	d9800517 	ldw	r6,20(sp)
  803674:	d9000f17 	ldw	r4,60(sp)
  803678:	b5800044 	addi	r22,r22,1
  80367c:	3105883a 	add	r2,r6,r4
  803680:	b0806526 	beq	r22,r2,803818 <_dtoa_r+0xb80>
  803684:	d9400717 	ldw	r5,28(sp)
  803688:	d9001617 	ldw	r4,88(sp)
  80368c:	01800284 	movi	r6,10
  803690:	000f883a 	mov	r7,zero
  803694:	0806ae80 	call	806ae8 <__multadd>
  803698:	d8800715 	stw	r2,28(sp)
  80369c:	d8800617 	ldw	r2,24(sp)
  8036a0:	14c10c26 	beq	r2,r19,803ad4 <_dtoa_r+0xe3c>
  8036a4:	d9400617 	ldw	r5,24(sp)
  8036a8:	d9001617 	ldw	r4,88(sp)
  8036ac:	01800284 	movi	r6,10
  8036b0:	000f883a 	mov	r7,zero
  8036b4:	0806ae80 	call	806ae8 <__multadd>
  8036b8:	d9001617 	ldw	r4,88(sp)
  8036bc:	980b883a 	mov	r5,r19
  8036c0:	01800284 	movi	r6,10
  8036c4:	000f883a 	mov	r7,zero
  8036c8:	d8800615 	stw	r2,24(sp)
  8036cc:	0806ae80 	call	806ae8 <__multadd>
  8036d0:	1027883a 	mov	r19,r2
  8036d4:	003fc206 	br	8035e0 <_dtoa_r+0x948>
  8036d8:	2445c83a 	sub	r2,r4,r17
  8036dc:	a088983a 	sll	r4,r20,r2
  8036e0:	003e4b06 	br	803010 <_dtoa_r+0x378>
  8036e4:	01bfffc4 	movi	r6,-1
  8036e8:	00800044 	movi	r2,1
  8036ec:	d9800e15 	stw	r6,56(sp)
  8036f0:	d9800f15 	stw	r6,60(sp)
  8036f4:	d8800b15 	stw	r2,44(sp)
  8036f8:	d8c01617 	ldw	r3,88(sp)
  8036fc:	008005c4 	movi	r2,23
  803700:	18001115 	stw	zero,68(r3)
  803704:	1580082e 	bgeu	r2,r22,803728 <_dtoa_r+0xa90>
  803708:	00c00104 	movi	r3,4
  80370c:	0009883a 	mov	r4,zero
  803710:	18c7883a 	add	r3,r3,r3
  803714:	18800504 	addi	r2,r3,20
  803718:	21000044 	addi	r4,r4,1
  80371c:	b0bffc2e 	bgeu	r22,r2,803710 <_dtoa_r+0xa78>
  803720:	d9801617 	ldw	r6,88(sp)
  803724:	31001115 	stw	r4,68(r6)
  803728:	dc000f17 	ldw	r16,60(sp)
  80372c:	003e4b06 	br	80305c <_dtoa_r+0x3c4>
  803730:	d9801717 	ldw	r6,92(sp)
  803734:	0023883a 	mov	r17,zero
  803738:	31bfff04 	addi	r6,r6,-4
  80373c:	d9801715 	stw	r6,92(sp)
  803740:	003df806 	br	802f24 <_dtoa_r+0x28c>
  803744:	00800804 	movi	r2,32
  803748:	10c9c83a 	sub	r4,r2,r3
  80374c:	00c00104 	movi	r3,4
  803750:	19005a16 	blt	r3,r4,8038bc <_dtoa_r+0xc24>
  803754:	008000c4 	movi	r2,3
  803758:	113f7e16 	blt	r2,r4,803554 <_dtoa_r+0x8bc>
  80375c:	20800704 	addi	r2,r4,28
  803760:	003f7506 	br	803538 <_dtoa_r+0x8a0>
  803764:	d9801717 	ldw	r6,92(sp)
  803768:	00800044 	movi	r2,1
  80376c:	1180a10e 	bge	r2,r6,8039f4 <_dtoa_r+0xd5c>
  803770:	d9800f17 	ldw	r6,60(sp)
  803774:	d8c01017 	ldw	r3,64(sp)
  803778:	30bfffc4 	addi	r2,r6,-1
  80377c:	1881c616 	blt	r3,r2,803e98 <_dtoa_r+0x1200>
  803780:	18a5c83a 	sub	r18,r3,r2
  803784:	d8800f17 	ldw	r2,60(sp)
  803788:	10026216 	blt	r2,zero,804114 <_dtoa_r+0x147c>
  80378c:	dc001117 	ldw	r16,68(sp)
  803790:	1007883a 	mov	r3,r2
  803794:	d9800a17 	ldw	r6,40(sp)
  803798:	d8801117 	ldw	r2,68(sp)
  80379c:	d9001617 	ldw	r4,88(sp)
  8037a0:	30cd883a 	add	r6,r6,r3
  8037a4:	10c5883a 	add	r2,r2,r3
  8037a8:	01400044 	movi	r5,1
  8037ac:	d9800a15 	stw	r6,40(sp)
  8037b0:	d8801115 	stw	r2,68(sp)
  8037b4:	0806aac0 	call	806aac <__i2b>
  8037b8:	1027883a 	mov	r19,r2
  8037bc:	003f2506 	br	803454 <_dtoa_r+0x7bc>
  8037c0:	00c020b4 	movhi	r3,130
  8037c4:	18ec1804 	addi	r3,r3,-20384
  8037c8:	003d6706 	br	802d68 <_dtoa_r+0xd0>
  8037cc:	dd800517 	ldw	r22,20(sp)
  8037d0:	04000044 	movi	r16,1
  8037d4:	00000706 	br	8037f4 <_dtoa_r+0xb5c>
  8037d8:	d9400717 	ldw	r5,28(sp)
  8037dc:	d9001617 	ldw	r4,88(sp)
  8037e0:	01800284 	movi	r6,10
  8037e4:	000f883a 	mov	r7,zero
  8037e8:	0806ae80 	call	806ae8 <__multadd>
  8037ec:	d8800715 	stw	r2,28(sp)
  8037f0:	84000044 	addi	r16,r16,1
  8037f4:	d9000717 	ldw	r4,28(sp)
  8037f8:	900b883a 	mov	r5,r18
  8037fc:	0802a540 	call	802a54 <quorem>
  803800:	15c00c04 	addi	r23,r2,48
  803804:	b5c00005 	stb	r23,0(r22)
  803808:	d8c00f17 	ldw	r3,60(sp)
  80380c:	b5800044 	addi	r22,r22,1
  803810:	80fff116 	blt	r16,r3,8037d8 <_dtoa_r+0xb40>
  803814:	d8000615 	stw	zero,24(sp)
  803818:	d9400717 	ldw	r5,28(sp)
  80381c:	d9001617 	ldw	r4,88(sp)
  803820:	01800044 	movi	r6,1
  803824:	080670c0 	call	80670c <__lshift>
  803828:	1009883a 	mov	r4,r2
  80382c:	900b883a 	mov	r5,r18
  803830:	d8800715 	stw	r2,28(sp)
  803834:	0805f240 	call	805f24 <__mcmp>
  803838:	00803c0e 	bge	zero,r2,80392c <_dtoa_r+0xc94>
  80383c:	b009883a 	mov	r4,r22
  803840:	213fffc4 	addi	r4,r4,-1
  803844:	21400003 	ldbu	r5,0(r4)
  803848:	00800e44 	movi	r2,57
  80384c:	28c03fcc 	andi	r3,r5,255
  803850:	18c0201c 	xori	r3,r3,128
  803854:	18ffe004 	addi	r3,r3,-128
  803858:	1881981e 	bne	r3,r2,803ebc <_dtoa_r+0x1224>
  80385c:	d9800517 	ldw	r6,20(sp)
  803860:	21bff71e 	bne	r4,r6,803840 <_dtoa_r+0xba8>
  803864:	d8800d17 	ldw	r2,52(sp)
  803868:	37000044 	addi	fp,r6,1
  80386c:	10800044 	addi	r2,r2,1
  803870:	d8800d15 	stw	r2,52(sp)
  803874:	00800c44 	movi	r2,49
  803878:	30800005 	stb	r2,0(r6)
  80387c:	d9001617 	ldw	r4,88(sp)
  803880:	900b883a 	mov	r5,r18
  803884:	0805dc80 	call	805dc8 <_Bfree>
  803888:	983ecd26 	beq	r19,zero,8033c0 <_dtoa_r+0x728>
  80388c:	d8c00617 	ldw	r3,24(sp)
  803890:	18000426 	beq	r3,zero,8038a4 <_dtoa_r+0xc0c>
  803894:	1cc00326 	beq	r3,r19,8038a4 <_dtoa_r+0xc0c>
  803898:	d9001617 	ldw	r4,88(sp)
  80389c:	180b883a 	mov	r5,r3
  8038a0:	0805dc80 	call	805dc8 <_Bfree>
  8038a4:	d9001617 	ldw	r4,88(sp)
  8038a8:	980b883a 	mov	r5,r19
  8038ac:	0805dc80 	call	805dc8 <_Bfree>
  8038b0:	003ec306 	br	8033c0 <_dtoa_r+0x728>
  8038b4:	1805883a 	mov	r2,r3
  8038b8:	003eeb06 	br	803468 <_dtoa_r+0x7d0>
  8038bc:	d9800a17 	ldw	r6,40(sp)
  8038c0:	d8c01117 	ldw	r3,68(sp)
  8038c4:	20bfff04 	addi	r2,r4,-4
  8038c8:	308d883a 	add	r6,r6,r2
  8038cc:	1887883a 	add	r3,r3,r2
  8038d0:	80a1883a 	add	r16,r16,r2
  8038d4:	d9800a15 	stw	r6,40(sp)
  8038d8:	d8c01115 	stw	r3,68(sp)
  8038dc:	003f1d06 	br	803554 <_dtoa_r+0x8bc>
  8038e0:	a03f0c1e 	bne	r20,zero,803514 <_dtoa_r+0x87c>
  8038e4:	00800434 	movhi	r2,16
  8038e8:	10bfffc4 	addi	r2,r2,-1
  8038ec:	a884703a 	and	r2,r21,r2
  8038f0:	103f081e 	bne	r2,zero,803514 <_dtoa_r+0x87c>
  8038f4:	a89ffc2c 	andhi	r2,r21,32752
  8038f8:	103f0626 	beq	r2,zero,803514 <_dtoa_r+0x87c>
  8038fc:	d8c01117 	ldw	r3,68(sp)
  803900:	d9000a17 	ldw	r4,40(sp)
  803904:	18c00044 	addi	r3,r3,1
  803908:	21000044 	addi	r4,r4,1
  80390c:	d8c01115 	stw	r3,68(sp)
  803910:	d9000a15 	stw	r4,40(sp)
  803914:	003f0006 	br	803518 <_dtoa_r+0x880>
  803918:	d9400717 	ldw	r5,28(sp)
  80391c:	d9001617 	ldw	r4,88(sp)
  803920:	0806c140 	call	806c14 <__pow5mult>
  803924:	d8800715 	stw	r2,28(sp)
  803928:	003eed06 	br	8034e0 <_dtoa_r+0x848>
  80392c:	1000021e 	bne	r2,zero,803938 <_dtoa_r+0xca0>
  803930:	b880004c 	andi	r2,r23,1
  803934:	103fc11e 	bne	r2,zero,80383c <_dtoa_r+0xba4>
  803938:	b5bfffc4 	addi	r22,r22,-1
  80393c:	b0c00007 	ldb	r3,0(r22)
  803940:	00800c04 	movi	r2,48
  803944:	18bffc26 	beq	r3,r2,803938 <_dtoa_r+0xca0>
  803948:	b7000044 	addi	fp,r22,1
  80394c:	003fcb06 	br	80387c <_dtoa_r+0xbe4>
  803950:	d9800d17 	ldw	r6,52(sp)
  803954:	018fc83a 	sub	r7,zero,r6
  803958:	3801f726 	beq	r7,zero,804138 <_dtoa_r+0x14a0>
  80395c:	398003cc 	andi	r6,r7,15
  803960:	300c90fa 	slli	r6,r6,3
  803964:	014020b4 	movhi	r5,130
  803968:	296c3604 	addi	r5,r5,-20264
  80396c:	d9001217 	ldw	r4,72(sp)
  803970:	314d883a 	add	r6,r6,r5
  803974:	30c00117 	ldw	r3,4(r6)
  803978:	30800017 	ldw	r2,0(r6)
  80397c:	d9401317 	ldw	r5,76(sp)
  803980:	3821d13a 	srai	r16,r7,4
  803984:	100d883a 	mov	r6,r2
  803988:	180f883a 	mov	r7,r3
  80398c:	0808da80 	call	808da8 <__muldf3>
  803990:	1011883a 	mov	r8,r2
  803994:	1813883a 	mov	r9,r3
  803998:	1029883a 	mov	r20,r2
  80399c:	182b883a 	mov	r21,r3
  8039a0:	8001e526 	beq	r16,zero,804138 <_dtoa_r+0x14a0>
  8039a4:	05800084 	movi	r22,2
  8039a8:	044020b4 	movhi	r17,130
  8039ac:	8c6c6804 	addi	r17,r17,-20064
  8039b0:	8080004c 	andi	r2,r16,1
  8039b4:	1005003a 	cmpeq	r2,r2,zero
  8039b8:	1000081e 	bne	r2,zero,8039dc <_dtoa_r+0xd44>
  8039bc:	89800017 	ldw	r6,0(r17)
  8039c0:	89c00117 	ldw	r7,4(r17)
  8039c4:	480b883a 	mov	r5,r9
  8039c8:	4009883a 	mov	r4,r8
  8039cc:	0808da80 	call	808da8 <__muldf3>
  8039d0:	1011883a 	mov	r8,r2
  8039d4:	b5800044 	addi	r22,r22,1
  8039d8:	1813883a 	mov	r9,r3
  8039dc:	8021d07a 	srai	r16,r16,1
  8039e0:	8c400204 	addi	r17,r17,8
  8039e4:	803ff21e 	bne	r16,zero,8039b0 <_dtoa_r+0xd18>
  8039e8:	4029883a 	mov	r20,r8
  8039ec:	482b883a 	mov	r21,r9
  8039f0:	003dca06 	br	80311c <_dtoa_r+0x484>
  8039f4:	d9000817 	ldw	r4,32(sp)
  8039f8:	2005003a 	cmpeq	r2,r4,zero
  8039fc:	1001f61e 	bne	r2,zero,8041d8 <_dtoa_r+0x1540>
  803a00:	dc001117 	ldw	r16,68(sp)
  803a04:	dc801017 	ldw	r18,64(sp)
  803a08:	18c10cc4 	addi	r3,r3,1075
  803a0c:	003f6106 	br	803794 <_dtoa_r+0xafc>
  803a10:	d8000b15 	stw	zero,44(sp)
  803a14:	d9802617 	ldw	r6,152(sp)
  803a18:	d8c00d17 	ldw	r3,52(sp)
  803a1c:	30800044 	addi	r2,r6,1
  803a20:	18ad883a 	add	r22,r3,r2
  803a24:	b13fffc4 	addi	r4,r22,-1
  803a28:	d9000e15 	stw	r4,56(sp)
  803a2c:	0581f60e 	bge	zero,r22,804208 <_dtoa_r+0x1570>
  803a30:	dd800f15 	stw	r22,60(sp)
  803a34:	003f3006 	br	8036f8 <_dtoa_r+0xa60>
  803a38:	d8000b15 	stw	zero,44(sp)
  803a3c:	d9002617 	ldw	r4,152(sp)
  803a40:	0101eb0e 	bge	zero,r4,8041f0 <_dtoa_r+0x1558>
  803a44:	202d883a 	mov	r22,r4
  803a48:	d9000e15 	stw	r4,56(sp)
  803a4c:	d9000f15 	stw	r4,60(sp)
  803a50:	003f2906 	br	8036f8 <_dtoa_r+0xa60>
  803a54:	01800044 	movi	r6,1
  803a58:	d9800b15 	stw	r6,44(sp)
  803a5c:	003ff706 	br	803a3c <_dtoa_r+0xda4>
  803a60:	01000044 	movi	r4,1
  803a64:	d9000b15 	stw	r4,44(sp)
  803a68:	003fea06 	br	803a14 <_dtoa_r+0xd7c>
  803a6c:	04000c0e 	bge	zero,r16,803aa0 <_dtoa_r+0xe08>
  803a70:	d9400717 	ldw	r5,28(sp)
  803a74:	d9001617 	ldw	r4,88(sp)
  803a78:	01800044 	movi	r6,1
  803a7c:	080670c0 	call	80670c <__lshift>
  803a80:	1009883a 	mov	r4,r2
  803a84:	900b883a 	mov	r5,r18
  803a88:	d8800715 	stw	r2,28(sp)
  803a8c:	0805f240 	call	805f24 <__mcmp>
  803a90:	0081e00e 	bge	zero,r2,804214 <_dtoa_r+0x157c>
  803a94:	bdc00044 	addi	r23,r23,1
  803a98:	00800e84 	movi	r2,58
  803a9c:	b881a226 	beq	r23,r2,804128 <_dtoa_r+0x1490>
  803aa0:	b7000044 	addi	fp,r22,1
  803aa4:	b5c00005 	stb	r23,0(r22)
  803aa8:	003f7406 	br	80387c <_dtoa_r+0xbe4>
  803aac:	00800e44 	movi	r2,57
  803ab0:	b8819d26 	beq	r23,r2,804128 <_dtoa_r+0x1490>
  803ab4:	053ffa0e 	bge	zero,r20,803aa0 <_dtoa_r+0xe08>
  803ab8:	8dc00c44 	addi	r23,r17,49
  803abc:	003ff806 	br	803aa0 <_dtoa_r+0xe08>
  803ac0:	d9001617 	ldw	r4,88(sp)
  803ac4:	a80b883a 	mov	r5,r21
  803ac8:	04000044 	movi	r16,1
  803acc:	0805dc80 	call	805dc8 <_Bfree>
  803ad0:	003edf06 	br	803650 <_dtoa_r+0x9b8>
  803ad4:	d9001617 	ldw	r4,88(sp)
  803ad8:	980b883a 	mov	r5,r19
  803adc:	01800284 	movi	r6,10
  803ae0:	000f883a 	mov	r7,zero
  803ae4:	0806ae80 	call	806ae8 <__multadd>
  803ae8:	1027883a 	mov	r19,r2
  803aec:	d8800615 	stw	r2,24(sp)
  803af0:	003ebb06 	br	8035e0 <_dtoa_r+0x948>
  803af4:	d9801117 	ldw	r6,68(sp)
  803af8:	d8800d17 	ldw	r2,52(sp)
  803afc:	d8000915 	stw	zero,36(sp)
  803b00:	308dc83a 	sub	r6,r6,r2
  803b04:	0087c83a 	sub	r3,zero,r2
  803b08:	d9801115 	stw	r6,68(sp)
  803b0c:	d8c01015 	stw	r3,64(sp)
  803b10:	003cfe06 	br	802f0c <_dtoa_r+0x274>
  803b14:	018dc83a 	sub	r6,zero,r6
  803b18:	d9801115 	stw	r6,68(sp)
  803b1c:	d8000a15 	stw	zero,40(sp)
  803b20:	003cf306 	br	802ef0 <_dtoa_r+0x258>
  803b24:	d9000d17 	ldw	r4,52(sp)
  803b28:	080966c0 	call	80966c <__floatsidf>
  803b2c:	880b883a 	mov	r5,r17
  803b30:	8009883a 	mov	r4,r16
  803b34:	180f883a 	mov	r7,r3
  803b38:	100d883a 	mov	r6,r2
  803b3c:	080944c0 	call	80944c <__nedf2>
  803b40:	103ce126 	beq	r2,zero,802ec8 <_dtoa_r+0x230>
  803b44:	d9800d17 	ldw	r6,52(sp)
  803b48:	31bfffc4 	addi	r6,r6,-1
  803b4c:	d9800d15 	stw	r6,52(sp)
  803b50:	003cdd06 	br	802ec8 <_dtoa_r+0x230>
  803b54:	d9000717 	ldw	r4,28(sp)
  803b58:	900b883a 	mov	r5,r18
  803b5c:	0805f240 	call	805f24 <__mcmp>
  803b60:	103e8d0e 	bge	r2,zero,803598 <_dtoa_r+0x900>
  803b64:	d9400717 	ldw	r5,28(sp)
  803b68:	d9001617 	ldw	r4,88(sp)
  803b6c:	01800284 	movi	r6,10
  803b70:	000f883a 	mov	r7,zero
  803b74:	0806ae80 	call	806ae8 <__multadd>
  803b78:	d9800d17 	ldw	r6,52(sp)
  803b7c:	d8800715 	stw	r2,28(sp)
  803b80:	31bfffc4 	addi	r6,r6,-1
  803b84:	d9800d15 	stw	r6,52(sp)
  803b88:	b001a71e 	bne	r22,zero,804228 <_dtoa_r+0x1590>
  803b8c:	d8800e17 	ldw	r2,56(sp)
  803b90:	d8800f15 	stw	r2,60(sp)
  803b94:	003e8006 	br	803598 <_dtoa_r+0x900>
  803b98:	90800417 	ldw	r2,16(r18)
  803b9c:	1085883a 	add	r2,r2,r2
  803ba0:	1085883a 	add	r2,r2,r2
  803ba4:	1485883a 	add	r2,r2,r18
  803ba8:	11000417 	ldw	r4,16(r2)
  803bac:	0805df00 	call	805df0 <__hi0bits>
  803bb0:	00c00804 	movi	r3,32
  803bb4:	1887c83a 	sub	r3,r3,r2
  803bb8:	003e5a06 	br	803524 <_dtoa_r+0x88c>
  803bbc:	d9400717 	ldw	r5,28(sp)
  803bc0:	d9801017 	ldw	r6,64(sp)
  803bc4:	d9001617 	ldw	r4,88(sp)
  803bc8:	0806c140 	call	806c14 <__pow5mult>
  803bcc:	d8800715 	stw	r2,28(sp)
  803bd0:	003e4306 	br	8034e0 <_dtoa_r+0x848>
  803bd4:	d9800f17 	ldw	r6,60(sp)
  803bd8:	d8800d17 	ldw	r2,52(sp)
  803bdc:	d9800315 	stw	r6,12(sp)
  803be0:	d8800415 	stw	r2,16(sp)
  803be4:	d8c00b17 	ldw	r3,44(sp)
  803be8:	1805003a 	cmpeq	r2,r3,zero
  803bec:	1000e21e 	bne	r2,zero,803f78 <_dtoa_r+0x12e0>
  803bf0:	d9000317 	ldw	r4,12(sp)
  803bf4:	0005883a 	mov	r2,zero
  803bf8:	00cff834 	movhi	r3,16352
  803bfc:	200c90fa 	slli	r6,r4,3
  803c00:	010020b4 	movhi	r4,130
  803c04:	212c3604 	addi	r4,r4,-20264
  803c08:	180b883a 	mov	r5,r3
  803c0c:	310d883a 	add	r6,r6,r4
  803c10:	327fff17 	ldw	r9,-4(r6)
  803c14:	323ffe17 	ldw	r8,-8(r6)
  803c18:	1009883a 	mov	r4,r2
  803c1c:	480f883a 	mov	r7,r9
  803c20:	400d883a 	mov	r6,r8
  803c24:	080916c0 	call	80916c <__divdf3>
  803c28:	180b883a 	mov	r5,r3
  803c2c:	b00d883a 	mov	r6,r22
  803c30:	b80f883a 	mov	r7,r23
  803c34:	1009883a 	mov	r4,r2
  803c38:	0808cb40 	call	808cb4 <__subdf3>
  803c3c:	a80b883a 	mov	r5,r21
  803c40:	a009883a 	mov	r4,r20
  803c44:	d8c01915 	stw	r3,100(sp)
  803c48:	d8801815 	stw	r2,96(sp)
  803c4c:	08097640 	call	809764 <__fixdfsi>
  803c50:	1009883a 	mov	r4,r2
  803c54:	1027883a 	mov	r19,r2
  803c58:	080966c0 	call	80966c <__floatsidf>
  803c5c:	a80b883a 	mov	r5,r21
  803c60:	a009883a 	mov	r4,r20
  803c64:	180f883a 	mov	r7,r3
  803c68:	100d883a 	mov	r6,r2
  803c6c:	0808cb40 	call	808cb4 <__subdf3>
  803c70:	d9801817 	ldw	r6,96(sp)
  803c74:	1823883a 	mov	r17,r3
  803c78:	d8801415 	stw	r2,80(sp)
  803c7c:	302d883a 	mov	r22,r6
  803c80:	d9800517 	ldw	r6,20(sp)
  803c84:	9cc00c04 	addi	r19,r19,48
  803c88:	dc401515 	stw	r17,84(sp)
  803c8c:	d8c01917 	ldw	r3,100(sp)
  803c90:	34c00005 	stb	r19,0(r6)
  803c94:	d8800517 	ldw	r2,20(sp)
  803c98:	d9401917 	ldw	r5,100(sp)
  803c9c:	d9801417 	ldw	r6,80(sp)
  803ca0:	b009883a 	mov	r4,r22
  803ca4:	880f883a 	mov	r7,r17
  803ca8:	182f883a 	mov	r23,r3
  803cac:	17000044 	addi	fp,r2,1
  803cb0:	08094d40 	call	8094d4 <__gtdf2>
  803cb4:	00804e16 	blt	zero,r2,803df0 <_dtoa_r+0x1158>
  803cb8:	d9801417 	ldw	r6,80(sp)
  803cbc:	0005883a 	mov	r2,zero
  803cc0:	00cffc34 	movhi	r3,16368
  803cc4:	180b883a 	mov	r5,r3
  803cc8:	880f883a 	mov	r7,r17
  803ccc:	1009883a 	mov	r4,r2
  803cd0:	0808cb40 	call	808cb4 <__subdf3>
  803cd4:	d9401917 	ldw	r5,100(sp)
  803cd8:	180f883a 	mov	r7,r3
  803cdc:	b009883a 	mov	r4,r22
  803ce0:	100d883a 	mov	r6,r2
  803ce4:	08094d40 	call	8094d4 <__gtdf2>
  803ce8:	00bda216 	blt	zero,r2,803374 <_dtoa_r+0x6dc>
  803cec:	d8c00317 	ldw	r3,12(sp)
  803cf0:	00800044 	movi	r2,1
  803cf4:	10c01216 	blt	r2,r3,803d40 <_dtoa_r+0x10a8>
  803cf8:	003d4506 	br	803210 <_dtoa_r+0x578>
  803cfc:	d9801417 	ldw	r6,80(sp)
  803d00:	0005883a 	mov	r2,zero
  803d04:	00cffc34 	movhi	r3,16368
  803d08:	180b883a 	mov	r5,r3
  803d0c:	880f883a 	mov	r7,r17
  803d10:	1009883a 	mov	r4,r2
  803d14:	0808cb40 	call	808cb4 <__subdf3>
  803d18:	d9c01b17 	ldw	r7,108(sp)
  803d1c:	180b883a 	mov	r5,r3
  803d20:	1009883a 	mov	r4,r2
  803d24:	b00d883a 	mov	r6,r22
  803d28:	08095e40 	call	8095e4 <__ltdf2>
  803d2c:	103d9116 	blt	r2,zero,803374 <_dtoa_r+0x6dc>
  803d30:	d9800517 	ldw	r6,20(sp)
  803d34:	d9000317 	ldw	r4,12(sp)
  803d38:	3105883a 	add	r2,r6,r4
  803d3c:	e0bd3426 	beq	fp,r2,803210 <_dtoa_r+0x578>
  803d40:	04500934 	movhi	r17,16420
  803d44:	0021883a 	mov	r16,zero
  803d48:	b80b883a 	mov	r5,r23
  803d4c:	b009883a 	mov	r4,r22
  803d50:	800d883a 	mov	r6,r16
  803d54:	880f883a 	mov	r7,r17
  803d58:	0808da80 	call	808da8 <__muldf3>
  803d5c:	d9401517 	ldw	r5,84(sp)
  803d60:	d9001417 	ldw	r4,80(sp)
  803d64:	880f883a 	mov	r7,r17
  803d68:	000d883a 	mov	r6,zero
  803d6c:	d8801a15 	stw	r2,104(sp)
  803d70:	d8c01b15 	stw	r3,108(sp)
  803d74:	0808da80 	call	808da8 <__muldf3>
  803d78:	180b883a 	mov	r5,r3
  803d7c:	1009883a 	mov	r4,r2
  803d80:	1823883a 	mov	r17,r3
  803d84:	1021883a 	mov	r16,r2
  803d88:	08097640 	call	809764 <__fixdfsi>
  803d8c:	1009883a 	mov	r4,r2
  803d90:	102b883a 	mov	r21,r2
  803d94:	080966c0 	call	80966c <__floatsidf>
  803d98:	880b883a 	mov	r5,r17
  803d9c:	8009883a 	mov	r4,r16
  803da0:	180f883a 	mov	r7,r3
  803da4:	100d883a 	mov	r6,r2
  803da8:	0808cb40 	call	808cb4 <__subdf3>
  803dac:	1021883a 	mov	r16,r2
  803db0:	d9001b17 	ldw	r4,108(sp)
  803db4:	1823883a 	mov	r17,r3
  803db8:	dc001415 	stw	r16,80(sp)
  803dbc:	ad400c04 	addi	r21,r21,48
  803dc0:	dc401515 	stw	r17,84(sp)
  803dc4:	d8801a17 	ldw	r2,104(sp)
  803dc8:	e5400005 	stb	r21,0(fp)
  803dcc:	202f883a 	mov	r23,r4
  803dd0:	d9c01b17 	ldw	r7,108(sp)
  803dd4:	d9001417 	ldw	r4,80(sp)
  803dd8:	880b883a 	mov	r5,r17
  803ddc:	100d883a 	mov	r6,r2
  803de0:	102d883a 	mov	r22,r2
  803de4:	e7000044 	addi	fp,fp,1
  803de8:	08095e40 	call	8095e4 <__ltdf2>
  803dec:	103fc30e 	bge	r2,zero,803cfc <_dtoa_r+0x1064>
  803df0:	d9000417 	ldw	r4,16(sp)
  803df4:	d9000d15 	stw	r4,52(sp)
  803df8:	003d7106 	br	8033c0 <_dtoa_r+0x728>
  803dfc:	d9801717 	ldw	r6,92(sp)
  803e00:	00800084 	movi	r2,2
  803e04:	11bde60e 	bge	r2,r6,8035a0 <_dtoa_r+0x908>
  803e08:	203cfb1e 	bne	r4,zero,8031f8 <_dtoa_r+0x560>
  803e0c:	d9001617 	ldw	r4,88(sp)
  803e10:	900b883a 	mov	r5,r18
  803e14:	01800144 	movi	r6,5
  803e18:	000f883a 	mov	r7,zero
  803e1c:	0806ae80 	call	806ae8 <__multadd>
  803e20:	d9000717 	ldw	r4,28(sp)
  803e24:	100b883a 	mov	r5,r2
  803e28:	1025883a 	mov	r18,r2
  803e2c:	0805f240 	call	805f24 <__mcmp>
  803e30:	00bcf10e 	bge	zero,r2,8031f8 <_dtoa_r+0x560>
  803e34:	d8c00d17 	ldw	r3,52(sp)
  803e38:	d9000517 	ldw	r4,20(sp)
  803e3c:	d8000615 	stw	zero,24(sp)
  803e40:	18c00044 	addi	r3,r3,1
  803e44:	d8c00d15 	stw	r3,52(sp)
  803e48:	00800c44 	movi	r2,49
  803e4c:	27000044 	addi	fp,r4,1
  803e50:	20800005 	stb	r2,0(r4)
  803e54:	003e8906 	br	80387c <_dtoa_r+0xbe4>
  803e58:	d8c00517 	ldw	r3,20(sp)
  803e5c:	003bc206 	br	802d68 <_dtoa_r+0xd0>
  803e60:	018020b4 	movhi	r6,130
  803e64:	31ac6804 	addi	r6,r6,-20064
  803e68:	30c00917 	ldw	r3,36(r6)
  803e6c:	30800817 	ldw	r2,32(r6)
  803e70:	d9001217 	ldw	r4,72(sp)
  803e74:	d9401317 	ldw	r5,76(sp)
  803e78:	180f883a 	mov	r7,r3
  803e7c:	100d883a 	mov	r6,r2
  803e80:	080916c0 	call	80916c <__divdf3>
  803e84:	948003cc 	andi	r18,r18,15
  803e88:	058000c4 	movi	r22,3
  803e8c:	1029883a 	mov	r20,r2
  803e90:	182b883a 	mov	r21,r3
  803e94:	003c8906 	br	8030bc <_dtoa_r+0x424>
  803e98:	d9001017 	ldw	r4,64(sp)
  803e9c:	d9800917 	ldw	r6,36(sp)
  803ea0:	0025883a 	mov	r18,zero
  803ea4:	1105c83a 	sub	r2,r2,r4
  803ea8:	2089883a 	add	r4,r4,r2
  803eac:	308d883a 	add	r6,r6,r2
  803eb0:	d9001015 	stw	r4,64(sp)
  803eb4:	d9800915 	stw	r6,36(sp)
  803eb8:	003e3206 	br	803784 <_dtoa_r+0xaec>
  803ebc:	28800044 	addi	r2,r5,1
  803ec0:	27000044 	addi	fp,r4,1
  803ec4:	20800005 	stb	r2,0(r4)
  803ec8:	003e6c06 	br	80387c <_dtoa_r+0xbe4>
  803ecc:	d8800f17 	ldw	r2,60(sp)
  803ed0:	00bce016 	blt	zero,r2,803254 <_dtoa_r+0x5bc>
  803ed4:	d9800f17 	ldw	r6,60(sp)
  803ed8:	303cc51e 	bne	r6,zero,8031f0 <_dtoa_r+0x558>
  803edc:	0005883a 	mov	r2,zero
  803ee0:	00d00534 	movhi	r3,16404
  803ee4:	980b883a 	mov	r5,r19
  803ee8:	180f883a 	mov	r7,r3
  803eec:	9009883a 	mov	r4,r18
  803ef0:	100d883a 	mov	r6,r2
  803ef4:	0808da80 	call	808da8 <__muldf3>
  803ef8:	180b883a 	mov	r5,r3
  803efc:	a80f883a 	mov	r7,r21
  803f00:	1009883a 	mov	r4,r2
  803f04:	a00d883a 	mov	r6,r20
  803f08:	080955c0 	call	80955c <__gedf2>
  803f0c:	103cb80e 	bge	r2,zero,8031f0 <_dtoa_r+0x558>
  803f10:	0027883a 	mov	r19,zero
  803f14:	0025883a 	mov	r18,zero
  803f18:	003fc606 	br	803e34 <_dtoa_r+0x119c>
  803f1c:	99400117 	ldw	r5,4(r19)
  803f20:	d9001617 	ldw	r4,88(sp)
  803f24:	08063480 	call	806348 <_Balloc>
  803f28:	99800417 	ldw	r6,16(r19)
  803f2c:	11000304 	addi	r4,r2,12
  803f30:	99400304 	addi	r5,r19,12
  803f34:	318d883a 	add	r6,r6,r6
  803f38:	318d883a 	add	r6,r6,r6
  803f3c:	31800204 	addi	r6,r6,8
  803f40:	1023883a 	mov	r17,r2
  803f44:	0805c480 	call	805c48 <memcpy>
  803f48:	d9001617 	ldw	r4,88(sp)
  803f4c:	880b883a 	mov	r5,r17
  803f50:	01800044 	movi	r6,1
  803f54:	080670c0 	call	80670c <__lshift>
  803f58:	100b883a 	mov	r5,r2
  803f5c:	003d9c06 	br	8035d0 <_dtoa_r+0x938>
  803f60:	00800e44 	movi	r2,57
  803f64:	b8807026 	beq	r23,r2,804128 <_dtoa_r+0x1490>
  803f68:	b8800044 	addi	r2,r23,1
  803f6c:	b7000044 	addi	fp,r22,1
  803f70:	b0800005 	stb	r2,0(r22)
  803f74:	003e4106 	br	80387c <_dtoa_r+0xbe4>
  803f78:	d8800317 	ldw	r2,12(sp)
  803f7c:	018020b4 	movhi	r6,130
  803f80:	31ac3604 	addi	r6,r6,-20264
  803f84:	b009883a 	mov	r4,r22
  803f88:	100e90fa 	slli	r7,r2,3
  803f8c:	b80b883a 	mov	r5,r23
  803f90:	398f883a 	add	r7,r7,r6
  803f94:	38bffe17 	ldw	r2,-8(r7)
  803f98:	d9800517 	ldw	r6,20(sp)
  803f9c:	38ffff17 	ldw	r3,-4(r7)
  803fa0:	37000044 	addi	fp,r6,1
  803fa4:	180f883a 	mov	r7,r3
  803fa8:	100d883a 	mov	r6,r2
  803fac:	0808da80 	call	808da8 <__muldf3>
  803fb0:	a80b883a 	mov	r5,r21
  803fb4:	a009883a 	mov	r4,r20
  803fb8:	182f883a 	mov	r23,r3
  803fbc:	102d883a 	mov	r22,r2
  803fc0:	08097640 	call	809764 <__fixdfsi>
  803fc4:	1009883a 	mov	r4,r2
  803fc8:	1027883a 	mov	r19,r2
  803fcc:	080966c0 	call	80966c <__floatsidf>
  803fd0:	a80b883a 	mov	r5,r21
  803fd4:	a009883a 	mov	r4,r20
  803fd8:	180f883a 	mov	r7,r3
  803fdc:	100d883a 	mov	r6,r2
  803fe0:	0808cb40 	call	808cb4 <__subdf3>
  803fe4:	180b883a 	mov	r5,r3
  803fe8:	d8c00517 	ldw	r3,20(sp)
  803fec:	9cc00c04 	addi	r19,r19,48
  803ff0:	1009883a 	mov	r4,r2
  803ff4:	1cc00005 	stb	r19,0(r3)
  803ff8:	2021883a 	mov	r16,r4
  803ffc:	d9000317 	ldw	r4,12(sp)
  804000:	00800044 	movi	r2,1
  804004:	2823883a 	mov	r17,r5
  804008:	20802226 	beq	r4,r2,804094 <_dtoa_r+0x13fc>
  80400c:	1029883a 	mov	r20,r2
  804010:	0005883a 	mov	r2,zero
  804014:	00d00934 	movhi	r3,16420
  804018:	180f883a 	mov	r7,r3
  80401c:	100d883a 	mov	r6,r2
  804020:	880b883a 	mov	r5,r17
  804024:	8009883a 	mov	r4,r16
  804028:	0808da80 	call	808da8 <__muldf3>
  80402c:	180b883a 	mov	r5,r3
  804030:	1009883a 	mov	r4,r2
  804034:	1823883a 	mov	r17,r3
  804038:	1021883a 	mov	r16,r2
  80403c:	08097640 	call	809764 <__fixdfsi>
  804040:	1009883a 	mov	r4,r2
  804044:	102b883a 	mov	r21,r2
  804048:	080966c0 	call	80966c <__floatsidf>
  80404c:	880b883a 	mov	r5,r17
  804050:	8009883a 	mov	r4,r16
  804054:	180f883a 	mov	r7,r3
  804058:	100d883a 	mov	r6,r2
  80405c:	0808cb40 	call	808cb4 <__subdf3>
  804060:	180b883a 	mov	r5,r3
  804064:	d8c00517 	ldw	r3,20(sp)
  804068:	1009883a 	mov	r4,r2
  80406c:	ad400c04 	addi	r21,r21,48
  804070:	1d05883a 	add	r2,r3,r20
  804074:	15400005 	stb	r21,0(r2)
  804078:	2021883a 	mov	r16,r4
  80407c:	d9000317 	ldw	r4,12(sp)
  804080:	a5000044 	addi	r20,r20,1
  804084:	2823883a 	mov	r17,r5
  804088:	a13fe11e 	bne	r20,r4,804010 <_dtoa_r+0x1378>
  80408c:	e505883a 	add	r2,fp,r20
  804090:	173fffc4 	addi	fp,r2,-1
  804094:	0025883a 	mov	r18,zero
  804098:	04cff834 	movhi	r19,16352
  80409c:	b009883a 	mov	r4,r22
  8040a0:	b80b883a 	mov	r5,r23
  8040a4:	900d883a 	mov	r6,r18
  8040a8:	980f883a 	mov	r7,r19
  8040ac:	0808d340 	call	808d34 <__adddf3>
  8040b0:	180b883a 	mov	r5,r3
  8040b4:	1009883a 	mov	r4,r2
  8040b8:	800d883a 	mov	r6,r16
  8040bc:	880f883a 	mov	r7,r17
  8040c0:	08095e40 	call	8095e4 <__ltdf2>
  8040c4:	103cab16 	blt	r2,zero,803374 <_dtoa_r+0x6dc>
  8040c8:	0009883a 	mov	r4,zero
  8040cc:	980b883a 	mov	r5,r19
  8040d0:	b80f883a 	mov	r7,r23
  8040d4:	b00d883a 	mov	r6,r22
  8040d8:	0808cb40 	call	808cb4 <__subdf3>
  8040dc:	180b883a 	mov	r5,r3
  8040e0:	880f883a 	mov	r7,r17
  8040e4:	1009883a 	mov	r4,r2
  8040e8:	800d883a 	mov	r6,r16
  8040ec:	08094d40 	call	8094d4 <__gtdf2>
  8040f0:	00bc470e 	bge	zero,r2,803210 <_dtoa_r+0x578>
  8040f4:	00c00c04 	movi	r3,48
  8040f8:	e73fffc4 	addi	fp,fp,-1
  8040fc:	e0800007 	ldb	r2,0(fp)
  804100:	10fffd26 	beq	r2,r3,8040f8 <_dtoa_r+0x1460>
  804104:	d9800417 	ldw	r6,16(sp)
  804108:	e7000044 	addi	fp,fp,1
  80410c:	d9800d15 	stw	r6,52(sp)
  804110:	003cab06 	br	8033c0 <_dtoa_r+0x728>
  804114:	d8c00f17 	ldw	r3,60(sp)
  804118:	d9001117 	ldw	r4,68(sp)
  80411c:	20e1c83a 	sub	r16,r4,r3
  804120:	0007883a 	mov	r3,zero
  804124:	003d9b06 	br	803794 <_dtoa_r+0xafc>
  804128:	00800e44 	movi	r2,57
  80412c:	b0800005 	stb	r2,0(r22)
  804130:	b5800044 	addi	r22,r22,1
  804134:	003dc106 	br	80383c <_dtoa_r+0xba4>
  804138:	05800084 	movi	r22,2
  80413c:	003bf706 	br	80311c <_dtoa_r+0x484>
  804140:	d9000f17 	ldw	r4,60(sp)
  804144:	013c000e 	bge	zero,r4,803148 <_dtoa_r+0x4b0>
  804148:	d9800e17 	ldw	r6,56(sp)
  80414c:	01bc300e 	bge	zero,r6,803210 <_dtoa_r+0x578>
  804150:	0005883a 	mov	r2,zero
  804154:	00d00934 	movhi	r3,16420
  804158:	a80b883a 	mov	r5,r21
  80415c:	180f883a 	mov	r7,r3
  804160:	a009883a 	mov	r4,r20
  804164:	100d883a 	mov	r6,r2
  804168:	0808da80 	call	808da8 <__muldf3>
  80416c:	b1000044 	addi	r4,r22,1
  804170:	1021883a 	mov	r16,r2
  804174:	1823883a 	mov	r17,r3
  804178:	080966c0 	call	80966c <__floatsidf>
  80417c:	880b883a 	mov	r5,r17
  804180:	8009883a 	mov	r4,r16
  804184:	180f883a 	mov	r7,r3
  804188:	100d883a 	mov	r6,r2
  80418c:	0808da80 	call	808da8 <__muldf3>
  804190:	0011883a 	mov	r8,zero
  804194:	02500734 	movhi	r9,16412
  804198:	180b883a 	mov	r5,r3
  80419c:	480f883a 	mov	r7,r9
  8041a0:	1009883a 	mov	r4,r2
  8041a4:	400d883a 	mov	r6,r8
  8041a8:	0808d340 	call	808d34 <__adddf3>
  8041ac:	102d883a 	mov	r22,r2
  8041b0:	00bf3034 	movhi	r2,64704
  8041b4:	10ef883a 	add	r23,r2,r3
  8041b8:	d8800d17 	ldw	r2,52(sp)
  8041bc:	d8c00e17 	ldw	r3,56(sp)
  8041c0:	8029883a 	mov	r20,r16
  8041c4:	10bfffc4 	addi	r2,r2,-1
  8041c8:	882b883a 	mov	r21,r17
  8041cc:	d8800415 	stw	r2,16(sp)
  8041d0:	d8c00315 	stw	r3,12(sp)
  8041d4:	003e8306 	br	803be4 <_dtoa_r+0xf4c>
  8041d8:	d8800117 	ldw	r2,4(sp)
  8041dc:	dc001117 	ldw	r16,68(sp)
  8041e0:	dc801017 	ldw	r18,64(sp)
  8041e4:	00c00d84 	movi	r3,54
  8041e8:	1887c83a 	sub	r3,r3,r2
  8041ec:	003d6906 	br	803794 <_dtoa_r+0xafc>
  8041f0:	01800044 	movi	r6,1
  8041f4:	3021883a 	mov	r16,r6
  8041f8:	d9800f15 	stw	r6,60(sp)
  8041fc:	d9802615 	stw	r6,152(sp)
  804200:	d9800e15 	stw	r6,56(sp)
  804204:	003b9306 	br	803054 <_dtoa_r+0x3bc>
  804208:	b021883a 	mov	r16,r22
  80420c:	dd800f15 	stw	r22,60(sp)
  804210:	003b9006 	br	803054 <_dtoa_r+0x3bc>
  804214:	103e221e 	bne	r2,zero,803aa0 <_dtoa_r+0xe08>
  804218:	b880004c 	andi	r2,r23,1
  80421c:	1005003a 	cmpeq	r2,r2,zero
  804220:	103e1f1e 	bne	r2,zero,803aa0 <_dtoa_r+0xe08>
  804224:	003e1b06 	br	803a94 <_dtoa_r+0xdfc>
  804228:	d9001617 	ldw	r4,88(sp)
  80422c:	980b883a 	mov	r5,r19
  804230:	01800284 	movi	r6,10
  804234:	000f883a 	mov	r7,zero
  804238:	0806ae80 	call	806ae8 <__multadd>
  80423c:	d8c00e17 	ldw	r3,56(sp)
  804240:	1027883a 	mov	r19,r2
  804244:	d8c00f15 	stw	r3,60(sp)
  804248:	003cd306 	br	803598 <_dtoa_r+0x900>

0080424c <_fflush_r>:
  80424c:	defffb04 	addi	sp,sp,-20
  804250:	dcc00315 	stw	r19,12(sp)
  804254:	dc800215 	stw	r18,8(sp)
  804258:	dfc00415 	stw	ra,16(sp)
  80425c:	dc400115 	stw	r17,4(sp)
  804260:	dc000015 	stw	r16,0(sp)
  804264:	2027883a 	mov	r19,r4
  804268:	2825883a 	mov	r18,r5
  80426c:	20000226 	beq	r4,zero,804278 <_fflush_r+0x2c>
  804270:	20800e17 	ldw	r2,56(r4)
  804274:	10005626 	beq	r2,zero,8043d0 <_fflush_r+0x184>
  804278:	9100030b 	ldhu	r4,12(r18)
  80427c:	20ffffcc 	andi	r3,r4,65535
  804280:	18e0001c 	xori	r3,r3,32768
  804284:	18e00004 	addi	r3,r3,-32768
  804288:	1880020c 	andi	r2,r3,8
  80428c:	1000261e 	bne	r2,zero,804328 <_fflush_r+0xdc>
  804290:	90c00117 	ldw	r3,4(r18)
  804294:	20820014 	ori	r2,r4,2048
  804298:	9080030d 	sth	r2,12(r18)
  80429c:	1009883a 	mov	r4,r2
  8042a0:	00c0400e 	bge	zero,r3,8043a4 <_fflush_r+0x158>
  8042a4:	92000a17 	ldw	r8,40(r18)
  8042a8:	40004026 	beq	r8,zero,8043ac <_fflush_r+0x160>
  8042ac:	2084000c 	andi	r2,r4,4096
  8042b0:	10005326 	beq	r2,zero,804400 <_fflush_r+0x1b4>
  8042b4:	94001417 	ldw	r16,80(r18)
  8042b8:	9080030b 	ldhu	r2,12(r18)
  8042bc:	1080010c 	andi	r2,r2,4
  8042c0:	1000481e 	bne	r2,zero,8043e4 <_fflush_r+0x198>
  8042c4:	91400717 	ldw	r5,28(r18)
  8042c8:	9809883a 	mov	r4,r19
  8042cc:	800d883a 	mov	r6,r16
  8042d0:	000f883a 	mov	r7,zero
  8042d4:	403ee83a 	callr	r8
  8042d8:	8080261e 	bne	r16,r2,804374 <_fflush_r+0x128>
  8042dc:	9080030b 	ldhu	r2,12(r18)
  8042e0:	91000417 	ldw	r4,16(r18)
  8042e4:	90000115 	stw	zero,4(r18)
  8042e8:	10bdffcc 	andi	r2,r2,63487
  8042ec:	10ffffcc 	andi	r3,r2,65535
  8042f0:	18c4000c 	andi	r3,r3,4096
  8042f4:	9080030d 	sth	r2,12(r18)
  8042f8:	91000015 	stw	r4,0(r18)
  8042fc:	18002b26 	beq	r3,zero,8043ac <_fflush_r+0x160>
  804300:	0007883a 	mov	r3,zero
  804304:	1805883a 	mov	r2,r3
  804308:	94001415 	stw	r16,80(r18)
  80430c:	dfc00417 	ldw	ra,16(sp)
  804310:	dcc00317 	ldw	r19,12(sp)
  804314:	dc800217 	ldw	r18,8(sp)
  804318:	dc400117 	ldw	r17,4(sp)
  80431c:	dc000017 	ldw	r16,0(sp)
  804320:	dec00504 	addi	sp,sp,20
  804324:	f800283a 	ret
  804328:	94400417 	ldw	r17,16(r18)
  80432c:	88001f26 	beq	r17,zero,8043ac <_fflush_r+0x160>
  804330:	90800017 	ldw	r2,0(r18)
  804334:	18c000cc 	andi	r3,r3,3
  804338:	94400015 	stw	r17,0(r18)
  80433c:	1461c83a 	sub	r16,r2,r17
  804340:	18002526 	beq	r3,zero,8043d8 <_fflush_r+0x18c>
  804344:	0005883a 	mov	r2,zero
  804348:	90800215 	stw	r2,8(r18)
  80434c:	0400170e 	bge	zero,r16,8043ac <_fflush_r+0x160>
  804350:	90c00917 	ldw	r3,36(r18)
  804354:	91400717 	ldw	r5,28(r18)
  804358:	880d883a 	mov	r6,r17
  80435c:	800f883a 	mov	r7,r16
  804360:	9809883a 	mov	r4,r19
  804364:	183ee83a 	callr	r3
  804368:	88a3883a 	add	r17,r17,r2
  80436c:	80a1c83a 	sub	r16,r16,r2
  804370:	00bff616 	blt	zero,r2,80434c <_fflush_r+0x100>
  804374:	9080030b 	ldhu	r2,12(r18)
  804378:	00ffffc4 	movi	r3,-1
  80437c:	10801014 	ori	r2,r2,64
  804380:	9080030d 	sth	r2,12(r18)
  804384:	1805883a 	mov	r2,r3
  804388:	dfc00417 	ldw	ra,16(sp)
  80438c:	dcc00317 	ldw	r19,12(sp)
  804390:	dc800217 	ldw	r18,8(sp)
  804394:	dc400117 	ldw	r17,4(sp)
  804398:	dc000017 	ldw	r16,0(sp)
  80439c:	dec00504 	addi	sp,sp,20
  8043a0:	f800283a 	ret
  8043a4:	90800f17 	ldw	r2,60(r18)
  8043a8:	00bfbe16 	blt	zero,r2,8042a4 <_fflush_r+0x58>
  8043ac:	0007883a 	mov	r3,zero
  8043b0:	1805883a 	mov	r2,r3
  8043b4:	dfc00417 	ldw	ra,16(sp)
  8043b8:	dcc00317 	ldw	r19,12(sp)
  8043bc:	dc800217 	ldw	r18,8(sp)
  8043c0:	dc400117 	ldw	r17,4(sp)
  8043c4:	dc000017 	ldw	r16,0(sp)
  8043c8:	dec00504 	addi	sp,sp,20
  8043cc:	f800283a 	ret
  8043d0:	08044e40 	call	8044e4 <__sinit>
  8043d4:	003fa806 	br	804278 <_fflush_r+0x2c>
  8043d8:	90800517 	ldw	r2,20(r18)
  8043dc:	90800215 	stw	r2,8(r18)
  8043e0:	003fda06 	br	80434c <_fflush_r+0x100>
  8043e4:	90800117 	ldw	r2,4(r18)
  8043e8:	90c00c17 	ldw	r3,48(r18)
  8043ec:	80a1c83a 	sub	r16,r16,r2
  8043f0:	183fb426 	beq	r3,zero,8042c4 <_fflush_r+0x78>
  8043f4:	90800f17 	ldw	r2,60(r18)
  8043f8:	80a1c83a 	sub	r16,r16,r2
  8043fc:	003fb106 	br	8042c4 <_fflush_r+0x78>
  804400:	91400717 	ldw	r5,28(r18)
  804404:	9809883a 	mov	r4,r19
  804408:	000d883a 	mov	r6,zero
  80440c:	01c00044 	movi	r7,1
  804410:	403ee83a 	callr	r8
  804414:	1021883a 	mov	r16,r2
  804418:	00bfffc4 	movi	r2,-1
  80441c:	80800226 	beq	r16,r2,804428 <_fflush_r+0x1dc>
  804420:	92000a17 	ldw	r8,40(r18)
  804424:	003fa406 	br	8042b8 <_fflush_r+0x6c>
  804428:	98c00017 	ldw	r3,0(r19)
  80442c:	00800744 	movi	r2,29
  804430:	18bfde26 	beq	r3,r2,8043ac <_fflush_r+0x160>
  804434:	9080030b 	ldhu	r2,12(r18)
  804438:	8007883a 	mov	r3,r16
  80443c:	10801014 	ori	r2,r2,64
  804440:	9080030d 	sth	r2,12(r18)
  804444:	003fcf06 	br	804384 <_fflush_r+0x138>

00804448 <fflush>:
  804448:	01402034 	movhi	r5,128
  80444c:	29509304 	addi	r5,r5,16972
  804450:	2007883a 	mov	r3,r4
  804454:	20000526 	beq	r4,zero,80446c <fflush+0x24>
  804458:	008020b4 	movhi	r2,130
  80445c:	10b3da04 	addi	r2,r2,-12440
  804460:	11000017 	ldw	r4,0(r2)
  804464:	180b883a 	mov	r5,r3
  804468:	080424c1 	jmpi	80424c <_fflush_r>
  80446c:	008020b4 	movhi	r2,130
  804470:	10b3db04 	addi	r2,r2,-12436
  804474:	11000017 	ldw	r4,0(r2)
  804478:	080504c1 	jmpi	80504c <_fwalk_reent>

0080447c <std>:
  80447c:	00802034 	movhi	r2,128
  804480:	109d4a04 	addi	r2,r2,29992
  804484:	20800b15 	stw	r2,44(r4)
  804488:	00802034 	movhi	r2,128
  80448c:	109d8504 	addi	r2,r2,30228
  804490:	20800815 	stw	r2,32(r4)
  804494:	00c02034 	movhi	r3,128
  804498:	18dd6604 	addi	r3,r3,30104
  80449c:	00802034 	movhi	r2,128
  8044a0:	109d4c04 	addi	r2,r2,30000
  8044a4:	2140030d 	sth	r5,12(r4)
  8044a8:	2180038d 	sth	r6,14(r4)
  8044ac:	20c00915 	stw	r3,36(r4)
  8044b0:	20800a15 	stw	r2,40(r4)
  8044b4:	20000015 	stw	zero,0(r4)
  8044b8:	20000115 	stw	zero,4(r4)
  8044bc:	20000215 	stw	zero,8(r4)
  8044c0:	20000415 	stw	zero,16(r4)
  8044c4:	20000515 	stw	zero,20(r4)
  8044c8:	20000615 	stw	zero,24(r4)
  8044cc:	21000715 	stw	r4,28(r4)
  8044d0:	f800283a 	ret

008044d4 <__sfp_lock_acquire>:
  8044d4:	f800283a 	ret

008044d8 <__sfp_lock_release>:
  8044d8:	f800283a 	ret

008044dc <__sinit_lock_acquire>:
  8044dc:	f800283a 	ret

008044e0 <__sinit_lock_release>:
  8044e0:	f800283a 	ret

008044e4 <__sinit>:
  8044e4:	20800e17 	ldw	r2,56(r4)
  8044e8:	defffd04 	addi	sp,sp,-12
  8044ec:	dc400115 	stw	r17,4(sp)
  8044f0:	dc000015 	stw	r16,0(sp)
  8044f4:	dfc00215 	stw	ra,8(sp)
  8044f8:	04400044 	movi	r17,1
  8044fc:	01400104 	movi	r5,4
  804500:	000d883a 	mov	r6,zero
  804504:	2021883a 	mov	r16,r4
  804508:	2200bb04 	addi	r8,r4,748
  80450c:	200f883a 	mov	r7,r4
  804510:	10000526 	beq	r2,zero,804528 <__sinit+0x44>
  804514:	dfc00217 	ldw	ra,8(sp)
  804518:	dc400117 	ldw	r17,4(sp)
  80451c:	dc000017 	ldw	r16,0(sp)
  804520:	dec00304 	addi	sp,sp,12
  804524:	f800283a 	ret
  804528:	21000117 	ldw	r4,4(r4)
  80452c:	00802034 	movhi	r2,128
  804530:	10917204 	addi	r2,r2,17864
  804534:	00c000c4 	movi	r3,3
  804538:	80800f15 	stw	r2,60(r16)
  80453c:	80c0b915 	stw	r3,740(r16)
  804540:	8200ba15 	stw	r8,744(r16)
  804544:	84400e15 	stw	r17,56(r16)
  804548:	8000b815 	stw	zero,736(r16)
  80454c:	080447c0 	call	80447c <std>
  804550:	81000217 	ldw	r4,8(r16)
  804554:	880d883a 	mov	r6,r17
  804558:	800f883a 	mov	r7,r16
  80455c:	01400284 	movi	r5,10
  804560:	080447c0 	call	80447c <std>
  804564:	81000317 	ldw	r4,12(r16)
  804568:	800f883a 	mov	r7,r16
  80456c:	01400484 	movi	r5,18
  804570:	01800084 	movi	r6,2
  804574:	dfc00217 	ldw	ra,8(sp)
  804578:	dc400117 	ldw	r17,4(sp)
  80457c:	dc000017 	ldw	r16,0(sp)
  804580:	dec00304 	addi	sp,sp,12
  804584:	080447c1 	jmpi	80447c <std>

00804588 <__fp_lock>:
  804588:	0005883a 	mov	r2,zero
  80458c:	f800283a 	ret

00804590 <__fp_unlock>:
  804590:	0005883a 	mov	r2,zero
  804594:	f800283a 	ret

00804598 <__fp_unlock_all>:
  804598:	008020b4 	movhi	r2,130
  80459c:	10b3da04 	addi	r2,r2,-12440
  8045a0:	11000017 	ldw	r4,0(r2)
  8045a4:	01402034 	movhi	r5,128
  8045a8:	29516404 	addi	r5,r5,17808
  8045ac:	08051141 	jmpi	805114 <_fwalk>

008045b0 <__fp_lock_all>:
  8045b0:	008020b4 	movhi	r2,130
  8045b4:	10b3da04 	addi	r2,r2,-12440
  8045b8:	11000017 	ldw	r4,0(r2)
  8045bc:	01402034 	movhi	r5,128
  8045c0:	29516204 	addi	r5,r5,17800
  8045c4:	08051141 	jmpi	805114 <_fwalk>

008045c8 <_cleanup_r>:
  8045c8:	01402034 	movhi	r5,128
  8045cc:	295e7c04 	addi	r5,r5,31216
  8045d0:	08051141 	jmpi	805114 <_fwalk>

008045d4 <_cleanup>:
  8045d4:	008020b4 	movhi	r2,130
  8045d8:	10b3db04 	addi	r2,r2,-12436
  8045dc:	11000017 	ldw	r4,0(r2)
  8045e0:	08045c81 	jmpi	8045c8 <_cleanup_r>

008045e4 <__sfmoreglue>:
  8045e4:	defffc04 	addi	sp,sp,-16
  8045e8:	dc000015 	stw	r16,0(sp)
  8045ec:	2821883a 	mov	r16,r5
  8045f0:	dc400115 	stw	r17,4(sp)
  8045f4:	01401704 	movi	r5,92
  8045f8:	2023883a 	mov	r17,r4
  8045fc:	8009883a 	mov	r4,r16
  804600:	dfc00315 	stw	ra,12(sp)
  804604:	dcc00215 	stw	r19,8(sp)
  804608:	0809b1c0 	call	809b1c <__mulsi3>
  80460c:	11400304 	addi	r5,r2,12
  804610:	8809883a 	mov	r4,r17
  804614:	1027883a 	mov	r19,r2
  804618:	08054240 	call	805424 <_malloc_r>
  80461c:	10c00304 	addi	r3,r2,12
  804620:	1023883a 	mov	r17,r2
  804624:	1809883a 	mov	r4,r3
  804628:	980d883a 	mov	r6,r19
  80462c:	000b883a 	mov	r5,zero
  804630:	10000b26 	beq	r2,zero,804660 <__sfmoreglue+0x7c>
  804634:	14000115 	stw	r16,4(r2)
  804638:	10c00215 	stw	r3,8(r2)
  80463c:	10000015 	stw	zero,0(r2)
  804640:	08007a00 	call	8007a0 <memset>
  804644:	8805883a 	mov	r2,r17
  804648:	dfc00317 	ldw	ra,12(sp)
  80464c:	dcc00217 	ldw	r19,8(sp)
  804650:	dc400117 	ldw	r17,4(sp)
  804654:	dc000017 	ldw	r16,0(sp)
  804658:	dec00404 	addi	sp,sp,16
  80465c:	f800283a 	ret
  804660:	0023883a 	mov	r17,zero
  804664:	8805883a 	mov	r2,r17
  804668:	dfc00317 	ldw	ra,12(sp)
  80466c:	dcc00217 	ldw	r19,8(sp)
  804670:	dc400117 	ldw	r17,4(sp)
  804674:	dc000017 	ldw	r16,0(sp)
  804678:	dec00404 	addi	sp,sp,16
  80467c:	f800283a 	ret

00804680 <__sfp>:
  804680:	defffd04 	addi	sp,sp,-12
  804684:	008020b4 	movhi	r2,130
  804688:	10b3db04 	addi	r2,r2,-12436
  80468c:	dc000015 	stw	r16,0(sp)
  804690:	14000017 	ldw	r16,0(r2)
  804694:	dc400115 	stw	r17,4(sp)
  804698:	dfc00215 	stw	ra,8(sp)
  80469c:	80800e17 	ldw	r2,56(r16)
  8046a0:	2023883a 	mov	r17,r4
  8046a4:	10002626 	beq	r2,zero,804740 <__sfp+0xc0>
  8046a8:	8400b804 	addi	r16,r16,736
  8046ac:	80800117 	ldw	r2,4(r16)
  8046b0:	81000217 	ldw	r4,8(r16)
  8046b4:	10ffffc4 	addi	r3,r2,-1
  8046b8:	18000916 	blt	r3,zero,8046e0 <__sfp+0x60>
  8046bc:	2080030f 	ldh	r2,12(r4)
  8046c0:	10000b26 	beq	r2,zero,8046f0 <__sfp+0x70>
  8046c4:	017fffc4 	movi	r5,-1
  8046c8:	00000206 	br	8046d4 <__sfp+0x54>
  8046cc:	2080030f 	ldh	r2,12(r4)
  8046d0:	10000726 	beq	r2,zero,8046f0 <__sfp+0x70>
  8046d4:	18ffffc4 	addi	r3,r3,-1
  8046d8:	21001704 	addi	r4,r4,92
  8046dc:	197ffb1e 	bne	r3,r5,8046cc <__sfp+0x4c>
  8046e0:	80800017 	ldw	r2,0(r16)
  8046e4:	10001926 	beq	r2,zero,80474c <__sfp+0xcc>
  8046e8:	1021883a 	mov	r16,r2
  8046ec:	003fef06 	br	8046ac <__sfp+0x2c>
  8046f0:	00bfffc4 	movi	r2,-1
  8046f4:	00c00044 	movi	r3,1
  8046f8:	2080038d 	sth	r2,14(r4)
  8046fc:	20c0030d 	sth	r3,12(r4)
  804700:	20000015 	stw	zero,0(r4)
  804704:	20000215 	stw	zero,8(r4)
  804708:	20000115 	stw	zero,4(r4)
  80470c:	20000415 	stw	zero,16(r4)
  804710:	20000515 	stw	zero,20(r4)
  804714:	20000615 	stw	zero,24(r4)
  804718:	20000c15 	stw	zero,48(r4)
  80471c:	20000d15 	stw	zero,52(r4)
  804720:	20001115 	stw	zero,68(r4)
  804724:	20001215 	stw	zero,72(r4)
  804728:	2005883a 	mov	r2,r4
  80472c:	dfc00217 	ldw	ra,8(sp)
  804730:	dc400117 	ldw	r17,4(sp)
  804734:	dc000017 	ldw	r16,0(sp)
  804738:	dec00304 	addi	sp,sp,12
  80473c:	f800283a 	ret
  804740:	8009883a 	mov	r4,r16
  804744:	08044e40 	call	8044e4 <__sinit>
  804748:	003fd706 	br	8046a8 <__sfp+0x28>
  80474c:	8809883a 	mov	r4,r17
  804750:	01400104 	movi	r5,4
  804754:	08045e40 	call	8045e4 <__sfmoreglue>
  804758:	80800015 	stw	r2,0(r16)
  80475c:	103fe21e 	bne	r2,zero,8046e8 <__sfp+0x68>
  804760:	00800304 	movi	r2,12
  804764:	0009883a 	mov	r4,zero
  804768:	88800015 	stw	r2,0(r17)
  80476c:	003fee06 	br	804728 <__sfp+0xa8>

00804770 <_malloc_trim_r>:
  804770:	defffb04 	addi	sp,sp,-20
  804774:	dcc00315 	stw	r19,12(sp)
  804778:	04c020b4 	movhi	r19,130
  80477c:	9cee3204 	addi	r19,r19,-18232
  804780:	dc800215 	stw	r18,8(sp)
  804784:	dc400115 	stw	r17,4(sp)
  804788:	dc000015 	stw	r16,0(sp)
  80478c:	2823883a 	mov	r17,r5
  804790:	2025883a 	mov	r18,r4
  804794:	dfc00415 	stw	ra,16(sp)
  804798:	080b0d80 	call	80b0d8 <__malloc_lock>
  80479c:	98800217 	ldw	r2,8(r19)
  8047a0:	9009883a 	mov	r4,r18
  8047a4:	000b883a 	mov	r5,zero
  8047a8:	10c00117 	ldw	r3,4(r2)
  8047ac:	00bfff04 	movi	r2,-4
  8047b0:	18a0703a 	and	r16,r3,r2
  8047b4:	8463c83a 	sub	r17,r16,r17
  8047b8:	8c43fbc4 	addi	r17,r17,4079
  8047bc:	8822d33a 	srli	r17,r17,12
  8047c0:	0083ffc4 	movi	r2,4095
  8047c4:	8c7fffc4 	addi	r17,r17,-1
  8047c8:	8822933a 	slli	r17,r17,12
  8047cc:	1440060e 	bge	r2,r17,8047e8 <_malloc_trim_r+0x78>
  8047d0:	08074b80 	call	8074b8 <_sbrk_r>
  8047d4:	98c00217 	ldw	r3,8(r19)
  8047d8:	9009883a 	mov	r4,r18
  8047dc:	044bc83a 	sub	r5,zero,r17
  8047e0:	80c7883a 	add	r3,r16,r3
  8047e4:	10c00926 	beq	r2,r3,80480c <_malloc_trim_r+0x9c>
  8047e8:	080b1e00 	call	80b1e0 <__malloc_unlock>
  8047ec:	0005883a 	mov	r2,zero
  8047f0:	dfc00417 	ldw	ra,16(sp)
  8047f4:	dcc00317 	ldw	r19,12(sp)
  8047f8:	dc800217 	ldw	r18,8(sp)
  8047fc:	dc400117 	ldw	r17,4(sp)
  804800:	dc000017 	ldw	r16,0(sp)
  804804:	dec00504 	addi	sp,sp,20
  804808:	f800283a 	ret
  80480c:	9009883a 	mov	r4,r18
  804810:	08074b80 	call	8074b8 <_sbrk_r>
  804814:	844dc83a 	sub	r6,r16,r17
  804818:	00ffffc4 	movi	r3,-1
  80481c:	9009883a 	mov	r4,r18
  804820:	000b883a 	mov	r5,zero
  804824:	01c020b4 	movhi	r7,130
  804828:	39fb1a04 	addi	r7,r7,-5016
  80482c:	31800054 	ori	r6,r6,1
  804830:	10c00926 	beq	r2,r3,804858 <_malloc_trim_r+0xe8>
  804834:	38800017 	ldw	r2,0(r7)
  804838:	98c00217 	ldw	r3,8(r19)
  80483c:	9009883a 	mov	r4,r18
  804840:	1445c83a 	sub	r2,r2,r17
  804844:	38800015 	stw	r2,0(r7)
  804848:	19800115 	stw	r6,4(r3)
  80484c:	080b1e00 	call	80b1e0 <__malloc_unlock>
  804850:	00800044 	movi	r2,1
  804854:	003fe606 	br	8047f0 <_malloc_trim_r+0x80>
  804858:	08074b80 	call	8074b8 <_sbrk_r>
  80485c:	99800217 	ldw	r6,8(r19)
  804860:	100f883a 	mov	r7,r2
  804864:	9009883a 	mov	r4,r18
  804868:	1187c83a 	sub	r3,r2,r6
  80486c:	008003c4 	movi	r2,15
  804870:	19400054 	ori	r5,r3,1
  804874:	10ffdc0e 	bge	r2,r3,8047e8 <_malloc_trim_r+0x78>
  804878:	008020b4 	movhi	r2,130
  80487c:	10b3df04 	addi	r2,r2,-12420
  804880:	10c00017 	ldw	r3,0(r2)
  804884:	008020b4 	movhi	r2,130
  804888:	10bb1a04 	addi	r2,r2,-5016
  80488c:	31400115 	stw	r5,4(r6)
  804890:	38c7c83a 	sub	r3,r7,r3
  804894:	10c00015 	stw	r3,0(r2)
  804898:	003fd306 	br	8047e8 <_malloc_trim_r+0x78>

0080489c <_free_r>:
  80489c:	defffd04 	addi	sp,sp,-12
  8048a0:	dc400115 	stw	r17,4(sp)
  8048a4:	dc000015 	stw	r16,0(sp)
  8048a8:	dfc00215 	stw	ra,8(sp)
  8048ac:	2821883a 	mov	r16,r5
  8048b0:	2023883a 	mov	r17,r4
  8048b4:	28005a26 	beq	r5,zero,804a20 <_free_r+0x184>
  8048b8:	080b0d80 	call	80b0d8 <__malloc_lock>
  8048bc:	823ffe04 	addi	r8,r16,-8
  8048c0:	41400117 	ldw	r5,4(r8)
  8048c4:	00bfff84 	movi	r2,-2
  8048c8:	028020b4 	movhi	r10,130
  8048cc:	52ae3204 	addi	r10,r10,-18232
  8048d0:	288e703a 	and	r7,r5,r2
  8048d4:	41cd883a 	add	r6,r8,r7
  8048d8:	30c00117 	ldw	r3,4(r6)
  8048dc:	51000217 	ldw	r4,8(r10)
  8048e0:	00bfff04 	movi	r2,-4
  8048e4:	1892703a 	and	r9,r3,r2
  8048e8:	5017883a 	mov	r11,r10
  8048ec:	31006726 	beq	r6,r4,804a8c <_free_r+0x1f0>
  8048f0:	2880004c 	andi	r2,r5,1
  8048f4:	1005003a 	cmpeq	r2,r2,zero
  8048f8:	32400115 	stw	r9,4(r6)
  8048fc:	10001a1e 	bne	r2,zero,804968 <_free_r+0xcc>
  804900:	000b883a 	mov	r5,zero
  804904:	3247883a 	add	r3,r6,r9
  804908:	18800117 	ldw	r2,4(r3)
  80490c:	1080004c 	andi	r2,r2,1
  804910:	1000231e 	bne	r2,zero,8049a0 <_free_r+0x104>
  804914:	280ac03a 	cmpne	r5,r5,zero
  804918:	3a4f883a 	add	r7,r7,r9
  80491c:	2800451e 	bne	r5,zero,804a34 <_free_r+0x198>
  804920:	31000217 	ldw	r4,8(r6)
  804924:	008020b4 	movhi	r2,130
  804928:	10ae3404 	addi	r2,r2,-18224
  80492c:	20807b26 	beq	r4,r2,804b1c <_free_r+0x280>
  804930:	30800317 	ldw	r2,12(r6)
  804934:	3a07883a 	add	r3,r7,r8
  804938:	19c00015 	stw	r7,0(r3)
  80493c:	11000215 	stw	r4,8(r2)
  804940:	20800315 	stw	r2,12(r4)
  804944:	38800054 	ori	r2,r7,1
  804948:	40800115 	stw	r2,4(r8)
  80494c:	28001a26 	beq	r5,zero,8049b8 <_free_r+0x11c>
  804950:	8809883a 	mov	r4,r17
  804954:	dfc00217 	ldw	ra,8(sp)
  804958:	dc400117 	ldw	r17,4(sp)
  80495c:	dc000017 	ldw	r16,0(sp)
  804960:	dec00304 	addi	sp,sp,12
  804964:	080b1e01 	jmpi	80b1e0 <__malloc_unlock>
  804968:	80bffe17 	ldw	r2,-8(r16)
  80496c:	50c00204 	addi	r3,r10,8
  804970:	4091c83a 	sub	r8,r8,r2
  804974:	41000217 	ldw	r4,8(r8)
  804978:	388f883a 	add	r7,r7,r2
  80497c:	20c06126 	beq	r4,r3,804b04 <_free_r+0x268>
  804980:	40800317 	ldw	r2,12(r8)
  804984:	3247883a 	add	r3,r6,r9
  804988:	000b883a 	mov	r5,zero
  80498c:	11000215 	stw	r4,8(r2)
  804990:	20800315 	stw	r2,12(r4)
  804994:	18800117 	ldw	r2,4(r3)
  804998:	1080004c 	andi	r2,r2,1
  80499c:	103fdd26 	beq	r2,zero,804914 <_free_r+0x78>
  8049a0:	38800054 	ori	r2,r7,1
  8049a4:	3a07883a 	add	r3,r7,r8
  8049a8:	280ac03a 	cmpne	r5,r5,zero
  8049ac:	40800115 	stw	r2,4(r8)
  8049b0:	19c00015 	stw	r7,0(r3)
  8049b4:	283fe61e 	bne	r5,zero,804950 <_free_r+0xb4>
  8049b8:	00807fc4 	movi	r2,511
  8049bc:	11c01f2e 	bgeu	r2,r7,804a3c <_free_r+0x1a0>
  8049c0:	3806d27a 	srli	r3,r7,9
  8049c4:	1800481e 	bne	r3,zero,804ae8 <_free_r+0x24c>
  8049c8:	3804d0fa 	srli	r2,r7,3
  8049cc:	100690fa 	slli	r3,r2,3
  8049d0:	1acd883a 	add	r6,r3,r11
  8049d4:	31400217 	ldw	r5,8(r6)
  8049d8:	31405926 	beq	r6,r5,804b40 <_free_r+0x2a4>
  8049dc:	28800117 	ldw	r2,4(r5)
  8049e0:	00ffff04 	movi	r3,-4
  8049e4:	10c4703a 	and	r2,r2,r3
  8049e8:	3880022e 	bgeu	r7,r2,8049f4 <_free_r+0x158>
  8049ec:	29400217 	ldw	r5,8(r5)
  8049f0:	317ffa1e 	bne	r6,r5,8049dc <_free_r+0x140>
  8049f4:	29800317 	ldw	r6,12(r5)
  8049f8:	41800315 	stw	r6,12(r8)
  8049fc:	41400215 	stw	r5,8(r8)
  804a00:	8809883a 	mov	r4,r17
  804a04:	2a000315 	stw	r8,12(r5)
  804a08:	32000215 	stw	r8,8(r6)
  804a0c:	dfc00217 	ldw	ra,8(sp)
  804a10:	dc400117 	ldw	r17,4(sp)
  804a14:	dc000017 	ldw	r16,0(sp)
  804a18:	dec00304 	addi	sp,sp,12
  804a1c:	080b1e01 	jmpi	80b1e0 <__malloc_unlock>
  804a20:	dfc00217 	ldw	ra,8(sp)
  804a24:	dc400117 	ldw	r17,4(sp)
  804a28:	dc000017 	ldw	r16,0(sp)
  804a2c:	dec00304 	addi	sp,sp,12
  804a30:	f800283a 	ret
  804a34:	31000217 	ldw	r4,8(r6)
  804a38:	003fbd06 	br	804930 <_free_r+0x94>
  804a3c:	3806d0fa 	srli	r3,r7,3
  804a40:	00800044 	movi	r2,1
  804a44:	51400117 	ldw	r5,4(r10)
  804a48:	180890fa 	slli	r4,r3,3
  804a4c:	1807d0ba 	srai	r3,r3,2
  804a50:	22c9883a 	add	r4,r4,r11
  804a54:	21800217 	ldw	r6,8(r4)
  804a58:	10c4983a 	sll	r2,r2,r3
  804a5c:	41000315 	stw	r4,12(r8)
  804a60:	41800215 	stw	r6,8(r8)
  804a64:	288ab03a 	or	r5,r5,r2
  804a68:	22000215 	stw	r8,8(r4)
  804a6c:	8809883a 	mov	r4,r17
  804a70:	51400115 	stw	r5,4(r10)
  804a74:	32000315 	stw	r8,12(r6)
  804a78:	dfc00217 	ldw	ra,8(sp)
  804a7c:	dc400117 	ldw	r17,4(sp)
  804a80:	dc000017 	ldw	r16,0(sp)
  804a84:	dec00304 	addi	sp,sp,12
  804a88:	080b1e01 	jmpi	80b1e0 <__malloc_unlock>
  804a8c:	2880004c 	andi	r2,r5,1
  804a90:	3a4d883a 	add	r6,r7,r9
  804a94:	1000071e 	bne	r2,zero,804ab4 <_free_r+0x218>
  804a98:	80bffe17 	ldw	r2,-8(r16)
  804a9c:	4091c83a 	sub	r8,r8,r2
  804aa0:	41000317 	ldw	r4,12(r8)
  804aa4:	40c00217 	ldw	r3,8(r8)
  804aa8:	308d883a 	add	r6,r6,r2
  804aac:	20c00215 	stw	r3,8(r4)
  804ab0:	19000315 	stw	r4,12(r3)
  804ab4:	008020b4 	movhi	r2,130
  804ab8:	10b3de04 	addi	r2,r2,-12424
  804abc:	11000017 	ldw	r4,0(r2)
  804ac0:	30c00054 	ori	r3,r6,1
  804ac4:	52000215 	stw	r8,8(r10)
  804ac8:	40c00115 	stw	r3,4(r8)
  804acc:	313fa036 	bltu	r6,r4,804950 <_free_r+0xb4>
  804ad0:	008020b4 	movhi	r2,130
  804ad4:	10baea04 	addi	r2,r2,-5208
  804ad8:	11400017 	ldw	r5,0(r2)
  804adc:	8809883a 	mov	r4,r17
  804ae0:	08047700 	call	804770 <_malloc_trim_r>
  804ae4:	003f9a06 	br	804950 <_free_r+0xb4>
  804ae8:	00800104 	movi	r2,4
  804aec:	10c0072e 	bgeu	r2,r3,804b0c <_free_r+0x270>
  804af0:	00800504 	movi	r2,20
  804af4:	10c01936 	bltu	r2,r3,804b5c <_free_r+0x2c0>
  804af8:	188016c4 	addi	r2,r3,91
  804afc:	100690fa 	slli	r3,r2,3
  804b00:	003fb306 	br	8049d0 <_free_r+0x134>
  804b04:	01400044 	movi	r5,1
  804b08:	003f7e06 	br	804904 <_free_r+0x68>
  804b0c:	3804d1ba 	srli	r2,r7,6
  804b10:	10800e04 	addi	r2,r2,56
  804b14:	100690fa 	slli	r3,r2,3
  804b18:	003fad06 	br	8049d0 <_free_r+0x134>
  804b1c:	22000315 	stw	r8,12(r4)
  804b20:	22000215 	stw	r8,8(r4)
  804b24:	3a05883a 	add	r2,r7,r8
  804b28:	38c00054 	ori	r3,r7,1
  804b2c:	11c00015 	stw	r7,0(r2)
  804b30:	41000215 	stw	r4,8(r8)
  804b34:	40c00115 	stw	r3,4(r8)
  804b38:	41000315 	stw	r4,12(r8)
  804b3c:	003f8406 	br	804950 <_free_r+0xb4>
  804b40:	1005d0ba 	srai	r2,r2,2
  804b44:	00c00044 	movi	r3,1
  804b48:	51000117 	ldw	r4,4(r10)
  804b4c:	1886983a 	sll	r3,r3,r2
  804b50:	20c8b03a 	or	r4,r4,r3
  804b54:	51000115 	stw	r4,4(r10)
  804b58:	003fa706 	br	8049f8 <_free_r+0x15c>
  804b5c:	00801504 	movi	r2,84
  804b60:	10c00436 	bltu	r2,r3,804b74 <_free_r+0x2d8>
  804b64:	3804d33a 	srli	r2,r7,12
  804b68:	10801b84 	addi	r2,r2,110
  804b6c:	100690fa 	slli	r3,r2,3
  804b70:	003f9706 	br	8049d0 <_free_r+0x134>
  804b74:	00805504 	movi	r2,340
  804b78:	10c00436 	bltu	r2,r3,804b8c <_free_r+0x2f0>
  804b7c:	3804d3fa 	srli	r2,r7,15
  804b80:	10801dc4 	addi	r2,r2,119
  804b84:	100690fa 	slli	r3,r2,3
  804b88:	003f9106 	br	8049d0 <_free_r+0x134>
  804b8c:	00815504 	movi	r2,1364
  804b90:	10c0032e 	bgeu	r2,r3,804ba0 <_free_r+0x304>
  804b94:	00801f84 	movi	r2,126
  804b98:	00c0fc04 	movi	r3,1008
  804b9c:	003f8c06 	br	8049d0 <_free_r+0x134>
  804ba0:	3804d4ba 	srli	r2,r7,18
  804ba4:	10801f04 	addi	r2,r2,124
  804ba8:	100690fa 	slli	r3,r2,3
  804bac:	003f8806 	br	8049d0 <_free_r+0x134>

00804bb0 <__sfvwrite_r>:
  804bb0:	30800217 	ldw	r2,8(r6)
  804bb4:	defff504 	addi	sp,sp,-44
  804bb8:	df000915 	stw	fp,36(sp)
  804bbc:	dd800715 	stw	r22,28(sp)
  804bc0:	dc800315 	stw	r18,12(sp)
  804bc4:	dfc00a15 	stw	ra,40(sp)
  804bc8:	ddc00815 	stw	r23,32(sp)
  804bcc:	dd400615 	stw	r21,24(sp)
  804bd0:	dd000515 	stw	r20,20(sp)
  804bd4:	dcc00415 	stw	r19,16(sp)
  804bd8:	dc400215 	stw	r17,8(sp)
  804bdc:	dc000115 	stw	r16,4(sp)
  804be0:	302d883a 	mov	r22,r6
  804be4:	2039883a 	mov	fp,r4
  804be8:	2825883a 	mov	r18,r5
  804bec:	10001c26 	beq	r2,zero,804c60 <__sfvwrite_r+0xb0>
  804bf0:	29c0030b 	ldhu	r7,12(r5)
  804bf4:	3880020c 	andi	r2,r7,8
  804bf8:	10002726 	beq	r2,zero,804c98 <__sfvwrite_r+0xe8>
  804bfc:	28800417 	ldw	r2,16(r5)
  804c00:	10002526 	beq	r2,zero,804c98 <__sfvwrite_r+0xe8>
  804c04:	3880008c 	andi	r2,r7,2
  804c08:	b5400017 	ldw	r21,0(r22)
  804c0c:	10002826 	beq	r2,zero,804cb0 <__sfvwrite_r+0x100>
  804c10:	0021883a 	mov	r16,zero
  804c14:	0023883a 	mov	r17,zero
  804c18:	880d883a 	mov	r6,r17
  804c1c:	e009883a 	mov	r4,fp
  804c20:	00810004 	movi	r2,1024
  804c24:	80006e26 	beq	r16,zero,804de0 <__sfvwrite_r+0x230>
  804c28:	800f883a 	mov	r7,r16
  804c2c:	91400717 	ldw	r5,28(r18)
  804c30:	1400012e 	bgeu	r2,r16,804c38 <__sfvwrite_r+0x88>
  804c34:	100f883a 	mov	r7,r2
  804c38:	90c00917 	ldw	r3,36(r18)
  804c3c:	183ee83a 	callr	r3
  804c40:	1007883a 	mov	r3,r2
  804c44:	80a1c83a 	sub	r16,r16,r2
  804c48:	88a3883a 	add	r17,r17,r2
  804c4c:	00806d0e 	bge	zero,r2,804e04 <__sfvwrite_r+0x254>
  804c50:	b0800217 	ldw	r2,8(r22)
  804c54:	10c5c83a 	sub	r2,r2,r3
  804c58:	b0800215 	stw	r2,8(r22)
  804c5c:	103fee1e 	bne	r2,zero,804c18 <__sfvwrite_r+0x68>
  804c60:	0009883a 	mov	r4,zero
  804c64:	2005883a 	mov	r2,r4
  804c68:	dfc00a17 	ldw	ra,40(sp)
  804c6c:	df000917 	ldw	fp,36(sp)
  804c70:	ddc00817 	ldw	r23,32(sp)
  804c74:	dd800717 	ldw	r22,28(sp)
  804c78:	dd400617 	ldw	r21,24(sp)
  804c7c:	dd000517 	ldw	r20,20(sp)
  804c80:	dcc00417 	ldw	r19,16(sp)
  804c84:	dc800317 	ldw	r18,12(sp)
  804c88:	dc400217 	ldw	r17,8(sp)
  804c8c:	dc000117 	ldw	r16,4(sp)
  804c90:	dec00b04 	addi	sp,sp,44
  804c94:	f800283a 	ret
  804c98:	08029180 	call	802918 <__swsetup_r>
  804c9c:	1000e41e 	bne	r2,zero,805030 <__sfvwrite_r+0x480>
  804ca0:	91c0030b 	ldhu	r7,12(r18)
  804ca4:	b5400017 	ldw	r21,0(r22)
  804ca8:	3880008c 	andi	r2,r7,2
  804cac:	103fd81e 	bne	r2,zero,804c10 <__sfvwrite_r+0x60>
  804cb0:	3880004c 	andi	r2,r7,1
  804cb4:	1005003a 	cmpeq	r2,r2,zero
  804cb8:	10005726 	beq	r2,zero,804e18 <__sfvwrite_r+0x268>
  804cbc:	0029883a 	mov	r20,zero
  804cc0:	002f883a 	mov	r23,zero
  804cc4:	a0004226 	beq	r20,zero,804dd0 <__sfvwrite_r+0x220>
  804cc8:	3880800c 	andi	r2,r7,512
  804ccc:	94000217 	ldw	r16,8(r18)
  804cd0:	10008b26 	beq	r2,zero,804f00 <__sfvwrite_r+0x350>
  804cd4:	800d883a 	mov	r6,r16
  804cd8:	a400a536 	bltu	r20,r16,804f70 <__sfvwrite_r+0x3c0>
  804cdc:	3881200c 	andi	r2,r7,1152
  804ce0:	10002726 	beq	r2,zero,804d80 <__sfvwrite_r+0x1d0>
  804ce4:	90800517 	ldw	r2,20(r18)
  804ce8:	92000417 	ldw	r8,16(r18)
  804cec:	91400017 	ldw	r5,0(r18)
  804cf0:	1087883a 	add	r3,r2,r2
  804cf4:	1887883a 	add	r3,r3,r2
  804cf8:	1808d7fa 	srli	r4,r3,31
  804cfc:	2a21c83a 	sub	r16,r5,r8
  804d00:	80800044 	addi	r2,r16,1
  804d04:	20c9883a 	add	r4,r4,r3
  804d08:	2027d07a 	srai	r19,r4,1
  804d0c:	a085883a 	add	r2,r20,r2
  804d10:	980d883a 	mov	r6,r19
  804d14:	9880022e 	bgeu	r19,r2,804d20 <__sfvwrite_r+0x170>
  804d18:	1027883a 	mov	r19,r2
  804d1c:	100d883a 	mov	r6,r2
  804d20:	3881000c 	andi	r2,r7,1024
  804d24:	1000b826 	beq	r2,zero,805008 <__sfvwrite_r+0x458>
  804d28:	300b883a 	mov	r5,r6
  804d2c:	e009883a 	mov	r4,fp
  804d30:	08054240 	call	805424 <_malloc_r>
  804d34:	10003126 	beq	r2,zero,804dfc <__sfvwrite_r+0x24c>
  804d38:	91400417 	ldw	r5,16(r18)
  804d3c:	1009883a 	mov	r4,r2
  804d40:	800d883a 	mov	r6,r16
  804d44:	1023883a 	mov	r17,r2
  804d48:	0805c480 	call	805c48 <memcpy>
  804d4c:	90c0030b 	ldhu	r3,12(r18)
  804d50:	00beffc4 	movi	r2,-1025
  804d54:	1886703a 	and	r3,r3,r2
  804d58:	18c02014 	ori	r3,r3,128
  804d5c:	90c0030d 	sth	r3,12(r18)
  804d60:	9c07c83a 	sub	r3,r19,r16
  804d64:	8c05883a 	add	r2,r17,r16
  804d68:	a00d883a 	mov	r6,r20
  804d6c:	a021883a 	mov	r16,r20
  804d70:	90800015 	stw	r2,0(r18)
  804d74:	90c00215 	stw	r3,8(r18)
  804d78:	94400415 	stw	r17,16(r18)
  804d7c:	94c00515 	stw	r19,20(r18)
  804d80:	91000017 	ldw	r4,0(r18)
  804d84:	b80b883a 	mov	r5,r23
  804d88:	a023883a 	mov	r17,r20
  804d8c:	0805ce80 	call	805ce8 <memmove>
  804d90:	90c00217 	ldw	r3,8(r18)
  804d94:	90800017 	ldw	r2,0(r18)
  804d98:	a027883a 	mov	r19,r20
  804d9c:	1c07c83a 	sub	r3,r3,r16
  804da0:	1405883a 	add	r2,r2,r16
  804da4:	90c00215 	stw	r3,8(r18)
  804da8:	a021883a 	mov	r16,r20
  804dac:	90800015 	stw	r2,0(r18)
  804db0:	b0800217 	ldw	r2,8(r22)
  804db4:	1405c83a 	sub	r2,r2,r16
  804db8:	b0800215 	stw	r2,8(r22)
  804dbc:	103fa826 	beq	r2,zero,804c60 <__sfvwrite_r+0xb0>
  804dc0:	a469c83a 	sub	r20,r20,r17
  804dc4:	91c0030b 	ldhu	r7,12(r18)
  804dc8:	bcef883a 	add	r23,r23,r19
  804dcc:	a03fbe1e 	bne	r20,zero,804cc8 <__sfvwrite_r+0x118>
  804dd0:	adc00017 	ldw	r23,0(r21)
  804dd4:	ad000117 	ldw	r20,4(r21)
  804dd8:	ad400204 	addi	r21,r21,8
  804ddc:	003fb906 	br	804cc4 <__sfvwrite_r+0x114>
  804de0:	ac400017 	ldw	r17,0(r21)
  804de4:	ac000117 	ldw	r16,4(r21)
  804de8:	ad400204 	addi	r21,r21,8
  804dec:	003f8a06 	br	804c18 <__sfvwrite_r+0x68>
  804df0:	91400417 	ldw	r5,16(r18)
  804df4:	e009883a 	mov	r4,fp
  804df8:	080489c0 	call	80489c <_free_r>
  804dfc:	00800304 	movi	r2,12
  804e00:	e0800015 	stw	r2,0(fp)
  804e04:	9080030b 	ldhu	r2,12(r18)
  804e08:	013fffc4 	movi	r4,-1
  804e0c:	10801014 	ori	r2,r2,64
  804e10:	9080030d 	sth	r2,12(r18)
  804e14:	003f9306 	br	804c64 <__sfvwrite_r+0xb4>
  804e18:	0027883a 	mov	r19,zero
  804e1c:	002f883a 	mov	r23,zero
  804e20:	d8000015 	stw	zero,0(sp)
  804e24:	0029883a 	mov	r20,zero
  804e28:	98001e26 	beq	r19,zero,804ea4 <__sfvwrite_r+0x2f4>
  804e2c:	d8c00017 	ldw	r3,0(sp)
  804e30:	1804c03a 	cmpne	r2,r3,zero
  804e34:	10005e26 	beq	r2,zero,804fb0 <__sfvwrite_r+0x400>
  804e38:	9821883a 	mov	r16,r19
  804e3c:	a4c0012e 	bgeu	r20,r19,804e44 <__sfvwrite_r+0x294>
  804e40:	a021883a 	mov	r16,r20
  804e44:	91000017 	ldw	r4,0(r18)
  804e48:	90800417 	ldw	r2,16(r18)
  804e4c:	91800217 	ldw	r6,8(r18)
  804e50:	91c00517 	ldw	r7,20(r18)
  804e54:	1100022e 	bgeu	r2,r4,804e60 <__sfvwrite_r+0x2b0>
  804e58:	31e3883a 	add	r17,r6,r7
  804e5c:	8c001616 	blt	r17,r16,804eb8 <__sfvwrite_r+0x308>
  804e60:	81c03816 	blt	r16,r7,804f44 <__sfvwrite_r+0x394>
  804e64:	90c00917 	ldw	r3,36(r18)
  804e68:	91400717 	ldw	r5,28(r18)
  804e6c:	e009883a 	mov	r4,fp
  804e70:	b80d883a 	mov	r6,r23
  804e74:	183ee83a 	callr	r3
  804e78:	1023883a 	mov	r17,r2
  804e7c:	00bfe10e 	bge	zero,r2,804e04 <__sfvwrite_r+0x254>
  804e80:	a469c83a 	sub	r20,r20,r17
  804e84:	a0001826 	beq	r20,zero,804ee8 <__sfvwrite_r+0x338>
  804e88:	b0800217 	ldw	r2,8(r22)
  804e8c:	1445c83a 	sub	r2,r2,r17
  804e90:	b0800215 	stw	r2,8(r22)
  804e94:	103f7226 	beq	r2,zero,804c60 <__sfvwrite_r+0xb0>
  804e98:	9c67c83a 	sub	r19,r19,r17
  804e9c:	bc6f883a 	add	r23,r23,r17
  804ea0:	983fe21e 	bne	r19,zero,804e2c <__sfvwrite_r+0x27c>
  804ea4:	adc00017 	ldw	r23,0(r21)
  804ea8:	acc00117 	ldw	r19,4(r21)
  804eac:	ad400204 	addi	r21,r21,8
  804eb0:	d8000015 	stw	zero,0(sp)
  804eb4:	003fdc06 	br	804e28 <__sfvwrite_r+0x278>
  804eb8:	b80b883a 	mov	r5,r23
  804ebc:	880d883a 	mov	r6,r17
  804ec0:	0805ce80 	call	805ce8 <memmove>
  804ec4:	90c00017 	ldw	r3,0(r18)
  804ec8:	e009883a 	mov	r4,fp
  804ecc:	900b883a 	mov	r5,r18
  804ed0:	1c47883a 	add	r3,r3,r17
  804ed4:	90c00015 	stw	r3,0(r18)
  804ed8:	080424c0 	call	80424c <_fflush_r>
  804edc:	103fc91e 	bne	r2,zero,804e04 <__sfvwrite_r+0x254>
  804ee0:	a469c83a 	sub	r20,r20,r17
  804ee4:	a03fe81e 	bne	r20,zero,804e88 <__sfvwrite_r+0x2d8>
  804ee8:	e009883a 	mov	r4,fp
  804eec:	900b883a 	mov	r5,r18
  804ef0:	080424c0 	call	80424c <_fflush_r>
  804ef4:	103fc31e 	bne	r2,zero,804e04 <__sfvwrite_r+0x254>
  804ef8:	d8000015 	stw	zero,0(sp)
  804efc:	003fe206 	br	804e88 <__sfvwrite_r+0x2d8>
  804f00:	91000017 	ldw	r4,0(r18)
  804f04:	90800417 	ldw	r2,16(r18)
  804f08:	1100022e 	bgeu	r2,r4,804f14 <__sfvwrite_r+0x364>
  804f0c:	8023883a 	mov	r17,r16
  804f10:	85003136 	bltu	r16,r20,804fd8 <__sfvwrite_r+0x428>
  804f14:	91c00517 	ldw	r7,20(r18)
  804f18:	a1c01836 	bltu	r20,r7,804f7c <__sfvwrite_r+0x3cc>
  804f1c:	90c00917 	ldw	r3,36(r18)
  804f20:	91400717 	ldw	r5,28(r18)
  804f24:	e009883a 	mov	r4,fp
  804f28:	b80d883a 	mov	r6,r23
  804f2c:	183ee83a 	callr	r3
  804f30:	1021883a 	mov	r16,r2
  804f34:	00bfb30e 	bge	zero,r2,804e04 <__sfvwrite_r+0x254>
  804f38:	1023883a 	mov	r17,r2
  804f3c:	1027883a 	mov	r19,r2
  804f40:	003f9b06 	br	804db0 <__sfvwrite_r+0x200>
  804f44:	b80b883a 	mov	r5,r23
  804f48:	800d883a 	mov	r6,r16
  804f4c:	0805ce80 	call	805ce8 <memmove>
  804f50:	90c00217 	ldw	r3,8(r18)
  804f54:	90800017 	ldw	r2,0(r18)
  804f58:	8023883a 	mov	r17,r16
  804f5c:	1c07c83a 	sub	r3,r3,r16
  804f60:	1405883a 	add	r2,r2,r16
  804f64:	90c00215 	stw	r3,8(r18)
  804f68:	90800015 	stw	r2,0(r18)
  804f6c:	003fc406 	br	804e80 <__sfvwrite_r+0x2d0>
  804f70:	a00d883a 	mov	r6,r20
  804f74:	a021883a 	mov	r16,r20
  804f78:	003f8106 	br	804d80 <__sfvwrite_r+0x1d0>
  804f7c:	b80b883a 	mov	r5,r23
  804f80:	a00d883a 	mov	r6,r20
  804f84:	0805ce80 	call	805ce8 <memmove>
  804f88:	90c00217 	ldw	r3,8(r18)
  804f8c:	90800017 	ldw	r2,0(r18)
  804f90:	a021883a 	mov	r16,r20
  804f94:	1d07c83a 	sub	r3,r3,r20
  804f98:	1505883a 	add	r2,r2,r20
  804f9c:	a023883a 	mov	r17,r20
  804fa0:	a027883a 	mov	r19,r20
  804fa4:	90c00215 	stw	r3,8(r18)
  804fa8:	90800015 	stw	r2,0(r18)
  804fac:	003f8006 	br	804db0 <__sfvwrite_r+0x200>
  804fb0:	b809883a 	mov	r4,r23
  804fb4:	01400284 	movi	r5,10
  804fb8:	980d883a 	mov	r6,r19
  804fbc:	0805b640 	call	805b64 <memchr>
  804fc0:	10001726 	beq	r2,zero,805020 <__sfvwrite_r+0x470>
  804fc4:	15c5c83a 	sub	r2,r2,r23
  804fc8:	15000044 	addi	r20,r2,1
  804fcc:	00800044 	movi	r2,1
  804fd0:	d8800015 	stw	r2,0(sp)
  804fd4:	003f9806 	br	804e38 <__sfvwrite_r+0x288>
  804fd8:	b80b883a 	mov	r5,r23
  804fdc:	800d883a 	mov	r6,r16
  804fe0:	0805ce80 	call	805ce8 <memmove>
  804fe4:	90c00017 	ldw	r3,0(r18)
  804fe8:	e009883a 	mov	r4,fp
  804fec:	900b883a 	mov	r5,r18
  804ff0:	1c07883a 	add	r3,r3,r16
  804ff4:	90c00015 	stw	r3,0(r18)
  804ff8:	8027883a 	mov	r19,r16
  804ffc:	080424c0 	call	80424c <_fflush_r>
  805000:	103f6b26 	beq	r2,zero,804db0 <__sfvwrite_r+0x200>
  805004:	003f7f06 	br	804e04 <__sfvwrite_r+0x254>
  805008:	400b883a 	mov	r5,r8
  80500c:	e009883a 	mov	r4,fp
  805010:	0806e540 	call	806e54 <_realloc_r>
  805014:	103f7626 	beq	r2,zero,804df0 <__sfvwrite_r+0x240>
  805018:	1023883a 	mov	r17,r2
  80501c:	003f5006 	br	804d60 <__sfvwrite_r+0x1b0>
  805020:	00c00044 	movi	r3,1
  805024:	9d000044 	addi	r20,r19,1
  805028:	d8c00015 	stw	r3,0(sp)
  80502c:	003f8206 	br	804e38 <__sfvwrite_r+0x288>
  805030:	9080030b 	ldhu	r2,12(r18)
  805034:	00c00244 	movi	r3,9
  805038:	013fffc4 	movi	r4,-1
  80503c:	10801014 	ori	r2,r2,64
  805040:	9080030d 	sth	r2,12(r18)
  805044:	e0c00015 	stw	r3,0(fp)
  805048:	003f0606 	br	804c64 <__sfvwrite_r+0xb4>

0080504c <_fwalk_reent>:
  80504c:	defff704 	addi	sp,sp,-36
  805050:	dcc00315 	stw	r19,12(sp)
  805054:	24c0b804 	addi	r19,r4,736
  805058:	dd800615 	stw	r22,24(sp)
  80505c:	dd400515 	stw	r21,20(sp)
  805060:	dfc00815 	stw	ra,32(sp)
  805064:	ddc00715 	stw	r23,28(sp)
  805068:	dd000415 	stw	r20,16(sp)
  80506c:	dc800215 	stw	r18,8(sp)
  805070:	dc400115 	stw	r17,4(sp)
  805074:	dc000015 	stw	r16,0(sp)
  805078:	202b883a 	mov	r21,r4
  80507c:	282d883a 	mov	r22,r5
  805080:	08044d40 	call	8044d4 <__sfp_lock_acquire>
  805084:	98002126 	beq	r19,zero,80510c <_fwalk_reent+0xc0>
  805088:	002f883a 	mov	r23,zero
  80508c:	9c800117 	ldw	r18,4(r19)
  805090:	9c000217 	ldw	r16,8(r19)
  805094:	90bfffc4 	addi	r2,r18,-1
  805098:	10000d16 	blt	r2,zero,8050d0 <_fwalk_reent+0x84>
  80509c:	0023883a 	mov	r17,zero
  8050a0:	053fffc4 	movi	r20,-1
  8050a4:	8080030f 	ldh	r2,12(r16)
  8050a8:	8c400044 	addi	r17,r17,1
  8050ac:	10000626 	beq	r2,zero,8050c8 <_fwalk_reent+0x7c>
  8050b0:	8080038f 	ldh	r2,14(r16)
  8050b4:	800b883a 	mov	r5,r16
  8050b8:	a809883a 	mov	r4,r21
  8050bc:	15000226 	beq	r2,r20,8050c8 <_fwalk_reent+0x7c>
  8050c0:	b03ee83a 	callr	r22
  8050c4:	b8aeb03a 	or	r23,r23,r2
  8050c8:	84001704 	addi	r16,r16,92
  8050cc:	947ff51e 	bne	r18,r17,8050a4 <_fwalk_reent+0x58>
  8050d0:	9cc00017 	ldw	r19,0(r19)
  8050d4:	983fed1e 	bne	r19,zero,80508c <_fwalk_reent+0x40>
  8050d8:	08044d80 	call	8044d8 <__sfp_lock_release>
  8050dc:	b805883a 	mov	r2,r23
  8050e0:	dfc00817 	ldw	ra,32(sp)
  8050e4:	ddc00717 	ldw	r23,28(sp)
  8050e8:	dd800617 	ldw	r22,24(sp)
  8050ec:	dd400517 	ldw	r21,20(sp)
  8050f0:	dd000417 	ldw	r20,16(sp)
  8050f4:	dcc00317 	ldw	r19,12(sp)
  8050f8:	dc800217 	ldw	r18,8(sp)
  8050fc:	dc400117 	ldw	r17,4(sp)
  805100:	dc000017 	ldw	r16,0(sp)
  805104:	dec00904 	addi	sp,sp,36
  805108:	f800283a 	ret
  80510c:	002f883a 	mov	r23,zero
  805110:	003ff106 	br	8050d8 <_fwalk_reent+0x8c>

00805114 <_fwalk>:
  805114:	defff804 	addi	sp,sp,-32
  805118:	dcc00315 	stw	r19,12(sp)
  80511c:	24c0b804 	addi	r19,r4,736
  805120:	dd400515 	stw	r21,20(sp)
  805124:	dfc00715 	stw	ra,28(sp)
  805128:	dd800615 	stw	r22,24(sp)
  80512c:	dd000415 	stw	r20,16(sp)
  805130:	dc800215 	stw	r18,8(sp)
  805134:	dc400115 	stw	r17,4(sp)
  805138:	dc000015 	stw	r16,0(sp)
  80513c:	282b883a 	mov	r21,r5
  805140:	08044d40 	call	8044d4 <__sfp_lock_acquire>
  805144:	98001f26 	beq	r19,zero,8051c4 <_fwalk+0xb0>
  805148:	002d883a 	mov	r22,zero
  80514c:	9c800117 	ldw	r18,4(r19)
  805150:	9c000217 	ldw	r16,8(r19)
  805154:	90bfffc4 	addi	r2,r18,-1
  805158:	10000c16 	blt	r2,zero,80518c <_fwalk+0x78>
  80515c:	0023883a 	mov	r17,zero
  805160:	053fffc4 	movi	r20,-1
  805164:	8080030f 	ldh	r2,12(r16)
  805168:	8c400044 	addi	r17,r17,1
  80516c:	10000526 	beq	r2,zero,805184 <_fwalk+0x70>
  805170:	8080038f 	ldh	r2,14(r16)
  805174:	8009883a 	mov	r4,r16
  805178:	15000226 	beq	r2,r20,805184 <_fwalk+0x70>
  80517c:	a83ee83a 	callr	r21
  805180:	b0acb03a 	or	r22,r22,r2
  805184:	84001704 	addi	r16,r16,92
  805188:	947ff61e 	bne	r18,r17,805164 <_fwalk+0x50>
  80518c:	9cc00017 	ldw	r19,0(r19)
  805190:	983fee1e 	bne	r19,zero,80514c <_fwalk+0x38>
  805194:	08044d80 	call	8044d8 <__sfp_lock_release>
  805198:	b005883a 	mov	r2,r22
  80519c:	dfc00717 	ldw	ra,28(sp)
  8051a0:	dd800617 	ldw	r22,24(sp)
  8051a4:	dd400517 	ldw	r21,20(sp)
  8051a8:	dd000417 	ldw	r20,16(sp)
  8051ac:	dcc00317 	ldw	r19,12(sp)
  8051b0:	dc800217 	ldw	r18,8(sp)
  8051b4:	dc400117 	ldw	r17,4(sp)
  8051b8:	dc000017 	ldw	r16,0(sp)
  8051bc:	dec00804 	addi	sp,sp,32
  8051c0:	f800283a 	ret
  8051c4:	002d883a 	mov	r22,zero
  8051c8:	003ff206 	br	805194 <_fwalk+0x80>

008051cc <__locale_charset>:
  8051cc:	d0a00317 	ldw	r2,-32756(gp)
  8051d0:	f800283a 	ret

008051d4 <_localeconv_r>:
  8051d4:	008020b4 	movhi	r2,130
  8051d8:	10ac2a04 	addi	r2,r2,-20312
  8051dc:	f800283a 	ret

008051e0 <localeconv>:
  8051e0:	008020b4 	movhi	r2,130
  8051e4:	10b3da04 	addi	r2,r2,-12440
  8051e8:	11000017 	ldw	r4,0(r2)
  8051ec:	08051d41 	jmpi	8051d4 <_localeconv_r>

008051f0 <_setlocale_r>:
  8051f0:	defffc04 	addi	sp,sp,-16
  8051f4:	00c020b4 	movhi	r3,130
  8051f8:	18ec2504 	addi	r3,r3,-20332
  8051fc:	dc800215 	stw	r18,8(sp)
  805200:	dc400115 	stw	r17,4(sp)
  805204:	dc000015 	stw	r16,0(sp)
  805208:	2023883a 	mov	r17,r4
  80520c:	2825883a 	mov	r18,r5
  805210:	dfc00315 	stw	ra,12(sp)
  805214:	3021883a 	mov	r16,r6
  805218:	3009883a 	mov	r4,r6
  80521c:	180b883a 	mov	r5,r3
  805220:	30000926 	beq	r6,zero,805248 <_setlocale_r+0x58>
  805224:	08076740 	call	807674 <strcmp>
  805228:	8009883a 	mov	r4,r16
  80522c:	014020b4 	movhi	r5,130
  805230:	296c1004 	addi	r5,r5,-20416
  805234:	10000b1e 	bne	r2,zero,805264 <_setlocale_r+0x74>
  805238:	8c000d15 	stw	r16,52(r17)
  80523c:	8c800c15 	stw	r18,48(r17)
  805240:	00c020b4 	movhi	r3,130
  805244:	18ec2504 	addi	r3,r3,-20332
  805248:	1805883a 	mov	r2,r3
  80524c:	dfc00317 	ldw	ra,12(sp)
  805250:	dc800217 	ldw	r18,8(sp)
  805254:	dc400117 	ldw	r17,4(sp)
  805258:	dc000017 	ldw	r16,0(sp)
  80525c:	dec00404 	addi	sp,sp,16
  805260:	f800283a 	ret
  805264:	08076740 	call	807674 <strcmp>
  805268:	0007883a 	mov	r3,zero
  80526c:	103ff226 	beq	r2,zero,805238 <_setlocale_r+0x48>
  805270:	003ff506 	br	805248 <_setlocale_r+0x58>

00805274 <setlocale>:
  805274:	018020b4 	movhi	r6,130
  805278:	31b3da04 	addi	r6,r6,-12440
  80527c:	2007883a 	mov	r3,r4
  805280:	31000017 	ldw	r4,0(r6)
  805284:	280d883a 	mov	r6,r5
  805288:	180b883a 	mov	r5,r3
  80528c:	08051f01 	jmpi	8051f0 <_setlocale_r>

00805290 <__smakebuf_r>:
  805290:	2880030b 	ldhu	r2,12(r5)
  805294:	deffed04 	addi	sp,sp,-76
  805298:	dc401015 	stw	r17,64(sp)
  80529c:	1080008c 	andi	r2,r2,2
  8052a0:	dc000f15 	stw	r16,60(sp)
  8052a4:	dfc01215 	stw	ra,72(sp)
  8052a8:	dc801115 	stw	r18,68(sp)
  8052ac:	2821883a 	mov	r16,r5
  8052b0:	2023883a 	mov	r17,r4
  8052b4:	10000b26 	beq	r2,zero,8052e4 <__smakebuf_r+0x54>
  8052b8:	28c010c4 	addi	r3,r5,67
  8052bc:	00800044 	movi	r2,1
  8052c0:	28800515 	stw	r2,20(r5)
  8052c4:	28c00415 	stw	r3,16(r5)
  8052c8:	28c00015 	stw	r3,0(r5)
  8052cc:	dfc01217 	ldw	ra,72(sp)
  8052d0:	dc801117 	ldw	r18,68(sp)
  8052d4:	dc401017 	ldw	r17,64(sp)
  8052d8:	dc000f17 	ldw	r16,60(sp)
  8052dc:	dec01304 	addi	sp,sp,76
  8052e0:	f800283a 	ret
  8052e4:	2940038f 	ldh	r5,14(r5)
  8052e8:	28002116 	blt	r5,zero,805370 <__smakebuf_r+0xe0>
  8052ec:	d80d883a 	mov	r6,sp
  8052f0:	0807a040 	call	807a04 <_fstat_r>
  8052f4:	10001e16 	blt	r2,zero,805370 <__smakebuf_r+0xe0>
  8052f8:	d8800117 	ldw	r2,4(sp)
  8052fc:	00e00014 	movui	r3,32768
  805300:	113c000c 	andi	r4,r2,61440
  805304:	20c03126 	beq	r4,r3,8053cc <__smakebuf_r+0x13c>
  805308:	8080030b 	ldhu	r2,12(r16)
  80530c:	00c80004 	movi	r3,8192
  805310:	10820014 	ori	r2,r2,2048
  805314:	8080030d 	sth	r2,12(r16)
  805318:	20c01e26 	beq	r4,r3,805394 <__smakebuf_r+0x104>
  80531c:	04810004 	movi	r18,1024
  805320:	8809883a 	mov	r4,r17
  805324:	900b883a 	mov	r5,r18
  805328:	08054240 	call	805424 <_malloc_r>
  80532c:	1009883a 	mov	r4,r2
  805330:	10003126 	beq	r2,zero,8053f8 <__smakebuf_r+0x168>
  805334:	80c0030b 	ldhu	r3,12(r16)
  805338:	00802034 	movhi	r2,128
  80533c:	10917204 	addi	r2,r2,17864
  805340:	88800f15 	stw	r2,60(r17)
  805344:	18c02014 	ori	r3,r3,128
  805348:	84800515 	stw	r18,20(r16)
  80534c:	80c0030d 	sth	r3,12(r16)
  805350:	81000415 	stw	r4,16(r16)
  805354:	81000015 	stw	r4,0(r16)
  805358:	dfc01217 	ldw	ra,72(sp)
  80535c:	dc801117 	ldw	r18,68(sp)
  805360:	dc401017 	ldw	r17,64(sp)
  805364:	dc000f17 	ldw	r16,60(sp)
  805368:	dec01304 	addi	sp,sp,76
  80536c:	f800283a 	ret
  805370:	80c0030b 	ldhu	r3,12(r16)
  805374:	1880200c 	andi	r2,r3,128
  805378:	10000426 	beq	r2,zero,80538c <__smakebuf_r+0xfc>
  80537c:	04801004 	movi	r18,64
  805380:	18820014 	ori	r2,r3,2048
  805384:	8080030d 	sth	r2,12(r16)
  805388:	003fe506 	br	805320 <__smakebuf_r+0x90>
  80538c:	04810004 	movi	r18,1024
  805390:	003ffb06 	br	805380 <__smakebuf_r+0xf0>
  805394:	8140038f 	ldh	r5,14(r16)
  805398:	8809883a 	mov	r4,r17
  80539c:	0807a780 	call	807a78 <_isatty_r>
  8053a0:	103fde26 	beq	r2,zero,80531c <__smakebuf_r+0x8c>
  8053a4:	8080030b 	ldhu	r2,12(r16)
  8053a8:	80c010c4 	addi	r3,r16,67
  8053ac:	04810004 	movi	r18,1024
  8053b0:	10800054 	ori	r2,r2,1
  8053b4:	8080030d 	sth	r2,12(r16)
  8053b8:	00800044 	movi	r2,1
  8053bc:	80c00415 	stw	r3,16(r16)
  8053c0:	80800515 	stw	r2,20(r16)
  8053c4:	80c00015 	stw	r3,0(r16)
  8053c8:	003fd506 	br	805320 <__smakebuf_r+0x90>
  8053cc:	80c00a17 	ldw	r3,40(r16)
  8053d0:	00802034 	movhi	r2,128
  8053d4:	109d4c04 	addi	r2,r2,30000
  8053d8:	18bfcb1e 	bne	r3,r2,805308 <__smakebuf_r+0x78>
  8053dc:	8080030b 	ldhu	r2,12(r16)
  8053e0:	00c10004 	movi	r3,1024
  8053e4:	1825883a 	mov	r18,r3
  8053e8:	10c4b03a 	or	r2,r2,r3
  8053ec:	8080030d 	sth	r2,12(r16)
  8053f0:	80c01315 	stw	r3,76(r16)
  8053f4:	003fca06 	br	805320 <__smakebuf_r+0x90>
  8053f8:	8100030b 	ldhu	r4,12(r16)
  8053fc:	2080800c 	andi	r2,r4,512
  805400:	103fb21e 	bne	r2,zero,8052cc <__smakebuf_r+0x3c>
  805404:	80c010c4 	addi	r3,r16,67
  805408:	21000094 	ori	r4,r4,2
  80540c:	00800044 	movi	r2,1
  805410:	80800515 	stw	r2,20(r16)
  805414:	8100030d 	sth	r4,12(r16)
  805418:	80c00415 	stw	r3,16(r16)
  80541c:	80c00015 	stw	r3,0(r16)
  805420:	003faa06 	br	8052cc <__smakebuf_r+0x3c>

00805424 <_malloc_r>:
  805424:	defff604 	addi	sp,sp,-40
  805428:	28c002c4 	addi	r3,r5,11
  80542c:	00800584 	movi	r2,22
  805430:	dc800215 	stw	r18,8(sp)
  805434:	dfc00915 	stw	ra,36(sp)
  805438:	df000815 	stw	fp,32(sp)
  80543c:	ddc00715 	stw	r23,28(sp)
  805440:	dd800615 	stw	r22,24(sp)
  805444:	dd400515 	stw	r21,20(sp)
  805448:	dd000415 	stw	r20,16(sp)
  80544c:	dcc00315 	stw	r19,12(sp)
  805450:	dc400115 	stw	r17,4(sp)
  805454:	dc000015 	stw	r16,0(sp)
  805458:	2025883a 	mov	r18,r4
  80545c:	10c01236 	bltu	r2,r3,8054a8 <_malloc_r+0x84>
  805460:	04400404 	movi	r17,16
  805464:	8940142e 	bgeu	r17,r5,8054b8 <_malloc_r+0x94>
  805468:	00800304 	movi	r2,12
  80546c:	0007883a 	mov	r3,zero
  805470:	90800015 	stw	r2,0(r18)
  805474:	1805883a 	mov	r2,r3
  805478:	dfc00917 	ldw	ra,36(sp)
  80547c:	df000817 	ldw	fp,32(sp)
  805480:	ddc00717 	ldw	r23,28(sp)
  805484:	dd800617 	ldw	r22,24(sp)
  805488:	dd400517 	ldw	r21,20(sp)
  80548c:	dd000417 	ldw	r20,16(sp)
  805490:	dcc00317 	ldw	r19,12(sp)
  805494:	dc800217 	ldw	r18,8(sp)
  805498:	dc400117 	ldw	r17,4(sp)
  80549c:	dc000017 	ldw	r16,0(sp)
  8054a0:	dec00a04 	addi	sp,sp,40
  8054a4:	f800283a 	ret
  8054a8:	00bffe04 	movi	r2,-8
  8054ac:	18a2703a 	and	r17,r3,r2
  8054b0:	883fed16 	blt	r17,zero,805468 <_malloc_r+0x44>
  8054b4:	897fec36 	bltu	r17,r5,805468 <_malloc_r+0x44>
  8054b8:	9009883a 	mov	r4,r18
  8054bc:	080b0d80 	call	80b0d8 <__malloc_lock>
  8054c0:	00807dc4 	movi	r2,503
  8054c4:	14402b2e 	bgeu	r2,r17,805574 <_malloc_r+0x150>
  8054c8:	8806d27a 	srli	r3,r17,9
  8054cc:	18003f1e 	bne	r3,zero,8055cc <_malloc_r+0x1a8>
  8054d0:	880cd0fa 	srli	r6,r17,3
  8054d4:	300490fa 	slli	r2,r6,3
  8054d8:	02c020b4 	movhi	r11,130
  8054dc:	5aee3204 	addi	r11,r11,-18232
  8054e0:	12cb883a 	add	r5,r2,r11
  8054e4:	2c000317 	ldw	r16,12(r5)
  8054e8:	580f883a 	mov	r7,r11
  8054ec:	2c00041e 	bne	r5,r16,805500 <_malloc_r+0xdc>
  8054f0:	00000a06 	br	80551c <_malloc_r+0xf8>
  8054f4:	1800860e 	bge	r3,zero,805710 <_malloc_r+0x2ec>
  8054f8:	84000317 	ldw	r16,12(r16)
  8054fc:	2c000726 	beq	r5,r16,80551c <_malloc_r+0xf8>
  805500:	80800117 	ldw	r2,4(r16)
  805504:	00ffff04 	movi	r3,-4
  805508:	10c8703a 	and	r4,r2,r3
  80550c:	2447c83a 	sub	r3,r4,r17
  805510:	008003c4 	movi	r2,15
  805514:	10fff70e 	bge	r2,r3,8054f4 <_malloc_r+0xd0>
  805518:	31bfffc4 	addi	r6,r6,-1
  80551c:	32400044 	addi	r9,r6,1
  805520:	028020b4 	movhi	r10,130
  805524:	52ae3404 	addi	r10,r10,-18224
  805528:	54000217 	ldw	r16,8(r10)
  80552c:	8280a026 	beq	r16,r10,8057b0 <_malloc_r+0x38c>
  805530:	80800117 	ldw	r2,4(r16)
  805534:	00ffff04 	movi	r3,-4
  805538:	10ca703a 	and	r5,r2,r3
  80553c:	2c4dc83a 	sub	r6,r5,r17
  805540:	008003c4 	movi	r2,15
  805544:	11808316 	blt	r2,r6,805754 <_malloc_r+0x330>
  805548:	52800315 	stw	r10,12(r10)
  80554c:	52800215 	stw	r10,8(r10)
  805550:	30002916 	blt	r6,zero,8055f8 <_malloc_r+0x1d4>
  805554:	8147883a 	add	r3,r16,r5
  805558:	18800117 	ldw	r2,4(r3)
  80555c:	9009883a 	mov	r4,r18
  805560:	10800054 	ori	r2,r2,1
  805564:	18800115 	stw	r2,4(r3)
  805568:	080b1e00 	call	80b1e0 <__malloc_unlock>
  80556c:	80c00204 	addi	r3,r16,8
  805570:	003fc006 	br	805474 <_malloc_r+0x50>
  805574:	02c020b4 	movhi	r11,130
  805578:	5aee3204 	addi	r11,r11,-18232
  80557c:	8ac5883a 	add	r2,r17,r11
  805580:	14000317 	ldw	r16,12(r2)
  805584:	580f883a 	mov	r7,r11
  805588:	8806d0fa 	srli	r3,r17,3
  80558c:	14006c26 	beq	r2,r16,805740 <_malloc_r+0x31c>
  805590:	80c00117 	ldw	r3,4(r16)
  805594:	00bfff04 	movi	r2,-4
  805598:	81800317 	ldw	r6,12(r16)
  80559c:	1886703a 	and	r3,r3,r2
  8055a0:	80c7883a 	add	r3,r16,r3
  8055a4:	18800117 	ldw	r2,4(r3)
  8055a8:	81400217 	ldw	r5,8(r16)
  8055ac:	9009883a 	mov	r4,r18
  8055b0:	10800054 	ori	r2,r2,1
  8055b4:	18800115 	stw	r2,4(r3)
  8055b8:	31400215 	stw	r5,8(r6)
  8055bc:	29800315 	stw	r6,12(r5)
  8055c0:	080b1e00 	call	80b1e0 <__malloc_unlock>
  8055c4:	80c00204 	addi	r3,r16,8
  8055c8:	003faa06 	br	805474 <_malloc_r+0x50>
  8055cc:	00800104 	movi	r2,4
  8055d0:	10c0052e 	bgeu	r2,r3,8055e8 <_malloc_r+0x1c4>
  8055d4:	00800504 	movi	r2,20
  8055d8:	10c07836 	bltu	r2,r3,8057bc <_malloc_r+0x398>
  8055dc:	198016c4 	addi	r6,r3,91
  8055e0:	300490fa 	slli	r2,r6,3
  8055e4:	003fbc06 	br	8054d8 <_malloc_r+0xb4>
  8055e8:	8804d1ba 	srli	r2,r17,6
  8055ec:	11800e04 	addi	r6,r2,56
  8055f0:	300490fa 	slli	r2,r6,3
  8055f4:	003fb806 	br	8054d8 <_malloc_r+0xb4>
  8055f8:	00807fc4 	movi	r2,511
  8055fc:	1140bb36 	bltu	r2,r5,8058ec <_malloc_r+0x4c8>
  805600:	2806d0fa 	srli	r3,r5,3
  805604:	573ffe04 	addi	fp,r10,-8
  805608:	00800044 	movi	r2,1
  80560c:	180890fa 	slli	r4,r3,3
  805610:	1807d0ba 	srai	r3,r3,2
  805614:	e1c00117 	ldw	r7,4(fp)
  805618:	5909883a 	add	r4,r11,r4
  80561c:	21400217 	ldw	r5,8(r4)
  805620:	10c4983a 	sll	r2,r2,r3
  805624:	81000315 	stw	r4,12(r16)
  805628:	81400215 	stw	r5,8(r16)
  80562c:	388eb03a 	or	r7,r7,r2
  805630:	2c000315 	stw	r16,12(r5)
  805634:	24000215 	stw	r16,8(r4)
  805638:	e1c00115 	stw	r7,4(fp)
  80563c:	4807883a 	mov	r3,r9
  805640:	4800cd16 	blt	r9,zero,805978 <_malloc_r+0x554>
  805644:	1807d0ba 	srai	r3,r3,2
  805648:	00800044 	movi	r2,1
  80564c:	10c8983a 	sll	r4,r2,r3
  805650:	39004436 	bltu	r7,r4,805764 <_malloc_r+0x340>
  805654:	21c4703a 	and	r2,r4,r7
  805658:	10000a1e 	bne	r2,zero,805684 <_malloc_r+0x260>
  80565c:	2109883a 	add	r4,r4,r4
  805660:	00bfff04 	movi	r2,-4
  805664:	4884703a 	and	r2,r9,r2
  805668:	3906703a 	and	r3,r7,r4
  80566c:	12400104 	addi	r9,r2,4
  805670:	1800041e 	bne	r3,zero,805684 <_malloc_r+0x260>
  805674:	2109883a 	add	r4,r4,r4
  805678:	3904703a 	and	r2,r7,r4
  80567c:	4a400104 	addi	r9,r9,4
  805680:	103ffc26 	beq	r2,zero,805674 <_malloc_r+0x250>
  805684:	480490fa 	slli	r2,r9,3
  805688:	4819883a 	mov	r12,r9
  80568c:	023fff04 	movi	r8,-4
  805690:	589b883a 	add	r13,r11,r2
  805694:	6807883a 	mov	r3,r13
  805698:	014003c4 	movi	r5,15
  80569c:	1c000317 	ldw	r16,12(r3)
  8056a0:	1c00041e 	bne	r3,r16,8056b4 <_malloc_r+0x290>
  8056a4:	0000a706 	br	805944 <_malloc_r+0x520>
  8056a8:	3000ab0e 	bge	r6,zero,805958 <_malloc_r+0x534>
  8056ac:	84000317 	ldw	r16,12(r16)
  8056b0:	1c00a426 	beq	r3,r16,805944 <_malloc_r+0x520>
  8056b4:	80800117 	ldw	r2,4(r16)
  8056b8:	1204703a 	and	r2,r2,r8
  8056bc:	144dc83a 	sub	r6,r2,r17
  8056c0:	29bff90e 	bge	r5,r6,8056a8 <_malloc_r+0x284>
  8056c4:	81000317 	ldw	r4,12(r16)
  8056c8:	80c00217 	ldw	r3,8(r16)
  8056cc:	89400054 	ori	r5,r17,1
  8056d0:	8445883a 	add	r2,r16,r17
  8056d4:	20c00215 	stw	r3,8(r4)
  8056d8:	19000315 	stw	r4,12(r3)
  8056dc:	81400115 	stw	r5,4(r16)
  8056e0:	1187883a 	add	r3,r2,r6
  8056e4:	31000054 	ori	r4,r6,1
  8056e8:	50800315 	stw	r2,12(r10)
  8056ec:	50800215 	stw	r2,8(r10)
  8056f0:	19800015 	stw	r6,0(r3)
  8056f4:	11000115 	stw	r4,4(r2)
  8056f8:	12800215 	stw	r10,8(r2)
  8056fc:	12800315 	stw	r10,12(r2)
  805700:	9009883a 	mov	r4,r18
  805704:	080b1e00 	call	80b1e0 <__malloc_unlock>
  805708:	80c00204 	addi	r3,r16,8
  80570c:	003f5906 	br	805474 <_malloc_r+0x50>
  805710:	8109883a 	add	r4,r16,r4
  805714:	20800117 	ldw	r2,4(r4)
  805718:	80c00217 	ldw	r3,8(r16)
  80571c:	81400317 	ldw	r5,12(r16)
  805720:	10800054 	ori	r2,r2,1
  805724:	20800115 	stw	r2,4(r4)
  805728:	28c00215 	stw	r3,8(r5)
  80572c:	19400315 	stw	r5,12(r3)
  805730:	9009883a 	mov	r4,r18
  805734:	080b1e00 	call	80b1e0 <__malloc_unlock>
  805738:	80c00204 	addi	r3,r16,8
  80573c:	003f4d06 	br	805474 <_malloc_r+0x50>
  805740:	80800204 	addi	r2,r16,8
  805744:	14000317 	ldw	r16,12(r2)
  805748:	143f911e 	bne	r2,r16,805590 <_malloc_r+0x16c>
  80574c:	1a400084 	addi	r9,r3,2
  805750:	003f7306 	br	805520 <_malloc_r+0xfc>
  805754:	88c00054 	ori	r3,r17,1
  805758:	8445883a 	add	r2,r16,r17
  80575c:	80c00115 	stw	r3,4(r16)
  805760:	003fdf06 	br	8056e0 <_malloc_r+0x2bc>
  805764:	e4000217 	ldw	r16,8(fp)
  805768:	00bfff04 	movi	r2,-4
  80576c:	80c00117 	ldw	r3,4(r16)
  805770:	802d883a 	mov	r22,r16
  805774:	18aa703a 	and	r21,r3,r2
  805778:	ac401636 	bltu	r21,r17,8057d4 <_malloc_r+0x3b0>
  80577c:	ac49c83a 	sub	r4,r21,r17
  805780:	008003c4 	movi	r2,15
  805784:	1100130e 	bge	r2,r4,8057d4 <_malloc_r+0x3b0>
  805788:	88800054 	ori	r2,r17,1
  80578c:	8447883a 	add	r3,r16,r17
  805790:	80800115 	stw	r2,4(r16)
  805794:	20800054 	ori	r2,r4,1
  805798:	18800115 	stw	r2,4(r3)
  80579c:	e0c00215 	stw	r3,8(fp)
  8057a0:	9009883a 	mov	r4,r18
  8057a4:	080b1e00 	call	80b1e0 <__malloc_unlock>
  8057a8:	80c00204 	addi	r3,r16,8
  8057ac:	003f3106 	br	805474 <_malloc_r+0x50>
  8057b0:	39c00117 	ldw	r7,4(r7)
  8057b4:	573ffe04 	addi	fp,r10,-8
  8057b8:	003fa006 	br	80563c <_malloc_r+0x218>
  8057bc:	00801504 	movi	r2,84
  8057c0:	10c06736 	bltu	r2,r3,805960 <_malloc_r+0x53c>
  8057c4:	8804d33a 	srli	r2,r17,12
  8057c8:	11801b84 	addi	r6,r2,110
  8057cc:	300490fa 	slli	r2,r6,3
  8057d0:	003f4106 	br	8054d8 <_malloc_r+0xb4>
  8057d4:	d0a71017 	ldw	r2,-25536(gp)
  8057d8:	d0e00517 	ldw	r3,-32748(gp)
  8057dc:	053fffc4 	movi	r20,-1
  8057e0:	10800404 	addi	r2,r2,16
  8057e4:	88a7883a 	add	r19,r17,r2
  8057e8:	1d000326 	beq	r3,r20,8057f8 <_malloc_r+0x3d4>
  8057ec:	98c3ffc4 	addi	r3,r19,4095
  8057f0:	00bc0004 	movi	r2,-4096
  8057f4:	18a6703a 	and	r19,r3,r2
  8057f8:	9009883a 	mov	r4,r18
  8057fc:	980b883a 	mov	r5,r19
  805800:	08074b80 	call	8074b8 <_sbrk_r>
  805804:	1009883a 	mov	r4,r2
  805808:	15000426 	beq	r2,r20,80581c <_malloc_r+0x3f8>
  80580c:	854b883a 	add	r5,r16,r21
  805810:	1029883a 	mov	r20,r2
  805814:	11405a2e 	bgeu	r2,r5,805980 <_malloc_r+0x55c>
  805818:	87000c26 	beq	r16,fp,80584c <_malloc_r+0x428>
  80581c:	e4000217 	ldw	r16,8(fp)
  805820:	80c00117 	ldw	r3,4(r16)
  805824:	00bfff04 	movi	r2,-4
  805828:	1884703a 	and	r2,r3,r2
  80582c:	14400336 	bltu	r2,r17,80583c <_malloc_r+0x418>
  805830:	1449c83a 	sub	r4,r2,r17
  805834:	008003c4 	movi	r2,15
  805838:	113fd316 	blt	r2,r4,805788 <_malloc_r+0x364>
  80583c:	9009883a 	mov	r4,r18
  805840:	080b1e00 	call	80b1e0 <__malloc_unlock>
  805844:	0007883a 	mov	r3,zero
  805848:	003f0a06 	br	805474 <_malloc_r+0x50>
  80584c:	05c020b4 	movhi	r23,130
  805850:	bdfb1a04 	addi	r23,r23,-5016
  805854:	b8800017 	ldw	r2,0(r23)
  805858:	988d883a 	add	r6,r19,r2
  80585c:	b9800015 	stw	r6,0(r23)
  805860:	d0e00517 	ldw	r3,-32748(gp)
  805864:	00bfffc4 	movi	r2,-1
  805868:	18808e26 	beq	r3,r2,805aa4 <_malloc_r+0x680>
  80586c:	2145c83a 	sub	r2,r4,r5
  805870:	3085883a 	add	r2,r6,r2
  805874:	b8800015 	stw	r2,0(r23)
  805878:	20c001cc 	andi	r3,r4,7
  80587c:	18005f1e 	bne	r3,zero,8059fc <_malloc_r+0x5d8>
  805880:	000b883a 	mov	r5,zero
  805884:	a4c5883a 	add	r2,r20,r19
  805888:	1083ffcc 	andi	r2,r2,4095
  80588c:	00c40004 	movi	r3,4096
  805890:	1887c83a 	sub	r3,r3,r2
  805894:	28e7883a 	add	r19,r5,r3
  805898:	9009883a 	mov	r4,r18
  80589c:	980b883a 	mov	r5,r19
  8058a0:	08074b80 	call	8074b8 <_sbrk_r>
  8058a4:	1007883a 	mov	r3,r2
  8058a8:	00bfffc4 	movi	r2,-1
  8058ac:	18807a26 	beq	r3,r2,805a98 <_malloc_r+0x674>
  8058b0:	1d05c83a 	sub	r2,r3,r20
  8058b4:	9885883a 	add	r2,r19,r2
  8058b8:	10c00054 	ori	r3,r2,1
  8058bc:	b8800017 	ldw	r2,0(r23)
  8058c0:	a021883a 	mov	r16,r20
  8058c4:	a0c00115 	stw	r3,4(r20)
  8058c8:	9885883a 	add	r2,r19,r2
  8058cc:	b8800015 	stw	r2,0(r23)
  8058d0:	e5000215 	stw	r20,8(fp)
  8058d4:	b7003626 	beq	r22,fp,8059b0 <_malloc_r+0x58c>
  8058d8:	018003c4 	movi	r6,15
  8058dc:	35404b36 	bltu	r6,r21,805a0c <_malloc_r+0x5e8>
  8058e0:	00800044 	movi	r2,1
  8058e4:	a0800115 	stw	r2,4(r20)
  8058e8:	003fcd06 	br	805820 <_malloc_r+0x3fc>
  8058ec:	2808d27a 	srli	r4,r5,9
  8058f0:	2000371e 	bne	r4,zero,8059d0 <_malloc_r+0x5ac>
  8058f4:	2808d0fa 	srli	r4,r5,3
  8058f8:	200690fa 	slli	r3,r4,3
  8058fc:	1ad1883a 	add	r8,r3,r11
  805900:	41800217 	ldw	r6,8(r8)
  805904:	41805b26 	beq	r8,r6,805a74 <_malloc_r+0x650>
  805908:	30800117 	ldw	r2,4(r6)
  80590c:	00ffff04 	movi	r3,-4
  805910:	10c4703a 	and	r2,r2,r3
  805914:	2880022e 	bgeu	r5,r2,805920 <_malloc_r+0x4fc>
  805918:	31800217 	ldw	r6,8(r6)
  80591c:	41bffa1e 	bne	r8,r6,805908 <_malloc_r+0x4e4>
  805920:	32000317 	ldw	r8,12(r6)
  805924:	39c00117 	ldw	r7,4(r7)
  805928:	82000315 	stw	r8,12(r16)
  80592c:	81800215 	stw	r6,8(r16)
  805930:	070020b4 	movhi	fp,130
  805934:	e72e3204 	addi	fp,fp,-18232
  805938:	34000315 	stw	r16,12(r6)
  80593c:	44000215 	stw	r16,8(r8)
  805940:	003f3e06 	br	80563c <_malloc_r+0x218>
  805944:	63000044 	addi	r12,r12,1
  805948:	608000cc 	andi	r2,r12,3
  80594c:	10005d26 	beq	r2,zero,805ac4 <_malloc_r+0x6a0>
  805950:	18c00204 	addi	r3,r3,8
  805954:	003f5106 	br	80569c <_malloc_r+0x278>
  805958:	8089883a 	add	r4,r16,r2
  80595c:	003f6d06 	br	805714 <_malloc_r+0x2f0>
  805960:	00805504 	movi	r2,340
  805964:	10c02036 	bltu	r2,r3,8059e8 <_malloc_r+0x5c4>
  805968:	8804d3fa 	srli	r2,r17,15
  80596c:	11801dc4 	addi	r6,r2,119
  805970:	300490fa 	slli	r2,r6,3
  805974:	003ed806 	br	8054d8 <_malloc_r+0xb4>
  805978:	48c000c4 	addi	r3,r9,3
  80597c:	003f3106 	br	805644 <_malloc_r+0x220>
  805980:	05c020b4 	movhi	r23,130
  805984:	bdfb1a04 	addi	r23,r23,-5016
  805988:	b8800017 	ldw	r2,0(r23)
  80598c:	988d883a 	add	r6,r19,r2
  805990:	b9800015 	stw	r6,0(r23)
  805994:	293fb21e 	bne	r5,r4,805860 <_malloc_r+0x43c>
  805998:	2083ffcc 	andi	r2,r4,4095
  80599c:	103fb01e 	bne	r2,zero,805860 <_malloc_r+0x43c>
  8059a0:	e4000217 	ldw	r16,8(fp)
  8059a4:	9d45883a 	add	r2,r19,r21
  8059a8:	10800054 	ori	r2,r2,1
  8059ac:	80800115 	stw	r2,4(r16)
  8059b0:	b8c00017 	ldw	r3,0(r23)
  8059b4:	d0a71117 	ldw	r2,-25532(gp)
  8059b8:	10c0012e 	bgeu	r2,r3,8059c0 <_malloc_r+0x59c>
  8059bc:	d0e71115 	stw	r3,-25532(gp)
  8059c0:	d0a71217 	ldw	r2,-25528(gp)
  8059c4:	10ff962e 	bgeu	r2,r3,805820 <_malloc_r+0x3fc>
  8059c8:	d0e71215 	stw	r3,-25528(gp)
  8059cc:	003f9406 	br	805820 <_malloc_r+0x3fc>
  8059d0:	00800104 	movi	r2,4
  8059d4:	11001e36 	bltu	r2,r4,805a50 <_malloc_r+0x62c>
  8059d8:	2804d1ba 	srli	r2,r5,6
  8059dc:	11000e04 	addi	r4,r2,56
  8059e0:	200690fa 	slli	r3,r4,3
  8059e4:	003fc506 	br	8058fc <_malloc_r+0x4d8>
  8059e8:	00815504 	movi	r2,1364
  8059ec:	10c01d2e 	bgeu	r2,r3,805a64 <_malloc_r+0x640>
  8059f0:	01801f84 	movi	r6,126
  8059f4:	0080fc04 	movi	r2,1008
  8059f8:	003eb706 	br	8054d8 <_malloc_r+0xb4>
  8059fc:	00800204 	movi	r2,8
  805a00:	10cbc83a 	sub	r5,r2,r3
  805a04:	2169883a 	add	r20,r4,r5
  805a08:	003f9e06 	br	805884 <_malloc_r+0x460>
  805a0c:	00bffe04 	movi	r2,-8
  805a10:	a93ffd04 	addi	r4,r21,-12
  805a14:	2088703a 	and	r4,r4,r2
  805a18:	b10b883a 	add	r5,r22,r4
  805a1c:	00c00144 	movi	r3,5
  805a20:	28c00215 	stw	r3,8(r5)
  805a24:	28c00115 	stw	r3,4(r5)
  805a28:	b0800117 	ldw	r2,4(r22)
  805a2c:	1080004c 	andi	r2,r2,1
  805a30:	2084b03a 	or	r2,r4,r2
  805a34:	b0800115 	stw	r2,4(r22)
  805a38:	313fdd2e 	bgeu	r6,r4,8059b0 <_malloc_r+0x58c>
  805a3c:	b1400204 	addi	r5,r22,8
  805a40:	9009883a 	mov	r4,r18
  805a44:	080489c0 	call	80489c <_free_r>
  805a48:	e4000217 	ldw	r16,8(fp)
  805a4c:	003fd806 	br	8059b0 <_malloc_r+0x58c>
  805a50:	00800504 	movi	r2,20
  805a54:	11001536 	bltu	r2,r4,805aac <_malloc_r+0x688>
  805a58:	210016c4 	addi	r4,r4,91
  805a5c:	200690fa 	slli	r3,r4,3
  805a60:	003fa606 	br	8058fc <_malloc_r+0x4d8>
  805a64:	8804d4ba 	srli	r2,r17,18
  805a68:	11801f04 	addi	r6,r2,124
  805a6c:	300490fa 	slli	r2,r6,3
  805a70:	003e9906 	br	8054d8 <_malloc_r+0xb4>
  805a74:	2009d0ba 	srai	r4,r4,2
  805a78:	014020b4 	movhi	r5,130
  805a7c:	296e3204 	addi	r5,r5,-18232
  805a80:	00c00044 	movi	r3,1
  805a84:	28800117 	ldw	r2,4(r5)
  805a88:	1906983a 	sll	r3,r3,r4
  805a8c:	10c4b03a 	or	r2,r2,r3
  805a90:	28800115 	stw	r2,4(r5)
  805a94:	003fa306 	br	805924 <_malloc_r+0x500>
  805a98:	0027883a 	mov	r19,zero
  805a9c:	00c00044 	movi	r3,1
  805aa0:	003f8606 	br	8058bc <_malloc_r+0x498>
  805aa4:	d1200515 	stw	r4,-32748(gp)
  805aa8:	003f7306 	br	805878 <_malloc_r+0x454>
  805aac:	00801504 	movi	r2,84
  805ab0:	11001936 	bltu	r2,r4,805b18 <_malloc_r+0x6f4>
  805ab4:	2804d33a 	srli	r2,r5,12
  805ab8:	11001b84 	addi	r4,r2,110
  805abc:	200690fa 	slli	r3,r4,3
  805ac0:	003f8e06 	br	8058fc <_malloc_r+0x4d8>
  805ac4:	480b883a 	mov	r5,r9
  805ac8:	6807883a 	mov	r3,r13
  805acc:	288000cc 	andi	r2,r5,3
  805ad0:	18fffe04 	addi	r3,r3,-8
  805ad4:	297fffc4 	addi	r5,r5,-1
  805ad8:	10001526 	beq	r2,zero,805b30 <_malloc_r+0x70c>
  805adc:	18800217 	ldw	r2,8(r3)
  805ae0:	10fffa26 	beq	r2,r3,805acc <_malloc_r+0x6a8>
  805ae4:	2109883a 	add	r4,r4,r4
  805ae8:	393f1e36 	bltu	r7,r4,805764 <_malloc_r+0x340>
  805aec:	203f1d26 	beq	r4,zero,805764 <_malloc_r+0x340>
  805af0:	21c4703a 	and	r2,r4,r7
  805af4:	10000226 	beq	r2,zero,805b00 <_malloc_r+0x6dc>
  805af8:	6013883a 	mov	r9,r12
  805afc:	003ee106 	br	805684 <_malloc_r+0x260>
  805b00:	2109883a 	add	r4,r4,r4
  805b04:	3904703a 	and	r2,r7,r4
  805b08:	63000104 	addi	r12,r12,4
  805b0c:	103ffc26 	beq	r2,zero,805b00 <_malloc_r+0x6dc>
  805b10:	6013883a 	mov	r9,r12
  805b14:	003edb06 	br	805684 <_malloc_r+0x260>
  805b18:	00805504 	movi	r2,340
  805b1c:	11000836 	bltu	r2,r4,805b40 <_malloc_r+0x71c>
  805b20:	2804d3fa 	srli	r2,r5,15
  805b24:	11001dc4 	addi	r4,r2,119
  805b28:	200690fa 	slli	r3,r4,3
  805b2c:	003f7306 	br	8058fc <_malloc_r+0x4d8>
  805b30:	0104303a 	nor	r2,zero,r4
  805b34:	388e703a 	and	r7,r7,r2
  805b38:	e1c00115 	stw	r7,4(fp)
  805b3c:	003fe906 	br	805ae4 <_malloc_r+0x6c0>
  805b40:	00815504 	movi	r2,1364
  805b44:	1100032e 	bgeu	r2,r4,805b54 <_malloc_r+0x730>
  805b48:	01001f84 	movi	r4,126
  805b4c:	00c0fc04 	movi	r3,1008
  805b50:	003f6a06 	br	8058fc <_malloc_r+0x4d8>
  805b54:	2804d4ba 	srli	r2,r5,18
  805b58:	11001f04 	addi	r4,r2,124
  805b5c:	200690fa 	slli	r3,r4,3
  805b60:	003f6606 	br	8058fc <_malloc_r+0x4d8>

00805b64 <memchr>:
  805b64:	008000c4 	movi	r2,3
  805b68:	29403fcc 	andi	r5,r5,255
  805b6c:	2007883a 	mov	r3,r4
  805b70:	1180022e 	bgeu	r2,r6,805b7c <memchr+0x18>
  805b74:	2084703a 	and	r2,r4,r2
  805b78:	10000b26 	beq	r2,zero,805ba8 <memchr+0x44>
  805b7c:	313fffc4 	addi	r4,r6,-1
  805b80:	3000051e 	bne	r6,zero,805b98 <memchr+0x34>
  805b84:	00002c06 	br	805c38 <memchr+0xd4>
  805b88:	213fffc4 	addi	r4,r4,-1
  805b8c:	00bfffc4 	movi	r2,-1
  805b90:	18c00044 	addi	r3,r3,1
  805b94:	20802826 	beq	r4,r2,805c38 <memchr+0xd4>
  805b98:	18800003 	ldbu	r2,0(r3)
  805b9c:	28bffa1e 	bne	r5,r2,805b88 <memchr+0x24>
  805ba0:	1805883a 	mov	r2,r3
  805ba4:	f800283a 	ret
  805ba8:	0011883a 	mov	r8,zero
  805bac:	0007883a 	mov	r3,zero
  805bb0:	01c00104 	movi	r7,4
  805bb4:	4004923a 	slli	r2,r8,8
  805bb8:	18c00044 	addi	r3,r3,1
  805bbc:	1151883a 	add	r8,r2,r5
  805bc0:	19fffc1e 	bne	r3,r7,805bb4 <memchr+0x50>
  805bc4:	02bfbff4 	movhi	r10,65279
  805bc8:	52bfbfc4 	addi	r10,r10,-257
  805bcc:	02602074 	movhi	r9,32897
  805bd0:	4a602004 	addi	r9,r9,-32640
  805bd4:	02c000c4 	movi	r11,3
  805bd8:	20800017 	ldw	r2,0(r4)
  805bdc:	31bfff04 	addi	r6,r6,-4
  805be0:	200f883a 	mov	r7,r4
  805be4:	1204f03a 	xor	r2,r2,r8
  805be8:	1287883a 	add	r3,r2,r10
  805bec:	1a46703a 	and	r3,r3,r9
  805bf0:	0084303a 	nor	r2,zero,r2
  805bf4:	10c4703a 	and	r2,r2,r3
  805bf8:	10000b26 	beq	r2,zero,805c28 <memchr+0xc4>
  805bfc:	20800003 	ldbu	r2,0(r4)
  805c00:	28800f26 	beq	r5,r2,805c40 <memchr+0xdc>
  805c04:	20800043 	ldbu	r2,1(r4)
  805c08:	21c00044 	addi	r7,r4,1
  805c0c:	28800c26 	beq	r5,r2,805c40 <memchr+0xdc>
  805c10:	20800083 	ldbu	r2,2(r4)
  805c14:	21c00084 	addi	r7,r4,2
  805c18:	28800926 	beq	r5,r2,805c40 <memchr+0xdc>
  805c1c:	208000c3 	ldbu	r2,3(r4)
  805c20:	21c000c4 	addi	r7,r4,3
  805c24:	28800626 	beq	r5,r2,805c40 <memchr+0xdc>
  805c28:	21000104 	addi	r4,r4,4
  805c2c:	59bfea36 	bltu	r11,r6,805bd8 <memchr+0x74>
  805c30:	2007883a 	mov	r3,r4
  805c34:	003fd106 	br	805b7c <memchr+0x18>
  805c38:	0005883a 	mov	r2,zero
  805c3c:	f800283a 	ret
  805c40:	3805883a 	mov	r2,r7
  805c44:	f800283a 	ret

00805c48 <memcpy>:
  805c48:	01c003c4 	movi	r7,15
  805c4c:	2007883a 	mov	r3,r4
  805c50:	3980032e 	bgeu	r7,r6,805c60 <memcpy+0x18>
  805c54:	2904b03a 	or	r2,r5,r4
  805c58:	108000cc 	andi	r2,r2,3
  805c5c:	10000926 	beq	r2,zero,805c84 <memcpy+0x3c>
  805c60:	30000626 	beq	r6,zero,805c7c <memcpy+0x34>
  805c64:	30cd883a 	add	r6,r6,r3
  805c68:	28800003 	ldbu	r2,0(r5)
  805c6c:	29400044 	addi	r5,r5,1
  805c70:	18800005 	stb	r2,0(r3)
  805c74:	18c00044 	addi	r3,r3,1
  805c78:	30fffb1e 	bne	r6,r3,805c68 <memcpy+0x20>
  805c7c:	2005883a 	mov	r2,r4
  805c80:	f800283a 	ret
  805c84:	3811883a 	mov	r8,r7
  805c88:	200f883a 	mov	r7,r4
  805c8c:	28c00017 	ldw	r3,0(r5)
  805c90:	31bffc04 	addi	r6,r6,-16
  805c94:	38c00015 	stw	r3,0(r7)
  805c98:	28800117 	ldw	r2,4(r5)
  805c9c:	38800115 	stw	r2,4(r7)
  805ca0:	28c00217 	ldw	r3,8(r5)
  805ca4:	38c00215 	stw	r3,8(r7)
  805ca8:	28800317 	ldw	r2,12(r5)
  805cac:	29400404 	addi	r5,r5,16
  805cb0:	38800315 	stw	r2,12(r7)
  805cb4:	39c00404 	addi	r7,r7,16
  805cb8:	41bff436 	bltu	r8,r6,805c8c <memcpy+0x44>
  805cbc:	008000c4 	movi	r2,3
  805cc0:	1180072e 	bgeu	r2,r6,805ce0 <memcpy+0x98>
  805cc4:	1007883a 	mov	r3,r2
  805cc8:	28800017 	ldw	r2,0(r5)
  805ccc:	31bfff04 	addi	r6,r6,-4
  805cd0:	29400104 	addi	r5,r5,4
  805cd4:	38800015 	stw	r2,0(r7)
  805cd8:	39c00104 	addi	r7,r7,4
  805cdc:	19bffa36 	bltu	r3,r6,805cc8 <memcpy+0x80>
  805ce0:	3807883a 	mov	r3,r7
  805ce4:	003fde06 	br	805c60 <memcpy+0x18>

00805ce8 <memmove>:
  805ce8:	2807883a 	mov	r3,r5
  805cec:	2011883a 	mov	r8,r4
  805cf0:	29000c2e 	bgeu	r5,r4,805d24 <memmove+0x3c>
  805cf4:	298f883a 	add	r7,r5,r6
  805cf8:	21c00a2e 	bgeu	r4,r7,805d24 <memmove+0x3c>
  805cfc:	30000726 	beq	r6,zero,805d1c <memmove+0x34>
  805d00:	2187883a 	add	r3,r4,r6
  805d04:	198dc83a 	sub	r6,r3,r6
  805d08:	39ffffc4 	addi	r7,r7,-1
  805d0c:	38800003 	ldbu	r2,0(r7)
  805d10:	18ffffc4 	addi	r3,r3,-1
  805d14:	18800005 	stb	r2,0(r3)
  805d18:	19bffb1e 	bne	r3,r6,805d08 <memmove+0x20>
  805d1c:	2005883a 	mov	r2,r4
  805d20:	f800283a 	ret
  805d24:	01c003c4 	movi	r7,15
  805d28:	39800a36 	bltu	r7,r6,805d54 <memmove+0x6c>
  805d2c:	303ffb26 	beq	r6,zero,805d1c <memmove+0x34>
  805d30:	400f883a 	mov	r7,r8
  805d34:	320d883a 	add	r6,r6,r8
  805d38:	28800003 	ldbu	r2,0(r5)
  805d3c:	29400044 	addi	r5,r5,1
  805d40:	38800005 	stb	r2,0(r7)
  805d44:	39c00044 	addi	r7,r7,1
  805d48:	39bffb1e 	bne	r7,r6,805d38 <memmove+0x50>
  805d4c:	2005883a 	mov	r2,r4
  805d50:	f800283a 	ret
  805d54:	1904b03a 	or	r2,r3,r4
  805d58:	108000cc 	andi	r2,r2,3
  805d5c:	103ff31e 	bne	r2,zero,805d2c <memmove+0x44>
  805d60:	3811883a 	mov	r8,r7
  805d64:	180b883a 	mov	r5,r3
  805d68:	200f883a 	mov	r7,r4
  805d6c:	28c00017 	ldw	r3,0(r5)
  805d70:	31bffc04 	addi	r6,r6,-16
  805d74:	38c00015 	stw	r3,0(r7)
  805d78:	28800117 	ldw	r2,4(r5)
  805d7c:	38800115 	stw	r2,4(r7)
  805d80:	28c00217 	ldw	r3,8(r5)
  805d84:	38c00215 	stw	r3,8(r7)
  805d88:	28800317 	ldw	r2,12(r5)
  805d8c:	29400404 	addi	r5,r5,16
  805d90:	38800315 	stw	r2,12(r7)
  805d94:	39c00404 	addi	r7,r7,16
  805d98:	41bff436 	bltu	r8,r6,805d6c <memmove+0x84>
  805d9c:	008000c4 	movi	r2,3
  805da0:	1180072e 	bgeu	r2,r6,805dc0 <memmove+0xd8>
  805da4:	1007883a 	mov	r3,r2
  805da8:	28800017 	ldw	r2,0(r5)
  805dac:	31bfff04 	addi	r6,r6,-4
  805db0:	29400104 	addi	r5,r5,4
  805db4:	38800015 	stw	r2,0(r7)
  805db8:	39c00104 	addi	r7,r7,4
  805dbc:	19bffa36 	bltu	r3,r6,805da8 <memmove+0xc0>
  805dc0:	3811883a 	mov	r8,r7
  805dc4:	003fd906 	br	805d2c <memmove+0x44>

00805dc8 <_Bfree>:
  805dc8:	28000826 	beq	r5,zero,805dec <_Bfree+0x24>
  805dcc:	28800117 	ldw	r2,4(r5)
  805dd0:	21001317 	ldw	r4,76(r4)
  805dd4:	1085883a 	add	r2,r2,r2
  805dd8:	1085883a 	add	r2,r2,r2
  805ddc:	1105883a 	add	r2,r2,r4
  805de0:	10c00017 	ldw	r3,0(r2)
  805de4:	28c00015 	stw	r3,0(r5)
  805de8:	11400015 	stw	r5,0(r2)
  805dec:	f800283a 	ret

00805df0 <__hi0bits>:
  805df0:	20bfffec 	andhi	r2,r4,65535
  805df4:	10001426 	beq	r2,zero,805e48 <__hi0bits+0x58>
  805df8:	0007883a 	mov	r3,zero
  805dfc:	20bfc02c 	andhi	r2,r4,65280
  805e00:	1000021e 	bne	r2,zero,805e0c <__hi0bits+0x1c>
  805e04:	2008923a 	slli	r4,r4,8
  805e08:	18c00204 	addi	r3,r3,8
  805e0c:	20bc002c 	andhi	r2,r4,61440
  805e10:	1000021e 	bne	r2,zero,805e1c <__hi0bits+0x2c>
  805e14:	2008913a 	slli	r4,r4,4
  805e18:	18c00104 	addi	r3,r3,4
  805e1c:	20b0002c 	andhi	r2,r4,49152
  805e20:	1000031e 	bne	r2,zero,805e30 <__hi0bits+0x40>
  805e24:	2105883a 	add	r2,r4,r4
  805e28:	18c00084 	addi	r3,r3,2
  805e2c:	1089883a 	add	r4,r2,r2
  805e30:	20000316 	blt	r4,zero,805e40 <__hi0bits+0x50>
  805e34:	2090002c 	andhi	r2,r4,16384
  805e38:	10000626 	beq	r2,zero,805e54 <__hi0bits+0x64>
  805e3c:	18c00044 	addi	r3,r3,1
  805e40:	1805883a 	mov	r2,r3
  805e44:	f800283a 	ret
  805e48:	2008943a 	slli	r4,r4,16
  805e4c:	00c00404 	movi	r3,16
  805e50:	003fea06 	br	805dfc <__hi0bits+0xc>
  805e54:	00c00804 	movi	r3,32
  805e58:	1805883a 	mov	r2,r3
  805e5c:	f800283a 	ret

00805e60 <__lo0bits>:
  805e60:	20c00017 	ldw	r3,0(r4)
  805e64:	188001cc 	andi	r2,r3,7
  805e68:	10000a26 	beq	r2,zero,805e94 <__lo0bits+0x34>
  805e6c:	1880004c 	andi	r2,r3,1
  805e70:	1005003a 	cmpeq	r2,r2,zero
  805e74:	10002126 	beq	r2,zero,805efc <__lo0bits+0x9c>
  805e78:	1880008c 	andi	r2,r3,2
  805e7c:	1000251e 	bne	r2,zero,805f14 <__lo0bits+0xb4>
  805e80:	1804d0ba 	srli	r2,r3,2
  805e84:	01400084 	movi	r5,2
  805e88:	20800015 	stw	r2,0(r4)
  805e8c:	2805883a 	mov	r2,r5
  805e90:	f800283a 	ret
  805e94:	18bfffcc 	andi	r2,r3,65535
  805e98:	10001526 	beq	r2,zero,805ef0 <__lo0bits+0x90>
  805e9c:	000b883a 	mov	r5,zero
  805ea0:	18803fcc 	andi	r2,r3,255
  805ea4:	1000021e 	bne	r2,zero,805eb0 <__lo0bits+0x50>
  805ea8:	1806d23a 	srli	r3,r3,8
  805eac:	29400204 	addi	r5,r5,8
  805eb0:	188003cc 	andi	r2,r3,15
  805eb4:	1000021e 	bne	r2,zero,805ec0 <__lo0bits+0x60>
  805eb8:	1806d13a 	srli	r3,r3,4
  805ebc:	29400104 	addi	r5,r5,4
  805ec0:	188000cc 	andi	r2,r3,3
  805ec4:	1000021e 	bne	r2,zero,805ed0 <__lo0bits+0x70>
  805ec8:	1806d0ba 	srli	r3,r3,2
  805ecc:	29400084 	addi	r5,r5,2
  805ed0:	1880004c 	andi	r2,r3,1
  805ed4:	1000031e 	bne	r2,zero,805ee4 <__lo0bits+0x84>
  805ed8:	1806d07a 	srli	r3,r3,1
  805edc:	18000a26 	beq	r3,zero,805f08 <__lo0bits+0xa8>
  805ee0:	29400044 	addi	r5,r5,1
  805ee4:	2805883a 	mov	r2,r5
  805ee8:	20c00015 	stw	r3,0(r4)
  805eec:	f800283a 	ret
  805ef0:	1806d43a 	srli	r3,r3,16
  805ef4:	01400404 	movi	r5,16
  805ef8:	003fe906 	br	805ea0 <__lo0bits+0x40>
  805efc:	000b883a 	mov	r5,zero
  805f00:	2805883a 	mov	r2,r5
  805f04:	f800283a 	ret
  805f08:	01400804 	movi	r5,32
  805f0c:	2805883a 	mov	r2,r5
  805f10:	f800283a 	ret
  805f14:	1804d07a 	srli	r2,r3,1
  805f18:	01400044 	movi	r5,1
  805f1c:	20800015 	stw	r2,0(r4)
  805f20:	003fda06 	br	805e8c <__lo0bits+0x2c>

00805f24 <__mcmp>:
  805f24:	20800417 	ldw	r2,16(r4)
  805f28:	28c00417 	ldw	r3,16(r5)
  805f2c:	10cfc83a 	sub	r7,r2,r3
  805f30:	38000c1e 	bne	r7,zero,805f64 <__mcmp+0x40>
  805f34:	18c5883a 	add	r2,r3,r3
  805f38:	1085883a 	add	r2,r2,r2
  805f3c:	10c00504 	addi	r3,r2,20
  805f40:	21000504 	addi	r4,r4,20
  805f44:	28cb883a 	add	r5,r5,r3
  805f48:	2085883a 	add	r2,r4,r2
  805f4c:	10bfff04 	addi	r2,r2,-4
  805f50:	297fff04 	addi	r5,r5,-4
  805f54:	11800017 	ldw	r6,0(r2)
  805f58:	28c00017 	ldw	r3,0(r5)
  805f5c:	30c0031e 	bne	r6,r3,805f6c <__mcmp+0x48>
  805f60:	20bffa36 	bltu	r4,r2,805f4c <__mcmp+0x28>
  805f64:	3805883a 	mov	r2,r7
  805f68:	f800283a 	ret
  805f6c:	30c00336 	bltu	r6,r3,805f7c <__mcmp+0x58>
  805f70:	01c00044 	movi	r7,1
  805f74:	3805883a 	mov	r2,r7
  805f78:	f800283a 	ret
  805f7c:	01ffffc4 	movi	r7,-1
  805f80:	003ff806 	br	805f64 <__mcmp+0x40>

00805f84 <__ulp>:
  805f84:	295ffc2c 	andhi	r5,r5,32752
  805f88:	013f3034 	movhi	r4,64704
  805f8c:	290b883a 	add	r5,r5,r4
  805f90:	0145c83a 	sub	r2,zero,r5
  805f94:	1007d53a 	srai	r3,r2,20
  805f98:	000d883a 	mov	r6,zero
  805f9c:	0140040e 	bge	zero,r5,805fb0 <__ulp+0x2c>
  805fa0:	280f883a 	mov	r7,r5
  805fa4:	3807883a 	mov	r3,r7
  805fa8:	3005883a 	mov	r2,r6
  805fac:	f800283a 	ret
  805fb0:	008004c4 	movi	r2,19
  805fb4:	193ffb04 	addi	r4,r3,-20
  805fb8:	10c00c0e 	bge	r2,r3,805fec <__ulp+0x68>
  805fbc:	008007c4 	movi	r2,31
  805fc0:	1107c83a 	sub	r3,r2,r4
  805fc4:	00800784 	movi	r2,30
  805fc8:	01400044 	movi	r5,1
  805fcc:	11000216 	blt	r2,r4,805fd8 <__ulp+0x54>
  805fd0:	00800044 	movi	r2,1
  805fd4:	10ca983a 	sll	r5,r2,r3
  805fd8:	000f883a 	mov	r7,zero
  805fdc:	280d883a 	mov	r6,r5
  805fe0:	3807883a 	mov	r3,r7
  805fe4:	3005883a 	mov	r2,r6
  805fe8:	f800283a 	ret
  805fec:	00800234 	movhi	r2,8
  805ff0:	10cfd83a 	sra	r7,r2,r3
  805ff4:	000d883a 	mov	r6,zero
  805ff8:	3005883a 	mov	r2,r6
  805ffc:	3807883a 	mov	r3,r7
  806000:	f800283a 	ret

00806004 <__b2d>:
  806004:	20800417 	ldw	r2,16(r4)
  806008:	defff904 	addi	sp,sp,-28
  80600c:	dd000415 	stw	r20,16(sp)
  806010:	1085883a 	add	r2,r2,r2
  806014:	25000504 	addi	r20,r4,20
  806018:	1085883a 	add	r2,r2,r2
  80601c:	dc000015 	stw	r16,0(sp)
  806020:	a0a1883a 	add	r16,r20,r2
  806024:	dd400515 	stw	r21,20(sp)
  806028:	857fff17 	ldw	r21,-4(r16)
  80602c:	dc400115 	stw	r17,4(sp)
  806030:	dfc00615 	stw	ra,24(sp)
  806034:	a809883a 	mov	r4,r21
  806038:	2823883a 	mov	r17,r5
  80603c:	dcc00315 	stw	r19,12(sp)
  806040:	dc800215 	stw	r18,8(sp)
  806044:	0805df00 	call	805df0 <__hi0bits>
  806048:	100b883a 	mov	r5,r2
  80604c:	00800804 	movi	r2,32
  806050:	1145c83a 	sub	r2,r2,r5
  806054:	88800015 	stw	r2,0(r17)
  806058:	00800284 	movi	r2,10
  80605c:	80ffff04 	addi	r3,r16,-4
  806060:	11401416 	blt	r2,r5,8060b4 <__b2d+0xb0>
  806064:	008002c4 	movi	r2,11
  806068:	1149c83a 	sub	r4,r2,r5
  80606c:	a0c02736 	bltu	r20,r3,80610c <__b2d+0x108>
  806070:	000d883a 	mov	r6,zero
  806074:	28800544 	addi	r2,r5,21
  806078:	a906d83a 	srl	r3,r21,r4
  80607c:	a884983a 	sll	r2,r21,r2
  806080:	1ccffc34 	orhi	r19,r3,16368
  806084:	11a4b03a 	or	r18,r2,r6
  806088:	9005883a 	mov	r2,r18
  80608c:	9807883a 	mov	r3,r19
  806090:	dfc00617 	ldw	ra,24(sp)
  806094:	dd400517 	ldw	r21,20(sp)
  806098:	dd000417 	ldw	r20,16(sp)
  80609c:	dcc00317 	ldw	r19,12(sp)
  8060a0:	dc800217 	ldw	r18,8(sp)
  8060a4:	dc400117 	ldw	r17,4(sp)
  8060a8:	dc000017 	ldw	r16,0(sp)
  8060ac:	dec00704 	addi	sp,sp,28
  8060b0:	f800283a 	ret
  8060b4:	a0c00e36 	bltu	r20,r3,8060f0 <__b2d+0xec>
  8060b8:	293ffd44 	addi	r4,r5,-11
  8060bc:	000d883a 	mov	r6,zero
  8060c0:	20000f26 	beq	r4,zero,806100 <__b2d+0xfc>
  8060c4:	00800804 	movi	r2,32
  8060c8:	110bc83a 	sub	r5,r2,r4
  8060cc:	a0c01236 	bltu	r20,r3,806118 <__b2d+0x114>
  8060d0:	000f883a 	mov	r7,zero
  8060d4:	a904983a 	sll	r2,r21,r4
  8060d8:	3146d83a 	srl	r3,r6,r5
  8060dc:	3108983a 	sll	r4,r6,r4
  8060e0:	108ffc34 	orhi	r2,r2,16368
  8060e4:	18a6b03a 	or	r19,r3,r2
  8060e8:	3924b03a 	or	r18,r7,r4
  8060ec:	003fe606 	br	806088 <__b2d+0x84>
  8060f0:	293ffd44 	addi	r4,r5,-11
  8060f4:	81bffe17 	ldw	r6,-8(r16)
  8060f8:	80fffe04 	addi	r3,r16,-8
  8060fc:	203ff11e 	bne	r4,zero,8060c4 <__b2d+0xc0>
  806100:	accffc34 	orhi	r19,r21,16368
  806104:	3025883a 	mov	r18,r6
  806108:	003fdf06 	br	806088 <__b2d+0x84>
  80610c:	18bfff17 	ldw	r2,-4(r3)
  806110:	110cd83a 	srl	r6,r2,r4
  806114:	003fd706 	br	806074 <__b2d+0x70>
  806118:	18bfff17 	ldw	r2,-4(r3)
  80611c:	114ed83a 	srl	r7,r2,r5
  806120:	003fec06 	br	8060d4 <__b2d+0xd0>

00806124 <__ratio>:
  806124:	defff904 	addi	sp,sp,-28
  806128:	dc400215 	stw	r17,8(sp)
  80612c:	2823883a 	mov	r17,r5
  806130:	d80b883a 	mov	r5,sp
  806134:	dfc00615 	stw	ra,24(sp)
  806138:	dd000515 	stw	r20,20(sp)
  80613c:	dcc00415 	stw	r19,16(sp)
  806140:	dc800315 	stw	r18,12(sp)
  806144:	2025883a 	mov	r18,r4
  806148:	08060040 	call	806004 <__b2d>
  80614c:	8809883a 	mov	r4,r17
  806150:	d9400104 	addi	r5,sp,4
  806154:	1027883a 	mov	r19,r2
  806158:	1829883a 	mov	r20,r3
  80615c:	08060040 	call	806004 <__b2d>
  806160:	89000417 	ldw	r4,16(r17)
  806164:	91c00417 	ldw	r7,16(r18)
  806168:	d9800117 	ldw	r6,4(sp)
  80616c:	180b883a 	mov	r5,r3
  806170:	390fc83a 	sub	r7,r7,r4
  806174:	1009883a 	mov	r4,r2
  806178:	d8800017 	ldw	r2,0(sp)
  80617c:	380e917a 	slli	r7,r7,5
  806180:	2011883a 	mov	r8,r4
  806184:	1185c83a 	sub	r2,r2,r6
  806188:	11c5883a 	add	r2,r2,r7
  80618c:	1006953a 	slli	r3,r2,20
  806190:	2813883a 	mov	r9,r5
  806194:	00800d0e 	bge	zero,r2,8061cc <__ratio+0xa8>
  806198:	1d29883a 	add	r20,r3,r20
  80619c:	a00b883a 	mov	r5,r20
  8061a0:	480f883a 	mov	r7,r9
  8061a4:	9809883a 	mov	r4,r19
  8061a8:	400d883a 	mov	r6,r8
  8061ac:	080916c0 	call	80916c <__divdf3>
  8061b0:	dfc00617 	ldw	ra,24(sp)
  8061b4:	dd000517 	ldw	r20,20(sp)
  8061b8:	dcc00417 	ldw	r19,16(sp)
  8061bc:	dc800317 	ldw	r18,12(sp)
  8061c0:	dc400217 	ldw	r17,8(sp)
  8061c4:	dec00704 	addi	sp,sp,28
  8061c8:	f800283a 	ret
  8061cc:	28d3c83a 	sub	r9,r5,r3
  8061d0:	003ff206 	br	80619c <__ratio+0x78>

008061d4 <_mprec_log10>:
  8061d4:	defffe04 	addi	sp,sp,-8
  8061d8:	008005c4 	movi	r2,23
  8061dc:	dc000015 	stw	r16,0(sp)
  8061e0:	dfc00115 	stw	ra,4(sp)
  8061e4:	2021883a 	mov	r16,r4
  8061e8:	11000c16 	blt	r2,r4,80621c <_mprec_log10+0x48>
  8061ec:	200490fa 	slli	r2,r4,3
  8061f0:	00c020b4 	movhi	r3,130
  8061f4:	18ec3604 	addi	r3,r3,-20264
  8061f8:	10c5883a 	add	r2,r2,r3
  8061fc:	12400117 	ldw	r9,4(r2)
  806200:	12000017 	ldw	r8,0(r2)
  806204:	4807883a 	mov	r3,r9
  806208:	4005883a 	mov	r2,r8
  80620c:	dfc00117 	ldw	ra,4(sp)
  806210:	dc000017 	ldw	r16,0(sp)
  806214:	dec00204 	addi	sp,sp,8
  806218:	f800283a 	ret
  80621c:	0011883a 	mov	r8,zero
  806220:	024ffc34 	movhi	r9,16368
  806224:	0005883a 	mov	r2,zero
  806228:	00d00934 	movhi	r3,16420
  80622c:	480b883a 	mov	r5,r9
  806230:	4009883a 	mov	r4,r8
  806234:	180f883a 	mov	r7,r3
  806238:	100d883a 	mov	r6,r2
  80623c:	0808da80 	call	808da8 <__muldf3>
  806240:	843fffc4 	addi	r16,r16,-1
  806244:	1011883a 	mov	r8,r2
  806248:	1813883a 	mov	r9,r3
  80624c:	803ff51e 	bne	r16,zero,806224 <_mprec_log10+0x50>
  806250:	4005883a 	mov	r2,r8
  806254:	4807883a 	mov	r3,r9
  806258:	dfc00117 	ldw	ra,4(sp)
  80625c:	dc000017 	ldw	r16,0(sp)
  806260:	dec00204 	addi	sp,sp,8
  806264:	f800283a 	ret

00806268 <__copybits>:
  806268:	297fffc4 	addi	r5,r5,-1
  80626c:	30800417 	ldw	r2,16(r6)
  806270:	280bd17a 	srai	r5,r5,5
  806274:	31800504 	addi	r6,r6,20
  806278:	1085883a 	add	r2,r2,r2
  80627c:	294b883a 	add	r5,r5,r5
  806280:	294b883a 	add	r5,r5,r5
  806284:	1085883a 	add	r2,r2,r2
  806288:	290b883a 	add	r5,r5,r4
  80628c:	3087883a 	add	r3,r6,r2
  806290:	29400104 	addi	r5,r5,4
  806294:	30c0052e 	bgeu	r6,r3,8062ac <__copybits+0x44>
  806298:	30800017 	ldw	r2,0(r6)
  80629c:	31800104 	addi	r6,r6,4
  8062a0:	20800015 	stw	r2,0(r4)
  8062a4:	21000104 	addi	r4,r4,4
  8062a8:	30fffb36 	bltu	r6,r3,806298 <__copybits+0x30>
  8062ac:	2140032e 	bgeu	r4,r5,8062bc <__copybits+0x54>
  8062b0:	20000015 	stw	zero,0(r4)
  8062b4:	21000104 	addi	r4,r4,4
  8062b8:	217ffd36 	bltu	r4,r5,8062b0 <__copybits+0x48>
  8062bc:	f800283a 	ret

008062c0 <__any_on>:
  8062c0:	20800417 	ldw	r2,16(r4)
  8062c4:	2807d17a 	srai	r3,r5,5
  8062c8:	21000504 	addi	r4,r4,20
  8062cc:	10c00d0e 	bge	r2,r3,806304 <__any_on+0x44>
  8062d0:	1085883a 	add	r2,r2,r2
  8062d4:	1085883a 	add	r2,r2,r2
  8062d8:	208d883a 	add	r6,r4,r2
  8062dc:	2180182e 	bgeu	r4,r6,806340 <__any_on+0x80>
  8062e0:	30bfff17 	ldw	r2,-4(r6)
  8062e4:	30ffff04 	addi	r3,r6,-4
  8062e8:	1000041e 	bne	r2,zero,8062fc <__any_on+0x3c>
  8062ec:	20c0142e 	bgeu	r4,r3,806340 <__any_on+0x80>
  8062f0:	18ffff04 	addi	r3,r3,-4
  8062f4:	18800017 	ldw	r2,0(r3)
  8062f8:	103ffc26 	beq	r2,zero,8062ec <__any_on+0x2c>
  8062fc:	00800044 	movi	r2,1
  806300:	f800283a 	ret
  806304:	18800a0e 	bge	r3,r2,806330 <__any_on+0x70>
  806308:	294007cc 	andi	r5,r5,31
  80630c:	28000826 	beq	r5,zero,806330 <__any_on+0x70>
  806310:	18c5883a 	add	r2,r3,r3
  806314:	1085883a 	add	r2,r2,r2
  806318:	208d883a 	add	r6,r4,r2
  80631c:	30c00017 	ldw	r3,0(r6)
  806320:	1944d83a 	srl	r2,r3,r5
  806324:	1144983a 	sll	r2,r2,r5
  806328:	18bff41e 	bne	r3,r2,8062fc <__any_on+0x3c>
  80632c:	003feb06 	br	8062dc <__any_on+0x1c>
  806330:	18c5883a 	add	r2,r3,r3
  806334:	1085883a 	add	r2,r2,r2
  806338:	208d883a 	add	r6,r4,r2
  80633c:	003fe706 	br	8062dc <__any_on+0x1c>
  806340:	0005883a 	mov	r2,zero
  806344:	f800283a 	ret

00806348 <_Balloc>:
  806348:	20c01317 	ldw	r3,76(r4)
  80634c:	defffb04 	addi	sp,sp,-20
  806350:	dcc00315 	stw	r19,12(sp)
  806354:	dc800215 	stw	r18,8(sp)
  806358:	dfc00415 	stw	ra,16(sp)
  80635c:	2825883a 	mov	r18,r5
  806360:	dc400115 	stw	r17,4(sp)
  806364:	dc000015 	stw	r16,0(sp)
  806368:	2027883a 	mov	r19,r4
  80636c:	01800404 	movi	r6,16
  806370:	01400104 	movi	r5,4
  806374:	18001726 	beq	r3,zero,8063d4 <_Balloc+0x8c>
  806378:	01400044 	movi	r5,1
  80637c:	9485883a 	add	r2,r18,r18
  806380:	2ca2983a 	sll	r17,r5,r18
  806384:	1085883a 	add	r2,r2,r2
  806388:	10c7883a 	add	r3,r2,r3
  80638c:	1c000017 	ldw	r16,0(r3)
  806390:	8c4d883a 	add	r6,r17,r17
  806394:	318d883a 	add	r6,r6,r6
  806398:	9809883a 	mov	r4,r19
  80639c:	31800504 	addi	r6,r6,20
  8063a0:	80001226 	beq	r16,zero,8063ec <_Balloc+0xa4>
  8063a4:	80800017 	ldw	r2,0(r16)
  8063a8:	18800015 	stw	r2,0(r3)
  8063ac:	80000415 	stw	zero,16(r16)
  8063b0:	80000315 	stw	zero,12(r16)
  8063b4:	8005883a 	mov	r2,r16
  8063b8:	dfc00417 	ldw	ra,16(sp)
  8063bc:	dcc00317 	ldw	r19,12(sp)
  8063c0:	dc800217 	ldw	r18,8(sp)
  8063c4:	dc400117 	ldw	r17,4(sp)
  8063c8:	dc000017 	ldw	r16,0(sp)
  8063cc:	dec00504 	addi	sp,sp,20
  8063d0:	f800283a 	ret
  8063d4:	08077a80 	call	8077a8 <_calloc_r>
  8063d8:	1007883a 	mov	r3,r2
  8063dc:	0021883a 	mov	r16,zero
  8063e0:	98801315 	stw	r2,76(r19)
  8063e4:	103fe41e 	bne	r2,zero,806378 <_Balloc+0x30>
  8063e8:	003ff206 	br	8063b4 <_Balloc+0x6c>
  8063ec:	08077a80 	call	8077a8 <_calloc_r>
  8063f0:	103ff026 	beq	r2,zero,8063b4 <_Balloc+0x6c>
  8063f4:	1021883a 	mov	r16,r2
  8063f8:	14800115 	stw	r18,4(r2)
  8063fc:	14400215 	stw	r17,8(r2)
  806400:	003fea06 	br	8063ac <_Balloc+0x64>

00806404 <__d2b>:
  806404:	defff504 	addi	sp,sp,-44
  806408:	dcc00515 	stw	r19,20(sp)
  80640c:	04c00044 	movi	r19,1
  806410:	dc000215 	stw	r16,8(sp)
  806414:	2821883a 	mov	r16,r5
  806418:	980b883a 	mov	r5,r19
  80641c:	ddc00915 	stw	r23,36(sp)
  806420:	dd800815 	stw	r22,32(sp)
  806424:	dd400715 	stw	r21,28(sp)
  806428:	dd000615 	stw	r20,24(sp)
  80642c:	dc800415 	stw	r18,16(sp)
  806430:	dc400315 	stw	r17,12(sp)
  806434:	dfc00a15 	stw	ra,40(sp)
  806438:	3023883a 	mov	r17,r6
  80643c:	382d883a 	mov	r22,r7
  806440:	ddc00b17 	ldw	r23,44(sp)
  806444:	08063480 	call	806348 <_Balloc>
  806448:	1025883a 	mov	r18,r2
  80644c:	00a00034 	movhi	r2,32768
  806450:	10bfffc4 	addi	r2,r2,-1
  806454:	8888703a 	and	r4,r17,r2
  806458:	202ad53a 	srli	r21,r4,20
  80645c:	00800434 	movhi	r2,16
  806460:	10bfffc4 	addi	r2,r2,-1
  806464:	8886703a 	and	r3,r17,r2
  806468:	a829003a 	cmpeq	r20,r21,zero
  80646c:	800b883a 	mov	r5,r16
  806470:	d8c00115 	stw	r3,4(sp)
  806474:	94000504 	addi	r16,r18,20
  806478:	a000021e 	bne	r20,zero,806484 <__d2b+0x80>
  80647c:	18c00434 	orhi	r3,r3,16
  806480:	d8c00115 	stw	r3,4(sp)
  806484:	28002726 	beq	r5,zero,806524 <__d2b+0x120>
  806488:	d809883a 	mov	r4,sp
  80648c:	d9400015 	stw	r5,0(sp)
  806490:	0805e600 	call	805e60 <__lo0bits>
  806494:	100d883a 	mov	r6,r2
  806498:	10003526 	beq	r2,zero,806570 <__d2b+0x16c>
  80649c:	d8c00117 	ldw	r3,4(sp)
  8064a0:	00800804 	movi	r2,32
  8064a4:	1185c83a 	sub	r2,r2,r6
  8064a8:	d9000017 	ldw	r4,0(sp)
  8064ac:	1886983a 	sll	r3,r3,r2
  8064b0:	1906b03a 	or	r3,r3,r4
  8064b4:	90c00515 	stw	r3,20(r18)
  8064b8:	d8c00117 	ldw	r3,4(sp)
  8064bc:	1986d83a 	srl	r3,r3,r6
  8064c0:	d8c00115 	stw	r3,4(sp)
  8064c4:	180b003a 	cmpeq	r5,r3,zero
  8064c8:	00800084 	movi	r2,2
  8064cc:	114bc83a 	sub	r5,r2,r5
  8064d0:	80c00115 	stw	r3,4(r16)
  8064d4:	91400415 	stw	r5,16(r18)
  8064d8:	a0001a1e 	bne	r20,zero,806544 <__d2b+0x140>
  8064dc:	3545883a 	add	r2,r6,r21
  8064e0:	10bef344 	addi	r2,r2,-1075
  8064e4:	00c00d44 	movi	r3,53
  8064e8:	b0800015 	stw	r2,0(r22)
  8064ec:	1987c83a 	sub	r3,r3,r6
  8064f0:	b8c00015 	stw	r3,0(r23)
  8064f4:	9005883a 	mov	r2,r18
  8064f8:	dfc00a17 	ldw	ra,40(sp)
  8064fc:	ddc00917 	ldw	r23,36(sp)
  806500:	dd800817 	ldw	r22,32(sp)
  806504:	dd400717 	ldw	r21,28(sp)
  806508:	dd000617 	ldw	r20,24(sp)
  80650c:	dcc00517 	ldw	r19,20(sp)
  806510:	dc800417 	ldw	r18,16(sp)
  806514:	dc400317 	ldw	r17,12(sp)
  806518:	dc000217 	ldw	r16,8(sp)
  80651c:	dec00b04 	addi	sp,sp,44
  806520:	f800283a 	ret
  806524:	d9000104 	addi	r4,sp,4
  806528:	0805e600 	call	805e60 <__lo0bits>
  80652c:	11800804 	addi	r6,r2,32
  806530:	d8800117 	ldw	r2,4(sp)
  806534:	94c00415 	stw	r19,16(r18)
  806538:	980b883a 	mov	r5,r19
  80653c:	90800515 	stw	r2,20(r18)
  806540:	a03fe626 	beq	r20,zero,8064dc <__d2b+0xd8>
  806544:	2945883a 	add	r2,r5,r5
  806548:	1085883a 	add	r2,r2,r2
  80654c:	1405883a 	add	r2,r2,r16
  806550:	113fff17 	ldw	r4,-4(r2)
  806554:	30fef384 	addi	r3,r6,-1074
  806558:	2820917a 	slli	r16,r5,5
  80655c:	b0c00015 	stw	r3,0(r22)
  806560:	0805df00 	call	805df0 <__hi0bits>
  806564:	80a1c83a 	sub	r16,r16,r2
  806568:	bc000015 	stw	r16,0(r23)
  80656c:	003fe106 	br	8064f4 <__d2b+0xf0>
  806570:	d8800017 	ldw	r2,0(sp)
  806574:	90800515 	stw	r2,20(r18)
  806578:	d8c00117 	ldw	r3,4(sp)
  80657c:	003fd106 	br	8064c4 <__d2b+0xc0>

00806580 <__mdiff>:
  806580:	defffb04 	addi	sp,sp,-20
  806584:	dc000015 	stw	r16,0(sp)
  806588:	2821883a 	mov	r16,r5
  80658c:	dc800215 	stw	r18,8(sp)
  806590:	300b883a 	mov	r5,r6
  806594:	2025883a 	mov	r18,r4
  806598:	8009883a 	mov	r4,r16
  80659c:	dc400115 	stw	r17,4(sp)
  8065a0:	dfc00415 	stw	ra,16(sp)
  8065a4:	dcc00315 	stw	r19,12(sp)
  8065a8:	3023883a 	mov	r17,r6
  8065ac:	0805f240 	call	805f24 <__mcmp>
  8065b0:	10004226 	beq	r2,zero,8066bc <__mdiff+0x13c>
  8065b4:	10005016 	blt	r2,zero,8066f8 <__mdiff+0x178>
  8065b8:	0027883a 	mov	r19,zero
  8065bc:	81400117 	ldw	r5,4(r16)
  8065c0:	9009883a 	mov	r4,r18
  8065c4:	08063480 	call	806348 <_Balloc>
  8065c8:	1019883a 	mov	r12,r2
  8065cc:	82800417 	ldw	r10,16(r16)
  8065d0:	88800417 	ldw	r2,16(r17)
  8065d4:	81800504 	addi	r6,r16,20
  8065d8:	5287883a 	add	r3,r10,r10
  8065dc:	1085883a 	add	r2,r2,r2
  8065e0:	18c7883a 	add	r3,r3,r3
  8065e4:	1085883a 	add	r2,r2,r2
  8065e8:	8a000504 	addi	r8,r17,20
  8065ec:	64c00315 	stw	r19,12(r12)
  8065f0:	30db883a 	add	r13,r6,r3
  8065f4:	4097883a 	add	r11,r8,r2
  8065f8:	61c00504 	addi	r7,r12,20
  8065fc:	0013883a 	mov	r9,zero
  806600:	31000017 	ldw	r4,0(r6)
  806604:	41400017 	ldw	r5,0(r8)
  806608:	42000104 	addi	r8,r8,4
  80660c:	20bfffcc 	andi	r2,r4,65535
  806610:	28ffffcc 	andi	r3,r5,65535
  806614:	10c5c83a 	sub	r2,r2,r3
  806618:	1245883a 	add	r2,r2,r9
  80661c:	2008d43a 	srli	r4,r4,16
  806620:	280ad43a 	srli	r5,r5,16
  806624:	1007d43a 	srai	r3,r2,16
  806628:	3880000d 	sth	r2,0(r7)
  80662c:	2149c83a 	sub	r4,r4,r5
  806630:	20c9883a 	add	r4,r4,r3
  806634:	3900008d 	sth	r4,2(r7)
  806638:	31800104 	addi	r6,r6,4
  80663c:	39c00104 	addi	r7,r7,4
  806640:	2013d43a 	srai	r9,r4,16
  806644:	42ffee36 	bltu	r8,r11,806600 <__mdiff+0x80>
  806648:	33400c2e 	bgeu	r6,r13,80667c <__mdiff+0xfc>
  80664c:	30800017 	ldw	r2,0(r6)
  806650:	31800104 	addi	r6,r6,4
  806654:	10ffffcc 	andi	r3,r2,65535
  806658:	1a47883a 	add	r3,r3,r9
  80665c:	1004d43a 	srli	r2,r2,16
  806660:	1809d43a 	srai	r4,r3,16
  806664:	38c0000d 	sth	r3,0(r7)
  806668:	1105883a 	add	r2,r2,r4
  80666c:	3880008d 	sth	r2,2(r7)
  806670:	1013d43a 	srai	r9,r2,16
  806674:	39c00104 	addi	r7,r7,4
  806678:	337ff436 	bltu	r6,r13,80664c <__mdiff+0xcc>
  80667c:	38bfff17 	ldw	r2,-4(r7)
  806680:	38ffff04 	addi	r3,r7,-4
  806684:	1000041e 	bne	r2,zero,806698 <__mdiff+0x118>
  806688:	18ffff04 	addi	r3,r3,-4
  80668c:	18800017 	ldw	r2,0(r3)
  806690:	52bfffc4 	addi	r10,r10,-1
  806694:	103ffc26 	beq	r2,zero,806688 <__mdiff+0x108>
  806698:	6005883a 	mov	r2,r12
  80669c:	62800415 	stw	r10,16(r12)
  8066a0:	dfc00417 	ldw	ra,16(sp)
  8066a4:	dcc00317 	ldw	r19,12(sp)
  8066a8:	dc800217 	ldw	r18,8(sp)
  8066ac:	dc400117 	ldw	r17,4(sp)
  8066b0:	dc000017 	ldw	r16,0(sp)
  8066b4:	dec00504 	addi	sp,sp,20
  8066b8:	f800283a 	ret
  8066bc:	9009883a 	mov	r4,r18
  8066c0:	000b883a 	mov	r5,zero
  8066c4:	08063480 	call	806348 <_Balloc>
  8066c8:	1019883a 	mov	r12,r2
  8066cc:	00800044 	movi	r2,1
  8066d0:	60800415 	stw	r2,16(r12)
  8066d4:	6005883a 	mov	r2,r12
  8066d8:	60000515 	stw	zero,20(r12)
  8066dc:	dfc00417 	ldw	ra,16(sp)
  8066e0:	dcc00317 	ldw	r19,12(sp)
  8066e4:	dc800217 	ldw	r18,8(sp)
  8066e8:	dc400117 	ldw	r17,4(sp)
  8066ec:	dc000017 	ldw	r16,0(sp)
  8066f0:	dec00504 	addi	sp,sp,20
  8066f4:	f800283a 	ret
  8066f8:	880d883a 	mov	r6,r17
  8066fc:	04c00044 	movi	r19,1
  806700:	8023883a 	mov	r17,r16
  806704:	3021883a 	mov	r16,r6
  806708:	003fac06 	br	8065bc <__mdiff+0x3c>

0080670c <__lshift>:
  80670c:	defff904 	addi	sp,sp,-28
  806710:	28800417 	ldw	r2,16(r5)
  806714:	dc000015 	stw	r16,0(sp)
  806718:	3021d17a 	srai	r16,r6,5
  80671c:	28c00217 	ldw	r3,8(r5)
  806720:	10800044 	addi	r2,r2,1
  806724:	dc400115 	stw	r17,4(sp)
  806728:	80a3883a 	add	r17,r16,r2
  80672c:	dd400515 	stw	r21,20(sp)
  806730:	dd000415 	stw	r20,16(sp)
  806734:	dc800215 	stw	r18,8(sp)
  806738:	dfc00615 	stw	ra,24(sp)
  80673c:	2825883a 	mov	r18,r5
  806740:	dcc00315 	stw	r19,12(sp)
  806744:	3029883a 	mov	r20,r6
  806748:	202b883a 	mov	r21,r4
  80674c:	29400117 	ldw	r5,4(r5)
  806750:	1c40030e 	bge	r3,r17,806760 <__lshift+0x54>
  806754:	18c7883a 	add	r3,r3,r3
  806758:	29400044 	addi	r5,r5,1
  80675c:	1c7ffd16 	blt	r3,r17,806754 <__lshift+0x48>
  806760:	a809883a 	mov	r4,r21
  806764:	08063480 	call	806348 <_Balloc>
  806768:	1027883a 	mov	r19,r2
  80676c:	11400504 	addi	r5,r2,20
  806770:	0400090e 	bge	zero,r16,806798 <__lshift+0x8c>
  806774:	2805883a 	mov	r2,r5
  806778:	0007883a 	mov	r3,zero
  80677c:	18c00044 	addi	r3,r3,1
  806780:	10000015 	stw	zero,0(r2)
  806784:	10800104 	addi	r2,r2,4
  806788:	80fffc1e 	bne	r16,r3,80677c <__lshift+0x70>
  80678c:	8405883a 	add	r2,r16,r16
  806790:	1085883a 	add	r2,r2,r2
  806794:	288b883a 	add	r5,r5,r2
  806798:	90800417 	ldw	r2,16(r18)
  80679c:	91000504 	addi	r4,r18,20
  8067a0:	a18007cc 	andi	r6,r20,31
  8067a4:	1085883a 	add	r2,r2,r2
  8067a8:	1085883a 	add	r2,r2,r2
  8067ac:	208f883a 	add	r7,r4,r2
  8067b0:	30001e26 	beq	r6,zero,80682c <__lshift+0x120>
  8067b4:	00800804 	movi	r2,32
  8067b8:	1191c83a 	sub	r8,r2,r6
  8067bc:	0007883a 	mov	r3,zero
  8067c0:	20800017 	ldw	r2,0(r4)
  8067c4:	1184983a 	sll	r2,r2,r6
  8067c8:	1884b03a 	or	r2,r3,r2
  8067cc:	28800015 	stw	r2,0(r5)
  8067d0:	20c00017 	ldw	r3,0(r4)
  8067d4:	21000104 	addi	r4,r4,4
  8067d8:	29400104 	addi	r5,r5,4
  8067dc:	1a06d83a 	srl	r3,r3,r8
  8067e0:	21fff736 	bltu	r4,r7,8067c0 <__lshift+0xb4>
  8067e4:	28c00015 	stw	r3,0(r5)
  8067e8:	18000126 	beq	r3,zero,8067f0 <__lshift+0xe4>
  8067ec:	8c400044 	addi	r17,r17,1
  8067f0:	88bfffc4 	addi	r2,r17,-1
  8067f4:	98800415 	stw	r2,16(r19)
  8067f8:	a809883a 	mov	r4,r21
  8067fc:	900b883a 	mov	r5,r18
  806800:	0805dc80 	call	805dc8 <_Bfree>
  806804:	9805883a 	mov	r2,r19
  806808:	dfc00617 	ldw	ra,24(sp)
  80680c:	dd400517 	ldw	r21,20(sp)
  806810:	dd000417 	ldw	r20,16(sp)
  806814:	dcc00317 	ldw	r19,12(sp)
  806818:	dc800217 	ldw	r18,8(sp)
  80681c:	dc400117 	ldw	r17,4(sp)
  806820:	dc000017 	ldw	r16,0(sp)
  806824:	dec00704 	addi	sp,sp,28
  806828:	f800283a 	ret
  80682c:	20800017 	ldw	r2,0(r4)
  806830:	21000104 	addi	r4,r4,4
  806834:	28800015 	stw	r2,0(r5)
  806838:	29400104 	addi	r5,r5,4
  80683c:	21ffec2e 	bgeu	r4,r7,8067f0 <__lshift+0xe4>
  806840:	20800017 	ldw	r2,0(r4)
  806844:	21000104 	addi	r4,r4,4
  806848:	28800015 	stw	r2,0(r5)
  80684c:	29400104 	addi	r5,r5,4
  806850:	21fff636 	bltu	r4,r7,80682c <__lshift+0x120>
  806854:	003fe606 	br	8067f0 <__lshift+0xe4>

00806858 <__multiply>:
  806858:	defff004 	addi	sp,sp,-64
  80685c:	dc800815 	stw	r18,32(sp)
  806860:	dc400715 	stw	r17,28(sp)
  806864:	2c800417 	ldw	r18,16(r5)
  806868:	34400417 	ldw	r17,16(r6)
  80686c:	dcc00915 	stw	r19,36(sp)
  806870:	dc000615 	stw	r16,24(sp)
  806874:	dfc00f15 	stw	ra,60(sp)
  806878:	df000e15 	stw	fp,56(sp)
  80687c:	ddc00d15 	stw	r23,52(sp)
  806880:	dd800c15 	stw	r22,48(sp)
  806884:	dd400b15 	stw	r21,44(sp)
  806888:	dd000a15 	stw	r20,40(sp)
  80688c:	2821883a 	mov	r16,r5
  806890:	3027883a 	mov	r19,r6
  806894:	9440040e 	bge	r18,r17,8068a8 <__multiply+0x50>
  806898:	8825883a 	mov	r18,r17
  80689c:	2c400417 	ldw	r17,16(r5)
  8068a0:	2827883a 	mov	r19,r5
  8068a4:	3021883a 	mov	r16,r6
  8068a8:	80800217 	ldw	r2,8(r16)
  8068ac:	9447883a 	add	r3,r18,r17
  8068b0:	d8c00415 	stw	r3,16(sp)
  8068b4:	81400117 	ldw	r5,4(r16)
  8068b8:	10c0010e 	bge	r2,r3,8068c0 <__multiply+0x68>
  8068bc:	29400044 	addi	r5,r5,1
  8068c0:	08063480 	call	806348 <_Balloc>
  8068c4:	d8800515 	stw	r2,20(sp)
  8068c8:	d9000417 	ldw	r4,16(sp)
  8068cc:	d8c00517 	ldw	r3,20(sp)
  8068d0:	2105883a 	add	r2,r4,r4
  8068d4:	1085883a 	add	r2,r2,r2
  8068d8:	19000504 	addi	r4,r3,20
  8068dc:	2085883a 	add	r2,r4,r2
  8068e0:	d8800315 	stw	r2,12(sp)
  8068e4:	2080052e 	bgeu	r4,r2,8068fc <__multiply+0xa4>
  8068e8:	2005883a 	mov	r2,r4
  8068ec:	d8c00317 	ldw	r3,12(sp)
  8068f0:	10000015 	stw	zero,0(r2)
  8068f4:	10800104 	addi	r2,r2,4
  8068f8:	10fffc36 	bltu	r2,r3,8068ec <__multiply+0x94>
  8068fc:	8c45883a 	add	r2,r17,r17
  806900:	9487883a 	add	r3,r18,r18
  806904:	9dc00504 	addi	r23,r19,20
  806908:	1085883a 	add	r2,r2,r2
  80690c:	84000504 	addi	r16,r16,20
  806910:	18c7883a 	add	r3,r3,r3
  806914:	b885883a 	add	r2,r23,r2
  806918:	dc000015 	stw	r16,0(sp)
  80691c:	d8800215 	stw	r2,8(sp)
  806920:	80f9883a 	add	fp,r16,r3
  806924:	b880432e 	bgeu	r23,r2,806a34 <__multiply+0x1dc>
  806928:	d9000115 	stw	r4,4(sp)
  80692c:	b9000017 	ldw	r4,0(r23)
  806930:	253fffcc 	andi	r20,r4,65535
  806934:	a0001a26 	beq	r20,zero,8069a0 <__multiply+0x148>
  806938:	dcc00017 	ldw	r19,0(sp)
  80693c:	dc800117 	ldw	r18,4(sp)
  806940:	002b883a 	mov	r21,zero
  806944:	9c400017 	ldw	r17,0(r19)
  806948:	94000017 	ldw	r16,0(r18)
  80694c:	a009883a 	mov	r4,r20
  806950:	897fffcc 	andi	r5,r17,65535
  806954:	0809b1c0 	call	809b1c <__mulsi3>
  806958:	880ad43a 	srli	r5,r17,16
  80695c:	80ffffcc 	andi	r3,r16,65535
  806960:	a8c7883a 	add	r3,r21,r3
  806964:	a009883a 	mov	r4,r20
  806968:	10e3883a 	add	r17,r2,r3
  80696c:	8020d43a 	srli	r16,r16,16
  806970:	0809b1c0 	call	809b1c <__mulsi3>
  806974:	8806d43a 	srli	r3,r17,16
  806978:	1405883a 	add	r2,r2,r16
  80697c:	9cc00104 	addi	r19,r19,4
  806980:	1887883a 	add	r3,r3,r2
  806984:	90c0008d 	sth	r3,2(r18)
  806988:	9440000d 	sth	r17,0(r18)
  80698c:	182ad43a 	srli	r21,r3,16
  806990:	94800104 	addi	r18,r18,4
  806994:	9f3feb36 	bltu	r19,fp,806944 <__multiply+0xec>
  806998:	95400015 	stw	r21,0(r18)
  80699c:	b9000017 	ldw	r4,0(r23)
  8069a0:	202ad43a 	srli	r21,r4,16
  8069a4:	a8001c26 	beq	r21,zero,806a18 <__multiply+0x1c0>
  8069a8:	d9000117 	ldw	r4,4(sp)
  8069ac:	dd000017 	ldw	r20,0(sp)
  8069b0:	002d883a 	mov	r22,zero
  8069b4:	24c00017 	ldw	r19,0(r4)
  8069b8:	2025883a 	mov	r18,r4
  8069bc:	9823883a 	mov	r17,r19
  8069c0:	a4000017 	ldw	r16,0(r20)
  8069c4:	a809883a 	mov	r4,r21
  8069c8:	a5000104 	addi	r20,r20,4
  8069cc:	817fffcc 	andi	r5,r16,65535
  8069d0:	0809b1c0 	call	809b1c <__mulsi3>
  8069d4:	8806d43a 	srli	r3,r17,16
  8069d8:	800ad43a 	srli	r5,r16,16
  8069dc:	94c0000d 	sth	r19,0(r18)
  8069e0:	b0c7883a 	add	r3,r22,r3
  8069e4:	10e1883a 	add	r16,r2,r3
  8069e8:	9400008d 	sth	r16,2(r18)
  8069ec:	a809883a 	mov	r4,r21
  8069f0:	94800104 	addi	r18,r18,4
  8069f4:	0809b1c0 	call	809b1c <__mulsi3>
  8069f8:	94400017 	ldw	r17,0(r18)
  8069fc:	8020d43a 	srli	r16,r16,16
  806a00:	88ffffcc 	andi	r3,r17,65535
  806a04:	10c5883a 	add	r2,r2,r3
  806a08:	80a7883a 	add	r19,r16,r2
  806a0c:	982cd43a 	srli	r22,r19,16
  806a10:	a73feb36 	bltu	r20,fp,8069c0 <__multiply+0x168>
  806a14:	94c00015 	stw	r19,0(r18)
  806a18:	d8800217 	ldw	r2,8(sp)
  806a1c:	bdc00104 	addi	r23,r23,4
  806a20:	b880042e 	bgeu	r23,r2,806a34 <__multiply+0x1dc>
  806a24:	d8c00117 	ldw	r3,4(sp)
  806a28:	18c00104 	addi	r3,r3,4
  806a2c:	d8c00115 	stw	r3,4(sp)
  806a30:	003fbe06 	br	80692c <__multiply+0xd4>
  806a34:	d9000417 	ldw	r4,16(sp)
  806a38:	01000c0e 	bge	zero,r4,806a6c <__multiply+0x214>
  806a3c:	d8c00317 	ldw	r3,12(sp)
  806a40:	18bfff17 	ldw	r2,-4(r3)
  806a44:	18ffff04 	addi	r3,r3,-4
  806a48:	10000326 	beq	r2,zero,806a58 <__multiply+0x200>
  806a4c:	00000706 	br	806a6c <__multiply+0x214>
  806a50:	18800017 	ldw	r2,0(r3)
  806a54:	1000051e 	bne	r2,zero,806a6c <__multiply+0x214>
  806a58:	d9000417 	ldw	r4,16(sp)
  806a5c:	18ffff04 	addi	r3,r3,-4
  806a60:	213fffc4 	addi	r4,r4,-1
  806a64:	d9000415 	stw	r4,16(sp)
  806a68:	203ff91e 	bne	r4,zero,806a50 <__multiply+0x1f8>
  806a6c:	d8800417 	ldw	r2,16(sp)
  806a70:	d8c00517 	ldw	r3,20(sp)
  806a74:	18800415 	stw	r2,16(r3)
  806a78:	1805883a 	mov	r2,r3
  806a7c:	dfc00f17 	ldw	ra,60(sp)
  806a80:	df000e17 	ldw	fp,56(sp)
  806a84:	ddc00d17 	ldw	r23,52(sp)
  806a88:	dd800c17 	ldw	r22,48(sp)
  806a8c:	dd400b17 	ldw	r21,44(sp)
  806a90:	dd000a17 	ldw	r20,40(sp)
  806a94:	dcc00917 	ldw	r19,36(sp)
  806a98:	dc800817 	ldw	r18,32(sp)
  806a9c:	dc400717 	ldw	r17,28(sp)
  806aa0:	dc000617 	ldw	r16,24(sp)
  806aa4:	dec01004 	addi	sp,sp,64
  806aa8:	f800283a 	ret

00806aac <__i2b>:
  806aac:	defffd04 	addi	sp,sp,-12
  806ab0:	dc000015 	stw	r16,0(sp)
  806ab4:	04000044 	movi	r16,1
  806ab8:	dc800115 	stw	r18,4(sp)
  806abc:	2825883a 	mov	r18,r5
  806ac0:	800b883a 	mov	r5,r16
  806ac4:	dfc00215 	stw	ra,8(sp)
  806ac8:	08063480 	call	806348 <_Balloc>
  806acc:	14000415 	stw	r16,16(r2)
  806ad0:	14800515 	stw	r18,20(r2)
  806ad4:	dfc00217 	ldw	ra,8(sp)
  806ad8:	dc800117 	ldw	r18,4(sp)
  806adc:	dc000017 	ldw	r16,0(sp)
  806ae0:	dec00304 	addi	sp,sp,12
  806ae4:	f800283a 	ret

00806ae8 <__multadd>:
  806ae8:	defff604 	addi	sp,sp,-40
  806aec:	dd800615 	stw	r22,24(sp)
  806af0:	2d800417 	ldw	r22,16(r5)
  806af4:	df000815 	stw	fp,32(sp)
  806af8:	ddc00715 	stw	r23,28(sp)
  806afc:	dd400515 	stw	r21,20(sp)
  806b00:	dd000415 	stw	r20,16(sp)
  806b04:	dcc00315 	stw	r19,12(sp)
  806b08:	dc800215 	stw	r18,8(sp)
  806b0c:	dfc00915 	stw	ra,36(sp)
  806b10:	dc400115 	stw	r17,4(sp)
  806b14:	dc000015 	stw	r16,0(sp)
  806b18:	282f883a 	mov	r23,r5
  806b1c:	2039883a 	mov	fp,r4
  806b20:	302b883a 	mov	r21,r6
  806b24:	3829883a 	mov	r20,r7
  806b28:	2c800504 	addi	r18,r5,20
  806b2c:	0027883a 	mov	r19,zero
  806b30:	94400017 	ldw	r17,0(r18)
  806b34:	a80b883a 	mov	r5,r21
  806b38:	9cc00044 	addi	r19,r19,1
  806b3c:	893fffcc 	andi	r4,r17,65535
  806b40:	0809b1c0 	call	809b1c <__mulsi3>
  806b44:	8808d43a 	srli	r4,r17,16
  806b48:	1521883a 	add	r16,r2,r20
  806b4c:	a80b883a 	mov	r5,r21
  806b50:	0809b1c0 	call	809b1c <__mulsi3>
  806b54:	8008d43a 	srli	r4,r16,16
  806b58:	843fffcc 	andi	r16,r16,65535
  806b5c:	1105883a 	add	r2,r2,r4
  806b60:	1006943a 	slli	r3,r2,16
  806b64:	1028d43a 	srli	r20,r2,16
  806b68:	1c07883a 	add	r3,r3,r16
  806b6c:	90c00015 	stw	r3,0(r18)
  806b70:	94800104 	addi	r18,r18,4
  806b74:	9dbfee16 	blt	r19,r22,806b30 <__multadd+0x48>
  806b78:	a0000826 	beq	r20,zero,806b9c <__multadd+0xb4>
  806b7c:	b8800217 	ldw	r2,8(r23)
  806b80:	b080130e 	bge	r22,r2,806bd0 <__multadd+0xe8>
  806b84:	b585883a 	add	r2,r22,r22
  806b88:	1085883a 	add	r2,r2,r2
  806b8c:	15c5883a 	add	r2,r2,r23
  806b90:	b0c00044 	addi	r3,r22,1
  806b94:	15000515 	stw	r20,20(r2)
  806b98:	b8c00415 	stw	r3,16(r23)
  806b9c:	b805883a 	mov	r2,r23
  806ba0:	dfc00917 	ldw	ra,36(sp)
  806ba4:	df000817 	ldw	fp,32(sp)
  806ba8:	ddc00717 	ldw	r23,28(sp)
  806bac:	dd800617 	ldw	r22,24(sp)
  806bb0:	dd400517 	ldw	r21,20(sp)
  806bb4:	dd000417 	ldw	r20,16(sp)
  806bb8:	dcc00317 	ldw	r19,12(sp)
  806bbc:	dc800217 	ldw	r18,8(sp)
  806bc0:	dc400117 	ldw	r17,4(sp)
  806bc4:	dc000017 	ldw	r16,0(sp)
  806bc8:	dec00a04 	addi	sp,sp,40
  806bcc:	f800283a 	ret
  806bd0:	b9400117 	ldw	r5,4(r23)
  806bd4:	e009883a 	mov	r4,fp
  806bd8:	29400044 	addi	r5,r5,1
  806bdc:	08063480 	call	806348 <_Balloc>
  806be0:	b9800417 	ldw	r6,16(r23)
  806be4:	b9400304 	addi	r5,r23,12
  806be8:	11000304 	addi	r4,r2,12
  806bec:	318d883a 	add	r6,r6,r6
  806bf0:	318d883a 	add	r6,r6,r6
  806bf4:	31800204 	addi	r6,r6,8
  806bf8:	1023883a 	mov	r17,r2
  806bfc:	0805c480 	call	805c48 <memcpy>
  806c00:	b80b883a 	mov	r5,r23
  806c04:	e009883a 	mov	r4,fp
  806c08:	0805dc80 	call	805dc8 <_Bfree>
  806c0c:	882f883a 	mov	r23,r17
  806c10:	003fdc06 	br	806b84 <__multadd+0x9c>

00806c14 <__pow5mult>:
  806c14:	defffa04 	addi	sp,sp,-24
  806c18:	308000cc 	andi	r2,r6,3
  806c1c:	dd000415 	stw	r20,16(sp)
  806c20:	dcc00315 	stw	r19,12(sp)
  806c24:	dc000015 	stw	r16,0(sp)
  806c28:	dfc00515 	stw	ra,20(sp)
  806c2c:	dc800215 	stw	r18,8(sp)
  806c30:	dc400115 	stw	r17,4(sp)
  806c34:	3021883a 	mov	r16,r6
  806c38:	2027883a 	mov	r19,r4
  806c3c:	2829883a 	mov	r20,r5
  806c40:	10002b1e 	bne	r2,zero,806cf0 <__pow5mult+0xdc>
  806c44:	8025d0ba 	srai	r18,r16,2
  806c48:	90001b26 	beq	r18,zero,806cb8 <__pow5mult+0xa4>
  806c4c:	9c001217 	ldw	r16,72(r19)
  806c50:	8000081e 	bne	r16,zero,806c74 <__pow5mult+0x60>
  806c54:	00003006 	br	806d18 <__pow5mult+0x104>
  806c58:	800b883a 	mov	r5,r16
  806c5c:	800d883a 	mov	r6,r16
  806c60:	9809883a 	mov	r4,r19
  806c64:	90001426 	beq	r18,zero,806cb8 <__pow5mult+0xa4>
  806c68:	80800017 	ldw	r2,0(r16)
  806c6c:	10001b26 	beq	r2,zero,806cdc <__pow5mult+0xc8>
  806c70:	1021883a 	mov	r16,r2
  806c74:	9080004c 	andi	r2,r18,1
  806c78:	1005003a 	cmpeq	r2,r2,zero
  806c7c:	9025d07a 	srai	r18,r18,1
  806c80:	800d883a 	mov	r6,r16
  806c84:	9809883a 	mov	r4,r19
  806c88:	a00b883a 	mov	r5,r20
  806c8c:	103ff21e 	bne	r2,zero,806c58 <__pow5mult+0x44>
  806c90:	08068580 	call	806858 <__multiply>
  806c94:	a00b883a 	mov	r5,r20
  806c98:	9809883a 	mov	r4,r19
  806c9c:	1023883a 	mov	r17,r2
  806ca0:	0805dc80 	call	805dc8 <_Bfree>
  806ca4:	8829883a 	mov	r20,r17
  806ca8:	800b883a 	mov	r5,r16
  806cac:	800d883a 	mov	r6,r16
  806cb0:	9809883a 	mov	r4,r19
  806cb4:	903fec1e 	bne	r18,zero,806c68 <__pow5mult+0x54>
  806cb8:	a005883a 	mov	r2,r20
  806cbc:	dfc00517 	ldw	ra,20(sp)
  806cc0:	dd000417 	ldw	r20,16(sp)
  806cc4:	dcc00317 	ldw	r19,12(sp)
  806cc8:	dc800217 	ldw	r18,8(sp)
  806ccc:	dc400117 	ldw	r17,4(sp)
  806cd0:	dc000017 	ldw	r16,0(sp)
  806cd4:	dec00604 	addi	sp,sp,24
  806cd8:	f800283a 	ret
  806cdc:	08068580 	call	806858 <__multiply>
  806ce0:	80800015 	stw	r2,0(r16)
  806ce4:	1021883a 	mov	r16,r2
  806ce8:	10000015 	stw	zero,0(r2)
  806cec:	003fe106 	br	806c74 <__pow5mult+0x60>
  806cf0:	1085883a 	add	r2,r2,r2
  806cf4:	00c020b4 	movhi	r3,130
  806cf8:	18ec7c04 	addi	r3,r3,-19984
  806cfc:	1085883a 	add	r2,r2,r2
  806d00:	10c5883a 	add	r2,r2,r3
  806d04:	11bfff17 	ldw	r6,-4(r2)
  806d08:	000f883a 	mov	r7,zero
  806d0c:	0806ae80 	call	806ae8 <__multadd>
  806d10:	1029883a 	mov	r20,r2
  806d14:	003fcb06 	br	806c44 <__pow5mult+0x30>
  806d18:	9809883a 	mov	r4,r19
  806d1c:	01409c44 	movi	r5,625
  806d20:	0806aac0 	call	806aac <__i2b>
  806d24:	98801215 	stw	r2,72(r19)
  806d28:	1021883a 	mov	r16,r2
  806d2c:	10000015 	stw	zero,0(r2)
  806d30:	003fd006 	br	806c74 <__pow5mult+0x60>

00806d34 <__s2b>:
  806d34:	defff904 	addi	sp,sp,-28
  806d38:	dcc00315 	stw	r19,12(sp)
  806d3c:	dc800215 	stw	r18,8(sp)
  806d40:	2827883a 	mov	r19,r5
  806d44:	2025883a 	mov	r18,r4
  806d48:	01400244 	movi	r5,9
  806d4c:	39000204 	addi	r4,r7,8
  806d50:	dd000415 	stw	r20,16(sp)
  806d54:	dc400115 	stw	r17,4(sp)
  806d58:	dfc00615 	stw	ra,24(sp)
  806d5c:	dd400515 	stw	r21,20(sp)
  806d60:	dc000015 	stw	r16,0(sp)
  806d64:	3829883a 	mov	r20,r7
  806d68:	3023883a 	mov	r17,r6
  806d6c:	0809a4c0 	call	809a4c <__divsi3>
  806d70:	00c00044 	movi	r3,1
  806d74:	1880350e 	bge	r3,r2,806e4c <__s2b+0x118>
  806d78:	000b883a 	mov	r5,zero
  806d7c:	18c7883a 	add	r3,r3,r3
  806d80:	29400044 	addi	r5,r5,1
  806d84:	18bffd16 	blt	r3,r2,806d7c <__s2b+0x48>
  806d88:	9009883a 	mov	r4,r18
  806d8c:	08063480 	call	806348 <_Balloc>
  806d90:	1011883a 	mov	r8,r2
  806d94:	d8800717 	ldw	r2,28(sp)
  806d98:	00c00044 	movi	r3,1
  806d9c:	01800244 	movi	r6,9
  806da0:	40800515 	stw	r2,20(r8)
  806da4:	40c00415 	stw	r3,16(r8)
  806da8:	3440260e 	bge	r6,r17,806e44 <__s2b+0x110>
  806dac:	3021883a 	mov	r16,r6
  806db0:	99ab883a 	add	r21,r19,r6
  806db4:	9c05883a 	add	r2,r19,r16
  806db8:	11c00007 	ldb	r7,0(r2)
  806dbc:	400b883a 	mov	r5,r8
  806dc0:	9009883a 	mov	r4,r18
  806dc4:	39fff404 	addi	r7,r7,-48
  806dc8:	01800284 	movi	r6,10
  806dcc:	0806ae80 	call	806ae8 <__multadd>
  806dd0:	84000044 	addi	r16,r16,1
  806dd4:	1011883a 	mov	r8,r2
  806dd8:	8c3ff61e 	bne	r17,r16,806db4 <__s2b+0x80>
  806ddc:	ac45883a 	add	r2,r21,r17
  806de0:	117ffe04 	addi	r5,r2,-8
  806de4:	880d883a 	mov	r6,r17
  806de8:	35000c0e 	bge	r6,r20,806e1c <__s2b+0xe8>
  806dec:	a185c83a 	sub	r2,r20,r6
  806df0:	2821883a 	mov	r16,r5
  806df4:	28a3883a 	add	r17,r5,r2
  806df8:	81c00007 	ldb	r7,0(r16)
  806dfc:	400b883a 	mov	r5,r8
  806e00:	9009883a 	mov	r4,r18
  806e04:	39fff404 	addi	r7,r7,-48
  806e08:	01800284 	movi	r6,10
  806e0c:	0806ae80 	call	806ae8 <__multadd>
  806e10:	84000044 	addi	r16,r16,1
  806e14:	1011883a 	mov	r8,r2
  806e18:	847ff71e 	bne	r16,r17,806df8 <__s2b+0xc4>
  806e1c:	4005883a 	mov	r2,r8
  806e20:	dfc00617 	ldw	ra,24(sp)
  806e24:	dd400517 	ldw	r21,20(sp)
  806e28:	dd000417 	ldw	r20,16(sp)
  806e2c:	dcc00317 	ldw	r19,12(sp)
  806e30:	dc800217 	ldw	r18,8(sp)
  806e34:	dc400117 	ldw	r17,4(sp)
  806e38:	dc000017 	ldw	r16,0(sp)
  806e3c:	dec00704 	addi	sp,sp,28
  806e40:	f800283a 	ret
  806e44:	99400284 	addi	r5,r19,10
  806e48:	003fe706 	br	806de8 <__s2b+0xb4>
  806e4c:	000b883a 	mov	r5,zero
  806e50:	003fcd06 	br	806d88 <__s2b+0x54>

00806e54 <_realloc_r>:
  806e54:	defff404 	addi	sp,sp,-48
  806e58:	dd800815 	stw	r22,32(sp)
  806e5c:	dc800415 	stw	r18,16(sp)
  806e60:	dc400315 	stw	r17,12(sp)
  806e64:	dfc00b15 	stw	ra,44(sp)
  806e68:	df000a15 	stw	fp,40(sp)
  806e6c:	ddc00915 	stw	r23,36(sp)
  806e70:	dd400715 	stw	r21,28(sp)
  806e74:	dd000615 	stw	r20,24(sp)
  806e78:	dcc00515 	stw	r19,20(sp)
  806e7c:	dc000215 	stw	r16,8(sp)
  806e80:	2825883a 	mov	r18,r5
  806e84:	3023883a 	mov	r17,r6
  806e88:	202d883a 	mov	r22,r4
  806e8c:	2800c926 	beq	r5,zero,8071b4 <_realloc_r+0x360>
  806e90:	080b0d80 	call	80b0d8 <__malloc_lock>
  806e94:	943ffe04 	addi	r16,r18,-8
  806e98:	88c002c4 	addi	r3,r17,11
  806e9c:	00800584 	movi	r2,22
  806ea0:	82000117 	ldw	r8,4(r16)
  806ea4:	10c01b2e 	bgeu	r2,r3,806f14 <_realloc_r+0xc0>
  806ea8:	00bffe04 	movi	r2,-8
  806eac:	188e703a 	and	r7,r3,r2
  806eb0:	3839883a 	mov	fp,r7
  806eb4:	38001a16 	blt	r7,zero,806f20 <_realloc_r+0xcc>
  806eb8:	e4401936 	bltu	fp,r17,806f20 <_realloc_r+0xcc>
  806ebc:	013fff04 	movi	r4,-4
  806ec0:	4126703a 	and	r19,r8,r4
  806ec4:	99c02616 	blt	r19,r7,806f60 <_realloc_r+0x10c>
  806ec8:	802b883a 	mov	r21,r16
  806ecc:	9829883a 	mov	r20,r19
  806ed0:	84000204 	addi	r16,r16,8
  806ed4:	a80f883a 	mov	r7,r21
  806ed8:	a70dc83a 	sub	r6,r20,fp
  806edc:	008003c4 	movi	r2,15
  806ee0:	1180c136 	bltu	r2,r6,8071e8 <_realloc_r+0x394>
  806ee4:	38800117 	ldw	r2,4(r7)
  806ee8:	a549883a 	add	r4,r20,r21
  806eec:	1080004c 	andi	r2,r2,1
  806ef0:	a084b03a 	or	r2,r20,r2
  806ef4:	38800115 	stw	r2,4(r7)
  806ef8:	20c00117 	ldw	r3,4(r4)
  806efc:	18c00054 	ori	r3,r3,1
  806f00:	20c00115 	stw	r3,4(r4)
  806f04:	b009883a 	mov	r4,r22
  806f08:	080b1e00 	call	80b1e0 <__malloc_unlock>
  806f0c:	8023883a 	mov	r17,r16
  806f10:	00000606 	br	806f2c <_realloc_r+0xd8>
  806f14:	01c00404 	movi	r7,16
  806f18:	3839883a 	mov	fp,r7
  806f1c:	e47fe72e 	bgeu	fp,r17,806ebc <_realloc_r+0x68>
  806f20:	00800304 	movi	r2,12
  806f24:	0023883a 	mov	r17,zero
  806f28:	b0800015 	stw	r2,0(r22)
  806f2c:	8805883a 	mov	r2,r17
  806f30:	dfc00b17 	ldw	ra,44(sp)
  806f34:	df000a17 	ldw	fp,40(sp)
  806f38:	ddc00917 	ldw	r23,36(sp)
  806f3c:	dd800817 	ldw	r22,32(sp)
  806f40:	dd400717 	ldw	r21,28(sp)
  806f44:	dd000617 	ldw	r20,24(sp)
  806f48:	dcc00517 	ldw	r19,20(sp)
  806f4c:	dc800417 	ldw	r18,16(sp)
  806f50:	dc400317 	ldw	r17,12(sp)
  806f54:	dc000217 	ldw	r16,8(sp)
  806f58:	dec00c04 	addi	sp,sp,48
  806f5c:	f800283a 	ret
  806f60:	008020b4 	movhi	r2,130
  806f64:	10ae3204 	addi	r2,r2,-18232
  806f68:	12400217 	ldw	r9,8(r2)
  806f6c:	84cd883a 	add	r6,r16,r19
  806f70:	802b883a 	mov	r21,r16
  806f74:	3240b926 	beq	r6,r9,80725c <_realloc_r+0x408>
  806f78:	31400117 	ldw	r5,4(r6)
  806f7c:	00bfff84 	movi	r2,-2
  806f80:	2884703a 	and	r2,r5,r2
  806f84:	1185883a 	add	r2,r2,r6
  806f88:	10c00117 	ldw	r3,4(r2)
  806f8c:	18c0004c 	andi	r3,r3,1
  806f90:	1807003a 	cmpeq	r3,r3,zero
  806f94:	1800a326 	beq	r3,zero,807224 <_realloc_r+0x3d0>
  806f98:	2908703a 	and	r4,r5,r4
  806f9c:	9929883a 	add	r20,r19,r4
  806fa0:	a1c0a30e 	bge	r20,r7,807230 <_realloc_r+0x3dc>
  806fa4:	4080004c 	andi	r2,r8,1
  806fa8:	1000551e 	bne	r2,zero,807100 <_realloc_r+0x2ac>
  806fac:	80800017 	ldw	r2,0(r16)
  806fb0:	80afc83a 	sub	r23,r16,r2
  806fb4:	b8c00117 	ldw	r3,4(r23)
  806fb8:	00bfff04 	movi	r2,-4
  806fbc:	1884703a 	and	r2,r3,r2
  806fc0:	30002e26 	beq	r6,zero,80707c <_realloc_r+0x228>
  806fc4:	3240b926 	beq	r6,r9,8072ac <_realloc_r+0x458>
  806fc8:	98a9883a 	add	r20,r19,r2
  806fcc:	2509883a 	add	r4,r4,r20
  806fd0:	d9000015 	stw	r4,0(sp)
  806fd4:	21c02a16 	blt	r4,r7,807080 <_realloc_r+0x22c>
  806fd8:	30800317 	ldw	r2,12(r6)
  806fdc:	30c00217 	ldw	r3,8(r6)
  806fe0:	01400904 	movi	r5,36
  806fe4:	99bfff04 	addi	r6,r19,-4
  806fe8:	18800315 	stw	r2,12(r3)
  806fec:	10c00215 	stw	r3,8(r2)
  806ff0:	b9000317 	ldw	r4,12(r23)
  806ff4:	b8800217 	ldw	r2,8(r23)
  806ff8:	b82b883a 	mov	r21,r23
  806ffc:	bc000204 	addi	r16,r23,8
  807000:	20800215 	stw	r2,8(r4)
  807004:	11000315 	stw	r4,12(r2)
  807008:	2980e436 	bltu	r5,r6,80739c <_realloc_r+0x548>
  80700c:	008004c4 	movi	r2,19
  807010:	9009883a 	mov	r4,r18
  807014:	8011883a 	mov	r8,r16
  807018:	11800f2e 	bgeu	r2,r6,807058 <_realloc_r+0x204>
  80701c:	90800017 	ldw	r2,0(r18)
  807020:	ba000404 	addi	r8,r23,16
  807024:	91000204 	addi	r4,r18,8
  807028:	b8800215 	stw	r2,8(r23)
  80702c:	90c00117 	ldw	r3,4(r18)
  807030:	008006c4 	movi	r2,27
  807034:	b8c00315 	stw	r3,12(r23)
  807038:	1180072e 	bgeu	r2,r6,807058 <_realloc_r+0x204>
  80703c:	90c00217 	ldw	r3,8(r18)
  807040:	ba000604 	addi	r8,r23,24
  807044:	91000404 	addi	r4,r18,16
  807048:	b8c00415 	stw	r3,16(r23)
  80704c:	90800317 	ldw	r2,12(r18)
  807050:	b8800515 	stw	r2,20(r23)
  807054:	3140e726 	beq	r6,r5,8073f4 <_realloc_r+0x5a0>
  807058:	20800017 	ldw	r2,0(r4)
  80705c:	dd000017 	ldw	r20,0(sp)
  807060:	b80f883a 	mov	r7,r23
  807064:	40800015 	stw	r2,0(r8)
  807068:	20c00117 	ldw	r3,4(r4)
  80706c:	40c00115 	stw	r3,4(r8)
  807070:	20800217 	ldw	r2,8(r4)
  807074:	40800215 	stw	r2,8(r8)
  807078:	003f9706 	br	806ed8 <_realloc_r+0x84>
  80707c:	98a9883a 	add	r20,r19,r2
  807080:	a1c01f16 	blt	r20,r7,807100 <_realloc_r+0x2ac>
  807084:	b8c00317 	ldw	r3,12(r23)
  807088:	b8800217 	ldw	r2,8(r23)
  80708c:	99bfff04 	addi	r6,r19,-4
  807090:	01400904 	movi	r5,36
  807094:	b82b883a 	mov	r21,r23
  807098:	18800215 	stw	r2,8(r3)
  80709c:	10c00315 	stw	r3,12(r2)
  8070a0:	bc000204 	addi	r16,r23,8
  8070a4:	2980c336 	bltu	r5,r6,8073b4 <_realloc_r+0x560>
  8070a8:	008004c4 	movi	r2,19
  8070ac:	9009883a 	mov	r4,r18
  8070b0:	8011883a 	mov	r8,r16
  8070b4:	11800f2e 	bgeu	r2,r6,8070f4 <_realloc_r+0x2a0>
  8070b8:	90800017 	ldw	r2,0(r18)
  8070bc:	ba000404 	addi	r8,r23,16
  8070c0:	91000204 	addi	r4,r18,8
  8070c4:	b8800215 	stw	r2,8(r23)
  8070c8:	90c00117 	ldw	r3,4(r18)
  8070cc:	008006c4 	movi	r2,27
  8070d0:	b8c00315 	stw	r3,12(r23)
  8070d4:	1180072e 	bgeu	r2,r6,8070f4 <_realloc_r+0x2a0>
  8070d8:	90c00217 	ldw	r3,8(r18)
  8070dc:	ba000604 	addi	r8,r23,24
  8070e0:	91000404 	addi	r4,r18,16
  8070e4:	b8c00415 	stw	r3,16(r23)
  8070e8:	90800317 	ldw	r2,12(r18)
  8070ec:	b8800515 	stw	r2,20(r23)
  8070f0:	3140c726 	beq	r6,r5,807410 <_realloc_r+0x5bc>
  8070f4:	20800017 	ldw	r2,0(r4)
  8070f8:	b80f883a 	mov	r7,r23
  8070fc:	003fd906 	br	807064 <_realloc_r+0x210>
  807100:	880b883a 	mov	r5,r17
  807104:	b009883a 	mov	r4,r22
  807108:	08054240 	call	805424 <_malloc_r>
  80710c:	1023883a 	mov	r17,r2
  807110:	10002526 	beq	r2,zero,8071a8 <_realloc_r+0x354>
  807114:	80800117 	ldw	r2,4(r16)
  807118:	00ffff84 	movi	r3,-2
  80711c:	893ffe04 	addi	r4,r17,-8
  807120:	10c4703a 	and	r2,r2,r3
  807124:	8085883a 	add	r2,r16,r2
  807128:	20809526 	beq	r4,r2,807380 <_realloc_r+0x52c>
  80712c:	99bfff04 	addi	r6,r19,-4
  807130:	01c00904 	movi	r7,36
  807134:	39804536 	bltu	r7,r6,80724c <_realloc_r+0x3f8>
  807138:	008004c4 	movi	r2,19
  80713c:	9009883a 	mov	r4,r18
  807140:	880b883a 	mov	r5,r17
  807144:	11800f2e 	bgeu	r2,r6,807184 <_realloc_r+0x330>
  807148:	90800017 	ldw	r2,0(r18)
  80714c:	89400204 	addi	r5,r17,8
  807150:	91000204 	addi	r4,r18,8
  807154:	88800015 	stw	r2,0(r17)
  807158:	90c00117 	ldw	r3,4(r18)
  80715c:	008006c4 	movi	r2,27
  807160:	88c00115 	stw	r3,4(r17)
  807164:	1180072e 	bgeu	r2,r6,807184 <_realloc_r+0x330>
  807168:	90c00217 	ldw	r3,8(r18)
  80716c:	89400404 	addi	r5,r17,16
  807170:	91000404 	addi	r4,r18,16
  807174:	88c00215 	stw	r3,8(r17)
  807178:	90800317 	ldw	r2,12(r18)
  80717c:	88800315 	stw	r2,12(r17)
  807180:	31c09126 	beq	r6,r7,8073c8 <_realloc_r+0x574>
  807184:	20800017 	ldw	r2,0(r4)
  807188:	28800015 	stw	r2,0(r5)
  80718c:	20c00117 	ldw	r3,4(r4)
  807190:	28c00115 	stw	r3,4(r5)
  807194:	20800217 	ldw	r2,8(r4)
  807198:	28800215 	stw	r2,8(r5)
  80719c:	900b883a 	mov	r5,r18
  8071a0:	b009883a 	mov	r4,r22
  8071a4:	080489c0 	call	80489c <_free_r>
  8071a8:	b009883a 	mov	r4,r22
  8071ac:	080b1e00 	call	80b1e0 <__malloc_unlock>
  8071b0:	003f5e06 	br	806f2c <_realloc_r+0xd8>
  8071b4:	300b883a 	mov	r5,r6
  8071b8:	dfc00b17 	ldw	ra,44(sp)
  8071bc:	df000a17 	ldw	fp,40(sp)
  8071c0:	ddc00917 	ldw	r23,36(sp)
  8071c4:	dd800817 	ldw	r22,32(sp)
  8071c8:	dd400717 	ldw	r21,28(sp)
  8071cc:	dd000617 	ldw	r20,24(sp)
  8071d0:	dcc00517 	ldw	r19,20(sp)
  8071d4:	dc800417 	ldw	r18,16(sp)
  8071d8:	dc400317 	ldw	r17,12(sp)
  8071dc:	dc000217 	ldw	r16,8(sp)
  8071e0:	dec00c04 	addi	sp,sp,48
  8071e4:	08054241 	jmpi	805424 <_malloc_r>
  8071e8:	38800117 	ldw	r2,4(r7)
  8071ec:	e54b883a 	add	r5,fp,r21
  8071f0:	31000054 	ori	r4,r6,1
  8071f4:	1080004c 	andi	r2,r2,1
  8071f8:	1704b03a 	or	r2,r2,fp
  8071fc:	38800115 	stw	r2,4(r7)
  807200:	29000115 	stw	r4,4(r5)
  807204:	2987883a 	add	r3,r5,r6
  807208:	18800117 	ldw	r2,4(r3)
  80720c:	29400204 	addi	r5,r5,8
  807210:	b009883a 	mov	r4,r22
  807214:	10800054 	ori	r2,r2,1
  807218:	18800115 	stw	r2,4(r3)
  80721c:	080489c0 	call	80489c <_free_r>
  807220:	003f3806 	br	806f04 <_realloc_r+0xb0>
  807224:	000d883a 	mov	r6,zero
  807228:	0009883a 	mov	r4,zero
  80722c:	003f5d06 	br	806fa4 <_realloc_r+0x150>
  807230:	30c00217 	ldw	r3,8(r6)
  807234:	30800317 	ldw	r2,12(r6)
  807238:	800f883a 	mov	r7,r16
  80723c:	84000204 	addi	r16,r16,8
  807240:	10c00215 	stw	r3,8(r2)
  807244:	18800315 	stw	r2,12(r3)
  807248:	003f2306 	br	806ed8 <_realloc_r+0x84>
  80724c:	8809883a 	mov	r4,r17
  807250:	900b883a 	mov	r5,r18
  807254:	0805ce80 	call	805ce8 <memmove>
  807258:	003fd006 	br	80719c <_realloc_r+0x348>
  80725c:	30800117 	ldw	r2,4(r6)
  807260:	e0c00404 	addi	r3,fp,16
  807264:	1108703a 	and	r4,r2,r4
  807268:	9905883a 	add	r2,r19,r4
  80726c:	10ff4d16 	blt	r2,r3,806fa4 <_realloc_r+0x150>
  807270:	1705c83a 	sub	r2,r2,fp
  807274:	870b883a 	add	r5,r16,fp
  807278:	10800054 	ori	r2,r2,1
  80727c:	28800115 	stw	r2,4(r5)
  807280:	80c00117 	ldw	r3,4(r16)
  807284:	008020b4 	movhi	r2,130
  807288:	10ae3204 	addi	r2,r2,-18232
  80728c:	b009883a 	mov	r4,r22
  807290:	18c0004c 	andi	r3,r3,1
  807294:	e0c6b03a 	or	r3,fp,r3
  807298:	11400215 	stw	r5,8(r2)
  80729c:	80c00115 	stw	r3,4(r16)
  8072a0:	080b1e00 	call	80b1e0 <__malloc_unlock>
  8072a4:	84400204 	addi	r17,r16,8
  8072a8:	003f2006 	br	806f2c <_realloc_r+0xd8>
  8072ac:	98a9883a 	add	r20,r19,r2
  8072b0:	2509883a 	add	r4,r4,r20
  8072b4:	e0800404 	addi	r2,fp,16
  8072b8:	d9000115 	stw	r4,4(sp)
  8072bc:	20bf7016 	blt	r4,r2,807080 <_realloc_r+0x22c>
  8072c0:	b8c00317 	ldw	r3,12(r23)
  8072c4:	b8800217 	ldw	r2,8(r23)
  8072c8:	99bfff04 	addi	r6,r19,-4
  8072cc:	01400904 	movi	r5,36
  8072d0:	18800215 	stw	r2,8(r3)
  8072d4:	10c00315 	stw	r3,12(r2)
  8072d8:	bc400204 	addi	r17,r23,8
  8072dc:	29804136 	bltu	r5,r6,8073e4 <_realloc_r+0x590>
  8072e0:	008004c4 	movi	r2,19
  8072e4:	9009883a 	mov	r4,r18
  8072e8:	880f883a 	mov	r7,r17
  8072ec:	11800f2e 	bgeu	r2,r6,80732c <_realloc_r+0x4d8>
  8072f0:	90800017 	ldw	r2,0(r18)
  8072f4:	b9c00404 	addi	r7,r23,16
  8072f8:	91000204 	addi	r4,r18,8
  8072fc:	b8800215 	stw	r2,8(r23)
  807300:	90c00117 	ldw	r3,4(r18)
  807304:	008006c4 	movi	r2,27
  807308:	b8c00315 	stw	r3,12(r23)
  80730c:	1180072e 	bgeu	r2,r6,80732c <_realloc_r+0x4d8>
  807310:	90c00217 	ldw	r3,8(r18)
  807314:	b9c00604 	addi	r7,r23,24
  807318:	91000404 	addi	r4,r18,16
  80731c:	b8c00415 	stw	r3,16(r23)
  807320:	90800317 	ldw	r2,12(r18)
  807324:	b8800515 	stw	r2,20(r23)
  807328:	31404026 	beq	r6,r5,80742c <_realloc_r+0x5d8>
  80732c:	20800017 	ldw	r2,0(r4)
  807330:	38800015 	stw	r2,0(r7)
  807334:	20c00117 	ldw	r3,4(r4)
  807338:	38c00115 	stw	r3,4(r7)
  80733c:	20800217 	ldw	r2,8(r4)
  807340:	38800215 	stw	r2,8(r7)
  807344:	d8c00117 	ldw	r3,4(sp)
  807348:	bf0b883a 	add	r5,r23,fp
  80734c:	b009883a 	mov	r4,r22
  807350:	1f05c83a 	sub	r2,r3,fp
  807354:	10800054 	ori	r2,r2,1
  807358:	28800115 	stw	r2,4(r5)
  80735c:	b8c00117 	ldw	r3,4(r23)
  807360:	008020b4 	movhi	r2,130
  807364:	10ae3204 	addi	r2,r2,-18232
  807368:	11400215 	stw	r5,8(r2)
  80736c:	18c0004c 	andi	r3,r3,1
  807370:	e0c6b03a 	or	r3,fp,r3
  807374:	b8c00115 	stw	r3,4(r23)
  807378:	080b1e00 	call	80b1e0 <__malloc_unlock>
  80737c:	003eeb06 	br	806f2c <_realloc_r+0xd8>
  807380:	20800117 	ldw	r2,4(r4)
  807384:	00ffff04 	movi	r3,-4
  807388:	800f883a 	mov	r7,r16
  80738c:	10c4703a 	and	r2,r2,r3
  807390:	98a9883a 	add	r20,r19,r2
  807394:	84000204 	addi	r16,r16,8
  807398:	003ecf06 	br	806ed8 <_realloc_r+0x84>
  80739c:	900b883a 	mov	r5,r18
  8073a0:	8009883a 	mov	r4,r16
  8073a4:	0805ce80 	call	805ce8 <memmove>
  8073a8:	dd000017 	ldw	r20,0(sp)
  8073ac:	b80f883a 	mov	r7,r23
  8073b0:	003ec906 	br	806ed8 <_realloc_r+0x84>
  8073b4:	900b883a 	mov	r5,r18
  8073b8:	8009883a 	mov	r4,r16
  8073bc:	0805ce80 	call	805ce8 <memmove>
  8073c0:	b80f883a 	mov	r7,r23
  8073c4:	003ec406 	br	806ed8 <_realloc_r+0x84>
  8073c8:	90c00417 	ldw	r3,16(r18)
  8073cc:	89400604 	addi	r5,r17,24
  8073d0:	91000604 	addi	r4,r18,24
  8073d4:	88c00415 	stw	r3,16(r17)
  8073d8:	90800517 	ldw	r2,20(r18)
  8073dc:	88800515 	stw	r2,20(r17)
  8073e0:	003f6806 	br	807184 <_realloc_r+0x330>
  8073e4:	900b883a 	mov	r5,r18
  8073e8:	8809883a 	mov	r4,r17
  8073ec:	0805ce80 	call	805ce8 <memmove>
  8073f0:	003fd406 	br	807344 <_realloc_r+0x4f0>
  8073f4:	90c00417 	ldw	r3,16(r18)
  8073f8:	91000604 	addi	r4,r18,24
  8073fc:	ba000804 	addi	r8,r23,32
  807400:	b8c00615 	stw	r3,24(r23)
  807404:	90800517 	ldw	r2,20(r18)
  807408:	b8800715 	stw	r2,28(r23)
  80740c:	003f1206 	br	807058 <_realloc_r+0x204>
  807410:	90c00417 	ldw	r3,16(r18)
  807414:	91000604 	addi	r4,r18,24
  807418:	ba000804 	addi	r8,r23,32
  80741c:	b8c00615 	stw	r3,24(r23)
  807420:	90800517 	ldw	r2,20(r18)
  807424:	b8800715 	stw	r2,28(r23)
  807428:	003f3206 	br	8070f4 <_realloc_r+0x2a0>
  80742c:	90c00417 	ldw	r3,16(r18)
  807430:	91000604 	addi	r4,r18,24
  807434:	b9c00804 	addi	r7,r23,32
  807438:	b8c00615 	stw	r3,24(r23)
  80743c:	90800517 	ldw	r2,20(r18)
  807440:	b8800715 	stw	r2,28(r23)
  807444:	003fb906 	br	80732c <_realloc_r+0x4d8>

00807448 <__isinfd>:
  807448:	200d883a 	mov	r6,r4
  80744c:	0109c83a 	sub	r4,zero,r4
  807450:	2188b03a 	or	r4,r4,r6
  807454:	2008d7fa 	srli	r4,r4,31
  807458:	00a00034 	movhi	r2,32768
  80745c:	10bfffc4 	addi	r2,r2,-1
  807460:	1144703a 	and	r2,r2,r5
  807464:	2088b03a 	or	r4,r4,r2
  807468:	009ffc34 	movhi	r2,32752
  80746c:	1105c83a 	sub	r2,r2,r4
  807470:	0087c83a 	sub	r3,zero,r2
  807474:	10c4b03a 	or	r2,r2,r3
  807478:	1004d7fa 	srli	r2,r2,31
  80747c:	00c00044 	movi	r3,1
  807480:	1885c83a 	sub	r2,r3,r2
  807484:	f800283a 	ret

00807488 <__isnand>:
  807488:	200d883a 	mov	r6,r4
  80748c:	0109c83a 	sub	r4,zero,r4
  807490:	2188b03a 	or	r4,r4,r6
  807494:	2008d7fa 	srli	r4,r4,31
  807498:	00a00034 	movhi	r2,32768
  80749c:	10bfffc4 	addi	r2,r2,-1
  8074a0:	1144703a 	and	r2,r2,r5
  8074a4:	2088b03a 	or	r4,r4,r2
  8074a8:	009ffc34 	movhi	r2,32752
  8074ac:	1105c83a 	sub	r2,r2,r4
  8074b0:	1004d7fa 	srli	r2,r2,31
  8074b4:	f800283a 	ret

008074b8 <_sbrk_r>:
  8074b8:	defffd04 	addi	sp,sp,-12
  8074bc:	dc000015 	stw	r16,0(sp)
  8074c0:	040020b4 	movhi	r16,130
  8074c4:	843aed04 	addi	r16,r16,-5196
  8074c8:	dc400115 	stw	r17,4(sp)
  8074cc:	80000015 	stw	zero,0(r16)
  8074d0:	2023883a 	mov	r17,r4
  8074d4:	2809883a 	mov	r4,r5
  8074d8:	dfc00215 	stw	ra,8(sp)
  8074dc:	080ad900 	call	80ad90 <sbrk>
  8074e0:	1007883a 	mov	r3,r2
  8074e4:	00bfffc4 	movi	r2,-1
  8074e8:	18800626 	beq	r3,r2,807504 <_sbrk_r+0x4c>
  8074ec:	1805883a 	mov	r2,r3
  8074f0:	dfc00217 	ldw	ra,8(sp)
  8074f4:	dc400117 	ldw	r17,4(sp)
  8074f8:	dc000017 	ldw	r16,0(sp)
  8074fc:	dec00304 	addi	sp,sp,12
  807500:	f800283a 	ret
  807504:	80800017 	ldw	r2,0(r16)
  807508:	103ff826 	beq	r2,zero,8074ec <_sbrk_r+0x34>
  80750c:	88800015 	stw	r2,0(r17)
  807510:	1805883a 	mov	r2,r3
  807514:	dfc00217 	ldw	ra,8(sp)
  807518:	dc400117 	ldw	r17,4(sp)
  80751c:	dc000017 	ldw	r16,0(sp)
  807520:	dec00304 	addi	sp,sp,12
  807524:	f800283a 	ret

00807528 <__sclose>:
  807528:	2940038f 	ldh	r5,14(r5)
  80752c:	08078701 	jmpi	807870 <_close_r>

00807530 <__sseek>:
  807530:	defffe04 	addi	sp,sp,-8
  807534:	dc000015 	stw	r16,0(sp)
  807538:	2821883a 	mov	r16,r5
  80753c:	2940038f 	ldh	r5,14(r5)
  807540:	dfc00115 	stw	ra,4(sp)
  807544:	0807ae80 	call	807ae8 <_lseek_r>
  807548:	1007883a 	mov	r3,r2
  80754c:	00bfffc4 	movi	r2,-1
  807550:	18800926 	beq	r3,r2,807578 <__sseek+0x48>
  807554:	8080030b 	ldhu	r2,12(r16)
  807558:	80c01415 	stw	r3,80(r16)
  80755c:	10840014 	ori	r2,r2,4096
  807560:	8080030d 	sth	r2,12(r16)
  807564:	1805883a 	mov	r2,r3
  807568:	dfc00117 	ldw	ra,4(sp)
  80756c:	dc000017 	ldw	r16,0(sp)
  807570:	dec00204 	addi	sp,sp,8
  807574:	f800283a 	ret
  807578:	8080030b 	ldhu	r2,12(r16)
  80757c:	10bbffcc 	andi	r2,r2,61439
  807580:	8080030d 	sth	r2,12(r16)
  807584:	1805883a 	mov	r2,r3
  807588:	dfc00117 	ldw	ra,4(sp)
  80758c:	dc000017 	ldw	r16,0(sp)
  807590:	dec00204 	addi	sp,sp,8
  807594:	f800283a 	ret

00807598 <__swrite>:
  807598:	2880030b 	ldhu	r2,12(r5)
  80759c:	defffb04 	addi	sp,sp,-20
  8075a0:	dcc00315 	stw	r19,12(sp)
  8075a4:	1080400c 	andi	r2,r2,256
  8075a8:	dc800215 	stw	r18,8(sp)
  8075ac:	dc400115 	stw	r17,4(sp)
  8075b0:	dc000015 	stw	r16,0(sp)
  8075b4:	3027883a 	mov	r19,r6
  8075b8:	3825883a 	mov	r18,r7
  8075bc:	dfc00415 	stw	ra,16(sp)
  8075c0:	2821883a 	mov	r16,r5
  8075c4:	000d883a 	mov	r6,zero
  8075c8:	01c00084 	movi	r7,2
  8075cc:	2023883a 	mov	r17,r4
  8075d0:	10000226 	beq	r2,zero,8075dc <__swrite+0x44>
  8075d4:	2940038f 	ldh	r5,14(r5)
  8075d8:	0807ae80 	call	807ae8 <_lseek_r>
  8075dc:	8080030b 	ldhu	r2,12(r16)
  8075e0:	8140038f 	ldh	r5,14(r16)
  8075e4:	8809883a 	mov	r4,r17
  8075e8:	10bbffcc 	andi	r2,r2,61439
  8075ec:	980d883a 	mov	r6,r19
  8075f0:	900f883a 	mov	r7,r18
  8075f4:	8080030d 	sth	r2,12(r16)
  8075f8:	dfc00417 	ldw	ra,16(sp)
  8075fc:	dcc00317 	ldw	r19,12(sp)
  807600:	dc800217 	ldw	r18,8(sp)
  807604:	dc400117 	ldw	r17,4(sp)
  807608:	dc000017 	ldw	r16,0(sp)
  80760c:	dec00504 	addi	sp,sp,20
  807610:	08077301 	jmpi	807730 <_write_r>

00807614 <__sread>:
  807614:	defffe04 	addi	sp,sp,-8
  807618:	dc000015 	stw	r16,0(sp)
  80761c:	2821883a 	mov	r16,r5
  807620:	2940038f 	ldh	r5,14(r5)
  807624:	dfc00115 	stw	ra,4(sp)
  807628:	0807b600 	call	807b60 <_read_r>
  80762c:	1007883a 	mov	r3,r2
  807630:	10000816 	blt	r2,zero,807654 <__sread+0x40>
  807634:	80801417 	ldw	r2,80(r16)
  807638:	10c5883a 	add	r2,r2,r3
  80763c:	80801415 	stw	r2,80(r16)
  807640:	1805883a 	mov	r2,r3
  807644:	dfc00117 	ldw	ra,4(sp)
  807648:	dc000017 	ldw	r16,0(sp)
  80764c:	dec00204 	addi	sp,sp,8
  807650:	f800283a 	ret
  807654:	8080030b 	ldhu	r2,12(r16)
  807658:	10bbffcc 	andi	r2,r2,61439
  80765c:	8080030d 	sth	r2,12(r16)
  807660:	1805883a 	mov	r2,r3
  807664:	dfc00117 	ldw	ra,4(sp)
  807668:	dc000017 	ldw	r16,0(sp)
  80766c:	dec00204 	addi	sp,sp,8
  807670:	f800283a 	ret

00807674 <strcmp>:
  807674:	2144b03a 	or	r2,r4,r5
  807678:	108000cc 	andi	r2,r2,3
  80767c:	10001d1e 	bne	r2,zero,8076f4 <strcmp+0x80>
  807680:	200f883a 	mov	r7,r4
  807684:	28800017 	ldw	r2,0(r5)
  807688:	21000017 	ldw	r4,0(r4)
  80768c:	280d883a 	mov	r6,r5
  807690:	2080161e 	bne	r4,r2,8076ec <strcmp+0x78>
  807694:	023fbff4 	movhi	r8,65279
  807698:	423fbfc4 	addi	r8,r8,-257
  80769c:	2207883a 	add	r3,r4,r8
  8076a0:	01602074 	movhi	r5,32897
  8076a4:	29602004 	addi	r5,r5,-32640
  8076a8:	1946703a 	and	r3,r3,r5
  8076ac:	0104303a 	nor	r2,zero,r4
  8076b0:	10c4703a 	and	r2,r2,r3
  8076b4:	10001c1e 	bne	r2,zero,807728 <strcmp+0xb4>
  8076b8:	4013883a 	mov	r9,r8
  8076bc:	2811883a 	mov	r8,r5
  8076c0:	00000106 	br	8076c8 <strcmp+0x54>
  8076c4:	1800181e 	bne	r3,zero,807728 <strcmp+0xb4>
  8076c8:	39c00104 	addi	r7,r7,4
  8076cc:	39000017 	ldw	r4,0(r7)
  8076d0:	31800104 	addi	r6,r6,4
  8076d4:	31400017 	ldw	r5,0(r6)
  8076d8:	2245883a 	add	r2,r4,r9
  8076dc:	1204703a 	and	r2,r2,r8
  8076e0:	0106303a 	nor	r3,zero,r4
  8076e4:	1886703a 	and	r3,r3,r2
  8076e8:	217ff626 	beq	r4,r5,8076c4 <strcmp+0x50>
  8076ec:	3809883a 	mov	r4,r7
  8076f0:	300b883a 	mov	r5,r6
  8076f4:	20c00007 	ldb	r3,0(r4)
  8076f8:	1800051e 	bne	r3,zero,807710 <strcmp+0x9c>
  8076fc:	00000606 	br	807718 <strcmp+0xa4>
  807700:	21000044 	addi	r4,r4,1
  807704:	20c00007 	ldb	r3,0(r4)
  807708:	29400044 	addi	r5,r5,1
  80770c:	18000226 	beq	r3,zero,807718 <strcmp+0xa4>
  807710:	28800007 	ldb	r2,0(r5)
  807714:	18bffa26 	beq	r3,r2,807700 <strcmp+0x8c>
  807718:	20c00003 	ldbu	r3,0(r4)
  80771c:	28800003 	ldbu	r2,0(r5)
  807720:	1885c83a 	sub	r2,r3,r2
  807724:	f800283a 	ret
  807728:	0005883a 	mov	r2,zero
  80772c:	f800283a 	ret

00807730 <_write_r>:
  807730:	defffd04 	addi	sp,sp,-12
  807734:	dc000015 	stw	r16,0(sp)
  807738:	040020b4 	movhi	r16,130
  80773c:	843aed04 	addi	r16,r16,-5196
  807740:	dc400115 	stw	r17,4(sp)
  807744:	80000015 	stw	zero,0(r16)
  807748:	2023883a 	mov	r17,r4
  80774c:	2809883a 	mov	r4,r5
  807750:	300b883a 	mov	r5,r6
  807754:	380d883a 	mov	r6,r7
  807758:	dfc00215 	stw	ra,8(sp)
  80775c:	080ae4c0 	call	80ae4c <write>
  807760:	1007883a 	mov	r3,r2
  807764:	00bfffc4 	movi	r2,-1
  807768:	18800626 	beq	r3,r2,807784 <_write_r+0x54>
  80776c:	1805883a 	mov	r2,r3
  807770:	dfc00217 	ldw	ra,8(sp)
  807774:	dc400117 	ldw	r17,4(sp)
  807778:	dc000017 	ldw	r16,0(sp)
  80777c:	dec00304 	addi	sp,sp,12
  807780:	f800283a 	ret
  807784:	80800017 	ldw	r2,0(r16)
  807788:	103ff826 	beq	r2,zero,80776c <_write_r+0x3c>
  80778c:	88800015 	stw	r2,0(r17)
  807790:	1805883a 	mov	r2,r3
  807794:	dfc00217 	ldw	ra,8(sp)
  807798:	dc400117 	ldw	r17,4(sp)
  80779c:	dc000017 	ldw	r16,0(sp)
  8077a0:	dec00304 	addi	sp,sp,12
  8077a4:	f800283a 	ret

008077a8 <_calloc_r>:
  8077a8:	defffe04 	addi	sp,sp,-8
  8077ac:	dc400015 	stw	r17,0(sp)
  8077b0:	2023883a 	mov	r17,r4
  8077b4:	2809883a 	mov	r4,r5
  8077b8:	300b883a 	mov	r5,r6
  8077bc:	dfc00115 	stw	ra,4(sp)
  8077c0:	0809b1c0 	call	809b1c <__mulsi3>
  8077c4:	100b883a 	mov	r5,r2
  8077c8:	8809883a 	mov	r4,r17
  8077cc:	08054240 	call	805424 <_malloc_r>
  8077d0:	1023883a 	mov	r17,r2
  8077d4:	01c00904 	movi	r7,36
  8077d8:	10000d26 	beq	r2,zero,807810 <_calloc_r+0x68>
  8077dc:	10ffff17 	ldw	r3,-4(r2)
  8077e0:	1009883a 	mov	r4,r2
  8077e4:	00bfff04 	movi	r2,-4
  8077e8:	1886703a 	and	r3,r3,r2
  8077ec:	1887883a 	add	r3,r3,r2
  8077f0:	180d883a 	mov	r6,r3
  8077f4:	000b883a 	mov	r5,zero
  8077f8:	38c01736 	bltu	r7,r3,807858 <_calloc_r+0xb0>
  8077fc:	008004c4 	movi	r2,19
  807800:	10c00836 	bltu	r2,r3,807824 <_calloc_r+0x7c>
  807804:	20000215 	stw	zero,8(r4)
  807808:	20000015 	stw	zero,0(r4)
  80780c:	20000115 	stw	zero,4(r4)
  807810:	8805883a 	mov	r2,r17
  807814:	dfc00117 	ldw	ra,4(sp)
  807818:	dc400017 	ldw	r17,0(sp)
  80781c:	dec00204 	addi	sp,sp,8
  807820:	f800283a 	ret
  807824:	008006c4 	movi	r2,27
  807828:	88000015 	stw	zero,0(r17)
  80782c:	88000115 	stw	zero,4(r17)
  807830:	89000204 	addi	r4,r17,8
  807834:	10fff32e 	bgeu	r2,r3,807804 <_calloc_r+0x5c>
  807838:	88000215 	stw	zero,8(r17)
  80783c:	88000315 	stw	zero,12(r17)
  807840:	89000404 	addi	r4,r17,16
  807844:	19ffef1e 	bne	r3,r7,807804 <_calloc_r+0x5c>
  807848:	89000604 	addi	r4,r17,24
  80784c:	88000415 	stw	zero,16(r17)
  807850:	88000515 	stw	zero,20(r17)
  807854:	003feb06 	br	807804 <_calloc_r+0x5c>
  807858:	08007a00 	call	8007a0 <memset>
  80785c:	8805883a 	mov	r2,r17
  807860:	dfc00117 	ldw	ra,4(sp)
  807864:	dc400017 	ldw	r17,0(sp)
  807868:	dec00204 	addi	sp,sp,8
  80786c:	f800283a 	ret

00807870 <_close_r>:
  807870:	defffd04 	addi	sp,sp,-12
  807874:	dc000015 	stw	r16,0(sp)
  807878:	040020b4 	movhi	r16,130
  80787c:	843aed04 	addi	r16,r16,-5196
  807880:	dc400115 	stw	r17,4(sp)
  807884:	80000015 	stw	zero,0(r16)
  807888:	2023883a 	mov	r17,r4
  80788c:	2809883a 	mov	r4,r5
  807890:	dfc00215 	stw	ra,8(sp)
  807894:	080a20c0 	call	80a20c <close>
  807898:	1007883a 	mov	r3,r2
  80789c:	00bfffc4 	movi	r2,-1
  8078a0:	18800626 	beq	r3,r2,8078bc <_close_r+0x4c>
  8078a4:	1805883a 	mov	r2,r3
  8078a8:	dfc00217 	ldw	ra,8(sp)
  8078ac:	dc400117 	ldw	r17,4(sp)
  8078b0:	dc000017 	ldw	r16,0(sp)
  8078b4:	dec00304 	addi	sp,sp,12
  8078b8:	f800283a 	ret
  8078bc:	80800017 	ldw	r2,0(r16)
  8078c0:	103ff826 	beq	r2,zero,8078a4 <_close_r+0x34>
  8078c4:	88800015 	stw	r2,0(r17)
  8078c8:	1805883a 	mov	r2,r3
  8078cc:	dfc00217 	ldw	ra,8(sp)
  8078d0:	dc400117 	ldw	r17,4(sp)
  8078d4:	dc000017 	ldw	r16,0(sp)
  8078d8:	dec00304 	addi	sp,sp,12
  8078dc:	f800283a 	ret

008078e0 <_fclose_r>:
  8078e0:	defffc04 	addi	sp,sp,-16
  8078e4:	dc400115 	stw	r17,4(sp)
  8078e8:	dc000015 	stw	r16,0(sp)
  8078ec:	dfc00315 	stw	ra,12(sp)
  8078f0:	dc800215 	stw	r18,8(sp)
  8078f4:	2821883a 	mov	r16,r5
  8078f8:	2023883a 	mov	r17,r4
  8078fc:	28002926 	beq	r5,zero,8079a4 <_fclose_r+0xc4>
  807900:	08044d40 	call	8044d4 <__sfp_lock_acquire>
  807904:	88000226 	beq	r17,zero,807910 <_fclose_r+0x30>
  807908:	88800e17 	ldw	r2,56(r17)
  80790c:	10002d26 	beq	r2,zero,8079c4 <_fclose_r+0xe4>
  807910:	8080030f 	ldh	r2,12(r16)
  807914:	10002226 	beq	r2,zero,8079a0 <_fclose_r+0xc0>
  807918:	8809883a 	mov	r4,r17
  80791c:	800b883a 	mov	r5,r16
  807920:	080424c0 	call	80424c <_fflush_r>
  807924:	1025883a 	mov	r18,r2
  807928:	80800b17 	ldw	r2,44(r16)
  80792c:	10000426 	beq	r2,zero,807940 <_fclose_r+0x60>
  807930:	81400717 	ldw	r5,28(r16)
  807934:	8809883a 	mov	r4,r17
  807938:	103ee83a 	callr	r2
  80793c:	10002a16 	blt	r2,zero,8079e8 <_fclose_r+0x108>
  807940:	8080030b 	ldhu	r2,12(r16)
  807944:	1080200c 	andi	r2,r2,128
  807948:	1000231e 	bne	r2,zero,8079d8 <_fclose_r+0xf8>
  80794c:	81400c17 	ldw	r5,48(r16)
  807950:	28000526 	beq	r5,zero,807968 <_fclose_r+0x88>
  807954:	80801004 	addi	r2,r16,64
  807958:	28800226 	beq	r5,r2,807964 <_fclose_r+0x84>
  80795c:	8809883a 	mov	r4,r17
  807960:	080489c0 	call	80489c <_free_r>
  807964:	80000c15 	stw	zero,48(r16)
  807968:	81401117 	ldw	r5,68(r16)
  80796c:	28000326 	beq	r5,zero,80797c <_fclose_r+0x9c>
  807970:	8809883a 	mov	r4,r17
  807974:	080489c0 	call	80489c <_free_r>
  807978:	80001115 	stw	zero,68(r16)
  80797c:	8000030d 	sth	zero,12(r16)
  807980:	08044d80 	call	8044d8 <__sfp_lock_release>
  807984:	9005883a 	mov	r2,r18
  807988:	dfc00317 	ldw	ra,12(sp)
  80798c:	dc800217 	ldw	r18,8(sp)
  807990:	dc400117 	ldw	r17,4(sp)
  807994:	dc000017 	ldw	r16,0(sp)
  807998:	dec00404 	addi	sp,sp,16
  80799c:	f800283a 	ret
  8079a0:	08044d80 	call	8044d8 <__sfp_lock_release>
  8079a4:	0025883a 	mov	r18,zero
  8079a8:	9005883a 	mov	r2,r18
  8079ac:	dfc00317 	ldw	ra,12(sp)
  8079b0:	dc800217 	ldw	r18,8(sp)
  8079b4:	dc400117 	ldw	r17,4(sp)
  8079b8:	dc000017 	ldw	r16,0(sp)
  8079bc:	dec00404 	addi	sp,sp,16
  8079c0:	f800283a 	ret
  8079c4:	8809883a 	mov	r4,r17
  8079c8:	08044e40 	call	8044e4 <__sinit>
  8079cc:	8080030f 	ldh	r2,12(r16)
  8079d0:	103fd11e 	bne	r2,zero,807918 <_fclose_r+0x38>
  8079d4:	003ff206 	br	8079a0 <_fclose_r+0xc0>
  8079d8:	81400417 	ldw	r5,16(r16)
  8079dc:	8809883a 	mov	r4,r17
  8079e0:	080489c0 	call	80489c <_free_r>
  8079e4:	003fd906 	br	80794c <_fclose_r+0x6c>
  8079e8:	04bfffc4 	movi	r18,-1
  8079ec:	003fd406 	br	807940 <_fclose_r+0x60>

008079f0 <fclose>:
  8079f0:	008020b4 	movhi	r2,130
  8079f4:	10b3da04 	addi	r2,r2,-12440
  8079f8:	200b883a 	mov	r5,r4
  8079fc:	11000017 	ldw	r4,0(r2)
  807a00:	08078e01 	jmpi	8078e0 <_fclose_r>

00807a04 <_fstat_r>:
  807a04:	defffd04 	addi	sp,sp,-12
  807a08:	dc000015 	stw	r16,0(sp)
  807a0c:	040020b4 	movhi	r16,130
  807a10:	843aed04 	addi	r16,r16,-5196
  807a14:	dc400115 	stw	r17,4(sp)
  807a18:	80000015 	stw	zero,0(r16)
  807a1c:	2023883a 	mov	r17,r4
  807a20:	2809883a 	mov	r4,r5
  807a24:	300b883a 	mov	r5,r6
  807a28:	dfc00215 	stw	ra,8(sp)
  807a2c:	080a3980 	call	80a398 <fstat>
  807a30:	1007883a 	mov	r3,r2
  807a34:	00bfffc4 	movi	r2,-1
  807a38:	18800626 	beq	r3,r2,807a54 <_fstat_r+0x50>
  807a3c:	1805883a 	mov	r2,r3
  807a40:	dfc00217 	ldw	ra,8(sp)
  807a44:	dc400117 	ldw	r17,4(sp)
  807a48:	dc000017 	ldw	r16,0(sp)
  807a4c:	dec00304 	addi	sp,sp,12
  807a50:	f800283a 	ret
  807a54:	80800017 	ldw	r2,0(r16)
  807a58:	103ff826 	beq	r2,zero,807a3c <_fstat_r+0x38>
  807a5c:	88800015 	stw	r2,0(r17)
  807a60:	1805883a 	mov	r2,r3
  807a64:	dfc00217 	ldw	ra,8(sp)
  807a68:	dc400117 	ldw	r17,4(sp)
  807a6c:	dc000017 	ldw	r16,0(sp)
  807a70:	dec00304 	addi	sp,sp,12
  807a74:	f800283a 	ret

00807a78 <_isatty_r>:
  807a78:	defffd04 	addi	sp,sp,-12
  807a7c:	dc000015 	stw	r16,0(sp)
  807a80:	040020b4 	movhi	r16,130
  807a84:	843aed04 	addi	r16,r16,-5196
  807a88:	dc400115 	stw	r17,4(sp)
  807a8c:	80000015 	stw	zero,0(r16)
  807a90:	2023883a 	mov	r17,r4
  807a94:	2809883a 	mov	r4,r5
  807a98:	dfc00215 	stw	ra,8(sp)
  807a9c:	080a4d00 	call	80a4d0 <isatty>
  807aa0:	1007883a 	mov	r3,r2
  807aa4:	00bfffc4 	movi	r2,-1
  807aa8:	18800626 	beq	r3,r2,807ac4 <_isatty_r+0x4c>
  807aac:	1805883a 	mov	r2,r3
  807ab0:	dfc00217 	ldw	ra,8(sp)
  807ab4:	dc400117 	ldw	r17,4(sp)
  807ab8:	dc000017 	ldw	r16,0(sp)
  807abc:	dec00304 	addi	sp,sp,12
  807ac0:	f800283a 	ret
  807ac4:	80800017 	ldw	r2,0(r16)
  807ac8:	103ff826 	beq	r2,zero,807aac <_isatty_r+0x34>
  807acc:	88800015 	stw	r2,0(r17)
  807ad0:	1805883a 	mov	r2,r3
  807ad4:	dfc00217 	ldw	ra,8(sp)
  807ad8:	dc400117 	ldw	r17,4(sp)
  807adc:	dc000017 	ldw	r16,0(sp)
  807ae0:	dec00304 	addi	sp,sp,12
  807ae4:	f800283a 	ret

00807ae8 <_lseek_r>:
  807ae8:	defffd04 	addi	sp,sp,-12
  807aec:	dc000015 	stw	r16,0(sp)
  807af0:	040020b4 	movhi	r16,130
  807af4:	843aed04 	addi	r16,r16,-5196
  807af8:	dc400115 	stw	r17,4(sp)
  807afc:	80000015 	stw	zero,0(r16)
  807b00:	2023883a 	mov	r17,r4
  807b04:	2809883a 	mov	r4,r5
  807b08:	300b883a 	mov	r5,r6
  807b0c:	380d883a 	mov	r6,r7
  807b10:	dfc00215 	stw	ra,8(sp)
  807b14:	080a6e00 	call	80a6e0 <lseek>
  807b18:	1007883a 	mov	r3,r2
  807b1c:	00bfffc4 	movi	r2,-1
  807b20:	18800626 	beq	r3,r2,807b3c <_lseek_r+0x54>
  807b24:	1805883a 	mov	r2,r3
  807b28:	dfc00217 	ldw	ra,8(sp)
  807b2c:	dc400117 	ldw	r17,4(sp)
  807b30:	dc000017 	ldw	r16,0(sp)
  807b34:	dec00304 	addi	sp,sp,12
  807b38:	f800283a 	ret
  807b3c:	80800017 	ldw	r2,0(r16)
  807b40:	103ff826 	beq	r2,zero,807b24 <_lseek_r+0x3c>
  807b44:	88800015 	stw	r2,0(r17)
  807b48:	1805883a 	mov	r2,r3
  807b4c:	dfc00217 	ldw	ra,8(sp)
  807b50:	dc400117 	ldw	r17,4(sp)
  807b54:	dc000017 	ldw	r16,0(sp)
  807b58:	dec00304 	addi	sp,sp,12
  807b5c:	f800283a 	ret

00807b60 <_read_r>:
  807b60:	defffd04 	addi	sp,sp,-12
  807b64:	dc000015 	stw	r16,0(sp)
  807b68:	040020b4 	movhi	r16,130
  807b6c:	843aed04 	addi	r16,r16,-5196
  807b70:	dc400115 	stw	r17,4(sp)
  807b74:	80000015 	stw	zero,0(r16)
  807b78:	2023883a 	mov	r17,r4
  807b7c:	2809883a 	mov	r4,r5
  807b80:	300b883a 	mov	r5,r6
  807b84:	380d883a 	mov	r6,r7
  807b88:	dfc00215 	stw	ra,8(sp)
  807b8c:	080ab940 	call	80ab94 <read>
  807b90:	1007883a 	mov	r3,r2
  807b94:	00bfffc4 	movi	r2,-1
  807b98:	18800626 	beq	r3,r2,807bb4 <_read_r+0x54>
  807b9c:	1805883a 	mov	r2,r3
  807ba0:	dfc00217 	ldw	ra,8(sp)
  807ba4:	dc400117 	ldw	r17,4(sp)
  807ba8:	dc000017 	ldw	r16,0(sp)
  807bac:	dec00304 	addi	sp,sp,12
  807bb0:	f800283a 	ret
  807bb4:	80800017 	ldw	r2,0(r16)
  807bb8:	103ff826 	beq	r2,zero,807b9c <_read_r+0x3c>
  807bbc:	88800015 	stw	r2,0(r17)
  807bc0:	1805883a 	mov	r2,r3
  807bc4:	dfc00217 	ldw	ra,8(sp)
  807bc8:	dc400117 	ldw	r17,4(sp)
  807bcc:	dc000017 	ldw	r16,0(sp)
  807bd0:	dec00304 	addi	sp,sp,12
  807bd4:	f800283a 	ret

00807bd8 <__udivdi3>:
  807bd8:	defff104 	addi	sp,sp,-60
  807bdc:	0015883a 	mov	r10,zero
  807be0:	2005883a 	mov	r2,r4
  807be4:	3011883a 	mov	r8,r6
  807be8:	df000d15 	stw	fp,52(sp)
  807bec:	dd400a15 	stw	r21,40(sp)
  807bf0:	dcc00815 	stw	r19,32(sp)
  807bf4:	dfc00e15 	stw	ra,56(sp)
  807bf8:	ddc00c15 	stw	r23,48(sp)
  807bfc:	dd800b15 	stw	r22,44(sp)
  807c00:	dd000915 	stw	r20,36(sp)
  807c04:	dc800715 	stw	r18,28(sp)
  807c08:	dc400615 	stw	r17,24(sp)
  807c0c:	dc000515 	stw	r16,20(sp)
  807c10:	da800315 	stw	r10,12(sp)
  807c14:	4027883a 	mov	r19,r8
  807c18:	1039883a 	mov	fp,r2
  807c1c:	282b883a 	mov	r21,r5
  807c20:	da800415 	stw	r10,16(sp)
  807c24:	3800401e 	bne	r7,zero,807d28 <__udivdi3+0x150>
  807c28:	2a006536 	bltu	r5,r8,807dc0 <__udivdi3+0x1e8>
  807c2c:	4000b526 	beq	r8,zero,807f04 <__udivdi3+0x32c>
  807c30:	00bfffd4 	movui	r2,65535
  807c34:	14c0ad36 	bltu	r2,r19,807eec <__udivdi3+0x314>
  807c38:	00803fc4 	movi	r2,255
  807c3c:	14c15e36 	bltu	r2,r19,8081b8 <__udivdi3+0x5e0>
  807c40:	000b883a 	mov	r5,zero
  807c44:	0005883a 	mov	r2,zero
  807c48:	9884d83a 	srl	r2,r19,r2
  807c4c:	010020b4 	movhi	r4,130
  807c50:	212c8404 	addi	r4,r4,-19952
  807c54:	01800804 	movi	r6,32
  807c58:	1105883a 	add	r2,r2,r4
  807c5c:	10c00003 	ldbu	r3,0(r2)
  807c60:	28c7883a 	add	r3,r5,r3
  807c64:	30e9c83a 	sub	r20,r6,r3
  807c68:	a0010a1e 	bne	r20,zero,808094 <__udivdi3+0x4bc>
  807c6c:	982ed43a 	srli	r23,r19,16
  807c70:	acebc83a 	sub	r21,r21,r19
  807c74:	9dbfffcc 	andi	r22,r19,65535
  807c78:	05000044 	movi	r20,1
  807c7c:	a809883a 	mov	r4,r21
  807c80:	b80b883a 	mov	r5,r23
  807c84:	0809b0c0 	call	809b0c <__udivsi3>
  807c88:	100b883a 	mov	r5,r2
  807c8c:	b009883a 	mov	r4,r22
  807c90:	1021883a 	mov	r16,r2
  807c94:	0809b1c0 	call	809b1c <__mulsi3>
  807c98:	a809883a 	mov	r4,r21
  807c9c:	b80b883a 	mov	r5,r23
  807ca0:	1023883a 	mov	r17,r2
  807ca4:	0809b140 	call	809b14 <__umodsi3>
  807ca8:	1004943a 	slli	r2,r2,16
  807cac:	e006d43a 	srli	r3,fp,16
  807cb0:	10c4b03a 	or	r2,r2,r3
  807cb4:	1440042e 	bgeu	r2,r17,807cc8 <__udivdi3+0xf0>
  807cb8:	14c5883a 	add	r2,r2,r19
  807cbc:	843fffc4 	addi	r16,r16,-1
  807cc0:	14c00136 	bltu	r2,r19,807cc8 <__udivdi3+0xf0>
  807cc4:	14415c36 	bltu	r2,r17,808238 <__udivdi3+0x660>
  807cc8:	1463c83a 	sub	r17,r2,r17
  807ccc:	8809883a 	mov	r4,r17
  807cd0:	b80b883a 	mov	r5,r23
  807cd4:	0809b0c0 	call	809b0c <__udivsi3>
  807cd8:	100b883a 	mov	r5,r2
  807cdc:	b009883a 	mov	r4,r22
  807ce0:	102b883a 	mov	r21,r2
  807ce4:	0809b1c0 	call	809b1c <__mulsi3>
  807ce8:	8809883a 	mov	r4,r17
  807cec:	b80b883a 	mov	r5,r23
  807cf0:	1025883a 	mov	r18,r2
  807cf4:	0809b140 	call	809b14 <__umodsi3>
  807cf8:	1004943a 	slli	r2,r2,16
  807cfc:	e0ffffcc 	andi	r3,fp,65535
  807d00:	10c4b03a 	or	r2,r2,r3
  807d04:	1480042e 	bgeu	r2,r18,807d18 <__udivdi3+0x140>
  807d08:	9885883a 	add	r2,r19,r2
  807d0c:	ad7fffc4 	addi	r21,r21,-1
  807d10:	14c00136 	bltu	r2,r19,807d18 <__udivdi3+0x140>
  807d14:	14813c36 	bltu	r2,r18,808208 <__udivdi3+0x630>
  807d18:	8004943a 	slli	r2,r16,16
  807d1c:	a009883a 	mov	r4,r20
  807d20:	a884b03a 	or	r2,r21,r2
  807d24:	00001506 	br	807d7c <__udivdi3+0x1a4>
  807d28:	380d883a 	mov	r6,r7
  807d2c:	29c06c36 	bltu	r5,r7,807ee0 <__udivdi3+0x308>
  807d30:	00bfffd4 	movui	r2,65535
  807d34:	11c06436 	bltu	r2,r7,807ec8 <__udivdi3+0x2f0>
  807d38:	00803fc4 	movi	r2,255
  807d3c:	11c11836 	bltu	r2,r7,8081a0 <__udivdi3+0x5c8>
  807d40:	000b883a 	mov	r5,zero
  807d44:	0005883a 	mov	r2,zero
  807d48:	3084d83a 	srl	r2,r6,r2
  807d4c:	010020b4 	movhi	r4,130
  807d50:	212c8404 	addi	r4,r4,-19952
  807d54:	01c00804 	movi	r7,32
  807d58:	1105883a 	add	r2,r2,r4
  807d5c:	10c00003 	ldbu	r3,0(r2)
  807d60:	28c7883a 	add	r3,r5,r3
  807d64:	38edc83a 	sub	r22,r7,r3
  807d68:	b000731e 	bne	r22,zero,807f38 <__udivdi3+0x360>
  807d6c:	35400136 	bltu	r6,r21,807d74 <__udivdi3+0x19c>
  807d70:	e4c05b36 	bltu	fp,r19,807ee0 <__udivdi3+0x308>
  807d74:	00800044 	movi	r2,1
  807d78:	0009883a 	mov	r4,zero
  807d7c:	d8800315 	stw	r2,12(sp)
  807d80:	d9400317 	ldw	r5,12(sp)
  807d84:	2007883a 	mov	r3,r4
  807d88:	d9000415 	stw	r4,16(sp)
  807d8c:	2805883a 	mov	r2,r5
  807d90:	dfc00e17 	ldw	ra,56(sp)
  807d94:	df000d17 	ldw	fp,52(sp)
  807d98:	ddc00c17 	ldw	r23,48(sp)
  807d9c:	dd800b17 	ldw	r22,44(sp)
  807da0:	dd400a17 	ldw	r21,40(sp)
  807da4:	dd000917 	ldw	r20,36(sp)
  807da8:	dcc00817 	ldw	r19,32(sp)
  807dac:	dc800717 	ldw	r18,28(sp)
  807db0:	dc400617 	ldw	r17,24(sp)
  807db4:	dc000517 	ldw	r16,20(sp)
  807db8:	dec00f04 	addi	sp,sp,60
  807dbc:	f800283a 	ret
  807dc0:	00bfffd4 	movui	r2,65535
  807dc4:	12005636 	bltu	r2,r8,807f20 <__udivdi3+0x348>
  807dc8:	00803fc4 	movi	r2,255
  807dcc:	12010036 	bltu	r2,r8,8081d0 <__udivdi3+0x5f8>
  807dd0:	000b883a 	mov	r5,zero
  807dd4:	0005883a 	mov	r2,zero
  807dd8:	9884d83a 	srl	r2,r19,r2
  807ddc:	010020b4 	movhi	r4,130
  807de0:	212c8404 	addi	r4,r4,-19952
  807de4:	01800804 	movi	r6,32
  807de8:	1105883a 	add	r2,r2,r4
  807dec:	10c00003 	ldbu	r3,0(r2)
  807df0:	28c7883a 	add	r3,r5,r3
  807df4:	30cbc83a 	sub	r5,r6,r3
  807df8:	28000626 	beq	r5,zero,807e14 <__udivdi3+0x23c>
  807dfc:	3145c83a 	sub	r2,r6,r5
  807e00:	e084d83a 	srl	r2,fp,r2
  807e04:	a946983a 	sll	r3,r21,r5
  807e08:	e178983a 	sll	fp,fp,r5
  807e0c:	9966983a 	sll	r19,r19,r5
  807e10:	18aab03a 	or	r21,r3,r2
  807e14:	982ed43a 	srli	r23,r19,16
  807e18:	a809883a 	mov	r4,r21
  807e1c:	9cbfffcc 	andi	r18,r19,65535
  807e20:	b80b883a 	mov	r5,r23
  807e24:	0809b0c0 	call	809b0c <__udivsi3>
  807e28:	100b883a 	mov	r5,r2
  807e2c:	9009883a 	mov	r4,r18
  807e30:	1021883a 	mov	r16,r2
  807e34:	0809b1c0 	call	809b1c <__mulsi3>
  807e38:	a809883a 	mov	r4,r21
  807e3c:	b80b883a 	mov	r5,r23
  807e40:	1023883a 	mov	r17,r2
  807e44:	0809b140 	call	809b14 <__umodsi3>
  807e48:	1004943a 	slli	r2,r2,16
  807e4c:	e006d43a 	srli	r3,fp,16
  807e50:	10c4b03a 	or	r2,r2,r3
  807e54:	1440042e 	bgeu	r2,r17,807e68 <__udivdi3+0x290>
  807e58:	14c5883a 	add	r2,r2,r19
  807e5c:	843fffc4 	addi	r16,r16,-1
  807e60:	14c00136 	bltu	r2,r19,807e68 <__udivdi3+0x290>
  807e64:	1440ea36 	bltu	r2,r17,808210 <__udivdi3+0x638>
  807e68:	1463c83a 	sub	r17,r2,r17
  807e6c:	8809883a 	mov	r4,r17
  807e70:	b80b883a 	mov	r5,r23
  807e74:	0809b0c0 	call	809b0c <__udivsi3>
  807e78:	100b883a 	mov	r5,r2
  807e7c:	9009883a 	mov	r4,r18
  807e80:	102b883a 	mov	r21,r2
  807e84:	0809b1c0 	call	809b1c <__mulsi3>
  807e88:	8809883a 	mov	r4,r17
  807e8c:	b80b883a 	mov	r5,r23
  807e90:	1025883a 	mov	r18,r2
  807e94:	0809b140 	call	809b14 <__umodsi3>
  807e98:	1004943a 	slli	r2,r2,16
  807e9c:	e0ffffcc 	andi	r3,fp,65535
  807ea0:	10c4b03a 	or	r2,r2,r3
  807ea4:	1480042e 	bgeu	r2,r18,807eb8 <__udivdi3+0x2e0>
  807ea8:	9885883a 	add	r2,r19,r2
  807eac:	ad7fffc4 	addi	r21,r21,-1
  807eb0:	14c00136 	bltu	r2,r19,807eb8 <__udivdi3+0x2e0>
  807eb4:	1480d936 	bltu	r2,r18,80821c <__udivdi3+0x644>
  807eb8:	8004943a 	slli	r2,r16,16
  807ebc:	0009883a 	mov	r4,zero
  807ec0:	a884b03a 	or	r2,r21,r2
  807ec4:	003fad06 	br	807d7c <__udivdi3+0x1a4>
  807ec8:	00804034 	movhi	r2,256
  807ecc:	10bfffc4 	addi	r2,r2,-1
  807ed0:	11c0b636 	bltu	r2,r7,8081ac <__udivdi3+0x5d4>
  807ed4:	01400404 	movi	r5,16
  807ed8:	2805883a 	mov	r2,r5
  807edc:	003f9a06 	br	807d48 <__udivdi3+0x170>
  807ee0:	0005883a 	mov	r2,zero
  807ee4:	0009883a 	mov	r4,zero
  807ee8:	003fa406 	br	807d7c <__udivdi3+0x1a4>
  807eec:	00804034 	movhi	r2,256
  807ef0:	10bfffc4 	addi	r2,r2,-1
  807ef4:	14c0b336 	bltu	r2,r19,8081c4 <__udivdi3+0x5ec>
  807ef8:	01400404 	movi	r5,16
  807efc:	2805883a 	mov	r2,r5
  807f00:	003f5106 	br	807c48 <__udivdi3+0x70>
  807f04:	01000044 	movi	r4,1
  807f08:	000b883a 	mov	r5,zero
  807f0c:	0809b0c0 	call	809b0c <__udivsi3>
  807f10:	1027883a 	mov	r19,r2
  807f14:	00bfffd4 	movui	r2,65535
  807f18:	14fff436 	bltu	r2,r19,807eec <__udivdi3+0x314>
  807f1c:	003f4606 	br	807c38 <__udivdi3+0x60>
  807f20:	00804034 	movhi	r2,256
  807f24:	10bfffc4 	addi	r2,r2,-1
  807f28:	1200ac36 	bltu	r2,r8,8081dc <__udivdi3+0x604>
  807f2c:	01400404 	movi	r5,16
  807f30:	2805883a 	mov	r2,r5
  807f34:	003fa806 	br	807dd8 <__udivdi3+0x200>
  807f38:	3d85c83a 	sub	r2,r7,r22
  807f3c:	3588983a 	sll	r4,r6,r22
  807f40:	9886d83a 	srl	r3,r19,r2
  807f44:	a8a2d83a 	srl	r17,r21,r2
  807f48:	e084d83a 	srl	r2,fp,r2
  807f4c:	20eeb03a 	or	r23,r4,r3
  807f50:	b824d43a 	srli	r18,r23,16
  807f54:	ad86983a 	sll	r3,r21,r22
  807f58:	8809883a 	mov	r4,r17
  807f5c:	900b883a 	mov	r5,r18
  807f60:	1886b03a 	or	r3,r3,r2
  807f64:	d8c00115 	stw	r3,4(sp)
  807f68:	bc3fffcc 	andi	r16,r23,65535
  807f6c:	0809b0c0 	call	809b0c <__udivsi3>
  807f70:	100b883a 	mov	r5,r2
  807f74:	8009883a 	mov	r4,r16
  807f78:	1029883a 	mov	r20,r2
  807f7c:	0809b1c0 	call	809b1c <__mulsi3>
  807f80:	900b883a 	mov	r5,r18
  807f84:	8809883a 	mov	r4,r17
  807f88:	102b883a 	mov	r21,r2
  807f8c:	0809b140 	call	809b14 <__umodsi3>
  807f90:	d9400117 	ldw	r5,4(sp)
  807f94:	1004943a 	slli	r2,r2,16
  807f98:	9da6983a 	sll	r19,r19,r22
  807f9c:	2806d43a 	srli	r3,r5,16
  807fa0:	10c4b03a 	or	r2,r2,r3
  807fa4:	1540032e 	bgeu	r2,r21,807fb4 <__udivdi3+0x3dc>
  807fa8:	15c5883a 	add	r2,r2,r23
  807fac:	a53fffc4 	addi	r20,r20,-1
  807fb0:	15c0912e 	bgeu	r2,r23,8081f8 <__udivdi3+0x620>
  807fb4:	1563c83a 	sub	r17,r2,r21
  807fb8:	8809883a 	mov	r4,r17
  807fbc:	900b883a 	mov	r5,r18
  807fc0:	0809b0c0 	call	809b0c <__udivsi3>
  807fc4:	100b883a 	mov	r5,r2
  807fc8:	8009883a 	mov	r4,r16
  807fcc:	102b883a 	mov	r21,r2
  807fd0:	0809b1c0 	call	809b1c <__mulsi3>
  807fd4:	8809883a 	mov	r4,r17
  807fd8:	900b883a 	mov	r5,r18
  807fdc:	1021883a 	mov	r16,r2
  807fe0:	0809b140 	call	809b14 <__umodsi3>
  807fe4:	da800117 	ldw	r10,4(sp)
  807fe8:	1004943a 	slli	r2,r2,16
  807fec:	50ffffcc 	andi	r3,r10,65535
  807ff0:	10c6b03a 	or	r3,r2,r3
  807ff4:	1c00032e 	bgeu	r3,r16,808004 <__udivdi3+0x42c>
  807ff8:	1dc7883a 	add	r3,r3,r23
  807ffc:	ad7fffc4 	addi	r21,r21,-1
  808000:	1dc0792e 	bgeu	r3,r23,8081e8 <__udivdi3+0x610>
  808004:	a004943a 	slli	r2,r20,16
  808008:	982ed43a 	srli	r23,r19,16
  80800c:	9cffffcc 	andi	r19,r19,65535
  808010:	a8a4b03a 	or	r18,r21,r2
  808014:	947fffcc 	andi	r17,r18,65535
  808018:	902ad43a 	srli	r21,r18,16
  80801c:	8809883a 	mov	r4,r17
  808020:	980b883a 	mov	r5,r19
  808024:	1c21c83a 	sub	r16,r3,r16
  808028:	0809b1c0 	call	809b1c <__mulsi3>
  80802c:	8809883a 	mov	r4,r17
  808030:	b80b883a 	mov	r5,r23
  808034:	1029883a 	mov	r20,r2
  808038:	0809b1c0 	call	809b1c <__mulsi3>
  80803c:	980b883a 	mov	r5,r19
  808040:	a809883a 	mov	r4,r21
  808044:	1023883a 	mov	r17,r2
  808048:	0809b1c0 	call	809b1c <__mulsi3>
  80804c:	a809883a 	mov	r4,r21
  808050:	b80b883a 	mov	r5,r23
  808054:	1027883a 	mov	r19,r2
  808058:	0809b1c0 	call	809b1c <__mulsi3>
  80805c:	1009883a 	mov	r4,r2
  808060:	a004d43a 	srli	r2,r20,16
  808064:	8ce3883a 	add	r17,r17,r19
  808068:	1447883a 	add	r3,r2,r17
  80806c:	1cc0022e 	bgeu	r3,r19,808078 <__udivdi3+0x4a0>
  808070:	00800074 	movhi	r2,1
  808074:	2089883a 	add	r4,r4,r2
  808078:	1804d43a 	srli	r2,r3,16
  80807c:	2085883a 	add	r2,r4,r2
  808080:	80804436 	bltu	r16,r2,808194 <__udivdi3+0x5bc>
  808084:	80803e26 	beq	r16,r2,808180 <__udivdi3+0x5a8>
  808088:	9005883a 	mov	r2,r18
  80808c:	0009883a 	mov	r4,zero
  808090:	003f3a06 	br	807d7c <__udivdi3+0x1a4>
  808094:	9d26983a 	sll	r19,r19,r20
  808098:	3505c83a 	sub	r2,r6,r20
  80809c:	a8a2d83a 	srl	r17,r21,r2
  8080a0:	982ed43a 	srli	r23,r19,16
  8080a4:	e084d83a 	srl	r2,fp,r2
  8080a8:	ad06983a 	sll	r3,r21,r20
  8080ac:	8809883a 	mov	r4,r17
  8080b0:	b80b883a 	mov	r5,r23
  8080b4:	1886b03a 	or	r3,r3,r2
  8080b8:	d8c00015 	stw	r3,0(sp)
  8080bc:	9dbfffcc 	andi	r22,r19,65535
  8080c0:	0809b0c0 	call	809b0c <__udivsi3>
  8080c4:	100b883a 	mov	r5,r2
  8080c8:	b009883a 	mov	r4,r22
  8080cc:	d8800215 	stw	r2,8(sp)
  8080d0:	0809b1c0 	call	809b1c <__mulsi3>
  8080d4:	8809883a 	mov	r4,r17
  8080d8:	b80b883a 	mov	r5,r23
  8080dc:	102b883a 	mov	r21,r2
  8080e0:	0809b140 	call	809b14 <__umodsi3>
  8080e4:	d9000017 	ldw	r4,0(sp)
  8080e8:	1004943a 	slli	r2,r2,16
  8080ec:	2006d43a 	srli	r3,r4,16
  8080f0:	10c4b03a 	or	r2,r2,r3
  8080f4:	1540052e 	bgeu	r2,r21,80810c <__udivdi3+0x534>
  8080f8:	d9400217 	ldw	r5,8(sp)
  8080fc:	14c5883a 	add	r2,r2,r19
  808100:	297fffc4 	addi	r5,r5,-1
  808104:	d9400215 	stw	r5,8(sp)
  808108:	14c0462e 	bgeu	r2,r19,808224 <__udivdi3+0x64c>
  80810c:	1563c83a 	sub	r17,r2,r21
  808110:	8809883a 	mov	r4,r17
  808114:	b80b883a 	mov	r5,r23
  808118:	0809b0c0 	call	809b0c <__udivsi3>
  80811c:	100b883a 	mov	r5,r2
  808120:	b009883a 	mov	r4,r22
  808124:	1025883a 	mov	r18,r2
  808128:	0809b1c0 	call	809b1c <__mulsi3>
  80812c:	8809883a 	mov	r4,r17
  808130:	b80b883a 	mov	r5,r23
  808134:	1021883a 	mov	r16,r2
  808138:	0809b140 	call	809b14 <__umodsi3>
  80813c:	da800017 	ldw	r10,0(sp)
  808140:	1004943a 	slli	r2,r2,16
  808144:	50ffffcc 	andi	r3,r10,65535
  808148:	10c6b03a 	or	r3,r2,r3
  80814c:	1c00062e 	bgeu	r3,r16,808168 <__udivdi3+0x590>
  808150:	1cc7883a 	add	r3,r3,r19
  808154:	94bfffc4 	addi	r18,r18,-1
  808158:	1cc00336 	bltu	r3,r19,808168 <__udivdi3+0x590>
  80815c:	1c00022e 	bgeu	r3,r16,808168 <__udivdi3+0x590>
  808160:	94bfffc4 	addi	r18,r18,-1
  808164:	1cc7883a 	add	r3,r3,r19
  808168:	d9000217 	ldw	r4,8(sp)
  80816c:	e538983a 	sll	fp,fp,r20
  808170:	1c2bc83a 	sub	r21,r3,r16
  808174:	2004943a 	slli	r2,r4,16
  808178:	90a8b03a 	or	r20,r18,r2
  80817c:	003ebf06 	br	807c7c <__udivdi3+0xa4>
  808180:	1804943a 	slli	r2,r3,16
  808184:	e588983a 	sll	r4,fp,r22
  808188:	a0ffffcc 	andi	r3,r20,65535
  80818c:	10c5883a 	add	r2,r2,r3
  808190:	20bfbd2e 	bgeu	r4,r2,808088 <__udivdi3+0x4b0>
  808194:	90bfffc4 	addi	r2,r18,-1
  808198:	0009883a 	mov	r4,zero
  80819c:	003ef706 	br	807d7c <__udivdi3+0x1a4>
  8081a0:	01400204 	movi	r5,8
  8081a4:	2805883a 	mov	r2,r5
  8081a8:	003ee706 	br	807d48 <__udivdi3+0x170>
  8081ac:	01400604 	movi	r5,24
  8081b0:	2805883a 	mov	r2,r5
  8081b4:	003ee406 	br	807d48 <__udivdi3+0x170>
  8081b8:	01400204 	movi	r5,8
  8081bc:	2805883a 	mov	r2,r5
  8081c0:	003ea106 	br	807c48 <__udivdi3+0x70>
  8081c4:	01400604 	movi	r5,24
  8081c8:	2805883a 	mov	r2,r5
  8081cc:	003e9e06 	br	807c48 <__udivdi3+0x70>
  8081d0:	01400204 	movi	r5,8
  8081d4:	2805883a 	mov	r2,r5
  8081d8:	003eff06 	br	807dd8 <__udivdi3+0x200>
  8081dc:	01400604 	movi	r5,24
  8081e0:	2805883a 	mov	r2,r5
  8081e4:	003efc06 	br	807dd8 <__udivdi3+0x200>
  8081e8:	1c3f862e 	bgeu	r3,r16,808004 <__udivdi3+0x42c>
  8081ec:	1dc7883a 	add	r3,r3,r23
  8081f0:	ad7fffc4 	addi	r21,r21,-1
  8081f4:	003f8306 	br	808004 <__udivdi3+0x42c>
  8081f8:	157f6e2e 	bgeu	r2,r21,807fb4 <__udivdi3+0x3dc>
  8081fc:	a53fffc4 	addi	r20,r20,-1
  808200:	15c5883a 	add	r2,r2,r23
  808204:	003f6b06 	br	807fb4 <__udivdi3+0x3dc>
  808208:	ad7fffc4 	addi	r21,r21,-1
  80820c:	003ec206 	br	807d18 <__udivdi3+0x140>
  808210:	843fffc4 	addi	r16,r16,-1
  808214:	14c5883a 	add	r2,r2,r19
  808218:	003f1306 	br	807e68 <__udivdi3+0x290>
  80821c:	ad7fffc4 	addi	r21,r21,-1
  808220:	003f2506 	br	807eb8 <__udivdi3+0x2e0>
  808224:	157fb92e 	bgeu	r2,r21,80810c <__udivdi3+0x534>
  808228:	297fffc4 	addi	r5,r5,-1
  80822c:	14c5883a 	add	r2,r2,r19
  808230:	d9400215 	stw	r5,8(sp)
  808234:	003fb506 	br	80810c <__udivdi3+0x534>
  808238:	843fffc4 	addi	r16,r16,-1
  80823c:	14c5883a 	add	r2,r2,r19
  808240:	003ea106 	br	807cc8 <__udivdi3+0xf0>

00808244 <__umoddi3>:
  808244:	defff004 	addi	sp,sp,-64
  808248:	3011883a 	mov	r8,r6
  80824c:	000d883a 	mov	r6,zero
  808250:	dd400b15 	stw	r21,44(sp)
  808254:	dcc00915 	stw	r19,36(sp)
  808258:	dc000615 	stw	r16,24(sp)
  80825c:	dfc00f15 	stw	ra,60(sp)
  808260:	df000e15 	stw	fp,56(sp)
  808264:	ddc00d15 	stw	r23,52(sp)
  808268:	dd800c15 	stw	r22,48(sp)
  80826c:	dd000a15 	stw	r20,40(sp)
  808270:	dc800815 	stw	r18,32(sp)
  808274:	dc400715 	stw	r17,28(sp)
  808278:	2817883a 	mov	r11,r5
  80827c:	d9800415 	stw	r6,16(sp)
  808280:	4027883a 	mov	r19,r8
  808284:	d9800515 	stw	r6,20(sp)
  808288:	2021883a 	mov	r16,r4
  80828c:	282b883a 	mov	r21,r5
  808290:	38002c1e 	bne	r7,zero,808344 <__umoddi3+0x100>
  808294:	2a005636 	bltu	r5,r8,8083f0 <__umoddi3+0x1ac>
  808298:	40009a26 	beq	r8,zero,808504 <__umoddi3+0x2c0>
  80829c:	00bfffd4 	movui	r2,65535
  8082a0:	14c09236 	bltu	r2,r19,8084ec <__umoddi3+0x2a8>
  8082a4:	00803fc4 	movi	r2,255
  8082a8:	14c15c36 	bltu	r2,r19,80881c <__umoddi3+0x5d8>
  8082ac:	000b883a 	mov	r5,zero
  8082b0:	0005883a 	mov	r2,zero
  8082b4:	9884d83a 	srl	r2,r19,r2
  8082b8:	010020b4 	movhi	r4,130
  8082bc:	212c8404 	addi	r4,r4,-19952
  8082c0:	01800804 	movi	r6,32
  8082c4:	1105883a 	add	r2,r2,r4
  8082c8:	10c00003 	ldbu	r3,0(r2)
  8082cc:	28c7883a 	add	r3,r5,r3
  8082d0:	30e5c83a 	sub	r18,r6,r3
  8082d4:	9000a41e 	bne	r18,zero,808568 <__umoddi3+0x324>
  8082d8:	982ed43a 	srli	r23,r19,16
  8082dc:	acebc83a 	sub	r21,r21,r19
  8082e0:	9d3fffcc 	andi	r20,r19,65535
  8082e4:	002d883a 	mov	r22,zero
  8082e8:	a809883a 	mov	r4,r21
  8082ec:	b80b883a 	mov	r5,r23
  8082f0:	0809b0c0 	call	809b0c <__udivsi3>
  8082f4:	100b883a 	mov	r5,r2
  8082f8:	a009883a 	mov	r4,r20
  8082fc:	0809b1c0 	call	809b1c <__mulsi3>
  808300:	a809883a 	mov	r4,r21
  808304:	b80b883a 	mov	r5,r23
  808308:	1023883a 	mov	r17,r2
  80830c:	0809b140 	call	809b14 <__umodsi3>
  808310:	1004943a 	slli	r2,r2,16
  808314:	8006d43a 	srli	r3,r16,16
  808318:	10c4b03a 	or	r2,r2,r3
  80831c:	1440032e 	bgeu	r2,r17,80832c <__umoddi3+0xe8>
  808320:	14c5883a 	add	r2,r2,r19
  808324:	14c00136 	bltu	r2,r19,80832c <__umoddi3+0xe8>
  808328:	14415836 	bltu	r2,r17,80888c <__umoddi3+0x648>
  80832c:	1463c83a 	sub	r17,r2,r17
  808330:	8809883a 	mov	r4,r17
  808334:	b80b883a 	mov	r5,r23
  808338:	0809b0c0 	call	809b0c <__udivsi3>
  80833c:	a009883a 	mov	r4,r20
  808340:	00005306 	br	808490 <__umoddi3+0x24c>
  808344:	380d883a 	mov	r6,r7
  808348:	29c0132e 	bgeu	r5,r7,808398 <__umoddi3+0x154>
  80834c:	d9000415 	stw	r4,16(sp)
  808350:	d9400515 	stw	r5,20(sp)
  808354:	d9400417 	ldw	r5,16(sp)
  808358:	5813883a 	mov	r9,r11
  80835c:	2811883a 	mov	r8,r5
  808360:	4005883a 	mov	r2,r8
  808364:	4807883a 	mov	r3,r9
  808368:	dfc00f17 	ldw	ra,60(sp)
  80836c:	df000e17 	ldw	fp,56(sp)
  808370:	ddc00d17 	ldw	r23,52(sp)
  808374:	dd800c17 	ldw	r22,48(sp)
  808378:	dd400b17 	ldw	r21,44(sp)
  80837c:	dd000a17 	ldw	r20,40(sp)
  808380:	dcc00917 	ldw	r19,36(sp)
  808384:	dc800817 	ldw	r18,32(sp)
  808388:	dc400717 	ldw	r17,28(sp)
  80838c:	dc000617 	ldw	r16,24(sp)
  808390:	dec01004 	addi	sp,sp,64
  808394:	f800283a 	ret
  808398:	00bfffd4 	movui	r2,65535
  80839c:	11c06636 	bltu	r2,r7,808538 <__umoddi3+0x2f4>
  8083a0:	00803fc4 	movi	r2,255
  8083a4:	11c12036 	bltu	r2,r7,808828 <__umoddi3+0x5e4>
  8083a8:	000b883a 	mov	r5,zero
  8083ac:	0005883a 	mov	r2,zero
  8083b0:	3084d83a 	srl	r2,r6,r2
  8083b4:	010020b4 	movhi	r4,130
  8083b8:	212c8404 	addi	r4,r4,-19952
  8083bc:	01c00804 	movi	r7,32
  8083c0:	1105883a 	add	r2,r2,r4
  8083c4:	10c00003 	ldbu	r3,0(r2)
  8083c8:	28c7883a 	add	r3,r5,r3
  8083cc:	38e5c83a 	sub	r18,r7,r3
  8083d0:	9000941e 	bne	r18,zero,808624 <__umoddi3+0x3e0>
  8083d4:	35405e36 	bltu	r6,r21,808550 <__umoddi3+0x30c>
  8083d8:	84c05d2e 	bgeu	r16,r19,808550 <__umoddi3+0x30c>
  8083dc:	8011883a 	mov	r8,r16
  8083e0:	a813883a 	mov	r9,r21
  8083e4:	dc000415 	stw	r16,16(sp)
  8083e8:	dd400515 	stw	r21,20(sp)
  8083ec:	003fdc06 	br	808360 <__umoddi3+0x11c>
  8083f0:	00bfffd4 	movui	r2,65535
  8083f4:	12004a36 	bltu	r2,r8,808520 <__umoddi3+0x2dc>
  8083f8:	00803fc4 	movi	r2,255
  8083fc:	12010d36 	bltu	r2,r8,808834 <__umoddi3+0x5f0>
  808400:	000b883a 	mov	r5,zero
  808404:	0005883a 	mov	r2,zero
  808408:	9884d83a 	srl	r2,r19,r2
  80840c:	010020b4 	movhi	r4,130
  808410:	212c8404 	addi	r4,r4,-19952
  808414:	01800804 	movi	r6,32
  808418:	1105883a 	add	r2,r2,r4
  80841c:	10c00003 	ldbu	r3,0(r2)
  808420:	28c7883a 	add	r3,r5,r3
  808424:	30c7c83a 	sub	r3,r6,r3
  808428:	1800dc1e 	bne	r3,zero,80879c <__umoddi3+0x558>
  80842c:	002d883a 	mov	r22,zero
  808430:	982ed43a 	srli	r23,r19,16
  808434:	a809883a 	mov	r4,r21
  808438:	9cbfffcc 	andi	r18,r19,65535
  80843c:	b80b883a 	mov	r5,r23
  808440:	0809b0c0 	call	809b0c <__udivsi3>
  808444:	100b883a 	mov	r5,r2
  808448:	9009883a 	mov	r4,r18
  80844c:	0809b1c0 	call	809b1c <__mulsi3>
  808450:	a809883a 	mov	r4,r21
  808454:	b80b883a 	mov	r5,r23
  808458:	1023883a 	mov	r17,r2
  80845c:	0809b140 	call	809b14 <__umodsi3>
  808460:	1004943a 	slli	r2,r2,16
  808464:	8006d43a 	srli	r3,r16,16
  808468:	10c4b03a 	or	r2,r2,r3
  80846c:	1440032e 	bgeu	r2,r17,80847c <__umoddi3+0x238>
  808470:	14c5883a 	add	r2,r2,r19
  808474:	14c00136 	bltu	r2,r19,80847c <__umoddi3+0x238>
  808478:	14410236 	bltu	r2,r17,808884 <__umoddi3+0x640>
  80847c:	1463c83a 	sub	r17,r2,r17
  808480:	8809883a 	mov	r4,r17
  808484:	b80b883a 	mov	r5,r23
  808488:	0809b0c0 	call	809b0c <__udivsi3>
  80848c:	9009883a 	mov	r4,r18
  808490:	100b883a 	mov	r5,r2
  808494:	0809b1c0 	call	809b1c <__mulsi3>
  808498:	8809883a 	mov	r4,r17
  80849c:	b80b883a 	mov	r5,r23
  8084a0:	102b883a 	mov	r21,r2
  8084a4:	0809b140 	call	809b14 <__umodsi3>
  8084a8:	1004943a 	slli	r2,r2,16
  8084ac:	80ffffcc 	andi	r3,r16,65535
  8084b0:	10c4b03a 	or	r2,r2,r3
  8084b4:	1540042e 	bgeu	r2,r21,8084c8 <__umoddi3+0x284>
  8084b8:	14c5883a 	add	r2,r2,r19
  8084bc:	14c00236 	bltu	r2,r19,8084c8 <__umoddi3+0x284>
  8084c0:	1540012e 	bgeu	r2,r21,8084c8 <__umoddi3+0x284>
  8084c4:	14c5883a 	add	r2,r2,r19
  8084c8:	1545c83a 	sub	r2,r2,r21
  8084cc:	1584d83a 	srl	r2,r2,r22
  8084d0:	0013883a 	mov	r9,zero
  8084d4:	d8800415 	stw	r2,16(sp)
  8084d8:	d8c00417 	ldw	r3,16(sp)
  8084dc:	0005883a 	mov	r2,zero
  8084e0:	d8800515 	stw	r2,20(sp)
  8084e4:	1811883a 	mov	r8,r3
  8084e8:	003f9d06 	br	808360 <__umoddi3+0x11c>
  8084ec:	00804034 	movhi	r2,256
  8084f0:	10bfffc4 	addi	r2,r2,-1
  8084f4:	14c0c636 	bltu	r2,r19,808810 <__umoddi3+0x5cc>
  8084f8:	01400404 	movi	r5,16
  8084fc:	2805883a 	mov	r2,r5
  808500:	003f6c06 	br	8082b4 <__umoddi3+0x70>
  808504:	01000044 	movi	r4,1
  808508:	000b883a 	mov	r5,zero
  80850c:	0809b0c0 	call	809b0c <__udivsi3>
  808510:	1027883a 	mov	r19,r2
  808514:	00bfffd4 	movui	r2,65535
  808518:	14fff436 	bltu	r2,r19,8084ec <__umoddi3+0x2a8>
  80851c:	003f6106 	br	8082a4 <__umoddi3+0x60>
  808520:	00804034 	movhi	r2,256
  808524:	10bfffc4 	addi	r2,r2,-1
  808528:	1200c536 	bltu	r2,r8,808840 <__umoddi3+0x5fc>
  80852c:	01400404 	movi	r5,16
  808530:	2805883a 	mov	r2,r5
  808534:	003fb406 	br	808408 <__umoddi3+0x1c4>
  808538:	00804034 	movhi	r2,256
  80853c:	10bfffc4 	addi	r2,r2,-1
  808540:	11c0c236 	bltu	r2,r7,80884c <__umoddi3+0x608>
  808544:	01400404 	movi	r5,16
  808548:	2805883a 	mov	r2,r5
  80854c:	003f9806 	br	8083b0 <__umoddi3+0x16c>
  808550:	84c9c83a 	sub	r4,r16,r19
  808554:	8105803a 	cmpltu	r2,r16,r4
  808558:	a987c83a 	sub	r3,r21,r6
  80855c:	18abc83a 	sub	r21,r3,r2
  808560:	2021883a 	mov	r16,r4
  808564:	003f9d06 	br	8083dc <__umoddi3+0x198>
  808568:	9ca6983a 	sll	r19,r19,r18
  80856c:	3485c83a 	sub	r2,r6,r18
  808570:	a8a2d83a 	srl	r17,r21,r2
  808574:	982ed43a 	srli	r23,r19,16
  808578:	ac86983a 	sll	r3,r21,r18
  80857c:	8084d83a 	srl	r2,r16,r2
  808580:	8809883a 	mov	r4,r17
  808584:	b80b883a 	mov	r5,r23
  808588:	18b8b03a 	or	fp,r3,r2
  80858c:	9d3fffcc 	andi	r20,r19,65535
  808590:	0809b0c0 	call	809b0c <__udivsi3>
  808594:	100b883a 	mov	r5,r2
  808598:	a009883a 	mov	r4,r20
  80859c:	0809b1c0 	call	809b1c <__mulsi3>
  8085a0:	8809883a 	mov	r4,r17
  8085a4:	b80b883a 	mov	r5,r23
  8085a8:	102b883a 	mov	r21,r2
  8085ac:	0809b140 	call	809b14 <__umodsi3>
  8085b0:	1004943a 	slli	r2,r2,16
  8085b4:	e006d43a 	srli	r3,fp,16
  8085b8:	902d883a 	mov	r22,r18
  8085bc:	10c4b03a 	or	r2,r2,r3
  8085c0:	1540022e 	bgeu	r2,r21,8085cc <__umoddi3+0x388>
  8085c4:	14c5883a 	add	r2,r2,r19
  8085c8:	14c0ab2e 	bgeu	r2,r19,808878 <__umoddi3+0x634>
  8085cc:	1563c83a 	sub	r17,r2,r21
  8085d0:	8809883a 	mov	r4,r17
  8085d4:	b80b883a 	mov	r5,r23
  8085d8:	0809b0c0 	call	809b0c <__udivsi3>
  8085dc:	100b883a 	mov	r5,r2
  8085e0:	a009883a 	mov	r4,r20
  8085e4:	0809b1c0 	call	809b1c <__mulsi3>
  8085e8:	8809883a 	mov	r4,r17
  8085ec:	b80b883a 	mov	r5,r23
  8085f0:	102b883a 	mov	r21,r2
  8085f4:	0809b140 	call	809b14 <__umodsi3>
  8085f8:	1004943a 	slli	r2,r2,16
  8085fc:	e0ffffcc 	andi	r3,fp,65535
  808600:	10c4b03a 	or	r2,r2,r3
  808604:	1540042e 	bgeu	r2,r21,808618 <__umoddi3+0x3d4>
  808608:	14c5883a 	add	r2,r2,r19
  80860c:	14c00236 	bltu	r2,r19,808618 <__umoddi3+0x3d4>
  808610:	1540012e 	bgeu	r2,r21,808618 <__umoddi3+0x3d4>
  808614:	14c5883a 	add	r2,r2,r19
  808618:	84a0983a 	sll	r16,r16,r18
  80861c:	156bc83a 	sub	r21,r2,r21
  808620:	003f3106 	br	8082e8 <__umoddi3+0xa4>
  808624:	3c8fc83a 	sub	r7,r7,r18
  808628:	3486983a 	sll	r3,r6,r18
  80862c:	99c4d83a 	srl	r2,r19,r7
  808630:	a9e2d83a 	srl	r17,r21,r7
  808634:	ac8c983a 	sll	r6,r21,r18
  808638:	18acb03a 	or	r22,r3,r2
  80863c:	b02ed43a 	srli	r23,r22,16
  808640:	81c4d83a 	srl	r2,r16,r7
  808644:	8809883a 	mov	r4,r17
  808648:	b80b883a 	mov	r5,r23
  80864c:	308cb03a 	or	r6,r6,r2
  808650:	d9c00315 	stw	r7,12(sp)
  808654:	d9800215 	stw	r6,8(sp)
  808658:	b53fffcc 	andi	r20,r22,65535
  80865c:	0809b0c0 	call	809b0c <__udivsi3>
  808660:	100b883a 	mov	r5,r2
  808664:	a009883a 	mov	r4,r20
  808668:	1039883a 	mov	fp,r2
  80866c:	0809b1c0 	call	809b1c <__mulsi3>
  808670:	8809883a 	mov	r4,r17
  808674:	b80b883a 	mov	r5,r23
  808678:	102b883a 	mov	r21,r2
  80867c:	0809b140 	call	809b14 <__umodsi3>
  808680:	d9000217 	ldw	r4,8(sp)
  808684:	1004943a 	slli	r2,r2,16
  808688:	9ca6983a 	sll	r19,r19,r18
  80868c:	2006d43a 	srli	r3,r4,16
  808690:	84a0983a 	sll	r16,r16,r18
  808694:	dcc00015 	stw	r19,0(sp)
  808698:	10c4b03a 	or	r2,r2,r3
  80869c:	dc000115 	stw	r16,4(sp)
  8086a0:	1540032e 	bgeu	r2,r21,8086b0 <__umoddi3+0x46c>
  8086a4:	1585883a 	add	r2,r2,r22
  8086a8:	e73fffc4 	addi	fp,fp,-1
  8086ac:	15806e2e 	bgeu	r2,r22,808868 <__umoddi3+0x624>
  8086b0:	1563c83a 	sub	r17,r2,r21
  8086b4:	8809883a 	mov	r4,r17
  8086b8:	b80b883a 	mov	r5,r23
  8086bc:	0809b0c0 	call	809b0c <__udivsi3>
  8086c0:	100b883a 	mov	r5,r2
  8086c4:	a009883a 	mov	r4,r20
  8086c8:	1021883a 	mov	r16,r2
  8086cc:	0809b1c0 	call	809b1c <__mulsi3>
  8086d0:	b80b883a 	mov	r5,r23
  8086d4:	8809883a 	mov	r4,r17
  8086d8:	1029883a 	mov	r20,r2
  8086dc:	0809b140 	call	809b14 <__umodsi3>
  8086e0:	d9400217 	ldw	r5,8(sp)
  8086e4:	1004943a 	slli	r2,r2,16
  8086e8:	28ffffcc 	andi	r3,r5,65535
  8086ec:	10c4b03a 	or	r2,r2,r3
  8086f0:	1500032e 	bgeu	r2,r20,808700 <__umoddi3+0x4bc>
  8086f4:	1585883a 	add	r2,r2,r22
  8086f8:	843fffc4 	addi	r16,r16,-1
  8086fc:	1580562e 	bgeu	r2,r22,808858 <__umoddi3+0x614>
  808700:	d9800017 	ldw	r6,0(sp)
  808704:	e022943a 	slli	r17,fp,16
  808708:	302ed43a 	srli	r23,r6,16
  80870c:	8462b03a 	or	r17,r16,r17
  808710:	34ffffcc 	andi	r19,r6,65535
  808714:	882ad43a 	srli	r21,r17,16
  808718:	8c7fffcc 	andi	r17,r17,65535
  80871c:	8809883a 	mov	r4,r17
  808720:	980b883a 	mov	r5,r19
  808724:	1521c83a 	sub	r16,r2,r20
  808728:	0809b1c0 	call	809b1c <__mulsi3>
  80872c:	8809883a 	mov	r4,r17
  808730:	b80b883a 	mov	r5,r23
  808734:	1029883a 	mov	r20,r2
  808738:	0809b1c0 	call	809b1c <__mulsi3>
  80873c:	980b883a 	mov	r5,r19
  808740:	a809883a 	mov	r4,r21
  808744:	1023883a 	mov	r17,r2
  808748:	0809b1c0 	call	809b1c <__mulsi3>
  80874c:	a809883a 	mov	r4,r21
  808750:	b80b883a 	mov	r5,r23
  808754:	1027883a 	mov	r19,r2
  808758:	0809b1c0 	call	809b1c <__mulsi3>
  80875c:	100b883a 	mov	r5,r2
  808760:	a004d43a 	srli	r2,r20,16
  808764:	8ce3883a 	add	r17,r17,r19
  808768:	1449883a 	add	r4,r2,r17
  80876c:	24c0022e 	bgeu	r4,r19,808778 <__umoddi3+0x534>
  808770:	00800074 	movhi	r2,1
  808774:	288b883a 	add	r5,r5,r2
  808778:	2004d43a 	srli	r2,r4,16
  80877c:	2008943a 	slli	r4,r4,16
  808780:	a0ffffcc 	andi	r3,r20,65535
  808784:	288d883a 	add	r6,r5,r2
  808788:	20c9883a 	add	r4,r4,r3
  80878c:	81800b36 	bltu	r16,r6,8087bc <__umoddi3+0x578>
  808790:	81804026 	beq	r16,r6,808894 <__umoddi3+0x650>
  808794:	818dc83a 	sub	r6,r16,r6
  808798:	00000f06 	br	8087d8 <__umoddi3+0x594>
  80879c:	30c5c83a 	sub	r2,r6,r3
  8087a0:	182d883a 	mov	r22,r3
  8087a4:	8084d83a 	srl	r2,r16,r2
  8087a8:	a8c6983a 	sll	r3,r21,r3
  8087ac:	9da6983a 	sll	r19,r19,r22
  8087b0:	85a0983a 	sll	r16,r16,r22
  8087b4:	18aab03a 	or	r21,r3,r2
  8087b8:	003f1d06 	br	808430 <__umoddi3+0x1ec>
  8087bc:	d8c00017 	ldw	r3,0(sp)
  8087c0:	20c5c83a 	sub	r2,r4,r3
  8087c4:	2089803a 	cmpltu	r4,r4,r2
  8087c8:	3587c83a 	sub	r3,r6,r22
  8087cc:	1907c83a 	sub	r3,r3,r4
  8087d0:	80cdc83a 	sub	r6,r16,r3
  8087d4:	1009883a 	mov	r4,r2
  8087d8:	d9400117 	ldw	r5,4(sp)
  8087dc:	2905c83a 	sub	r2,r5,r4
  8087e0:	2887803a 	cmpltu	r3,r5,r2
  8087e4:	30c7c83a 	sub	r3,r6,r3
  8087e8:	d9800317 	ldw	r6,12(sp)
  8087ec:	1484d83a 	srl	r2,r2,r18
  8087f0:	1988983a 	sll	r4,r3,r6
  8087f4:	1c86d83a 	srl	r3,r3,r18
  8087f8:	2088b03a 	or	r4,r4,r2
  8087fc:	2011883a 	mov	r8,r4
  808800:	1813883a 	mov	r9,r3
  808804:	d9000415 	stw	r4,16(sp)
  808808:	d8c00515 	stw	r3,20(sp)
  80880c:	003ed406 	br	808360 <__umoddi3+0x11c>
  808810:	01400604 	movi	r5,24
  808814:	2805883a 	mov	r2,r5
  808818:	003ea606 	br	8082b4 <__umoddi3+0x70>
  80881c:	01400204 	movi	r5,8
  808820:	2805883a 	mov	r2,r5
  808824:	003ea306 	br	8082b4 <__umoddi3+0x70>
  808828:	01400204 	movi	r5,8
  80882c:	2805883a 	mov	r2,r5
  808830:	003edf06 	br	8083b0 <__umoddi3+0x16c>
  808834:	01400204 	movi	r5,8
  808838:	2805883a 	mov	r2,r5
  80883c:	003ef206 	br	808408 <__umoddi3+0x1c4>
  808840:	01400604 	movi	r5,24
  808844:	2805883a 	mov	r2,r5
  808848:	003eef06 	br	808408 <__umoddi3+0x1c4>
  80884c:	01400604 	movi	r5,24
  808850:	2805883a 	mov	r2,r5
  808854:	003ed606 	br	8083b0 <__umoddi3+0x16c>
  808858:	153fa92e 	bgeu	r2,r20,808700 <__umoddi3+0x4bc>
  80885c:	843fffc4 	addi	r16,r16,-1
  808860:	1585883a 	add	r2,r2,r22
  808864:	003fa606 	br	808700 <__umoddi3+0x4bc>
  808868:	157f912e 	bgeu	r2,r21,8086b0 <__umoddi3+0x46c>
  80886c:	e73fffc4 	addi	fp,fp,-1
  808870:	1585883a 	add	r2,r2,r22
  808874:	003f8e06 	br	8086b0 <__umoddi3+0x46c>
  808878:	157f542e 	bgeu	r2,r21,8085cc <__umoddi3+0x388>
  80887c:	14c5883a 	add	r2,r2,r19
  808880:	003f5206 	br	8085cc <__umoddi3+0x388>
  808884:	14c5883a 	add	r2,r2,r19
  808888:	003efc06 	br	80847c <__umoddi3+0x238>
  80888c:	14c5883a 	add	r2,r2,r19
  808890:	003ea606 	br	80832c <__umoddi3+0xe8>
  808894:	d8800117 	ldw	r2,4(sp)
  808898:	113fc836 	bltu	r2,r4,8087bc <__umoddi3+0x578>
  80889c:	000d883a 	mov	r6,zero
  8088a0:	003fcd06 	br	8087d8 <__umoddi3+0x594>

008088a4 <_fpadd_parts>:
  8088a4:	defff804 	addi	sp,sp,-32
  8088a8:	dcc00315 	stw	r19,12(sp)
  8088ac:	2027883a 	mov	r19,r4
  8088b0:	21000017 	ldw	r4,0(r4)
  8088b4:	00c00044 	movi	r3,1
  8088b8:	dd400515 	stw	r21,20(sp)
  8088bc:	dd000415 	stw	r20,16(sp)
  8088c0:	ddc00715 	stw	r23,28(sp)
  8088c4:	dd800615 	stw	r22,24(sp)
  8088c8:	dc800215 	stw	r18,8(sp)
  8088cc:	dc400115 	stw	r17,4(sp)
  8088d0:	dc000015 	stw	r16,0(sp)
  8088d4:	282b883a 	mov	r21,r5
  8088d8:	3029883a 	mov	r20,r6
  8088dc:	1900632e 	bgeu	r3,r4,808a6c <_fpadd_parts+0x1c8>
  8088e0:	28800017 	ldw	r2,0(r5)
  8088e4:	1880812e 	bgeu	r3,r2,808aec <_fpadd_parts+0x248>
  8088e8:	00c00104 	movi	r3,4
  8088ec:	20c0dc26 	beq	r4,r3,808c60 <_fpadd_parts+0x3bc>
  8088f0:	10c07e26 	beq	r2,r3,808aec <_fpadd_parts+0x248>
  8088f4:	00c00084 	movi	r3,2
  8088f8:	10c06726 	beq	r2,r3,808a98 <_fpadd_parts+0x1f4>
  8088fc:	20c07b26 	beq	r4,r3,808aec <_fpadd_parts+0x248>
  808900:	9dc00217 	ldw	r23,8(r19)
  808904:	28c00217 	ldw	r3,8(r5)
  808908:	9c400317 	ldw	r17,12(r19)
  80890c:	2bc00317 	ldw	r15,12(r5)
  808910:	b8cdc83a 	sub	r6,r23,r3
  808914:	9c800417 	ldw	r18,16(r19)
  808918:	2c000417 	ldw	r16,16(r5)
  80891c:	3009883a 	mov	r4,r6
  808920:	30009716 	blt	r6,zero,808b80 <_fpadd_parts+0x2dc>
  808924:	00800fc4 	movi	r2,63
  808928:	11806b16 	blt	r2,r6,808ad8 <_fpadd_parts+0x234>
  80892c:	0100a40e 	bge	zero,r4,808bc0 <_fpadd_parts+0x31c>
  808930:	35bff804 	addi	r22,r6,-32
  808934:	b000bc16 	blt	r22,zero,808c28 <_fpadd_parts+0x384>
  808938:	8596d83a 	srl	r11,r16,r22
  80893c:	0019883a 	mov	r12,zero
  808940:	0013883a 	mov	r9,zero
  808944:	01000044 	movi	r4,1
  808948:	0015883a 	mov	r10,zero
  80894c:	b000be16 	blt	r22,zero,808c48 <_fpadd_parts+0x3a4>
  808950:	2590983a 	sll	r8,r4,r22
  808954:	000f883a 	mov	r7,zero
  808958:	00bfffc4 	movi	r2,-1
  80895c:	3889883a 	add	r4,r7,r2
  808960:	408b883a 	add	r5,r8,r2
  808964:	21cd803a 	cmpltu	r6,r4,r7
  808968:	314b883a 	add	r5,r6,r5
  80896c:	7904703a 	and	r2,r15,r4
  808970:	8146703a 	and	r3,r16,r5
  808974:	10c4b03a 	or	r2,r2,r3
  808978:	10000226 	beq	r2,zero,808984 <_fpadd_parts+0xe0>
  80897c:	02400044 	movi	r9,1
  808980:	0015883a 	mov	r10,zero
  808984:	5a5eb03a 	or	r15,r11,r9
  808988:	62a0b03a 	or	r16,r12,r10
  80898c:	99400117 	ldw	r5,4(r19)
  808990:	a8800117 	ldw	r2,4(r21)
  808994:	28806e26 	beq	r5,r2,808b50 <_fpadd_parts+0x2ac>
  808998:	28006626 	beq	r5,zero,808b34 <_fpadd_parts+0x290>
  80899c:	7c45c83a 	sub	r2,r15,r17
  8089a0:	7889803a 	cmpltu	r4,r15,r2
  8089a4:	8487c83a 	sub	r3,r16,r18
  8089a8:	1909c83a 	sub	r4,r3,r4
  8089ac:	100d883a 	mov	r6,r2
  8089b0:	200f883a 	mov	r7,r4
  8089b4:	38007716 	blt	r7,zero,808b94 <_fpadd_parts+0x2f0>
  8089b8:	a5c00215 	stw	r23,8(r20)
  8089bc:	a1c00415 	stw	r7,16(r20)
  8089c0:	a0000115 	stw	zero,4(r20)
  8089c4:	a1800315 	stw	r6,12(r20)
  8089c8:	a2000317 	ldw	r8,12(r20)
  8089cc:	a2400417 	ldw	r9,16(r20)
  8089d0:	00bfffc4 	movi	r2,-1
  8089d4:	408b883a 	add	r5,r8,r2
  8089d8:	2a09803a 	cmpltu	r4,r5,r8
  8089dc:	488d883a 	add	r6,r9,r2
  8089e0:	01c40034 	movhi	r7,4096
  8089e4:	39ffffc4 	addi	r7,r7,-1
  8089e8:	218d883a 	add	r6,r4,r6
  8089ec:	39801736 	bltu	r7,r6,808a4c <_fpadd_parts+0x1a8>
  8089f0:	31c06526 	beq	r6,r7,808b88 <_fpadd_parts+0x2e4>
  8089f4:	a3000217 	ldw	r12,8(r20)
  8089f8:	4209883a 	add	r4,r8,r8
  8089fc:	00bfffc4 	movi	r2,-1
  808a00:	220f803a 	cmpltu	r7,r4,r8
  808a04:	4a4b883a 	add	r5,r9,r9
  808a08:	394f883a 	add	r7,r7,r5
  808a0c:	2095883a 	add	r10,r4,r2
  808a10:	3897883a 	add	r11,r7,r2
  808a14:	510d803a 	cmpltu	r6,r10,r4
  808a18:	6099883a 	add	r12,r12,r2
  808a1c:	32d7883a 	add	r11,r6,r11
  808a20:	00840034 	movhi	r2,4096
  808a24:	10bfffc4 	addi	r2,r2,-1
  808a28:	2011883a 	mov	r8,r4
  808a2c:	3813883a 	mov	r9,r7
  808a30:	a1000315 	stw	r4,12(r20)
  808a34:	a1c00415 	stw	r7,16(r20)
  808a38:	a3000215 	stw	r12,8(r20)
  808a3c:	12c00336 	bltu	r2,r11,808a4c <_fpadd_parts+0x1a8>
  808a40:	58bfed1e 	bne	r11,r2,8089f8 <_fpadd_parts+0x154>
  808a44:	00bfff84 	movi	r2,-2
  808a48:	12bfeb2e 	bgeu	r2,r10,8089f8 <_fpadd_parts+0x154>
  808a4c:	a2800417 	ldw	r10,16(r20)
  808a50:	008000c4 	movi	r2,3
  808a54:	00c80034 	movhi	r3,8192
  808a58:	18ffffc4 	addi	r3,r3,-1
  808a5c:	a2400317 	ldw	r9,12(r20)
  808a60:	a0800015 	stw	r2,0(r20)
  808a64:	1a802336 	bltu	r3,r10,808af4 <_fpadd_parts+0x250>
  808a68:	a027883a 	mov	r19,r20
  808a6c:	9805883a 	mov	r2,r19
  808a70:	ddc00717 	ldw	r23,28(sp)
  808a74:	dd800617 	ldw	r22,24(sp)
  808a78:	dd400517 	ldw	r21,20(sp)
  808a7c:	dd000417 	ldw	r20,16(sp)
  808a80:	dcc00317 	ldw	r19,12(sp)
  808a84:	dc800217 	ldw	r18,8(sp)
  808a88:	dc400117 	ldw	r17,4(sp)
  808a8c:	dc000017 	ldw	r16,0(sp)
  808a90:	dec00804 	addi	sp,sp,32
  808a94:	f800283a 	ret
  808a98:	20fff41e 	bne	r4,r3,808a6c <_fpadd_parts+0x1c8>
  808a9c:	31000015 	stw	r4,0(r6)
  808aa0:	98800117 	ldw	r2,4(r19)
  808aa4:	30800115 	stw	r2,4(r6)
  808aa8:	98c00217 	ldw	r3,8(r19)
  808aac:	30c00215 	stw	r3,8(r6)
  808ab0:	98800317 	ldw	r2,12(r19)
  808ab4:	30800315 	stw	r2,12(r6)
  808ab8:	98c00417 	ldw	r3,16(r19)
  808abc:	30c00415 	stw	r3,16(r6)
  808ac0:	98800117 	ldw	r2,4(r19)
  808ac4:	28c00117 	ldw	r3,4(r5)
  808ac8:	3027883a 	mov	r19,r6
  808acc:	10c4703a 	and	r2,r2,r3
  808ad0:	30800115 	stw	r2,4(r6)
  808ad4:	003fe506 	br	808a6c <_fpadd_parts+0x1c8>
  808ad8:	1dc02616 	blt	r3,r23,808b74 <_fpadd_parts+0x2d0>
  808adc:	0023883a 	mov	r17,zero
  808ae0:	182f883a 	mov	r23,r3
  808ae4:	0025883a 	mov	r18,zero
  808ae8:	003fa806 	br	80898c <_fpadd_parts+0xe8>
  808aec:	a827883a 	mov	r19,r21
  808af0:	003fde06 	br	808a6c <_fpadd_parts+0x1c8>
  808af4:	01800044 	movi	r6,1
  808af8:	500497fa 	slli	r2,r10,31
  808afc:	4808d07a 	srli	r4,r9,1
  808b00:	518ad83a 	srl	r5,r10,r6
  808b04:	a2000217 	ldw	r8,8(r20)
  808b08:	1108b03a 	or	r4,r2,r4
  808b0c:	0007883a 	mov	r3,zero
  808b10:	4984703a 	and	r2,r9,r6
  808b14:	208cb03a 	or	r6,r4,r2
  808b18:	28ceb03a 	or	r7,r5,r3
  808b1c:	42000044 	addi	r8,r8,1
  808b20:	a027883a 	mov	r19,r20
  808b24:	a1c00415 	stw	r7,16(r20)
  808b28:	a2000215 	stw	r8,8(r20)
  808b2c:	a1800315 	stw	r6,12(r20)
  808b30:	003fce06 	br	808a6c <_fpadd_parts+0x1c8>
  808b34:	8bc5c83a 	sub	r2,r17,r15
  808b38:	8889803a 	cmpltu	r4,r17,r2
  808b3c:	9407c83a 	sub	r3,r18,r16
  808b40:	1909c83a 	sub	r4,r3,r4
  808b44:	100d883a 	mov	r6,r2
  808b48:	200f883a 	mov	r7,r4
  808b4c:	003f9906 	br	8089b4 <_fpadd_parts+0x110>
  808b50:	7c45883a 	add	r2,r15,r17
  808b54:	13c9803a 	cmpltu	r4,r2,r15
  808b58:	8487883a 	add	r3,r16,r18
  808b5c:	20c9883a 	add	r4,r4,r3
  808b60:	a1400115 	stw	r5,4(r20)
  808b64:	a5c00215 	stw	r23,8(r20)
  808b68:	a0800315 	stw	r2,12(r20)
  808b6c:	a1000415 	stw	r4,16(r20)
  808b70:	003fb606 	br	808a4c <_fpadd_parts+0x1a8>
  808b74:	001f883a 	mov	r15,zero
  808b78:	0021883a 	mov	r16,zero
  808b7c:	003f8306 	br	80898c <_fpadd_parts+0xe8>
  808b80:	018dc83a 	sub	r6,zero,r6
  808b84:	003f6706 	br	808924 <_fpadd_parts+0x80>
  808b88:	00bfff84 	movi	r2,-2
  808b8c:	117faf36 	bltu	r2,r5,808a4c <_fpadd_parts+0x1a8>
  808b90:	003f9806 	br	8089f4 <_fpadd_parts+0x150>
  808b94:	0005883a 	mov	r2,zero
  808b98:	1189c83a 	sub	r4,r2,r6
  808b9c:	1105803a 	cmpltu	r2,r2,r4
  808ba0:	01cbc83a 	sub	r5,zero,r7
  808ba4:	2885c83a 	sub	r2,r5,r2
  808ba8:	01800044 	movi	r6,1
  808bac:	a1800115 	stw	r6,4(r20)
  808bb0:	a5c00215 	stw	r23,8(r20)
  808bb4:	a1000315 	stw	r4,12(r20)
  808bb8:	a0800415 	stw	r2,16(r20)
  808bbc:	003f8206 	br	8089c8 <_fpadd_parts+0x124>
  808bc0:	203f7226 	beq	r4,zero,80898c <_fpadd_parts+0xe8>
  808bc4:	35bff804 	addi	r22,r6,-32
  808bc8:	b9af883a 	add	r23,r23,r6
  808bcc:	b0003116 	blt	r22,zero,808c94 <_fpadd_parts+0x3f0>
  808bd0:	959ad83a 	srl	r13,r18,r22
  808bd4:	001d883a 	mov	r14,zero
  808bd8:	000f883a 	mov	r7,zero
  808bdc:	01000044 	movi	r4,1
  808be0:	0011883a 	mov	r8,zero
  808be4:	b0002516 	blt	r22,zero,808c7c <_fpadd_parts+0x3d8>
  808be8:	2594983a 	sll	r10,r4,r22
  808bec:	0013883a 	mov	r9,zero
  808bf0:	00bfffc4 	movi	r2,-1
  808bf4:	4889883a 	add	r4,r9,r2
  808bf8:	508b883a 	add	r5,r10,r2
  808bfc:	224d803a 	cmpltu	r6,r4,r9
  808c00:	314b883a 	add	r5,r6,r5
  808c04:	8904703a 	and	r2,r17,r4
  808c08:	9146703a 	and	r3,r18,r5
  808c0c:	10c4b03a 	or	r2,r2,r3
  808c10:	10000226 	beq	r2,zero,808c1c <_fpadd_parts+0x378>
  808c14:	01c00044 	movi	r7,1
  808c18:	0011883a 	mov	r8,zero
  808c1c:	69e2b03a 	or	r17,r13,r7
  808c20:	7224b03a 	or	r18,r14,r8
  808c24:	003f5906 	br	80898c <_fpadd_parts+0xe8>
  808c28:	8407883a 	add	r3,r16,r16
  808c2c:	008007c4 	movi	r2,31
  808c30:	1185c83a 	sub	r2,r2,r6
  808c34:	1886983a 	sll	r3,r3,r2
  808c38:	7996d83a 	srl	r11,r15,r6
  808c3c:	8198d83a 	srl	r12,r16,r6
  808c40:	1ad6b03a 	or	r11,r3,r11
  808c44:	003f3e06 	br	808940 <_fpadd_parts+0x9c>
  808c48:	2006d07a 	srli	r3,r4,1
  808c4c:	008007c4 	movi	r2,31
  808c50:	1185c83a 	sub	r2,r2,r6
  808c54:	1890d83a 	srl	r8,r3,r2
  808c58:	218e983a 	sll	r7,r4,r6
  808c5c:	003f3e06 	br	808958 <_fpadd_parts+0xb4>
  808c60:	113f821e 	bne	r2,r4,808a6c <_fpadd_parts+0x1c8>
  808c64:	28c00117 	ldw	r3,4(r5)
  808c68:	98800117 	ldw	r2,4(r19)
  808c6c:	10ff7f26 	beq	r2,r3,808a6c <_fpadd_parts+0x1c8>
  808c70:	04c020b4 	movhi	r19,130
  808c74:	9cec7f04 	addi	r19,r19,-19972
  808c78:	003f7c06 	br	808a6c <_fpadd_parts+0x1c8>
  808c7c:	2006d07a 	srli	r3,r4,1
  808c80:	008007c4 	movi	r2,31
  808c84:	1185c83a 	sub	r2,r2,r6
  808c88:	1894d83a 	srl	r10,r3,r2
  808c8c:	2192983a 	sll	r9,r4,r6
  808c90:	003fd706 	br	808bf0 <_fpadd_parts+0x34c>
  808c94:	9487883a 	add	r3,r18,r18
  808c98:	008007c4 	movi	r2,31
  808c9c:	1185c83a 	sub	r2,r2,r6
  808ca0:	1886983a 	sll	r3,r3,r2
  808ca4:	899ad83a 	srl	r13,r17,r6
  808ca8:	919cd83a 	srl	r14,r18,r6
  808cac:	1b5ab03a 	or	r13,r3,r13
  808cb0:	003fc906 	br	808bd8 <_fpadd_parts+0x334>

00808cb4 <__subdf3>:
  808cb4:	deffea04 	addi	sp,sp,-88
  808cb8:	dcc01415 	stw	r19,80(sp)
  808cbc:	dcc00404 	addi	r19,sp,16
  808cc0:	2011883a 	mov	r8,r4
  808cc4:	2813883a 	mov	r9,r5
  808cc8:	dc401315 	stw	r17,76(sp)
  808ccc:	d809883a 	mov	r4,sp
  808cd0:	980b883a 	mov	r5,r19
  808cd4:	dc400904 	addi	r17,sp,36
  808cd8:	dfc01515 	stw	ra,84(sp)
  808cdc:	da400115 	stw	r9,4(sp)
  808ce0:	d9c00315 	stw	r7,12(sp)
  808ce4:	da000015 	stw	r8,0(sp)
  808ce8:	d9800215 	stw	r6,8(sp)
  808cec:	080a00c0 	call	80a00c <__unpack_d>
  808cf0:	d9000204 	addi	r4,sp,8
  808cf4:	880b883a 	mov	r5,r17
  808cf8:	080a00c0 	call	80a00c <__unpack_d>
  808cfc:	d8800a17 	ldw	r2,40(sp)
  808d00:	880b883a 	mov	r5,r17
  808d04:	9809883a 	mov	r4,r19
  808d08:	d9800e04 	addi	r6,sp,56
  808d0c:	1080005c 	xori	r2,r2,1
  808d10:	d8800a15 	stw	r2,40(sp)
  808d14:	08088a40 	call	8088a4 <_fpadd_parts>
  808d18:	1009883a 	mov	r4,r2
  808d1c:	0809cf80 	call	809cf8 <__pack_d>
  808d20:	dfc01517 	ldw	ra,84(sp)
  808d24:	dcc01417 	ldw	r19,80(sp)
  808d28:	dc401317 	ldw	r17,76(sp)
  808d2c:	dec01604 	addi	sp,sp,88
  808d30:	f800283a 	ret

00808d34 <__adddf3>:
  808d34:	deffea04 	addi	sp,sp,-88
  808d38:	dcc01415 	stw	r19,80(sp)
  808d3c:	dcc00404 	addi	r19,sp,16
  808d40:	2011883a 	mov	r8,r4
  808d44:	2813883a 	mov	r9,r5
  808d48:	dc401315 	stw	r17,76(sp)
  808d4c:	d809883a 	mov	r4,sp
  808d50:	980b883a 	mov	r5,r19
  808d54:	dc400904 	addi	r17,sp,36
  808d58:	dfc01515 	stw	ra,84(sp)
  808d5c:	da400115 	stw	r9,4(sp)
  808d60:	d9c00315 	stw	r7,12(sp)
  808d64:	da000015 	stw	r8,0(sp)
  808d68:	d9800215 	stw	r6,8(sp)
  808d6c:	080a00c0 	call	80a00c <__unpack_d>
  808d70:	d9000204 	addi	r4,sp,8
  808d74:	880b883a 	mov	r5,r17
  808d78:	080a00c0 	call	80a00c <__unpack_d>
  808d7c:	d9800e04 	addi	r6,sp,56
  808d80:	9809883a 	mov	r4,r19
  808d84:	880b883a 	mov	r5,r17
  808d88:	08088a40 	call	8088a4 <_fpadd_parts>
  808d8c:	1009883a 	mov	r4,r2
  808d90:	0809cf80 	call	809cf8 <__pack_d>
  808d94:	dfc01517 	ldw	ra,84(sp)
  808d98:	dcc01417 	ldw	r19,80(sp)
  808d9c:	dc401317 	ldw	r17,76(sp)
  808da0:	dec01604 	addi	sp,sp,88
  808da4:	f800283a 	ret

00808da8 <__muldf3>:
  808da8:	deffe004 	addi	sp,sp,-128
  808dac:	dc401815 	stw	r17,96(sp)
  808db0:	dc400404 	addi	r17,sp,16
  808db4:	2011883a 	mov	r8,r4
  808db8:	2813883a 	mov	r9,r5
  808dbc:	dc001715 	stw	r16,92(sp)
  808dc0:	d809883a 	mov	r4,sp
  808dc4:	880b883a 	mov	r5,r17
  808dc8:	dc000904 	addi	r16,sp,36
  808dcc:	dfc01f15 	stw	ra,124(sp)
  808dd0:	da400115 	stw	r9,4(sp)
  808dd4:	d9c00315 	stw	r7,12(sp)
  808dd8:	da000015 	stw	r8,0(sp)
  808ddc:	d9800215 	stw	r6,8(sp)
  808de0:	ddc01e15 	stw	r23,120(sp)
  808de4:	dd801d15 	stw	r22,116(sp)
  808de8:	dd401c15 	stw	r21,112(sp)
  808dec:	dd001b15 	stw	r20,108(sp)
  808df0:	dcc01a15 	stw	r19,104(sp)
  808df4:	dc801915 	stw	r18,100(sp)
  808df8:	080a00c0 	call	80a00c <__unpack_d>
  808dfc:	d9000204 	addi	r4,sp,8
  808e00:	800b883a 	mov	r5,r16
  808e04:	080a00c0 	call	80a00c <__unpack_d>
  808e08:	d9000417 	ldw	r4,16(sp)
  808e0c:	00800044 	movi	r2,1
  808e10:	1100102e 	bgeu	r2,r4,808e54 <__muldf3+0xac>
  808e14:	d8c00917 	ldw	r3,36(sp)
  808e18:	10c0062e 	bgeu	r2,r3,808e34 <__muldf3+0x8c>
  808e1c:	00800104 	movi	r2,4
  808e20:	20800a26 	beq	r4,r2,808e4c <__muldf3+0xa4>
  808e24:	1880cc26 	beq	r3,r2,809158 <__muldf3+0x3b0>
  808e28:	00800084 	movi	r2,2
  808e2c:	20800926 	beq	r4,r2,808e54 <__muldf3+0xac>
  808e30:	1880191e 	bne	r3,r2,808e98 <__muldf3+0xf0>
  808e34:	d8c00a17 	ldw	r3,40(sp)
  808e38:	d8800517 	ldw	r2,20(sp)
  808e3c:	8009883a 	mov	r4,r16
  808e40:	10c4c03a 	cmpne	r2,r2,r3
  808e44:	d8800a15 	stw	r2,40(sp)
  808e48:	00000706 	br	808e68 <__muldf3+0xc0>
  808e4c:	00800084 	movi	r2,2
  808e50:	1880c326 	beq	r3,r2,809160 <__muldf3+0x3b8>
  808e54:	d8800517 	ldw	r2,20(sp)
  808e58:	d8c00a17 	ldw	r3,40(sp)
  808e5c:	8809883a 	mov	r4,r17
  808e60:	10c4c03a 	cmpne	r2,r2,r3
  808e64:	d8800515 	stw	r2,20(sp)
  808e68:	0809cf80 	call	809cf8 <__pack_d>
  808e6c:	dfc01f17 	ldw	ra,124(sp)
  808e70:	ddc01e17 	ldw	r23,120(sp)
  808e74:	dd801d17 	ldw	r22,116(sp)
  808e78:	dd401c17 	ldw	r21,112(sp)
  808e7c:	dd001b17 	ldw	r20,108(sp)
  808e80:	dcc01a17 	ldw	r19,104(sp)
  808e84:	dc801917 	ldw	r18,100(sp)
  808e88:	dc401817 	ldw	r17,96(sp)
  808e8c:	dc001717 	ldw	r16,92(sp)
  808e90:	dec02004 	addi	sp,sp,128
  808e94:	f800283a 	ret
  808e98:	dd800717 	ldw	r22,28(sp)
  808e9c:	dc800c17 	ldw	r18,48(sp)
  808ea0:	002b883a 	mov	r21,zero
  808ea4:	0023883a 	mov	r17,zero
  808ea8:	a80b883a 	mov	r5,r21
  808eac:	b00d883a 	mov	r6,r22
  808eb0:	880f883a 	mov	r7,r17
  808eb4:	ddc00817 	ldw	r23,32(sp)
  808eb8:	dcc00d17 	ldw	r19,52(sp)
  808ebc:	9009883a 	mov	r4,r18
  808ec0:	0809b540 	call	809b54 <__muldi3>
  808ec4:	001b883a 	mov	r13,zero
  808ec8:	680f883a 	mov	r7,r13
  808ecc:	b009883a 	mov	r4,r22
  808ed0:	000b883a 	mov	r5,zero
  808ed4:	980d883a 	mov	r6,r19
  808ed8:	b82d883a 	mov	r22,r23
  808edc:	002f883a 	mov	r23,zero
  808ee0:	db401615 	stw	r13,88(sp)
  808ee4:	d8801315 	stw	r2,76(sp)
  808ee8:	d8c01415 	stw	r3,80(sp)
  808eec:	dcc01515 	stw	r19,84(sp)
  808ef0:	0809b540 	call	809b54 <__muldi3>
  808ef4:	b00d883a 	mov	r6,r22
  808ef8:	000b883a 	mov	r5,zero
  808efc:	9009883a 	mov	r4,r18
  808f00:	b80f883a 	mov	r7,r23
  808f04:	1021883a 	mov	r16,r2
  808f08:	1823883a 	mov	r17,r3
  808f0c:	0809b540 	call	809b54 <__muldi3>
  808f10:	8085883a 	add	r2,r16,r2
  808f14:	140d803a 	cmpltu	r6,r2,r16
  808f18:	88c7883a 	add	r3,r17,r3
  808f1c:	30cd883a 	add	r6,r6,r3
  808f20:	1029883a 	mov	r20,r2
  808f24:	302b883a 	mov	r21,r6
  808f28:	da801317 	ldw	r10,76(sp)
  808f2c:	dac01417 	ldw	r11,80(sp)
  808f30:	db001517 	ldw	r12,84(sp)
  808f34:	db401617 	ldw	r13,88(sp)
  808f38:	3440612e 	bgeu	r6,r17,8090c0 <__muldf3+0x318>
  808f3c:	0009883a 	mov	r4,zero
  808f40:	5105883a 	add	r2,r10,r4
  808f44:	128d803a 	cmpltu	r6,r2,r10
  808f48:	5d07883a 	add	r3,r11,r20
  808f4c:	30cd883a 	add	r6,r6,r3
  808f50:	0021883a 	mov	r16,zero
  808f54:	04400044 	movi	r17,1
  808f58:	1025883a 	mov	r18,r2
  808f5c:	3027883a 	mov	r19,r6
  808f60:	32c06236 	bltu	r6,r11,8090ec <__muldf3+0x344>
  808f64:	59807a26 	beq	r11,r6,809150 <__muldf3+0x3a8>
  808f68:	680b883a 	mov	r5,r13
  808f6c:	b80f883a 	mov	r7,r23
  808f70:	6009883a 	mov	r4,r12
  808f74:	b00d883a 	mov	r6,r22
  808f78:	0809b540 	call	809b54 <__muldi3>
  808f7c:	1009883a 	mov	r4,r2
  808f80:	000f883a 	mov	r7,zero
  808f84:	1545883a 	add	r2,r2,r21
  808f88:	1111803a 	cmpltu	r8,r2,r4
  808f8c:	19c7883a 	add	r3,r3,r7
  808f90:	40c7883a 	add	r3,r8,r3
  808f94:	88cb883a 	add	r5,r17,r3
  808f98:	d8c00617 	ldw	r3,24(sp)
  808f9c:	8089883a 	add	r4,r16,r2
  808fa0:	d8800b17 	ldw	r2,44(sp)
  808fa4:	18c00104 	addi	r3,r3,4
  808fa8:	240d803a 	cmpltu	r6,r4,r16
  808fac:	10c7883a 	add	r3,r2,r3
  808fb0:	2013883a 	mov	r9,r4
  808fb4:	d8800a17 	ldw	r2,40(sp)
  808fb8:	d9000517 	ldw	r4,20(sp)
  808fbc:	314d883a 	add	r6,r6,r5
  808fc0:	3015883a 	mov	r10,r6
  808fc4:	2088c03a 	cmpne	r4,r4,r2
  808fc8:	00880034 	movhi	r2,8192
  808fcc:	10bfffc4 	addi	r2,r2,-1
  808fd0:	d9000f15 	stw	r4,60(sp)
  808fd4:	d8c01015 	stw	r3,64(sp)
  808fd8:	1180162e 	bgeu	r2,r6,809034 <__muldf3+0x28c>
  808fdc:	1811883a 	mov	r8,r3
  808fe0:	101f883a 	mov	r15,r2
  808fe4:	980497fa 	slli	r2,r19,31
  808fe8:	9016d07a 	srli	r11,r18,1
  808fec:	500697fa 	slli	r3,r10,31
  808ff0:	480cd07a 	srli	r6,r9,1
  808ff4:	500ed07a 	srli	r7,r10,1
  808ff8:	12d6b03a 	or	r11,r2,r11
  808ffc:	00800044 	movi	r2,1
  809000:	198cb03a 	or	r6,r3,r6
  809004:	4888703a 	and	r4,r9,r2
  809008:	9818d07a 	srli	r12,r19,1
  80900c:	001b883a 	mov	r13,zero
  809010:	03a00034 	movhi	r14,32768
  809014:	3013883a 	mov	r9,r6
  809018:	3815883a 	mov	r10,r7
  80901c:	4091883a 	add	r8,r8,r2
  809020:	20000226 	beq	r4,zero,80902c <__muldf3+0x284>
  809024:	5b64b03a 	or	r18,r11,r13
  809028:	63a6b03a 	or	r19,r12,r14
  80902c:	7abfed36 	bltu	r15,r10,808fe4 <__muldf3+0x23c>
  809030:	da001015 	stw	r8,64(sp)
  809034:	00840034 	movhi	r2,4096
  809038:	10bfffc4 	addi	r2,r2,-1
  80903c:	12801436 	bltu	r2,r10,809090 <__muldf3+0x2e8>
  809040:	da001017 	ldw	r8,64(sp)
  809044:	101f883a 	mov	r15,r2
  809048:	4a45883a 	add	r2,r9,r9
  80904c:	124d803a 	cmpltu	r6,r2,r9
  809050:	5287883a 	add	r3,r10,r10
  809054:	9497883a 	add	r11,r18,r18
  809058:	5c8f803a 	cmpltu	r7,r11,r18
  80905c:	9cd9883a 	add	r12,r19,r19
  809060:	01000044 	movi	r4,1
  809064:	30cd883a 	add	r6,r6,r3
  809068:	3b0f883a 	add	r7,r7,r12
  80906c:	423fffc4 	addi	r8,r8,-1
  809070:	1013883a 	mov	r9,r2
  809074:	3015883a 	mov	r10,r6
  809078:	111ab03a 	or	r13,r2,r4
  80907c:	98003016 	blt	r19,zero,809140 <__muldf3+0x398>
  809080:	5825883a 	mov	r18,r11
  809084:	3827883a 	mov	r19,r7
  809088:	7abfef2e 	bgeu	r15,r10,809048 <__muldf3+0x2a0>
  80908c:	da001015 	stw	r8,64(sp)
  809090:	00803fc4 	movi	r2,255
  809094:	488e703a 	and	r7,r9,r2
  809098:	00802004 	movi	r2,128
  80909c:	0007883a 	mov	r3,zero
  8090a0:	0011883a 	mov	r8,zero
  8090a4:	38801826 	beq	r7,r2,809108 <__muldf3+0x360>
  8090a8:	008000c4 	movi	r2,3
  8090ac:	d9000e04 	addi	r4,sp,56
  8090b0:	da801215 	stw	r10,72(sp)
  8090b4:	d8800e15 	stw	r2,56(sp)
  8090b8:	da401115 	stw	r9,68(sp)
  8090bc:	003f6a06 	br	808e68 <__muldf3+0xc0>
  8090c0:	89802126 	beq	r17,r6,809148 <__muldf3+0x3a0>
  8090c4:	0009883a 	mov	r4,zero
  8090c8:	5105883a 	add	r2,r10,r4
  8090cc:	128d803a 	cmpltu	r6,r2,r10
  8090d0:	5d07883a 	add	r3,r11,r20
  8090d4:	30cd883a 	add	r6,r6,r3
  8090d8:	0021883a 	mov	r16,zero
  8090dc:	0023883a 	mov	r17,zero
  8090e0:	1025883a 	mov	r18,r2
  8090e4:	3027883a 	mov	r19,r6
  8090e8:	32ff9e2e 	bgeu	r6,r11,808f64 <__muldf3+0x1bc>
  8090ec:	00800044 	movi	r2,1
  8090f0:	8089883a 	add	r4,r16,r2
  8090f4:	240d803a 	cmpltu	r6,r4,r16
  8090f8:	344d883a 	add	r6,r6,r17
  8090fc:	2021883a 	mov	r16,r4
  809100:	3023883a 	mov	r17,r6
  809104:	003f9806 	br	808f68 <__muldf3+0x1c0>
  809108:	403fe71e 	bne	r8,zero,8090a8 <__muldf3+0x300>
  80910c:	01004004 	movi	r4,256
  809110:	4904703a 	and	r2,r9,r4
  809114:	10c4b03a 	or	r2,r2,r3
  809118:	103fe31e 	bne	r2,zero,8090a8 <__muldf3+0x300>
  80911c:	94c4b03a 	or	r2,r18,r19
  809120:	103fe126 	beq	r2,zero,8090a8 <__muldf3+0x300>
  809124:	49c5883a 	add	r2,r9,r7
  809128:	1251803a 	cmpltu	r8,r2,r9
  80912c:	4291883a 	add	r8,r8,r10
  809130:	013fc004 	movi	r4,-256
  809134:	1112703a 	and	r9,r2,r4
  809138:	4015883a 	mov	r10,r8
  80913c:	003fda06 	br	8090a8 <__muldf3+0x300>
  809140:	6813883a 	mov	r9,r13
  809144:	003fce06 	br	809080 <__muldf3+0x2d8>
  809148:	143f7c36 	bltu	r2,r16,808f3c <__muldf3+0x194>
  80914c:	003fdd06 	br	8090c4 <__muldf3+0x31c>
  809150:	12bf852e 	bgeu	r2,r10,808f68 <__muldf3+0x1c0>
  809154:	003fe506 	br	8090ec <__muldf3+0x344>
  809158:	00800084 	movi	r2,2
  80915c:	20bf351e 	bne	r4,r2,808e34 <__muldf3+0x8c>
  809160:	010020b4 	movhi	r4,130
  809164:	212c7f04 	addi	r4,r4,-19972
  809168:	003f3f06 	br	808e68 <__muldf3+0xc0>

0080916c <__divdf3>:
  80916c:	deffed04 	addi	sp,sp,-76
  809170:	dcc01115 	stw	r19,68(sp)
  809174:	dcc00404 	addi	r19,sp,16
  809178:	2011883a 	mov	r8,r4
  80917c:	2813883a 	mov	r9,r5
  809180:	dc000e15 	stw	r16,56(sp)
  809184:	d809883a 	mov	r4,sp
  809188:	980b883a 	mov	r5,r19
  80918c:	dc000904 	addi	r16,sp,36
  809190:	dfc01215 	stw	ra,72(sp)
  809194:	da400115 	stw	r9,4(sp)
  809198:	d9c00315 	stw	r7,12(sp)
  80919c:	da000015 	stw	r8,0(sp)
  8091a0:	d9800215 	stw	r6,8(sp)
  8091a4:	dc801015 	stw	r18,64(sp)
  8091a8:	dc400f15 	stw	r17,60(sp)
  8091ac:	080a00c0 	call	80a00c <__unpack_d>
  8091b0:	d9000204 	addi	r4,sp,8
  8091b4:	800b883a 	mov	r5,r16
  8091b8:	080a00c0 	call	80a00c <__unpack_d>
  8091bc:	d9000417 	ldw	r4,16(sp)
  8091c0:	00800044 	movi	r2,1
  8091c4:	11000b2e 	bgeu	r2,r4,8091f4 <__divdf3+0x88>
  8091c8:	d9400917 	ldw	r5,36(sp)
  8091cc:	1140762e 	bgeu	r2,r5,8093a8 <__divdf3+0x23c>
  8091d0:	d8800517 	ldw	r2,20(sp)
  8091d4:	d8c00a17 	ldw	r3,40(sp)
  8091d8:	01800104 	movi	r6,4
  8091dc:	10c4f03a 	xor	r2,r2,r3
  8091e0:	d8800515 	stw	r2,20(sp)
  8091e4:	21800226 	beq	r4,r6,8091f0 <__divdf3+0x84>
  8091e8:	00800084 	movi	r2,2
  8091ec:	2080141e 	bne	r4,r2,809240 <__divdf3+0xd4>
  8091f0:	29000926 	beq	r5,r4,809218 <__divdf3+0xac>
  8091f4:	9809883a 	mov	r4,r19
  8091f8:	0809cf80 	call	809cf8 <__pack_d>
  8091fc:	dfc01217 	ldw	ra,72(sp)
  809200:	dcc01117 	ldw	r19,68(sp)
  809204:	dc801017 	ldw	r18,64(sp)
  809208:	dc400f17 	ldw	r17,60(sp)
  80920c:	dc000e17 	ldw	r16,56(sp)
  809210:	dec01304 	addi	sp,sp,76
  809214:	f800283a 	ret
  809218:	010020b4 	movhi	r4,130
  80921c:	212c7f04 	addi	r4,r4,-19972
  809220:	0809cf80 	call	809cf8 <__pack_d>
  809224:	dfc01217 	ldw	ra,72(sp)
  809228:	dcc01117 	ldw	r19,68(sp)
  80922c:	dc801017 	ldw	r18,64(sp)
  809230:	dc400f17 	ldw	r17,60(sp)
  809234:	dc000e17 	ldw	r16,56(sp)
  809238:	dec01304 	addi	sp,sp,76
  80923c:	f800283a 	ret
  809240:	29805b26 	beq	r5,r6,8093b0 <__divdf3+0x244>
  809244:	28802d26 	beq	r5,r2,8092fc <__divdf3+0x190>
  809248:	d8c00617 	ldw	r3,24(sp)
  80924c:	d8800b17 	ldw	r2,44(sp)
  809250:	d9c00817 	ldw	r7,32(sp)
  809254:	dc400d17 	ldw	r17,52(sp)
  809258:	188bc83a 	sub	r5,r3,r2
  80925c:	d9800717 	ldw	r6,28(sp)
  809260:	dc000c17 	ldw	r16,48(sp)
  809264:	d9400615 	stw	r5,24(sp)
  809268:	3c403836 	bltu	r7,r17,80934c <__divdf3+0x1e0>
  80926c:	89c03626 	beq	r17,r7,809348 <__divdf3+0x1dc>
  809270:	0015883a 	mov	r10,zero
  809274:	001d883a 	mov	r14,zero
  809278:	02c40034 	movhi	r11,4096
  80927c:	001f883a 	mov	r15,zero
  809280:	003f883a 	mov	ra,zero
  809284:	04800f44 	movi	r18,61
  809288:	00000f06 	br	8092c8 <__divdf3+0x15c>
  80928c:	601d883a 	mov	r14,r12
  809290:	681f883a 	mov	r15,r13
  809294:	400d883a 	mov	r6,r8
  809298:	100f883a 	mov	r7,r2
  80929c:	3191883a 	add	r8,r6,r6
  8092a0:	5808d07a 	srli	r4,r11,1
  8092a4:	4185803a 	cmpltu	r2,r8,r6
  8092a8:	39d3883a 	add	r9,r7,r7
  8092ac:	28c6b03a 	or	r3,r5,r3
  8092b0:	1245883a 	add	r2,r2,r9
  8092b4:	1815883a 	mov	r10,r3
  8092b8:	2017883a 	mov	r11,r4
  8092bc:	400d883a 	mov	r6,r8
  8092c0:	100f883a 	mov	r7,r2
  8092c4:	fc801726 	beq	ra,r18,809324 <__divdf3+0x1b8>
  8092c8:	580a97fa 	slli	r5,r11,31
  8092cc:	5006d07a 	srli	r3,r10,1
  8092d0:	ffc00044 	addi	ra,ra,1
  8092d4:	3c7ff136 	bltu	r7,r17,80929c <__divdf3+0x130>
  8092d8:	3411c83a 	sub	r8,r6,r16
  8092dc:	3205803a 	cmpltu	r2,r6,r8
  8092e0:	3c53c83a 	sub	r9,r7,r17
  8092e4:	7298b03a 	or	r12,r14,r10
  8092e8:	7adab03a 	or	r13,r15,r11
  8092ec:	4885c83a 	sub	r2,r9,r2
  8092f0:	89ffe61e 	bne	r17,r7,80928c <__divdf3+0x120>
  8092f4:	343fe936 	bltu	r6,r16,80929c <__divdf3+0x130>
  8092f8:	003fe406 	br	80928c <__divdf3+0x120>
  8092fc:	9809883a 	mov	r4,r19
  809300:	d9800415 	stw	r6,16(sp)
  809304:	0809cf80 	call	809cf8 <__pack_d>
  809308:	dfc01217 	ldw	ra,72(sp)
  80930c:	dcc01117 	ldw	r19,68(sp)
  809310:	dc801017 	ldw	r18,64(sp)
  809314:	dc400f17 	ldw	r17,60(sp)
  809318:	dc000e17 	ldw	r16,56(sp)
  80931c:	dec01304 	addi	sp,sp,76
  809320:	f800283a 	ret
  809324:	00803fc4 	movi	r2,255
  809328:	7090703a 	and	r8,r14,r2
  80932c:	00802004 	movi	r2,128
  809330:	0007883a 	mov	r3,zero
  809334:	0013883a 	mov	r9,zero
  809338:	40800d26 	beq	r8,r2,809370 <__divdf3+0x204>
  80933c:	dbc00815 	stw	r15,32(sp)
  809340:	db800715 	stw	r14,28(sp)
  809344:	003fab06 	br	8091f4 <__divdf3+0x88>
  809348:	343fc92e 	bgeu	r6,r16,809270 <__divdf3+0x104>
  80934c:	3185883a 	add	r2,r6,r6
  809350:	1189803a 	cmpltu	r4,r2,r6
  809354:	39c7883a 	add	r3,r7,r7
  809358:	20c9883a 	add	r4,r4,r3
  80935c:	297fffc4 	addi	r5,r5,-1
  809360:	100d883a 	mov	r6,r2
  809364:	200f883a 	mov	r7,r4
  809368:	d9400615 	stw	r5,24(sp)
  80936c:	003fc006 	br	809270 <__divdf3+0x104>
  809370:	483ff21e 	bne	r9,zero,80933c <__divdf3+0x1d0>
  809374:	01004004 	movi	r4,256
  809378:	7104703a 	and	r2,r14,r4
  80937c:	10c4b03a 	or	r2,r2,r3
  809380:	103fee1e 	bne	r2,zero,80933c <__divdf3+0x1d0>
  809384:	31c4b03a 	or	r2,r6,r7
  809388:	103fec26 	beq	r2,zero,80933c <__divdf3+0x1d0>
  80938c:	7205883a 	add	r2,r14,r8
  809390:	1391803a 	cmpltu	r8,r2,r14
  809394:	43d1883a 	add	r8,r8,r15
  809398:	013fc004 	movi	r4,-256
  80939c:	111c703a 	and	r14,r2,r4
  8093a0:	401f883a 	mov	r15,r8
  8093a4:	003fe506 	br	80933c <__divdf3+0x1d0>
  8093a8:	8009883a 	mov	r4,r16
  8093ac:	003f9206 	br	8091f8 <__divdf3+0x8c>
  8093b0:	9809883a 	mov	r4,r19
  8093b4:	d8000715 	stw	zero,28(sp)
  8093b8:	d8000815 	stw	zero,32(sp)
  8093bc:	d8000615 	stw	zero,24(sp)
  8093c0:	003f8d06 	br	8091f8 <__divdf3+0x8c>

008093c4 <__eqdf2>:
  8093c4:	deffef04 	addi	sp,sp,-68
  8093c8:	dc400f15 	stw	r17,60(sp)
  8093cc:	dc400404 	addi	r17,sp,16
  8093d0:	2005883a 	mov	r2,r4
  8093d4:	2807883a 	mov	r3,r5
  8093d8:	dc000e15 	stw	r16,56(sp)
  8093dc:	d809883a 	mov	r4,sp
  8093e0:	880b883a 	mov	r5,r17
  8093e4:	dc000904 	addi	r16,sp,36
  8093e8:	d8c00115 	stw	r3,4(sp)
  8093ec:	d8800015 	stw	r2,0(sp)
  8093f0:	d9800215 	stw	r6,8(sp)
  8093f4:	dfc01015 	stw	ra,64(sp)
  8093f8:	d9c00315 	stw	r7,12(sp)
  8093fc:	080a00c0 	call	80a00c <__unpack_d>
  809400:	d9000204 	addi	r4,sp,8
  809404:	800b883a 	mov	r5,r16
  809408:	080a00c0 	call	80a00c <__unpack_d>
  80940c:	d8800417 	ldw	r2,16(sp)
  809410:	00c00044 	movi	r3,1
  809414:	180d883a 	mov	r6,r3
  809418:	1880062e 	bgeu	r3,r2,809434 <__eqdf2+0x70>
  80941c:	d8800917 	ldw	r2,36(sp)
  809420:	8809883a 	mov	r4,r17
  809424:	800b883a 	mov	r5,r16
  809428:	1880022e 	bgeu	r3,r2,809434 <__eqdf2+0x70>
  80942c:	080a1440 	call	80a144 <__fpcmp_parts_d>
  809430:	100d883a 	mov	r6,r2
  809434:	3005883a 	mov	r2,r6
  809438:	dfc01017 	ldw	ra,64(sp)
  80943c:	dc400f17 	ldw	r17,60(sp)
  809440:	dc000e17 	ldw	r16,56(sp)
  809444:	dec01104 	addi	sp,sp,68
  809448:	f800283a 	ret

0080944c <__nedf2>:
  80944c:	deffef04 	addi	sp,sp,-68
  809450:	dc400f15 	stw	r17,60(sp)
  809454:	dc400404 	addi	r17,sp,16
  809458:	2005883a 	mov	r2,r4
  80945c:	2807883a 	mov	r3,r5
  809460:	dc000e15 	stw	r16,56(sp)
  809464:	d809883a 	mov	r4,sp
  809468:	880b883a 	mov	r5,r17
  80946c:	dc000904 	addi	r16,sp,36
  809470:	d8c00115 	stw	r3,4(sp)
  809474:	d8800015 	stw	r2,0(sp)
  809478:	d9800215 	stw	r6,8(sp)
  80947c:	dfc01015 	stw	ra,64(sp)
  809480:	d9c00315 	stw	r7,12(sp)
  809484:	080a00c0 	call	80a00c <__unpack_d>
  809488:	d9000204 	addi	r4,sp,8
  80948c:	800b883a 	mov	r5,r16
  809490:	080a00c0 	call	80a00c <__unpack_d>
  809494:	d8800417 	ldw	r2,16(sp)
  809498:	00c00044 	movi	r3,1
  80949c:	180d883a 	mov	r6,r3
  8094a0:	1880062e 	bgeu	r3,r2,8094bc <__nedf2+0x70>
  8094a4:	d8800917 	ldw	r2,36(sp)
  8094a8:	8809883a 	mov	r4,r17
  8094ac:	800b883a 	mov	r5,r16
  8094b0:	1880022e 	bgeu	r3,r2,8094bc <__nedf2+0x70>
  8094b4:	080a1440 	call	80a144 <__fpcmp_parts_d>
  8094b8:	100d883a 	mov	r6,r2
  8094bc:	3005883a 	mov	r2,r6
  8094c0:	dfc01017 	ldw	ra,64(sp)
  8094c4:	dc400f17 	ldw	r17,60(sp)
  8094c8:	dc000e17 	ldw	r16,56(sp)
  8094cc:	dec01104 	addi	sp,sp,68
  8094d0:	f800283a 	ret

008094d4 <__gtdf2>:
  8094d4:	deffef04 	addi	sp,sp,-68
  8094d8:	dc400f15 	stw	r17,60(sp)
  8094dc:	dc400404 	addi	r17,sp,16
  8094e0:	2005883a 	mov	r2,r4
  8094e4:	2807883a 	mov	r3,r5
  8094e8:	dc000e15 	stw	r16,56(sp)
  8094ec:	d809883a 	mov	r4,sp
  8094f0:	880b883a 	mov	r5,r17
  8094f4:	dc000904 	addi	r16,sp,36
  8094f8:	d8c00115 	stw	r3,4(sp)
  8094fc:	d8800015 	stw	r2,0(sp)
  809500:	d9800215 	stw	r6,8(sp)
  809504:	dfc01015 	stw	ra,64(sp)
  809508:	d9c00315 	stw	r7,12(sp)
  80950c:	080a00c0 	call	80a00c <__unpack_d>
  809510:	d9000204 	addi	r4,sp,8
  809514:	800b883a 	mov	r5,r16
  809518:	080a00c0 	call	80a00c <__unpack_d>
  80951c:	d8800417 	ldw	r2,16(sp)
  809520:	00c00044 	movi	r3,1
  809524:	01bfffc4 	movi	r6,-1
  809528:	1880062e 	bgeu	r3,r2,809544 <__gtdf2+0x70>
  80952c:	d8800917 	ldw	r2,36(sp)
  809530:	8809883a 	mov	r4,r17
  809534:	800b883a 	mov	r5,r16
  809538:	1880022e 	bgeu	r3,r2,809544 <__gtdf2+0x70>
  80953c:	080a1440 	call	80a144 <__fpcmp_parts_d>
  809540:	100d883a 	mov	r6,r2
  809544:	3005883a 	mov	r2,r6
  809548:	dfc01017 	ldw	ra,64(sp)
  80954c:	dc400f17 	ldw	r17,60(sp)
  809550:	dc000e17 	ldw	r16,56(sp)
  809554:	dec01104 	addi	sp,sp,68
  809558:	f800283a 	ret

0080955c <__gedf2>:
  80955c:	deffef04 	addi	sp,sp,-68
  809560:	dc400f15 	stw	r17,60(sp)
  809564:	dc400404 	addi	r17,sp,16
  809568:	2005883a 	mov	r2,r4
  80956c:	2807883a 	mov	r3,r5
  809570:	dc000e15 	stw	r16,56(sp)
  809574:	d809883a 	mov	r4,sp
  809578:	880b883a 	mov	r5,r17
  80957c:	dc000904 	addi	r16,sp,36
  809580:	d8c00115 	stw	r3,4(sp)
  809584:	d8800015 	stw	r2,0(sp)
  809588:	d9800215 	stw	r6,8(sp)
  80958c:	dfc01015 	stw	ra,64(sp)
  809590:	d9c00315 	stw	r7,12(sp)
  809594:	080a00c0 	call	80a00c <__unpack_d>
  809598:	d9000204 	addi	r4,sp,8
  80959c:	800b883a 	mov	r5,r16
  8095a0:	080a00c0 	call	80a00c <__unpack_d>
  8095a4:	d8800417 	ldw	r2,16(sp)
  8095a8:	00c00044 	movi	r3,1
  8095ac:	01bfffc4 	movi	r6,-1
  8095b0:	1880062e 	bgeu	r3,r2,8095cc <__gedf2+0x70>
  8095b4:	d8800917 	ldw	r2,36(sp)
  8095b8:	8809883a 	mov	r4,r17
  8095bc:	800b883a 	mov	r5,r16
  8095c0:	1880022e 	bgeu	r3,r2,8095cc <__gedf2+0x70>
  8095c4:	080a1440 	call	80a144 <__fpcmp_parts_d>
  8095c8:	100d883a 	mov	r6,r2
  8095cc:	3005883a 	mov	r2,r6
  8095d0:	dfc01017 	ldw	ra,64(sp)
  8095d4:	dc400f17 	ldw	r17,60(sp)
  8095d8:	dc000e17 	ldw	r16,56(sp)
  8095dc:	dec01104 	addi	sp,sp,68
  8095e0:	f800283a 	ret

008095e4 <__ltdf2>:
  8095e4:	deffef04 	addi	sp,sp,-68
  8095e8:	dc400f15 	stw	r17,60(sp)
  8095ec:	dc400404 	addi	r17,sp,16
  8095f0:	2005883a 	mov	r2,r4
  8095f4:	2807883a 	mov	r3,r5
  8095f8:	dc000e15 	stw	r16,56(sp)
  8095fc:	d809883a 	mov	r4,sp
  809600:	880b883a 	mov	r5,r17
  809604:	dc000904 	addi	r16,sp,36
  809608:	d8c00115 	stw	r3,4(sp)
  80960c:	d8800015 	stw	r2,0(sp)
  809610:	d9800215 	stw	r6,8(sp)
  809614:	dfc01015 	stw	ra,64(sp)
  809618:	d9c00315 	stw	r7,12(sp)
  80961c:	080a00c0 	call	80a00c <__unpack_d>
  809620:	d9000204 	addi	r4,sp,8
  809624:	800b883a 	mov	r5,r16
  809628:	080a00c0 	call	80a00c <__unpack_d>
  80962c:	d8800417 	ldw	r2,16(sp)
  809630:	00c00044 	movi	r3,1
  809634:	180d883a 	mov	r6,r3
  809638:	1880062e 	bgeu	r3,r2,809654 <__ltdf2+0x70>
  80963c:	d8800917 	ldw	r2,36(sp)
  809640:	8809883a 	mov	r4,r17
  809644:	800b883a 	mov	r5,r16
  809648:	1880022e 	bgeu	r3,r2,809654 <__ltdf2+0x70>
  80964c:	080a1440 	call	80a144 <__fpcmp_parts_d>
  809650:	100d883a 	mov	r6,r2
  809654:	3005883a 	mov	r2,r6
  809658:	dfc01017 	ldw	ra,64(sp)
  80965c:	dc400f17 	ldw	r17,60(sp)
  809660:	dc000e17 	ldw	r16,56(sp)
  809664:	dec01104 	addi	sp,sp,68
  809668:	f800283a 	ret

0080966c <__floatsidf>:
  80966c:	2006d7fa 	srli	r3,r4,31
  809670:	defff604 	addi	sp,sp,-40
  809674:	008000c4 	movi	r2,3
  809678:	dfc00915 	stw	ra,36(sp)
  80967c:	dcc00815 	stw	r19,32(sp)
  809680:	dc800715 	stw	r18,28(sp)
  809684:	dc400615 	stw	r17,24(sp)
  809688:	dc000515 	stw	r16,20(sp)
  80968c:	d8800015 	stw	r2,0(sp)
  809690:	d8c00115 	stw	r3,4(sp)
  809694:	20000f1e 	bne	r4,zero,8096d4 <__floatsidf+0x68>
  809698:	00800084 	movi	r2,2
  80969c:	d8800015 	stw	r2,0(sp)
  8096a0:	d809883a 	mov	r4,sp
  8096a4:	0809cf80 	call	809cf8 <__pack_d>
  8096a8:	1009883a 	mov	r4,r2
  8096ac:	180b883a 	mov	r5,r3
  8096b0:	2005883a 	mov	r2,r4
  8096b4:	2807883a 	mov	r3,r5
  8096b8:	dfc00917 	ldw	ra,36(sp)
  8096bc:	dcc00817 	ldw	r19,32(sp)
  8096c0:	dc800717 	ldw	r18,28(sp)
  8096c4:	dc400617 	ldw	r17,24(sp)
  8096c8:	dc000517 	ldw	r16,20(sp)
  8096cc:	dec00a04 	addi	sp,sp,40
  8096d0:	f800283a 	ret
  8096d4:	00800f04 	movi	r2,60
  8096d8:	1807003a 	cmpeq	r3,r3,zero
  8096dc:	d8800215 	stw	r2,8(sp)
  8096e0:	18001126 	beq	r3,zero,809728 <__floatsidf+0xbc>
  8096e4:	0027883a 	mov	r19,zero
  8096e8:	2025883a 	mov	r18,r4
  8096ec:	d9000315 	stw	r4,12(sp)
  8096f0:	dcc00415 	stw	r19,16(sp)
  8096f4:	0809c780 	call	809c78 <__clzsi2>
  8096f8:	11000744 	addi	r4,r2,29
  8096fc:	013fe80e 	bge	zero,r4,8096a0 <__floatsidf+0x34>
  809700:	10bfff44 	addi	r2,r2,-3
  809704:	10000c16 	blt	r2,zero,809738 <__floatsidf+0xcc>
  809708:	90a2983a 	sll	r17,r18,r2
  80970c:	0021883a 	mov	r16,zero
  809710:	d8800217 	ldw	r2,8(sp)
  809714:	dc400415 	stw	r17,16(sp)
  809718:	dc000315 	stw	r16,12(sp)
  80971c:	1105c83a 	sub	r2,r2,r4
  809720:	d8800215 	stw	r2,8(sp)
  809724:	003fde06 	br	8096a0 <__floatsidf+0x34>
  809728:	00a00034 	movhi	r2,32768
  80972c:	20800a26 	beq	r4,r2,809758 <__floatsidf+0xec>
  809730:	0109c83a 	sub	r4,zero,r4
  809734:	003feb06 	br	8096e4 <__floatsidf+0x78>
  809738:	9006d07a 	srli	r3,r18,1
  80973c:	008007c4 	movi	r2,31
  809740:	1105c83a 	sub	r2,r2,r4
  809744:	1886d83a 	srl	r3,r3,r2
  809748:	9922983a 	sll	r17,r19,r4
  80974c:	9120983a 	sll	r16,r18,r4
  809750:	1c62b03a 	or	r17,r3,r17
  809754:	003fee06 	br	809710 <__floatsidf+0xa4>
  809758:	0009883a 	mov	r4,zero
  80975c:	01707834 	movhi	r5,49632
  809760:	003fd306 	br	8096b0 <__floatsidf+0x44>

00809764 <__fixdfsi>:
  809764:	defff804 	addi	sp,sp,-32
  809768:	2005883a 	mov	r2,r4
  80976c:	2807883a 	mov	r3,r5
  809770:	d809883a 	mov	r4,sp
  809774:	d9400204 	addi	r5,sp,8
  809778:	d8c00115 	stw	r3,4(sp)
  80977c:	d8800015 	stw	r2,0(sp)
  809780:	dfc00715 	stw	ra,28(sp)
  809784:	080a00c0 	call	80a00c <__unpack_d>
  809788:	d8c00217 	ldw	r3,8(sp)
  80978c:	00800084 	movi	r2,2
  809790:	1880051e 	bne	r3,r2,8097a8 <__fixdfsi+0x44>
  809794:	0007883a 	mov	r3,zero
  809798:	1805883a 	mov	r2,r3
  80979c:	dfc00717 	ldw	ra,28(sp)
  8097a0:	dec00804 	addi	sp,sp,32
  8097a4:	f800283a 	ret
  8097a8:	00800044 	movi	r2,1
  8097ac:	10fff92e 	bgeu	r2,r3,809794 <__fixdfsi+0x30>
  8097b0:	00800104 	movi	r2,4
  8097b4:	18800426 	beq	r3,r2,8097c8 <__fixdfsi+0x64>
  8097b8:	d8c00417 	ldw	r3,16(sp)
  8097bc:	183ff516 	blt	r3,zero,809794 <__fixdfsi+0x30>
  8097c0:	00800784 	movi	r2,30
  8097c4:	10c0080e 	bge	r2,r3,8097e8 <__fixdfsi+0x84>
  8097c8:	d8800317 	ldw	r2,12(sp)
  8097cc:	1000121e 	bne	r2,zero,809818 <__fixdfsi+0xb4>
  8097d0:	00e00034 	movhi	r3,32768
  8097d4:	18ffffc4 	addi	r3,r3,-1
  8097d8:	1805883a 	mov	r2,r3
  8097dc:	dfc00717 	ldw	ra,28(sp)
  8097e0:	dec00804 	addi	sp,sp,32
  8097e4:	f800283a 	ret
  8097e8:	00800f04 	movi	r2,60
  8097ec:	10d1c83a 	sub	r8,r2,r3
  8097f0:	40bff804 	addi	r2,r8,-32
  8097f4:	d9800517 	ldw	r6,20(sp)
  8097f8:	d9c00617 	ldw	r7,24(sp)
  8097fc:	10000816 	blt	r2,zero,809820 <__fixdfsi+0xbc>
  809800:	3888d83a 	srl	r4,r7,r2
  809804:	d8800317 	ldw	r2,12(sp)
  809808:	2007883a 	mov	r3,r4
  80980c:	103fe226 	beq	r2,zero,809798 <__fixdfsi+0x34>
  809810:	0107c83a 	sub	r3,zero,r4
  809814:	003fe006 	br	809798 <__fixdfsi+0x34>
  809818:	00e00034 	movhi	r3,32768
  80981c:	003fde06 	br	809798 <__fixdfsi+0x34>
  809820:	39c7883a 	add	r3,r7,r7
  809824:	008007c4 	movi	r2,31
  809828:	1205c83a 	sub	r2,r2,r8
  80982c:	1886983a 	sll	r3,r3,r2
  809830:	3208d83a 	srl	r4,r6,r8
  809834:	1908b03a 	or	r4,r3,r4
  809838:	003ff206 	br	809804 <__fixdfsi+0xa0>

0080983c <__floatunsidf>:
  80983c:	defff204 	addi	sp,sp,-56
  809840:	dfc00d15 	stw	ra,52(sp)
  809844:	ddc00c15 	stw	r23,48(sp)
  809848:	dd800b15 	stw	r22,44(sp)
  80984c:	dd400a15 	stw	r21,40(sp)
  809850:	dd000915 	stw	r20,36(sp)
  809854:	dcc00815 	stw	r19,32(sp)
  809858:	dc800715 	stw	r18,28(sp)
  80985c:	dc400615 	stw	r17,24(sp)
  809860:	dc000515 	stw	r16,20(sp)
  809864:	d8000115 	stw	zero,4(sp)
  809868:	20000f1e 	bne	r4,zero,8098a8 <__floatunsidf+0x6c>
  80986c:	00800084 	movi	r2,2
  809870:	d8800015 	stw	r2,0(sp)
  809874:	d809883a 	mov	r4,sp
  809878:	0809cf80 	call	809cf8 <__pack_d>
  80987c:	dfc00d17 	ldw	ra,52(sp)
  809880:	ddc00c17 	ldw	r23,48(sp)
  809884:	dd800b17 	ldw	r22,44(sp)
  809888:	dd400a17 	ldw	r21,40(sp)
  80988c:	dd000917 	ldw	r20,36(sp)
  809890:	dcc00817 	ldw	r19,32(sp)
  809894:	dc800717 	ldw	r18,28(sp)
  809898:	dc400617 	ldw	r17,24(sp)
  80989c:	dc000517 	ldw	r16,20(sp)
  8098a0:	dec00e04 	addi	sp,sp,56
  8098a4:	f800283a 	ret
  8098a8:	008000c4 	movi	r2,3
  8098ac:	00c00f04 	movi	r3,60
  8098b0:	002f883a 	mov	r23,zero
  8098b4:	202d883a 	mov	r22,r4
  8098b8:	d8800015 	stw	r2,0(sp)
  8098bc:	d8c00215 	stw	r3,8(sp)
  8098c0:	d9000315 	stw	r4,12(sp)
  8098c4:	ddc00415 	stw	r23,16(sp)
  8098c8:	0809c780 	call	809c78 <__clzsi2>
  8098cc:	12400744 	addi	r9,r2,29
  8098d0:	48000b16 	blt	r9,zero,809900 <__floatunsidf+0xc4>
  8098d4:	483fe726 	beq	r9,zero,809874 <__floatunsidf+0x38>
  8098d8:	10bfff44 	addi	r2,r2,-3
  8098dc:	10002e16 	blt	r2,zero,809998 <__floatunsidf+0x15c>
  8098e0:	b0a2983a 	sll	r17,r22,r2
  8098e4:	0021883a 	mov	r16,zero
  8098e8:	d8800217 	ldw	r2,8(sp)
  8098ec:	dc400415 	stw	r17,16(sp)
  8098f0:	dc000315 	stw	r16,12(sp)
  8098f4:	1245c83a 	sub	r2,r2,r9
  8098f8:	d8800215 	stw	r2,8(sp)
  8098fc:	003fdd06 	br	809874 <__floatunsidf+0x38>
  809900:	0255c83a 	sub	r10,zero,r9
  809904:	51bff804 	addi	r6,r10,-32
  809908:	30001b16 	blt	r6,zero,809978 <__floatunsidf+0x13c>
  80990c:	b9a8d83a 	srl	r20,r23,r6
  809910:	002b883a 	mov	r21,zero
  809914:	000f883a 	mov	r7,zero
  809918:	01000044 	movi	r4,1
  80991c:	0011883a 	mov	r8,zero
  809920:	30002516 	blt	r6,zero,8099b8 <__floatunsidf+0x17c>
  809924:	21a6983a 	sll	r19,r4,r6
  809928:	0025883a 	mov	r18,zero
  80992c:	00bfffc4 	movi	r2,-1
  809930:	9089883a 	add	r4,r18,r2
  809934:	988b883a 	add	r5,r19,r2
  809938:	248d803a 	cmpltu	r6,r4,r18
  80993c:	314b883a 	add	r5,r6,r5
  809940:	b104703a 	and	r2,r22,r4
  809944:	b946703a 	and	r3,r23,r5
  809948:	10c4b03a 	or	r2,r2,r3
  80994c:	10000226 	beq	r2,zero,809958 <__floatunsidf+0x11c>
  809950:	01c00044 	movi	r7,1
  809954:	0011883a 	mov	r8,zero
  809958:	d9000217 	ldw	r4,8(sp)
  80995c:	a1c4b03a 	or	r2,r20,r7
  809960:	aa06b03a 	or	r3,r21,r8
  809964:	2249c83a 	sub	r4,r4,r9
  809968:	d8c00415 	stw	r3,16(sp)
  80996c:	d9000215 	stw	r4,8(sp)
  809970:	d8800315 	stw	r2,12(sp)
  809974:	003fbf06 	br	809874 <__floatunsidf+0x38>
  809978:	bdc7883a 	add	r3,r23,r23
  80997c:	008007c4 	movi	r2,31
  809980:	1285c83a 	sub	r2,r2,r10
  809984:	1886983a 	sll	r3,r3,r2
  809988:	b2a8d83a 	srl	r20,r22,r10
  80998c:	baaad83a 	srl	r21,r23,r10
  809990:	1d28b03a 	or	r20,r3,r20
  809994:	003fdf06 	br	809914 <__floatunsidf+0xd8>
  809998:	b006d07a 	srli	r3,r22,1
  80999c:	008007c4 	movi	r2,31
  8099a0:	1245c83a 	sub	r2,r2,r9
  8099a4:	1886d83a 	srl	r3,r3,r2
  8099a8:	ba62983a 	sll	r17,r23,r9
  8099ac:	b260983a 	sll	r16,r22,r9
  8099b0:	1c62b03a 	or	r17,r3,r17
  8099b4:	003fcc06 	br	8098e8 <__floatunsidf+0xac>
  8099b8:	2006d07a 	srli	r3,r4,1
  8099bc:	008007c4 	movi	r2,31
  8099c0:	1285c83a 	sub	r2,r2,r10
  8099c4:	18a6d83a 	srl	r19,r3,r2
  8099c8:	22a4983a 	sll	r18,r4,r10
  8099cc:	003fd706 	br	80992c <__floatunsidf+0xf0>

008099d0 <udivmodsi4>:
  8099d0:	29001b2e 	bgeu	r5,r4,809a40 <udivmodsi4+0x70>
  8099d4:	28001a16 	blt	r5,zero,809a40 <udivmodsi4+0x70>
  8099d8:	00800044 	movi	r2,1
  8099dc:	0007883a 	mov	r3,zero
  8099e0:	01c007c4 	movi	r7,31
  8099e4:	00000306 	br	8099f4 <udivmodsi4+0x24>
  8099e8:	19c01326 	beq	r3,r7,809a38 <udivmodsi4+0x68>
  8099ec:	18c00044 	addi	r3,r3,1
  8099f0:	28000416 	blt	r5,zero,809a04 <udivmodsi4+0x34>
  8099f4:	294b883a 	add	r5,r5,r5
  8099f8:	1085883a 	add	r2,r2,r2
  8099fc:	293ffa36 	bltu	r5,r4,8099e8 <udivmodsi4+0x18>
  809a00:	10000d26 	beq	r2,zero,809a38 <udivmodsi4+0x68>
  809a04:	0007883a 	mov	r3,zero
  809a08:	21400236 	bltu	r4,r5,809a14 <udivmodsi4+0x44>
  809a0c:	2149c83a 	sub	r4,r4,r5
  809a10:	1886b03a 	or	r3,r3,r2
  809a14:	1004d07a 	srli	r2,r2,1
  809a18:	280ad07a 	srli	r5,r5,1
  809a1c:	103ffa1e 	bne	r2,zero,809a08 <udivmodsi4+0x38>
  809a20:	30000226 	beq	r6,zero,809a2c <udivmodsi4+0x5c>
  809a24:	2005883a 	mov	r2,r4
  809a28:	f800283a 	ret
  809a2c:	1809883a 	mov	r4,r3
  809a30:	2005883a 	mov	r2,r4
  809a34:	f800283a 	ret
  809a38:	0007883a 	mov	r3,zero
  809a3c:	003ff806 	br	809a20 <udivmodsi4+0x50>
  809a40:	00800044 	movi	r2,1
  809a44:	0007883a 	mov	r3,zero
  809a48:	003fef06 	br	809a08 <udivmodsi4+0x38>

00809a4c <__divsi3>:
  809a4c:	defffe04 	addi	sp,sp,-8
  809a50:	dc000015 	stw	r16,0(sp)
  809a54:	dfc00115 	stw	ra,4(sp)
  809a58:	0021883a 	mov	r16,zero
  809a5c:	20000c16 	blt	r4,zero,809a90 <__divsi3+0x44>
  809a60:	000d883a 	mov	r6,zero
  809a64:	28000e16 	blt	r5,zero,809aa0 <__divsi3+0x54>
  809a68:	08099d00 	call	8099d0 <udivmodsi4>
  809a6c:	1007883a 	mov	r3,r2
  809a70:	8005003a 	cmpeq	r2,r16,zero
  809a74:	1000011e 	bne	r2,zero,809a7c <__divsi3+0x30>
  809a78:	00c7c83a 	sub	r3,zero,r3
  809a7c:	1805883a 	mov	r2,r3
  809a80:	dfc00117 	ldw	ra,4(sp)
  809a84:	dc000017 	ldw	r16,0(sp)
  809a88:	dec00204 	addi	sp,sp,8
  809a8c:	f800283a 	ret
  809a90:	0109c83a 	sub	r4,zero,r4
  809a94:	04000044 	movi	r16,1
  809a98:	000d883a 	mov	r6,zero
  809a9c:	283ff20e 	bge	r5,zero,809a68 <__divsi3+0x1c>
  809aa0:	014bc83a 	sub	r5,zero,r5
  809aa4:	8021003a 	cmpeq	r16,r16,zero
  809aa8:	003fef06 	br	809a68 <__divsi3+0x1c>

00809aac <__modsi3>:
  809aac:	deffff04 	addi	sp,sp,-4
  809ab0:	dfc00015 	stw	ra,0(sp)
  809ab4:	01800044 	movi	r6,1
  809ab8:	2807883a 	mov	r3,r5
  809abc:	20000416 	blt	r4,zero,809ad0 <__modsi3+0x24>
  809ac0:	28000c16 	blt	r5,zero,809af4 <__modsi3+0x48>
  809ac4:	dfc00017 	ldw	ra,0(sp)
  809ac8:	dec00104 	addi	sp,sp,4
  809acc:	08099d01 	jmpi	8099d0 <udivmodsi4>
  809ad0:	0109c83a 	sub	r4,zero,r4
  809ad4:	28000b16 	blt	r5,zero,809b04 <__modsi3+0x58>
  809ad8:	180b883a 	mov	r5,r3
  809adc:	01800044 	movi	r6,1
  809ae0:	08099d00 	call	8099d0 <udivmodsi4>
  809ae4:	0085c83a 	sub	r2,zero,r2
  809ae8:	dfc00017 	ldw	ra,0(sp)
  809aec:	dec00104 	addi	sp,sp,4
  809af0:	f800283a 	ret
  809af4:	014bc83a 	sub	r5,zero,r5
  809af8:	dfc00017 	ldw	ra,0(sp)
  809afc:	dec00104 	addi	sp,sp,4
  809b00:	08099d01 	jmpi	8099d0 <udivmodsi4>
  809b04:	0147c83a 	sub	r3,zero,r5
  809b08:	003ff306 	br	809ad8 <__modsi3+0x2c>

00809b0c <__udivsi3>:
  809b0c:	000d883a 	mov	r6,zero
  809b10:	08099d01 	jmpi	8099d0 <udivmodsi4>

00809b14 <__umodsi3>:
  809b14:	01800044 	movi	r6,1
  809b18:	08099d01 	jmpi	8099d0 <udivmodsi4>

00809b1c <__mulsi3>:
  809b1c:	20000a26 	beq	r4,zero,809b48 <__mulsi3+0x2c>
  809b20:	0007883a 	mov	r3,zero
  809b24:	2080004c 	andi	r2,r4,1
  809b28:	1005003a 	cmpeq	r2,r2,zero
  809b2c:	2008d07a 	srli	r4,r4,1
  809b30:	1000011e 	bne	r2,zero,809b38 <__mulsi3+0x1c>
  809b34:	1947883a 	add	r3,r3,r5
  809b38:	294b883a 	add	r5,r5,r5
  809b3c:	203ff91e 	bne	r4,zero,809b24 <__mulsi3+0x8>
  809b40:	1805883a 	mov	r2,r3
  809b44:	f800283a 	ret
  809b48:	0007883a 	mov	r3,zero
  809b4c:	1805883a 	mov	r2,r3
  809b50:	f800283a 	ret

00809b54 <__muldi3>:
  809b54:	defff204 	addi	sp,sp,-56
  809b58:	df000c15 	stw	fp,48(sp)
  809b5c:	3038d43a 	srli	fp,r6,16
  809b60:	dd000815 	stw	r20,32(sp)
  809b64:	dc400515 	stw	r17,20(sp)
  809b68:	2028d43a 	srli	r20,r4,16
  809b6c:	247fffcc 	andi	r17,r4,65535
  809b70:	dc000415 	stw	r16,16(sp)
  809b74:	343fffcc 	andi	r16,r6,65535
  809b78:	dcc00715 	stw	r19,28(sp)
  809b7c:	d9000015 	stw	r4,0(sp)
  809b80:	2827883a 	mov	r19,r5
  809b84:	8809883a 	mov	r4,r17
  809b88:	d9400115 	stw	r5,4(sp)
  809b8c:	800b883a 	mov	r5,r16
  809b90:	d9800215 	stw	r6,8(sp)
  809b94:	dfc00d15 	stw	ra,52(sp)
  809b98:	d9c00315 	stw	r7,12(sp)
  809b9c:	dd800a15 	stw	r22,40(sp)
  809ba0:	dd400915 	stw	r21,36(sp)
  809ba4:	302d883a 	mov	r22,r6
  809ba8:	ddc00b15 	stw	r23,44(sp)
  809bac:	dc800615 	stw	r18,24(sp)
  809bb0:	0809b1c0 	call	809b1c <__mulsi3>
  809bb4:	8809883a 	mov	r4,r17
  809bb8:	e00b883a 	mov	r5,fp
  809bbc:	102b883a 	mov	r21,r2
  809bc0:	0809b1c0 	call	809b1c <__mulsi3>
  809bc4:	800b883a 	mov	r5,r16
  809bc8:	a009883a 	mov	r4,r20
  809bcc:	1023883a 	mov	r17,r2
  809bd0:	0809b1c0 	call	809b1c <__mulsi3>
  809bd4:	a009883a 	mov	r4,r20
  809bd8:	e00b883a 	mov	r5,fp
  809bdc:	1021883a 	mov	r16,r2
  809be0:	0809b1c0 	call	809b1c <__mulsi3>
  809be4:	a8ffffcc 	andi	r3,r21,65535
  809be8:	a82ad43a 	srli	r21,r21,16
  809bec:	8c23883a 	add	r17,r17,r16
  809bf0:	1011883a 	mov	r8,r2
  809bf4:	ac6b883a 	add	r21,r21,r17
  809bf8:	a804943a 	slli	r2,r21,16
  809bfc:	b009883a 	mov	r4,r22
  809c00:	980b883a 	mov	r5,r19
  809c04:	10c7883a 	add	r3,r2,r3
  809c08:	a812d43a 	srli	r9,r21,16
  809c0c:	180d883a 	mov	r6,r3
  809c10:	ac00022e 	bgeu	r21,r16,809c1c <__muldi3+0xc8>
  809c14:	00800074 	movhi	r2,1
  809c18:	4091883a 	add	r8,r8,r2
  809c1c:	4267883a 	add	r19,r8,r9
  809c20:	302d883a 	mov	r22,r6
  809c24:	0809b1c0 	call	809b1c <__mulsi3>
  809c28:	d9400317 	ldw	r5,12(sp)
  809c2c:	d9000017 	ldw	r4,0(sp)
  809c30:	1023883a 	mov	r17,r2
  809c34:	0809b1c0 	call	809b1c <__mulsi3>
  809c38:	14cb883a 	add	r5,r2,r19
  809c3c:	894b883a 	add	r5,r17,r5
  809c40:	b005883a 	mov	r2,r22
  809c44:	2807883a 	mov	r3,r5
  809c48:	dfc00d17 	ldw	ra,52(sp)
  809c4c:	df000c17 	ldw	fp,48(sp)
  809c50:	ddc00b17 	ldw	r23,44(sp)
  809c54:	dd800a17 	ldw	r22,40(sp)
  809c58:	dd400917 	ldw	r21,36(sp)
  809c5c:	dd000817 	ldw	r20,32(sp)
  809c60:	dcc00717 	ldw	r19,28(sp)
  809c64:	dc800617 	ldw	r18,24(sp)
  809c68:	dc400517 	ldw	r17,20(sp)
  809c6c:	dc000417 	ldw	r16,16(sp)
  809c70:	dec00e04 	addi	sp,sp,56
  809c74:	f800283a 	ret

00809c78 <__clzsi2>:
  809c78:	00bfffd4 	movui	r2,65535
  809c7c:	11000e36 	bltu	r2,r4,809cb8 <__clzsi2+0x40>
  809c80:	00803fc4 	movi	r2,255
  809c84:	01400204 	movi	r5,8
  809c88:	0007883a 	mov	r3,zero
  809c8c:	11001036 	bltu	r2,r4,809cd0 <__clzsi2+0x58>
  809c90:	000b883a 	mov	r5,zero
  809c94:	20c6d83a 	srl	r3,r4,r3
  809c98:	008020b4 	movhi	r2,130
  809c9c:	10ac8404 	addi	r2,r2,-19952
  809ca0:	1887883a 	add	r3,r3,r2
  809ca4:	18800003 	ldbu	r2,0(r3)
  809ca8:	00c00804 	movi	r3,32
  809cac:	2885883a 	add	r2,r5,r2
  809cb0:	1885c83a 	sub	r2,r3,r2
  809cb4:	f800283a 	ret
  809cb8:	01400404 	movi	r5,16
  809cbc:	00804034 	movhi	r2,256
  809cc0:	10bfffc4 	addi	r2,r2,-1
  809cc4:	2807883a 	mov	r3,r5
  809cc8:	113ff22e 	bgeu	r2,r4,809c94 <__clzsi2+0x1c>
  809ccc:	01400604 	movi	r5,24
  809cd0:	2807883a 	mov	r3,r5
  809cd4:	20c6d83a 	srl	r3,r4,r3
  809cd8:	008020b4 	movhi	r2,130
  809cdc:	10ac8404 	addi	r2,r2,-19952
  809ce0:	1887883a 	add	r3,r3,r2
  809ce4:	18800003 	ldbu	r2,0(r3)
  809ce8:	00c00804 	movi	r3,32
  809cec:	2885883a 	add	r2,r5,r2
  809cf0:	1885c83a 	sub	r2,r3,r2
  809cf4:	f800283a 	ret

00809cf8 <__pack_d>:
  809cf8:	20c00017 	ldw	r3,0(r4)
  809cfc:	defffd04 	addi	sp,sp,-12
  809d00:	dc000015 	stw	r16,0(sp)
  809d04:	dc800215 	stw	r18,8(sp)
  809d08:	dc400115 	stw	r17,4(sp)
  809d0c:	00800044 	movi	r2,1
  809d10:	22000317 	ldw	r8,12(r4)
  809d14:	001f883a 	mov	r15,zero
  809d18:	22400417 	ldw	r9,16(r4)
  809d1c:	24000117 	ldw	r16,4(r4)
  809d20:	10c0552e 	bgeu	r2,r3,809e78 <__pack_d+0x180>
  809d24:	00800104 	movi	r2,4
  809d28:	18804f26 	beq	r3,r2,809e68 <__pack_d+0x170>
  809d2c:	00800084 	movi	r2,2
  809d30:	18800226 	beq	r3,r2,809d3c <__pack_d+0x44>
  809d34:	4244b03a 	or	r2,r8,r9
  809d38:	10001a1e 	bne	r2,zero,809da4 <__pack_d+0xac>
  809d3c:	000d883a 	mov	r6,zero
  809d40:	000f883a 	mov	r7,zero
  809d44:	0011883a 	mov	r8,zero
  809d48:	00800434 	movhi	r2,16
  809d4c:	10bfffc4 	addi	r2,r2,-1
  809d50:	301d883a 	mov	r14,r6
  809d54:	3884703a 	and	r2,r7,r2
  809d58:	400a953a 	slli	r5,r8,20
  809d5c:	79bffc2c 	andhi	r6,r15,65520
  809d60:	308cb03a 	or	r6,r6,r2
  809d64:	00e00434 	movhi	r3,32784
  809d68:	18ffffc4 	addi	r3,r3,-1
  809d6c:	800497fa 	slli	r2,r16,31
  809d70:	30c6703a 	and	r3,r6,r3
  809d74:	1946b03a 	or	r3,r3,r5
  809d78:	01600034 	movhi	r5,32768
  809d7c:	297fffc4 	addi	r5,r5,-1
  809d80:	194a703a 	and	r5,r3,r5
  809d84:	288ab03a 	or	r5,r5,r2
  809d88:	2807883a 	mov	r3,r5
  809d8c:	7005883a 	mov	r2,r14
  809d90:	dc800217 	ldw	r18,8(sp)
  809d94:	dc400117 	ldw	r17,4(sp)
  809d98:	dc000017 	ldw	r16,0(sp)
  809d9c:	dec00304 	addi	sp,sp,12
  809da0:	f800283a 	ret
  809da4:	21000217 	ldw	r4,8(r4)
  809da8:	00bf0084 	movi	r2,-1022
  809dac:	20803f16 	blt	r4,r2,809eac <__pack_d+0x1b4>
  809db0:	0080ffc4 	movi	r2,1023
  809db4:	11002c16 	blt	r2,r4,809e68 <__pack_d+0x170>
  809db8:	00803fc4 	movi	r2,255
  809dbc:	408c703a 	and	r6,r8,r2
  809dc0:	00802004 	movi	r2,128
  809dc4:	0007883a 	mov	r3,zero
  809dc8:	000f883a 	mov	r7,zero
  809dcc:	2280ffc4 	addi	r10,r4,1023
  809dd0:	30801e26 	beq	r6,r2,809e4c <__pack_d+0x154>
  809dd4:	00801fc4 	movi	r2,127
  809dd8:	4089883a 	add	r4,r8,r2
  809ddc:	220d803a 	cmpltu	r6,r4,r8
  809de0:	324d883a 	add	r6,r6,r9
  809de4:	2011883a 	mov	r8,r4
  809de8:	3013883a 	mov	r9,r6
  809dec:	00880034 	movhi	r2,8192
  809df0:	10bfffc4 	addi	r2,r2,-1
  809df4:	12400d36 	bltu	r2,r9,809e2c <__pack_d+0x134>
  809df8:	4804963a 	slli	r2,r9,24
  809dfc:	400cd23a 	srli	r6,r8,8
  809e00:	480ed23a 	srli	r7,r9,8
  809e04:	013fffc4 	movi	r4,-1
  809e08:	118cb03a 	or	r6,r2,r6
  809e0c:	01400434 	movhi	r5,16
  809e10:	297fffc4 	addi	r5,r5,-1
  809e14:	3104703a 	and	r2,r6,r4
  809e18:	3946703a 	and	r3,r7,r5
  809e1c:	5201ffcc 	andi	r8,r10,2047
  809e20:	100d883a 	mov	r6,r2
  809e24:	180f883a 	mov	r7,r3
  809e28:	003fc706 	br	809d48 <__pack_d+0x50>
  809e2c:	480897fa 	slli	r4,r9,31
  809e30:	4004d07a 	srli	r2,r8,1
  809e34:	4806d07a 	srli	r3,r9,1
  809e38:	52800044 	addi	r10,r10,1
  809e3c:	2084b03a 	or	r2,r4,r2
  809e40:	1011883a 	mov	r8,r2
  809e44:	1813883a 	mov	r9,r3
  809e48:	003feb06 	br	809df8 <__pack_d+0x100>
  809e4c:	383fe11e 	bne	r7,zero,809dd4 <__pack_d+0xdc>
  809e50:	01004004 	movi	r4,256
  809e54:	4104703a 	and	r2,r8,r4
  809e58:	10c4b03a 	or	r2,r2,r3
  809e5c:	103fe326 	beq	r2,zero,809dec <__pack_d+0xf4>
  809e60:	3005883a 	mov	r2,r6
  809e64:	003fdc06 	br	809dd8 <__pack_d+0xe0>
  809e68:	000d883a 	mov	r6,zero
  809e6c:	000f883a 	mov	r7,zero
  809e70:	0201ffc4 	movi	r8,2047
  809e74:	003fb406 	br	809d48 <__pack_d+0x50>
  809e78:	0005883a 	mov	r2,zero
  809e7c:	00c00234 	movhi	r3,8
  809e80:	408cb03a 	or	r6,r8,r2
  809e84:	48ceb03a 	or	r7,r9,r3
  809e88:	013fffc4 	movi	r4,-1
  809e8c:	01400434 	movhi	r5,16
  809e90:	297fffc4 	addi	r5,r5,-1
  809e94:	3104703a 	and	r2,r6,r4
  809e98:	3946703a 	and	r3,r7,r5
  809e9c:	100d883a 	mov	r6,r2
  809ea0:	180f883a 	mov	r7,r3
  809ea4:	0201ffc4 	movi	r8,2047
  809ea8:	003fa706 	br	809d48 <__pack_d+0x50>
  809eac:	1109c83a 	sub	r4,r2,r4
  809eb0:	00800e04 	movi	r2,56
  809eb4:	11004316 	blt	r2,r4,809fc4 <__pack_d+0x2cc>
  809eb8:	21fff804 	addi	r7,r4,-32
  809ebc:	38004516 	blt	r7,zero,809fd4 <__pack_d+0x2dc>
  809ec0:	49d8d83a 	srl	r12,r9,r7
  809ec4:	001b883a 	mov	r13,zero
  809ec8:	0023883a 	mov	r17,zero
  809ecc:	01400044 	movi	r5,1
  809ed0:	0025883a 	mov	r18,zero
  809ed4:	38004716 	blt	r7,zero,809ff4 <__pack_d+0x2fc>
  809ed8:	29d6983a 	sll	r11,r5,r7
  809edc:	0015883a 	mov	r10,zero
  809ee0:	00bfffc4 	movi	r2,-1
  809ee4:	5089883a 	add	r4,r10,r2
  809ee8:	588b883a 	add	r5,r11,r2
  809eec:	228d803a 	cmpltu	r6,r4,r10
  809ef0:	314b883a 	add	r5,r6,r5
  809ef4:	4104703a 	and	r2,r8,r4
  809ef8:	4946703a 	and	r3,r9,r5
  809efc:	10c4b03a 	or	r2,r2,r3
  809f00:	10000226 	beq	r2,zero,809f0c <__pack_d+0x214>
  809f04:	04400044 	movi	r17,1
  809f08:	0025883a 	mov	r18,zero
  809f0c:	00803fc4 	movi	r2,255
  809f10:	644eb03a 	or	r7,r12,r17
  809f14:	3892703a 	and	r9,r7,r2
  809f18:	00802004 	movi	r2,128
  809f1c:	6c90b03a 	or	r8,r13,r18
  809f20:	0015883a 	mov	r10,zero
  809f24:	48801626 	beq	r9,r2,809f80 <__pack_d+0x288>
  809f28:	01001fc4 	movi	r4,127
  809f2c:	3905883a 	add	r2,r7,r4
  809f30:	11cd803a 	cmpltu	r6,r2,r7
  809f34:	320d883a 	add	r6,r6,r8
  809f38:	100f883a 	mov	r7,r2
  809f3c:	00840034 	movhi	r2,4096
  809f40:	10bfffc4 	addi	r2,r2,-1
  809f44:	3011883a 	mov	r8,r6
  809f48:	0007883a 	mov	r3,zero
  809f4c:	11801b36 	bltu	r2,r6,809fbc <__pack_d+0x2c4>
  809f50:	4004963a 	slli	r2,r8,24
  809f54:	3808d23a 	srli	r4,r7,8
  809f58:	400ad23a 	srli	r5,r8,8
  809f5c:	1813883a 	mov	r9,r3
  809f60:	1108b03a 	or	r4,r2,r4
  809f64:	00bfffc4 	movi	r2,-1
  809f68:	00c00434 	movhi	r3,16
  809f6c:	18ffffc4 	addi	r3,r3,-1
  809f70:	208c703a 	and	r6,r4,r2
  809f74:	28ce703a 	and	r7,r5,r3
  809f78:	4a01ffcc 	andi	r8,r9,2047
  809f7c:	003f7206 	br	809d48 <__pack_d+0x50>
  809f80:	503fe91e 	bne	r10,zero,809f28 <__pack_d+0x230>
  809f84:	01004004 	movi	r4,256
  809f88:	3904703a 	and	r2,r7,r4
  809f8c:	0007883a 	mov	r3,zero
  809f90:	10c4b03a 	or	r2,r2,r3
  809f94:	10000626 	beq	r2,zero,809fb0 <__pack_d+0x2b8>
  809f98:	3a45883a 	add	r2,r7,r9
  809f9c:	11cd803a 	cmpltu	r6,r2,r7
  809fa0:	320d883a 	add	r6,r6,r8
  809fa4:	100f883a 	mov	r7,r2
  809fa8:	3011883a 	mov	r8,r6
  809fac:	0007883a 	mov	r3,zero
  809fb0:	00840034 	movhi	r2,4096
  809fb4:	10bfffc4 	addi	r2,r2,-1
  809fb8:	123fe52e 	bgeu	r2,r8,809f50 <__pack_d+0x258>
  809fbc:	00c00044 	movi	r3,1
  809fc0:	003fe306 	br	809f50 <__pack_d+0x258>
  809fc4:	0009883a 	mov	r4,zero
  809fc8:	0013883a 	mov	r9,zero
  809fcc:	000b883a 	mov	r5,zero
  809fd0:	003fe406 	br	809f64 <__pack_d+0x26c>
  809fd4:	4a47883a 	add	r3,r9,r9
  809fd8:	008007c4 	movi	r2,31
  809fdc:	1105c83a 	sub	r2,r2,r4
  809fe0:	1886983a 	sll	r3,r3,r2
  809fe4:	4118d83a 	srl	r12,r8,r4
  809fe8:	491ad83a 	srl	r13,r9,r4
  809fec:	1b18b03a 	or	r12,r3,r12
  809ff0:	003fb506 	br	809ec8 <__pack_d+0x1d0>
  809ff4:	2806d07a 	srli	r3,r5,1
  809ff8:	008007c4 	movi	r2,31
  809ffc:	1105c83a 	sub	r2,r2,r4
  80a000:	1896d83a 	srl	r11,r3,r2
  80a004:	2914983a 	sll	r10,r5,r4
  80a008:	003fb506 	br	809ee0 <__pack_d+0x1e8>

0080a00c <__unpack_d>:
  80a00c:	20c00117 	ldw	r3,4(r4)
  80a010:	22400017 	ldw	r9,0(r4)
  80a014:	00800434 	movhi	r2,16
  80a018:	10bfffc4 	addi	r2,r2,-1
  80a01c:	1808d53a 	srli	r4,r3,20
  80a020:	180cd7fa 	srli	r6,r3,31
  80a024:	1894703a 	and	r10,r3,r2
  80a028:	2201ffcc 	andi	r8,r4,2047
  80a02c:	281b883a 	mov	r13,r5
  80a030:	4817883a 	mov	r11,r9
  80a034:	29800115 	stw	r6,4(r5)
  80a038:	5019883a 	mov	r12,r10
  80a03c:	40001e1e 	bne	r8,zero,80a0b8 <__unpack_d+0xac>
  80a040:	4a84b03a 	or	r2,r9,r10
  80a044:	10001926 	beq	r2,zero,80a0ac <__unpack_d+0xa0>
  80a048:	4804d63a 	srli	r2,r9,24
  80a04c:	500c923a 	slli	r6,r10,8
  80a050:	013f0084 	movi	r4,-1022
  80a054:	00c40034 	movhi	r3,4096
  80a058:	18ffffc4 	addi	r3,r3,-1
  80a05c:	118cb03a 	or	r6,r2,r6
  80a060:	008000c4 	movi	r2,3
  80a064:	480a923a 	slli	r5,r9,8
  80a068:	68800015 	stw	r2,0(r13)
  80a06c:	69000215 	stw	r4,8(r13)
  80a070:	19800b36 	bltu	r3,r6,80a0a0 <__unpack_d+0x94>
  80a074:	200f883a 	mov	r7,r4
  80a078:	1811883a 	mov	r8,r3
  80a07c:	2945883a 	add	r2,r5,r5
  80a080:	1149803a 	cmpltu	r4,r2,r5
  80a084:	3187883a 	add	r3,r6,r6
  80a088:	20c9883a 	add	r4,r4,r3
  80a08c:	100b883a 	mov	r5,r2
  80a090:	200d883a 	mov	r6,r4
  80a094:	39ffffc4 	addi	r7,r7,-1
  80a098:	413ff82e 	bgeu	r8,r4,80a07c <__unpack_d+0x70>
  80a09c:	69c00215 	stw	r7,8(r13)
  80a0a0:	69800415 	stw	r6,16(r13)
  80a0a4:	69400315 	stw	r5,12(r13)
  80a0a8:	f800283a 	ret
  80a0ac:	00800084 	movi	r2,2
  80a0b0:	28800015 	stw	r2,0(r5)
  80a0b4:	f800283a 	ret
  80a0b8:	0081ffc4 	movi	r2,2047
  80a0bc:	40800f26 	beq	r8,r2,80a0fc <__unpack_d+0xf0>
  80a0c0:	480cd63a 	srli	r6,r9,24
  80a0c4:	5006923a 	slli	r3,r10,8
  80a0c8:	4804923a 	slli	r2,r9,8
  80a0cc:	0009883a 	mov	r4,zero
  80a0d0:	30c6b03a 	or	r3,r6,r3
  80a0d4:	01440034 	movhi	r5,4096
  80a0d8:	110cb03a 	or	r6,r2,r4
  80a0dc:	423f0044 	addi	r8,r8,-1023
  80a0e0:	194eb03a 	or	r7,r3,r5
  80a0e4:	008000c4 	movi	r2,3
  80a0e8:	69c00415 	stw	r7,16(r13)
  80a0ec:	6a000215 	stw	r8,8(r13)
  80a0f0:	68800015 	stw	r2,0(r13)
  80a0f4:	69800315 	stw	r6,12(r13)
  80a0f8:	f800283a 	ret
  80a0fc:	4a84b03a 	or	r2,r9,r10
  80a100:	1000031e 	bne	r2,zero,80a110 <__unpack_d+0x104>
  80a104:	00800104 	movi	r2,4
  80a108:	28800015 	stw	r2,0(r5)
  80a10c:	f800283a 	ret
  80a110:	0009883a 	mov	r4,zero
  80a114:	01400234 	movhi	r5,8
  80a118:	4904703a 	and	r2,r9,r4
  80a11c:	5146703a 	and	r3,r10,r5
  80a120:	10c4b03a 	or	r2,r2,r3
  80a124:	10000526 	beq	r2,zero,80a13c <__unpack_d+0x130>
  80a128:	00800044 	movi	r2,1
  80a12c:	68800015 	stw	r2,0(r13)
  80a130:	6b000415 	stw	r12,16(r13)
  80a134:	6ac00315 	stw	r11,12(r13)
  80a138:	f800283a 	ret
  80a13c:	68000015 	stw	zero,0(r13)
  80a140:	003ffb06 	br	80a130 <__unpack_d+0x124>

0080a144 <__fpcmp_parts_d>:
  80a144:	21800017 	ldw	r6,0(r4)
  80a148:	00c00044 	movi	r3,1
  80a14c:	19800a2e 	bgeu	r3,r6,80a178 <__fpcmp_parts_d+0x34>
  80a150:	28800017 	ldw	r2,0(r5)
  80a154:	1880082e 	bgeu	r3,r2,80a178 <__fpcmp_parts_d+0x34>
  80a158:	00c00104 	movi	r3,4
  80a15c:	30c02626 	beq	r6,r3,80a1f8 <__fpcmp_parts_d+0xb4>
  80a160:	10c02226 	beq	r2,r3,80a1ec <__fpcmp_parts_d+0xa8>
  80a164:	00c00084 	movi	r3,2
  80a168:	30c00526 	beq	r6,r3,80a180 <__fpcmp_parts_d+0x3c>
  80a16c:	10c0071e 	bne	r2,r3,80a18c <__fpcmp_parts_d+0x48>
  80a170:	20800117 	ldw	r2,4(r4)
  80a174:	1000091e 	bne	r2,zero,80a19c <__fpcmp_parts_d+0x58>
  80a178:	00800044 	movi	r2,1
  80a17c:	f800283a 	ret
  80a180:	10c01a1e 	bne	r2,r3,80a1ec <__fpcmp_parts_d+0xa8>
  80a184:	0005883a 	mov	r2,zero
  80a188:	f800283a 	ret
  80a18c:	22000117 	ldw	r8,4(r4)
  80a190:	28800117 	ldw	r2,4(r5)
  80a194:	40800326 	beq	r8,r2,80a1a4 <__fpcmp_parts_d+0x60>
  80a198:	403ff726 	beq	r8,zero,80a178 <__fpcmp_parts_d+0x34>
  80a19c:	00bfffc4 	movi	r2,-1
  80a1a0:	f800283a 	ret
  80a1a4:	20c00217 	ldw	r3,8(r4)
  80a1a8:	28800217 	ldw	r2,8(r5)
  80a1ac:	10fffa16 	blt	r2,r3,80a198 <__fpcmp_parts_d+0x54>
  80a1b0:	18800916 	blt	r3,r2,80a1d8 <__fpcmp_parts_d+0x94>
  80a1b4:	21c00417 	ldw	r7,16(r4)
  80a1b8:	28c00417 	ldw	r3,16(r5)
  80a1bc:	21800317 	ldw	r6,12(r4)
  80a1c0:	28800317 	ldw	r2,12(r5)
  80a1c4:	19fff436 	bltu	r3,r7,80a198 <__fpcmp_parts_d+0x54>
  80a1c8:	38c00526 	beq	r7,r3,80a1e0 <__fpcmp_parts_d+0x9c>
  80a1cc:	38c00236 	bltu	r7,r3,80a1d8 <__fpcmp_parts_d+0x94>
  80a1d0:	19ffec1e 	bne	r3,r7,80a184 <__fpcmp_parts_d+0x40>
  80a1d4:	30bfeb2e 	bgeu	r6,r2,80a184 <__fpcmp_parts_d+0x40>
  80a1d8:	403fe71e 	bne	r8,zero,80a178 <__fpcmp_parts_d+0x34>
  80a1dc:	003fef06 	br	80a19c <__fpcmp_parts_d+0x58>
  80a1e0:	11bffa2e 	bgeu	r2,r6,80a1cc <__fpcmp_parts_d+0x88>
  80a1e4:	403fe426 	beq	r8,zero,80a178 <__fpcmp_parts_d+0x34>
  80a1e8:	003fec06 	br	80a19c <__fpcmp_parts_d+0x58>
  80a1ec:	28800117 	ldw	r2,4(r5)
  80a1f0:	103fe11e 	bne	r2,zero,80a178 <__fpcmp_parts_d+0x34>
  80a1f4:	003fe906 	br	80a19c <__fpcmp_parts_d+0x58>
  80a1f8:	11bfdd1e 	bne	r2,r6,80a170 <__fpcmp_parts_d+0x2c>
  80a1fc:	28c00117 	ldw	r3,4(r5)
  80a200:	20800117 	ldw	r2,4(r4)
  80a204:	1885c83a 	sub	r2,r3,r2
  80a208:	f800283a 	ret

0080a20c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80a20c:	defff804 	addi	sp,sp,-32
  80a210:	dfc00715 	stw	ra,28(sp)
  80a214:	df000615 	stw	fp,24(sp)
  80a218:	df000604 	addi	fp,sp,24
  80a21c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80a220:	e0bffc17 	ldw	r2,-16(fp)
  80a224:	1004803a 	cmplt	r2,r2,zero
  80a228:	1000091e 	bne	r2,zero,80a250 <close+0x44>
  80a22c:	e13ffc17 	ldw	r4,-16(fp)
  80a230:	01400304 	movi	r5,12
  80a234:	0809b1c0 	call	809b1c <__mulsi3>
  80a238:	1007883a 	mov	r3,r2
  80a23c:	008020b4 	movhi	r2,130
  80a240:	10af3e04 	addi	r2,r2,-17160
  80a244:	1887883a 	add	r3,r3,r2
  80a248:	e0ffff15 	stw	r3,-4(fp)
  80a24c:	00000106 	br	80a254 <close+0x48>
  80a250:	e03fff15 	stw	zero,-4(fp)
  80a254:	e0bfff17 	ldw	r2,-4(fp)
  80a258:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80a25c:	e0bffb17 	ldw	r2,-20(fp)
  80a260:	1005003a 	cmpeq	r2,r2,zero
  80a264:	10001d1e 	bne	r2,zero,80a2dc <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80a268:	e0bffb17 	ldw	r2,-20(fp)
  80a26c:	10800017 	ldw	r2,0(r2)
  80a270:	10800417 	ldw	r2,16(r2)
  80a274:	1005003a 	cmpeq	r2,r2,zero
  80a278:	1000071e 	bne	r2,zero,80a298 <close+0x8c>
  80a27c:	e0bffb17 	ldw	r2,-20(fp)
  80a280:	10800017 	ldw	r2,0(r2)
  80a284:	10800417 	ldw	r2,16(r2)
  80a288:	e13ffb17 	ldw	r4,-20(fp)
  80a28c:	103ee83a 	callr	r2
  80a290:	e0bffe15 	stw	r2,-8(fp)
  80a294:	00000106 	br	80a29c <close+0x90>
  80a298:	e03ffe15 	stw	zero,-8(fp)
  80a29c:	e0bffe17 	ldw	r2,-8(fp)
  80a2a0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80a2a4:	e13ffc17 	ldw	r4,-16(fp)
  80a2a8:	080ad180 	call	80ad18 <alt_release_fd>
    if (rval < 0)
  80a2ac:	e0bffa17 	ldw	r2,-24(fp)
  80a2b0:	1004403a 	cmpge	r2,r2,zero
  80a2b4:	1000071e 	bne	r2,zero,80a2d4 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  80a2b8:	080a30c0 	call	80a30c <alt_get_errno>
  80a2bc:	e0fffa17 	ldw	r3,-24(fp)
  80a2c0:	00c7c83a 	sub	r3,zero,r3
  80a2c4:	10c00015 	stw	r3,0(r2)
      return -1;
  80a2c8:	00bfffc4 	movi	r2,-1
  80a2cc:	e0bffd15 	stw	r2,-12(fp)
  80a2d0:	00000806 	br	80a2f4 <close+0xe8>
    }
    return 0;
  80a2d4:	e03ffd15 	stw	zero,-12(fp)
  80a2d8:	00000606 	br	80a2f4 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a2dc:	080a30c0 	call	80a30c <alt_get_errno>
  80a2e0:	1007883a 	mov	r3,r2
  80a2e4:	00801444 	movi	r2,81
  80a2e8:	18800015 	stw	r2,0(r3)
    return -1;
  80a2ec:	00bfffc4 	movi	r2,-1
  80a2f0:	e0bffd15 	stw	r2,-12(fp)
  80a2f4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80a2f8:	e037883a 	mov	sp,fp
  80a2fc:	dfc00117 	ldw	ra,4(sp)
  80a300:	df000017 	ldw	fp,0(sp)
  80a304:	dec00204 	addi	sp,sp,8
  80a308:	f800283a 	ret

0080a30c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a30c:	defffd04 	addi	sp,sp,-12
  80a310:	dfc00215 	stw	ra,8(sp)
  80a314:	df000115 	stw	fp,4(sp)
  80a318:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a31c:	008020b4 	movhi	r2,130
  80a320:	10b3e504 	addi	r2,r2,-12396
  80a324:	10800017 	ldw	r2,0(r2)
  80a328:	1005003a 	cmpeq	r2,r2,zero
  80a32c:	1000061e 	bne	r2,zero,80a348 <alt_get_errno+0x3c>
  80a330:	008020b4 	movhi	r2,130
  80a334:	10b3e504 	addi	r2,r2,-12396
  80a338:	10800017 	ldw	r2,0(r2)
  80a33c:	103ee83a 	callr	r2
  80a340:	e0bfff15 	stw	r2,-4(fp)
  80a344:	00000306 	br	80a354 <alt_get_errno+0x48>
  80a348:	008020b4 	movhi	r2,130
  80a34c:	10baed04 	addi	r2,r2,-5196
  80a350:	e0bfff15 	stw	r2,-4(fp)
  80a354:	e0bfff17 	ldw	r2,-4(fp)
}
  80a358:	e037883a 	mov	sp,fp
  80a35c:	dfc00117 	ldw	ra,4(sp)
  80a360:	df000017 	ldw	fp,0(sp)
  80a364:	dec00204 	addi	sp,sp,8
  80a368:	f800283a 	ret

0080a36c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80a36c:	defffc04 	addi	sp,sp,-16
  80a370:	df000315 	stw	fp,12(sp)
  80a374:	df000304 	addi	fp,sp,12
  80a378:	e13ffd15 	stw	r4,-12(fp)
  80a37c:	e17ffe15 	stw	r5,-8(fp)
  80a380:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80a384:	e0bfff17 	ldw	r2,-4(fp)
}
  80a388:	e037883a 	mov	sp,fp
  80a38c:	df000017 	ldw	fp,0(sp)
  80a390:	dec00104 	addi	sp,sp,4
  80a394:	f800283a 	ret

0080a398 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80a398:	defff904 	addi	sp,sp,-28
  80a39c:	dfc00615 	stw	ra,24(sp)
  80a3a0:	df000515 	stw	fp,20(sp)
  80a3a4:	df000504 	addi	fp,sp,20
  80a3a8:	e13ffc15 	stw	r4,-16(fp)
  80a3ac:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a3b0:	e0bffc17 	ldw	r2,-16(fp)
  80a3b4:	1004803a 	cmplt	r2,r2,zero
  80a3b8:	1000091e 	bne	r2,zero,80a3e0 <fstat+0x48>
  80a3bc:	e13ffc17 	ldw	r4,-16(fp)
  80a3c0:	01400304 	movi	r5,12
  80a3c4:	0809b1c0 	call	809b1c <__mulsi3>
  80a3c8:	1007883a 	mov	r3,r2
  80a3cc:	008020b4 	movhi	r2,130
  80a3d0:	10af3e04 	addi	r2,r2,-17160
  80a3d4:	1887883a 	add	r3,r3,r2
  80a3d8:	e0ffff15 	stw	r3,-4(fp)
  80a3dc:	00000106 	br	80a3e4 <fstat+0x4c>
  80a3e0:	e03fff15 	stw	zero,-4(fp)
  80a3e4:	e0bfff17 	ldw	r2,-4(fp)
  80a3e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80a3ec:	e0bffb17 	ldw	r2,-20(fp)
  80a3f0:	1005003a 	cmpeq	r2,r2,zero
  80a3f4:	1000121e 	bne	r2,zero,80a440 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80a3f8:	e0bffb17 	ldw	r2,-20(fp)
  80a3fc:	10800017 	ldw	r2,0(r2)
  80a400:	10800817 	ldw	r2,32(r2)
  80a404:	1005003a 	cmpeq	r2,r2,zero
  80a408:	1000081e 	bne	r2,zero,80a42c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  80a40c:	e0bffb17 	ldw	r2,-20(fp)
  80a410:	10800017 	ldw	r2,0(r2)
  80a414:	10800817 	ldw	r2,32(r2)
  80a418:	e13ffb17 	ldw	r4,-20(fp)
  80a41c:	e17ffd17 	ldw	r5,-12(fp)
  80a420:	103ee83a 	callr	r2
  80a424:	e0bffe15 	stw	r2,-8(fp)
  80a428:	00000b06 	br	80a458 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80a42c:	e0fffd17 	ldw	r3,-12(fp)
  80a430:	00880004 	movi	r2,8192
  80a434:	18800115 	stw	r2,4(r3)
      return 0;
  80a438:	e03ffe15 	stw	zero,-8(fp)
  80a43c:	00000606 	br	80a458 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a440:	080a4700 	call	80a470 <alt_get_errno>
  80a444:	1007883a 	mov	r3,r2
  80a448:	00801444 	movi	r2,81
  80a44c:	18800015 	stw	r2,0(r3)
    return -1;
  80a450:	00bfffc4 	movi	r2,-1
  80a454:	e0bffe15 	stw	r2,-8(fp)
  80a458:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a45c:	e037883a 	mov	sp,fp
  80a460:	dfc00117 	ldw	ra,4(sp)
  80a464:	df000017 	ldw	fp,0(sp)
  80a468:	dec00204 	addi	sp,sp,8
  80a46c:	f800283a 	ret

0080a470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a470:	defffd04 	addi	sp,sp,-12
  80a474:	dfc00215 	stw	ra,8(sp)
  80a478:	df000115 	stw	fp,4(sp)
  80a47c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a480:	008020b4 	movhi	r2,130
  80a484:	10b3e504 	addi	r2,r2,-12396
  80a488:	10800017 	ldw	r2,0(r2)
  80a48c:	1005003a 	cmpeq	r2,r2,zero
  80a490:	1000061e 	bne	r2,zero,80a4ac <alt_get_errno+0x3c>
  80a494:	008020b4 	movhi	r2,130
  80a498:	10b3e504 	addi	r2,r2,-12396
  80a49c:	10800017 	ldw	r2,0(r2)
  80a4a0:	103ee83a 	callr	r2
  80a4a4:	e0bfff15 	stw	r2,-4(fp)
  80a4a8:	00000306 	br	80a4b8 <alt_get_errno+0x48>
  80a4ac:	008020b4 	movhi	r2,130
  80a4b0:	10baed04 	addi	r2,r2,-5196
  80a4b4:	e0bfff15 	stw	r2,-4(fp)
  80a4b8:	e0bfff17 	ldw	r2,-4(fp)
}
  80a4bc:	e037883a 	mov	sp,fp
  80a4c0:	dfc00117 	ldw	ra,4(sp)
  80a4c4:	df000017 	ldw	fp,0(sp)
  80a4c8:	dec00204 	addi	sp,sp,8
  80a4cc:	f800283a 	ret

0080a4d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80a4d0:	deffeb04 	addi	sp,sp,-84
  80a4d4:	dfc01415 	stw	ra,80(sp)
  80a4d8:	df001315 	stw	fp,76(sp)
  80a4dc:	df001304 	addi	fp,sp,76
  80a4e0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a4e4:	e0bffd17 	ldw	r2,-12(fp)
  80a4e8:	1004803a 	cmplt	r2,r2,zero
  80a4ec:	1000091e 	bne	r2,zero,80a514 <isatty+0x44>
  80a4f0:	e13ffd17 	ldw	r4,-12(fp)
  80a4f4:	01400304 	movi	r5,12
  80a4f8:	0809b1c0 	call	809b1c <__mulsi3>
  80a4fc:	1007883a 	mov	r3,r2
  80a500:	008020b4 	movhi	r2,130
  80a504:	10af3e04 	addi	r2,r2,-17160
  80a508:	1887883a 	add	r3,r3,r2
  80a50c:	e0ffff15 	stw	r3,-4(fp)
  80a510:	00000106 	br	80a518 <isatty+0x48>
  80a514:	e03fff15 	stw	zero,-4(fp)
  80a518:	e0bfff17 	ldw	r2,-4(fp)
  80a51c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80a520:	e0bfed17 	ldw	r2,-76(fp)
  80a524:	1005003a 	cmpeq	r2,r2,zero
  80a528:	10000f1e 	bne	r2,zero,80a568 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80a52c:	e0bfed17 	ldw	r2,-76(fp)
  80a530:	10800017 	ldw	r2,0(r2)
  80a534:	10800817 	ldw	r2,32(r2)
  80a538:	1004c03a 	cmpne	r2,r2,zero
  80a53c:	1000031e 	bne	r2,zero,80a54c <isatty+0x7c>
    {
      return 1;
  80a540:	00800044 	movi	r2,1
  80a544:	e0bffe15 	stw	r2,-8(fp)
  80a548:	00000c06 	br	80a57c <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80a54c:	e17fee04 	addi	r5,fp,-72
  80a550:	e13ffd17 	ldw	r4,-12(fp)
  80a554:	080a3980 	call	80a398 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80a558:	e0bfef17 	ldw	r2,-68(fp)
  80a55c:	10880020 	cmpeqi	r2,r2,8192
  80a560:	e0bffe15 	stw	r2,-8(fp)
  80a564:	00000506 	br	80a57c <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a568:	080a5940 	call	80a594 <alt_get_errno>
  80a56c:	1007883a 	mov	r3,r2
  80a570:	00801444 	movi	r2,81
  80a574:	18800015 	stw	r2,0(r3)
    return 0;
  80a578:	e03ffe15 	stw	zero,-8(fp)
  80a57c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a580:	e037883a 	mov	sp,fp
  80a584:	dfc00117 	ldw	ra,4(sp)
  80a588:	df000017 	ldw	fp,0(sp)
  80a58c:	dec00204 	addi	sp,sp,8
  80a590:	f800283a 	ret

0080a594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a594:	defffd04 	addi	sp,sp,-12
  80a598:	dfc00215 	stw	ra,8(sp)
  80a59c:	df000115 	stw	fp,4(sp)
  80a5a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a5a4:	008020b4 	movhi	r2,130
  80a5a8:	10b3e504 	addi	r2,r2,-12396
  80a5ac:	10800017 	ldw	r2,0(r2)
  80a5b0:	1005003a 	cmpeq	r2,r2,zero
  80a5b4:	1000061e 	bne	r2,zero,80a5d0 <alt_get_errno+0x3c>
  80a5b8:	008020b4 	movhi	r2,130
  80a5bc:	10b3e504 	addi	r2,r2,-12396
  80a5c0:	10800017 	ldw	r2,0(r2)
  80a5c4:	103ee83a 	callr	r2
  80a5c8:	e0bfff15 	stw	r2,-4(fp)
  80a5cc:	00000306 	br	80a5dc <alt_get_errno+0x48>
  80a5d0:	008020b4 	movhi	r2,130
  80a5d4:	10baed04 	addi	r2,r2,-5196
  80a5d8:	e0bfff15 	stw	r2,-4(fp)
  80a5dc:	e0bfff17 	ldw	r2,-4(fp)
}
  80a5e0:	e037883a 	mov	sp,fp
  80a5e4:	dfc00117 	ldw	ra,4(sp)
  80a5e8:	df000017 	ldw	fp,0(sp)
  80a5ec:	dec00204 	addi	sp,sp,8
  80a5f0:	f800283a 	ret

0080a5f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80a5f4:	defffe04 	addi	sp,sp,-8
  80a5f8:	dfc00115 	stw	ra,4(sp)
  80a5fc:	df000015 	stw	fp,0(sp)
  80a600:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80a604:	010020b4 	movhi	r4,130
  80a608:	21340904 	addi	r4,r4,-12252
  80a60c:	014020b4 	movhi	r5,130
  80a610:	296d2f04 	addi	r5,r5,-19268
  80a614:	018020b4 	movhi	r6,130
  80a618:	31b40904 	addi	r6,r6,-12252
  80a61c:	080a6740 	call	80a674 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80a620:	01002034 	movhi	r4,128
  80a624:	21000004 	addi	r4,r4,0
  80a628:	01406434 	movhi	r5,400
  80a62c:	29500804 	addi	r5,r5,16416
  80a630:	01806434 	movhi	r6,400
  80a634:	31907004 	addi	r6,r6,16832
  80a638:	080a6740 	call	80a674 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80a63c:	010020b4 	movhi	r4,130
  80a640:	212b0104 	addi	r4,r4,-21500
  80a644:	014020b4 	movhi	r5,130
  80a648:	296b0104 	addi	r5,r5,-21500
  80a64c:	018020b4 	movhi	r6,130
  80a650:	31ad2f04 	addi	r6,r6,-19268
  80a654:	080a6740 	call	80a674 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80a658:	08193440 	call	819344 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80a65c:	08195d00 	call	8195d0 <alt_icache_flush_all>
}
  80a660:	e037883a 	mov	sp,fp
  80a664:	dfc00117 	ldw	ra,4(sp)
  80a668:	df000017 	ldw	fp,0(sp)
  80a66c:	dec00204 	addi	sp,sp,8
  80a670:	f800283a 	ret

0080a674 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80a674:	defffc04 	addi	sp,sp,-16
  80a678:	df000315 	stw	fp,12(sp)
  80a67c:	df000304 	addi	fp,sp,12
  80a680:	e13ffd15 	stw	r4,-12(fp)
  80a684:	e17ffe15 	stw	r5,-8(fp)
  80a688:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80a68c:	e0fffe17 	ldw	r3,-8(fp)
  80a690:	e0bffd17 	ldw	r2,-12(fp)
  80a694:	18800e26 	beq	r3,r2,80a6d0 <alt_load_section+0x5c>
  {
    while( to != end )
  80a698:	00000a06 	br	80a6c4 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80a69c:	e0bffd17 	ldw	r2,-12(fp)
  80a6a0:	10c00017 	ldw	r3,0(r2)
  80a6a4:	e0bffe17 	ldw	r2,-8(fp)
  80a6a8:	10c00015 	stw	r3,0(r2)
  80a6ac:	e0bffe17 	ldw	r2,-8(fp)
  80a6b0:	10800104 	addi	r2,r2,4
  80a6b4:	e0bffe15 	stw	r2,-8(fp)
  80a6b8:	e0bffd17 	ldw	r2,-12(fp)
  80a6bc:	10800104 	addi	r2,r2,4
  80a6c0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80a6c4:	e0fffe17 	ldw	r3,-8(fp)
  80a6c8:	e0bfff17 	ldw	r2,-4(fp)
  80a6cc:	18bff31e 	bne	r3,r2,80a69c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80a6d0:	e037883a 	mov	sp,fp
  80a6d4:	df000017 	ldw	fp,0(sp)
  80a6d8:	dec00104 	addi	sp,sp,4
  80a6dc:	f800283a 	ret

0080a6e0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80a6e0:	defff804 	addi	sp,sp,-32
  80a6e4:	dfc00715 	stw	ra,28(sp)
  80a6e8:	df000615 	stw	fp,24(sp)
  80a6ec:	df000604 	addi	fp,sp,24
  80a6f0:	e13ffc15 	stw	r4,-16(fp)
  80a6f4:	e17ffd15 	stw	r5,-12(fp)
  80a6f8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80a6fc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a700:	e0bffc17 	ldw	r2,-16(fp)
  80a704:	1004803a 	cmplt	r2,r2,zero
  80a708:	1000091e 	bne	r2,zero,80a730 <lseek+0x50>
  80a70c:	e13ffc17 	ldw	r4,-16(fp)
  80a710:	01400304 	movi	r5,12
  80a714:	0809b1c0 	call	809b1c <__mulsi3>
  80a718:	1007883a 	mov	r3,r2
  80a71c:	008020b4 	movhi	r2,130
  80a720:	10af3e04 	addi	r2,r2,-17160
  80a724:	1887883a 	add	r3,r3,r2
  80a728:	e0ffff15 	stw	r3,-4(fp)
  80a72c:	00000106 	br	80a734 <lseek+0x54>
  80a730:	e03fff15 	stw	zero,-4(fp)
  80a734:	e0bfff17 	ldw	r2,-4(fp)
  80a738:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80a73c:	e0bffb17 	ldw	r2,-20(fp)
  80a740:	1005003a 	cmpeq	r2,r2,zero
  80a744:	1000111e 	bne	r2,zero,80a78c <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80a748:	e0bffb17 	ldw	r2,-20(fp)
  80a74c:	10800017 	ldw	r2,0(r2)
  80a750:	10800717 	ldw	r2,28(r2)
  80a754:	1005003a 	cmpeq	r2,r2,zero
  80a758:	1000091e 	bne	r2,zero,80a780 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80a75c:	e0bffb17 	ldw	r2,-20(fp)
  80a760:	10800017 	ldw	r2,0(r2)
  80a764:	10800717 	ldw	r2,28(r2)
  80a768:	e13ffb17 	ldw	r4,-20(fp)
  80a76c:	e17ffd17 	ldw	r5,-12(fp)
  80a770:	e1bffe17 	ldw	r6,-8(fp)
  80a774:	103ee83a 	callr	r2
  80a778:	e0bffa15 	stw	r2,-24(fp)
  80a77c:	00000506 	br	80a794 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80a780:	00bfde84 	movi	r2,-134
  80a784:	e0bffa15 	stw	r2,-24(fp)
  80a788:	00000206 	br	80a794 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80a78c:	00bfebc4 	movi	r2,-81
  80a790:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80a794:	e0bffa17 	ldw	r2,-24(fp)
  80a798:	1004403a 	cmpge	r2,r2,zero
  80a79c:	1000071e 	bne	r2,zero,80a7bc <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80a7a0:	080a7d40 	call	80a7d4 <alt_get_errno>
  80a7a4:	1007883a 	mov	r3,r2
  80a7a8:	e0bffa17 	ldw	r2,-24(fp)
  80a7ac:	0085c83a 	sub	r2,zero,r2
  80a7b0:	18800015 	stw	r2,0(r3)
    rc = -1;
  80a7b4:	00bfffc4 	movi	r2,-1
  80a7b8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80a7bc:	e0bffa17 	ldw	r2,-24(fp)
}
  80a7c0:	e037883a 	mov	sp,fp
  80a7c4:	dfc00117 	ldw	ra,4(sp)
  80a7c8:	df000017 	ldw	fp,0(sp)
  80a7cc:	dec00204 	addi	sp,sp,8
  80a7d0:	f800283a 	ret

0080a7d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a7d4:	defffd04 	addi	sp,sp,-12
  80a7d8:	dfc00215 	stw	ra,8(sp)
  80a7dc:	df000115 	stw	fp,4(sp)
  80a7e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a7e4:	008020b4 	movhi	r2,130
  80a7e8:	10b3e504 	addi	r2,r2,-12396
  80a7ec:	10800017 	ldw	r2,0(r2)
  80a7f0:	1005003a 	cmpeq	r2,r2,zero
  80a7f4:	1000061e 	bne	r2,zero,80a810 <alt_get_errno+0x3c>
  80a7f8:	008020b4 	movhi	r2,130
  80a7fc:	10b3e504 	addi	r2,r2,-12396
  80a800:	10800017 	ldw	r2,0(r2)
  80a804:	103ee83a 	callr	r2
  80a808:	e0bfff15 	stw	r2,-4(fp)
  80a80c:	00000306 	br	80a81c <alt_get_errno+0x48>
  80a810:	008020b4 	movhi	r2,130
  80a814:	10baed04 	addi	r2,r2,-5196
  80a818:	e0bfff15 	stw	r2,-4(fp)
  80a81c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a820:	e037883a 	mov	sp,fp
  80a824:	dfc00117 	ldw	ra,4(sp)
  80a828:	df000017 	ldw	fp,0(sp)
  80a82c:	dec00204 	addi	sp,sp,8
  80a830:	f800283a 	ret

0080a834 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80a834:	defffb04 	addi	sp,sp,-20
  80a838:	dfc00415 	stw	ra,16(sp)
  80a83c:	df000315 	stw	fp,12(sp)
  80a840:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80a844:	0009883a 	mov	r4,zero
  80a848:	081359c0 	call	81359c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80a84c:	080bbd80 	call	80bbd8 <OSInit>
  80a850:	01000044 	movi	r4,1
  80a854:	0810aa00 	call	810aa0 <OSSemCreate>
  80a858:	1007883a 	mov	r3,r2
  80a85c:	008020b4 	movhi	r2,130
  80a860:	10baf304 	addi	r2,r2,-5172
  80a864:	10c00015 	stw	r3,0(r2)
  80a868:	01000044 	movi	r4,1
  80a86c:	0810aa00 	call	810aa0 <OSSemCreate>
  80a870:	1007883a 	mov	r3,r2
  80a874:	008020b4 	movhi	r2,130
  80a878:	10baf504 	addi	r2,r2,-5164
  80a87c:	10c00015 	stw	r3,0(r2)
  80a880:	008020b4 	movhi	r2,130
  80a884:	10baee04 	addi	r2,r2,-5192
  80a888:	e0bffd15 	stw	r2,-12(fp)
  80a88c:	00800044 	movi	r2,1
  80a890:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80a894:	e13ffe0b 	ldhu	r4,-8(fp)
  80a898:	0810aa00 	call	810aa0 <OSSemCreate>
  80a89c:	1007883a 	mov	r3,r2
  80a8a0:	e0bffd17 	ldw	r2,-12(fp)
  80a8a4:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80a8a8:	08135d00 	call	8135d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80a8ac:	010020b4 	movhi	r4,130
  80a8b0:	212cc704 	addi	r4,r4,-19684
  80a8b4:	014020b4 	movhi	r5,130
  80a8b8:	296cc704 	addi	r5,r5,-19684
  80a8bc:	018020b4 	movhi	r6,130
  80a8c0:	31acc704 	addi	r6,r6,-19684
  80a8c4:	08196c40 	call	8196c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80a8c8:	08194740 	call	819474 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80a8cc:	010020b4 	movhi	r4,130
  80a8d0:	21253604 	addi	r4,r4,-27432
  80a8d4:	081a4b40 	call	81a4b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80a8d8:	d1271517 	ldw	r4,-25516(gp)
  80a8dc:	d1671617 	ldw	r5,-25512(gp)
  80a8e0:	d1a71717 	ldw	r6,-25508(gp)
  80a8e4:	08006840 	call	800684 <main>
  80a8e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80a8ec:	01000044 	movi	r4,1
  80a8f0:	080a20c0 	call	80a20c <close>
  exit (result);
  80a8f4:	e13fff17 	ldw	r4,-4(fp)
  80a8f8:	081a4c80 	call	81a4c8 <exit>

0080a8fc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  80a8fc:	defff204 	addi	sp,sp,-56
  80a900:	dfc00a15 	stw	ra,40(sp)
  80a904:	df000915 	stw	fp,36(sp)
  80a908:	df000904 	addi	fp,sp,36
  80a90c:	e1400215 	stw	r5,8(fp)
  80a910:	e1800315 	stw	r6,12(fp)
  80a914:	e1c00415 	stw	r7,16(fp)
  80a918:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
  80a91c:	e0800204 	addi	r2,fp,8
  80a920:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  80a924:	e0bfff17 	ldw	r2,-4(fp)
  80a928:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
  80a92c:	00007806 	br	80ab10 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  80a930:	e0bffc07 	ldb	r2,-16(fp)
  80a934:	10800960 	cmpeqi	r2,r2,37
  80a938:	1000031e 	bne	r2,zero,80a948 <alt_printf+0x4c>
        {
            alt_putchar(c);
  80a93c:	e13ffc07 	ldb	r4,-16(fp)
  80a940:	080ab540 	call	80ab54 <alt_putchar>
  80a944:	00007206 	br	80ab10 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  80a948:	e0bffd17 	ldw	r2,-12(fp)
  80a94c:	10800003 	ldbu	r2,0(r2)
  80a950:	e0bffc05 	stb	r2,-16(fp)
  80a954:	e0bffc07 	ldb	r2,-16(fp)
  80a958:	1004c03a 	cmpne	r2,r2,zero
  80a95c:	1007883a 	mov	r3,r2
  80a960:	e0bffd17 	ldw	r2,-12(fp)
  80a964:	10800044 	addi	r2,r2,1
  80a968:	e0bffd15 	stw	r2,-12(fp)
  80a96c:	18803fcc 	andi	r2,r3,255
  80a970:	1005003a 	cmpeq	r2,r2,zero
  80a974:	1000721e 	bne	r2,zero,80ab40 <alt_printf+0x244>
            {
                if (c == '%')
  80a978:	e0bffc07 	ldb	r2,-16(fp)
  80a97c:	10800958 	cmpnei	r2,r2,37
  80a980:	1000031e 	bne	r2,zero,80a990 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  80a984:	e13ffc07 	ldb	r4,-16(fp)
  80a988:	080ab540 	call	80ab54 <alt_putchar>
  80a98c:	00006006 	br	80ab10 <alt_printf+0x214>
                } 
                else if (c == 'c')
  80a990:	e0bffc07 	ldb	r2,-16(fp)
  80a994:	108018d8 	cmpnei	r2,r2,99
  80a998:	1000091e 	bne	r2,zero,80a9c0 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
  80a99c:	e0fffe17 	ldw	r3,-8(fp)
  80a9a0:	18800104 	addi	r2,r3,4
  80a9a4:	e0bffe15 	stw	r2,-8(fp)
  80a9a8:	1805883a 	mov	r2,r3
  80a9ac:	10800017 	ldw	r2,0(r2)
  80a9b0:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
  80a9b4:	e13ffb17 	ldw	r4,-20(fp)
  80a9b8:	080ab540 	call	80ab54 <alt_putchar>
  80a9bc:	00005406 	br	80ab10 <alt_printf+0x214>
                }
                else if (c == 'x')
  80a9c0:	e0bffc07 	ldb	r2,-16(fp)
  80a9c4:	10801e18 	cmpnei	r2,r2,120
  80a9c8:	1000371e 	bne	r2,zero,80aaa8 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  80a9cc:	e0fffe17 	ldw	r3,-8(fp)
  80a9d0:	18800104 	addi	r2,r3,4
  80a9d4:	e0bffe15 	stw	r2,-8(fp)
  80a9d8:	1805883a 	mov	r2,r3
  80a9dc:	10800017 	ldw	r2,0(r2)
  80a9e0:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  80a9e4:	e0bffa17 	ldw	r2,-24(fp)
  80a9e8:	1004c03a 	cmpne	r2,r2,zero
  80a9ec:	1000031e 	bne	r2,zero,80a9fc <alt_printf+0x100>
                    {
                        alt_putchar('0');
  80a9f0:	01000c04 	movi	r4,48
  80a9f4:	080ab540 	call	80ab54 <alt_putchar>
                        continue;
  80a9f8:	00004506 	br	80ab10 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  80a9fc:	00800704 	movi	r2,28
  80aa00:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
  80aa04:	00000306 	br	80aa14 <alt_printf+0x118>
                        digit_shift -= 4;
  80aa08:	e0bff817 	ldw	r2,-32(fp)
  80aa0c:	10bfff04 	addi	r2,r2,-4
  80aa10:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  80aa14:	00c003c4 	movi	r3,15
  80aa18:	e0bff817 	ldw	r2,-32(fp)
  80aa1c:	1884983a 	sll	r2,r3,r2
  80aa20:	1007883a 	mov	r3,r2
  80aa24:	e0bffa17 	ldw	r2,-24(fp)
  80aa28:	1884703a 	and	r2,r3,r2
  80aa2c:	1005003a 	cmpeq	r2,r2,zero
  80aa30:	103ff51e 	bne	r2,zero,80aa08 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  80aa34:	00001806 	br	80aa98 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  80aa38:	00c003c4 	movi	r3,15
  80aa3c:	e0bff817 	ldw	r2,-32(fp)
  80aa40:	1884983a 	sll	r2,r3,r2
  80aa44:	1007883a 	mov	r3,r2
  80aa48:	e0bffa17 	ldw	r2,-24(fp)
  80aa4c:	1886703a 	and	r3,r3,r2
  80aa50:	e0bff817 	ldw	r2,-32(fp)
  80aa54:	1884d83a 	srl	r2,r3,r2
  80aa58:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
  80aa5c:	e0bff917 	ldw	r2,-28(fp)
  80aa60:	108002a8 	cmpgeui	r2,r2,10
  80aa64:	1000041e 	bne	r2,zero,80aa78 <alt_printf+0x17c>
                            c = '0' + digit;
  80aa68:	e0bff917 	ldw	r2,-28(fp)
  80aa6c:	10800c04 	addi	r2,r2,48
  80aa70:	e0bffc05 	stb	r2,-16(fp)
  80aa74:	00000306 	br	80aa84 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
  80aa78:	e0bff917 	ldw	r2,-28(fp)
  80aa7c:	108015c4 	addi	r2,r2,87
  80aa80:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
  80aa84:	e13ffc07 	ldb	r4,-16(fp)
  80aa88:	080ab540 	call	80ab54 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  80aa8c:	e0bff817 	ldw	r2,-32(fp)
  80aa90:	10bfff04 	addi	r2,r2,-4
  80aa94:	e0bff815 	stw	r2,-32(fp)
  80aa98:	e0bff817 	ldw	r2,-32(fp)
  80aa9c:	1004403a 	cmpge	r2,r2,zero
  80aaa0:	103fe51e 	bne	r2,zero,80aa38 <alt_printf+0x13c>
  80aaa4:	00001a06 	br	80ab10 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  80aaa8:	e0bffc07 	ldb	r2,-16(fp)
  80aaac:	10801cd8 	cmpnei	r2,r2,115
  80aab0:	1000171e 	bne	r2,zero,80ab10 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  80aab4:	e0fffe17 	ldw	r3,-8(fp)
  80aab8:	18800104 	addi	r2,r3,4
  80aabc:	e0bffe15 	stw	r2,-8(fp)
  80aac0:	1805883a 	mov	r2,r3
  80aac4:	10800017 	ldw	r2,0(r2)
  80aac8:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
  80aacc:	00000906 	br	80aaf4 <alt_printf+0x1f8>
                      alt_putchar(*s++);
  80aad0:	e0bff717 	ldw	r2,-36(fp)
  80aad4:	10800003 	ldbu	r2,0(r2)
  80aad8:	11003fcc 	andi	r4,r2,255
  80aadc:	2100201c 	xori	r4,r4,128
  80aae0:	213fe004 	addi	r4,r4,-128
  80aae4:	e0bff717 	ldw	r2,-36(fp)
  80aae8:	10800044 	addi	r2,r2,1
  80aaec:	e0bff715 	stw	r2,-36(fp)
  80aaf0:	080ab540 	call	80ab54 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  80aaf4:	e0bff717 	ldw	r2,-36(fp)
  80aaf8:	10800003 	ldbu	r2,0(r2)
  80aafc:	10803fcc 	andi	r2,r2,255
  80ab00:	1080201c 	xori	r2,r2,128
  80ab04:	10bfe004 	addi	r2,r2,-128
  80ab08:	1004c03a 	cmpne	r2,r2,zero
  80ab0c:	103ff01e 	bne	r2,zero,80aad0 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  80ab10:	e0bffd17 	ldw	r2,-12(fp)
  80ab14:	10800003 	ldbu	r2,0(r2)
  80ab18:	e0bffc05 	stb	r2,-16(fp)
  80ab1c:	e0bffc07 	ldb	r2,-16(fp)
  80ab20:	1004c03a 	cmpne	r2,r2,zero
  80ab24:	1007883a 	mov	r3,r2
  80ab28:	e0bffd17 	ldw	r2,-12(fp)
  80ab2c:	10800044 	addi	r2,r2,1
  80ab30:	e0bffd15 	stw	r2,-12(fp)
  80ab34:	18803fcc 	andi	r2,r3,255
  80ab38:	1004c03a 	cmpne	r2,r2,zero
  80ab3c:	103f7c1e 	bne	r2,zero,80a930 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
  80ab40:	e037883a 	mov	sp,fp
  80ab44:	dfc00117 	ldw	ra,4(sp)
  80ab48:	df000017 	ldw	fp,0(sp)
  80ab4c:	dec00504 	addi	sp,sp,20
  80ab50:	f800283a 	ret

0080ab54 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  80ab54:	defffd04 	addi	sp,sp,-12
  80ab58:	dfc00215 	stw	ra,8(sp)
  80ab5c:	df000115 	stw	fp,4(sp)
  80ab60:	df000104 	addi	fp,sp,4
  80ab64:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  80ab68:	008020b4 	movhi	r2,130
  80ab6c:	10b3da04 	addi	r2,r2,-12440
  80ab70:	10800017 	ldw	r2,0(r2)
  80ab74:	11400217 	ldw	r5,8(r2)
  80ab78:	e13fff17 	ldw	r4,-4(fp)
  80ab7c:	081a5740 	call	81a574 <putc>
#endif
}
  80ab80:	e037883a 	mov	sp,fp
  80ab84:	dfc00117 	ldw	ra,4(sp)
  80ab88:	df000017 	ldw	fp,0(sp)
  80ab8c:	dec00204 	addi	sp,sp,8
  80ab90:	f800283a 	ret

0080ab94 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80ab94:	defff704 	addi	sp,sp,-36
  80ab98:	dfc00815 	stw	ra,32(sp)
  80ab9c:	df000715 	stw	fp,28(sp)
  80aba0:	df000704 	addi	fp,sp,28
  80aba4:	e13ffb15 	stw	r4,-20(fp)
  80aba8:	e17ffc15 	stw	r5,-16(fp)
  80abac:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80abb0:	e0bffb17 	ldw	r2,-20(fp)
  80abb4:	1004803a 	cmplt	r2,r2,zero
  80abb8:	1000091e 	bne	r2,zero,80abe0 <read+0x4c>
  80abbc:	e13ffb17 	ldw	r4,-20(fp)
  80abc0:	01400304 	movi	r5,12
  80abc4:	0809b1c0 	call	809b1c <__mulsi3>
  80abc8:	1007883a 	mov	r3,r2
  80abcc:	008020b4 	movhi	r2,130
  80abd0:	10af3e04 	addi	r2,r2,-17160
  80abd4:	1887883a 	add	r3,r3,r2
  80abd8:	e0ffff15 	stw	r3,-4(fp)
  80abdc:	00000106 	br	80abe4 <read+0x50>
  80abe0:	e03fff15 	stw	zero,-4(fp)
  80abe4:	e0bfff17 	ldw	r2,-4(fp)
  80abe8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80abec:	e0bffa17 	ldw	r2,-24(fp)
  80abf0:	1005003a 	cmpeq	r2,r2,zero
  80abf4:	1000241e 	bne	r2,zero,80ac88 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80abf8:	e0bffa17 	ldw	r2,-24(fp)
  80abfc:	10800217 	ldw	r2,8(r2)
  80ac00:	108000cc 	andi	r2,r2,3
  80ac04:	10800060 	cmpeqi	r2,r2,1
  80ac08:	10001a1e 	bne	r2,zero,80ac74 <read+0xe0>
  80ac0c:	e0bffa17 	ldw	r2,-24(fp)
  80ac10:	10800017 	ldw	r2,0(r2)
  80ac14:	10800517 	ldw	r2,20(r2)
  80ac18:	1005003a 	cmpeq	r2,r2,zero
  80ac1c:	1000151e 	bne	r2,zero,80ac74 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80ac20:	e0bffa17 	ldw	r2,-24(fp)
  80ac24:	10800017 	ldw	r2,0(r2)
  80ac28:	10800517 	ldw	r2,20(r2)
  80ac2c:	e17ffc17 	ldw	r5,-16(fp)
  80ac30:	e1bffd17 	ldw	r6,-12(fp)
  80ac34:	e13ffa17 	ldw	r4,-24(fp)
  80ac38:	103ee83a 	callr	r2
  80ac3c:	e0bff915 	stw	r2,-28(fp)
  80ac40:	e0bff917 	ldw	r2,-28(fp)
  80ac44:	1004403a 	cmpge	r2,r2,zero
  80ac48:	1000071e 	bne	r2,zero,80ac68 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  80ac4c:	080acb80 	call	80acb8 <alt_get_errno>
  80ac50:	e0fff917 	ldw	r3,-28(fp)
  80ac54:	00c7c83a 	sub	r3,zero,r3
  80ac58:	10c00015 	stw	r3,0(r2)
          return -1;
  80ac5c:	00bfffc4 	movi	r2,-1
  80ac60:	e0bffe15 	stw	r2,-8(fp)
  80ac64:	00000e06 	br	80aca0 <read+0x10c>
        }
        return rval;
  80ac68:	e0bff917 	ldw	r2,-28(fp)
  80ac6c:	e0bffe15 	stw	r2,-8(fp)
  80ac70:	00000b06 	br	80aca0 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80ac74:	080acb80 	call	80acb8 <alt_get_errno>
  80ac78:	1007883a 	mov	r3,r2
  80ac7c:	00800344 	movi	r2,13
  80ac80:	18800015 	stw	r2,0(r3)
  80ac84:	00000406 	br	80ac98 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80ac88:	080acb80 	call	80acb8 <alt_get_errno>
  80ac8c:	1007883a 	mov	r3,r2
  80ac90:	00801444 	movi	r2,81
  80ac94:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80ac98:	00bfffc4 	movi	r2,-1
  80ac9c:	e0bffe15 	stw	r2,-8(fp)
  80aca0:	e0bffe17 	ldw	r2,-8(fp)
}
  80aca4:	e037883a 	mov	sp,fp
  80aca8:	dfc00117 	ldw	ra,4(sp)
  80acac:	df000017 	ldw	fp,0(sp)
  80acb0:	dec00204 	addi	sp,sp,8
  80acb4:	f800283a 	ret

0080acb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80acb8:	defffd04 	addi	sp,sp,-12
  80acbc:	dfc00215 	stw	ra,8(sp)
  80acc0:	df000115 	stw	fp,4(sp)
  80acc4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80acc8:	008020b4 	movhi	r2,130
  80accc:	10b3e504 	addi	r2,r2,-12396
  80acd0:	10800017 	ldw	r2,0(r2)
  80acd4:	1005003a 	cmpeq	r2,r2,zero
  80acd8:	1000061e 	bne	r2,zero,80acf4 <alt_get_errno+0x3c>
  80acdc:	008020b4 	movhi	r2,130
  80ace0:	10b3e504 	addi	r2,r2,-12396
  80ace4:	10800017 	ldw	r2,0(r2)
  80ace8:	103ee83a 	callr	r2
  80acec:	e0bfff15 	stw	r2,-4(fp)
  80acf0:	00000306 	br	80ad00 <alt_get_errno+0x48>
  80acf4:	008020b4 	movhi	r2,130
  80acf8:	10baed04 	addi	r2,r2,-5196
  80acfc:	e0bfff15 	stw	r2,-4(fp)
  80ad00:	e0bfff17 	ldw	r2,-4(fp)
}
  80ad04:	e037883a 	mov	sp,fp
  80ad08:	dfc00117 	ldw	ra,4(sp)
  80ad0c:	df000017 	ldw	fp,0(sp)
  80ad10:	dec00204 	addi	sp,sp,8
  80ad14:	f800283a 	ret

0080ad18 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80ad18:	defffc04 	addi	sp,sp,-16
  80ad1c:	dfc00315 	stw	ra,12(sp)
  80ad20:	df000215 	stw	fp,8(sp)
  80ad24:	dc000115 	stw	r16,4(sp)
  80ad28:	df000104 	addi	fp,sp,4
  80ad2c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80ad30:	e0bfff17 	ldw	r2,-4(fp)
  80ad34:	108000d0 	cmplti	r2,r2,3
  80ad38:	10000f1e 	bne	r2,zero,80ad78 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  80ad3c:	e13fff17 	ldw	r4,-4(fp)
  80ad40:	040020b4 	movhi	r16,130
  80ad44:	842f3e04 	addi	r16,r16,-17160
  80ad48:	01400304 	movi	r5,12
  80ad4c:	0809b1c0 	call	809b1c <__mulsi3>
  80ad50:	1405883a 	add	r2,r2,r16
  80ad54:	10800204 	addi	r2,r2,8
  80ad58:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80ad5c:	e13fff17 	ldw	r4,-4(fp)
  80ad60:	040020b4 	movhi	r16,130
  80ad64:	842f3e04 	addi	r16,r16,-17160
  80ad68:	01400304 	movi	r5,12
  80ad6c:	0809b1c0 	call	809b1c <__mulsi3>
  80ad70:	1405883a 	add	r2,r2,r16
  80ad74:	10000015 	stw	zero,0(r2)
  }
}
  80ad78:	e037883a 	mov	sp,fp
  80ad7c:	dfc00217 	ldw	ra,8(sp)
  80ad80:	df000117 	ldw	fp,4(sp)
  80ad84:	dc000017 	ldw	r16,0(sp)
  80ad88:	dec00304 	addi	sp,sp,12
  80ad8c:	f800283a 	ret

0080ad90 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80ad90:	defff804 	addi	sp,sp,-32
  80ad94:	df000715 	stw	fp,28(sp)
  80ad98:	df000704 	addi	fp,sp,28
  80ad9c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ada0:	0005303a 	rdctl	r2,status
  80ada4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ada8:	e0fffb17 	ldw	r3,-20(fp)
  80adac:	00bfff84 	movi	r2,-2
  80adb0:	1884703a 	and	r2,r3,r2
  80adb4:	1001703a 	wrctl	status,r2
  
  return context;
  80adb8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80adbc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80adc0:	d0a00c17 	ldw	r2,-32720(gp)
  80adc4:	10c000c4 	addi	r3,r2,3
  80adc8:	00bfff04 	movi	r2,-4
  80adcc:	1884703a 	and	r2,r3,r2
  80add0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80add4:	d0e00c17 	ldw	r3,-32720(gp)
  80add8:	e0bffe17 	ldw	r2,-8(fp)
  80addc:	1887883a 	add	r3,r3,r2
  80ade0:	00804034 	movhi	r2,256
  80ade4:	10800004 	addi	r2,r2,0
  80ade8:	10c0072e 	bgeu	r2,r3,80ae08 <sbrk+0x78>
  80adec:	e0bffd17 	ldw	r2,-12(fp)
  80adf0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80adf4:	e0bffa17 	ldw	r2,-24(fp)
  80adf8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80adfc:	00bfffc4 	movi	r2,-1
  80ae00:	e0bfff15 	stw	r2,-4(fp)
  80ae04:	00000c06 	br	80ae38 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80ae08:	d0a00c17 	ldw	r2,-32720(gp)
  80ae0c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80ae10:	d0e00c17 	ldw	r3,-32720(gp)
  80ae14:	e0bffe17 	ldw	r2,-8(fp)
  80ae18:	1885883a 	add	r2,r3,r2
  80ae1c:	d0a00c15 	stw	r2,-32720(gp)
  80ae20:	e0bffd17 	ldw	r2,-12(fp)
  80ae24:	e0bff915 	stw	r2,-28(fp)
  80ae28:	e0bff917 	ldw	r2,-28(fp)
  80ae2c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80ae30:	e0bffc17 	ldw	r2,-16(fp)
  80ae34:	e0bfff15 	stw	r2,-4(fp)
  80ae38:	e0bfff17 	ldw	r2,-4(fp)
} 
  80ae3c:	e037883a 	mov	sp,fp
  80ae40:	df000017 	ldw	fp,0(sp)
  80ae44:	dec00104 	addi	sp,sp,4
  80ae48:	f800283a 	ret

0080ae4c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80ae4c:	defff704 	addi	sp,sp,-36
  80ae50:	dfc00815 	stw	ra,32(sp)
  80ae54:	df000715 	stw	fp,28(sp)
  80ae58:	df000704 	addi	fp,sp,28
  80ae5c:	e13ffb15 	stw	r4,-20(fp)
  80ae60:	e17ffc15 	stw	r5,-16(fp)
  80ae64:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ae68:	e0bffb17 	ldw	r2,-20(fp)
  80ae6c:	1004803a 	cmplt	r2,r2,zero
  80ae70:	1000091e 	bne	r2,zero,80ae98 <write+0x4c>
  80ae74:	e13ffb17 	ldw	r4,-20(fp)
  80ae78:	01400304 	movi	r5,12
  80ae7c:	0809b1c0 	call	809b1c <__mulsi3>
  80ae80:	1007883a 	mov	r3,r2
  80ae84:	008020b4 	movhi	r2,130
  80ae88:	10af3e04 	addi	r2,r2,-17160
  80ae8c:	1887883a 	add	r3,r3,r2
  80ae90:	e0ffff15 	stw	r3,-4(fp)
  80ae94:	00000106 	br	80ae9c <write+0x50>
  80ae98:	e03fff15 	stw	zero,-4(fp)
  80ae9c:	e0bfff17 	ldw	r2,-4(fp)
  80aea0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80aea4:	e0bffa17 	ldw	r2,-24(fp)
  80aea8:	1005003a 	cmpeq	r2,r2,zero
  80aeac:	1000241e 	bne	r2,zero,80af40 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80aeb0:	e0bffa17 	ldw	r2,-24(fp)
  80aeb4:	10800217 	ldw	r2,8(r2)
  80aeb8:	108000cc 	andi	r2,r2,3
  80aebc:	1005003a 	cmpeq	r2,r2,zero
  80aec0:	10001a1e 	bne	r2,zero,80af2c <write+0xe0>
  80aec4:	e0bffa17 	ldw	r2,-24(fp)
  80aec8:	10800017 	ldw	r2,0(r2)
  80aecc:	10800617 	ldw	r2,24(r2)
  80aed0:	1005003a 	cmpeq	r2,r2,zero
  80aed4:	1000151e 	bne	r2,zero,80af2c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80aed8:	e0bffa17 	ldw	r2,-24(fp)
  80aedc:	10800017 	ldw	r2,0(r2)
  80aee0:	10800617 	ldw	r2,24(r2)
  80aee4:	e17ffc17 	ldw	r5,-16(fp)
  80aee8:	e1bffd17 	ldw	r6,-12(fp)
  80aeec:	e13ffa17 	ldw	r4,-24(fp)
  80aef0:	103ee83a 	callr	r2
  80aef4:	e0bff915 	stw	r2,-28(fp)
  80aef8:	e0bff917 	ldw	r2,-28(fp)
  80aefc:	1004403a 	cmpge	r2,r2,zero
  80af00:	1000071e 	bne	r2,zero,80af20 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  80af04:	080af700 	call	80af70 <alt_get_errno>
  80af08:	e0fff917 	ldw	r3,-28(fp)
  80af0c:	00c7c83a 	sub	r3,zero,r3
  80af10:	10c00015 	stw	r3,0(r2)
        return -1;
  80af14:	00bfffc4 	movi	r2,-1
  80af18:	e0bffe15 	stw	r2,-8(fp)
  80af1c:	00000e06 	br	80af58 <write+0x10c>
      }
      return rval;
  80af20:	e0bff917 	ldw	r2,-28(fp)
  80af24:	e0bffe15 	stw	r2,-8(fp)
  80af28:	00000b06 	br	80af58 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80af2c:	080af700 	call	80af70 <alt_get_errno>
  80af30:	1007883a 	mov	r3,r2
  80af34:	00800344 	movi	r2,13
  80af38:	18800015 	stw	r2,0(r3)
  80af3c:	00000406 	br	80af50 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80af40:	080af700 	call	80af70 <alt_get_errno>
  80af44:	1007883a 	mov	r3,r2
  80af48:	00801444 	movi	r2,81
  80af4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80af50:	00bfffc4 	movi	r2,-1
  80af54:	e0bffe15 	stw	r2,-8(fp)
  80af58:	e0bffe17 	ldw	r2,-8(fp)
}
  80af5c:	e037883a 	mov	sp,fp
  80af60:	dfc00117 	ldw	ra,4(sp)
  80af64:	df000017 	ldw	fp,0(sp)
  80af68:	dec00204 	addi	sp,sp,8
  80af6c:	f800283a 	ret

0080af70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80af70:	defffd04 	addi	sp,sp,-12
  80af74:	dfc00215 	stw	ra,8(sp)
  80af78:	df000115 	stw	fp,4(sp)
  80af7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80af80:	008020b4 	movhi	r2,130
  80af84:	10b3e504 	addi	r2,r2,-12396
  80af88:	10800017 	ldw	r2,0(r2)
  80af8c:	1005003a 	cmpeq	r2,r2,zero
  80af90:	1000061e 	bne	r2,zero,80afac <alt_get_errno+0x3c>
  80af94:	008020b4 	movhi	r2,130
  80af98:	10b3e504 	addi	r2,r2,-12396
  80af9c:	10800017 	ldw	r2,0(r2)
  80afa0:	103ee83a 	callr	r2
  80afa4:	e0bfff15 	stw	r2,-4(fp)
  80afa8:	00000306 	br	80afb8 <alt_get_errno+0x48>
  80afac:	008020b4 	movhi	r2,130
  80afb0:	10baed04 	addi	r2,r2,-5196
  80afb4:	e0bfff15 	stw	r2,-4(fp)
  80afb8:	e0bfff17 	ldw	r2,-4(fp)
}
  80afbc:	e037883a 	mov	sp,fp
  80afc0:	dfc00117 	ldw	ra,4(sp)
  80afc4:	df000017 	ldw	fp,0(sp)
  80afc8:	dec00204 	addi	sp,sp,8
  80afcc:	f800283a 	ret

0080afd0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  80afd0:	deffdf04 	addi	sp,sp,-132
  80afd4:	dfc02015 	stw	ra,128(sp)
  80afd8:	df001f15 	stw	fp,124(sp)
  80afdc:	df001f04 	addi	fp,sp,124
  80afe0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80afe4:	e17fe204 	addi	r5,fp,-120
  80afe8:	01003fc4 	movi	r4,255
  80afec:	0812e280 	call	812e28 <OSTaskQuery>
  80aff0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80aff4:	e0bffe83 	ldbu	r2,-6(fp)
  80aff8:	10803fcc 	andi	r2,r2,255
  80affc:	1004c03a 	cmpne	r2,r2,zero
  80b000:	1000191e 	bne	r2,zero,80b068 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  80b004:	e0bfee83 	ldbu	r2,-70(fp)
  80b008:	10803fcc 	andi	r2,r2,255
  80b00c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  80b010:	d1271917 	ldw	r4,-25500(gp)
  80b014:	e17ffd04 	addi	r5,fp,-12
  80b018:	08113740 	call	811374 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  80b01c:	e0bffe43 	ldbu	r2,-7(fp)
  80b020:	10803fcc 	andi	r2,r2,255
  80b024:	1005003a 	cmpeq	r2,r2,zero
  80b028:	1000071e 	bne	r2,zero,80b048 <__env_lock+0x78>
  80b02c:	d0e00d17 	ldw	r3,-32716(gp)
  80b030:	e0bfe117 	ldw	r2,-124(fp)
  80b034:	10c0041e 	bne	r2,r3,80b048 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  80b038:	d0a71817 	ldw	r2,-25504(gp)
  80b03c:	10800044 	addi	r2,r2,1
  80b040:	d0a71815 	stw	r2,-25504(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  80b044:	00000806 	br	80b068 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  80b048:	d1271917 	ldw	r4,-25500(gp)
  80b04c:	e1bffe84 	addi	r6,fp,-6
  80b050:	000b883a 	mov	r5,zero
  80b054:	0810e540 	call	810e54 <OSSemPend>
    locks  = 1;
  80b058:	00800044 	movi	r2,1
  80b05c:	d0a71815 	stw	r2,-25504(gp)
    lockid = id;
  80b060:	e0bfe117 	ldw	r2,-124(fp)
  80b064:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80b068:	e037883a 	mov	sp,fp
  80b06c:	dfc00117 	ldw	ra,4(sp)
  80b070:	df000017 	ldw	fp,0(sp)
  80b074:	dec00204 	addi	sp,sp,8
  80b078:	f800283a 	ret

0080b07c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  80b07c:	defffd04 	addi	sp,sp,-12
  80b080:	dfc00215 	stw	ra,8(sp)
  80b084:	df000115 	stw	fp,4(sp)
  80b088:	df000104 	addi	fp,sp,4
  80b08c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  80b090:	d0a71817 	ldw	r2,-25504(gp)
  80b094:	1005003a 	cmpeq	r2,r2,zero
  80b098:	10000a1e 	bne	r2,zero,80b0c4 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  80b09c:	d0a71817 	ldw	r2,-25504(gp)
  80b0a0:	10bfffc4 	addi	r2,r2,-1
  80b0a4:	d0a71815 	stw	r2,-25504(gp)
  80b0a8:	d0a71817 	ldw	r2,-25504(gp)
  80b0ac:	1004c03a 	cmpne	r2,r2,zero
  80b0b0:	1000041e 	bne	r2,zero,80b0c4 <__env_unlock+0x48>
  {
    lockid = -1;
  80b0b4:	00bfffc4 	movi	r2,-1
  80b0b8:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
  80b0bc:	d1271917 	ldw	r4,-25500(gp)
  80b0c0:	081124c0 	call	81124c <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80b0c4:	e037883a 	mov	sp,fp
  80b0c8:	dfc00117 	ldw	ra,4(sp)
  80b0cc:	df000017 	ldw	fp,0(sp)
  80b0d0:	dec00204 	addi	sp,sp,8
  80b0d4:	f800283a 	ret

0080b0d8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  80b0d8:	deffdb04 	addi	sp,sp,-148
  80b0dc:	dfc02415 	stw	ra,144(sp)
  80b0e0:	df002315 	stw	fp,140(sp)
  80b0e4:	df002304 	addi	fp,sp,140
  80b0e8:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b0ec:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  80b0f0:	008020b4 	movhi	r2,130
  80b0f4:	10baf644 	addi	r2,r2,-5159
  80b0f8:	10800003 	ldbu	r2,0(r2)
  80b0fc:	10803fcc 	andi	r2,r2,255
  80b100:	10800058 	cmpnei	r2,r2,1
  80b104:	1000311e 	bne	r2,zero,80b1cc <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80b108:	e17fe204 	addi	r5,fp,-120
  80b10c:	01003fc4 	movi	r4,255
  80b110:	0812e280 	call	812e28 <OSTaskQuery>
  80b114:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80b118:	e0bffe83 	ldbu	r2,-6(fp)
  80b11c:	10803fcc 	andi	r2,r2,255
  80b120:	1004c03a 	cmpne	r2,r2,zero
  80b124:	1000291e 	bne	r2,zero,80b1cc <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  80b128:	e0bfee83 	ldbu	r2,-70(fp)
  80b12c:	10803fcc 	andi	r2,r2,255
  80b130:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  80b134:	d1271b17 	ldw	r4,-25492(gp)
  80b138:	e17ffd04 	addi	r5,fp,-12
  80b13c:	08113740 	call	811374 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b140:	0005303a 	rdctl	r2,status
  80b144:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b148:	e0ffdf17 	ldw	r3,-132(fp)
  80b14c:	00bfff84 	movi	r2,-2
  80b150:	1884703a 	and	r2,r3,r2
  80b154:	1001703a 	wrctl	status,r2
  
  return context;
  80b158:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  80b15c:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  80b160:	e0bffd0b 	ldhu	r2,-12(fp)
  80b164:	10bfffcc 	andi	r2,r2,65535
  80b168:	1004c03a 	cmpne	r2,r2,zero
  80b16c:	10000b1e 	bne	r2,zero,80b19c <__malloc_lock+0xc4>
  80b170:	d0e00e17 	ldw	r3,-32712(gp)
  80b174:	e0bfe117 	ldw	r2,-124(fp)
  80b178:	10c0081e 	bne	r2,r3,80b19c <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  80b17c:	d0a71a17 	ldw	r2,-25496(gp)
  80b180:	10800044 	addi	r2,r2,1
  80b184:	d0a71a15 	stw	r2,-25496(gp)
  80b188:	e0bfe017 	ldw	r2,-128(fp)
  80b18c:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b190:	e0bfde17 	ldw	r2,-136(fp)
  80b194:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  80b198:	00000c06 	br	80b1cc <__malloc_lock+0xf4>
  80b19c:	e0bfe017 	ldw	r2,-128(fp)
  80b1a0:	e0bfdd15 	stw	r2,-140(fp)
  80b1a4:	e0bfdd17 	ldw	r2,-140(fp)
  80b1a8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  80b1ac:	d1271b17 	ldw	r4,-25492(gp)
  80b1b0:	e1bffe84 	addi	r6,fp,-6
  80b1b4:	000b883a 	mov	r5,zero
  80b1b8:	0810e540 	call	810e54 <OSSemPend>
    locks  = 1;
  80b1bc:	00800044 	movi	r2,1
  80b1c0:	d0a71a15 	stw	r2,-25496(gp)
    lockid = id;
  80b1c4:	e0bfe117 	ldw	r2,-124(fp)
  80b1c8:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80b1cc:	e037883a 	mov	sp,fp
  80b1d0:	dfc00117 	ldw	ra,4(sp)
  80b1d4:	df000017 	ldw	fp,0(sp)
  80b1d8:	dec00204 	addi	sp,sp,8
  80b1dc:	f800283a 	ret

0080b1e0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80b1e0:	defff804 	addi	sp,sp,-32
  80b1e4:	dfc00715 	stw	ra,28(sp)
  80b1e8:	df000615 	stw	fp,24(sp)
  80b1ec:	df000604 	addi	fp,sp,24
  80b1f0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b1f4:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  80b1f8:	008020b4 	movhi	r2,130
  80b1fc:	10baf644 	addi	r2,r2,-5159
  80b200:	10800003 	ldbu	r2,0(r2)
  80b204:	10803fcc 	andi	r2,r2,255
  80b208:	10800058 	cmpnei	r2,r2,1
  80b20c:	1000231e 	bne	r2,zero,80b29c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b210:	0005303a 	rdctl	r2,status
  80b214:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b218:	e0fffd17 	ldw	r3,-12(fp)
  80b21c:	00bfff84 	movi	r2,-2
  80b220:	1884703a 	and	r2,r3,r2
  80b224:	1001703a 	wrctl	status,r2
  
  return context;
  80b228:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  80b22c:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  80b230:	d0a71a17 	ldw	r2,-25496(gp)
  80b234:	1004c03a 	cmpne	r2,r2,zero
  80b238:	1000051e 	bne	r2,zero,80b250 <__malloc_unlock+0x70>
  80b23c:	e0bffe17 	ldw	r2,-8(fp)
  80b240:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b244:	e0bffc17 	ldw	r2,-16(fp)
  80b248:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  80b24c:	00001306 	br	80b29c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  80b250:	d0a71a17 	ldw	r2,-25496(gp)
  80b254:	10bfffc4 	addi	r2,r2,-1
  80b258:	d0a71a15 	stw	r2,-25496(gp)
  80b25c:	d0a71a17 	ldw	r2,-25496(gp)
  80b260:	1004c03a 	cmpne	r2,r2,zero
  80b264:	1000091e 	bne	r2,zero,80b28c <__malloc_unlock+0xac>
  {
    lockid = -1;
  80b268:	00bfffc4 	movi	r2,-1
  80b26c:	d0a00e15 	stw	r2,-32712(gp)
  80b270:	e0bffe17 	ldw	r2,-8(fp)
  80b274:	e0bffb15 	stw	r2,-20(fp)
  80b278:	e0bffb17 	ldw	r2,-20(fp)
  80b27c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  80b280:	d1271b17 	ldw	r4,-25492(gp)
  80b284:	081124c0 	call	81124c <OSSemPost>
  80b288:	00000406 	br	80b29c <__malloc_unlock+0xbc>
  80b28c:	e0bffe17 	ldw	r2,-8(fp)
  80b290:	e0bffa15 	stw	r2,-24(fp)
  80b294:	e0bffa17 	ldw	r2,-24(fp)
  80b298:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80b29c:	e037883a 	mov	sp,fp
  80b2a0:	dfc00117 	ldw	ra,4(sp)
  80b2a4:	df000017 	ldw	fp,0(sp)
  80b2a8:	dec00204 	addi	sp,sp,8
  80b2ac:	f800283a 	ret

0080b2b0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80b2b0:	defff604 	addi	sp,sp,-40
  80b2b4:	dfc00915 	stw	ra,36(sp)
  80b2b8:	df000815 	stw	fp,32(sp)
  80b2bc:	df000804 	addi	fp,sp,32
  80b2c0:	e13ffc15 	stw	r4,-16(fp)
  80b2c4:	e17ffd15 	stw	r5,-12(fp)
  80b2c8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b2cc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80b2d0:	e0bffe17 	ldw	r2,-8(fp)
  80b2d4:	1004c03a 	cmpne	r2,r2,zero
  80b2d8:	1000021e 	bne	r2,zero,80b2e4 <OSEventNameGet+0x34>
        return (0);
  80b2dc:	e03fff15 	stw	zero,-4(fp)
  80b2e0:	00003906 	br	80b3c8 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80b2e4:	e0bffc17 	ldw	r2,-16(fp)
  80b2e8:	1004c03a 	cmpne	r2,r2,zero
  80b2ec:	1000051e 	bne	r2,zero,80b304 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80b2f0:	e0fffe17 	ldw	r3,-8(fp)
  80b2f4:	00800104 	movi	r2,4
  80b2f8:	18800005 	stb	r2,0(r3)
        return (0);
  80b2fc:	e03fff15 	stw	zero,-4(fp)
  80b300:	00003106 	br	80b3c8 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80b304:	e0bffd17 	ldw	r2,-12(fp)
  80b308:	1004c03a 	cmpne	r2,r2,zero
  80b30c:	1000051e 	bne	r2,zero,80b324 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80b310:	e0fffe17 	ldw	r3,-8(fp)
  80b314:	00800304 	movi	r2,12
  80b318:	18800005 	stb	r2,0(r3)
        return (0);
  80b31c:	e03fff15 	stw	zero,-4(fp)
  80b320:	00002906 	br	80b3c8 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80b324:	d0a72a03 	ldbu	r2,-25432(gp)
  80b328:	10803fcc 	andi	r2,r2,255
  80b32c:	1005003a 	cmpeq	r2,r2,zero
  80b330:	1000051e 	bne	r2,zero,80b348 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  80b334:	e0fffe17 	ldw	r3,-8(fp)
  80b338:	00800444 	movi	r2,17
  80b33c:	18800005 	stb	r2,0(r3)
        return (0);
  80b340:	e03fff15 	stw	zero,-4(fp)
  80b344:	00002006 	br	80b3c8 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  80b348:	e0bffc17 	ldw	r2,-16(fp)
  80b34c:	10800003 	ldbu	r2,0(r2)
  80b350:	10803fcc 	andi	r2,r2,255
  80b354:	10bfffc4 	addi	r2,r2,-1
  80b358:	10800128 	cmpgeui	r2,r2,4
  80b35c:	1000161e 	bne	r2,zero,80b3b8 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b360:	0005303a 	rdctl	r2,status
  80b364:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b368:	e0fff917 	ldw	r3,-28(fp)
  80b36c:	00bfff84 	movi	r2,-2
  80b370:	1884703a 	and	r2,r3,r2
  80b374:	1001703a 	wrctl	status,r2
  
  return context;
  80b378:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  80b37c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  80b380:	e0bffc17 	ldw	r2,-16(fp)
  80b384:	11400384 	addi	r5,r2,14
  80b388:	e13ffd17 	ldw	r4,-12(fp)
  80b38c:	080ce340 	call	80ce34 <OS_StrCopy>
  80b390:	e0bffb05 	stb	r2,-20(fp)
  80b394:	e0bffa17 	ldw	r2,-24(fp)
  80b398:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b39c:	e0bff817 	ldw	r2,-32(fp)
  80b3a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80b3a4:	e0bffe17 	ldw	r2,-8(fp)
  80b3a8:	10000005 	stb	zero,0(r2)
    return (len);
  80b3ac:	e0bffb03 	ldbu	r2,-20(fp)
  80b3b0:	e0bfff15 	stw	r2,-4(fp)
  80b3b4:	00000406 	br	80b3c8 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80b3b8:	e0fffe17 	ldw	r3,-8(fp)
  80b3bc:	00800044 	movi	r2,1
  80b3c0:	18800005 	stb	r2,0(r3)
             return (0);
  80b3c4:	e03fff15 	stw	zero,-4(fp)
  80b3c8:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  80b3cc:	e037883a 	mov	sp,fp
  80b3d0:	dfc00117 	ldw	ra,4(sp)
  80b3d4:	df000017 	ldw	fp,0(sp)
  80b3d8:	dec00204 	addi	sp,sp,8
  80b3dc:	f800283a 	ret

0080b3e0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80b3e0:	defff604 	addi	sp,sp,-40
  80b3e4:	dfc00915 	stw	ra,36(sp)
  80b3e8:	df000815 	stw	fp,32(sp)
  80b3ec:	df000804 	addi	fp,sp,32
  80b3f0:	e13ffd15 	stw	r4,-12(fp)
  80b3f4:	e17ffe15 	stw	r5,-8(fp)
  80b3f8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b3fc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80b400:	e0bfff17 	ldw	r2,-4(fp)
  80b404:	1005003a 	cmpeq	r2,r2,zero
  80b408:	1000411e 	bne	r2,zero,80b510 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80b40c:	e0bffd17 	ldw	r2,-12(fp)
  80b410:	1004c03a 	cmpne	r2,r2,zero
  80b414:	1000041e 	bne	r2,zero,80b428 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  80b418:	e0ffff17 	ldw	r3,-4(fp)
  80b41c:	00800104 	movi	r2,4
  80b420:	18800005 	stb	r2,0(r3)
        return;
  80b424:	00003a06 	br	80b510 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80b428:	e0bffe17 	ldw	r2,-8(fp)
  80b42c:	1004c03a 	cmpne	r2,r2,zero
  80b430:	1000041e 	bne	r2,zero,80b444 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80b434:	e0ffff17 	ldw	r3,-4(fp)
  80b438:	00800304 	movi	r2,12
  80b43c:	18800005 	stb	r2,0(r3)
        return;
  80b440:	00003306 	br	80b510 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80b444:	d0a72a03 	ldbu	r2,-25432(gp)
  80b448:	10803fcc 	andi	r2,r2,255
  80b44c:	1005003a 	cmpeq	r2,r2,zero
  80b450:	1000041e 	bne	r2,zero,80b464 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  80b454:	e0ffff17 	ldw	r3,-4(fp)
  80b458:	00800484 	movi	r2,18
  80b45c:	18800005 	stb	r2,0(r3)
        return;
  80b460:	00002b06 	br	80b510 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  80b464:	e0bffd17 	ldw	r2,-12(fp)
  80b468:	10800003 	ldbu	r2,0(r2)
  80b46c:	10803fcc 	andi	r2,r2,255
  80b470:	10bfffc4 	addi	r2,r2,-1
  80b474:	10800128 	cmpgeui	r2,r2,4
  80b478:	10000f1e 	bne	r2,zero,80b4b8 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b47c:	0005303a 	rdctl	r2,status
  80b480:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b484:	e0fffa17 	ldw	r3,-24(fp)
  80b488:	00bfff84 	movi	r2,-2
  80b48c:	1884703a 	and	r2,r3,r2
  80b490:	1001703a 	wrctl	status,r2
  
  return context;
  80b494:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  80b498:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  80b49c:	e13ffe17 	ldw	r4,-8(fp)
  80b4a0:	080ceb40 	call	80ceb4 <OS_StrLen>
  80b4a4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  80b4a8:	e0bffc03 	ldbu	r2,-16(fp)
  80b4ac:	10800828 	cmpgeui	r2,r2,32
  80b4b0:	1000051e 	bne	r2,zero,80b4c8 <OSEventNameSet+0xe8>
  80b4b4:	00000c06 	br	80b4e8 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80b4b8:	e0ffff17 	ldw	r3,-4(fp)
  80b4bc:	00800044 	movi	r2,1
  80b4c0:	18800005 	stb	r2,0(r3)
             return;
  80b4c4:	00001206 	br	80b510 <OSEventNameSet+0x130>
  80b4c8:	e0bffb17 	ldw	r2,-20(fp)
  80b4cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b4d0:	e0bff917 	ldw	r2,-28(fp)
  80b4d4:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  80b4d8:	e0ffff17 	ldw	r3,-4(fp)
  80b4dc:	008002c4 	movi	r2,11
  80b4e0:	18800005 	stb	r2,0(r3)
        return;
  80b4e4:	00000a06 	br	80b510 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  80b4e8:	e0bffd17 	ldw	r2,-12(fp)
  80b4ec:	11000384 	addi	r4,r2,14
  80b4f0:	e17ffe17 	ldw	r5,-8(fp)
  80b4f4:	080ce340 	call	80ce34 <OS_StrCopy>
  80b4f8:	e0bffb17 	ldw	r2,-20(fp)
  80b4fc:	e0bff815 	stw	r2,-32(fp)
  80b500:	e0bff817 	ldw	r2,-32(fp)
  80b504:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80b508:	e0bfff17 	ldw	r2,-4(fp)
  80b50c:	10000005 	stb	zero,0(r2)
}
  80b510:	e037883a 	mov	sp,fp
  80b514:	dfc00117 	ldw	ra,4(sp)
  80b518:	df000017 	ldw	fp,0(sp)
  80b51c:	dec00204 	addi	sp,sp,8
  80b520:	f800283a 	ret

0080b524 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  80b524:	deffe704 	addi	sp,sp,-100
  80b528:	dfc01815 	stw	ra,96(sp)
  80b52c:	df001715 	stw	fp,92(sp)
  80b530:	df001704 	addi	fp,sp,92
  80b534:	e13ff615 	stw	r4,-40(fp)
  80b538:	e17ff715 	stw	r5,-36(fp)
  80b53c:	e1bff815 	stw	r6,-32(fp)
  80b540:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  80b544:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  80b548:	e0800217 	ldw	r2,8(fp)
  80b54c:	1004c03a 	cmpne	r2,r2,zero
  80b550:	1000021e 	bne	r2,zero,80b55c <OSEventPendMulti+0x38>
        return (0);
  80b554:	e03fff15 	stw	zero,-4(fp)
  80b558:	00019906 	br	80bbc0 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  80b55c:	e0bff617 	ldw	r2,-40(fp)
  80b560:	1004c03a 	cmpne	r2,r2,zero
  80b564:	1000051e 	bne	r2,zero,80b57c <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  80b568:	e0c00217 	ldw	r3,8(fp)
  80b56c:	00800104 	movi	r2,4
  80b570:	18800005 	stb	r2,0(r3)
        return (0);
  80b574:	e03fff15 	stw	zero,-4(fp)
  80b578:	00019106 	br	80bbc0 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  80b57c:	e0bff717 	ldw	r2,-36(fp)
  80b580:	1004c03a 	cmpne	r2,r2,zero
  80b584:	1000051e 	bne	r2,zero,80b59c <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  80b588:	e0c00217 	ldw	r3,8(fp)
  80b58c:	00800104 	movi	r2,4
  80b590:	18800005 	stb	r2,0(r3)
        return (0);
  80b594:	e03fff15 	stw	zero,-4(fp)
  80b598:	00018906 	br	80bbc0 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  80b59c:	e0bff817 	ldw	r2,-32(fp)
  80b5a0:	1004c03a 	cmpne	r2,r2,zero
  80b5a4:	1000051e 	bne	r2,zero,80b5bc <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  80b5a8:	e0c00217 	ldw	r3,8(fp)
  80b5ac:	00800104 	movi	r2,4
  80b5b0:	18800005 	stb	r2,0(r3)
        return (0);
  80b5b4:	e03fff15 	stw	zero,-4(fp)
  80b5b8:	00018106 	br	80bbc0 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  80b5bc:	e0bff717 	ldw	r2,-36(fp)
  80b5c0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  80b5c4:	e0bff617 	ldw	r2,-40(fp)
  80b5c8:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  80b5cc:	e0bff517 	ldw	r2,-44(fp)
  80b5d0:	10800017 	ldw	r2,0(r2)
  80b5d4:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  80b5d8:	00001806 	br	80b63c <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  80b5dc:	e0bff417 	ldw	r2,-48(fp)
  80b5e0:	10800003 	ldbu	r2,0(r2)
  80b5e4:	10803fcc 	andi	r2,r2,255
  80b5e8:	e0bffe15 	stw	r2,-8(fp)
  80b5ec:	e0fffe17 	ldw	r3,-8(fp)
  80b5f0:	188000a0 	cmpeqi	r2,r3,2
  80b5f4:	10000b1e 	bne	r2,zero,80b624 <OSEventPendMulti+0x100>
  80b5f8:	e0fffe17 	ldw	r3,-8(fp)
  80b5fc:	188000e0 	cmpeqi	r2,r3,3
  80b600:	1000081e 	bne	r2,zero,80b624 <OSEventPendMulti+0x100>
  80b604:	e0fffe17 	ldw	r3,-8(fp)
  80b608:	18800060 	cmpeqi	r2,r3,1
  80b60c:	1000051e 	bne	r2,zero,80b624 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  80b610:	e0c00217 	ldw	r3,8(fp)
  80b614:	00800044 	movi	r2,1
  80b618:	18800005 	stb	r2,0(r3)
                 return (0);
  80b61c:	e03fff15 	stw	zero,-4(fp)
  80b620:	00016706 	br	80bbc0 <OSEventPendMulti+0x69c>
        }
        pevents++;
  80b624:	e0bff517 	ldw	r2,-44(fp)
  80b628:	10800104 	addi	r2,r2,4
  80b62c:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80b630:	e0bff517 	ldw	r2,-44(fp)
  80b634:	10800017 	ldw	r2,0(r2)
  80b638:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  80b63c:	e0bff417 	ldw	r2,-48(fp)
  80b640:	1004c03a 	cmpne	r2,r2,zero
  80b644:	103fe51e 	bne	r2,zero,80b5dc <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  80b648:	d0a72a03 	ldbu	r2,-25432(gp)
  80b64c:	10803fcc 	andi	r2,r2,255
  80b650:	1005003a 	cmpeq	r2,r2,zero
  80b654:	1000051e 	bne	r2,zero,80b66c <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  80b658:	e0c00217 	ldw	r3,8(fp)
  80b65c:	00800084 	movi	r2,2
  80b660:	18800005 	stb	r2,0(r3)
        return (0);
  80b664:	e03fff15 	stw	zero,-4(fp)
  80b668:	00015506 	br	80bbc0 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  80b66c:	d0a71c03 	ldbu	r2,-25488(gp)
  80b670:	10803fcc 	andi	r2,r2,255
  80b674:	1005003a 	cmpeq	r2,r2,zero
  80b678:	1000051e 	bne	r2,zero,80b690 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  80b67c:	e0c00217 	ldw	r3,8(fp)
  80b680:	00800344 	movi	r2,13
  80b684:	18800005 	stb	r2,0(r3)
        return (0);
  80b688:	e03fff15 	stw	zero,-4(fp)
  80b68c:	00014c06 	br	80bbc0 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b690:	0005303a 	rdctl	r2,status
  80b694:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b698:	e0ffef17 	ldw	r3,-68(fp)
  80b69c:	00bfff84 	movi	r2,-2
  80b6a0:	1884703a 	and	r2,r3,r2
  80b6a4:	1001703a 	wrctl	status,r2
  
  return context;
  80b6a8:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80b6ac:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  80b6b0:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  80b6b4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  80b6b8:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  80b6bc:	e0bff617 	ldw	r2,-40(fp)
  80b6c0:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  80b6c4:	e0bff517 	ldw	r2,-44(fp)
  80b6c8:	10800017 	ldw	r2,0(r2)
  80b6cc:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80b6d0:	00008f06 	br	80b910 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  80b6d4:	e0bff417 	ldw	r2,-48(fp)
  80b6d8:	10800003 	ldbu	r2,0(r2)
  80b6dc:	10803fcc 	andi	r2,r2,255
  80b6e0:	e0bffd15 	stw	r2,-12(fp)
  80b6e4:	e0fffd17 	ldw	r3,-12(fp)
  80b6e8:	188000a0 	cmpeqi	r2,r3,2
  80b6ec:	1000441e 	bne	r2,zero,80b800 <OSEventPendMulti+0x2dc>
  80b6f0:	e0fffd17 	ldw	r3,-12(fp)
  80b6f4:	188000e0 	cmpeqi	r2,r3,3
  80b6f8:	1000041e 	bne	r2,zero,80b70c <OSEventPendMulti+0x1e8>
  80b6fc:	e0fffd17 	ldw	r3,-12(fp)
  80b700:	18800060 	cmpeqi	r2,r3,1
  80b704:	1000211e 	bne	r2,zero,80b78c <OSEventPendMulti+0x268>
  80b708:	00006f06 	br	80b8c8 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  80b70c:	e0bff417 	ldw	r2,-48(fp)
  80b710:	1080020b 	ldhu	r2,8(r2)
  80b714:	10bfffcc 	andi	r2,r2,65535
  80b718:	1005003a 	cmpeq	r2,r2,zero
  80b71c:	1000171e 	bne	r2,zero,80b77c <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  80b720:	e0bff417 	ldw	r2,-48(fp)
  80b724:	1080020b 	ldhu	r2,8(r2)
  80b728:	10bfffc4 	addi	r2,r2,-1
  80b72c:	1007883a 	mov	r3,r2
  80b730:	e0bff417 	ldw	r2,-48(fp)
  80b734:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  80b738:	e0fff717 	ldw	r3,-36(fp)
  80b73c:	e0bff417 	ldw	r2,-48(fp)
  80b740:	18800015 	stw	r2,0(r3)
  80b744:	e0bff717 	ldw	r2,-36(fp)
  80b748:	10800104 	addi	r2,r2,4
  80b74c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  80b750:	00800044 	movi	r2,1
  80b754:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  80b758:	e0bff817 	ldw	r2,-32(fp)
  80b75c:	10000015 	stw	zero,0(r2)
  80b760:	e0bff817 	ldw	r2,-32(fp)
  80b764:	10800104 	addi	r2,r2,4
  80b768:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  80b76c:	e0bff18b 	ldhu	r2,-58(fp)
  80b770:	10800044 	addi	r2,r2,1
  80b774:	e0bff18d 	sth	r2,-58(fp)
  80b778:	00005f06 	br	80b8f8 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  80b77c:	e0bff103 	ldbu	r2,-60(fp)
  80b780:	10800054 	ori	r2,r2,1
  80b784:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80b788:	00005b06 	br	80b8f8 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  80b78c:	e0bff417 	ldw	r2,-48(fp)
  80b790:	10800117 	ldw	r2,4(r2)
  80b794:	1005003a 	cmpeq	r2,r2,zero
  80b798:	1000151e 	bne	r2,zero,80b7f0 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  80b79c:	e0bff417 	ldw	r2,-48(fp)
  80b7a0:	10c00117 	ldw	r3,4(r2)
  80b7a4:	e0bff817 	ldw	r2,-32(fp)
  80b7a8:	10c00015 	stw	r3,0(r2)
  80b7ac:	e0bff817 	ldw	r2,-32(fp)
  80b7b0:	10800104 	addi	r2,r2,4
  80b7b4:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  80b7b8:	e0bff417 	ldw	r2,-48(fp)
  80b7bc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  80b7c0:	e0fff717 	ldw	r3,-36(fp)
  80b7c4:	e0bff417 	ldw	r2,-48(fp)
  80b7c8:	18800015 	stw	r2,0(r3)
  80b7cc:	e0bff717 	ldw	r2,-36(fp)
  80b7d0:	10800104 	addi	r2,r2,4
  80b7d4:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  80b7d8:	00800044 	movi	r2,1
  80b7dc:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80b7e0:	e0bff18b 	ldhu	r2,-58(fp)
  80b7e4:	10800044 	addi	r2,r2,1
  80b7e8:	e0bff18d 	sth	r2,-58(fp)
  80b7ec:	00004206 	br	80b8f8 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  80b7f0:	e0bff103 	ldbu	r2,-60(fp)
  80b7f4:	10800094 	ori	r2,r2,2
  80b7f8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80b7fc:	00003e06 	br	80b8f8 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  80b800:	e0bff417 	ldw	r2,-48(fp)
  80b804:	10800117 	ldw	r2,4(r2)
  80b808:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  80b80c:	e0bff317 	ldw	r2,-52(fp)
  80b810:	1080058b 	ldhu	r2,22(r2)
  80b814:	10bfffcc 	andi	r2,r2,65535
  80b818:	1005003a 	cmpeq	r2,r2,zero
  80b81c:	1000261e 	bne	r2,zero,80b8b8 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  80b820:	e0bff317 	ldw	r2,-52(fp)
  80b824:	11000417 	ldw	r4,16(r2)
  80b828:	20c00017 	ldw	r3,0(r4)
  80b82c:	e0bff817 	ldw	r2,-32(fp)
  80b830:	10c00015 	stw	r3,0(r2)
  80b834:	e0bff817 	ldw	r2,-32(fp)
  80b838:	10800104 	addi	r2,r2,4
  80b83c:	e0bff815 	stw	r2,-32(fp)
  80b840:	20c00104 	addi	r3,r4,4
  80b844:	e0bff317 	ldw	r2,-52(fp)
  80b848:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  80b84c:	e0bff317 	ldw	r2,-52(fp)
  80b850:	10c00417 	ldw	r3,16(r2)
  80b854:	e0bff317 	ldw	r2,-52(fp)
  80b858:	10800217 	ldw	r2,8(r2)
  80b85c:	1880041e 	bne	r3,r2,80b870 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  80b860:	e0bff317 	ldw	r2,-52(fp)
  80b864:	10c00117 	ldw	r3,4(r2)
  80b868:	e0bff317 	ldw	r2,-52(fp)
  80b86c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  80b870:	e0bff317 	ldw	r2,-52(fp)
  80b874:	1080058b 	ldhu	r2,22(r2)
  80b878:	10bfffc4 	addi	r2,r2,-1
  80b87c:	1007883a 	mov	r3,r2
  80b880:	e0bff317 	ldw	r2,-52(fp)
  80b884:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  80b888:	e0fff717 	ldw	r3,-36(fp)
  80b88c:	e0bff417 	ldw	r2,-48(fp)
  80b890:	18800015 	stw	r2,0(r3)
  80b894:	e0bff717 	ldw	r2,-36(fp)
  80b898:	10800104 	addi	r2,r2,4
  80b89c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  80b8a0:	00800044 	movi	r2,1
  80b8a4:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80b8a8:	e0bff18b 	ldhu	r2,-58(fp)
  80b8ac:	10800044 	addi	r2,r2,1
  80b8b0:	e0bff18d 	sth	r2,-58(fp)
  80b8b4:	00001006 	br	80b8f8 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  80b8b8:	e0bff103 	ldbu	r2,-60(fp)
  80b8bc:	10800114 	ori	r2,r2,4
  80b8c0:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80b8c4:	00000c06 	br	80b8f8 <OSEventPendMulti+0x3d4>
  80b8c8:	e0bff017 	ldw	r2,-64(fp)
  80b8cc:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b8d0:	e0bfee17 	ldw	r2,-72(fp)
  80b8d4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  80b8d8:	e0bff717 	ldw	r2,-36(fp)
  80b8dc:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  80b8e0:	e0c00217 	ldw	r3,8(fp)
  80b8e4:	00800044 	movi	r2,1
  80b8e8:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  80b8ec:	e0bff18b 	ldhu	r2,-58(fp)
  80b8f0:	e0bfff15 	stw	r2,-4(fp)
  80b8f4:	0000b206 	br	80bbc0 <OSEventPendMulti+0x69c>
        }
        pevents++;
  80b8f8:	e0bff517 	ldw	r2,-44(fp)
  80b8fc:	10800104 	addi	r2,r2,4
  80b900:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80b904:	e0bff517 	ldw	r2,-44(fp)
  80b908:	10800017 	ldw	r2,0(r2)
  80b90c:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80b910:	e0bff417 	ldw	r2,-48(fp)
  80b914:	1004c03a 	cmpne	r2,r2,zero
  80b918:	103f6e1e 	bne	r2,zero,80b6d4 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  80b91c:	e0bff203 	ldbu	r2,-56(fp)
  80b920:	10800058 	cmpnei	r2,r2,1
  80b924:	10000b1e 	bne	r2,zero,80b954 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  80b928:	e0bff717 	ldw	r2,-36(fp)
  80b92c:	10000015 	stw	zero,0(r2)
  80b930:	e0bff017 	ldw	r2,-64(fp)
  80b934:	e0bfed15 	stw	r2,-76(fp)
  80b938:	e0bfed17 	ldw	r2,-76(fp)
  80b93c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  80b940:	e0800217 	ldw	r2,8(fp)
  80b944:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  80b948:	e0fff18b 	ldhu	r3,-58(fp)
  80b94c:	e0ffff15 	stw	r3,-4(fp)
  80b950:	00009b06 	br	80bbc0 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  80b954:	d1272b17 	ldw	r4,-25428(gp)
  80b958:	d0a72b17 	ldw	r2,-25428(gp)
  80b95c:	10c00c03 	ldbu	r3,48(r2)
  80b960:	e0bff103 	ldbu	r2,-60(fp)
  80b964:	1884b03a 	or	r2,r3,r2
  80b968:	1007883a 	mov	r3,r2
  80b96c:	00bfe004 	movi	r2,-128
  80b970:	1884b03a 	or	r2,r3,r2
  80b974:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80b978:	d0a72b17 	ldw	r2,-25428(gp)
  80b97c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  80b980:	d0e72b17 	ldw	r3,-25428(gp)
  80b984:	e0bff90b 	ldhu	r2,-28(fp)
  80b988:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  80b98c:	e13ff617 	ldw	r4,-40(fp)
  80b990:	080c5540 	call	80c554 <OS_EventTaskWaitMulti>
  80b994:	e0bff017 	ldw	r2,-64(fp)
  80b998:	e0bfec15 	stw	r2,-80(fp)
  80b99c:	e0bfec17 	ldw	r2,-80(fp)
  80b9a0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  80b9a4:	080ccf00 	call	80ccf0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b9a8:	0005303a 	rdctl	r2,status
  80b9ac:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b9b0:	e0ffeb17 	ldw	r3,-84(fp)
  80b9b4:	00bfff84 	movi	r2,-2
  80b9b8:	1884703a 	and	r2,r3,r2
  80b9bc:	1001703a 	wrctl	status,r2
  
  return context;
  80b9c0:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  80b9c4:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  80b9c8:	d0a72b17 	ldw	r2,-25428(gp)
  80b9cc:	10800c43 	ldbu	r2,49(r2)
  80b9d0:	10803fcc 	andi	r2,r2,255
  80b9d4:	e0bffc15 	stw	r2,-16(fp)
  80b9d8:	e0fffc17 	ldw	r3,-16(fp)
  80b9dc:	1805003a 	cmpeq	r2,r3,zero
  80b9e0:	1000041e 	bne	r2,zero,80b9f4 <OSEventPendMulti+0x4d0>
  80b9e4:	e0fffc17 	ldw	r3,-16(fp)
  80b9e8:	188000a0 	cmpeqi	r2,r3,2
  80b9ec:	1000011e 	bne	r2,zero,80b9f4 <OSEventPendMulti+0x4d0>
  80b9f0:	00001906 	br	80ba58 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  80b9f4:	d0a72b17 	ldw	r2,-25428(gp)
  80b9f8:	10800717 	ldw	r2,28(r2)
  80b9fc:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  80ba00:	e0bff417 	ldw	r2,-48(fp)
  80ba04:	1005003a 	cmpeq	r2,r2,zero
  80ba08:	10000c1e 	bne	r2,zero,80ba3c <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  80ba0c:	e0fff717 	ldw	r3,-36(fp)
  80ba10:	e0bff417 	ldw	r2,-48(fp)
  80ba14:	18800015 	stw	r2,0(r3)
  80ba18:	e0bff717 	ldw	r2,-36(fp)
  80ba1c:	10800104 	addi	r2,r2,4
  80ba20:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  80ba24:	e0bff717 	ldw	r2,-36(fp)
  80ba28:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  80ba2c:	e0bff18b 	ldhu	r2,-58(fp)
  80ba30:	10800044 	addi	r2,r2,1
  80ba34:	e0bff18d 	sth	r2,-58(fp)
  80ba38:	00000a06 	br	80ba64 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  80ba3c:	d0a72b17 	ldw	r2,-25428(gp)
  80ba40:	00c00044 	movi	r3,1
  80ba44:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80ba48:	d1272b17 	ldw	r4,-25428(gp)
  80ba4c:	e17ff617 	ldw	r5,-40(fp)
  80ba50:	080c7600 	call	80c760 <OS_EventTaskRemoveMulti>
             }
			 break;
  80ba54:	00000306 	br	80ba64 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80ba58:	d1272b17 	ldw	r4,-25428(gp)
  80ba5c:	e17ff617 	ldw	r5,-40(fp)
  80ba60:	080c7600 	call	80c760 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  80ba64:	d0a72b17 	ldw	r2,-25428(gp)
  80ba68:	10800c43 	ldbu	r2,49(r2)
  80ba6c:	10803fcc 	andi	r2,r2,255
  80ba70:	e0bffb15 	stw	r2,-20(fp)
  80ba74:	e0fffb17 	ldw	r3,-20(fp)
  80ba78:	1805003a 	cmpeq	r2,r3,zero
  80ba7c:	1000041e 	bne	r2,zero,80ba90 <OSEventPendMulti+0x56c>
  80ba80:	e0fffb17 	ldw	r3,-20(fp)
  80ba84:	188000a0 	cmpeqi	r2,r3,2
  80ba88:	10002c1e 	bne	r2,zero,80bb3c <OSEventPendMulti+0x618>
  80ba8c:	00003406 	br	80bb60 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  80ba90:	e0bff417 	ldw	r2,-48(fp)
  80ba94:	10800003 	ldbu	r2,0(r2)
  80ba98:	10803fcc 	andi	r2,r2,255
  80ba9c:	e0bffa15 	stw	r2,-24(fp)
  80baa0:	e0fffa17 	ldw	r3,-24(fp)
  80baa4:	18800050 	cmplti	r2,r3,1
  80baa8:	1000151e 	bne	r2,zero,80bb00 <OSEventPendMulti+0x5dc>
  80baac:	e0fffa17 	ldw	r3,-24(fp)
  80bab0:	188000d0 	cmplti	r2,r3,3
  80bab4:	10000a1e 	bne	r2,zero,80bae0 <OSEventPendMulti+0x5bc>
  80bab8:	e0fffa17 	ldw	r3,-24(fp)
  80babc:	188000e0 	cmpeqi	r2,r3,3
  80bac0:	1000011e 	bne	r2,zero,80bac8 <OSEventPendMulti+0x5a4>
  80bac4:	00000e06 	br	80bb00 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  80bac8:	e0bff817 	ldw	r2,-32(fp)
  80bacc:	10000015 	stw	zero,0(r2)
  80bad0:	e0bff817 	ldw	r2,-32(fp)
  80bad4:	10800104 	addi	r2,r2,4
  80bad8:	e0bff815 	stw	r2,-32(fp)
                      break;
  80badc:	00001406 	br	80bb30 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  80bae0:	d0a72b17 	ldw	r2,-25428(gp)
  80bae4:	10c00917 	ldw	r3,36(r2)
  80bae8:	e0bff817 	ldw	r2,-32(fp)
  80baec:	10c00015 	stw	r3,0(r2)
  80baf0:	e0bff817 	ldw	r2,-32(fp)
  80baf4:	10800104 	addi	r2,r2,4
  80baf8:	e0bff815 	stw	r2,-32(fp)
                      break;
  80bafc:	00000c06 	br	80bb30 <OSEventPendMulti+0x60c>
  80bb00:	e0bff017 	ldw	r2,-64(fp)
  80bb04:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bb08:	e0bfea17 	ldw	r2,-88(fp)
  80bb0c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  80bb10:	e0bff717 	ldw	r2,-36(fp)
  80bb14:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  80bb18:	e0c00217 	ldw	r3,8(fp)
  80bb1c:	00800044 	movi	r2,1
  80bb20:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  80bb24:	e0bff18b 	ldhu	r2,-58(fp)
  80bb28:	e0bfff15 	stw	r2,-4(fp)
  80bb2c:	00002406 	br	80bbc0 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  80bb30:	e0800217 	ldw	r2,8(fp)
  80bb34:	10000005 	stb	zero,0(r2)
             break;
  80bb38:	00001106 	br	80bb80 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  80bb3c:	e0bff817 	ldw	r2,-32(fp)
  80bb40:	10000015 	stw	zero,0(r2)
  80bb44:	e0bff817 	ldw	r2,-32(fp)
  80bb48:	10800104 	addi	r2,r2,4
  80bb4c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  80bb50:	e0c00217 	ldw	r3,8(fp)
  80bb54:	00800384 	movi	r2,14
  80bb58:	18800005 	stb	r2,0(r3)
             break;
  80bb5c:	00000806 	br	80bb80 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  80bb60:	e0bff817 	ldw	r2,-32(fp)
  80bb64:	10000015 	stw	zero,0(r2)
  80bb68:	e0bff817 	ldw	r2,-32(fp)
  80bb6c:	10800104 	addi	r2,r2,4
  80bb70:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  80bb74:	e0c00217 	ldw	r3,8(fp)
  80bb78:	00800284 	movi	r2,10
  80bb7c:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  80bb80:	d0a72b17 	ldw	r2,-25428(gp)
  80bb84:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  80bb88:	d0a72b17 	ldw	r2,-25428(gp)
  80bb8c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  80bb90:	d0a72b17 	ldw	r2,-25428(gp)
  80bb94:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80bb98:	d0a72b17 	ldw	r2,-25428(gp)
  80bb9c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  80bba0:	d0a72b17 	ldw	r2,-25428(gp)
  80bba4:	10000915 	stw	zero,36(r2)
  80bba8:	e0bff017 	ldw	r2,-64(fp)
  80bbac:	e0bfe915 	stw	r2,-92(fp)
  80bbb0:	e0bfe917 	ldw	r2,-92(fp)
  80bbb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  80bbb8:	e0fff18b 	ldhu	r3,-58(fp)
  80bbbc:	e0ffff15 	stw	r3,-4(fp)
  80bbc0:	e0bfff17 	ldw	r2,-4(fp)
}
  80bbc4:	e037883a 	mov	sp,fp
  80bbc8:	dfc00117 	ldw	ra,4(sp)
  80bbcc:	df000017 	ldw	fp,0(sp)
  80bbd0:	dec00204 	addi	sp,sp,8
  80bbd4:	f800283a 	ret

0080bbd8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  80bbd8:	defffe04 	addi	sp,sp,-8
  80bbdc:	dfc00115 	stw	ra,4(sp)
  80bbe0:	df000015 	stw	fp,0(sp)
  80bbe4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  80bbe8:	081a21c0 	call	81a21c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  80bbec:	080c9a80 	call	80c9a8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  80bbf0:	080c9ec0 	call	80c9ec <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  80bbf4:	080cb500 	call	80cb50 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  80bbf8:	080c8cc0 	call	80c8cc <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  80bbfc:	080ec000 	call	80ec00 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  80bc00:	080f5d80 	call	80f5d8 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  80bc04:	08109340 	call	810934 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  80bc08:	080ca580 	call	80ca58 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  80bc0c:	080cad40 	call	80cad4 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  80bc10:	081a2380 	call	81a238 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  80bc14:	080d3d80 	call	80d3d8 <OSDebugInit>
#endif
}
  80bc18:	e037883a 	mov	sp,fp
  80bc1c:	dfc00117 	ldw	ra,4(sp)
  80bc20:	df000017 	ldw	fp,0(sp)
  80bc24:	dec00204 	addi	sp,sp,8
  80bc28:	f800283a 	ret

0080bc2c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  80bc2c:	defffc04 	addi	sp,sp,-16
  80bc30:	df000315 	stw	fp,12(sp)
  80bc34:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80bc38:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  80bc3c:	d0a71c43 	ldbu	r2,-25487(gp)
  80bc40:	10803fcc 	andi	r2,r2,255
  80bc44:	10800058 	cmpnei	r2,r2,1
  80bc48:	1000131e 	bne	r2,zero,80bc98 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bc4c:	0005303a 	rdctl	r2,status
  80bc50:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bc54:	e0fffe17 	ldw	r3,-8(fp)
  80bc58:	00bfff84 	movi	r2,-2
  80bc5c:	1884703a 	and	r2,r3,r2
  80bc60:	1001703a 	wrctl	status,r2
  
  return context;
  80bc64:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80bc68:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  80bc6c:	d0a72a03 	ldbu	r2,-25432(gp)
  80bc70:	10803fcc 	andi	r2,r2,255
  80bc74:	10803fe0 	cmpeqi	r2,r2,255
  80bc78:	1000031e 	bne	r2,zero,80bc88 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  80bc7c:	d0a72a03 	ldbu	r2,-25432(gp)
  80bc80:	10800044 	addi	r2,r2,1
  80bc84:	d0a72a05 	stb	r2,-25432(gp)
  80bc88:	e0bfff17 	ldw	r2,-4(fp)
  80bc8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bc90:	e0bffd17 	ldw	r2,-12(fp)
  80bc94:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  80bc98:	e037883a 	mov	sp,fp
  80bc9c:	df000017 	ldw	fp,0(sp)
  80bca0:	dec00104 	addi	sp,sp,4
  80bca4:	f800283a 	ret

0080bca8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  80bca8:	defffb04 	addi	sp,sp,-20
  80bcac:	dfc00415 	stw	ra,16(sp)
  80bcb0:	df000315 	stw	fp,12(sp)
  80bcb4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80bcb8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  80bcbc:	d0a71c43 	ldbu	r2,-25487(gp)
  80bcc0:	10803fcc 	andi	r2,r2,255
  80bcc4:	10800058 	cmpnei	r2,r2,1
  80bcc8:	1000321e 	bne	r2,zero,80bd94 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bccc:	0005303a 	rdctl	r2,status
  80bcd0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bcd4:	e0fffe17 	ldw	r3,-8(fp)
  80bcd8:	00bfff84 	movi	r2,-2
  80bcdc:	1884703a 	and	r2,r3,r2
  80bce0:	1001703a 	wrctl	status,r2
  
  return context;
  80bce4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80bce8:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  80bcec:	d0a72a03 	ldbu	r2,-25432(gp)
  80bcf0:	10803fcc 	andi	r2,r2,255
  80bcf4:	1005003a 	cmpeq	r2,r2,zero
  80bcf8:	1000031e 	bne	r2,zero,80bd08 <OSIntExit+0x60>
            OSIntNesting--;
  80bcfc:	d0a72a03 	ldbu	r2,-25432(gp)
  80bd00:	10bfffc4 	addi	r2,r2,-1
  80bd04:	d0a72a05 	stb	r2,-25432(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  80bd08:	d0a72a03 	ldbu	r2,-25432(gp)
  80bd0c:	10803fcc 	andi	r2,r2,255
  80bd10:	1004c03a 	cmpne	r2,r2,zero
  80bd14:	10001b1e 	bne	r2,zero,80bd84 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  80bd18:	d0a71c03 	ldbu	r2,-25488(gp)
  80bd1c:	10803fcc 	andi	r2,r2,255
  80bd20:	1004c03a 	cmpne	r2,r2,zero
  80bd24:	1000171e 	bne	r2,zero,80bd84 <OSIntExit+0xdc>
                OS_SchedNew();
  80bd28:	080cdc40 	call	80cdc4 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  80bd2c:	d0a71e03 	ldbu	r2,-25480(gp)
  80bd30:	d0e71e43 	ldbu	r3,-25479(gp)
  80bd34:	11003fcc 	andi	r4,r2,255
  80bd38:	18803fcc 	andi	r2,r3,255
  80bd3c:	20801126 	beq	r4,r2,80bd84 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  80bd40:	d0a71e03 	ldbu	r2,-25480(gp)
  80bd44:	10803fcc 	andi	r2,r2,255
  80bd48:	00c020f4 	movhi	r3,131
  80bd4c:	18e79804 	addi	r3,r3,-24992
  80bd50:	1085883a 	add	r2,r2,r2
  80bd54:	1085883a 	add	r2,r2,r2
  80bd58:	10c5883a 	add	r2,r2,r3
  80bd5c:	10800017 	ldw	r2,0(r2)
  80bd60:	d0a72615 	stw	r2,-25448(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  80bd64:	d0e72617 	ldw	r3,-25448(gp)
  80bd68:	18800e17 	ldw	r2,56(r3)
  80bd6c:	10800044 	addi	r2,r2,1
  80bd70:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  80bd74:	d0a72117 	ldw	r2,-25468(gp)
  80bd78:	10800044 	addi	r2,r2,1
  80bd7c:	d0a72115 	stw	r2,-25468(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  80bd80:	0819da80 	call	819da8 <OSCtxSw>
  80bd84:	e0bfff17 	ldw	r2,-4(fp)
  80bd88:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bd8c:	e0bffd17 	ldw	r2,-12(fp)
  80bd90:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80bd94:	e037883a 	mov	sp,fp
  80bd98:	dfc00117 	ldw	ra,4(sp)
  80bd9c:	df000017 	ldw	fp,0(sp)
  80bda0:	dec00204 	addi	sp,sp,8
  80bda4:	f800283a 	ret

0080bda8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  80bda8:	defffc04 	addi	sp,sp,-16
  80bdac:	df000315 	stw	fp,12(sp)
  80bdb0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80bdb4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  80bdb8:	d0a71c43 	ldbu	r2,-25487(gp)
  80bdbc:	10803fcc 	andi	r2,r2,255
  80bdc0:	10800058 	cmpnei	r2,r2,1
  80bdc4:	1000171e 	bne	r2,zero,80be24 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bdc8:	0005303a 	rdctl	r2,status
  80bdcc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bdd0:	e0fffe17 	ldw	r3,-8(fp)
  80bdd4:	00bfff84 	movi	r2,-2
  80bdd8:	1884703a 	and	r2,r3,r2
  80bddc:	1001703a 	wrctl	status,r2
  
  return context;
  80bde0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80bde4:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  80bde8:	d0a72a03 	ldbu	r2,-25432(gp)
  80bdec:	10803fcc 	andi	r2,r2,255
  80bdf0:	1004c03a 	cmpne	r2,r2,zero
  80bdf4:	1000071e 	bne	r2,zero,80be14 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  80bdf8:	d0a71c03 	ldbu	r2,-25488(gp)
  80bdfc:	10803fcc 	andi	r2,r2,255
  80be00:	10803fe0 	cmpeqi	r2,r2,255
  80be04:	1000031e 	bne	r2,zero,80be14 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  80be08:	d0a71c03 	ldbu	r2,-25488(gp)
  80be0c:	10800044 	addi	r2,r2,1
  80be10:	d0a71c05 	stb	r2,-25488(gp)
  80be14:	e0bfff17 	ldw	r2,-4(fp)
  80be18:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80be1c:	e0bffd17 	ldw	r2,-12(fp)
  80be20:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80be24:	e037883a 	mov	sp,fp
  80be28:	df000017 	ldw	fp,0(sp)
  80be2c:	dec00104 	addi	sp,sp,4
  80be30:	f800283a 	ret

0080be34 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  80be34:	defff804 	addi	sp,sp,-32
  80be38:	dfc00715 	stw	ra,28(sp)
  80be3c:	df000615 	stw	fp,24(sp)
  80be40:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80be44:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  80be48:	d0a71c43 	ldbu	r2,-25487(gp)
  80be4c:	10803fcc 	andi	r2,r2,255
  80be50:	10800058 	cmpnei	r2,r2,1
  80be54:	10002b1e 	bne	r2,zero,80bf04 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80be58:	0005303a 	rdctl	r2,status
  80be5c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80be60:	e0fffe17 	ldw	r3,-8(fp)
  80be64:	00bfff84 	movi	r2,-2
  80be68:	1884703a 	and	r2,r3,r2
  80be6c:	1001703a 	wrctl	status,r2
  
  return context;
  80be70:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80be74:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  80be78:	d0a71c03 	ldbu	r2,-25488(gp)
  80be7c:	10803fcc 	andi	r2,r2,255
  80be80:	1005003a 	cmpeq	r2,r2,zero
  80be84:	10001b1e 	bne	r2,zero,80bef4 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  80be88:	d0a71c03 	ldbu	r2,-25488(gp)
  80be8c:	10bfffc4 	addi	r2,r2,-1
  80be90:	d0a71c05 	stb	r2,-25488(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  80be94:	d0a71c03 	ldbu	r2,-25488(gp)
  80be98:	10803fcc 	andi	r2,r2,255
  80be9c:	1004c03a 	cmpne	r2,r2,zero
  80bea0:	10000f1e 	bne	r2,zero,80bee0 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  80bea4:	d0a72a03 	ldbu	r2,-25432(gp)
  80bea8:	10803fcc 	andi	r2,r2,255
  80beac:	1004c03a 	cmpne	r2,r2,zero
  80beb0:	1000061e 	bne	r2,zero,80becc <OSSchedUnlock+0x98>
  80beb4:	e0bfff17 	ldw	r2,-4(fp)
  80beb8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bebc:	e0bffd17 	ldw	r2,-12(fp)
  80bec0:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  80bec4:	080ccf00 	call	80ccf0 <OS_Sched>
  80bec8:	00000e06 	br	80bf04 <OSSchedUnlock+0xd0>
  80becc:	e0bfff17 	ldw	r2,-4(fp)
  80bed0:	e0bffc15 	stw	r2,-16(fp)
  80bed4:	e0bffc17 	ldw	r2,-16(fp)
  80bed8:	1001703a 	wrctl	status,r2
  80bedc:	00000906 	br	80bf04 <OSSchedUnlock+0xd0>
  80bee0:	e0bfff17 	ldw	r2,-4(fp)
  80bee4:	e0bffb15 	stw	r2,-20(fp)
  80bee8:	e0bffb17 	ldw	r2,-20(fp)
  80beec:	1001703a 	wrctl	status,r2
  80bef0:	00000406 	br	80bf04 <OSSchedUnlock+0xd0>
  80bef4:	e0bfff17 	ldw	r2,-4(fp)
  80bef8:	e0bffa15 	stw	r2,-24(fp)
  80befc:	e0bffa17 	ldw	r2,-24(fp)
  80bf00:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  80bf04:	e037883a 	mov	sp,fp
  80bf08:	dfc00117 	ldw	ra,4(sp)
  80bf0c:	df000017 	ldw	fp,0(sp)
  80bf10:	dec00204 	addi	sp,sp,8
  80bf14:	f800283a 	ret

0080bf18 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  80bf18:	defffe04 	addi	sp,sp,-8
  80bf1c:	dfc00115 	stw	ra,4(sp)
  80bf20:	df000015 	stw	fp,0(sp)
  80bf24:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  80bf28:	d0a71c43 	ldbu	r2,-25487(gp)
  80bf2c:	10803fcc 	andi	r2,r2,255
  80bf30:	1004c03a 	cmpne	r2,r2,zero
  80bf34:	10000f1e 	bne	r2,zero,80bf74 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  80bf38:	080cdc40 	call	80cdc4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  80bf3c:	d0a71e03 	ldbu	r2,-25480(gp)
  80bf40:	d0a71e45 	stb	r2,-25479(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  80bf44:	d0a71e03 	ldbu	r2,-25480(gp)
  80bf48:	10803fcc 	andi	r2,r2,255
  80bf4c:	00c020f4 	movhi	r3,131
  80bf50:	18e79804 	addi	r3,r3,-24992
  80bf54:	1085883a 	add	r2,r2,r2
  80bf58:	1085883a 	add	r2,r2,r2
  80bf5c:	10c5883a 	add	r2,r2,r3
  80bf60:	10800017 	ldw	r2,0(r2)
  80bf64:	d0a72615 	stw	r2,-25448(gp)
        OSTCBCur      = OSTCBHighRdy;
  80bf68:	d0a72617 	ldw	r2,-25448(gp)
  80bf6c:	d0a72b15 	stw	r2,-25428(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  80bf70:	0819e340 	call	819e34 <OSStartHighRdy>
    }
}
  80bf74:	e037883a 	mov	sp,fp
  80bf78:	dfc00117 	ldw	ra,4(sp)
  80bf7c:	df000017 	ldw	fp,0(sp)
  80bf80:	dec00204 	addi	sp,sp,8
  80bf84:	f800283a 	ret

0080bf88 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  80bf88:	defff904 	addi	sp,sp,-28
  80bf8c:	dfc00615 	stw	ra,24(sp)
  80bf90:	df000515 	stw	fp,20(sp)
  80bf94:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80bf98:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  80bf9c:	01000084 	movi	r4,2
  80bfa0:	0812fe80 	call	812fe8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bfa4:	0005303a 	rdctl	r2,status
  80bfa8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bfac:	e0fffe17 	ldw	r3,-8(fp)
  80bfb0:	00bfff84 	movi	r2,-2
  80bfb4:	1884703a 	and	r2,r3,r2
  80bfb8:	1001703a 	wrctl	status,r2
  
  return context;
  80bfbc:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  80bfc0:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  80bfc4:	d0271d15 	stw	zero,-25484(gp)
  80bfc8:	e0bfff17 	ldw	r2,-4(fp)
  80bfcc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bfd0:	e0bffd17 	ldw	r2,-12(fp)
  80bfd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  80bfd8:	01001904 	movi	r4,100
  80bfdc:	0812fe80 	call	812fe8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bfe0:	0005303a 	rdctl	r2,status
  80bfe4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bfe8:	e0fffc17 	ldw	r3,-16(fp)
  80bfec:	00bfff84 	movi	r2,-2
  80bff0:	1884703a 	and	r2,r3,r2
  80bff4:	1001703a 	wrctl	status,r2
  
  return context;
  80bff8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  80bffc:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  80c000:	d0a71d17 	ldw	r2,-25484(gp)
  80c004:	d0a72215 	stw	r2,-25464(gp)
    OSStatRdy    = OS_TRUE;
  80c008:	00800044 	movi	r2,1
  80c00c:	d0a72e05 	stb	r2,-25416(gp)
  80c010:	e0bfff17 	ldw	r2,-4(fp)
  80c014:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c018:	e0bffb17 	ldw	r2,-20(fp)
  80c01c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80c020:	e037883a 	mov	sp,fp
  80c024:	dfc00117 	ldw	ra,4(sp)
  80c028:	df000017 	ldw	fp,0(sp)
  80c02c:	dec00204 	addi	sp,sp,8
  80c030:	f800283a 	ret

0080c034 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  80c034:	defff604 	addi	sp,sp,-40
  80c038:	dfc00915 	stw	ra,36(sp)
  80c03c:	df000815 	stw	fp,32(sp)
  80c040:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80c044:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  80c048:	081a2000 	call	81a200 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c04c:	0005303a 	rdctl	r2,status
  80c050:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c054:	e0fffb17 	ldw	r3,-20(fp)
  80c058:	00bfff84 	movi	r2,-2
  80c05c:	1884703a 	and	r2,r3,r2
  80c060:	1001703a 	wrctl	status,r2
  
  return context;
  80c064:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  80c068:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  80c06c:	d0a72c17 	ldw	r2,-25424(gp)
  80c070:	10800044 	addi	r2,r2,1
  80c074:	d0a72c15 	stw	r2,-25424(gp)
  80c078:	e0bffc17 	ldw	r2,-16(fp)
  80c07c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c080:	e0bffa17 	ldw	r2,-24(fp)
  80c084:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  80c088:	d0a71c43 	ldbu	r2,-25487(gp)
  80c08c:	10803fcc 	andi	r2,r2,255
  80c090:	10800058 	cmpnei	r2,r2,1
  80c094:	1000721e 	bne	r2,zero,80c260 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  80c098:	d0a72003 	ldbu	r2,-25472(gp)
  80c09c:	10803fcc 	andi	r2,r2,255
  80c0a0:	e0bfff15 	stw	r2,-4(fp)
  80c0a4:	e0ffff17 	ldw	r3,-4(fp)
  80c0a8:	18800060 	cmpeqi	r2,r3,1
  80c0ac:	10000a1e 	bne	r2,zero,80c0d8 <OSTimeTick+0xa4>
  80c0b0:	e0ffff17 	ldw	r3,-4(fp)
  80c0b4:	188000a0 	cmpeqi	r2,r3,2
  80c0b8:	1000091e 	bne	r2,zero,80c0e0 <OSTimeTick+0xac>
  80c0bc:	e0ffff17 	ldw	r3,-4(fp)
  80c0c0:	1805003a 	cmpeq	r2,r3,zero
  80c0c4:	1000011e 	bne	r2,zero,80c0cc <OSTimeTick+0x98>
  80c0c8:	00000a06 	br	80c0f4 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  80c0cc:	00800044 	movi	r2,1
  80c0d0:	e0bffd05 	stb	r2,-12(fp)
                 break;
  80c0d4:	00000a06 	br	80c100 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  80c0d8:	e03ffd05 	stb	zero,-12(fp)
                 break;
  80c0dc:	00000806 	br	80c100 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  80c0e0:	00800044 	movi	r2,1
  80c0e4:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  80c0e8:	00800044 	movi	r2,1
  80c0ec:	d0a72005 	stb	r2,-25472(gp)
                 break;
  80c0f0:	00000306 	br	80c100 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  80c0f4:	00800044 	movi	r2,1
  80c0f8:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  80c0fc:	d0272005 	stb	zero,-25472(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  80c100:	e0bffd03 	ldbu	r2,-12(fp)
  80c104:	1005003a 	cmpeq	r2,r2,zero
  80c108:	1000551e 	bne	r2,zero,80c260 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  80c10c:	d0a71f17 	ldw	r2,-25476(gp)
  80c110:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80c114:	00004d06 	br	80c24c <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c118:	0005303a 	rdctl	r2,status
  80c11c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c120:	e0fff917 	ldw	r3,-28(fp)
  80c124:	00bfff84 	movi	r2,-2
  80c128:	1884703a 	and	r2,r3,r2
  80c12c:	1001703a 	wrctl	status,r2
  
  return context;
  80c130:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  80c134:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  80c138:	e0bffe17 	ldw	r2,-8(fp)
  80c13c:	10800b8b 	ldhu	r2,46(r2)
  80c140:	10bfffcc 	andi	r2,r2,65535
  80c144:	1005003a 	cmpeq	r2,r2,zero
  80c148:	1000391e 	bne	r2,zero,80c230 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  80c14c:	e0bffe17 	ldw	r2,-8(fp)
  80c150:	10800b8b 	ldhu	r2,46(r2)
  80c154:	10bfffc4 	addi	r2,r2,-1
  80c158:	1007883a 	mov	r3,r2
  80c15c:	e0bffe17 	ldw	r2,-8(fp)
  80c160:	10c00b8d 	sth	r3,46(r2)
  80c164:	e0bffe17 	ldw	r2,-8(fp)
  80c168:	10800b8b 	ldhu	r2,46(r2)
  80c16c:	10bfffcc 	andi	r2,r2,65535
  80c170:	1004c03a 	cmpne	r2,r2,zero
  80c174:	10002e1e 	bne	r2,zero,80c230 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80c178:	e0bffe17 	ldw	r2,-8(fp)
  80c17c:	10800c03 	ldbu	r2,48(r2)
  80c180:	10803fcc 	andi	r2,r2,255
  80c184:	10800dcc 	andi	r2,r2,55
  80c188:	1005003a 	cmpeq	r2,r2,zero
  80c18c:	10000b1e 	bne	r2,zero,80c1bc <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  80c190:	e0bffe17 	ldw	r2,-8(fp)
  80c194:	10c00c03 	ldbu	r3,48(r2)
  80c198:	00bff204 	movi	r2,-56
  80c19c:	1884703a 	and	r2,r3,r2
  80c1a0:	1007883a 	mov	r3,r2
  80c1a4:	e0bffe17 	ldw	r2,-8(fp)
  80c1a8:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  80c1ac:	e0fffe17 	ldw	r3,-8(fp)
  80c1b0:	00800044 	movi	r2,1
  80c1b4:	18800c45 	stb	r2,49(r3)
  80c1b8:	00000206 	br	80c1c4 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80c1bc:	e0bffe17 	ldw	r2,-8(fp)
  80c1c0:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  80c1c4:	e0bffe17 	ldw	r2,-8(fp)
  80c1c8:	10800c03 	ldbu	r2,48(r2)
  80c1cc:	10803fcc 	andi	r2,r2,255
  80c1d0:	1080020c 	andi	r2,r2,8
  80c1d4:	1004c03a 	cmpne	r2,r2,zero
  80c1d8:	1000151e 	bne	r2,zero,80c230 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  80c1dc:	e0bffe17 	ldw	r2,-8(fp)
  80c1e0:	10c00d83 	ldbu	r3,54(r2)
  80c1e4:	d0a72803 	ldbu	r2,-25440(gp)
  80c1e8:	1884b03a 	or	r2,r3,r2
  80c1ec:	d0a72805 	stb	r2,-25440(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80c1f0:	e0bffe17 	ldw	r2,-8(fp)
  80c1f4:	10800d03 	ldbu	r2,52(r2)
  80c1f8:	11003fcc 	andi	r4,r2,255
  80c1fc:	e0bffe17 	ldw	r2,-8(fp)
  80c200:	10800d03 	ldbu	r2,52(r2)
  80c204:	10c03fcc 	andi	r3,r2,255
  80c208:	d0a72844 	addi	r2,gp,-25439
  80c20c:	1885883a 	add	r2,r3,r2
  80c210:	10c00003 	ldbu	r3,0(r2)
  80c214:	e0bffe17 	ldw	r2,-8(fp)
  80c218:	10800d43 	ldbu	r2,53(r2)
  80c21c:	1884b03a 	or	r2,r3,r2
  80c220:	1007883a 	mov	r3,r2
  80c224:	d0a72844 	addi	r2,gp,-25439
  80c228:	2085883a 	add	r2,r4,r2
  80c22c:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  80c230:	e0bffe17 	ldw	r2,-8(fp)
  80c234:	10800517 	ldw	r2,20(r2)
  80c238:	e0bffe15 	stw	r2,-8(fp)
  80c23c:	e0bffc17 	ldw	r2,-16(fp)
  80c240:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c244:	e0bff817 	ldw	r2,-32(fp)
  80c248:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80c24c:	e0bffe17 	ldw	r2,-8(fp)
  80c250:	10800c83 	ldbu	r2,50(r2)
  80c254:	10803fcc 	andi	r2,r2,255
  80c258:	10800518 	cmpnei	r2,r2,20
  80c25c:	103fae1e 	bne	r2,zero,80c118 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  80c260:	e037883a 	mov	sp,fp
  80c264:	dfc00117 	ldw	ra,4(sp)
  80c268:	df000017 	ldw	fp,0(sp)
  80c26c:	dec00204 	addi	sp,sp,8
  80c270:	f800283a 	ret

0080c274 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  80c274:	deffff04 	addi	sp,sp,-4
  80c278:	df000015 	stw	fp,0(sp)
  80c27c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  80c280:	00804784 	movi	r2,286
}
  80c284:	e037883a 	mov	sp,fp
  80c288:	df000017 	ldw	fp,0(sp)
  80c28c:	dec00104 	addi	sp,sp,4
  80c290:	f800283a 	ret

0080c294 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  80c294:	deffff04 	addi	sp,sp,-4
  80c298:	df000015 	stw	fp,0(sp)
  80c29c:	d839883a 	mov	fp,sp
}
  80c2a0:	e037883a 	mov	sp,fp
  80c2a4:	df000017 	ldw	fp,0(sp)
  80c2a8:	dec00104 	addi	sp,sp,4
  80c2ac:	f800283a 	ret

0080c2b0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  80c2b0:	defff804 	addi	sp,sp,-32
  80c2b4:	dfc00715 	stw	ra,28(sp)
  80c2b8:	df000615 	stw	fp,24(sp)
  80c2bc:	df000604 	addi	fp,sp,24
  80c2c0:	e13ffc15 	stw	r4,-16(fp)
  80c2c4:	e17ffd15 	stw	r5,-12(fp)
  80c2c8:	e1bffe05 	stb	r6,-8(fp)
  80c2cc:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  80c2d0:	e0bffc17 	ldw	r2,-16(fp)
  80c2d4:	10800283 	ldbu	r2,10(r2)
  80c2d8:	10c03fcc 	andi	r3,r2,255
  80c2dc:	008020b4 	movhi	r2,130
  80c2e0:	10accc04 	addi	r2,r2,-19664
  80c2e4:	10c5883a 	add	r2,r2,r3
  80c2e8:	10800003 	ldbu	r2,0(r2)
  80c2ec:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  80c2f0:	e0fffa83 	ldbu	r3,-22(fp)
  80c2f4:	e0bffc17 	ldw	r2,-16(fp)
  80c2f8:	1885883a 	add	r2,r3,r2
  80c2fc:	10800204 	addi	r2,r2,8
  80c300:	108000c3 	ldbu	r2,3(r2)
  80c304:	10c03fcc 	andi	r3,r2,255
  80c308:	008020b4 	movhi	r2,130
  80c30c:	10accc04 	addi	r2,r2,-19664
  80c310:	10c5883a 	add	r2,r2,r3
  80c314:	10800003 	ldbu	r2,0(r2)
  80c318:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  80c31c:	e0bffa83 	ldbu	r2,-22(fp)
  80c320:	100490fa 	slli	r2,r2,3
  80c324:	1007883a 	mov	r3,r2
  80c328:	e0bffa43 	ldbu	r2,-23(fp)
  80c32c:	1885883a 	add	r2,r3,r2
  80c330:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  80c334:	e0bffa03 	ldbu	r2,-24(fp)
  80c338:	00c020f4 	movhi	r3,131
  80c33c:	18e79804 	addi	r3,r3,-24992
  80c340:	1085883a 	add	r2,r2,r2
  80c344:	1085883a 	add	r2,r2,r2
  80c348:	10c5883a 	add	r2,r2,r3
  80c34c:	10800017 	ldw	r2,0(r2)
  80c350:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  80c354:	e0bffb17 	ldw	r2,-20(fp)
  80c358:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  80c35c:	e0fffb17 	ldw	r3,-20(fp)
  80c360:	e0bffd17 	ldw	r2,-12(fp)
  80c364:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  80c368:	e0bffb17 	ldw	r2,-20(fp)
  80c36c:	10800c03 	ldbu	r2,48(r2)
  80c370:	1007883a 	mov	r3,r2
  80c374:	e0bffe03 	ldbu	r2,-8(fp)
  80c378:	0084303a 	nor	r2,zero,r2
  80c37c:	1884703a 	and	r2,r3,r2
  80c380:	1007883a 	mov	r3,r2
  80c384:	e0bffb17 	ldw	r2,-20(fp)
  80c388:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  80c38c:	e0fffb17 	ldw	r3,-20(fp)
  80c390:	e0bfff03 	ldbu	r2,-4(fp)
  80c394:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  80c398:	e0bffb17 	ldw	r2,-20(fp)
  80c39c:	10800c03 	ldbu	r2,48(r2)
  80c3a0:	10803fcc 	andi	r2,r2,255
  80c3a4:	1080020c 	andi	r2,r2,8
  80c3a8:	1004c03a 	cmpne	r2,r2,zero
  80c3ac:	1000111e 	bne	r2,zero,80c3f4 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  80c3b0:	e0bffb17 	ldw	r2,-20(fp)
  80c3b4:	10c00d83 	ldbu	r3,54(r2)
  80c3b8:	d0a72803 	ldbu	r2,-25440(gp)
  80c3bc:	1884b03a 	or	r2,r3,r2
  80c3c0:	d0a72805 	stb	r2,-25440(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  80c3c4:	e13ffa83 	ldbu	r4,-22(fp)
  80c3c8:	e0fffa83 	ldbu	r3,-22(fp)
  80c3cc:	d0a72844 	addi	r2,gp,-25439
  80c3d0:	1885883a 	add	r2,r3,r2
  80c3d4:	10c00003 	ldbu	r3,0(r2)
  80c3d8:	e0bffb17 	ldw	r2,-20(fp)
  80c3dc:	10800d43 	ldbu	r2,53(r2)
  80c3e0:	1884b03a 	or	r2,r3,r2
  80c3e4:	1007883a 	mov	r3,r2
  80c3e8:	d0a72844 	addi	r2,gp,-25439
  80c3ec:	2085883a 	add	r2,r4,r2
  80c3f0:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  80c3f4:	e13ffb17 	ldw	r4,-20(fp)
  80c3f8:	e17ffc17 	ldw	r5,-16(fp)
  80c3fc:	080c6a80 	call	80c6a8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  80c400:	e0bffb17 	ldw	r2,-20(fp)
  80c404:	10800817 	ldw	r2,32(r2)
  80c408:	1005003a 	cmpeq	r2,r2,zero
  80c40c:	1000071e 	bne	r2,zero,80c42c <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80c410:	e0bffb17 	ldw	r2,-20(fp)
  80c414:	11400817 	ldw	r5,32(r2)
  80c418:	e13ffb17 	ldw	r4,-20(fp)
  80c41c:	080c7600 	call	80c760 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  80c420:	e0fffb17 	ldw	r3,-20(fp)
  80c424:	e0bffc17 	ldw	r2,-16(fp)
  80c428:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  80c42c:	e0bffa03 	ldbu	r2,-24(fp)
}
  80c430:	e037883a 	mov	sp,fp
  80c434:	dfc00117 	ldw	ra,4(sp)
  80c438:	df000017 	ldw	fp,0(sp)
  80c43c:	dec00204 	addi	sp,sp,8
  80c440:	f800283a 	ret

0080c444 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  80c444:	defffd04 	addi	sp,sp,-12
  80c448:	df000215 	stw	fp,8(sp)
  80c44c:	df000204 	addi	fp,sp,8
  80c450:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  80c454:	d0e72b17 	ldw	r3,-25428(gp)
  80c458:	e0bfff17 	ldw	r2,-4(fp)
  80c45c:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  80c460:	d0a72b17 	ldw	r2,-25428(gp)
  80c464:	10800d03 	ldbu	r2,52(r2)
  80c468:	11003fcc 	andi	r4,r2,255
  80c46c:	d0a72b17 	ldw	r2,-25428(gp)
  80c470:	10800d03 	ldbu	r2,52(r2)
  80c474:	10c03fcc 	andi	r3,r2,255
  80c478:	e0bfff17 	ldw	r2,-4(fp)
  80c47c:	1885883a 	add	r2,r3,r2
  80c480:	10800204 	addi	r2,r2,8
  80c484:	10c000c3 	ldbu	r3,3(r2)
  80c488:	d0a72b17 	ldw	r2,-25428(gp)
  80c48c:	10800d43 	ldbu	r2,53(r2)
  80c490:	1884b03a 	or	r2,r3,r2
  80c494:	1007883a 	mov	r3,r2
  80c498:	e0bfff17 	ldw	r2,-4(fp)
  80c49c:	2085883a 	add	r2,r4,r2
  80c4a0:	10800204 	addi	r2,r2,8
  80c4a4:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80c4a8:	e0bfff17 	ldw	r2,-4(fp)
  80c4ac:	10c00283 	ldbu	r3,10(r2)
  80c4b0:	d0a72b17 	ldw	r2,-25428(gp)
  80c4b4:	10800d83 	ldbu	r2,54(r2)
  80c4b8:	1884b03a 	or	r2,r3,r2
  80c4bc:	1007883a 	mov	r3,r2
  80c4c0:	e0bfff17 	ldw	r2,-4(fp)
  80c4c4:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80c4c8:	d0a72b17 	ldw	r2,-25428(gp)
  80c4cc:	10800d03 	ldbu	r2,52(r2)
  80c4d0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80c4d4:	e13ffe03 	ldbu	r4,-8(fp)
  80c4d8:	e0fffe03 	ldbu	r3,-8(fp)
  80c4dc:	d0a72844 	addi	r2,gp,-25439
  80c4e0:	1885883a 	add	r2,r3,r2
  80c4e4:	10800003 	ldbu	r2,0(r2)
  80c4e8:	1007883a 	mov	r3,r2
  80c4ec:	d0a72b17 	ldw	r2,-25428(gp)
  80c4f0:	10800d43 	ldbu	r2,53(r2)
  80c4f4:	0084303a 	nor	r2,zero,r2
  80c4f8:	1884703a 	and	r2,r3,r2
  80c4fc:	1007883a 	mov	r3,r2
  80c500:	d0a72844 	addi	r2,gp,-25439
  80c504:	2085883a 	add	r2,r4,r2
  80c508:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80c50c:	e0fffe03 	ldbu	r3,-8(fp)
  80c510:	d0a72844 	addi	r2,gp,-25439
  80c514:	1885883a 	add	r2,r3,r2
  80c518:	10800003 	ldbu	r2,0(r2)
  80c51c:	10803fcc 	andi	r2,r2,255
  80c520:	1004c03a 	cmpne	r2,r2,zero
  80c524:	1000071e 	bne	r2,zero,80c544 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80c528:	d0a72b17 	ldw	r2,-25428(gp)
  80c52c:	10800d83 	ldbu	r2,54(r2)
  80c530:	0084303a 	nor	r2,zero,r2
  80c534:	1007883a 	mov	r3,r2
  80c538:	d0a72803 	ldbu	r2,-25440(gp)
  80c53c:	1884703a 	and	r2,r3,r2
  80c540:	d0a72805 	stb	r2,-25440(gp)
    }
}
  80c544:	e037883a 	mov	sp,fp
  80c548:	df000017 	ldw	fp,0(sp)
  80c54c:	dec00104 	addi	sp,sp,4
  80c550:	f800283a 	ret

0080c554 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  80c554:	defffb04 	addi	sp,sp,-20
  80c558:	df000415 	stw	fp,16(sp)
  80c55c:	df000404 	addi	fp,sp,16
  80c560:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  80c564:	d0a72b17 	ldw	r2,-25428(gp)
  80c568:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  80c56c:	d0e72b17 	ldw	r3,-25428(gp)
  80c570:	e0bfff17 	ldw	r2,-4(fp)
  80c574:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  80c578:	e0bfff17 	ldw	r2,-4(fp)
  80c57c:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  80c580:	e0bffe17 	ldw	r2,-8(fp)
  80c584:	10800017 	ldw	r2,0(r2)
  80c588:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80c58c:	00002006 	br	80c610 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  80c590:	d0a72b17 	ldw	r2,-25428(gp)
  80c594:	10800d03 	ldbu	r2,52(r2)
  80c598:	11003fcc 	andi	r4,r2,255
  80c59c:	d0a72b17 	ldw	r2,-25428(gp)
  80c5a0:	10800d03 	ldbu	r2,52(r2)
  80c5a4:	10c03fcc 	andi	r3,r2,255
  80c5a8:	e0bffd17 	ldw	r2,-12(fp)
  80c5ac:	1885883a 	add	r2,r3,r2
  80c5b0:	10800204 	addi	r2,r2,8
  80c5b4:	10c000c3 	ldbu	r3,3(r2)
  80c5b8:	d0a72b17 	ldw	r2,-25428(gp)
  80c5bc:	10800d43 	ldbu	r2,53(r2)
  80c5c0:	1884b03a 	or	r2,r3,r2
  80c5c4:	1007883a 	mov	r3,r2
  80c5c8:	e0bffd17 	ldw	r2,-12(fp)
  80c5cc:	2085883a 	add	r2,r4,r2
  80c5d0:	10800204 	addi	r2,r2,8
  80c5d4:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80c5d8:	e0bffd17 	ldw	r2,-12(fp)
  80c5dc:	10c00283 	ldbu	r3,10(r2)
  80c5e0:	d0a72b17 	ldw	r2,-25428(gp)
  80c5e4:	10800d83 	ldbu	r2,54(r2)
  80c5e8:	1884b03a 	or	r2,r3,r2
  80c5ec:	1007883a 	mov	r3,r2
  80c5f0:	e0bffd17 	ldw	r2,-12(fp)
  80c5f4:	10c00285 	stb	r3,10(r2)
        pevents++;
  80c5f8:	e0bffe17 	ldw	r2,-8(fp)
  80c5fc:	10800104 	addi	r2,r2,4
  80c600:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  80c604:	e0bffe17 	ldw	r2,-8(fp)
  80c608:	10800017 	ldw	r2,0(r2)
  80c60c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80c610:	e0bffd17 	ldw	r2,-12(fp)
  80c614:	1004c03a 	cmpne	r2,r2,zero
  80c618:	103fdd1e 	bne	r2,zero,80c590 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80c61c:	d0a72b17 	ldw	r2,-25428(gp)
  80c620:	10800d03 	ldbu	r2,52(r2)
  80c624:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80c628:	e13ffc03 	ldbu	r4,-16(fp)
  80c62c:	e0fffc03 	ldbu	r3,-16(fp)
  80c630:	d0a72844 	addi	r2,gp,-25439
  80c634:	1885883a 	add	r2,r3,r2
  80c638:	10800003 	ldbu	r2,0(r2)
  80c63c:	1007883a 	mov	r3,r2
  80c640:	d0a72b17 	ldw	r2,-25428(gp)
  80c644:	10800d43 	ldbu	r2,53(r2)
  80c648:	0084303a 	nor	r2,zero,r2
  80c64c:	1884703a 	and	r2,r3,r2
  80c650:	1007883a 	mov	r3,r2
  80c654:	d0a72844 	addi	r2,gp,-25439
  80c658:	2085883a 	add	r2,r4,r2
  80c65c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80c660:	e0fffc03 	ldbu	r3,-16(fp)
  80c664:	d0a72844 	addi	r2,gp,-25439
  80c668:	1885883a 	add	r2,r3,r2
  80c66c:	10800003 	ldbu	r2,0(r2)
  80c670:	10803fcc 	andi	r2,r2,255
  80c674:	1004c03a 	cmpne	r2,r2,zero
  80c678:	1000071e 	bne	r2,zero,80c698 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80c67c:	d0a72b17 	ldw	r2,-25428(gp)
  80c680:	10800d83 	ldbu	r2,54(r2)
  80c684:	0084303a 	nor	r2,zero,r2
  80c688:	1007883a 	mov	r3,r2
  80c68c:	d0a72803 	ldbu	r2,-25440(gp)
  80c690:	1884703a 	and	r2,r3,r2
  80c694:	d0a72805 	stb	r2,-25440(gp)
    }
}
  80c698:	e037883a 	mov	sp,fp
  80c69c:	df000017 	ldw	fp,0(sp)
  80c6a0:	dec00104 	addi	sp,sp,4
  80c6a4:	f800283a 	ret

0080c6a8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  80c6a8:	defffc04 	addi	sp,sp,-16
  80c6ac:	df000315 	stw	fp,12(sp)
  80c6b0:	df000304 	addi	fp,sp,12
  80c6b4:	e13ffe15 	stw	r4,-8(fp)
  80c6b8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  80c6bc:	e0bffe17 	ldw	r2,-8(fp)
  80c6c0:	10800d03 	ldbu	r2,52(r2)
  80c6c4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  80c6c8:	e13ffd03 	ldbu	r4,-12(fp)
  80c6cc:	e0fffd03 	ldbu	r3,-12(fp)
  80c6d0:	e0bfff17 	ldw	r2,-4(fp)
  80c6d4:	1885883a 	add	r2,r3,r2
  80c6d8:	10800204 	addi	r2,r2,8
  80c6dc:	108000c3 	ldbu	r2,3(r2)
  80c6e0:	1007883a 	mov	r3,r2
  80c6e4:	e0bffe17 	ldw	r2,-8(fp)
  80c6e8:	10800d43 	ldbu	r2,53(r2)
  80c6ec:	0084303a 	nor	r2,zero,r2
  80c6f0:	1884703a 	and	r2,r3,r2
  80c6f4:	1007883a 	mov	r3,r2
  80c6f8:	e0bfff17 	ldw	r2,-4(fp)
  80c6fc:	2085883a 	add	r2,r4,r2
  80c700:	10800204 	addi	r2,r2,8
  80c704:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  80c708:	e0fffd03 	ldbu	r3,-12(fp)
  80c70c:	e0bfff17 	ldw	r2,-4(fp)
  80c710:	1885883a 	add	r2,r3,r2
  80c714:	10800204 	addi	r2,r2,8
  80c718:	108000c3 	ldbu	r2,3(r2)
  80c71c:	10803fcc 	andi	r2,r2,255
  80c720:	1004c03a 	cmpne	r2,r2,zero
  80c724:	10000a1e 	bne	r2,zero,80c750 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  80c728:	e0bfff17 	ldw	r2,-4(fp)
  80c72c:	10800283 	ldbu	r2,10(r2)
  80c730:	1007883a 	mov	r3,r2
  80c734:	e0bffe17 	ldw	r2,-8(fp)
  80c738:	10800d83 	ldbu	r2,54(r2)
  80c73c:	0084303a 	nor	r2,zero,r2
  80c740:	1884703a 	and	r2,r3,r2
  80c744:	1007883a 	mov	r3,r2
  80c748:	e0bfff17 	ldw	r2,-4(fp)
  80c74c:	10c00285 	stb	r3,10(r2)
    }
}
  80c750:	e037883a 	mov	sp,fp
  80c754:	df000017 	ldw	fp,0(sp)
  80c758:	dec00104 	addi	sp,sp,4
  80c75c:	f800283a 	ret

0080c760 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  80c760:	defffa04 	addi	sp,sp,-24
  80c764:	df000515 	stw	fp,20(sp)
  80c768:	df000504 	addi	fp,sp,20
  80c76c:	e13ffe15 	stw	r4,-8(fp)
  80c770:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  80c774:	e0bffe17 	ldw	r2,-8(fp)
  80c778:	10800d03 	ldbu	r2,52(r2)
  80c77c:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  80c780:	e0bffe17 	ldw	r2,-8(fp)
  80c784:	10800d83 	ldbu	r2,54(r2)
  80c788:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  80c78c:	e0bffe17 	ldw	r2,-8(fp)
  80c790:	10800d43 	ldbu	r2,53(r2)
  80c794:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  80c798:	e0bfff17 	ldw	r2,-4(fp)
  80c79c:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  80c7a0:	e0bffd17 	ldw	r2,-12(fp)
  80c7a4:	10800017 	ldw	r2,0(r2)
  80c7a8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80c7ac:	00002606 	br	80c848 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  80c7b0:	e13ffb83 	ldbu	r4,-18(fp)
  80c7b4:	e0fffb83 	ldbu	r3,-18(fp)
  80c7b8:	e0bffc17 	ldw	r2,-16(fp)
  80c7bc:	1885883a 	add	r2,r3,r2
  80c7c0:	10800204 	addi	r2,r2,8
  80c7c4:	108000c3 	ldbu	r2,3(r2)
  80c7c8:	1007883a 	mov	r3,r2
  80c7cc:	e0bffb03 	ldbu	r2,-20(fp)
  80c7d0:	0084303a 	nor	r2,zero,r2
  80c7d4:	1884703a 	and	r2,r3,r2
  80c7d8:	1007883a 	mov	r3,r2
  80c7dc:	e0bffc17 	ldw	r2,-16(fp)
  80c7e0:	2085883a 	add	r2,r4,r2
  80c7e4:	10800204 	addi	r2,r2,8
  80c7e8:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  80c7ec:	e0fffb83 	ldbu	r3,-18(fp)
  80c7f0:	e0bffc17 	ldw	r2,-16(fp)
  80c7f4:	1885883a 	add	r2,r3,r2
  80c7f8:	10800204 	addi	r2,r2,8
  80c7fc:	108000c3 	ldbu	r2,3(r2)
  80c800:	10803fcc 	andi	r2,r2,255
  80c804:	1004c03a 	cmpne	r2,r2,zero
  80c808:	1000091e 	bne	r2,zero,80c830 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  80c80c:	e0bffc17 	ldw	r2,-16(fp)
  80c810:	10800283 	ldbu	r2,10(r2)
  80c814:	1007883a 	mov	r3,r2
  80c818:	e0bffb43 	ldbu	r2,-19(fp)
  80c81c:	0084303a 	nor	r2,zero,r2
  80c820:	1884703a 	and	r2,r3,r2
  80c824:	1007883a 	mov	r3,r2
  80c828:	e0bffc17 	ldw	r2,-16(fp)
  80c82c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  80c830:	e0bffd17 	ldw	r2,-12(fp)
  80c834:	10800104 	addi	r2,r2,4
  80c838:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  80c83c:	e0bffd17 	ldw	r2,-12(fp)
  80c840:	10800017 	ldw	r2,0(r2)
  80c844:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80c848:	e0bffc17 	ldw	r2,-16(fp)
  80c84c:	1004c03a 	cmpne	r2,r2,zero
  80c850:	103fd71e 	bne	r2,zero,80c7b0 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  80c854:	e037883a 	mov	sp,fp
  80c858:	df000017 	ldw	fp,0(sp)
  80c85c:	dec00104 	addi	sp,sp,4
  80c860:	f800283a 	ret

0080c864 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  80c864:	defffc04 	addi	sp,sp,-16
  80c868:	df000315 	stw	fp,12(sp)
  80c86c:	df000304 	addi	fp,sp,12
  80c870:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  80c874:	e0bfff17 	ldw	r2,-4(fp)
  80c878:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  80c87c:	e0bfff17 	ldw	r2,-4(fp)
  80c880:	108002c4 	addi	r2,r2,11
  80c884:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80c888:	e03ffd05 	stb	zero,-12(fp)
  80c88c:	00000806 	br	80c8b0 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  80c890:	e0bffe17 	ldw	r2,-8(fp)
  80c894:	10000005 	stb	zero,0(r2)
  80c898:	e0bffe17 	ldw	r2,-8(fp)
  80c89c:	10800044 	addi	r2,r2,1
  80c8a0:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80c8a4:	e0bffd03 	ldbu	r2,-12(fp)
  80c8a8:	10800044 	addi	r2,r2,1
  80c8ac:	e0bffd05 	stb	r2,-12(fp)
  80c8b0:	e0bffd03 	ldbu	r2,-12(fp)
  80c8b4:	108000f0 	cmpltui	r2,r2,3
  80c8b8:	103ff51e 	bne	r2,zero,80c890 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  80c8bc:	e037883a 	mov	sp,fp
  80c8c0:	df000017 	ldw	fp,0(sp)
  80c8c4:	dec00104 	addi	sp,sp,4
  80c8c8:	f800283a 	ret

0080c8cc <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  80c8cc:	defffb04 	addi	sp,sp,-20
  80c8d0:	dfc00415 	stw	ra,16(sp)
  80c8d4:	df000315 	stw	fp,12(sp)
  80c8d8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  80c8dc:	010020f4 	movhi	r4,131
  80c8e0:	21238404 	addi	r4,r4,-29168
  80c8e4:	0142d004 	movi	r5,2880
  80c8e8:	080cc300 	call	80cc30 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  80c8ec:	008020f4 	movhi	r2,131
  80c8f0:	10a38404 	addi	r2,r2,-29168
  80c8f4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  80c8f8:	008020f4 	movhi	r2,131
  80c8fc:	10a39004 	addi	r2,r2,-29120
  80c900:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80c904:	e03fff0d 	sth	zero,-4(fp)
  80c908:	00001306 	br	80c958 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80c90c:	e0bffe17 	ldw	r2,-8(fp)
  80c910:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  80c914:	e0fffe17 	ldw	r3,-8(fp)
  80c918:	e0bffd17 	ldw	r2,-12(fp)
  80c91c:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  80c920:	e0fffe17 	ldw	r3,-8(fp)
  80c924:	00800fc4 	movi	r2,63
  80c928:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  80c92c:	e0bffe17 	ldw	r2,-8(fp)
  80c930:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  80c934:	e0bffe17 	ldw	r2,-8(fp)
  80c938:	10800c04 	addi	r2,r2,48
  80c93c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  80c940:	e0bffd17 	ldw	r2,-12(fp)
  80c944:	10800c04 	addi	r2,r2,48
  80c948:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80c94c:	e0bfff0b 	ldhu	r2,-4(fp)
  80c950:	10800044 	addi	r2,r2,1
  80c954:	e0bfff0d 	sth	r2,-4(fp)
  80c958:	e0bfff0b 	ldhu	r2,-4(fp)
  80c95c:	10800ef0 	cmpltui	r2,r2,59
  80c960:	103fea1e 	bne	r2,zero,80c90c <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  80c964:	e0bffe17 	ldw	r2,-8(fp)
  80c968:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  80c96c:	e0bffe17 	ldw	r2,-8(fp)
  80c970:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  80c974:	e0fffe17 	ldw	r3,-8(fp)
  80c978:	00800fc4 	movi	r2,63
  80c97c:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  80c980:	e0bffe17 	ldw	r2,-8(fp)
  80c984:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  80c988:	008020f4 	movhi	r2,131
  80c98c:	10a38404 	addi	r2,r2,-29168
  80c990:	d0a72915 	stw	r2,-25436(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  80c994:	e037883a 	mov	sp,fp
  80c998:	dfc00117 	ldw	ra,4(sp)
  80c99c:	df000017 	ldw	fp,0(sp)
  80c9a0:	dec00204 	addi	sp,sp,8
  80c9a4:	f800283a 	ret

0080c9a8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  80c9a8:	deffff04 	addi	sp,sp,-4
  80c9ac:	df000015 	stw	fp,0(sp)
  80c9b0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  80c9b4:	d0272c15 	stw	zero,-25424(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  80c9b8:	d0272a05 	stb	zero,-25432(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  80c9bc:	d0271c05 	stb	zero,-25488(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  80c9c0:	d0272445 	stb	zero,-25455(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  80c9c4:	d0271c45 	stb	zero,-25487(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  80c9c8:	d0272115 	stw	zero,-25468(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  80c9cc:	d0271d15 	stw	zero,-25484(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  80c9d0:	d0272f15 	stw	zero,-25412(gp)
    OSIdleCtrMax  = 0L;
  80c9d4:	d0272215 	stw	zero,-25464(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  80c9d8:	d0272e05 	stb	zero,-25416(gp)
#endif
}
  80c9dc:	e037883a 	mov	sp,fp
  80c9e0:	df000017 	ldw	fp,0(sp)
  80c9e4:	dec00104 	addi	sp,sp,4
  80c9e8:	f800283a 	ret

0080c9ec <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  80c9ec:	defffd04 	addi	sp,sp,-12
  80c9f0:	df000215 	stw	fp,8(sp)
  80c9f4:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  80c9f8:	d0272805 	stb	zero,-25440(gp)
    prdytbl       = &OSRdyTbl[0];
  80c9fc:	d0a72844 	addi	r2,gp,-25439
  80ca00:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80ca04:	e03fff05 	stb	zero,-4(fp)
  80ca08:	00000806 	br	80ca2c <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  80ca0c:	e0bffe17 	ldw	r2,-8(fp)
  80ca10:	10000005 	stb	zero,0(r2)
  80ca14:	e0bffe17 	ldw	r2,-8(fp)
  80ca18:	10800044 	addi	r2,r2,1
  80ca1c:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80ca20:	e0bfff03 	ldbu	r2,-4(fp)
  80ca24:	10800044 	addi	r2,r2,1
  80ca28:	e0bfff05 	stb	r2,-4(fp)
  80ca2c:	e0bfff03 	ldbu	r2,-4(fp)
  80ca30:	108000f0 	cmpltui	r2,r2,3
  80ca34:	103ff51e 	bne	r2,zero,80ca0c <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  80ca38:	d0271e45 	stb	zero,-25479(gp)
    OSPrioHighRdy = 0;
  80ca3c:	d0271e05 	stb	zero,-25480(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  80ca40:	d0272615 	stw	zero,-25448(gp)
    OSTCBCur      = (OS_TCB *)0;
  80ca44:	d0272b15 	stw	zero,-25428(gp)
}
  80ca48:	e037883a 	mov	sp,fp
  80ca4c:	df000017 	ldw	fp,0(sp)
  80ca50:	dec00104 	addi	sp,sp,4
  80ca54:	f800283a 	ret

0080ca58 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  80ca58:	defff804 	addi	sp,sp,-32
  80ca5c:	dfc00715 	stw	ra,28(sp)
  80ca60:	df000615 	stw	fp,24(sp)
  80ca64:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  80ca68:	018020f4 	movhi	r6,131
  80ca6c:	31a38304 	addi	r6,r6,-29172
  80ca70:	00bfffd4 	movui	r2,65535
  80ca74:	d8800015 	stw	r2,0(sp)
  80ca78:	008020f4 	movhi	r2,131
  80ca7c:	10a18404 	addi	r2,r2,-31216
  80ca80:	d8800115 	stw	r2,4(sp)
  80ca84:	00808004 	movi	r2,512
  80ca88:	d8800215 	stw	r2,8(sp)
  80ca8c:	d8000315 	stw	zero,12(sp)
  80ca90:	008000c4 	movi	r2,3
  80ca94:	d8800415 	stw	r2,16(sp)
  80ca98:	01002074 	movhi	r4,129
  80ca9c:	2133c304 	addi	r4,r4,-12532
  80caa0:	000b883a 	mov	r5,zero
  80caa4:	01c00504 	movi	r7,20
  80caa8:	0811cf00 	call	811cf0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  80caac:	014020b4 	movhi	r5,130
  80cab0:	296d0c04 	addi	r5,r5,-19408
  80cab4:	01000504 	movi	r4,20
  80cab8:	e1bfff04 	addi	r6,fp,-4
  80cabc:	08126240 	call	812624 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  80cac0:	e037883a 	mov	sp,fp
  80cac4:	dfc00117 	ldw	ra,4(sp)
  80cac8:	df000017 	ldw	fp,0(sp)
  80cacc:	dec00204 	addi	sp,sp,8
  80cad0:	f800283a 	ret

0080cad4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  80cad4:	defff804 	addi	sp,sp,-32
  80cad8:	dfc00715 	stw	ra,28(sp)
  80cadc:	df000615 	stw	fp,24(sp)
  80cae0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  80cae4:	018020f4 	movhi	r6,131
  80cae8:	31a10b04 	addi	r6,r6,-31700
  80caec:	00bfff94 	movui	r2,65534
  80caf0:	d8800015 	stw	r2,0(sp)
  80caf4:	008020b4 	movhi	r2,130
  80caf8:	109f0c04 	addi	r2,r2,31792
  80cafc:	d8800115 	stw	r2,4(sp)
  80cb00:	00808004 	movi	r2,512
  80cb04:	d8800215 	stw	r2,8(sp)
  80cb08:	d8000315 	stw	zero,12(sp)
  80cb0c:	008000c4 	movi	r2,3
  80cb10:	d8800415 	stw	r2,16(sp)
  80cb14:	01002074 	movhi	r4,129
  80cb18:	2133da04 	addi	r4,r4,-12440
  80cb1c:	000b883a 	mov	r5,zero
  80cb20:	01c004c4 	movi	r7,19
  80cb24:	0811cf00 	call	811cf0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  80cb28:	014020b4 	movhi	r5,130
  80cb2c:	296d1004 	addi	r5,r5,-19392
  80cb30:	010004c4 	movi	r4,19
  80cb34:	e1bfff04 	addi	r6,fp,-4
  80cb38:	08126240 	call	812624 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  80cb3c:	e037883a 	mov	sp,fp
  80cb40:	dfc00117 	ldw	ra,4(sp)
  80cb44:	df000017 	ldw	fp,0(sp)
  80cb48:	dec00204 	addi	sp,sp,8
  80cb4c:	f800283a 	ret

0080cb50 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  80cb50:	defffb04 	addi	sp,sp,-20
  80cb54:	dfc00415 	stw	ra,16(sp)
  80cb58:	df000315 	stw	fp,12(sp)
  80cb5c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  80cb60:	010020f4 	movhi	r4,131
  80cb64:	21265404 	addi	r4,r4,-26288
  80cb68:	01414404 	movi	r5,1296
  80cb6c:	080cc300 	call	80cc30 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  80cb70:	010020f4 	movhi	r4,131
  80cb74:	21279804 	addi	r4,r4,-24992
  80cb78:	01401504 	movi	r5,84
  80cb7c:	080cc300 	call	80cc30 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  80cb80:	008020f4 	movhi	r2,131
  80cb84:	10a65404 	addi	r2,r2,-26288
  80cb88:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  80cb8c:	008020f4 	movhi	r2,131
  80cb90:	10a66f04 	addi	r2,r2,-26180
  80cb94:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80cb98:	e03fff05 	stb	zero,-4(fp)
  80cb9c:	00001106 	br	80cbe4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  80cba0:	e0fffe17 	ldw	r3,-8(fp)
  80cba4:	e0bffd17 	ldw	r2,-12(fp)
  80cba8:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  80cbac:	e0fffe17 	ldw	r3,-8(fp)
  80cbb0:	00800fc4 	movi	r2,63
  80cbb4:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80cbb8:	e0bffe17 	ldw	r2,-8(fp)
  80cbbc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  80cbc0:	e0bffe17 	ldw	r2,-8(fp)
  80cbc4:	10801b04 	addi	r2,r2,108
  80cbc8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  80cbcc:	e0bffd17 	ldw	r2,-12(fp)
  80cbd0:	10801b04 	addi	r2,r2,108
  80cbd4:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80cbd8:	e0bfff03 	ldbu	r2,-4(fp)
  80cbdc:	10800044 	addi	r2,r2,1
  80cbe0:	e0bfff05 	stb	r2,-4(fp)
  80cbe4:	e0bfff03 	ldbu	r2,-4(fp)
  80cbe8:	108002f0 	cmpltui	r2,r2,11
  80cbec:	103fec1e 	bne	r2,zero,80cba0 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  80cbf0:	e0bffe17 	ldw	r2,-8(fp)
  80cbf4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  80cbf8:	e0fffe17 	ldw	r3,-8(fp)
  80cbfc:	00800fc4 	movi	r2,63
  80cc00:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80cc04:	e0bffe17 	ldw	r2,-8(fp)
  80cc08:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  80cc0c:	d0271f15 	stw	zero,-25476(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  80cc10:	008020f4 	movhi	r2,131
  80cc14:	10a65404 	addi	r2,r2,-26288
  80cc18:	d0a72315 	stw	r2,-25460(gp)
}
  80cc1c:	e037883a 	mov	sp,fp
  80cc20:	dfc00117 	ldw	ra,4(sp)
  80cc24:	df000017 	ldw	fp,0(sp)
  80cc28:	dec00204 	addi	sp,sp,8
  80cc2c:	f800283a 	ret

0080cc30 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  80cc30:	defffd04 	addi	sp,sp,-12
  80cc34:	df000215 	stw	fp,8(sp)
  80cc38:	df000204 	addi	fp,sp,8
  80cc3c:	e13ffe15 	stw	r4,-8(fp)
  80cc40:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  80cc44:	00000806 	br	80cc68 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  80cc48:	e0bffe17 	ldw	r2,-8(fp)
  80cc4c:	10000005 	stb	zero,0(r2)
  80cc50:	e0bffe17 	ldw	r2,-8(fp)
  80cc54:	10800044 	addi	r2,r2,1
  80cc58:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80cc5c:	e0bfff0b 	ldhu	r2,-4(fp)
  80cc60:	10bfffc4 	addi	r2,r2,-1
  80cc64:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  80cc68:	e0bfff0b 	ldhu	r2,-4(fp)
  80cc6c:	1004c03a 	cmpne	r2,r2,zero
  80cc70:	103ff51e 	bne	r2,zero,80cc48 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  80cc74:	e037883a 	mov	sp,fp
  80cc78:	df000017 	ldw	fp,0(sp)
  80cc7c:	dec00104 	addi	sp,sp,4
  80cc80:	f800283a 	ret

0080cc84 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  80cc84:	defffc04 	addi	sp,sp,-16
  80cc88:	df000315 	stw	fp,12(sp)
  80cc8c:	df000304 	addi	fp,sp,12
  80cc90:	e13ffd15 	stw	r4,-12(fp)
  80cc94:	e17ffe15 	stw	r5,-8(fp)
  80cc98:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  80cc9c:	00000d06 	br	80ccd4 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  80cca0:	e0bffe17 	ldw	r2,-8(fp)
  80cca4:	10c00003 	ldbu	r3,0(r2)
  80cca8:	e0bffd17 	ldw	r2,-12(fp)
  80ccac:	10c00005 	stb	r3,0(r2)
  80ccb0:	e0bffd17 	ldw	r2,-12(fp)
  80ccb4:	10800044 	addi	r2,r2,1
  80ccb8:	e0bffd15 	stw	r2,-12(fp)
  80ccbc:	e0bffe17 	ldw	r2,-8(fp)
  80ccc0:	10800044 	addi	r2,r2,1
  80ccc4:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80ccc8:	e0bfff0b 	ldhu	r2,-4(fp)
  80cccc:	10bfffc4 	addi	r2,r2,-1
  80ccd0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  80ccd4:	e0bfff0b 	ldhu	r2,-4(fp)
  80ccd8:	1004c03a 	cmpne	r2,r2,zero
  80ccdc:	103ff01e 	bne	r2,zero,80cca0 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  80cce0:	e037883a 	mov	sp,fp
  80cce4:	df000017 	ldw	fp,0(sp)
  80cce8:	dec00104 	addi	sp,sp,4
  80ccec:	f800283a 	ret

0080ccf0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  80ccf0:	defffb04 	addi	sp,sp,-20
  80ccf4:	dfc00415 	stw	ra,16(sp)
  80ccf8:	df000315 	stw	fp,12(sp)
  80ccfc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80cd00:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cd04:	0005303a 	rdctl	r2,status
  80cd08:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cd0c:	e0fffe17 	ldw	r3,-8(fp)
  80cd10:	00bfff84 	movi	r2,-2
  80cd14:	1884703a 	and	r2,r3,r2
  80cd18:	1001703a 	wrctl	status,r2
  
  return context;
  80cd1c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  80cd20:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  80cd24:	d0a72a03 	ldbu	r2,-25432(gp)
  80cd28:	10803fcc 	andi	r2,r2,255
  80cd2c:	1004c03a 	cmpne	r2,r2,zero
  80cd30:	10001b1e 	bne	r2,zero,80cda0 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  80cd34:	d0a71c03 	ldbu	r2,-25488(gp)
  80cd38:	10803fcc 	andi	r2,r2,255
  80cd3c:	1004c03a 	cmpne	r2,r2,zero
  80cd40:	1000171e 	bne	r2,zero,80cda0 <OS_Sched+0xb0>
            OS_SchedNew();
  80cd44:	080cdc40 	call	80cdc4 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  80cd48:	d0a71e03 	ldbu	r2,-25480(gp)
  80cd4c:	d0e71e43 	ldbu	r3,-25479(gp)
  80cd50:	11003fcc 	andi	r4,r2,255
  80cd54:	18803fcc 	andi	r2,r3,255
  80cd58:	20801126 	beq	r4,r2,80cda0 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  80cd5c:	d0a71e03 	ldbu	r2,-25480(gp)
  80cd60:	10803fcc 	andi	r2,r2,255
  80cd64:	00c020f4 	movhi	r3,131
  80cd68:	18e79804 	addi	r3,r3,-24992
  80cd6c:	1085883a 	add	r2,r2,r2
  80cd70:	1085883a 	add	r2,r2,r2
  80cd74:	10c5883a 	add	r2,r2,r3
  80cd78:	10800017 	ldw	r2,0(r2)
  80cd7c:	d0a72615 	stw	r2,-25448(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  80cd80:	d0e72617 	ldw	r3,-25448(gp)
  80cd84:	18800e17 	ldw	r2,56(r3)
  80cd88:	10800044 	addi	r2,r2,1
  80cd8c:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  80cd90:	d0a72117 	ldw	r2,-25468(gp)
  80cd94:	10800044 	addi	r2,r2,1
  80cd98:	d0a72115 	stw	r2,-25468(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  80cd9c:	0819da80 	call	819da8 <OSCtxSw>
  80cda0:	e0bfff17 	ldw	r2,-4(fp)
  80cda4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cda8:	e0bffd17 	ldw	r2,-12(fp)
  80cdac:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  80cdb0:	e037883a 	mov	sp,fp
  80cdb4:	dfc00117 	ldw	ra,4(sp)
  80cdb8:	df000017 	ldw	fp,0(sp)
  80cdbc:	dec00204 	addi	sp,sp,8
  80cdc0:	f800283a 	ret

0080cdc4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  80cdc4:	defffe04 	addi	sp,sp,-8
  80cdc8:	df000115 	stw	fp,4(sp)
  80cdcc:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  80cdd0:	d0a72803 	ldbu	r2,-25440(gp)
  80cdd4:	10c03fcc 	andi	r3,r2,255
  80cdd8:	008020b4 	movhi	r2,130
  80cddc:	10accc04 	addi	r2,r2,-19664
  80cde0:	10c5883a 	add	r2,r2,r3
  80cde4:	10800003 	ldbu	r2,0(r2)
  80cde8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  80cdec:	e0bfff03 	ldbu	r2,-4(fp)
  80cdf0:	100490fa 	slli	r2,r2,3
  80cdf4:	1009883a 	mov	r4,r2
  80cdf8:	e0ffff03 	ldbu	r3,-4(fp)
  80cdfc:	d0a72844 	addi	r2,gp,-25439
  80ce00:	1885883a 	add	r2,r3,r2
  80ce04:	10800003 	ldbu	r2,0(r2)
  80ce08:	10c03fcc 	andi	r3,r2,255
  80ce0c:	008020b4 	movhi	r2,130
  80ce10:	10accc04 	addi	r2,r2,-19664
  80ce14:	10c5883a 	add	r2,r2,r3
  80ce18:	10800003 	ldbu	r2,0(r2)
  80ce1c:	2085883a 	add	r2,r4,r2
  80ce20:	d0a71e05 	stb	r2,-25480(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  80ce24:	e037883a 	mov	sp,fp
  80ce28:	df000017 	ldw	fp,0(sp)
  80ce2c:	dec00104 	addi	sp,sp,4
  80ce30:	f800283a 	ret

0080ce34 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  80ce34:	defffc04 	addi	sp,sp,-16
  80ce38:	df000315 	stw	fp,12(sp)
  80ce3c:	df000304 	addi	fp,sp,12
  80ce40:	e13ffe15 	stw	r4,-8(fp)
  80ce44:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  80ce48:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  80ce4c:	00000d06 	br	80ce84 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  80ce50:	e0bfff17 	ldw	r2,-4(fp)
  80ce54:	10c00003 	ldbu	r3,0(r2)
  80ce58:	e0bffe17 	ldw	r2,-8(fp)
  80ce5c:	10c00005 	stb	r3,0(r2)
  80ce60:	e0bffe17 	ldw	r2,-8(fp)
  80ce64:	10800044 	addi	r2,r2,1
  80ce68:	e0bffe15 	stw	r2,-8(fp)
  80ce6c:	e0bfff17 	ldw	r2,-4(fp)
  80ce70:	10800044 	addi	r2,r2,1
  80ce74:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80ce78:	e0bffd03 	ldbu	r2,-12(fp)
  80ce7c:	10800044 	addi	r2,r2,1
  80ce80:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80ce84:	e0bfff17 	ldw	r2,-4(fp)
  80ce88:	10800003 	ldbu	r2,0(r2)
  80ce8c:	10803fcc 	andi	r2,r2,255
  80ce90:	1004c03a 	cmpne	r2,r2,zero
  80ce94:	103fee1e 	bne	r2,zero,80ce50 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  80ce98:	e0bffe17 	ldw	r2,-8(fp)
  80ce9c:	10000005 	stb	zero,0(r2)
    return (len);
  80cea0:	e0bffd03 	ldbu	r2,-12(fp)
}
  80cea4:	e037883a 	mov	sp,fp
  80cea8:	df000017 	ldw	fp,0(sp)
  80ceac:	dec00104 	addi	sp,sp,4
  80ceb0:	f800283a 	ret

0080ceb4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  80ceb4:	defffd04 	addi	sp,sp,-12
  80ceb8:	df000215 	stw	fp,8(sp)
  80cebc:	df000204 	addi	fp,sp,8
  80cec0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  80cec4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  80cec8:	00000606 	br	80cee4 <OS_StrLen+0x30>
        psrc++;
  80cecc:	e0bfff17 	ldw	r2,-4(fp)
  80ced0:	10800044 	addi	r2,r2,1
  80ced4:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80ced8:	e0bffe03 	ldbu	r2,-8(fp)
  80cedc:	10800044 	addi	r2,r2,1
  80cee0:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80cee4:	e0bfff17 	ldw	r2,-4(fp)
  80cee8:	10800003 	ldbu	r2,0(r2)
  80ceec:	10803fcc 	andi	r2,r2,255
  80cef0:	1004c03a 	cmpne	r2,r2,zero
  80cef4:	103ff51e 	bne	r2,zero,80cecc <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  80cef8:	e0bffe03 	ldbu	r2,-8(fp)
}
  80cefc:	e037883a 	mov	sp,fp
  80cf00:	df000017 	ldw	fp,0(sp)
  80cf04:	dec00104 	addi	sp,sp,4
  80cf08:	f800283a 	ret

0080cf0c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  80cf0c:	defffa04 	addi	sp,sp,-24
  80cf10:	dfc00515 	stw	ra,20(sp)
  80cf14:	df000415 	stw	fp,16(sp)
  80cf18:	df000404 	addi	fp,sp,16
  80cf1c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80cf20:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cf24:	0005303a 	rdctl	r2,status
  80cf28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cf2c:	e0fffd17 	ldw	r3,-12(fp)
  80cf30:	00bfff84 	movi	r2,-2
  80cf34:	1884703a 	and	r2,r3,r2
  80cf38:	1001703a 	wrctl	status,r2
  
  return context;
  80cf3c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  80cf40:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  80cf44:	d0a71d17 	ldw	r2,-25484(gp)
  80cf48:	10800044 	addi	r2,r2,1
  80cf4c:	d0a71d15 	stw	r2,-25484(gp)
  80cf50:	e0bffe17 	ldw	r2,-8(fp)
  80cf54:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cf58:	e0bffc17 	ldw	r2,-16(fp)
  80cf5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  80cf60:	081a2540 	call	81a254 <OSTaskIdleHook>
    }
  80cf64:	003fef06 	br	80cf24 <OS_TaskIdle+0x18>

0080cf68 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  80cf68:	defffa04 	addi	sp,sp,-24
  80cf6c:	dfc00515 	stw	ra,20(sp)
  80cf70:	df000415 	stw	fp,16(sp)
  80cf74:	df000404 	addi	fp,sp,16
  80cf78:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80cf7c:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80cf80:	00000206 	br	80cf8c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  80cf84:	01003204 	movi	r4,200
  80cf88:	0812fe80 	call	812fe8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80cf8c:	d0a72e03 	ldbu	r2,-25416(gp)
  80cf90:	10803fcc 	andi	r2,r2,255
  80cf94:	1005003a 	cmpeq	r2,r2,zero
  80cf98:	103ffa1e 	bne	r2,zero,80cf84 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  80cf9c:	d1272217 	ldw	r4,-25464(gp)
  80cfa0:	01401904 	movi	r5,100
  80cfa4:	0809b0c0 	call	809b0c <__udivsi3>
  80cfa8:	d0a72215 	stw	r2,-25464(gp)
    if (OSIdleCtrMax == 0L) {
  80cfac:	d0a72217 	ldw	r2,-25464(gp)
  80cfb0:	1004c03a 	cmpne	r2,r2,zero
  80cfb4:	1000031e 	bne	r2,zero,80cfc4 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  80cfb8:	d0272405 	stb	zero,-25456(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  80cfbc:	01003fc4 	movi	r4,255
  80cfc0:	0812bfc0 	call	812bfc <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cfc4:	0005303a 	rdctl	r2,status
  80cfc8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cfcc:	e0fffd17 	ldw	r3,-12(fp)
  80cfd0:	00bfff84 	movi	r2,-2
  80cfd4:	1884703a 	and	r2,r3,r2
  80cfd8:	1001703a 	wrctl	status,r2
  
  return context;
  80cfdc:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  80cfe0:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  80cfe4:	d0a71d17 	ldw	r2,-25484(gp)
  80cfe8:	d0a72f15 	stw	r2,-25412(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  80cfec:	d0271d15 	stw	zero,-25484(gp)
  80cff0:	e0bffe17 	ldw	r2,-8(fp)
  80cff4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cff8:	e0bffc17 	ldw	r2,-16(fp)
  80cffc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  80d000:	d1272f17 	ldw	r4,-25412(gp)
  80d004:	d1672217 	ldw	r5,-25464(gp)
  80d008:	0809b0c0 	call	809b0c <__udivsi3>
  80d00c:	1007883a 	mov	r3,r2
  80d010:	00801904 	movi	r2,100
  80d014:	10c5c83a 	sub	r2,r2,r3
  80d018:	d0a72405 	stb	r2,-25456(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  80d01c:	081a1e40 	call	81a1e4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  80d020:	080d0300 	call	80d030 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  80d024:	01001904 	movi	r4,100
  80d028:	0812fe80 	call	812fe8 <OSTimeDly>
    }
  80d02c:	003fe506 	br	80cfc4 <OS_TaskStat+0x5c>

0080d030 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  80d030:	defffa04 	addi	sp,sp,-24
  80d034:	dfc00515 	stw	ra,20(sp)
  80d038:	df000415 	stw	fp,16(sp)
  80d03c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80d040:	e03ffc05 	stb	zero,-16(fp)
  80d044:	00002406 	br	80d0d8 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  80d048:	e13ffc03 	ldbu	r4,-16(fp)
  80d04c:	e17ffe04 	addi	r5,fp,-8
  80d050:	0812a000 	call	812a00 <OSTaskStkChk>
  80d054:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  80d058:	e0bffc43 	ldbu	r2,-15(fp)
  80d05c:	1004c03a 	cmpne	r2,r2,zero
  80d060:	10001a1e 	bne	r2,zero,80d0cc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  80d064:	e0bffc03 	ldbu	r2,-16(fp)
  80d068:	00c020f4 	movhi	r3,131
  80d06c:	18e79804 	addi	r3,r3,-24992
  80d070:	1085883a 	add	r2,r2,r2
  80d074:	1085883a 	add	r2,r2,r2
  80d078:	10c5883a 	add	r2,r2,r3
  80d07c:	10800017 	ldw	r2,0(r2)
  80d080:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  80d084:	e0bffd17 	ldw	r2,-12(fp)
  80d088:	1005003a 	cmpeq	r2,r2,zero
  80d08c:	10000f1e 	bne	r2,zero,80d0cc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  80d090:	e0bffd17 	ldw	r2,-12(fp)
  80d094:	10800060 	cmpeqi	r2,r2,1
  80d098:	10000c1e 	bne	r2,zero,80d0cc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  80d09c:	e0bffd17 	ldw	r2,-12(fp)
  80d0a0:	10c00217 	ldw	r3,8(r2)
  80d0a4:	e0bffd17 	ldw	r2,-12(fp)
  80d0a8:	10800317 	ldw	r2,12(r2)
  80d0ac:	1085883a 	add	r2,r2,r2
  80d0b0:	1085883a 	add	r2,r2,r2
  80d0b4:	1887883a 	add	r3,r3,r2
  80d0b8:	e0bffd17 	ldw	r2,-12(fp)
  80d0bc:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  80d0c0:	e0ffff17 	ldw	r3,-4(fp)
  80d0c4:	e0bffd17 	ldw	r2,-12(fp)
  80d0c8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80d0cc:	e0bffc03 	ldbu	r2,-16(fp)
  80d0d0:	10800044 	addi	r2,r2,1
  80d0d4:	e0bffc05 	stb	r2,-16(fp)
  80d0d8:	e0bffc03 	ldbu	r2,-16(fp)
  80d0dc:	10800570 	cmpltui	r2,r2,21
  80d0e0:	103fd91e 	bne	r2,zero,80d048 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  80d0e4:	e037883a 	mov	sp,fp
  80d0e8:	dfc00117 	ldw	ra,4(sp)
  80d0ec:	df000017 	ldw	fp,0(sp)
  80d0f0:	dec00204 	addi	sp,sp,8
  80d0f4:	f800283a 	ret

0080d0f8 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  80d0f8:	defff104 	addi	sp,sp,-60
  80d0fc:	dfc00e15 	stw	ra,56(sp)
  80d100:	df000d15 	stw	fp,52(sp)
  80d104:	df000d04 	addi	fp,sp,52
  80d108:	e17ffb15 	stw	r5,-20(fp)
  80d10c:	e1bffc15 	stw	r6,-16(fp)
  80d110:	e0800417 	ldw	r2,16(fp)
  80d114:	e13ffa05 	stb	r4,-24(fp)
  80d118:	e1fffd0d 	sth	r7,-12(fp)
  80d11c:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80d120:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d124:	0005303a 	rdctl	r2,status
  80d128:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d12c:	e0fff717 	ldw	r3,-36(fp)
  80d130:	00bfff84 	movi	r2,-2
  80d134:	1884703a 	and	r2,r3,r2
  80d138:	1001703a 	wrctl	status,r2
  
  return context;
  80d13c:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  80d140:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  80d144:	d0a72317 	ldw	r2,-25460(gp)
  80d148:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  80d14c:	e0bff917 	ldw	r2,-28(fp)
  80d150:	1005003a 	cmpeq	r2,r2,zero
  80d154:	1000941e 	bne	r2,zero,80d3a8 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  80d158:	e0bff917 	ldw	r2,-28(fp)
  80d15c:	10800517 	ldw	r2,20(r2)
  80d160:	d0a72315 	stw	r2,-25460(gp)
  80d164:	e0bff817 	ldw	r2,-32(fp)
  80d168:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d16c:	e0bff617 	ldw	r2,-40(fp)
  80d170:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  80d174:	e0fff917 	ldw	r3,-28(fp)
  80d178:	e0bffb17 	ldw	r2,-20(fp)
  80d17c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  80d180:	e0fff917 	ldw	r3,-28(fp)
  80d184:	e0bffa03 	ldbu	r2,-24(fp)
  80d188:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  80d18c:	e0bff917 	ldw	r2,-28(fp)
  80d190:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  80d194:	e0bff917 	ldw	r2,-28(fp)
  80d198:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  80d19c:	e0bff917 	ldw	r2,-28(fp)
  80d1a0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  80d1a4:	e0fff917 	ldw	r3,-28(fp)
  80d1a8:	e0800317 	ldw	r2,12(fp)
  80d1ac:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  80d1b0:	e0fff917 	ldw	r3,-28(fp)
  80d1b4:	e0800217 	ldw	r2,8(fp)
  80d1b8:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  80d1bc:	e0fff917 	ldw	r3,-28(fp)
  80d1c0:	e0bffc17 	ldw	r2,-16(fp)
  80d1c4:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  80d1c8:	e0fff917 	ldw	r3,-28(fp)
  80d1cc:	e0bffe0b 	ldhu	r2,-8(fp)
  80d1d0:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  80d1d4:	e0fff917 	ldw	r3,-28(fp)
  80d1d8:	e0bffd0b 	ldhu	r2,-12(fp)
  80d1dc:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  80d1e0:	e0bff917 	ldw	r2,-28(fp)
  80d1e4:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  80d1e8:	e0bffa03 	ldbu	r2,-24(fp)
  80d1ec:	1004d0fa 	srli	r2,r2,3
  80d1f0:	1007883a 	mov	r3,r2
  80d1f4:	e0bff917 	ldw	r2,-28(fp)
  80d1f8:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  80d1fc:	e0bffa03 	ldbu	r2,-24(fp)
  80d200:	108001cc 	andi	r2,r2,7
  80d204:	1007883a 	mov	r3,r2
  80d208:	e0bff917 	ldw	r2,-28(fp)
  80d20c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  80d210:	e0bff917 	ldw	r2,-28(fp)
  80d214:	10800d03 	ldbu	r2,52(r2)
  80d218:	10c03fcc 	andi	r3,r2,255
  80d21c:	00800044 	movi	r2,1
  80d220:	10c4983a 	sll	r2,r2,r3
  80d224:	1007883a 	mov	r3,r2
  80d228:	e0bff917 	ldw	r2,-28(fp)
  80d22c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  80d230:	e0bff917 	ldw	r2,-28(fp)
  80d234:	10800cc3 	ldbu	r2,51(r2)
  80d238:	10c03fcc 	andi	r3,r2,255
  80d23c:	00800044 	movi	r2,1
  80d240:	10c4983a 	sll	r2,r2,r3
  80d244:	1007883a 	mov	r3,r2
  80d248:	e0bff917 	ldw	r2,-28(fp)
  80d24c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  80d250:	e0bff917 	ldw	r2,-28(fp)
  80d254:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  80d258:	e0bff917 	ldw	r2,-28(fp)
  80d25c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  80d260:	e0bff917 	ldw	r2,-28(fp)
  80d264:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  80d268:	e0bff917 	ldw	r2,-28(fp)
  80d26c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  80d270:	e0bff917 	ldw	r2,-28(fp)
  80d274:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  80d278:	e0bff917 	ldw	r2,-28(fp)
  80d27c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  80d280:	e0bff917 	ldw	r2,-28(fp)
  80d284:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  80d288:	e0bff917 	ldw	r2,-28(fp)
  80d28c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  80d290:	e0bff917 	ldw	r2,-28(fp)
  80d294:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  80d298:	e0fff917 	ldw	r3,-28(fp)
  80d29c:	00800fc4 	movi	r2,63
  80d2a0:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80d2a4:	e0bff917 	ldw	r2,-28(fp)
  80d2a8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  80d2ac:	e13ff917 	ldw	r4,-28(fp)
  80d2b0:	081a2700 	call	81a270 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  80d2b4:	e13ff917 	ldw	r4,-28(fp)
  80d2b8:	081a1880 	call	81a188 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d2bc:	0005303a 	rdctl	r2,status
  80d2c0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d2c4:	e0fff517 	ldw	r3,-44(fp)
  80d2c8:	00bfff84 	movi	r2,-2
  80d2cc:	1884703a 	and	r2,r3,r2
  80d2d0:	1001703a 	wrctl	status,r2
  
  return context;
  80d2d4:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  80d2d8:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  80d2dc:	e0bffa03 	ldbu	r2,-24(fp)
  80d2e0:	00c020f4 	movhi	r3,131
  80d2e4:	18e79804 	addi	r3,r3,-24992
  80d2e8:	1085883a 	add	r2,r2,r2
  80d2ec:	1085883a 	add	r2,r2,r2
  80d2f0:	10c7883a 	add	r3,r2,r3
  80d2f4:	e0bff917 	ldw	r2,-28(fp)
  80d2f8:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  80d2fc:	d0e71f17 	ldw	r3,-25476(gp)
  80d300:	e0bff917 	ldw	r2,-28(fp)
  80d304:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  80d308:	e0bff917 	ldw	r2,-28(fp)
  80d30c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  80d310:	d0a71f17 	ldw	r2,-25476(gp)
  80d314:	1005003a 	cmpeq	r2,r2,zero
  80d318:	1000031e 	bne	r2,zero,80d328 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  80d31c:	d0e71f17 	ldw	r3,-25476(gp)
  80d320:	e0bff917 	ldw	r2,-28(fp)
  80d324:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  80d328:	e0bff917 	ldw	r2,-28(fp)
  80d32c:	d0a71f15 	stw	r2,-25476(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  80d330:	e0bff917 	ldw	r2,-28(fp)
  80d334:	10c00d83 	ldbu	r3,54(r2)
  80d338:	d0a72803 	ldbu	r2,-25440(gp)
  80d33c:	1884b03a 	or	r2,r3,r2
  80d340:	d0a72805 	stb	r2,-25440(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80d344:	e0bff917 	ldw	r2,-28(fp)
  80d348:	10800d03 	ldbu	r2,52(r2)
  80d34c:	11003fcc 	andi	r4,r2,255
  80d350:	e0bff917 	ldw	r2,-28(fp)
  80d354:	10800d03 	ldbu	r2,52(r2)
  80d358:	10c03fcc 	andi	r3,r2,255
  80d35c:	d0a72844 	addi	r2,gp,-25439
  80d360:	1885883a 	add	r2,r3,r2
  80d364:	10c00003 	ldbu	r3,0(r2)
  80d368:	e0bff917 	ldw	r2,-28(fp)
  80d36c:	10800d43 	ldbu	r2,53(r2)
  80d370:	1884b03a 	or	r2,r3,r2
  80d374:	1007883a 	mov	r3,r2
  80d378:	d0a72844 	addi	r2,gp,-25439
  80d37c:	2085883a 	add	r2,r4,r2
  80d380:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  80d384:	d0a72443 	ldbu	r2,-25455(gp)
  80d388:	10800044 	addi	r2,r2,1
  80d38c:	d0a72445 	stb	r2,-25455(gp)
  80d390:	e0bff817 	ldw	r2,-32(fp)
  80d394:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d398:	e0bff417 	ldw	r2,-48(fp)
  80d39c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  80d3a0:	e03fff15 	stw	zero,-4(fp)
  80d3a4:	00000606 	br	80d3c0 <OS_TCBInit+0x2c8>
  80d3a8:	e0bff817 	ldw	r2,-32(fp)
  80d3ac:	e0bff315 	stw	r2,-52(fp)
  80d3b0:	e0bff317 	ldw	r2,-52(fp)
  80d3b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  80d3b8:	00801084 	movi	r2,66
  80d3bc:	e0bfff15 	stw	r2,-4(fp)
  80d3c0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d3c4:	e037883a 	mov	sp,fp
  80d3c8:	dfc00117 	ldw	ra,4(sp)
  80d3cc:	df000017 	ldw	fp,0(sp)
  80d3d0:	dec00204 	addi	sp,sp,8
  80d3d4:	f800283a 	ret

0080d3d8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  80d3d8:	defffe04 	addi	sp,sp,-8
  80d3dc:	df000115 	stw	fp,4(sp)
  80d3e0:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  80d3e4:	d0a00f04 	addi	r2,gp,-32708
  80d3e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  80d3ec:	d0a01004 	addi	r2,gp,-32704
  80d3f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  80d3f4:	d0a01184 	addi	r2,gp,-32698
  80d3f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  80d3fc:	d0a01204 	addi	r2,gp,-32696
  80d400:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  80d404:	d0a01104 	addi	r2,gp,-32700
  80d408:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  80d40c:	d0a01284 	addi	r2,gp,-32694
  80d410:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  80d414:	d0a01304 	addi	r2,gp,-32692
  80d418:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  80d41c:	d0a01384 	addi	r2,gp,-32690
  80d420:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  80d424:	d0a01404 	addi	r2,gp,-32688
  80d428:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  80d42c:	d0a01484 	addi	r2,gp,-32686
  80d430:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  80d434:	d0a01504 	addi	r2,gp,-32684
  80d438:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  80d43c:	d0a01584 	addi	r2,gp,-32682
  80d440:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  80d444:	d0a01604 	addi	r2,gp,-32680
  80d448:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  80d44c:	d0a01684 	addi	r2,gp,-32678
  80d450:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  80d454:	d0a01704 	addi	r2,gp,-32676
  80d458:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  80d45c:	d0a01784 	addi	r2,gp,-32674
  80d460:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  80d464:	d0a01804 	addi	r2,gp,-32672
  80d468:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  80d46c:	d0a01884 	addi	r2,gp,-32670
  80d470:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  80d474:	d0a01904 	addi	r2,gp,-32668
  80d478:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  80d47c:	d0a01984 	addi	r2,gp,-32666
  80d480:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  80d484:	d0a01a04 	addi	r2,gp,-32664
  80d488:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  80d48c:	d0a01a84 	addi	r2,gp,-32662
  80d490:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  80d494:	d0a01b04 	addi	r2,gp,-32660
  80d498:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  80d49c:	d0a01b84 	addi	r2,gp,-32658
  80d4a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  80d4a4:	d0a01c04 	addi	r2,gp,-32656
  80d4a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  80d4ac:	d0a01c84 	addi	r2,gp,-32654
  80d4b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  80d4b4:	d0a01d04 	addi	r2,gp,-32652
  80d4b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  80d4bc:	d0a01d84 	addi	r2,gp,-32650
  80d4c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  80d4c4:	d0a01e04 	addi	r2,gp,-32648
  80d4c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  80d4cc:	d0a01e84 	addi	r2,gp,-32646
  80d4d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  80d4d4:	d0a01f04 	addi	r2,gp,-32644
  80d4d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  80d4dc:	d0a01f84 	addi	r2,gp,-32642
  80d4e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  80d4e4:	d0a02004 	addi	r2,gp,-32640
  80d4e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  80d4ec:	d0a02084 	addi	r2,gp,-32638
  80d4f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  80d4f4:	d0a02104 	addi	r2,gp,-32636
  80d4f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  80d4fc:	d0a02184 	addi	r2,gp,-32634
  80d500:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  80d504:	d0a02204 	addi	r2,gp,-32632
  80d508:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  80d50c:	d0a02284 	addi	r2,gp,-32630
  80d510:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  80d514:	d0a02304 	addi	r2,gp,-32628
  80d518:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  80d51c:	d0a02384 	addi	r2,gp,-32626
  80d520:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  80d524:	d0a02404 	addi	r2,gp,-32624
  80d528:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  80d52c:	d0a02484 	addi	r2,gp,-32622
  80d530:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  80d534:	d0a02504 	addi	r2,gp,-32620
  80d538:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  80d53c:	d0a02584 	addi	r2,gp,-32618
  80d540:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  80d544:	d0a02604 	addi	r2,gp,-32616
  80d548:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  80d54c:	d0a02b04 	addi	r2,gp,-32596
  80d550:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  80d554:	e037883a 	mov	sp,fp
  80d558:	df000017 	ldw	fp,0(sp)
  80d55c:	dec00104 	addi	sp,sp,4
  80d560:	f800283a 	ret

0080d564 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  80d564:	defff104 	addi	sp,sp,-60
  80d568:	df000e15 	stw	fp,56(sp)
  80d56c:	df000e04 	addi	fp,sp,56
  80d570:	e13ffa15 	stw	r4,-24(fp)
  80d574:	e1fffd15 	stw	r7,-12(fp)
  80d578:	e17ffb0d 	sth	r5,-20(fp)
  80d57c:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80d580:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80d584:	e0bffd17 	ldw	r2,-12(fp)
  80d588:	1004c03a 	cmpne	r2,r2,zero
  80d58c:	1000021e 	bne	r2,zero,80d598 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  80d590:	e03fff15 	stw	zero,-4(fp)
  80d594:	0000bb06 	br	80d884 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80d598:	e0bffa17 	ldw	r2,-24(fp)
  80d59c:	1004c03a 	cmpne	r2,r2,zero
  80d5a0:	1000051e 	bne	r2,zero,80d5b8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80d5a4:	e0fffd17 	ldw	r3,-12(fp)
  80d5a8:	00801b84 	movi	r2,110
  80d5ac:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80d5b0:	e03fff15 	stw	zero,-4(fp)
  80d5b4:	0000b306 	br	80d884 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80d5b8:	e0bffa17 	ldw	r2,-24(fp)
  80d5bc:	10800003 	ldbu	r2,0(r2)
  80d5c0:	10803fcc 	andi	r2,r2,255
  80d5c4:	10800160 	cmpeqi	r2,r2,5
  80d5c8:	1000051e 	bne	r2,zero,80d5e0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80d5cc:	e0fffd17 	ldw	r3,-12(fp)
  80d5d0:	00800044 	movi	r2,1
  80d5d4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80d5d8:	e03fff15 	stw	zero,-4(fp)
  80d5dc:	0000a906 	br	80d884 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80d5e0:	e0fffc03 	ldbu	r3,-16(fp)
  80d5e4:	00bfe004 	movi	r2,-128
  80d5e8:	1884703a 	and	r2,r3,r2
  80d5ec:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  80d5f0:	e0bff943 	ldbu	r2,-27(fp)
  80d5f4:	1005003a 	cmpeq	r2,r2,zero
  80d5f8:	1000061e 	bne	r2,zero,80d614 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  80d5fc:	e0bffc03 	ldbu	r2,-16(fp)
  80d600:	10801fcc 	andi	r2,r2,127
  80d604:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  80d608:	00800044 	movi	r2,1
  80d60c:	e0bff905 	stb	r2,-28(fp)
  80d610:	00000106 	br	80d618 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  80d614:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  80d618:	e0bffd17 	ldw	r2,-12(fp)
  80d61c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d620:	0005303a 	rdctl	r2,status
  80d624:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d628:	e0fff717 	ldw	r3,-36(fp)
  80d62c:	00bfff84 	movi	r2,-2
  80d630:	1884703a 	and	r2,r3,r2
  80d634:	1001703a 	wrctl	status,r2
  
  return context;
  80d638:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80d63c:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  80d640:	e0bffc03 	ldbu	r2,-16(fp)
  80d644:	e0bffe15 	stw	r2,-8(fp)
  80d648:	e0fffe17 	ldw	r3,-8(fp)
  80d64c:	18800060 	cmpeqi	r2,r3,1
  80d650:	1000651e 	bne	r2,zero,80d7e8 <OSFlagAccept+0x284>
  80d654:	e0fffe17 	ldw	r3,-8(fp)
  80d658:	18800088 	cmpgei	r2,r3,2
  80d65c:	1000041e 	bne	r2,zero,80d670 <OSFlagAccept+0x10c>
  80d660:	e0fffe17 	ldw	r3,-8(fp)
  80d664:	1805003a 	cmpeq	r2,r3,zero
  80d668:	1000421e 	bne	r2,zero,80d774 <OSFlagAccept+0x210>
  80d66c:	00007b06 	br	80d85c <OSFlagAccept+0x2f8>
  80d670:	e0fffe17 	ldw	r3,-8(fp)
  80d674:	188000a0 	cmpeqi	r2,r3,2
  80d678:	1000041e 	bne	r2,zero,80d68c <OSFlagAccept+0x128>
  80d67c:	e0fffe17 	ldw	r3,-8(fp)
  80d680:	188000e0 	cmpeqi	r2,r3,3
  80d684:	10001e1e 	bne	r2,zero,80d700 <OSFlagAccept+0x19c>
  80d688:	00007406 	br	80d85c <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80d68c:	e0bffa17 	ldw	r2,-24(fp)
  80d690:	10c0020b 	ldhu	r3,8(r2)
  80d694:	e0bffb0b 	ldhu	r2,-20(fp)
  80d698:	1884703a 	and	r2,r3,r2
  80d69c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80d6a0:	e0fff98b 	ldhu	r3,-26(fp)
  80d6a4:	e0bffb0b 	ldhu	r2,-20(fp)
  80d6a8:	18800d1e 	bne	r3,r2,80d6e0 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80d6ac:	e0bff903 	ldbu	r2,-28(fp)
  80d6b0:	10800058 	cmpnei	r2,r2,1
  80d6b4:	10000d1e 	bne	r2,zero,80d6ec <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80d6b8:	e0bffa17 	ldw	r2,-24(fp)
  80d6bc:	1080020b 	ldhu	r2,8(r2)
  80d6c0:	1007883a 	mov	r3,r2
  80d6c4:	e0bff98b 	ldhu	r2,-26(fp)
  80d6c8:	0084303a 	nor	r2,zero,r2
  80d6cc:	1884703a 	and	r2,r3,r2
  80d6d0:	1007883a 	mov	r3,r2
  80d6d4:	e0bffa17 	ldw	r2,-24(fp)
  80d6d8:	10c0020d 	sth	r3,8(r2)
  80d6dc:	00000306 	br	80d6ec <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80d6e0:	e0fffd17 	ldw	r3,-12(fp)
  80d6e4:	00801c04 	movi	r2,112
  80d6e8:	18800005 	stb	r2,0(r3)
  80d6ec:	e0bff817 	ldw	r2,-32(fp)
  80d6f0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d6f4:	e0bff617 	ldw	r2,-40(fp)
  80d6f8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80d6fc:	00005f06 	br	80d87c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80d700:	e0bffa17 	ldw	r2,-24(fp)
  80d704:	10c0020b 	ldhu	r3,8(r2)
  80d708:	e0bffb0b 	ldhu	r2,-20(fp)
  80d70c:	1884703a 	and	r2,r3,r2
  80d710:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80d714:	e0bff98b 	ldhu	r2,-26(fp)
  80d718:	1005003a 	cmpeq	r2,r2,zero
  80d71c:	10000d1e 	bne	r2,zero,80d754 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80d720:	e0bff903 	ldbu	r2,-28(fp)
  80d724:	10800058 	cmpnei	r2,r2,1
  80d728:	10000d1e 	bne	r2,zero,80d760 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80d72c:	e0bffa17 	ldw	r2,-24(fp)
  80d730:	1080020b 	ldhu	r2,8(r2)
  80d734:	1007883a 	mov	r3,r2
  80d738:	e0bff98b 	ldhu	r2,-26(fp)
  80d73c:	0084303a 	nor	r2,zero,r2
  80d740:	1884703a 	and	r2,r3,r2
  80d744:	1007883a 	mov	r3,r2
  80d748:	e0bffa17 	ldw	r2,-24(fp)
  80d74c:	10c0020d 	sth	r3,8(r2)
  80d750:	00000306 	br	80d760 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80d754:	e0fffd17 	ldw	r3,-12(fp)
  80d758:	00801c04 	movi	r2,112
  80d75c:	18800005 	stb	r2,0(r3)
  80d760:	e0bff817 	ldw	r2,-32(fp)
  80d764:	e0bff515 	stw	r2,-44(fp)
  80d768:	e0bff517 	ldw	r2,-44(fp)
  80d76c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80d770:	00004206 	br	80d87c <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80d774:	e0bffa17 	ldw	r2,-24(fp)
  80d778:	1080020b 	ldhu	r2,8(r2)
  80d77c:	0084303a 	nor	r2,zero,r2
  80d780:	1007883a 	mov	r3,r2
  80d784:	e0bffb0b 	ldhu	r2,-20(fp)
  80d788:	1884703a 	and	r2,r3,r2
  80d78c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80d790:	e0fff98b 	ldhu	r3,-26(fp)
  80d794:	e0bffb0b 	ldhu	r2,-20(fp)
  80d798:	18800b1e 	bne	r3,r2,80d7c8 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80d79c:	e0bff903 	ldbu	r2,-28(fp)
  80d7a0:	10800058 	cmpnei	r2,r2,1
  80d7a4:	10000b1e 	bne	r2,zero,80d7d4 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80d7a8:	e0bffa17 	ldw	r2,-24(fp)
  80d7ac:	10c0020b 	ldhu	r3,8(r2)
  80d7b0:	e0bff98b 	ldhu	r2,-26(fp)
  80d7b4:	1884b03a 	or	r2,r3,r2
  80d7b8:	1007883a 	mov	r3,r2
  80d7bc:	e0bffa17 	ldw	r2,-24(fp)
  80d7c0:	10c0020d 	sth	r3,8(r2)
  80d7c4:	00000306 	br	80d7d4 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80d7c8:	e0fffd17 	ldw	r3,-12(fp)
  80d7cc:	00801c04 	movi	r2,112
  80d7d0:	18800005 	stb	r2,0(r3)
  80d7d4:	e0bff817 	ldw	r2,-32(fp)
  80d7d8:	e0bff415 	stw	r2,-48(fp)
  80d7dc:	e0bff417 	ldw	r2,-48(fp)
  80d7e0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80d7e4:	00002506 	br	80d87c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80d7e8:	e0bffa17 	ldw	r2,-24(fp)
  80d7ec:	1080020b 	ldhu	r2,8(r2)
  80d7f0:	0084303a 	nor	r2,zero,r2
  80d7f4:	1007883a 	mov	r3,r2
  80d7f8:	e0bffb0b 	ldhu	r2,-20(fp)
  80d7fc:	1884703a 	and	r2,r3,r2
  80d800:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80d804:	e0bff98b 	ldhu	r2,-26(fp)
  80d808:	1005003a 	cmpeq	r2,r2,zero
  80d80c:	10000b1e 	bne	r2,zero,80d83c <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80d810:	e0bff903 	ldbu	r2,-28(fp)
  80d814:	10800058 	cmpnei	r2,r2,1
  80d818:	10000b1e 	bne	r2,zero,80d848 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80d81c:	e0bffa17 	ldw	r2,-24(fp)
  80d820:	10c0020b 	ldhu	r3,8(r2)
  80d824:	e0bff98b 	ldhu	r2,-26(fp)
  80d828:	1884b03a 	or	r2,r3,r2
  80d82c:	1007883a 	mov	r3,r2
  80d830:	e0bffa17 	ldw	r2,-24(fp)
  80d834:	10c0020d 	sth	r3,8(r2)
  80d838:	00000306 	br	80d848 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80d83c:	e0fffd17 	ldw	r3,-12(fp)
  80d840:	00801c04 	movi	r2,112
  80d844:	18800005 	stb	r2,0(r3)
  80d848:	e0bff817 	ldw	r2,-32(fp)
  80d84c:	e0bff315 	stw	r2,-52(fp)
  80d850:	e0bff317 	ldw	r2,-52(fp)
  80d854:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80d858:	00000806 	br	80d87c <OSFlagAccept+0x318>
  80d85c:	e0bff817 	ldw	r2,-32(fp)
  80d860:	e0bff215 	stw	r2,-56(fp)
  80d864:	e0bff217 	ldw	r2,-56(fp)
  80d868:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80d86c:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  80d870:	e0fffd17 	ldw	r3,-12(fp)
  80d874:	00801bc4 	movi	r2,111
  80d878:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  80d87c:	e0bff98b 	ldhu	r2,-26(fp)
  80d880:	e0bfff15 	stw	r2,-4(fp)
  80d884:	e0bfff17 	ldw	r2,-4(fp)
}
  80d888:	e037883a 	mov	sp,fp
  80d88c:	df000017 	ldw	fp,0(sp)
  80d890:	dec00104 	addi	sp,sp,4
  80d894:	f800283a 	ret

0080d898 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  80d898:	defff704 	addi	sp,sp,-36
  80d89c:	df000815 	stw	fp,32(sp)
  80d8a0:	df000804 	addi	fp,sp,32
  80d8a4:	e17ffe15 	stw	r5,-8(fp)
  80d8a8:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  80d8ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  80d8b0:	e0bffe17 	ldw	r2,-8(fp)
  80d8b4:	1004c03a 	cmpne	r2,r2,zero
  80d8b8:	1000021e 	bne	r2,zero,80d8c4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  80d8bc:	e03fff15 	stw	zero,-4(fp)
  80d8c0:	00003f06 	br	80d9c0 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  80d8c4:	008020b4 	movhi	r2,130
  80d8c8:	10bb0404 	addi	r2,r2,-5104
  80d8cc:	10800003 	ldbu	r2,0(r2)
  80d8d0:	10803fcc 	andi	r2,r2,255
  80d8d4:	1005003a 	cmpeq	r2,r2,zero
  80d8d8:	1000051e 	bne	r2,zero,80d8f0 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  80d8dc:	e0fffe17 	ldw	r3,-8(fp)
  80d8e0:	00800404 	movi	r2,16
  80d8e4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  80d8e8:	e03fff15 	stw	zero,-4(fp)
  80d8ec:	00003406 	br	80d9c0 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d8f0:	0005303a 	rdctl	r2,status
  80d8f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d8f8:	e0fffa17 	ldw	r3,-24(fp)
  80d8fc:	00bfff84 	movi	r2,-2
  80d900:	1884703a 	and	r2,r3,r2
  80d904:	1001703a 	wrctl	status,r2
  
  return context;
  80d908:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80d90c:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  80d910:	008020b4 	movhi	r2,130
  80d914:	10bb0704 	addi	r2,r2,-5092
  80d918:	10800017 	ldw	r2,0(r2)
  80d91c:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  80d920:	e0bffc17 	ldw	r2,-16(fp)
  80d924:	1005003a 	cmpeq	r2,r2,zero
  80d928:	10001c1e 	bne	r2,zero,80d99c <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  80d92c:	008020b4 	movhi	r2,130
  80d930:	10bb0704 	addi	r2,r2,-5092
  80d934:	10800017 	ldw	r2,0(r2)
  80d938:	10800117 	ldw	r2,4(r2)
  80d93c:	1007883a 	mov	r3,r2
  80d940:	008020b4 	movhi	r2,130
  80d944:	10bb0704 	addi	r2,r2,-5092
  80d948:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  80d94c:	e0fffc17 	ldw	r3,-16(fp)
  80d950:	00800144 	movi	r2,5
  80d954:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  80d958:	e0fffc17 	ldw	r3,-16(fp)
  80d95c:	e0bffd0b 	ldhu	r2,-12(fp)
  80d960:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  80d964:	e0bffc17 	ldw	r2,-16(fp)
  80d968:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  80d96c:	e0fffc17 	ldw	r3,-16(fp)
  80d970:	00800fc4 	movi	r2,63
  80d974:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80d978:	e0bffc17 	ldw	r2,-16(fp)
  80d97c:	100002c5 	stb	zero,11(r2)
  80d980:	e0bffb17 	ldw	r2,-20(fp)
  80d984:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d988:	e0bff917 	ldw	r2,-28(fp)
  80d98c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  80d990:	e0bffe17 	ldw	r2,-8(fp)
  80d994:	10000005 	stb	zero,0(r2)
  80d998:	00000706 	br	80d9b8 <OSFlagCreate+0x120>
  80d99c:	e0bffb17 	ldw	r2,-20(fp)
  80d9a0:	e0bff815 	stw	r2,-32(fp)
  80d9a4:	e0bff817 	ldw	r2,-32(fp)
  80d9a8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  80d9ac:	e0fffe17 	ldw	r3,-8(fp)
  80d9b0:	00801c84 	movi	r2,114
  80d9b4:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  80d9b8:	e0bffc17 	ldw	r2,-16(fp)
  80d9bc:	e0bfff15 	stw	r2,-4(fp)
  80d9c0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d9c4:	e037883a 	mov	sp,fp
  80d9c8:	df000017 	ldw	fp,0(sp)
  80d9cc:	dec00104 	addi	sp,sp,4
  80d9d0:	f800283a 	ret

0080d9d4 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  80d9d4:	defff004 	addi	sp,sp,-64
  80d9d8:	dfc00f15 	stw	ra,60(sp)
  80d9dc:	df000e15 	stw	fp,56(sp)
  80d9e0:	df000e04 	addi	fp,sp,56
  80d9e4:	e13ffb15 	stw	r4,-20(fp)
  80d9e8:	e1bffd15 	stw	r6,-12(fp)
  80d9ec:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80d9f0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80d9f4:	e0bffd17 	ldw	r2,-12(fp)
  80d9f8:	1004c03a 	cmpne	r2,r2,zero
  80d9fc:	1000031e 	bne	r2,zero,80da0c <OSFlagDel+0x38>
        return (pgrp);
  80da00:	e0bffb17 	ldw	r2,-20(fp)
  80da04:	e0bfff15 	stw	r2,-4(fp)
  80da08:	00009606 	br	80dc64 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80da0c:	e0bffb17 	ldw	r2,-20(fp)
  80da10:	1004c03a 	cmpne	r2,r2,zero
  80da14:	1000061e 	bne	r2,zero,80da30 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80da18:	e0fffd17 	ldw	r3,-12(fp)
  80da1c:	00801b84 	movi	r2,110
  80da20:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80da24:	e0fffb17 	ldw	r3,-20(fp)
  80da28:	e0ffff15 	stw	r3,-4(fp)
  80da2c:	00008d06 	br	80dc64 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80da30:	008020b4 	movhi	r2,130
  80da34:	10bb0404 	addi	r2,r2,-5104
  80da38:	10800003 	ldbu	r2,0(r2)
  80da3c:	10803fcc 	andi	r2,r2,255
  80da40:	1005003a 	cmpeq	r2,r2,zero
  80da44:	1000061e 	bne	r2,zero,80da60 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80da48:	e0fffd17 	ldw	r3,-12(fp)
  80da4c:	008003c4 	movi	r2,15
  80da50:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80da54:	e0bffb17 	ldw	r2,-20(fp)
  80da58:	e0bfff15 	stw	r2,-4(fp)
  80da5c:	00008106 	br	80dc64 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  80da60:	e0bffb17 	ldw	r2,-20(fp)
  80da64:	10800003 	ldbu	r2,0(r2)
  80da68:	10803fcc 	andi	r2,r2,255
  80da6c:	10800160 	cmpeqi	r2,r2,5
  80da70:	1000061e 	bne	r2,zero,80da8c <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  80da74:	e0fffd17 	ldw	r3,-12(fp)
  80da78:	00800044 	movi	r2,1
  80da7c:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80da80:	e0fffb17 	ldw	r3,-20(fp)
  80da84:	e0ffff15 	stw	r3,-4(fp)
  80da88:	00007606 	br	80dc64 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80da8c:	0005303a 	rdctl	r2,status
  80da90:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80da94:	e0fff617 	ldw	r3,-40(fp)
  80da98:	00bfff84 	movi	r2,-2
  80da9c:	1884703a 	and	r2,r3,r2
  80daa0:	1001703a 	wrctl	status,r2
  
  return context;
  80daa4:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80daa8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  80daac:	e0bffb17 	ldw	r2,-20(fp)
  80dab0:	10800117 	ldw	r2,4(r2)
  80dab4:	1005003a 	cmpeq	r2,r2,zero
  80dab8:	1000031e 	bne	r2,zero,80dac8 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80dabc:	00800044 	movi	r2,1
  80dac0:	e0bffa05 	stb	r2,-24(fp)
  80dac4:	00000106 	br	80dacc <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80dac8:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80dacc:	e0bffc03 	ldbu	r2,-16(fp)
  80dad0:	e0bffe15 	stw	r2,-8(fp)
  80dad4:	e0fffe17 	ldw	r3,-8(fp)
  80dad8:	1805003a 	cmpeq	r2,r3,zero
  80dadc:	1000041e 	bne	r2,zero,80daf0 <OSFlagDel+0x11c>
  80dae0:	e0fffe17 	ldw	r3,-8(fp)
  80dae4:	18800060 	cmpeqi	r2,r3,1
  80dae8:	1000281e 	bne	r2,zero,80db8c <OSFlagDel+0x1b8>
  80daec:	00005206 	br	80dc38 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  80daf0:	e0bffa03 	ldbu	r2,-24(fp)
  80daf4:	1004c03a 	cmpne	r2,r2,zero
  80daf8:	10001a1e 	bne	r2,zero,80db64 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  80dafc:	e0fffb17 	ldw	r3,-20(fp)
  80db00:	00800fc4 	movi	r2,63
  80db04:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80db08:	e0bffb17 	ldw	r2,-20(fp)
  80db0c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80db10:	e0bffb17 	ldw	r2,-20(fp)
  80db14:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  80db18:	008020b4 	movhi	r2,130
  80db1c:	10bb0704 	addi	r2,r2,-5092
  80db20:	10c00017 	ldw	r3,0(r2)
  80db24:	e0bffb17 	ldw	r2,-20(fp)
  80db28:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80db2c:	e0bffb17 	ldw	r2,-20(fp)
  80db30:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  80db34:	00c020b4 	movhi	r3,130
  80db38:	18fb0704 	addi	r3,r3,-5092
  80db3c:	e0bffb17 	ldw	r2,-20(fp)
  80db40:	18800015 	stw	r2,0(r3)
  80db44:	e0bff717 	ldw	r2,-36(fp)
  80db48:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80db4c:	e0bff517 	ldw	r2,-44(fp)
  80db50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  80db54:	e0bffd17 	ldw	r2,-12(fp)
  80db58:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  80db5c:	e03ff815 	stw	zero,-32(fp)
  80db60:	00003e06 	br	80dc5c <OSFlagDel+0x288>
  80db64:	e0bff717 	ldw	r2,-36(fp)
  80db68:	e0bff415 	stw	r2,-48(fp)
  80db6c:	e0bff417 	ldw	r2,-48(fp)
  80db70:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  80db74:	e0fffd17 	ldw	r3,-12(fp)
  80db78:	00801244 	movi	r2,73
  80db7c:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  80db80:	e0bffb17 	ldw	r2,-20(fp)
  80db84:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  80db88:	00003406 	br	80dc5c <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80db8c:	e0bffb17 	ldw	r2,-20(fp)
  80db90:	10800117 	ldw	r2,4(r2)
  80db94:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80db98:	00000606 	br	80dbb4 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  80db9c:	e13ff917 	ldw	r4,-28(fp)
  80dba0:	000b883a 	mov	r5,zero
  80dba4:	080ece40 	call	80ece4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80dba8:	e0bff917 	ldw	r2,-28(fp)
  80dbac:	10800017 	ldw	r2,0(r2)
  80dbb0:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80dbb4:	e0bff917 	ldw	r2,-28(fp)
  80dbb8:	1004c03a 	cmpne	r2,r2,zero
  80dbbc:	103ff71e 	bne	r2,zero,80db9c <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  80dbc0:	e0fffb17 	ldw	r3,-20(fp)
  80dbc4:	00800fc4 	movi	r2,63
  80dbc8:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80dbcc:	e0bffb17 	ldw	r2,-20(fp)
  80dbd0:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80dbd4:	e0bffb17 	ldw	r2,-20(fp)
  80dbd8:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  80dbdc:	008020b4 	movhi	r2,130
  80dbe0:	10bb0704 	addi	r2,r2,-5092
  80dbe4:	10c00017 	ldw	r3,0(r2)
  80dbe8:	e0bffb17 	ldw	r2,-20(fp)
  80dbec:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80dbf0:	e0bffb17 	ldw	r2,-20(fp)
  80dbf4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  80dbf8:	00c020b4 	movhi	r3,130
  80dbfc:	18fb0704 	addi	r3,r3,-5092
  80dc00:	e0bffb17 	ldw	r2,-20(fp)
  80dc04:	18800015 	stw	r2,0(r3)
  80dc08:	e0bff717 	ldw	r2,-36(fp)
  80dc0c:	e0bff315 	stw	r2,-52(fp)
  80dc10:	e0bff317 	ldw	r2,-52(fp)
  80dc14:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80dc18:	e0bffa03 	ldbu	r2,-24(fp)
  80dc1c:	10800058 	cmpnei	r2,r2,1
  80dc20:	1000011e 	bne	r2,zero,80dc28 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80dc24:	080ccf00 	call	80ccf0 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  80dc28:	e0bffd17 	ldw	r2,-12(fp)
  80dc2c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  80dc30:	e03ff815 	stw	zero,-32(fp)
             break;
  80dc34:	00000906 	br	80dc5c <OSFlagDel+0x288>
  80dc38:	e0bff717 	ldw	r2,-36(fp)
  80dc3c:	e0bff215 	stw	r2,-56(fp)
  80dc40:	e0bff217 	ldw	r2,-56(fp)
  80dc44:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  80dc48:	e0fffd17 	ldw	r3,-12(fp)
  80dc4c:	008001c4 	movi	r2,7
  80dc50:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  80dc54:	e0bffb17 	ldw	r2,-20(fp)
  80dc58:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  80dc5c:	e0bff817 	ldw	r2,-32(fp)
  80dc60:	e0bfff15 	stw	r2,-4(fp)
  80dc64:	e0bfff17 	ldw	r2,-4(fp)
}
  80dc68:	e037883a 	mov	sp,fp
  80dc6c:	dfc00117 	ldw	ra,4(sp)
  80dc70:	df000017 	ldw	fp,0(sp)
  80dc74:	dec00204 	addi	sp,sp,8
  80dc78:	f800283a 	ret

0080dc7c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80dc7c:	defff504 	addi	sp,sp,-44
  80dc80:	dfc00a15 	stw	ra,40(sp)
  80dc84:	df000915 	stw	fp,36(sp)
  80dc88:	df000904 	addi	fp,sp,36
  80dc8c:	e13ffc15 	stw	r4,-16(fp)
  80dc90:	e17ffd15 	stw	r5,-12(fp)
  80dc94:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80dc98:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80dc9c:	e0bffe17 	ldw	r2,-8(fp)
  80dca0:	1004c03a 	cmpne	r2,r2,zero
  80dca4:	1000021e 	bne	r2,zero,80dcb0 <OSFlagNameGet+0x34>
        return (0);
  80dca8:	e03fff15 	stw	zero,-4(fp)
  80dcac:	00003e06 	br	80dda8 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80dcb0:	e0bffc17 	ldw	r2,-16(fp)
  80dcb4:	1004c03a 	cmpne	r2,r2,zero
  80dcb8:	1000051e 	bne	r2,zero,80dcd0 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80dcbc:	e0fffe17 	ldw	r3,-8(fp)
  80dcc0:	00801b84 	movi	r2,110
  80dcc4:	18800005 	stb	r2,0(r3)
        return (0);
  80dcc8:	e03fff15 	stw	zero,-4(fp)
  80dccc:	00003606 	br	80dda8 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80dcd0:	e0bffd17 	ldw	r2,-12(fp)
  80dcd4:	1004c03a 	cmpne	r2,r2,zero
  80dcd8:	1000051e 	bne	r2,zero,80dcf0 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80dcdc:	e0fffe17 	ldw	r3,-8(fp)
  80dce0:	00800304 	movi	r2,12
  80dce4:	18800005 	stb	r2,0(r3)
        return (0);
  80dce8:	e03fff15 	stw	zero,-4(fp)
  80dcec:	00002e06 	br	80dda8 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80dcf0:	008020b4 	movhi	r2,130
  80dcf4:	10bb0404 	addi	r2,r2,-5104
  80dcf8:	10800003 	ldbu	r2,0(r2)
  80dcfc:	10803fcc 	andi	r2,r2,255
  80dd00:	1005003a 	cmpeq	r2,r2,zero
  80dd04:	1000051e 	bne	r2,zero,80dd1c <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80dd08:	e0fffe17 	ldw	r3,-8(fp)
  80dd0c:	00800444 	movi	r2,17
  80dd10:	18800005 	stb	r2,0(r3)
        return (0);
  80dd14:	e03fff15 	stw	zero,-4(fp)
  80dd18:	00002306 	br	80dda8 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dd1c:	0005303a 	rdctl	r2,status
  80dd20:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dd24:	e0fff917 	ldw	r3,-28(fp)
  80dd28:	00bfff84 	movi	r2,-2
  80dd2c:	1884703a 	and	r2,r3,r2
  80dd30:	1001703a 	wrctl	status,r2
  
  return context;
  80dd34:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80dd38:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80dd3c:	e0bffc17 	ldw	r2,-16(fp)
  80dd40:	10800003 	ldbu	r2,0(r2)
  80dd44:	10803fcc 	andi	r2,r2,255
  80dd48:	10800160 	cmpeqi	r2,r2,5
  80dd4c:	1000091e 	bne	r2,zero,80dd74 <OSFlagNameGet+0xf8>
  80dd50:	e0bffa17 	ldw	r2,-24(fp)
  80dd54:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dd58:	e0bff817 	ldw	r2,-32(fp)
  80dd5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80dd60:	e0fffe17 	ldw	r3,-8(fp)
  80dd64:	00800044 	movi	r2,1
  80dd68:	18800005 	stb	r2,0(r3)
        return (0);
  80dd6c:	e03fff15 	stw	zero,-4(fp)
  80dd70:	00000d06 	br	80dda8 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  80dd74:	e0bffc17 	ldw	r2,-16(fp)
  80dd78:	11400284 	addi	r5,r2,10
  80dd7c:	e13ffd17 	ldw	r4,-12(fp)
  80dd80:	080ce340 	call	80ce34 <OS_StrCopy>
  80dd84:	e0bffb05 	stb	r2,-20(fp)
  80dd88:	e0bffa17 	ldw	r2,-24(fp)
  80dd8c:	e0bff715 	stw	r2,-36(fp)
  80dd90:	e0bff717 	ldw	r2,-36(fp)
  80dd94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80dd98:	e0bffe17 	ldw	r2,-8(fp)
  80dd9c:	10000005 	stb	zero,0(r2)
    return (len);
  80dda0:	e0bffb03 	ldbu	r2,-20(fp)
  80dda4:	e0bfff15 	stw	r2,-4(fp)
  80dda8:	e0bfff17 	ldw	r2,-4(fp)
}
  80ddac:	e037883a 	mov	sp,fp
  80ddb0:	dfc00117 	ldw	ra,4(sp)
  80ddb4:	df000017 	ldw	fp,0(sp)
  80ddb8:	dec00204 	addi	sp,sp,8
  80ddbc:	f800283a 	ret

0080ddc0 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80ddc0:	defff504 	addi	sp,sp,-44
  80ddc4:	dfc00a15 	stw	ra,40(sp)
  80ddc8:	df000915 	stw	fp,36(sp)
  80ddcc:	df000904 	addi	fp,sp,36
  80ddd0:	e13ffd15 	stw	r4,-12(fp)
  80ddd4:	e17ffe15 	stw	r5,-8(fp)
  80ddd8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80dddc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80dde0:	e0bfff17 	ldw	r2,-4(fp)
  80dde4:	1005003a 	cmpeq	r2,r2,zero
  80dde8:	1000451e 	bne	r2,zero,80df00 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80ddec:	e0bffd17 	ldw	r2,-12(fp)
  80ddf0:	1004c03a 	cmpne	r2,r2,zero
  80ddf4:	1000041e 	bne	r2,zero,80de08 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80ddf8:	e0ffff17 	ldw	r3,-4(fp)
  80ddfc:	00801b84 	movi	r2,110
  80de00:	18800005 	stb	r2,0(r3)
        return;
  80de04:	00003e06 	br	80df00 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80de08:	e0bffe17 	ldw	r2,-8(fp)
  80de0c:	1004c03a 	cmpne	r2,r2,zero
  80de10:	1000041e 	bne	r2,zero,80de24 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80de14:	e0ffff17 	ldw	r3,-4(fp)
  80de18:	00800304 	movi	r2,12
  80de1c:	18800005 	stb	r2,0(r3)
        return;
  80de20:	00003706 	br	80df00 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80de24:	008020b4 	movhi	r2,130
  80de28:	10bb0404 	addi	r2,r2,-5104
  80de2c:	10800003 	ldbu	r2,0(r2)
  80de30:	10803fcc 	andi	r2,r2,255
  80de34:	1005003a 	cmpeq	r2,r2,zero
  80de38:	1000041e 	bne	r2,zero,80de4c <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80de3c:	e0ffff17 	ldw	r3,-4(fp)
  80de40:	00800484 	movi	r2,18
  80de44:	18800005 	stb	r2,0(r3)
        return;
  80de48:	00002d06 	br	80df00 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80de4c:	0005303a 	rdctl	r2,status
  80de50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80de54:	e0fffa17 	ldw	r3,-24(fp)
  80de58:	00bfff84 	movi	r2,-2
  80de5c:	1884703a 	and	r2,r3,r2
  80de60:	1001703a 	wrctl	status,r2
  
  return context;
  80de64:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80de68:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80de6c:	e0bffd17 	ldw	r2,-12(fp)
  80de70:	10800003 	ldbu	r2,0(r2)
  80de74:	10803fcc 	andi	r2,r2,255
  80de78:	10800160 	cmpeqi	r2,r2,5
  80de7c:	1000081e 	bne	r2,zero,80dea0 <OSFlagNameSet+0xe0>
  80de80:	e0bffb17 	ldw	r2,-20(fp)
  80de84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80de88:	e0bff917 	ldw	r2,-28(fp)
  80de8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80de90:	e0ffff17 	ldw	r3,-4(fp)
  80de94:	00800044 	movi	r2,1
  80de98:	18800005 	stb	r2,0(r3)
        return;
  80de9c:	00001806 	br	80df00 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80dea0:	e13ffe17 	ldw	r4,-8(fp)
  80dea4:	080ceb40 	call	80ceb4 <OS_StrLen>
  80dea8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  80deac:	e0bffc03 	ldbu	r2,-16(fp)
  80deb0:	10800830 	cmpltui	r2,r2,32
  80deb4:	1000081e 	bne	r2,zero,80ded8 <OSFlagNameSet+0x118>
  80deb8:	e0bffb17 	ldw	r2,-20(fp)
  80debc:	e0bff815 	stw	r2,-32(fp)
  80dec0:	e0bff817 	ldw	r2,-32(fp)
  80dec4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  80dec8:	e0ffff17 	ldw	r3,-4(fp)
  80decc:	00801cc4 	movi	r2,115
  80ded0:	18800005 	stb	r2,0(r3)
        return;
  80ded4:	00000a06 	br	80df00 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  80ded8:	e0bffd17 	ldw	r2,-12(fp)
  80dedc:	11000284 	addi	r4,r2,10
  80dee0:	e17ffe17 	ldw	r5,-8(fp)
  80dee4:	080ce340 	call	80ce34 <OS_StrCopy>
  80dee8:	e0bffb17 	ldw	r2,-20(fp)
  80deec:	e0bff715 	stw	r2,-36(fp)
  80def0:	e0bff717 	ldw	r2,-36(fp)
  80def4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80def8:	e0bfff17 	ldw	r2,-4(fp)
  80defc:	10000005 	stb	zero,0(r2)
    return;
}
  80df00:	e037883a 	mov	sp,fp
  80df04:	dfc00117 	ldw	ra,4(sp)
  80df08:	df000017 	ldw	fp,0(sp)
  80df0c:	dec00204 	addi	sp,sp,8
  80df10:	f800283a 	ret

0080df14 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  80df14:	deffe004 	addi	sp,sp,-128
  80df18:	dfc01f15 	stw	ra,124(sp)
  80df1c:	df001e15 	stw	fp,120(sp)
  80df20:	df001e04 	addi	fp,sp,120
  80df24:	e13ff915 	stw	r4,-28(fp)
  80df28:	e17ffa0d 	sth	r5,-24(fp)
  80df2c:	e1bffb05 	stb	r6,-20(fp)
  80df30:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80df34:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80df38:	e0800217 	ldw	r2,8(fp)
  80df3c:	1004c03a 	cmpne	r2,r2,zero
  80df40:	1000021e 	bne	r2,zero,80df4c <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  80df44:	e03fff15 	stw	zero,-4(fp)
  80df48:	00017d06 	br	80e540 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80df4c:	e0bff917 	ldw	r2,-28(fp)
  80df50:	1004c03a 	cmpne	r2,r2,zero
  80df54:	1000051e 	bne	r2,zero,80df6c <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80df58:	e0c00217 	ldw	r3,8(fp)
  80df5c:	00801b84 	movi	r2,110
  80df60:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80df64:	e03fff15 	stw	zero,-4(fp)
  80df68:	00017506 	br	80e540 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80df6c:	008020b4 	movhi	r2,130
  80df70:	10bb0404 	addi	r2,r2,-5104
  80df74:	10800003 	ldbu	r2,0(r2)
  80df78:	10803fcc 	andi	r2,r2,255
  80df7c:	1005003a 	cmpeq	r2,r2,zero
  80df80:	1000051e 	bne	r2,zero,80df98 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  80df84:	e0c00217 	ldw	r3,8(fp)
  80df88:	00800084 	movi	r2,2
  80df8c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80df90:	e03fff15 	stw	zero,-4(fp)
  80df94:	00016a06 	br	80e540 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  80df98:	008020b4 	movhi	r2,130
  80df9c:	10baf604 	addi	r2,r2,-5160
  80dfa0:	10800003 	ldbu	r2,0(r2)
  80dfa4:	10803fcc 	andi	r2,r2,255
  80dfa8:	1005003a 	cmpeq	r2,r2,zero
  80dfac:	1000051e 	bne	r2,zero,80dfc4 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  80dfb0:	e0c00217 	ldw	r3,8(fp)
  80dfb4:	00800344 	movi	r2,13
  80dfb8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80dfbc:	e03fff15 	stw	zero,-4(fp)
  80dfc0:	00015f06 	br	80e540 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80dfc4:	e0bff917 	ldw	r2,-28(fp)
  80dfc8:	10800003 	ldbu	r2,0(r2)
  80dfcc:	10803fcc 	andi	r2,r2,255
  80dfd0:	10800160 	cmpeqi	r2,r2,5
  80dfd4:	1000051e 	bne	r2,zero,80dfec <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  80dfd8:	e0c00217 	ldw	r3,8(fp)
  80dfdc:	00800044 	movi	r2,1
  80dfe0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80dfe4:	e03fff15 	stw	zero,-4(fp)
  80dfe8:	00015506 	br	80e540 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80dfec:	e0fffb03 	ldbu	r3,-20(fp)
  80dff0:	00bfe004 	movi	r2,-128
  80dff4:	1884703a 	and	r2,r3,r2
  80dff8:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  80dffc:	e0bff283 	ldbu	r2,-54(fp)
  80e000:	1005003a 	cmpeq	r2,r2,zero
  80e004:	1000071e 	bne	r2,zero,80e024 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  80e008:	00c01fc4 	movi	r3,127
  80e00c:	e0bffb03 	ldbu	r2,-20(fp)
  80e010:	10c4703a 	and	r2,r2,r3
  80e014:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  80e018:	00800044 	movi	r2,1
  80e01c:	e0bff205 	stb	r2,-56(fp)
  80e020:	00000106 	br	80e028 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  80e024:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e028:	0005303a 	rdctl	r2,status
  80e02c:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e030:	e0fff017 	ldw	r3,-64(fp)
  80e034:	00bfff84 	movi	r2,-2
  80e038:	1884703a 	and	r2,r3,r2
  80e03c:	1001703a 	wrctl	status,r2
  
  return context;
  80e040:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80e044:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  80e048:	e0bffb03 	ldbu	r2,-20(fp)
  80e04c:	e0bffe15 	stw	r2,-8(fp)
  80e050:	e0fffe17 	ldw	r3,-8(fp)
  80e054:	18800060 	cmpeqi	r2,r3,1
  80e058:	1000981e 	bne	r2,zero,80e2bc <OSFlagPend+0x3a8>
  80e05c:	e0fffe17 	ldw	r3,-8(fp)
  80e060:	18800088 	cmpgei	r2,r3,2
  80e064:	1000041e 	bne	r2,zero,80e078 <OSFlagPend+0x164>
  80e068:	e0fffe17 	ldw	r3,-8(fp)
  80e06c:	1805003a 	cmpeq	r2,r3,zero
  80e070:	1000641e 	bne	r2,zero,80e204 <OSFlagPend+0x2f0>
  80e074:	0000bf06 	br	80e374 <OSFlagPend+0x460>
  80e078:	e0fffe17 	ldw	r3,-8(fp)
  80e07c:	188000a0 	cmpeqi	r2,r3,2
  80e080:	1000041e 	bne	r2,zero,80e094 <OSFlagPend+0x180>
  80e084:	e0fffe17 	ldw	r3,-8(fp)
  80e088:	188000e0 	cmpeqi	r2,r3,3
  80e08c:	10002f1e 	bne	r2,zero,80e14c <OSFlagPend+0x238>
  80e090:	0000b806 	br	80e374 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  80e094:	e0bff917 	ldw	r2,-28(fp)
  80e098:	10c0020b 	ldhu	r3,8(r2)
  80e09c:	e0bffa0b 	ldhu	r2,-24(fp)
  80e0a0:	1884703a 	and	r2,r3,r2
  80e0a4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80e0a8:	e0fff30b 	ldhu	r3,-52(fp)
  80e0ac:	e0bffa0b 	ldhu	r2,-24(fp)
  80e0b0:	18801a1e 	bne	r3,r2,80e11c <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80e0b4:	e0bff203 	ldbu	r2,-56(fp)
  80e0b8:	10800058 	cmpnei	r2,r2,1
  80e0bc:	1000091e 	bne	r2,zero,80e0e4 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80e0c0:	e0bff917 	ldw	r2,-28(fp)
  80e0c4:	1080020b 	ldhu	r2,8(r2)
  80e0c8:	1007883a 	mov	r3,r2
  80e0cc:	e0bff30b 	ldhu	r2,-52(fp)
  80e0d0:	0084303a 	nor	r2,zero,r2
  80e0d4:	1884703a 	and	r2,r3,r2
  80e0d8:	1007883a 	mov	r3,r2
  80e0dc:	e0bff917 	ldw	r2,-28(fp)
  80e0e0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80e0e4:	008020b4 	movhi	r2,130
  80e0e8:	10bb0504 	addi	r2,r2,-5100
  80e0ec:	10c00017 	ldw	r3,0(r2)
  80e0f0:	e0bff30b 	ldhu	r2,-52(fp)
  80e0f4:	18800b0d 	sth	r2,44(r3)
  80e0f8:	e0bff117 	ldw	r2,-60(fp)
  80e0fc:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e100:	e0bfef17 	ldw	r2,-68(fp)
  80e104:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80e108:	e0800217 	ldw	r2,8(fp)
  80e10c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80e110:	e0bff30b 	ldhu	r2,-52(fp)
  80e114:	e0bfff15 	stw	r2,-4(fp)
  80e118:	00010906 	br	80e540 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80e11c:	e1bffa0b 	ldhu	r6,-24(fp)
  80e120:	e1fffb03 	ldbu	r7,-20(fp)
  80e124:	e0bffc0b 	ldhu	r2,-16(fp)
  80e128:	e17ff404 	addi	r5,fp,-48
  80e12c:	d8800015 	stw	r2,0(sp)
  80e130:	e13ff917 	ldw	r4,-28(fp)
  80e134:	080ea3c0 	call	80ea3c <OS_FlagBlock>
  80e138:	e0bff117 	ldw	r2,-60(fp)
  80e13c:	e0bfee15 	stw	r2,-72(fp)
  80e140:	e0bfee17 	ldw	r2,-72(fp)
  80e144:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80e148:	00009506 	br	80e3a0 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  80e14c:	e0bff917 	ldw	r2,-28(fp)
  80e150:	10c0020b 	ldhu	r3,8(r2)
  80e154:	e0bffa0b 	ldhu	r2,-24(fp)
  80e158:	1884703a 	and	r2,r3,r2
  80e15c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80e160:	e0bff30b 	ldhu	r2,-52(fp)
  80e164:	1005003a 	cmpeq	r2,r2,zero
  80e168:	10001a1e 	bne	r2,zero,80e1d4 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80e16c:	e0bff203 	ldbu	r2,-56(fp)
  80e170:	10800058 	cmpnei	r2,r2,1
  80e174:	1000091e 	bne	r2,zero,80e19c <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80e178:	e0bff917 	ldw	r2,-28(fp)
  80e17c:	1080020b 	ldhu	r2,8(r2)
  80e180:	1007883a 	mov	r3,r2
  80e184:	e0bff30b 	ldhu	r2,-52(fp)
  80e188:	0084303a 	nor	r2,zero,r2
  80e18c:	1884703a 	and	r2,r3,r2
  80e190:	1007883a 	mov	r3,r2
  80e194:	e0bff917 	ldw	r2,-28(fp)
  80e198:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80e19c:	008020b4 	movhi	r2,130
  80e1a0:	10bb0504 	addi	r2,r2,-5100
  80e1a4:	10c00017 	ldw	r3,0(r2)
  80e1a8:	e0bff30b 	ldhu	r2,-52(fp)
  80e1ac:	18800b0d 	sth	r2,44(r3)
  80e1b0:	e0bff117 	ldw	r2,-60(fp)
  80e1b4:	e0bfed15 	stw	r2,-76(fp)
  80e1b8:	e0bfed17 	ldw	r2,-76(fp)
  80e1bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80e1c0:	e0800217 	ldw	r2,8(fp)
  80e1c4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80e1c8:	e0fff30b 	ldhu	r3,-52(fp)
  80e1cc:	e0ffff15 	stw	r3,-4(fp)
  80e1d0:	0000db06 	br	80e540 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80e1d4:	e1bffa0b 	ldhu	r6,-24(fp)
  80e1d8:	e1fffb03 	ldbu	r7,-20(fp)
  80e1dc:	e0bffc0b 	ldhu	r2,-16(fp)
  80e1e0:	e17ff404 	addi	r5,fp,-48
  80e1e4:	d8800015 	stw	r2,0(sp)
  80e1e8:	e13ff917 	ldw	r4,-28(fp)
  80e1ec:	080ea3c0 	call	80ea3c <OS_FlagBlock>
  80e1f0:	e0bff117 	ldw	r2,-60(fp)
  80e1f4:	e0bfec15 	stw	r2,-80(fp)
  80e1f8:	e0bfec17 	ldw	r2,-80(fp)
  80e1fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80e200:	00006706 	br	80e3a0 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80e204:	e0bff917 	ldw	r2,-28(fp)
  80e208:	1080020b 	ldhu	r2,8(r2)
  80e20c:	0084303a 	nor	r2,zero,r2
  80e210:	1007883a 	mov	r3,r2
  80e214:	e0bffa0b 	ldhu	r2,-24(fp)
  80e218:	1884703a 	and	r2,r3,r2
  80e21c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80e220:	e0fff30b 	ldhu	r3,-52(fp)
  80e224:	e0bffa0b 	ldhu	r2,-24(fp)
  80e228:	1880181e 	bne	r3,r2,80e28c <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80e22c:	e0bff203 	ldbu	r2,-56(fp)
  80e230:	10800058 	cmpnei	r2,r2,1
  80e234:	1000071e 	bne	r2,zero,80e254 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80e238:	e0bff917 	ldw	r2,-28(fp)
  80e23c:	10c0020b 	ldhu	r3,8(r2)
  80e240:	e0bff30b 	ldhu	r2,-52(fp)
  80e244:	1884b03a 	or	r2,r3,r2
  80e248:	1007883a 	mov	r3,r2
  80e24c:	e0bff917 	ldw	r2,-28(fp)
  80e250:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80e254:	008020b4 	movhi	r2,130
  80e258:	10bb0504 	addi	r2,r2,-5100
  80e25c:	10c00017 	ldw	r3,0(r2)
  80e260:	e0bff30b 	ldhu	r2,-52(fp)
  80e264:	18800b0d 	sth	r2,44(r3)
  80e268:	e0bff117 	ldw	r2,-60(fp)
  80e26c:	e0bfeb15 	stw	r2,-84(fp)
  80e270:	e0bfeb17 	ldw	r2,-84(fp)
  80e274:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80e278:	e0800217 	ldw	r2,8(fp)
  80e27c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80e280:	e0bff30b 	ldhu	r2,-52(fp)
  80e284:	e0bfff15 	stw	r2,-4(fp)
  80e288:	0000ad06 	br	80e540 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80e28c:	e1bffa0b 	ldhu	r6,-24(fp)
  80e290:	e1fffb03 	ldbu	r7,-20(fp)
  80e294:	e0bffc0b 	ldhu	r2,-16(fp)
  80e298:	e17ff404 	addi	r5,fp,-48
  80e29c:	d8800015 	stw	r2,0(sp)
  80e2a0:	e13ff917 	ldw	r4,-28(fp)
  80e2a4:	080ea3c0 	call	80ea3c <OS_FlagBlock>
  80e2a8:	e0bff117 	ldw	r2,-60(fp)
  80e2ac:	e0bfea15 	stw	r2,-88(fp)
  80e2b0:	e0bfea17 	ldw	r2,-88(fp)
  80e2b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80e2b8:	00003906 	br	80e3a0 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80e2bc:	e0bff917 	ldw	r2,-28(fp)
  80e2c0:	1080020b 	ldhu	r2,8(r2)
  80e2c4:	0084303a 	nor	r2,zero,r2
  80e2c8:	1007883a 	mov	r3,r2
  80e2cc:	e0bffa0b 	ldhu	r2,-24(fp)
  80e2d0:	1884703a 	and	r2,r3,r2
  80e2d4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80e2d8:	e0bff30b 	ldhu	r2,-52(fp)
  80e2dc:	1005003a 	cmpeq	r2,r2,zero
  80e2e0:	1000181e 	bne	r2,zero,80e344 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80e2e4:	e0bff203 	ldbu	r2,-56(fp)
  80e2e8:	10800058 	cmpnei	r2,r2,1
  80e2ec:	1000071e 	bne	r2,zero,80e30c <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80e2f0:	e0bff917 	ldw	r2,-28(fp)
  80e2f4:	10c0020b 	ldhu	r3,8(r2)
  80e2f8:	e0bff30b 	ldhu	r2,-52(fp)
  80e2fc:	1884b03a 	or	r2,r3,r2
  80e300:	1007883a 	mov	r3,r2
  80e304:	e0bff917 	ldw	r2,-28(fp)
  80e308:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80e30c:	008020b4 	movhi	r2,130
  80e310:	10bb0504 	addi	r2,r2,-5100
  80e314:	10c00017 	ldw	r3,0(r2)
  80e318:	e0bff30b 	ldhu	r2,-52(fp)
  80e31c:	18800b0d 	sth	r2,44(r3)
  80e320:	e0bff117 	ldw	r2,-60(fp)
  80e324:	e0bfe915 	stw	r2,-92(fp)
  80e328:	e0bfe917 	ldw	r2,-92(fp)
  80e32c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80e330:	e0800217 	ldw	r2,8(fp)
  80e334:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80e338:	e0fff30b 	ldhu	r3,-52(fp)
  80e33c:	e0ffff15 	stw	r3,-4(fp)
  80e340:	00007f06 	br	80e540 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80e344:	e1bffa0b 	ldhu	r6,-24(fp)
  80e348:	e1fffb03 	ldbu	r7,-20(fp)
  80e34c:	e0bffc0b 	ldhu	r2,-16(fp)
  80e350:	e17ff404 	addi	r5,fp,-48
  80e354:	d8800015 	stw	r2,0(sp)
  80e358:	e13ff917 	ldw	r4,-28(fp)
  80e35c:	080ea3c0 	call	80ea3c <OS_FlagBlock>
  80e360:	e0bff117 	ldw	r2,-60(fp)
  80e364:	e0bfe815 	stw	r2,-96(fp)
  80e368:	e0bfe817 	ldw	r2,-96(fp)
  80e36c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80e370:	00000b06 	br	80e3a0 <OSFlagPend+0x48c>
  80e374:	e0bff117 	ldw	r2,-60(fp)
  80e378:	e0bfe715 	stw	r2,-100(fp)
  80e37c:	e0bfe717 	ldw	r2,-100(fp)
  80e380:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80e384:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  80e388:	e0c00217 	ldw	r3,8(fp)
  80e38c:	00801bc4 	movi	r2,111
  80e390:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  80e394:	e0bff30b 	ldhu	r2,-52(fp)
  80e398:	e0bfff15 	stw	r2,-4(fp)
  80e39c:	00006806 	br	80e540 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  80e3a0:	080ccf00 	call	80ccf0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e3a4:	0005303a 	rdctl	r2,status
  80e3a8:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e3ac:	e0ffe617 	ldw	r3,-104(fp)
  80e3b0:	00bfff84 	movi	r2,-2
  80e3b4:	1884703a 	and	r2,r3,r2
  80e3b8:	1001703a 	wrctl	status,r2
  
  return context;
  80e3bc:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  80e3c0:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  80e3c4:	008020b4 	movhi	r2,130
  80e3c8:	10bb0504 	addi	r2,r2,-5100
  80e3cc:	10800017 	ldw	r2,0(r2)
  80e3d0:	10800c43 	ldbu	r2,49(r2)
  80e3d4:	10803fcc 	andi	r2,r2,255
  80e3d8:	1005003a 	cmpeq	r2,r2,zero
  80e3dc:	1000221e 	bne	r2,zero,80e468 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  80e3e0:	008020b4 	movhi	r2,130
  80e3e4:	10bb0504 	addi	r2,r2,-5100
  80e3e8:	10800017 	ldw	r2,0(r2)
  80e3ec:	10800c43 	ldbu	r2,49(r2)
  80e3f0:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80e3f4:	008020b4 	movhi	r2,130
  80e3f8:	10bb0504 	addi	r2,r2,-5100
  80e3fc:	10800017 	ldw	r2,0(r2)
  80e400:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  80e404:	e13ff404 	addi	r4,fp,-48
  80e408:	080edf40 	call	80edf4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  80e40c:	008020b4 	movhi	r2,130
  80e410:	10bb0504 	addi	r2,r2,-5100
  80e414:	10800017 	ldw	r2,0(r2)
  80e418:	10000c05 	stb	zero,48(r2)
  80e41c:	e0bff117 	ldw	r2,-60(fp)
  80e420:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e424:	e0bfe517 	ldw	r2,-108(fp)
  80e428:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  80e42c:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  80e430:	e0bff243 	ldbu	r2,-55(fp)
  80e434:	108000a0 	cmpeqi	r2,r2,2
  80e438:	1000011e 	bne	r2,zero,80e440 <OSFlagPend+0x52c>
  80e43c:	00000406 	br	80e450 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  80e440:	e0c00217 	ldw	r3,8(fp)
  80e444:	00800384 	movi	r2,14
  80e448:	18800005 	stb	r2,0(r3)
                 break;
  80e44c:	00000306 	br	80e45c <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  80e450:	e0c00217 	ldw	r3,8(fp)
  80e454:	00800284 	movi	r2,10
  80e458:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  80e45c:	e0fff30b 	ldhu	r3,-52(fp)
  80e460:	e0ffff15 	stw	r3,-4(fp)
  80e464:	00003606 	br	80e540 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  80e468:	008020b4 	movhi	r2,130
  80e46c:	10bb0504 	addi	r2,r2,-5100
  80e470:	10800017 	ldw	r2,0(r2)
  80e474:	10800b0b 	ldhu	r2,44(r2)
  80e478:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  80e47c:	e0bff203 	ldbu	r2,-56(fp)
  80e480:	10800058 	cmpnei	r2,r2,1
  80e484:	1000261e 	bne	r2,zero,80e520 <OSFlagPend+0x60c>
        switch (wait_type) {
  80e488:	e0bffb03 	ldbu	r2,-20(fp)
  80e48c:	e0bffd15 	stw	r2,-12(fp)
  80e490:	e0fffd17 	ldw	r3,-12(fp)
  80e494:	1804803a 	cmplt	r2,r3,zero
  80e498:	1000181e 	bne	r2,zero,80e4fc <OSFlagPend+0x5e8>
  80e49c:	e0fffd17 	ldw	r3,-12(fp)
  80e4a0:	18800090 	cmplti	r2,r3,2
  80e4a4:	10000d1e 	bne	r2,zero,80e4dc <OSFlagPend+0x5c8>
  80e4a8:	e0fffd17 	ldw	r3,-12(fp)
  80e4ac:	18800108 	cmpgei	r2,r3,4
  80e4b0:	1000121e 	bne	r2,zero,80e4fc <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  80e4b4:	e0bff917 	ldw	r2,-28(fp)
  80e4b8:	1080020b 	ldhu	r2,8(r2)
  80e4bc:	1007883a 	mov	r3,r2
  80e4c0:	e0bff30b 	ldhu	r2,-52(fp)
  80e4c4:	0084303a 	nor	r2,zero,r2
  80e4c8:	1884703a 	and	r2,r3,r2
  80e4cc:	1007883a 	mov	r3,r2
  80e4d0:	e0bff917 	ldw	r2,-28(fp)
  80e4d4:	10c0020d 	sth	r3,8(r2)
                 break;
  80e4d8:	00001106 	br	80e520 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  80e4dc:	e0bff917 	ldw	r2,-28(fp)
  80e4e0:	10c0020b 	ldhu	r3,8(r2)
  80e4e4:	e0bff30b 	ldhu	r2,-52(fp)
  80e4e8:	1884b03a 	or	r2,r3,r2
  80e4ec:	1007883a 	mov	r3,r2
  80e4f0:	e0bff917 	ldw	r2,-28(fp)
  80e4f4:	10c0020d 	sth	r3,8(r2)
                 break;
  80e4f8:	00000906 	br	80e520 <OSFlagPend+0x60c>
  80e4fc:	e0bff117 	ldw	r2,-60(fp)
  80e500:	e0bfe415 	stw	r2,-112(fp)
  80e504:	e0bfe417 	ldw	r2,-112(fp)
  80e508:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80e50c:	e0c00217 	ldw	r3,8(fp)
  80e510:	00801bc4 	movi	r2,111
  80e514:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80e518:	e03fff15 	stw	zero,-4(fp)
  80e51c:	00000806 	br	80e540 <OSFlagPend+0x62c>
  80e520:	e0bff117 	ldw	r2,-60(fp)
  80e524:	e0bfe315 	stw	r2,-116(fp)
  80e528:	e0bfe317 	ldw	r2,-116(fp)
  80e52c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  80e530:	e0800217 	ldw	r2,8(fp)
  80e534:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  80e538:	e0bff30b 	ldhu	r2,-52(fp)
  80e53c:	e0bfff15 	stw	r2,-4(fp)
  80e540:	e0bfff17 	ldw	r2,-4(fp)
}
  80e544:	e037883a 	mov	sp,fp
  80e548:	dfc00117 	ldw	ra,4(sp)
  80e54c:	df000017 	ldw	fp,0(sp)
  80e550:	dec00204 	addi	sp,sp,8
  80e554:	f800283a 	ret

0080e558 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  80e558:	defffb04 	addi	sp,sp,-20
  80e55c:	df000415 	stw	fp,16(sp)
  80e560:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80e564:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e568:	0005303a 	rdctl	r2,status
  80e56c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e570:	e0fffd17 	ldw	r3,-12(fp)
  80e574:	00bfff84 	movi	r2,-2
  80e578:	1884703a 	and	r2,r3,r2
  80e57c:	1001703a 	wrctl	status,r2
  
  return context;
  80e580:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  80e584:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  80e588:	008020b4 	movhi	r2,130
  80e58c:	10bb0504 	addi	r2,r2,-5100
  80e590:	10800017 	ldw	r2,0(r2)
  80e594:	10800b0b 	ldhu	r2,44(r2)
  80e598:	e0bfff0d 	sth	r2,-4(fp)
  80e59c:	e0bffe17 	ldw	r2,-8(fp)
  80e5a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e5a4:	e0bffc17 	ldw	r2,-16(fp)
  80e5a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  80e5ac:	e0bfff0b 	ldhu	r2,-4(fp)
}
  80e5b0:	e037883a 	mov	sp,fp
  80e5b4:	df000017 	ldw	fp,0(sp)
  80e5b8:	dec00104 	addi	sp,sp,4
  80e5bc:	f800283a 	ret

0080e5c0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  80e5c0:	deffed04 	addi	sp,sp,-76
  80e5c4:	dfc01215 	stw	ra,72(sp)
  80e5c8:	df001115 	stw	fp,68(sp)
  80e5cc:	df001104 	addi	fp,sp,68
  80e5d0:	e13ff915 	stw	r4,-28(fp)
  80e5d4:	e1fffc15 	stw	r7,-16(fp)
  80e5d8:	e17ffa0d 	sth	r5,-24(fp)
  80e5dc:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  80e5e0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  80e5e4:	e0bffc17 	ldw	r2,-16(fp)
  80e5e8:	1004c03a 	cmpne	r2,r2,zero
  80e5ec:	1000021e 	bne	r2,zero,80e5f8 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  80e5f0:	e03fff15 	stw	zero,-4(fp)
  80e5f4:	0000d606 	br	80e950 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  80e5f8:	e0bff917 	ldw	r2,-28(fp)
  80e5fc:	1004c03a 	cmpne	r2,r2,zero
  80e600:	1000051e 	bne	r2,zero,80e618 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80e604:	e0fffc17 	ldw	r3,-16(fp)
  80e608:	00801b84 	movi	r2,110
  80e60c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80e610:	e03fff15 	stw	zero,-4(fp)
  80e614:	0000ce06 	br	80e950 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  80e618:	e0bff917 	ldw	r2,-28(fp)
  80e61c:	10800003 	ldbu	r2,0(r2)
  80e620:	10803fcc 	andi	r2,r2,255
  80e624:	10800160 	cmpeqi	r2,r2,5
  80e628:	1000051e 	bne	r2,zero,80e640 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  80e62c:	e0fffc17 	ldw	r3,-16(fp)
  80e630:	00800044 	movi	r2,1
  80e634:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80e638:	e03fff15 	stw	zero,-4(fp)
  80e63c:	0000c406 	br	80e950 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e640:	0005303a 	rdctl	r2,status
  80e644:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e648:	e0fff417 	ldw	r3,-48(fp)
  80e64c:	00bfff84 	movi	r2,-2
  80e650:	1884703a 	and	r2,r3,r2
  80e654:	1001703a 	wrctl	status,r2
  
  return context;
  80e658:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80e65c:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  80e660:	e0bffb03 	ldbu	r2,-20(fp)
  80e664:	e0bffe15 	stw	r2,-8(fp)
  80e668:	e0fffe17 	ldw	r3,-8(fp)
  80e66c:	1805003a 	cmpeq	r2,r3,zero
  80e670:	1000041e 	bne	r2,zero,80e684 <OSFlagPost+0xc4>
  80e674:	e0fffe17 	ldw	r3,-8(fp)
  80e678:	18800060 	cmpeqi	r2,r3,1
  80e67c:	10000b1e 	bne	r2,zero,80e6ac <OSFlagPost+0xec>
  80e680:	00001206 	br	80e6cc <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  80e684:	e0bff917 	ldw	r2,-28(fp)
  80e688:	1080020b 	ldhu	r2,8(r2)
  80e68c:	1007883a 	mov	r3,r2
  80e690:	e0bffa0b 	ldhu	r2,-24(fp)
  80e694:	0084303a 	nor	r2,zero,r2
  80e698:	1884703a 	and	r2,r3,r2
  80e69c:	1007883a 	mov	r3,r2
  80e6a0:	e0bff917 	ldw	r2,-28(fp)
  80e6a4:	10c0020d 	sth	r3,8(r2)
             break;
  80e6a8:	00001106 	br	80e6f0 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  80e6ac:	e0bff917 	ldw	r2,-28(fp)
  80e6b0:	10c0020b 	ldhu	r3,8(r2)
  80e6b4:	e0bffa0b 	ldhu	r2,-24(fp)
  80e6b8:	1884b03a 	or	r2,r3,r2
  80e6bc:	1007883a 	mov	r3,r2
  80e6c0:	e0bff917 	ldw	r2,-28(fp)
  80e6c4:	10c0020d 	sth	r3,8(r2)
             break;
  80e6c8:	00000906 	br	80e6f0 <OSFlagPost+0x130>
  80e6cc:	e0bff517 	ldw	r2,-44(fp)
  80e6d0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e6d4:	e0bff317 	ldw	r2,-52(fp)
  80e6d8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  80e6dc:	e0fffc17 	ldw	r3,-16(fp)
  80e6e0:	00801c44 	movi	r2,113
  80e6e4:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  80e6e8:	e03fff15 	stw	zero,-4(fp)
  80e6ec:	00009806 	br	80e950 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  80e6f0:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80e6f4:	e0bff917 	ldw	r2,-28(fp)
  80e6f8:	10800117 	ldw	r2,4(r2)
  80e6fc:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80e700:	00007506 	br	80e8d8 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  80e704:	e0bff817 	ldw	r2,-32(fp)
  80e708:	10800483 	ldbu	r2,18(r2)
  80e70c:	10803fcc 	andi	r2,r2,255
  80e710:	e0bffd15 	stw	r2,-12(fp)
  80e714:	e0fffd17 	ldw	r3,-12(fp)
  80e718:	18800060 	cmpeqi	r2,r3,1
  80e71c:	10004d1e 	bne	r2,zero,80e854 <OSFlagPost+0x294>
  80e720:	e0fffd17 	ldw	r3,-12(fp)
  80e724:	18800088 	cmpgei	r2,r3,2
  80e728:	1000041e 	bne	r2,zero,80e73c <OSFlagPost+0x17c>
  80e72c:	e0fffd17 	ldw	r3,-12(fp)
  80e730:	1805003a 	cmpeq	r2,r3,zero
  80e734:	1000301e 	bne	r2,zero,80e7f8 <OSFlagPost+0x238>
  80e738:	00005b06 	br	80e8a8 <OSFlagPost+0x2e8>
  80e73c:	e0fffd17 	ldw	r3,-12(fp)
  80e740:	188000a0 	cmpeqi	r2,r3,2
  80e744:	1000041e 	bne	r2,zero,80e758 <OSFlagPost+0x198>
  80e748:	e0fffd17 	ldw	r3,-12(fp)
  80e74c:	188000e0 	cmpeqi	r2,r3,3
  80e750:	1000161e 	bne	r2,zero,80e7ac <OSFlagPost+0x1ec>
  80e754:	00005406 	br	80e8a8 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80e758:	e0bff917 	ldw	r2,-28(fp)
  80e75c:	10c0020b 	ldhu	r3,8(r2)
  80e760:	e0bff817 	ldw	r2,-32(fp)
  80e764:	1080040b 	ldhu	r2,16(r2)
  80e768:	1884703a 	and	r2,r3,r2
  80e76c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80e770:	e0bff817 	ldw	r2,-32(fp)
  80e774:	1080040b 	ldhu	r2,16(r2)
  80e778:	10ffffcc 	andi	r3,r2,65535
  80e77c:	e0bff68b 	ldhu	r2,-38(fp)
  80e780:	1880521e 	bne	r3,r2,80e8cc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80e784:	e17ff68b 	ldhu	r5,-38(fp)
  80e788:	e13ff817 	ldw	r4,-32(fp)
  80e78c:	080ece40 	call	80ece4 <OS_FlagTaskRdy>
  80e790:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80e794:	e0bff603 	ldbu	r2,-40(fp)
  80e798:	10800058 	cmpnei	r2,r2,1
  80e79c:	10004b1e 	bne	r2,zero,80e8cc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80e7a0:	00800044 	movi	r2,1
  80e7a4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80e7a8:	00004806 	br	80e8cc <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80e7ac:	e0bff917 	ldw	r2,-28(fp)
  80e7b0:	10c0020b 	ldhu	r3,8(r2)
  80e7b4:	e0bff817 	ldw	r2,-32(fp)
  80e7b8:	1080040b 	ldhu	r2,16(r2)
  80e7bc:	1884703a 	and	r2,r3,r2
  80e7c0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80e7c4:	e0bff68b 	ldhu	r2,-38(fp)
  80e7c8:	1005003a 	cmpeq	r2,r2,zero
  80e7cc:	10003f1e 	bne	r2,zero,80e8cc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80e7d0:	e17ff68b 	ldhu	r5,-38(fp)
  80e7d4:	e13ff817 	ldw	r4,-32(fp)
  80e7d8:	080ece40 	call	80ece4 <OS_FlagTaskRdy>
  80e7dc:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80e7e0:	e0bff603 	ldbu	r2,-40(fp)
  80e7e4:	10800058 	cmpnei	r2,r2,1
  80e7e8:	1000381e 	bne	r2,zero,80e8cc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80e7ec:	00800044 	movi	r2,1
  80e7f0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80e7f4:	00003506 	br	80e8cc <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80e7f8:	e0bff917 	ldw	r2,-28(fp)
  80e7fc:	1080020b 	ldhu	r2,8(r2)
  80e800:	0084303a 	nor	r2,zero,r2
  80e804:	1007883a 	mov	r3,r2
  80e808:	e0bff817 	ldw	r2,-32(fp)
  80e80c:	1080040b 	ldhu	r2,16(r2)
  80e810:	1884703a 	and	r2,r3,r2
  80e814:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80e818:	e0bff817 	ldw	r2,-32(fp)
  80e81c:	1080040b 	ldhu	r2,16(r2)
  80e820:	10ffffcc 	andi	r3,r2,65535
  80e824:	e0bff68b 	ldhu	r2,-38(fp)
  80e828:	1880281e 	bne	r3,r2,80e8cc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80e82c:	e17ff68b 	ldhu	r5,-38(fp)
  80e830:	e13ff817 	ldw	r4,-32(fp)
  80e834:	080ece40 	call	80ece4 <OS_FlagTaskRdy>
  80e838:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80e83c:	e0bff603 	ldbu	r2,-40(fp)
  80e840:	10800058 	cmpnei	r2,r2,1
  80e844:	1000211e 	bne	r2,zero,80e8cc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80e848:	00800044 	movi	r2,1
  80e84c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80e850:	00001e06 	br	80e8cc <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80e854:	e0bff917 	ldw	r2,-28(fp)
  80e858:	1080020b 	ldhu	r2,8(r2)
  80e85c:	0084303a 	nor	r2,zero,r2
  80e860:	1007883a 	mov	r3,r2
  80e864:	e0bff817 	ldw	r2,-32(fp)
  80e868:	1080040b 	ldhu	r2,16(r2)
  80e86c:	1884703a 	and	r2,r3,r2
  80e870:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80e874:	e0bff68b 	ldhu	r2,-38(fp)
  80e878:	1005003a 	cmpeq	r2,r2,zero
  80e87c:	1000131e 	bne	r2,zero,80e8cc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80e880:	e17ff68b 	ldhu	r5,-38(fp)
  80e884:	e13ff817 	ldw	r4,-32(fp)
  80e888:	080ece40 	call	80ece4 <OS_FlagTaskRdy>
  80e88c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80e890:	e0bff603 	ldbu	r2,-40(fp)
  80e894:	10800058 	cmpnei	r2,r2,1
  80e898:	10000c1e 	bne	r2,zero,80e8cc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80e89c:	00800044 	movi	r2,1
  80e8a0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80e8a4:	00000906 	br	80e8cc <OSFlagPost+0x30c>
  80e8a8:	e0bff517 	ldw	r2,-44(fp)
  80e8ac:	e0bff215 	stw	r2,-56(fp)
  80e8b0:	e0bff217 	ldw	r2,-56(fp)
  80e8b4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80e8b8:	e0fffc17 	ldw	r3,-16(fp)
  80e8bc:	00801bc4 	movi	r2,111
  80e8c0:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80e8c4:	e03fff15 	stw	zero,-4(fp)
  80e8c8:	00002106 	br	80e950 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  80e8cc:	e0bff817 	ldw	r2,-32(fp)
  80e8d0:	10800017 	ldw	r2,0(r2)
  80e8d4:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80e8d8:	e0bff817 	ldw	r2,-32(fp)
  80e8dc:	1004c03a 	cmpne	r2,r2,zero
  80e8e0:	103f881e 	bne	r2,zero,80e704 <OSFlagPost+0x144>
  80e8e4:	e0bff517 	ldw	r2,-44(fp)
  80e8e8:	e0bff115 	stw	r2,-60(fp)
  80e8ec:	e0bff117 	ldw	r2,-60(fp)
  80e8f0:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  80e8f4:	e0bff783 	ldbu	r2,-34(fp)
  80e8f8:	10800058 	cmpnei	r2,r2,1
  80e8fc:	1000011e 	bne	r2,zero,80e904 <OSFlagPost+0x344>
        OS_Sched();
  80e900:	080ccf00 	call	80ccf0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e904:	0005303a 	rdctl	r2,status
  80e908:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e90c:	e0fff017 	ldw	r3,-64(fp)
  80e910:	00bfff84 	movi	r2,-2
  80e914:	1884703a 	and	r2,r3,r2
  80e918:	1001703a 	wrctl	status,r2
  
  return context;
  80e91c:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  80e920:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  80e924:	e0bff917 	ldw	r2,-28(fp)
  80e928:	1080020b 	ldhu	r2,8(r2)
  80e92c:	e0bff70d 	sth	r2,-36(fp)
  80e930:	e0bff517 	ldw	r2,-44(fp)
  80e934:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e938:	e0bfef17 	ldw	r2,-68(fp)
  80e93c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  80e940:	e0bffc17 	ldw	r2,-16(fp)
  80e944:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  80e948:	e0bff70b 	ldhu	r2,-36(fp)
  80e94c:	e0bfff15 	stw	r2,-4(fp)
  80e950:	e0bfff17 	ldw	r2,-4(fp)
}
  80e954:	e037883a 	mov	sp,fp
  80e958:	dfc00117 	ldw	ra,4(sp)
  80e95c:	df000017 	ldw	fp,0(sp)
  80e960:	dec00204 	addi	sp,sp,8
  80e964:	f800283a 	ret

0080e968 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  80e968:	defff804 	addi	sp,sp,-32
  80e96c:	df000715 	stw	fp,28(sp)
  80e970:	df000704 	addi	fp,sp,28
  80e974:	e13ffd15 	stw	r4,-12(fp)
  80e978:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  80e97c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  80e980:	e0bffe17 	ldw	r2,-8(fp)
  80e984:	1004c03a 	cmpne	r2,r2,zero
  80e988:	1000021e 	bne	r2,zero,80e994 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  80e98c:	e03fff15 	stw	zero,-4(fp)
  80e990:	00002506 	br	80ea28 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  80e994:	e0bffd17 	ldw	r2,-12(fp)
  80e998:	1004c03a 	cmpne	r2,r2,zero
  80e99c:	1000051e 	bne	r2,zero,80e9b4 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80e9a0:	e0fffe17 	ldw	r3,-8(fp)
  80e9a4:	00801b84 	movi	r2,110
  80e9a8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80e9ac:	e03fff15 	stw	zero,-4(fp)
  80e9b0:	00001d06 	br	80ea28 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  80e9b4:	e0bffd17 	ldw	r2,-12(fp)
  80e9b8:	10800003 	ldbu	r2,0(r2)
  80e9bc:	10803fcc 	andi	r2,r2,255
  80e9c0:	10800160 	cmpeqi	r2,r2,5
  80e9c4:	1000051e 	bne	r2,zero,80e9dc <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  80e9c8:	e0fffe17 	ldw	r3,-8(fp)
  80e9cc:	00800044 	movi	r2,1
  80e9d0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80e9d4:	e03fff15 	stw	zero,-4(fp)
  80e9d8:	00001306 	br	80ea28 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e9dc:	0005303a 	rdctl	r2,status
  80e9e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e9e4:	e0fffa17 	ldw	r3,-24(fp)
  80e9e8:	00bfff84 	movi	r2,-2
  80e9ec:	1884703a 	and	r2,r3,r2
  80e9f0:	1001703a 	wrctl	status,r2
  
  return context;
  80e9f4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80e9f8:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  80e9fc:	e0bffd17 	ldw	r2,-12(fp)
  80ea00:	1080020b 	ldhu	r2,8(r2)
  80ea04:	e0bffc0d 	sth	r2,-16(fp)
  80ea08:	e0bffb17 	ldw	r2,-20(fp)
  80ea0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ea10:	e0bff917 	ldw	r2,-28(fp)
  80ea14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80ea18:	e0bffe17 	ldw	r2,-8(fp)
  80ea1c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  80ea20:	e0bffc0b 	ldhu	r2,-16(fp)
  80ea24:	e0bfff15 	stw	r2,-4(fp)
  80ea28:	e0bfff17 	ldw	r2,-4(fp)
}
  80ea2c:	e037883a 	mov	sp,fp
  80ea30:	df000017 	ldw	fp,0(sp)
  80ea34:	dec00104 	addi	sp,sp,4
  80ea38:	f800283a 	ret

0080ea3c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  80ea3c:	defff804 	addi	sp,sp,-32
  80ea40:	df000715 	stw	fp,28(sp)
  80ea44:	df000704 	addi	fp,sp,28
  80ea48:	e13ffb15 	stw	r4,-20(fp)
  80ea4c:	e17ffc15 	stw	r5,-16(fp)
  80ea50:	e0800117 	ldw	r2,4(fp)
  80ea54:	e1bffd0d 	sth	r6,-12(fp)
  80ea58:	e1fffe05 	stb	r7,-8(fp)
  80ea5c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  80ea60:	008020b4 	movhi	r2,130
  80ea64:	10bb0504 	addi	r2,r2,-5100
  80ea68:	10c00017 	ldw	r3,0(r2)
  80ea6c:	008020b4 	movhi	r2,130
  80ea70:	10bb0504 	addi	r2,r2,-5100
  80ea74:	10800017 	ldw	r2,0(r2)
  80ea78:	10800c03 	ldbu	r2,48(r2)
  80ea7c:	10800814 	ori	r2,r2,32
  80ea80:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  80ea84:	008020b4 	movhi	r2,130
  80ea88:	10bb0504 	addi	r2,r2,-5100
  80ea8c:	10800017 	ldw	r2,0(r2)
  80ea90:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  80ea94:	008020b4 	movhi	r2,130
  80ea98:	10bb0504 	addi	r2,r2,-5100
  80ea9c:	10c00017 	ldw	r3,0(r2)
  80eaa0:	e0bfff0b 	ldhu	r2,-4(fp)
  80eaa4:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  80eaa8:	008020b4 	movhi	r2,130
  80eaac:	10bb0504 	addi	r2,r2,-5100
  80eab0:	10c00017 	ldw	r3,0(r2)
  80eab4:	e0bffc17 	ldw	r2,-16(fp)
  80eab8:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  80eabc:	e0fffc17 	ldw	r3,-16(fp)
  80eac0:	e0bffd0b 	ldhu	r2,-12(fp)
  80eac4:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  80eac8:	e0fffc17 	ldw	r3,-16(fp)
  80eacc:	e0bffe03 	ldbu	r2,-8(fp)
  80ead0:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  80ead4:	008020b4 	movhi	r2,130
  80ead8:	10bb0504 	addi	r2,r2,-5100
  80eadc:	10c00017 	ldw	r3,0(r2)
  80eae0:	e0bffc17 	ldw	r2,-16(fp)
  80eae4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  80eae8:	e0bffb17 	ldw	r2,-20(fp)
  80eaec:	10c00117 	ldw	r3,4(r2)
  80eaf0:	e0bffc17 	ldw	r2,-16(fp)
  80eaf4:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  80eaf8:	e0bffc17 	ldw	r2,-16(fp)
  80eafc:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  80eb00:	e0fffc17 	ldw	r3,-16(fp)
  80eb04:	e0bffb17 	ldw	r2,-20(fp)
  80eb08:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80eb0c:	e0bffb17 	ldw	r2,-20(fp)
  80eb10:	10800117 	ldw	r2,4(r2)
  80eb14:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  80eb18:	e0bffa17 	ldw	r2,-24(fp)
  80eb1c:	1005003a 	cmpeq	r2,r2,zero
  80eb20:	1000031e 	bne	r2,zero,80eb30 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  80eb24:	e0fffa17 	ldw	r3,-24(fp)
  80eb28:	e0bffc17 	ldw	r2,-16(fp)
  80eb2c:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  80eb30:	e0fffb17 	ldw	r3,-20(fp)
  80eb34:	e0bffc17 	ldw	r2,-16(fp)
  80eb38:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  80eb3c:	008020b4 	movhi	r2,130
  80eb40:	10bb0504 	addi	r2,r2,-5100
  80eb44:	10800017 	ldw	r2,0(r2)
  80eb48:	10800d03 	ldbu	r2,52(r2)
  80eb4c:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  80eb50:	e13ff903 	ldbu	r4,-28(fp)
  80eb54:	e0fff903 	ldbu	r3,-28(fp)
  80eb58:	008020b4 	movhi	r2,130
  80eb5c:	10bb0244 	addi	r2,r2,-5111
  80eb60:	10c5883a 	add	r2,r2,r3
  80eb64:	10800003 	ldbu	r2,0(r2)
  80eb68:	1007883a 	mov	r3,r2
  80eb6c:	008020b4 	movhi	r2,130
  80eb70:	10bb0504 	addi	r2,r2,-5100
  80eb74:	10800017 	ldw	r2,0(r2)
  80eb78:	10800d43 	ldbu	r2,53(r2)
  80eb7c:	0084303a 	nor	r2,zero,r2
  80eb80:	1884703a 	and	r2,r3,r2
  80eb84:	1007883a 	mov	r3,r2
  80eb88:	008020b4 	movhi	r2,130
  80eb8c:	10bb0244 	addi	r2,r2,-5111
  80eb90:	1105883a 	add	r2,r2,r4
  80eb94:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  80eb98:	e0fff903 	ldbu	r3,-28(fp)
  80eb9c:	008020b4 	movhi	r2,130
  80eba0:	10bb0244 	addi	r2,r2,-5111
  80eba4:	10c5883a 	add	r2,r2,r3
  80eba8:	10800003 	ldbu	r2,0(r2)
  80ebac:	10803fcc 	andi	r2,r2,255
  80ebb0:	1004c03a 	cmpne	r2,r2,zero
  80ebb4:	10000e1e 	bne	r2,zero,80ebf0 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  80ebb8:	008020b4 	movhi	r2,130
  80ebbc:	10bb0504 	addi	r2,r2,-5100
  80ebc0:	10800017 	ldw	r2,0(r2)
  80ebc4:	10800d83 	ldbu	r2,54(r2)
  80ebc8:	0084303a 	nor	r2,zero,r2
  80ebcc:	1007883a 	mov	r3,r2
  80ebd0:	008020b4 	movhi	r2,130
  80ebd4:	10bb0204 	addi	r2,r2,-5112
  80ebd8:	10800003 	ldbu	r2,0(r2)
  80ebdc:	1884703a 	and	r2,r3,r2
  80ebe0:	1007883a 	mov	r3,r2
  80ebe4:	008020b4 	movhi	r2,130
  80ebe8:	10bb0204 	addi	r2,r2,-5112
  80ebec:	10c00005 	stb	r3,0(r2)
    }
}
  80ebf0:	e037883a 	mov	sp,fp
  80ebf4:	df000017 	ldw	fp,0(sp)
  80ebf8:	dec00104 	addi	sp,sp,4
  80ebfc:	f800283a 	ret

0080ec00 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  80ec00:	defffb04 	addi	sp,sp,-20
  80ec04:	dfc00415 	stw	ra,16(sp)
  80ec08:	df000315 	stw	fp,12(sp)
  80ec0c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  80ec10:	010020b4 	movhi	r4,130
  80ec14:	211b2404 	addi	r4,r4,27792
  80ec18:	0140dc04 	movi	r5,880
  80ec1c:	080cc300 	call	80cc30 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  80ec20:	008020b4 	movhi	r2,130
  80ec24:	109b2404 	addi	r2,r2,27792
  80ec28:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  80ec2c:	008020b4 	movhi	r2,130
  80ec30:	109b2f04 	addi	r2,r2,27836
  80ec34:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  80ec38:	e03fff0d 	sth	zero,-4(fp)
  80ec3c:	00001306 	br	80ec8c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80ec40:	e0bffe17 	ldw	r2,-8(fp)
  80ec44:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  80ec48:	e0fffe17 	ldw	r3,-8(fp)
  80ec4c:	e0bffd17 	ldw	r2,-12(fp)
  80ec50:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  80ec54:	e0fffe17 	ldw	r3,-8(fp)
  80ec58:	00800fc4 	movi	r2,63
  80ec5c:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  80ec60:	e0bffe17 	ldw	r2,-8(fp)
  80ec64:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  80ec68:	e0bffe17 	ldw	r2,-8(fp)
  80ec6c:	10800b04 	addi	r2,r2,44
  80ec70:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  80ec74:	e0bffd17 	ldw	r2,-12(fp)
  80ec78:	10800b04 	addi	r2,r2,44
  80ec7c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  80ec80:	e0bfff0b 	ldhu	r2,-4(fp)
  80ec84:	10800044 	addi	r2,r2,1
  80ec88:	e0bfff0d 	sth	r2,-4(fp)
  80ec8c:	e0bfff0b 	ldhu	r2,-4(fp)
  80ec90:	108004f0 	cmpltui	r2,r2,19
  80ec94:	103fea1e 	bne	r2,zero,80ec40 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80ec98:	e0bffe17 	ldw	r2,-8(fp)
  80ec9c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  80eca0:	e0bffe17 	ldw	r2,-8(fp)
  80eca4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  80eca8:	e0fffe17 	ldw	r3,-8(fp)
  80ecac:	00800fc4 	movi	r2,63
  80ecb0:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  80ecb4:	e0bffe17 	ldw	r2,-8(fp)
  80ecb8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  80ecbc:	00c020b4 	movhi	r3,130
  80ecc0:	18fb0704 	addi	r3,r3,-5092
  80ecc4:	008020b4 	movhi	r2,130
  80ecc8:	109b2404 	addi	r2,r2,27792
  80eccc:	18800015 	stw	r2,0(r3)
#endif
}
  80ecd0:	e037883a 	mov	sp,fp
  80ecd4:	dfc00117 	ldw	ra,4(sp)
  80ecd8:	df000017 	ldw	fp,0(sp)
  80ecdc:	dec00204 	addi	sp,sp,8
  80ece0:	f800283a 	ret

0080ece4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  80ece4:	defffa04 	addi	sp,sp,-24
  80ece8:	dfc00515 	stw	ra,20(sp)
  80ecec:	df000415 	stw	fp,16(sp)
  80ecf0:	df000404 	addi	fp,sp,16
  80ecf4:	e13ffe15 	stw	r4,-8(fp)
  80ecf8:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  80ecfc:	e0bffe17 	ldw	r2,-8(fp)
  80ed00:	10800217 	ldw	r2,8(r2)
  80ed04:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  80ed08:	e0bffd17 	ldw	r2,-12(fp)
  80ed0c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  80ed10:	e0fffd17 	ldw	r3,-12(fp)
  80ed14:	e0bfff0b 	ldhu	r2,-4(fp)
  80ed18:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  80ed1c:	e0bffd17 	ldw	r2,-12(fp)
  80ed20:	10c00c03 	ldbu	r3,48(r2)
  80ed24:	00bff7c4 	movi	r2,-33
  80ed28:	1884703a 	and	r2,r3,r2
  80ed2c:	1007883a 	mov	r3,r2
  80ed30:	e0bffd17 	ldw	r2,-12(fp)
  80ed34:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  80ed38:	e0bffd17 	ldw	r2,-12(fp)
  80ed3c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  80ed40:	e0bffd17 	ldw	r2,-12(fp)
  80ed44:	10800c03 	ldbu	r2,48(r2)
  80ed48:	10803fcc 	andi	r2,r2,255
  80ed4c:	1004c03a 	cmpne	r2,r2,zero
  80ed50:	10001f1e 	bne	r2,zero,80edd0 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  80ed54:	e0bffd17 	ldw	r2,-12(fp)
  80ed58:	10c00d83 	ldbu	r3,54(r2)
  80ed5c:	008020b4 	movhi	r2,130
  80ed60:	10bb0204 	addi	r2,r2,-5112
  80ed64:	10800003 	ldbu	r2,0(r2)
  80ed68:	1884b03a 	or	r2,r3,r2
  80ed6c:	1007883a 	mov	r3,r2
  80ed70:	008020b4 	movhi	r2,130
  80ed74:	10bb0204 	addi	r2,r2,-5112
  80ed78:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80ed7c:	e0bffd17 	ldw	r2,-12(fp)
  80ed80:	10800d03 	ldbu	r2,52(r2)
  80ed84:	11003fcc 	andi	r4,r2,255
  80ed88:	e0bffd17 	ldw	r2,-12(fp)
  80ed8c:	10800d03 	ldbu	r2,52(r2)
  80ed90:	10c03fcc 	andi	r3,r2,255
  80ed94:	008020b4 	movhi	r2,130
  80ed98:	10bb0244 	addi	r2,r2,-5111
  80ed9c:	10c5883a 	add	r2,r2,r3
  80eda0:	10c00003 	ldbu	r3,0(r2)
  80eda4:	e0bffd17 	ldw	r2,-12(fp)
  80eda8:	10800d43 	ldbu	r2,53(r2)
  80edac:	1884b03a 	or	r2,r3,r2
  80edb0:	1007883a 	mov	r3,r2
  80edb4:	008020b4 	movhi	r2,130
  80edb8:	10bb0244 	addi	r2,r2,-5111
  80edbc:	1105883a 	add	r2,r2,r4
  80edc0:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  80edc4:	00800044 	movi	r2,1
  80edc8:	e0bffc05 	stb	r2,-16(fp)
  80edcc:	00000106 	br	80edd4 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  80edd0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  80edd4:	e13ffe17 	ldw	r4,-8(fp)
  80edd8:	080edf40 	call	80edf4 <OS_FlagUnlink>
    return (sched);
  80eddc:	e0bffc03 	ldbu	r2,-16(fp)
}
  80ede0:	e037883a 	mov	sp,fp
  80ede4:	dfc00117 	ldw	ra,4(sp)
  80ede8:	df000017 	ldw	fp,0(sp)
  80edec:	dec00204 	addi	sp,sp,8
  80edf0:	f800283a 	ret

0080edf4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  80edf4:	defffa04 	addi	sp,sp,-24
  80edf8:	df000515 	stw	fp,20(sp)
  80edfc:	df000504 	addi	fp,sp,20
  80ee00:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  80ee04:	e0bfff17 	ldw	r2,-4(fp)
  80ee08:	10800117 	ldw	r2,4(r2)
  80ee0c:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80ee10:	e0bfff17 	ldw	r2,-4(fp)
  80ee14:	10800017 	ldw	r2,0(r2)
  80ee18:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  80ee1c:	e0bffc17 	ldw	r2,-16(fp)
  80ee20:	1004c03a 	cmpne	r2,r2,zero
  80ee24:	10000c1e 	bne	r2,zero,80ee58 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  80ee28:	e0bfff17 	ldw	r2,-4(fp)
  80ee2c:	10800317 	ldw	r2,12(r2)
  80ee30:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  80ee34:	e0fffd17 	ldw	r3,-12(fp)
  80ee38:	e0bffb17 	ldw	r2,-20(fp)
  80ee3c:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  80ee40:	e0bffb17 	ldw	r2,-20(fp)
  80ee44:	1005003a 	cmpeq	r2,r2,zero
  80ee48:	10000c1e 	bne	r2,zero,80ee7c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  80ee4c:	e0bffb17 	ldw	r2,-20(fp)
  80ee50:	10000115 	stw	zero,4(r2)
  80ee54:	00000906 	br	80ee7c <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  80ee58:	e0fffc17 	ldw	r3,-16(fp)
  80ee5c:	e0bffb17 	ldw	r2,-20(fp)
  80ee60:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  80ee64:	e0bffb17 	ldw	r2,-20(fp)
  80ee68:	1005003a 	cmpeq	r2,r2,zero
  80ee6c:	1000031e 	bne	r2,zero,80ee7c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  80ee70:	e0fffb17 	ldw	r3,-20(fp)
  80ee74:	e0bffc17 	ldw	r2,-16(fp)
  80ee78:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  80ee7c:	e0bfff17 	ldw	r2,-4(fp)
  80ee80:	10800217 	ldw	r2,8(r2)
  80ee84:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  80ee88:	e0bffe17 	ldw	r2,-8(fp)
  80ee8c:	10000a15 	stw	zero,40(r2)
#endif
}
  80ee90:	e037883a 	mov	sp,fp
  80ee94:	df000017 	ldw	fp,0(sp)
  80ee98:	dec00104 	addi	sp,sp,4
  80ee9c:	f800283a 	ret

0080eea0 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  80eea0:	defff304 	addi	sp,sp,-52
  80eea4:	df000c15 	stw	fp,48(sp)
  80eea8:	df000c04 	addi	fp,sp,48
  80eeac:	e13ffb15 	stw	r4,-20(fp)
  80eeb0:	e17ffc15 	stw	r5,-16(fp)
  80eeb4:	e1bffd15 	stw	r6,-12(fp)
  80eeb8:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80eebc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80eec0:	e0bffe17 	ldw	r2,-8(fp)
  80eec4:	1004c03a 	cmpne	r2,r2,zero
  80eec8:	1000021e 	bne	r2,zero,80eed4 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  80eecc:	e03fff15 	stw	zero,-4(fp)
  80eed0:	00007506 	br	80f0a8 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  80eed4:	e0bffb17 	ldw	r2,-20(fp)
  80eed8:	1004c03a 	cmpne	r2,r2,zero
  80eedc:	1000051e 	bne	r2,zero,80eef4 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80eee0:	e0fffe17 	ldw	r3,-8(fp)
  80eee4:	00801884 	movi	r2,98
  80eee8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80eeec:	e03fff15 	stw	zero,-4(fp)
  80eef0:	00006d06 	br	80f0a8 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  80eef4:	e0bffb17 	ldw	r2,-20(fp)
  80eef8:	108000cc 	andi	r2,r2,3
  80eefc:	1005003a 	cmpeq	r2,r2,zero
  80ef00:	1000051e 	bne	r2,zero,80ef18 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80ef04:	e0fffe17 	ldw	r3,-8(fp)
  80ef08:	00801884 	movi	r2,98
  80ef0c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80ef10:	e03fff15 	stw	zero,-4(fp)
  80ef14:	00006406 	br	80f0a8 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  80ef18:	e0bffc17 	ldw	r2,-16(fp)
  80ef1c:	108000a8 	cmpgeui	r2,r2,2
  80ef20:	1000051e 	bne	r2,zero,80ef38 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  80ef24:	e0fffe17 	ldw	r3,-8(fp)
  80ef28:	008016c4 	movi	r2,91
  80ef2c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80ef30:	e03fff15 	stw	zero,-4(fp)
  80ef34:	00005c06 	br	80f0a8 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  80ef38:	e0bffd17 	ldw	r2,-12(fp)
  80ef3c:	10800128 	cmpgeui	r2,r2,4
  80ef40:	1000051e 	bne	r2,zero,80ef58 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  80ef44:	e0fffe17 	ldw	r3,-8(fp)
  80ef48:	00801704 	movi	r2,92
  80ef4c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80ef50:	e03fff15 	stw	zero,-4(fp)
  80ef54:	00005406 	br	80f0a8 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ef58:	0005303a 	rdctl	r2,status
  80ef5c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ef60:	e0fff517 	ldw	r3,-44(fp)
  80ef64:	00bfff84 	movi	r2,-2
  80ef68:	1884703a 	and	r2,r3,r2
  80ef6c:	1001703a 	wrctl	status,r2
  
  return context;
  80ef70:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80ef74:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  80ef78:	008020b4 	movhi	r2,130
  80ef7c:	10baff04 	addi	r2,r2,-5124
  80ef80:	10800017 	ldw	r2,0(r2)
  80ef84:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  80ef88:	008020b4 	movhi	r2,130
  80ef8c:	10baff04 	addi	r2,r2,-5124
  80ef90:	10800017 	ldw	r2,0(r2)
  80ef94:	1005003a 	cmpeq	r2,r2,zero
  80ef98:	1000081e 	bne	r2,zero,80efbc <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  80ef9c:	008020b4 	movhi	r2,130
  80efa0:	10baff04 	addi	r2,r2,-5124
  80efa4:	10800017 	ldw	r2,0(r2)
  80efa8:	10800117 	ldw	r2,4(r2)
  80efac:	1007883a 	mov	r3,r2
  80efb0:	008020b4 	movhi	r2,130
  80efb4:	10baff04 	addi	r2,r2,-5124
  80efb8:	10c00015 	stw	r3,0(r2)
  80efbc:	e0bff617 	ldw	r2,-40(fp)
  80efc0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80efc4:	e0bff417 	ldw	r2,-48(fp)
  80efc8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  80efcc:	e0bffa17 	ldw	r2,-24(fp)
  80efd0:	1004c03a 	cmpne	r2,r2,zero
  80efd4:	1000051e 	bne	r2,zero,80efec <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  80efd8:	e0fffe17 	ldw	r3,-8(fp)
  80efdc:	00801684 	movi	r2,90
  80efe0:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80efe4:	e03fff15 	stw	zero,-4(fp)
  80efe8:	00002f06 	br	80f0a8 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  80efec:	e0bffb17 	ldw	r2,-20(fp)
  80eff0:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  80eff4:	e0bffb17 	ldw	r2,-20(fp)
  80eff8:	1007883a 	mov	r3,r2
  80effc:	e0bffd17 	ldw	r2,-12(fp)
  80f000:	1885883a 	add	r2,r3,r2
  80f004:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  80f008:	e03ff715 	stw	zero,-36(fp)
  80f00c:	00000d06 	br	80f044 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  80f010:	e0fff817 	ldw	r3,-32(fp)
  80f014:	e0bff917 	ldw	r2,-28(fp)
  80f018:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  80f01c:	e0bff917 	ldw	r2,-28(fp)
  80f020:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  80f024:	e0bff917 	ldw	r2,-28(fp)
  80f028:	1007883a 	mov	r3,r2
  80f02c:	e0bffd17 	ldw	r2,-12(fp)
  80f030:	1885883a 	add	r2,r3,r2
  80f034:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  80f038:	e0bff717 	ldw	r2,-36(fp)
  80f03c:	10800044 	addi	r2,r2,1
  80f040:	e0bff715 	stw	r2,-36(fp)
  80f044:	e0bffc17 	ldw	r2,-16(fp)
  80f048:	10ffffc4 	addi	r3,r2,-1
  80f04c:	e0bff717 	ldw	r2,-36(fp)
  80f050:	10ffef36 	bltu	r2,r3,80f010 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  80f054:	e0bff817 	ldw	r2,-32(fp)
  80f058:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  80f05c:	e0fffa17 	ldw	r3,-24(fp)
  80f060:	e0bffb17 	ldw	r2,-20(fp)
  80f064:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  80f068:	e0fffa17 	ldw	r3,-24(fp)
  80f06c:	e0bffb17 	ldw	r2,-20(fp)
  80f070:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  80f074:	e0fffa17 	ldw	r3,-24(fp)
  80f078:	e0bffc17 	ldw	r2,-16(fp)
  80f07c:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  80f080:	e0fffa17 	ldw	r3,-24(fp)
  80f084:	e0bffc17 	ldw	r2,-16(fp)
  80f088:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  80f08c:	e0fffa17 	ldw	r3,-24(fp)
  80f090:	e0bffd17 	ldw	r2,-12(fp)
  80f094:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  80f098:	e0bffe17 	ldw	r2,-8(fp)
  80f09c:	10000005 	stb	zero,0(r2)
    return (pmem);
  80f0a0:	e0bffa17 	ldw	r2,-24(fp)
  80f0a4:	e0bfff15 	stw	r2,-4(fp)
  80f0a8:	e0bfff17 	ldw	r2,-4(fp)
}
  80f0ac:	e037883a 	mov	sp,fp
  80f0b0:	df000017 	ldw	fp,0(sp)
  80f0b4:	dec00104 	addi	sp,sp,4
  80f0b8:	f800283a 	ret

0080f0bc <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  80f0bc:	defff704 	addi	sp,sp,-36
  80f0c0:	df000815 	stw	fp,32(sp)
  80f0c4:	df000804 	addi	fp,sp,32
  80f0c8:	e13ffd15 	stw	r4,-12(fp)
  80f0cc:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80f0d0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80f0d4:	e0bffe17 	ldw	r2,-8(fp)
  80f0d8:	1004c03a 	cmpne	r2,r2,zero
  80f0dc:	1000021e 	bne	r2,zero,80f0e8 <OSMemGet+0x2c>
        return ((void *)0);
  80f0e0:	e03fff15 	stw	zero,-4(fp)
  80f0e4:	00003106 	br	80f1ac <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  80f0e8:	e0bffd17 	ldw	r2,-12(fp)
  80f0ec:	1004c03a 	cmpne	r2,r2,zero
  80f0f0:	1000051e 	bne	r2,zero,80f108 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80f0f4:	e0fffe17 	ldw	r3,-8(fp)
  80f0f8:	00801804 	movi	r2,96
  80f0fc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f100:	e03fff15 	stw	zero,-4(fp)
  80f104:	00002906 	br	80f1ac <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f108:	0005303a 	rdctl	r2,status
  80f10c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f110:	e0fffa17 	ldw	r3,-24(fp)
  80f114:	00bfff84 	movi	r2,-2
  80f118:	1884703a 	and	r2,r3,r2
  80f11c:	1001703a 	wrctl	status,r2
  
  return context;
  80f120:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80f124:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  80f128:	e0bffd17 	ldw	r2,-12(fp)
  80f12c:	10800417 	ldw	r2,16(r2)
  80f130:	1005003a 	cmpeq	r2,r2,zero
  80f134:	1000151e 	bne	r2,zero,80f18c <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  80f138:	e0bffd17 	ldw	r2,-12(fp)
  80f13c:	10800117 	ldw	r2,4(r2)
  80f140:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  80f144:	e0bffc17 	ldw	r2,-16(fp)
  80f148:	10c00017 	ldw	r3,0(r2)
  80f14c:	e0bffd17 	ldw	r2,-12(fp)
  80f150:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  80f154:	e0bffd17 	ldw	r2,-12(fp)
  80f158:	10800417 	ldw	r2,16(r2)
  80f15c:	10ffffc4 	addi	r3,r2,-1
  80f160:	e0bffd17 	ldw	r2,-12(fp)
  80f164:	10c00415 	stw	r3,16(r2)
  80f168:	e0bffb17 	ldw	r2,-20(fp)
  80f16c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f170:	e0bff917 	ldw	r2,-28(fp)
  80f174:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  80f178:	e0bffe17 	ldw	r2,-8(fp)
  80f17c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  80f180:	e0bffc17 	ldw	r2,-16(fp)
  80f184:	e0bfff15 	stw	r2,-4(fp)
  80f188:	00000806 	br	80f1ac <OSMemGet+0xf0>
  80f18c:	e0bffb17 	ldw	r2,-20(fp)
  80f190:	e0bff815 	stw	r2,-32(fp)
  80f194:	e0bff817 	ldw	r2,-32(fp)
  80f198:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  80f19c:	e0fffe17 	ldw	r3,-8(fp)
  80f1a0:	00801744 	movi	r2,93
  80f1a4:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  80f1a8:	e03fff15 	stw	zero,-4(fp)
  80f1ac:	e0bfff17 	ldw	r2,-4(fp)
}
  80f1b0:	e037883a 	mov	sp,fp
  80f1b4:	df000017 	ldw	fp,0(sp)
  80f1b8:	dec00104 	addi	sp,sp,4
  80f1bc:	f800283a 	ret

0080f1c0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80f1c0:	defff604 	addi	sp,sp,-40
  80f1c4:	dfc00915 	stw	ra,36(sp)
  80f1c8:	df000815 	stw	fp,32(sp)
  80f1cc:	df000804 	addi	fp,sp,32
  80f1d0:	e13ffc15 	stw	r4,-16(fp)
  80f1d4:	e17ffd15 	stw	r5,-12(fp)
  80f1d8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f1dc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80f1e0:	e0bffe17 	ldw	r2,-8(fp)
  80f1e4:	1004c03a 	cmpne	r2,r2,zero
  80f1e8:	1000021e 	bne	r2,zero,80f1f4 <OSMemNameGet+0x34>
        return (0);
  80f1ec:	e03fff15 	stw	zero,-4(fp)
  80f1f0:	00003006 	br	80f2b4 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  80f1f4:	e0bffc17 	ldw	r2,-16(fp)
  80f1f8:	1004c03a 	cmpne	r2,r2,zero
  80f1fc:	1000051e 	bne	r2,zero,80f214 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80f200:	e0fffe17 	ldw	r3,-8(fp)
  80f204:	00801804 	movi	r2,96
  80f208:	18800005 	stb	r2,0(r3)
        return (0);
  80f20c:	e03fff15 	stw	zero,-4(fp)
  80f210:	00002806 	br	80f2b4 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80f214:	e0bffd17 	ldw	r2,-12(fp)
  80f218:	1004c03a 	cmpne	r2,r2,zero
  80f21c:	1000051e 	bne	r2,zero,80f234 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80f220:	e0fffe17 	ldw	r3,-8(fp)
  80f224:	00800304 	movi	r2,12
  80f228:	18800005 	stb	r2,0(r3)
        return (0);
  80f22c:	e03fff15 	stw	zero,-4(fp)
  80f230:	00002006 	br	80f2b4 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80f234:	008020b4 	movhi	r2,130
  80f238:	10bb0404 	addi	r2,r2,-5104
  80f23c:	10800003 	ldbu	r2,0(r2)
  80f240:	10803fcc 	andi	r2,r2,255
  80f244:	1005003a 	cmpeq	r2,r2,zero
  80f248:	1000051e 	bne	r2,zero,80f260 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80f24c:	e0fffe17 	ldw	r3,-8(fp)
  80f250:	00800444 	movi	r2,17
  80f254:	18800005 	stb	r2,0(r3)
        return (0);
  80f258:	e03fff15 	stw	zero,-4(fp)
  80f25c:	00001506 	br	80f2b4 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f260:	0005303a 	rdctl	r2,status
  80f264:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f268:	e0fff917 	ldw	r3,-28(fp)
  80f26c:	00bfff84 	movi	r2,-2
  80f270:	1884703a 	and	r2,r3,r2
  80f274:	1001703a 	wrctl	status,r2
  
  return context;
  80f278:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80f27c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  80f280:	e0bffc17 	ldw	r2,-16(fp)
  80f284:	11400504 	addi	r5,r2,20
  80f288:	e13ffd17 	ldw	r4,-12(fp)
  80f28c:	080ce340 	call	80ce34 <OS_StrCopy>
  80f290:	e0bffb05 	stb	r2,-20(fp)
  80f294:	e0bffa17 	ldw	r2,-24(fp)
  80f298:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f29c:	e0bff817 	ldw	r2,-32(fp)
  80f2a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80f2a4:	e0bffe17 	ldw	r2,-8(fp)
  80f2a8:	10000005 	stb	zero,0(r2)
    return (len);
  80f2ac:	e0bffb03 	ldbu	r2,-20(fp)
  80f2b0:	e0bfff15 	stw	r2,-4(fp)
  80f2b4:	e0bfff17 	ldw	r2,-4(fp)
}
  80f2b8:	e037883a 	mov	sp,fp
  80f2bc:	dfc00117 	ldw	ra,4(sp)
  80f2c0:	df000017 	ldw	fp,0(sp)
  80f2c4:	dec00204 	addi	sp,sp,8
  80f2c8:	f800283a 	ret

0080f2cc <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80f2cc:	defff604 	addi	sp,sp,-40
  80f2d0:	dfc00915 	stw	ra,36(sp)
  80f2d4:	df000815 	stw	fp,32(sp)
  80f2d8:	df000804 	addi	fp,sp,32
  80f2dc:	e13ffd15 	stw	r4,-12(fp)
  80f2e0:	e17ffe15 	stw	r5,-8(fp)
  80f2e4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f2e8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80f2ec:	e0bfff17 	ldw	r2,-4(fp)
  80f2f0:	1005003a 	cmpeq	r2,r2,zero
  80f2f4:	1000381e 	bne	r2,zero,80f3d8 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  80f2f8:	e0bffd17 	ldw	r2,-12(fp)
  80f2fc:	1004c03a 	cmpne	r2,r2,zero
  80f300:	1000041e 	bne	r2,zero,80f314 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80f304:	e0ffff17 	ldw	r3,-4(fp)
  80f308:	00801804 	movi	r2,96
  80f30c:	18800005 	stb	r2,0(r3)
        return;
  80f310:	00003106 	br	80f3d8 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80f314:	e0bffe17 	ldw	r2,-8(fp)
  80f318:	1004c03a 	cmpne	r2,r2,zero
  80f31c:	1000041e 	bne	r2,zero,80f330 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80f320:	e0ffff17 	ldw	r3,-4(fp)
  80f324:	00800304 	movi	r2,12
  80f328:	18800005 	stb	r2,0(r3)
        return;
  80f32c:	00002a06 	br	80f3d8 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80f330:	008020b4 	movhi	r2,130
  80f334:	10bb0404 	addi	r2,r2,-5104
  80f338:	10800003 	ldbu	r2,0(r2)
  80f33c:	10803fcc 	andi	r2,r2,255
  80f340:	1005003a 	cmpeq	r2,r2,zero
  80f344:	1000041e 	bne	r2,zero,80f358 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80f348:	e0ffff17 	ldw	r3,-4(fp)
  80f34c:	00800484 	movi	r2,18
  80f350:	18800005 	stb	r2,0(r3)
        return;
  80f354:	00002006 	br	80f3d8 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f358:	0005303a 	rdctl	r2,status
  80f35c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f360:	e0fffa17 	ldw	r3,-24(fp)
  80f364:	00bfff84 	movi	r2,-2
  80f368:	1884703a 	and	r2,r3,r2
  80f36c:	1001703a 	wrctl	status,r2
  
  return context;
  80f370:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80f374:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80f378:	e13ffe17 	ldw	r4,-8(fp)
  80f37c:	080ceb40 	call	80ceb4 <OS_StrLen>
  80f380:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  80f384:	e0bffc03 	ldbu	r2,-16(fp)
  80f388:	10800830 	cmpltui	r2,r2,32
  80f38c:	1000081e 	bne	r2,zero,80f3b0 <OSMemNameSet+0xe4>
  80f390:	e0bffb17 	ldw	r2,-20(fp)
  80f394:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f398:	e0bff917 	ldw	r2,-28(fp)
  80f39c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  80f3a0:	e0ffff17 	ldw	r3,-4(fp)
  80f3a4:	008018c4 	movi	r2,99
  80f3a8:	18800005 	stb	r2,0(r3)
        return;
  80f3ac:	00000a06 	br	80f3d8 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  80f3b0:	e0bffd17 	ldw	r2,-12(fp)
  80f3b4:	11000504 	addi	r4,r2,20
  80f3b8:	e17ffe17 	ldw	r5,-8(fp)
  80f3bc:	080ce340 	call	80ce34 <OS_StrCopy>
  80f3c0:	e0bffb17 	ldw	r2,-20(fp)
  80f3c4:	e0bff815 	stw	r2,-32(fp)
  80f3c8:	e0bff817 	ldw	r2,-32(fp)
  80f3cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80f3d0:	e0bfff17 	ldw	r2,-4(fp)
  80f3d4:	10000005 	stb	zero,0(r2)
}
  80f3d8:	e037883a 	mov	sp,fp
  80f3dc:	dfc00117 	ldw	ra,4(sp)
  80f3e0:	df000017 	ldw	fp,0(sp)
  80f3e4:	dec00204 	addi	sp,sp,8
  80f3e8:	f800283a 	ret

0080f3ec <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  80f3ec:	defff804 	addi	sp,sp,-32
  80f3f0:	df000715 	stw	fp,28(sp)
  80f3f4:	df000704 	addi	fp,sp,28
  80f3f8:	e13ffd15 	stw	r4,-12(fp)
  80f3fc:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f400:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80f404:	e0bffd17 	ldw	r2,-12(fp)
  80f408:	1004c03a 	cmpne	r2,r2,zero
  80f40c:	1000031e 	bne	r2,zero,80f41c <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  80f410:	00801804 	movi	r2,96
  80f414:	e0bfff15 	stw	r2,-4(fp)
  80f418:	00002b06 	br	80f4c8 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  80f41c:	e0bffe17 	ldw	r2,-8(fp)
  80f420:	1004c03a 	cmpne	r2,r2,zero
  80f424:	1000031e 	bne	r2,zero,80f434 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  80f428:	008017c4 	movi	r2,95
  80f42c:	e0bfff15 	stw	r2,-4(fp)
  80f430:	00002506 	br	80f4c8 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f434:	0005303a 	rdctl	r2,status
  80f438:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f43c:	e0fffb17 	ldw	r3,-20(fp)
  80f440:	00bfff84 	movi	r2,-2
  80f444:	1884703a 	and	r2,r3,r2
  80f448:	1001703a 	wrctl	status,r2
  
  return context;
  80f44c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80f450:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  80f454:	e0bffd17 	ldw	r2,-12(fp)
  80f458:	10c00417 	ldw	r3,16(r2)
  80f45c:	e0bffd17 	ldw	r2,-12(fp)
  80f460:	10800317 	ldw	r2,12(r2)
  80f464:	18800736 	bltu	r3,r2,80f484 <OSMemPut+0x98>
  80f468:	e0bffc17 	ldw	r2,-16(fp)
  80f46c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f470:	e0bffa17 	ldw	r2,-24(fp)
  80f474:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  80f478:	00801784 	movi	r2,94
  80f47c:	e0bfff15 	stw	r2,-4(fp)
  80f480:	00001106 	br	80f4c8 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  80f484:	e0fffe17 	ldw	r3,-8(fp)
  80f488:	e0bffd17 	ldw	r2,-12(fp)
  80f48c:	10800117 	ldw	r2,4(r2)
  80f490:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  80f494:	e0fffd17 	ldw	r3,-12(fp)
  80f498:	e0bffe17 	ldw	r2,-8(fp)
  80f49c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  80f4a0:	e0bffd17 	ldw	r2,-12(fp)
  80f4a4:	10800417 	ldw	r2,16(r2)
  80f4a8:	10c00044 	addi	r3,r2,1
  80f4ac:	e0bffd17 	ldw	r2,-12(fp)
  80f4b0:	10c00415 	stw	r3,16(r2)
  80f4b4:	e0bffc17 	ldw	r2,-16(fp)
  80f4b8:	e0bff915 	stw	r2,-28(fp)
  80f4bc:	e0bff917 	ldw	r2,-28(fp)
  80f4c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  80f4c4:	e03fff15 	stw	zero,-4(fp)
  80f4c8:	e0bfff17 	ldw	r2,-4(fp)
}
  80f4cc:	e037883a 	mov	sp,fp
  80f4d0:	df000017 	ldw	fp,0(sp)
  80f4d4:	dec00104 	addi	sp,sp,4
  80f4d8:	f800283a 	ret

0080f4dc <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  80f4dc:	defff904 	addi	sp,sp,-28
  80f4e0:	df000615 	stw	fp,24(sp)
  80f4e4:	df000604 	addi	fp,sp,24
  80f4e8:	e13ffd15 	stw	r4,-12(fp)
  80f4ec:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f4f0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80f4f4:	e0bffd17 	ldw	r2,-12(fp)
  80f4f8:	1004c03a 	cmpne	r2,r2,zero
  80f4fc:	1000031e 	bne	r2,zero,80f50c <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  80f500:	00801804 	movi	r2,96
  80f504:	e0bfff15 	stw	r2,-4(fp)
  80f508:	00002e06 	br	80f5c4 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  80f50c:	e0bffe17 	ldw	r2,-8(fp)
  80f510:	1004c03a 	cmpne	r2,r2,zero
  80f514:	1000031e 	bne	r2,zero,80f524 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  80f518:	00801844 	movi	r2,97
  80f51c:	e0bfff15 	stw	r2,-4(fp)
  80f520:	00002806 	br	80f5c4 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f524:	0005303a 	rdctl	r2,status
  80f528:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f52c:	e0fffb17 	ldw	r3,-20(fp)
  80f530:	00bfff84 	movi	r2,-2
  80f534:	1884703a 	and	r2,r3,r2
  80f538:	1001703a 	wrctl	status,r2
  
  return context;
  80f53c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80f540:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  80f544:	e0bffd17 	ldw	r2,-12(fp)
  80f548:	10c00017 	ldw	r3,0(r2)
  80f54c:	e0bffe17 	ldw	r2,-8(fp)
  80f550:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  80f554:	e0bffd17 	ldw	r2,-12(fp)
  80f558:	10c00117 	ldw	r3,4(r2)
  80f55c:	e0bffe17 	ldw	r2,-8(fp)
  80f560:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  80f564:	e0bffd17 	ldw	r2,-12(fp)
  80f568:	10c00217 	ldw	r3,8(r2)
  80f56c:	e0bffe17 	ldw	r2,-8(fp)
  80f570:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  80f574:	e0bffd17 	ldw	r2,-12(fp)
  80f578:	10c00317 	ldw	r3,12(r2)
  80f57c:	e0bffe17 	ldw	r2,-8(fp)
  80f580:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  80f584:	e0bffd17 	ldw	r2,-12(fp)
  80f588:	10c00417 	ldw	r3,16(r2)
  80f58c:	e0bffe17 	ldw	r2,-8(fp)
  80f590:	10c00415 	stw	r3,16(r2)
  80f594:	e0bffc17 	ldw	r2,-16(fp)
  80f598:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f59c:	e0bffa17 	ldw	r2,-24(fp)
  80f5a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  80f5a4:	e0bffe17 	ldw	r2,-8(fp)
  80f5a8:	10c00317 	ldw	r3,12(r2)
  80f5ac:	e0bffe17 	ldw	r2,-8(fp)
  80f5b0:	10800417 	ldw	r2,16(r2)
  80f5b4:	1887c83a 	sub	r3,r3,r2
  80f5b8:	e0bffe17 	ldw	r2,-8(fp)
  80f5bc:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  80f5c0:	e03fff15 	stw	zero,-4(fp)
  80f5c4:	e0bfff17 	ldw	r2,-4(fp)
}
  80f5c8:	e037883a 	mov	sp,fp
  80f5cc:	df000017 	ldw	fp,0(sp)
  80f5d0:	dec00104 	addi	sp,sp,4
  80f5d4:	f800283a 	ret

0080f5d8 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  80f5d8:	defffc04 	addi	sp,sp,-16
  80f5dc:	dfc00315 	stw	ra,12(sp)
  80f5e0:	df000215 	stw	fp,8(sp)
  80f5e4:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  80f5e8:	010020b4 	movhi	r4,130
  80f5ec:	211c0004 	addi	r4,r4,28672
  80f5f0:	01430c04 	movi	r5,3120
  80f5f4:	080cc300 	call	80cc30 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  80f5f8:	008020b4 	movhi	r2,130
  80f5fc:	109c0004 	addi	r2,r2,28672
  80f600:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  80f604:	e03ffe0d 	sth	zero,-8(fp)
  80f608:	00001406 	br	80f65c <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  80f60c:	e13ffe0b 	ldhu	r4,-8(fp)
  80f610:	01400d04 	movi	r5,52
  80f614:	0809b1c0 	call	809b1c <__mulsi3>
  80f618:	1007883a 	mov	r3,r2
  80f61c:	008020b4 	movhi	r2,130
  80f620:	109c0d04 	addi	r2,r2,28724
  80f624:	1887883a 	add	r3,r3,r2
  80f628:	e0bfff17 	ldw	r2,-4(fp)
  80f62c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  80f630:	e0ffff17 	ldw	r3,-4(fp)
  80f634:	00800fc4 	movi	r2,63
  80f638:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  80f63c:	e0bfff17 	ldw	r2,-4(fp)
  80f640:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  80f644:	e0bfff17 	ldw	r2,-4(fp)
  80f648:	10800d04 	addi	r2,r2,52
  80f64c:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  80f650:	e0bffe0b 	ldhu	r2,-8(fp)
  80f654:	10800044 	addi	r2,r2,1
  80f658:	e0bffe0d 	sth	r2,-8(fp)
  80f65c:	e0bffe0b 	ldhu	r2,-8(fp)
  80f660:	10800ef0 	cmpltui	r2,r2,59
  80f664:	103fe91e 	bne	r2,zero,80f60c <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  80f668:	e0bfff17 	ldw	r2,-4(fp)
  80f66c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  80f670:	e0ffff17 	ldw	r3,-4(fp)
  80f674:	00800fc4 	movi	r2,63
  80f678:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  80f67c:	e0bfff17 	ldw	r2,-4(fp)
  80f680:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  80f684:	00c020b4 	movhi	r3,130
  80f688:	18faff04 	addi	r3,r3,-5124
  80f68c:	008020b4 	movhi	r2,130
  80f690:	109c0004 	addi	r2,r2,28672
  80f694:	18800015 	stw	r2,0(r3)
#endif
}
  80f698:	e037883a 	mov	sp,fp
  80f69c:	dfc00117 	ldw	ra,4(sp)
  80f6a0:	df000017 	ldw	fp,0(sp)
  80f6a4:	dec00204 	addi	sp,sp,8
  80f6a8:	f800283a 	ret

0080f6ac <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  80f6ac:	defff704 	addi	sp,sp,-36
  80f6b0:	df000815 	stw	fp,32(sp)
  80f6b4:	df000804 	addi	fp,sp,32
  80f6b8:	e13ffd15 	stw	r4,-12(fp)
  80f6bc:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f6c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80f6c4:	e0bffe17 	ldw	r2,-8(fp)
  80f6c8:	1004c03a 	cmpne	r2,r2,zero
  80f6cc:	1000021e 	bne	r2,zero,80f6d8 <OSQAccept+0x2c>
        return ((void *)0);
  80f6d0:	e03fff15 	stw	zero,-4(fp)
  80f6d4:	00004506 	br	80f7ec <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80f6d8:	e0bffd17 	ldw	r2,-12(fp)
  80f6dc:	1004c03a 	cmpne	r2,r2,zero
  80f6e0:	1000051e 	bne	r2,zero,80f6f8 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  80f6e4:	e0fffe17 	ldw	r3,-8(fp)
  80f6e8:	00800104 	movi	r2,4
  80f6ec:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f6f0:	e03fff15 	stw	zero,-4(fp)
  80f6f4:	00003d06 	br	80f7ec <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80f6f8:	e0bffd17 	ldw	r2,-12(fp)
  80f6fc:	10800003 	ldbu	r2,0(r2)
  80f700:	10803fcc 	andi	r2,r2,255
  80f704:	108000a0 	cmpeqi	r2,r2,2
  80f708:	1000051e 	bne	r2,zero,80f720 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  80f70c:	e0fffe17 	ldw	r3,-8(fp)
  80f710:	00800044 	movi	r2,1
  80f714:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f718:	e03fff15 	stw	zero,-4(fp)
  80f71c:	00003306 	br	80f7ec <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f720:	0005303a 	rdctl	r2,status
  80f724:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f728:	e0fff917 	ldw	r3,-28(fp)
  80f72c:	00bfff84 	movi	r2,-2
  80f730:	1884703a 	and	r2,r3,r2
  80f734:	1001703a 	wrctl	status,r2
  
  return context;
  80f738:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80f73c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  80f740:	e0bffd17 	ldw	r2,-12(fp)
  80f744:	10800117 	ldw	r2,4(r2)
  80f748:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80f74c:	e0bffb17 	ldw	r2,-20(fp)
  80f750:	1080058b 	ldhu	r2,22(r2)
  80f754:	10bfffcc 	andi	r2,r2,65535
  80f758:	1005003a 	cmpeq	r2,r2,zero
  80f75c:	1000191e 	bne	r2,zero,80f7c4 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80f760:	e0bffb17 	ldw	r2,-20(fp)
  80f764:	10c00417 	ldw	r3,16(r2)
  80f768:	18800017 	ldw	r2,0(r3)
  80f76c:	e0bffc15 	stw	r2,-16(fp)
  80f770:	18c00104 	addi	r3,r3,4
  80f774:	e0bffb17 	ldw	r2,-20(fp)
  80f778:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80f77c:	e0bffb17 	ldw	r2,-20(fp)
  80f780:	1080058b 	ldhu	r2,22(r2)
  80f784:	10bfffc4 	addi	r2,r2,-1
  80f788:	1007883a 	mov	r3,r2
  80f78c:	e0bffb17 	ldw	r2,-20(fp)
  80f790:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  80f794:	e0bffb17 	ldw	r2,-20(fp)
  80f798:	10c00417 	ldw	r3,16(r2)
  80f79c:	e0bffb17 	ldw	r2,-20(fp)
  80f7a0:	10800217 	ldw	r2,8(r2)
  80f7a4:	1880041e 	bne	r3,r2,80f7b8 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  80f7a8:	e0bffb17 	ldw	r2,-20(fp)
  80f7ac:	10c00117 	ldw	r3,4(r2)
  80f7b0:	e0bffb17 	ldw	r2,-20(fp)
  80f7b4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  80f7b8:	e0bffe17 	ldw	r2,-8(fp)
  80f7bc:	10000005 	stb	zero,0(r2)
  80f7c0:	00000406 	br	80f7d4 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  80f7c4:	e0fffe17 	ldw	r3,-8(fp)
  80f7c8:	008007c4 	movi	r2,31
  80f7cc:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  80f7d0:	e03ffc15 	stw	zero,-16(fp)
  80f7d4:	e0bffa17 	ldw	r2,-24(fp)
  80f7d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f7dc:	e0bff817 	ldw	r2,-32(fp)
  80f7e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  80f7e4:	e0bffc17 	ldw	r2,-16(fp)
  80f7e8:	e0bfff15 	stw	r2,-4(fp)
  80f7ec:	e0bfff17 	ldw	r2,-4(fp)
}
  80f7f0:	e037883a 	mov	sp,fp
  80f7f4:	df000017 	ldw	fp,0(sp)
  80f7f8:	dec00104 	addi	sp,sp,4
  80f7fc:	f800283a 	ret

0080f800 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  80f800:	defff304 	addi	sp,sp,-52
  80f804:	dfc00c15 	stw	ra,48(sp)
  80f808:	df000b15 	stw	fp,44(sp)
  80f80c:	df000b04 	addi	fp,sp,44
  80f810:	e13ffd15 	stw	r4,-12(fp)
  80f814:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f818:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80f81c:	008020b4 	movhi	r2,130
  80f820:	10bb0404 	addi	r2,r2,-5104
  80f824:	10800003 	ldbu	r2,0(r2)
  80f828:	10803fcc 	andi	r2,r2,255
  80f82c:	1005003a 	cmpeq	r2,r2,zero
  80f830:	1000021e 	bne	r2,zero,80f83c <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  80f834:	e03fff15 	stw	zero,-4(fp)
  80f838:	00007006 	br	80f9fc <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f83c:	0005303a 	rdctl	r2,status
  80f840:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f844:	e0fff917 	ldw	r3,-28(fp)
  80f848:	00bfff84 	movi	r2,-2
  80f84c:	1884703a 	and	r2,r3,r2
  80f850:	1001703a 	wrctl	status,r2
  
  return context;
  80f854:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80f858:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  80f85c:	008020b4 	movhi	r2,130
  80f860:	10bb0304 	addi	r2,r2,-5108
  80f864:	10800017 	ldw	r2,0(r2)
  80f868:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  80f86c:	008020b4 	movhi	r2,130
  80f870:	10bb0304 	addi	r2,r2,-5108
  80f874:	10800017 	ldw	r2,0(r2)
  80f878:	1005003a 	cmpeq	r2,r2,zero
  80f87c:	1000081e 	bne	r2,zero,80f8a0 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  80f880:	008020b4 	movhi	r2,130
  80f884:	10bb0304 	addi	r2,r2,-5108
  80f888:	10800017 	ldw	r2,0(r2)
  80f88c:	10800117 	ldw	r2,4(r2)
  80f890:	1007883a 	mov	r3,r2
  80f894:	008020b4 	movhi	r2,130
  80f898:	10bb0304 	addi	r2,r2,-5108
  80f89c:	10c00015 	stw	r3,0(r2)
  80f8a0:	e0bffa17 	ldw	r2,-24(fp)
  80f8a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f8a8:	e0bff817 	ldw	r2,-32(fp)
  80f8ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  80f8b0:	e0bffc17 	ldw	r2,-16(fp)
  80f8b4:	1005003a 	cmpeq	r2,r2,zero
  80f8b8:	10004e1e 	bne	r2,zero,80f9f4 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f8bc:	0005303a 	rdctl	r2,status
  80f8c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f8c4:	e0fff717 	ldw	r3,-36(fp)
  80f8c8:	00bfff84 	movi	r2,-2
  80f8cc:	1884703a 	and	r2,r3,r2
  80f8d0:	1001703a 	wrctl	status,r2
  
  return context;
  80f8d4:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  80f8d8:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  80f8dc:	008020b4 	movhi	r2,130
  80f8e0:	10bb0104 	addi	r2,r2,-5116
  80f8e4:	10800017 	ldw	r2,0(r2)
  80f8e8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  80f8ec:	e0bffb17 	ldw	r2,-20(fp)
  80f8f0:	1005003a 	cmpeq	r2,r2,zero
  80f8f4:	1000311e 	bne	r2,zero,80f9bc <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  80f8f8:	008020b4 	movhi	r2,130
  80f8fc:	10bb0104 	addi	r2,r2,-5116
  80f900:	10800017 	ldw	r2,0(r2)
  80f904:	10c00017 	ldw	r3,0(r2)
  80f908:	008020b4 	movhi	r2,130
  80f90c:	10bb0104 	addi	r2,r2,-5116
  80f910:	10c00015 	stw	r3,0(r2)
  80f914:	e0bffa17 	ldw	r2,-24(fp)
  80f918:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f91c:	e0bff617 	ldw	r2,-40(fp)
  80f920:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  80f924:	e0fffb17 	ldw	r3,-20(fp)
  80f928:	e0bffd17 	ldw	r2,-12(fp)
  80f92c:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  80f930:	e0bffe0b 	ldhu	r2,-8(fp)
  80f934:	1085883a 	add	r2,r2,r2
  80f938:	1085883a 	add	r2,r2,r2
  80f93c:	1007883a 	mov	r3,r2
  80f940:	e0bffd17 	ldw	r2,-12(fp)
  80f944:	1887883a 	add	r3,r3,r2
  80f948:	e0bffb17 	ldw	r2,-20(fp)
  80f94c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  80f950:	e0fffb17 	ldw	r3,-20(fp)
  80f954:	e0bffd17 	ldw	r2,-12(fp)
  80f958:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  80f95c:	e0fffb17 	ldw	r3,-20(fp)
  80f960:	e0bffd17 	ldw	r2,-12(fp)
  80f964:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  80f968:	e0fffb17 	ldw	r3,-20(fp)
  80f96c:	e0bffe0b 	ldhu	r2,-8(fp)
  80f970:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  80f974:	e0bffb17 	ldw	r2,-20(fp)
  80f978:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  80f97c:	e0fffc17 	ldw	r3,-16(fp)
  80f980:	00800084 	movi	r2,2
  80f984:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  80f988:	e0bffc17 	ldw	r2,-16(fp)
  80f98c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  80f990:	e0fffc17 	ldw	r3,-16(fp)
  80f994:	e0bffb17 	ldw	r2,-20(fp)
  80f998:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  80f99c:	e0fffc17 	ldw	r3,-16(fp)
  80f9a0:	00800fc4 	movi	r2,63
  80f9a4:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  80f9a8:	e0bffc17 	ldw	r2,-16(fp)
  80f9ac:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  80f9b0:	e13ffc17 	ldw	r4,-16(fp)
  80f9b4:	080c8640 	call	80c864 <OS_EventWaitListInit>
  80f9b8:	00000e06 	br	80f9f4 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  80f9bc:	008020b4 	movhi	r2,130
  80f9c0:	10bb0304 	addi	r2,r2,-5108
  80f9c4:	10c00017 	ldw	r3,0(r2)
  80f9c8:	e0bffc17 	ldw	r2,-16(fp)
  80f9cc:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  80f9d0:	00c020b4 	movhi	r3,130
  80f9d4:	18fb0304 	addi	r3,r3,-5108
  80f9d8:	e0bffc17 	ldw	r2,-16(fp)
  80f9dc:	18800015 	stw	r2,0(r3)
  80f9e0:	e0bffa17 	ldw	r2,-24(fp)
  80f9e4:	e0bff515 	stw	r2,-44(fp)
  80f9e8:	e0bff517 	ldw	r2,-44(fp)
  80f9ec:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  80f9f0:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  80f9f4:	e0bffc17 	ldw	r2,-16(fp)
  80f9f8:	e0bfff15 	stw	r2,-4(fp)
  80f9fc:	e0bfff17 	ldw	r2,-4(fp)
}
  80fa00:	e037883a 	mov	sp,fp
  80fa04:	dfc00117 	ldw	ra,4(sp)
  80fa08:	df000017 	ldw	fp,0(sp)
  80fa0c:	dec00204 	addi	sp,sp,8
  80fa10:	f800283a 	ret

0080fa14 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80fa14:	defff004 	addi	sp,sp,-64
  80fa18:	dfc00f15 	stw	ra,60(sp)
  80fa1c:	df000e15 	stw	fp,56(sp)
  80fa20:	df000e04 	addi	fp,sp,56
  80fa24:	e13ffb15 	stw	r4,-20(fp)
  80fa28:	e1bffd15 	stw	r6,-12(fp)
  80fa2c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80fa30:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80fa34:	e0bffd17 	ldw	r2,-12(fp)
  80fa38:	1004c03a 	cmpne	r2,r2,zero
  80fa3c:	1000031e 	bne	r2,zero,80fa4c <OSQDel+0x38>
        return (pevent);
  80fa40:	e0bffb17 	ldw	r2,-20(fp)
  80fa44:	e0bfff15 	stw	r2,-4(fp)
  80fa48:	0000ac06 	br	80fcfc <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80fa4c:	e0bffb17 	ldw	r2,-20(fp)
  80fa50:	1004c03a 	cmpne	r2,r2,zero
  80fa54:	1000061e 	bne	r2,zero,80fa70 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  80fa58:	e0fffd17 	ldw	r3,-12(fp)
  80fa5c:	00800104 	movi	r2,4
  80fa60:	18800005 	stb	r2,0(r3)
        return (pevent);
  80fa64:	e0fffb17 	ldw	r3,-20(fp)
  80fa68:	e0ffff15 	stw	r3,-4(fp)
  80fa6c:	0000a306 	br	80fcfc <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  80fa70:	e0bffb17 	ldw	r2,-20(fp)
  80fa74:	10800003 	ldbu	r2,0(r2)
  80fa78:	10803fcc 	andi	r2,r2,255
  80fa7c:	108000a0 	cmpeqi	r2,r2,2
  80fa80:	1000061e 	bne	r2,zero,80fa9c <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  80fa84:	e0fffd17 	ldw	r3,-12(fp)
  80fa88:	00800044 	movi	r2,1
  80fa8c:	18800005 	stb	r2,0(r3)
        return (pevent);
  80fa90:	e0bffb17 	ldw	r2,-20(fp)
  80fa94:	e0bfff15 	stw	r2,-4(fp)
  80fa98:	00009806 	br	80fcfc <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80fa9c:	008020b4 	movhi	r2,130
  80faa0:	10bb0404 	addi	r2,r2,-5104
  80faa4:	10800003 	ldbu	r2,0(r2)
  80faa8:	10803fcc 	andi	r2,r2,255
  80faac:	1005003a 	cmpeq	r2,r2,zero
  80fab0:	1000061e 	bne	r2,zero,80facc <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80fab4:	e0fffd17 	ldw	r3,-12(fp)
  80fab8:	008003c4 	movi	r2,15
  80fabc:	18800005 	stb	r2,0(r3)
        return (pevent);
  80fac0:	e0fffb17 	ldw	r3,-20(fp)
  80fac4:	e0ffff15 	stw	r3,-4(fp)
  80fac8:	00008c06 	br	80fcfc <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80facc:	0005303a 	rdctl	r2,status
  80fad0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fad4:	e0fff617 	ldw	r3,-40(fp)
  80fad8:	00bfff84 	movi	r2,-2
  80fadc:	1884703a 	and	r2,r3,r2
  80fae0:	1001703a 	wrctl	status,r2
  
  return context;
  80fae4:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80fae8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  80faec:	e0bffb17 	ldw	r2,-20(fp)
  80faf0:	10800283 	ldbu	r2,10(r2)
  80faf4:	10803fcc 	andi	r2,r2,255
  80faf8:	1005003a 	cmpeq	r2,r2,zero
  80fafc:	1000031e 	bne	r2,zero,80fb0c <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80fb00:	00800044 	movi	r2,1
  80fb04:	e0bffa05 	stb	r2,-24(fp)
  80fb08:	00000106 	br	80fb10 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80fb0c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80fb10:	e0bffc03 	ldbu	r2,-16(fp)
  80fb14:	e0bffe15 	stw	r2,-8(fp)
  80fb18:	e0fffe17 	ldw	r3,-8(fp)
  80fb1c:	1805003a 	cmpeq	r2,r3,zero
  80fb20:	1000041e 	bne	r2,zero,80fb34 <OSQDel+0x120>
  80fb24:	e0fffe17 	ldw	r3,-8(fp)
  80fb28:	18800060 	cmpeqi	r2,r3,1
  80fb2c:	1000391e 	bne	r2,zero,80fc14 <OSQDel+0x200>
  80fb30:	00006706 	br	80fcd0 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  80fb34:	e0bffa03 	ldbu	r2,-24(fp)
  80fb38:	1004c03a 	cmpne	r2,r2,zero
  80fb3c:	1000261e 	bne	r2,zero,80fbd8 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  80fb40:	e0fffb17 	ldw	r3,-20(fp)
  80fb44:	00800fc4 	movi	r2,63
  80fb48:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  80fb4c:	e0bffb17 	ldw	r2,-20(fp)
  80fb50:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  80fb54:	e0bffb17 	ldw	r2,-20(fp)
  80fb58:	10800117 	ldw	r2,4(r2)
  80fb5c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  80fb60:	008020b4 	movhi	r2,130
  80fb64:	10bb0104 	addi	r2,r2,-5116
  80fb68:	10c00017 	ldw	r3,0(r2)
  80fb6c:	e0bff817 	ldw	r2,-32(fp)
  80fb70:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  80fb74:	00c020b4 	movhi	r3,130
  80fb78:	18fb0104 	addi	r3,r3,-5116
  80fb7c:	e0bff817 	ldw	r2,-32(fp)
  80fb80:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80fb84:	e0bffb17 	ldw	r2,-20(fp)
  80fb88:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  80fb8c:	008020b4 	movhi	r2,130
  80fb90:	10bb0304 	addi	r2,r2,-5108
  80fb94:	10c00017 	ldw	r3,0(r2)
  80fb98:	e0bffb17 	ldw	r2,-20(fp)
  80fb9c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  80fba0:	e0bffb17 	ldw	r2,-20(fp)
  80fba4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  80fba8:	00c020b4 	movhi	r3,130
  80fbac:	18fb0304 	addi	r3,r3,-5108
  80fbb0:	e0bffb17 	ldw	r2,-20(fp)
  80fbb4:	18800015 	stw	r2,0(r3)
  80fbb8:	e0bff717 	ldw	r2,-36(fp)
  80fbbc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fbc0:	e0bff517 	ldw	r2,-44(fp)
  80fbc4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  80fbc8:	e0bffd17 	ldw	r2,-12(fp)
  80fbcc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  80fbd0:	e03ff915 	stw	zero,-28(fp)
  80fbd4:	00004706 	br	80fcf4 <OSQDel+0x2e0>
  80fbd8:	e0bff717 	ldw	r2,-36(fp)
  80fbdc:	e0bff415 	stw	r2,-48(fp)
  80fbe0:	e0bff417 	ldw	r2,-48(fp)
  80fbe4:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  80fbe8:	e0fffd17 	ldw	r3,-12(fp)
  80fbec:	00801244 	movi	r2,73
  80fbf0:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  80fbf4:	e0bffb17 	ldw	r2,-20(fp)
  80fbf8:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  80fbfc:	00003d06 	br	80fcf4 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  80fc00:	e13ffb17 	ldw	r4,-20(fp)
  80fc04:	000b883a 	mov	r5,zero
  80fc08:	01800104 	movi	r6,4
  80fc0c:	000f883a 	mov	r7,zero
  80fc10:	080c2b00 	call	80c2b0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  80fc14:	e0bffb17 	ldw	r2,-20(fp)
  80fc18:	10800283 	ldbu	r2,10(r2)
  80fc1c:	10803fcc 	andi	r2,r2,255
  80fc20:	1004c03a 	cmpne	r2,r2,zero
  80fc24:	103ff61e 	bne	r2,zero,80fc00 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  80fc28:	e0fffb17 	ldw	r3,-20(fp)
  80fc2c:	00800fc4 	movi	r2,63
  80fc30:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  80fc34:	e0bffb17 	ldw	r2,-20(fp)
  80fc38:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  80fc3c:	e0bffb17 	ldw	r2,-20(fp)
  80fc40:	10800117 	ldw	r2,4(r2)
  80fc44:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  80fc48:	008020b4 	movhi	r2,130
  80fc4c:	10bb0104 	addi	r2,r2,-5116
  80fc50:	10c00017 	ldw	r3,0(r2)
  80fc54:	e0bff817 	ldw	r2,-32(fp)
  80fc58:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  80fc5c:	00c020b4 	movhi	r3,130
  80fc60:	18fb0104 	addi	r3,r3,-5116
  80fc64:	e0bff817 	ldw	r2,-32(fp)
  80fc68:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80fc6c:	e0bffb17 	ldw	r2,-20(fp)
  80fc70:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  80fc74:	008020b4 	movhi	r2,130
  80fc78:	10bb0304 	addi	r2,r2,-5108
  80fc7c:	10c00017 	ldw	r3,0(r2)
  80fc80:	e0bffb17 	ldw	r2,-20(fp)
  80fc84:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  80fc88:	e0bffb17 	ldw	r2,-20(fp)
  80fc8c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  80fc90:	00c020b4 	movhi	r3,130
  80fc94:	18fb0304 	addi	r3,r3,-5108
  80fc98:	e0bffb17 	ldw	r2,-20(fp)
  80fc9c:	18800015 	stw	r2,0(r3)
  80fca0:	e0bff717 	ldw	r2,-36(fp)
  80fca4:	e0bff315 	stw	r2,-52(fp)
  80fca8:	e0bff317 	ldw	r2,-52(fp)
  80fcac:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80fcb0:	e0bffa03 	ldbu	r2,-24(fp)
  80fcb4:	10800058 	cmpnei	r2,r2,1
  80fcb8:	1000011e 	bne	r2,zero,80fcc0 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80fcbc:	080ccf00 	call	80ccf0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  80fcc0:	e0bffd17 	ldw	r2,-12(fp)
  80fcc4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  80fcc8:	e03ff915 	stw	zero,-28(fp)
             break;
  80fccc:	00000906 	br	80fcf4 <OSQDel+0x2e0>
  80fcd0:	e0bff717 	ldw	r2,-36(fp)
  80fcd4:	e0bff215 	stw	r2,-56(fp)
  80fcd8:	e0bff217 	ldw	r2,-56(fp)
  80fcdc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  80fce0:	e0fffd17 	ldw	r3,-12(fp)
  80fce4:	008001c4 	movi	r2,7
  80fce8:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  80fcec:	e0bffb17 	ldw	r2,-20(fp)
  80fcf0:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  80fcf4:	e0bff917 	ldw	r2,-28(fp)
  80fcf8:	e0bfff15 	stw	r2,-4(fp)
  80fcfc:	e0bfff17 	ldw	r2,-4(fp)
}
  80fd00:	e037883a 	mov	sp,fp
  80fd04:	dfc00117 	ldw	ra,4(sp)
  80fd08:	df000017 	ldw	fp,0(sp)
  80fd0c:	dec00204 	addi	sp,sp,8
  80fd10:	f800283a 	ret

0080fd14 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  80fd14:	defff904 	addi	sp,sp,-28
  80fd18:	df000615 	stw	fp,24(sp)
  80fd1c:	df000604 	addi	fp,sp,24
  80fd20:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80fd24:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80fd28:	e0bffe17 	ldw	r2,-8(fp)
  80fd2c:	1004c03a 	cmpne	r2,r2,zero
  80fd30:	1000031e 	bne	r2,zero,80fd40 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  80fd34:	00800104 	movi	r2,4
  80fd38:	e0bfff15 	stw	r2,-4(fp)
  80fd3c:	00002206 	br	80fdc8 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80fd40:	e0bffe17 	ldw	r2,-8(fp)
  80fd44:	10800003 	ldbu	r2,0(r2)
  80fd48:	10803fcc 	andi	r2,r2,255
  80fd4c:	108000a0 	cmpeqi	r2,r2,2
  80fd50:	1000031e 	bne	r2,zero,80fd60 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  80fd54:	00800044 	movi	r2,1
  80fd58:	e0bfff15 	stw	r2,-4(fp)
  80fd5c:	00001a06 	br	80fdc8 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fd60:	0005303a 	rdctl	r2,status
  80fd64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fd68:	e0fffb17 	ldw	r3,-20(fp)
  80fd6c:	00bfff84 	movi	r2,-2
  80fd70:	1884703a 	and	r2,r3,r2
  80fd74:	1001703a 	wrctl	status,r2
  
  return context;
  80fd78:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80fd7c:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  80fd80:	e0bffe17 	ldw	r2,-8(fp)
  80fd84:	10800117 	ldw	r2,4(r2)
  80fd88:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  80fd8c:	e0bffd17 	ldw	r2,-12(fp)
  80fd90:	10c00117 	ldw	r3,4(r2)
  80fd94:	e0bffd17 	ldw	r2,-12(fp)
  80fd98:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  80fd9c:	e0bffd17 	ldw	r2,-12(fp)
  80fda0:	10c00117 	ldw	r3,4(r2)
  80fda4:	e0bffd17 	ldw	r2,-12(fp)
  80fda8:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  80fdac:	e0bffd17 	ldw	r2,-12(fp)
  80fdb0:	1000058d 	sth	zero,22(r2)
  80fdb4:	e0bffc17 	ldw	r2,-16(fp)
  80fdb8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fdbc:	e0bffa17 	ldw	r2,-24(fp)
  80fdc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80fdc4:	e03fff15 	stw	zero,-4(fp)
  80fdc8:	e0bfff17 	ldw	r2,-4(fp)
}
  80fdcc:	e037883a 	mov	sp,fp
  80fdd0:	df000017 	ldw	fp,0(sp)
  80fdd4:	dec00104 	addi	sp,sp,4
  80fdd8:	f800283a 	ret

0080fddc <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  80fddc:	defff104 	addi	sp,sp,-60
  80fde0:	dfc00e15 	stw	ra,56(sp)
  80fde4:	df000d15 	stw	fp,52(sp)
  80fde8:	df000d04 	addi	fp,sp,52
  80fdec:	e13ffb15 	stw	r4,-20(fp)
  80fdf0:	e1bffd15 	stw	r6,-12(fp)
  80fdf4:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80fdf8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80fdfc:	e0bffd17 	ldw	r2,-12(fp)
  80fe00:	1004c03a 	cmpne	r2,r2,zero
  80fe04:	1000021e 	bne	r2,zero,80fe10 <OSQPend+0x34>
        return ((void *)0);
  80fe08:	e03fff15 	stw	zero,-4(fp)
  80fe0c:	0000b506 	br	8100e4 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80fe10:	e0bffb17 	ldw	r2,-20(fp)
  80fe14:	1004c03a 	cmpne	r2,r2,zero
  80fe18:	1000051e 	bne	r2,zero,80fe30 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80fe1c:	e0fffd17 	ldw	r3,-12(fp)
  80fe20:	00800104 	movi	r2,4
  80fe24:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80fe28:	e03fff15 	stw	zero,-4(fp)
  80fe2c:	0000ad06 	br	8100e4 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80fe30:	e0bffb17 	ldw	r2,-20(fp)
  80fe34:	10800003 	ldbu	r2,0(r2)
  80fe38:	10803fcc 	andi	r2,r2,255
  80fe3c:	108000a0 	cmpeqi	r2,r2,2
  80fe40:	1000051e 	bne	r2,zero,80fe58 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80fe44:	e0fffd17 	ldw	r3,-12(fp)
  80fe48:	00800044 	movi	r2,1
  80fe4c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80fe50:	e03fff15 	stw	zero,-4(fp)
  80fe54:	0000a306 	br	8100e4 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80fe58:	008020b4 	movhi	r2,130
  80fe5c:	10bb0404 	addi	r2,r2,-5104
  80fe60:	10800003 	ldbu	r2,0(r2)
  80fe64:	10803fcc 	andi	r2,r2,255
  80fe68:	1005003a 	cmpeq	r2,r2,zero
  80fe6c:	1000051e 	bne	r2,zero,80fe84 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  80fe70:	e0fffd17 	ldw	r3,-12(fp)
  80fe74:	00800084 	movi	r2,2
  80fe78:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80fe7c:	e03fff15 	stw	zero,-4(fp)
  80fe80:	00009806 	br	8100e4 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  80fe84:	008020b4 	movhi	r2,130
  80fe88:	10baf604 	addi	r2,r2,-5160
  80fe8c:	10800003 	ldbu	r2,0(r2)
  80fe90:	10803fcc 	andi	r2,r2,255
  80fe94:	1005003a 	cmpeq	r2,r2,zero
  80fe98:	1000051e 	bne	r2,zero,80feb0 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  80fe9c:	e0fffd17 	ldw	r3,-12(fp)
  80fea0:	00800344 	movi	r2,13
  80fea4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80fea8:	e03fff15 	stw	zero,-4(fp)
  80feac:	00008d06 	br	8100e4 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80feb0:	0005303a 	rdctl	r2,status
  80feb4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80feb8:	e0fff717 	ldw	r3,-36(fp)
  80febc:	00bfff84 	movi	r2,-2
  80fec0:	1884703a 	and	r2,r3,r2
  80fec4:	1001703a 	wrctl	status,r2
  
  return context;
  80fec8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80fecc:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  80fed0:	e0bffb17 	ldw	r2,-20(fp)
  80fed4:	10800117 	ldw	r2,4(r2)
  80fed8:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80fedc:	e0bff917 	ldw	r2,-28(fp)
  80fee0:	1080058b 	ldhu	r2,22(r2)
  80fee4:	10bfffcc 	andi	r2,r2,65535
  80fee8:	1005003a 	cmpeq	r2,r2,zero
  80feec:	10001f1e 	bne	r2,zero,80ff6c <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80fef0:	e0bff917 	ldw	r2,-28(fp)
  80fef4:	10c00417 	ldw	r3,16(r2)
  80fef8:	18800017 	ldw	r2,0(r3)
  80fefc:	e0bffa15 	stw	r2,-24(fp)
  80ff00:	18c00104 	addi	r3,r3,4
  80ff04:	e0bff917 	ldw	r2,-28(fp)
  80ff08:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80ff0c:	e0bff917 	ldw	r2,-28(fp)
  80ff10:	1080058b 	ldhu	r2,22(r2)
  80ff14:	10bfffc4 	addi	r2,r2,-1
  80ff18:	1007883a 	mov	r3,r2
  80ff1c:	e0bff917 	ldw	r2,-28(fp)
  80ff20:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  80ff24:	e0bff917 	ldw	r2,-28(fp)
  80ff28:	10c00417 	ldw	r3,16(r2)
  80ff2c:	e0bff917 	ldw	r2,-28(fp)
  80ff30:	10800217 	ldw	r2,8(r2)
  80ff34:	1880041e 	bne	r3,r2,80ff48 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  80ff38:	e0bff917 	ldw	r2,-28(fp)
  80ff3c:	10c00117 	ldw	r3,4(r2)
  80ff40:	e0bff917 	ldw	r2,-28(fp)
  80ff44:	10c00415 	stw	r3,16(r2)
  80ff48:	e0bff817 	ldw	r2,-32(fp)
  80ff4c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ff50:	e0bff617 	ldw	r2,-40(fp)
  80ff54:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  80ff58:	e0bffd17 	ldw	r2,-12(fp)
  80ff5c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  80ff60:	e0bffa17 	ldw	r2,-24(fp)
  80ff64:	e0bfff15 	stw	r2,-4(fp)
  80ff68:	00005e06 	br	8100e4 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  80ff6c:	008020b4 	movhi	r2,130
  80ff70:	10bb0504 	addi	r2,r2,-5100
  80ff74:	10c00017 	ldw	r3,0(r2)
  80ff78:	008020b4 	movhi	r2,130
  80ff7c:	10bb0504 	addi	r2,r2,-5100
  80ff80:	10800017 	ldw	r2,0(r2)
  80ff84:	10800c03 	ldbu	r2,48(r2)
  80ff88:	10800114 	ori	r2,r2,4
  80ff8c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80ff90:	008020b4 	movhi	r2,130
  80ff94:	10bb0504 	addi	r2,r2,-5100
  80ff98:	10800017 	ldw	r2,0(r2)
  80ff9c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  80ffa0:	008020b4 	movhi	r2,130
  80ffa4:	10bb0504 	addi	r2,r2,-5100
  80ffa8:	10c00017 	ldw	r3,0(r2)
  80ffac:	e0bffc0b 	ldhu	r2,-16(fp)
  80ffb0:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  80ffb4:	e13ffb17 	ldw	r4,-20(fp)
  80ffb8:	080c4440 	call	80c444 <OS_EventTaskWait>
  80ffbc:	e0bff817 	ldw	r2,-32(fp)
  80ffc0:	e0bff515 	stw	r2,-44(fp)
  80ffc4:	e0bff517 	ldw	r2,-44(fp)
  80ffc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  80ffcc:	080ccf00 	call	80ccf0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ffd0:	0005303a 	rdctl	r2,status
  80ffd4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ffd8:	e0fff417 	ldw	r3,-48(fp)
  80ffdc:	00bfff84 	movi	r2,-2
  80ffe0:	1884703a 	and	r2,r3,r2
  80ffe4:	1001703a 	wrctl	status,r2
  
  return context;
  80ffe8:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  80ffec:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  80fff0:	008020b4 	movhi	r2,130
  80fff4:	10bb0504 	addi	r2,r2,-5100
  80fff8:	10800017 	ldw	r2,0(r2)
  80fffc:	10800c43 	ldbu	r2,49(r2)
  810000:	10803fcc 	andi	r2,r2,255
  810004:	e0bffe15 	stw	r2,-8(fp)
  810008:	e0fffe17 	ldw	r3,-8(fp)
  81000c:	1805003a 	cmpeq	r2,r3,zero
  810010:	1000041e 	bne	r2,zero,810024 <OSQPend+0x248>
  810014:	e0fffe17 	ldw	r3,-8(fp)
  810018:	188000a0 	cmpeqi	r2,r3,2
  81001c:	1000091e 	bne	r2,zero,810044 <OSQPend+0x268>
  810020:	00000d06 	br	810058 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  810024:	008020b4 	movhi	r2,130
  810028:	10bb0504 	addi	r2,r2,-5100
  81002c:	10800017 	ldw	r2,0(r2)
  810030:	10800917 	ldw	r2,36(r2)
  810034:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  810038:	e0bffd17 	ldw	r2,-12(fp)
  81003c:	10000005 	stb	zero,0(r2)
             break;
  810040:	00000e06 	br	81007c <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  810044:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  810048:	e0fffd17 	ldw	r3,-12(fp)
  81004c:	00800384 	movi	r2,14
  810050:	18800005 	stb	r2,0(r3)
             break;
  810054:	00000906 	br	81007c <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  810058:	008020b4 	movhi	r2,130
  81005c:	10bb0504 	addi	r2,r2,-5100
  810060:	11000017 	ldw	r4,0(r2)
  810064:	e17ffb17 	ldw	r5,-20(fp)
  810068:	080c6a80 	call	80c6a8 <OS_EventTaskRemove>
             pmsg = (void *)0;
  81006c:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  810070:	e0fffd17 	ldw	r3,-12(fp)
  810074:	00800284 	movi	r2,10
  810078:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  81007c:	008020b4 	movhi	r2,130
  810080:	10bb0504 	addi	r2,r2,-5100
  810084:	10800017 	ldw	r2,0(r2)
  810088:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  81008c:	008020b4 	movhi	r2,130
  810090:	10bb0504 	addi	r2,r2,-5100
  810094:	10800017 	ldw	r2,0(r2)
  810098:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  81009c:	008020b4 	movhi	r2,130
  8100a0:	10bb0504 	addi	r2,r2,-5100
  8100a4:	10800017 	ldw	r2,0(r2)
  8100a8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8100ac:	008020b4 	movhi	r2,130
  8100b0:	10bb0504 	addi	r2,r2,-5100
  8100b4:	10800017 	ldw	r2,0(r2)
  8100b8:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  8100bc:	008020b4 	movhi	r2,130
  8100c0:	10bb0504 	addi	r2,r2,-5100
  8100c4:	10800017 	ldw	r2,0(r2)
  8100c8:	10000915 	stw	zero,36(r2)
  8100cc:	e0bff817 	ldw	r2,-32(fp)
  8100d0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8100d4:	e0bff317 	ldw	r2,-52(fp)
  8100d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  8100dc:	e0bffa17 	ldw	r2,-24(fp)
  8100e0:	e0bfff15 	stw	r2,-4(fp)
  8100e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8100e8:	e037883a 	mov	sp,fp
  8100ec:	dfc00117 	ldw	ra,4(sp)
  8100f0:	df000017 	ldw	fp,0(sp)
  8100f4:	dec00204 	addi	sp,sp,8
  8100f8:	f800283a 	ret

008100fc <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8100fc:	defff504 	addi	sp,sp,-44
  810100:	dfc00a15 	stw	ra,40(sp)
  810104:	df000915 	stw	fp,36(sp)
  810108:	df000904 	addi	fp,sp,36
  81010c:	e13ffc15 	stw	r4,-16(fp)
  810110:	e1bffe15 	stw	r6,-8(fp)
  810114:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  810118:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81011c:	e0bffe17 	ldw	r2,-8(fp)
  810120:	1004c03a 	cmpne	r2,r2,zero
  810124:	1000021e 	bne	r2,zero,810130 <OSQPendAbort+0x34>
        return (0);
  810128:	e03fff15 	stw	zero,-4(fp)
  81012c:	00004c06 	br	810260 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  810130:	e0bffc17 	ldw	r2,-16(fp)
  810134:	1004c03a 	cmpne	r2,r2,zero
  810138:	1000051e 	bne	r2,zero,810150 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81013c:	e0fffe17 	ldw	r3,-8(fp)
  810140:	00800104 	movi	r2,4
  810144:	18800005 	stb	r2,0(r3)
        return (0);
  810148:	e03fff15 	stw	zero,-4(fp)
  81014c:	00004406 	br	810260 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  810150:	e0bffc17 	ldw	r2,-16(fp)
  810154:	10800003 	ldbu	r2,0(r2)
  810158:	10803fcc 	andi	r2,r2,255
  81015c:	108000a0 	cmpeqi	r2,r2,2
  810160:	1000051e 	bne	r2,zero,810178 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  810164:	e0fffe17 	ldw	r3,-8(fp)
  810168:	00800044 	movi	r2,1
  81016c:	18800005 	stb	r2,0(r3)
        return (0);
  810170:	e03fff15 	stw	zero,-4(fp)
  810174:	00003a06 	br	810260 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810178:	0005303a 	rdctl	r2,status
  81017c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810180:	e0fff917 	ldw	r3,-28(fp)
  810184:	00bfff84 	movi	r2,-2
  810188:	1884703a 	and	r2,r3,r2
  81018c:	1001703a 	wrctl	status,r2
  
  return context;
  810190:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  810194:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  810198:	e0bffc17 	ldw	r2,-16(fp)
  81019c:	10800283 	ldbu	r2,10(r2)
  8101a0:	10803fcc 	andi	r2,r2,255
  8101a4:	1005003a 	cmpeq	r2,r2,zero
  8101a8:	1000261e 	bne	r2,zero,810244 <OSQPendAbort+0x148>
        nbr_tasks = 0;
  8101ac:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  8101b0:	e0bffd03 	ldbu	r2,-12(fp)
  8101b4:	10800060 	cmpeqi	r2,r2,1
  8101b8:	1000091e 	bne	r2,zero,8101e0 <OSQPendAbort+0xe4>
  8101bc:	00000e06 	br	8101f8 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  8101c0:	e13ffc17 	ldw	r4,-16(fp)
  8101c4:	000b883a 	mov	r5,zero
  8101c8:	01800104 	movi	r6,4
  8101cc:	01c00084 	movi	r7,2
  8101d0:	080c2b00 	call	80c2b0 <OS_EventTaskRdy>
                     nbr_tasks++;
  8101d4:	e0bffb03 	ldbu	r2,-20(fp)
  8101d8:	10800044 	addi	r2,r2,1
  8101dc:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  8101e0:	e0bffc17 	ldw	r2,-16(fp)
  8101e4:	10800283 	ldbu	r2,10(r2)
  8101e8:	10803fcc 	andi	r2,r2,255
  8101ec:	1004c03a 	cmpne	r2,r2,zero
  8101f0:	103ff31e 	bne	r2,zero,8101c0 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  8101f4:	00000806 	br	810218 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  8101f8:	e13ffc17 	ldw	r4,-16(fp)
  8101fc:	000b883a 	mov	r5,zero
  810200:	01800104 	movi	r6,4
  810204:	01c00084 	movi	r7,2
  810208:	080c2b00 	call	80c2b0 <OS_EventTaskRdy>
                 nbr_tasks++;
  81020c:	e0bffb03 	ldbu	r2,-20(fp)
  810210:	10800044 	addi	r2,r2,1
  810214:	e0bffb05 	stb	r2,-20(fp)
  810218:	e0bffa17 	ldw	r2,-24(fp)
  81021c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810220:	e0bff817 	ldw	r2,-32(fp)
  810224:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  810228:	080ccf00 	call	80ccf0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  81022c:	e0fffe17 	ldw	r3,-8(fp)
  810230:	00800384 	movi	r2,14
  810234:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  810238:	e0bffb03 	ldbu	r2,-20(fp)
  81023c:	e0bfff15 	stw	r2,-4(fp)
  810240:	00000706 	br	810260 <OSQPendAbort+0x164>
  810244:	e0bffa17 	ldw	r2,-24(fp)
  810248:	e0bff715 	stw	r2,-36(fp)
  81024c:	e0bff717 	ldw	r2,-36(fp)
  810250:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  810254:	e0bffe17 	ldw	r2,-8(fp)
  810258:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  81025c:	e03fff15 	stw	zero,-4(fp)
  810260:	e0bfff17 	ldw	r2,-4(fp)
}
  810264:	e037883a 	mov	sp,fp
  810268:	dfc00117 	ldw	ra,4(sp)
  81026c:	df000017 	ldw	fp,0(sp)
  810270:	dec00204 	addi	sp,sp,8
  810274:	f800283a 	ret

00810278 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  810278:	defff504 	addi	sp,sp,-44
  81027c:	dfc00a15 	stw	ra,40(sp)
  810280:	df000915 	stw	fp,36(sp)
  810284:	df000904 	addi	fp,sp,36
  810288:	e13ffd15 	stw	r4,-12(fp)
  81028c:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  810290:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  810294:	e0bffd17 	ldw	r2,-12(fp)
  810298:	1004c03a 	cmpne	r2,r2,zero
  81029c:	1000031e 	bne	r2,zero,8102ac <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  8102a0:	00800104 	movi	r2,4
  8102a4:	e0bfff15 	stw	r2,-4(fp)
  8102a8:	00004d06 	br	8103e0 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  8102ac:	e0bffd17 	ldw	r2,-12(fp)
  8102b0:	10800003 	ldbu	r2,0(r2)
  8102b4:	10803fcc 	andi	r2,r2,255
  8102b8:	108000a0 	cmpeqi	r2,r2,2
  8102bc:	1000031e 	bne	r2,zero,8102cc <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  8102c0:	00800044 	movi	r2,1
  8102c4:	e0bfff15 	stw	r2,-4(fp)
  8102c8:	00004506 	br	8103e0 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8102cc:	0005303a 	rdctl	r2,status
  8102d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8102d4:	e0fffa17 	ldw	r3,-24(fp)
  8102d8:	00bfff84 	movi	r2,-2
  8102dc:	1884703a 	and	r2,r3,r2
  8102e0:	1001703a 	wrctl	status,r2
  
  return context;
  8102e4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  8102e8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  8102ec:	e0bffd17 	ldw	r2,-12(fp)
  8102f0:	10800283 	ldbu	r2,10(r2)
  8102f4:	10803fcc 	andi	r2,r2,255
  8102f8:	1005003a 	cmpeq	r2,r2,zero
  8102fc:	10000c1e 	bne	r2,zero,810330 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  810300:	e13ffd17 	ldw	r4,-12(fp)
  810304:	e17ffe17 	ldw	r5,-8(fp)
  810308:	01800104 	movi	r6,4
  81030c:	000f883a 	mov	r7,zero
  810310:	080c2b00 	call	80c2b0 <OS_EventTaskRdy>
  810314:	e0bffb17 	ldw	r2,-20(fp)
  810318:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81031c:	e0bff917 	ldw	r2,-28(fp)
  810320:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  810324:	080ccf00 	call	80ccf0 <OS_Sched>
        return (OS_ERR_NONE);
  810328:	e03fff15 	stw	zero,-4(fp)
  81032c:	00002c06 	br	8103e0 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  810330:	e0bffd17 	ldw	r2,-12(fp)
  810334:	10800117 	ldw	r2,4(r2)
  810338:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  81033c:	e0bffc17 	ldw	r2,-16(fp)
  810340:	10c0058b 	ldhu	r3,22(r2)
  810344:	e0bffc17 	ldw	r2,-16(fp)
  810348:	1080050b 	ldhu	r2,20(r2)
  81034c:	18ffffcc 	andi	r3,r3,65535
  810350:	10bfffcc 	andi	r2,r2,65535
  810354:	18800736 	bltu	r3,r2,810374 <OSQPost+0xfc>
  810358:	e0bffb17 	ldw	r2,-20(fp)
  81035c:	e0bff815 	stw	r2,-32(fp)
  810360:	e0bff817 	ldw	r2,-32(fp)
  810364:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  810368:	00800784 	movi	r2,30
  81036c:	e0bfff15 	stw	r2,-4(fp)
  810370:	00001b06 	br	8103e0 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  810374:	e0bffc17 	ldw	r2,-16(fp)
  810378:	10c00317 	ldw	r3,12(r2)
  81037c:	e0bffe17 	ldw	r2,-8(fp)
  810380:	18800015 	stw	r2,0(r3)
  810384:	18c00104 	addi	r3,r3,4
  810388:	e0bffc17 	ldw	r2,-16(fp)
  81038c:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  810390:	e0bffc17 	ldw	r2,-16(fp)
  810394:	1080058b 	ldhu	r2,22(r2)
  810398:	10800044 	addi	r2,r2,1
  81039c:	1007883a 	mov	r3,r2
  8103a0:	e0bffc17 	ldw	r2,-16(fp)
  8103a4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  8103a8:	e0bffc17 	ldw	r2,-16(fp)
  8103ac:	10c00317 	ldw	r3,12(r2)
  8103b0:	e0bffc17 	ldw	r2,-16(fp)
  8103b4:	10800217 	ldw	r2,8(r2)
  8103b8:	1880041e 	bne	r3,r2,8103cc <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  8103bc:	e0bffc17 	ldw	r2,-16(fp)
  8103c0:	10c00117 	ldw	r3,4(r2)
  8103c4:	e0bffc17 	ldw	r2,-16(fp)
  8103c8:	10c00315 	stw	r3,12(r2)
  8103cc:	e0bffb17 	ldw	r2,-20(fp)
  8103d0:	e0bff715 	stw	r2,-36(fp)
  8103d4:	e0bff717 	ldw	r2,-36(fp)
  8103d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8103dc:	e03fff15 	stw	zero,-4(fp)
  8103e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8103e4:	e037883a 	mov	sp,fp
  8103e8:	dfc00117 	ldw	ra,4(sp)
  8103ec:	df000017 	ldw	fp,0(sp)
  8103f0:	dec00204 	addi	sp,sp,8
  8103f4:	f800283a 	ret

008103f8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  8103f8:	defff504 	addi	sp,sp,-44
  8103fc:	dfc00a15 	stw	ra,40(sp)
  810400:	df000915 	stw	fp,36(sp)
  810404:	df000904 	addi	fp,sp,36
  810408:	e13ffd15 	stw	r4,-12(fp)
  81040c:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810410:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  810414:	e0bffd17 	ldw	r2,-12(fp)
  810418:	1004c03a 	cmpne	r2,r2,zero
  81041c:	1000031e 	bne	r2,zero,81042c <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  810420:	00800104 	movi	r2,4
  810424:	e0bfff15 	stw	r2,-4(fp)
  810428:	00004f06 	br	810568 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  81042c:	e0bffd17 	ldw	r2,-12(fp)
  810430:	10800003 	ldbu	r2,0(r2)
  810434:	10803fcc 	andi	r2,r2,255
  810438:	108000a0 	cmpeqi	r2,r2,2
  81043c:	1000031e 	bne	r2,zero,81044c <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  810440:	00800044 	movi	r2,1
  810444:	e0bfff15 	stw	r2,-4(fp)
  810448:	00004706 	br	810568 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81044c:	0005303a 	rdctl	r2,status
  810450:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810454:	e0fffa17 	ldw	r3,-24(fp)
  810458:	00bfff84 	movi	r2,-2
  81045c:	1884703a 	and	r2,r3,r2
  810460:	1001703a 	wrctl	status,r2
  
  return context;
  810464:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  810468:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  81046c:	e0bffd17 	ldw	r2,-12(fp)
  810470:	10800283 	ldbu	r2,10(r2)
  810474:	10803fcc 	andi	r2,r2,255
  810478:	1005003a 	cmpeq	r2,r2,zero
  81047c:	10000c1e 	bne	r2,zero,8104b0 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  810480:	e13ffd17 	ldw	r4,-12(fp)
  810484:	e17ffe17 	ldw	r5,-8(fp)
  810488:	01800104 	movi	r6,4
  81048c:	000f883a 	mov	r7,zero
  810490:	080c2b00 	call	80c2b0 <OS_EventTaskRdy>
  810494:	e0bffb17 	ldw	r2,-20(fp)
  810498:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81049c:	e0bff917 	ldw	r2,-28(fp)
  8104a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  8104a4:	080ccf00 	call	80ccf0 <OS_Sched>
        return (OS_ERR_NONE);
  8104a8:	e03fff15 	stw	zero,-4(fp)
  8104ac:	00002e06 	br	810568 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  8104b0:	e0bffd17 	ldw	r2,-12(fp)
  8104b4:	10800117 	ldw	r2,4(r2)
  8104b8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  8104bc:	e0bffc17 	ldw	r2,-16(fp)
  8104c0:	10c0058b 	ldhu	r3,22(r2)
  8104c4:	e0bffc17 	ldw	r2,-16(fp)
  8104c8:	1080050b 	ldhu	r2,20(r2)
  8104cc:	18ffffcc 	andi	r3,r3,65535
  8104d0:	10bfffcc 	andi	r2,r2,65535
  8104d4:	18800736 	bltu	r3,r2,8104f4 <OSQPostFront+0xfc>
  8104d8:	e0bffb17 	ldw	r2,-20(fp)
  8104dc:	e0bff815 	stw	r2,-32(fp)
  8104e0:	e0bff817 	ldw	r2,-32(fp)
  8104e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8104e8:	00800784 	movi	r2,30
  8104ec:	e0bfff15 	stw	r2,-4(fp)
  8104f0:	00001d06 	br	810568 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  8104f4:	e0bffc17 	ldw	r2,-16(fp)
  8104f8:	10c00417 	ldw	r3,16(r2)
  8104fc:	e0bffc17 	ldw	r2,-16(fp)
  810500:	10800117 	ldw	r2,4(r2)
  810504:	1880041e 	bne	r3,r2,810518 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  810508:	e0bffc17 	ldw	r2,-16(fp)
  81050c:	10c00217 	ldw	r3,8(r2)
  810510:	e0bffc17 	ldw	r2,-16(fp)
  810514:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  810518:	e0bffc17 	ldw	r2,-16(fp)
  81051c:	10800417 	ldw	r2,16(r2)
  810520:	10ffff04 	addi	r3,r2,-4
  810524:	e0bffc17 	ldw	r2,-16(fp)
  810528:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  81052c:	e0bffc17 	ldw	r2,-16(fp)
  810530:	10c00417 	ldw	r3,16(r2)
  810534:	e0bffe17 	ldw	r2,-8(fp)
  810538:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  81053c:	e0bffc17 	ldw	r2,-16(fp)
  810540:	1080058b 	ldhu	r2,22(r2)
  810544:	10800044 	addi	r2,r2,1
  810548:	1007883a 	mov	r3,r2
  81054c:	e0bffc17 	ldw	r2,-16(fp)
  810550:	10c0058d 	sth	r3,22(r2)
  810554:	e0bffb17 	ldw	r2,-20(fp)
  810558:	e0bff715 	stw	r2,-36(fp)
  81055c:	e0bff717 	ldw	r2,-36(fp)
  810560:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  810564:	e03fff15 	stw	zero,-4(fp)
  810568:	e0bfff17 	ldw	r2,-4(fp)
}
  81056c:	e037883a 	mov	sp,fp
  810570:	dfc00117 	ldw	ra,4(sp)
  810574:	df000017 	ldw	fp,0(sp)
  810578:	dec00204 	addi	sp,sp,8
  81057c:	f800283a 	ret

00810580 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  810580:	defff404 	addi	sp,sp,-48
  810584:	dfc00b15 	stw	ra,44(sp)
  810588:	df000a15 	stw	fp,40(sp)
  81058c:	df000a04 	addi	fp,sp,40
  810590:	e13ffc15 	stw	r4,-16(fp)
  810594:	e17ffd15 	stw	r5,-12(fp)
  810598:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81059c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8105a0:	e0bffc17 	ldw	r2,-16(fp)
  8105a4:	1004c03a 	cmpne	r2,r2,zero
  8105a8:	1000031e 	bne	r2,zero,8105b8 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  8105ac:	00800104 	movi	r2,4
  8105b0:	e0bfff15 	stw	r2,-4(fp)
  8105b4:	00007906 	br	81079c <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  8105b8:	e0bffc17 	ldw	r2,-16(fp)
  8105bc:	10800003 	ldbu	r2,0(r2)
  8105c0:	10803fcc 	andi	r2,r2,255
  8105c4:	108000a0 	cmpeqi	r2,r2,2
  8105c8:	1000031e 	bne	r2,zero,8105d8 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  8105cc:	00800044 	movi	r2,1
  8105d0:	e0bfff15 	stw	r2,-4(fp)
  8105d4:	00007106 	br	81079c <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8105d8:	0005303a 	rdctl	r2,status
  8105dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8105e0:	e0fff917 	ldw	r3,-28(fp)
  8105e4:	00bfff84 	movi	r2,-2
  8105e8:	1884703a 	and	r2,r3,r2
  8105ec:	1001703a 	wrctl	status,r2
  
  return context;
  8105f0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8105f4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  8105f8:	e0bffc17 	ldw	r2,-16(fp)
  8105fc:	10800283 	ldbu	r2,10(r2)
  810600:	10803fcc 	andi	r2,r2,255
  810604:	1005003a 	cmpeq	r2,r2,zero
  810608:	1000211e 	bne	r2,zero,810690 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  81060c:	e0bffe03 	ldbu	r2,-8(fp)
  810610:	1080004c 	andi	r2,r2,1
  810614:	10803fcc 	andi	r2,r2,255
  810618:	1005003a 	cmpeq	r2,r2,zero
  81061c:	10000c1e 	bne	r2,zero,810650 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  810620:	00000506 	br	810638 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  810624:	e13ffc17 	ldw	r4,-16(fp)
  810628:	e17ffd17 	ldw	r5,-12(fp)
  81062c:	01800104 	movi	r6,4
  810630:	000f883a 	mov	r7,zero
  810634:	080c2b00 	call	80c2b0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  810638:	e0bffc17 	ldw	r2,-16(fp)
  81063c:	10800283 	ldbu	r2,10(r2)
  810640:	10803fcc 	andi	r2,r2,255
  810644:	1004c03a 	cmpne	r2,r2,zero
  810648:	103ff61e 	bne	r2,zero,810624 <OSQPostOpt+0xa4>
  81064c:	00000506 	br	810664 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  810650:	e13ffc17 	ldw	r4,-16(fp)
  810654:	e17ffd17 	ldw	r5,-12(fp)
  810658:	01800104 	movi	r6,4
  81065c:	000f883a 	mov	r7,zero
  810660:	080c2b00 	call	80c2b0 <OS_EventTaskRdy>
  810664:	e0bffa17 	ldw	r2,-24(fp)
  810668:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81066c:	e0bff817 	ldw	r2,-32(fp)
  810670:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  810674:	e0bffe03 	ldbu	r2,-8(fp)
  810678:	1080010c 	andi	r2,r2,4
  81067c:	1004c03a 	cmpne	r2,r2,zero
  810680:	1000011e 	bne	r2,zero,810688 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  810684:	080ccf00 	call	80ccf0 <OS_Sched>
        }
        return (OS_ERR_NONE);
  810688:	e03fff15 	stw	zero,-4(fp)
  81068c:	00004306 	br	81079c <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  810690:	e0bffc17 	ldw	r2,-16(fp)
  810694:	10800117 	ldw	r2,4(r2)
  810698:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  81069c:	e0bffb17 	ldw	r2,-20(fp)
  8106a0:	10c0058b 	ldhu	r3,22(r2)
  8106a4:	e0bffb17 	ldw	r2,-20(fp)
  8106a8:	1080050b 	ldhu	r2,20(r2)
  8106ac:	18ffffcc 	andi	r3,r3,65535
  8106b0:	10bfffcc 	andi	r2,r2,65535
  8106b4:	18800736 	bltu	r3,r2,8106d4 <OSQPostOpt+0x154>
  8106b8:	e0bffa17 	ldw	r2,-24(fp)
  8106bc:	e0bff715 	stw	r2,-36(fp)
  8106c0:	e0bff717 	ldw	r2,-36(fp)
  8106c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8106c8:	00800784 	movi	r2,30
  8106cc:	e0bfff15 	stw	r2,-4(fp)
  8106d0:	00003206 	br	81079c <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  8106d4:	e0bffe03 	ldbu	r2,-8(fp)
  8106d8:	1080008c 	andi	r2,r2,2
  8106dc:	1005003a 	cmpeq	r2,r2,zero
  8106e0:	1000131e 	bne	r2,zero,810730 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  8106e4:	e0bffb17 	ldw	r2,-20(fp)
  8106e8:	10c00417 	ldw	r3,16(r2)
  8106ec:	e0bffb17 	ldw	r2,-20(fp)
  8106f0:	10800117 	ldw	r2,4(r2)
  8106f4:	1880041e 	bne	r3,r2,810708 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  8106f8:	e0bffb17 	ldw	r2,-20(fp)
  8106fc:	10c00217 	ldw	r3,8(r2)
  810700:	e0bffb17 	ldw	r2,-20(fp)
  810704:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  810708:	e0bffb17 	ldw	r2,-20(fp)
  81070c:	10800417 	ldw	r2,16(r2)
  810710:	10ffff04 	addi	r3,r2,-4
  810714:	e0bffb17 	ldw	r2,-20(fp)
  810718:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  81071c:	e0bffb17 	ldw	r2,-20(fp)
  810720:	10c00417 	ldw	r3,16(r2)
  810724:	e0bffd17 	ldw	r2,-12(fp)
  810728:	18800015 	stw	r2,0(r3)
  81072c:	00001006 	br	810770 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  810730:	e0bffb17 	ldw	r2,-20(fp)
  810734:	10c00317 	ldw	r3,12(r2)
  810738:	e0bffd17 	ldw	r2,-12(fp)
  81073c:	18800015 	stw	r2,0(r3)
  810740:	18c00104 	addi	r3,r3,4
  810744:	e0bffb17 	ldw	r2,-20(fp)
  810748:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  81074c:	e0bffb17 	ldw	r2,-20(fp)
  810750:	10c00317 	ldw	r3,12(r2)
  810754:	e0bffb17 	ldw	r2,-20(fp)
  810758:	10800217 	ldw	r2,8(r2)
  81075c:	1880041e 	bne	r3,r2,810770 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  810760:	e0bffb17 	ldw	r2,-20(fp)
  810764:	10c00117 	ldw	r3,4(r2)
  810768:	e0bffb17 	ldw	r2,-20(fp)
  81076c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  810770:	e0bffb17 	ldw	r2,-20(fp)
  810774:	1080058b 	ldhu	r2,22(r2)
  810778:	10800044 	addi	r2,r2,1
  81077c:	1007883a 	mov	r3,r2
  810780:	e0bffb17 	ldw	r2,-20(fp)
  810784:	10c0058d 	sth	r3,22(r2)
  810788:	e0bffa17 	ldw	r2,-24(fp)
  81078c:	e0bff615 	stw	r2,-40(fp)
  810790:	e0bff617 	ldw	r2,-40(fp)
  810794:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  810798:	e03fff15 	stw	zero,-4(fp)
  81079c:	e0bfff17 	ldw	r2,-4(fp)
}
  8107a0:	e037883a 	mov	sp,fp
  8107a4:	dfc00117 	ldw	ra,4(sp)
  8107a8:	df000017 	ldw	fp,0(sp)
  8107ac:	dec00204 	addi	sp,sp,8
  8107b0:	f800283a 	ret

008107b4 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  8107b4:	defff504 	addi	sp,sp,-44
  8107b8:	df000a15 	stw	fp,40(sp)
  8107bc:	df000a04 	addi	fp,sp,40
  8107c0:	e13ffd15 	stw	r4,-12(fp)
  8107c4:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8107c8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  8107cc:	e0bffd17 	ldw	r2,-12(fp)
  8107d0:	1004c03a 	cmpne	r2,r2,zero
  8107d4:	1000031e 	bne	r2,zero,8107e4 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  8107d8:	00800104 	movi	r2,4
  8107dc:	e0bfff15 	stw	r2,-4(fp)
  8107e0:	00004f06 	br	810920 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  8107e4:	e0bffe17 	ldw	r2,-8(fp)
  8107e8:	1004c03a 	cmpne	r2,r2,zero
  8107ec:	1000031e 	bne	r2,zero,8107fc <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  8107f0:	00800244 	movi	r2,9
  8107f4:	e0bfff15 	stw	r2,-4(fp)
  8107f8:	00004906 	br	810920 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  8107fc:	e0bffd17 	ldw	r2,-12(fp)
  810800:	10800003 	ldbu	r2,0(r2)
  810804:	10803fcc 	andi	r2,r2,255
  810808:	108000a0 	cmpeqi	r2,r2,2
  81080c:	1000031e 	bne	r2,zero,81081c <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  810810:	00800044 	movi	r2,1
  810814:	e0bfff15 	stw	r2,-4(fp)
  810818:	00004106 	br	810920 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81081c:	0005303a 	rdctl	r2,status
  810820:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810824:	e0fff717 	ldw	r3,-36(fp)
  810828:	00bfff84 	movi	r2,-2
  81082c:	1884703a 	and	r2,r3,r2
  810830:	1001703a 	wrctl	status,r2
  
  return context;
  810834:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  810838:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  81083c:	e0bffd17 	ldw	r2,-12(fp)
  810840:	10c00283 	ldbu	r3,10(r2)
  810844:	e0bffe17 	ldw	r2,-8(fp)
  810848:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  81084c:	e0bffd17 	ldw	r2,-12(fp)
  810850:	108002c4 	addi	r2,r2,11
  810854:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  810858:	e0bffe17 	ldw	r2,-8(fp)
  81085c:	10800204 	addi	r2,r2,8
  810860:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  810864:	e03ffb05 	stb	zero,-20(fp)
  810868:	00000d06 	br	8108a0 <OSQQuery+0xec>
        *pdest++ = *psrc++;
  81086c:	e0bffa17 	ldw	r2,-24(fp)
  810870:	10c00003 	ldbu	r3,0(r2)
  810874:	e0bff917 	ldw	r2,-28(fp)
  810878:	10c00005 	stb	r3,0(r2)
  81087c:	e0bff917 	ldw	r2,-28(fp)
  810880:	10800044 	addi	r2,r2,1
  810884:	e0bff915 	stw	r2,-28(fp)
  810888:	e0bffa17 	ldw	r2,-24(fp)
  81088c:	10800044 	addi	r2,r2,1
  810890:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  810894:	e0bffb03 	ldbu	r2,-20(fp)
  810898:	10800044 	addi	r2,r2,1
  81089c:	e0bffb05 	stb	r2,-20(fp)
  8108a0:	e0bffb03 	ldbu	r2,-20(fp)
  8108a4:	108000f0 	cmpltui	r2,r2,3
  8108a8:	103ff01e 	bne	r2,zero,81086c <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  8108ac:	e0bffd17 	ldw	r2,-12(fp)
  8108b0:	10800117 	ldw	r2,4(r2)
  8108b4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  8108b8:	e0bffc17 	ldw	r2,-16(fp)
  8108bc:	1080058b 	ldhu	r2,22(r2)
  8108c0:	10bfffcc 	andi	r2,r2,65535
  8108c4:	1005003a 	cmpeq	r2,r2,zero
  8108c8:	1000061e 	bne	r2,zero,8108e4 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  8108cc:	e0bffc17 	ldw	r2,-16(fp)
  8108d0:	10800417 	ldw	r2,16(r2)
  8108d4:	10c00017 	ldw	r3,0(r2)
  8108d8:	e0bffe17 	ldw	r2,-8(fp)
  8108dc:	10c00015 	stw	r3,0(r2)
  8108e0:	00000206 	br	8108ec <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  8108e4:	e0bffe17 	ldw	r2,-8(fp)
  8108e8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  8108ec:	e0bffc17 	ldw	r2,-16(fp)
  8108f0:	10c0058b 	ldhu	r3,22(r2)
  8108f4:	e0bffe17 	ldw	r2,-8(fp)
  8108f8:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  8108fc:	e0bffc17 	ldw	r2,-16(fp)
  810900:	10c0050b 	ldhu	r3,20(r2)
  810904:	e0bffe17 	ldw	r2,-8(fp)
  810908:	10c0018d 	sth	r3,6(r2)
  81090c:	e0bff817 	ldw	r2,-32(fp)
  810910:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810914:	e0bff617 	ldw	r2,-40(fp)
  810918:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81091c:	e03fff15 	stw	zero,-4(fp)
  810920:	e0bfff17 	ldw	r2,-4(fp)
}
  810924:	e037883a 	mov	sp,fp
  810928:	df000017 	ldw	fp,0(sp)
  81092c:	dec00104 	addi	sp,sp,4
  810930:	f800283a 	ret

00810934 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  810934:	defffb04 	addi	sp,sp,-20
  810938:	dfc00415 	stw	ra,16(sp)
  81093c:	df000315 	stw	fp,12(sp)
  810940:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  810944:	010020f4 	movhi	r4,131
  810948:	21210c04 	addi	r4,r4,-31696
  81094c:	01407804 	movi	r5,480
  810950:	080cc300 	call	80cc30 <OS_MemClr>
    pq1 = &OSQTbl[0];
  810954:	008020f4 	movhi	r2,131
  810958:	10a10c04 	addi	r2,r2,-31696
  81095c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  810960:	008020f4 	movhi	r2,131
  810964:	10a11204 	addi	r2,r2,-31672
  810968:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  81096c:	e03fff0d 	sth	zero,-4(fp)
  810970:	00000c06 	br	8109a4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  810974:	e0fffe17 	ldw	r3,-8(fp)
  810978:	e0bffd17 	ldw	r2,-12(fp)
  81097c:	18800015 	stw	r2,0(r3)
        pq1++;
  810980:	e0bffe17 	ldw	r2,-8(fp)
  810984:	10800604 	addi	r2,r2,24
  810988:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  81098c:	e0bffd17 	ldw	r2,-12(fp)
  810990:	10800604 	addi	r2,r2,24
  810994:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  810998:	e0bfff0b 	ldhu	r2,-4(fp)
  81099c:	10800044 	addi	r2,r2,1
  8109a0:	e0bfff0d 	sth	r2,-4(fp)
  8109a4:	e0bfff0b 	ldhu	r2,-4(fp)
  8109a8:	108004f0 	cmpltui	r2,r2,19
  8109ac:	103ff11e 	bne	r2,zero,810974 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  8109b0:	e0bffe17 	ldw	r2,-8(fp)
  8109b4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  8109b8:	00c020b4 	movhi	r3,130
  8109bc:	18fb0104 	addi	r3,r3,-5116
  8109c0:	008020f4 	movhi	r2,131
  8109c4:	10a10c04 	addi	r2,r2,-31696
  8109c8:	18800015 	stw	r2,0(r3)
#endif
}
  8109cc:	e037883a 	mov	sp,fp
  8109d0:	dfc00117 	ldw	ra,4(sp)
  8109d4:	df000017 	ldw	fp,0(sp)
  8109d8:	dec00204 	addi	sp,sp,8
  8109dc:	f800283a 	ret

008109e0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  8109e0:	defff904 	addi	sp,sp,-28
  8109e4:	df000615 	stw	fp,24(sp)
  8109e8:	df000604 	addi	fp,sp,24
  8109ec:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8109f0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8109f4:	e0bffe17 	ldw	r2,-8(fp)
  8109f8:	1004c03a 	cmpne	r2,r2,zero
  8109fc:	1000021e 	bne	r2,zero,810a08 <OSSemAccept+0x28>
        return (0);
  810a00:	e03fff15 	stw	zero,-4(fp)
  810a04:	00002106 	br	810a8c <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  810a08:	e0bffe17 	ldw	r2,-8(fp)
  810a0c:	10800003 	ldbu	r2,0(r2)
  810a10:	10803fcc 	andi	r2,r2,255
  810a14:	108000e0 	cmpeqi	r2,r2,3
  810a18:	1000021e 	bne	r2,zero,810a24 <OSSemAccept+0x44>
        return (0);
  810a1c:	e03fff15 	stw	zero,-4(fp)
  810a20:	00001a06 	br	810a8c <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810a24:	0005303a 	rdctl	r2,status
  810a28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810a2c:	e0fffb17 	ldw	r3,-20(fp)
  810a30:	00bfff84 	movi	r2,-2
  810a34:	1884703a 	and	r2,r3,r2
  810a38:	1001703a 	wrctl	status,r2
  
  return context;
  810a3c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  810a40:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  810a44:	e0bffe17 	ldw	r2,-8(fp)
  810a48:	1080020b 	ldhu	r2,8(r2)
  810a4c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  810a50:	e0bffd0b 	ldhu	r2,-12(fp)
  810a54:	1005003a 	cmpeq	r2,r2,zero
  810a58:	1000061e 	bne	r2,zero,810a74 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  810a5c:	e0bffe17 	ldw	r2,-8(fp)
  810a60:	1080020b 	ldhu	r2,8(r2)
  810a64:	10bfffc4 	addi	r2,r2,-1
  810a68:	1007883a 	mov	r3,r2
  810a6c:	e0bffe17 	ldw	r2,-8(fp)
  810a70:	10c0020d 	sth	r3,8(r2)
  810a74:	e0bffc17 	ldw	r2,-16(fp)
  810a78:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810a7c:	e0bffa17 	ldw	r2,-24(fp)
  810a80:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  810a84:	e0bffd0b 	ldhu	r2,-12(fp)
  810a88:	e0bfff15 	stw	r2,-4(fp)
  810a8c:	e0bfff17 	ldw	r2,-4(fp)
}
  810a90:	e037883a 	mov	sp,fp
  810a94:	df000017 	ldw	fp,0(sp)
  810a98:	dec00104 	addi	sp,sp,4
  810a9c:	f800283a 	ret

00810aa0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  810aa0:	defff804 	addi	sp,sp,-32
  810aa4:	dfc00715 	stw	ra,28(sp)
  810aa8:	df000615 	stw	fp,24(sp)
  810aac:	df000604 	addi	fp,sp,24
  810ab0:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  810ab4:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  810ab8:	008020b4 	movhi	r2,130
  810abc:	10bb0404 	addi	r2,r2,-5104
  810ac0:	10800003 	ldbu	r2,0(r2)
  810ac4:	10803fcc 	andi	r2,r2,255
  810ac8:	1005003a 	cmpeq	r2,r2,zero
  810acc:	1000021e 	bne	r2,zero,810ad8 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  810ad0:	e03fff15 	stw	zero,-4(fp)
  810ad4:	00003106 	br	810b9c <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810ad8:	0005303a 	rdctl	r2,status
  810adc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810ae0:	e0fffb17 	ldw	r3,-20(fp)
  810ae4:	00bfff84 	movi	r2,-2
  810ae8:	1884703a 	and	r2,r3,r2
  810aec:	1001703a 	wrctl	status,r2
  
  return context;
  810af0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  810af4:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  810af8:	008020b4 	movhi	r2,130
  810afc:	10bb0304 	addi	r2,r2,-5108
  810b00:	10800017 	ldw	r2,0(r2)
  810b04:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  810b08:	008020b4 	movhi	r2,130
  810b0c:	10bb0304 	addi	r2,r2,-5108
  810b10:	10800017 	ldw	r2,0(r2)
  810b14:	1005003a 	cmpeq	r2,r2,zero
  810b18:	1000081e 	bne	r2,zero,810b3c <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  810b1c:	008020b4 	movhi	r2,130
  810b20:	10bb0304 	addi	r2,r2,-5108
  810b24:	10800017 	ldw	r2,0(r2)
  810b28:	10800117 	ldw	r2,4(r2)
  810b2c:	1007883a 	mov	r3,r2
  810b30:	008020b4 	movhi	r2,130
  810b34:	10bb0304 	addi	r2,r2,-5108
  810b38:	10c00015 	stw	r3,0(r2)
  810b3c:	e0bffc17 	ldw	r2,-16(fp)
  810b40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810b44:	e0bffa17 	ldw	r2,-24(fp)
  810b48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  810b4c:	e0bffd17 	ldw	r2,-12(fp)
  810b50:	1005003a 	cmpeq	r2,r2,zero
  810b54:	10000f1e 	bne	r2,zero,810b94 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  810b58:	e0fffd17 	ldw	r3,-12(fp)
  810b5c:	008000c4 	movi	r2,3
  810b60:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  810b64:	e0fffd17 	ldw	r3,-12(fp)
  810b68:	e0bffe0b 	ldhu	r2,-8(fp)
  810b6c:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  810b70:	e0bffd17 	ldw	r2,-12(fp)
  810b74:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  810b78:	e0fffd17 	ldw	r3,-12(fp)
  810b7c:	00800fc4 	movi	r2,63
  810b80:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  810b84:	e0bffd17 	ldw	r2,-12(fp)
  810b88:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  810b8c:	e13ffd17 	ldw	r4,-12(fp)
  810b90:	080c8640 	call	80c864 <OS_EventWaitListInit>
    }
    return (pevent);
  810b94:	e0bffd17 	ldw	r2,-12(fp)
  810b98:	e0bfff15 	stw	r2,-4(fp)
  810b9c:	e0bfff17 	ldw	r2,-4(fp)
}
  810ba0:	e037883a 	mov	sp,fp
  810ba4:	dfc00117 	ldw	ra,4(sp)
  810ba8:	df000017 	ldw	fp,0(sp)
  810bac:	dec00204 	addi	sp,sp,8
  810bb0:	f800283a 	ret

00810bb4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  810bb4:	defff104 	addi	sp,sp,-60
  810bb8:	dfc00e15 	stw	ra,56(sp)
  810bbc:	df000d15 	stw	fp,52(sp)
  810bc0:	df000d04 	addi	fp,sp,52
  810bc4:	e13ffb15 	stw	r4,-20(fp)
  810bc8:	e1bffd15 	stw	r6,-12(fp)
  810bcc:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  810bd0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  810bd4:	e0bffd17 	ldw	r2,-12(fp)
  810bd8:	1004c03a 	cmpne	r2,r2,zero
  810bdc:	1000031e 	bne	r2,zero,810bec <OSSemDel+0x38>
        return (pevent);
  810be0:	e0bffb17 	ldw	r2,-20(fp)
  810be4:	e0bfff15 	stw	r2,-4(fp)
  810be8:	00009406 	br	810e3c <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  810bec:	e0bffb17 	ldw	r2,-20(fp)
  810bf0:	1004c03a 	cmpne	r2,r2,zero
  810bf4:	1000061e 	bne	r2,zero,810c10 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  810bf8:	e0fffd17 	ldw	r3,-12(fp)
  810bfc:	00800104 	movi	r2,4
  810c00:	18800005 	stb	r2,0(r3)
        return (pevent);
  810c04:	e0fffb17 	ldw	r3,-20(fp)
  810c08:	e0ffff15 	stw	r3,-4(fp)
  810c0c:	00008b06 	br	810e3c <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  810c10:	e0bffb17 	ldw	r2,-20(fp)
  810c14:	10800003 	ldbu	r2,0(r2)
  810c18:	10803fcc 	andi	r2,r2,255
  810c1c:	108000e0 	cmpeqi	r2,r2,3
  810c20:	1000061e 	bne	r2,zero,810c3c <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  810c24:	e0fffd17 	ldw	r3,-12(fp)
  810c28:	00800044 	movi	r2,1
  810c2c:	18800005 	stb	r2,0(r3)
        return (pevent);
  810c30:	e0bffb17 	ldw	r2,-20(fp)
  810c34:	e0bfff15 	stw	r2,-4(fp)
  810c38:	00008006 	br	810e3c <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  810c3c:	008020b4 	movhi	r2,130
  810c40:	10bb0404 	addi	r2,r2,-5104
  810c44:	10800003 	ldbu	r2,0(r2)
  810c48:	10803fcc 	andi	r2,r2,255
  810c4c:	1005003a 	cmpeq	r2,r2,zero
  810c50:	1000061e 	bne	r2,zero,810c6c <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  810c54:	e0fffd17 	ldw	r3,-12(fp)
  810c58:	008003c4 	movi	r2,15
  810c5c:	18800005 	stb	r2,0(r3)
        return (pevent);
  810c60:	e0fffb17 	ldw	r3,-20(fp)
  810c64:	e0ffff15 	stw	r3,-4(fp)
  810c68:	00007406 	br	810e3c <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810c6c:	0005303a 	rdctl	r2,status
  810c70:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810c74:	e0fff717 	ldw	r3,-36(fp)
  810c78:	00bfff84 	movi	r2,-2
  810c7c:	1884703a 	and	r2,r3,r2
  810c80:	1001703a 	wrctl	status,r2
  
  return context;
  810c84:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  810c88:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  810c8c:	e0bffb17 	ldw	r2,-20(fp)
  810c90:	10800283 	ldbu	r2,10(r2)
  810c94:	10803fcc 	andi	r2,r2,255
  810c98:	1005003a 	cmpeq	r2,r2,zero
  810c9c:	1000031e 	bne	r2,zero,810cac <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  810ca0:	00800044 	movi	r2,1
  810ca4:	e0bffa05 	stb	r2,-24(fp)
  810ca8:	00000106 	br	810cb0 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  810cac:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  810cb0:	e0bffc03 	ldbu	r2,-16(fp)
  810cb4:	e0bffe15 	stw	r2,-8(fp)
  810cb8:	e0fffe17 	ldw	r3,-8(fp)
  810cbc:	1805003a 	cmpeq	r2,r3,zero
  810cc0:	1000041e 	bne	r2,zero,810cd4 <OSSemDel+0x120>
  810cc4:	e0fffe17 	ldw	r3,-8(fp)
  810cc8:	18800060 	cmpeqi	r2,r3,1
  810ccc:	10002d1e 	bne	r2,zero,810d84 <OSSemDel+0x1d0>
  810cd0:	00004f06 	br	810e10 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  810cd4:	e0bffa03 	ldbu	r2,-24(fp)
  810cd8:	1004c03a 	cmpne	r2,r2,zero
  810cdc:	10001a1e 	bne	r2,zero,810d48 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  810ce0:	e0fffb17 	ldw	r3,-20(fp)
  810ce4:	00800fc4 	movi	r2,63
  810ce8:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  810cec:	e0bffb17 	ldw	r2,-20(fp)
  810cf0:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  810cf4:	e0bffb17 	ldw	r2,-20(fp)
  810cf8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  810cfc:	008020b4 	movhi	r2,130
  810d00:	10bb0304 	addi	r2,r2,-5108
  810d04:	10c00017 	ldw	r3,0(r2)
  810d08:	e0bffb17 	ldw	r2,-20(fp)
  810d0c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  810d10:	e0bffb17 	ldw	r2,-20(fp)
  810d14:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  810d18:	00c020b4 	movhi	r3,130
  810d1c:	18fb0304 	addi	r3,r3,-5108
  810d20:	e0bffb17 	ldw	r2,-20(fp)
  810d24:	18800015 	stw	r2,0(r3)
  810d28:	e0bff817 	ldw	r2,-32(fp)
  810d2c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810d30:	e0bff617 	ldw	r2,-40(fp)
  810d34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  810d38:	e0bffd17 	ldw	r2,-12(fp)
  810d3c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  810d40:	e03ff915 	stw	zero,-28(fp)
  810d44:	00003b06 	br	810e34 <OSSemDel+0x280>
  810d48:	e0bff817 	ldw	r2,-32(fp)
  810d4c:	e0bff515 	stw	r2,-44(fp)
  810d50:	e0bff517 	ldw	r2,-44(fp)
  810d54:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  810d58:	e0fffd17 	ldw	r3,-12(fp)
  810d5c:	00801244 	movi	r2,73
  810d60:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  810d64:	e0bffb17 	ldw	r2,-20(fp)
  810d68:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  810d6c:	00003106 	br	810e34 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  810d70:	e13ffb17 	ldw	r4,-20(fp)
  810d74:	000b883a 	mov	r5,zero
  810d78:	01800044 	movi	r6,1
  810d7c:	000f883a 	mov	r7,zero
  810d80:	080c2b00 	call	80c2b0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  810d84:	e0bffb17 	ldw	r2,-20(fp)
  810d88:	10800283 	ldbu	r2,10(r2)
  810d8c:	10803fcc 	andi	r2,r2,255
  810d90:	1004c03a 	cmpne	r2,r2,zero
  810d94:	103ff61e 	bne	r2,zero,810d70 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  810d98:	e0fffb17 	ldw	r3,-20(fp)
  810d9c:	00800fc4 	movi	r2,63
  810da0:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  810da4:	e0bffb17 	ldw	r2,-20(fp)
  810da8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  810dac:	e0bffb17 	ldw	r2,-20(fp)
  810db0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  810db4:	008020b4 	movhi	r2,130
  810db8:	10bb0304 	addi	r2,r2,-5108
  810dbc:	10c00017 	ldw	r3,0(r2)
  810dc0:	e0bffb17 	ldw	r2,-20(fp)
  810dc4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  810dc8:	e0bffb17 	ldw	r2,-20(fp)
  810dcc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  810dd0:	00c020b4 	movhi	r3,130
  810dd4:	18fb0304 	addi	r3,r3,-5108
  810dd8:	e0bffb17 	ldw	r2,-20(fp)
  810ddc:	18800015 	stw	r2,0(r3)
  810de0:	e0bff817 	ldw	r2,-32(fp)
  810de4:	e0bff415 	stw	r2,-48(fp)
  810de8:	e0bff417 	ldw	r2,-48(fp)
  810dec:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  810df0:	e0bffa03 	ldbu	r2,-24(fp)
  810df4:	10800058 	cmpnei	r2,r2,1
  810df8:	1000011e 	bne	r2,zero,810e00 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  810dfc:	080ccf00 	call	80ccf0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  810e00:	e0bffd17 	ldw	r2,-12(fp)
  810e04:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  810e08:	e03ff915 	stw	zero,-28(fp)
             break;
  810e0c:	00000906 	br	810e34 <OSSemDel+0x280>
  810e10:	e0bff817 	ldw	r2,-32(fp)
  810e14:	e0bff315 	stw	r2,-52(fp)
  810e18:	e0bff317 	ldw	r2,-52(fp)
  810e1c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  810e20:	e0fffd17 	ldw	r3,-12(fp)
  810e24:	008001c4 	movi	r2,7
  810e28:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  810e2c:	e0bffb17 	ldw	r2,-20(fp)
  810e30:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  810e34:	e0bff917 	ldw	r2,-28(fp)
  810e38:	e0bfff15 	stw	r2,-4(fp)
  810e3c:	e0bfff17 	ldw	r2,-4(fp)
}
  810e40:	e037883a 	mov	sp,fp
  810e44:	dfc00117 	ldw	ra,4(sp)
  810e48:	df000017 	ldw	fp,0(sp)
  810e4c:	dec00204 	addi	sp,sp,8
  810e50:	f800283a 	ret

00810e54 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  810e54:	defff404 	addi	sp,sp,-48
  810e58:	dfc00b15 	stw	ra,44(sp)
  810e5c:	df000a15 	stw	fp,40(sp)
  810e60:	df000a04 	addi	fp,sp,40
  810e64:	e13ffc15 	stw	r4,-16(fp)
  810e68:	e1bffe15 	stw	r6,-8(fp)
  810e6c:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810e70:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  810e74:	e0bffe17 	ldw	r2,-8(fp)
  810e78:	1005003a 	cmpeq	r2,r2,zero
  810e7c:	10008f1e 	bne	r2,zero,8110bc <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  810e80:	e0bffc17 	ldw	r2,-16(fp)
  810e84:	1004c03a 	cmpne	r2,r2,zero
  810e88:	1000041e 	bne	r2,zero,810e9c <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  810e8c:	e0fffe17 	ldw	r3,-8(fp)
  810e90:	00800104 	movi	r2,4
  810e94:	18800005 	stb	r2,0(r3)
        return;
  810e98:	00008806 	br	8110bc <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  810e9c:	e0bffc17 	ldw	r2,-16(fp)
  810ea0:	10800003 	ldbu	r2,0(r2)
  810ea4:	10803fcc 	andi	r2,r2,255
  810ea8:	108000e0 	cmpeqi	r2,r2,3
  810eac:	1000041e 	bne	r2,zero,810ec0 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  810eb0:	e0fffe17 	ldw	r3,-8(fp)
  810eb4:	00800044 	movi	r2,1
  810eb8:	18800005 	stb	r2,0(r3)
        return;
  810ebc:	00007f06 	br	8110bc <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  810ec0:	008020b4 	movhi	r2,130
  810ec4:	10bb0404 	addi	r2,r2,-5104
  810ec8:	10800003 	ldbu	r2,0(r2)
  810ecc:	10803fcc 	andi	r2,r2,255
  810ed0:	1005003a 	cmpeq	r2,r2,zero
  810ed4:	1000041e 	bne	r2,zero,810ee8 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  810ed8:	e0fffe17 	ldw	r3,-8(fp)
  810edc:	00800084 	movi	r2,2
  810ee0:	18800005 	stb	r2,0(r3)
        return;
  810ee4:	00007506 	br	8110bc <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  810ee8:	008020b4 	movhi	r2,130
  810eec:	10baf604 	addi	r2,r2,-5160
  810ef0:	10800003 	ldbu	r2,0(r2)
  810ef4:	10803fcc 	andi	r2,r2,255
  810ef8:	1005003a 	cmpeq	r2,r2,zero
  810efc:	1000041e 	bne	r2,zero,810f10 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  810f00:	e0fffe17 	ldw	r3,-8(fp)
  810f04:	00800344 	movi	r2,13
  810f08:	18800005 	stb	r2,0(r3)
        return;
  810f0c:	00006b06 	br	8110bc <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810f10:	0005303a 	rdctl	r2,status
  810f14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810f18:	e0fffa17 	ldw	r3,-24(fp)
  810f1c:	00bfff84 	movi	r2,-2
  810f20:	1884703a 	and	r2,r3,r2
  810f24:	1001703a 	wrctl	status,r2
  
  return context;
  810f28:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  810f2c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  810f30:	e0bffc17 	ldw	r2,-16(fp)
  810f34:	1080020b 	ldhu	r2,8(r2)
  810f38:	10bfffcc 	andi	r2,r2,65535
  810f3c:	1005003a 	cmpeq	r2,r2,zero
  810f40:	10000d1e 	bne	r2,zero,810f78 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  810f44:	e0bffc17 	ldw	r2,-16(fp)
  810f48:	1080020b 	ldhu	r2,8(r2)
  810f4c:	10bfffc4 	addi	r2,r2,-1
  810f50:	1007883a 	mov	r3,r2
  810f54:	e0bffc17 	ldw	r2,-16(fp)
  810f58:	10c0020d 	sth	r3,8(r2)
  810f5c:	e0bffb17 	ldw	r2,-20(fp)
  810f60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810f64:	e0bff917 	ldw	r2,-28(fp)
  810f68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  810f6c:	e0bffe17 	ldw	r2,-8(fp)
  810f70:	10000005 	stb	zero,0(r2)
        return;
  810f74:	00005106 	br	8110bc <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  810f78:	008020b4 	movhi	r2,130
  810f7c:	10bb0504 	addi	r2,r2,-5100
  810f80:	10c00017 	ldw	r3,0(r2)
  810f84:	008020b4 	movhi	r2,130
  810f88:	10bb0504 	addi	r2,r2,-5100
  810f8c:	10800017 	ldw	r2,0(r2)
  810f90:	10800c03 	ldbu	r2,48(r2)
  810f94:	10800054 	ori	r2,r2,1
  810f98:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  810f9c:	008020b4 	movhi	r2,130
  810fa0:	10bb0504 	addi	r2,r2,-5100
  810fa4:	10800017 	ldw	r2,0(r2)
  810fa8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  810fac:	008020b4 	movhi	r2,130
  810fb0:	10bb0504 	addi	r2,r2,-5100
  810fb4:	10c00017 	ldw	r3,0(r2)
  810fb8:	e0bffd0b 	ldhu	r2,-12(fp)
  810fbc:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  810fc0:	e13ffc17 	ldw	r4,-16(fp)
  810fc4:	080c4440 	call	80c444 <OS_EventTaskWait>
  810fc8:	e0bffb17 	ldw	r2,-20(fp)
  810fcc:	e0bff815 	stw	r2,-32(fp)
  810fd0:	e0bff817 	ldw	r2,-32(fp)
  810fd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  810fd8:	080ccf00 	call	80ccf0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810fdc:	0005303a 	rdctl	r2,status
  810fe0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810fe4:	e0fff717 	ldw	r3,-36(fp)
  810fe8:	00bfff84 	movi	r2,-2
  810fec:	1884703a 	and	r2,r3,r2
  810ff0:	1001703a 	wrctl	status,r2
  
  return context;
  810ff4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  810ff8:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  810ffc:	008020b4 	movhi	r2,130
  811000:	10bb0504 	addi	r2,r2,-5100
  811004:	10800017 	ldw	r2,0(r2)
  811008:	10800c43 	ldbu	r2,49(r2)
  81100c:	10803fcc 	andi	r2,r2,255
  811010:	e0bfff15 	stw	r2,-4(fp)
  811014:	e0ffff17 	ldw	r3,-4(fp)
  811018:	1805003a 	cmpeq	r2,r3,zero
  81101c:	1000041e 	bne	r2,zero,811030 <OSSemPend+0x1dc>
  811020:	e0ffff17 	ldw	r3,-4(fp)
  811024:	188000a0 	cmpeqi	r2,r3,2
  811028:	1000041e 	bne	r2,zero,81103c <OSSemPend+0x1e8>
  81102c:	00000706 	br	81104c <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  811030:	e0bffe17 	ldw	r2,-8(fp)
  811034:	10000005 	stb	zero,0(r2)
             break;
  811038:	00000c06 	br	81106c <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  81103c:	e0fffe17 	ldw	r3,-8(fp)
  811040:	00800384 	movi	r2,14
  811044:	18800005 	stb	r2,0(r3)
             break;
  811048:	00000806 	br	81106c <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  81104c:	008020b4 	movhi	r2,130
  811050:	10bb0504 	addi	r2,r2,-5100
  811054:	11000017 	ldw	r4,0(r2)
  811058:	e17ffc17 	ldw	r5,-16(fp)
  81105c:	080c6a80 	call	80c6a8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  811060:	e0fffe17 	ldw	r3,-8(fp)
  811064:	00800284 	movi	r2,10
  811068:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  81106c:	008020b4 	movhi	r2,130
  811070:	10bb0504 	addi	r2,r2,-5100
  811074:	10800017 	ldw	r2,0(r2)
  811078:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  81107c:	008020b4 	movhi	r2,130
  811080:	10bb0504 	addi	r2,r2,-5100
  811084:	10800017 	ldw	r2,0(r2)
  811088:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  81108c:	008020b4 	movhi	r2,130
  811090:	10bb0504 	addi	r2,r2,-5100
  811094:	10800017 	ldw	r2,0(r2)
  811098:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  81109c:	008020b4 	movhi	r2,130
  8110a0:	10bb0504 	addi	r2,r2,-5100
  8110a4:	10800017 	ldw	r2,0(r2)
  8110a8:	10000815 	stw	zero,32(r2)
  8110ac:	e0bffb17 	ldw	r2,-20(fp)
  8110b0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8110b4:	e0bff617 	ldw	r2,-40(fp)
  8110b8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  8110bc:	e037883a 	mov	sp,fp
  8110c0:	dfc00117 	ldw	ra,4(sp)
  8110c4:	df000017 	ldw	fp,0(sp)
  8110c8:	dec00204 	addi	sp,sp,8
  8110cc:	f800283a 	ret

008110d0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8110d0:	defff504 	addi	sp,sp,-44
  8110d4:	dfc00a15 	stw	ra,40(sp)
  8110d8:	df000915 	stw	fp,36(sp)
  8110dc:	df000904 	addi	fp,sp,36
  8110e0:	e13ffc15 	stw	r4,-16(fp)
  8110e4:	e1bffe15 	stw	r6,-8(fp)
  8110e8:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8110ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8110f0:	e0bffe17 	ldw	r2,-8(fp)
  8110f4:	1004c03a 	cmpne	r2,r2,zero
  8110f8:	1000021e 	bne	r2,zero,811104 <OSSemPendAbort+0x34>
        return (0);
  8110fc:	e03fff15 	stw	zero,-4(fp)
  811100:	00004c06 	br	811234 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  811104:	e0bffc17 	ldw	r2,-16(fp)
  811108:	1004c03a 	cmpne	r2,r2,zero
  81110c:	1000051e 	bne	r2,zero,811124 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  811110:	e0fffe17 	ldw	r3,-8(fp)
  811114:	00800104 	movi	r2,4
  811118:	18800005 	stb	r2,0(r3)
        return (0);
  81111c:	e03fff15 	stw	zero,-4(fp)
  811120:	00004406 	br	811234 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  811124:	e0bffc17 	ldw	r2,-16(fp)
  811128:	10800003 	ldbu	r2,0(r2)
  81112c:	10803fcc 	andi	r2,r2,255
  811130:	108000e0 	cmpeqi	r2,r2,3
  811134:	1000051e 	bne	r2,zero,81114c <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  811138:	e0fffe17 	ldw	r3,-8(fp)
  81113c:	00800044 	movi	r2,1
  811140:	18800005 	stb	r2,0(r3)
        return (0);
  811144:	e03fff15 	stw	zero,-4(fp)
  811148:	00003a06 	br	811234 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81114c:	0005303a 	rdctl	r2,status
  811150:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811154:	e0fff917 	ldw	r3,-28(fp)
  811158:	00bfff84 	movi	r2,-2
  81115c:	1884703a 	and	r2,r3,r2
  811160:	1001703a 	wrctl	status,r2
  
  return context;
  811164:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  811168:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  81116c:	e0bffc17 	ldw	r2,-16(fp)
  811170:	10800283 	ldbu	r2,10(r2)
  811174:	10803fcc 	andi	r2,r2,255
  811178:	1005003a 	cmpeq	r2,r2,zero
  81117c:	1000261e 	bne	r2,zero,811218 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  811180:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  811184:	e0bffd03 	ldbu	r2,-12(fp)
  811188:	10800060 	cmpeqi	r2,r2,1
  81118c:	1000091e 	bne	r2,zero,8111b4 <OSSemPendAbort+0xe4>
  811190:	00000e06 	br	8111cc <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  811194:	e13ffc17 	ldw	r4,-16(fp)
  811198:	000b883a 	mov	r5,zero
  81119c:	01800044 	movi	r6,1
  8111a0:	01c00084 	movi	r7,2
  8111a4:	080c2b00 	call	80c2b0 <OS_EventTaskRdy>
                     nbr_tasks++;
  8111a8:	e0bffb03 	ldbu	r2,-20(fp)
  8111ac:	10800044 	addi	r2,r2,1
  8111b0:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  8111b4:	e0bffc17 	ldw	r2,-16(fp)
  8111b8:	10800283 	ldbu	r2,10(r2)
  8111bc:	10803fcc 	andi	r2,r2,255
  8111c0:	1004c03a 	cmpne	r2,r2,zero
  8111c4:	103ff31e 	bne	r2,zero,811194 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  8111c8:	00000806 	br	8111ec <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8111cc:	e13ffc17 	ldw	r4,-16(fp)
  8111d0:	000b883a 	mov	r5,zero
  8111d4:	01800044 	movi	r6,1
  8111d8:	01c00084 	movi	r7,2
  8111dc:	080c2b00 	call	80c2b0 <OS_EventTaskRdy>
                 nbr_tasks++;
  8111e0:	e0bffb03 	ldbu	r2,-20(fp)
  8111e4:	10800044 	addi	r2,r2,1
  8111e8:	e0bffb05 	stb	r2,-20(fp)
  8111ec:	e0bffa17 	ldw	r2,-24(fp)
  8111f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8111f4:	e0bff817 	ldw	r2,-32(fp)
  8111f8:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  8111fc:	080ccf00 	call	80ccf0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  811200:	e0fffe17 	ldw	r3,-8(fp)
  811204:	00800384 	movi	r2,14
  811208:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  81120c:	e0bffb03 	ldbu	r2,-20(fp)
  811210:	e0bfff15 	stw	r2,-4(fp)
  811214:	00000706 	br	811234 <OSSemPendAbort+0x164>
  811218:	e0bffa17 	ldw	r2,-24(fp)
  81121c:	e0bff715 	stw	r2,-36(fp)
  811220:	e0bff717 	ldw	r2,-36(fp)
  811224:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  811228:	e0bffe17 	ldw	r2,-8(fp)
  81122c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  811230:	e03fff15 	stw	zero,-4(fp)
  811234:	e0bfff17 	ldw	r2,-4(fp)
}
  811238:	e037883a 	mov	sp,fp
  81123c:	dfc00117 	ldw	ra,4(sp)
  811240:	df000017 	ldw	fp,0(sp)
  811244:	dec00204 	addi	sp,sp,8
  811248:	f800283a 	ret

0081124c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  81124c:	defff704 	addi	sp,sp,-36
  811250:	dfc00815 	stw	ra,32(sp)
  811254:	df000715 	stw	fp,28(sp)
  811258:	df000704 	addi	fp,sp,28
  81125c:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  811260:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  811264:	e0bffe17 	ldw	r2,-8(fp)
  811268:	1004c03a 	cmpne	r2,r2,zero
  81126c:	1000031e 	bne	r2,zero,81127c <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  811270:	00800104 	movi	r2,4
  811274:	e0bfff15 	stw	r2,-4(fp)
  811278:	00003806 	br	81135c <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81127c:	e0bffe17 	ldw	r2,-8(fp)
  811280:	10800003 	ldbu	r2,0(r2)
  811284:	10803fcc 	andi	r2,r2,255
  811288:	108000e0 	cmpeqi	r2,r2,3
  81128c:	1000031e 	bne	r2,zero,81129c <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  811290:	00800044 	movi	r2,1
  811294:	e0bfff15 	stw	r2,-4(fp)
  811298:	00003006 	br	81135c <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81129c:	0005303a 	rdctl	r2,status
  8112a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8112a4:	e0fffc17 	ldw	r3,-16(fp)
  8112a8:	00bfff84 	movi	r2,-2
  8112ac:	1884703a 	and	r2,r3,r2
  8112b0:	1001703a 	wrctl	status,r2
  
  return context;
  8112b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8112b8:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  8112bc:	e0bffe17 	ldw	r2,-8(fp)
  8112c0:	10800283 	ldbu	r2,10(r2)
  8112c4:	10803fcc 	andi	r2,r2,255
  8112c8:	1005003a 	cmpeq	r2,r2,zero
  8112cc:	10000c1e 	bne	r2,zero,811300 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  8112d0:	e13ffe17 	ldw	r4,-8(fp)
  8112d4:	000b883a 	mov	r5,zero
  8112d8:	01800044 	movi	r6,1
  8112dc:	000f883a 	mov	r7,zero
  8112e0:	080c2b00 	call	80c2b0 <OS_EventTaskRdy>
  8112e4:	e0bffd17 	ldw	r2,-12(fp)
  8112e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8112ec:	e0bffb17 	ldw	r2,-20(fp)
  8112f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  8112f4:	080ccf00 	call	80ccf0 <OS_Sched>
        return (OS_ERR_NONE);
  8112f8:	e03fff15 	stw	zero,-4(fp)
  8112fc:	00001706 	br	81135c <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  811300:	e0bffe17 	ldw	r2,-8(fp)
  811304:	1080020b 	ldhu	r2,8(r2)
  811308:	10ffffcc 	andi	r3,r2,65535
  81130c:	00bfffd4 	movui	r2,65535
  811310:	18800c26 	beq	r3,r2,811344 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  811314:	e0bffe17 	ldw	r2,-8(fp)
  811318:	1080020b 	ldhu	r2,8(r2)
  81131c:	10800044 	addi	r2,r2,1
  811320:	1007883a 	mov	r3,r2
  811324:	e0bffe17 	ldw	r2,-8(fp)
  811328:	10c0020d 	sth	r3,8(r2)
  81132c:	e0bffd17 	ldw	r2,-12(fp)
  811330:	e0bffa15 	stw	r2,-24(fp)
  811334:	e0bffa17 	ldw	r2,-24(fp)
  811338:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  81133c:	e03fff15 	stw	zero,-4(fp)
  811340:	00000606 	br	81135c <OSSemPost+0x110>
  811344:	e0bffd17 	ldw	r2,-12(fp)
  811348:	e0bff915 	stw	r2,-28(fp)
  81134c:	e0bff917 	ldw	r2,-28(fp)
  811350:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  811354:	00800c84 	movi	r2,50
  811358:	e0bfff15 	stw	r2,-4(fp)
  81135c:	e0bfff17 	ldw	r2,-4(fp)
}
  811360:	e037883a 	mov	sp,fp
  811364:	dfc00117 	ldw	ra,4(sp)
  811368:	df000017 	ldw	fp,0(sp)
  81136c:	dec00204 	addi	sp,sp,8
  811370:	f800283a 	ret

00811374 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  811374:	defff604 	addi	sp,sp,-40
  811378:	df000915 	stw	fp,36(sp)
  81137c:	df000904 	addi	fp,sp,36
  811380:	e13ffd15 	stw	r4,-12(fp)
  811384:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  811388:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81138c:	e0bffd17 	ldw	r2,-12(fp)
  811390:	1004c03a 	cmpne	r2,r2,zero
  811394:	1000031e 	bne	r2,zero,8113a4 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  811398:	00800104 	movi	r2,4
  81139c:	e0bfff15 	stw	r2,-4(fp)
  8113a0:	00003b06 	br	811490 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  8113a4:	e0bffe17 	ldw	r2,-8(fp)
  8113a8:	1004c03a 	cmpne	r2,r2,zero
  8113ac:	1000031e 	bne	r2,zero,8113bc <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  8113b0:	00800244 	movi	r2,9
  8113b4:	e0bfff15 	stw	r2,-4(fp)
  8113b8:	00003506 	br	811490 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  8113bc:	e0bffd17 	ldw	r2,-12(fp)
  8113c0:	10800003 	ldbu	r2,0(r2)
  8113c4:	10803fcc 	andi	r2,r2,255
  8113c8:	108000e0 	cmpeqi	r2,r2,3
  8113cc:	1000031e 	bne	r2,zero,8113dc <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  8113d0:	00800044 	movi	r2,1
  8113d4:	e0bfff15 	stw	r2,-4(fp)
  8113d8:	00002d06 	br	811490 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8113dc:	0005303a 	rdctl	r2,status
  8113e0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8113e4:	e0fff817 	ldw	r3,-32(fp)
  8113e8:	00bfff84 	movi	r2,-2
  8113ec:	1884703a 	and	r2,r3,r2
  8113f0:	1001703a 	wrctl	status,r2
  
  return context;
  8113f4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  8113f8:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  8113fc:	e0bffd17 	ldw	r2,-12(fp)
  811400:	10c00283 	ldbu	r3,10(r2)
  811404:	e0bffe17 	ldw	r2,-8(fp)
  811408:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  81140c:	e0bffd17 	ldw	r2,-12(fp)
  811410:	108002c4 	addi	r2,r2,11
  811414:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  811418:	e0bffe17 	ldw	r2,-8(fp)
  81141c:	10800084 	addi	r2,r2,2
  811420:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  811424:	e03ffa05 	stb	zero,-24(fp)
  811428:	00000d06 	br	811460 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  81142c:	e0bffc17 	ldw	r2,-16(fp)
  811430:	10c00003 	ldbu	r3,0(r2)
  811434:	e0bffb17 	ldw	r2,-20(fp)
  811438:	10c00005 	stb	r3,0(r2)
  81143c:	e0bffb17 	ldw	r2,-20(fp)
  811440:	10800044 	addi	r2,r2,1
  811444:	e0bffb15 	stw	r2,-20(fp)
  811448:	e0bffc17 	ldw	r2,-16(fp)
  81144c:	10800044 	addi	r2,r2,1
  811450:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  811454:	e0bffa03 	ldbu	r2,-24(fp)
  811458:	10800044 	addi	r2,r2,1
  81145c:	e0bffa05 	stb	r2,-24(fp)
  811460:	e0bffa03 	ldbu	r2,-24(fp)
  811464:	108000f0 	cmpltui	r2,r2,3
  811468:	103ff01e 	bne	r2,zero,81142c <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  81146c:	e0bffd17 	ldw	r2,-12(fp)
  811470:	10c0020b 	ldhu	r3,8(r2)
  811474:	e0bffe17 	ldw	r2,-8(fp)
  811478:	10c0000d 	sth	r3,0(r2)
  81147c:	e0bff917 	ldw	r2,-28(fp)
  811480:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811484:	e0bff717 	ldw	r2,-36(fp)
  811488:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81148c:	e03fff15 	stw	zero,-4(fp)
  811490:	e0bfff17 	ldw	r2,-4(fp)
}
  811494:	e037883a 	mov	sp,fp
  811498:	df000017 	ldw	fp,0(sp)
  81149c:	dec00104 	addi	sp,sp,4
  8114a0:	f800283a 	ret

008114a4 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  8114a4:	defff904 	addi	sp,sp,-28
  8114a8:	df000615 	stw	fp,24(sp)
  8114ac:	df000604 	addi	fp,sp,24
  8114b0:	e13ffd15 	stw	r4,-12(fp)
  8114b4:	e1bfff15 	stw	r6,-4(fp)
  8114b8:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8114bc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8114c0:	e0bfff17 	ldw	r2,-4(fp)
  8114c4:	1005003a 	cmpeq	r2,r2,zero
  8114c8:	1000331e 	bne	r2,zero,811598 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8114cc:	e0bffd17 	ldw	r2,-12(fp)
  8114d0:	1004c03a 	cmpne	r2,r2,zero
  8114d4:	1000041e 	bne	r2,zero,8114e8 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  8114d8:	e0ffff17 	ldw	r3,-4(fp)
  8114dc:	00800104 	movi	r2,4
  8114e0:	18800005 	stb	r2,0(r3)
        return;
  8114e4:	00002c06 	br	811598 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8114e8:	e0bffd17 	ldw	r2,-12(fp)
  8114ec:	10800003 	ldbu	r2,0(r2)
  8114f0:	10803fcc 	andi	r2,r2,255
  8114f4:	108000e0 	cmpeqi	r2,r2,3
  8114f8:	1000041e 	bne	r2,zero,81150c <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  8114fc:	e0ffff17 	ldw	r3,-4(fp)
  811500:	00800044 	movi	r2,1
  811504:	18800005 	stb	r2,0(r3)
        return;
  811508:	00002306 	br	811598 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81150c:	0005303a 	rdctl	r2,status
  811510:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811514:	e0fffb17 	ldw	r3,-20(fp)
  811518:	00bfff84 	movi	r2,-2
  81151c:	1884703a 	and	r2,r3,r2
  811520:	1001703a 	wrctl	status,r2
  
  return context;
  811524:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  811528:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  81152c:	e0bfff17 	ldw	r2,-4(fp)
  811530:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  811534:	e0bffd17 	ldw	r2,-12(fp)
  811538:	1080020b 	ldhu	r2,8(r2)
  81153c:	10bfffcc 	andi	r2,r2,65535
  811540:	1005003a 	cmpeq	r2,r2,zero
  811544:	1000041e 	bne	r2,zero,811558 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  811548:	e0fffd17 	ldw	r3,-12(fp)
  81154c:	e0bffe0b 	ldhu	r2,-8(fp)
  811550:	1880020d 	sth	r2,8(r3)
  811554:	00000c06 	br	811588 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  811558:	e0bffd17 	ldw	r2,-12(fp)
  81155c:	10800283 	ldbu	r2,10(r2)
  811560:	10803fcc 	andi	r2,r2,255
  811564:	1004c03a 	cmpne	r2,r2,zero
  811568:	1000041e 	bne	r2,zero,81157c <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  81156c:	e0fffd17 	ldw	r3,-12(fp)
  811570:	e0bffe0b 	ldhu	r2,-8(fp)
  811574:	1880020d 	sth	r2,8(r3)
  811578:	00000306 	br	811588 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  81157c:	e0ffff17 	ldw	r3,-4(fp)
  811580:	00801244 	movi	r2,73
  811584:	18800005 	stb	r2,0(r3)
  811588:	e0bffc17 	ldw	r2,-16(fp)
  81158c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811590:	e0bffa17 	ldw	r2,-24(fp)
  811594:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  811598:	e037883a 	mov	sp,fp
  81159c:	df000017 	ldw	fp,0(sp)
  8115a0:	dec00104 	addi	sp,sp,4
  8115a4:	f800283a 	ret

008115a8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  8115a8:	defff004 	addi	sp,sp,-64
  8115ac:	dfc00f15 	stw	ra,60(sp)
  8115b0:	df000e15 	stw	fp,56(sp)
  8115b4:	df000e04 	addi	fp,sp,56
  8115b8:	e13ffd05 	stb	r4,-12(fp)
  8115bc:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  8115c0:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  8115c4:	e0bffd03 	ldbu	r2,-12(fp)
  8115c8:	10800530 	cmpltui	r2,r2,20
  8115cc:	1000061e 	bne	r2,zero,8115e8 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  8115d0:	e0bffd03 	ldbu	r2,-12(fp)
  8115d4:	10803fe0 	cmpeqi	r2,r2,255
  8115d8:	1000031e 	bne	r2,zero,8115e8 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  8115dc:	00800a84 	movi	r2,42
  8115e0:	e0bfff15 	stw	r2,-4(fp)
  8115e4:	00014706 	br	811b04 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  8115e8:	e0bffe03 	ldbu	r2,-8(fp)
  8115ec:	10800530 	cmpltui	r2,r2,20
  8115f0:	1000031e 	bne	r2,zero,811600 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  8115f4:	00800a84 	movi	r2,42
  8115f8:	e0bfff15 	stw	r2,-4(fp)
  8115fc:	00014106 	br	811b04 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811600:	0005303a 	rdctl	r2,status
  811604:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811608:	e0fff617 	ldw	r3,-40(fp)
  81160c:	00bfff84 	movi	r2,-2
  811610:	1884703a 	and	r2,r3,r2
  811614:	1001703a 	wrctl	status,r2
  
  return context;
  811618:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81161c:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  811620:	e0bffe03 	ldbu	r2,-8(fp)
  811624:	00c020f4 	movhi	r3,131
  811628:	18e79804 	addi	r3,r3,-24992
  81162c:	1085883a 	add	r2,r2,r2
  811630:	1085883a 	add	r2,r2,r2
  811634:	10c5883a 	add	r2,r2,r3
  811638:	10800017 	ldw	r2,0(r2)
  81163c:	1005003a 	cmpeq	r2,r2,zero
  811640:	1000071e 	bne	r2,zero,811660 <OSTaskChangePrio+0xb8>
  811644:	e0bff717 	ldw	r2,-36(fp)
  811648:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81164c:	e0bff517 	ldw	r2,-44(fp)
  811650:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  811654:	00800a04 	movi	r2,40
  811658:	e0bfff15 	stw	r2,-4(fp)
  81165c:	00012906 	br	811b04 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  811660:	e0bffd03 	ldbu	r2,-12(fp)
  811664:	10803fd8 	cmpnei	r2,r2,255
  811668:	1000051e 	bne	r2,zero,811680 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  81166c:	008020b4 	movhi	r2,130
  811670:	10bb0504 	addi	r2,r2,-5100
  811674:	10800017 	ldw	r2,0(r2)
  811678:	10800c83 	ldbu	r2,50(r2)
  81167c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  811680:	e0bffd03 	ldbu	r2,-12(fp)
  811684:	00c020f4 	movhi	r3,131
  811688:	18e79804 	addi	r3,r3,-24992
  81168c:	1085883a 	add	r2,r2,r2
  811690:	1085883a 	add	r2,r2,r2
  811694:	10c5883a 	add	r2,r2,r3
  811698:	10800017 	ldw	r2,0(r2)
  81169c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  8116a0:	e0bffa17 	ldw	r2,-24(fp)
  8116a4:	1004c03a 	cmpne	r2,r2,zero
  8116a8:	1000071e 	bne	r2,zero,8116c8 <OSTaskChangePrio+0x120>
  8116ac:	e0bff717 	ldw	r2,-36(fp)
  8116b0:	e0bff415 	stw	r2,-48(fp)
  8116b4:	e0bff417 	ldw	r2,-48(fp)
  8116b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  8116bc:	00800a44 	movi	r2,41
  8116c0:	e0bfff15 	stw	r2,-4(fp)
  8116c4:	00010f06 	br	811b04 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  8116c8:	e0bffa17 	ldw	r2,-24(fp)
  8116cc:	10800058 	cmpnei	r2,r2,1
  8116d0:	1000071e 	bne	r2,zero,8116f0 <OSTaskChangePrio+0x148>
  8116d4:	e0bff717 	ldw	r2,-36(fp)
  8116d8:	e0bff315 	stw	r2,-52(fp)
  8116dc:	e0bff317 	ldw	r2,-52(fp)
  8116e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  8116e4:	008010c4 	movi	r2,67
  8116e8:	e0bfff15 	stw	r2,-4(fp)
  8116ec:	00010506 	br	811b04 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  8116f0:	e0bffe03 	ldbu	r2,-8(fp)
  8116f4:	1004d0fa 	srli	r2,r2,3
  8116f8:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  8116fc:	e0bffe03 	ldbu	r2,-8(fp)
  811700:	108001cc 	andi	r2,r2,7
  811704:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  811708:	e0fff983 	ldbu	r3,-26(fp)
  81170c:	00800044 	movi	r2,1
  811710:	10c4983a 	sll	r2,r2,r3
  811714:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  811718:	e0fff943 	ldbu	r3,-27(fp)
  81171c:	00800044 	movi	r2,1
  811720:	10c4983a 	sll	r2,r2,r3
  811724:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  811728:	e0bffd03 	ldbu	r2,-12(fp)
  81172c:	00c020f4 	movhi	r3,131
  811730:	18e79804 	addi	r3,r3,-24992
  811734:	1085883a 	add	r2,r2,r2
  811738:	1085883a 	add	r2,r2,r2
  81173c:	10c5883a 	add	r2,r2,r3
  811740:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  811744:	e0bffe03 	ldbu	r2,-8(fp)
  811748:	00c020f4 	movhi	r3,131
  81174c:	18e79804 	addi	r3,r3,-24992
  811750:	1085883a 	add	r2,r2,r2
  811754:	1085883a 	add	r2,r2,r2
  811758:	10c7883a 	add	r3,r2,r3
  81175c:	e0bffa17 	ldw	r2,-24(fp)
  811760:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  811764:	e0bffa17 	ldw	r2,-24(fp)
  811768:	10800d03 	ldbu	r2,52(r2)
  81176c:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  811770:	e0bffa17 	ldw	r2,-24(fp)
  811774:	10800d83 	ldbu	r2,54(r2)
  811778:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  81177c:	e0bffa17 	ldw	r2,-24(fp)
  811780:	10800d43 	ldbu	r2,53(r2)
  811784:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  811788:	e0fff903 	ldbu	r3,-28(fp)
  81178c:	008020b4 	movhi	r2,130
  811790:	10bb0244 	addi	r2,r2,-5111
  811794:	10c5883a 	add	r2,r2,r3
  811798:	10c00003 	ldbu	r3,0(r2)
  81179c:	e0bff803 	ldbu	r2,-32(fp)
  8117a0:	1884703a 	and	r2,r3,r2
  8117a4:	10803fcc 	andi	r2,r2,255
  8117a8:	1005003a 	cmpeq	r2,r2,zero
  8117ac:	1000381e 	bne	r2,zero,811890 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  8117b0:	e13ff903 	ldbu	r4,-28(fp)
  8117b4:	e0fff903 	ldbu	r3,-28(fp)
  8117b8:	008020b4 	movhi	r2,130
  8117bc:	10bb0244 	addi	r2,r2,-5111
  8117c0:	10c5883a 	add	r2,r2,r3
  8117c4:	10800003 	ldbu	r2,0(r2)
  8117c8:	1007883a 	mov	r3,r2
  8117cc:	e0bff803 	ldbu	r2,-32(fp)
  8117d0:	0084303a 	nor	r2,zero,r2
  8117d4:	1884703a 	and	r2,r3,r2
  8117d8:	1007883a 	mov	r3,r2
  8117dc:	008020b4 	movhi	r2,130
  8117e0:	10bb0244 	addi	r2,r2,-5111
  8117e4:	1105883a 	add	r2,r2,r4
  8117e8:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  8117ec:	e0fff903 	ldbu	r3,-28(fp)
  8117f0:	008020b4 	movhi	r2,130
  8117f4:	10bb0244 	addi	r2,r2,-5111
  8117f8:	10c5883a 	add	r2,r2,r3
  8117fc:	10800003 	ldbu	r2,0(r2)
  811800:	10803fcc 	andi	r2,r2,255
  811804:	1004c03a 	cmpne	r2,r2,zero
  811808:	10000b1e 	bne	r2,zero,811838 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  81180c:	e0bff843 	ldbu	r2,-31(fp)
  811810:	0084303a 	nor	r2,zero,r2
  811814:	1007883a 	mov	r3,r2
  811818:	008020b4 	movhi	r2,130
  81181c:	10bb0204 	addi	r2,r2,-5112
  811820:	10800003 	ldbu	r2,0(r2)
  811824:	1884703a 	and	r2,r3,r2
  811828:	1007883a 	mov	r3,r2
  81182c:	008020b4 	movhi	r2,130
  811830:	10bb0204 	addi	r2,r2,-5112
  811834:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  811838:	008020b4 	movhi	r2,130
  81183c:	10bb0204 	addi	r2,r2,-5112
  811840:	10c00003 	ldbu	r3,0(r2)
  811844:	e0bff8c3 	ldbu	r2,-29(fp)
  811848:	1884b03a 	or	r2,r3,r2
  81184c:	1007883a 	mov	r3,r2
  811850:	008020b4 	movhi	r2,130
  811854:	10bb0204 	addi	r2,r2,-5112
  811858:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  81185c:	e13ff983 	ldbu	r4,-26(fp)
  811860:	e0fff983 	ldbu	r3,-26(fp)
  811864:	008020b4 	movhi	r2,130
  811868:	10bb0244 	addi	r2,r2,-5111
  81186c:	10c5883a 	add	r2,r2,r3
  811870:	10c00003 	ldbu	r3,0(r2)
  811874:	e0bff883 	ldbu	r2,-30(fp)
  811878:	1884b03a 	or	r2,r3,r2
  81187c:	1007883a 	mov	r3,r2
  811880:	008020b4 	movhi	r2,130
  811884:	10bb0244 	addi	r2,r2,-5111
  811888:	1105883a 	add	r2,r2,r4
  81188c:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  811890:	e0bffa17 	ldw	r2,-24(fp)
  811894:	10800717 	ldw	r2,28(r2)
  811898:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  81189c:	e0bffc17 	ldw	r2,-16(fp)
  8118a0:	1005003a 	cmpeq	r2,r2,zero
  8118a4:	1000341e 	bne	r2,zero,811978 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  8118a8:	e13ff903 	ldbu	r4,-28(fp)
  8118ac:	e0fff903 	ldbu	r3,-28(fp)
  8118b0:	e0bffc17 	ldw	r2,-16(fp)
  8118b4:	1885883a 	add	r2,r3,r2
  8118b8:	10800204 	addi	r2,r2,8
  8118bc:	108000c3 	ldbu	r2,3(r2)
  8118c0:	1007883a 	mov	r3,r2
  8118c4:	e0bff803 	ldbu	r2,-32(fp)
  8118c8:	0084303a 	nor	r2,zero,r2
  8118cc:	1884703a 	and	r2,r3,r2
  8118d0:	1007883a 	mov	r3,r2
  8118d4:	e0bffc17 	ldw	r2,-16(fp)
  8118d8:	2085883a 	add	r2,r4,r2
  8118dc:	10800204 	addi	r2,r2,8
  8118e0:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  8118e4:	e0fff903 	ldbu	r3,-28(fp)
  8118e8:	e0bffc17 	ldw	r2,-16(fp)
  8118ec:	1885883a 	add	r2,r3,r2
  8118f0:	10800204 	addi	r2,r2,8
  8118f4:	108000c3 	ldbu	r2,3(r2)
  8118f8:	10803fcc 	andi	r2,r2,255
  8118fc:	1004c03a 	cmpne	r2,r2,zero
  811900:	1000091e 	bne	r2,zero,811928 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  811904:	e0bffc17 	ldw	r2,-16(fp)
  811908:	10800283 	ldbu	r2,10(r2)
  81190c:	1007883a 	mov	r3,r2
  811910:	e0bff843 	ldbu	r2,-31(fp)
  811914:	0084303a 	nor	r2,zero,r2
  811918:	1884703a 	and	r2,r3,r2
  81191c:	1007883a 	mov	r3,r2
  811920:	e0bffc17 	ldw	r2,-16(fp)
  811924:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  811928:	e0bffc17 	ldw	r2,-16(fp)
  81192c:	10c00283 	ldbu	r3,10(r2)
  811930:	e0bff8c3 	ldbu	r2,-29(fp)
  811934:	1884b03a 	or	r2,r3,r2
  811938:	1007883a 	mov	r3,r2
  81193c:	e0bffc17 	ldw	r2,-16(fp)
  811940:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  811944:	e13ff983 	ldbu	r4,-26(fp)
  811948:	e0fff983 	ldbu	r3,-26(fp)
  81194c:	e0bffc17 	ldw	r2,-16(fp)
  811950:	1885883a 	add	r2,r3,r2
  811954:	10800204 	addi	r2,r2,8
  811958:	10c000c3 	ldbu	r3,3(r2)
  81195c:	e0bff883 	ldbu	r2,-30(fp)
  811960:	1884b03a 	or	r2,r3,r2
  811964:	1007883a 	mov	r3,r2
  811968:	e0bffc17 	ldw	r2,-16(fp)
  81196c:	2085883a 	add	r2,r4,r2
  811970:	10800204 	addi	r2,r2,8
  811974:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  811978:	e0bffa17 	ldw	r2,-24(fp)
  81197c:	10800817 	ldw	r2,32(r2)
  811980:	1005003a 	cmpeq	r2,r2,zero
  811984:	1000441e 	bne	r2,zero,811a98 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  811988:	e0bffa17 	ldw	r2,-24(fp)
  81198c:	10800817 	ldw	r2,32(r2)
  811990:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  811994:	e0bffb17 	ldw	r2,-20(fp)
  811998:	10800017 	ldw	r2,0(r2)
  81199c:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  8119a0:	00003a06 	br	811a8c <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  8119a4:	e13ff903 	ldbu	r4,-28(fp)
  8119a8:	e0fff903 	ldbu	r3,-28(fp)
  8119ac:	e0bffc17 	ldw	r2,-16(fp)
  8119b0:	1885883a 	add	r2,r3,r2
  8119b4:	10800204 	addi	r2,r2,8
  8119b8:	108000c3 	ldbu	r2,3(r2)
  8119bc:	1007883a 	mov	r3,r2
  8119c0:	e0bff803 	ldbu	r2,-32(fp)
  8119c4:	0084303a 	nor	r2,zero,r2
  8119c8:	1884703a 	and	r2,r3,r2
  8119cc:	1007883a 	mov	r3,r2
  8119d0:	e0bffc17 	ldw	r2,-16(fp)
  8119d4:	2085883a 	add	r2,r4,r2
  8119d8:	10800204 	addi	r2,r2,8
  8119dc:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  8119e0:	e0fff903 	ldbu	r3,-28(fp)
  8119e4:	e0bffc17 	ldw	r2,-16(fp)
  8119e8:	1885883a 	add	r2,r3,r2
  8119ec:	10800204 	addi	r2,r2,8
  8119f0:	108000c3 	ldbu	r2,3(r2)
  8119f4:	10803fcc 	andi	r2,r2,255
  8119f8:	1004c03a 	cmpne	r2,r2,zero
  8119fc:	1000091e 	bne	r2,zero,811a24 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  811a00:	e0bffc17 	ldw	r2,-16(fp)
  811a04:	10800283 	ldbu	r2,10(r2)
  811a08:	1007883a 	mov	r3,r2
  811a0c:	e0bff843 	ldbu	r2,-31(fp)
  811a10:	0084303a 	nor	r2,zero,r2
  811a14:	1884703a 	and	r2,r3,r2
  811a18:	1007883a 	mov	r3,r2
  811a1c:	e0bffc17 	ldw	r2,-16(fp)
  811a20:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  811a24:	e0bffc17 	ldw	r2,-16(fp)
  811a28:	10c00283 	ldbu	r3,10(r2)
  811a2c:	e0bff8c3 	ldbu	r2,-29(fp)
  811a30:	1884b03a 	or	r2,r3,r2
  811a34:	1007883a 	mov	r3,r2
  811a38:	e0bffc17 	ldw	r2,-16(fp)
  811a3c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  811a40:	e13ff983 	ldbu	r4,-26(fp)
  811a44:	e0fff983 	ldbu	r3,-26(fp)
  811a48:	e0bffc17 	ldw	r2,-16(fp)
  811a4c:	1885883a 	add	r2,r3,r2
  811a50:	10800204 	addi	r2,r2,8
  811a54:	10c000c3 	ldbu	r3,3(r2)
  811a58:	e0bff883 	ldbu	r2,-30(fp)
  811a5c:	1884b03a 	or	r2,r3,r2
  811a60:	1007883a 	mov	r3,r2
  811a64:	e0bffc17 	ldw	r2,-16(fp)
  811a68:	2085883a 	add	r2,r4,r2
  811a6c:	10800204 	addi	r2,r2,8
  811a70:	10c000c5 	stb	r3,3(r2)
            pevents++;
  811a74:	e0bffb17 	ldw	r2,-20(fp)
  811a78:	10800104 	addi	r2,r2,4
  811a7c:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  811a80:	e0bffb17 	ldw	r2,-20(fp)
  811a84:	10800017 	ldw	r2,0(r2)
  811a88:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  811a8c:	e0bffc17 	ldw	r2,-16(fp)
  811a90:	1004c03a 	cmpne	r2,r2,zero
  811a94:	103fc31e 	bne	r2,zero,8119a4 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  811a98:	e0fffa17 	ldw	r3,-24(fp)
  811a9c:	e0bffe03 	ldbu	r2,-8(fp)
  811aa0:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  811aa4:	e0fffa17 	ldw	r3,-24(fp)
  811aa8:	e0bff983 	ldbu	r2,-26(fp)
  811aac:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  811ab0:	e0fffa17 	ldw	r3,-24(fp)
  811ab4:	e0bff943 	ldbu	r2,-27(fp)
  811ab8:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  811abc:	e0fffa17 	ldw	r3,-24(fp)
  811ac0:	e0bff8c3 	ldbu	r2,-29(fp)
  811ac4:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  811ac8:	e0fffa17 	ldw	r3,-24(fp)
  811acc:	e0bff883 	ldbu	r2,-30(fp)
  811ad0:	18800d45 	stb	r2,53(r3)
  811ad4:	e0bff717 	ldw	r2,-36(fp)
  811ad8:	e0bff215 	stw	r2,-56(fp)
  811adc:	e0bff217 	ldw	r2,-56(fp)
  811ae0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  811ae4:	008020b4 	movhi	r2,130
  811ae8:	10baf644 	addi	r2,r2,-5159
  811aec:	10800003 	ldbu	r2,0(r2)
  811af0:	10803fcc 	andi	r2,r2,255
  811af4:	10800058 	cmpnei	r2,r2,1
  811af8:	1000011e 	bne	r2,zero,811b00 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  811afc:	080ccf00 	call	80ccf0 <OS_Sched>
    }
    return (OS_ERR_NONE);
  811b00:	e03fff15 	stw	zero,-4(fp)
  811b04:	e0bfff17 	ldw	r2,-4(fp)
}
  811b08:	e037883a 	mov	sp,fp
  811b0c:	dfc00117 	ldw	ra,4(sp)
  811b10:	df000017 	ldw	fp,0(sp)
  811b14:	dec00204 	addi	sp,sp,8
  811b18:	f800283a 	ret

00811b1c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  811b1c:	deffed04 	addi	sp,sp,-76
  811b20:	dfc01215 	stw	ra,72(sp)
  811b24:	df001115 	stw	fp,68(sp)
  811b28:	df001104 	addi	fp,sp,68
  811b2c:	e13ffb15 	stw	r4,-20(fp)
  811b30:	e17ffc15 	stw	r5,-16(fp)
  811b34:	e1bffd15 	stw	r6,-12(fp)
  811b38:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  811b3c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  811b40:	e0bffe03 	ldbu	r2,-8(fp)
  811b44:	10800570 	cmpltui	r2,r2,21
  811b48:	1000031e 	bne	r2,zero,811b58 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  811b4c:	00800a84 	movi	r2,42
  811b50:	e0bfff15 	stw	r2,-4(fp)
  811b54:	00006006 	br	811cd8 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811b58:	0005303a 	rdctl	r2,status
  811b5c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811b60:	e0fff717 	ldw	r3,-36(fp)
  811b64:	00bfff84 	movi	r2,-2
  811b68:	1884703a 	and	r2,r3,r2
  811b6c:	1001703a 	wrctl	status,r2
  
  return context;
  811b70:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811b74:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  811b78:	008020b4 	movhi	r2,130
  811b7c:	10bb0404 	addi	r2,r2,-5104
  811b80:	10800003 	ldbu	r2,0(r2)
  811b84:	10803fcc 	andi	r2,r2,255
  811b88:	1005003a 	cmpeq	r2,r2,zero
  811b8c:	1000071e 	bne	r2,zero,811bac <OSTaskCreate+0x90>
  811b90:	e0bff817 	ldw	r2,-32(fp)
  811b94:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811b98:	e0bff617 	ldw	r2,-40(fp)
  811b9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  811ba0:	00800f04 	movi	r2,60
  811ba4:	e0bfff15 	stw	r2,-4(fp)
  811ba8:	00004b06 	br	811cd8 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  811bac:	e0bffe03 	ldbu	r2,-8(fp)
  811bb0:	00c020f4 	movhi	r3,131
  811bb4:	18e79804 	addi	r3,r3,-24992
  811bb8:	1085883a 	add	r2,r2,r2
  811bbc:	1085883a 	add	r2,r2,r2
  811bc0:	10c5883a 	add	r2,r2,r3
  811bc4:	10800017 	ldw	r2,0(r2)
  811bc8:	1004c03a 	cmpne	r2,r2,zero
  811bcc:	10003c1e 	bne	r2,zero,811cc0 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  811bd0:	e0bffe03 	ldbu	r2,-8(fp)
  811bd4:	00c020f4 	movhi	r3,131
  811bd8:	18e79804 	addi	r3,r3,-24992
  811bdc:	1085883a 	add	r2,r2,r2
  811be0:	1085883a 	add	r2,r2,r2
  811be4:	10c7883a 	add	r3,r2,r3
  811be8:	00800044 	movi	r2,1
  811bec:	18800015 	stw	r2,0(r3)
  811bf0:	e0bff817 	ldw	r2,-32(fp)
  811bf4:	e0bff515 	stw	r2,-44(fp)
  811bf8:	e0bff517 	ldw	r2,-44(fp)
  811bfc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  811c00:	e13ffb17 	ldw	r4,-20(fp)
  811c04:	e17ffc17 	ldw	r5,-16(fp)
  811c08:	e1bffd17 	ldw	r6,-12(fp)
  811c0c:	000f883a 	mov	r7,zero
  811c10:	0819e780 	call	819e78 <OSTaskStkInit>
  811c14:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  811c18:	e13ffe03 	ldbu	r4,-8(fp)
  811c1c:	d8000015 	stw	zero,0(sp)
  811c20:	d8000115 	stw	zero,4(sp)
  811c24:	d8000215 	stw	zero,8(sp)
  811c28:	e17ffa17 	ldw	r5,-24(fp)
  811c2c:	000d883a 	mov	r6,zero
  811c30:	000f883a 	mov	r7,zero
  811c34:	080d0f80 	call	80d0f8 <OS_TCBInit>
  811c38:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  811c3c:	e0bff903 	ldbu	r2,-28(fp)
  811c40:	1004c03a 	cmpne	r2,r2,zero
  811c44:	1000081e 	bne	r2,zero,811c68 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  811c48:	008020b4 	movhi	r2,130
  811c4c:	10baf644 	addi	r2,r2,-5159
  811c50:	10800003 	ldbu	r2,0(r2)
  811c54:	10803fcc 	andi	r2,r2,255
  811c58:	10800058 	cmpnei	r2,r2,1
  811c5c:	1000151e 	bne	r2,zero,811cb4 <OSTaskCreate+0x198>
                OS_Sched();
  811c60:	080ccf00 	call	80ccf0 <OS_Sched>
  811c64:	00001306 	br	811cb4 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811c68:	0005303a 	rdctl	r2,status
  811c6c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811c70:	e0fff417 	ldw	r3,-48(fp)
  811c74:	00bfff84 	movi	r2,-2
  811c78:	1884703a 	and	r2,r3,r2
  811c7c:	1001703a 	wrctl	status,r2
  
  return context;
  811c80:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  811c84:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  811c88:	e0bffe03 	ldbu	r2,-8(fp)
  811c8c:	00c020f4 	movhi	r3,131
  811c90:	18e79804 	addi	r3,r3,-24992
  811c94:	1085883a 	add	r2,r2,r2
  811c98:	1085883a 	add	r2,r2,r2
  811c9c:	10c5883a 	add	r2,r2,r3
  811ca0:	10000015 	stw	zero,0(r2)
  811ca4:	e0bff817 	ldw	r2,-32(fp)
  811ca8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811cac:	e0bff317 	ldw	r2,-52(fp)
  811cb0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  811cb4:	e0bff903 	ldbu	r2,-28(fp)
  811cb8:	e0bfff15 	stw	r2,-4(fp)
  811cbc:	00000606 	br	811cd8 <OSTaskCreate+0x1bc>
  811cc0:	e0bff817 	ldw	r2,-32(fp)
  811cc4:	e0bff215 	stw	r2,-56(fp)
  811cc8:	e0bff217 	ldw	r2,-56(fp)
  811ccc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  811cd0:	00800a04 	movi	r2,40
  811cd4:	e0bfff15 	stw	r2,-4(fp)
  811cd8:	e0bfff17 	ldw	r2,-4(fp)
}
  811cdc:	e037883a 	mov	sp,fp
  811ce0:	dfc00117 	ldw	ra,4(sp)
  811ce4:	df000017 	ldw	fp,0(sp)
  811ce8:	dec00204 	addi	sp,sp,8
  811cec:	f800283a 	ret

00811cf0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  811cf0:	deffeb04 	addi	sp,sp,-84
  811cf4:	dfc01415 	stw	ra,80(sp)
  811cf8:	df001315 	stw	fp,76(sp)
  811cfc:	df001304 	addi	fp,sp,76
  811d00:	e13ff915 	stw	r4,-28(fp)
  811d04:	e17ffa15 	stw	r5,-24(fp)
  811d08:	e1bffb15 	stw	r6,-20(fp)
  811d0c:	e0800217 	ldw	r2,8(fp)
  811d10:	e0c00617 	ldw	r3,24(fp)
  811d14:	e1fffc05 	stb	r7,-16(fp)
  811d18:	e0bffd0d 	sth	r2,-12(fp)
  811d1c:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  811d20:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  811d24:	e0bffc03 	ldbu	r2,-16(fp)
  811d28:	10800570 	cmpltui	r2,r2,21
  811d2c:	1000031e 	bne	r2,zero,811d3c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  811d30:	00800a84 	movi	r2,42
  811d34:	e0bfff15 	stw	r2,-4(fp)
  811d38:	00006706 	br	811ed8 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811d3c:	0005303a 	rdctl	r2,status
  811d40:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d44:	e0fff517 	ldw	r3,-44(fp)
  811d48:	00bfff84 	movi	r2,-2
  811d4c:	1884703a 	and	r2,r3,r2
  811d50:	1001703a 	wrctl	status,r2
  
  return context;
  811d54:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811d58:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  811d5c:	008020b4 	movhi	r2,130
  811d60:	10bb0404 	addi	r2,r2,-5104
  811d64:	10800003 	ldbu	r2,0(r2)
  811d68:	10803fcc 	andi	r2,r2,255
  811d6c:	1005003a 	cmpeq	r2,r2,zero
  811d70:	1000071e 	bne	r2,zero,811d90 <OSTaskCreateExt+0xa0>
  811d74:	e0bff617 	ldw	r2,-40(fp)
  811d78:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811d7c:	e0bff417 	ldw	r2,-48(fp)
  811d80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  811d84:	00800f04 	movi	r2,60
  811d88:	e0bfff15 	stw	r2,-4(fp)
  811d8c:	00005206 	br	811ed8 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  811d90:	e0bffc03 	ldbu	r2,-16(fp)
  811d94:	00c020f4 	movhi	r3,131
  811d98:	18e79804 	addi	r3,r3,-24992
  811d9c:	1085883a 	add	r2,r2,r2
  811da0:	1085883a 	add	r2,r2,r2
  811da4:	10c5883a 	add	r2,r2,r3
  811da8:	10800017 	ldw	r2,0(r2)
  811dac:	1004c03a 	cmpne	r2,r2,zero
  811db0:	1000431e 	bne	r2,zero,811ec0 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  811db4:	e0bffc03 	ldbu	r2,-16(fp)
  811db8:	00c020f4 	movhi	r3,131
  811dbc:	18e79804 	addi	r3,r3,-24992
  811dc0:	1085883a 	add	r2,r2,r2
  811dc4:	1085883a 	add	r2,r2,r2
  811dc8:	10c7883a 	add	r3,r2,r3
  811dcc:	00800044 	movi	r2,1
  811dd0:	18800015 	stw	r2,0(r3)
  811dd4:	e0bff617 	ldw	r2,-40(fp)
  811dd8:	e0bff315 	stw	r2,-52(fp)
  811ddc:	e0bff317 	ldw	r2,-52(fp)
  811de0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  811de4:	e1bffe0b 	ldhu	r6,-8(fp)
  811de8:	e1000317 	ldw	r4,12(fp)
  811dec:	e1400417 	ldw	r5,16(fp)
  811df0:	0812f6c0 	call	812f6c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  811df4:	e1fffe0b 	ldhu	r7,-8(fp)
  811df8:	e13ff917 	ldw	r4,-28(fp)
  811dfc:	e17ffa17 	ldw	r5,-24(fp)
  811e00:	e1bffb17 	ldw	r6,-20(fp)
  811e04:	0819e780 	call	819e78 <OSTaskStkInit>
  811e08:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  811e0c:	e13ffc03 	ldbu	r4,-16(fp)
  811e10:	e1fffd0b 	ldhu	r7,-12(fp)
  811e14:	e0fffe0b 	ldhu	r3,-8(fp)
  811e18:	e0800417 	ldw	r2,16(fp)
  811e1c:	d8800015 	stw	r2,0(sp)
  811e20:	e0800517 	ldw	r2,20(fp)
  811e24:	d8800115 	stw	r2,4(sp)
  811e28:	d8c00215 	stw	r3,8(sp)
  811e2c:	e17ff817 	ldw	r5,-32(fp)
  811e30:	e1800317 	ldw	r6,12(fp)
  811e34:	080d0f80 	call	80d0f8 <OS_TCBInit>
  811e38:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  811e3c:	e0bff703 	ldbu	r2,-36(fp)
  811e40:	1004c03a 	cmpne	r2,r2,zero
  811e44:	1000081e 	bne	r2,zero,811e68 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  811e48:	008020b4 	movhi	r2,130
  811e4c:	10baf644 	addi	r2,r2,-5159
  811e50:	10800003 	ldbu	r2,0(r2)
  811e54:	10803fcc 	andi	r2,r2,255
  811e58:	10800058 	cmpnei	r2,r2,1
  811e5c:	1000151e 	bne	r2,zero,811eb4 <OSTaskCreateExt+0x1c4>
                OS_Sched();
  811e60:	080ccf00 	call	80ccf0 <OS_Sched>
  811e64:	00001306 	br	811eb4 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811e68:	0005303a 	rdctl	r2,status
  811e6c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811e70:	e0fff217 	ldw	r3,-56(fp)
  811e74:	00bfff84 	movi	r2,-2
  811e78:	1884703a 	and	r2,r3,r2
  811e7c:	1001703a 	wrctl	status,r2
  
  return context;
  811e80:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  811e84:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  811e88:	e0bffc03 	ldbu	r2,-16(fp)
  811e8c:	00c020f4 	movhi	r3,131
  811e90:	18e79804 	addi	r3,r3,-24992
  811e94:	1085883a 	add	r2,r2,r2
  811e98:	1085883a 	add	r2,r2,r2
  811e9c:	10c5883a 	add	r2,r2,r3
  811ea0:	10000015 	stw	zero,0(r2)
  811ea4:	e0bff617 	ldw	r2,-40(fp)
  811ea8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811eac:	e0bff117 	ldw	r2,-60(fp)
  811eb0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  811eb4:	e0bff703 	ldbu	r2,-36(fp)
  811eb8:	e0bfff15 	stw	r2,-4(fp)
  811ebc:	00000606 	br	811ed8 <OSTaskCreateExt+0x1e8>
  811ec0:	e0bff617 	ldw	r2,-40(fp)
  811ec4:	e0bff015 	stw	r2,-64(fp)
  811ec8:	e0bff017 	ldw	r2,-64(fp)
  811ecc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  811ed0:	00800a04 	movi	r2,40
  811ed4:	e0bfff15 	stw	r2,-4(fp)
  811ed8:	e0bfff17 	ldw	r2,-4(fp)
}
  811edc:	e037883a 	mov	sp,fp
  811ee0:	dfc00117 	ldw	ra,4(sp)
  811ee4:	df000017 	ldw	fp,0(sp)
  811ee8:	dec00204 	addi	sp,sp,8
  811eec:	f800283a 	ret

00811ef0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  811ef0:	defff304 	addi	sp,sp,-52
  811ef4:	dfc00c15 	stw	ra,48(sp)
  811ef8:	df000b15 	stw	fp,44(sp)
  811efc:	df000b04 	addi	fp,sp,44
  811f00:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  811f04:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  811f08:	008020b4 	movhi	r2,130
  811f0c:	10bb0404 	addi	r2,r2,-5104
  811f10:	10800003 	ldbu	r2,0(r2)
  811f14:	10803fcc 	andi	r2,r2,255
  811f18:	1005003a 	cmpeq	r2,r2,zero
  811f1c:	1000031e 	bne	r2,zero,811f2c <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  811f20:	00801004 	movi	r2,64
  811f24:	e0bfff15 	stw	r2,-4(fp)
  811f28:	0000ee06 	br	8122e4 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  811f2c:	e0bffe03 	ldbu	r2,-8(fp)
  811f30:	10800518 	cmpnei	r2,r2,20
  811f34:	1000031e 	bne	r2,zero,811f44 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  811f38:	00800f84 	movi	r2,62
  811f3c:	e0bfff15 	stw	r2,-4(fp)
  811f40:	0000e806 	br	8122e4 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  811f44:	e0bffe03 	ldbu	r2,-8(fp)
  811f48:	10800530 	cmpltui	r2,r2,20
  811f4c:	1000061e 	bne	r2,zero,811f68 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  811f50:	e0bffe03 	ldbu	r2,-8(fp)
  811f54:	10803fe0 	cmpeqi	r2,r2,255
  811f58:	1000031e 	bne	r2,zero,811f68 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  811f5c:	00800a84 	movi	r2,42
  811f60:	e0bfff15 	stw	r2,-4(fp)
  811f64:	0000df06 	br	8122e4 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811f68:	0005303a 	rdctl	r2,status
  811f6c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811f70:	e0fffa17 	ldw	r3,-24(fp)
  811f74:	00bfff84 	movi	r2,-2
  811f78:	1884703a 	and	r2,r3,r2
  811f7c:	1001703a 	wrctl	status,r2
  
  return context;
  811f80:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  811f84:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  811f88:	e0bffe03 	ldbu	r2,-8(fp)
  811f8c:	10803fd8 	cmpnei	r2,r2,255
  811f90:	1000051e 	bne	r2,zero,811fa8 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  811f94:	008020b4 	movhi	r2,130
  811f98:	10bb0504 	addi	r2,r2,-5100
  811f9c:	10800017 	ldw	r2,0(r2)
  811fa0:	10800c83 	ldbu	r2,50(r2)
  811fa4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  811fa8:	e0bffe03 	ldbu	r2,-8(fp)
  811fac:	00c020f4 	movhi	r3,131
  811fb0:	18e79804 	addi	r3,r3,-24992
  811fb4:	1085883a 	add	r2,r2,r2
  811fb8:	1085883a 	add	r2,r2,r2
  811fbc:	10c5883a 	add	r2,r2,r3
  811fc0:	10800017 	ldw	r2,0(r2)
  811fc4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  811fc8:	e0bffc17 	ldw	r2,-16(fp)
  811fcc:	1004c03a 	cmpne	r2,r2,zero
  811fd0:	1000071e 	bne	r2,zero,811ff0 <OSTaskDel+0x100>
  811fd4:	e0bffb17 	ldw	r2,-20(fp)
  811fd8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811fdc:	e0bff917 	ldw	r2,-28(fp)
  811fe0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  811fe4:	008010c4 	movi	r2,67
  811fe8:	e0bfff15 	stw	r2,-4(fp)
  811fec:	0000bd06 	br	8122e4 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  811ff0:	e0bffc17 	ldw	r2,-16(fp)
  811ff4:	10800058 	cmpnei	r2,r2,1
  811ff8:	1000071e 	bne	r2,zero,812018 <OSTaskDel+0x128>
  811ffc:	e0bffb17 	ldw	r2,-20(fp)
  812000:	e0bff815 	stw	r2,-32(fp)
  812004:	e0bff817 	ldw	r2,-32(fp)
  812008:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  81200c:	00800f44 	movi	r2,61
  812010:	e0bfff15 	stw	r2,-4(fp)
  812014:	0000b306 	br	8122e4 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  812018:	e0bffc17 	ldw	r2,-16(fp)
  81201c:	10800d03 	ldbu	r2,52(r2)
  812020:	11003fcc 	andi	r4,r2,255
  812024:	e0bffc17 	ldw	r2,-16(fp)
  812028:	10800d03 	ldbu	r2,52(r2)
  81202c:	10c03fcc 	andi	r3,r2,255
  812030:	008020b4 	movhi	r2,130
  812034:	10bb0244 	addi	r2,r2,-5111
  812038:	10c5883a 	add	r2,r2,r3
  81203c:	10800003 	ldbu	r2,0(r2)
  812040:	1007883a 	mov	r3,r2
  812044:	e0bffc17 	ldw	r2,-16(fp)
  812048:	10800d43 	ldbu	r2,53(r2)
  81204c:	0084303a 	nor	r2,zero,r2
  812050:	1884703a 	and	r2,r3,r2
  812054:	1007883a 	mov	r3,r2
  812058:	008020b4 	movhi	r2,130
  81205c:	10bb0244 	addi	r2,r2,-5111
  812060:	1105883a 	add	r2,r2,r4
  812064:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  812068:	e0bffc17 	ldw	r2,-16(fp)
  81206c:	10800d03 	ldbu	r2,52(r2)
  812070:	10c03fcc 	andi	r3,r2,255
  812074:	008020b4 	movhi	r2,130
  812078:	10bb0244 	addi	r2,r2,-5111
  81207c:	10c5883a 	add	r2,r2,r3
  812080:	10800003 	ldbu	r2,0(r2)
  812084:	10803fcc 	andi	r2,r2,255
  812088:	1004c03a 	cmpne	r2,r2,zero
  81208c:	10000c1e 	bne	r2,zero,8120c0 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  812090:	e0bffc17 	ldw	r2,-16(fp)
  812094:	10800d83 	ldbu	r2,54(r2)
  812098:	0084303a 	nor	r2,zero,r2
  81209c:	1007883a 	mov	r3,r2
  8120a0:	008020b4 	movhi	r2,130
  8120a4:	10bb0204 	addi	r2,r2,-5112
  8120a8:	10800003 	ldbu	r2,0(r2)
  8120ac:	1884703a 	and	r2,r3,r2
  8120b0:	1007883a 	mov	r3,r2
  8120b4:	008020b4 	movhi	r2,130
  8120b8:	10bb0204 	addi	r2,r2,-5112
  8120bc:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  8120c0:	e0bffc17 	ldw	r2,-16(fp)
  8120c4:	10800717 	ldw	r2,28(r2)
  8120c8:	1005003a 	cmpeq	r2,r2,zero
  8120cc:	1000041e 	bne	r2,zero,8120e0 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  8120d0:	e0bffc17 	ldw	r2,-16(fp)
  8120d4:	11400717 	ldw	r5,28(r2)
  8120d8:	e13ffc17 	ldw	r4,-16(fp)
  8120dc:	080c6a80 	call	80c6a8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  8120e0:	e0bffc17 	ldw	r2,-16(fp)
  8120e4:	10800817 	ldw	r2,32(r2)
  8120e8:	1005003a 	cmpeq	r2,r2,zero
  8120ec:	1000041e 	bne	r2,zero,812100 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  8120f0:	e0bffc17 	ldw	r2,-16(fp)
  8120f4:	11400817 	ldw	r5,32(r2)
  8120f8:	e13ffc17 	ldw	r4,-16(fp)
  8120fc:	080c7600 	call	80c760 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  812100:	e0bffc17 	ldw	r2,-16(fp)
  812104:	10800a17 	ldw	r2,40(r2)
  812108:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  81210c:	e0bffd17 	ldw	r2,-12(fp)
  812110:	1005003a 	cmpeq	r2,r2,zero
  812114:	1000021e 	bne	r2,zero,812120 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  812118:	e13ffd17 	ldw	r4,-12(fp)
  81211c:	080edf40 	call	80edf4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  812120:	e0bffc17 	ldw	r2,-16(fp)
  812124:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  812128:	e0bffc17 	ldw	r2,-16(fp)
  81212c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  812130:	e0bffc17 	ldw	r2,-16(fp)
  812134:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  812138:	008020b4 	movhi	r2,130
  81213c:	10baf604 	addi	r2,r2,-5160
  812140:	10800003 	ldbu	r2,0(r2)
  812144:	10803fcc 	andi	r2,r2,255
  812148:	10803fe0 	cmpeqi	r2,r2,255
  81214c:	1000081e 	bne	r2,zero,812170 <OSTaskDel+0x280>
        OSLockNesting++;
  812150:	008020b4 	movhi	r2,130
  812154:	10baf604 	addi	r2,r2,-5160
  812158:	10800003 	ldbu	r2,0(r2)
  81215c:	10800044 	addi	r2,r2,1
  812160:	1007883a 	mov	r3,r2
  812164:	008020b4 	movhi	r2,130
  812168:	10baf604 	addi	r2,r2,-5160
  81216c:	10c00005 	stb	r3,0(r2)
  812170:	e0bffb17 	ldw	r2,-20(fp)
  812174:	e0bff715 	stw	r2,-36(fp)
  812178:	e0bff717 	ldw	r2,-36(fp)
  81217c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  812180:	080c2940 	call	80c294 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812184:	0005303a 	rdctl	r2,status
  812188:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81218c:	e0fff617 	ldw	r3,-40(fp)
  812190:	00bfff84 	movi	r2,-2
  812194:	1884703a 	and	r2,r3,r2
  812198:	1001703a 	wrctl	status,r2
  
  return context;
  81219c:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  8121a0:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  8121a4:	008020b4 	movhi	r2,130
  8121a8:	10baf604 	addi	r2,r2,-5160
  8121ac:	10800003 	ldbu	r2,0(r2)
  8121b0:	10803fcc 	andi	r2,r2,255
  8121b4:	1005003a 	cmpeq	r2,r2,zero
  8121b8:	1000081e 	bne	r2,zero,8121dc <OSTaskDel+0x2ec>
        OSLockNesting--;
  8121bc:	008020b4 	movhi	r2,130
  8121c0:	10baf604 	addi	r2,r2,-5160
  8121c4:	10800003 	ldbu	r2,0(r2)
  8121c8:	10bfffc4 	addi	r2,r2,-1
  8121cc:	1007883a 	mov	r3,r2
  8121d0:	008020b4 	movhi	r2,130
  8121d4:	10baf604 	addi	r2,r2,-5160
  8121d8:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  8121dc:	e13ffc17 	ldw	r4,-16(fp)
  8121e0:	081a1a80 	call	81a1a8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  8121e4:	008020b4 	movhi	r2,130
  8121e8:	10bafe44 	addi	r2,r2,-5127
  8121ec:	10800003 	ldbu	r2,0(r2)
  8121f0:	10bfffc4 	addi	r2,r2,-1
  8121f4:	1007883a 	mov	r3,r2
  8121f8:	008020b4 	movhi	r2,130
  8121fc:	10bafe44 	addi	r2,r2,-5127
  812200:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  812204:	e0bffe03 	ldbu	r2,-8(fp)
  812208:	00c020f4 	movhi	r3,131
  81220c:	18e79804 	addi	r3,r3,-24992
  812210:	1085883a 	add	r2,r2,r2
  812214:	1085883a 	add	r2,r2,r2
  812218:	10c5883a 	add	r2,r2,r3
  81221c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  812220:	e0bffc17 	ldw	r2,-16(fp)
  812224:	10800617 	ldw	r2,24(r2)
  812228:	1004c03a 	cmpne	r2,r2,zero
  81222c:	1000091e 	bne	r2,zero,812254 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  812230:	e0bffc17 	ldw	r2,-16(fp)
  812234:	10800517 	ldw	r2,20(r2)
  812238:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  81223c:	e0bffc17 	ldw	r2,-16(fp)
  812240:	10c00517 	ldw	r3,20(r2)
  812244:	008020b4 	movhi	r2,130
  812248:	10baf904 	addi	r2,r2,-5148
  81224c:	10c00015 	stw	r3,0(r2)
  812250:	00000a06 	br	81227c <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  812254:	e0bffc17 	ldw	r2,-16(fp)
  812258:	10c00617 	ldw	r3,24(r2)
  81225c:	e0bffc17 	ldw	r2,-16(fp)
  812260:	10800517 	ldw	r2,20(r2)
  812264:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  812268:	e0bffc17 	ldw	r2,-16(fp)
  81226c:	10c00517 	ldw	r3,20(r2)
  812270:	e0bffc17 	ldw	r2,-16(fp)
  812274:	10800617 	ldw	r2,24(r2)
  812278:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  81227c:	008020b4 	movhi	r2,130
  812280:	10bafd04 	addi	r2,r2,-5132
  812284:	10c00017 	ldw	r3,0(r2)
  812288:	e0bffc17 	ldw	r2,-16(fp)
  81228c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  812290:	00c020b4 	movhi	r3,130
  812294:	18fafd04 	addi	r3,r3,-5132
  812298:	e0bffc17 	ldw	r2,-16(fp)
  81229c:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  8122a0:	e0fffc17 	ldw	r3,-16(fp)
  8122a4:	00800fc4 	movi	r2,63
  8122a8:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  8122ac:	e0bffc17 	ldw	r2,-16(fp)
  8122b0:	10001345 	stb	zero,77(r2)
  8122b4:	e0bffb17 	ldw	r2,-20(fp)
  8122b8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8122bc:	e0bff517 	ldw	r2,-44(fp)
  8122c0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  8122c4:	008020b4 	movhi	r2,130
  8122c8:	10baf644 	addi	r2,r2,-5159
  8122cc:	10800003 	ldbu	r2,0(r2)
  8122d0:	10803fcc 	andi	r2,r2,255
  8122d4:	10800058 	cmpnei	r2,r2,1
  8122d8:	1000011e 	bne	r2,zero,8122e0 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  8122dc:	080ccf00 	call	80ccf0 <OS_Sched>
    }
    return (OS_ERR_NONE);
  8122e0:	e03fff15 	stw	zero,-4(fp)
  8122e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8122e8:	e037883a 	mov	sp,fp
  8122ec:	dfc00117 	ldw	ra,4(sp)
  8122f0:	df000017 	ldw	fp,0(sp)
  8122f4:	dec00204 	addi	sp,sp,8
  8122f8:	f800283a 	ret

008122fc <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  8122fc:	defff404 	addi	sp,sp,-48
  812300:	df000b15 	stw	fp,44(sp)
  812304:	df000b04 	addi	fp,sp,44
  812308:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81230c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  812310:	e0bffe03 	ldbu	r2,-8(fp)
  812314:	10800518 	cmpnei	r2,r2,20
  812318:	1000031e 	bne	r2,zero,812328 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  81231c:	00800f84 	movi	r2,62
  812320:	e0bfff15 	stw	r2,-4(fp)
  812324:	00004c06 	br	812458 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  812328:	e0bffe03 	ldbu	r2,-8(fp)
  81232c:	10800530 	cmpltui	r2,r2,20
  812330:	1000061e 	bne	r2,zero,81234c <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  812334:	e0bffe03 	ldbu	r2,-8(fp)
  812338:	10803fe0 	cmpeqi	r2,r2,255
  81233c:	1000031e 	bne	r2,zero,81234c <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  812340:	00800a84 	movi	r2,42
  812344:	e0bfff15 	stw	r2,-4(fp)
  812348:	00004306 	br	812458 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  81234c:	e0bffe03 	ldbu	r2,-8(fp)
  812350:	10803fd8 	cmpnei	r2,r2,255
  812354:	1000141e 	bne	r2,zero,8123a8 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812358:	0005303a 	rdctl	r2,status
  81235c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812360:	e0fffa17 	ldw	r3,-24(fp)
  812364:	00bfff84 	movi	r2,-2
  812368:	1884703a 	and	r2,r3,r2
  81236c:	1001703a 	wrctl	status,r2
  
  return context;
  812370:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  812374:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  812378:	008020b4 	movhi	r2,130
  81237c:	10bb0504 	addi	r2,r2,-5100
  812380:	10800017 	ldw	r2,0(r2)
  812384:	10800dc3 	ldbu	r2,55(r2)
  812388:	e0bffd05 	stb	r2,-12(fp)
  81238c:	e0bffb17 	ldw	r2,-20(fp)
  812390:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812394:	e0bff917 	ldw	r2,-28(fp)
  812398:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  81239c:	e0bffd03 	ldbu	r2,-12(fp)
  8123a0:	e0bfff15 	stw	r2,-4(fp)
  8123a4:	00002c06 	br	812458 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8123a8:	0005303a 	rdctl	r2,status
  8123ac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8123b0:	e0fff817 	ldw	r3,-32(fp)
  8123b4:	00bfff84 	movi	r2,-2
  8123b8:	1884703a 	and	r2,r3,r2
  8123bc:	1001703a 	wrctl	status,r2
  
  return context;
  8123c0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  8123c4:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  8123c8:	e0bffe03 	ldbu	r2,-8(fp)
  8123cc:	00c020f4 	movhi	r3,131
  8123d0:	18e79804 	addi	r3,r3,-24992
  8123d4:	1085883a 	add	r2,r2,r2
  8123d8:	1085883a 	add	r2,r2,r2
  8123dc:	10c5883a 	add	r2,r2,r3
  8123e0:	10800017 	ldw	r2,0(r2)
  8123e4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  8123e8:	e0bffc17 	ldw	r2,-16(fp)
  8123ec:	1004c03a 	cmpne	r2,r2,zero
  8123f0:	1000071e 	bne	r2,zero,812410 <OSTaskDelReq+0x114>
  8123f4:	e0bffb17 	ldw	r2,-20(fp)
  8123f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8123fc:	e0bff717 	ldw	r2,-36(fp)
  812400:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  812404:	008010c4 	movi	r2,67
  812408:	e0bfff15 	stw	r2,-4(fp)
  81240c:	00001206 	br	812458 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  812410:	e0bffc17 	ldw	r2,-16(fp)
  812414:	10800058 	cmpnei	r2,r2,1
  812418:	1000071e 	bne	r2,zero,812438 <OSTaskDelReq+0x13c>
  81241c:	e0bffb17 	ldw	r2,-20(fp)
  812420:	e0bff615 	stw	r2,-40(fp)
  812424:	e0bff617 	ldw	r2,-40(fp)
  812428:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  81242c:	00800f44 	movi	r2,61
  812430:	e0bfff15 	stw	r2,-4(fp)
  812434:	00000806 	br	812458 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  812438:	e0fffc17 	ldw	r3,-16(fp)
  81243c:	00800fc4 	movi	r2,63
  812440:	18800dc5 	stb	r2,55(r3)
  812444:	e0bffb17 	ldw	r2,-20(fp)
  812448:	e0bff515 	stw	r2,-44(fp)
  81244c:	e0bff517 	ldw	r2,-44(fp)
  812450:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  812454:	e03fff15 	stw	zero,-4(fp)
  812458:	e0bfff17 	ldw	r2,-4(fp)
}
  81245c:	e037883a 	mov	sp,fp
  812460:	df000017 	ldw	fp,0(sp)
  812464:	dec00104 	addi	sp,sp,4
  812468:	f800283a 	ret

0081246c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  81246c:	defff304 	addi	sp,sp,-52
  812470:	dfc00c15 	stw	ra,48(sp)
  812474:	df000b15 	stw	fp,44(sp)
  812478:	df000b04 	addi	fp,sp,44
  81247c:	e17ffd15 	stw	r5,-12(fp)
  812480:	e1bffe15 	stw	r6,-8(fp)
  812484:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  812488:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  81248c:	e0bffe17 	ldw	r2,-8(fp)
  812490:	1004c03a 	cmpne	r2,r2,zero
  812494:	1000021e 	bne	r2,zero,8124a0 <OSTaskNameGet+0x34>
        return (0);
  812498:	e03fff15 	stw	zero,-4(fp)
  81249c:	00005b06 	br	81260c <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  8124a0:	e0bffc03 	ldbu	r2,-16(fp)
  8124a4:	10800570 	cmpltui	r2,r2,21
  8124a8:	1000081e 	bne	r2,zero,8124cc <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  8124ac:	e0bffc03 	ldbu	r2,-16(fp)
  8124b0:	10803fe0 	cmpeqi	r2,r2,255
  8124b4:	1000051e 	bne	r2,zero,8124cc <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  8124b8:	e0fffe17 	ldw	r3,-8(fp)
  8124bc:	00800a84 	movi	r2,42
  8124c0:	18800005 	stb	r2,0(r3)
            return (0);
  8124c4:	e03fff15 	stw	zero,-4(fp)
  8124c8:	00005006 	br	81260c <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  8124cc:	e0bffd17 	ldw	r2,-12(fp)
  8124d0:	1004c03a 	cmpne	r2,r2,zero
  8124d4:	1000051e 	bne	r2,zero,8124ec <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  8124d8:	e0fffe17 	ldw	r3,-8(fp)
  8124dc:	00800304 	movi	r2,12
  8124e0:	18800005 	stb	r2,0(r3)
        return (0);
  8124e4:	e03fff15 	stw	zero,-4(fp)
  8124e8:	00004806 	br	81260c <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  8124ec:	008020b4 	movhi	r2,130
  8124f0:	10bb0404 	addi	r2,r2,-5104
  8124f4:	10800003 	ldbu	r2,0(r2)
  8124f8:	10803fcc 	andi	r2,r2,255
  8124fc:	1005003a 	cmpeq	r2,r2,zero
  812500:	1000051e 	bne	r2,zero,812518 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  812504:	e0fffe17 	ldw	r3,-8(fp)
  812508:	00800444 	movi	r2,17
  81250c:	18800005 	stb	r2,0(r3)
        return (0);
  812510:	e03fff15 	stw	zero,-4(fp)
  812514:	00003d06 	br	81260c <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812518:	0005303a 	rdctl	r2,status
  81251c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812520:	e0fff817 	ldw	r3,-32(fp)
  812524:	00bfff84 	movi	r2,-2
  812528:	1884703a 	and	r2,r3,r2
  81252c:	1001703a 	wrctl	status,r2
  
  return context;
  812530:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  812534:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  812538:	e0bffc03 	ldbu	r2,-16(fp)
  81253c:	10803fd8 	cmpnei	r2,r2,255
  812540:	1000051e 	bne	r2,zero,812558 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  812544:	008020b4 	movhi	r2,130
  812548:	10bb0504 	addi	r2,r2,-5100
  81254c:	10800017 	ldw	r2,0(r2)
  812550:	10800c83 	ldbu	r2,50(r2)
  812554:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  812558:	e0bffc03 	ldbu	r2,-16(fp)
  81255c:	00c020f4 	movhi	r3,131
  812560:	18e79804 	addi	r3,r3,-24992
  812564:	1085883a 	add	r2,r2,r2
  812568:	1085883a 	add	r2,r2,r2
  81256c:	10c5883a 	add	r2,r2,r3
  812570:	10800017 	ldw	r2,0(r2)
  812574:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  812578:	e0bffb17 	ldw	r2,-20(fp)
  81257c:	1004c03a 	cmpne	r2,r2,zero
  812580:	1000091e 	bne	r2,zero,8125a8 <OSTaskNameGet+0x13c>
  812584:	e0bff917 	ldw	r2,-28(fp)
  812588:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81258c:	e0bff717 	ldw	r2,-36(fp)
  812590:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  812594:	e0fffe17 	ldw	r3,-8(fp)
  812598:	008010c4 	movi	r2,67
  81259c:	18800005 	stb	r2,0(r3)
        return (0);
  8125a0:	e03fff15 	stw	zero,-4(fp)
  8125a4:	00001906 	br	81260c <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  8125a8:	e0bffb17 	ldw	r2,-20(fp)
  8125ac:	10800058 	cmpnei	r2,r2,1
  8125b0:	1000091e 	bne	r2,zero,8125d8 <OSTaskNameGet+0x16c>
  8125b4:	e0bff917 	ldw	r2,-28(fp)
  8125b8:	e0bff615 	stw	r2,-40(fp)
  8125bc:	e0bff617 	ldw	r2,-40(fp)
  8125c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8125c4:	e0fffe17 	ldw	r3,-8(fp)
  8125c8:	008010c4 	movi	r2,67
  8125cc:	18800005 	stb	r2,0(r3)
        return (0);
  8125d0:	e03fff15 	stw	zero,-4(fp)
  8125d4:	00000d06 	br	81260c <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  8125d8:	e0bffb17 	ldw	r2,-20(fp)
  8125dc:	11401304 	addi	r5,r2,76
  8125e0:	e13ffd17 	ldw	r4,-12(fp)
  8125e4:	080ce340 	call	80ce34 <OS_StrCopy>
  8125e8:	e0bffa05 	stb	r2,-24(fp)
  8125ec:	e0bff917 	ldw	r2,-28(fp)
  8125f0:	e0bff515 	stw	r2,-44(fp)
  8125f4:	e0bff517 	ldw	r2,-44(fp)
  8125f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8125fc:	e0bffe17 	ldw	r2,-8(fp)
  812600:	10000005 	stb	zero,0(r2)
    return (len);
  812604:	e0bffa03 	ldbu	r2,-24(fp)
  812608:	e0bfff15 	stw	r2,-4(fp)
  81260c:	e0bfff17 	ldw	r2,-4(fp)
}
  812610:	e037883a 	mov	sp,fp
  812614:	dfc00117 	ldw	ra,4(sp)
  812618:	df000017 	ldw	fp,0(sp)
  81261c:	dec00204 	addi	sp,sp,8
  812620:	f800283a 	ret

00812624 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  812624:	defff304 	addi	sp,sp,-52
  812628:	dfc00c15 	stw	ra,48(sp)
  81262c:	df000b15 	stw	fp,44(sp)
  812630:	df000b04 	addi	fp,sp,44
  812634:	e17ffe15 	stw	r5,-8(fp)
  812638:	e1bfff15 	stw	r6,-4(fp)
  81263c:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  812640:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  812644:	e0bfff17 	ldw	r2,-4(fp)
  812648:	1005003a 	cmpeq	r2,r2,zero
  81264c:	1000611e 	bne	r2,zero,8127d4 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  812650:	e0bffd03 	ldbu	r2,-12(fp)
  812654:	10800570 	cmpltui	r2,r2,21
  812658:	1000071e 	bne	r2,zero,812678 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  81265c:	e0bffd03 	ldbu	r2,-12(fp)
  812660:	10803fe0 	cmpeqi	r2,r2,255
  812664:	1000041e 	bne	r2,zero,812678 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  812668:	e0ffff17 	ldw	r3,-4(fp)
  81266c:	00800a84 	movi	r2,42
  812670:	18800005 	stb	r2,0(r3)
            return;
  812674:	00005706 	br	8127d4 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  812678:	e0bffe17 	ldw	r2,-8(fp)
  81267c:	1004c03a 	cmpne	r2,r2,zero
  812680:	1000041e 	bne	r2,zero,812694 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  812684:	e0ffff17 	ldw	r3,-4(fp)
  812688:	00800304 	movi	r2,12
  81268c:	18800005 	stb	r2,0(r3)
        return;
  812690:	00005006 	br	8127d4 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  812694:	008020b4 	movhi	r2,130
  812698:	10bb0404 	addi	r2,r2,-5104
  81269c:	10800003 	ldbu	r2,0(r2)
  8126a0:	10803fcc 	andi	r2,r2,255
  8126a4:	1005003a 	cmpeq	r2,r2,zero
  8126a8:	1000041e 	bne	r2,zero,8126bc <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  8126ac:	e0ffff17 	ldw	r3,-4(fp)
  8126b0:	00800484 	movi	r2,18
  8126b4:	18800005 	stb	r2,0(r3)
        return;
  8126b8:	00004606 	br	8127d4 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8126bc:	0005303a 	rdctl	r2,status
  8126c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8126c4:	e0fff917 	ldw	r3,-28(fp)
  8126c8:	00bfff84 	movi	r2,-2
  8126cc:	1884703a 	and	r2,r3,r2
  8126d0:	1001703a 	wrctl	status,r2
  
  return context;
  8126d4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8126d8:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  8126dc:	e0bffd03 	ldbu	r2,-12(fp)
  8126e0:	10803fd8 	cmpnei	r2,r2,255
  8126e4:	1000051e 	bne	r2,zero,8126fc <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  8126e8:	008020b4 	movhi	r2,130
  8126ec:	10bb0504 	addi	r2,r2,-5100
  8126f0:	10800017 	ldw	r2,0(r2)
  8126f4:	10800c83 	ldbu	r2,50(r2)
  8126f8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8126fc:	e0bffd03 	ldbu	r2,-12(fp)
  812700:	00c020f4 	movhi	r3,131
  812704:	18e79804 	addi	r3,r3,-24992
  812708:	1085883a 	add	r2,r2,r2
  81270c:	1085883a 	add	r2,r2,r2
  812710:	10c5883a 	add	r2,r2,r3
  812714:	10800017 	ldw	r2,0(r2)
  812718:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  81271c:	e0bffb17 	ldw	r2,-20(fp)
  812720:	1004c03a 	cmpne	r2,r2,zero
  812724:	1000081e 	bne	r2,zero,812748 <OSTaskNameSet+0x124>
  812728:	e0bffa17 	ldw	r2,-24(fp)
  81272c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812730:	e0bff817 	ldw	r2,-32(fp)
  812734:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  812738:	e0ffff17 	ldw	r3,-4(fp)
  81273c:	008010c4 	movi	r2,67
  812740:	18800005 	stb	r2,0(r3)
        return;
  812744:	00002306 	br	8127d4 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  812748:	e0bffb17 	ldw	r2,-20(fp)
  81274c:	10800058 	cmpnei	r2,r2,1
  812750:	1000081e 	bne	r2,zero,812774 <OSTaskNameSet+0x150>
  812754:	e0bffa17 	ldw	r2,-24(fp)
  812758:	e0bff715 	stw	r2,-36(fp)
  81275c:	e0bff717 	ldw	r2,-36(fp)
  812760:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  812764:	e0ffff17 	ldw	r3,-4(fp)
  812768:	008010c4 	movi	r2,67
  81276c:	18800005 	stb	r2,0(r3)
        return;
  812770:	00001806 	br	8127d4 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  812774:	e13ffe17 	ldw	r4,-8(fp)
  812778:	080ceb40 	call	80ceb4 <OS_StrLen>
  81277c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  812780:	e0bffc03 	ldbu	r2,-16(fp)
  812784:	10800830 	cmpltui	r2,r2,32
  812788:	1000081e 	bne	r2,zero,8127ac <OSTaskNameSet+0x188>
  81278c:	e0bffa17 	ldw	r2,-24(fp)
  812790:	e0bff615 	stw	r2,-40(fp)
  812794:	e0bff617 	ldw	r2,-40(fp)
  812798:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  81279c:	e0ffff17 	ldw	r3,-4(fp)
  8127a0:	00801044 	movi	r2,65
  8127a4:	18800005 	stb	r2,0(r3)
        return;
  8127a8:	00000a06 	br	8127d4 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  8127ac:	e0bffb17 	ldw	r2,-20(fp)
  8127b0:	11001304 	addi	r4,r2,76
  8127b4:	e17ffe17 	ldw	r5,-8(fp)
  8127b8:	080ce340 	call	80ce34 <OS_StrCopy>
  8127bc:	e0bffa17 	ldw	r2,-24(fp)
  8127c0:	e0bff515 	stw	r2,-44(fp)
  8127c4:	e0bff517 	ldw	r2,-44(fp)
  8127c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8127cc:	e0bfff17 	ldw	r2,-4(fp)
  8127d0:	10000005 	stb	zero,0(r2)
}
  8127d4:	e037883a 	mov	sp,fp
  8127d8:	dfc00117 	ldw	ra,4(sp)
  8127dc:	df000017 	ldw	fp,0(sp)
  8127e0:	dec00204 	addi	sp,sp,8
  8127e4:	f800283a 	ret

008127e8 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  8127e8:	defff304 	addi	sp,sp,-52
  8127ec:	dfc00c15 	stw	ra,48(sp)
  8127f0:	df000b15 	stw	fp,44(sp)
  8127f4:	df000b04 	addi	fp,sp,44
  8127f8:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  8127fc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  812800:	e0bffe03 	ldbu	r2,-8(fp)
  812804:	10800530 	cmpltui	r2,r2,20
  812808:	1000031e 	bne	r2,zero,812818 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  81280c:	00800a84 	movi	r2,42
  812810:	e0bfff15 	stw	r2,-4(fp)
  812814:	00007406 	br	8129e8 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812818:	0005303a 	rdctl	r2,status
  81281c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812820:	e0fffb17 	ldw	r3,-20(fp)
  812824:	00bfff84 	movi	r2,-2
  812828:	1884703a 	and	r2,r3,r2
  81282c:	1001703a 	wrctl	status,r2
  
  return context;
  812830:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812834:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  812838:	e0bffe03 	ldbu	r2,-8(fp)
  81283c:	00c020f4 	movhi	r3,131
  812840:	18e79804 	addi	r3,r3,-24992
  812844:	1085883a 	add	r2,r2,r2
  812848:	1085883a 	add	r2,r2,r2
  81284c:	10c5883a 	add	r2,r2,r3
  812850:	10800017 	ldw	r2,0(r2)
  812854:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  812858:	e0bffd17 	ldw	r2,-12(fp)
  81285c:	1004c03a 	cmpne	r2,r2,zero
  812860:	1000071e 	bne	r2,zero,812880 <OSTaskResume+0x98>
  812864:	e0bffc17 	ldw	r2,-16(fp)
  812868:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81286c:	e0bffa17 	ldw	r2,-24(fp)
  812870:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  812874:	00801184 	movi	r2,70
  812878:	e0bfff15 	stw	r2,-4(fp)
  81287c:	00005a06 	br	8129e8 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  812880:	e0bffd17 	ldw	r2,-12(fp)
  812884:	10800058 	cmpnei	r2,r2,1
  812888:	1000071e 	bne	r2,zero,8128a8 <OSTaskResume+0xc0>
  81288c:	e0bffc17 	ldw	r2,-16(fp)
  812890:	e0bff915 	stw	r2,-28(fp)
  812894:	e0bff917 	ldw	r2,-28(fp)
  812898:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81289c:	008010c4 	movi	r2,67
  8128a0:	e0bfff15 	stw	r2,-4(fp)
  8128a4:	00005006 	br	8129e8 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  8128a8:	e0bffd17 	ldw	r2,-12(fp)
  8128ac:	10800c03 	ldbu	r2,48(r2)
  8128b0:	10803fcc 	andi	r2,r2,255
  8128b4:	1080020c 	andi	r2,r2,8
  8128b8:	1005003a 	cmpeq	r2,r2,zero
  8128bc:	1000441e 	bne	r2,zero,8129d0 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  8128c0:	e0bffd17 	ldw	r2,-12(fp)
  8128c4:	10c00c03 	ldbu	r3,48(r2)
  8128c8:	00bffdc4 	movi	r2,-9
  8128cc:	1884703a 	and	r2,r3,r2
  8128d0:	1007883a 	mov	r3,r2
  8128d4:	e0bffd17 	ldw	r2,-12(fp)
  8128d8:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  8128dc:	e0bffd17 	ldw	r2,-12(fp)
  8128e0:	10800c03 	ldbu	r2,48(r2)
  8128e4:	10803fcc 	andi	r2,r2,255
  8128e8:	1004c03a 	cmpne	r2,r2,zero
  8128ec:	1000321e 	bne	r2,zero,8129b8 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  8128f0:	e0bffd17 	ldw	r2,-12(fp)
  8128f4:	10800b8b 	ldhu	r2,46(r2)
  8128f8:	10bfffcc 	andi	r2,r2,65535
  8128fc:	1004c03a 	cmpne	r2,r2,zero
  812900:	1000281e 	bne	r2,zero,8129a4 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  812904:	e0bffd17 	ldw	r2,-12(fp)
  812908:	10c00d83 	ldbu	r3,54(r2)
  81290c:	008020b4 	movhi	r2,130
  812910:	10bb0204 	addi	r2,r2,-5112
  812914:	10800003 	ldbu	r2,0(r2)
  812918:	1884b03a 	or	r2,r3,r2
  81291c:	1007883a 	mov	r3,r2
  812920:	008020b4 	movhi	r2,130
  812924:	10bb0204 	addi	r2,r2,-5112
  812928:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81292c:	e0bffd17 	ldw	r2,-12(fp)
  812930:	10800d03 	ldbu	r2,52(r2)
  812934:	11003fcc 	andi	r4,r2,255
  812938:	e0bffd17 	ldw	r2,-12(fp)
  81293c:	10800d03 	ldbu	r2,52(r2)
  812940:	10c03fcc 	andi	r3,r2,255
  812944:	008020b4 	movhi	r2,130
  812948:	10bb0244 	addi	r2,r2,-5111
  81294c:	10c5883a 	add	r2,r2,r3
  812950:	10c00003 	ldbu	r3,0(r2)
  812954:	e0bffd17 	ldw	r2,-12(fp)
  812958:	10800d43 	ldbu	r2,53(r2)
  81295c:	1884b03a 	or	r2,r3,r2
  812960:	1007883a 	mov	r3,r2
  812964:	008020b4 	movhi	r2,130
  812968:	10bb0244 	addi	r2,r2,-5111
  81296c:	1105883a 	add	r2,r2,r4
  812970:	10c00005 	stb	r3,0(r2)
  812974:	e0bffc17 	ldw	r2,-16(fp)
  812978:	e0bff815 	stw	r2,-32(fp)
  81297c:	e0bff817 	ldw	r2,-32(fp)
  812980:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  812984:	008020b4 	movhi	r2,130
  812988:	10baf644 	addi	r2,r2,-5159
  81298c:	10800003 	ldbu	r2,0(r2)
  812990:	10803fcc 	andi	r2,r2,255
  812994:	10800058 	cmpnei	r2,r2,1
  812998:	10000b1e 	bne	r2,zero,8129c8 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  81299c:	080ccf00 	call	80ccf0 <OS_Sched>
  8129a0:	00000906 	br	8129c8 <OSTaskResume+0x1e0>
  8129a4:	e0bffc17 	ldw	r2,-16(fp)
  8129a8:	e0bff715 	stw	r2,-36(fp)
  8129ac:	e0bff717 	ldw	r2,-36(fp)
  8129b0:	1001703a 	wrctl	status,r2
  8129b4:	00000406 	br	8129c8 <OSTaskResume+0x1e0>
  8129b8:	e0bffc17 	ldw	r2,-16(fp)
  8129bc:	e0bff615 	stw	r2,-40(fp)
  8129c0:	e0bff617 	ldw	r2,-40(fp)
  8129c4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  8129c8:	e03fff15 	stw	zero,-4(fp)
  8129cc:	00000606 	br	8129e8 <OSTaskResume+0x200>
  8129d0:	e0bffc17 	ldw	r2,-16(fp)
  8129d4:	e0bff515 	stw	r2,-44(fp)
  8129d8:	e0bff517 	ldw	r2,-44(fp)
  8129dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  8129e0:	00801104 	movi	r2,68
  8129e4:	e0bfff15 	stw	r2,-4(fp)
  8129e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8129ec:	e037883a 	mov	sp,fp
  8129f0:	dfc00117 	ldw	ra,4(sp)
  8129f4:	df000017 	ldw	fp,0(sp)
  8129f8:	dec00204 	addi	sp,sp,8
  8129fc:	f800283a 	ret

00812a00 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  812a00:	defff204 	addi	sp,sp,-56
  812a04:	df000d15 	stw	fp,52(sp)
  812a08:	df000d04 	addi	fp,sp,52
  812a0c:	e17ffe15 	stw	r5,-8(fp)
  812a10:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  812a14:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  812a18:	e0bffd03 	ldbu	r2,-12(fp)
  812a1c:	10800570 	cmpltui	r2,r2,21
  812a20:	1000061e 	bne	r2,zero,812a3c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  812a24:	e0bffd03 	ldbu	r2,-12(fp)
  812a28:	10803fe0 	cmpeqi	r2,r2,255
  812a2c:	1000031e 	bne	r2,zero,812a3c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  812a30:	00800a84 	movi	r2,42
  812a34:	e0bfff15 	stw	r2,-4(fp)
  812a38:	00006b06 	br	812be8 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  812a3c:	e0bffe17 	ldw	r2,-8(fp)
  812a40:	1004c03a 	cmpne	r2,r2,zero
  812a44:	1000031e 	bne	r2,zero,812a54 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  812a48:	00800244 	movi	r2,9
  812a4c:	e0bfff15 	stw	r2,-4(fp)
  812a50:	00006506 	br	812be8 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  812a54:	e0bffe17 	ldw	r2,-8(fp)
  812a58:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  812a5c:	e0bffe17 	ldw	r2,-8(fp)
  812a60:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812a64:	0005303a 	rdctl	r2,status
  812a68:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812a6c:	e0fff717 	ldw	r3,-36(fp)
  812a70:	00bfff84 	movi	r2,-2
  812a74:	1884703a 	and	r2,r3,r2
  812a78:	1001703a 	wrctl	status,r2
  
  return context;
  812a7c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  812a80:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  812a84:	e0bffd03 	ldbu	r2,-12(fp)
  812a88:	10803fd8 	cmpnei	r2,r2,255
  812a8c:	1000051e 	bne	r2,zero,812aa4 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  812a90:	008020b4 	movhi	r2,130
  812a94:	10bb0504 	addi	r2,r2,-5100
  812a98:	10800017 	ldw	r2,0(r2)
  812a9c:	10800c83 	ldbu	r2,50(r2)
  812aa0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  812aa4:	e0bffd03 	ldbu	r2,-12(fp)
  812aa8:	00c020f4 	movhi	r3,131
  812aac:	18e79804 	addi	r3,r3,-24992
  812ab0:	1085883a 	add	r2,r2,r2
  812ab4:	1085883a 	add	r2,r2,r2
  812ab8:	10c5883a 	add	r2,r2,r3
  812abc:	10800017 	ldw	r2,0(r2)
  812ac0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  812ac4:	e0bffc17 	ldw	r2,-16(fp)
  812ac8:	1004c03a 	cmpne	r2,r2,zero
  812acc:	1000071e 	bne	r2,zero,812aec <OSTaskStkChk+0xec>
  812ad0:	e0bff817 	ldw	r2,-32(fp)
  812ad4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812ad8:	e0bff617 	ldw	r2,-40(fp)
  812adc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  812ae0:	008010c4 	movi	r2,67
  812ae4:	e0bfff15 	stw	r2,-4(fp)
  812ae8:	00003f06 	br	812be8 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  812aec:	e0bffc17 	ldw	r2,-16(fp)
  812af0:	10800058 	cmpnei	r2,r2,1
  812af4:	1000071e 	bne	r2,zero,812b14 <OSTaskStkChk+0x114>
  812af8:	e0bff817 	ldw	r2,-32(fp)
  812afc:	e0bff515 	stw	r2,-44(fp)
  812b00:	e0bff517 	ldw	r2,-44(fp)
  812b04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  812b08:	008010c4 	movi	r2,67
  812b0c:	e0bfff15 	stw	r2,-4(fp)
  812b10:	00003506 	br	812be8 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  812b14:	e0bffc17 	ldw	r2,-16(fp)
  812b18:	1080040b 	ldhu	r2,16(r2)
  812b1c:	10bfffcc 	andi	r2,r2,65535
  812b20:	1080004c 	andi	r2,r2,1
  812b24:	1004c03a 	cmpne	r2,r2,zero
  812b28:	1000071e 	bne	r2,zero,812b48 <OSTaskStkChk+0x148>
  812b2c:	e0bff817 	ldw	r2,-32(fp)
  812b30:	e0bff415 	stw	r2,-48(fp)
  812b34:	e0bff417 	ldw	r2,-48(fp)
  812b38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  812b3c:	00801144 	movi	r2,69
  812b40:	e0bfff15 	stw	r2,-4(fp)
  812b44:	00002806 	br	812be8 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  812b48:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  812b4c:	e0bffc17 	ldw	r2,-16(fp)
  812b50:	10800317 	ldw	r2,12(r2)
  812b54:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  812b58:	e0bffc17 	ldw	r2,-16(fp)
  812b5c:	10800217 	ldw	r2,8(r2)
  812b60:	e0bffb15 	stw	r2,-20(fp)
  812b64:	e0bff817 	ldw	r2,-32(fp)
  812b68:	e0bff315 	stw	r2,-52(fp)
  812b6c:	e0bff317 	ldw	r2,-52(fp)
  812b70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  812b74:	00000306 	br	812b84 <OSTaskStkChk+0x184>
        nfree++;
  812b78:	e0bffa17 	ldw	r2,-24(fp)
  812b7c:	10800044 	addi	r2,r2,1
  812b80:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  812b84:	e0bffb17 	ldw	r2,-20(fp)
  812b88:	10800017 	ldw	r2,0(r2)
  812b8c:	1005003a 	cmpeq	r2,r2,zero
  812b90:	1007883a 	mov	r3,r2
  812b94:	e0bffb17 	ldw	r2,-20(fp)
  812b98:	10800104 	addi	r2,r2,4
  812b9c:	e0bffb15 	stw	r2,-20(fp)
  812ba0:	18803fcc 	andi	r2,r3,255
  812ba4:	1004c03a 	cmpne	r2,r2,zero
  812ba8:	103ff31e 	bne	r2,zero,812b78 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  812bac:	e0bffa17 	ldw	r2,-24(fp)
  812bb0:	1085883a 	add	r2,r2,r2
  812bb4:	1085883a 	add	r2,r2,r2
  812bb8:	1007883a 	mov	r3,r2
  812bbc:	e0bffe17 	ldw	r2,-8(fp)
  812bc0:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  812bc4:	e0fff917 	ldw	r3,-28(fp)
  812bc8:	e0bffa17 	ldw	r2,-24(fp)
  812bcc:	1885c83a 	sub	r2,r3,r2
  812bd0:	1085883a 	add	r2,r2,r2
  812bd4:	1085883a 	add	r2,r2,r2
  812bd8:	1007883a 	mov	r3,r2
  812bdc:	e0bffe17 	ldw	r2,-8(fp)
  812be0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  812be4:	e03fff15 	stw	zero,-4(fp)
  812be8:	e0bfff17 	ldw	r2,-4(fp)
}
  812bec:	e037883a 	mov	sp,fp
  812bf0:	df000017 	ldw	fp,0(sp)
  812bf4:	dec00104 	addi	sp,sp,4
  812bf8:	f800283a 	ret

00812bfc <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  812bfc:	defff404 	addi	sp,sp,-48
  812c00:	dfc00b15 	stw	ra,44(sp)
  812c04:	df000a15 	stw	fp,40(sp)
  812c08:	df000a04 	addi	fp,sp,40
  812c0c:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812c10:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  812c14:	e0bffe03 	ldbu	r2,-8(fp)
  812c18:	10800518 	cmpnei	r2,r2,20
  812c1c:	1000031e 	bne	r2,zero,812c2c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  812c20:	008011c4 	movi	r2,71
  812c24:	e0bfff15 	stw	r2,-4(fp)
  812c28:	00007906 	br	812e10 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  812c2c:	e0bffe03 	ldbu	r2,-8(fp)
  812c30:	10800530 	cmpltui	r2,r2,20
  812c34:	1000061e 	bne	r2,zero,812c50 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  812c38:	e0bffe03 	ldbu	r2,-8(fp)
  812c3c:	10803fe0 	cmpeqi	r2,r2,255
  812c40:	1000031e 	bne	r2,zero,812c50 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  812c44:	00800a84 	movi	r2,42
  812c48:	e0bfff15 	stw	r2,-4(fp)
  812c4c:	00007006 	br	812e10 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812c50:	0005303a 	rdctl	r2,status
  812c54:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812c58:	e0fff917 	ldw	r3,-28(fp)
  812c5c:	00bfff84 	movi	r2,-2
  812c60:	1884703a 	and	r2,r3,r2
  812c64:	1001703a 	wrctl	status,r2
  
  return context;
  812c68:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  812c6c:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  812c70:	e0bffe03 	ldbu	r2,-8(fp)
  812c74:	10803fd8 	cmpnei	r2,r2,255
  812c78:	1000081e 	bne	r2,zero,812c9c <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  812c7c:	008020b4 	movhi	r2,130
  812c80:	10bb0504 	addi	r2,r2,-5100
  812c84:	10800017 	ldw	r2,0(r2)
  812c88:	10800c83 	ldbu	r2,50(r2)
  812c8c:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  812c90:	00800044 	movi	r2,1
  812c94:	e0bffd05 	stb	r2,-12(fp)
  812c98:	00000b06 	br	812cc8 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  812c9c:	008020b4 	movhi	r2,130
  812ca0:	10bb0504 	addi	r2,r2,-5100
  812ca4:	10800017 	ldw	r2,0(r2)
  812ca8:	10800c83 	ldbu	r2,50(r2)
  812cac:	10c03fcc 	andi	r3,r2,255
  812cb0:	e0bffe03 	ldbu	r2,-8(fp)
  812cb4:	1880031e 	bne	r3,r2,812cc4 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  812cb8:	00800044 	movi	r2,1
  812cbc:	e0bffd05 	stb	r2,-12(fp)
  812cc0:	00000106 	br	812cc8 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  812cc4:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  812cc8:	e0bffe03 	ldbu	r2,-8(fp)
  812ccc:	00c020f4 	movhi	r3,131
  812cd0:	18e79804 	addi	r3,r3,-24992
  812cd4:	1085883a 	add	r2,r2,r2
  812cd8:	1085883a 	add	r2,r2,r2
  812cdc:	10c5883a 	add	r2,r2,r3
  812ce0:	10800017 	ldw	r2,0(r2)
  812ce4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  812ce8:	e0bffc17 	ldw	r2,-16(fp)
  812cec:	1004c03a 	cmpne	r2,r2,zero
  812cf0:	1000071e 	bne	r2,zero,812d10 <OSTaskSuspend+0x114>
  812cf4:	e0bffa17 	ldw	r2,-24(fp)
  812cf8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812cfc:	e0bff817 	ldw	r2,-32(fp)
  812d00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  812d04:	00801204 	movi	r2,72
  812d08:	e0bfff15 	stw	r2,-4(fp)
  812d0c:	00004006 	br	812e10 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  812d10:	e0bffc17 	ldw	r2,-16(fp)
  812d14:	10800058 	cmpnei	r2,r2,1
  812d18:	1000071e 	bne	r2,zero,812d38 <OSTaskSuspend+0x13c>
  812d1c:	e0bffa17 	ldw	r2,-24(fp)
  812d20:	e0bff715 	stw	r2,-36(fp)
  812d24:	e0bff717 	ldw	r2,-36(fp)
  812d28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  812d2c:	008010c4 	movi	r2,67
  812d30:	e0bfff15 	stw	r2,-4(fp)
  812d34:	00003606 	br	812e10 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  812d38:	e0bffc17 	ldw	r2,-16(fp)
  812d3c:	10800d03 	ldbu	r2,52(r2)
  812d40:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  812d44:	e13ffb03 	ldbu	r4,-20(fp)
  812d48:	e0fffb03 	ldbu	r3,-20(fp)
  812d4c:	008020b4 	movhi	r2,130
  812d50:	10bb0244 	addi	r2,r2,-5111
  812d54:	10c5883a 	add	r2,r2,r3
  812d58:	10800003 	ldbu	r2,0(r2)
  812d5c:	1007883a 	mov	r3,r2
  812d60:	e0bffc17 	ldw	r2,-16(fp)
  812d64:	10800d43 	ldbu	r2,53(r2)
  812d68:	0084303a 	nor	r2,zero,r2
  812d6c:	1884703a 	and	r2,r3,r2
  812d70:	1007883a 	mov	r3,r2
  812d74:	008020b4 	movhi	r2,130
  812d78:	10bb0244 	addi	r2,r2,-5111
  812d7c:	1105883a 	add	r2,r2,r4
  812d80:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  812d84:	e0fffb03 	ldbu	r3,-20(fp)
  812d88:	008020b4 	movhi	r2,130
  812d8c:	10bb0244 	addi	r2,r2,-5111
  812d90:	10c5883a 	add	r2,r2,r3
  812d94:	10800003 	ldbu	r2,0(r2)
  812d98:	10803fcc 	andi	r2,r2,255
  812d9c:	1004c03a 	cmpne	r2,r2,zero
  812da0:	10000c1e 	bne	r2,zero,812dd4 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  812da4:	e0bffc17 	ldw	r2,-16(fp)
  812da8:	10800d83 	ldbu	r2,54(r2)
  812dac:	0084303a 	nor	r2,zero,r2
  812db0:	1007883a 	mov	r3,r2
  812db4:	008020b4 	movhi	r2,130
  812db8:	10bb0204 	addi	r2,r2,-5112
  812dbc:	10800003 	ldbu	r2,0(r2)
  812dc0:	1884703a 	and	r2,r3,r2
  812dc4:	1007883a 	mov	r3,r2
  812dc8:	008020b4 	movhi	r2,130
  812dcc:	10bb0204 	addi	r2,r2,-5112
  812dd0:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  812dd4:	e0bffc17 	ldw	r2,-16(fp)
  812dd8:	10800c03 	ldbu	r2,48(r2)
  812ddc:	10800214 	ori	r2,r2,8
  812de0:	1007883a 	mov	r3,r2
  812de4:	e0bffc17 	ldw	r2,-16(fp)
  812de8:	10c00c05 	stb	r3,48(r2)
  812dec:	e0bffa17 	ldw	r2,-24(fp)
  812df0:	e0bff615 	stw	r2,-40(fp)
  812df4:	e0bff617 	ldw	r2,-40(fp)
  812df8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  812dfc:	e0bffd03 	ldbu	r2,-12(fp)
  812e00:	10800058 	cmpnei	r2,r2,1
  812e04:	1000011e 	bne	r2,zero,812e0c <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  812e08:	080ccf00 	call	80ccf0 <OS_Sched>
    }
    return (OS_ERR_NONE);
  812e0c:	e03fff15 	stw	zero,-4(fp)
  812e10:	e0bfff17 	ldw	r2,-4(fp)
}
  812e14:	e037883a 	mov	sp,fp
  812e18:	dfc00117 	ldw	ra,4(sp)
  812e1c:	df000017 	ldw	fp,0(sp)
  812e20:	dec00204 	addi	sp,sp,8
  812e24:	f800283a 	ret

00812e28 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  812e28:	defff504 	addi	sp,sp,-44
  812e2c:	dfc00a15 	stw	ra,40(sp)
  812e30:	df000915 	stw	fp,36(sp)
  812e34:	df000904 	addi	fp,sp,36
  812e38:	e17ffe15 	stw	r5,-8(fp)
  812e3c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812e40:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  812e44:	e0bffd03 	ldbu	r2,-12(fp)
  812e48:	10800570 	cmpltui	r2,r2,21
  812e4c:	1000061e 	bne	r2,zero,812e68 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  812e50:	e0bffd03 	ldbu	r2,-12(fp)
  812e54:	10803fe0 	cmpeqi	r2,r2,255
  812e58:	1000031e 	bne	r2,zero,812e68 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  812e5c:	00800a84 	movi	r2,42
  812e60:	e0bfff15 	stw	r2,-4(fp)
  812e64:	00003b06 	br	812f54 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  812e68:	e0bffe17 	ldw	r2,-8(fp)
  812e6c:	1004c03a 	cmpne	r2,r2,zero
  812e70:	1000031e 	bne	r2,zero,812e80 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  812e74:	00800244 	movi	r2,9
  812e78:	e0bfff15 	stw	r2,-4(fp)
  812e7c:	00003506 	br	812f54 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812e80:	0005303a 	rdctl	r2,status
  812e84:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812e88:	e0fffa17 	ldw	r3,-24(fp)
  812e8c:	00bfff84 	movi	r2,-2
  812e90:	1884703a 	and	r2,r3,r2
  812e94:	1001703a 	wrctl	status,r2
  
  return context;
  812e98:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812e9c:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  812ea0:	e0bffd03 	ldbu	r2,-12(fp)
  812ea4:	10803fd8 	cmpnei	r2,r2,255
  812ea8:	1000051e 	bne	r2,zero,812ec0 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  812eac:	008020b4 	movhi	r2,130
  812eb0:	10bb0504 	addi	r2,r2,-5100
  812eb4:	10800017 	ldw	r2,0(r2)
  812eb8:	10800c83 	ldbu	r2,50(r2)
  812ebc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  812ec0:	e0bffd03 	ldbu	r2,-12(fp)
  812ec4:	00c020f4 	movhi	r3,131
  812ec8:	18e79804 	addi	r3,r3,-24992
  812ecc:	1085883a 	add	r2,r2,r2
  812ed0:	1085883a 	add	r2,r2,r2
  812ed4:	10c5883a 	add	r2,r2,r3
  812ed8:	10800017 	ldw	r2,0(r2)
  812edc:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  812ee0:	e0bffc17 	ldw	r2,-16(fp)
  812ee4:	1004c03a 	cmpne	r2,r2,zero
  812ee8:	1000071e 	bne	r2,zero,812f08 <OSTaskQuery+0xe0>
  812eec:	e0bffb17 	ldw	r2,-20(fp)
  812ef0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812ef4:	e0bff917 	ldw	r2,-28(fp)
  812ef8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  812efc:	00800a44 	movi	r2,41
  812f00:	e0bfff15 	stw	r2,-4(fp)
  812f04:	00001306 	br	812f54 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  812f08:	e0bffc17 	ldw	r2,-16(fp)
  812f0c:	10800058 	cmpnei	r2,r2,1
  812f10:	1000071e 	bne	r2,zero,812f30 <OSTaskQuery+0x108>
  812f14:	e0bffb17 	ldw	r2,-20(fp)
  812f18:	e0bff815 	stw	r2,-32(fp)
  812f1c:	e0bff817 	ldw	r2,-32(fp)
  812f20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  812f24:	008010c4 	movi	r2,67
  812f28:	e0bfff15 	stw	r2,-4(fp)
  812f2c:	00000906 	br	812f54 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  812f30:	e13ffe17 	ldw	r4,-8(fp)
  812f34:	e17ffc17 	ldw	r5,-16(fp)
  812f38:	01801b04 	movi	r6,108
  812f3c:	080cc840 	call	80cc84 <OS_MemCopy>
  812f40:	e0bffb17 	ldw	r2,-20(fp)
  812f44:	e0bff715 	stw	r2,-36(fp)
  812f48:	e0bff717 	ldw	r2,-36(fp)
  812f4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  812f50:	e03fff15 	stw	zero,-4(fp)
  812f54:	e0bfff17 	ldw	r2,-4(fp)
}
  812f58:	e037883a 	mov	sp,fp
  812f5c:	dfc00117 	ldw	ra,4(sp)
  812f60:	df000017 	ldw	fp,0(sp)
  812f64:	dec00204 	addi	sp,sp,8
  812f68:	f800283a 	ret

00812f6c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  812f6c:	defffc04 	addi	sp,sp,-16
  812f70:	df000315 	stw	fp,12(sp)
  812f74:	df000304 	addi	fp,sp,12
  812f78:	e13ffd15 	stw	r4,-12(fp)
  812f7c:	e17ffe15 	stw	r5,-8(fp)
  812f80:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  812f84:	e0bfff0b 	ldhu	r2,-4(fp)
  812f88:	1080004c 	andi	r2,r2,1
  812f8c:	10803fcc 	andi	r2,r2,255
  812f90:	1005003a 	cmpeq	r2,r2,zero
  812f94:	1000101e 	bne	r2,zero,812fd8 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  812f98:	e0bfff0b 	ldhu	r2,-4(fp)
  812f9c:	1080008c 	andi	r2,r2,2
  812fa0:	1005003a 	cmpeq	r2,r2,zero
  812fa4:	10000c1e 	bne	r2,zero,812fd8 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  812fa8:	00000806 	br	812fcc <OS_TaskStkClr+0x60>
                size--;
  812fac:	e0bffe17 	ldw	r2,-8(fp)
  812fb0:	10bfffc4 	addi	r2,r2,-1
  812fb4:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  812fb8:	e0bffd17 	ldw	r2,-12(fp)
  812fbc:	10000015 	stw	zero,0(r2)
  812fc0:	e0bffd17 	ldw	r2,-12(fp)
  812fc4:	10800104 	addi	r2,r2,4
  812fc8:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  812fcc:	e0bffe17 	ldw	r2,-8(fp)
  812fd0:	1004c03a 	cmpne	r2,r2,zero
  812fd4:	103ff51e 	bne	r2,zero,812fac <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  812fd8:	e037883a 	mov	sp,fp
  812fdc:	df000017 	ldw	fp,0(sp)
  812fe0:	dec00104 	addi	sp,sp,4
  812fe4:	f800283a 	ret

00812fe8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  812fe8:	defff904 	addi	sp,sp,-28
  812fec:	dfc00615 	stw	ra,24(sp)
  812ff0:	df000515 	stw	fp,20(sp)
  812ff4:	df000504 	addi	fp,sp,20
  812ff8:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812ffc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  813000:	008020b4 	movhi	r2,130
  813004:	10bb0404 	addi	r2,r2,-5104
  813008:	10800003 	ldbu	r2,0(r2)
  81300c:	10803fcc 	andi	r2,r2,255
  813010:	1004c03a 	cmpne	r2,r2,zero
  813014:	1000421e 	bne	r2,zero,813120 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  813018:	e0bfff0b 	ldhu	r2,-4(fp)
  81301c:	1005003a 	cmpeq	r2,r2,zero
  813020:	10003f1e 	bne	r2,zero,813120 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813024:	0005303a 	rdctl	r2,status
  813028:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81302c:	e0fffc17 	ldw	r3,-16(fp)
  813030:	00bfff84 	movi	r2,-2
  813034:	1884703a 	and	r2,r3,r2
  813038:	1001703a 	wrctl	status,r2
  
  return context;
  81303c:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  813040:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  813044:	008020b4 	movhi	r2,130
  813048:	10bb0504 	addi	r2,r2,-5100
  81304c:	10800017 	ldw	r2,0(r2)
  813050:	10800d03 	ldbu	r2,52(r2)
  813054:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  813058:	e13ffe03 	ldbu	r4,-8(fp)
  81305c:	e0fffe03 	ldbu	r3,-8(fp)
  813060:	008020b4 	movhi	r2,130
  813064:	10bb0244 	addi	r2,r2,-5111
  813068:	10c5883a 	add	r2,r2,r3
  81306c:	10800003 	ldbu	r2,0(r2)
  813070:	1007883a 	mov	r3,r2
  813074:	008020b4 	movhi	r2,130
  813078:	10bb0504 	addi	r2,r2,-5100
  81307c:	10800017 	ldw	r2,0(r2)
  813080:	10800d43 	ldbu	r2,53(r2)
  813084:	0084303a 	nor	r2,zero,r2
  813088:	1884703a 	and	r2,r3,r2
  81308c:	1007883a 	mov	r3,r2
  813090:	008020b4 	movhi	r2,130
  813094:	10bb0244 	addi	r2,r2,-5111
  813098:	1105883a 	add	r2,r2,r4
  81309c:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  8130a0:	e0fffe03 	ldbu	r3,-8(fp)
  8130a4:	008020b4 	movhi	r2,130
  8130a8:	10bb0244 	addi	r2,r2,-5111
  8130ac:	10c5883a 	add	r2,r2,r3
  8130b0:	10800003 	ldbu	r2,0(r2)
  8130b4:	10803fcc 	andi	r2,r2,255
  8130b8:	1004c03a 	cmpne	r2,r2,zero
  8130bc:	10000e1e 	bne	r2,zero,8130f8 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  8130c0:	008020b4 	movhi	r2,130
  8130c4:	10bb0504 	addi	r2,r2,-5100
  8130c8:	10800017 	ldw	r2,0(r2)
  8130cc:	10800d83 	ldbu	r2,54(r2)
  8130d0:	0084303a 	nor	r2,zero,r2
  8130d4:	1007883a 	mov	r3,r2
  8130d8:	008020b4 	movhi	r2,130
  8130dc:	10bb0204 	addi	r2,r2,-5112
  8130e0:	10800003 	ldbu	r2,0(r2)
  8130e4:	1884703a 	and	r2,r3,r2
  8130e8:	1007883a 	mov	r3,r2
  8130ec:	008020b4 	movhi	r2,130
  8130f0:	10bb0204 	addi	r2,r2,-5112
  8130f4:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  8130f8:	008020b4 	movhi	r2,130
  8130fc:	10bb0504 	addi	r2,r2,-5100
  813100:	10c00017 	ldw	r3,0(r2)
  813104:	e0bfff0b 	ldhu	r2,-4(fp)
  813108:	18800b8d 	sth	r2,46(r3)
  81310c:	e0bffd17 	ldw	r2,-12(fp)
  813110:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813114:	e0bffb17 	ldw	r2,-20(fp)
  813118:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  81311c:	080ccf00 	call	80ccf0 <OS_Sched>
    }
}
  813120:	e037883a 	mov	sp,fp
  813124:	dfc00117 	ldw	ra,4(sp)
  813128:	df000017 	ldw	fp,0(sp)
  81312c:	dec00204 	addi	sp,sp,8
  813130:	f800283a 	ret

00813134 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  813134:	defff604 	addi	sp,sp,-40
  813138:	dfc00915 	stw	ra,36(sp)
  81313c:	df000815 	stw	fp,32(sp)
  813140:	dc000715 	stw	r16,28(sp)
  813144:	df000704 	addi	fp,sp,28
  813148:	e13ffb05 	stb	r4,-20(fp)
  81314c:	e17ffc05 	stb	r5,-16(fp)
  813150:	e1bffd05 	stb	r6,-12(fp)
  813154:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  813158:	008020b4 	movhi	r2,130
  81315c:	10bb0404 	addi	r2,r2,-5104
  813160:	10800003 	ldbu	r2,0(r2)
  813164:	10803fcc 	andi	r2,r2,255
  813168:	1005003a 	cmpeq	r2,r2,zero
  81316c:	1000031e 	bne	r2,zero,81317c <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  813170:	00801544 	movi	r2,85
  813174:	e0bfff15 	stw	r2,-4(fp)
  813178:	00004b06 	br	8132a8 <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  81317c:	e0bffb03 	ldbu	r2,-20(fp)
  813180:	1004c03a 	cmpne	r2,r2,zero
  813184:	10000c1e 	bne	r2,zero,8131b8 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  813188:	e0bffc03 	ldbu	r2,-16(fp)
  81318c:	1004c03a 	cmpne	r2,r2,zero
  813190:	1000091e 	bne	r2,zero,8131b8 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  813194:	e0bffd03 	ldbu	r2,-12(fp)
  813198:	1004c03a 	cmpne	r2,r2,zero
  81319c:	1000061e 	bne	r2,zero,8131b8 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  8131a0:	e0bffe0b 	ldhu	r2,-8(fp)
  8131a4:	1004c03a 	cmpne	r2,r2,zero
  8131a8:	1000031e 	bne	r2,zero,8131b8 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  8131ac:	00801504 	movi	r2,84
  8131b0:	e0bfff15 	stw	r2,-4(fp)
  8131b4:	00003c06 	br	8132a8 <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
  8131b8:	e0bffc03 	ldbu	r2,-16(fp)
  8131bc:	10800f30 	cmpltui	r2,r2,60
  8131c0:	1000031e 	bne	r2,zero,8131d0 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  8131c4:	00801444 	movi	r2,81
  8131c8:	e0bfff15 	stw	r2,-4(fp)
  8131cc:	00003606 	br	8132a8 <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
  8131d0:	e0bffd03 	ldbu	r2,-12(fp)
  8131d4:	10800f30 	cmpltui	r2,r2,60
  8131d8:	1000031e 	bne	r2,zero,8131e8 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  8131dc:	00801484 	movi	r2,82
  8131e0:	e0bfff15 	stw	r2,-4(fp)
  8131e4:	00003006 	br	8132a8 <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
  8131e8:	e0bffe0b 	ldhu	r2,-8(fp)
  8131ec:	1080fa30 	cmpltui	r2,r2,1000
  8131f0:	1000031e 	bne	r2,zero,813200 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  8131f4:	008014c4 	movi	r2,83
  8131f8:	e0bfff15 	stw	r2,-4(fp)
  8131fc:	00002a06 	br	8132a8 <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  813200:	e13ffb03 	ldbu	r4,-20(fp)
  813204:	01438404 	movi	r5,3600
  813208:	0809b1c0 	call	809b1c <__mulsi3>
  81320c:	1021883a 	mov	r16,r2
  813210:	e13ffc03 	ldbu	r4,-16(fp)
  813214:	01400f04 	movi	r5,60
  813218:	0809b1c0 	call	809b1c <__mulsi3>
  81321c:	8087883a 	add	r3,r16,r2
  813220:	e0bffd03 	ldbu	r2,-12(fp)
  813224:	1889883a 	add	r4,r3,r2
  813228:	0140fa04 	movi	r5,1000
  81322c:	0809b1c0 	call	809b1c <__mulsi3>
  813230:	1021883a 	mov	r16,r2
  813234:	e13ffe0b 	ldhu	r4,-8(fp)
  813238:	0140fa04 	movi	r5,1000
  81323c:	0809b1c0 	call	809b1c <__mulsi3>
  813240:	1009883a 	mov	r4,r2
  813244:	0140fa04 	movi	r5,1000
  813248:	0809b0c0 	call	809b0c <__udivsi3>
  81324c:	8085883a 	add	r2,r16,r2
  813250:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  813254:	e0bffa17 	ldw	r2,-24(fp)
  813258:	1004d43a 	srli	r2,r2,16
  81325c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  813260:	e0bffa17 	ldw	r2,-24(fp)
  813264:	10bfffcc 	andi	r2,r2,65535
  813268:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  81326c:	e0bffa17 	ldw	r2,-24(fp)
  813270:	113fffcc 	andi	r4,r2,65535
  813274:	0812fe80 	call	812fe8 <OSTimeDly>
    while (loops > 0) {
  813278:	00000706 	br	813298 <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
  81327c:	01200014 	movui	r4,32768
  813280:	0812fe80 	call	812fe8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  813284:	01200014 	movui	r4,32768
  813288:	0812fe80 	call	812fe8 <OSTimeDly>
        loops--;
  81328c:	e0bff90b 	ldhu	r2,-28(fp)
  813290:	10bfffc4 	addi	r2,r2,-1
  813294:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  813298:	e0bff90b 	ldhu	r2,-28(fp)
  81329c:	1004c03a 	cmpne	r2,r2,zero
  8132a0:	103ff61e 	bne	r2,zero,81327c <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  8132a4:	e03fff15 	stw	zero,-4(fp)
  8132a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8132ac:	e037883a 	mov	sp,fp
  8132b0:	dfc00217 	ldw	ra,8(sp)
  8132b4:	df000117 	ldw	fp,4(sp)
  8132b8:	dc000017 	ldw	r16,0(sp)
  8132bc:	dec00304 	addi	sp,sp,12
  8132c0:	f800283a 	ret

008132c4 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  8132c4:	defff404 	addi	sp,sp,-48
  8132c8:	dfc00b15 	stw	ra,44(sp)
  8132cc:	df000a15 	stw	fp,40(sp)
  8132d0:	df000a04 	addi	fp,sp,40
  8132d4:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8132d8:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  8132dc:	e0bffe03 	ldbu	r2,-8(fp)
  8132e0:	10800530 	cmpltui	r2,r2,20
  8132e4:	1000031e 	bne	r2,zero,8132f4 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  8132e8:	00800a84 	movi	r2,42
  8132ec:	e0bfff15 	stw	r2,-4(fp)
  8132f0:	00007206 	br	8134bc <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8132f4:	0005303a 	rdctl	r2,status
  8132f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8132fc:	e0fffb17 	ldw	r3,-20(fp)
  813300:	00bfff84 	movi	r2,-2
  813304:	1884703a 	and	r2,r3,r2
  813308:	1001703a 	wrctl	status,r2
  
  return context;
  81330c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  813310:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  813314:	e0bffe03 	ldbu	r2,-8(fp)
  813318:	00c020f4 	movhi	r3,131
  81331c:	18e79804 	addi	r3,r3,-24992
  813320:	1085883a 	add	r2,r2,r2
  813324:	1085883a 	add	r2,r2,r2
  813328:	10c5883a 	add	r2,r2,r3
  81332c:	10800017 	ldw	r2,0(r2)
  813330:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  813334:	e0bffd17 	ldw	r2,-12(fp)
  813338:	1004c03a 	cmpne	r2,r2,zero
  81333c:	1000071e 	bne	r2,zero,81335c <OSTimeDlyResume+0x98>
  813340:	e0bffc17 	ldw	r2,-16(fp)
  813344:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813348:	e0bffa17 	ldw	r2,-24(fp)
  81334c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  813350:	008010c4 	movi	r2,67
  813354:	e0bfff15 	stw	r2,-4(fp)
  813358:	00005806 	br	8134bc <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  81335c:	e0bffd17 	ldw	r2,-12(fp)
  813360:	10800058 	cmpnei	r2,r2,1
  813364:	1000071e 	bne	r2,zero,813384 <OSTimeDlyResume+0xc0>
  813368:	e0bffc17 	ldw	r2,-16(fp)
  81336c:	e0bff915 	stw	r2,-28(fp)
  813370:	e0bff917 	ldw	r2,-28(fp)
  813374:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  813378:	008010c4 	movi	r2,67
  81337c:	e0bfff15 	stw	r2,-4(fp)
  813380:	00004e06 	br	8134bc <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  813384:	e0bffd17 	ldw	r2,-12(fp)
  813388:	10800b8b 	ldhu	r2,46(r2)
  81338c:	10bfffcc 	andi	r2,r2,65535
  813390:	1004c03a 	cmpne	r2,r2,zero
  813394:	1000071e 	bne	r2,zero,8133b4 <OSTimeDlyResume+0xf0>
  813398:	e0bffc17 	ldw	r2,-16(fp)
  81339c:	e0bff815 	stw	r2,-32(fp)
  8133a0:	e0bff817 	ldw	r2,-32(fp)
  8133a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  8133a8:	00801404 	movi	r2,80
  8133ac:	e0bfff15 	stw	r2,-4(fp)
  8133b0:	00004206 	br	8134bc <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  8133b4:	e0bffd17 	ldw	r2,-12(fp)
  8133b8:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  8133bc:	e0bffd17 	ldw	r2,-12(fp)
  8133c0:	10800c03 	ldbu	r2,48(r2)
  8133c4:	10803fcc 	andi	r2,r2,255
  8133c8:	10800dcc 	andi	r2,r2,55
  8133cc:	1005003a 	cmpeq	r2,r2,zero
  8133d0:	10000b1e 	bne	r2,zero,813400 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  8133d4:	e0bffd17 	ldw	r2,-12(fp)
  8133d8:	10c00c03 	ldbu	r3,48(r2)
  8133dc:	00bff204 	movi	r2,-56
  8133e0:	1884703a 	and	r2,r3,r2
  8133e4:	1007883a 	mov	r3,r2
  8133e8:	e0bffd17 	ldw	r2,-12(fp)
  8133ec:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  8133f0:	e0fffd17 	ldw	r3,-12(fp)
  8133f4:	00800044 	movi	r2,1
  8133f8:	18800c45 	stb	r2,49(r3)
  8133fc:	00000206 	br	813408 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  813400:	e0bffd17 	ldw	r2,-12(fp)
  813404:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  813408:	e0bffd17 	ldw	r2,-12(fp)
  81340c:	10800c03 	ldbu	r2,48(r2)
  813410:	10803fcc 	andi	r2,r2,255
  813414:	1080020c 	andi	r2,r2,8
  813418:	1004c03a 	cmpne	r2,r2,zero
  81341c:	1000221e 	bne	r2,zero,8134a8 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  813420:	e0bffd17 	ldw	r2,-12(fp)
  813424:	10c00d83 	ldbu	r3,54(r2)
  813428:	008020b4 	movhi	r2,130
  81342c:	10bb0204 	addi	r2,r2,-5112
  813430:	10800003 	ldbu	r2,0(r2)
  813434:	1884b03a 	or	r2,r3,r2
  813438:	1007883a 	mov	r3,r2
  81343c:	008020b4 	movhi	r2,130
  813440:	10bb0204 	addi	r2,r2,-5112
  813444:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  813448:	e0bffd17 	ldw	r2,-12(fp)
  81344c:	10800d03 	ldbu	r2,52(r2)
  813450:	11003fcc 	andi	r4,r2,255
  813454:	e0bffd17 	ldw	r2,-12(fp)
  813458:	10800d03 	ldbu	r2,52(r2)
  81345c:	10c03fcc 	andi	r3,r2,255
  813460:	008020b4 	movhi	r2,130
  813464:	10bb0244 	addi	r2,r2,-5111
  813468:	10c5883a 	add	r2,r2,r3
  81346c:	10c00003 	ldbu	r3,0(r2)
  813470:	e0bffd17 	ldw	r2,-12(fp)
  813474:	10800d43 	ldbu	r2,53(r2)
  813478:	1884b03a 	or	r2,r3,r2
  81347c:	1007883a 	mov	r3,r2
  813480:	008020b4 	movhi	r2,130
  813484:	10bb0244 	addi	r2,r2,-5111
  813488:	1105883a 	add	r2,r2,r4
  81348c:	10c00005 	stb	r3,0(r2)
  813490:	e0bffc17 	ldw	r2,-16(fp)
  813494:	e0bff715 	stw	r2,-36(fp)
  813498:	e0bff717 	ldw	r2,-36(fp)
  81349c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  8134a0:	080ccf00 	call	80ccf0 <OS_Sched>
  8134a4:	00000406 	br	8134b8 <OSTimeDlyResume+0x1f4>
  8134a8:	e0bffc17 	ldw	r2,-16(fp)
  8134ac:	e0bff615 	stw	r2,-40(fp)
  8134b0:	e0bff617 	ldw	r2,-40(fp)
  8134b4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  8134b8:	e03fff15 	stw	zero,-4(fp)
  8134bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8134c0:	e037883a 	mov	sp,fp
  8134c4:	dfc00117 	ldw	ra,4(sp)
  8134c8:	df000017 	ldw	fp,0(sp)
  8134cc:	dec00204 	addi	sp,sp,8
  8134d0:	f800283a 	ret

008134d4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  8134d4:	defffb04 	addi	sp,sp,-20
  8134d8:	df000415 	stw	fp,16(sp)
  8134dc:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8134e0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8134e4:	0005303a 	rdctl	r2,status
  8134e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8134ec:	e0fffd17 	ldw	r3,-12(fp)
  8134f0:	00bfff84 	movi	r2,-2
  8134f4:	1884703a 	and	r2,r3,r2
  8134f8:	1001703a 	wrctl	status,r2
  
  return context;
  8134fc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  813500:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  813504:	008020b4 	movhi	r2,130
  813508:	10bb0604 	addi	r2,r2,-5096
  81350c:	10800017 	ldw	r2,0(r2)
  813510:	e0bfff15 	stw	r2,-4(fp)
  813514:	e0bffe17 	ldw	r2,-8(fp)
  813518:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81351c:	e0bffc17 	ldw	r2,-16(fp)
  813520:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  813524:	e0bfff17 	ldw	r2,-4(fp)
}
  813528:	e037883a 	mov	sp,fp
  81352c:	df000017 	ldw	fp,0(sp)
  813530:	dec00104 	addi	sp,sp,4
  813534:	f800283a 	ret

00813538 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  813538:	defffb04 	addi	sp,sp,-20
  81353c:	df000415 	stw	fp,16(sp)
  813540:	df000404 	addi	fp,sp,16
  813544:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  813548:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81354c:	0005303a 	rdctl	r2,status
  813550:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813554:	e0fffd17 	ldw	r3,-12(fp)
  813558:	00bfff84 	movi	r2,-2
  81355c:	1884703a 	and	r2,r3,r2
  813560:	1001703a 	wrctl	status,r2
  
  return context;
  813564:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  813568:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  81356c:	00c020b4 	movhi	r3,130
  813570:	18fb0604 	addi	r3,r3,-5096
  813574:	e0bfff17 	ldw	r2,-4(fp)
  813578:	18800015 	stw	r2,0(r3)
  81357c:	e0bffe17 	ldw	r2,-8(fp)
  813580:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813584:	e0bffc17 	ldw	r2,-16(fp)
  813588:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  81358c:	e037883a 	mov	sp,fp
  813590:	df000017 	ldw	fp,0(sp)
  813594:	dec00104 	addi	sp,sp,4
  813598:	f800283a 	ret

0081359c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  81359c:	defffd04 	addi	sp,sp,-12
  8135a0:	dfc00215 	stw	ra,8(sp)
  8135a4:	df000115 	stw	fp,4(sp)
  8135a8:	df000104 	addi	fp,sp,4
  8135ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  8135b0:	0819d880 	call	819d88 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8135b4:	00800044 	movi	r2,1
  8135b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8135bc:	e037883a 	mov	sp,fp
  8135c0:	dfc00117 	ldw	ra,4(sp)
  8135c4:	df000017 	ldw	fp,0(sp)
  8135c8:	dec00204 	addi	sp,sp,8
  8135cc:	f800283a 	ret

008135d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8135d0:	defffe04 	addi	sp,sp,-8
  8135d4:	dfc00115 	stw	ra,4(sp)
  8135d8:	df000015 	stw	fp,0(sp)
  8135dc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8135e0:	01006474 	movhi	r4,401
  8135e4:	21240004 	addi	r4,r4,-28672
  8135e8:	000b883a 	mov	r5,zero
  8135ec:	000d883a 	mov	r6,zero
  8135f0:	01c0fa04 	movi	r7,1000
  8135f4:	08144600 	call	814460 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8135f8:	010020b4 	movhi	r4,130
  8135fc:	212fa804 	addi	r4,r4,-16736
  813600:	000b883a 	mov	r5,zero
  813604:	01800044 	movi	r6,1
  813608:	08137dc0 	call	8137dc <altera_avalon_jtag_uart_init>
  81360c:	010020b4 	movhi	r4,130
  813610:	212f9e04 	addi	r4,r4,-16776
  813614:	081365c0 	call	81365c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  813618:	010020b4 	movhi	r4,130
  81361c:	2133b904 	addi	r4,r4,-12572
  813620:	08145980 	call	814598 <alt_up_character_lcd_init>
  813624:	010020b4 	movhi	r4,130
  813628:	2133b904 	addi	r4,r4,-12572
  81362c:	081365c0 	call	81365c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
  813630:	010020b4 	movhi	r4,130
  813634:	2133c404 	addi	r4,r4,-12528
  813638:	081365c0 	call	81365c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
  81363c:	010020b4 	movhi	r4,130
  813640:	2133cf04 	addi	r4,r4,-12484
  813644:	081365c0 	call	81365c <alt_dev_reg>
}
  813648:	e037883a 	mov	sp,fp
  81364c:	dfc00117 	ldw	ra,4(sp)
  813650:	df000017 	ldw	fp,0(sp)
  813654:	dec00204 	addi	sp,sp,8
  813658:	f800283a 	ret

0081365c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  81365c:	defffd04 	addi	sp,sp,-12
  813660:	dfc00215 	stw	ra,8(sp)
  813664:	df000115 	stw	fp,4(sp)
  813668:	df000104 	addi	fp,sp,4
  81366c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  813670:	e13fff17 	ldw	r4,-4(fp)
  813674:	014020b4 	movhi	r5,130
  813678:	2973e204 	addi	r5,r5,-12408
  81367c:	08193600 	call	819360 <alt_dev_llist_insert>
}
  813680:	e037883a 	mov	sp,fp
  813684:	dfc00117 	ldw	ra,4(sp)
  813688:	df000017 	ldw	fp,0(sp)
  81368c:	dec00204 	addi	sp,sp,8
  813690:	f800283a 	ret

00813694 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  813694:	defffa04 	addi	sp,sp,-24
  813698:	dfc00515 	stw	ra,20(sp)
  81369c:	df000415 	stw	fp,16(sp)
  8136a0:	df000404 	addi	fp,sp,16
  8136a4:	e13ffd15 	stw	r4,-12(fp)
  8136a8:	e17ffe15 	stw	r5,-8(fp)
  8136ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8136b0:	e0bffd17 	ldw	r2,-12(fp)
  8136b4:	10800017 	ldw	r2,0(r2)
  8136b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8136bc:	e0bffc17 	ldw	r2,-16(fp)
  8136c0:	11000a04 	addi	r4,r2,40
  8136c4:	e0bffd17 	ldw	r2,-12(fp)
  8136c8:	11c00217 	ldw	r7,8(r2)
  8136cc:	e17ffe17 	ldw	r5,-8(fp)
  8136d0:	e1bfff17 	ldw	r6,-4(fp)
  8136d4:	0813e500 	call	813e50 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8136d8:	e037883a 	mov	sp,fp
  8136dc:	dfc00117 	ldw	ra,4(sp)
  8136e0:	df000017 	ldw	fp,0(sp)
  8136e4:	dec00204 	addi	sp,sp,8
  8136e8:	f800283a 	ret

008136ec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8136ec:	defffa04 	addi	sp,sp,-24
  8136f0:	dfc00515 	stw	ra,20(sp)
  8136f4:	df000415 	stw	fp,16(sp)
  8136f8:	df000404 	addi	fp,sp,16
  8136fc:	e13ffd15 	stw	r4,-12(fp)
  813700:	e17ffe15 	stw	r5,-8(fp)
  813704:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  813708:	e0bffd17 	ldw	r2,-12(fp)
  81370c:	10800017 	ldw	r2,0(r2)
  813710:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  813714:	e0bffc17 	ldw	r2,-16(fp)
  813718:	11000a04 	addi	r4,r2,40
  81371c:	e0bffd17 	ldw	r2,-12(fp)
  813720:	11c00217 	ldw	r7,8(r2)
  813724:	e17ffe17 	ldw	r5,-8(fp)
  813728:	e1bfff17 	ldw	r6,-4(fp)
  81372c:	08141100 	call	814110 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  813730:	e037883a 	mov	sp,fp
  813734:	dfc00117 	ldw	ra,4(sp)
  813738:	df000017 	ldw	fp,0(sp)
  81373c:	dec00204 	addi	sp,sp,8
  813740:	f800283a 	ret

00813744 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  813744:	defffc04 	addi	sp,sp,-16
  813748:	dfc00315 	stw	ra,12(sp)
  81374c:	df000215 	stw	fp,8(sp)
  813750:	df000204 	addi	fp,sp,8
  813754:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  813758:	e0bfff17 	ldw	r2,-4(fp)
  81375c:	10800017 	ldw	r2,0(r2)
  813760:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  813764:	e0bffe17 	ldw	r2,-8(fp)
  813768:	11000a04 	addi	r4,r2,40
  81376c:	e0bfff17 	ldw	r2,-4(fp)
  813770:	11400217 	ldw	r5,8(r2)
  813774:	0813ce80 	call	813ce8 <altera_avalon_jtag_uart_close>
}
  813778:	e037883a 	mov	sp,fp
  81377c:	dfc00117 	ldw	ra,4(sp)
  813780:	df000017 	ldw	fp,0(sp)
  813784:	dec00204 	addi	sp,sp,8
  813788:	f800283a 	ret

0081378c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  81378c:	defffa04 	addi	sp,sp,-24
  813790:	dfc00515 	stw	ra,20(sp)
  813794:	df000415 	stw	fp,16(sp)
  813798:	df000404 	addi	fp,sp,16
  81379c:	e13ffd15 	stw	r4,-12(fp)
  8137a0:	e17ffe15 	stw	r5,-8(fp)
  8137a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8137a8:	e0bffd17 	ldw	r2,-12(fp)
  8137ac:	10800017 	ldw	r2,0(r2)
  8137b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8137b4:	e0bffc17 	ldw	r2,-16(fp)
  8137b8:	11000a04 	addi	r4,r2,40
  8137bc:	e17ffe17 	ldw	r5,-8(fp)
  8137c0:	e1bfff17 	ldw	r6,-4(fp)
  8137c4:	0813d5c0 	call	813d5c <altera_avalon_jtag_uart_ioctl>
}
  8137c8:	e037883a 	mov	sp,fp
  8137cc:	dfc00117 	ldw	ra,4(sp)
  8137d0:	df000017 	ldw	fp,0(sp)
  8137d4:	dec00204 	addi	sp,sp,8
  8137d8:	f800283a 	ret

008137dc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8137dc:	defff504 	addi	sp,sp,-44
  8137e0:	dfc00a15 	stw	ra,40(sp)
  8137e4:	df000915 	stw	fp,36(sp)
  8137e8:	df000904 	addi	fp,sp,36
  8137ec:	e13ffd15 	stw	r4,-12(fp)
  8137f0:	e17ffe15 	stw	r5,-8(fp)
  8137f4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  8137f8:	e0bffd17 	ldw	r2,-12(fp)
  8137fc:	10800c04 	addi	r2,r2,48
  813800:	e0bffb15 	stw	r2,-20(fp)
  813804:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  813808:	e13ffc0b 	ldhu	r4,-16(fp)
  81380c:	e17ffc84 	addi	r5,fp,-14
  813810:	080d8980 	call	80d898 <OSFlagCreate>
  813814:	1007883a 	mov	r3,r2
  813818:	e0bffb17 	ldw	r2,-20(fp)
  81381c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  813820:	e0bffd17 	ldw	r2,-12(fp)
  813824:	10800a04 	addi	r2,r2,40
  813828:	e0bff915 	stw	r2,-28(fp)
  81382c:	00800044 	movi	r2,1
  813830:	e0bffa0d 	sth	r2,-24(fp)
  813834:	e13ffa0b 	ldhu	r4,-24(fp)
  813838:	0810aa00 	call	810aa0 <OSSemCreate>
  81383c:	1007883a 	mov	r3,r2
  813840:	e0bff917 	ldw	r2,-28(fp)
  813844:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  813848:	e0bffd17 	ldw	r2,-12(fp)
  81384c:	10800b04 	addi	r2,r2,44
  813850:	e0bff715 	stw	r2,-36(fp)
  813854:	00800044 	movi	r2,1
  813858:	e0bff80d 	sth	r2,-32(fp)
  81385c:	e13ff80b 	ldhu	r4,-32(fp)
  813860:	0810aa00 	call	810aa0 <OSSemCreate>
  813864:	1007883a 	mov	r3,r2
  813868:	e0bff717 	ldw	r2,-36(fp)
  81386c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813870:	e0fffd17 	ldw	r3,-12(fp)
  813874:	00800044 	movi	r2,1
  813878:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  81387c:	e0bffd17 	ldw	r2,-12(fp)
  813880:	10800017 	ldw	r2,0(r2)
  813884:	11000104 	addi	r4,r2,4
  813888:	e0bffd17 	ldw	r2,-12(fp)
  81388c:	10800817 	ldw	r2,32(r2)
  813890:	1007883a 	mov	r3,r2
  813894:	2005883a 	mov	r2,r4
  813898:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  81389c:	e13fff17 	ldw	r4,-4(fp)
  8138a0:	e17ffd17 	ldw	r5,-12(fp)
  8138a4:	01802074 	movhi	r6,129
  8138a8:	318e4304 	addi	r6,r6,14604
  8138ac:	081973c0 	call	81973c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8138b0:	e0bffd17 	ldw	r2,-12(fp)
  8138b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8138b8:	e0bffd17 	ldw	r2,-12(fp)
  8138bc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8138c0:	008020b4 	movhi	r2,130
  8138c4:	10bb1804 	addi	r2,r2,-5024
  8138c8:	10800017 	ldw	r2,0(r2)
  8138cc:	100b883a 	mov	r5,r2
  8138d0:	01802074 	movhi	r6,129
  8138d4:	318ef504 	addi	r6,r6,15316
  8138d8:	e1fffd17 	ldw	r7,-12(fp)
  8138dc:	08191f00 	call	8191f0 <alt_alarm_start>
  8138e0:	1004403a 	cmpge	r2,r2,zero
  8138e4:	1000041e 	bne	r2,zero,8138f8 <altera_avalon_jtag_uart_init+0x11c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8138e8:	e0fffd17 	ldw	r3,-12(fp)
  8138ec:	00a00034 	movhi	r2,32768
  8138f0:	10bfffc4 	addi	r2,r2,-1
  8138f4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8138f8:	e037883a 	mov	sp,fp
  8138fc:	dfc00117 	ldw	ra,4(sp)
  813900:	df000017 	ldw	fp,0(sp)
  813904:	dec00204 	addi	sp,sp,8
  813908:	f800283a 	ret

0081390c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  81390c:	defff104 	addi	sp,sp,-60
  813910:	dfc00e15 	stw	ra,56(sp)
  813914:	df000d15 	stw	fp,52(sp)
  813918:	df000d04 	addi	fp,sp,52
  81391c:	e13ffe15 	stw	r4,-8(fp)
  813920:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  813924:	e0bffe17 	ldw	r2,-8(fp)
  813928:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
  81392c:	e0bffc17 	ldw	r2,-16(fp)
  813930:	10800017 	ldw	r2,0(r2)
  813934:	e0bffb15 	stw	r2,-20(fp)
  813938:	00000006 	br	81393c <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  81393c:	e0bffb17 	ldw	r2,-20(fp)
  813940:	10800104 	addi	r2,r2,4
  813944:	10800037 	ldwio	r2,0(r2)
  813948:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  81394c:	e0bffa17 	ldw	r2,-24(fp)
  813950:	1080c00c 	andi	r2,r2,768
  813954:	1005003a 	cmpeq	r2,r2,zero
  813958:	1000991e 	bne	r2,zero,813bc0 <altera_avalon_jtag_uart_irq+0x2b4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  81395c:	e0bffa17 	ldw	r2,-24(fp)
  813960:	1080400c 	andi	r2,r2,256
  813964:	1005003a 	cmpeq	r2,r2,zero
  813968:	1000481e 	bne	r2,zero,813a8c <altera_avalon_jtag_uart_irq+0x180>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  81396c:	00800074 	movhi	r2,1
  813970:	e0bff915 	stw	r2,-28(fp)
  813974:	00000006 	br	813978 <altera_avalon_jtag_uart_irq+0x6c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813978:	e0bffc17 	ldw	r2,-16(fp)
  81397c:	10800d17 	ldw	r2,52(r2)
  813980:	10800044 	addi	r2,r2,1
  813984:	1081ffcc 	andi	r2,r2,2047
  813988:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
  81398c:	e0bffc17 	ldw	r2,-16(fp)
  813990:	10c00e17 	ldw	r3,56(r2)
  813994:	e0bff817 	ldw	r2,-32(fp)
  813998:	18802826 	beq	r3,r2,813a3c <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  81399c:	e0bffb17 	ldw	r2,-20(fp)
  8139a0:	10800037 	ldwio	r2,0(r2)
  8139a4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8139a8:	e0bff917 	ldw	r2,-28(fp)
  8139ac:	10a0000c 	andi	r2,r2,32768
  8139b0:	1005003a 	cmpeq	r2,r2,zero
  8139b4:	1000211e 	bne	r2,zero,813a3c <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8139b8:	e0bffc17 	ldw	r2,-16(fp)
  8139bc:	10c00d17 	ldw	r3,52(r2)
  8139c0:	e0bff917 	ldw	r2,-28(fp)
  8139c4:	1009883a 	mov	r4,r2
  8139c8:	e0bffc17 	ldw	r2,-16(fp)
  8139cc:	1885883a 	add	r2,r3,r2
  8139d0:	10801104 	addi	r2,r2,68
  8139d4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8139d8:	e0bffc17 	ldw	r2,-16(fp)
  8139dc:	10800d17 	ldw	r2,52(r2)
  8139e0:	10800044 	addi	r2,r2,1
  8139e4:	10c1ffcc 	andi	r3,r2,2047
  8139e8:	e0bffc17 	ldw	r2,-16(fp)
  8139ec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  8139f0:	e0bffc17 	ldw	r2,-16(fp)
  8139f4:	10800c17 	ldw	r2,48(r2)
  8139f8:	e0bff515 	stw	r2,-44(fp)
  8139fc:	00800044 	movi	r2,1
  813a00:	e0bff60d 	sth	r2,-40(fp)
  813a04:	00800044 	movi	r2,1
  813a08:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  813a0c:	008020b4 	movhi	r2,130
  813a10:	10baf644 	addi	r2,r2,-5159
  813a14:	10800003 	ldbu	r2,0(r2)
  813a18:	10803fcc 	andi	r2,r2,255
  813a1c:	1005003a 	cmpeq	r2,r2,zero
  813a20:	103fd51e 	bne	r2,zero,813978 <altera_avalon_jtag_uart_irq+0x6c>
  {
    OSFlagPost (group, flags, opt, &err);
  813a24:	e17ff60b 	ldhu	r5,-40(fp)
  813a28:	e1bff683 	ldbu	r6,-38(fp)
  813a2c:	e1fffd04 	addi	r7,fp,-12
  813a30:	e13ff517 	ldw	r4,-44(fp)
  813a34:	080e5c00 	call	80e5c0 <OSFlagPost>
    return err;
  813a38:	003fcf06 	br	813978 <altera_avalon_jtag_uart_irq+0x6c>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  813a3c:	e0bff917 	ldw	r2,-28(fp)
  813a40:	10bfffec 	andhi	r2,r2,65535
  813a44:	1005003a 	cmpeq	r2,r2,zero
  813a48:	1000101e 	bne	r2,zero,813a8c <altera_avalon_jtag_uart_irq+0x180>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813a4c:	e0bffc17 	ldw	r2,-16(fp)
  813a50:	10c00817 	ldw	r3,32(r2)
  813a54:	00bfff84 	movi	r2,-2
  813a58:	1886703a 	and	r3,r3,r2
  813a5c:	e0bffc17 	ldw	r2,-16(fp)
  813a60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  813a64:	e0bffb17 	ldw	r2,-20(fp)
  813a68:	11000104 	addi	r4,r2,4
  813a6c:	e0bffc17 	ldw	r2,-16(fp)
  813a70:	10800817 	ldw	r2,32(r2)
  813a74:	1007883a 	mov	r3,r2
  813a78:	2005883a 	mov	r2,r4
  813a7c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813a80:	e0bffb17 	ldw	r2,-20(fp)
  813a84:	10800104 	addi	r2,r2,4
  813a88:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  813a8c:	e0bffa17 	ldw	r2,-24(fp)
  813a90:	1080800c 	andi	r2,r2,512
  813a94:	1005003a 	cmpeq	r2,r2,zero
  813a98:	103fa81e 	bne	r2,zero,81393c <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  813a9c:	e0bffa17 	ldw	r2,-24(fp)
  813aa0:	10bfffec 	andhi	r2,r2,65535
  813aa4:	1004d43a 	srli	r2,r2,16
  813aa8:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  813aac:	00002706 	br	813b4c <altera_avalon_jtag_uart_irq+0x240>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  813ab0:	e13ffb17 	ldw	r4,-20(fp)
  813ab4:	e0bffc17 	ldw	r2,-16(fp)
  813ab8:	10c01017 	ldw	r3,64(r2)
  813abc:	e0bffc17 	ldw	r2,-16(fp)
  813ac0:	1885883a 	add	r2,r3,r2
  813ac4:	10821104 	addi	r2,r2,2116
  813ac8:	10800003 	ldbu	r2,0(r2)
  813acc:	10c03fcc 	andi	r3,r2,255
  813ad0:	18c0201c 	xori	r3,r3,128
  813ad4:	18ffe004 	addi	r3,r3,-128
  813ad8:	2005883a 	mov	r2,r4
  813adc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813ae0:	e0bffc17 	ldw	r2,-16(fp)
  813ae4:	10801017 	ldw	r2,64(r2)
  813ae8:	10800044 	addi	r2,r2,1
  813aec:	10c1ffcc 	andi	r3,r2,2047
  813af0:	e0bffc17 	ldw	r2,-16(fp)
  813af4:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  813af8:	e0bffc17 	ldw	r2,-16(fp)
  813afc:	10800c17 	ldw	r2,48(r2)
  813b00:	e0bff315 	stw	r2,-52(fp)
  813b04:	00800084 	movi	r2,2
  813b08:	e0bff40d 	sth	r2,-48(fp)
  813b0c:	00800044 	movi	r2,1
  813b10:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  813b14:	008020b4 	movhi	r2,130
  813b18:	10baf644 	addi	r2,r2,-5159
  813b1c:	10800003 	ldbu	r2,0(r2)
  813b20:	10803fcc 	andi	r2,r2,255
  813b24:	1005003a 	cmpeq	r2,r2,zero
  813b28:	1000051e 	bne	r2,zero,813b40 <altera_avalon_jtag_uart_irq+0x234>
  {
    OSFlagPost (group, flags, opt, &err);
  813b2c:	e17ff40b 	ldhu	r5,-48(fp)
  813b30:	e1bff483 	ldbu	r6,-46(fp)
  813b34:	e1fffd44 	addi	r7,fp,-11
  813b38:	e13ff317 	ldw	r4,-52(fp)
  813b3c:	080e5c00 	call	80e5c0 <OSFlagPost>

        space--;
  813b40:	e0bff717 	ldw	r2,-36(fp)
  813b44:	10bfffc4 	addi	r2,r2,-1
  813b48:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  813b4c:	e0bff717 	ldw	r2,-36(fp)
  813b50:	1005003a 	cmpeq	r2,r2,zero
  813b54:	1000051e 	bne	r2,zero,813b6c <altera_avalon_jtag_uart_irq+0x260>
  813b58:	e0bffc17 	ldw	r2,-16(fp)
  813b5c:	10c01017 	ldw	r3,64(r2)
  813b60:	e0bffc17 	ldw	r2,-16(fp)
  813b64:	10800f17 	ldw	r2,60(r2)
  813b68:	18bfd11e 	bne	r3,r2,813ab0 <altera_avalon_jtag_uart_irq+0x1a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  813b6c:	e0bff717 	ldw	r2,-36(fp)
  813b70:	1005003a 	cmpeq	r2,r2,zero
  813b74:	103f711e 	bne	r2,zero,81393c <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  813b78:	e0bffc17 	ldw	r2,-16(fp)
  813b7c:	10c00817 	ldw	r3,32(r2)
  813b80:	00bfff44 	movi	r2,-3
  813b84:	1886703a 	and	r3,r3,r2
  813b88:	e0bffc17 	ldw	r2,-16(fp)
  813b8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813b90:	e0bffc17 	ldw	r2,-16(fp)
  813b94:	10800017 	ldw	r2,0(r2)
  813b98:	11000104 	addi	r4,r2,4
  813b9c:	e0bffc17 	ldw	r2,-16(fp)
  813ba0:	10800817 	ldw	r2,32(r2)
  813ba4:	1007883a 	mov	r3,r2
  813ba8:	2005883a 	mov	r2,r4
  813bac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813bb0:	e0bffb17 	ldw	r2,-20(fp)
  813bb4:	10800104 	addi	r2,r2,4
  813bb8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  813bbc:	003f5f06 	br	81393c <altera_avalon_jtag_uart_irq+0x30>
}
  813bc0:	e037883a 	mov	sp,fp
  813bc4:	dfc00117 	ldw	ra,4(sp)
  813bc8:	df000017 	ldw	fp,0(sp)
  813bcc:	dec00204 	addi	sp,sp,8
  813bd0:	f800283a 	ret

00813bd4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  813bd4:	defff804 	addi	sp,sp,-32
  813bd8:	dfc00715 	stw	ra,28(sp)
  813bdc:	df000615 	stw	fp,24(sp)
  813be0:	df000604 	addi	fp,sp,24
  813be4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  813be8:	e0bfff17 	ldw	r2,-4(fp)
  813bec:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  813bf0:	e0bffd17 	ldw	r2,-12(fp)
  813bf4:	10800017 	ldw	r2,0(r2)
  813bf8:	10800104 	addi	r2,r2,4
  813bfc:	10800037 	ldwio	r2,0(r2)
  813c00:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  813c04:	e0bffc17 	ldw	r2,-16(fp)
  813c08:	1081000c 	andi	r2,r2,1024
  813c0c:	1005003a 	cmpeq	r2,r2,zero
  813c10:	10000c1e 	bne	r2,zero,813c44 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  813c14:	e0bffd17 	ldw	r2,-12(fp)
  813c18:	10800017 	ldw	r2,0(r2)
  813c1c:	11000104 	addi	r4,r2,4
  813c20:	e0bffd17 	ldw	r2,-12(fp)
  813c24:	10800817 	ldw	r2,32(r2)
  813c28:	10810014 	ori	r2,r2,1024
  813c2c:	1007883a 	mov	r3,r2
  813c30:	2005883a 	mov	r2,r4
  813c34:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  813c38:	e0bffd17 	ldw	r2,-12(fp)
  813c3c:	10000915 	stw	zero,36(r2)
  813c40:	00002106 	br	813cc8 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  813c44:	e0bffd17 	ldw	r2,-12(fp)
  813c48:	10c00917 	ldw	r3,36(r2)
  813c4c:	00a00034 	movhi	r2,32768
  813c50:	10bfff04 	addi	r2,r2,-4
  813c54:	10c01c36 	bltu	r2,r3,813cc8 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  813c58:	e0bffd17 	ldw	r2,-12(fp)
  813c5c:	10800917 	ldw	r2,36(r2)
  813c60:	10c00044 	addi	r3,r2,1
  813c64:	e0bffd17 	ldw	r2,-12(fp)
  813c68:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  813c6c:	e0bffd17 	ldw	r2,-12(fp)
  813c70:	10c00917 	ldw	r3,36(r2)
  813c74:	e0bffd17 	ldw	r2,-12(fp)
  813c78:	10800117 	ldw	r2,4(r2)
  813c7c:	18801236 	bltu	r3,r2,813cc8 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  813c80:	e0bffd17 	ldw	r2,-12(fp)
  813c84:	10800c17 	ldw	r2,48(r2)
  813c88:	e0bffa15 	stw	r2,-24(fp)
  813c8c:	00800104 	movi	r2,4
  813c90:	e0bffb0d 	sth	r2,-20(fp)
  813c94:	00800044 	movi	r2,1
  813c98:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  813c9c:	008020b4 	movhi	r2,130
  813ca0:	10baf644 	addi	r2,r2,-5159
  813ca4:	10800003 	ldbu	r2,0(r2)
  813ca8:	10803fcc 	andi	r2,r2,255
  813cac:	1005003a 	cmpeq	r2,r2,zero
  813cb0:	1000051e 	bne	r2,zero,813cc8 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  813cb4:	e17ffb0b 	ldhu	r5,-20(fp)
  813cb8:	e1bffb83 	ldbu	r6,-18(fp)
  813cbc:	e1fffe04 	addi	r7,fp,-8
  813cc0:	e13ffa17 	ldw	r4,-24(fp)
  813cc4:	080e5c00 	call	80e5c0 <OSFlagPost>
  813cc8:	008020b4 	movhi	r2,130
  813ccc:	10bb1804 	addi	r2,r2,-5024
  813cd0:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  813cd4:	e037883a 	mov	sp,fp
  813cd8:	dfc00117 	ldw	ra,4(sp)
  813cdc:	df000017 	ldw	fp,0(sp)
  813ce0:	dec00204 	addi	sp,sp,8
  813ce4:	f800283a 	ret

00813ce8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  813ce8:	defffc04 	addi	sp,sp,-16
  813cec:	df000315 	stw	fp,12(sp)
  813cf0:	df000304 	addi	fp,sp,12
  813cf4:	e13ffd15 	stw	r4,-12(fp)
  813cf8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813cfc:	00000706 	br	813d1c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  813d00:	e0bffe17 	ldw	r2,-8(fp)
  813d04:	1090000c 	andi	r2,r2,16384
  813d08:	1005003a 	cmpeq	r2,r2,zero
  813d0c:	1000031e 	bne	r2,zero,813d1c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  813d10:	00bffd44 	movi	r2,-11
  813d14:	e0bfff15 	stw	r2,-4(fp)
  813d18:	00000b06 	br	813d48 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813d1c:	e0bffd17 	ldw	r2,-12(fp)
  813d20:	10c01017 	ldw	r3,64(r2)
  813d24:	e0bffd17 	ldw	r2,-12(fp)
  813d28:	10800f17 	ldw	r2,60(r2)
  813d2c:	18800526 	beq	r3,r2,813d44 <altera_avalon_jtag_uart_close+0x5c>
  813d30:	e0bffd17 	ldw	r2,-12(fp)
  813d34:	10c00917 	ldw	r3,36(r2)
  813d38:	e0bffd17 	ldw	r2,-12(fp)
  813d3c:	10800117 	ldw	r2,4(r2)
  813d40:	18bfef36 	bltu	r3,r2,813d00 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  813d44:	e03fff15 	stw	zero,-4(fp)
  813d48:	e0bfff17 	ldw	r2,-4(fp)
}
  813d4c:	e037883a 	mov	sp,fp
  813d50:	df000017 	ldw	fp,0(sp)
  813d54:	dec00104 	addi	sp,sp,4
  813d58:	f800283a 	ret

00813d5c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  813d5c:	defff804 	addi	sp,sp,-32
  813d60:	df000715 	stw	fp,28(sp)
  813d64:	df000704 	addi	fp,sp,28
  813d68:	e13ffb15 	stw	r4,-20(fp)
  813d6c:	e17ffc15 	stw	r5,-16(fp)
  813d70:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  813d74:	00bff9c4 	movi	r2,-25
  813d78:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  813d7c:	e0bffc17 	ldw	r2,-16(fp)
  813d80:	e0bfff15 	stw	r2,-4(fp)
  813d84:	e0ffff17 	ldw	r3,-4(fp)
  813d88:	189a8060 	cmpeqi	r2,r3,27137
  813d8c:	1000041e 	bne	r2,zero,813da0 <altera_avalon_jtag_uart_ioctl+0x44>
  813d90:	e0ffff17 	ldw	r3,-4(fp)
  813d94:	189a80a0 	cmpeqi	r2,r3,27138
  813d98:	10001b1e 	bne	r2,zero,813e08 <altera_avalon_jtag_uart_ioctl+0xac>
  813d9c:	00002706 	br	813e3c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  813da0:	e0bffb17 	ldw	r2,-20(fp)
  813da4:	10c00117 	ldw	r3,4(r2)
  813da8:	00a00034 	movhi	r2,32768
  813dac:	10bfffc4 	addi	r2,r2,-1
  813db0:	18802226 	beq	r3,r2,813e3c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  813db4:	e0bffd17 	ldw	r2,-12(fp)
  813db8:	10800017 	ldw	r2,0(r2)
  813dbc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  813dc0:	e0bff917 	ldw	r2,-28(fp)
  813dc4:	10800090 	cmplti	r2,r2,2
  813dc8:	1000071e 	bne	r2,zero,813de8 <altera_avalon_jtag_uart_ioctl+0x8c>
  813dcc:	e0fff917 	ldw	r3,-28(fp)
  813dd0:	00a00034 	movhi	r2,32768
  813dd4:	10bfffc4 	addi	r2,r2,-1
  813dd8:	18800326 	beq	r3,r2,813de8 <altera_avalon_jtag_uart_ioctl+0x8c>
  813ddc:	e0bff917 	ldw	r2,-28(fp)
  813de0:	e0bffe15 	stw	r2,-8(fp)
  813de4:	00000306 	br	813df4 <altera_avalon_jtag_uart_ioctl+0x98>
  813de8:	00e00034 	movhi	r3,32768
  813dec:	18ffff84 	addi	r3,r3,-2
  813df0:	e0fffe15 	stw	r3,-8(fp)
  813df4:	e0bffb17 	ldw	r2,-20(fp)
  813df8:	e0fffe17 	ldw	r3,-8(fp)
  813dfc:	10c00115 	stw	r3,4(r2)
      rc = 0;
  813e00:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  813e04:	00000d06 	br	813e3c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  813e08:	e0bffb17 	ldw	r2,-20(fp)
  813e0c:	10c00117 	ldw	r3,4(r2)
  813e10:	00a00034 	movhi	r2,32768
  813e14:	10bfffc4 	addi	r2,r2,-1
  813e18:	18800826 	beq	r3,r2,813e3c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  813e1c:	e13ffd17 	ldw	r4,-12(fp)
  813e20:	e0bffb17 	ldw	r2,-20(fp)
  813e24:	10c00917 	ldw	r3,36(r2)
  813e28:	e0bffb17 	ldw	r2,-20(fp)
  813e2c:	10800117 	ldw	r2,4(r2)
  813e30:	1885803a 	cmpltu	r2,r3,r2
  813e34:	20800015 	stw	r2,0(r4)
      rc = 0;
  813e38:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  813e3c:	e0bffa17 	ldw	r2,-24(fp)
}
  813e40:	e037883a 	mov	sp,fp
  813e44:	df000017 	ldw	fp,0(sp)
  813e48:	dec00104 	addi	sp,sp,4
  813e4c:	f800283a 	ret

00813e50 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  813e50:	deffeb04 	addi	sp,sp,-84
  813e54:	dfc01415 	stw	ra,80(sp)
  813e58:	df001315 	stw	fp,76(sp)
  813e5c:	df001304 	addi	fp,sp,76
  813e60:	e13ffb15 	stw	r4,-20(fp)
  813e64:	e17ffc15 	stw	r5,-16(fp)
  813e68:	e1bffd15 	stw	r6,-12(fp)
  813e6c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  813e70:	e0bffc17 	ldw	r2,-16(fp)
  813e74:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  813e78:	e0bffb17 	ldw	r2,-20(fp)
  813e7c:	10800a17 	ldw	r2,40(r2)
  813e80:	e0bff315 	stw	r2,-52(fp)
  813e84:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  813e88:	e17ff40b 	ldhu	r5,-48(fp)
  813e8c:	e1bffa44 	addi	r6,fp,-23
  813e90:	e13ff317 	ldw	r4,-52(fp)
  813e94:	0810e540 	call	810e54 <OSSemPend>

  while (space > 0)
  813e98:	00006406 	br	81402c <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  813e9c:	e0bffb17 	ldw	r2,-20(fp)
  813ea0:	10800d17 	ldw	r2,52(r2)
  813ea4:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  813ea8:	e0bffb17 	ldw	r2,-20(fp)
  813eac:	10800e17 	ldw	r2,56(r2)
  813eb0:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  813eb4:	e0fff617 	ldw	r3,-40(fp)
  813eb8:	e0bff517 	ldw	r2,-44(fp)
  813ebc:	18800536 	bltu	r3,r2,813ed4 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  813ec0:	e0bff617 	ldw	r2,-40(fp)
  813ec4:	e0fff517 	ldw	r3,-44(fp)
  813ec8:	10c5c83a 	sub	r2,r2,r3
  813ecc:	e0bff715 	stw	r2,-36(fp)
  813ed0:	00000406 	br	813ee4 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  813ed4:	00820004 	movi	r2,2048
  813ed8:	e0fff517 	ldw	r3,-44(fp)
  813edc:	10c5c83a 	sub	r2,r2,r3
  813ee0:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  813ee4:	e0bff717 	ldw	r2,-36(fp)
  813ee8:	1005003a 	cmpeq	r2,r2,zero
  813eec:	10001f1e 	bne	r2,zero,813f6c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  813ef0:	e0fffd17 	ldw	r3,-12(fp)
  813ef4:	e0bff717 	ldw	r2,-36(fp)
  813ef8:	1880022e 	bgeu	r3,r2,813f04 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  813efc:	e0bffd17 	ldw	r2,-12(fp)
  813f00:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  813f04:	e0bffb17 	ldw	r2,-20(fp)
  813f08:	10c01104 	addi	r3,r2,68
  813f0c:	e0bff517 	ldw	r2,-44(fp)
  813f10:	1887883a 	add	r3,r3,r2
  813f14:	e0bff917 	ldw	r2,-28(fp)
  813f18:	1009883a 	mov	r4,r2
  813f1c:	180b883a 	mov	r5,r3
  813f20:	e1bff717 	ldw	r6,-36(fp)
  813f24:	0805c480 	call	805c48 <memcpy>
      ptr   += n;
  813f28:	e0fff717 	ldw	r3,-36(fp)
  813f2c:	e0bff917 	ldw	r2,-28(fp)
  813f30:	10c5883a 	add	r2,r2,r3
  813f34:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  813f38:	e0fffd17 	ldw	r3,-12(fp)
  813f3c:	e0bff717 	ldw	r2,-36(fp)
  813f40:	1885c83a 	sub	r2,r3,r2
  813f44:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813f48:	e0fff517 	ldw	r3,-44(fp)
  813f4c:	e0bff717 	ldw	r2,-36(fp)
  813f50:	1885883a 	add	r2,r3,r2
  813f54:	10c1ffcc 	andi	r3,r2,2047
  813f58:	e0bffb17 	ldw	r2,-20(fp)
  813f5c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  813f60:	e0bffd17 	ldw	r2,-12(fp)
  813f64:	10800048 	cmpgei	r2,r2,1
  813f68:	103fcc1e 	bne	r2,zero,813e9c <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  813f6c:	e0fff917 	ldw	r3,-28(fp)
  813f70:	e0bffc17 	ldw	r2,-16(fp)
  813f74:	1880301e 	bne	r3,r2,814038 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  813f78:	e0bffe17 	ldw	r2,-8(fp)
  813f7c:	1090000c 	andi	r2,r2,16384
  813f80:	1004c03a 	cmpne	r2,r2,zero
  813f84:	10002c1e 	bne	r2,zero,814038 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  813f88:	008020b4 	movhi	r2,130
  813f8c:	10baf644 	addi	r2,r2,-5159
  813f90:	10800003 	ldbu	r2,0(r2)
  813f94:	10803fcc 	andi	r2,r2,255
  813f98:	10800058 	cmpnei	r2,r2,1
  813f9c:	1000161e 	bne	r2,zero,813ff8 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  813fa0:	e0bffb17 	ldw	r2,-20(fp)
  813fa4:	10800c17 	ldw	r2,48(r2)
  813fa8:	e0bff015 	stw	r2,-64(fp)
  813fac:	00800144 	movi	r2,5
  813fb0:	e0bff10d 	sth	r2,-60(fp)
  813fb4:	00bfe0c4 	movi	r2,-125
  813fb8:	e0bff185 	stb	r2,-58(fp)
  813fbc:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  813fc0:	008020b4 	movhi	r2,130
  813fc4:	10baf644 	addi	r2,r2,-5159
  813fc8:	10800003 	ldbu	r2,0(r2)
  813fcc:	10803fcc 	andi	r2,r2,255
  813fd0:	1005003a 	cmpeq	r2,r2,zero
  813fd4:	1000111e 	bne	r2,zero,81401c <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  813fd8:	e17ff10b 	ldhu	r5,-60(fp)
  813fdc:	e1bff183 	ldbu	r6,-58(fp)
  813fe0:	e1fff20b 	ldhu	r7,-56(fp)
  813fe4:	e0bffa04 	addi	r2,fp,-24
  813fe8:	d8800015 	stw	r2,0(sp)
  813fec:	e13ff017 	ldw	r4,-64(fp)
  813ff0:	080df140 	call	80df14 <OSFlagPend>
    return err;
  813ff4:	00000906 	br	81401c <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  813ff8:	e0bffb17 	ldw	r2,-20(fp)
  813ffc:	10c00d17 	ldw	r3,52(r2)
  814000:	e0bff617 	ldw	r2,-40(fp)
  814004:	1880051e 	bne	r3,r2,81401c <altera_avalon_jtag_uart_read+0x1cc>
  814008:	e0bffb17 	ldw	r2,-20(fp)
  81400c:	10c00917 	ldw	r3,36(r2)
  814010:	e0bffb17 	ldw	r2,-20(fp)
  814014:	10800117 	ldw	r2,4(r2)
  814018:	18bff736 	bltu	r3,r2,813ff8 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  81401c:	e0bffb17 	ldw	r2,-20(fp)
  814020:	10c00d17 	ldw	r3,52(r2)
  814024:	e0bff617 	ldw	r2,-40(fp)
  814028:	18800326 	beq	r3,r2,814038 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81402c:	e0bffd17 	ldw	r2,-12(fp)
  814030:	10800048 	cmpgei	r2,r2,1
  814034:	103f991e 	bne	r2,zero,813e9c <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  814038:	e0bffb17 	ldw	r2,-20(fp)
  81403c:	11000a17 	ldw	r4,40(r2)
  814040:	081124c0 	call	81124c <OSSemPost>

  if (ptr != buffer)
  814044:	e0fff917 	ldw	r3,-28(fp)
  814048:	e0bffc17 	ldw	r2,-16(fp)
  81404c:	18801926 	beq	r3,r2,8140b4 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814050:	0005303a 	rdctl	r2,status
  814054:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814058:	e0ffef17 	ldw	r3,-68(fp)
  81405c:	00bfff84 	movi	r2,-2
  814060:	1884703a 	and	r2,r3,r2
  814064:	1001703a 	wrctl	status,r2
  
  return context;
  814068:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  81406c:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  814070:	e0bffb17 	ldw	r2,-20(fp)
  814074:	10800817 	ldw	r2,32(r2)
  814078:	10c00054 	ori	r3,r2,1
  81407c:	e0bffb17 	ldw	r2,-20(fp)
  814080:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  814084:	e0bffb17 	ldw	r2,-20(fp)
  814088:	10800017 	ldw	r2,0(r2)
  81408c:	11000104 	addi	r4,r2,4
  814090:	e0bffb17 	ldw	r2,-20(fp)
  814094:	10800817 	ldw	r2,32(r2)
  814098:	1007883a 	mov	r3,r2
  81409c:	2005883a 	mov	r2,r4
  8140a0:	10c00035 	stwio	r3,0(r2)
  8140a4:	e0bff817 	ldw	r2,-32(fp)
  8140a8:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8140ac:	e0bfee17 	ldw	r2,-72(fp)
  8140b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8140b4:	e0fff917 	ldw	r3,-28(fp)
  8140b8:	e0bffc17 	ldw	r2,-16(fp)
  8140bc:	18800526 	beq	r3,r2,8140d4 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  8140c0:	e0fff917 	ldw	r3,-28(fp)
  8140c4:	e0bffc17 	ldw	r2,-16(fp)
  8140c8:	1887c83a 	sub	r3,r3,r2
  8140cc:	e0ffff15 	stw	r3,-4(fp)
  8140d0:	00000906 	br	8140f8 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  8140d4:	e0bffe17 	ldw	r2,-8(fp)
  8140d8:	1090000c 	andi	r2,r2,16384
  8140dc:	1005003a 	cmpeq	r2,r2,zero
  8140e0:	1000031e 	bne	r2,zero,8140f0 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  8140e4:	00bffd44 	movi	r2,-11
  8140e8:	e0bfff15 	stw	r2,-4(fp)
  8140ec:	00000206 	br	8140f8 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  8140f0:	00bffec4 	movi	r2,-5
  8140f4:	e0bfff15 	stw	r2,-4(fp)
  8140f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8140fc:	e037883a 	mov	sp,fp
  814100:	dfc00117 	ldw	ra,4(sp)
  814104:	df000017 	ldw	fp,0(sp)
  814108:	dec00204 	addi	sp,sp,8
  81410c:	f800283a 	ret

00814110 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  814110:	deffeb04 	addi	sp,sp,-84
  814114:	dfc01415 	stw	ra,80(sp)
  814118:	df001315 	stw	fp,76(sp)
  81411c:	df001304 	addi	fp,sp,76
  814120:	e13ffb15 	stw	r4,-20(fp)
  814124:	e17ffc15 	stw	r5,-16(fp)
  814128:	e1bffd15 	stw	r6,-12(fp)
  81412c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  814130:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  814134:	e0bffc17 	ldw	r2,-16(fp)
  814138:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  81413c:	e0bffb17 	ldw	r2,-20(fp)
  814140:	10800b17 	ldw	r2,44(r2)
  814144:	e0bff315 	stw	r2,-52(fp)
  814148:	e03ff40d 	sth	zero,-48(fp)
  81414c:	e17ff40b 	ldhu	r5,-48(fp)
  814150:	e1bffa04 	addi	r6,fp,-24
  814154:	e13ff317 	ldw	r4,-52(fp)
  814158:	0810e540 	call	810e54 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81415c:	00003a06 	br	814248 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  814160:	e0bffb17 	ldw	r2,-20(fp)
  814164:	10800f17 	ldw	r2,60(r2)
  814168:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  81416c:	e0bffb17 	ldw	r2,-20(fp)
  814170:	10801017 	ldw	r2,64(r2)
  814174:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  814178:	e0fff917 	ldw	r3,-28(fp)
  81417c:	e0bff817 	ldw	r2,-32(fp)
  814180:	1880062e 	bgeu	r3,r2,81419c <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  814184:	e0fff817 	ldw	r3,-32(fp)
  814188:	e0bff917 	ldw	r2,-28(fp)
  81418c:	1885c83a 	sub	r2,r3,r2
  814190:	10bfffc4 	addi	r2,r2,-1
  814194:	e0bff715 	stw	r2,-36(fp)
  814198:	00000c06 	br	8141cc <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  81419c:	e0bff817 	ldw	r2,-32(fp)
  8141a0:	1005003a 	cmpeq	r2,r2,zero
  8141a4:	1000051e 	bne	r2,zero,8141bc <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8141a8:	00820004 	movi	r2,2048
  8141ac:	e0fff917 	ldw	r3,-28(fp)
  8141b0:	10c5c83a 	sub	r2,r2,r3
  8141b4:	e0bff715 	stw	r2,-36(fp)
  8141b8:	00000406 	br	8141cc <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8141bc:	0081ffc4 	movi	r2,2047
  8141c0:	e0fff917 	ldw	r3,-28(fp)
  8141c4:	10c5c83a 	sub	r2,r2,r3
  8141c8:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  8141cc:	e0bff717 	ldw	r2,-36(fp)
  8141d0:	1005003a 	cmpeq	r2,r2,zero
  8141d4:	10001f1e 	bne	r2,zero,814254 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  8141d8:	e0fffd17 	ldw	r3,-12(fp)
  8141dc:	e0bff717 	ldw	r2,-36(fp)
  8141e0:	1880022e 	bgeu	r3,r2,8141ec <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  8141e4:	e0bffd17 	ldw	r2,-12(fp)
  8141e8:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8141ec:	e0bffb17 	ldw	r2,-20(fp)
  8141f0:	10c21104 	addi	r3,r2,2116
  8141f4:	e0bff917 	ldw	r2,-28(fp)
  8141f8:	1885883a 	add	r2,r3,r2
  8141fc:	e0fffc17 	ldw	r3,-16(fp)
  814200:	1009883a 	mov	r4,r2
  814204:	180b883a 	mov	r5,r3
  814208:	e1bff717 	ldw	r6,-36(fp)
  81420c:	0805c480 	call	805c48 <memcpy>
      ptr   += n;
  814210:	e0fff717 	ldw	r3,-36(fp)
  814214:	e0bffc17 	ldw	r2,-16(fp)
  814218:	10c5883a 	add	r2,r2,r3
  81421c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  814220:	e0fffd17 	ldw	r3,-12(fp)
  814224:	e0bff717 	ldw	r2,-36(fp)
  814228:	1885c83a 	sub	r2,r3,r2
  81422c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  814230:	e0fff917 	ldw	r3,-28(fp)
  814234:	e0bff717 	ldw	r2,-36(fp)
  814238:	1885883a 	add	r2,r3,r2
  81423c:	10c1ffcc 	andi	r3,r2,2047
  814240:	e0bffb17 	ldw	r2,-20(fp)
  814244:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  814248:	e0bffd17 	ldw	r2,-12(fp)
  81424c:	10800048 	cmpgei	r2,r2,1
  814250:	103fc31e 	bne	r2,zero,814160 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814254:	0005303a 	rdctl	r2,status
  814258:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81425c:	e0fff217 	ldw	r3,-56(fp)
  814260:	00bfff84 	movi	r2,-2
  814264:	1884703a 	and	r2,r3,r2
  814268:	1001703a 	wrctl	status,r2
  
  return context;
  81426c:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  814270:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  814274:	e0bffb17 	ldw	r2,-20(fp)
  814278:	10800817 	ldw	r2,32(r2)
  81427c:	10c00094 	ori	r3,r2,2
  814280:	e0bffb17 	ldw	r2,-20(fp)
  814284:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  814288:	e0bffb17 	ldw	r2,-20(fp)
  81428c:	10800017 	ldw	r2,0(r2)
  814290:	11000104 	addi	r4,r2,4
  814294:	e0bffb17 	ldw	r2,-20(fp)
  814298:	10800817 	ldw	r2,32(r2)
  81429c:	1007883a 	mov	r3,r2
  8142a0:	2005883a 	mov	r2,r4
  8142a4:	10c00035 	stwio	r3,0(r2)
  8142a8:	e0bff617 	ldw	r2,-40(fp)
  8142ac:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8142b0:	e0bff117 	ldw	r2,-60(fp)
  8142b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8142b8:	e0bffd17 	ldw	r2,-12(fp)
  8142bc:	10800050 	cmplti	r2,r2,1
  8142c0:	10002d1e 	bne	r2,zero,814378 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  8142c4:	e0bffe17 	ldw	r2,-8(fp)
  8142c8:	1090000c 	andi	r2,r2,16384
  8142cc:	1004c03a 	cmpne	r2,r2,zero
  8142d0:	10002c1e 	bne	r2,zero,814384 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  8142d4:	008020b4 	movhi	r2,130
  8142d8:	10baf644 	addi	r2,r2,-5159
  8142dc:	10800003 	ldbu	r2,0(r2)
  8142e0:	10803fcc 	andi	r2,r2,255
  8142e4:	10800058 	cmpnei	r2,r2,1
  8142e8:	1000161e 	bne	r2,zero,814344 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  8142ec:	e0bffb17 	ldw	r2,-20(fp)
  8142f0:	10800c17 	ldw	r2,48(r2)
  8142f4:	e0bfee15 	stw	r2,-72(fp)
  8142f8:	00800184 	movi	r2,6
  8142fc:	e0bfef0d 	sth	r2,-68(fp)
  814300:	00bfe0c4 	movi	r2,-125
  814304:	e0bfef85 	stb	r2,-66(fp)
  814308:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  81430c:	008020b4 	movhi	r2,130
  814310:	10baf644 	addi	r2,r2,-5159
  814314:	10800003 	ldbu	r2,0(r2)
  814318:	10803fcc 	andi	r2,r2,255
  81431c:	1005003a 	cmpeq	r2,r2,zero
  814320:	1000111e 	bne	r2,zero,814368 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  814324:	e17fef0b 	ldhu	r5,-68(fp)
  814328:	e1bfef83 	ldbu	r6,-66(fp)
  81432c:	e1fff00b 	ldhu	r7,-64(fp)
  814330:	e0bffa44 	addi	r2,fp,-23
  814334:	d8800015 	stw	r2,0(sp)
  814338:	e13fee17 	ldw	r4,-72(fp)
  81433c:	080df140 	call	80df14 <OSFlagPend>
    return err;
  814340:	00000906 	br	814368 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  814344:	e0bffb17 	ldw	r2,-20(fp)
  814348:	10c01017 	ldw	r3,64(r2)
  81434c:	e0bff817 	ldw	r2,-32(fp)
  814350:	1880051e 	bne	r3,r2,814368 <altera_avalon_jtag_uart_write+0x258>
  814354:	e0bffb17 	ldw	r2,-20(fp)
  814358:	10c00917 	ldw	r3,36(r2)
  81435c:	e0bffb17 	ldw	r2,-20(fp)
  814360:	10800117 	ldw	r2,4(r2)
  814364:	18bff736 	bltu	r3,r2,814344 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  814368:	e0bffb17 	ldw	r2,-20(fp)
  81436c:	10c01017 	ldw	r3,64(r2)
  814370:	e0bff817 	ldw	r2,-32(fp)
  814374:	18800326 	beq	r3,r2,814384 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  814378:	e0bffd17 	ldw	r2,-12(fp)
  81437c:	10800048 	cmpgei	r2,r2,1
  814380:	103fb11e 	bne	r2,zero,814248 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  814384:	e0bffb17 	ldw	r2,-20(fp)
  814388:	11000b17 	ldw	r4,44(r2)
  81438c:	081124c0 	call	81124c <OSSemPost>

  if (ptr != start)
  814390:	e0fffc17 	ldw	r3,-16(fp)
  814394:	e0bff517 	ldw	r2,-44(fp)
  814398:	18800526 	beq	r3,r2,8143b0 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  81439c:	e0fffc17 	ldw	r3,-16(fp)
  8143a0:	e0bff517 	ldw	r2,-44(fp)
  8143a4:	1887c83a 	sub	r3,r3,r2
  8143a8:	e0ffff15 	stw	r3,-4(fp)
  8143ac:	00000906 	br	8143d4 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  8143b0:	e0bffe17 	ldw	r2,-8(fp)
  8143b4:	1090000c 	andi	r2,r2,16384
  8143b8:	1005003a 	cmpeq	r2,r2,zero
  8143bc:	1000031e 	bne	r2,zero,8143cc <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  8143c0:	00bffd44 	movi	r2,-11
  8143c4:	e0bfff15 	stw	r2,-4(fp)
  8143c8:	00000206 	br	8143d4 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  8143cc:	00bffec4 	movi	r2,-5
  8143d0:	e0bfff15 	stw	r2,-4(fp)
  8143d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8143d8:	e037883a 	mov	sp,fp
  8143dc:	dfc00117 	ldw	ra,4(sp)
  8143e0:	df000017 	ldw	fp,0(sp)
  8143e4:	dec00204 	addi	sp,sp,8
  8143e8:	f800283a 	ret

008143ec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8143ec:	defff904 	addi	sp,sp,-28
  8143f0:	dfc00615 	stw	ra,24(sp)
  8143f4:	df000515 	stw	fp,20(sp)
  8143f8:	df000504 	addi	fp,sp,20
  8143fc:	e13ffe15 	stw	r4,-8(fp)
  814400:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  814404:	e0bffe17 	ldw	r2,-8(fp)
  814408:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  81440c:	e0bffe17 	ldw	r2,-8(fp)
  814410:	10800104 	addi	r2,r2,4
  814414:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814418:	0005303a 	rdctl	r2,status
  81441c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814420:	e0fffc17 	ldw	r3,-16(fp)
  814424:	00bfff84 	movi	r2,-2
  814428:	1884703a 	and	r2,r3,r2
  81442c:	1001703a 	wrctl	status,r2
  
  return context;
  814430:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  814434:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  814438:	0819c780 	call	819c78 <alt_tick>
  81443c:	e0bffd17 	ldw	r2,-12(fp)
  814440:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814444:	e0bffb17 	ldw	r2,-20(fp)
  814448:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  81444c:	e037883a 	mov	sp,fp
  814450:	dfc00117 	ldw	ra,4(sp)
  814454:	df000017 	ldw	fp,0(sp)
  814458:	dec00204 	addi	sp,sp,8
  81445c:	f800283a 	ret

00814460 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  814460:	defff904 	addi	sp,sp,-28
  814464:	dfc00615 	stw	ra,24(sp)
  814468:	df000515 	stw	fp,20(sp)
  81446c:	df000504 	addi	fp,sp,20
  814470:	e13ffc15 	stw	r4,-16(fp)
  814474:	e17ffd15 	stw	r5,-12(fp)
  814478:	e1bffe15 	stw	r6,-8(fp)
  81447c:	e1ffff15 	stw	r7,-4(fp)
  814480:	e0bfff17 	ldw	r2,-4(fp)
  814484:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  814488:	008020b4 	movhi	r2,130
  81448c:	10bb1804 	addi	r2,r2,-5024
  814490:	10800017 	ldw	r2,0(r2)
  814494:	1004c03a 	cmpne	r2,r2,zero
  814498:	1000041e 	bne	r2,zero,8144ac <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  81449c:	00c020b4 	movhi	r3,130
  8144a0:	18fb1804 	addi	r3,r3,-5024
  8144a4:	e0bffb17 	ldw	r2,-20(fp)
  8144a8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8144ac:	e0bffc17 	ldw	r2,-16(fp)
  8144b0:	10800104 	addi	r2,r2,4
  8144b4:	1007883a 	mov	r3,r2
  8144b8:	008001c4 	movi	r2,7
  8144bc:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  8144c0:	e13ffe17 	ldw	r4,-8(fp)
  8144c4:	e17ffc17 	ldw	r5,-16(fp)
  8144c8:	01802074 	movhi	r6,129
  8144cc:	3190fb04 	addi	r6,r6,17388
  8144d0:	081973c0 	call	81973c <alt_irq_register>
#endif  
}
  8144d4:	e037883a 	mov	sp,fp
  8144d8:	dfc00117 	ldw	ra,4(sp)
  8144dc:	df000017 	ldw	fp,0(sp)
  8144e0:	dec00204 	addi	sp,sp,8
  8144e4:	f800283a 	ret

008144e8 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  8144e8:	defffc04 	addi	sp,sp,-16
  8144ec:	df000315 	stw	fp,12(sp)
  8144f0:	df000304 	addi	fp,sp,12
  8144f4:	e13ffe15 	stw	r4,-8(fp)
  8144f8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  8144fc:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  814500:	e0bfff17 	ldw	r2,-4(fp)
  814504:	1004c03a 	cmpne	r2,r2,zero
  814508:	1000061e 	bne	r2,zero,814524 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  81450c:	e0bffe17 	ldw	r2,-8(fp)
  814510:	1007883a 	mov	r3,r2
  814514:	e0bffd03 	ldbu	r2,-12(fp)
  814518:	10c4b03a 	or	r2,r2,r3
  81451c:	e0bffd05 	stb	r2,-12(fp)
  814520:	00000806 	br	814544 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  814524:	e0bffe17 	ldw	r2,-8(fp)
  814528:	1007883a 	mov	r3,r2
  81452c:	e0bffd03 	ldbu	r2,-12(fp)
  814530:	10c4b03a 	or	r2,r2,r3
  814534:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  814538:	e0bffd03 	ldbu	r2,-12(fp)
  81453c:	10801014 	ori	r2,r2,64
  814540:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  814544:	e0fffd03 	ldbu	r3,-12(fp)
  814548:	00bfe004 	movi	r2,-128
  81454c:	1884b03a 	or	r2,r3,r2
  814550:	10803fcc 	andi	r2,r2,255
}
  814554:	e037883a 	mov	sp,fp
  814558:	df000017 	ldw	fp,0(sp)
  81455c:	dec00104 	addi	sp,sp,4
  814560:	f800283a 	ret

00814564 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  814564:	defffd04 	addi	sp,sp,-12
  814568:	df000215 	stw	fp,8(sp)
  81456c:	df000204 	addi	fp,sp,8
  814570:	e13ffe15 	stw	r4,-8(fp)
  814574:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  814578:	e0bffe17 	ldw	r2,-8(fp)
  81457c:	10800a17 	ldw	r2,40(r2)
  814580:	e0ffff03 	ldbu	r3,-4(fp)
  814584:	10c00025 	stbio	r3,0(r2)
}
  814588:	e037883a 	mov	sp,fp
  81458c:	df000017 	ldw	fp,0(sp)
  814590:	dec00104 	addi	sp,sp,4
  814594:	f800283a 	ret

00814598 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  814598:	defffe04 	addi	sp,sp,-8
  81459c:	df000115 	stw	fp,4(sp)
  8145a0:	df000104 	addi	fp,sp,4
  8145a4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  8145a8:	e0bfff17 	ldw	r2,-4(fp)
  8145ac:	10800a17 	ldw	r2,40(r2)
  8145b0:	1007883a 	mov	r3,r2
  8145b4:	00800044 	movi	r2,1
  8145b8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  8145bc:	e037883a 	mov	sp,fp
  8145c0:	df000017 	ldw	fp,0(sp)
  8145c4:	dec00104 	addi	sp,sp,4
  8145c8:	f800283a 	ret

008145cc <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  8145cc:	defffc04 	addi	sp,sp,-16
  8145d0:	dfc00315 	stw	ra,12(sp)
  8145d4:	df000215 	stw	fp,8(sp)
  8145d8:	df000204 	addi	fp,sp,8
  8145dc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  8145e0:	e13fff17 	ldw	r4,-4(fp)
  8145e4:	014020b4 	movhi	r5,130
  8145e8:	2973e204 	addi	r5,r5,-12408
  8145ec:	081953c0 	call	81953c <alt_find_dev>
  8145f0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  8145f4:	e0bffe17 	ldw	r2,-8(fp)
}
  8145f8:	e037883a 	mov	sp,fp
  8145fc:	dfc00117 	ldw	ra,4(sp)
  814600:	df000017 	ldw	fp,0(sp)
  814604:	dec00204 	addi	sp,sp,8
  814608:	f800283a 	ret

0081460c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  81460c:	defffb04 	addi	sp,sp,-20
  814610:	df000415 	stw	fp,16(sp)
  814614:	df000404 	addi	fp,sp,16
  814618:	e13ffd15 	stw	r4,-12(fp)
  81461c:	e17ffe15 	stw	r5,-8(fp)
  814620:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  814624:	e03ffc15 	stw	zero,-16(fp)
  814628:	00000f06 	br	814668 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  81462c:	e0bffd17 	ldw	r2,-12(fp)
  814630:	10800a17 	ldw	r2,40(r2)
  814634:	11000044 	addi	r4,r2,1
  814638:	e0fffc17 	ldw	r3,-16(fp)
  81463c:	e0bffe17 	ldw	r2,-8(fp)
  814640:	1885883a 	add	r2,r3,r2
  814644:	10800003 	ldbu	r2,0(r2)
  814648:	10c03fcc 	andi	r3,r2,255
  81464c:	18c0201c 	xori	r3,r3,128
  814650:	18ffe004 	addi	r3,r3,-128
  814654:	2005883a 	mov	r2,r4
  814658:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  81465c:	e0bffc17 	ldw	r2,-16(fp)
  814660:	10800044 	addi	r2,r2,1
  814664:	e0bffc15 	stw	r2,-16(fp)
  814668:	e0fffc17 	ldw	r3,-16(fp)
  81466c:	e0bfff17 	ldw	r2,-4(fp)
  814670:	18bfee36 	bltu	r3,r2,81462c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  814674:	e037883a 	mov	sp,fp
  814678:	df000017 	ldw	fp,0(sp)
  81467c:	dec00104 	addi	sp,sp,4
  814680:	f800283a 	ret

00814684 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  814684:	defffd04 	addi	sp,sp,-12
  814688:	df000215 	stw	fp,8(sp)
  81468c:	df000204 	addi	fp,sp,8
  814690:	e13ffe15 	stw	r4,-8(fp)
  814694:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  814698:	00000d06 	br	8146d0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  81469c:	e0bffe17 	ldw	r2,-8(fp)
  8146a0:	10800a17 	ldw	r2,40(r2)
  8146a4:	11000044 	addi	r4,r2,1
  8146a8:	e0bfff17 	ldw	r2,-4(fp)
  8146ac:	10800003 	ldbu	r2,0(r2)
  8146b0:	10c03fcc 	andi	r3,r2,255
  8146b4:	18c0201c 	xori	r3,r3,128
  8146b8:	18ffe004 	addi	r3,r3,-128
  8146bc:	2005883a 	mov	r2,r4
  8146c0:	10c00025 	stbio	r3,0(r2)
		++ptr;
  8146c4:	e0bfff17 	ldw	r2,-4(fp)
  8146c8:	10800044 	addi	r2,r2,1
  8146cc:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  8146d0:	e0bfff17 	ldw	r2,-4(fp)
  8146d4:	10800003 	ldbu	r2,0(r2)
  8146d8:	10803fcc 	andi	r2,r2,255
  8146dc:	1080201c 	xori	r2,r2,128
  8146e0:	10bfe004 	addi	r2,r2,-128
  8146e4:	1004c03a 	cmpne	r2,r2,zero
  8146e8:	103fec1e 	bne	r2,zero,81469c <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  8146ec:	e037883a 	mov	sp,fp
  8146f0:	df000017 	ldw	fp,0(sp)
  8146f4:	dec00104 	addi	sp,sp,4
  8146f8:	f800283a 	ret

008146fc <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  8146fc:	defffb04 	addi	sp,sp,-20
  814700:	dfc00415 	stw	ra,16(sp)
  814704:	df000315 	stw	fp,12(sp)
  814708:	df000304 	addi	fp,sp,12
  81470c:	e13ffd15 	stw	r4,-12(fp)
  814710:	e17ffe15 	stw	r5,-8(fp)
  814714:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  814718:	e0bffd17 	ldw	r2,-12(fp)
  81471c:	10800017 	ldw	r2,0(r2)
  814720:	1009883a 	mov	r4,r2
  814724:	e1bfff17 	ldw	r6,-4(fp)
  814728:	e17ffe17 	ldw	r5,-8(fp)
  81472c:	081460c0 	call	81460c <alt_up_character_lcd_write>
	return 0;
  814730:	0005883a 	mov	r2,zero
}
  814734:	e037883a 	mov	sp,fp
  814738:	dfc00117 	ldw	ra,4(sp)
  81473c:	df000017 	ldw	fp,0(sp)
  814740:	dec00204 	addi	sp,sp,8
  814744:	f800283a 	ret

00814748 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  814748:	defff904 	addi	sp,sp,-28
  81474c:	dfc00615 	stw	ra,24(sp)
  814750:	df000515 	stw	fp,20(sp)
  814754:	df000504 	addi	fp,sp,20
  814758:	e13ffc15 	stw	r4,-16(fp)
  81475c:	e17ffd15 	stw	r5,-12(fp)
  814760:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  814764:	e0bffd17 	ldw	r2,-12(fp)
  814768:	10800a28 	cmpgeui	r2,r2,40
  81476c:	1000031e 	bne	r2,zero,81477c <alt_up_character_lcd_set_cursor_pos+0x34>
  814770:	e0bffe17 	ldw	r2,-8(fp)
  814774:	108000b0 	cmpltui	r2,r2,2
  814778:	1000031e 	bne	r2,zero,814788 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  81477c:	00bfffc4 	movi	r2,-1
  814780:	e0bfff15 	stw	r2,-4(fp)
  814784:	00000806 	br	8147a8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  814788:	e13ffd17 	ldw	r4,-12(fp)
  81478c:	e17ffe17 	ldw	r5,-8(fp)
  814790:	08144e80 	call	8144e8 <get_DDRAM_addr>
  814794:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  814798:	e17ffb03 	ldbu	r5,-20(fp)
  81479c:	e13ffc17 	ldw	r4,-16(fp)
  8147a0:	08145640 	call	814564 <alt_up_character_lcd_send_cmd>
	return 0;
  8147a4:	e03fff15 	stw	zero,-4(fp)
  8147a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8147ac:	e037883a 	mov	sp,fp
  8147b0:	dfc00117 	ldw	ra,4(sp)
  8147b4:	df000017 	ldw	fp,0(sp)
  8147b8:	dec00204 	addi	sp,sp,8
  8147bc:	f800283a 	ret

008147c0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  8147c0:	defff904 	addi	sp,sp,-28
  8147c4:	dfc00615 	stw	ra,24(sp)
  8147c8:	df000515 	stw	fp,20(sp)
  8147cc:	df000504 	addi	fp,sp,20
  8147d0:	e13ffc15 	stw	r4,-16(fp)
  8147d4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  8147d8:	e0bffd17 	ldw	r2,-12(fp)
  8147dc:	1005003a 	cmpeq	r2,r2,zero
  8147e0:	10001e1e 	bne	r2,zero,81485c <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  8147e4:	e0bffd17 	ldw	r2,-12(fp)
  8147e8:	10800050 	cmplti	r2,r2,1
  8147ec:	1000031e 	bne	r2,zero,8147fc <alt_up_character_lcd_shift_cursor+0x3c>
  8147f0:	00800504 	movi	r2,20
  8147f4:	e0bfff05 	stb	r2,-4(fp)
  8147f8:	00000206 	br	814804 <alt_up_character_lcd_shift_cursor+0x44>
  8147fc:	00c00404 	movi	r3,16
  814800:	e0ffff05 	stb	r3,-4(fp)
  814804:	e0bfff03 	ldbu	r2,-4(fp)
  814808:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  81480c:	e0fffd17 	ldw	r3,-12(fp)
  814810:	e0fffe15 	stw	r3,-8(fp)
  814814:	e0fffe17 	ldw	r3,-8(fp)
  814818:	1804403a 	cmpge	r2,r3,zero
  81481c:	1000031e 	bne	r2,zero,81482c <alt_up_character_lcd_shift_cursor+0x6c>
  814820:	e0bffe17 	ldw	r2,-8(fp)
  814824:	0085c83a 	sub	r2,zero,r2
  814828:	e0bffe15 	stw	r2,-8(fp)
  81482c:	e0fffe17 	ldw	r3,-8(fp)
  814830:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  814834:	00000306 	br	814844 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  814838:	e17ffb43 	ldbu	r5,-19(fp)
  81483c:	e13ffc17 	ldw	r4,-16(fp)
  814840:	08145640 	call	814564 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  814844:	e0bffb03 	ldbu	r2,-20(fp)
  814848:	10bfffc4 	addi	r2,r2,-1
  81484c:	e0bffb05 	stb	r2,-20(fp)
  814850:	e0bffb03 	ldbu	r2,-20(fp)
  814854:	10803fd8 	cmpnei	r2,r2,255
  814858:	103ff71e 	bne	r2,zero,814838 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  81485c:	e037883a 	mov	sp,fp
  814860:	dfc00117 	ldw	ra,4(sp)
  814864:	df000017 	ldw	fp,0(sp)
  814868:	dec00204 	addi	sp,sp,8
  81486c:	f800283a 	ret

00814870 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  814870:	defff904 	addi	sp,sp,-28
  814874:	dfc00615 	stw	ra,24(sp)
  814878:	df000515 	stw	fp,20(sp)
  81487c:	df000504 	addi	fp,sp,20
  814880:	e13ffc15 	stw	r4,-16(fp)
  814884:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  814888:	e0bffd17 	ldw	r2,-12(fp)
  81488c:	1005003a 	cmpeq	r2,r2,zero
  814890:	10001e1e 	bne	r2,zero,81490c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  814894:	e0bffd17 	ldw	r2,-12(fp)
  814898:	10800050 	cmplti	r2,r2,1
  81489c:	1000031e 	bne	r2,zero,8148ac <alt_up_character_lcd_shift_display+0x3c>
  8148a0:	00800704 	movi	r2,28
  8148a4:	e0bfff05 	stb	r2,-4(fp)
  8148a8:	00000206 	br	8148b4 <alt_up_character_lcd_shift_display+0x44>
  8148ac:	00c00604 	movi	r3,24
  8148b0:	e0ffff05 	stb	r3,-4(fp)
  8148b4:	e0bfff03 	ldbu	r2,-4(fp)
  8148b8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  8148bc:	e0fffd17 	ldw	r3,-12(fp)
  8148c0:	e0fffe15 	stw	r3,-8(fp)
  8148c4:	e0fffe17 	ldw	r3,-8(fp)
  8148c8:	1804403a 	cmpge	r2,r3,zero
  8148cc:	1000031e 	bne	r2,zero,8148dc <alt_up_character_lcd_shift_display+0x6c>
  8148d0:	e0bffe17 	ldw	r2,-8(fp)
  8148d4:	0085c83a 	sub	r2,zero,r2
  8148d8:	e0bffe15 	stw	r2,-8(fp)
  8148dc:	e0fffe17 	ldw	r3,-8(fp)
  8148e0:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  8148e4:	00000306 	br	8148f4 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  8148e8:	e17ffb43 	ldbu	r5,-19(fp)
  8148ec:	e13ffc17 	ldw	r4,-16(fp)
  8148f0:	08145640 	call	814564 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  8148f4:	e0bffb03 	ldbu	r2,-20(fp)
  8148f8:	10bfffc4 	addi	r2,r2,-1
  8148fc:	e0bffb05 	stb	r2,-20(fp)
  814900:	e0bffb03 	ldbu	r2,-20(fp)
  814904:	10803fd8 	cmpnei	r2,r2,255
  814908:	103ff71e 	bne	r2,zero,8148e8 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  81490c:	e037883a 	mov	sp,fp
  814910:	dfc00117 	ldw	ra,4(sp)
  814914:	df000017 	ldw	fp,0(sp)
  814918:	dec00204 	addi	sp,sp,8
  81491c:	f800283a 	ret

00814920 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  814920:	defff904 	addi	sp,sp,-28
  814924:	dfc00615 	stw	ra,24(sp)
  814928:	df000515 	stw	fp,20(sp)
  81492c:	df000504 	addi	fp,sp,20
  814930:	e13ffc15 	stw	r4,-16(fp)
  814934:	e17ffd15 	stw	r5,-12(fp)
  814938:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  81493c:	e0bffd17 	ldw	r2,-12(fp)
  814940:	10800a28 	cmpgeui	r2,r2,40
  814944:	1000031e 	bne	r2,zero,814954 <alt_up_character_lcd_erase_pos+0x34>
  814948:	e0bffe17 	ldw	r2,-8(fp)
  81494c:	108000b0 	cmpltui	r2,r2,2
  814950:	1000031e 	bne	r2,zero,814960 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  814954:	00bfffc4 	movi	r2,-1
  814958:	e0bfff15 	stw	r2,-4(fp)
  81495c:	00000e06 	br	814998 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  814960:	e13ffd17 	ldw	r4,-12(fp)
  814964:	e17ffe17 	ldw	r5,-8(fp)
  814968:	08144e80 	call	8144e8 <get_DDRAM_addr>
  81496c:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  814970:	e17ffb03 	ldbu	r5,-20(fp)
  814974:	e13ffc17 	ldw	r4,-16(fp)
  814978:	08145640 	call	814564 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	// NEM Bug Fix. Next loc sends | to the LCD instead of erase
	// Changed to send a simple space. Not really erase but good enough
	//IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, ' ');
  81497c:	e0bffc17 	ldw	r2,-16(fp)
  814980:	10800a17 	ldw	r2,40(r2)
  814984:	10800044 	addi	r2,r2,1
  814988:	1007883a 	mov	r3,r2
  81498c:	00800804 	movi	r2,32
  814990:	18800025 	stbio	r2,0(r3)
	// END NEM Bug Fixs
	return 0;
  814994:	e03fff15 	stw	zero,-4(fp)
  814998:	e0bfff17 	ldw	r2,-4(fp)
}
  81499c:	e037883a 	mov	sp,fp
  8149a0:	dfc00117 	ldw	ra,4(sp)
  8149a4:	df000017 	ldw	fp,0(sp)
  8149a8:	dec00204 	addi	sp,sp,8
  8149ac:	f800283a 	ret

008149b0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  8149b0:	defffd04 	addi	sp,sp,-12
  8149b4:	dfc00215 	stw	ra,8(sp)
  8149b8:	df000115 	stw	fp,4(sp)
  8149bc:	df000104 	addi	fp,sp,4
  8149c0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  8149c4:	e13fff17 	ldw	r4,-4(fp)
  8149c8:	01400304 	movi	r5,12
  8149cc:	08145640 	call	814564 <alt_up_character_lcd_send_cmd>
}
  8149d0:	e037883a 	mov	sp,fp
  8149d4:	dfc00117 	ldw	ra,4(sp)
  8149d8:	df000017 	ldw	fp,0(sp)
  8149dc:	dec00204 	addi	sp,sp,8
  8149e0:	f800283a 	ret

008149e4 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  8149e4:	defffd04 	addi	sp,sp,-12
  8149e8:	dfc00215 	stw	ra,8(sp)
  8149ec:	df000115 	stw	fp,4(sp)
  8149f0:	df000104 	addi	fp,sp,4
  8149f4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  8149f8:	e13fff17 	ldw	r4,-4(fp)
  8149fc:	014003c4 	movi	r5,15
  814a00:	08145640 	call	814564 <alt_up_character_lcd_send_cmd>
}
  814a04:	e037883a 	mov	sp,fp
  814a08:	dfc00117 	ldw	ra,4(sp)
  814a0c:	df000017 	ldw	fp,0(sp)
  814a10:	dec00204 	addi	sp,sp,8
  814a14:	f800283a 	ret

00814a18 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
  814a18:	defffd04 	addi	sp,sp,-12
  814a1c:	df000215 	stw	fp,8(sp)
  814a20:	df000204 	addi	fp,sp,8
  814a24:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  814a28:	e0bfff17 	ldw	r2,-4(fp)
  814a2c:	10800a17 	ldw	r2,40(r2)
  814a30:	10800104 	addi	r2,r2,4
  814a34:	10800037 	ldwio	r2,0(r2)
  814a38:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
  814a3c:	e0bffe17 	ldw	r2,-8(fp)
  814a40:	10800054 	ori	r2,r2,1
  814a44:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  814a48:	e0bfff17 	ldw	r2,-4(fp)
  814a4c:	10800a17 	ldw	r2,40(r2)
  814a50:	10800104 	addi	r2,r2,4
  814a54:	e0fffe17 	ldw	r3,-8(fp)
  814a58:	10c00035 	stwio	r3,0(r2)
}
  814a5c:	e037883a 	mov	sp,fp
  814a60:	df000017 	ldw	fp,0(sp)
  814a64:	dec00104 	addi	sp,sp,4
  814a68:	f800283a 	ret

00814a6c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
  814a6c:	defffd04 	addi	sp,sp,-12
  814a70:	df000215 	stw	fp,8(sp)
  814a74:	df000204 	addi	fp,sp,8
  814a78:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  814a7c:	e0bfff17 	ldw	r2,-4(fp)
  814a80:	10800a17 	ldw	r2,40(r2)
  814a84:	10800104 	addi	r2,r2,4
  814a88:	10800037 	ldwio	r2,0(r2)
  814a8c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
  814a90:	e0fffe17 	ldw	r3,-8(fp)
  814a94:	00bfff84 	movi	r2,-2
  814a98:	1884703a 	and	r2,r3,r2
  814a9c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  814aa0:	e0bfff17 	ldw	r2,-4(fp)
  814aa4:	10800a17 	ldw	r2,40(r2)
  814aa8:	10800104 	addi	r2,r2,4
  814aac:	e0fffe17 	ldw	r3,-8(fp)
  814ab0:	10c00035 	stwio	r3,0(r2)
}
  814ab4:	e037883a 	mov	sp,fp
  814ab8:	df000017 	ldw	fp,0(sp)
  814abc:	dec00104 	addi	sp,sp,4
  814ac0:	f800283a 	ret

00814ac4 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
  814ac4:	defffd04 	addi	sp,sp,-12
  814ac8:	df000215 	stw	fp,8(sp)
  814acc:	df000204 	addi	fp,sp,8
  814ad0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
  814ad4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
  814ad8:	e0bfff17 	ldw	r2,-4(fp)
  814adc:	10800a17 	ldw	r2,40(r2)
  814ae0:	10800084 	addi	r2,r2,2
  814ae4:	1080002b 	ldhuio	r2,0(r2)
  814ae8:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
  814aec:	e0bffe0b 	ldhu	r2,-8(fp)
}
  814af0:	e037883a 	mov	sp,fp
  814af4:	df000017 	ldw	fp,0(sp)
  814af8:	dec00104 	addi	sp,sp,4
  814afc:	f800283a 	ret

00814b00 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
  814b00:	defffd04 	addi	sp,sp,-12
  814b04:	df000215 	stw	fp,8(sp)
  814b08:	df000204 	addi	fp,sp,8
  814b0c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  814b10:	e0bfff17 	ldw	r2,-4(fp)
  814b14:	10800a17 	ldw	r2,40(r2)
  814b18:	10800104 	addi	r2,r2,4
  814b1c:	10800037 	ldwio	r2,0(r2)
  814b20:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
  814b24:	e0bffe17 	ldw	r2,-8(fp)
  814b28:	10bfffec 	andhi	r2,r2,65535
  814b2c:	1004d43a 	srli	r2,r2,16
}
  814b30:	e037883a 	mov	sp,fp
  814b34:	df000017 	ldw	fp,0(sp)
  814b38:	dec00104 	addi	sp,sp,4
  814b3c:	f800283a 	ret

00814b40 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
  814b40:	defffc04 	addi	sp,sp,-16
  814b44:	df000315 	stw	fp,12(sp)
  814b48:	df000304 	addi	fp,sp,12
  814b4c:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
  814b50:	e0bffe17 	ldw	r2,-8(fp)
  814b54:	1080800c 	andi	r2,r2,512
  814b58:	1004d27a 	srli	r2,r2,9
  814b5c:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
  814b60:	e0bffd17 	ldw	r2,-12(fp)
  814b64:	1005003a 	cmpeq	r2,r2,zero
  814b68:	1000031e 	bne	r2,zero,814b78 <alt_up_rs232_check_parity+0x38>
  814b6c:	00bfffc4 	movi	r2,-1
  814b70:	e0bfff15 	stw	r2,-4(fp)
  814b74:	00000106 	br	814b7c <alt_up_rs232_check_parity+0x3c>
  814b78:	e03fff15 	stw	zero,-4(fp)
  814b7c:	e0bfff17 	ldw	r2,-4(fp)
}
  814b80:	e037883a 	mov	sp,fp
  814b84:	df000017 	ldw	fp,0(sp)
  814b88:	dec00104 	addi	sp,sp,4
  814b8c:	f800283a 	ret

00814b90 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
  814b90:	defffc04 	addi	sp,sp,-16
  814b94:	df000315 	stw	fp,12(sp)
  814b98:	df000304 	addi	fp,sp,12
  814b9c:	e13ffe15 	stw	r4,-8(fp)
  814ba0:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  814ba4:	e0bffe17 	ldw	r2,-8(fp)
  814ba8:	10800a17 	ldw	r2,40(r2)
  814bac:	10800037 	ldwio	r2,0(r2)
  814bb0:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
  814bb4:	e0bffe17 	ldw	r2,-8(fp)
  814bb8:	10800a17 	ldw	r2,40(r2)
  814bbc:	e0ffff03 	ldbu	r3,-4(fp)
  814bc0:	10c00035 	stwio	r3,0(r2)
	return 0;
  814bc4:	0005883a 	mov	r2,zero
}
  814bc8:	e037883a 	mov	sp,fp
  814bcc:	df000017 	ldw	fp,0(sp)
  814bd0:	dec00104 	addi	sp,sp,4
  814bd4:	f800283a 	ret

00814bd8 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
  814bd8:	defffa04 	addi	sp,sp,-24
  814bdc:	dfc00515 	stw	ra,20(sp)
  814be0:	df000415 	stw	fp,16(sp)
  814be4:	df000404 	addi	fp,sp,16
  814be8:	e13ffd15 	stw	r4,-12(fp)
  814bec:	e17ffe15 	stw	r5,-8(fp)
  814bf0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  814bf4:	e0bffd17 	ldw	r2,-12(fp)
  814bf8:	10800a17 	ldw	r2,40(r2)
  814bfc:	10800037 	ldwio	r2,0(r2)
  814c00:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
  814c04:	e0bffc17 	ldw	r2,-16(fp)
  814c08:	1007883a 	mov	r3,r2
  814c0c:	e0bffe17 	ldw	r2,-8(fp)
  814c10:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
  814c14:	e13ffc17 	ldw	r4,-16(fp)
  814c18:	0814b400 	call	814b40 <alt_up_rs232_check_parity>
  814c1c:	1007883a 	mov	r3,r2
  814c20:	e0bfff17 	ldw	r2,-4(fp)
  814c24:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
  814c28:	e0bffc17 	ldw	r2,-16(fp)
  814c2c:	10a0000c 	andi	r2,r2,32768
  814c30:	1004d3fa 	srli	r2,r2,15
  814c34:	10bfffc4 	addi	r2,r2,-1
}
  814c38:	e037883a 	mov	sp,fp
  814c3c:	dfc00117 	ldw	ra,4(sp)
  814c40:	df000017 	ldw	fp,0(sp)
  814c44:	dec00204 	addi	sp,sp,8
  814c48:	f800283a 	ret

00814c4c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
  814c4c:	defff804 	addi	sp,sp,-32
  814c50:	dfc00715 	stw	ra,28(sp)
  814c54:	df000615 	stw	fp,24(sp)
  814c58:	df000604 	addi	fp,sp,24
  814c5c:	e13ffd15 	stw	r4,-12(fp)
  814c60:	e17ffe15 	stw	r5,-8(fp)
  814c64:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  814c68:	e0bffd17 	ldw	r2,-12(fp)
  814c6c:	10800017 	ldw	r2,0(r2)
  814c70:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
  814c74:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
  814c78:	00000c06 	br	814cac <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
  814c7c:	e17ffe17 	ldw	r5,-8(fp)
  814c80:	e0bffe17 	ldw	r2,-8(fp)
  814c84:	10800044 	addi	r2,r2,1
  814c88:	e0bffe15 	stw	r2,-8(fp)
  814c8c:	e1bffc04 	addi	r6,fp,-16
  814c90:	e13ffb17 	ldw	r4,-20(fp)
  814c94:	0814bd80 	call	814bd8 <alt_up_rs232_read_data>
  814c98:	1004c03a 	cmpne	r2,r2,zero
  814c9c:	1000091e 	bne	r2,zero,814cc4 <alt_up_rs232_read_fd+0x78>
			count++;
  814ca0:	e0bffa17 	ldw	r2,-24(fp)
  814ca4:	10800044 	addi	r2,r2,1
  814ca8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
  814cac:	e0bfff17 	ldw	r2,-4(fp)
  814cb0:	10bfffc4 	addi	r2,r2,-1
  814cb4:	e0bfff15 	stw	r2,-4(fp)
  814cb8:	e0bfff17 	ldw	r2,-4(fp)
  814cbc:	10bfffd8 	cmpnei	r2,r2,-1
  814cc0:	103fee1e 	bne	r2,zero,814c7c <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
  814cc4:	e0bffa17 	ldw	r2,-24(fp)
}
  814cc8:	e037883a 	mov	sp,fp
  814ccc:	dfc00117 	ldw	ra,4(sp)
  814cd0:	df000017 	ldw	fp,0(sp)
  814cd4:	dec00204 	addi	sp,sp,8
  814cd8:	f800283a 	ret

00814cdc <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
  814cdc:	defff904 	addi	sp,sp,-28
  814ce0:	dfc00615 	stw	ra,24(sp)
  814ce4:	df000515 	stw	fp,20(sp)
  814ce8:	df000504 	addi	fp,sp,20
  814cec:	e13ffd15 	stw	r4,-12(fp)
  814cf0:	e17ffe15 	stw	r5,-8(fp)
  814cf4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  814cf8:	e0bffd17 	ldw	r2,-12(fp)
  814cfc:	10800017 	ldw	r2,0(r2)
  814d00:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
  814d04:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
  814d08:	00000d06 	br	814d40 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
  814d0c:	e0bffe17 	ldw	r2,-8(fp)
  814d10:	10800003 	ldbu	r2,0(r2)
  814d14:	11403fcc 	andi	r5,r2,255
  814d18:	e13ffc17 	ldw	r4,-16(fp)
  814d1c:	0814b900 	call	814b90 <alt_up_rs232_write_data>
  814d20:	1004c03a 	cmpne	r2,r2,zero
  814d24:	10000c1e 	bne	r2,zero,814d58 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
  814d28:	e0bffb17 	ldw	r2,-20(fp)
  814d2c:	10800044 	addi	r2,r2,1
  814d30:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
  814d34:	e0bffe17 	ldw	r2,-8(fp)
  814d38:	10800044 	addi	r2,r2,1
  814d3c:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
  814d40:	e0bfff17 	ldw	r2,-4(fp)
  814d44:	10bfffc4 	addi	r2,r2,-1
  814d48:	e0bfff15 	stw	r2,-4(fp)
  814d4c:	e0bfff17 	ldw	r2,-4(fp)
  814d50:	10bfffd8 	cmpnei	r2,r2,-1
  814d54:	103fed1e 	bne	r2,zero,814d0c <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
  814d58:	e0bffb17 	ldw	r2,-20(fp)
}
  814d5c:	e037883a 	mov	sp,fp
  814d60:	dfc00117 	ldw	ra,4(sp)
  814d64:	df000017 	ldw	fp,0(sp)
  814d68:	dec00204 	addi	sp,sp,8
  814d6c:	f800283a 	ret

00814d70 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
  814d70:	defffc04 	addi	sp,sp,-16
  814d74:	dfc00315 	stw	ra,12(sp)
  814d78:	df000215 	stw	fp,8(sp)
  814d7c:	df000204 	addi	fp,sp,8
  814d80:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
  814d84:	e13fff17 	ldw	r4,-4(fp)
  814d88:	014020b4 	movhi	r5,130
  814d8c:	2973e204 	addi	r5,r5,-12408
  814d90:	081953c0 	call	81953c <alt_find_dev>
  814d94:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  814d98:	e0bffe17 	ldw	r2,-8(fp)
}
  814d9c:	e037883a 	mov	sp,fp
  814da0:	dfc00117 	ldw	ra,4(sp)
  814da4:	df000017 	ldw	fp,0(sp)
  814da8:	dec00204 	addi	sp,sp,8
  814dac:	f800283a 	ret

00814db0 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
  814db0:	defffa04 	addi	sp,sp,-24
  814db4:	dfc00515 	stw	ra,20(sp)
  814db8:	df000415 	stw	fp,16(sp)
  814dbc:	df000404 	addi	fp,sp,16
  814dc0:	e13ffe15 	stw	r4,-8(fp)
  814dc4:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
  814dc8:	e03ffd15 	stw	zero,-12(fp)
    
    if (alt_up_sd_card_is_Present())
  814dcc:	0817bd80 	call	817bd8 <alt_up_sd_card_is_Present>
  814dd0:	1005003a 	cmpeq	r2,r2,zero
  814dd4:	1000221e 	bne	r2,zero,814e60 <Write_Sector_Data+0xb0>
    {
        short int reg_state = 0xff;
  814dd8:	00803fc4 	movi	r2,255
  814ddc:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  814de0:	d0a73617 	ldw	r2,-25384(gp)
  814de4:	1009883a 	mov	r4,r2
  814de8:	e0fffe17 	ldw	r3,-8(fp)
  814dec:	e0bfff17 	ldw	r2,-4(fp)
  814df0:	1885883a 	add	r2,r3,r2
  814df4:	1006927a 	slli	r3,r2,9
  814df8:	2005883a 	mov	r2,r4
  814dfc:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  814e00:	d0a73517 	ldw	r2,-25388(gp)
  814e04:	1007883a 	mov	r3,r2
  814e08:	00800604 	movi	r2,24
  814e0c:	1880002d 	sthio	r2,0(r3)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  814e10:	d0a73217 	ldw	r2,-25400(gp)
  814e14:	1080002b 	ldhuio	r2,0(r2)
  814e18:	e0bffc0d 	sth	r2,-16(fp)
        } while ((reg_state & 0x04)!=0);
  814e1c:	e0bffc0b 	ldhu	r2,-16(fp)
  814e20:	10bfffcc 	andi	r2,r2,65535
  814e24:	1080010c 	andi	r2,r2,4
  814e28:	1004c03a 	cmpne	r2,r2,zero
  814e2c:	103ff81e 	bne	r2,zero,814e10 <Write_Sector_Data+0x60>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
  814e30:	e0bffc0b 	ldhu	r2,-16(fp)
  814e34:	10bfffcc 	andi	r2,r2,65535
  814e38:	1080040c 	andi	r2,r2,16
  814e3c:	1004c03a 	cmpne	r2,r2,zero
  814e40:	1000071e 	bne	r2,zero,814e60 <Write_Sector_Data+0xb0>
        {
            result = true;
  814e44:	00800044 	movi	r2,1
  814e48:	e0bffd15 	stw	r2,-12(fp)
            current_sector_modified = false;
  814e4c:	d0273b15 	stw	zero,-25364(gp)
            current_sector_index = sector_index+partition_offset;
  814e50:	e0fffe17 	ldw	r3,-8(fp)
  814e54:	e0bfff17 	ldw	r2,-4(fp)
  814e58:	1885883a 	add	r2,r3,r2
  814e5c:	d0a73c15 	stw	r2,-25360(gp)
        }
    }
    return result;
  814e60:	e0bffd17 	ldw	r2,-12(fp)
}
  814e64:	e037883a 	mov	sp,fp
  814e68:	dfc00117 	ldw	ra,4(sp)
  814e6c:	df000017 	ldw	fp,0(sp)
  814e70:	dec00204 	addi	sp,sp,8
  814e74:	f800283a 	ret

00814e78 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
  814e78:	defffd04 	addi	sp,sp,-12
  814e7c:	dfc00215 	stw	ra,8(sp)
  814e80:	df000115 	stw	fp,4(sp)
  814e84:	df000104 	addi	fp,sp,4
    bool result = true;
  814e88:	00800044 	movi	r2,1
  814e8c:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
  814e90:	d0a73b17 	ldw	r2,-25364(gp)
  814e94:	1005003a 	cmpeq	r2,r2,zero
  814e98:	1000051e 	bne	r2,zero,814eb0 <Save_Modified_Sector+0x38>
    {
        result = Write_Sector_Data(current_sector_index, 0);
  814e9c:	d0a73c17 	ldw	r2,-25360(gp)
  814ea0:	1009883a 	mov	r4,r2
  814ea4:	000b883a 	mov	r5,zero
  814ea8:	0814db00 	call	814db0 <Write_Sector_Data>
  814eac:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
  814eb0:	e0bfff17 	ldw	r2,-4(fp)
}
  814eb4:	e037883a 	mov	sp,fp
  814eb8:	dfc00117 	ldw	ra,4(sp)
  814ebc:	df000017 	ldw	fp,0(sp)
  814ec0:	dec00204 	addi	sp,sp,8
  814ec4:	f800283a 	ret

00814ec8 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  814ec8:	defff904 	addi	sp,sp,-28
  814ecc:	dfc00615 	stw	ra,24(sp)
  814ed0:	df000515 	stw	fp,20(sp)
  814ed4:	df000504 	addi	fp,sp,20
  814ed8:	e13ffd15 	stw	r4,-12(fp)
  814edc:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  814ee0:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
  814ee4:	0817bd80 	call	817bd8 <alt_up_sd_card_is_Present>
  814ee8:	1005003a 	cmpeq	r2,r2,zero
  814eec:	10002d1e 	bne	r2,zero,814fa4 <Read_Sector_Data+0xdc>
	{
		short int reg_state = 0xff;
  814ef0:	00803fc4 	movi	r2,255
  814ef4:	e0bffb0d 	sth	r2,-20(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
  814ef8:	d0a73b17 	ldw	r2,-25364(gp)
  814efc:	1005003a 	cmpeq	r2,r2,zero
  814f00:	1000081e 	bne	r2,zero,814f24 <Read_Sector_Data+0x5c>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
  814f04:	d0a73c17 	ldw	r2,-25360(gp)
  814f08:	1009883a 	mov	r4,r2
  814f0c:	000b883a 	mov	r5,zero
  814f10:	0814db00 	call	814db0 <Write_Sector_Data>
  814f14:	1004c03a 	cmpne	r2,r2,zero
  814f18:	1000021e 	bne	r2,zero,814f24 <Read_Sector_Data+0x5c>
            {
                return false;
  814f1c:	e03fff15 	stw	zero,-4(fp)
  814f20:	00002206 	br	814fac <Read_Sector_Data+0xe4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  814f24:	d0a73617 	ldw	r2,-25384(gp)
  814f28:	1009883a 	mov	r4,r2
  814f2c:	e0fffd17 	ldw	r3,-12(fp)
  814f30:	e0bffe17 	ldw	r2,-8(fp)
  814f34:	1885883a 	add	r2,r3,r2
  814f38:	1006927a 	slli	r3,r2,9
  814f3c:	2005883a 	mov	r2,r4
  814f40:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  814f44:	d0a73517 	ldw	r2,-25388(gp)
  814f48:	1007883a 	mov	r3,r2
  814f4c:	00800444 	movi	r2,17
  814f50:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  814f54:	d0a73217 	ldw	r2,-25400(gp)
  814f58:	1080002b 	ldhuio	r2,0(r2)
  814f5c:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04)!=0);
  814f60:	e0bffb0b 	ldhu	r2,-20(fp)
  814f64:	10bfffcc 	andi	r2,r2,65535
  814f68:	1080010c 	andi	r2,r2,4
  814f6c:	1004c03a 	cmpne	r2,r2,zero
  814f70:	103ff81e 	bne	r2,zero,814f54 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
  814f74:	e0bffb0b 	ldhu	r2,-20(fp)
  814f78:	10bfffcc 	andi	r2,r2,65535
  814f7c:	1080040c 	andi	r2,r2,16
  814f80:	1004c03a 	cmpne	r2,r2,zero
  814f84:	1000071e 	bne	r2,zero,814fa4 <Read_Sector_Data+0xdc>
		{
			result = true;
  814f88:	00800044 	movi	r2,1
  814f8c:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
  814f90:	d0273b15 	stw	zero,-25364(gp)
            current_sector_index = sector_index+partition_offset;
  814f94:	e0fffd17 	ldw	r3,-12(fp)
  814f98:	e0bffe17 	ldw	r2,-8(fp)
  814f9c:	1885883a 	add	r2,r3,r2
  814fa0:	d0a73c15 	stw	r2,-25360(gp)
		}
	}
	return result;
  814fa4:	e0bffc17 	ldw	r2,-16(fp)
  814fa8:	e0bfff15 	stw	r2,-4(fp)
  814fac:	e0bfff17 	ldw	r2,-4(fp)
}
  814fb0:	e037883a 	mov	sp,fp
  814fb4:	dfc00117 	ldw	ra,4(sp)
  814fb8:	df000017 	ldw	fp,0(sp)
  814fbc:	dec00204 	addi	sp,sp,8
  814fc0:	f800283a 	ret

00814fc4 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  814fc4:	defffa04 	addi	sp,sp,-24
  814fc8:	dfc00515 	stw	ra,20(sp)
  814fcc:	df000415 	stw	fp,16(sp)
  814fd0:	df000404 	addi	fp,sp,16
  814fd4:	e13ffd15 	stw	r4,-12(fp)
  814fd8:	e17ffe15 	stw	r5,-8(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  814fdc:	e0bffd17 	ldw	r2,-12(fp)
  814fe0:	1006d23a 	srli	r3,r2,8
  814fe4:	d0a73817 	ldw	r2,-25376(gp)
  814fe8:	1885883a 	add	r2,r3,r2
  814fec:	e0bffc15 	stw	r2,-16(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  814ff0:	008020f4 	movhi	r2,131
  814ff4:	10a7b204 	addi	r2,r2,-24888
  814ff8:	10c01117 	ldw	r3,68(r2)
  814ffc:	e0bffc17 	ldw	r2,-16(fp)
  815000:	10c5883a 	add	r2,r2,r3
  815004:	e0bffc15 	stw	r2,-16(fp)
     
    if (sector_index != current_sector_index)
  815008:	d0e73c17 	ldw	r3,-25360(gp)
  81500c:	e0bffc17 	ldw	r2,-16(fp)
  815010:	10c00726 	beq	r2,r3,815030 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  815014:	e13ffc17 	ldw	r4,-16(fp)
  815018:	000b883a 	mov	r5,zero
  81501c:	0814ec80 	call	814ec8 <Read_Sector_Data>
  815020:	1004c03a 	cmpne	r2,r2,zero
  815024:	1000021e 	bne	r2,zero,815030 <get_cluster_flag+0x6c>
        {
            return false;
  815028:	e03fff15 	stw	zero,-4(fp)
  81502c:	00000d06 	br	815064 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  815030:	d0a73a17 	ldw	r2,-25368(gp)
  815034:	10800a17 	ldw	r2,40(r2)
  815038:	1007883a 	mov	r3,r2
  81503c:	e0bffd17 	ldw	r2,-12(fp)
  815040:	10803fcc 	andi	r2,r2,255
  815044:	1085883a 	add	r2,r2,r2
  815048:	1885883a 	add	r2,r3,r2
  81504c:	1080002b 	ldhuio	r2,0(r2)
  815050:	1007883a 	mov	r3,r2
  815054:	e0bffe17 	ldw	r2,-8(fp)
  815058:	10c0000d 	sth	r3,0(r2)
    return true;
  81505c:	00800044 	movi	r2,1
  815060:	e0bfff15 	stw	r2,-4(fp)
  815064:	e0bfff17 	ldw	r2,-4(fp)
}
  815068:	e037883a 	mov	sp,fp
  81506c:	dfc00117 	ldw	ra,4(sp)
  815070:	df000017 	ldw	fp,0(sp)
  815074:	dec00204 	addi	sp,sp,8
  815078:	f800283a 	ret

0081507c <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  81507c:	defff904 	addi	sp,sp,-28
  815080:	dfc00615 	stw	ra,24(sp)
  815084:	df000515 	stw	fp,20(sp)
  815088:	df000504 	addi	fp,sp,20
  81508c:	e13ffc15 	stw	r4,-16(fp)
  815090:	e1bffe15 	stw	r6,-8(fp)
  815094:	e17ffd0d 	sth	r5,-12(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  815098:	e0bffc17 	ldw	r2,-16(fp)
  81509c:	1006d23a 	srli	r3,r2,8
  8150a0:	d0a73817 	ldw	r2,-25376(gp)
  8150a4:	1885883a 	add	r2,r3,r2
  8150a8:	e0bffb15 	stw	r2,-20(fp)
    
    if (first_fat)
  8150ac:	e0bffe17 	ldw	r2,-8(fp)
  8150b0:	1005003a 	cmpeq	r2,r2,zero
  8150b4:	1000071e 	bne	r2,zero,8150d4 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  8150b8:	008020f4 	movhi	r2,131
  8150bc:	10a7b204 	addi	r2,r2,-24888
  8150c0:	10c01117 	ldw	r3,68(r2)
  8150c4:	e0bffb17 	ldw	r2,-20(fp)
  8150c8:	10c5883a 	add	r2,r2,r3
  8150cc:	e0bffb15 	stw	r2,-20(fp)
  8150d0:	00000606 	br	8150ec <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  8150d4:	008020f4 	movhi	r2,131
  8150d8:	10a7b204 	addi	r2,r2,-24888
  8150dc:	10c01217 	ldw	r3,72(r2)
  8150e0:	e0bffb17 	ldw	r2,-20(fp)
  8150e4:	10c5883a 	add	r2,r2,r3
  8150e8:	e0bffb15 	stw	r2,-20(fp)
    }
     
    if (sector_index != current_sector_index)
  8150ec:	d0e73c17 	ldw	r3,-25360(gp)
  8150f0:	e0bffb17 	ldw	r2,-20(fp)
  8150f4:	10c00726 	beq	r2,r3,815114 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  8150f8:	e13ffb17 	ldw	r4,-20(fp)
  8150fc:	000b883a 	mov	r5,zero
  815100:	0814ec80 	call	814ec8 <Read_Sector_Data>
  815104:	1004c03a 	cmpne	r2,r2,zero
  815108:	1000021e 	bne	r2,zero,815114 <mark_cluster+0x98>
        {
            return false;
  81510c:	e03fff15 	stw	zero,-4(fp)
  815110:	00000d06 	br	815148 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  815114:	d0a73a17 	ldw	r2,-25368(gp)
  815118:	10800a17 	ldw	r2,40(r2)
  81511c:	1007883a 	mov	r3,r2
  815120:	e0bffc17 	ldw	r2,-16(fp)
  815124:	10803fcc 	andi	r2,r2,255
  815128:	1085883a 	add	r2,r2,r2
  81512c:	1885883a 	add	r2,r3,r2
  815130:	e0fffd0f 	ldh	r3,-12(fp)
  815134:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  815138:	00800044 	movi	r2,1
  81513c:	d0a73b15 	stw	r2,-25364(gp)
    return true;
  815140:	00800044 	movi	r2,1
  815144:	e0bfff15 	stw	r2,-4(fp)
  815148:	e0bfff17 	ldw	r2,-4(fp)
}
  81514c:	e037883a 	mov	sp,fp
  815150:	dfc00117 	ldw	ra,4(sp)
  815154:	df000017 	ldw	fp,0(sp)
  815158:	dec00204 	addi	sp,sp,8
  81515c:	f800283a 	ret

00815160 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  815160:	defff704 	addi	sp,sp,-36
  815164:	dfc00815 	stw	ra,32(sp)
  815168:	df000715 	stw	fp,28(sp)
  81516c:	df000704 	addi	fp,sp,28
	bool result = false;
  815170:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
  815174:	0009883a 	mov	r4,zero
  815178:	000b883a 	mov	r5,zero
  81517c:	0814ec80 	call	814ec8 <Read_Sector_Data>
  815180:	1005003a 	cmpeq	r2,r2,zero
  815184:	10005c1e 	bne	r2,zero,8152f8 <Check_for_Master_Boot_Record+0x198>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  815188:	d0a73a17 	ldw	r2,-25368(gp)
  81518c:	10800a17 	ldw	r2,40(r2)
  815190:	10807f84 	addi	r2,r2,510
  815194:	1080002b 	ldhuio	r2,0(r2)
  815198:	10bfffcc 	andi	r2,r2,65535
  81519c:	10a0001c 	xori	r2,r2,32768
  8151a0:	10a00004 	addi	r2,r2,-32768
  8151a4:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
  8151a8:	e0bffd17 	ldw	r2,-12(fp)
  8151ac:	10ffffcc 	andi	r3,r2,65535
  8151b0:	00aa9554 	movui	r2,43605
  8151b4:	1880501e 	bne	r3,r2,8152f8 <Check_for_Master_Boot_Record+0x198>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
  8151b8:	e03ffe15 	stw	zero,-8(fp)
  8151bc:	00004b06 	br	8152ec <Check_for_Master_Boot_Record+0x18c>
			{
				int partition_data_offset = (index * 16) + 0x01be;
  8151c0:	e0bffe17 	ldw	r2,-8(fp)
  8151c4:	1004913a 	slli	r2,r2,4
  8151c8:	10806f84 	addi	r2,r2,446
  8151cc:	e0bffa15 	stw	r2,-24(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  8151d0:	d0a73a17 	ldw	r2,-25368(gp)
  8151d4:	10800a17 	ldw	r2,40(r2)
  8151d8:	1007883a 	mov	r3,r2
  8151dc:	e0bffa17 	ldw	r2,-24(fp)
  8151e0:	1885883a 	add	r2,r3,r2
  8151e4:	10800104 	addi	r2,r2,4
  8151e8:	10800023 	ldbuio	r2,0(r2)
  8151ec:	e0bff905 	stb	r2,-28(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  8151f0:	e0bff907 	ldb	r2,-28(fp)
  8151f4:	10800060 	cmpeqi	r2,r2,1
  8151f8:	1000091e 	bne	r2,zero,815220 <Check_for_Master_Boot_Record+0xc0>
  8151fc:	e0bff907 	ldb	r2,-28(fp)
  815200:	10800120 	cmpeqi	r2,r2,4
  815204:	1000061e 	bne	r2,zero,815220 <Check_for_Master_Boot_Record+0xc0>
  815208:	e0bff907 	ldb	r2,-28(fp)
  81520c:	108001a0 	cmpeqi	r2,r2,6
  815210:	1000031e 	bne	r2,zero,815220 <Check_for_Master_Boot_Record+0xc0>
  815214:	e0bff907 	ldb	r2,-28(fp)
  815218:	10800398 	cmpnei	r2,r2,14
  81521c:	1000301e 	bne	r2,zero,8152e0 <Check_for_Master_Boot_Record+0x180>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  815220:	d0a73a17 	ldw	r2,-25368(gp)
  815224:	10800a17 	ldw	r2,40(r2)
  815228:	1007883a 	mov	r3,r2
  81522c:	e0bffa17 	ldw	r2,-24(fp)
  815230:	1885883a 	add	r2,r3,r2
  815234:	10800284 	addi	r2,r2,10
  815238:	1080002b 	ldhuio	r2,0(r2)
  81523c:	10bfffcc 	andi	r2,r2,65535
  815240:	1008943a 	slli	r4,r2,16
  815244:	d0a73a17 	ldw	r2,-25368(gp)
  815248:	10800a17 	ldw	r2,40(r2)
  81524c:	1007883a 	mov	r3,r2
  815250:	e0bffa17 	ldw	r2,-24(fp)
  815254:	1885883a 	add	r2,r3,r2
  815258:	10800204 	addi	r2,r2,8
  81525c:	1080002b 	ldhuio	r2,0(r2)
  815260:	10bfffcc 	andi	r2,r2,65535
  815264:	2084b03a 	or	r2,r4,r2
  815268:	e0bffc15 	stw	r2,-16(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  81526c:	d0a73a17 	ldw	r2,-25368(gp)
  815270:	10800a17 	ldw	r2,40(r2)
  815274:	1007883a 	mov	r3,r2
  815278:	e0bffa17 	ldw	r2,-24(fp)
  81527c:	1885883a 	add	r2,r3,r2
  815280:	10800384 	addi	r2,r2,14
  815284:	1080002b 	ldhuio	r2,0(r2)
  815288:	10bfffcc 	andi	r2,r2,65535
  81528c:	1008943a 	slli	r4,r2,16
  815290:	d0a73a17 	ldw	r2,-25368(gp)
  815294:	10800a17 	ldw	r2,40(r2)
  815298:	1007883a 	mov	r3,r2
  81529c:	e0bffa17 	ldw	r2,-24(fp)
  8152a0:	1885883a 	add	r2,r3,r2
  8152a4:	10800304 	addi	r2,r2,12
  8152a8:	1080002b 	ldhuio	r2,0(r2)
  8152ac:	10bfffcc 	andi	r2,r2,65535
  8152b0:	2084b03a 	or	r2,r4,r2
  8152b4:	e0bffb15 	stw	r2,-20(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
  8152b8:	e0bffb17 	ldw	r2,-20(fp)
  8152bc:	10800050 	cmplti	r2,r2,1
  8152c0:	1000071e 	bne	r2,zero,8152e0 <Check_for_Master_Boot_Record+0x180>
					{
						result = true;
  8152c4:	00800044 	movi	r2,1
  8152c8:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
  8152cc:	e0bffb17 	ldw	r2,-20(fp)
  8152d0:	d0a73915 	stw	r2,-25372(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  8152d4:	e0bffc17 	ldw	r2,-16(fp)
  8152d8:	d0a73815 	stw	r2,-25376(gp)
						break;
  8152dc:	00000606 	br	8152f8 <Check_for_Master_Boot_Record+0x198>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
  8152e0:	e0bffe17 	ldw	r2,-8(fp)
  8152e4:	10800044 	addi	r2,r2,1
  8152e8:	e0bffe15 	stw	r2,-8(fp)
  8152ec:	e0bffe17 	ldw	r2,-8(fp)
  8152f0:	10800110 	cmplti	r2,r2,4
  8152f4:	103fb21e 	bne	r2,zero,8151c0 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
  8152f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8152fc:	e037883a 	mov	sp,fp
  815300:	dfc00117 	ldw	ra,4(sp)
  815304:	df000017 	ldw	fp,0(sp)
  815308:	dec00204 	addi	sp,sp,8
  81530c:	f800283a 	ret

00815310 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  815310:	defff804 	addi	sp,sp,-32
  815314:	dfc00715 	stw	ra,28(sp)
  815318:	df000615 	stw	fp,24(sp)
  81531c:	df000604 	addi	fp,sp,24
  815320:	e13ffc15 	stw	r4,-16(fp)
  815324:	e17ffd15 	stw	r5,-12(fp)
  815328:	e1bffe15 	stw	r6,-8(fp)
  81532c:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
  815330:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  815334:	e0bffc17 	ldw	r2,-16(fp)
  815338:	108007cc 	andi	r2,r2,31
  81533c:	1004c03a 	cmpne	r2,r2,zero
  815340:	10008e1e 	bne	r2,zero,81557c <Read_File_Record_At_Offset+0x26c>
  815344:	0817bd80 	call	817bd8 <alt_up_sd_card_is_Present>
  815348:	1005003a 	cmpeq	r2,r2,zero
  81534c:	10008b1e 	bne	r2,zero,81557c <Read_File_Record_At_Offset+0x26c>
  815350:	d0a73117 	ldw	r2,-25404(gp)
  815354:	1005003a 	cmpeq	r2,r2,zero
  815358:	1000881e 	bne	r2,zero,81557c <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
  81535c:	e03ffa15 	stw	zero,-24(fp)
  815360:	00001006 	br	8153a4 <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
  815364:	e17ffa17 	ldw	r5,-24(fp)
  815368:	d0a73a17 	ldw	r2,-25368(gp)
  81536c:	10800a17 	ldw	r2,40(r2)
  815370:	1009883a 	mov	r4,r2
  815374:	e0fffc17 	ldw	r3,-16(fp)
  815378:	e0bffa17 	ldw	r2,-24(fp)
  81537c:	1885883a 	add	r2,r3,r2
  815380:	2085883a 	add	r2,r4,r2
  815384:	10800023 	ldbuio	r2,0(r2)
  815388:	1007883a 	mov	r3,r2
  81538c:	e0bffd17 	ldw	r2,-12(fp)
  815390:	1145883a 	add	r2,r2,r5
  815394:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
  815398:	e0bffa17 	ldw	r2,-24(fp)
  81539c:	10800044 	addi	r2,r2,1
  8153a0:	e0bffa15 	stw	r2,-24(fp)
  8153a4:	e0bffa17 	ldw	r2,-24(fp)
  8153a8:	10800210 	cmplti	r2,r2,8
  8153ac:	103fed1e 	bne	r2,zero,815364 <Read_File_Record_At_Offset+0x54>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
  8153b0:	e03ffa15 	stw	zero,-24(fp)
  8153b4:	00001206 	br	815400 <Read_File_Record_At_Offset+0xf0>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
  8153b8:	e17ffa17 	ldw	r5,-24(fp)
  8153bc:	d0a73a17 	ldw	r2,-25368(gp)
  8153c0:	10800a17 	ldw	r2,40(r2)
  8153c4:	1009883a 	mov	r4,r2
  8153c8:	e0fffc17 	ldw	r3,-16(fp)
  8153cc:	e0bffa17 	ldw	r2,-24(fp)
  8153d0:	1885883a 	add	r2,r3,r2
  8153d4:	2085883a 	add	r2,r4,r2
  8153d8:	10800204 	addi	r2,r2,8
  8153dc:	10800023 	ldbuio	r2,0(r2)
  8153e0:	1007883a 	mov	r3,r2
  8153e4:	e0bffd17 	ldw	r2,-12(fp)
  8153e8:	2885883a 	add	r2,r5,r2
  8153ec:	10800204 	addi	r2,r2,8
  8153f0:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
  8153f4:	e0bffa17 	ldw	r2,-24(fp)
  8153f8:	10800044 	addi	r2,r2,1
  8153fc:	e0bffa15 	stw	r2,-24(fp)
  815400:	e0bffa17 	ldw	r2,-24(fp)
  815404:	108000d0 	cmplti	r2,r2,3
  815408:	103feb1e 	bne	r2,zero,8153b8 <Read_File_Record_At_Offset+0xa8>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
  81540c:	d0a73a17 	ldw	r2,-25368(gp)
  815410:	10800a17 	ldw	r2,40(r2)
  815414:	1007883a 	mov	r3,r2
  815418:	e0bffc17 	ldw	r2,-16(fp)
  81541c:	1885883a 	add	r2,r3,r2
  815420:	108002c4 	addi	r2,r2,11
  815424:	10800023 	ldbuio	r2,0(r2)
  815428:	1007883a 	mov	r3,r2
  81542c:	e0bffd17 	ldw	r2,-12(fp)
  815430:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
  815434:	d0a73a17 	ldw	r2,-25368(gp)
  815438:	10800a17 	ldw	r2,40(r2)
  81543c:	1007883a 	mov	r3,r2
  815440:	e0bffc17 	ldw	r2,-16(fp)
  815444:	1885883a 	add	r2,r3,r2
  815448:	10800384 	addi	r2,r2,14
  81544c:	1080002b 	ldhuio	r2,0(r2)
  815450:	1007883a 	mov	r3,r2
  815454:	e0bffd17 	ldw	r2,-12(fp)
  815458:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
  81545c:	d0a73a17 	ldw	r2,-25368(gp)
  815460:	10800a17 	ldw	r2,40(r2)
  815464:	1007883a 	mov	r3,r2
  815468:	e0bffc17 	ldw	r2,-16(fp)
  81546c:	1885883a 	add	r2,r3,r2
  815470:	10800404 	addi	r2,r2,16
  815474:	1080002b 	ldhuio	r2,0(r2)
  815478:	1007883a 	mov	r3,r2
  81547c:	e0bffd17 	ldw	r2,-12(fp)
  815480:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
  815484:	d0a73a17 	ldw	r2,-25368(gp)
  815488:	10800a17 	ldw	r2,40(r2)
  81548c:	1007883a 	mov	r3,r2
  815490:	e0bffc17 	ldw	r2,-16(fp)
  815494:	1885883a 	add	r2,r3,r2
  815498:	10800484 	addi	r2,r2,18
  81549c:	1080002b 	ldhuio	r2,0(r2)
  8154a0:	1007883a 	mov	r3,r2
  8154a4:	e0bffd17 	ldw	r2,-12(fp)
  8154a8:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
  8154ac:	d0a73a17 	ldw	r2,-25368(gp)
  8154b0:	10800a17 	ldw	r2,40(r2)
  8154b4:	1007883a 	mov	r3,r2
  8154b8:	e0bffc17 	ldw	r2,-16(fp)
  8154bc:	1885883a 	add	r2,r3,r2
  8154c0:	10800584 	addi	r2,r2,22
  8154c4:	1080002b 	ldhuio	r2,0(r2)
  8154c8:	1007883a 	mov	r3,r2
  8154cc:	e0bffd17 	ldw	r2,-12(fp)
  8154d0:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
  8154d4:	d0a73a17 	ldw	r2,-25368(gp)
  8154d8:	10800a17 	ldw	r2,40(r2)
  8154dc:	1007883a 	mov	r3,r2
  8154e0:	e0bffc17 	ldw	r2,-16(fp)
  8154e4:	1885883a 	add	r2,r3,r2
  8154e8:	10800604 	addi	r2,r2,24
  8154ec:	1080002b 	ldhuio	r2,0(r2)
  8154f0:	1007883a 	mov	r3,r2
  8154f4:	e0bffd17 	ldw	r2,-12(fp)
  8154f8:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
  8154fc:	d0a73a17 	ldw	r2,-25368(gp)
  815500:	10800a17 	ldw	r2,40(r2)
  815504:	1007883a 	mov	r3,r2
  815508:	e0bffc17 	ldw	r2,-16(fp)
  81550c:	1885883a 	add	r2,r3,r2
  815510:	10800684 	addi	r2,r2,26
  815514:	1080002b 	ldhuio	r2,0(r2)
  815518:	1007883a 	mov	r3,r2
  81551c:	e0bffd17 	ldw	r2,-12(fp)
  815520:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
  815524:	d0a73a17 	ldw	r2,-25368(gp)
  815528:	10800a17 	ldw	r2,40(r2)
  81552c:	1007883a 	mov	r3,r2
  815530:	e0bffc17 	ldw	r2,-16(fp)
  815534:	1885883a 	add	r2,r3,r2
  815538:	10800704 	addi	r2,r2,28
  81553c:	10800037 	ldwio	r2,0(r2)
  815540:	1007883a 	mov	r3,r2
  815544:	e0bffd17 	ldw	r2,-12(fp)
  815548:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
  81554c:	e0fffd17 	ldw	r3,-12(fp)
  815550:	e0bffe17 	ldw	r2,-8(fp)
  815554:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
  815558:	e0fffd17 	ldw	r3,-12(fp)
  81555c:	e0bfff17 	ldw	r2,-4(fp)
  815560:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
  815564:	e0bffc17 	ldw	r2,-16(fp)
  815568:	1007883a 	mov	r3,r2
  81556c:	e0bffd17 	ldw	r2,-12(fp)
  815570:	10c00c0d 	sth	r3,48(r2)
		result = true;
  815574:	00800044 	movi	r2,1
  815578:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  81557c:	e0bffb17 	ldw	r2,-20(fp)
}
  815580:	e037883a 	mov	sp,fp
  815584:	dfc00117 	ldw	ra,4(sp)
  815588:	df000017 	ldw	fp,0(sp)
  81558c:	dec00204 	addi	sp,sp,8
  815590:	f800283a 	ret

00815594 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  815594:	defff904 	addi	sp,sp,-28
  815598:	dfc00615 	stw	ra,24(sp)
  81559c:	df000515 	stw	fp,20(sp)
  8155a0:	df000504 	addi	fp,sp,20
  8155a4:	e13ffe15 	stw	r4,-8(fp)
  8155a8:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
  8155ac:	e03ffd15 	stw	zero,-12(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  8155b0:	e0bffe17 	ldw	r2,-8(fp)
  8155b4:	108007cc 	andi	r2,r2,31
  8155b8:	1004c03a 	cmpne	r2,r2,zero
  8155bc:	10009d1e 	bne	r2,zero,815834 <Write_File_Record_At_Offset+0x2a0>
  8155c0:	0817bd80 	call	817bd8 <alt_up_sd_card_is_Present>
  8155c4:	1005003a 	cmpeq	r2,r2,zero
  8155c8:	10009a1e 	bne	r2,zero,815834 <Write_File_Record_At_Offset+0x2a0>
  8155cc:	d0a73117 	ldw	r2,-25404(gp)
  8155d0:	1005003a 	cmpeq	r2,r2,zero
  8155d4:	1000971e 	bne	r2,zero,815834 <Write_File_Record_At_Offset+0x2a0>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
  8155d8:	e03ffc15 	stw	zero,-16(fp)
  8155dc:	00001e06 	br	815658 <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
  8155e0:	e0bffc17 	ldw	r2,-16(fp)
  8155e4:	10c00044 	addi	r3,r2,1
  8155e8:	e0bfff17 	ldw	r2,-4(fp)
  8155ec:	10c5883a 	add	r2,r2,r3
  8155f0:	10800003 	ldbu	r2,0(r2)
  8155f4:	10803fcc 	andi	r2,r2,255
  8155f8:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars << 8;
  8155fc:	e0bffb0f 	ldh	r2,-20(fp)
  815600:	1004923a 	slli	r2,r2,8
  815604:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars | record->name[counter];
  815608:	e0fffc17 	ldw	r3,-16(fp)
  81560c:	e0bfff17 	ldw	r2,-4(fp)
  815610:	10c5883a 	add	r2,r2,r3
  815614:	10800003 	ldbu	r2,0(r2)
  815618:	10c03fcc 	andi	r3,r2,255
  81561c:	e0bffb0b 	ldhu	r2,-20(fp)
  815620:	10c4b03a 	or	r2,r2,r3
  815624:	e0bffb0d 	sth	r2,-20(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  815628:	d0a73a17 	ldw	r2,-25368(gp)
  81562c:	10800a17 	ldw	r2,40(r2)
  815630:	1009883a 	mov	r4,r2
  815634:	e0fffe17 	ldw	r3,-8(fp)
  815638:	e0bffc17 	ldw	r2,-16(fp)
  81563c:	1885883a 	add	r2,r3,r2
  815640:	2085883a 	add	r2,r4,r2
  815644:	e0fffb0f 	ldh	r3,-20(fp)
  815648:	10c0002d 	sthio	r3,0(r2)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
  81564c:	e0bffc17 	ldw	r2,-16(fp)
  815650:	10800084 	addi	r2,r2,2
  815654:	e0bffc15 	stw	r2,-16(fp)
  815658:	e0bffc17 	ldw	r2,-16(fp)
  81565c:	10800210 	cmplti	r2,r2,8
  815660:	103fdf1e 	bne	r2,zero,8155e0 <Write_File_Record_At_Offset+0x4c>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
  815664:	e03ffc15 	stw	zero,-16(fp)
  815668:	00001306 	br	8156b8 <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  81566c:	d0a73a17 	ldw	r2,-25368(gp)
  815670:	10800a17 	ldw	r2,40(r2)
  815674:	1009883a 	mov	r4,r2
  815678:	e0fffe17 	ldw	r3,-8(fp)
  81567c:	e0bffc17 	ldw	r2,-16(fp)
  815680:	1885883a 	add	r2,r3,r2
  815684:	2085883a 	add	r2,r4,r2
  815688:	11000204 	addi	r4,r2,8
  81568c:	e0fffc17 	ldw	r3,-16(fp)
  815690:	e0bfff17 	ldw	r2,-4(fp)
  815694:	1885883a 	add	r2,r3,r2
  815698:	10800204 	addi	r2,r2,8
  81569c:	10800003 	ldbu	r2,0(r2)
  8156a0:	10c03fcc 	andi	r3,r2,255
  8156a4:	2005883a 	mov	r2,r4
  8156a8:	10c00025 	stbio	r3,0(r2)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
  8156ac:	e0bffc17 	ldw	r2,-16(fp)
  8156b0:	10800044 	addi	r2,r2,1
  8156b4:	e0bffc15 	stw	r2,-16(fp)
  8156b8:	e0bffc17 	ldw	r2,-16(fp)
  8156bc:	108000d0 	cmplti	r2,r2,3
  8156c0:	103fea1e 	bne	r2,zero,81566c <Write_File_Record_At_Offset+0xd8>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  8156c4:	d0a73a17 	ldw	r2,-25368(gp)
  8156c8:	10800a17 	ldw	r2,40(r2)
  8156cc:	1007883a 	mov	r3,r2
  8156d0:	e0bffe17 	ldw	r2,-8(fp)
  8156d4:	1885883a 	add	r2,r3,r2
  8156d8:	110002c4 	addi	r4,r2,11
  8156dc:	e0bfff17 	ldw	r2,-4(fp)
  8156e0:	108002c3 	ldbu	r2,11(r2)
  8156e4:	10c03fcc 	andi	r3,r2,255
  8156e8:	2005883a 	mov	r2,r4
  8156ec:	10c00025 	stbio	r3,0(r2)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  8156f0:	d0a73a17 	ldw	r2,-25368(gp)
  8156f4:	10800a17 	ldw	r2,40(r2)
  8156f8:	1007883a 	mov	r3,r2
  8156fc:	e0bffe17 	ldw	r2,-8(fp)
  815700:	1885883a 	add	r2,r3,r2
  815704:	11000384 	addi	r4,r2,14
  815708:	e0bfff17 	ldw	r2,-4(fp)
  81570c:	1080030b 	ldhu	r2,12(r2)
  815710:	10ffffcc 	andi	r3,r2,65535
  815714:	2005883a 	mov	r2,r4
  815718:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  81571c:	d0a73a17 	ldw	r2,-25368(gp)
  815720:	10800a17 	ldw	r2,40(r2)
  815724:	1007883a 	mov	r3,r2
  815728:	e0bffe17 	ldw	r2,-8(fp)
  81572c:	1885883a 	add	r2,r3,r2
  815730:	11000404 	addi	r4,r2,16
  815734:	e0bfff17 	ldw	r2,-4(fp)
  815738:	1080038b 	ldhu	r2,14(r2)
  81573c:	10ffffcc 	andi	r3,r2,65535
  815740:	2005883a 	mov	r2,r4
  815744:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  815748:	d0a73a17 	ldw	r2,-25368(gp)
  81574c:	10800a17 	ldw	r2,40(r2)
  815750:	1007883a 	mov	r3,r2
  815754:	e0bffe17 	ldw	r2,-8(fp)
  815758:	1885883a 	add	r2,r3,r2
  81575c:	11000484 	addi	r4,r2,18
  815760:	e0bfff17 	ldw	r2,-4(fp)
  815764:	1080040b 	ldhu	r2,16(r2)
  815768:	10ffffcc 	andi	r3,r2,65535
  81576c:	2005883a 	mov	r2,r4
  815770:	10c0002d 	sthio	r3,0(r2)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  815774:	d0a73a17 	ldw	r2,-25368(gp)
  815778:	10800a17 	ldw	r2,40(r2)
  81577c:	1007883a 	mov	r3,r2
  815780:	e0bffe17 	ldw	r2,-8(fp)
  815784:	1885883a 	add	r2,r3,r2
  815788:	11000584 	addi	r4,r2,22
  81578c:	e0bfff17 	ldw	r2,-4(fp)
  815790:	1080048b 	ldhu	r2,18(r2)
  815794:	10ffffcc 	andi	r3,r2,65535
  815798:	2005883a 	mov	r2,r4
  81579c:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  8157a0:	d0a73a17 	ldw	r2,-25368(gp)
  8157a4:	10800a17 	ldw	r2,40(r2)
  8157a8:	1007883a 	mov	r3,r2
  8157ac:	e0bffe17 	ldw	r2,-8(fp)
  8157b0:	1885883a 	add	r2,r3,r2
  8157b4:	11000604 	addi	r4,r2,24
  8157b8:	e0bfff17 	ldw	r2,-4(fp)
  8157bc:	1080050b 	ldhu	r2,20(r2)
  8157c0:	10ffffcc 	andi	r3,r2,65535
  8157c4:	2005883a 	mov	r2,r4
  8157c8:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  8157cc:	d0a73a17 	ldw	r2,-25368(gp)
  8157d0:	10800a17 	ldw	r2,40(r2)
  8157d4:	1007883a 	mov	r3,r2
  8157d8:	e0bffe17 	ldw	r2,-8(fp)
  8157dc:	1885883a 	add	r2,r3,r2
  8157e0:	11000684 	addi	r4,r2,26
  8157e4:	e0bfff17 	ldw	r2,-4(fp)
  8157e8:	1080058b 	ldhu	r2,22(r2)
  8157ec:	10ffffcc 	andi	r3,r2,65535
  8157f0:	2005883a 	mov	r2,r4
  8157f4:	10c0002d 	sthio	r3,0(r2)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  8157f8:	d0a73a17 	ldw	r2,-25368(gp)
  8157fc:	10800a17 	ldw	r2,40(r2)
  815800:	1007883a 	mov	r3,r2
  815804:	e0bffe17 	ldw	r2,-8(fp)
  815808:	1885883a 	add	r2,r3,r2
  81580c:	11000704 	addi	r4,r2,28
  815810:	e0bfff17 	ldw	r2,-4(fp)
  815814:	10800617 	ldw	r2,24(r2)
  815818:	1007883a 	mov	r3,r2
  81581c:	2005883a 	mov	r2,r4
  815820:	10c00035 	stwio	r3,0(r2)
        current_sector_modified = true;                  
  815824:	00800044 	movi	r2,1
  815828:	d0a73b15 	stw	r2,-25364(gp)
        result = true;
  81582c:	00800044 	movi	r2,1
  815830:	e0bffd15 	stw	r2,-12(fp)
    }
    return result;
  815834:	e0bffd17 	ldw	r2,-12(fp)
}
  815838:	e037883a 	mov	sp,fp
  81583c:	dfc00117 	ldw	ra,4(sp)
  815840:	df000017 	ldw	fp,0(sp)
  815844:	dec00204 	addi	sp,sp,8
  815848:	f800283a 	ret

0081584c <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  81584c:	defff804 	addi	sp,sp,-32
  815850:	dfc00715 	stw	ra,28(sp)
  815854:	df000615 	stw	fp,24(sp)
  815858:	dc000515 	stw	r16,20(sp)
  81585c:	df000504 	addi	fp,sp,20
  815860:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
  815864:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
  815868:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
  81586c:	0009883a 	mov	r4,zero
  815870:	e17fff17 	ldw	r5,-4(fp)
  815874:	0814ec80 	call	814ec8 <Read_Sector_Data>
  815878:	e0bffe15 	stw	r2,-8(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  81587c:	d0a73a17 	ldw	r2,-25368(gp)
  815880:	10800a17 	ldw	r2,40(r2)
  815884:	10807f84 	addi	r2,r2,510
  815888:	1080002b 	ldhuio	r2,0(r2)
  81588c:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
  815890:	e0bffc0f 	ldh	r2,-16(fp)
  815894:	10ffffcc 	andi	r3,r2,65535
  815898:	00aa9554 	movui	r2,43605
  81589c:	1881751e 	bne	r3,r2,815e74 <Check_for_DOS_FAT+0x628>
  8158a0:	e0bffe17 	ldw	r2,-8(fp)
  8158a4:	1005003a 	cmpeq	r2,r2,zero
  8158a8:	1001721e 	bne	r2,zero,815e74 <Check_for_DOS_FAT+0x628>
	{
		int num_clusters = 0;
  8158ac:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
  8158b0:	d0a73a17 	ldw	r2,-25368(gp)
  8158b4:	10800a17 	ldw	r2,40(r2)
  8158b8:	10800023 	ldbuio	r2,0(r2)
  8158bc:	1007883a 	mov	r3,r2
  8158c0:	008020f4 	movhi	r2,131
  8158c4:	10a7b204 	addi	r2,r2,-24888
  8158c8:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
  8158cc:	d0a73a17 	ldw	r2,-25368(gp)
  8158d0:	10800a17 	ldw	r2,40(r2)
  8158d4:	10800044 	addi	r2,r2,1
  8158d8:	10800023 	ldbuio	r2,0(r2)
  8158dc:	1007883a 	mov	r3,r2
  8158e0:	008020f4 	movhi	r2,131
  8158e4:	10a7b204 	addi	r2,r2,-24888
  8158e8:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
  8158ec:	d0a73a17 	ldw	r2,-25368(gp)
  8158f0:	10800a17 	ldw	r2,40(r2)
  8158f4:	10800084 	addi	r2,r2,2
  8158f8:	10800023 	ldbuio	r2,0(r2)
  8158fc:	1007883a 	mov	r3,r2
  815900:	008020f4 	movhi	r2,131
  815904:	10a7b204 	addi	r2,r2,-24888
  815908:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
  81590c:	e03ffd15 	stw	zero,-12(fp)
  815910:	00001006 	br	815954 <Check_for_DOS_FAT+0x108>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
  815914:	e13ffd17 	ldw	r4,-12(fp)
  815918:	d0a73a17 	ldw	r2,-25368(gp)
  81591c:	10800a17 	ldw	r2,40(r2)
  815920:	1007883a 	mov	r3,r2
  815924:	e0bffd17 	ldw	r2,-12(fp)
  815928:	1885883a 	add	r2,r3,r2
  81592c:	108000c4 	addi	r2,r2,3
  815930:	10800023 	ldbuio	r2,0(r2)
  815934:	1007883a 	mov	r3,r2
  815938:	008020f4 	movhi	r2,131
  81593c:	10a7b204 	addi	r2,r2,-24888
  815940:	1105883a 	add	r2,r2,r4
  815944:	10c000c5 	stb	r3,3(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
  815948:	e0bffd17 	ldw	r2,-12(fp)
  81594c:	10800044 	addi	r2,r2,1
  815950:	e0bffd15 	stw	r2,-12(fp)
  815954:	e0bffd17 	ldw	r2,-12(fp)
  815958:	10800210 	cmplti	r2,r2,8
  81595c:	103fed1e 	bne	r2,zero,815914 <Check_for_DOS_FAT+0xc8>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
  815960:	d0a73a17 	ldw	r2,-25368(gp)
  815964:	10800a17 	ldw	r2,40(r2)
  815968:	10800304 	addi	r2,r2,12
  81596c:	10800023 	ldbuio	r2,0(r2)
  815970:	10803fcc 	andi	r2,r2,255
  815974:	1004923a 	slli	r2,r2,8
  815978:	1007883a 	mov	r3,r2
  81597c:	d0a73a17 	ldw	r2,-25368(gp)
  815980:	10800a17 	ldw	r2,40(r2)
  815984:	108002c4 	addi	r2,r2,11
  815988:	10800023 	ldbuio	r2,0(r2)
  81598c:	10803fcc 	andi	r2,r2,255
  815990:	1080201c 	xori	r2,r2,128
  815994:	10bfe004 	addi	r2,r2,-128
  815998:	1884b03a 	or	r2,r3,r2
  81599c:	1007883a 	mov	r3,r2
  8159a0:	008020f4 	movhi	r2,131
  8159a4:	10a7b204 	addi	r2,r2,-24888
  8159a8:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
  8159ac:	d0a73a17 	ldw	r2,-25368(gp)
  8159b0:	10800a17 	ldw	r2,40(r2)
  8159b4:	10800344 	addi	r2,r2,13
  8159b8:	10800023 	ldbuio	r2,0(r2)
  8159bc:	1007883a 	mov	r3,r2
  8159c0:	008020f4 	movhi	r2,131
  8159c4:	10a7b204 	addi	r2,r2,-24888
  8159c8:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
  8159cc:	d0a73a17 	ldw	r2,-25368(gp)
  8159d0:	10800a17 	ldw	r2,40(r2)
  8159d4:	10800384 	addi	r2,r2,14
  8159d8:	1080002b 	ldhuio	r2,0(r2)
  8159dc:	1007883a 	mov	r3,r2
  8159e0:	008020f4 	movhi	r2,131
  8159e4:	10a7b204 	addi	r2,r2,-24888
  8159e8:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
  8159ec:	d0a73a17 	ldw	r2,-25368(gp)
  8159f0:	10800a17 	ldw	r2,40(r2)
  8159f4:	10800404 	addi	r2,r2,16
  8159f8:	10800023 	ldbuio	r2,0(r2)
  8159fc:	1007883a 	mov	r3,r2
  815a00:	008020f4 	movhi	r2,131
  815a04:	10a7b204 	addi	r2,r2,-24888
  815a08:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
  815a0c:	d0a73a17 	ldw	r2,-25368(gp)
  815a10:	10800a17 	ldw	r2,40(r2)
  815a14:	10800484 	addi	r2,r2,18
  815a18:	10800023 	ldbuio	r2,0(r2)
  815a1c:	10803fcc 	andi	r2,r2,255
  815a20:	1004923a 	slli	r2,r2,8
  815a24:	1007883a 	mov	r3,r2
  815a28:	d0a73a17 	ldw	r2,-25368(gp)
  815a2c:	10800a17 	ldw	r2,40(r2)
  815a30:	10800444 	addi	r2,r2,17
  815a34:	10800023 	ldbuio	r2,0(r2)
  815a38:	10803fcc 	andi	r2,r2,255
  815a3c:	1884b03a 	or	r2,r3,r2
  815a40:	1007883a 	mov	r3,r2
  815a44:	008020f4 	movhi	r2,131
  815a48:	10a7b204 	addi	r2,r2,-24888
  815a4c:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
  815a50:	d0a73a17 	ldw	r2,-25368(gp)
  815a54:	10800a17 	ldw	r2,40(r2)
  815a58:	10800504 	addi	r2,r2,20
  815a5c:	10800023 	ldbuio	r2,0(r2)
  815a60:	10803fcc 	andi	r2,r2,255
  815a64:	1004923a 	slli	r2,r2,8
  815a68:	1007883a 	mov	r3,r2
  815a6c:	d0a73a17 	ldw	r2,-25368(gp)
  815a70:	10800a17 	ldw	r2,40(r2)
  815a74:	108004c4 	addi	r2,r2,19
  815a78:	10800023 	ldbuio	r2,0(r2)
  815a7c:	10803fcc 	andi	r2,r2,255
  815a80:	1884b03a 	or	r2,r3,r2
  815a84:	1007883a 	mov	r3,r2
  815a88:	008020f4 	movhi	r2,131
  815a8c:	10a7b204 	addi	r2,r2,-24888
  815a90:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
  815a94:	d0a73a17 	ldw	r2,-25368(gp)
  815a98:	10800a17 	ldw	r2,40(r2)
  815a9c:	10800544 	addi	r2,r2,21
  815aa0:	10800023 	ldbuio	r2,0(r2)
  815aa4:	1007883a 	mov	r3,r2
  815aa8:	008020f4 	movhi	r2,131
  815aac:	10a7b204 	addi	r2,r2,-24888
  815ab0:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
  815ab4:	d0a73a17 	ldw	r2,-25368(gp)
  815ab8:	10800a17 	ldw	r2,40(r2)
  815abc:	10800584 	addi	r2,r2,22
  815ac0:	1080002b 	ldhuio	r2,0(r2)
  815ac4:	1007883a 	mov	r3,r2
  815ac8:	008020f4 	movhi	r2,131
  815acc:	10a7b204 	addi	r2,r2,-24888
  815ad0:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
  815ad4:	d0a73a17 	ldw	r2,-25368(gp)
  815ad8:	10800a17 	ldw	r2,40(r2)
  815adc:	10800604 	addi	r2,r2,24
  815ae0:	1080002b 	ldhuio	r2,0(r2)
  815ae4:	1007883a 	mov	r3,r2
  815ae8:	008020f4 	movhi	r2,131
  815aec:	10a7b204 	addi	r2,r2,-24888
  815af0:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
  815af4:	d0a73a17 	ldw	r2,-25368(gp)
  815af8:	10800a17 	ldw	r2,40(r2)
  815afc:	10800684 	addi	r2,r2,26
  815b00:	1080002b 	ldhuio	r2,0(r2)
  815b04:	1007883a 	mov	r3,r2
  815b08:	008020f4 	movhi	r2,131
  815b0c:	10a7b204 	addi	r2,r2,-24888
  815b10:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
  815b14:	d0a73a17 	ldw	r2,-25368(gp)
  815b18:	10800a17 	ldw	r2,40(r2)
  815b1c:	10800704 	addi	r2,r2,28
  815b20:	10800037 	ldwio	r2,0(r2)
  815b24:	1007883a 	mov	r3,r2
  815b28:	008020f4 	movhi	r2,131
  815b2c:	10a7b204 	addi	r2,r2,-24888
  815b30:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
  815b34:	d0a73a17 	ldw	r2,-25368(gp)
  815b38:	10800a17 	ldw	r2,40(r2)
  815b3c:	10800804 	addi	r2,r2,32
  815b40:	10800037 	ldwio	r2,0(r2)
  815b44:	1007883a 	mov	r3,r2
  815b48:	008020f4 	movhi	r2,131
  815b4c:	10a7b204 	addi	r2,r2,-24888
  815b50:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
  815b54:	d0a73a17 	ldw	r2,-25368(gp)
  815b58:	10800a17 	ldw	r2,40(r2)
  815b5c:	10800904 	addi	r2,r2,36
  815b60:	10800023 	ldbuio	r2,0(r2)
  815b64:	1007883a 	mov	r3,r2
  815b68:	008020f4 	movhi	r2,131
  815b6c:	10a7b204 	addi	r2,r2,-24888
  815b70:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
  815b74:	d0a73a17 	ldw	r2,-25368(gp)
  815b78:	10800a17 	ldw	r2,40(r2)
  815b7c:	10800944 	addi	r2,r2,37
  815b80:	10800023 	ldbuio	r2,0(r2)
  815b84:	1007883a 	mov	r3,r2
  815b88:	008020f4 	movhi	r2,131
  815b8c:	10a7b204 	addi	r2,r2,-24888
  815b90:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
  815b94:	d0a73a17 	ldw	r2,-25368(gp)
  815b98:	10800a17 	ldw	r2,40(r2)
  815b9c:	10800984 	addi	r2,r2,38
  815ba0:	10800023 	ldbuio	r2,0(r2)
  815ba4:	1007883a 	mov	r3,r2
  815ba8:	008020f4 	movhi	r2,131
  815bac:	10a7b204 	addi	r2,r2,-24888
  815bb0:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
  815bb4:	008020f4 	movhi	r2,131
  815bb8:	10a7b204 	addi	r2,r2,-24888
  815bbc:	1080040b 	ldhu	r2,16(r2)
  815bc0:	10ffffcc 	andi	r3,r2,65535
  815bc4:	008020f4 	movhi	r2,131
  815bc8:	10a7b204 	addi	r2,r2,-24888
  815bcc:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
  815bd0:	008020f4 	movhi	r2,131
  815bd4:	10a7b204 	addi	r2,r2,-24888
  815bd8:	10c01117 	ldw	r3,68(r2)
  815bdc:	008020f4 	movhi	r2,131
  815be0:	10a7b204 	addi	r2,r2,-24888
  815be4:	1080068b 	ldhu	r2,26(r2)
  815be8:	10bfffcc 	andi	r2,r2,65535
  815bec:	1887883a 	add	r3,r3,r2
  815bf0:	008020f4 	movhi	r2,131
  815bf4:	10a7b204 	addi	r2,r2,-24888
  815bf8:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
  815bfc:	008020f4 	movhi	r2,131
  815c00:	10a7b204 	addi	r2,r2,-24888
  815c04:	10c01217 	ldw	r3,72(r2)
  815c08:	008020f4 	movhi	r2,131
  815c0c:	10a7b204 	addi	r2,r2,-24888
  815c10:	1080068b 	ldhu	r2,26(r2)
  815c14:	10bfffcc 	andi	r2,r2,65535
  815c18:	1887883a 	add	r3,r3,r2
  815c1c:	008020f4 	movhi	r2,131
  815c20:	10a7b204 	addi	r2,r2,-24888
  815c24:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  815c28:	008020f4 	movhi	r2,131
  815c2c:	10a7b204 	addi	r2,r2,-24888
  815c30:	14001317 	ldw	r16,76(r2)
  815c34:	008020f4 	movhi	r2,131
  815c38:	10a7b204 	addi	r2,r2,-24888
  815c3c:	1080050b 	ldhu	r2,20(r2)
  815c40:	10bfffcc 	andi	r2,r2,65535
  815c44:	1008917a 	slli	r4,r2,5
  815c48:	008020f4 	movhi	r2,131
  815c4c:	10a7b204 	addi	r2,r2,-24888
  815c50:	1080030b 	ldhu	r2,12(r2)
  815c54:	117fffcc 	andi	r5,r2,65535
  815c58:	0809a4c0 	call	809a4c <__divsi3>
  815c5c:	8087883a 	add	r3,r16,r2
  815c60:	008020f4 	movhi	r2,131
  815c64:	10a7b204 	addi	r2,r2,-24888
  815c68:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
  815c6c:	008020f4 	movhi	r2,131
  815c70:	10a7b204 	addi	r2,r2,-24888
  815c74:	1080058b 	ldhu	r2,22(r2)
  815c78:	10bfffcc 	andi	r2,r2,65535
  815c7c:	1005003a 	cmpeq	r2,r2,zero
  815c80:	10000b1e 	bne	r2,zero,815cb0 <Check_for_DOS_FAT+0x464>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
  815c84:	008020f4 	movhi	r2,131
  815c88:	10a7b204 	addi	r2,r2,-24888
  815c8c:	1080058b 	ldhu	r2,22(r2)
  815c90:	113fffcc 	andi	r4,r2,65535
  815c94:	008020f4 	movhi	r2,131
  815c98:	10a7b204 	addi	r2,r2,-24888
  815c9c:	10800383 	ldbu	r2,14(r2)
  815ca0:	11403fcc 	andi	r5,r2,255
  815ca4:	0809a4c0 	call	809a4c <__divsi3>
  815ca8:	e0bffb15 	stw	r2,-20(fp)
  815cac:	00000906 	br	815cd4 <Check_for_DOS_FAT+0x488>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
  815cb0:	008020f4 	movhi	r2,131
  815cb4:	10a7b204 	addi	r2,r2,-24888
  815cb8:	11000917 	ldw	r4,36(r2)
  815cbc:	008020f4 	movhi	r2,131
  815cc0:	10a7b204 	addi	r2,r2,-24888
  815cc4:	10800383 	ldbu	r2,14(r2)
  815cc8:	11403fcc 	andi	r5,r2,255
  815ccc:	0809b0c0 	call	809b0c <__udivsi3>
  815cd0:	e0bffb15 	stw	r2,-20(fp)
		}
		if (num_clusters < 4087)
  815cd4:	e0bffb17 	ldw	r2,-20(fp)
  815cd8:	1083fdc8 	cmpgei	r2,r2,4087
  815cdc:	1000051e 	bne	r2,zero,815cf4 <Check_for_DOS_FAT+0x4a8>
		{
			boot_sector_data.bits_for_cluster_index = 12;
  815ce0:	00c020f4 	movhi	r3,131
  815ce4:	18e7b204 	addi	r3,r3,-24888
  815ce8:	00800304 	movi	r2,12
  815cec:	18801085 	stb	r2,66(r3)
  815cf0:	00000c06 	br	815d24 <Check_for_DOS_FAT+0x4d8>
		}
		else if (num_clusters <= 65517)
  815cf4:	e0fffb17 	ldw	r3,-20(fp)
  815cf8:	00bffb54 	movui	r2,65517
  815cfc:	10c00516 	blt	r2,r3,815d14 <Check_for_DOS_FAT+0x4c8>
		{
			boot_sector_data.bits_for_cluster_index = 16;
  815d00:	00c020f4 	movhi	r3,131
  815d04:	18e7b204 	addi	r3,r3,-24888
  815d08:	00800404 	movi	r2,16
  815d0c:	18801085 	stb	r2,66(r3)
  815d10:	00000406 	br	815d24 <Check_for_DOS_FAT+0x4d8>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
  815d14:	00c020f4 	movhi	r3,131
  815d18:	18e7b204 	addi	r3,r3,-24888
  815d1c:	00800804 	movi	r2,32
  815d20:	18801085 	stb	r2,66(r3)
		}
	    
		for (counter = 0; counter < 4; counter++)
  815d24:	e03ffd15 	stw	zero,-12(fp)
  815d28:	00001106 	br	815d70 <Check_for_DOS_FAT+0x524>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
  815d2c:	e13ffd17 	ldw	r4,-12(fp)
  815d30:	d0a73a17 	ldw	r2,-25368(gp)
  815d34:	10800a17 	ldw	r2,40(r2)
  815d38:	1007883a 	mov	r3,r2
  815d3c:	e0bffd17 	ldw	r2,-12(fp)
  815d40:	1885883a 	add	r2,r3,r2
  815d44:	108009c4 	addi	r2,r2,39
  815d48:	10800023 	ldbuio	r2,0(r2)
  815d4c:	1007883a 	mov	r3,r2
  815d50:	008020f4 	movhi	r2,131
  815d54:	10a7b204 	addi	r2,r2,-24888
  815d58:	2085883a 	add	r2,r4,r2
  815d5c:	10800a04 	addi	r2,r2,40
  815d60:	10c000c5 	stb	r3,3(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
  815d64:	e0bffd17 	ldw	r2,-12(fp)
  815d68:	10800044 	addi	r2,r2,1
  815d6c:	e0bffd15 	stw	r2,-12(fp)
  815d70:	e0bffd17 	ldw	r2,-12(fp)
  815d74:	10800110 	cmplti	r2,r2,4
  815d78:	103fec1e 	bne	r2,zero,815d2c <Check_for_DOS_FAT+0x4e0>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
  815d7c:	e03ffd15 	stw	zero,-12(fp)
  815d80:	00001106 	br	815dc8 <Check_for_DOS_FAT+0x57c>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
  815d84:	e13ffd17 	ldw	r4,-12(fp)
  815d88:	d0a73a17 	ldw	r2,-25368(gp)
  815d8c:	10800a17 	ldw	r2,40(r2)
  815d90:	1007883a 	mov	r3,r2
  815d94:	e0bffd17 	ldw	r2,-12(fp)
  815d98:	1885883a 	add	r2,r3,r2
  815d9c:	10800ac4 	addi	r2,r2,43
  815da0:	10800023 	ldbuio	r2,0(r2)
  815da4:	1007883a 	mov	r3,r2
  815da8:	008020f4 	movhi	r2,131
  815dac:	10a7b204 	addi	r2,r2,-24888
  815db0:	2085883a 	add	r2,r4,r2
  815db4:	10800b04 	addi	r2,r2,44
  815db8:	10c000c5 	stb	r3,3(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
  815dbc:	e0bffd17 	ldw	r2,-12(fp)
  815dc0:	10800044 	addi	r2,r2,1
  815dc4:	e0bffd15 	stw	r2,-12(fp)
  815dc8:	e0bffd17 	ldw	r2,-12(fp)
  815dcc:	108002d0 	cmplti	r2,r2,11
  815dd0:	103fec1e 	bne	r2,zero,815d84 <Check_for_DOS_FAT+0x538>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
  815dd4:	e03ffd15 	stw	zero,-12(fp)
  815dd8:	00001106 	br	815e20 <Check_for_DOS_FAT+0x5d4>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
  815ddc:	e13ffd17 	ldw	r4,-12(fp)
  815de0:	d0a73a17 	ldw	r2,-25368(gp)
  815de4:	10800a17 	ldw	r2,40(r2)
  815de8:	1007883a 	mov	r3,r2
  815dec:	e0bffd17 	ldw	r2,-12(fp)
  815df0:	1885883a 	add	r2,r3,r2
  815df4:	10800d84 	addi	r2,r2,54
  815df8:	10800023 	ldbuio	r2,0(r2)
  815dfc:	1007883a 	mov	r3,r2
  815e00:	008020f4 	movhi	r2,131
  815e04:	10a7b204 	addi	r2,r2,-24888
  815e08:	2085883a 	add	r2,r4,r2
  815e0c:	10800e04 	addi	r2,r2,56
  815e10:	10c00085 	stb	r3,2(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
  815e14:	e0bffd17 	ldw	r2,-12(fp)
  815e18:	10800044 	addi	r2,r2,1
  815e1c:	e0bffd15 	stw	r2,-12(fp)
  815e20:	e0bffd17 	ldw	r2,-12(fp)
  815e24:	10800210 	cmplti	r2,r2,8
  815e28:	103fec1e 	bne	r2,zero,815ddc <Check_for_DOS_FAT+0x590>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
  815e2c:	e03ffd15 	stw	zero,-12(fp)
  815e30:	00000a06 	br	815e5c <Check_for_DOS_FAT+0x610>
		{
			active_files[counter].in_use = false;
  815e34:	e0bffd17 	ldw	r2,-12(fp)
  815e38:	00c020f4 	movhi	r3,131
  815e3c:	18e7c704 	addi	r3,r3,-24804
  815e40:	100491ba 	slli	r2,r2,6
  815e44:	10c5883a 	add	r2,r2,r3
  815e48:	10800f04 	addi	r2,r2,60
  815e4c:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
  815e50:	e0bffd17 	ldw	r2,-12(fp)
  815e54:	10800044 	addi	r2,r2,1
  815e58:	e0bffd15 	stw	r2,-12(fp)
  815e5c:	e0bffd17 	ldw	r2,-12(fp)
  815e60:	10800510 	cmplti	r2,r2,20
  815e64:	103ff31e 	bne	r2,zero,815e34 <Check_for_DOS_FAT+0x5e8>
		{
			active_files[counter].in_use = false;
		}
		result = true;
  815e68:	00800044 	movi	r2,1
  815e6c:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
  815e70:	00000106 	br	815e78 <Check_for_DOS_FAT+0x62c>
		}
		result = true;
	}
    else
    {
        result = false;
  815e74:	e03ffe15 	stw	zero,-8(fp)
    }
	return result;
  815e78:	e0bffe17 	ldw	r2,-8(fp)
}
  815e7c:	e037883a 	mov	sp,fp
  815e80:	dfc00217 	ldw	ra,8(sp)
  815e84:	df000117 	ldw	fp,4(sp)
  815e88:	dc000017 	ldw	r16,0(sp)
  815e8c:	dec00304 	addi	sp,sp,12
  815e90:	f800283a 	ret

00815e94 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  815e94:	defffc04 	addi	sp,sp,-16
  815e98:	dfc00315 	stw	ra,12(sp)
  815e9c:	df000215 	stw	fp,8(sp)
  815ea0:	df000204 	addi	fp,sp,8
	bool result = false;
  815ea4:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
  815ea8:	0817bd80 	call	817bd8 <alt_up_sd_card_is_Present>
  815eac:	1005003a 	cmpeq	r2,r2,zero
  815eb0:	1000301e 	bne	r2,zero,815f74 <Look_for_FAT16+0xe0>
	{
		short int csd_file_format = *CSD_register_w0;
  815eb4:	d0a73417 	ldw	r2,-25392(gp)
  815eb8:	1080000b 	ldhu	r2,0(r2)
  815ebc:	e0bffe0d 	sth	r2,-8(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
  815ec0:	d0273815 	stw	zero,-25376(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
  815ec4:	d0273915 	stw	zero,-25372(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
  815ec8:	e0bffe0f 	ldh	r2,-8(fp)
  815ecc:	1004803a 	cmplt	r2,r2,zero
  815ed0:	1000281e 	bne	r2,zero,815f74 <Look_for_FAT16+0xe0>
  815ed4:	e0bffe0b 	ldhu	r2,-8(fp)
  815ed8:	10bfffcc 	andi	r2,r2,65535
  815edc:	1083000c 	andi	r2,r2,3072
  815ee0:	10830020 	cmpeqi	r2,r2,3072
  815ee4:	1000231e 	bne	r2,zero,815f74 <Look_for_FAT16+0xe0>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
  815ee8:	e0bffe0b 	ldhu	r2,-8(fp)
  815eec:	10bfffcc 	andi	r2,r2,65535
  815ef0:	1083000c 	andi	r2,r2,3072
  815ef4:	10810018 	cmpnei	r2,r2,1024
  815ef8:	1000031e 	bne	r2,zero,815f08 <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  815efc:	0009883a 	mov	r4,zero
  815f00:	081584c0 	call	81584c <Check_for_DOS_FAT>
  815f04:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
  815f08:	e0bffe0b 	ldhu	r2,-8(fp)
  815f0c:	10bfffcc 	andi	r2,r2,65535
  815f10:	1083000c 	andi	r2,r2,3072
  815f14:	1004c03a 	cmpne	r2,r2,zero
  815f18:	1000061e 	bne	r2,zero,815f34 <Look_for_FAT16+0xa0>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
  815f1c:	08151600 	call	815160 <Check_for_Master_Boot_Record>
  815f20:	1005003a 	cmpeq	r2,r2,zero
  815f24:	1000031e 	bne	r2,zero,815f34 <Look_for_FAT16+0xa0>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
  815f28:	d1273817 	ldw	r4,-25376(gp)
  815f2c:	081584c0 	call	81584c <Check_for_DOS_FAT>
  815f30:	e0bfff15 	stw	r2,-4(fp)
				}                        
			}
			if (result == true)
  815f34:	e0bfff17 	ldw	r2,-4(fp)
  815f38:	10800058 	cmpnei	r2,r2,1
  815f3c:	10000d1e 	bne	r2,zero,815f74 <Look_for_FAT16+0xe0>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
  815f40:	008020f4 	movhi	r2,131
  815f44:	10a7b204 	addi	r2,r2,-24888
  815f48:	10801083 	ldbu	r2,66(r2)
  815f4c:	10803fcc 	andi	r2,r2,255
  815f50:	10800420 	cmpeqi	r2,r2,16
  815f54:	1000021e 	bne	r2,zero,815f60 <Look_for_FAT16+0xcc>
				{
					result = false;
  815f58:	e03fff15 	stw	zero,-4(fp)
  815f5c:	00000506 	br	815f74 <Look_for_FAT16+0xe0>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  815f60:	008020f4 	movhi	r2,131
  815f64:	10a7b204 	addi	r2,r2,-24888
  815f68:	1080058b 	ldhu	r2,22(r2)
  815f6c:	10bfffcc 	andi	r2,r2,65535
  815f70:	d0a73915 	stw	r2,-25372(gp)
				}
			}
		}
	}
	return result;
  815f74:	e0bfff17 	ldw	r2,-4(fp)
}
  815f78:	e037883a 	mov	sp,fp
  815f7c:	dfc00117 	ldw	ra,4(sp)
  815f80:	df000017 	ldw	fp,0(sp)
  815f84:	dec00204 	addi	sp,sp,8
  815f88:	f800283a 	ret

00815f8c <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  815f8c:	defffb04 	addi	sp,sp,-20
  815f90:	dfc00415 	stw	ra,16(sp)
  815f94:	df000315 	stw	fp,12(sp)
  815f98:	df000304 	addi	fp,sp,12
  815f9c:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
  815fa0:	e13fff17 	ldw	r4,-4(fp)
  815fa4:	08009640 	call	800964 <strlen>
  815fa8:	e0bffd15 	stw	r2,-12(fp)
    
    for (index = 0; index < length; index++)
  815fac:	e03ffe15 	stw	zero,-8(fp)
  815fb0:	00002206 	br	81603c <filename_to_upper_case+0xb0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  815fb4:	e0bffe17 	ldw	r2,-8(fp)
  815fb8:	1007883a 	mov	r3,r2
  815fbc:	e0bfff17 	ldw	r2,-4(fp)
  815fc0:	1885883a 	add	r2,r3,r2
  815fc4:	10800003 	ldbu	r2,0(r2)
  815fc8:	10803fcc 	andi	r2,r2,255
  815fcc:	1080201c 	xori	r2,r2,128
  815fd0:	10bfe004 	addi	r2,r2,-128
  815fd4:	10801850 	cmplti	r2,r2,97
  815fd8:	1000151e 	bne	r2,zero,816030 <filename_to_upper_case+0xa4>
  815fdc:	e0bffe17 	ldw	r2,-8(fp)
  815fe0:	1007883a 	mov	r3,r2
  815fe4:	e0bfff17 	ldw	r2,-4(fp)
  815fe8:	1885883a 	add	r2,r3,r2
  815fec:	10800003 	ldbu	r2,0(r2)
  815ff0:	10803fcc 	andi	r2,r2,255
  815ff4:	1080201c 	xori	r2,r2,128
  815ff8:	10bfe004 	addi	r2,r2,-128
  815ffc:	10801ec8 	cmpgei	r2,r2,123
  816000:	10000b1e 	bne	r2,zero,816030 <filename_to_upper_case+0xa4>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  816004:	e0bffe17 	ldw	r2,-8(fp)
  816008:	1007883a 	mov	r3,r2
  81600c:	e0bfff17 	ldw	r2,-4(fp)
  816010:	1889883a 	add	r4,r3,r2
  816014:	e0bffe17 	ldw	r2,-8(fp)
  816018:	1007883a 	mov	r3,r2
  81601c:	e0bfff17 	ldw	r2,-4(fp)
  816020:	1885883a 	add	r2,r3,r2
  816024:	10800003 	ldbu	r2,0(r2)
  816028:	10bff804 	addi	r2,r2,-32
  81602c:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  816030:	e0bffe17 	ldw	r2,-8(fp)
  816034:	10800044 	addi	r2,r2,1
  816038:	e0bffe15 	stw	r2,-8(fp)
  81603c:	e0fffe17 	ldw	r3,-8(fp)
  816040:	e0bffd17 	ldw	r2,-12(fp)
  816044:	18bfdb16 	blt	r3,r2,815fb4 <filename_to_upper_case+0x28>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
  816048:	e037883a 	mov	sp,fp
  81604c:	dfc00117 	ldw	ra,4(sp)
  816050:	df000017 	ldw	fp,0(sp)
  816054:	dec00204 	addi	sp,sp,8
  816058:	f800283a 	ret

0081605c <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  81605c:	defff804 	addi	sp,sp,-32
  816060:	dfc00715 	stw	ra,28(sp)
  816064:	df000615 	stw	fp,24(sp)
  816068:	df000604 	addi	fp,sp,24
  81606c:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
  816070:	e13fff17 	ldw	r4,-4(fp)
  816074:	08009640 	call	800964 <strlen>
  816078:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
  81607c:	00bfffc4 	movi	r2,-1
  816080:	e0bffc15 	stw	r2,-16(fp)
    int last_period = -1;
  816084:	00bfffc4 	movi	r2,-1
  816088:	e0bffb15 	stw	r2,-20(fp)
    bool result = true;
  81608c:	00800044 	movi	r2,1
  816090:	e0bffa15 	stw	r2,-24(fp)
    
    for(index = 0; index < length; index++)
  816094:	e03ffd15 	stw	zero,-12(fp)
  816098:	00007606 	br	816274 <check_file_name_for_FAT16_compliance+0x218>
    {
        if ((file_name[index] == ' ') ||
  81609c:	e0bffd17 	ldw	r2,-12(fp)
  8160a0:	1007883a 	mov	r3,r2
  8160a4:	e0bfff17 	ldw	r2,-4(fp)
  8160a8:	1885883a 	add	r2,r3,r2
  8160ac:	10800003 	ldbu	r2,0(r2)
  8160b0:	10803fcc 	andi	r2,r2,255
  8160b4:	1080201c 	xori	r2,r2,128
  8160b8:	10bfe004 	addi	r2,r2,-128
  8160bc:	10800820 	cmpeqi	r2,r2,32
  8160c0:	1000431e 	bne	r2,zero,8161d0 <check_file_name_for_FAT16_compliance+0x174>
  8160c4:	e0bffd17 	ldw	r2,-12(fp)
  8160c8:	10ffffc4 	addi	r3,r2,-1
  8160cc:	e0bffc17 	ldw	r2,-16(fp)
  8160d0:	1880141e 	bne	r3,r2,816124 <check_file_name_for_FAT16_compliance+0xc8>
  8160d4:	e0bffd17 	ldw	r2,-12(fp)
  8160d8:	1007883a 	mov	r3,r2
  8160dc:	e0bfff17 	ldw	r2,-4(fp)
  8160e0:	1885883a 	add	r2,r3,r2
  8160e4:	10800003 	ldbu	r2,0(r2)
  8160e8:	10803fcc 	andi	r2,r2,255
  8160ec:	1080201c 	xori	r2,r2,128
  8160f0:	10bfe004 	addi	r2,r2,-128
  8160f4:	10801720 	cmpeqi	r2,r2,92
  8160f8:	1000351e 	bne	r2,zero,8161d0 <check_file_name_for_FAT16_compliance+0x174>
  8160fc:	e0bffd17 	ldw	r2,-12(fp)
  816100:	1007883a 	mov	r3,r2
  816104:	e0bfff17 	ldw	r2,-4(fp)
  816108:	1885883a 	add	r2,r3,r2
  81610c:	10800003 	ldbu	r2,0(r2)
  816110:	10803fcc 	andi	r2,r2,255
  816114:	1080201c 	xori	r2,r2,128
  816118:	10bfe004 	addi	r2,r2,-128
  81611c:	10800be0 	cmpeqi	r2,r2,47
  816120:	10002b1e 	bne	r2,zero,8161d0 <check_file_name_for_FAT16_compliance+0x174>
  816124:	e0fffd17 	ldw	r3,-12(fp)
  816128:	e0bffb17 	ldw	r2,-20(fp)
  81612c:	1885c83a 	sub	r2,r3,r2
  816130:	10800258 	cmpnei	r2,r2,9
  816134:	10000a1e 	bne	r2,zero,816160 <check_file_name_for_FAT16_compliance+0x104>
  816138:	e0bffd17 	ldw	r2,-12(fp)
  81613c:	1007883a 	mov	r3,r2
  816140:	e0bfff17 	ldw	r2,-4(fp)
  816144:	1885883a 	add	r2,r3,r2
  816148:	10800003 	ldbu	r2,0(r2)
  81614c:	10803fcc 	andi	r2,r2,255
  816150:	1080201c 	xori	r2,r2,128
  816154:	10bfe004 	addi	r2,r2,-128
  816158:	10800b98 	cmpnei	r2,r2,46
  81615c:	10001c1e 	bne	r2,zero,8161d0 <check_file_name_for_FAT16_compliance+0x174>
  816160:	e0fffc17 	ldw	r3,-16(fp)
  816164:	e0bffb17 	ldw	r2,-20(fp)
  816168:	18801b26 	beq	r3,r2,8161d8 <check_file_name_for_FAT16_compliance+0x17c>
  81616c:	e0fffd17 	ldw	r3,-12(fp)
  816170:	e0bffb17 	ldw	r2,-20(fp)
  816174:	1885c83a 	sub	r2,r3,r2
  816178:	10800110 	cmplti	r2,r2,4
  81617c:	1000161e 	bne	r2,zero,8161d8 <check_file_name_for_FAT16_compliance+0x17c>
  816180:	e0bffd17 	ldw	r2,-12(fp)
  816184:	1007883a 	mov	r3,r2
  816188:	e0bfff17 	ldw	r2,-4(fp)
  81618c:	1885883a 	add	r2,r3,r2
  816190:	10800003 	ldbu	r2,0(r2)
  816194:	10803fcc 	andi	r2,r2,255
  816198:	1080201c 	xori	r2,r2,128
  81619c:	10bfe004 	addi	r2,r2,-128
  8161a0:	10801720 	cmpeqi	r2,r2,92
  8161a4:	10000c1e 	bne	r2,zero,8161d8 <check_file_name_for_FAT16_compliance+0x17c>
  8161a8:	e0bffd17 	ldw	r2,-12(fp)
  8161ac:	1007883a 	mov	r3,r2
  8161b0:	e0bfff17 	ldw	r2,-4(fp)
  8161b4:	1885883a 	add	r2,r3,r2
  8161b8:	10800003 	ldbu	r2,0(r2)
  8161bc:	10803fcc 	andi	r2,r2,255
  8161c0:	1080201c 	xori	r2,r2,128
  8161c4:	10bfe004 	addi	r2,r2,-128
  8161c8:	10800be0 	cmpeqi	r2,r2,47
  8161cc:	1000021e 	bne	r2,zero,8161d8 <check_file_name_for_FAT16_compliance+0x17c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
             (file_name[index] != '\\') && (file_name[index] != '/'))
           )
        {
            result = false;
  8161d0:	e03ffa15 	stw	zero,-24(fp)
            break;
  8161d4:	00002a06 	br	816280 <check_file_name_for_FAT16_compliance+0x224>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
  8161d8:	e0bffd17 	ldw	r2,-12(fp)
  8161dc:	1007883a 	mov	r3,r2
  8161e0:	e0bfff17 	ldw	r2,-4(fp)
  8161e4:	1885883a 	add	r2,r3,r2
  8161e8:	10800003 	ldbu	r2,0(r2)
  8161ec:	10803fcc 	andi	r2,r2,255
  8161f0:	1080201c 	xori	r2,r2,128
  8161f4:	10bfe004 	addi	r2,r2,-128
  8161f8:	10801720 	cmpeqi	r2,r2,92
  8161fc:	10000a1e 	bne	r2,zero,816228 <check_file_name_for_FAT16_compliance+0x1cc>
  816200:	e0bffd17 	ldw	r2,-12(fp)
  816204:	1007883a 	mov	r3,r2
  816208:	e0bfff17 	ldw	r2,-4(fp)
  81620c:	1885883a 	add	r2,r3,r2
  816210:	10800003 	ldbu	r2,0(r2)
  816214:	10803fcc 	andi	r2,r2,255
  816218:	1080201c 	xori	r2,r2,128
  81621c:	10bfe004 	addi	r2,r2,-128
  816220:	10800bd8 	cmpnei	r2,r2,47
  816224:	1000041e 	bne	r2,zero,816238 <check_file_name_for_FAT16_compliance+0x1dc>
        {
            last_period = index;
  816228:	e0bffd17 	ldw	r2,-12(fp)
  81622c:	e0bffb15 	stw	r2,-20(fp)
            last_dir_break_position = index;
  816230:	e0bffd17 	ldw	r2,-12(fp)
  816234:	e0bffc15 	stw	r2,-16(fp)
        }
        if (file_name[index] == '.')
  816238:	e0bffd17 	ldw	r2,-12(fp)
  81623c:	1007883a 	mov	r3,r2
  816240:	e0bfff17 	ldw	r2,-4(fp)
  816244:	1885883a 	add	r2,r3,r2
  816248:	10800003 	ldbu	r2,0(r2)
  81624c:	10803fcc 	andi	r2,r2,255
  816250:	1080201c 	xori	r2,r2,128
  816254:	10bfe004 	addi	r2,r2,-128
  816258:	10800b98 	cmpnei	r2,r2,46
  81625c:	1000021e 	bne	r2,zero,816268 <check_file_name_for_FAT16_compliance+0x20c>
        {
            last_period = index;
  816260:	e0bffd17 	ldw	r2,-12(fp)
  816264:	e0bffb15 	stw	r2,-20(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  816268:	e0bffd17 	ldw	r2,-12(fp)
  81626c:	10800044 	addi	r2,r2,1
  816270:	e0bffd15 	stw	r2,-12(fp)
  816274:	e0fffd17 	ldw	r3,-12(fp)
  816278:	e0bffe17 	ldw	r2,-8(fp)
  81627c:	18bf8716 	blt	r3,r2,81609c <check_file_name_for_FAT16_compliance+0x40>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  816280:	e0fffe17 	ldw	r3,-8(fp)
  816284:	e0bfff17 	ldw	r2,-4(fp)
  816288:	1885883a 	add	r2,r3,r2
  81628c:	10bfffc4 	addi	r2,r2,-1
  816290:	10800003 	ldbu	r2,0(r2)
  816294:	10803fcc 	andi	r2,r2,255
  816298:	1080201c 	xori	r2,r2,128
  81629c:	10bfe004 	addi	r2,r2,-128
  8162a0:	10801720 	cmpeqi	r2,r2,92
  8162a4:	10000a1e 	bne	r2,zero,8162d0 <check_file_name_for_FAT16_compliance+0x274>
  8162a8:	e0fffe17 	ldw	r3,-8(fp)
  8162ac:	e0bfff17 	ldw	r2,-4(fp)
  8162b0:	1885883a 	add	r2,r3,r2
  8162b4:	10bfffc4 	addi	r2,r2,-1
  8162b8:	10800003 	ldbu	r2,0(r2)
  8162bc:	10803fcc 	andi	r2,r2,255
  8162c0:	1080201c 	xori	r2,r2,128
  8162c4:	10bfe004 	addi	r2,r2,-128
  8162c8:	10800bd8 	cmpnei	r2,r2,47
  8162cc:	1000011e 	bne	r2,zero,8162d4 <check_file_name_for_FAT16_compliance+0x278>
    {
        result = false;
  8162d0:	e03ffa15 	stw	zero,-24(fp)
    }
    return result;
  8162d4:	e0bffa17 	ldw	r2,-24(fp)
}
  8162d8:	e037883a 	mov	sp,fp
  8162dc:	dfc00117 	ldw	ra,4(sp)
  8162e0:	df000017 	ldw	fp,0(sp)
  8162e4:	dec00204 	addi	sp,sp,8
  8162e8:	f800283a 	ret

008162ec <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  8162ec:	defffb04 	addi	sp,sp,-20
  8162f0:	dfc00415 	stw	ra,16(sp)
  8162f4:	df000315 	stw	fp,12(sp)
  8162f8:	df000304 	addi	fp,sp,12
  8162fc:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
  816300:	e03ffe15 	stw	zero,-8(fp)
    int length = strlen(name);
  816304:	e13fff17 	ldw	r4,-4(fp)
  816308:	08009640 	call	800964 <strlen>
  81630c:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
  816310:	e03ffe15 	stw	zero,-8(fp)
  816314:	00001706 	br	816374 <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  816318:	e0bffe17 	ldw	r2,-8(fp)
  81631c:	1007883a 	mov	r3,r2
  816320:	e0bfff17 	ldw	r2,-4(fp)
  816324:	1885883a 	add	r2,r3,r2
  816328:	10800003 	ldbu	r2,0(r2)
  81632c:	10803fcc 	andi	r2,r2,255
  816330:	1080201c 	xori	r2,r2,128
  816334:	10bfe004 	addi	r2,r2,-128
  816338:	10801720 	cmpeqi	r2,r2,92
  81633c:	1000101e 	bne	r2,zero,816380 <get_dir_divider_location+0x94>
  816340:	e0bffe17 	ldw	r2,-8(fp)
  816344:	1007883a 	mov	r3,r2
  816348:	e0bfff17 	ldw	r2,-4(fp)
  81634c:	1885883a 	add	r2,r3,r2
  816350:	10800003 	ldbu	r2,0(r2)
  816354:	10803fcc 	andi	r2,r2,255
  816358:	1080201c 	xori	r2,r2,128
  81635c:	10bfe004 	addi	r2,r2,-128
  816360:	10800be0 	cmpeqi	r2,r2,47
  816364:	1000061e 	bne	r2,zero,816380 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  816368:	e0bffe17 	ldw	r2,-8(fp)
  81636c:	10800044 	addi	r2,r2,1
  816370:	e0bffe15 	stw	r2,-8(fp)
  816374:	e0fffe17 	ldw	r3,-8(fp)
  816378:	e0bffd17 	ldw	r2,-12(fp)
  81637c:	18bfe616 	blt	r3,r2,816318 <get_dir_divider_location+0x2c>
        {
            break;
        }
    }
    
    if (index == length)
  816380:	e0fffe17 	ldw	r3,-8(fp)
  816384:	e0bffd17 	ldw	r2,-12(fp)
  816388:	1880021e 	bne	r3,r2,816394 <get_dir_divider_location+0xa8>
    {
        index = -1;
  81638c:	00bfffc4 	movi	r2,-1
  816390:	e0bffe15 	stw	r2,-8(fp)
    }
    
    return index;
  816394:	e0bffe17 	ldw	r2,-8(fp)
}
  816398:	e037883a 	mov	sp,fp
  81639c:	dfc00117 	ldw	ra,4(sp)
  8163a0:	df000017 	ldw	fp,0(sp)
  8163a4:	dec00204 	addi	sp,sp,8
  8163a8:	f800283a 	ret

008163ac <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
  8163ac:	defff604 	addi	sp,sp,-40
  8163b0:	df000915 	stw	fp,36(sp)
  8163b4:	df000904 	addi	fp,sp,36
  8163b8:	e13ff915 	stw	r4,-28(fp)
  8163bc:	e17ffa15 	stw	r5,-24(fp)
  8163c0:	e1bffb15 	stw	r6,-20(fp)
    bool match = true;
  8163c4:	00800044 	movi	r2,1
  8163c8:	e0bff815 	stw	r2,-32(fp)
	int index;

    for (index = 0; index < 8; index++)
  8163cc:	e03ff715 	stw	zero,-36(fp)
  8163d0:	00005006 	br	816514 <match_file_record_to_name_ext+0x168>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  8163d4:	e0fff717 	ldw	r3,-36(fp)
  8163d8:	e0bff917 	ldw	r2,-28(fp)
  8163dc:	10c5883a 	add	r2,r2,r3
  8163e0:	10800003 	ldbu	r2,0(r2)
  8163e4:	10803fcc 	andi	r2,r2,255
  8163e8:	10801870 	cmpltui	r2,r2,97
  8163ec:	1000111e 	bne	r2,zero,816434 <match_file_record_to_name_ext+0x88>
  8163f0:	e0fff717 	ldw	r3,-36(fp)
  8163f4:	e0bff917 	ldw	r2,-28(fp)
  8163f8:	10c5883a 	add	r2,r2,r3
  8163fc:	10800003 	ldbu	r2,0(r2)
  816400:	10803fcc 	andi	r2,r2,255
  816404:	10801ee8 	cmpgeui	r2,r2,123
  816408:	10000a1e 	bne	r2,zero,816434 <match_file_record_to_name_ext+0x88>
  81640c:	e0fff717 	ldw	r3,-36(fp)
  816410:	e0bff917 	ldw	r2,-28(fp)
  816414:	10c5883a 	add	r2,r2,r3
  816418:	10800003 	ldbu	r2,0(r2)
  81641c:	10bff804 	addi	r2,r2,-32
  816420:	10803fcc 	andi	r2,r2,255
  816424:	1080201c 	xori	r2,r2,128
  816428:	10bfe004 	addi	r2,r2,-128
  81642c:	e0bfff15 	stw	r2,-4(fp)
  816430:	00000806 	br	816454 <match_file_record_to_name_ext+0xa8>
  816434:	e0fff717 	ldw	r3,-36(fp)
  816438:	e0bff917 	ldw	r2,-28(fp)
  81643c:	10c5883a 	add	r2,r2,r3
  816440:	10800003 	ldbu	r2,0(r2)
  816444:	10803fcc 	andi	r2,r2,255
  816448:	1080201c 	xori	r2,r2,128
  81644c:	10bfe004 	addi	r2,r2,-128
  816450:	e0bfff15 	stw	r2,-4(fp)
  816454:	e0bff717 	ldw	r2,-36(fp)
  816458:	1007883a 	mov	r3,r2
  81645c:	e0bffa17 	ldw	r2,-24(fp)
  816460:	1885883a 	add	r2,r3,r2
  816464:	10800003 	ldbu	r2,0(r2)
  816468:	10803fcc 	andi	r2,r2,255
  81646c:	1080201c 	xori	r2,r2,128
  816470:	10bfe004 	addi	r2,r2,-128
  816474:	10801850 	cmplti	r2,r2,97
  816478:	1000151e 	bne	r2,zero,8164d0 <match_file_record_to_name_ext+0x124>
  81647c:	e0bff717 	ldw	r2,-36(fp)
  816480:	1007883a 	mov	r3,r2
  816484:	e0bffa17 	ldw	r2,-24(fp)
  816488:	1885883a 	add	r2,r3,r2
  81648c:	10800003 	ldbu	r2,0(r2)
  816490:	10803fcc 	andi	r2,r2,255
  816494:	1080201c 	xori	r2,r2,128
  816498:	10bfe004 	addi	r2,r2,-128
  81649c:	10801ec8 	cmpgei	r2,r2,123
  8164a0:	10000b1e 	bne	r2,zero,8164d0 <match_file_record_to_name_ext+0x124>
  8164a4:	e0bff717 	ldw	r2,-36(fp)
  8164a8:	1007883a 	mov	r3,r2
  8164ac:	e0bffa17 	ldw	r2,-24(fp)
  8164b0:	1885883a 	add	r2,r3,r2
  8164b4:	10800003 	ldbu	r2,0(r2)
  8164b8:	10bff804 	addi	r2,r2,-32
  8164bc:	10803fcc 	andi	r2,r2,255
  8164c0:	1080201c 	xori	r2,r2,128
  8164c4:	10bfe004 	addi	r2,r2,-128
  8164c8:	e0bffe15 	stw	r2,-8(fp)
  8164cc:	00000906 	br	8164f4 <match_file_record_to_name_ext+0x148>
  8164d0:	e0bff717 	ldw	r2,-36(fp)
  8164d4:	1007883a 	mov	r3,r2
  8164d8:	e0bffa17 	ldw	r2,-24(fp)
  8164dc:	1885883a 	add	r2,r3,r2
  8164e0:	10800003 	ldbu	r2,0(r2)
  8164e4:	10803fcc 	andi	r2,r2,255
  8164e8:	1080201c 	xori	r2,r2,128
  8164ec:	10bfe004 	addi	r2,r2,-128
  8164f0:	e0bffe15 	stw	r2,-8(fp)
  8164f4:	e0bfff17 	ldw	r2,-4(fp)
  8164f8:	e0fffe17 	ldw	r3,-8(fp)
  8164fc:	10c00226 	beq	r2,r3,816508 <match_file_record_to_name_ext+0x15c>
        {
            match = false;
  816500:	e03ff815 	stw	zero,-32(fp)
			break;
  816504:	00000606 	br	816520 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
  816508:	e0bff717 	ldw	r2,-36(fp)
  81650c:	10800044 	addi	r2,r2,1
  816510:	e0bff715 	stw	r2,-36(fp)
  816514:	e0bff717 	ldw	r2,-36(fp)
  816518:	10800210 	cmplti	r2,r2,8
  81651c:	103fad1e 	bne	r2,zero,8163d4 <match_file_record_to_name_ext+0x28>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
  816520:	e03ff715 	stw	zero,-36(fp)
  816524:	00005406 	br	816678 <match_file_record_to_name_ext+0x2cc>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  816528:	e0fff717 	ldw	r3,-36(fp)
  81652c:	e0bff917 	ldw	r2,-28(fp)
  816530:	1885883a 	add	r2,r3,r2
  816534:	10800204 	addi	r2,r2,8
  816538:	10800003 	ldbu	r2,0(r2)
  81653c:	10803fcc 	andi	r2,r2,255
  816540:	10801870 	cmpltui	r2,r2,97
  816544:	1000131e 	bne	r2,zero,816594 <match_file_record_to_name_ext+0x1e8>
  816548:	e0fff717 	ldw	r3,-36(fp)
  81654c:	e0bff917 	ldw	r2,-28(fp)
  816550:	1885883a 	add	r2,r3,r2
  816554:	10800204 	addi	r2,r2,8
  816558:	10800003 	ldbu	r2,0(r2)
  81655c:	10803fcc 	andi	r2,r2,255
  816560:	10801ee8 	cmpgeui	r2,r2,123
  816564:	10000b1e 	bne	r2,zero,816594 <match_file_record_to_name_ext+0x1e8>
  816568:	e0fff717 	ldw	r3,-36(fp)
  81656c:	e0bff917 	ldw	r2,-28(fp)
  816570:	1885883a 	add	r2,r3,r2
  816574:	10800204 	addi	r2,r2,8
  816578:	10800003 	ldbu	r2,0(r2)
  81657c:	10bff804 	addi	r2,r2,-32
  816580:	10803fcc 	andi	r2,r2,255
  816584:	1080201c 	xori	r2,r2,128
  816588:	10bfe004 	addi	r2,r2,-128
  81658c:	e0bffd15 	stw	r2,-12(fp)
  816590:	00000906 	br	8165b8 <match_file_record_to_name_ext+0x20c>
  816594:	e0fff717 	ldw	r3,-36(fp)
  816598:	e0bff917 	ldw	r2,-28(fp)
  81659c:	1885883a 	add	r2,r3,r2
  8165a0:	10800204 	addi	r2,r2,8
  8165a4:	10800003 	ldbu	r2,0(r2)
  8165a8:	10803fcc 	andi	r2,r2,255
  8165ac:	1080201c 	xori	r2,r2,128
  8165b0:	10bfe004 	addi	r2,r2,-128
  8165b4:	e0bffd15 	stw	r2,-12(fp)
  8165b8:	e0bff717 	ldw	r2,-36(fp)
  8165bc:	1007883a 	mov	r3,r2
  8165c0:	e0bffb17 	ldw	r2,-20(fp)
  8165c4:	1885883a 	add	r2,r3,r2
  8165c8:	10800003 	ldbu	r2,0(r2)
  8165cc:	10803fcc 	andi	r2,r2,255
  8165d0:	1080201c 	xori	r2,r2,128
  8165d4:	10bfe004 	addi	r2,r2,-128
  8165d8:	10801850 	cmplti	r2,r2,97
  8165dc:	1000151e 	bne	r2,zero,816634 <match_file_record_to_name_ext+0x288>
  8165e0:	e0bff717 	ldw	r2,-36(fp)
  8165e4:	1007883a 	mov	r3,r2
  8165e8:	e0bffb17 	ldw	r2,-20(fp)
  8165ec:	1885883a 	add	r2,r3,r2
  8165f0:	10800003 	ldbu	r2,0(r2)
  8165f4:	10803fcc 	andi	r2,r2,255
  8165f8:	1080201c 	xori	r2,r2,128
  8165fc:	10bfe004 	addi	r2,r2,-128
  816600:	10801ec8 	cmpgei	r2,r2,123
  816604:	10000b1e 	bne	r2,zero,816634 <match_file_record_to_name_ext+0x288>
  816608:	e0bff717 	ldw	r2,-36(fp)
  81660c:	1007883a 	mov	r3,r2
  816610:	e0bffb17 	ldw	r2,-20(fp)
  816614:	1885883a 	add	r2,r3,r2
  816618:	10800003 	ldbu	r2,0(r2)
  81661c:	10bff804 	addi	r2,r2,-32
  816620:	10803fcc 	andi	r2,r2,255
  816624:	1080201c 	xori	r2,r2,128
  816628:	10bfe004 	addi	r2,r2,-128
  81662c:	e0bffc15 	stw	r2,-16(fp)
  816630:	00000906 	br	816658 <match_file_record_to_name_ext+0x2ac>
  816634:	e0bff717 	ldw	r2,-36(fp)
  816638:	1007883a 	mov	r3,r2
  81663c:	e0bffb17 	ldw	r2,-20(fp)
  816640:	1885883a 	add	r2,r3,r2
  816644:	10800003 	ldbu	r2,0(r2)
  816648:	10803fcc 	andi	r2,r2,255
  81664c:	1080201c 	xori	r2,r2,128
  816650:	10bfe004 	addi	r2,r2,-128
  816654:	e0bffc15 	stw	r2,-16(fp)
  816658:	e0bffd17 	ldw	r2,-12(fp)
  81665c:	e0fffc17 	ldw	r3,-16(fp)
  816660:	10c00226 	beq	r2,r3,81666c <match_file_record_to_name_ext+0x2c0>
        {
            match = false;
  816664:	e03ff815 	stw	zero,-32(fp)
			break;
  816668:	00000606 	br	816684 <match_file_record_to_name_ext+0x2d8>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
  81666c:	e0bff717 	ldw	r2,-36(fp)
  816670:	10800044 	addi	r2,r2,1
  816674:	e0bff715 	stw	r2,-36(fp)
  816678:	e0bff717 	ldw	r2,-36(fp)
  81667c:	108000d0 	cmplti	r2,r2,3
  816680:	103fa91e 	bne	r2,zero,816528 <match_file_record_to_name_ext+0x17c>
        {
            match = false;
			break;
        }
    }
	return match;
  816684:	e0bff817 	ldw	r2,-32(fp)
}
  816688:	e037883a 	mov	sp,fp
  81668c:	df000017 	ldw	fp,0(sp)
  816690:	dec00104 	addi	sp,sp,4
  816694:	f800283a 	ret

00816698 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  816698:	deffe604 	addi	sp,sp,-104
  81669c:	dfc01915 	stw	ra,100(sp)
  8166a0:	df001815 	stw	fp,96(sp)
  8166a4:	df001804 	addi	fp,sp,96
  8166a8:	e13ffc15 	stw	r4,-16(fp)
  8166ac:	e17ffd15 	stw	r5,-12(fp)
  8166b0:	e1bffe15 	stw	r6,-8(fp)
    bool result = false;
  8166b4:	e03ff715 	stw	zero,-36(fp)
    int home_dir_cluster = 0;
  8166b8:	e03ff615 	stw	zero,-40(fp)
    int location, index;
    int start_location = 0;
  8166bc:	e03ff315 	stw	zero,-52(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
  8166c0:	e13ffc17 	ldw	r4,-16(fp)
  8166c4:	08162ec0 	call	8162ec <get_dir_divider_location>
  8166c8:	e0bff515 	stw	r2,-44(fp)
    while (location > 0)
  8166cc:	00012206 	br	816b58 <get_home_directory_cluster_for_file+0x4c0>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  8166d0:	00800804 	movi	r2,32
  8166d4:	e0bff805 	stb	r2,-32(fp)
  8166d8:	00800804 	movi	r2,32
  8166dc:	e0bff845 	stb	r2,-31(fp)
  8166e0:	00800804 	movi	r2,32
  8166e4:	e0bff885 	stb	r2,-30(fp)
  8166e8:	00800804 	movi	r2,32
  8166ec:	e0bff8c5 	stb	r2,-29(fp)
  8166f0:	00800804 	movi	r2,32
  8166f4:	e0bff905 	stb	r2,-28(fp)
  8166f8:	00800804 	movi	r2,32
  8166fc:	e0bff945 	stb	r2,-27(fp)
  816700:	00800804 	movi	r2,32
  816704:	e0bff985 	stb	r2,-26(fp)
  816708:	00800804 	movi	r2,32
  81670c:	e0bff9c5 	stb	r2,-25(fp)
        char extension[3] = { ' ', ' ', ' ' };
  816710:	00800804 	movi	r2,32
  816714:	e0bffa05 	stb	r2,-24(fp)
  816718:	00800804 	movi	r2,32
  81671c:	e0bffa45 	stb	r2,-23(fp)
  816720:	00800804 	movi	r2,32
  816724:	e0bffa85 	stb	r2,-22(fp)
        int ext_index = -1;
  816728:	00bfffc4 	movi	r2,-1
  81672c:	e0bff215 	stw	r2,-56(fp)
        int new_cluster = home_dir_cluster;
  816730:	e0bff617 	ldw	r2,-40(fp)
  816734:	e0bff115 	stw	r2,-60(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
  816738:	e03ff415 	stw	zero,-48(fp)
  81673c:	00002e06 	br	8167f8 <get_home_directory_cluster_for_file+0x160>
        {
            if (file_name[index+start_location] == '.')
  816740:	e0fff417 	ldw	r3,-48(fp)
  816744:	e0bff317 	ldw	r2,-52(fp)
  816748:	1885883a 	add	r2,r3,r2
  81674c:	1007883a 	mov	r3,r2
  816750:	e0bffc17 	ldw	r2,-16(fp)
  816754:	1885883a 	add	r2,r3,r2
  816758:	10800003 	ldbu	r2,0(r2)
  81675c:	10803fcc 	andi	r2,r2,255
  816760:	1080201c 	xori	r2,r2,128
  816764:	10bfe004 	addi	r2,r2,-128
  816768:	10800b98 	cmpnei	r2,r2,46
  81676c:	1000031e 	bne	r2,zero,81677c <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
  816770:	e0bff417 	ldw	r2,-48(fp)
  816774:	e0bff215 	stw	r2,-56(fp)
  816778:	00001c06 	br	8167ec <get_home_directory_cluster_for_file+0x154>
            }
            else if (ext_index < 0)
  81677c:	e0bff217 	ldw	r2,-56(fp)
  816780:	1004403a 	cmpge	r2,r2,zero
  816784:	10000c1e 	bne	r2,zero,8167b8 <get_home_directory_cluster_for_file+0x120>
            {
                name[index] = file_name[index+start_location];
  816788:	e13ff417 	ldw	r4,-48(fp)
  81678c:	e0fff417 	ldw	r3,-48(fp)
  816790:	e0bff317 	ldw	r2,-52(fp)
  816794:	1885883a 	add	r2,r3,r2
  816798:	1007883a 	mov	r3,r2
  81679c:	e0bffc17 	ldw	r2,-16(fp)
  8167a0:	1885883a 	add	r2,r3,r2
  8167a4:	10c00003 	ldbu	r3,0(r2)
  8167a8:	e0bff804 	addi	r2,fp,-32
  8167ac:	1105883a 	add	r2,r2,r4
  8167b0:	10c00005 	stb	r3,0(r2)
  8167b4:	00000d06 	br	8167ec <get_home_directory_cluster_for_file+0x154>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
  8167b8:	e0fff417 	ldw	r3,-48(fp)
  8167bc:	e0bff217 	ldw	r2,-56(fp)
  8167c0:	1889c83a 	sub	r4,r3,r2
  8167c4:	e0fff417 	ldw	r3,-48(fp)
  8167c8:	e0bff317 	ldw	r2,-52(fp)
  8167cc:	1885883a 	add	r2,r3,r2
  8167d0:	1007883a 	mov	r3,r2
  8167d4:	e0bffc17 	ldw	r2,-16(fp)
  8167d8:	1885883a 	add	r2,r3,r2
  8167dc:	10c00003 	ldbu	r3,0(r2)
  8167e0:	e0bffa04 	addi	r2,fp,-24
  8167e4:	1105883a 	add	r2,r2,r4
  8167e8:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
  8167ec:	e0bff417 	ldw	r2,-48(fp)
  8167f0:	10800044 	addi	r2,r2,1
  8167f4:	e0bff415 	stw	r2,-48(fp)
  8167f8:	e0fff417 	ldw	r3,-48(fp)
  8167fc:	e0bff517 	ldw	r2,-44(fp)
  816800:	18bfcf16 	blt	r3,r2,816740 <get_home_directory_cluster_for_file+0xa8>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
  816804:	e0bff617 	ldw	r2,-40(fp)
  816808:	1004c03a 	cmpne	r2,r2,zero
  81680c:	1000551e 	bne	r2,zero,816964 <get_home_directory_cluster_for_file+0x2cc>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  816810:	008020f4 	movhi	r2,131
  816814:	10a7b204 	addi	r2,r2,-24888
  816818:	1080050b 	ldhu	r2,20(r2)
  81681c:	10bfffcc 	andi	r2,r2,65535
  816820:	1008917a 	slli	r4,r2,5
  816824:	008020f4 	movhi	r2,131
  816828:	10a7b204 	addi	r2,r2,-24888
  81682c:	1080030b 	ldhu	r2,12(r2)
  816830:	117fffcc 	andi	r5,r2,65535
  816834:	0809a4c0 	call	809a4c <__divsi3>
  816838:	e0bff015 	stw	r2,-64(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  81683c:	e03fef15 	stw	zero,-68(fp)
  816840:	00003806 	br	816924 <get_home_directory_cluster_for_file+0x28c>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
  816844:	008020f4 	movhi	r2,131
  816848:	10a7b204 	addi	r2,r2,-24888
  81684c:	10c01317 	ldw	r3,76(r2)
  816850:	e0bfef17 	ldw	r2,-68(fp)
  816854:	1885883a 	add	r2,r3,r2
  816858:	1009883a 	mov	r4,r2
  81685c:	d1673817 	ldw	r5,-25376(gp)
  816860:	0814ec80 	call	814ec8 <Read_Sector_Data>
  816864:	1005003a 	cmpeq	r2,r2,zero
  816868:	1000311e 	bne	r2,zero,816930 <get_home_directory_cluster_for_file+0x298>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  81686c:	e03fee15 	stw	zero,-72(fp)
  816870:	00002306 	br	816900 <get_home_directory_cluster_for_file+0x268>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  816874:	e0bfee17 	ldw	r2,-72(fp)
  816878:	1008917a 	slli	r4,r2,5
  81687c:	e1ffef17 	ldw	r7,-68(fp)
  816880:	e17ffe17 	ldw	r5,-8(fp)
  816884:	000d883a 	mov	r6,zero
  816888:	08153100 	call	815310 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  81688c:	e0bffe17 	ldw	r2,-8(fp)
  816890:	10800003 	ldbu	r2,0(r2)
  816894:	10803fcc 	andi	r2,r2,255
  816898:	10803960 	cmpeqi	r2,r2,229
  81689c:	1000151e 	bne	r2,zero,8168f4 <get_home_directory_cluster_for_file+0x25c>
  8168a0:	e0bffe17 	ldw	r2,-8(fp)
  8168a4:	10800003 	ldbu	r2,0(r2)
  8168a8:	10803fcc 	andi	r2,r2,255
  8168ac:	1005003a 	cmpeq	r2,r2,zero
  8168b0:	1000101e 	bne	r2,zero,8168f4 <get_home_directory_cluster_for_file+0x25c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
  8168b4:	e17ff804 	addi	r5,fp,-32
  8168b8:	e1bffa04 	addi	r6,fp,-24
  8168bc:	e13ffe17 	ldw	r4,-8(fp)
  8168c0:	08163ac0 	call	8163ac <match_file_record_to_name_ext>
  8168c4:	e0bfed15 	stw	r2,-76(fp)
                            if (match)
  8168c8:	e0bfed17 	ldw	r2,-76(fp)
  8168cc:	1005003a 	cmpeq	r2,r2,zero
  8168d0:	1000081e 	bne	r2,zero,8168f4 <get_home_directory_cluster_for_file+0x25c>
                            {
                                new_cluster = file_record->start_cluster_index;
  8168d4:	e0bffe17 	ldw	r2,-8(fp)
  8168d8:	1080058b 	ldhu	r2,22(r2)
  8168dc:	10bfffcc 	andi	r2,r2,65535
  8168e0:	e0bff115 	stw	r2,-60(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  8168e4:	e0fffe17 	ldw	r3,-8(fp)
  8168e8:	00800044 	movi	r2,1
  8168ec:	18800a15 	stw	r2,40(r3)
                                break;
  8168f0:	00000606 	br	81690c <get_home_directory_cluster_for_file+0x274>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  8168f4:	e0bfee17 	ldw	r2,-72(fp)
  8168f8:	10800044 	addi	r2,r2,1
  8168fc:	e0bfee15 	stw	r2,-72(fp)
  816900:	e0bfee17 	ldw	r2,-72(fp)
  816904:	10800410 	cmplti	r2,r2,16
  816908:	103fda1e 	bne	r2,zero,816874 <get_home_directory_cluster_for_file+0x1dc>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
  81690c:	e0fff117 	ldw	r3,-60(fp)
  816910:	e0bff617 	ldw	r2,-40(fp)
  816914:	1880061e 	bne	r3,r2,816930 <get_home_directory_cluster_for_file+0x298>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  816918:	e0bfef17 	ldw	r2,-68(fp)
  81691c:	10800044 	addi	r2,r2,1
  816920:	e0bfef15 	stw	r2,-68(fp)
  816924:	e0ffef17 	ldw	r3,-68(fp)
  816928:	e0bff017 	ldw	r2,-64(fp)
  81692c:	18bfc516 	blt	r3,r2,816844 <get_home_directory_cluster_for_file+0x1ac>
                if (new_cluster != home_dir_cluster)
                {
                    break;
                }
            }
            if (new_cluster != home_dir_cluster)
  816930:	e0fff117 	ldw	r3,-60(fp)
  816934:	e0bff617 	ldw	r2,-40(fp)
  816938:	18800826 	beq	r3,r2,81695c <get_home_directory_cluster_for_file+0x2c4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
  81693c:	e0bff117 	ldw	r2,-60(fp)
  816940:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
  816944:	e0fff317 	ldw	r3,-52(fp)
  816948:	e0bff517 	ldw	r2,-44(fp)
  81694c:	1885883a 	add	r2,r3,r2
  816950:	10800044 	addi	r2,r2,1
  816954:	e0bff315 	stw	r2,-52(fp)
  816958:	00007406 	br	816b2c <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
  81695c:	e03fff15 	stw	zero,-4(fp)
  816960:	00008c06 	br	816b94 <get_home_directory_cluster_for_file+0x4fc>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
  816964:	e0bff617 	ldw	r2,-40(fp)
  816968:	e0bfec15 	stw	r2,-80(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  81696c:	e0bfec17 	ldw	r2,-80(fp)
  816970:	113fff84 	addi	r4,r2,-2
  816974:	008020f4 	movhi	r2,131
  816978:	10a7b204 	addi	r2,r2,-24888
  81697c:	10800383 	ldbu	r2,14(r2)
  816980:	11403fcc 	andi	r5,r2,255
  816984:	0809b1c0 	call	809b1c <__mulsi3>
  816988:	1007883a 	mov	r3,r2
  81698c:	008020f4 	movhi	r2,131
  816990:	10a7b204 	addi	r2,r2,-24888
  816994:	10801417 	ldw	r2,80(r2)
  816998:	1885883a 	add	r2,r3,r2
  81699c:	e0bfeb15 	stw	r2,-84(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8169a0:	e03fea15 	stw	zero,-88(fp)
  8169a4:	00003206 	br	816a70 <get_home_directory_cluster_for_file+0x3d8>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  8169a8:	e0ffea17 	ldw	r3,-88(fp)
  8169ac:	e0bfeb17 	ldw	r2,-84(fp)
  8169b0:	1889883a 	add	r4,r3,r2
  8169b4:	d1673817 	ldw	r5,-25376(gp)
  8169b8:	0814ec80 	call	814ec8 <Read_Sector_Data>
  8169bc:	1005003a 	cmpeq	r2,r2,zero
  8169c0:	1000311e 	bne	r2,zero,816a88 <get_home_directory_cluster_for_file+0x3f0>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
  8169c4:	e03fe915 	stw	zero,-92(fp)
  8169c8:	00002006 	br	816a4c <get_home_directory_cluster_for_file+0x3b4>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  8169cc:	e0bfe917 	ldw	r2,-92(fp)
  8169d0:	1008917a 	slli	r4,r2,5
  8169d4:	e1bfec17 	ldw	r6,-80(fp)
  8169d8:	e1ffea17 	ldw	r7,-88(fp)
  8169dc:	e17ffe17 	ldw	r5,-8(fp)
  8169e0:	08153100 	call	815310 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  8169e4:	e0bffe17 	ldw	r2,-8(fp)
  8169e8:	10800003 	ldbu	r2,0(r2)
  8169ec:	10803fcc 	andi	r2,r2,255
  8169f0:	10803960 	cmpeqi	r2,r2,229
  8169f4:	1000121e 	bne	r2,zero,816a40 <get_home_directory_cluster_for_file+0x3a8>
  8169f8:	e0bffe17 	ldw	r2,-8(fp)
  8169fc:	10800003 	ldbu	r2,0(r2)
  816a00:	10803fcc 	andi	r2,r2,255
  816a04:	1005003a 	cmpeq	r2,r2,zero
  816a08:	10000d1e 	bne	r2,zero,816a40 <get_home_directory_cluster_for_file+0x3a8>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
  816a0c:	e17ff804 	addi	r5,fp,-32
  816a10:	e1bffa04 	addi	r6,fp,-24
  816a14:	e13ffe17 	ldw	r4,-8(fp)
  816a18:	08163ac0 	call	8163ac <match_file_record_to_name_ext>
  816a1c:	e0bfe815 	stw	r2,-96(fp)
                                if (match)
  816a20:	e0bfe817 	ldw	r2,-96(fp)
  816a24:	1005003a 	cmpeq	r2,r2,zero
  816a28:	1000051e 	bne	r2,zero,816a40 <get_home_directory_cluster_for_file+0x3a8>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
  816a2c:	e0bffe17 	ldw	r2,-8(fp)
  816a30:	1080058b 	ldhu	r2,22(r2)
  816a34:	10bfffcc 	andi	r2,r2,65535
  816a38:	e0bff115 	stw	r2,-60(fp)
                                    break;
  816a3c:	00000606 	br	816a58 <get_home_directory_cluster_for_file+0x3c0>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
  816a40:	e0bfe917 	ldw	r2,-92(fp)
  816a44:	10800044 	addi	r2,r2,1
  816a48:	e0bfe915 	stw	r2,-92(fp)
  816a4c:	e0bfe917 	ldw	r2,-92(fp)
  816a50:	10800410 	cmplti	r2,r2,16
  816a54:	103fdd1e 	bne	r2,zero,8169cc <get_home_directory_cluster_for_file+0x334>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
  816a58:	e0fff117 	ldw	r3,-60(fp)
  816a5c:	e0bff617 	ldw	r2,-40(fp)
  816a60:	1880091e 	bne	r3,r2,816a88 <get_home_directory_cluster_for_file+0x3f0>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  816a64:	e0bfea17 	ldw	r2,-88(fp)
  816a68:	10800044 	addi	r2,r2,1
  816a6c:	e0bfea15 	stw	r2,-88(fp)
  816a70:	008020f4 	movhi	r2,131
  816a74:	10a7b204 	addi	r2,r2,-24888
  816a78:	10800383 	ldbu	r2,14(r2)
  816a7c:	10c03fcc 	andi	r3,r2,255
  816a80:	e0bfea17 	ldw	r2,-88(fp)
  816a84:	10ffc816 	blt	r2,r3,8169a8 <get_home_directory_cluster_for_file+0x310>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
  816a88:	e0fff117 	ldw	r3,-60(fp)
  816a8c:	e0bff617 	ldw	r2,-40(fp)
  816a90:	1880131e 	bne	r3,r2,816ae0 <get_home_directory_cluster_for_file+0x448>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
  816a94:	e13ff117 	ldw	r4,-60(fp)
  816a98:	e17ffb04 	addi	r5,fp,-20
  816a9c:	0814fc40 	call	814fc4 <get_cluster_flag>
  816aa0:	1005003a 	cmpeq	r2,r2,zero
  816aa4:	10000c1e 	bne	r2,zero,816ad8 <get_home_directory_cluster_for_file+0x440>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  816aa8:	e0bffb0b 	ldhu	r2,-20(fp)
  816aac:	10bfffcc 	andi	r2,r2,65535
  816ab0:	10fffe0c 	andi	r3,r2,65528
  816ab4:	00bffe14 	movui	r2,65528
  816ab8:	1880021e 	bne	r3,r2,816ac4 <get_home_directory_cluster_for_file+0x42c>
						{
							return false;
  816abc:	e03fff15 	stw	zero,-4(fp)
  816ac0:	00003406 	br	816b94 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
  816ac4:	e0bffb0b 	ldhu	r2,-20(fp)
  816ac8:	10bfffcc 	andi	r2,r2,65535
  816acc:	10bffe0c 	andi	r2,r2,65528
  816ad0:	e0bff115 	stw	r2,-60(fp)
  816ad4:	00000206 	br	816ae0 <get_home_directory_cluster_for_file+0x448>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
  816ad8:	e03fff15 	stw	zero,-4(fp)
  816adc:	00002d06 	br	816b94 <get_home_directory_cluster_for_file+0x4fc>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
  816ae0:	e0ffec17 	ldw	r3,-80(fp)
  816ae4:	00bffdd4 	movui	r2,65527
  816ae8:	10c00316 	blt	r2,r3,816af8 <get_home_directory_cluster_for_file+0x460>
  816aec:	e0fff117 	ldw	r3,-60(fp)
  816af0:	e0bff617 	ldw	r2,-40(fp)
  816af4:	18bf9d26 	beq	r3,r2,81696c <get_home_directory_cluster_for_file+0x2d4>
            if (new_cluster != home_dir_cluster)
  816af8:	e0fff117 	ldw	r3,-60(fp)
  816afc:	e0bff617 	ldw	r2,-40(fp)
  816b00:	18800826 	beq	r3,r2,816b24 <get_home_directory_cluster_for_file+0x48c>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
  816b04:	e0bff117 	ldw	r2,-60(fp)
  816b08:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
  816b0c:	e0fff317 	ldw	r3,-52(fp)
  816b10:	e0bff517 	ldw	r2,-44(fp)
  816b14:	1885883a 	add	r2,r3,r2
  816b18:	10800044 	addi	r2,r2,1
  816b1c:	e0bff315 	stw	r2,-52(fp)
  816b20:	00000206 	br	816b2c <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
  816b24:	e03fff15 	stw	zero,-4(fp)
  816b28:	00001a06 	br	816b94 <get_home_directory_cluster_for_file+0x4fc>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
  816b2c:	e0bff317 	ldw	r2,-52(fp)
  816b30:	1007883a 	mov	r3,r2
  816b34:	e0bffc17 	ldw	r2,-16(fp)
  816b38:	1889883a 	add	r4,r3,r2
  816b3c:	08162ec0 	call	8162ec <get_dir_divider_location>
  816b40:	e0bff515 	stw	r2,-44(fp)
        if (location < 0)
  816b44:	e0bff517 	ldw	r2,-44(fp)
  816b48:	1004403a 	cmpge	r2,r2,zero
  816b4c:	1000021e 	bne	r2,zero,816b58 <get_home_directory_cluster_for_file+0x4c0>
        {
            // Directory has been located.
            result = true;
  816b50:	00800044 	movi	r2,1
  816b54:	e0bff715 	stw	r2,-36(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  816b58:	e0bff517 	ldw	r2,-44(fp)
  816b5c:	10800048 	cmpgei	r2,r2,1
  816b60:	103edb1e 	bne	r2,zero,8166d0 <get_home_directory_cluster_for_file+0x38>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
  816b64:	e0fffd17 	ldw	r3,-12(fp)
  816b68:	e0bff617 	ldw	r2,-40(fp)
  816b6c:	18800015 	stw	r2,0(r3)
    if (home_dir_cluster == 0)
  816b70:	e0bff617 	ldw	r2,-40(fp)
  816b74:	1004c03a 	cmpne	r2,r2,zero
  816b78:	1000041e 	bne	r2,zero,816b8c <get_home_directory_cluster_for_file+0x4f4>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
  816b7c:	e0bffe17 	ldw	r2,-8(fp)
  816b80:	10000a15 	stw	zero,40(r2)
		result = true;
  816b84:	00800044 	movi	r2,1
  816b88:	e0bff715 	stw	r2,-36(fp)
    }
    return result;
  816b8c:	e0bff717 	ldw	r2,-36(fp)
  816b90:	e0bfff15 	stw	r2,-4(fp)
  816b94:	e0bfff17 	ldw	r2,-4(fp)
}
  816b98:	e037883a 	mov	sp,fp
  816b9c:	dfc00117 	ldw	ra,4(sp)
  816ba0:	df000017 	ldw	fp,0(sp)
  816ba4:	dec00204 	addi	sp,sp,8
  816ba8:	f800283a 	ret

00816bac <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  816bac:	deffe704 	addi	sp,sp,-100
  816bb0:	dfc01815 	stw	ra,96(sp)
  816bb4:	df001715 	stw	fp,92(sp)
  816bb8:	df001704 	addi	fp,sp,92
  816bbc:	e13ffc15 	stw	r4,-16(fp)
  816bc0:	e17ffd15 	stw	r5,-12(fp)
  816bc4:	e1bffe15 	stw	r6,-8(fp)
    int location = get_dir_divider_location( file_name );
  816bc8:	e13ffd17 	ldw	r4,-12(fp)
  816bcc:	08162ec0 	call	8162ec <get_dir_divider_location>
  816bd0:	e0bff715 	stw	r2,-36(fp)
    int last_dir_separator = 0;
  816bd4:	e03ff615 	stw	zero,-40(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  816bd8:	00800804 	movi	r2,32
  816bdc:	e0bff805 	stb	r2,-32(fp)
  816be0:	00800804 	movi	r2,32
  816be4:	e0bff845 	stb	r2,-31(fp)
  816be8:	00800804 	movi	r2,32
  816bec:	e0bff885 	stb	r2,-30(fp)
  816bf0:	00800804 	movi	r2,32
  816bf4:	e0bff8c5 	stb	r2,-29(fp)
  816bf8:	00800804 	movi	r2,32
  816bfc:	e0bff905 	stb	r2,-28(fp)
  816c00:	00800804 	movi	r2,32
  816c04:	e0bff945 	stb	r2,-27(fp)
  816c08:	00800804 	movi	r2,32
  816c0c:	e0bff985 	stb	r2,-26(fp)
  816c10:	00800804 	movi	r2,32
  816c14:	e0bff9c5 	stb	r2,-25(fp)
    char extension[3] = { ' ', ' ', ' ' };
  816c18:	00800804 	movi	r2,32
  816c1c:	e0bffa05 	stb	r2,-24(fp)
  816c20:	00800804 	movi	r2,32
  816c24:	e0bffa45 	stb	r2,-23(fp)
  816c28:	00800804 	movi	r2,32
  816c2c:	e0bffa85 	stb	r2,-22(fp)
    int ext_index = -1;
  816c30:	00bfffc4 	movi	r2,-1
  816c34:	e0bff515 	stw	r2,-44(fp)
    int cluster = directory_start_cluster;
  816c38:	e0bffc17 	ldw	r2,-16(fp)
  816c3c:	e0bff415 	stw	r2,-48(fp)
    int index;
	int length = strlen(file_name);
  816c40:	e13ffd17 	ldw	r4,-12(fp)
  816c44:	08009640 	call	800964 <strlen>
  816c48:	e0bff215 	stw	r2,-56(fp)
    bool result = false;
  816c4c:	e03ff115 	stw	zero,-60(fp)
    
    // Skip through all directory separators.
    while (location > 0)
  816c50:	00000b06 	br	816c80 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
  816c54:	e0fff617 	ldw	r3,-40(fp)
  816c58:	e0bff717 	ldw	r2,-36(fp)
  816c5c:	1885883a 	add	r2,r3,r2
  816c60:	10800044 	addi	r2,r2,1
  816c64:	e0bff615 	stw	r2,-40(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
  816c68:	e0bff617 	ldw	r2,-40(fp)
  816c6c:	1007883a 	mov	r3,r2
  816c70:	e0bffd17 	ldw	r2,-12(fp)
  816c74:	1889883a 	add	r4,r3,r2
  816c78:	08162ec0 	call	8162ec <get_dir_divider_location>
  816c7c:	e0bff715 	stw	r2,-36(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
  816c80:	e0bff717 	ldw	r2,-36(fp)
  816c84:	10800048 	cmpgei	r2,r2,1
  816c88:	103ff21e 	bne	r2,zero,816c54 <find_file_in_directory+0xa8>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  816c8c:	e0bff617 	ldw	r2,-40(fp)
  816c90:	e0bff315 	stw	r2,-52(fp)
  816c94:	00002b06 	br	816d44 <find_file_in_directory+0x198>
    {
        if (file_name[index] == '.')
  816c98:	e0bff317 	ldw	r2,-52(fp)
  816c9c:	1007883a 	mov	r3,r2
  816ca0:	e0bffd17 	ldw	r2,-12(fp)
  816ca4:	1885883a 	add	r2,r3,r2
  816ca8:	10800003 	ldbu	r2,0(r2)
  816cac:	10803fcc 	andi	r2,r2,255
  816cb0:	1080201c 	xori	r2,r2,128
  816cb4:	10bfe004 	addi	r2,r2,-128
  816cb8:	10800b98 	cmpnei	r2,r2,46
  816cbc:	1000031e 	bne	r2,zero,816ccc <find_file_in_directory+0x120>
        {
            ext_index = index;
  816cc0:	e0bff317 	ldw	r2,-52(fp)
  816cc4:	e0bff515 	stw	r2,-44(fp)
  816cc8:	00001b06 	br	816d38 <find_file_in_directory+0x18c>
        }
        else if (ext_index < 0)
  816ccc:	e0bff517 	ldw	r2,-44(fp)
  816cd0:	1004403a 	cmpge	r2,r2,zero
  816cd4:	10000c1e 	bne	r2,zero,816d08 <find_file_in_directory+0x15c>
        {
            name[index-last_dir_separator] = file_name[index];
  816cd8:	e0fff317 	ldw	r3,-52(fp)
  816cdc:	e0bff617 	ldw	r2,-40(fp)
  816ce0:	1889c83a 	sub	r4,r3,r2
  816ce4:	e0bff317 	ldw	r2,-52(fp)
  816ce8:	1007883a 	mov	r3,r2
  816cec:	e0bffd17 	ldw	r2,-12(fp)
  816cf0:	1885883a 	add	r2,r3,r2
  816cf4:	10c00003 	ldbu	r3,0(r2)
  816cf8:	e0bff804 	addi	r2,fp,-32
  816cfc:	1105883a 	add	r2,r2,r4
  816d00:	10c00005 	stb	r3,0(r2)
  816d04:	00000c06 	br	816d38 <find_file_in_directory+0x18c>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
  816d08:	e0fff317 	ldw	r3,-52(fp)
  816d0c:	e0bff517 	ldw	r2,-44(fp)
  816d10:	1885c83a 	sub	r2,r3,r2
  816d14:	113fffc4 	addi	r4,r2,-1
  816d18:	e0bff317 	ldw	r2,-52(fp)
  816d1c:	1007883a 	mov	r3,r2
  816d20:	e0bffd17 	ldw	r2,-12(fp)
  816d24:	1885883a 	add	r2,r3,r2
  816d28:	10c00003 	ldbu	r3,0(r2)
  816d2c:	e0bffa04 	addi	r2,fp,-24
  816d30:	1105883a 	add	r2,r2,r4
  816d34:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  816d38:	e0bff317 	ldw	r2,-52(fp)
  816d3c:	10800044 	addi	r2,r2,1
  816d40:	e0bff315 	stw	r2,-52(fp)
  816d44:	e0fff317 	ldw	r3,-52(fp)
  816d48:	e0bff217 	ldw	r2,-56(fp)
  816d4c:	18bfd216 	blt	r3,r2,816c98 <find_file_in_directory+0xec>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
  816d50:	e0bffc17 	ldw	r2,-16(fp)
  816d54:	1004c03a 	cmpne	r2,r2,zero
  816d58:	1000441e 	bne	r2,zero,816e6c <find_file_in_directory+0x2c0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  816d5c:	008020f4 	movhi	r2,131
  816d60:	10a7b204 	addi	r2,r2,-24888
  816d64:	1080050b 	ldhu	r2,20(r2)
  816d68:	10bfffcc 	andi	r2,r2,65535
  816d6c:	1008917a 	slli	r4,r2,5
  816d70:	008020f4 	movhi	r2,131
  816d74:	10a7b204 	addi	r2,r2,-24888
  816d78:	1080030b 	ldhu	r2,12(r2)
  816d7c:	117fffcc 	andi	r5,r2,65535
  816d80:	0809a4c0 	call	809a4c <__divsi3>
  816d84:	e0bff015 	stw	r2,-64(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  816d88:	e03fef15 	stw	zero,-68(fp)
  816d8c:	00003306 	br	816e5c <find_file_in_directory+0x2b0>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  816d90:	008020f4 	movhi	r2,131
  816d94:	10a7b204 	addi	r2,r2,-24888
  816d98:	10c01317 	ldw	r3,76(r2)
  816d9c:	e0bfef17 	ldw	r2,-68(fp)
  816da0:	1885883a 	add	r2,r3,r2
  816da4:	1009883a 	mov	r4,r2
  816da8:	d1673817 	ldw	r5,-25376(gp)
  816dac:	0814ec80 	call	814ec8 <Read_Sector_Data>
  816db0:	1005003a 	cmpeq	r2,r2,zero
  816db4:	10008e1e 	bne	r2,zero,816ff0 <find_file_in_directory+0x444>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  816db8:	e03fee15 	stw	zero,-72(fp)
  816dbc:	00001e06 	br	816e38 <find_file_in_directory+0x28c>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  816dc0:	e0bfee17 	ldw	r2,-72(fp)
  816dc4:	1008917a 	slli	r4,r2,5
  816dc8:	e1ffef17 	ldw	r7,-68(fp)
  816dcc:	e17ffe17 	ldw	r5,-8(fp)
  816dd0:	000d883a 	mov	r6,zero
  816dd4:	08153100 	call	815310 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  816dd8:	e0bffe17 	ldw	r2,-8(fp)
  816ddc:	10800003 	ldbu	r2,0(r2)
  816de0:	10803fcc 	andi	r2,r2,255
  816de4:	10803960 	cmpeqi	r2,r2,229
  816de8:	1000101e 	bne	r2,zero,816e2c <find_file_in_directory+0x280>
  816dec:	e0bffe17 	ldw	r2,-8(fp)
  816df0:	10800003 	ldbu	r2,0(r2)
  816df4:	10803fcc 	andi	r2,r2,255
  816df8:	1005003a 	cmpeq	r2,r2,zero
  816dfc:	10000b1e 	bne	r2,zero,816e2c <find_file_in_directory+0x280>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
  816e00:	e17ff804 	addi	r5,fp,-32
  816e04:	e1bffa04 	addi	r6,fp,-24
  816e08:	e13ffe17 	ldw	r4,-8(fp)
  816e0c:	08163ac0 	call	8163ac <match_file_record_to_name_ext>
  816e10:	e0bfed15 	stw	r2,-76(fp)

                        if (match)
  816e14:	e0bfed17 	ldw	r2,-76(fp)
  816e18:	1005003a 	cmpeq	r2,r2,zero
  816e1c:	1000031e 	bne	r2,zero,816e2c <find_file_in_directory+0x280>
                        {
                            result = true;
  816e20:	00800044 	movi	r2,1
  816e24:	e0bff115 	stw	r2,-60(fp)
                            break;
  816e28:	00000606 	br	816e44 <find_file_in_directory+0x298>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  816e2c:	e0bfee17 	ldw	r2,-72(fp)
  816e30:	10800044 	addi	r2,r2,1
  816e34:	e0bfee15 	stw	r2,-72(fp)
  816e38:	e0bfee17 	ldw	r2,-72(fp)
  816e3c:	10800410 	cmplti	r2,r2,16
  816e40:	103fdf1e 	bne	r2,zero,816dc0 <find_file_in_directory+0x214>
            }
            else
            {
                break;
            }
            if (result)
  816e44:	e0bff117 	ldw	r2,-60(fp)
  816e48:	1004c03a 	cmpne	r2,r2,zero
  816e4c:	1000681e 	bne	r2,zero,816ff0 <find_file_in_directory+0x444>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  816e50:	e0bfef17 	ldw	r2,-68(fp)
  816e54:	10800044 	addi	r2,r2,1
  816e58:	e0bfef15 	stw	r2,-68(fp)
  816e5c:	e0ffef17 	ldw	r3,-68(fp)
  816e60:	e0bff017 	ldw	r2,-64(fp)
  816e64:	18bfca16 	blt	r3,r2,816d90 <find_file_in_directory+0x1e4>
  816e68:	00006106 	br	816ff0 <find_file_in_directory+0x444>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  816e6c:	e0bff417 	ldw	r2,-48(fp)
  816e70:	113fff84 	addi	r4,r2,-2
  816e74:	008020f4 	movhi	r2,131
  816e78:	10a7b204 	addi	r2,r2,-24888
  816e7c:	10800383 	ldbu	r2,14(r2)
  816e80:	11403fcc 	andi	r5,r2,255
  816e84:	0809b1c0 	call	809b1c <__mulsi3>
  816e88:	1007883a 	mov	r3,r2
  816e8c:	008020f4 	movhi	r2,131
  816e90:	10a7b204 	addi	r2,r2,-24888
  816e94:	10801417 	ldw	r2,80(r2)
  816e98:	1885883a 	add	r2,r3,r2
  816e9c:	e0bfec15 	stw	r2,-80(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  816ea0:	e03feb15 	stw	zero,-84(fp)
  816ea4:	00003006 	br	816f68 <find_file_in_directory+0x3bc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  816ea8:	e0ffeb17 	ldw	r3,-84(fp)
  816eac:	e0bfec17 	ldw	r2,-80(fp)
  816eb0:	1889883a 	add	r4,r3,r2
  816eb4:	d1673817 	ldw	r5,-25376(gp)
  816eb8:	0814ec80 	call	814ec8 <Read_Sector_Data>
  816ebc:	1005003a 	cmpeq	r2,r2,zero
  816ec0:	10002f1e 	bne	r2,zero,816f80 <find_file_in_directory+0x3d4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  816ec4:	e03fea15 	stw	zero,-88(fp)
  816ec8:	00001e06 	br	816f44 <find_file_in_directory+0x398>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  816ecc:	e0bfea17 	ldw	r2,-88(fp)
  816ed0:	1008917a 	slli	r4,r2,5
  816ed4:	e1bff417 	ldw	r6,-48(fp)
  816ed8:	e1ffeb17 	ldw	r7,-84(fp)
  816edc:	e17ffe17 	ldw	r5,-8(fp)
  816ee0:	08153100 	call	815310 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  816ee4:	e0bffe17 	ldw	r2,-8(fp)
  816ee8:	10800003 	ldbu	r2,0(r2)
  816eec:	10803fcc 	andi	r2,r2,255
  816ef0:	10803960 	cmpeqi	r2,r2,229
  816ef4:	1000101e 	bne	r2,zero,816f38 <find_file_in_directory+0x38c>
  816ef8:	e0bffe17 	ldw	r2,-8(fp)
  816efc:	10800003 	ldbu	r2,0(r2)
  816f00:	10803fcc 	andi	r2,r2,255
  816f04:	1005003a 	cmpeq	r2,r2,zero
  816f08:	10000b1e 	bne	r2,zero,816f38 <find_file_in_directory+0x38c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
  816f0c:	e17ff804 	addi	r5,fp,-32
  816f10:	e1bffa04 	addi	r6,fp,-24
  816f14:	e13ffe17 	ldw	r4,-8(fp)
  816f18:	08163ac0 	call	8163ac <match_file_record_to_name_ext>
  816f1c:	e0bfe915 	stw	r2,-92(fp)

                            if (match)
  816f20:	e0bfe917 	ldw	r2,-92(fp)
  816f24:	1005003a 	cmpeq	r2,r2,zero
  816f28:	1000031e 	bne	r2,zero,816f38 <find_file_in_directory+0x38c>
                            {                               
                                result = true;
  816f2c:	00800044 	movi	r2,1
  816f30:	e0bff115 	stw	r2,-60(fp)
                                break;
  816f34:	00000606 	br	816f50 <find_file_in_directory+0x3a4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  816f38:	e0bfea17 	ldw	r2,-88(fp)
  816f3c:	10800044 	addi	r2,r2,1
  816f40:	e0bfea15 	stw	r2,-88(fp)
  816f44:	e0bfea17 	ldw	r2,-88(fp)
  816f48:	10800410 	cmplti	r2,r2,16
  816f4c:	103fdf1e 	bne	r2,zero,816ecc <find_file_in_directory+0x320>
                }
                else
                {
                    break;
                }
                if (result)
  816f50:	e0bff117 	ldw	r2,-60(fp)
  816f54:	1004c03a 	cmpne	r2,r2,zero
  816f58:	1000091e 	bne	r2,zero,816f80 <find_file_in_directory+0x3d4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  816f5c:	e0bfeb17 	ldw	r2,-84(fp)
  816f60:	10800044 	addi	r2,r2,1
  816f64:	e0bfeb15 	stw	r2,-84(fp)
  816f68:	008020f4 	movhi	r2,131
  816f6c:	10a7b204 	addi	r2,r2,-24888
  816f70:	10800383 	ldbu	r2,14(r2)
  816f74:	10c03fcc 	andi	r3,r2,255
  816f78:	e0bfeb17 	ldw	r2,-84(fp)
  816f7c:	10ffca16 	blt	r2,r3,816ea8 <find_file_in_directory+0x2fc>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
  816f80:	e0bff117 	ldw	r2,-60(fp)
  816f84:	1004c03a 	cmpne	r2,r2,zero
  816f88:	1000131e 	bne	r2,zero,816fd8 <find_file_in_directory+0x42c>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
  816f8c:	e13ff417 	ldw	r4,-48(fp)
  816f90:	e17ffb04 	addi	r5,fp,-20
  816f94:	0814fc40 	call	814fc4 <get_cluster_flag>
  816f98:	1005003a 	cmpeq	r2,r2,zero
  816f9c:	10000c1e 	bne	r2,zero,816fd0 <find_file_in_directory+0x424>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  816fa0:	e0bffb0b 	ldhu	r2,-20(fp)
  816fa4:	10bfffcc 	andi	r2,r2,65535
  816fa8:	10fffe0c 	andi	r3,r2,65528
  816fac:	00bffe14 	movui	r2,65528
  816fb0:	1880021e 	bne	r3,r2,816fbc <find_file_in_directory+0x410>
					{
						return false;
  816fb4:	e03fff15 	stw	zero,-4(fp)
  816fb8:	00000f06 	br	816ff8 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
  816fbc:	e0bffb0b 	ldhu	r2,-20(fp)
  816fc0:	10bfffcc 	andi	r2,r2,65535
  816fc4:	10bffe0c 	andi	r2,r2,65528
  816fc8:	e0bff415 	stw	r2,-48(fp)
  816fcc:	00000206 	br	816fd8 <find_file_in_directory+0x42c>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
  816fd0:	e03fff15 	stw	zero,-4(fp)
  816fd4:	00000806 	br	816ff8 <find_file_in_directory+0x44c>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
  816fd8:	e0fff417 	ldw	r3,-48(fp)
  816fdc:	00bffdd4 	movui	r2,65527
  816fe0:	10c00316 	blt	r2,r3,816ff0 <find_file_in_directory+0x444>
  816fe4:	e0bff117 	ldw	r2,-60(fp)
  816fe8:	1005003a 	cmpeq	r2,r2,zero
  816fec:	103f9f1e 	bne	r2,zero,816e6c <find_file_in_directory+0x2c0>
    }
    
    return result;   
  816ff0:	e0bff117 	ldw	r2,-60(fp)
  816ff4:	e0bfff15 	stw	r2,-4(fp)
  816ff8:	e0bfff17 	ldw	r2,-4(fp)
}
  816ffc:	e037883a 	mov	sp,fp
  817000:	dfc00117 	ldw	ra,4(sp)
  817004:	df000017 	ldw	fp,0(sp)
  817008:	dec00204 	addi	sp,sp,8
  81700c:	f800283a 	ret

00817010 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  817010:	defff504 	addi	sp,sp,-44
  817014:	dfc00a15 	stw	ra,40(sp)
  817018:	df000915 	stw	fp,36(sp)
  81701c:	df000904 	addi	fp,sp,36
  817020:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  817024:	008020f4 	movhi	r2,131
  817028:	10a7b204 	addi	r2,r2,-24888
  81702c:	10801117 	ldw	r2,68(r2)
  817030:	e0bffe15 	stw	r2,-8(fp)
    unsigned int cluster_index = 2;
  817034:	00800084 	movi	r2,2
  817038:	e0bffd15 	stw	r2,-12(fp)
    short int cluster = -1;
  81703c:	00bfffc4 	movi	r2,-1
  817040:	e0bffc0d 	sth	r2,-16(fp)
    bool result = false;
  817044:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
  817048:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
  81704c:	008020f4 	movhi	r2,131
  817050:	10a7b204 	addi	r2,r2,-24888
  817054:	10801417 	ldw	r2,80(r2)
  817058:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
  81705c:	008020f4 	movhi	r2,131
  817060:	10a7b204 	addi	r2,r2,-24888
  817064:	1080058b 	ldhu	r2,22(r2)
  817068:	10bfffcc 	andi	r2,r2,65535
  81706c:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
  817070:	008020f4 	movhi	r2,131
  817074:	10a7b204 	addi	r2,r2,-24888
  817078:	10800917 	ldw	r2,36(r2)
  81707c:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32)
  817080:	e0fff817 	ldw	r3,-32(fp)
  817084:	e0bff717 	ldw	r2,-36(fp)
  817088:	10c00b2e 	bgeu	r2,r3,8170b8 <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
  81708c:	e0fff817 	ldw	r3,-32(fp)
  817090:	e0bff917 	ldw	r2,-28(fp)
  817094:	1889c83a 	sub	r4,r3,r2
  817098:	008020f4 	movhi	r2,131
  81709c:	10a7b204 	addi	r2,r2,-24888
  8170a0:	10800383 	ldbu	r2,14(r2)
  8170a4:	11403fcc 	andi	r5,r2,255
  8170a8:	0809b0c0 	call	809b0c <__udivsi3>
  8170ac:	10800044 	addi	r2,r2,1
  8170b0:	e0bffa15 	stw	r2,-24(fp)
  8170b4:	00002906 	br	81715c <find_first_empty_cluster+0x14c>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
  8170b8:	e0fff717 	ldw	r3,-36(fp)
  8170bc:	e0bff917 	ldw	r2,-28(fp)
  8170c0:	1889c83a 	sub	r4,r3,r2
  8170c4:	008020f4 	movhi	r2,131
  8170c8:	10a7b204 	addi	r2,r2,-24888
  8170cc:	10800383 	ldbu	r2,14(r2)
  8170d0:	11403fcc 	andi	r5,r2,255
  8170d4:	0809b0c0 	call	809b0c <__udivsi3>
  8170d8:	10800044 	addi	r2,r2,1
  8170dc:	e0bffa15 	stw	r2,-24(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  8170e0:	00001e06 	br	81715c <find_first_empty_cluster+0x14c>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  8170e4:	e13ffe17 	ldw	r4,-8(fp)
  8170e8:	d1673817 	ldw	r5,-25376(gp)
  8170ec:	0814ec80 	call	814ec8 <Read_Sector_Data>
  8170f0:	1005003a 	cmpeq	r2,r2,zero
  8170f4:	1000131e 	bne	r2,zero,817144 <find_first_empty_cluster+0x134>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  8170f8:	d0a73a17 	ldw	r2,-25368(gp)
  8170fc:	10800a17 	ldw	r2,40(r2)
  817100:	1007883a 	mov	r3,r2
  817104:	e0bffd17 	ldw	r2,-12(fp)
  817108:	10803fcc 	andi	r2,r2,255
  81710c:	1085883a 	add	r2,r2,r2
  817110:	1885883a 	add	r2,r3,r2
  817114:	1080002b 	ldhuio	r2,0(r2)
  817118:	e0bffc0d 	sth	r2,-16(fp)
                if (cluster == 0)
  81711c:	e0bffc0f 	ldh	r2,-16(fp)
  817120:	1005003a 	cmpeq	r2,r2,zero
  817124:	1000071e 	bne	r2,zero,817144 <find_first_empty_cluster+0x134>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  817128:	e0bffd17 	ldw	r2,-12(fp)
  81712c:	10800044 	addi	r2,r2,1
  817130:	e0bffd15 	stw	r2,-12(fp)
                } 
            } while ((cluster_index % 256) != 0);
  817134:	e0bffd17 	ldw	r2,-12(fp)
  817138:	10803fcc 	andi	r2,r2,255
  81713c:	1004c03a 	cmpne	r2,r2,zero
  817140:	103fed1e 	bne	r2,zero,8170f8 <find_first_empty_cluster+0xe8>
        }
        if (cluster == 0)
  817144:	e0bffc0f 	ldh	r2,-16(fp)
  817148:	1005003a 	cmpeq	r2,r2,zero
  81714c:	1000081e 	bne	r2,zero,817170 <find_first_empty_cluster+0x160>
        {
            break;
        }
        sector++;
  817150:	e0bffe17 	ldw	r2,-8(fp)
  817154:	10800044 	addi	r2,r2,1
  817158:	e0bffe15 	stw	r2,-8(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  81715c:	008020f4 	movhi	r2,131
  817160:	10a7b204 	addi	r2,r2,-24888
  817164:	10c01217 	ldw	r3,72(r2)
  817168:	e0bffe17 	ldw	r2,-8(fp)
  81716c:	18bfdd1e 	bne	r3,r2,8170e4 <find_first_empty_cluster+0xd4>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  817170:	e0bffc0f 	ldh	r2,-16(fp)
  817174:	1004c03a 	cmpne	r2,r2,zero
  817178:	1000081e 	bne	r2,zero,81719c <find_first_empty_cluster+0x18c>
  81717c:	e0fffc0f 	ldh	r3,-16(fp)
  817180:	e0bffa17 	ldw	r2,-24(fp)
  817184:	10c00536 	bltu	r2,r3,81719c <find_first_empty_cluster+0x18c>
    {
        *cluster_number = cluster_index;
  817188:	e0bfff17 	ldw	r2,-4(fp)
  81718c:	e0fffd17 	ldw	r3,-12(fp)
  817190:	10c00015 	stw	r3,0(r2)
		result = true;
  817194:	00800044 	movi	r2,1
  817198:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
  81719c:	e0bffb17 	ldw	r2,-20(fp)
}
  8171a0:	e037883a 	mov	sp,fp
  8171a4:	dfc00117 	ldw	ra,4(sp)
  8171a8:	df000017 	ldw	fp,0(sp)
  8171ac:	dec00204 	addi	sp,sp,8
  8171b0:	f800283a 	ret

008171b4 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  8171b4:	defff404 	addi	sp,sp,-48
  8171b8:	dfc00b15 	stw	ra,44(sp)
  8171bc:	df000a15 	stw	fp,40(sp)
  8171c0:	df000a04 	addi	fp,sp,40
  8171c4:	e13ffe15 	stw	r4,-8(fp)
    int result = -1;
  8171c8:	00bfffc4 	movi	r2,-1
  8171cc:	e0bffb15 	stw	r2,-20(fp)
    int cluster = start_cluster_index;
  8171d0:	e0bffe17 	ldw	r2,-8(fp)
  8171d4:	e0bffa15 	stw	r2,-24(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  8171d8:	e0bffa17 	ldw	r2,-24(fp)
  8171dc:	113fff84 	addi	r4,r2,-2
  8171e0:	008020f4 	movhi	r2,131
  8171e4:	10a7b204 	addi	r2,r2,-24888
  8171e8:	10800383 	ldbu	r2,14(r2)
  8171ec:	11403fcc 	andi	r5,r2,255
  8171f0:	0809b1c0 	call	809b1c <__mulsi3>
  8171f4:	1007883a 	mov	r3,r2
  8171f8:	008020f4 	movhi	r2,131
  8171fc:	10a7b204 	addi	r2,r2,-24888
  817200:	10801417 	ldw	r2,80(r2)
  817204:	1885883a 	add	r2,r3,r2
  817208:	e0bff915 	stw	r2,-28(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  81720c:	e03ff815 	stw	zero,-32(fp)
  817210:	00002c06 	br	8172c4 <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  817214:	e0fff817 	ldw	r3,-32(fp)
  817218:	e0bff917 	ldw	r2,-28(fp)
  81721c:	1889883a 	add	r4,r3,r2
  817220:	d1673817 	ldw	r5,-25376(gp)
  817224:	0814ec80 	call	814ec8 <Read_Sector_Data>
  817228:	1005003a 	cmpeq	r2,r2,zero
  81722c:	10002b1e 	bne	r2,zero,8172dc <find_first_empty_record_in_a_subdirectory+0x128>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  817230:	e03ff715 	stw	zero,-36(fp)
  817234:	00001d06 	br	8172ac <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  817238:	d0a73a17 	ldw	r2,-25368(gp)
  81723c:	10800a17 	ldw	r2,40(r2)
  817240:	1007883a 	mov	r3,r2
  817244:	e0bff717 	ldw	r2,-36(fp)
  817248:	1004917a 	slli	r2,r2,5
  81724c:	1885883a 	add	r2,r3,r2
  817250:	10800023 	ldbuio	r2,0(r2)
  817254:	10803fcc 	andi	r2,r2,255
  817258:	e0bff60d 	sth	r2,-40(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
  81725c:	e0bff60b 	ldhu	r2,-40(fp)
  817260:	10803960 	cmpeqi	r2,r2,229
  817264:	1000031e 	bne	r2,zero,817274 <find_first_empty_record_in_a_subdirectory+0xc0>
  817268:	e0bff60b 	ldhu	r2,-40(fp)
  81726c:	1004c03a 	cmpne	r2,r2,zero
  817270:	10000b1e 	bne	r2,zero,8172a0 <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
  817274:	e0bff817 	ldw	r2,-32(fp)
  817278:	1006913a 	slli	r3,r2,4
  81727c:	e0bff717 	ldw	r2,-36(fp)
  817280:	1885883a 	add	r2,r3,r2
  817284:	1006943a 	slli	r3,r2,16
  817288:	e0bffa17 	ldw	r2,-24(fp)
  81728c:	1884b03a 	or	r2,r3,r2
  817290:	e0bffb15 	stw	r2,-20(fp)
                        return result;
  817294:	e0bffb17 	ldw	r2,-20(fp)
  817298:	e0bfff15 	stw	r2,-4(fp)
  81729c:	00005206 	br	8173e8 <find_first_empty_record_in_a_subdirectory+0x234>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  8172a0:	e0bff717 	ldw	r2,-36(fp)
  8172a4:	10800044 	addi	r2,r2,1
  8172a8:	e0bff715 	stw	r2,-36(fp)
  8172ac:	e0bff717 	ldw	r2,-36(fp)
  8172b0:	10800410 	cmplti	r2,r2,16
  8172b4:	103fe01e 	bne	r2,zero,817238 <find_first_empty_record_in_a_subdirectory+0x84>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8172b8:	e0bff817 	ldw	r2,-32(fp)
  8172bc:	10800044 	addi	r2,r2,1
  8172c0:	e0bff815 	stw	r2,-32(fp)
  8172c4:	008020f4 	movhi	r2,131
  8172c8:	10a7b204 	addi	r2,r2,-24888
  8172cc:	10800383 	ldbu	r2,14(r2)
  8172d0:	10c03fcc 	andi	r3,r2,255
  8172d4:	e0bff817 	ldw	r2,-32(fp)
  8172d8:	10ffce16 	blt	r2,r3,817214 <find_first_empty_record_in_a_subdirectory+0x60>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
  8172dc:	e0bffb17 	ldw	r2,-20(fp)
  8172e0:	1004403a 	cmpge	r2,r2,zero
  8172e4:	1000381e 	bne	r2,zero,8173c8 <find_first_empty_record_in_a_subdirectory+0x214>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
  8172e8:	e13ffa17 	ldw	r4,-24(fp)
  8172ec:	e17ffc04 	addi	r5,fp,-16
  8172f0:	0814fc40 	call	814fc4 <get_cluster_flag>
  8172f4:	1005003a 	cmpeq	r2,r2,zero
  8172f8:	1000311e 	bne	r2,zero,8173c0 <find_first_empty_record_in_a_subdirectory+0x20c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  8172fc:	e0bffc0b 	ldhu	r2,-16(fp)
  817300:	10bfffcc 	andi	r2,r2,65535
  817304:	10fffe0c 	andi	r3,r2,65528
  817308:	00bffe14 	movui	r2,65528
  81730c:	18802e1e 	bne	r3,r2,8173c8 <find_first_empty_record_in_a_subdirectory+0x214>
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
  817310:	e13ffd04 	addi	r4,fp,-12
  817314:	08170100 	call	817010 <find_first_empty_cluster>
  817318:	1005003a 	cmpeq	r2,r2,zero
  81731c:	1000231e 	bne	r2,zero,8173ac <find_first_empty_record_in_a_subdirectory+0x1f8>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
  817320:	e13ffa17 	ldw	r4,-24(fp)
  817324:	e0bffd17 	ldw	r2,-12(fp)
  817328:	117fffcc 	andi	r5,r2,65535
  81732c:	2960001c 	xori	r5,r5,32768
  817330:	29600004 	addi	r5,r5,-32768
  817334:	01800044 	movi	r6,1
  817338:	081507c0 	call	81507c <mark_cluster>
  81733c:	1005003a 	cmpeq	r2,r2,zero
  817340:	10001a1e 	bne	r2,zero,8173ac <find_first_empty_record_in_a_subdirectory+0x1f8>
  817344:	e0bffd17 	ldw	r2,-12(fp)
  817348:	1009883a 	mov	r4,r2
  81734c:	017fffc4 	movi	r5,-1
  817350:	01800044 	movi	r6,1
  817354:	081507c0 	call	81507c <mark_cluster>
  817358:	1005003a 	cmpeq	r2,r2,zero
  81735c:	1000131e 	bne	r2,zero,8173ac <find_first_empty_record_in_a_subdirectory+0x1f8>
  817360:	e13ffa17 	ldw	r4,-24(fp)
  817364:	e0bffd17 	ldw	r2,-12(fp)
  817368:	117fffcc 	andi	r5,r2,65535
  81736c:	2960001c 	xori	r5,r5,32768
  817370:	29600004 	addi	r5,r5,-32768
  817374:	000d883a 	mov	r6,zero
  817378:	081507c0 	call	81507c <mark_cluster>
  81737c:	1005003a 	cmpeq	r2,r2,zero
  817380:	10000a1e 	bne	r2,zero,8173ac <find_first_empty_record_in_a_subdirectory+0x1f8>
  817384:	e0bffd17 	ldw	r2,-12(fp)
  817388:	1009883a 	mov	r4,r2
  81738c:	017fffc4 	movi	r5,-1
  817390:	000d883a 	mov	r6,zero
  817394:	081507c0 	call	81507c <mark_cluster>
  817398:	1005003a 	cmpeq	r2,r2,zero
  81739c:	1000031e 	bne	r2,zero,8173ac <find_first_empty_record_in_a_subdirectory+0x1f8>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
  8173a0:	0814e780 	call	814e78 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
  8173a4:	e0bffd17 	ldw	r2,-12(fp)
  8173a8:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
  8173ac:	e0bffc0b 	ldhu	r2,-16(fp)
  8173b0:	10bfffcc 	andi	r2,r2,65535
  8173b4:	10bffe0c 	andi	r2,r2,65528
  8173b8:	e0bffa15 	stw	r2,-24(fp)
  8173bc:	00000206 	br	8173c8 <find_first_empty_record_in_a_subdirectory+0x214>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
  8173c0:	00bfffc4 	movi	r2,-1
  8173c4:	e0bffb15 	stw	r2,-20(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
  8173c8:	e0fffa17 	ldw	r3,-24(fp)
  8173cc:	00bffdd4 	movui	r2,65527
  8173d0:	10c00316 	blt	r2,r3,8173e0 <find_first_empty_record_in_a_subdirectory+0x22c>
  8173d4:	e0bffb17 	ldw	r2,-20(fp)
  8173d8:	10bfffe0 	cmpeqi	r2,r2,-1
  8173dc:	103f7e1e 	bne	r2,zero,8171d8 <find_first_empty_record_in_a_subdirectory+0x24>
    return result; 
  8173e0:	e0bffb17 	ldw	r2,-20(fp)
  8173e4:	e0bfff15 	stw	r2,-4(fp)
  8173e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8173ec:	e037883a 	mov	sp,fp
  8173f0:	dfc00117 	ldw	ra,4(sp)
  8173f4:	df000017 	ldw	fp,0(sp)
  8173f8:	dec00204 	addi	sp,sp,8
  8173fc:	f800283a 	ret

00817400 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  817400:	defff804 	addi	sp,sp,-32
  817404:	dfc00715 	stw	ra,28(sp)
  817408:	df000615 	stw	fp,24(sp)
  81740c:	df000604 	addi	fp,sp,24
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  817410:	008020f4 	movhi	r2,131
  817414:	10a7b204 	addi	r2,r2,-24888
  817418:	1080050b 	ldhu	r2,20(r2)
  81741c:	10bfffcc 	andi	r2,r2,65535
  817420:	1008917a 	slli	r4,r2,5
  817424:	008020f4 	movhi	r2,131
  817428:	10a7b204 	addi	r2,r2,-24888
  81742c:	1080030b 	ldhu	r2,12(r2)
  817430:	117fffcc 	andi	r5,r2,65535
  817434:	0809a4c0 	call	809a4c <__divsi3>
  817438:	e0bffe15 	stw	r2,-8(fp)
    int sector_index;
    int result = -1;
  81743c:	00bfffc4 	movi	r2,-1
  817440:	e0bffc15 	stw	r2,-16(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  817444:	e03ffd15 	stw	zero,-12(fp)
  817448:	00002d06 	br	817500 <find_first_empty_record_in_root_directory+0x100>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  81744c:	008020f4 	movhi	r2,131
  817450:	10a7b204 	addi	r2,r2,-24888
  817454:	10c01317 	ldw	r3,76(r2)
  817458:	e0bffd17 	ldw	r2,-12(fp)
  81745c:	1885883a 	add	r2,r3,r2
  817460:	1009883a 	mov	r4,r2
  817464:	d1673817 	ldw	r5,-25376(gp)
  817468:	0814ec80 	call	814ec8 <Read_Sector_Data>
  81746c:	1005003a 	cmpeq	r2,r2,zero
  817470:	1000261e 	bne	r2,zero,81750c <find_first_empty_record_in_root_directory+0x10c>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  817474:	e03ffb15 	stw	zero,-20(fp)
  817478:	00001b06 	br	8174e8 <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  81747c:	d0a73a17 	ldw	r2,-25368(gp)
  817480:	10800a17 	ldw	r2,40(r2)
  817484:	1007883a 	mov	r3,r2
  817488:	e0bffb17 	ldw	r2,-20(fp)
  81748c:	1004917a 	slli	r2,r2,5
  817490:	1885883a 	add	r2,r3,r2
  817494:	10800023 	ldbuio	r2,0(r2)
  817498:	10803fcc 	andi	r2,r2,255
  81749c:	e0bffa0d 	sth	r2,-24(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
  8174a0:	e0bffa0b 	ldhu	r2,-24(fp)
  8174a4:	10803960 	cmpeqi	r2,r2,229
  8174a8:	1000031e 	bne	r2,zero,8174b8 <find_first_empty_record_in_root_directory+0xb8>
  8174ac:	e0bffa0b 	ldhu	r2,-24(fp)
  8174b0:	1004c03a 	cmpne	r2,r2,zero
  8174b4:	1000091e 	bne	r2,zero,8174dc <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
  8174b8:	e0bffd17 	ldw	r2,-12(fp)
  8174bc:	1006913a 	slli	r3,r2,4
  8174c0:	e0bffb17 	ldw	r2,-20(fp)
  8174c4:	1885883a 	add	r2,r3,r2
  8174c8:	1004943a 	slli	r2,r2,16
  8174cc:	e0bffc15 	stw	r2,-16(fp)
                    return result;
  8174d0:	e0bffc17 	ldw	r2,-16(fp)
  8174d4:	e0bfff15 	stw	r2,-4(fp)
  8174d8:	00000e06 	br	817514 <find_first_empty_record_in_root_directory+0x114>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  8174dc:	e0bffb17 	ldw	r2,-20(fp)
  8174e0:	10800044 	addi	r2,r2,1
  8174e4:	e0bffb15 	stw	r2,-20(fp)
  8174e8:	e0bffb17 	ldw	r2,-20(fp)
  8174ec:	10800410 	cmplti	r2,r2,16
  8174f0:	103fe21e 	bne	r2,zero,81747c <find_first_empty_record_in_root_directory+0x7c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  8174f4:	e0bffd17 	ldw	r2,-12(fp)
  8174f8:	10800044 	addi	r2,r2,1
  8174fc:	e0bffd15 	stw	r2,-12(fp)
  817500:	e0fffd17 	ldw	r3,-12(fp)
  817504:	e0bffe17 	ldw	r2,-8(fp)
  817508:	18bfd016 	blt	r3,r2,81744c <find_first_empty_record_in_root_directory+0x4c>
        else
        {
            break;
        }
    }
    return result;
  81750c:	e0bffc17 	ldw	r2,-16(fp)
  817510:	e0bfff15 	stw	r2,-4(fp)
  817514:	e0bfff17 	ldw	r2,-4(fp)
}
  817518:	e037883a 	mov	sp,fp
  81751c:	dfc00117 	ldw	ra,4(sp)
  817520:	df000017 	ldw	fp,0(sp)
  817524:	dec00204 	addi	sp,sp,8
  817528:	f800283a 	ret

0081752c <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
  81752c:	defffa04 	addi	sp,sp,-24
  817530:	df000515 	stw	fp,20(sp)
  817534:	df000504 	addi	fp,sp,20
  817538:	e13ffd15 	stw	r4,-12(fp)
  81753c:	e17ffe15 	stw	r5,-8(fp)
  817540:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
  817544:	e03ffb15 	stw	zero,-20(fp)
    
    for(counter = 0; counter < 8; counter++)
  817548:	e03ffc15 	stw	zero,-16(fp)
  81754c:	00002b06 	br	8175fc <convert_filename_to_name_extension+0xd0>
    {
        if (filename[local] != '.')
  817550:	e0bffb17 	ldw	r2,-20(fp)
  817554:	1007883a 	mov	r3,r2
  817558:	e0bffd17 	ldw	r2,-12(fp)
  81755c:	1885883a 	add	r2,r3,r2
  817560:	10800003 	ldbu	r2,0(r2)
  817564:	10803fcc 	andi	r2,r2,255
  817568:	1080201c 	xori	r2,r2,128
  81756c:	10bfe004 	addi	r2,r2,-128
  817570:	10800ba0 	cmpeqi	r2,r2,46
  817574:	1000181e 	bne	r2,zero,8175d8 <convert_filename_to_name_extension+0xac>
        {
            name[counter] = filename[local];
  817578:	e0bffc17 	ldw	r2,-16(fp)
  81757c:	1007883a 	mov	r3,r2
  817580:	e0bffe17 	ldw	r2,-8(fp)
  817584:	1889883a 	add	r4,r3,r2
  817588:	e0bffb17 	ldw	r2,-20(fp)
  81758c:	1007883a 	mov	r3,r2
  817590:	e0bffd17 	ldw	r2,-12(fp)
  817594:	1885883a 	add	r2,r3,r2
  817598:	10800003 	ldbu	r2,0(r2)
  81759c:	20800005 	stb	r2,0(r4)
            if (filename[local] != 0) local++;
  8175a0:	e0bffb17 	ldw	r2,-20(fp)
  8175a4:	1007883a 	mov	r3,r2
  8175a8:	e0bffd17 	ldw	r2,-12(fp)
  8175ac:	1885883a 	add	r2,r3,r2
  8175b0:	10800003 	ldbu	r2,0(r2)
  8175b4:	10803fcc 	andi	r2,r2,255
  8175b8:	1080201c 	xori	r2,r2,128
  8175bc:	10bfe004 	addi	r2,r2,-128
  8175c0:	1005003a 	cmpeq	r2,r2,zero
  8175c4:	10000a1e 	bne	r2,zero,8175f0 <convert_filename_to_name_extension+0xc4>
  8175c8:	e0bffb17 	ldw	r2,-20(fp)
  8175cc:	10800044 	addi	r2,r2,1
  8175d0:	e0bffb15 	stw	r2,-20(fp)
  8175d4:	00000606 	br	8175f0 <convert_filename_to_name_extension+0xc4>
        }
        else
        {
            name[counter] = ' ';
  8175d8:	e0bffc17 	ldw	r2,-16(fp)
  8175dc:	1007883a 	mov	r3,r2
  8175e0:	e0bffe17 	ldw	r2,-8(fp)
  8175e4:	1887883a 	add	r3,r3,r2
  8175e8:	00800804 	movi	r2,32
  8175ec:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
  8175f0:	e0bffc17 	ldw	r2,-16(fp)
  8175f4:	10800044 	addi	r2,r2,1
  8175f8:	e0bffc15 	stw	r2,-16(fp)
  8175fc:	e0bffc17 	ldw	r2,-16(fp)
  817600:	10800210 	cmplti	r2,r2,8
  817604:	103fd21e 	bne	r2,zero,817550 <convert_filename_to_name_extension+0x24>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
  817608:	e0bffb17 	ldw	r2,-20(fp)
  81760c:	1007883a 	mov	r3,r2
  817610:	e0bffd17 	ldw	r2,-12(fp)
  817614:	1885883a 	add	r2,r3,r2
  817618:	10800003 	ldbu	r2,0(r2)
  81761c:	10803fcc 	andi	r2,r2,255
  817620:	1080201c 	xori	r2,r2,128
  817624:	10bfe004 	addi	r2,r2,-128
  817628:	10800b98 	cmpnei	r2,r2,46
  81762c:	1000031e 	bne	r2,zero,81763c <convert_filename_to_name_extension+0x110>
  817630:	e0bffb17 	ldw	r2,-20(fp)
  817634:	10800044 	addi	r2,r2,1
  817638:	e0bffb15 	stw	r2,-20(fp)
    for(counter = 0; counter < 3; counter++)
  81763c:	e03ffc15 	stw	zero,-16(fp)
  817640:	00002106 	br	8176c8 <convert_filename_to_name_extension+0x19c>
    {
        if (filename[local] != 0)
  817644:	e0bffb17 	ldw	r2,-20(fp)
  817648:	1007883a 	mov	r3,r2
  81764c:	e0bffd17 	ldw	r2,-12(fp)
  817650:	1885883a 	add	r2,r3,r2
  817654:	10800003 	ldbu	r2,0(r2)
  817658:	10803fcc 	andi	r2,r2,255
  81765c:	1080201c 	xori	r2,r2,128
  817660:	10bfe004 	addi	r2,r2,-128
  817664:	1005003a 	cmpeq	r2,r2,zero
  817668:	10000e1e 	bne	r2,zero,8176a4 <convert_filename_to_name_extension+0x178>
        {
            extension[counter] = filename[local];
  81766c:	e0bffc17 	ldw	r2,-16(fp)
  817670:	1007883a 	mov	r3,r2
  817674:	e0bfff17 	ldw	r2,-4(fp)
  817678:	1889883a 	add	r4,r3,r2
  81767c:	e0bffb17 	ldw	r2,-20(fp)
  817680:	1007883a 	mov	r3,r2
  817684:	e0bffd17 	ldw	r2,-12(fp)
  817688:	1885883a 	add	r2,r3,r2
  81768c:	10800003 	ldbu	r2,0(r2)
  817690:	20800005 	stb	r2,0(r4)
            local++;
  817694:	e0bffb17 	ldw	r2,-20(fp)
  817698:	10800044 	addi	r2,r2,1
  81769c:	e0bffb15 	stw	r2,-20(fp)
  8176a0:	00000606 	br	8176bc <convert_filename_to_name_extension+0x190>
        }
        else
        {
            extension[counter] = ' ';
  8176a4:	e0bffc17 	ldw	r2,-16(fp)
  8176a8:	1007883a 	mov	r3,r2
  8176ac:	e0bfff17 	ldw	r2,-4(fp)
  8176b0:	1887883a 	add	r3,r3,r2
  8176b4:	00800804 	movi	r2,32
  8176b8:	18800005 	stb	r2,0(r3)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
  8176bc:	e0bffc17 	ldw	r2,-16(fp)
  8176c0:	10800044 	addi	r2,r2,1
  8176c4:	e0bffc15 	stw	r2,-16(fp)
  8176c8:	e0bffc17 	ldw	r2,-16(fp)
  8176cc:	108000d0 	cmplti	r2,r2,3
  8176d0:	103fdc1e 	bne	r2,zero,817644 <convert_filename_to_name_extension+0x118>
        {
            extension[counter] = ' ';
        }
    }

}
  8176d4:	e037883a 	mov	sp,fp
  8176d8:	df000017 	ldw	fp,0(sp)
  8176dc:	dec00104 	addi	sp,sp,4
  8176e0:	f800283a 	ret

008176e4 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  8176e4:	defff204 	addi	sp,sp,-56
  8176e8:	dfc00d15 	stw	ra,52(sp)
  8176ec:	df000c15 	stw	fp,48(sp)
  8176f0:	dc000b15 	stw	r16,44(sp)
  8176f4:	df000b04 	addi	fp,sp,44
  8176f8:	e13ffb15 	stw	r4,-20(fp)
  8176fc:	e17ffc15 	stw	r5,-16(fp)
  817700:	e1bffd15 	stw	r6,-12(fp)
    unsigned int cluster_number;
    bool result = false;
  817704:	e03ff915 	stw	zero,-28(fp)
    
    if (find_first_empty_cluster(&cluster_number))
  817708:	e13ffa04 	addi	r4,fp,-24
  81770c:	08170100 	call	817010 <find_first_empty_cluster>
  817710:	1005003a 	cmpeq	r2,r2,zero
  817714:	1000a31e 	bne	r2,zero,8179a4 <create_file+0x2c0>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
  817718:	e0bffd17 	ldw	r2,-12(fp)
  81771c:	10800a17 	ldw	r2,40(r2)
  817720:	1004c03a 	cmpne	r2,r2,zero
  817724:	1000031e 	bne	r2,zero,817734 <create_file+0x50>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
  817728:	08174000 	call	817400 <find_first_empty_record_in_root_directory>
  81772c:	e0bff815 	stw	r2,-32(fp)
  817730:	00000506 	br	817748 <create_file+0x64>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
  817734:	e0bffd17 	ldw	r2,-12(fp)
  817738:	1080058b 	ldhu	r2,22(r2)
  81773c:	113fffcc 	andi	r4,r2,65535
  817740:	08171b40 	call	8171b4 <find_first_empty_record_in_a_subdirectory>
  817744:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
  817748:	e0bff817 	ldw	r2,-32(fp)
  81774c:	1004803a 	cmplt	r2,r2,zero
  817750:	1000941e 	bne	r2,zero,8179a4 <create_file+0x2c0>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
  817754:	e13ffb17 	ldw	r4,-20(fp)
  817758:	08162ec0 	call	8162ec <get_dir_divider_location>
  81775c:	e0bff615 	stw	r2,-40(fp)
            int last_dir_separator = 0;
  817760:	e03ff515 	stw	zero,-44(fp)

            // Skip through all directory separators.
            while (location > 0)
  817764:	00000b06 	br	817794 <create_file+0xb0>
            {
                last_dir_separator = last_dir_separator+location+1;
  817768:	e0fff517 	ldw	r3,-44(fp)
  81776c:	e0bff617 	ldw	r2,-40(fp)
  817770:	1885883a 	add	r2,r3,r2
  817774:	10800044 	addi	r2,r2,1
  817778:	e0bff515 	stw	r2,-44(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
  81777c:	e0bff517 	ldw	r2,-44(fp)
  817780:	1007883a 	mov	r3,r2
  817784:	e0bffb17 	ldw	r2,-20(fp)
  817788:	1889883a 	add	r4,r3,r2
  81778c:	08162ec0 	call	8162ec <get_dir_divider_location>
  817790:	e0bff615 	stw	r2,-40(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
  817794:	e0bff617 	ldw	r2,-40(fp)
  817798:	10800048 	cmpgei	r2,r2,1
  81779c:	103ff21e 	bne	r2,zero,817768 <create_file+0x84>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
  8177a0:	e0bff517 	ldw	r2,-44(fp)
  8177a4:	1007883a 	mov	r3,r2
  8177a8:	e0bffb17 	ldw	r2,-20(fp)
  8177ac:	1889883a 	add	r4,r3,r2
  8177b0:	e0bffc17 	ldw	r2,-16(fp)
  8177b4:	100b883a 	mov	r5,r2
  8177b8:	e0bffc17 	ldw	r2,-16(fp)
  8177bc:	10800204 	addi	r2,r2,8
  8177c0:	100d883a 	mov	r6,r2
  8177c4:	081752c0 	call	81752c <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
  8177c8:	e0bffc17 	ldw	r2,-16(fp)
  8177cc:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
  8177d0:	e0bffc17 	ldw	r2,-16(fp)
  8177d4:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
  8177d8:	e0bffc17 	ldw	r2,-16(fp)
  8177dc:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
  8177e0:	e0bffc17 	ldw	r2,-16(fp)
  8177e4:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
  8177e8:	e0bffc17 	ldw	r2,-16(fp)
  8177ec:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
  8177f0:	e0bffc17 	ldw	r2,-16(fp)
  8177f4:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
  8177f8:	e0bffa17 	ldw	r2,-24(fp)
  8177fc:	1007883a 	mov	r3,r2
  817800:	e0bffc17 	ldw	r2,-16(fp)
  817804:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
  817808:	e0bffc17 	ldw	r2,-16(fp)
  81780c:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
  817810:	e0fffa17 	ldw	r3,-24(fp)
  817814:	e0bffc17 	ldw	r2,-16(fp)
  817818:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
  81781c:	e0bffc17 	ldw	r2,-16(fp)
  817820:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
  817824:	e0bffc17 	ldw	r2,-16(fp)
  817828:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
  81782c:	e0bff817 	ldw	r2,-32(fp)
  817830:	10ffffcc 	andi	r3,r2,65535
  817834:	e0bffc17 	ldw	r2,-16(fp)
  817838:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
  81783c:	e0bff817 	ldw	r2,-32(fp)
  817840:	1005d43a 	srai	r2,r2,16
  817844:	10bfffcc 	andi	r2,r2,65535
  817848:	e0bfff15 	stw	r2,-4(fp)
  81784c:	e0ffff17 	ldw	r3,-4(fp)
  817850:	1804403a 	cmpge	r2,r3,zero
  817854:	1000031e 	bne	r2,zero,817864 <create_file+0x180>
  817858:	e0bfff17 	ldw	r2,-4(fp)
  81785c:	108003c4 	addi	r2,r2,15
  817860:	e0bfff15 	stw	r2,-4(fp)
  817864:	e0ffff17 	ldw	r3,-4(fp)
  817868:	1805d13a 	srai	r2,r3,4
  81786c:	1007883a 	mov	r3,r2
  817870:	e0bffc17 	ldw	r2,-16(fp)
  817874:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
  817878:	e0bff817 	ldw	r2,-32(fp)
  81787c:	1005d43a 	srai	r2,r2,16
  817880:	108003cc 	andi	r2,r2,15
  817884:	1004917a 	slli	r2,r2,5
  817888:	1007883a 	mov	r3,r2
  81788c:	e0bffc17 	ldw	r2,-16(fp)
  817890:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
  817894:	e0bffd17 	ldw	r2,-12(fp)
  817898:	1080058b 	ldhu	r2,22(r2)
  81789c:	10ffffcc 	andi	r3,r2,65535
  8178a0:	e0bffc17 	ldw	r2,-16(fp)
  8178a4:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
  8178a8:	e0fffc17 	ldw	r3,-16(fp)
  8178ac:	00800044 	movi	r2,1
  8178b0:	18800f15 	stw	r2,60(r3)
            file_record->modified = true;
  8178b4:	e0fffc17 	ldw	r3,-16(fp)
  8178b8:	00800044 	movi	r2,1
  8178bc:	18800e15 	stw	r2,56(r3)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
  8178c0:	e0bffc17 	ldw	r2,-16(fp)
  8178c4:	10800a17 	ldw	r2,40(r2)
  8178c8:	1004c03a 	cmpne	r2,r2,zero
  8178cc:	1000081e 	bne	r2,zero,8178f0 <create_file+0x20c>
  8178d0:	008020f4 	movhi	r2,131
  8178d4:	10a7b204 	addi	r2,r2,-24888
  8178d8:	10c01317 	ldw	r3,76(r2)
  8178dc:	e0bffc17 	ldw	r2,-16(fp)
  8178e0:	10800b17 	ldw	r2,44(r2)
  8178e4:	1887883a 	add	r3,r3,r2
  8178e8:	e0fffe15 	stw	r3,-8(fp)
  8178ec:	00001006 	br	817930 <create_file+0x24c>
  8178f0:	008020f4 	movhi	r2,131
  8178f4:	10a7b204 	addi	r2,r2,-24888
  8178f8:	14001417 	ldw	r16,80(r2)
  8178fc:	e0bffc17 	ldw	r2,-16(fp)
  817900:	10800a17 	ldw	r2,40(r2)
  817904:	113fff84 	addi	r4,r2,-2
  817908:	008020f4 	movhi	r2,131
  81790c:	10a7b204 	addi	r2,r2,-24888
  817910:	10800383 	ldbu	r2,14(r2)
  817914:	11403fcc 	andi	r5,r2,255
  817918:	0809b1c0 	call	809b1c <__mulsi3>
  81791c:	8087883a 	add	r3,r16,r2
  817920:	e0bffc17 	ldw	r2,-16(fp)
  817924:	10800b17 	ldw	r2,44(r2)
  817928:	1887883a 	add	r3,r3,r2
  81792c:	e0fffe15 	stw	r3,-8(fp)
  817930:	e0bffe17 	ldw	r2,-8(fp)
  817934:	e0bff715 	stw	r2,-36(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
  817938:	e13ff717 	ldw	r4,-36(fp)
  81793c:	d1673817 	ldw	r5,-25376(gp)
  817940:	0814ec80 	call	814ec8 <Read_Sector_Data>
  817944:	1005003a 	cmpeq	r2,r2,zero
  817948:	1000161e 	bne	r2,zero,8179a4 <create_file+0x2c0>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
  81794c:	e0bffc17 	ldw	r2,-16(fp)
  817950:	10800c0b 	ldhu	r2,48(r2)
  817954:	113fffcc 	andi	r4,r2,65535
  817958:	2120001c 	xori	r4,r4,32768
  81795c:	21200004 	addi	r4,r4,-32768
  817960:	e17ffc17 	ldw	r5,-16(fp)
  817964:	08155940 	call	815594 <Write_File_Record_At_Offset>
  817968:	1005003a 	cmpeq	r2,r2,zero
  81796c:	10000d1e 	bne	r2,zero,8179a4 <create_file+0x2c0>
                {
                    Save_Modified_Sector();
  817970:	0814e780 	call	814e78 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
  817974:	e13ffa17 	ldw	r4,-24(fp)
  817978:	017fffc4 	movi	r5,-1
  81797c:	01800044 	movi	r6,1
  817980:	081507c0 	call	81507c <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
  817984:	e13ffa17 	ldw	r4,-24(fp)
  817988:	017fffc4 	movi	r5,-1
  81798c:	000d883a 	mov	r6,zero
  817990:	081507c0 	call	81507c <mark_cluster>
  817994:	1005003a 	cmpeq	r2,r2,zero
  817998:	1000021e 	bne	r2,zero,8179a4 <create_file+0x2c0>
                    {
                        result = true;
  81799c:	00800044 	movi	r2,1
  8179a0:	e0bff915 	stw	r2,-28(fp)
                }
            }
        }

    }
    return result;           
  8179a4:	e0bff917 	ldw	r2,-28(fp)
}
  8179a8:	e037883a 	mov	sp,fp
  8179ac:	dfc00217 	ldw	ra,8(sp)
  8179b0:	df000117 	ldw	fp,4(sp)
  8179b4:	dc000017 	ldw	r16,0(sp)
  8179b8:	dec00304 	addi	sp,sp,12
  8179bc:	f800283a 	ret

008179c0 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
  8179c0:	defffb04 	addi	sp,sp,-20
  8179c4:	df000415 	stw	fp,16(sp)
  8179c8:	df000404 	addi	fp,sp,16
  8179cc:	e13ffe15 	stw	r4,-8(fp)
  8179d0:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
  8179d4:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
  8179d8:	e03ffd15 	stw	zero,-12(fp)
  8179dc:	00001606 	br	817a38 <copy_file_record_name_to_string+0x78>
	{
		if (file_record->name[index] != ' ')
  8179e0:	e0fffd17 	ldw	r3,-12(fp)
  8179e4:	e0bffe17 	ldw	r2,-8(fp)
  8179e8:	10c5883a 	add	r2,r2,r3
  8179ec:	10800003 	ldbu	r2,0(r2)
  8179f0:	10803fcc 	andi	r2,r2,255
  8179f4:	10800820 	cmpeqi	r2,r2,32
  8179f8:	10000c1e 	bne	r2,zero,817a2c <copy_file_record_name_to_string+0x6c>
		{
			file_name[flength] = file_record->name[index];
  8179fc:	e0bffc17 	ldw	r2,-16(fp)
  817a00:	1007883a 	mov	r3,r2
  817a04:	e0bfff17 	ldw	r2,-4(fp)
  817a08:	1889883a 	add	r4,r3,r2
  817a0c:	e0fffd17 	ldw	r3,-12(fp)
  817a10:	e0bffe17 	ldw	r2,-8(fp)
  817a14:	10c5883a 	add	r2,r2,r3
  817a18:	10800003 	ldbu	r2,0(r2)
  817a1c:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
  817a20:	e0bffc17 	ldw	r2,-16(fp)
  817a24:	10800044 	addi	r2,r2,1
  817a28:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
  817a2c:	e0bffd17 	ldw	r2,-12(fp)
  817a30:	10800044 	addi	r2,r2,1
  817a34:	e0bffd15 	stw	r2,-12(fp)
  817a38:	e0bffd17 	ldw	r2,-12(fp)
  817a3c:	10800210 	cmplti	r2,r2,8
  817a40:	103fe71e 	bne	r2,zero,8179e0 <copy_file_record_name_to_string+0x20>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
  817a44:	e0bffe17 	ldw	r2,-8(fp)
  817a48:	10800203 	ldbu	r2,8(r2)
  817a4c:	10803fcc 	andi	r2,r2,255
  817a50:	10800820 	cmpeqi	r2,r2,32
  817a54:	1000261e 	bne	r2,zero,817af0 <copy_file_record_name_to_string+0x130>
	{
		file_name[flength] = '.';
  817a58:	e0bffc17 	ldw	r2,-16(fp)
  817a5c:	1007883a 	mov	r3,r2
  817a60:	e0bfff17 	ldw	r2,-4(fp)
  817a64:	1887883a 	add	r3,r3,r2
  817a68:	00800b84 	movi	r2,46
  817a6c:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  817a70:	e0bffc17 	ldw	r2,-16(fp)
  817a74:	10800044 	addi	r2,r2,1
  817a78:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++)
  817a7c:	e03ffd15 	stw	zero,-12(fp)
  817a80:	00001806 	br	817ae4 <copy_file_record_name_to_string+0x124>
		{
			if (file_record->extension[index] != ' ')
  817a84:	e0fffd17 	ldw	r3,-12(fp)
  817a88:	e0bffe17 	ldw	r2,-8(fp)
  817a8c:	1885883a 	add	r2,r3,r2
  817a90:	10800204 	addi	r2,r2,8
  817a94:	10800003 	ldbu	r2,0(r2)
  817a98:	10803fcc 	andi	r2,r2,255
  817a9c:	10800820 	cmpeqi	r2,r2,32
  817aa0:	10000d1e 	bne	r2,zero,817ad8 <copy_file_record_name_to_string+0x118>
			{
				file_name[flength] = file_record->extension[index];
  817aa4:	e0bffc17 	ldw	r2,-16(fp)
  817aa8:	1007883a 	mov	r3,r2
  817aac:	e0bfff17 	ldw	r2,-4(fp)
  817ab0:	1889883a 	add	r4,r3,r2
  817ab4:	e0fffd17 	ldw	r3,-12(fp)
  817ab8:	e0bffe17 	ldw	r2,-8(fp)
  817abc:	1885883a 	add	r2,r3,r2
  817ac0:	10800204 	addi	r2,r2,8
  817ac4:	10800003 	ldbu	r2,0(r2)
  817ac8:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
  817acc:	e0bffc17 	ldw	r2,-16(fp)
  817ad0:	10800044 	addi	r2,r2,1
  817ad4:	e0bffc15 	stw	r2,-16(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
  817ad8:	e0bffd17 	ldw	r2,-12(fp)
  817adc:	10800044 	addi	r2,r2,1
  817ae0:	e0bffd15 	stw	r2,-12(fp)
  817ae4:	e0bffd17 	ldw	r2,-12(fp)
  817ae8:	108000d0 	cmplti	r2,r2,3
  817aec:	103fe51e 	bne	r2,zero,817a84 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
  817af0:	e0bffc17 	ldw	r2,-16(fp)
  817af4:	1007883a 	mov	r3,r2
  817af8:	e0bfff17 	ldw	r2,-4(fp)
  817afc:	1885883a 	add	r2,r3,r2
  817b00:	10000005 	stb	zero,0(r2)
}
  817b04:	e037883a 	mov	sp,fp
  817b08:	df000017 	ldw	fp,0(sp)
  817b0c:	dec00104 	addi	sp,sp,4
  817b10:	f800283a 	ret

00817b14 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
  817b14:	defffc04 	addi	sp,sp,-16
  817b18:	dfc00315 	stw	ra,12(sp)
  817b1c:	df000215 	stw	fp,8(sp)
  817b20:	df000204 	addi	fp,sp,8
  817b24:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
  817b28:	e13fff17 	ldw	r4,-4(fp)
  817b2c:	014020b4 	movhi	r5,130
  817b30:	2973e204 	addi	r5,r5,-12408
  817b34:	081953c0 	call	81953c <alt_find_dev>
  817b38:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
  817b3c:	e0bffe17 	ldw	r2,-8(fp)
  817b40:	1005003a 	cmpeq	r2,r2,zero
  817b44:	10001e1e 	bne	r2,zero,817bc0 <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  817b48:	e0bffe17 	ldw	r2,-8(fp)
  817b4c:	10800a17 	ldw	r2,40(r2)
  817b50:	10808d04 	addi	r2,r2,564
  817b54:	d0a73215 	stw	r2,-25400(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  817b58:	e0bffe17 	ldw	r2,-8(fp)
  817b5c:	10800a17 	ldw	r2,40(r2)
  817b60:	10808904 	addi	r2,r2,548
  817b64:	d0a73315 	stw	r2,-25396(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  817b68:	e0bffe17 	ldw	r2,-8(fp)
  817b6c:	10800a17 	ldw	r2,40(r2)
  817b70:	10808404 	addi	r2,r2,528
  817b74:	d0a73415 	stw	r2,-25392(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  817b78:	e0bffe17 	ldw	r2,-8(fp)
  817b7c:	10800a17 	ldw	r2,40(r2)
  817b80:	10808c04 	addi	r2,r2,560
  817b84:	d0a73515 	stw	r2,-25388(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  817b88:	e0bffe17 	ldw	r2,-8(fp)
  817b8c:	10800a17 	ldw	r2,40(r2)
  817b90:	10808b04 	addi	r2,r2,556
  817b94:	d0a73615 	stw	r2,-25384(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  817b98:	e0bffe17 	ldw	r2,-8(fp)
  817b9c:	10800a17 	ldw	r2,40(r2)
  817ba0:	d0a73715 	stw	r2,-25380(gp)
		device_pointer = dev;
  817ba4:	e0bffe17 	ldw	r2,-8(fp)
  817ba8:	d0a73a15 	stw	r2,-25368(gp)
		initialized = false;
  817bac:	d0273015 	stw	zero,-25408(gp)
		is_sd_card_formated_as_FAT16 = false;
  817bb0:	d0273115 	stw	zero,-25404(gp)
		search_data.valid = false;
  817bb4:	008020f4 	movhi	r2,131
  817bb8:	10a7ad04 	addi	r2,r2,-24908
  817bbc:	10000415 	stw	zero,16(r2)
	}
	return dev;
  817bc0:	e0bffe17 	ldw	r2,-8(fp)
}
  817bc4:	e037883a 	mov	sp,fp
  817bc8:	dfc00117 	ldw	ra,4(sp)
  817bcc:	df000017 	ldw	fp,0(sp)
  817bd0:	dec00204 	addi	sp,sp,8
  817bd4:	f800283a 	ret

00817bd8 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
  817bd8:	defffd04 	addi	sp,sp,-12
  817bdc:	df000215 	stw	fp,8(sp)
  817be0:	df000204 	addi	fp,sp,8
    bool result = false;
  817be4:	e03fff15 	stw	zero,-4(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  817be8:	d0a73a17 	ldw	r2,-25368(gp)
  817bec:	1005003a 	cmpeq	r2,r2,zero
  817bf0:	1000081e 	bne	r2,zero,817c14 <alt_up_sd_card_is_Present+0x3c>
  817bf4:	d0a73217 	ldw	r2,-25400(gp)
  817bf8:	1080002b 	ldhuio	r2,0(r2)
  817bfc:	1080008c 	andi	r2,r2,2
  817c00:	1005003a 	cmpeq	r2,r2,zero
  817c04:	1000031e 	bne	r2,zero,817c14 <alt_up_sd_card_is_Present+0x3c>
    {
        result = true;
  817c08:	00800044 	movi	r2,1
  817c0c:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  817c10:	00001e06 	br	817c8c <alt_up_sd_card_is_Present+0xb4>
    {
        result = true;
    }
	else if (initialized == true)
  817c14:	d0a73017 	ldw	r2,-25408(gp)
  817c18:	10800058 	cmpnei	r2,r2,1
  817c1c:	10001b1e 	bne	r2,zero,817c8c <alt_up_sd_card_is_Present+0xb4>
	{
		int index;

		initialized = false;
  817c20:	d0273015 	stw	zero,-25408(gp)
		search_data.valid = false;
  817c24:	008020f4 	movhi	r2,131
  817c28:	10a7ad04 	addi	r2,r2,-24908
  817c2c:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
  817c30:	d0273115 	stw	zero,-25404(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
  817c34:	e03ffe15 	stw	zero,-8(fp)
  817c38:	00001106 	br	817c80 <alt_up_sd_card_is_Present+0xa8>
		{
			active_files[index].in_use = false;
  817c3c:	e0bffe17 	ldw	r2,-8(fp)
  817c40:	00c020f4 	movhi	r3,131
  817c44:	18e7c704 	addi	r3,r3,-24804
  817c48:	100491ba 	slli	r2,r2,6
  817c4c:	10c5883a 	add	r2,r2,r3
  817c50:	10800f04 	addi	r2,r2,60
  817c54:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
  817c58:	e0bffe17 	ldw	r2,-8(fp)
  817c5c:	00c020f4 	movhi	r3,131
  817c60:	18e7c704 	addi	r3,r3,-24804
  817c64:	100491ba 	slli	r2,r2,6
  817c68:	10c5883a 	add	r2,r2,r3
  817c6c:	10800e04 	addi	r2,r2,56
  817c70:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  817c74:	e0bffe17 	ldw	r2,-8(fp)
  817c78:	10800044 	addi	r2,r2,1
  817c7c:	e0bffe15 	stw	r2,-8(fp)
  817c80:	e0bffe17 	ldw	r2,-8(fp)
  817c84:	10800510 	cmplti	r2,r2,20
  817c88:	103fec1e 	bne	r2,zero,817c3c <alt_up_sd_card_is_Present+0x64>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
  817c8c:	e0bfff17 	ldw	r2,-4(fp)
}
  817c90:	e037883a 	mov	sp,fp
  817c94:	df000017 	ldw	fp,0(sp)
  817c98:	dec00104 	addi	sp,sp,4
  817c9c:	f800283a 	ret

00817ca0 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  817ca0:	defffd04 	addi	sp,sp,-12
  817ca4:	dfc00215 	stw	ra,8(sp)
  817ca8:	df000115 	stw	fp,4(sp)
  817cac:	df000104 	addi	fp,sp,4
	bool result = false;
  817cb0:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
  817cb4:	0817bd80 	call	817bd8 <alt_up_sd_card_is_Present>
  817cb8:	1005003a 	cmpeq	r2,r2,zero
  817cbc:	10000d1e 	bne	r2,zero,817cf4 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
  817cc0:	d0a73017 	ldw	r2,-25408(gp)
  817cc4:	1004c03a 	cmpne	r2,r2,zero
  817cc8:	1000071e 	bne	r2,zero,817ce8 <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  817ccc:	0815e940 	call	815e94 <Look_for_FAT16>
  817cd0:	d0a73115 	stw	r2,-25404(gp)
			initialized = is_sd_card_formated_as_FAT16;
  817cd4:	d0a73117 	ldw	r2,-25404(gp)
  817cd8:	d0a73015 	stw	r2,-25408(gp)
			search_data.valid = false;
  817cdc:	008020f4 	movhi	r2,131
  817ce0:	10a7ad04 	addi	r2,r2,-24908
  817ce4:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
  817ce8:	d0a73117 	ldw	r2,-25404(gp)
  817cec:	e0bfff15 	stw	r2,-4(fp)
  817cf0:	00000206 	br	817cfc <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
  817cf4:	d0273015 	stw	zero,-25408(gp)
		is_sd_card_formated_as_FAT16 = false;
  817cf8:	d0273115 	stw	zero,-25404(gp)
	}

	return result;
  817cfc:	e0bfff17 	ldw	r2,-4(fp)
}
  817d00:	e037883a 	mov	sp,fp
  817d04:	dfc00117 	ldw	ra,4(sp)
  817d08:	df000017 	ldw	fp,0(sp)
  817d0c:	dec00204 	addi	sp,sp,8
  817d10:	f800283a 	ret

00817d14 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  817d14:	deffea04 	addi	sp,sp,-88
  817d18:	dfc01515 	stw	ra,84(sp)
  817d1c:	df001415 	stw	fp,80(sp)
  817d20:	df001404 	addi	fp,sp,80
  817d24:	e13ffe15 	stw	r4,-8(fp)
  817d28:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
  817d2c:	00800084 	movi	r2,2
  817d30:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  817d34:	0817bd80 	call	817bd8 <alt_up_sd_card_is_Present>
  817d38:	1005003a 	cmpeq	r2,r2,zero
  817d3c:	1000241e 	bne	r2,zero,817dd0 <alt_up_sd_card_find_first+0xbc>
  817d40:	d0a73117 	ldw	r2,-25404(gp)
  817d44:	1005003a 	cmpeq	r2,r2,zero
  817d48:	1000211e 	bne	r2,zero,817dd0 <alt_up_sd_card_find_first+0xbc>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
  817d4c:	e17fed04 	addi	r5,fp,-76
  817d50:	e1bfee04 	addi	r6,fp,-72
  817d54:	e13ffe17 	ldw	r4,-8(fp)
  817d58:	08166980 	call	816698 <get_home_directory_cluster_for_file>
  817d5c:	1005003a 	cmpeq	r2,r2,zero
  817d60:	1000191e 	bne	r2,zero,817dc8 <alt_up_sd_card_find_first+0xb4>
		{
			search_data.directory_root_cluster = home_directory_cluster;
  817d64:	e0bfed17 	ldw	r2,-76(fp)
  817d68:	1007883a 	mov	r3,r2
  817d6c:	008020f4 	movhi	r2,131
  817d70:	10a7ad04 	addi	r2,r2,-24908
  817d74:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
  817d78:	e0bfed17 	ldw	r2,-76(fp)
  817d7c:	1007883a 	mov	r3,r2
  817d80:	008020f4 	movhi	r2,131
  817d84:	10a7ad04 	addi	r2,r2,-24908
  817d88:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
  817d8c:	008020f4 	movhi	r2,131
  817d90:	10a7ad04 	addi	r2,r2,-24908
  817d94:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
  817d98:	00c020f4 	movhi	r3,131
  817d9c:	18e7ad04 	addi	r3,r3,-24908
  817da0:	00bfffc4 	movi	r2,-1
  817da4:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
  817da8:	00c020f4 	movhi	r3,131
  817dac:	18e7ad04 	addi	r3,r3,-24908
  817db0:	00800044 	movi	r2,1
  817db4:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
  817db8:	e13fff17 	ldw	r4,-4(fp)
  817dbc:	0817de80 	call	817de8 <alt_up_sd_card_find_next>
  817dc0:	e0bfec0d 	sth	r2,-80(fp)
  817dc4:	00000206 	br	817dd0 <alt_up_sd_card_find_first+0xbc>
		}
		else
		{
			result = 1;
  817dc8:	00800044 	movi	r2,1
  817dcc:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
  817dd0:	e0bfec0f 	ldh	r2,-80(fp)
}
  817dd4:	e037883a 	mov	sp,fp
  817dd8:	dfc00117 	ldw	ra,4(sp)
  817ddc:	df000017 	ldw	fp,0(sp)
  817de0:	dec00204 	addi	sp,sp,8
  817de4:	f800283a 	ret

00817de8 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  817de8:	deffe404 	addi	sp,sp,-112
  817dec:	dfc01b15 	stw	ra,108(sp)
  817df0:	df001a15 	stw	fp,104(sp)
  817df4:	df001a04 	addi	fp,sp,104
  817df8:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
  817dfc:	00800084 	movi	r2,2
  817e00:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  817e04:	0817bd80 	call	817bd8 <alt_up_sd_card_is_Present>
  817e08:	1005003a 	cmpeq	r2,r2,zero
  817e0c:	1000da1e 	bne	r2,zero,818178 <alt_up_sd_card_find_next+0x390>
  817e10:	d0a73117 	ldw	r2,-25404(gp)
  817e14:	1005003a 	cmpeq	r2,r2,zero
  817e18:	1000d71e 	bne	r2,zero,818178 <alt_up_sd_card_find_next+0x390>
	{
		if (search_data.valid)
  817e1c:	008020f4 	movhi	r2,131
  817e20:	10a7ad04 	addi	r2,r2,-24908
  817e24:	10800417 	ldw	r2,16(r2)
  817e28:	1005003a 	cmpeq	r2,r2,zero
  817e2c:	1000d01e 	bne	r2,zero,818170 <alt_up_sd_card_find_next+0x388>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  817e30:	008020f4 	movhi	r2,131
  817e34:	10a7ad04 	addi	r2,r2,-24908
  817e38:	10800117 	ldw	r2,4(r2)
  817e3c:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0)
  817e40:	e0bfec17 	ldw	r2,-80(fp)
  817e44:	1004c03a 	cmpne	r2,r2,zero
  817e48:	1000511e 	bne	r2,zero,817f90 <alt_up_sd_card_find_next+0x1a8>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  817e4c:	008020f4 	movhi	r2,131
  817e50:	10a7b204 	addi	r2,r2,-24888
  817e54:	1080050b 	ldhu	r2,20(r2)
  817e58:	10bfffcc 	andi	r2,r2,65535
  817e5c:	1008917a 	slli	r4,r2,5
  817e60:	008020f4 	movhi	r2,131
  817e64:	10a7b204 	addi	r2,r2,-24888
  817e68:	1080030b 	ldhu	r2,12(r2)
  817e6c:	117fffcc 	andi	r5,r2,65535
  817e70:	0809a4c0 	call	809a4c <__divsi3>
  817e74:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
  817e78:	008020f4 	movhi	r2,131
  817e7c:	10a7ad04 	addi	r2,r2,-24908
  817e80:	10800217 	ldw	r2,8(r2)
  817e84:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector+1;
  817e88:	008020f4 	movhi	r2,131
  817e8c:	10a7ad04 	addi	r2,r2,-24908
  817e90:	1080030b 	ldhu	r2,12(r2)
  817e94:	10bfffcc 	andi	r2,r2,65535
  817e98:	10a0001c 	xori	r2,r2,32768
  817e9c:	10a00004 	addi	r2,r2,-32768
  817ea0:	10800044 	addi	r2,r2,1
  817ea4:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
  817ea8:	00003306 	br	817f78 <alt_up_sd_card_find_next+0x190>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  817eac:	008020f4 	movhi	r2,131
  817eb0:	10a7b204 	addi	r2,r2,-24888
  817eb4:	10c01317 	ldw	r3,76(r2)
  817eb8:	e0bfea17 	ldw	r2,-88(fp)
  817ebc:	1885883a 	add	r2,r3,r2
  817ec0:	1009883a 	mov	r4,r2
  817ec4:	d1673817 	ldw	r5,-25376(gp)
  817ec8:	0814ec80 	call	814ec8 <Read_Sector_Data>
  817ecc:	1005003a 	cmpeq	r2,r2,zero
  817ed0:	10002c1e 	bne	r2,zero,817f84 <alt_up_sd_card_find_next+0x19c>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  817ed4:	00002106 	br	817f5c <alt_up_sd_card_find_next+0x174>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
  817ed8:	e0bfe917 	ldw	r2,-92(fp)
  817edc:	1008917a 	slli	r4,r2,5
  817ee0:	e1ffea17 	ldw	r7,-88(fp)
  817ee4:	e17fee04 	addi	r5,fp,-72
  817ee8:	000d883a 	mov	r6,zero
  817eec:	08153100 	call	815310 <Read_File_Record_At_Offset>
  817ef0:	1005003a 	cmpeq	r2,r2,zero
  817ef4:	1000161e 	bne	r2,zero,817f50 <alt_up_sd_card_find_next+0x168>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  817ef8:	e0bfee03 	ldbu	r2,-72(fp)
  817efc:	10803fcc 	andi	r2,r2,255
  817f00:	1005003a 	cmpeq	r2,r2,zero
  817f04:	1000121e 	bne	r2,zero,817f50 <alt_up_sd_card_find_next+0x168>
  817f08:	e0bfee03 	ldbu	r2,-72(fp)
  817f0c:	10803fcc 	andi	r2,r2,255
  817f10:	10803960 	cmpeqi	r2,r2,229
  817f14:	10000e1e 	bne	r2,zero,817f50 <alt_up_sd_card_find_next+0x168>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
  817f18:	e0bfe917 	ldw	r2,-92(fp)
  817f1c:	1007883a 	mov	r3,r2
  817f20:	008020f4 	movhi	r2,131
  817f24:	10a7ad04 	addi	r2,r2,-24908
  817f28:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
  817f2c:	e0ffea17 	ldw	r3,-88(fp)
  817f30:	008020f4 	movhi	r2,131
  817f34:	10a7ad04 	addi	r2,r2,-24908
  817f38:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
  817f3c:	e13fee04 	addi	r4,fp,-72
  817f40:	e17ffe17 	ldw	r5,-8(fp)
  817f44:	08179c00 	call	8179c0 <copy_file_record_name_to_string>
									return 0;
  817f48:	e03fff15 	stw	zero,-4(fp)
  817f4c:	00008c06 	br	818180 <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  817f50:	e0bfe917 	ldw	r2,-92(fp)
  817f54:	10800044 	addi	r2,r2,1
  817f58:	e0bfe915 	stw	r2,-92(fp)
  817f5c:	e0bfe917 	ldw	r2,-92(fp)
  817f60:	10800410 	cmplti	r2,r2,16
  817f64:	103fdc1e 	bne	r2,zero,817ed8 <alt_up_sd_card_find_next+0xf0>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
  817f68:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
  817f6c:	e0bfea17 	ldw	r2,-88(fp)
  817f70:	10800044 	addi	r2,r2,1
  817f74:	e0bfea15 	stw	r2,-88(fp)
  817f78:	e0ffea17 	ldw	r3,-88(fp)
  817f7c:	e0bfeb17 	ldw	r2,-84(fp)
  817f80:	18bfca16 	blt	r3,r2,817eac <alt_up_sd_card_find_next+0xc4>
					else
					{
						break;
					}
				}
				result = -1;
  817f84:	00bfffc4 	movi	r2,-1
  817f88:	e0bfed0d 	sth	r2,-76(fp)
  817f8c:	00007a06 	br	818178 <alt_up_sd_card_find_next+0x390>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
  817f90:	008020f4 	movhi	r2,131
  817f94:	10a7ad04 	addi	r2,r2,-24908
  817f98:	1080030b 	ldhu	r2,12(r2)
  817f9c:	10bfffcc 	andi	r2,r2,65535
  817fa0:	10a0001c 	xori	r2,r2,32768
  817fa4:	10a00004 	addi	r2,r2,-32768
  817fa8:	10800044 	addi	r2,r2,1
  817fac:	e0bfe815 	stw	r2,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  817fb0:	e0bfec17 	ldw	r2,-80(fp)
  817fb4:	113fff84 	addi	r4,r2,-2
  817fb8:	008020f4 	movhi	r2,131
  817fbc:	10a7b204 	addi	r2,r2,-24888
  817fc0:	10800383 	ldbu	r2,14(r2)
  817fc4:	11403fcc 	andi	r5,r2,255
  817fc8:	0809b1c0 	call	809b1c <__mulsi3>
  817fcc:	1007883a 	mov	r3,r2
  817fd0:	008020f4 	movhi	r2,131
  817fd4:	10a7b204 	addi	r2,r2,-24888
  817fd8:	10801417 	ldw	r2,80(r2)
  817fdc:	1885883a 	add	r2,r3,r2
  817fe0:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
  817fe4:	008020f4 	movhi	r2,131
  817fe8:	10a7ad04 	addi	r2,r2,-24908
  817fec:	10800217 	ldw	r2,8(r2)
  817ff0:	e0bfe615 	stw	r2,-104(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  817ff4:	00003406 	br	8180c8 <alt_up_sd_card_find_next+0x2e0>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  817ff8:	e0ffe617 	ldw	r3,-104(fp)
  817ffc:	e0bfe717 	ldw	r2,-100(fp)
  818000:	1889883a 	add	r4,r3,r2
  818004:	d1673817 	ldw	r5,-25376(gp)
  818008:	0814ec80 	call	814ec8 <Read_Sector_Data>
  81800c:	1005003a 	cmpeq	r2,r2,zero
  818010:	1000331e 	bne	r2,zero,8180e0 <alt_up_sd_card_find_next+0x2f8>
						{        
							for (; file_counter < 16; file_counter++)
  818014:	00002506 	br	8180ac <alt_up_sd_card_find_next+0x2c4>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
  818018:	e0bfe817 	ldw	r2,-96(fp)
  81801c:	1008917a 	slli	r4,r2,5
  818020:	e1bfec17 	ldw	r6,-80(fp)
  818024:	e1ffe617 	ldw	r7,-104(fp)
  818028:	e17fee04 	addi	r5,fp,-72
  81802c:	08153100 	call	815310 <Read_File_Record_At_Offset>
  818030:	1005003a 	cmpeq	r2,r2,zero
  818034:	10001a1e 	bne	r2,zero,8180a0 <alt_up_sd_card_find_next+0x2b8>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  818038:	e0bfee03 	ldbu	r2,-72(fp)
  81803c:	10803fcc 	andi	r2,r2,255
  818040:	1005003a 	cmpeq	r2,r2,zero
  818044:	1000161e 	bne	r2,zero,8180a0 <alt_up_sd_card_find_next+0x2b8>
  818048:	e0bfee03 	ldbu	r2,-72(fp)
  81804c:	10803fcc 	andi	r2,r2,255
  818050:	10803960 	cmpeqi	r2,r2,229
  818054:	1000121e 	bne	r2,zero,8180a0 <alt_up_sd_card_find_next+0x2b8>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
  818058:	e0ffec17 	ldw	r3,-80(fp)
  81805c:	008020f4 	movhi	r2,131
  818060:	10a7ad04 	addi	r2,r2,-24908
  818064:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
  818068:	e0bfe817 	ldw	r2,-96(fp)
  81806c:	1007883a 	mov	r3,r2
  818070:	008020f4 	movhi	r2,131
  818074:	10a7ad04 	addi	r2,r2,-24908
  818078:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
  81807c:	e0ffe617 	ldw	r3,-104(fp)
  818080:	008020f4 	movhi	r2,131
  818084:	10a7ad04 	addi	r2,r2,-24908
  818088:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
  81808c:	e13fee04 	addi	r4,fp,-72
  818090:	e17ffe17 	ldw	r5,-8(fp)
  818094:	08179c00 	call	8179c0 <copy_file_record_name_to_string>
										return 0;
  818098:	e03fff15 	stw	zero,-4(fp)
  81809c:	00003806 	br	818180 <alt_up_sd_card_find_next+0x398>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
  8180a0:	e0bfe817 	ldw	r2,-96(fp)
  8180a4:	10800044 	addi	r2,r2,1
  8180a8:	e0bfe815 	stw	r2,-96(fp)
  8180ac:	e0bfe817 	ldw	r2,-96(fp)
  8180b0:	10800410 	cmplti	r2,r2,16
  8180b4:	103fd81e 	bne	r2,zero,818018 <alt_up_sd_card_find_next+0x230>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
  8180b8:	e03fe815 	stw	zero,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8180bc:	e0bfe617 	ldw	r2,-104(fp)
  8180c0:	10800044 	addi	r2,r2,1
  8180c4:	e0bfe615 	stw	r2,-104(fp)
  8180c8:	008020f4 	movhi	r2,131
  8180cc:	10a7b204 	addi	r2,r2,-24888
  8180d0:	10800383 	ldbu	r2,14(r2)
  8180d4:	10c03fcc 	andi	r3,r2,255
  8180d8:	e0bfe617 	ldw	r2,-104(fp)
  8180dc:	10ffc616 	blt	r2,r3,817ff8 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
  8180e0:	008020f4 	movhi	r2,131
  8180e4:	10a7b204 	addi	r2,r2,-24888
  8180e8:	10800383 	ldbu	r2,14(r2)
  8180ec:	10c03fcc 	andi	r3,r2,255
  8180f0:	e0bfe617 	ldw	r2,-104(fp)
  8180f4:	10c01a16 	blt	r2,r3,818160 <alt_up_sd_card_find_next+0x378>
					{
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
  8180f8:	e13fec17 	ldw	r4,-80(fp)
  8180fc:	e17fed84 	addi	r5,fp,-74
  818100:	0814fc40 	call	814fc4 <get_cluster_flag>
  818104:	1005003a 	cmpeq	r2,r2,zero
  818108:	1000131e 	bne	r2,zero,818158 <alt_up_sd_card_find_next+0x370>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  81810c:	e0bfed8b 	ldhu	r2,-74(fp)
  818110:	10bfffcc 	andi	r2,r2,65535
  818114:	10a0001c 	xori	r2,r2,32768
  818118:	10a00004 	addi	r2,r2,-32768
  81811c:	10fffe0c 	andi	r3,r2,65528
  818120:	00bffe14 	movui	r2,65528
  818124:	1880051e 	bne	r3,r2,81813c <alt_up_sd_card_find_next+0x354>
							{
								result = -1;
  818128:	00bfffc4 	movi	r2,-1
  81812c:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
  818130:	008020f4 	movhi	r2,131
  818134:	10a7ad04 	addi	r2,r2,-24908
  818138:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
  81813c:	e0bfed8b 	ldhu	r2,-74(fp)
  818140:	10bfffcc 	andi	r2,r2,65535
  818144:	10a0001c 	xori	r2,r2,32768
  818148:	10a00004 	addi	r2,r2,-32768
  81814c:	10bffe0c 	andi	r2,r2,65528
  818150:	e0bfec15 	stw	r2,-80(fp)
  818154:	00000206 	br	818160 <alt_up_sd_card_find_next+0x378>
						}
						else
						{
							// Error encountered.                 
							result = -1;
  818158:	00bfffc4 	movi	r2,-1
  81815c:	e0bfed0d 	sth	r2,-76(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
  818160:	e0ffec17 	ldw	r3,-80(fp)
  818164:	00bffdd4 	movui	r2,65527
  818168:	10ff910e 	bge	r2,r3,817fb0 <alt_up_sd_card_find_next+0x1c8>
  81816c:	00000206 	br	818178 <alt_up_sd_card_find_next+0x390>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
  818170:	008000c4 	movi	r2,3
  818174:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
  818178:	e0bfed0f 	ldh	r2,-76(fp)
  81817c:	e0bfff15 	stw	r2,-4(fp)
  818180:	e0bfff17 	ldw	r2,-4(fp)
}
  818184:	e037883a 	mov	sp,fp
  818188:	dfc00117 	ldw	ra,4(sp)
  81818c:	df000017 	ldw	fp,0(sp)
  818190:	dec00204 	addi	sp,sp,8
  818194:	f800283a 	ret

00818198 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  818198:	deffe804 	addi	sp,sp,-96
  81819c:	dfc01715 	stw	ra,92(sp)
  8181a0:	df001615 	stw	fp,88(sp)
  8181a4:	df001604 	addi	fp,sp,88
  8181a8:	e13ffd15 	stw	r4,-12(fp)
  8181ac:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
  8181b0:	00bfffc4 	movi	r2,-1
  8181b4:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  8181b8:	0817bd80 	call	817bd8 <alt_up_sd_card_is_Present>
  8181bc:	1005003a 	cmpeq	r2,r2,zero
  8181c0:	1000d71e 	bne	r2,zero,818520 <alt_up_sd_card_fopen+0x388>
  8181c4:	d0a73117 	ldw	r2,-25404(gp)
  8181c8:	1005003a 	cmpeq	r2,r2,zero
  8181cc:	1000d41e 	bne	r2,zero,818520 <alt_up_sd_card_fopen+0x388>
	{
        unsigned int home_directory_cluster = 0;
  8181d0:	e03fec15 	stw	zero,-80(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
  8181d4:	e13ffd17 	ldw	r4,-12(fp)
  8181d8:	0815f8c0 	call	815f8c <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
  8181dc:	e13ffd17 	ldw	r4,-12(fp)
  8181e0:	081605c0 	call	81605c <check_file_name_for_FAT16_compliance>
  8181e4:	1005003a 	cmpeq	r2,r2,zero
  8181e8:	1000cd1e 	bne	r2,zero,818520 <alt_up_sd_card_fopen+0x388>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, &home_directory_cluster, &home_dir))
  8181ec:	e17fec04 	addi	r5,fp,-80
  8181f0:	e1bfed04 	addi	r6,fp,-76
  8181f4:	e13ffd17 	ldw	r4,-12(fp)
  8181f8:	08166980 	call	816698 <get_home_directory_cluster_for_file>
  8181fc:	1004c03a 	cmpne	r2,r2,zero
  818200:	1000031e 	bne	r2,zero,818210 <alt_up_sd_card_fopen+0x78>
            {
                return file_record_index;
  818204:	e0bfeb0f 	ldh	r2,-84(fp)
  818208:	e0bfff15 	stw	r2,-4(fp)
  81820c:	0000c606 	br	818528 <alt_up_sd_card_fopen+0x390>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
  818210:	e03fea15 	stw	zero,-88(fp)
  818214:	00000f06 	br	818254 <alt_up_sd_card_fopen+0xbc>
    		{
    			if (active_files[index].in_use == false)
  818218:	e0bfea17 	ldw	r2,-88(fp)
  81821c:	00c020f4 	movhi	r3,131
  818220:	18e7c704 	addi	r3,r3,-24804
  818224:	100491ba 	slli	r2,r2,6
  818228:	10c5883a 	add	r2,r2,r3
  81822c:	10800f04 	addi	r2,r2,60
  818230:	10800017 	ldw	r2,0(r2)
  818234:	1004c03a 	cmpne	r2,r2,zero
  818238:	1000031e 	bne	r2,zero,818248 <alt_up_sd_card_fopen+0xb0>
    			{
    				file_record_index = index;
  81823c:	e0bfea17 	ldw	r2,-88(fp)
  818240:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
  818244:	00000606 	br	818260 <alt_up_sd_card_fopen+0xc8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
  818248:	e0bfea17 	ldw	r2,-88(fp)
  81824c:	10800044 	addi	r2,r2,1
  818250:	e0bfea15 	stw	r2,-88(fp)
  818254:	e0bfea17 	ldw	r2,-88(fp)
  818258:	10800510 	cmplti	r2,r2,20
  81825c:	103fee1e 	bne	r2,zero,818218 <alt_up_sd_card_fopen+0x80>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
  818260:	e0bfeb0f 	ldh	r2,-84(fp)
  818264:	1004803a 	cmplt	r2,r2,zero
  818268:	1000ad1e 	bne	r2,zero,818520 <alt_up_sd_card_fopen+0x388>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
  81826c:	e0bfec17 	ldw	r2,-80(fp)
  818270:	1009883a 	mov	r4,r2
  818274:	e0bfeb0f 	ldh	r2,-84(fp)
  818278:	100491ba 	slli	r2,r2,6
  81827c:	1007883a 	mov	r3,r2
  818280:	008020f4 	movhi	r2,131
  818284:	10a7c704 	addi	r2,r2,-24804
  818288:	188d883a 	add	r6,r3,r2
  81828c:	e17ffd17 	ldw	r5,-12(fp)
  818290:	0816bac0 	call	816bac <find_file_in_directory>
  818294:	1005003a 	cmpeq	r2,r2,zero
  818298:	10007d1e 	bne	r2,zero,818490 <alt_up_sd_card_fopen+0x2f8>
                {
                    if (create)
  81829c:	e0bffe17 	ldw	r2,-8(fp)
  8182a0:	1005003a 	cmpeq	r2,r2,zero
  8182a4:	1000031e 	bne	r2,zero,8182b4 <alt_up_sd_card_fopen+0x11c>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
  8182a8:	00bfffc4 	movi	r2,-1
  8182ac:	e0bfff15 	stw	r2,-4(fp)
  8182b0:	00009d06 	br	818528 <alt_up_sd_card_fopen+0x390>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
  8182b4:	e17feb0f 	ldh	r5,-84(fp)
  8182b8:	e0bfeb0f 	ldh	r2,-84(fp)
  8182bc:	00c020f4 	movhi	r3,131
  8182c0:	18e7c704 	addi	r3,r3,-24804
  8182c4:	100491ba 	slli	r2,r2,6
  8182c8:	10c5883a 	add	r2,r2,r3
  8182cc:	10800504 	addi	r2,r2,20
  8182d0:	1080008b 	ldhu	r2,2(r2)
  8182d4:	113fffcc 	andi	r4,r2,65535
  8182d8:	00c020f4 	movhi	r3,131
  8182dc:	18e7c704 	addi	r3,r3,-24804
  8182e0:	280491ba 	slli	r2,r5,6
  8182e4:	10c5883a 	add	r2,r2,r3
  8182e8:	10800704 	addi	r2,r2,28
  8182ec:	11000015 	stw	r4,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
  8182f0:	e0bfeb0f 	ldh	r2,-84(fp)
  8182f4:	00c020f4 	movhi	r3,131
  8182f8:	18e7c704 	addi	r3,r3,-24804
  8182fc:	100491ba 	slli	r2,r2,6
  818300:	10c5883a 	add	r2,r2,r3
  818304:	10800804 	addi	r2,r2,32
  818308:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
  81830c:	e0bfeb0f 	ldh	r2,-84(fp)
  818310:	00c020f4 	movhi	r3,131
  818314:	18e7c704 	addi	r3,r3,-24804
  818318:	100491ba 	slli	r2,r2,6
  81831c:	10c5883a 	add	r2,r2,r3
  818320:	10800904 	addi	r2,r2,36
  818324:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
  818328:	e0bfeb0f 	ldh	r2,-84(fp)
  81832c:	00c020f4 	movhi	r3,131
  818330:	18e7c704 	addi	r3,r3,-24804
  818334:	100491ba 	slli	r2,r2,6
  818338:	10c5883a 	add	r2,r2,r3
  81833c:	10c00f04 	addi	r3,r2,60
  818340:	00800044 	movi	r2,1
  818344:	18800015 	stw	r2,0(r3)
    				active_files[file_record_index].modified = false;
  818348:	e0bfeb0f 	ldh	r2,-84(fp)
  81834c:	00c020f4 	movhi	r3,131
  818350:	18e7c704 	addi	r3,r3,-24804
  818354:	100491ba 	slli	r2,r2,6
  818358:	10c5883a 	add	r2,r2,r3
  81835c:	10800e04 	addi	r2,r2,56
  818360:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
  818364:	e03fea15 	stw	zero,-88(fp)
  818368:	00004506 	br	818480 <alt_up_sd_card_fopen+0x2e8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
  81836c:	e0ffeb0f 	ldh	r3,-84(fp)
  818370:	e0bfea17 	ldw	r2,-88(fp)
  818374:	18803f26 	beq	r3,r2,818474 <alt_up_sd_card_fopen+0x2dc>
  818378:	e0bfea17 	ldw	r2,-88(fp)
  81837c:	00c020f4 	movhi	r3,131
  818380:	18e7c704 	addi	r3,r3,-24804
  818384:	100491ba 	slli	r2,r2,6
  818388:	10c5883a 	add	r2,r2,r3
  81838c:	10800f04 	addi	r2,r2,60
  818390:	10800017 	ldw	r2,0(r2)
  818394:	10800058 	cmpnei	r2,r2,1
  818398:	1000361e 	bne	r2,zero,818474 <alt_up_sd_card_fopen+0x2dc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
  81839c:	e0bfeb0f 	ldh	r2,-84(fp)
  8183a0:	00c020f4 	movhi	r3,131
  8183a4:	18e7c704 	addi	r3,r3,-24804
  8183a8:	100491ba 	slli	r2,r2,6
  8183ac:	10c5883a 	add	r2,r2,r3
  8183b0:	10800a04 	addi	r2,r2,40
  8183b4:	11000017 	ldw	r4,0(r2)
  8183b8:	e0bfea17 	ldw	r2,-88(fp)
  8183bc:	00c020f4 	movhi	r3,131
  8183c0:	18e7c704 	addi	r3,r3,-24804
  8183c4:	100491ba 	slli	r2,r2,6
  8183c8:	10c5883a 	add	r2,r2,r3
  8183cc:	10800a04 	addi	r2,r2,40
  8183d0:	10800017 	ldw	r2,0(r2)
  8183d4:	2080271e 	bne	r4,r2,818474 <alt_up_sd_card_fopen+0x2dc>
  8183d8:	e0bfeb0f 	ldh	r2,-84(fp)
  8183dc:	00c020f4 	movhi	r3,131
  8183e0:	18e7c704 	addi	r3,r3,-24804
  8183e4:	100491ba 	slli	r2,r2,6
  8183e8:	10c5883a 	add	r2,r2,r3
  8183ec:	10800b04 	addi	r2,r2,44
  8183f0:	11000017 	ldw	r4,0(r2)
  8183f4:	e0bfea17 	ldw	r2,-88(fp)
  8183f8:	00c020f4 	movhi	r3,131
  8183fc:	18e7c704 	addi	r3,r3,-24804
  818400:	100491ba 	slli	r2,r2,6
  818404:	10c5883a 	add	r2,r2,r3
  818408:	10800b04 	addi	r2,r2,44
  81840c:	10800017 	ldw	r2,0(r2)
  818410:	2080181e 	bne	r4,r2,818474 <alt_up_sd_card_fopen+0x2dc>
  818414:	e0bfeb0f 	ldh	r2,-84(fp)
  818418:	00c020f4 	movhi	r3,131
  81841c:	18e7c704 	addi	r3,r3,-24804
  818420:	100491ba 	slli	r2,r2,6
  818424:	10c5883a 	add	r2,r2,r3
  818428:	10800c04 	addi	r2,r2,48
  81842c:	1100000b 	ldhu	r4,0(r2)
  818430:	e0bfea17 	ldw	r2,-88(fp)
  818434:	00c020f4 	movhi	r3,131
  818438:	18e7c704 	addi	r3,r3,-24804
  81843c:	100491ba 	slli	r2,r2,6
  818440:	10c5883a 	add	r2,r2,r3
  818444:	10800c04 	addi	r2,r2,48
  818448:	1080000b 	ldhu	r2,0(r2)
  81844c:	20ffffcc 	andi	r3,r4,65535
  818450:	18e0001c 	xori	r3,r3,32768
  818454:	18e00004 	addi	r3,r3,-32768
  818458:	10bfffcc 	andi	r2,r2,65535
  81845c:	10a0001c 	xori	r2,r2,32768
  818460:	10a00004 	addi	r2,r2,-32768
  818464:	1880031e 	bne	r3,r2,818474 <alt_up_sd_card_fopen+0x2dc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
  818468:	00bfff84 	movi	r2,-2
  81846c:	e0bfeb0d 	sth	r2,-84(fp)
								break;
  818470:	00002b06 	br	818520 <alt_up_sd_card_fopen+0x388>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
  818474:	e0bfea17 	ldw	r2,-88(fp)
  818478:	10800044 	addi	r2,r2,1
  81847c:	e0bfea15 	stw	r2,-88(fp)
  818480:	e0bfea17 	ldw	r2,-88(fp)
  818484:	10800510 	cmplti	r2,r2,20
  818488:	103fb81e 	bne	r2,zero,81836c <alt_up_sd_card_fopen+0x1d4>
  81848c:	00002406 	br	818520 <alt_up_sd_card_fopen+0x388>
							}
						}
					}

                }
                else if (create)
  818490:	e0bffe17 	ldw	r2,-8(fp)
  818494:	1005003a 	cmpeq	r2,r2,zero
  818498:	10001f1e 	bne	r2,zero,818518 <alt_up_sd_card_fopen+0x380>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
  81849c:	e0bfeb0f 	ldh	r2,-84(fp)
  8184a0:	100491ba 	slli	r2,r2,6
  8184a4:	1007883a 	mov	r3,r2
  8184a8:	008020f4 	movhi	r2,131
  8184ac:	10a7c704 	addi	r2,r2,-24804
  8184b0:	188b883a 	add	r5,r3,r2
  8184b4:	e1bfed04 	addi	r6,fp,-76
  8184b8:	e13ffd17 	ldw	r4,-12(fp)
  8184bc:	08176e40 	call	8176e4 <create_file>
  8184c0:	1005003a 	cmpeq	r2,r2,zero
  8184c4:	1000111e 	bne	r2,zero,81850c <alt_up_sd_card_fopen+0x374>
                    {
                        active_files[file_record_index].in_use = true;
  8184c8:	e0bfeb0f 	ldh	r2,-84(fp)
  8184cc:	00c020f4 	movhi	r3,131
  8184d0:	18e7c704 	addi	r3,r3,-24804
  8184d4:	100491ba 	slli	r2,r2,6
  8184d8:	10c5883a 	add	r2,r2,r3
  8184dc:	10c00f04 	addi	r3,r2,60
  8184e0:	00800044 	movi	r2,1
  8184e4:	18800015 	stw	r2,0(r3)
    					active_files[file_record_index].modified = true;
  8184e8:	e0bfeb0f 	ldh	r2,-84(fp)
  8184ec:	00c020f4 	movhi	r3,131
  8184f0:	18e7c704 	addi	r3,r3,-24804
  8184f4:	100491ba 	slli	r2,r2,6
  8184f8:	10c5883a 	add	r2,r2,r3
  8184fc:	10c00e04 	addi	r3,r2,56
  818500:	00800044 	movi	r2,1
  818504:	18800015 	stw	r2,0(r3)
  818508:	00000506 	br	818520 <alt_up_sd_card_fopen+0x388>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
  81850c:	00bfffc4 	movi	r2,-1
  818510:	e0bfeb0d 	sth	r2,-84(fp)
  818514:	00000206 	br	818520 <alt_up_sd_card_fopen+0x388>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
  818518:	00bfffc4 	movi	r2,-1
  81851c:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
  818520:	e0bfeb0f 	ldh	r2,-84(fp)
  818524:	e0bfff15 	stw	r2,-4(fp)
  818528:	e0bfff17 	ldw	r2,-4(fp)
}
  81852c:	e037883a 	mov	sp,fp
  818530:	dfc00117 	ldw	ra,4(sp)
  818534:	df000017 	ldw	fp,0(sp)
  818538:	dec00204 	addi	sp,sp,8
  81853c:	f800283a 	ret

00818540 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  818540:	defffd04 	addi	sp,sp,-12
  818544:	df000215 	stw	fp,8(sp)
  818548:	df000204 	addi	fp,sp,8
  81854c:	e13ffe0d 	sth	r4,-8(fp)
  818550:	e17fff0d 	sth	r5,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  818554:	e0bffe0f 	ldh	r2,-8(fp)
  818558:	1004803a 	cmplt	r2,r2,zero
  81855c:	1000181e 	bne	r2,zero,8185c0 <alt_up_sd_card_set_attributes+0x80>
  818560:	e0bffe0f 	ldh	r2,-8(fp)
  818564:	10800508 	cmpgei	r2,r2,20
  818568:	1000151e 	bne	r2,zero,8185c0 <alt_up_sd_card_set_attributes+0x80>
    {
        if (active_files[file_handle].in_use)
  81856c:	e0bffe0f 	ldh	r2,-8(fp)
  818570:	00c020f4 	movhi	r3,131
  818574:	18e7c704 	addi	r3,r3,-24804
  818578:	100491ba 	slli	r2,r2,6
  81857c:	10c5883a 	add	r2,r2,r3
  818580:	10800f04 	addi	r2,r2,60
  818584:	10800017 	ldw	r2,0(r2)
  818588:	1005003a 	cmpeq	r2,r2,zero
  81858c:	10000c1e 	bne	r2,zero,8185c0 <alt_up_sd_card_set_attributes+0x80>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
  818590:	e17ffe0f 	ldh	r5,-8(fp)
  818594:	e0bfff0b 	ldhu	r2,-4(fp)
  818598:	1007883a 	mov	r3,r2
  81859c:	00bfffc4 	movi	r2,-1
  8185a0:	1884703a 	and	r2,r3,r2
  8185a4:	1009883a 	mov	r4,r2
  8185a8:	00c020f4 	movhi	r3,131
  8185ac:	18e7c704 	addi	r3,r3,-24804
  8185b0:	280491ba 	slli	r2,r5,6
  8185b4:	10c5883a 	add	r2,r2,r3
  8185b8:	10800204 	addi	r2,r2,8
  8185bc:	110000c5 	stb	r4,3(r2)
        }
    }
}
  8185c0:	e037883a 	mov	sp,fp
  8185c4:	df000017 	ldw	fp,0(sp)
  8185c8:	dec00104 	addi	sp,sp,4
  8185cc:	f800283a 	ret

008185d0 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  8185d0:	defffd04 	addi	sp,sp,-12
  8185d4:	df000215 	stw	fp,8(sp)
  8185d8:	df000204 	addi	fp,sp,8
  8185dc:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
  8185e0:	00bfffc4 	movi	r2,-1
  8185e4:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  8185e8:	e0bfff0f 	ldh	r2,-4(fp)
  8185ec:	1004803a 	cmplt	r2,r2,zero
  8185f0:	1000151e 	bne	r2,zero,818648 <alt_up_sd_card_get_attributes+0x78>
  8185f4:	e0bfff0f 	ldh	r2,-4(fp)
  8185f8:	10800508 	cmpgei	r2,r2,20
  8185fc:	1000121e 	bne	r2,zero,818648 <alt_up_sd_card_get_attributes+0x78>
    {
        if (active_files[file_handle].in_use)
  818600:	e0bfff0f 	ldh	r2,-4(fp)
  818604:	00c020f4 	movhi	r3,131
  818608:	18e7c704 	addi	r3,r3,-24804
  81860c:	100491ba 	slli	r2,r2,6
  818610:	10c5883a 	add	r2,r2,r3
  818614:	10800f04 	addi	r2,r2,60
  818618:	10800017 	ldw	r2,0(r2)
  81861c:	1005003a 	cmpeq	r2,r2,zero
  818620:	1000091e 	bne	r2,zero,818648 <alt_up_sd_card_get_attributes+0x78>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
  818624:	e0bfff0f 	ldh	r2,-4(fp)
  818628:	00c020f4 	movhi	r3,131
  81862c:	18e7c704 	addi	r3,r3,-24804
  818630:	100491ba 	slli	r2,r2,6
  818634:	10c5883a 	add	r2,r2,r3
  818638:	10800204 	addi	r2,r2,8
  81863c:	108000c3 	ldbu	r2,3(r2)
  818640:	10803fcc 	andi	r2,r2,255
  818644:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
  818648:	e0bffe0f 	ldh	r2,-8(fp)
}
  81864c:	e037883a 	mov	sp,fp
  818650:	df000017 	ldw	fp,0(sp)
  818654:	dec00104 	addi	sp,sp,4
  818658:	f800283a 	ret

0081865c <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  81865c:	defff904 	addi	sp,sp,-28
  818660:	dfc00615 	stw	ra,24(sp)
  818664:	df000515 	stw	fp,20(sp)
  818668:	dc000415 	stw	r16,16(sp)
  81866c:	df000404 	addi	fp,sp,16
  818670:	e13ffe0d 	sth	r4,-8(fp)
    short int ch = -1;
  818674:	00bfffc4 	movi	r2,-1
  818678:	e0bffd0d 	sth	r2,-12(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  81867c:	e0bffe0f 	ldh	r2,-8(fp)
  818680:	1004803a 	cmplt	r2,r2,zero
  818684:	1000d31e 	bne	r2,zero,8189d4 <alt_up_sd_card_read+0x378>
  818688:	e0bffe0f 	ldh	r2,-8(fp)
  81868c:	10800508 	cmpgei	r2,r2,20
  818690:	1000d01e 	bne	r2,zero,8189d4 <alt_up_sd_card_read+0x378>
    {
        if (active_files[file_handle].in_use)
  818694:	e0bffe0f 	ldh	r2,-8(fp)
  818698:	00c020f4 	movhi	r3,131
  81869c:	18e7c704 	addi	r3,r3,-24804
  8186a0:	100491ba 	slli	r2,r2,6
  8186a4:	10c5883a 	add	r2,r2,r3
  8186a8:	10800f04 	addi	r2,r2,60
  8186ac:	10800017 	ldw	r2,0(r2)
  8186b0:	1005003a 	cmpeq	r2,r2,zero
  8186b4:	1000c71e 	bne	r2,zero,8189d4 <alt_up_sd_card_read+0x378>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  8186b8:	e0bffe0f 	ldh	r2,-8(fp)
  8186bc:	00c020f4 	movhi	r3,131
  8186c0:	18e7c704 	addi	r3,r3,-24804
  8186c4:	100491ba 	slli	r2,r2,6
  8186c8:	10c5883a 	add	r2,r2,r3
  8186cc:	10800904 	addi	r2,r2,36
  8186d0:	11000017 	ldw	r4,0(r2)
  8186d4:	e0bffe0f 	ldh	r2,-8(fp)
  8186d8:	00c020f4 	movhi	r3,131
  8186dc:	18e7c704 	addi	r3,r3,-24804
  8186e0:	100491ba 	slli	r2,r2,6
  8186e4:	10c5883a 	add	r2,r2,r3
  8186e8:	10800604 	addi	r2,r2,24
  8186ec:	10800017 	ldw	r2,0(r2)
  8186f0:	2080b82e 	bgeu	r4,r2,8189d4 <alt_up_sd_card_read+0x378>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                                  active_files[file_handle].current_sector_in_cluster;
  8186f4:	008020f4 	movhi	r2,131
  8186f8:	10a7b204 	addi	r2,r2,-24888
  8186fc:	14001417 	ldw	r16,80(r2)
  818700:	e0bffe0f 	ldh	r2,-8(fp)
  818704:	00c020f4 	movhi	r3,131
  818708:	18e7c704 	addi	r3,r3,-24804
  81870c:	100491ba 	slli	r2,r2,6
  818710:	10c5883a 	add	r2,r2,r3
  818714:	10800704 	addi	r2,r2,28
  818718:	10800017 	ldw	r2,0(r2)
  81871c:	113fff84 	addi	r4,r2,-2
  818720:	008020f4 	movhi	r2,131
  818724:	10a7b204 	addi	r2,r2,-24888
  818728:	10800383 	ldbu	r2,14(r2)
  81872c:	11403fcc 	andi	r5,r2,255
  818730:	0809b1c0 	call	809b1c <__mulsi3>
  818734:	8089883a 	add	r4,r16,r2
  818738:	e0bffe0f 	ldh	r2,-8(fp)
  81873c:	00c020f4 	movhi	r3,131
  818740:	18e7c704 	addi	r3,r3,-24804
  818744:	100491ba 	slli	r2,r2,6
  818748:	10c5883a 	add	r2,r2,r3
  81874c:	10800804 	addi	r2,r2,32
  818750:	10800017 	ldw	r2,0(r2)
  818754:	2085883a 	add	r2,r4,r2
  818758:	e0bffc15 	stw	r2,-16(fp)
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
  81875c:	e0bffe0f 	ldh	r2,-8(fp)
  818760:	00c020f4 	movhi	r3,131
  818764:	18e7c704 	addi	r3,r3,-24804
  818768:	100491ba 	slli	r2,r2,6
  81876c:	10c5883a 	add	r2,r2,r3
  818770:	10800904 	addi	r2,r2,36
  818774:	10800017 	ldw	r2,0(r2)
  818778:	1005003a 	cmpeq	r2,r2,zero
  81877c:	10006a1e 	bne	r2,zero,818928 <alt_up_sd_card_read+0x2cc>
  818780:	e0bffe0f 	ldh	r2,-8(fp)
  818784:	00c020f4 	movhi	r3,131
  818788:	18e7c704 	addi	r3,r3,-24804
  81878c:	100491ba 	slli	r2,r2,6
  818790:	10c5883a 	add	r2,r2,r3
  818794:	10800904 	addi	r2,r2,36
  818798:	10800017 	ldw	r2,0(r2)
  81879c:	10807fcc 	andi	r2,r2,511
  8187a0:	1004c03a 	cmpne	r2,r2,zero
  8187a4:	1000601e 	bne	r2,zero,818928 <alt_up_sd_card_read+0x2cc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  8187a8:	e0bffe0f 	ldh	r2,-8(fp)
  8187ac:	00c020f4 	movhi	r3,131
  8187b0:	18e7c704 	addi	r3,r3,-24804
  8187b4:	100491ba 	slli	r2,r2,6
  8187b8:	10c5883a 	add	r2,r2,r3
  8187bc:	10800804 	addi	r2,r2,32
  8187c0:	10c00017 	ldw	r3,0(r2)
  8187c4:	008020f4 	movhi	r2,131
  8187c8:	10a7b204 	addi	r2,r2,-24888
  8187cc:	10800383 	ldbu	r2,14(r2)
  8187d0:	10803fcc 	andi	r2,r2,255
  8187d4:	10bfffc4 	addi	r2,r2,-1
  8187d8:	1880411e 	bne	r3,r2,8188e0 <alt_up_sd_card_read+0x284>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  8187dc:	e0bffe0f 	ldh	r2,-8(fp)
  8187e0:	00c020f4 	movhi	r3,131
  8187e4:	18e7c704 	addi	r3,r3,-24804
  8187e8:	100491ba 	slli	r2,r2,6
  8187ec:	10c5883a 	add	r2,r2,r3
  8187f0:	10800704 	addi	r2,r2,28
  8187f4:	11000017 	ldw	r4,0(r2)
  8187f8:	e17ffd84 	addi	r5,fp,-10
  8187fc:	0814fc40 	call	814fc4 <get_cluster_flag>
  818800:	1005003a 	cmpeq	r2,r2,zero
  818804:	1000331e 	bne	r2,zero,8188d4 <alt_up_sd_card_read+0x278>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  818808:	e0bffd8b 	ldhu	r2,-10(fp)
  81880c:	10bfffcc 	andi	r2,r2,65535
  818810:	10fffe0c 	andi	r3,r2,65528
  818814:	00bffe14 	movui	r2,65528
  818818:	1880031e 	bne	r3,r2,818828 <alt_up_sd_card_read+0x1cc>
                            {
                                /* End of file */
                                return -1;
  81881c:	00bfffc4 	movi	r2,-1
  818820:	e0bfff15 	stw	r2,-4(fp)
  818824:	00006d06 	br	8189dc <alt_up_sd_card_read+0x380>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  818828:	e13ffe0f 	ldh	r4,-8(fp)
  81882c:	e0bffd8b 	ldhu	r2,-10(fp)
  818830:	117fffcc 	andi	r5,r2,65535
  818834:	00c020f4 	movhi	r3,131
  818838:	18e7c704 	addi	r3,r3,-24804
  81883c:	200491ba 	slli	r2,r4,6
  818840:	10c5883a 	add	r2,r2,r3
  818844:	10800704 	addi	r2,r2,28
  818848:	11400015 	stw	r5,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
  81884c:	e0bffe0f 	ldh	r2,-8(fp)
  818850:	00c020f4 	movhi	r3,131
  818854:	18e7c704 	addi	r3,r3,-24804
  818858:	100491ba 	slli	r2,r2,6
  81885c:	10c5883a 	add	r2,r2,r3
  818860:	10800804 	addi	r2,r2,32
  818864:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  818868:	008020f4 	movhi	r2,131
  81886c:	10a7b204 	addi	r2,r2,-24888
  818870:	14001417 	ldw	r16,80(r2)
  818874:	e0bffe0f 	ldh	r2,-8(fp)
  818878:	00c020f4 	movhi	r3,131
  81887c:	18e7c704 	addi	r3,r3,-24804
  818880:	100491ba 	slli	r2,r2,6
  818884:	10c5883a 	add	r2,r2,r3
  818888:	10800704 	addi	r2,r2,28
  81888c:	10800017 	ldw	r2,0(r2)
  818890:	113fff84 	addi	r4,r2,-2
  818894:	008020f4 	movhi	r2,131
  818898:	10a7b204 	addi	r2,r2,-24888
  81889c:	10800383 	ldbu	r2,14(r2)
  8188a0:	11403fcc 	andi	r5,r2,255
  8188a4:	0809b1c0 	call	809b1c <__mulsi3>
  8188a8:	8089883a 	add	r4,r16,r2
  8188ac:	e0bffe0f 	ldh	r2,-8(fp)
  8188b0:	00c020f4 	movhi	r3,131
  8188b4:	18e7c704 	addi	r3,r3,-24804
  8188b8:	100491ba 	slli	r2,r2,6
  8188bc:	10c5883a 	add	r2,r2,r3
  8188c0:	10800804 	addi	r2,r2,32
  8188c4:	10800017 	ldw	r2,0(r2)
  8188c8:	2085883a 	add	r2,r4,r2
  8188cc:	e0bffc15 	stw	r2,-16(fp)
  8188d0:	00001506 	br	818928 <alt_up_sd_card_read+0x2cc>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
  8188d4:	00bfff84 	movi	r2,-2
  8188d8:	e0bfff15 	stw	r2,-4(fp)
  8188dc:	00003f06 	br	8189dc <alt_up_sd_card_read+0x380>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  8188e0:	e17ffe0f 	ldh	r5,-8(fp)
  8188e4:	e0bffe0f 	ldh	r2,-8(fp)
  8188e8:	00c020f4 	movhi	r3,131
  8188ec:	18e7c704 	addi	r3,r3,-24804
  8188f0:	100491ba 	slli	r2,r2,6
  8188f4:	10c5883a 	add	r2,r2,r3
  8188f8:	10800804 	addi	r2,r2,32
  8188fc:	10800017 	ldw	r2,0(r2)
  818900:	11000044 	addi	r4,r2,1
  818904:	00c020f4 	movhi	r3,131
  818908:	18e7c704 	addi	r3,r3,-24804
  81890c:	280491ba 	slli	r2,r5,6
  818910:	10c5883a 	add	r2,r2,r3
  818914:	10800804 	addi	r2,r2,32
  818918:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
  81891c:	e0bffc17 	ldw	r2,-16(fp)
  818920:	10800044 	addi	r2,r2,1
  818924:	e0bffc15 	stw	r2,-16(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
  818928:	d0e73817 	ldw	r3,-25376(gp)
  81892c:	e0bffc17 	ldw	r2,-16(fp)
  818930:	1885883a 	add	r2,r3,r2
  818934:	1007883a 	mov	r3,r2
  818938:	d0a73c17 	ldw	r2,-25360(gp)
  81893c:	18800826 	beq	r3,r2,818960 <alt_up_sd_card_read+0x304>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  818940:	d1673817 	ldw	r5,-25376(gp)
  818944:	e13ffc17 	ldw	r4,-16(fp)
  818948:	0814ec80 	call	814ec8 <Read_Sector_Data>
  81894c:	1004c03a 	cmpne	r2,r2,zero
  818950:	1000031e 	bne	r2,zero,818960 <alt_up_sd_card_read+0x304>
                    {
						return -2;
  818954:	00bfff84 	movi	r2,-2
  818958:	e0bfff15 	stw	r2,-4(fp)
  81895c:	00001f06 	br	8189dc <alt_up_sd_card_read+0x380>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
  818960:	e0bffe0f 	ldh	r2,-8(fp)
  818964:	00c020f4 	movhi	r3,131
  818968:	18e7c704 	addi	r3,r3,-24804
  81896c:	100491ba 	slli	r2,r2,6
  818970:	10c5883a 	add	r2,r2,r3
  818974:	10800904 	addi	r2,r2,36
  818978:	10800017 	ldw	r2,0(r2)
  81897c:	10807fcc 	andi	r2,r2,511
  818980:	1007883a 	mov	r3,r2
  818984:	d0a73717 	ldw	r2,-25380(gp)
  818988:	1885883a 	add	r2,r3,r2
  81898c:	10800023 	ldbuio	r2,0(r2)
  818990:	10803fcc 	andi	r2,r2,255
  818994:	e0bffd0d 	sth	r2,-12(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  818998:	e17ffe0f 	ldh	r5,-8(fp)
  81899c:	e0bffe0f 	ldh	r2,-8(fp)
  8189a0:	00c020f4 	movhi	r3,131
  8189a4:	18e7c704 	addi	r3,r3,-24804
  8189a8:	100491ba 	slli	r2,r2,6
  8189ac:	10c5883a 	add	r2,r2,r3
  8189b0:	10800904 	addi	r2,r2,36
  8189b4:	10800017 	ldw	r2,0(r2)
  8189b8:	11000044 	addi	r4,r2,1
  8189bc:	00c020f4 	movhi	r3,131
  8189c0:	18e7c704 	addi	r3,r3,-24804
  8189c4:	280491ba 	slli	r2,r5,6
  8189c8:	10c5883a 	add	r2,r2,r3
  8189cc:	10800904 	addi	r2,r2,36
  8189d0:	11000015 	stw	r4,0(r2)
            }
        }
    }
    
    return ch;
  8189d4:	e0bffd0f 	ldh	r2,-12(fp)
  8189d8:	e0bfff15 	stw	r2,-4(fp)
  8189dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8189e0:	e037883a 	mov	sp,fp
  8189e4:	dfc00217 	ldw	ra,8(sp)
  8189e8:	df000117 	ldw	fp,4(sp)
  8189ec:	dc000017 	ldw	r16,0(sp)
  8189f0:	dec00304 	addi	sp,sp,12
  8189f4:	f800283a 	ret

008189f8 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  8189f8:	defff504 	addi	sp,sp,-44
  8189fc:	dfc00a15 	stw	ra,40(sp)
  818a00:	df000915 	stw	fp,36(sp)
  818a04:	dc000815 	stw	r16,32(sp)
  818a08:	df000804 	addi	fp,sp,32
  818a0c:	e13ffd0d 	sth	r4,-12(fp)
  818a10:	e17ffe05 	stb	r5,-8(fp)
    bool result = false;
  818a14:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  818a18:	e0bffd0f 	ldh	r2,-12(fp)
  818a1c:	1004803a 	cmplt	r2,r2,zero
  818a20:	1001751e 	bne	r2,zero,818ff8 <alt_up_sd_card_write+0x600>
  818a24:	e0bffd0f 	ldh	r2,-12(fp)
  818a28:	10800508 	cmpgei	r2,r2,20
  818a2c:	1001721e 	bne	r2,zero,818ff8 <alt_up_sd_card_write+0x600>
    {
        if (active_files[file_handle].in_use)
  818a30:	e0bffd0f 	ldh	r2,-12(fp)
  818a34:	00c020f4 	movhi	r3,131
  818a38:	18e7c704 	addi	r3,r3,-24804
  818a3c:	100491ba 	slli	r2,r2,6
  818a40:	10c5883a 	add	r2,r2,r3
  818a44:	10800f04 	addi	r2,r2,60
  818a48:	10800017 	ldw	r2,0(r2)
  818a4c:	1005003a 	cmpeq	r2,r2,zero
  818a50:	1001691e 	bne	r2,zero,818ff8 <alt_up_sd_card_write+0x600>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  818a54:	008020f4 	movhi	r2,131
  818a58:	10a7b204 	addi	r2,r2,-24888
  818a5c:	14001417 	ldw	r16,80(r2)
  818a60:	e0bffd0f 	ldh	r2,-12(fp)
  818a64:	00c020f4 	movhi	r3,131
  818a68:	18e7c704 	addi	r3,r3,-24804
  818a6c:	100491ba 	slli	r2,r2,6
  818a70:	10c5883a 	add	r2,r2,r3
  818a74:	10800704 	addi	r2,r2,28
  818a78:	10800017 	ldw	r2,0(r2)
  818a7c:	113fff84 	addi	r4,r2,-2
  818a80:	008020f4 	movhi	r2,131
  818a84:	10a7b204 	addi	r2,r2,-24888
  818a88:	10800383 	ldbu	r2,14(r2)
  818a8c:	11403fcc 	andi	r5,r2,255
  818a90:	0809b1c0 	call	809b1c <__mulsi3>
  818a94:	8089883a 	add	r4,r16,r2
  818a98:	e0bffd0f 	ldh	r2,-12(fp)
  818a9c:	00c020f4 	movhi	r3,131
  818aa0:	18e7c704 	addi	r3,r3,-24804
  818aa4:	100491ba 	slli	r2,r2,6
  818aa8:	10c5883a 	add	r2,r2,r3
  818aac:	10800804 	addi	r2,r2,32
  818ab0:	10800017 	ldw	r2,0(r2)
  818ab4:	2085883a 	add	r2,r4,r2
  818ab8:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  818abc:	e0bffd0f 	ldh	r2,-12(fp)
  818ac0:	00c020f4 	movhi	r3,131
  818ac4:	18e7c704 	addi	r3,r3,-24804
  818ac8:	100491ba 	slli	r2,r2,6
  818acc:	10c5883a 	add	r2,r2,r3
  818ad0:	10800904 	addi	r2,r2,36
  818ad4:	11000017 	ldw	r4,0(r2)
  818ad8:	008020f4 	movhi	r2,131
  818adc:	10a7b204 	addi	r2,r2,-24888
  818ae0:	1080030b 	ldhu	r2,12(r2)
  818ae4:	117fffcc 	andi	r5,r2,65535
  818ae8:	0809b140 	call	809b14 <__umodsi3>
  818aec:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  818af0:	e0bffd0f 	ldh	r2,-12(fp)
  818af4:	00c020f4 	movhi	r3,131
  818af8:	18e7c704 	addi	r3,r3,-24804
  818afc:	100491ba 	slli	r2,r2,6
  818b00:	10c5883a 	add	r2,r2,r3
  818b04:	10800904 	addi	r2,r2,36
  818b08:	11000017 	ldw	r4,0(r2)
  818b0c:	e0bffd0f 	ldh	r2,-12(fp)
  818b10:	00c020f4 	movhi	r3,131
  818b14:	18e7c704 	addi	r3,r3,-24804
  818b18:	100491ba 	slli	r2,r2,6
  818b1c:	10c5883a 	add	r2,r2,r3
  818b20:	10800604 	addi	r2,r2,24
  818b24:	10800017 	ldw	r2,0(r2)
  818b28:	2080682e 	bgeu	r4,r2,818ccc <alt_up_sd_card_write+0x2d4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  818b2c:	e0bffd0f 	ldh	r2,-12(fp)
  818b30:	00c020f4 	movhi	r3,131
  818b34:	18e7c704 	addi	r3,r3,-24804
  818b38:	100491ba 	slli	r2,r2,6
  818b3c:	10c5883a 	add	r2,r2,r3
  818b40:	10800904 	addi	r2,r2,36
  818b44:	10800017 	ldw	r2,0(r2)
  818b48:	1005003a 	cmpeq	r2,r2,zero
  818b4c:	1000de1e 	bne	r2,zero,818ec8 <alt_up_sd_card_write+0x4d0>
  818b50:	e0bff80f 	ldh	r2,-32(fp)
  818b54:	1004c03a 	cmpne	r2,r2,zero
  818b58:	1000db1e 	bne	r2,zero,818ec8 <alt_up_sd_card_write+0x4d0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  818b5c:	e0bffd0f 	ldh	r2,-12(fp)
  818b60:	00c020f4 	movhi	r3,131
  818b64:	18e7c704 	addi	r3,r3,-24804
  818b68:	100491ba 	slli	r2,r2,6
  818b6c:	10c5883a 	add	r2,r2,r3
  818b70:	10800804 	addi	r2,r2,32
  818b74:	10c00017 	ldw	r3,0(r2)
  818b78:	008020f4 	movhi	r2,131
  818b7c:	10a7b204 	addi	r2,r2,-24888
  818b80:	10800383 	ldbu	r2,14(r2)
  818b84:	10803fcc 	andi	r2,r2,255
  818b88:	10bfffc4 	addi	r2,r2,-1
  818b8c:	18803c1e 	bne	r3,r2,818c80 <alt_up_sd_card_write+0x288>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  818b90:	e0bffd0f 	ldh	r2,-12(fp)
  818b94:	00c020f4 	movhi	r3,131
  818b98:	18e7c704 	addi	r3,r3,-24804
  818b9c:	100491ba 	slli	r2,r2,6
  818ba0:	10c5883a 	add	r2,r2,r3
  818ba4:	10800704 	addi	r2,r2,28
  818ba8:	11000017 	ldw	r4,0(r2)
  818bac:	e17ffb04 	addi	r5,fp,-20
  818bb0:	0814fc40 	call	814fc4 <get_cluster_flag>
  818bb4:	1005003a 	cmpeq	r2,r2,zero
  818bb8:	10002f1e 	bne	r2,zero,818c78 <alt_up_sd_card_write+0x280>
                        {
                            if (next_cluster < 0x0000fff8)
  818bbc:	e0bffb0b 	ldhu	r2,-20(fp)
  818bc0:	10ffffcc 	andi	r3,r2,65535
  818bc4:	00bffdd4 	movui	r2,65527
  818bc8:	10c0bf36 	bltu	r2,r3,818ec8 <alt_up_sd_card_write+0x4d0>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  818bcc:	e13ffd0f 	ldh	r4,-12(fp)
  818bd0:	e0bffb0b 	ldhu	r2,-20(fp)
  818bd4:	117fffcc 	andi	r5,r2,65535
  818bd8:	00c020f4 	movhi	r3,131
  818bdc:	18e7c704 	addi	r3,r3,-24804
  818be0:	200491ba 	slli	r2,r4,6
  818be4:	10c5883a 	add	r2,r2,r3
  818be8:	10800704 	addi	r2,r2,28
  818bec:	11400015 	stw	r5,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
  818bf0:	e0bffd0f 	ldh	r2,-12(fp)
  818bf4:	00c020f4 	movhi	r3,131
  818bf8:	18e7c704 	addi	r3,r3,-24804
  818bfc:	100491ba 	slli	r2,r2,6
  818c00:	10c5883a 	add	r2,r2,r3
  818c04:	10800804 	addi	r2,r2,32
  818c08:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  818c0c:	008020f4 	movhi	r2,131
  818c10:	10a7b204 	addi	r2,r2,-24888
  818c14:	14001417 	ldw	r16,80(r2)
  818c18:	e0bffd0f 	ldh	r2,-12(fp)
  818c1c:	00c020f4 	movhi	r3,131
  818c20:	18e7c704 	addi	r3,r3,-24804
  818c24:	100491ba 	slli	r2,r2,6
  818c28:	10c5883a 	add	r2,r2,r3
  818c2c:	10800704 	addi	r2,r2,28
  818c30:	10800017 	ldw	r2,0(r2)
  818c34:	113fff84 	addi	r4,r2,-2
  818c38:	008020f4 	movhi	r2,131
  818c3c:	10a7b204 	addi	r2,r2,-24888
  818c40:	10800383 	ldbu	r2,14(r2)
  818c44:	11403fcc 	andi	r5,r2,255
  818c48:	0809b1c0 	call	809b1c <__mulsi3>
  818c4c:	8089883a 	add	r4,r16,r2
  818c50:	e0bffd0f 	ldh	r2,-12(fp)
  818c54:	00c020f4 	movhi	r3,131
  818c58:	18e7c704 	addi	r3,r3,-24804
  818c5c:	100491ba 	slli	r2,r2,6
  818c60:	10c5883a 	add	r2,r2,r3
  818c64:	10800804 	addi	r2,r2,32
  818c68:	10800017 	ldw	r2,0(r2)
  818c6c:	2085883a 	add	r2,r4,r2
  818c70:	e0bff915 	stw	r2,-28(fp)
  818c74:	00009406 	br	818ec8 <alt_up_sd_card_write+0x4d0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
  818c78:	e03fff15 	stw	zero,-4(fp)
  818c7c:	0000e006 	br	819000 <alt_up_sd_card_write+0x608>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  818c80:	e17ffd0f 	ldh	r5,-12(fp)
  818c84:	e0bffd0f 	ldh	r2,-12(fp)
  818c88:	00c020f4 	movhi	r3,131
  818c8c:	18e7c704 	addi	r3,r3,-24804
  818c90:	100491ba 	slli	r2,r2,6
  818c94:	10c5883a 	add	r2,r2,r3
  818c98:	10800804 	addi	r2,r2,32
  818c9c:	10800017 	ldw	r2,0(r2)
  818ca0:	11000044 	addi	r4,r2,1
  818ca4:	00c020f4 	movhi	r3,131
  818ca8:	18e7c704 	addi	r3,r3,-24804
  818cac:	280491ba 	slli	r2,r5,6
  818cb0:	10c5883a 	add	r2,r2,r3
  818cb4:	10800804 	addi	r2,r2,32
  818cb8:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
  818cbc:	e0bff917 	ldw	r2,-28(fp)
  818cc0:	10800044 	addi	r2,r2,1
  818cc4:	e0bff915 	stw	r2,-28(fp)
  818cc8:	00007f06 	br	818ec8 <alt_up_sd_card_write+0x4d0>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  818ccc:	e0bffd0f 	ldh	r2,-12(fp)
  818cd0:	00c020f4 	movhi	r3,131
  818cd4:	18e7c704 	addi	r3,r3,-24804
  818cd8:	100491ba 	slli	r2,r2,6
  818cdc:	10c5883a 	add	r2,r2,r3
  818ce0:	10800904 	addi	r2,r2,36
  818ce4:	10800017 	ldw	r2,0(r2)
  818ce8:	1005003a 	cmpeq	r2,r2,zero
  818cec:	1000761e 	bne	r2,zero,818ec8 <alt_up_sd_card_write+0x4d0>
  818cf0:	e0bff80f 	ldh	r2,-32(fp)
  818cf4:	1004c03a 	cmpne	r2,r2,zero
  818cf8:	1000731e 	bne	r2,zero,818ec8 <alt_up_sd_card_write+0x4d0>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  818cfc:	e0bffd0f 	ldh	r2,-12(fp)
  818d00:	00c020f4 	movhi	r3,131
  818d04:	18e7c704 	addi	r3,r3,-24804
  818d08:	100491ba 	slli	r2,r2,6
  818d0c:	10c5883a 	add	r2,r2,r3
  818d10:	10800804 	addi	r2,r2,32
  818d14:	10c00017 	ldw	r3,0(r2)
  818d18:	008020f4 	movhi	r2,131
  818d1c:	10a7b204 	addi	r2,r2,-24888
  818d20:	10800383 	ldbu	r2,14(r2)
  818d24:	10803fcc 	andi	r2,r2,255
  818d28:	10bfffc4 	addi	r2,r2,-1
  818d2c:	1880381e 	bne	r3,r2,818e10 <alt_up_sd_card_write+0x418>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
  818d30:	e13ffc04 	addi	r4,fp,-16
  818d34:	08170100 	call	817010 <find_first_empty_cluster>
  818d38:	1005003a 	cmpeq	r2,r2,zero
  818d3c:	1000321e 	bne	r2,zero,818e08 <alt_up_sd_card_write+0x410>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
  818d40:	e0bffd0f 	ldh	r2,-12(fp)
  818d44:	00c020f4 	movhi	r3,131
  818d48:	18e7c704 	addi	r3,r3,-24804
  818d4c:	100491ba 	slli	r2,r2,6
  818d50:	10c5883a 	add	r2,r2,r3
  818d54:	10800704 	addi	r2,r2,28
  818d58:	11000017 	ldw	r4,0(r2)
  818d5c:	e0bffc17 	ldw	r2,-16(fp)
  818d60:	117fffcc 	andi	r5,r2,65535
  818d64:	2960001c 	xori	r5,r5,32768
  818d68:	29600004 	addi	r5,r5,-32768
  818d6c:	01800044 	movi	r6,1
  818d70:	081507c0 	call	81507c <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
  818d74:	e13ffc17 	ldw	r4,-16(fp)
  818d78:	017fffc4 	movi	r5,-1
  818d7c:	01800044 	movi	r6,1
  818d80:	081507c0 	call	81507c <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
  818d84:	e0bffd0f 	ldh	r2,-12(fp)
  818d88:	00c020f4 	movhi	r3,131
  818d8c:	18e7c704 	addi	r3,r3,-24804
  818d90:	100491ba 	slli	r2,r2,6
  818d94:	10c5883a 	add	r2,r2,r3
  818d98:	10800704 	addi	r2,r2,28
  818d9c:	11000017 	ldw	r4,0(r2)
  818da0:	e0bffc17 	ldw	r2,-16(fp)
  818da4:	117fffcc 	andi	r5,r2,65535
  818da8:	2960001c 	xori	r5,r5,32768
  818dac:	29600004 	addi	r5,r5,-32768
  818db0:	000d883a 	mov	r6,zero
  818db4:	081507c0 	call	81507c <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
  818db8:	e13ffc17 	ldw	r4,-16(fp)
  818dbc:	017fffc4 	movi	r5,-1
  818dc0:	000d883a 	mov	r6,zero
  818dc4:	081507c0 	call	81507c <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
  818dc8:	e0bffd0f 	ldh	r2,-12(fp)
  818dcc:	e13ffc17 	ldw	r4,-16(fp)
  818dd0:	00c020f4 	movhi	r3,131
  818dd4:	18e7c704 	addi	r3,r3,-24804
  818dd8:	100491ba 	slli	r2,r2,6
  818ddc:	10c5883a 	add	r2,r2,r3
  818de0:	10800704 	addi	r2,r2,28
  818de4:	11000015 	stw	r4,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
  818de8:	e0bffd0f 	ldh	r2,-12(fp)
  818dec:	00c020f4 	movhi	r3,131
  818df0:	18e7c704 	addi	r3,r3,-24804
  818df4:	100491ba 	slli	r2,r2,6
  818df8:	10c5883a 	add	r2,r2,r3
  818dfc:	10800804 	addi	r2,r2,32
  818e00:	10000015 	stw	zero,0(r2)
  818e04:	00001606 	br	818e60 <alt_up_sd_card_write+0x468>
						}
						else
						{
							return false;
  818e08:	e03fff15 	stw	zero,-4(fp)
  818e0c:	00007c06 	br	819000 <alt_up_sd_card_write+0x608>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
  818e10:	e43ffd0f 	ldh	r16,-12(fp)
  818e14:	e0bffd0f 	ldh	r2,-12(fp)
  818e18:	00c020f4 	movhi	r3,131
  818e1c:	18e7c704 	addi	r3,r3,-24804
  818e20:	100491ba 	slli	r2,r2,6
  818e24:	10c5883a 	add	r2,r2,r3
  818e28:	10800904 	addi	r2,r2,36
  818e2c:	11000017 	ldw	r4,0(r2)
  818e30:	008020f4 	movhi	r2,131
  818e34:	10a7b204 	addi	r2,r2,-24888
  818e38:	1080030b 	ldhu	r2,12(r2)
  818e3c:	117fffcc 	andi	r5,r2,65535
  818e40:	0809b0c0 	call	809b0c <__udivsi3>
  818e44:	1009883a 	mov	r4,r2
  818e48:	00c020f4 	movhi	r3,131
  818e4c:	18e7c704 	addi	r3,r3,-24804
  818e50:	800491ba 	slli	r2,r16,6
  818e54:	10c5883a 	add	r2,r2,r3
  818e58:	10800804 	addi	r2,r2,32
  818e5c:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  818e60:	008020f4 	movhi	r2,131
  818e64:	10a7b204 	addi	r2,r2,-24888
  818e68:	14001417 	ldw	r16,80(r2)
  818e6c:	e0bffd0f 	ldh	r2,-12(fp)
  818e70:	00c020f4 	movhi	r3,131
  818e74:	18e7c704 	addi	r3,r3,-24804
  818e78:	100491ba 	slli	r2,r2,6
  818e7c:	10c5883a 	add	r2,r2,r3
  818e80:	10800704 	addi	r2,r2,28
  818e84:	10800017 	ldw	r2,0(r2)
  818e88:	113fff84 	addi	r4,r2,-2
  818e8c:	008020f4 	movhi	r2,131
  818e90:	10a7b204 	addi	r2,r2,-24888
  818e94:	10800383 	ldbu	r2,14(r2)
  818e98:	11403fcc 	andi	r5,r2,255
  818e9c:	0809b1c0 	call	809b1c <__mulsi3>
  818ea0:	8089883a 	add	r4,r16,r2
  818ea4:	e0bffd0f 	ldh	r2,-12(fp)
  818ea8:	00c020f4 	movhi	r3,131
  818eac:	18e7c704 	addi	r3,r3,-24804
  818eb0:	100491ba 	slli	r2,r2,6
  818eb4:	10c5883a 	add	r2,r2,r3
  818eb8:	10800804 	addi	r2,r2,32
  818ebc:	10800017 	ldw	r2,0(r2)
  818ec0:	2085883a 	add	r2,r4,r2
  818ec4:	e0bff915 	stw	r2,-28(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
  818ec8:	d0e73817 	ldw	r3,-25376(gp)
  818ecc:	e0bff917 	ldw	r2,-28(fp)
  818ed0:	1885883a 	add	r2,r3,r2
  818ed4:	1007883a 	mov	r3,r2
  818ed8:	d0a73c17 	ldw	r2,-25360(gp)
  818edc:	18800726 	beq	r3,r2,818efc <alt_up_sd_card_write+0x504>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  818ee0:	d1673817 	ldw	r5,-25376(gp)
  818ee4:	e13ff917 	ldw	r4,-28(fp)
  818ee8:	0814ec80 	call	814ec8 <Read_Sector_Data>
  818eec:	1004c03a 	cmpne	r2,r2,zero
  818ef0:	1000021e 	bne	r2,zero,818efc <alt_up_sd_card_write+0x504>
                {
					return false;
  818ef4:	e03fff15 	stw	zero,-4(fp)
  818ef8:	00004106 	br	819000 <alt_up_sd_card_write+0x608>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  818efc:	e0bff80f 	ldh	r2,-32(fp)
  818f00:	1007883a 	mov	r3,r2
  818f04:	d0a73717 	ldw	r2,-25380(gp)
  818f08:	1885883a 	add	r2,r3,r2
  818f0c:	e0fffe07 	ldb	r3,-8(fp)
  818f10:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  818f14:	e17ffd0f 	ldh	r5,-12(fp)
  818f18:	e0bffd0f 	ldh	r2,-12(fp)
  818f1c:	00c020f4 	movhi	r3,131
  818f20:	18e7c704 	addi	r3,r3,-24804
  818f24:	100491ba 	slli	r2,r2,6
  818f28:	10c5883a 	add	r2,r2,r3
  818f2c:	10800904 	addi	r2,r2,36
  818f30:	10800017 	ldw	r2,0(r2)
  818f34:	11000044 	addi	r4,r2,1
  818f38:	00c020f4 	movhi	r3,131
  818f3c:	18e7c704 	addi	r3,r3,-24804
  818f40:	280491ba 	slli	r2,r5,6
  818f44:	10c5883a 	add	r2,r2,r3
  818f48:	10800904 	addi	r2,r2,36
  818f4c:	11000015 	stw	r4,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
  818f50:	e0bffd0f 	ldh	r2,-12(fp)
  818f54:	00c020f4 	movhi	r3,131
  818f58:	18e7c704 	addi	r3,r3,-24804
  818f5c:	100491ba 	slli	r2,r2,6
  818f60:	10c5883a 	add	r2,r2,r3
  818f64:	10800904 	addi	r2,r2,36
  818f68:	11000017 	ldw	r4,0(r2)
  818f6c:	e0bffd0f 	ldh	r2,-12(fp)
  818f70:	00c020f4 	movhi	r3,131
  818f74:	18e7c704 	addi	r3,r3,-24804
  818f78:	100491ba 	slli	r2,r2,6
  818f7c:	10c5883a 	add	r2,r2,r3
  818f80:	10800604 	addi	r2,r2,24
  818f84:	10800017 	ldw	r2,0(r2)
  818f88:	20801736 	bltu	r4,r2,818fe8 <alt_up_sd_card_write+0x5f0>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
  818f8c:	e17ffd0f 	ldh	r5,-12(fp)
  818f90:	e0bffd0f 	ldh	r2,-12(fp)
  818f94:	00c020f4 	movhi	r3,131
  818f98:	18e7c704 	addi	r3,r3,-24804
  818f9c:	100491ba 	slli	r2,r2,6
  818fa0:	10c5883a 	add	r2,r2,r3
  818fa4:	10800604 	addi	r2,r2,24
  818fa8:	10800017 	ldw	r2,0(r2)
  818fac:	11000044 	addi	r4,r2,1
  818fb0:	00c020f4 	movhi	r3,131
  818fb4:	18e7c704 	addi	r3,r3,-24804
  818fb8:	280491ba 	slli	r2,r5,6
  818fbc:	10c5883a 	add	r2,r2,r3
  818fc0:	10800604 	addi	r2,r2,24
  818fc4:	11000015 	stw	r4,0(r2)
				active_files[file_handle].modified = true;
  818fc8:	e0bffd0f 	ldh	r2,-12(fp)
  818fcc:	00c020f4 	movhi	r3,131
  818fd0:	18e7c704 	addi	r3,r3,-24804
  818fd4:	100491ba 	slli	r2,r2,6
  818fd8:	10c5883a 	add	r2,r2,r3
  818fdc:	10c00e04 	addi	r3,r2,56
  818fe0:	00800044 	movi	r2,1
  818fe4:	18800015 	stw	r2,0(r3)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
  818fe8:	00800044 	movi	r2,1
  818fec:	d0a73b15 	stw	r2,-25364(gp)
			result = true;
  818ff0:	00800044 	movi	r2,1
  818ff4:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
  818ff8:	e0bffa17 	ldw	r2,-24(fp)
  818ffc:	e0bfff15 	stw	r2,-4(fp)
  819000:	e0bfff17 	ldw	r2,-4(fp)
}
  819004:	e037883a 	mov	sp,fp
  819008:	dfc00217 	ldw	ra,8(sp)
  81900c:	df000117 	ldw	fp,4(sp)
  819010:	dc000017 	ldw	r16,0(sp)
  819014:	dec00304 	addi	sp,sp,12
  819018:	f800283a 	ret

0081901c <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  81901c:	defffa04 	addi	sp,sp,-24
  819020:	dfc00515 	stw	ra,20(sp)
  819024:	df000415 	stw	fp,16(sp)
  819028:	dc000315 	stw	r16,12(sp)
  81902c:	df000304 	addi	fp,sp,12
  819030:	e13fff0d 	sth	r4,-4(fp)
    bool result = false;
  819034:	e03ffe15 	stw	zero,-8(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  819038:	0817bd80 	call	817bd8 <alt_up_sd_card_is_Present>
  81903c:	1005003a 	cmpeq	r2,r2,zero
  819040:	1000641e 	bne	r2,zero,8191d4 <alt_up_sd_card_fclose+0x1b8>
  819044:	d0a73117 	ldw	r2,-25404(gp)
  819048:	1005003a 	cmpeq	r2,r2,zero
  81904c:	1000611e 	bne	r2,zero,8191d4 <alt_up_sd_card_fclose+0x1b8>
    {
        if (active_files[file_handle].in_use) 
  819050:	e0bfff0f 	ldh	r2,-4(fp)
  819054:	00c020f4 	movhi	r3,131
  819058:	18e7c704 	addi	r3,r3,-24804
  81905c:	100491ba 	slli	r2,r2,6
  819060:	10c5883a 	add	r2,r2,r3
  819064:	10800f04 	addi	r2,r2,60
  819068:	10800017 	ldw	r2,0(r2)
  81906c:	1005003a 	cmpeq	r2,r2,zero
  819070:	1000581e 	bne	r2,zero,8191d4 <alt_up_sd_card_fclose+0x1b8>
        {
			if (active_files[file_handle].modified)
  819074:	e0bfff0f 	ldh	r2,-4(fp)
  819078:	00c020f4 	movhi	r3,131
  81907c:	18e7c704 	addi	r3,r3,-24804
  819080:	100491ba 	slli	r2,r2,6
  819084:	10c5883a 	add	r2,r2,r3
  819088:	10800e04 	addi	r2,r2,56
  81908c:	10800017 	ldw	r2,0(r2)
  819090:	1005003a 	cmpeq	r2,r2,zero
  819094:	1000461e 	bne	r2,zero,8191b0 <alt_up_sd_card_fclose+0x194>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
  819098:	e0bfff0f 	ldh	r2,-4(fp)
  81909c:	00c020f4 	movhi	r3,131
  8190a0:	18e7c704 	addi	r3,r3,-24804
  8190a4:	100491ba 	slli	r2,r2,6
  8190a8:	10c5883a 	add	r2,r2,r3
  8190ac:	10800b04 	addi	r2,r2,44
  8190b0:	10800017 	ldw	r2,0(r2)
  8190b4:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0)
  8190b8:	e0bfff0f 	ldh	r2,-4(fp)
  8190bc:	00c020f4 	movhi	r3,131
  8190c0:	18e7c704 	addi	r3,r3,-24804
  8190c4:	100491ba 	slli	r2,r2,6
  8190c8:	10c5883a 	add	r2,r2,r3
  8190cc:	10800a04 	addi	r2,r2,40
  8190d0:	10800017 	ldw	r2,0(r2)
  8190d4:	1004c03a 	cmpne	r2,r2,zero
  8190d8:	1000071e 	bne	r2,zero,8190f8 <alt_up_sd_card_fclose+0xdc>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
  8190dc:	008020f4 	movhi	r2,131
  8190e0:	10a7b204 	addi	r2,r2,-24888
  8190e4:	10c01317 	ldw	r3,76(r2)
  8190e8:	e0bffd17 	ldw	r2,-12(fp)
  8190ec:	10c5883a 	add	r2,r2,r3
  8190f0:	e0bffd15 	stw	r2,-12(fp)
  8190f4:	00001406 	br	819148 <alt_up_sd_card_fclose+0x12c>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
  8190f8:	008020f4 	movhi	r2,131
  8190fc:	10a7b204 	addi	r2,r2,-24888
  819100:	10c01417 	ldw	r3,80(r2)
  819104:	e0bffd17 	ldw	r2,-12(fp)
  819108:	18a1883a 	add	r16,r3,r2
  81910c:	e0bfff0f 	ldh	r2,-4(fp)
  819110:	00c020f4 	movhi	r3,131
  819114:	18e7c704 	addi	r3,r3,-24804
  819118:	100491ba 	slli	r2,r2,6
  81911c:	10c5883a 	add	r2,r2,r3
  819120:	10800a04 	addi	r2,r2,40
  819124:	10800017 	ldw	r2,0(r2)
  819128:	113fff84 	addi	r4,r2,-2
  81912c:	008020f4 	movhi	r2,131
  819130:	10a7b204 	addi	r2,r2,-24888
  819134:	10800383 	ldbu	r2,14(r2)
  819138:	11403fcc 	andi	r5,r2,255
  81913c:	0809b1c0 	call	809b1c <__mulsi3>
  819140:	8085883a 	add	r2,r16,r2
  819144:	e0bffd15 	stw	r2,-12(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
  819148:	e13ffd17 	ldw	r4,-12(fp)
  81914c:	d1673817 	ldw	r5,-25376(gp)
  819150:	0814ec80 	call	814ec8 <Read_Sector_Data>
  819154:	1005003a 	cmpeq	r2,r2,zero
  819158:	1000151e 	bne	r2,zero,8191b0 <alt_up_sd_card_fclose+0x194>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
  81915c:	e0bfff0f 	ldh	r2,-4(fp)
  819160:	00c020f4 	movhi	r3,131
  819164:	18e7c704 	addi	r3,r3,-24804
  819168:	100491ba 	slli	r2,r2,6
  81916c:	10c5883a 	add	r2,r2,r3
  819170:	10800c04 	addi	r2,r2,48
  819174:	1080000b 	ldhu	r2,0(r2)
  819178:	113fffcc 	andi	r4,r2,65535
  81917c:	2120001c 	xori	r4,r4,32768
  819180:	21200004 	addi	r4,r4,-32768
  819184:	e0bfff0f 	ldh	r2,-4(fp)
  819188:	100491ba 	slli	r2,r2,6
  81918c:	1007883a 	mov	r3,r2
  819190:	008020f4 	movhi	r2,131
  819194:	10a7c704 	addi	r2,r2,-24804
  819198:	188b883a 	add	r5,r3,r2
  81919c:	08155940 	call	815594 <Write_File_Record_At_Offset>
  8191a0:	1005003a 	cmpeq	r2,r2,zero
  8191a4:	1000021e 	bne	r2,zero,8191b0 <alt_up_sd_card_fclose+0x194>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
  8191a8:	0814e780 	call	814e78 <Save_Modified_Sector>
  8191ac:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
  8191b0:	e0bfff0f 	ldh	r2,-4(fp)
  8191b4:	00c020f4 	movhi	r3,131
  8191b8:	18e7c704 	addi	r3,r3,-24804
  8191bc:	100491ba 	slli	r2,r2,6
  8191c0:	10c5883a 	add	r2,r2,r3
  8191c4:	10800f04 	addi	r2,r2,60
  8191c8:	10000015 	stw	zero,0(r2)
			result = true;
  8191cc:	00800044 	movi	r2,1
  8191d0:	e0bffe15 	stw	r2,-8(fp)
        }
    }
    
    return result;
  8191d4:	e0bffe17 	ldw	r2,-8(fp)
}
  8191d8:	e037883a 	mov	sp,fp
  8191dc:	dfc00217 	ldw	ra,8(sp)
  8191e0:	df000117 	ldw	fp,4(sp)
  8191e4:	dc000017 	ldw	r16,0(sp)
  8191e8:	dec00304 	addi	sp,sp,12
  8191ec:	f800283a 	ret

008191f0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8191f0:	defff404 	addi	sp,sp,-48
  8191f4:	df000b15 	stw	fp,44(sp)
  8191f8:	df000b04 	addi	fp,sp,44
  8191fc:	e13ffb15 	stw	r4,-20(fp)
  819200:	e17ffc15 	stw	r5,-16(fp)
  819204:	e1bffd15 	stw	r6,-12(fp)
  819208:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81920c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  819210:	008020b4 	movhi	r2,130
  819214:	10bb1804 	addi	r2,r2,-5024
  819218:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  81921c:	1005003a 	cmpeq	r2,r2,zero
  819220:	1000411e 	bne	r2,zero,819328 <alt_alarm_start+0x138>
  {
    if (alarm)
  819224:	e0bffb17 	ldw	r2,-20(fp)
  819228:	1005003a 	cmpeq	r2,r2,zero
  81922c:	10003b1e 	bne	r2,zero,81931c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  819230:	e0fffb17 	ldw	r3,-20(fp)
  819234:	e0bffd17 	ldw	r2,-12(fp)
  819238:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  81923c:	e0fffb17 	ldw	r3,-20(fp)
  819240:	e0bffe17 	ldw	r2,-8(fp)
  819244:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819248:	0005303a 	rdctl	r2,status
  81924c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819250:	e0fff817 	ldw	r3,-32(fp)
  819254:	00bfff84 	movi	r2,-2
  819258:	1884703a 	and	r2,r3,r2
  81925c:	1001703a 	wrctl	status,r2
  
  return context;
  819260:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  819264:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  819268:	008020b4 	movhi	r2,130
  81926c:	10bb1904 	addi	r2,r2,-5020
  819270:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  819274:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  819278:	e0fffc17 	ldw	r3,-16(fp)
  81927c:	e0bff917 	ldw	r2,-28(fp)
  819280:	1885883a 	add	r2,r3,r2
  819284:	10c00044 	addi	r3,r2,1
  819288:	e0bffb17 	ldw	r2,-20(fp)
  81928c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  819290:	e0bffb17 	ldw	r2,-20(fp)
  819294:	10c00217 	ldw	r3,8(r2)
  819298:	e0bff917 	ldw	r2,-28(fp)
  81929c:	1880042e 	bgeu	r3,r2,8192b0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  8192a0:	e0fffb17 	ldw	r3,-20(fp)
  8192a4:	00800044 	movi	r2,1
  8192a8:	18800405 	stb	r2,16(r3)
  8192ac:	00000206 	br	8192b8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  8192b0:	e0bffb17 	ldw	r2,-20(fp)
  8192b4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8192b8:	e0fffb17 	ldw	r3,-20(fp)
  8192bc:	008020b4 	movhi	r2,130
  8192c0:	10b40704 	addi	r2,r2,-12260
  8192c4:	e0bff615 	stw	r2,-40(fp)
  8192c8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8192cc:	e0fff717 	ldw	r3,-36(fp)
  8192d0:	e0bff617 	ldw	r2,-40(fp)
  8192d4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8192d8:	e0bff617 	ldw	r2,-40(fp)
  8192dc:	10c00017 	ldw	r3,0(r2)
  8192e0:	e0bff717 	ldw	r2,-36(fp)
  8192e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8192e8:	e0bff617 	ldw	r2,-40(fp)
  8192ec:	10c00017 	ldw	r3,0(r2)
  8192f0:	e0bff717 	ldw	r2,-36(fp)
  8192f4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8192f8:	e0fff617 	ldw	r3,-40(fp)
  8192fc:	e0bff717 	ldw	r2,-36(fp)
  819300:	18800015 	stw	r2,0(r3)
  819304:	e0bffa17 	ldw	r2,-24(fp)
  819308:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81930c:	e0bff517 	ldw	r2,-44(fp)
  819310:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  819314:	e03fff15 	stw	zero,-4(fp)
  819318:	00000506 	br	819330 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  81931c:	00bffa84 	movi	r2,-22
  819320:	e0bfff15 	stw	r2,-4(fp)
  819324:	00000206 	br	819330 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  819328:	00bfde84 	movi	r2,-134
  81932c:	e0bfff15 	stw	r2,-4(fp)
  819330:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  819334:	e037883a 	mov	sp,fp
  819338:	df000017 	ldw	fp,0(sp)
  81933c:	dec00104 	addi	sp,sp,4
  819340:	f800283a 	ret

00819344 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  819344:	deffff04 	addi	sp,sp,-4
  819348:	df000015 	stw	fp,0(sp)
  81934c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  819350:	e037883a 	mov	sp,fp
  819354:	df000017 	ldw	fp,0(sp)
  819358:	dec00104 	addi	sp,sp,4
  81935c:	f800283a 	ret

00819360 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  819360:	defff904 	addi	sp,sp,-28
  819364:	dfc00615 	stw	ra,24(sp)
  819368:	df000515 	stw	fp,20(sp)
  81936c:	df000504 	addi	fp,sp,20
  819370:	e13ffd15 	stw	r4,-12(fp)
  819374:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  819378:	e0bffd17 	ldw	r2,-12(fp)
  81937c:	1005003a 	cmpeq	r2,r2,zero
  819380:	1000041e 	bne	r2,zero,819394 <alt_dev_llist_insert+0x34>
  819384:	e0bffd17 	ldw	r2,-12(fp)
  819388:	10800217 	ldw	r2,8(r2)
  81938c:	1004c03a 	cmpne	r2,r2,zero
  819390:	1000071e 	bne	r2,zero,8193b0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  819394:	08194140 	call	819414 <alt_get_errno>
  819398:	1007883a 	mov	r3,r2
  81939c:	00800584 	movi	r2,22
  8193a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8193a4:	00bffa84 	movi	r2,-22
  8193a8:	e0bfff15 	stw	r2,-4(fp)
  8193ac:	00001306 	br	8193fc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8193b0:	e0fffd17 	ldw	r3,-12(fp)
  8193b4:	e0bffe17 	ldw	r2,-8(fp)
  8193b8:	e0bffb15 	stw	r2,-20(fp)
  8193bc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8193c0:	e0fffc17 	ldw	r3,-16(fp)
  8193c4:	e0bffb17 	ldw	r2,-20(fp)
  8193c8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8193cc:	e0bffb17 	ldw	r2,-20(fp)
  8193d0:	10c00017 	ldw	r3,0(r2)
  8193d4:	e0bffc17 	ldw	r2,-16(fp)
  8193d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8193dc:	e0bffb17 	ldw	r2,-20(fp)
  8193e0:	10c00017 	ldw	r3,0(r2)
  8193e4:	e0bffc17 	ldw	r2,-16(fp)
  8193e8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8193ec:	e0fffb17 	ldw	r3,-20(fp)
  8193f0:	e0bffc17 	ldw	r2,-16(fp)
  8193f4:	18800015 	stw	r2,0(r3)

  return 0;  
  8193f8:	e03fff15 	stw	zero,-4(fp)
  8193fc:	e0bfff17 	ldw	r2,-4(fp)
}
  819400:	e037883a 	mov	sp,fp
  819404:	dfc00117 	ldw	ra,4(sp)
  819408:	df000017 	ldw	fp,0(sp)
  81940c:	dec00204 	addi	sp,sp,8
  819410:	f800283a 	ret

00819414 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  819414:	defffd04 	addi	sp,sp,-12
  819418:	dfc00215 	stw	ra,8(sp)
  81941c:	df000115 	stw	fp,4(sp)
  819420:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  819424:	008020b4 	movhi	r2,130
  819428:	10b3e504 	addi	r2,r2,-12396
  81942c:	10800017 	ldw	r2,0(r2)
  819430:	1005003a 	cmpeq	r2,r2,zero
  819434:	1000061e 	bne	r2,zero,819450 <alt_get_errno+0x3c>
  819438:	008020b4 	movhi	r2,130
  81943c:	10b3e504 	addi	r2,r2,-12396
  819440:	10800017 	ldw	r2,0(r2)
  819444:	103ee83a 	callr	r2
  819448:	e0bfff15 	stw	r2,-4(fp)
  81944c:	00000306 	br	81945c <alt_get_errno+0x48>
  819450:	008020b4 	movhi	r2,130
  819454:	10baed04 	addi	r2,r2,-5196
  819458:	e0bfff15 	stw	r2,-4(fp)
  81945c:	e0bfff17 	ldw	r2,-4(fp)
}
  819460:	e037883a 	mov	sp,fp
  819464:	dfc00117 	ldw	ra,4(sp)
  819468:	df000017 	ldw	fp,0(sp)
  81946c:	dec00204 	addi	sp,sp,8
  819470:	f800283a 	ret

00819474 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  819474:	defffd04 	addi	sp,sp,-12
  819478:	dfc00215 	stw	ra,8(sp)
  81947c:	df000115 	stw	fp,4(sp)
  819480:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  819484:	00bfff04 	movi	r2,-4
  819488:	00c020b4 	movhi	r3,130
  81948c:	18eb0104 	addi	r3,r3,-21500
  819490:	1885883a 	add	r2,r3,r2
  819494:	e0bfff15 	stw	r2,-4(fp)
  819498:	00000606 	br	8194b4 <_do_ctors+0x40>
        (*ctor) (); 
  81949c:	e0bfff17 	ldw	r2,-4(fp)
  8194a0:	10800017 	ldw	r2,0(r2)
  8194a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8194a8:	e0bfff17 	ldw	r2,-4(fp)
  8194ac:	10bfff04 	addi	r2,r2,-4
  8194b0:	e0bfff15 	stw	r2,-4(fp)
  8194b4:	e0ffff17 	ldw	r3,-4(fp)
  8194b8:	008020b4 	movhi	r2,130
  8194bc:	10ab0004 	addi	r2,r2,-21504
  8194c0:	18bff62e 	bgeu	r3,r2,81949c <_do_ctors+0x28>
        (*ctor) (); 
}
  8194c4:	e037883a 	mov	sp,fp
  8194c8:	dfc00117 	ldw	ra,4(sp)
  8194cc:	df000017 	ldw	fp,0(sp)
  8194d0:	dec00204 	addi	sp,sp,8
  8194d4:	f800283a 	ret

008194d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8194d8:	defffd04 	addi	sp,sp,-12
  8194dc:	dfc00215 	stw	ra,8(sp)
  8194e0:	df000115 	stw	fp,4(sp)
  8194e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8194e8:	00bfff04 	movi	r2,-4
  8194ec:	00c020b4 	movhi	r3,130
  8194f0:	18eb0104 	addi	r3,r3,-21500
  8194f4:	1885883a 	add	r2,r3,r2
  8194f8:	e0bfff15 	stw	r2,-4(fp)
  8194fc:	00000606 	br	819518 <_do_dtors+0x40>
        (*dtor) (); 
  819500:	e0bfff17 	ldw	r2,-4(fp)
  819504:	10800017 	ldw	r2,0(r2)
  819508:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81950c:	e0bfff17 	ldw	r2,-4(fp)
  819510:	10bfff04 	addi	r2,r2,-4
  819514:	e0bfff15 	stw	r2,-4(fp)
  819518:	e0ffff17 	ldw	r3,-4(fp)
  81951c:	008020b4 	movhi	r2,130
  819520:	10ab0104 	addi	r2,r2,-21500
  819524:	18bff62e 	bgeu	r3,r2,819500 <_do_dtors+0x28>
        (*dtor) (); 
}
  819528:	e037883a 	mov	sp,fp
  81952c:	dfc00117 	ldw	ra,4(sp)
  819530:	df000017 	ldw	fp,0(sp)
  819534:	dec00204 	addi	sp,sp,8
  819538:	f800283a 	ret

0081953c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81953c:	defff904 	addi	sp,sp,-28
  819540:	dfc00615 	stw	ra,24(sp)
  819544:	df000515 	stw	fp,20(sp)
  819548:	df000504 	addi	fp,sp,20
  81954c:	e13ffd15 	stw	r4,-12(fp)
  819550:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  819554:	e0bffe17 	ldw	r2,-8(fp)
  819558:	10800017 	ldw	r2,0(r2)
  81955c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  819560:	e13ffd17 	ldw	r4,-12(fp)
  819564:	08009640 	call	800964 <strlen>
  819568:	10800044 	addi	r2,r2,1
  81956c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  819570:	00000d06 	br	8195a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  819574:	e0bffc17 	ldw	r2,-16(fp)
  819578:	11000217 	ldw	r4,8(r2)
  81957c:	e1bffb17 	ldw	r6,-20(fp)
  819580:	e17ffd17 	ldw	r5,-12(fp)
  819584:	081a5000 	call	81a500 <memcmp>
  819588:	1004c03a 	cmpne	r2,r2,zero
  81958c:	1000031e 	bne	r2,zero,81959c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  819590:	e0bffc17 	ldw	r2,-16(fp)
  819594:	e0bfff15 	stw	r2,-4(fp)
  819598:	00000706 	br	8195b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81959c:	e0bffc17 	ldw	r2,-16(fp)
  8195a0:	10800017 	ldw	r2,0(r2)
  8195a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8195a8:	e0fffe17 	ldw	r3,-8(fp)
  8195ac:	e0bffc17 	ldw	r2,-16(fp)
  8195b0:	10fff01e 	bne	r2,r3,819574 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8195b4:	e03fff15 	stw	zero,-4(fp)
  8195b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8195bc:	e037883a 	mov	sp,fp
  8195c0:	dfc00117 	ldw	ra,4(sp)
  8195c4:	df000017 	ldw	fp,0(sp)
  8195c8:	dec00204 	addi	sp,sp,8
  8195cc:	f800283a 	ret

008195d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8195d0:	deffff04 	addi	sp,sp,-4
  8195d4:	df000015 	stw	fp,0(sp)
  8195d8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  8195dc:	e037883a 	mov	sp,fp
  8195e0:	df000017 	ldw	fp,0(sp)
  8195e4:	dec00104 	addi	sp,sp,4
  8195e8:	f800283a 	ret

008195ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8195ec:	defff804 	addi	sp,sp,-32
  8195f0:	dfc00715 	stw	ra,28(sp)
  8195f4:	df000615 	stw	fp,24(sp)
  8195f8:	dc000515 	stw	r16,20(sp)
  8195fc:	df000504 	addi	fp,sp,20
  819600:	e13ffc15 	stw	r4,-16(fp)
  819604:	e17ffd15 	stw	r5,-12(fp)
  819608:	e1bffe15 	stw	r6,-8(fp)
  81960c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  819610:	e13ffd17 	ldw	r4,-12(fp)
  819614:	e17ffe17 	ldw	r5,-8(fp)
  819618:	e1bfff17 	ldw	r6,-4(fp)
  81961c:	08199f40 	call	8199f4 <open>
  819620:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  819624:	e0bffb17 	ldw	r2,-20(fp)
  819628:	1004803a 	cmplt	r2,r2,zero
  81962c:	10001f1e 	bne	r2,zero,8196ac <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  819630:	e13ffb17 	ldw	r4,-20(fp)
  819634:	040020b4 	movhi	r16,130
  819638:	842f3e04 	addi	r16,r16,-17160
  81963c:	01400304 	movi	r5,12
  819640:	0809b1c0 	call	809b1c <__mulsi3>
  819644:	1405883a 	add	r2,r2,r16
  819648:	10c00017 	ldw	r3,0(r2)
  81964c:	e0bffc17 	ldw	r2,-16(fp)
  819650:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  819654:	e13ffb17 	ldw	r4,-20(fp)
  819658:	040020b4 	movhi	r16,130
  81965c:	842f3e04 	addi	r16,r16,-17160
  819660:	01400304 	movi	r5,12
  819664:	0809b1c0 	call	809b1c <__mulsi3>
  819668:	1405883a 	add	r2,r2,r16
  81966c:	10800104 	addi	r2,r2,4
  819670:	10c00017 	ldw	r3,0(r2)
  819674:	e0bffc17 	ldw	r2,-16(fp)
  819678:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81967c:	e13ffb17 	ldw	r4,-20(fp)
  819680:	040020b4 	movhi	r16,130
  819684:	842f3e04 	addi	r16,r16,-17160
  819688:	01400304 	movi	r5,12
  81968c:	0809b1c0 	call	809b1c <__mulsi3>
  819690:	1405883a 	add	r2,r2,r16
  819694:	10800204 	addi	r2,r2,8
  819698:	10c00017 	ldw	r3,0(r2)
  81969c:	e0bffc17 	ldw	r2,-16(fp)
  8196a0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8196a4:	e13ffb17 	ldw	r4,-20(fp)
  8196a8:	080ad180 	call	80ad18 <alt_release_fd>
  }
} 
  8196ac:	e037883a 	mov	sp,fp
  8196b0:	dfc00217 	ldw	ra,8(sp)
  8196b4:	df000117 	ldw	fp,4(sp)
  8196b8:	dc000017 	ldw	r16,0(sp)
  8196bc:	dec00304 	addi	sp,sp,12
  8196c0:	f800283a 	ret

008196c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8196c4:	defffb04 	addi	sp,sp,-20
  8196c8:	dfc00415 	stw	ra,16(sp)
  8196cc:	df000315 	stw	fp,12(sp)
  8196d0:	df000304 	addi	fp,sp,12
  8196d4:	e13ffd15 	stw	r4,-12(fp)
  8196d8:	e17ffe15 	stw	r5,-8(fp)
  8196dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8196e0:	010020b4 	movhi	r4,130
  8196e4:	212f4104 	addi	r4,r4,-17148
  8196e8:	e17ffd17 	ldw	r5,-12(fp)
  8196ec:	01800044 	movi	r6,1
  8196f0:	01c07fc4 	movi	r7,511
  8196f4:	08195ec0 	call	8195ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8196f8:	010020b4 	movhi	r4,130
  8196fc:	212f3e04 	addi	r4,r4,-17160
  819700:	e17ffe17 	ldw	r5,-8(fp)
  819704:	000d883a 	mov	r6,zero
  819708:	01c07fc4 	movi	r7,511
  81970c:	08195ec0 	call	8195ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  819710:	010020b4 	movhi	r4,130
  819714:	212f4404 	addi	r4,r4,-17136
  819718:	e17fff17 	ldw	r5,-4(fp)
  81971c:	01800044 	movi	r6,1
  819720:	01c07fc4 	movi	r7,511
  819724:	08195ec0 	call	8195ec <alt_open_fd>
}  
  819728:	e037883a 	mov	sp,fp
  81972c:	dfc00117 	ldw	ra,4(sp)
  819730:	df000017 	ldw	fp,0(sp)
  819734:	dec00204 	addi	sp,sp,8
  819738:	f800283a 	ret

0081973c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  81973c:	deffef04 	addi	sp,sp,-68
  819740:	df001015 	stw	fp,64(sp)
  819744:	df001004 	addi	fp,sp,64
  819748:	e13ffc15 	stw	r4,-16(fp)
  81974c:	e17ffd15 	stw	r5,-12(fp)
  819750:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  819754:	00bffa84 	movi	r2,-22
  819758:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  81975c:	e0bffc17 	ldw	r2,-16(fp)
  819760:	10800828 	cmpgeui	r2,r2,32
  819764:	1000601e 	bne	r2,zero,8198e8 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819768:	0005303a 	rdctl	r2,status
  81976c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819770:	e0fff917 	ldw	r3,-28(fp)
  819774:	00bfff84 	movi	r2,-2
  819778:	1884703a 	and	r2,r3,r2
  81977c:	1001703a 	wrctl	status,r2
  
  return context;
  819780:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  819784:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  819788:	e0bffc17 	ldw	r2,-16(fp)
  81978c:	00c020f4 	movhi	r3,131
  819790:	18e90704 	addi	r3,r3,-23524
  819794:	100490fa 	slli	r2,r2,3
  819798:	10c7883a 	add	r3,r2,r3
  81979c:	e0bffe17 	ldw	r2,-8(fp)
  8197a0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  8197a4:	e0bffc17 	ldw	r2,-16(fp)
  8197a8:	00c020f4 	movhi	r3,131
  8197ac:	18e90704 	addi	r3,r3,-23524
  8197b0:	100490fa 	slli	r2,r2,3
  8197b4:	10c5883a 	add	r2,r2,r3
  8197b8:	10c00104 	addi	r3,r2,4
  8197bc:	e0bffd17 	ldw	r2,-12(fp)
  8197c0:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  8197c4:	e0bffe17 	ldw	r2,-8(fp)
  8197c8:	1005003a 	cmpeq	r2,r2,zero
  8197cc:	1000201e 	bne	r2,zero,819850 <alt_irq_register+0x114>
  8197d0:	e0bffc17 	ldw	r2,-16(fp)
  8197d4:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8197d8:	0005303a 	rdctl	r2,status
  8197dc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8197e0:	e0fff617 	ldw	r3,-40(fp)
  8197e4:	00bfff84 	movi	r2,-2
  8197e8:	1884703a 	and	r2,r3,r2
  8197ec:	1001703a 	wrctl	status,r2
  
  return context;
  8197f0:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8197f4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  8197f8:	e0fff717 	ldw	r3,-36(fp)
  8197fc:	00800044 	movi	r2,1
  819800:	10c4983a 	sll	r2,r2,r3
  819804:	1007883a 	mov	r3,r2
  819808:	008020b4 	movhi	r2,130
  81980c:	10bb1704 	addi	r2,r2,-5028
  819810:	10800017 	ldw	r2,0(r2)
  819814:	1886b03a 	or	r3,r3,r2
  819818:	008020b4 	movhi	r2,130
  81981c:	10bb1704 	addi	r2,r2,-5028
  819820:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  819824:	008020b4 	movhi	r2,130
  819828:	10bb1704 	addi	r2,r2,-5028
  81982c:	10800017 	ldw	r2,0(r2)
  819830:	100170fa 	wrctl	ienable,r2
  819834:	e0bff817 	ldw	r2,-32(fp)
  819838:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81983c:	e0bff517 	ldw	r2,-44(fp)
  819840:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  819844:	0005883a 	mov	r2,zero
  819848:	e0bfff15 	stw	r2,-4(fp)
  81984c:	00002006 	br	8198d0 <alt_irq_register+0x194>
  819850:	e0bffc17 	ldw	r2,-16(fp)
  819854:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819858:	0005303a 	rdctl	r2,status
  81985c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819860:	e0fff217 	ldw	r3,-56(fp)
  819864:	00bfff84 	movi	r2,-2
  819868:	1884703a 	and	r2,r3,r2
  81986c:	1001703a 	wrctl	status,r2
  
  return context;
  819870:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  819874:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  819878:	e0fff317 	ldw	r3,-52(fp)
  81987c:	00800044 	movi	r2,1
  819880:	10c4983a 	sll	r2,r2,r3
  819884:	0084303a 	nor	r2,zero,r2
  819888:	1007883a 	mov	r3,r2
  81988c:	008020b4 	movhi	r2,130
  819890:	10bb1704 	addi	r2,r2,-5028
  819894:	10800017 	ldw	r2,0(r2)
  819898:	1886703a 	and	r3,r3,r2
  81989c:	008020b4 	movhi	r2,130
  8198a0:	10bb1704 	addi	r2,r2,-5028
  8198a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8198a8:	008020b4 	movhi	r2,130
  8198ac:	10bb1704 	addi	r2,r2,-5028
  8198b0:	10800017 	ldw	r2,0(r2)
  8198b4:	100170fa 	wrctl	ienable,r2
  8198b8:	e0bff417 	ldw	r2,-48(fp)
  8198bc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8198c0:	e0bff117 	ldw	r2,-60(fp)
  8198c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8198c8:	0005883a 	mov	r2,zero
  8198cc:	e0bfff15 	stw	r2,-4(fp)
  8198d0:	e0bfff17 	ldw	r2,-4(fp)
  8198d4:	e0bffb15 	stw	r2,-20(fp)
  8198d8:	e0bffa17 	ldw	r2,-24(fp)
  8198dc:	e0bff015 	stw	r2,-64(fp)
  8198e0:	e0bff017 	ldw	r2,-64(fp)
  8198e4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  8198e8:	e0bffb17 	ldw	r2,-20(fp)
}
  8198ec:	e037883a 	mov	sp,fp
  8198f0:	df000017 	ldw	fp,0(sp)
  8198f4:	dec00104 	addi	sp,sp,4
  8198f8:	f800283a 	ret

008198fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8198fc:	defffa04 	addi	sp,sp,-24
  819900:	dfc00515 	stw	ra,20(sp)
  819904:	df000415 	stw	fp,16(sp)
  819908:	dc000315 	stw	r16,12(sp)
  81990c:	df000304 	addi	fp,sp,12
  819910:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  819914:	e0bffe17 	ldw	r2,-8(fp)
  819918:	10800217 	ldw	r2,8(r2)
  81991c:	10d00034 	orhi	r3,r2,16384
  819920:	e0bffe17 	ldw	r2,-8(fp)
  819924:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  819928:	e03ffd15 	stw	zero,-12(fp)
  81992c:	00002306 	br	8199bc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  819930:	e13ffd17 	ldw	r4,-12(fp)
  819934:	040020b4 	movhi	r16,130
  819938:	842f3e04 	addi	r16,r16,-17160
  81993c:	01400304 	movi	r5,12
  819940:	0809b1c0 	call	809b1c <__mulsi3>
  819944:	1405883a 	add	r2,r2,r16
  819948:	10c00017 	ldw	r3,0(r2)
  81994c:	e0bffe17 	ldw	r2,-8(fp)
  819950:	10800017 	ldw	r2,0(r2)
  819954:	1880161e 	bne	r3,r2,8199b0 <alt_file_locked+0xb4>
  819958:	e13ffd17 	ldw	r4,-12(fp)
  81995c:	040020b4 	movhi	r16,130
  819960:	842f3e04 	addi	r16,r16,-17160
  819964:	01400304 	movi	r5,12
  819968:	0809b1c0 	call	809b1c <__mulsi3>
  81996c:	1405883a 	add	r2,r2,r16
  819970:	10800204 	addi	r2,r2,8
  819974:	10800017 	ldw	r2,0(r2)
  819978:	1004403a 	cmpge	r2,r2,zero
  81997c:	10000c1e 	bne	r2,zero,8199b0 <alt_file_locked+0xb4>
  819980:	e13ffd17 	ldw	r4,-12(fp)
  819984:	01400304 	movi	r5,12
  819988:	0809b1c0 	call	809b1c <__mulsi3>
  81998c:	1007883a 	mov	r3,r2
  819990:	008020b4 	movhi	r2,130
  819994:	10af3e04 	addi	r2,r2,-17160
  819998:	1887883a 	add	r3,r3,r2
  81999c:	e0bffe17 	ldw	r2,-8(fp)
  8199a0:	18800326 	beq	r3,r2,8199b0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8199a4:	00bffcc4 	movi	r2,-13
  8199a8:	e0bfff15 	stw	r2,-4(fp)
  8199ac:	00000a06 	br	8199d8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8199b0:	e0bffd17 	ldw	r2,-12(fp)
  8199b4:	10800044 	addi	r2,r2,1
  8199b8:	e0bffd15 	stw	r2,-12(fp)
  8199bc:	008020b4 	movhi	r2,130
  8199c0:	10b3e404 	addi	r2,r2,-12400
  8199c4:	10800017 	ldw	r2,0(r2)
  8199c8:	1007883a 	mov	r3,r2
  8199cc:	e0bffd17 	ldw	r2,-12(fp)
  8199d0:	18bfd72e 	bgeu	r3,r2,819930 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8199d4:	e03fff15 	stw	zero,-4(fp)
  8199d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8199dc:	e037883a 	mov	sp,fp
  8199e0:	dfc00217 	ldw	ra,8(sp)
  8199e4:	df000117 	ldw	fp,4(sp)
  8199e8:	dc000017 	ldw	r16,0(sp)
  8199ec:	dec00304 	addi	sp,sp,12
  8199f0:	f800283a 	ret

008199f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8199f4:	defff404 	addi	sp,sp,-48
  8199f8:	dfc00b15 	stw	ra,44(sp)
  8199fc:	df000a15 	stw	fp,40(sp)
  819a00:	df000a04 	addi	fp,sp,40
  819a04:	e13ffb15 	stw	r4,-20(fp)
  819a08:	e17ffc15 	stw	r5,-16(fp)
  819a0c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  819a10:	00bfffc4 	movi	r2,-1
  819a14:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  819a18:	00bffb44 	movi	r2,-19
  819a1c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  819a20:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  819a24:	e13ffb17 	ldw	r4,-20(fp)
  819a28:	014020b4 	movhi	r5,130
  819a2c:	2973e204 	addi	r5,r5,-12408
  819a30:	081953c0 	call	81953c <alt_find_dev>
  819a34:	e0bffa15 	stw	r2,-24(fp)
  819a38:	e0bffa17 	ldw	r2,-24(fp)
  819a3c:	1004c03a 	cmpne	r2,r2,zero
  819a40:	1000051e 	bne	r2,zero,819a58 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  819a44:	e13ffb17 	ldw	r4,-20(fp)
  819a48:	081a2900 	call	81a290 <alt_find_file>
  819a4c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  819a50:	00800044 	movi	r2,1
  819a54:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  819a58:	e0bffa17 	ldw	r2,-24(fp)
  819a5c:	1005003a 	cmpeq	r2,r2,zero
  819a60:	1000311e 	bne	r2,zero,819b28 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  819a64:	e13ffa17 	ldw	r4,-24(fp)
  819a68:	081a3b00 	call	81a3b0 <alt_get_fd>
  819a6c:	e0bff815 	stw	r2,-32(fp)
  819a70:	e0bff817 	ldw	r2,-32(fp)
  819a74:	1004403a 	cmpge	r2,r2,zero
  819a78:	1000031e 	bne	r2,zero,819a88 <open+0x94>
    {
      status = index;
  819a7c:	e0bff817 	ldw	r2,-32(fp)
  819a80:	e0bff715 	stw	r2,-36(fp)
  819a84:	00002a06 	br	819b30 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  819a88:	e13ff817 	ldw	r4,-32(fp)
  819a8c:	01400304 	movi	r5,12
  819a90:	0809b1c0 	call	809b1c <__mulsi3>
  819a94:	1007883a 	mov	r3,r2
  819a98:	008020b4 	movhi	r2,130
  819a9c:	10af3e04 	addi	r2,r2,-17160
  819aa0:	1885883a 	add	r2,r3,r2
  819aa4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  819aa8:	e0fffc17 	ldw	r3,-16(fp)
  819aac:	00900034 	movhi	r2,16384
  819ab0:	10bfffc4 	addi	r2,r2,-1
  819ab4:	1886703a 	and	r3,r3,r2
  819ab8:	e0bff917 	ldw	r2,-28(fp)
  819abc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  819ac0:	e0bff617 	ldw	r2,-40(fp)
  819ac4:	1004c03a 	cmpne	r2,r2,zero
  819ac8:	1000061e 	bne	r2,zero,819ae4 <open+0xf0>
  819acc:	e13ff917 	ldw	r4,-28(fp)
  819ad0:	08198fc0 	call	8198fc <alt_file_locked>
  819ad4:	e0bff715 	stw	r2,-36(fp)
  819ad8:	e0bff717 	ldw	r2,-36(fp)
  819adc:	1004803a 	cmplt	r2,r2,zero
  819ae0:	1000131e 	bne	r2,zero,819b30 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  819ae4:	e0bffa17 	ldw	r2,-24(fp)
  819ae8:	10800317 	ldw	r2,12(r2)
  819aec:	1005003a 	cmpeq	r2,r2,zero
  819af0:	1000091e 	bne	r2,zero,819b18 <open+0x124>
  819af4:	e0bffa17 	ldw	r2,-24(fp)
  819af8:	10800317 	ldw	r2,12(r2)
  819afc:	e13ff917 	ldw	r4,-28(fp)
  819b00:	e17ffb17 	ldw	r5,-20(fp)
  819b04:	e1bffc17 	ldw	r6,-16(fp)
  819b08:	e1fffd17 	ldw	r7,-12(fp)
  819b0c:	103ee83a 	callr	r2
  819b10:	e0bfff15 	stw	r2,-4(fp)
  819b14:	00000106 	br	819b1c <open+0x128>
  819b18:	e03fff15 	stw	zero,-4(fp)
  819b1c:	e0bfff17 	ldw	r2,-4(fp)
  819b20:	e0bff715 	stw	r2,-36(fp)
  819b24:	00000206 	br	819b30 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  819b28:	00bffb44 	movi	r2,-19
  819b2c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  819b30:	e0bff717 	ldw	r2,-36(fp)
  819b34:	1004403a 	cmpge	r2,r2,zero
  819b38:	1000091e 	bne	r2,zero,819b60 <open+0x16c>
  {
    alt_release_fd (index);  
  819b3c:	e13ff817 	ldw	r4,-32(fp)
  819b40:	080ad180 	call	80ad18 <alt_release_fd>
    ALT_ERRNO = -status;
  819b44:	0819b800 	call	819b80 <alt_get_errno>
  819b48:	e0fff717 	ldw	r3,-36(fp)
  819b4c:	00c7c83a 	sub	r3,zero,r3
  819b50:	10c00015 	stw	r3,0(r2)
    return -1;
  819b54:	00bfffc4 	movi	r2,-1
  819b58:	e0bffe15 	stw	r2,-8(fp)
  819b5c:	00000206 	br	819b68 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  819b60:	e0bff817 	ldw	r2,-32(fp)
  819b64:	e0bffe15 	stw	r2,-8(fp)
  819b68:	e0bffe17 	ldw	r2,-8(fp)
}
  819b6c:	e037883a 	mov	sp,fp
  819b70:	dfc00117 	ldw	ra,4(sp)
  819b74:	df000017 	ldw	fp,0(sp)
  819b78:	dec00204 	addi	sp,sp,8
  819b7c:	f800283a 	ret

00819b80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  819b80:	defffd04 	addi	sp,sp,-12
  819b84:	dfc00215 	stw	ra,8(sp)
  819b88:	df000115 	stw	fp,4(sp)
  819b8c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  819b90:	008020b4 	movhi	r2,130
  819b94:	10b3e504 	addi	r2,r2,-12396
  819b98:	10800017 	ldw	r2,0(r2)
  819b9c:	1005003a 	cmpeq	r2,r2,zero
  819ba0:	1000061e 	bne	r2,zero,819bbc <alt_get_errno+0x3c>
  819ba4:	008020b4 	movhi	r2,130
  819ba8:	10b3e504 	addi	r2,r2,-12396
  819bac:	10800017 	ldw	r2,0(r2)
  819bb0:	103ee83a 	callr	r2
  819bb4:	e0bfff15 	stw	r2,-4(fp)
  819bb8:	00000306 	br	819bc8 <alt_get_errno+0x48>
  819bbc:	008020b4 	movhi	r2,130
  819bc0:	10baed04 	addi	r2,r2,-5196
  819bc4:	e0bfff15 	stw	r2,-4(fp)
  819bc8:	e0bfff17 	ldw	r2,-4(fp)
}
  819bcc:	e037883a 	mov	sp,fp
  819bd0:	dfc00117 	ldw	ra,4(sp)
  819bd4:	df000017 	ldw	fp,0(sp)
  819bd8:	dec00204 	addi	sp,sp,8
  819bdc:	f800283a 	ret

00819be0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  819be0:	defffa04 	addi	sp,sp,-24
  819be4:	df000515 	stw	fp,20(sp)
  819be8:	df000504 	addi	fp,sp,20
  819bec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819bf0:	0005303a 	rdctl	r2,status
  819bf4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819bf8:	e0fffd17 	ldw	r3,-12(fp)
  819bfc:	00bfff84 	movi	r2,-2
  819c00:	1884703a 	and	r2,r3,r2
  819c04:	1001703a 	wrctl	status,r2
  
  return context;
  819c08:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  819c0c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  819c10:	e0bfff17 	ldw	r2,-4(fp)
  819c14:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  819c18:	e0bffc17 	ldw	r2,-16(fp)
  819c1c:	10c00017 	ldw	r3,0(r2)
  819c20:	e0bffc17 	ldw	r2,-16(fp)
  819c24:	10800117 	ldw	r2,4(r2)
  819c28:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  819c2c:	e0bffc17 	ldw	r2,-16(fp)
  819c30:	10c00117 	ldw	r3,4(r2)
  819c34:	e0bffc17 	ldw	r2,-16(fp)
  819c38:	10800017 	ldw	r2,0(r2)
  819c3c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  819c40:	e0fffc17 	ldw	r3,-16(fp)
  819c44:	e0bffc17 	ldw	r2,-16(fp)
  819c48:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  819c4c:	e0fffc17 	ldw	r3,-16(fp)
  819c50:	e0bffc17 	ldw	r2,-16(fp)
  819c54:	18800015 	stw	r2,0(r3)
  819c58:	e0bffe17 	ldw	r2,-8(fp)
  819c5c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819c60:	e0bffb17 	ldw	r2,-20(fp)
  819c64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  819c68:	e037883a 	mov	sp,fp
  819c6c:	df000017 	ldw	fp,0(sp)
  819c70:	dec00104 	addi	sp,sp,4
  819c74:	f800283a 	ret

00819c78 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  819c78:	defffb04 	addi	sp,sp,-20
  819c7c:	dfc00415 	stw	ra,16(sp)
  819c80:	df000315 	stw	fp,12(sp)
  819c84:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  819c88:	d0a02d17 	ldw	r2,-32588(gp)
  819c8c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  819c90:	d0a73f17 	ldw	r2,-25348(gp)
  819c94:	10800044 	addi	r2,r2,1
  819c98:	d0a73f15 	stw	r2,-25348(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  819c9c:	00003106 	br	819d64 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  819ca0:	e0bffe17 	ldw	r2,-8(fp)
  819ca4:	10800017 	ldw	r2,0(r2)
  819ca8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  819cac:	e0bffe17 	ldw	r2,-8(fp)
  819cb0:	10800403 	ldbu	r2,16(r2)
  819cb4:	10803fcc 	andi	r2,r2,255
  819cb8:	1005003a 	cmpeq	r2,r2,zero
  819cbc:	1000051e 	bne	r2,zero,819cd4 <alt_tick+0x5c>
  819cc0:	d0a73f17 	ldw	r2,-25348(gp)
  819cc4:	1004c03a 	cmpne	r2,r2,zero
  819cc8:	1000021e 	bne	r2,zero,819cd4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  819ccc:	e0bffe17 	ldw	r2,-8(fp)
  819cd0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  819cd4:	e0bffe17 	ldw	r2,-8(fp)
  819cd8:	10c00217 	ldw	r3,8(r2)
  819cdc:	d0a73f17 	ldw	r2,-25348(gp)
  819ce0:	10c01e36 	bltu	r2,r3,819d5c <alt_tick+0xe4>
  819ce4:	e0bffe17 	ldw	r2,-8(fp)
  819ce8:	10800403 	ldbu	r2,16(r2)
  819cec:	10803fcc 	andi	r2,r2,255
  819cf0:	1004c03a 	cmpne	r2,r2,zero
  819cf4:	1000191e 	bne	r2,zero,819d5c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  819cf8:	e0bffe17 	ldw	r2,-8(fp)
  819cfc:	10c00317 	ldw	r3,12(r2)
  819d00:	e0bffe17 	ldw	r2,-8(fp)
  819d04:	11000517 	ldw	r4,20(r2)
  819d08:	183ee83a 	callr	r3
  819d0c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  819d10:	e0bffd17 	ldw	r2,-12(fp)
  819d14:	1004c03a 	cmpne	r2,r2,zero
  819d18:	1000031e 	bne	r2,zero,819d28 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  819d1c:	e13ffe17 	ldw	r4,-8(fp)
  819d20:	0819be00 	call	819be0 <alt_alarm_stop>
  819d24:	00000d06 	br	819d5c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  819d28:	e0bffe17 	ldw	r2,-8(fp)
  819d2c:	10c00217 	ldw	r3,8(r2)
  819d30:	e0bffd17 	ldw	r2,-12(fp)
  819d34:	1887883a 	add	r3,r3,r2
  819d38:	e0bffe17 	ldw	r2,-8(fp)
  819d3c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  819d40:	e0bffe17 	ldw	r2,-8(fp)
  819d44:	10c00217 	ldw	r3,8(r2)
  819d48:	d0a73f17 	ldw	r2,-25348(gp)
  819d4c:	1880032e 	bgeu	r3,r2,819d5c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  819d50:	e0fffe17 	ldw	r3,-8(fp)
  819d54:	00800044 	movi	r2,1
  819d58:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  819d5c:	e0bfff17 	ldw	r2,-4(fp)
  819d60:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  819d64:	d0e02d04 	addi	r3,gp,-32588
  819d68:	e0bffe17 	ldw	r2,-8(fp)
  819d6c:	10ffcc1e 	bne	r2,r3,819ca0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  819d70:	080c0340 	call	80c034 <OSTimeTick>
}
  819d74:	e037883a 	mov	sp,fp
  819d78:	dfc00117 	ldw	ra,4(sp)
  819d7c:	df000017 	ldw	fp,0(sp)
  819d80:	dec00204 	addi	sp,sp,8
  819d84:	f800283a 	ret

00819d88 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  819d88:	deffff04 	addi	sp,sp,-4
  819d8c:	df000015 	stw	fp,0(sp)
  819d90:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  819d94:	000170fa 	wrctl	ienable,zero
}
  819d98:	e037883a 	mov	sp,fp
  819d9c:	df000017 	ldw	fp,0(sp)
  819da0:	dec00104 	addi	sp,sp,4
  819da4:	f800283a 	ret

00819da8 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  819da8:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  819dac:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  819db0:	d1272b17 	ldw	r4,-25428(gp)

      stw ra,  0(sp)
  819db4:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  819db8:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  819dbc:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  819dc0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  819dc4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  819dc8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  819dcc:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  819dd0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  819dd4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  819dd8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  819ddc:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  819de0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  819de4:	081a1c80 	call	81a1c8 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  819de8:	d1272617 	ldw	r4,-25448(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  819dec:	d1671e07 	ldb	r5,-25480(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  819df0:	d1272b15 	stw	r4,-25428(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  819df4:	d1671e45 	stb	r5,-25479(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  819df8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  819dfc:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  819e00:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  819e04:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  819e08:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  819e0c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  819e10:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  819e14:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  819e18:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  819e1c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  819e20:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  819e24:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  819e28:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  819e2c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  819e30:	f800283a 	ret

00819e34 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  819e34:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  819e38:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  819e3c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  819e40:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  819e44:	081a1c80 	call	81a1c8 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  819e48:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  819e4c:	d4a71c45 	stb	r18,-25487(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  819e50:	003fe506 	br	819de8 <OSCtxSw+0x40>

00819e54 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  819e54:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  819e58:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  819e5c:	10800054 	ori	r2,r2,1
      wrctl status, r2
  819e60:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  819e64:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  819e68:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  819e6c:	dec00204 	addi	sp,sp,8

      callr r2
  819e70:	103ee83a 	callr	r2

      nop
  819e74:	0001883a 	nop

00819e78 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  819e78:	defff704 	addi	sp,sp,-36
  819e7c:	dfc00815 	stw	ra,32(sp)
  819e80:	df000715 	stw	fp,28(sp)
  819e84:	df000704 	addi	fp,sp,28
  819e88:	e13ffc15 	stw	r4,-16(fp)
  819e8c:	e17ffd15 	stw	r5,-12(fp)
  819e90:	e1bffe15 	stw	r6,-8(fp)
  819e94:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  819e98:	e0bffe17 	ldw	r2,-8(fp)
  819e9c:	1007883a 	mov	r3,r2
  819ea0:	00bfff04 	movi	r2,-4
  819ea4:	1884703a 	and	r2,r3,r2
  819ea8:	10bf0004 	addi	r2,r2,-1024
  819eac:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  819eb0:	e0bff917 	ldw	r2,-28(fp)
  819eb4:	10000015 	stw	zero,0(r2)
  819eb8:	e0bff917 	ldw	r2,-28(fp)
  819ebc:	10c0bb04 	addi	r3,r2,748
  819ec0:	e0bff917 	ldw	r2,-28(fp)
  819ec4:	10c00115 	stw	r3,4(r2)
  819ec8:	e0bff917 	ldw	r2,-28(fp)
  819ecc:	1080bb04 	addi	r2,r2,748
  819ed0:	10c01704 	addi	r3,r2,92
  819ed4:	e0bff917 	ldw	r2,-28(fp)
  819ed8:	10c00215 	stw	r3,8(r2)
  819edc:	e0bff917 	ldw	r2,-28(fp)
  819ee0:	1080bb04 	addi	r2,r2,748
  819ee4:	10c02e04 	addi	r3,r2,184
  819ee8:	e0bff917 	ldw	r2,-28(fp)
  819eec:	10c00315 	stw	r3,12(r2)
  819ef0:	e0bff917 	ldw	r2,-28(fp)
  819ef4:	10000415 	stw	zero,16(r2)
  819ef8:	e0bff917 	ldw	r2,-28(fp)
  819efc:	10800504 	addi	r2,r2,20
  819f00:	1009883a 	mov	r4,r2
  819f04:	01800644 	movi	r6,25
  819f08:	000b883a 	mov	r5,zero
  819f0c:	08007a00 	call	8007a0 <memset>
  819f10:	e0bff917 	ldw	r2,-28(fp)
  819f14:	10000c15 	stw	zero,48(r2)
  819f18:	e0fff917 	ldw	r3,-28(fp)
  819f1c:	008020b4 	movhi	r2,130
  819f20:	10ad2e04 	addi	r2,r2,-19272
  819f24:	18800d15 	stw	r2,52(r3)
  819f28:	e0bff917 	ldw	r2,-28(fp)
  819f2c:	10000e15 	stw	zero,56(r2)
  819f30:	e0bff917 	ldw	r2,-28(fp)
  819f34:	10000f15 	stw	zero,60(r2)
  819f38:	e0bff917 	ldw	r2,-28(fp)
  819f3c:	10001015 	stw	zero,64(r2)
  819f40:	e0bff917 	ldw	r2,-28(fp)
  819f44:	10001115 	stw	zero,68(r2)
  819f48:	e0bff917 	ldw	r2,-28(fp)
  819f4c:	10001215 	stw	zero,72(r2)
  819f50:	e0bff917 	ldw	r2,-28(fp)
  819f54:	10001315 	stw	zero,76(r2)
  819f58:	e0bff917 	ldw	r2,-28(fp)
  819f5c:	10001415 	stw	zero,80(r2)
  819f60:	e0bff917 	ldw	r2,-28(fp)
  819f64:	10001515 	stw	zero,84(r2)
  819f68:	e0bff917 	ldw	r2,-28(fp)
  819f6c:	10001615 	stw	zero,88(r2)
  819f70:	e0bff917 	ldw	r2,-28(fp)
  819f74:	10001715 	stw	zero,92(r2)
  819f78:	e0bff917 	ldw	r2,-28(fp)
  819f7c:	10001805 	stb	zero,96(r2)
  819f80:	e0bff917 	ldw	r2,-28(fp)
  819f84:	10801f04 	addi	r2,r2,124
  819f88:	10000015 	stw	zero,0(r2)
  819f8c:	10000115 	stw	zero,4(r2)
  819f90:	10000215 	stw	zero,8(r2)
  819f94:	10000315 	stw	zero,12(r2)
  819f98:	10000415 	stw	zero,16(r2)
  819f9c:	10000515 	stw	zero,20(r2)
  819fa0:	10000615 	stw	zero,24(r2)
  819fa4:	10000715 	stw	zero,28(r2)
  819fa8:	10000815 	stw	zero,32(r2)
  819fac:	e0bff917 	ldw	r2,-28(fp)
  819fb0:	10002815 	stw	zero,160(r2)
  819fb4:	e0fff917 	ldw	r3,-28(fp)
  819fb8:	00800044 	movi	r2,1
  819fbc:	18802915 	stw	r2,164(r3)
  819fc0:	18002a15 	stw	zero,168(r3)
  819fc4:	e0fff917 	ldw	r3,-28(fp)
  819fc8:	008cc384 	movi	r2,13070
  819fcc:	18802b0d 	sth	r2,172(r3)
  819fd0:	e0fff917 	ldw	r3,-28(fp)
  819fd4:	00aaf344 	movi	r2,-21555
  819fd8:	18802b8d 	sth	r2,174(r3)
  819fdc:	e0fff917 	ldw	r3,-28(fp)
  819fe0:	00848d04 	movi	r2,4660
  819fe4:	18802c0d 	sth	r2,176(r3)
  819fe8:	e0fff917 	ldw	r3,-28(fp)
  819fec:	00b99b44 	movi	r2,-6547
  819ff0:	18802c8d 	sth	r2,178(r3)
  819ff4:	e0fff917 	ldw	r3,-28(fp)
  819ff8:	00b7bb04 	movi	r2,-8468
  819ffc:	18802d0d 	sth	r2,180(r3)
  81a000:	e0fff917 	ldw	r3,-28(fp)
  81a004:	00800144 	movi	r2,5
  81a008:	18802d8d 	sth	r2,182(r3)
  81a00c:	e0fff917 	ldw	r3,-28(fp)
  81a010:	008002c4 	movi	r2,11
  81a014:	18802e0d 	sth	r2,184(r3)
  81a018:	e0bff917 	ldw	r2,-28(fp)
  81a01c:	10002f15 	stw	zero,188(r2)
  81a020:	e0bff917 	ldw	r2,-28(fp)
  81a024:	10003015 	stw	zero,192(r2)
  81a028:	e0bff917 	ldw	r2,-28(fp)
  81a02c:	10003115 	stw	zero,196(r2)
  81a030:	e0bff917 	ldw	r2,-28(fp)
  81a034:	10003215 	stw	zero,200(r2)
  81a038:	e0bff917 	ldw	r2,-28(fp)
  81a03c:	10003315 	stw	zero,204(r2)
  81a040:	e0bff917 	ldw	r2,-28(fp)
  81a044:	10003415 	stw	zero,208(r2)
  81a048:	e0bff917 	ldw	r2,-28(fp)
  81a04c:	10003e15 	stw	zero,248(r2)
  81a050:	e0bff917 	ldw	r2,-28(fp)
  81a054:	10003f15 	stw	zero,252(r2)
  81a058:	e0bff917 	ldw	r2,-28(fp)
  81a05c:	10004015 	stw	zero,256(r2)
  81a060:	e0bff917 	ldw	r2,-28(fp)
  81a064:	10004115 	stw	zero,260(r2)
  81a068:	e0bff917 	ldw	r2,-28(fp)
  81a06c:	10004215 	stw	zero,264(r2)
  81a070:	e0bff917 	ldw	r2,-28(fp)
  81a074:	10004315 	stw	zero,268(r2)
  81a078:	e0bff917 	ldw	r2,-28(fp)
  81a07c:	10004415 	stw	zero,272(r2)
  81a080:	e0bff917 	ldw	r2,-28(fp)
  81a084:	10004515 	stw	zero,276(r2)
  81a088:	e0bff917 	ldw	r2,-28(fp)
  81a08c:	10004615 	stw	zero,280(r2)
  81a090:	e0bff917 	ldw	r2,-28(fp)
  81a094:	10004715 	stw	zero,284(r2)
  81a098:	e0bff917 	ldw	r2,-28(fp)
  81a09c:	10003505 	stb	zero,212(r2)
  81a0a0:	e0bff917 	ldw	r2,-28(fp)
  81a0a4:	10003705 	stb	zero,220(r2)
  81a0a8:	e0bff917 	ldw	r2,-28(fp)
  81a0ac:	10003d15 	stw	zero,244(r2)
  81a0b0:	e0bff917 	ldw	r2,-28(fp)
  81a0b4:	10005215 	stw	zero,328(r2)
  81a0b8:	e0bff917 	ldw	r2,-28(fp)
  81a0bc:	10005315 	stw	zero,332(r2)
  81a0c0:	e0bff917 	ldw	r2,-28(fp)
  81a0c4:	10005415 	stw	zero,336(r2)
  81a0c8:	e0bff917 	ldw	r2,-28(fp)
  81a0cc:	10005515 	stw	zero,340(r2)
  81a0d0:	e0bff917 	ldw	r2,-28(fp)
  81a0d4:	1000b515 	stw	zero,724(r2)
  81a0d8:	e0bff917 	ldw	r2,-28(fp)
  81a0dc:	10007515 	stw	zero,468(r2)
  81a0e0:	e0bff917 	ldw	r2,-28(fp)
  81a0e4:	1000b715 	stw	zero,732(r2)
  81a0e8:	e0bff917 	ldw	r2,-28(fp)
  81a0ec:	1000b815 	stw	zero,736(r2)
  81a0f0:	e0bff917 	ldw	r2,-28(fp)
  81a0f4:	1000b915 	stw	zero,740(r2)
  81a0f8:	e0bff917 	ldw	r2,-28(fp)
  81a0fc:	1000ba15 	stw	zero,744(r2)
  81a100:	e0bff917 	ldw	r2,-28(fp)
  81a104:	1080bb04 	addi	r2,r2,748
  81a108:	1009883a 	mov	r4,r2
  81a10c:	01804504 	movi	r6,276
  81a110:	000b883a 	mov	r5,zero
  81a114:	08007a00 	call	8007a0 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  81a118:	e0bff917 	ldw	r2,-28(fp)
  81a11c:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  81a120:	e0bffb17 	ldw	r2,-20(fp)
  81a124:	10bff304 	addi	r2,r2,-52
  81a128:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  81a12c:	e0bffa17 	ldw	r2,-24(fp)
  81a130:	10c00c04 	addi	r3,r2,48
  81a134:	e0bffc17 	ldw	r2,-16(fp)
  81a138:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  81a13c:	e0bffa17 	ldw	r2,-24(fp)
  81a140:	10c00b04 	addi	r3,r2,44
  81a144:	e0bffd17 	ldw	r2,-12(fp)
  81a148:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  81a14c:	e0bffa17 	ldw	r2,-24(fp)
  81a150:	10c00a04 	addi	r3,r2,40
  81a154:	e0bff917 	ldw	r2,-28(fp)
  81a158:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  81a15c:	008020b4 	movhi	r2,130
  81a160:	10a79504 	addi	r2,r2,-25004
  81a164:	10c00104 	addi	r3,r2,4
  81a168:	e0bffa17 	ldw	r2,-24(fp)
  81a16c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  81a170:	e0bffa17 	ldw	r2,-24(fp)
}
  81a174:	e037883a 	mov	sp,fp
  81a178:	dfc00117 	ldw	ra,4(sp)
  81a17c:	df000017 	ldw	fp,0(sp)
  81a180:	dec00204 	addi	sp,sp,8
  81a184:	f800283a 	ret

0081a188 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  81a188:	defffe04 	addi	sp,sp,-8
  81a18c:	df000115 	stw	fp,4(sp)
  81a190:	df000104 	addi	fp,sp,4
  81a194:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  81a198:	e037883a 	mov	sp,fp
  81a19c:	df000017 	ldw	fp,0(sp)
  81a1a0:	dec00104 	addi	sp,sp,4
  81a1a4:	f800283a 	ret

0081a1a8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  81a1a8:	defffe04 	addi	sp,sp,-8
  81a1ac:	df000115 	stw	fp,4(sp)
  81a1b0:	df000104 	addi	fp,sp,4
  81a1b4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  81a1b8:	e037883a 	mov	sp,fp
  81a1bc:	df000017 	ldw	fp,0(sp)
  81a1c0:	dec00104 	addi	sp,sp,4
  81a1c4:	f800283a 	ret

0081a1c8 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  81a1c8:	deffff04 	addi	sp,sp,-4
  81a1cc:	df000015 	stw	fp,0(sp)
  81a1d0:	d839883a 	mov	fp,sp
}
  81a1d4:	e037883a 	mov	sp,fp
  81a1d8:	df000017 	ldw	fp,0(sp)
  81a1dc:	dec00104 	addi	sp,sp,4
  81a1e0:	f800283a 	ret

0081a1e4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  81a1e4:	deffff04 	addi	sp,sp,-4
  81a1e8:	df000015 	stw	fp,0(sp)
  81a1ec:	d839883a 	mov	fp,sp
}
  81a1f0:	e037883a 	mov	sp,fp
  81a1f4:	df000017 	ldw	fp,0(sp)
  81a1f8:	dec00104 	addi	sp,sp,4
  81a1fc:	f800283a 	ret

0081a200 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  81a200:	deffff04 	addi	sp,sp,-4
  81a204:	df000015 	stw	fp,0(sp)
  81a208:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  81a20c:	e037883a 	mov	sp,fp
  81a210:	df000017 	ldw	fp,0(sp)
  81a214:	dec00104 	addi	sp,sp,4
  81a218:	f800283a 	ret

0081a21c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  81a21c:	deffff04 	addi	sp,sp,-4
  81a220:	df000015 	stw	fp,0(sp)
  81a224:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  81a228:	e037883a 	mov	sp,fp
  81a22c:	df000017 	ldw	fp,0(sp)
  81a230:	dec00104 	addi	sp,sp,4
  81a234:	f800283a 	ret

0081a238 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  81a238:	deffff04 	addi	sp,sp,-4
  81a23c:	df000015 	stw	fp,0(sp)
  81a240:	d839883a 	mov	fp,sp
}
  81a244:	e037883a 	mov	sp,fp
  81a248:	df000017 	ldw	fp,0(sp)
  81a24c:	dec00104 	addi	sp,sp,4
  81a250:	f800283a 	ret

0081a254 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  81a254:	deffff04 	addi	sp,sp,-4
  81a258:	df000015 	stw	fp,0(sp)
  81a25c:	d839883a 	mov	fp,sp
}
  81a260:	e037883a 	mov	sp,fp
  81a264:	df000017 	ldw	fp,0(sp)
  81a268:	dec00104 	addi	sp,sp,4
  81a26c:	f800283a 	ret

0081a270 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  81a270:	defffe04 	addi	sp,sp,-8
  81a274:	df000115 	stw	fp,4(sp)
  81a278:	df000104 	addi	fp,sp,4
  81a27c:	e13fff15 	stw	r4,-4(fp)
}
  81a280:	e037883a 	mov	sp,fp
  81a284:	df000017 	ldw	fp,0(sp)
  81a288:	dec00104 	addi	sp,sp,4
  81a28c:	f800283a 	ret

0081a290 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81a290:	defffa04 	addi	sp,sp,-24
  81a294:	dfc00515 	stw	ra,20(sp)
  81a298:	df000415 	stw	fp,16(sp)
  81a29c:	df000404 	addi	fp,sp,16
  81a2a0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81a2a4:	008020b4 	movhi	r2,130
  81a2a8:	10b3e004 	addi	r2,r2,-12416
  81a2ac:	10800017 	ldw	r2,0(r2)
  81a2b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81a2b4:	00003306 	br	81a384 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  81a2b8:	e0bffd17 	ldw	r2,-12(fp)
  81a2bc:	11000217 	ldw	r4,8(r2)
  81a2c0:	08009640 	call	800964 <strlen>
  81a2c4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  81a2c8:	e0bffd17 	ldw	r2,-12(fp)
  81a2cc:	10c00217 	ldw	r3,8(r2)
  81a2d0:	e0bffc17 	ldw	r2,-16(fp)
  81a2d4:	1885883a 	add	r2,r3,r2
  81a2d8:	10bfffc4 	addi	r2,r2,-1
  81a2dc:	10800003 	ldbu	r2,0(r2)
  81a2e0:	10803fcc 	andi	r2,r2,255
  81a2e4:	1080201c 	xori	r2,r2,128
  81a2e8:	10bfe004 	addi	r2,r2,-128
  81a2ec:	10800bd8 	cmpnei	r2,r2,47
  81a2f0:	1000031e 	bne	r2,zero,81a300 <alt_find_file+0x70>
    {
      len -= 1;
  81a2f4:	e0bffc17 	ldw	r2,-16(fp)
  81a2f8:	10bfffc4 	addi	r2,r2,-1
  81a2fc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81a300:	e0bffc17 	ldw	r2,-16(fp)
  81a304:	1007883a 	mov	r3,r2
  81a308:	e0bffe17 	ldw	r2,-8(fp)
  81a30c:	1885883a 	add	r2,r3,r2
  81a310:	10800003 	ldbu	r2,0(r2)
  81a314:	10803fcc 	andi	r2,r2,255
  81a318:	1080201c 	xori	r2,r2,128
  81a31c:	10bfe004 	addi	r2,r2,-128
  81a320:	10800be0 	cmpeqi	r2,r2,47
  81a324:	10000a1e 	bne	r2,zero,81a350 <alt_find_file+0xc0>
  81a328:	e0bffc17 	ldw	r2,-16(fp)
  81a32c:	1007883a 	mov	r3,r2
  81a330:	e0bffe17 	ldw	r2,-8(fp)
  81a334:	1885883a 	add	r2,r3,r2
  81a338:	10800003 	ldbu	r2,0(r2)
  81a33c:	10803fcc 	andi	r2,r2,255
  81a340:	1080201c 	xori	r2,r2,128
  81a344:	10bfe004 	addi	r2,r2,-128
  81a348:	1004c03a 	cmpne	r2,r2,zero
  81a34c:	10000a1e 	bne	r2,zero,81a378 <alt_find_file+0xe8>
  81a350:	e0bffd17 	ldw	r2,-12(fp)
  81a354:	11000217 	ldw	r4,8(r2)
  81a358:	e1bffc17 	ldw	r6,-16(fp)
  81a35c:	e17ffe17 	ldw	r5,-8(fp)
  81a360:	081a5000 	call	81a500 <memcmp>
  81a364:	1004c03a 	cmpne	r2,r2,zero
  81a368:	1000031e 	bne	r2,zero,81a378 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81a36c:	e0bffd17 	ldw	r2,-12(fp)
  81a370:	e0bfff15 	stw	r2,-4(fp)
  81a374:	00000806 	br	81a398 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  81a378:	e0bffd17 	ldw	r2,-12(fp)
  81a37c:	10800017 	ldw	r2,0(r2)
  81a380:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81a384:	00c020b4 	movhi	r3,130
  81a388:	18f3e004 	addi	r3,r3,-12416
  81a38c:	e0bffd17 	ldw	r2,-12(fp)
  81a390:	10ffc91e 	bne	r2,r3,81a2b8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81a394:	e03fff15 	stw	zero,-4(fp)
  81a398:	e0bfff17 	ldw	r2,-4(fp)
}
  81a39c:	e037883a 	mov	sp,fp
  81a3a0:	dfc00117 	ldw	ra,4(sp)
  81a3a4:	df000017 	ldw	fp,0(sp)
  81a3a8:	dec00204 	addi	sp,sp,8
  81a3ac:	f800283a 	ret

0081a3b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81a3b0:	defff704 	addi	sp,sp,-36
  81a3b4:	dfc00815 	stw	ra,32(sp)
  81a3b8:	df000715 	stw	fp,28(sp)
  81a3bc:	dc000615 	stw	r16,24(sp)
  81a3c0:	df000604 	addi	fp,sp,24
  81a3c4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81a3c8:	00bffa04 	movi	r2,-24
  81a3cc:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  81a3d0:	008020b4 	movhi	r2,130
  81a3d4:	10baee04 	addi	r2,r2,-5192
  81a3d8:	10800017 	ldw	r2,0(r2)
  81a3dc:	e0bffa15 	stw	r2,-24(fp)
  81a3e0:	e03ffb0d 	sth	zero,-20(fp)
  81a3e4:	e17ffb0b 	ldhu	r5,-20(fp)
  81a3e8:	e1bffe04 	addi	r6,fp,-8
  81a3ec:	e13ffa17 	ldw	r4,-24(fp)
  81a3f0:	0810e540 	call	810e54 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81a3f4:	e03ffd15 	stw	zero,-12(fp)
  81a3f8:	00002006 	br	81a47c <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
  81a3fc:	e13ffd17 	ldw	r4,-12(fp)
  81a400:	040020b4 	movhi	r16,130
  81a404:	842f3e04 	addi	r16,r16,-17160
  81a408:	01400304 	movi	r5,12
  81a40c:	0809b1c0 	call	809b1c <__mulsi3>
  81a410:	1405883a 	add	r2,r2,r16
  81a414:	10800017 	ldw	r2,0(r2)
  81a418:	1004c03a 	cmpne	r2,r2,zero
  81a41c:	1000141e 	bne	r2,zero,81a470 <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
  81a420:	e13ffd17 	ldw	r4,-12(fp)
  81a424:	040020b4 	movhi	r16,130
  81a428:	842f3e04 	addi	r16,r16,-17160
  81a42c:	01400304 	movi	r5,12
  81a430:	0809b1c0 	call	809b1c <__mulsi3>
  81a434:	1407883a 	add	r3,r2,r16
  81a438:	e0bfff17 	ldw	r2,-4(fp)
  81a43c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  81a440:	008020b4 	movhi	r2,130
  81a444:	10b3e404 	addi	r2,r2,-12400
  81a448:	10c00017 	ldw	r3,0(r2)
  81a44c:	e0bffd17 	ldw	r2,-12(fp)
  81a450:	1880040e 	bge	r3,r2,81a464 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
  81a454:	00c020b4 	movhi	r3,130
  81a458:	18f3e404 	addi	r3,r3,-12400
  81a45c:	e0bffd17 	ldw	r2,-12(fp)
  81a460:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  81a464:	e0bffd17 	ldw	r2,-12(fp)
  81a468:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  81a46c:	00000606 	br	81a488 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81a470:	e0bffd17 	ldw	r2,-12(fp)
  81a474:	10800044 	addi	r2,r2,1
  81a478:	e0bffd15 	stw	r2,-12(fp)
  81a47c:	e0bffd17 	ldw	r2,-12(fp)
  81a480:	10800810 	cmplti	r2,r2,32
  81a484:	103fdd1e 	bne	r2,zero,81a3fc <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  81a488:	008020b4 	movhi	r2,130
  81a48c:	10baee04 	addi	r2,r2,-5192
  81a490:	11000017 	ldw	r4,0(r2)
  81a494:	081124c0 	call	81124c <OSSemPost>

  return rc;
  81a498:	e0bffc17 	ldw	r2,-16(fp)
}
  81a49c:	e037883a 	mov	sp,fp
  81a4a0:	dfc00217 	ldw	ra,8(sp)
  81a4a4:	df000117 	ldw	fp,4(sp)
  81a4a8:	dc000017 	ldw	r16,0(sp)
  81a4ac:	dec00304 	addi	sp,sp,12
  81a4b0:	f800283a 	ret

0081a4b4 <atexit>:
  81a4b4:	200b883a 	mov	r5,r4
  81a4b8:	000d883a 	mov	r6,zero
  81a4bc:	0009883a 	mov	r4,zero
  81a4c0:	000f883a 	mov	r7,zero
  81a4c4:	081a8ac1 	jmpi	81a8ac <__register_exitproc>

0081a4c8 <exit>:
  81a4c8:	defffe04 	addi	sp,sp,-8
  81a4cc:	000b883a 	mov	r5,zero
  81a4d0:	dc000015 	stw	r16,0(sp)
  81a4d4:	dfc00115 	stw	ra,4(sp)
  81a4d8:	2021883a 	mov	r16,r4
  81a4dc:	081a9e40 	call	81a9e4 <__call_exitprocs>
  81a4e0:	008020b4 	movhi	r2,130
  81a4e4:	10b3db04 	addi	r2,r2,-12436
  81a4e8:	11000017 	ldw	r4,0(r2)
  81a4ec:	20800f17 	ldw	r2,60(r4)
  81a4f0:	10000126 	beq	r2,zero,81a4f8 <exit+0x30>
  81a4f4:	103ee83a 	callr	r2
  81a4f8:	8009883a 	mov	r4,r16
  81a4fc:	081abd40 	call	81abd4 <_exit>

0081a500 <memcmp>:
  81a500:	00c000c4 	movi	r3,3
  81a504:	1980032e 	bgeu	r3,r6,81a514 <memcmp+0x14>
  81a508:	2144b03a 	or	r2,r4,r5
  81a50c:	10c4703a 	and	r2,r2,r3
  81a510:	10000f26 	beq	r2,zero,81a550 <memcmp+0x50>
  81a514:	31ffffc4 	addi	r7,r6,-1
  81a518:	3000061e 	bne	r6,zero,81a534 <memcmp+0x34>
  81a51c:	00000a06 	br	81a548 <memcmp+0x48>
  81a520:	39ffffc4 	addi	r7,r7,-1
  81a524:	00bfffc4 	movi	r2,-1
  81a528:	21000044 	addi	r4,r4,1
  81a52c:	29400044 	addi	r5,r5,1
  81a530:	38800526 	beq	r7,r2,81a548 <memcmp+0x48>
  81a534:	20c00003 	ldbu	r3,0(r4)
  81a538:	28800003 	ldbu	r2,0(r5)
  81a53c:	18bff826 	beq	r3,r2,81a520 <memcmp+0x20>
  81a540:	1885c83a 	sub	r2,r3,r2
  81a544:	f800283a 	ret
  81a548:	0005883a 	mov	r2,zero
  81a54c:	f800283a 	ret
  81a550:	180f883a 	mov	r7,r3
  81a554:	20c00017 	ldw	r3,0(r4)
  81a558:	28800017 	ldw	r2,0(r5)
  81a55c:	18bfed1e 	bne	r3,r2,81a514 <memcmp+0x14>
  81a560:	31bfff04 	addi	r6,r6,-4
  81a564:	21000104 	addi	r4,r4,4
  81a568:	29400104 	addi	r5,r5,4
  81a56c:	39bff936 	bltu	r7,r6,81a554 <memcmp+0x54>
  81a570:	003fe806 	br	81a514 <memcmp+0x14>

0081a574 <putc>:
  81a574:	defffc04 	addi	sp,sp,-16
  81a578:	dc800215 	stw	r18,8(sp)
  81a57c:	048020b4 	movhi	r18,130
  81a580:	94b3da04 	addi	r18,r18,-12440
  81a584:	90c00017 	ldw	r3,0(r18)
  81a588:	dc400115 	stw	r17,4(sp)
  81a58c:	dc000015 	stw	r16,0(sp)
  81a590:	dfc00315 	stw	ra,12(sp)
  81a594:	2023883a 	mov	r17,r4
  81a598:	2821883a 	mov	r16,r5
  81a59c:	18000226 	beq	r3,zero,81a5a8 <putc+0x34>
  81a5a0:	18800e17 	ldw	r2,56(r3)
  81a5a4:	10001126 	beq	r2,zero,81a5ec <putc+0x78>
  81a5a8:	80800217 	ldw	r2,8(r16)
  81a5ac:	10ffffc4 	addi	r3,r2,-1
  81a5b0:	80c00215 	stw	r3,8(r16)
  81a5b4:	18001316 	blt	r3,zero,81a604 <putc+0x90>
  81a5b8:	80800017 	ldw	r2,0(r16)
  81a5bc:	14400005 	stb	r17,0(r2)
  81a5c0:	80c00017 	ldw	r3,0(r16)
  81a5c4:	18800044 	addi	r2,r3,1
  81a5c8:	18c00003 	ldbu	r3,0(r3)
  81a5cc:	80800015 	stw	r2,0(r16)
  81a5d0:	1805883a 	mov	r2,r3
  81a5d4:	dfc00317 	ldw	ra,12(sp)
  81a5d8:	dc800217 	ldw	r18,8(sp)
  81a5dc:	dc400117 	ldw	r17,4(sp)
  81a5e0:	dc000017 	ldw	r16,0(sp)
  81a5e4:	dec00404 	addi	sp,sp,16
  81a5e8:	f800283a 	ret
  81a5ec:	1809883a 	mov	r4,r3
  81a5f0:	08044e40 	call	8044e4 <__sinit>
  81a5f4:	80800217 	ldw	r2,8(r16)
  81a5f8:	10ffffc4 	addi	r3,r2,-1
  81a5fc:	80c00215 	stw	r3,8(r16)
  81a600:	183fed0e 	bge	r3,zero,81a5b8 <putc+0x44>
  81a604:	80800617 	ldw	r2,24(r16)
  81a608:	18800f16 	blt	r3,r2,81a648 <putc+0xd4>
  81a60c:	80800017 	ldw	r2,0(r16)
  81a610:	14400005 	stb	r17,0(r2)
  81a614:	81000017 	ldw	r4,0(r16)
  81a618:	00800284 	movi	r2,10
  81a61c:	20c00003 	ldbu	r3,0(r4)
  81a620:	18801226 	beq	r3,r2,81a66c <putc+0xf8>
  81a624:	20800044 	addi	r2,r4,1
  81a628:	80800015 	stw	r2,0(r16)
  81a62c:	1805883a 	mov	r2,r3
  81a630:	dfc00317 	ldw	ra,12(sp)
  81a634:	dc800217 	ldw	r18,8(sp)
  81a638:	dc400117 	ldw	r17,4(sp)
  81a63c:	dc000017 	ldw	r16,0(sp)
  81a640:	dec00404 	addi	sp,sp,16
  81a644:	f800283a 	ret
  81a648:	91000017 	ldw	r4,0(r18)
  81a64c:	880b883a 	mov	r5,r17
  81a650:	800d883a 	mov	r6,r16
  81a654:	dfc00317 	ldw	ra,12(sp)
  81a658:	dc800217 	ldw	r18,8(sp)
  81a65c:	dc400117 	ldw	r17,4(sp)
  81a660:	dc000017 	ldw	r16,0(sp)
  81a664:	dec00404 	addi	sp,sp,16
  81a668:	081a7601 	jmpi	81a760 <__swbuf_r>
  81a66c:	91000017 	ldw	r4,0(r18)
  81a670:	180b883a 	mov	r5,r3
  81a674:	003ff606 	br	81a650 <putc+0xdc>

0081a678 <_putc_r>:
  81a678:	defffc04 	addi	sp,sp,-16
  81a67c:	dc400215 	stw	r17,8(sp)
  81a680:	dc000115 	stw	r16,4(sp)
  81a684:	dfc00315 	stw	ra,12(sp)
  81a688:	2021883a 	mov	r16,r4
  81a68c:	2823883a 	mov	r17,r5
  81a690:	20000226 	beq	r4,zero,81a69c <_putc_r+0x24>
  81a694:	20800e17 	ldw	r2,56(r4)
  81a698:	10001026 	beq	r2,zero,81a6dc <_putc_r+0x64>
  81a69c:	30800217 	ldw	r2,8(r6)
  81a6a0:	10ffffc4 	addi	r3,r2,-1
  81a6a4:	30c00215 	stw	r3,8(r6)
  81a6a8:	18001316 	blt	r3,zero,81a6f8 <_putc_r+0x80>
  81a6ac:	30800017 	ldw	r2,0(r6)
  81a6b0:	14400005 	stb	r17,0(r2)
  81a6b4:	30c00017 	ldw	r3,0(r6)
  81a6b8:	18800044 	addi	r2,r3,1
  81a6bc:	18c00003 	ldbu	r3,0(r3)
  81a6c0:	30800015 	stw	r2,0(r6)
  81a6c4:	1805883a 	mov	r2,r3
  81a6c8:	dfc00317 	ldw	ra,12(sp)
  81a6cc:	dc400217 	ldw	r17,8(sp)
  81a6d0:	dc000117 	ldw	r16,4(sp)
  81a6d4:	dec00404 	addi	sp,sp,16
  81a6d8:	f800283a 	ret
  81a6dc:	d9800015 	stw	r6,0(sp)
  81a6e0:	08044e40 	call	8044e4 <__sinit>
  81a6e4:	d9800017 	ldw	r6,0(sp)
  81a6e8:	30800217 	ldw	r2,8(r6)
  81a6ec:	10ffffc4 	addi	r3,r2,-1
  81a6f0:	30c00215 	stw	r3,8(r6)
  81a6f4:	183fed0e 	bge	r3,zero,81a6ac <_putc_r+0x34>
  81a6f8:	30800617 	ldw	r2,24(r6)
  81a6fc:	18800e16 	blt	r3,r2,81a738 <_putc_r+0xc0>
  81a700:	30800017 	ldw	r2,0(r6)
  81a704:	14400005 	stb	r17,0(r2)
  81a708:	31000017 	ldw	r4,0(r6)
  81a70c:	00800284 	movi	r2,10
  81a710:	20c00003 	ldbu	r3,0(r4)
  81a714:	18800f26 	beq	r3,r2,81a754 <_putc_r+0xdc>
  81a718:	20800044 	addi	r2,r4,1
  81a71c:	30800015 	stw	r2,0(r6)
  81a720:	1805883a 	mov	r2,r3
  81a724:	dfc00317 	ldw	ra,12(sp)
  81a728:	dc400217 	ldw	r17,8(sp)
  81a72c:	dc000117 	ldw	r16,4(sp)
  81a730:	dec00404 	addi	sp,sp,16
  81a734:	f800283a 	ret
  81a738:	8009883a 	mov	r4,r16
  81a73c:	880b883a 	mov	r5,r17
  81a740:	dfc00317 	ldw	ra,12(sp)
  81a744:	dc400217 	ldw	r17,8(sp)
  81a748:	dc000117 	ldw	r16,4(sp)
  81a74c:	dec00404 	addi	sp,sp,16
  81a750:	081a7601 	jmpi	81a760 <__swbuf_r>
  81a754:	8009883a 	mov	r4,r16
  81a758:	180b883a 	mov	r5,r3
  81a75c:	003ff806 	br	81a740 <_putc_r+0xc8>

0081a760 <__swbuf_r>:
  81a760:	defffc04 	addi	sp,sp,-16
  81a764:	dc400215 	stw	r17,8(sp)
  81a768:	dc000115 	stw	r16,4(sp)
  81a76c:	dfc00315 	stw	ra,12(sp)
  81a770:	2023883a 	mov	r17,r4
  81a774:	2821883a 	mov	r16,r5
  81a778:	20000226 	beq	r4,zero,81a784 <__swbuf_r+0x24>
  81a77c:	20800e17 	ldw	r2,56(r4)
  81a780:	10002f26 	beq	r2,zero,81a840 <__swbuf_r+0xe0>
  81a784:	3080030b 	ldhu	r2,12(r6)
  81a788:	30c00617 	ldw	r3,24(r6)
  81a78c:	1080020c 	andi	r2,r2,8
  81a790:	30c00215 	stw	r3,8(r6)
  81a794:	10002226 	beq	r2,zero,81a820 <__swbuf_r+0xc0>
  81a798:	30c00417 	ldw	r3,16(r6)
  81a79c:	18002026 	beq	r3,zero,81a820 <__swbuf_r+0xc0>
  81a7a0:	31000017 	ldw	r4,0(r6)
  81a7a4:	30800517 	ldw	r2,20(r6)
  81a7a8:	20c7c83a 	sub	r3,r4,r3
  81a7ac:	18802f0e 	bge	r3,r2,81a86c <__swbuf_r+0x10c>
  81a7b0:	19400044 	addi	r5,r3,1
  81a7b4:	30800217 	ldw	r2,8(r6)
  81a7b8:	84003fcc 	andi	r16,r16,255
  81a7bc:	20c00044 	addi	r3,r4,1
  81a7c0:	10bfffc4 	addi	r2,r2,-1
  81a7c4:	30800215 	stw	r2,8(r6)
  81a7c8:	24000005 	stb	r16,0(r4)
  81a7cc:	30800517 	ldw	r2,20(r6)
  81a7d0:	30c00015 	stw	r3,0(r6)
  81a7d4:	11400c26 	beq	r2,r5,81a808 <__swbuf_r+0xa8>
  81a7d8:	3080030b 	ldhu	r2,12(r6)
  81a7dc:	1080004c 	andi	r2,r2,1
  81a7e0:	1005003a 	cmpeq	r2,r2,zero
  81a7e4:	10000626 	beq	r2,zero,81a800 <__swbuf_r+0xa0>
  81a7e8:	8005883a 	mov	r2,r16
  81a7ec:	dfc00317 	ldw	ra,12(sp)
  81a7f0:	dc400217 	ldw	r17,8(sp)
  81a7f4:	dc000117 	ldw	r16,4(sp)
  81a7f8:	dec00404 	addi	sp,sp,16
  81a7fc:	f800283a 	ret
  81a800:	00800284 	movi	r2,10
  81a804:	80bff81e 	bne	r16,r2,81a7e8 <__swbuf_r+0x88>
  81a808:	8809883a 	mov	r4,r17
  81a80c:	300b883a 	mov	r5,r6
  81a810:	080424c0 	call	80424c <_fflush_r>
  81a814:	103ff426 	beq	r2,zero,81a7e8 <__swbuf_r+0x88>
  81a818:	043fffc4 	movi	r16,-1
  81a81c:	003ff206 	br	81a7e8 <__swbuf_r+0x88>
  81a820:	300b883a 	mov	r5,r6
  81a824:	8809883a 	mov	r4,r17
  81a828:	d9800015 	stw	r6,0(sp)
  81a82c:	08029180 	call	802918 <__swsetup_r>
  81a830:	d9800017 	ldw	r6,0(sp)
  81a834:	1000061e 	bne	r2,zero,81a850 <__swbuf_r+0xf0>
  81a838:	30c00417 	ldw	r3,16(r6)
  81a83c:	003fd806 	br	81a7a0 <__swbuf_r+0x40>
  81a840:	d9800015 	stw	r6,0(sp)
  81a844:	08044e40 	call	8044e4 <__sinit>
  81a848:	d9800017 	ldw	r6,0(sp)
  81a84c:	003fcd06 	br	81a784 <__swbuf_r+0x24>
  81a850:	3080030b 	ldhu	r2,12(r6)
  81a854:	00c00244 	movi	r3,9
  81a858:	043fffc4 	movi	r16,-1
  81a85c:	10801014 	ori	r2,r2,64
  81a860:	3080030d 	sth	r2,12(r6)
  81a864:	88c00015 	stw	r3,0(r17)
  81a868:	003fdf06 	br	81a7e8 <__swbuf_r+0x88>
  81a86c:	300b883a 	mov	r5,r6
  81a870:	8809883a 	mov	r4,r17
  81a874:	d9800015 	stw	r6,0(sp)
  81a878:	080424c0 	call	80424c <_fflush_r>
  81a87c:	d9800017 	ldw	r6,0(sp)
  81a880:	103fe51e 	bne	r2,zero,81a818 <__swbuf_r+0xb8>
  81a884:	31000017 	ldw	r4,0(r6)
  81a888:	01400044 	movi	r5,1
  81a88c:	003fc906 	br	81a7b4 <__swbuf_r+0x54>

0081a890 <__swbuf>:
  81a890:	018020b4 	movhi	r6,130
  81a894:	31b3da04 	addi	r6,r6,-12440
  81a898:	2007883a 	mov	r3,r4
  81a89c:	31000017 	ldw	r4,0(r6)
  81a8a0:	280d883a 	mov	r6,r5
  81a8a4:	180b883a 	mov	r5,r3
  81a8a8:	081a7601 	jmpi	81a760 <__swbuf_r>

0081a8ac <__register_exitproc>:
  81a8ac:	defffa04 	addi	sp,sp,-24
  81a8b0:	008020b4 	movhi	r2,130
  81a8b4:	10b3db04 	addi	r2,r2,-12436
  81a8b8:	dc000015 	stw	r16,0(sp)
  81a8bc:	14000017 	ldw	r16,0(r2)
  81a8c0:	dd000415 	stw	r20,16(sp)
  81a8c4:	2829883a 	mov	r20,r5
  81a8c8:	81405217 	ldw	r5,328(r16)
  81a8cc:	dcc00315 	stw	r19,12(sp)
  81a8d0:	dc800215 	stw	r18,8(sp)
  81a8d4:	dc400115 	stw	r17,4(sp)
  81a8d8:	dfc00515 	stw	ra,20(sp)
  81a8dc:	2023883a 	mov	r17,r4
  81a8e0:	3027883a 	mov	r19,r6
  81a8e4:	3825883a 	mov	r18,r7
  81a8e8:	28002526 	beq	r5,zero,81a980 <__register_exitproc+0xd4>
  81a8ec:	29000117 	ldw	r4,4(r5)
  81a8f0:	008007c4 	movi	r2,31
  81a8f4:	11002716 	blt	r2,r4,81a994 <__register_exitproc+0xe8>
  81a8f8:	8800101e 	bne	r17,zero,81a93c <__register_exitproc+0x90>
  81a8fc:	2105883a 	add	r2,r4,r4
  81a900:	1085883a 	add	r2,r2,r2
  81a904:	20c00044 	addi	r3,r4,1
  81a908:	1145883a 	add	r2,r2,r5
  81a90c:	0009883a 	mov	r4,zero
  81a910:	15000215 	stw	r20,8(r2)
  81a914:	28c00115 	stw	r3,4(r5)
  81a918:	2005883a 	mov	r2,r4
  81a91c:	dfc00517 	ldw	ra,20(sp)
  81a920:	dd000417 	ldw	r20,16(sp)
  81a924:	dcc00317 	ldw	r19,12(sp)
  81a928:	dc800217 	ldw	r18,8(sp)
  81a92c:	dc400117 	ldw	r17,4(sp)
  81a930:	dc000017 	ldw	r16,0(sp)
  81a934:	dec00604 	addi	sp,sp,24
  81a938:	f800283a 	ret
  81a93c:	29802204 	addi	r6,r5,136
  81a940:	00800044 	movi	r2,1
  81a944:	110e983a 	sll	r7,r2,r4
  81a948:	30c04017 	ldw	r3,256(r6)
  81a94c:	2105883a 	add	r2,r4,r4
  81a950:	1085883a 	add	r2,r2,r2
  81a954:	1185883a 	add	r2,r2,r6
  81a958:	19c6b03a 	or	r3,r3,r7
  81a95c:	14802015 	stw	r18,128(r2)
  81a960:	14c00015 	stw	r19,0(r2)
  81a964:	00800084 	movi	r2,2
  81a968:	30c04015 	stw	r3,256(r6)
  81a96c:	88bfe31e 	bne	r17,r2,81a8fc <__register_exitproc+0x50>
  81a970:	30804117 	ldw	r2,260(r6)
  81a974:	11c4b03a 	or	r2,r2,r7
  81a978:	30804115 	stw	r2,260(r6)
  81a97c:	003fdf06 	br	81a8fc <__register_exitproc+0x50>
  81a980:	008020f4 	movhi	r2,131
  81a984:	10a94704 	addi	r2,r2,-23268
  81a988:	100b883a 	mov	r5,r2
  81a98c:	80805215 	stw	r2,328(r16)
  81a990:	003fd606 	br	81a8ec <__register_exitproc+0x40>
  81a994:	00800034 	movhi	r2,0
  81a998:	10800004 	addi	r2,r2,0
  81a99c:	1000021e 	bne	r2,zero,81a9a8 <__register_exitproc+0xfc>
  81a9a0:	013fffc4 	movi	r4,-1
  81a9a4:	003fdc06 	br	81a918 <__register_exitproc+0x6c>
  81a9a8:	01006404 	movi	r4,400
  81a9ac:	103ee83a 	callr	r2
  81a9b0:	1007883a 	mov	r3,r2
  81a9b4:	103ffa26 	beq	r2,zero,81a9a0 <__register_exitproc+0xf4>
  81a9b8:	80805217 	ldw	r2,328(r16)
  81a9bc:	180b883a 	mov	r5,r3
  81a9c0:	18000115 	stw	zero,4(r3)
  81a9c4:	18800015 	stw	r2,0(r3)
  81a9c8:	80c05215 	stw	r3,328(r16)
  81a9cc:	18006215 	stw	zero,392(r3)
  81a9d0:	18006315 	stw	zero,396(r3)
  81a9d4:	0009883a 	mov	r4,zero
  81a9d8:	883fc826 	beq	r17,zero,81a8fc <__register_exitproc+0x50>
  81a9dc:	003fd706 	br	81a93c <__register_exitproc+0x90>

0081a9e0 <register_fini>:
  81a9e0:	f800283a 	ret

0081a9e4 <__call_exitprocs>:
  81a9e4:	008020b4 	movhi	r2,130
  81a9e8:	10b3db04 	addi	r2,r2,-12436
  81a9ec:	10800017 	ldw	r2,0(r2)
  81a9f0:	defff304 	addi	sp,sp,-52
  81a9f4:	df000b15 	stw	fp,44(sp)
  81a9f8:	d8800115 	stw	r2,4(sp)
  81a9fc:	00800034 	movhi	r2,0
  81aa00:	10800004 	addi	r2,r2,0
  81aa04:	1005003a 	cmpeq	r2,r2,zero
  81aa08:	d8800215 	stw	r2,8(sp)
  81aa0c:	d8800117 	ldw	r2,4(sp)
  81aa10:	dd400815 	stw	r21,32(sp)
  81aa14:	dd000715 	stw	r20,28(sp)
  81aa18:	10805204 	addi	r2,r2,328
  81aa1c:	dfc00c15 	stw	ra,48(sp)
  81aa20:	ddc00a15 	stw	r23,40(sp)
  81aa24:	dd800915 	stw	r22,36(sp)
  81aa28:	dcc00615 	stw	r19,24(sp)
  81aa2c:	dc800515 	stw	r18,20(sp)
  81aa30:	dc400415 	stw	r17,16(sp)
  81aa34:	dc000315 	stw	r16,12(sp)
  81aa38:	282b883a 	mov	r21,r5
  81aa3c:	2039883a 	mov	fp,r4
  81aa40:	d8800015 	stw	r2,0(sp)
  81aa44:	2829003a 	cmpeq	r20,r5,zero
  81aa48:	d8800117 	ldw	r2,4(sp)
  81aa4c:	14405217 	ldw	r17,328(r2)
  81aa50:	88001026 	beq	r17,zero,81aa94 <__call_exitprocs+0xb0>
  81aa54:	ddc00017 	ldw	r23,0(sp)
  81aa58:	88800117 	ldw	r2,4(r17)
  81aa5c:	8c802204 	addi	r18,r17,136
  81aa60:	143fffc4 	addi	r16,r2,-1
  81aa64:	80000916 	blt	r16,zero,81aa8c <__call_exitprocs+0xa8>
  81aa68:	05bfffc4 	movi	r22,-1
  81aa6c:	a000151e 	bne	r20,zero,81aac4 <__call_exitprocs+0xe0>
  81aa70:	8409883a 	add	r4,r16,r16
  81aa74:	2105883a 	add	r2,r4,r4
  81aa78:	1485883a 	add	r2,r2,r18
  81aa7c:	10c02017 	ldw	r3,128(r2)
  81aa80:	a8c01126 	beq	r21,r3,81aac8 <__call_exitprocs+0xe4>
  81aa84:	843fffc4 	addi	r16,r16,-1
  81aa88:	85bff81e 	bne	r16,r22,81aa6c <__call_exitprocs+0x88>
  81aa8c:	d8800217 	ldw	r2,8(sp)
  81aa90:	10003126 	beq	r2,zero,81ab58 <__call_exitprocs+0x174>
  81aa94:	dfc00c17 	ldw	ra,48(sp)
  81aa98:	df000b17 	ldw	fp,44(sp)
  81aa9c:	ddc00a17 	ldw	r23,40(sp)
  81aaa0:	dd800917 	ldw	r22,36(sp)
  81aaa4:	dd400817 	ldw	r21,32(sp)
  81aaa8:	dd000717 	ldw	r20,28(sp)
  81aaac:	dcc00617 	ldw	r19,24(sp)
  81aab0:	dc800517 	ldw	r18,20(sp)
  81aab4:	dc400417 	ldw	r17,16(sp)
  81aab8:	dc000317 	ldw	r16,12(sp)
  81aabc:	dec00d04 	addi	sp,sp,52
  81aac0:	f800283a 	ret
  81aac4:	8409883a 	add	r4,r16,r16
  81aac8:	88c00117 	ldw	r3,4(r17)
  81aacc:	2105883a 	add	r2,r4,r4
  81aad0:	1445883a 	add	r2,r2,r17
  81aad4:	18ffffc4 	addi	r3,r3,-1
  81aad8:	11800217 	ldw	r6,8(r2)
  81aadc:	1c001526 	beq	r3,r16,81ab34 <__call_exitprocs+0x150>
  81aae0:	10000215 	stw	zero,8(r2)
  81aae4:	303fe726 	beq	r6,zero,81aa84 <__call_exitprocs+0xa0>
  81aae8:	00c00044 	movi	r3,1
  81aaec:	1c06983a 	sll	r3,r3,r16
  81aaf0:	90804017 	ldw	r2,256(r18)
  81aaf4:	8cc00117 	ldw	r19,4(r17)
  81aaf8:	1884703a 	and	r2,r3,r2
  81aafc:	10001426 	beq	r2,zero,81ab50 <__call_exitprocs+0x16c>
  81ab00:	90804117 	ldw	r2,260(r18)
  81ab04:	1884703a 	and	r2,r3,r2
  81ab08:	10000c1e 	bne	r2,zero,81ab3c <__call_exitprocs+0x158>
  81ab0c:	2105883a 	add	r2,r4,r4
  81ab10:	1485883a 	add	r2,r2,r18
  81ab14:	11400017 	ldw	r5,0(r2)
  81ab18:	e009883a 	mov	r4,fp
  81ab1c:	303ee83a 	callr	r6
  81ab20:	88800117 	ldw	r2,4(r17)
  81ab24:	98bfc81e 	bne	r19,r2,81aa48 <__call_exitprocs+0x64>
  81ab28:	b8800017 	ldw	r2,0(r23)
  81ab2c:	147fd526 	beq	r2,r17,81aa84 <__call_exitprocs+0xa0>
  81ab30:	003fc506 	br	81aa48 <__call_exitprocs+0x64>
  81ab34:	8c000115 	stw	r16,4(r17)
  81ab38:	003fea06 	br	81aae4 <__call_exitprocs+0x100>
  81ab3c:	2105883a 	add	r2,r4,r4
  81ab40:	1485883a 	add	r2,r2,r18
  81ab44:	11000017 	ldw	r4,0(r2)
  81ab48:	303ee83a 	callr	r6
  81ab4c:	003ff406 	br	81ab20 <__call_exitprocs+0x13c>
  81ab50:	303ee83a 	callr	r6
  81ab54:	003ff206 	br	81ab20 <__call_exitprocs+0x13c>
  81ab58:	88800117 	ldw	r2,4(r17)
  81ab5c:	1000081e 	bne	r2,zero,81ab80 <__call_exitprocs+0x19c>
  81ab60:	89000017 	ldw	r4,0(r17)
  81ab64:	20000726 	beq	r4,zero,81ab84 <__call_exitprocs+0x1a0>
  81ab68:	b9000015 	stw	r4,0(r23)
  81ab6c:	8809883a 	mov	r4,r17
  81ab70:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  81ab74:	bc400017 	ldw	r17,0(r23)
  81ab78:	883fb71e 	bne	r17,zero,81aa58 <__call_exitprocs+0x74>
  81ab7c:	003fc506 	br	81aa94 <__call_exitprocs+0xb0>
  81ab80:	89000017 	ldw	r4,0(r17)
  81ab84:	882f883a 	mov	r23,r17
  81ab88:	2023883a 	mov	r17,r4
  81ab8c:	883fb21e 	bne	r17,zero,81aa58 <__call_exitprocs+0x74>
  81ab90:	003fc006 	br	81aa94 <__call_exitprocs+0xb0>

0081ab94 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  81ab94:	defffd04 	addi	sp,sp,-12
  81ab98:	df000215 	stw	fp,8(sp)
  81ab9c:	df000204 	addi	fp,sp,8
  81aba0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  81aba4:	e0bfff17 	ldw	r2,-4(fp)
  81aba8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81abac:	e0bffe17 	ldw	r2,-8(fp)
  81abb0:	1005003a 	cmpeq	r2,r2,zero
  81abb4:	1000021e 	bne	r2,zero,81abc0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  81abb8:	002af070 	cmpltui	zero,zero,43969
  81abbc:	00000106 	br	81abc4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  81abc0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  81abc4:	e037883a 	mov	sp,fp
  81abc8:	df000017 	ldw	fp,0(sp)
  81abcc:	dec00104 	addi	sp,sp,4
  81abd0:	f800283a 	ret

0081abd4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81abd4:	defffd04 	addi	sp,sp,-12
  81abd8:	dfc00215 	stw	ra,8(sp)
  81abdc:	df000115 	stw	fp,4(sp)
  81abe0:	df000104 	addi	fp,sp,4
  81abe4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81abe8:	008020b4 	movhi	r2,130
  81abec:	10baf644 	addi	r2,r2,-5159
  81abf0:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  81abf4:	e13fff17 	ldw	r4,-4(fp)
  81abf8:	081ab940 	call	81ab94 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81abfc:	003fff06 	br	81abfc <_exit+0x28>
  81ac00:	0081a9e0 	cmpeqi	r2,zero,1703
