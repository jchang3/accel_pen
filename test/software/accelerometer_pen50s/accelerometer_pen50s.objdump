
accelerometer_pen50s.elf:     file format elf32-littlenios2
accelerometer_pen50s.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001a0

Program Header:
    LOAD off    0x00001020 vaddr 0x01904020 paddr 0x00800000 align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags r-x
    LOAD off    0x000021a0 vaddr 0x008001a0 paddr 0x008001a0 align 2**12
         filesz 0x0001c76c memsz 0x0001c76c flags r-x
    LOAD off    0x0001e90c vaddr 0x0081c90c paddr 0x0081e478 align 2**12
         filesz 0x00001b6c memsz 0x00001b6c flags rw-
    LOAD off    0x00020fe4 vaddr 0x0081ffe4 paddr 0x0081ffe4 align 2**12
         filesz 0x00000000 memsz 0x00016530 flags rw-
    LOAD off    0x00021000 vaddr 0x01904000 paddr 0x01904000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01904000  01904000  00021000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  01904020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001bdf4  008001a0  008001a0  000021a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000978  0081bf94  0081bf94  0001df94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b6c  0081c90c  0081e478  0001e90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00016530  0081ffe4  0081ffe4  00020fe4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00021020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f38  00000000  00000000  00021048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002bf5  00000000  00000000  00021f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00034f20  00000000  00000000  00024b75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009cb4  00000000  00000000  00059a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001f0f0  00000000  00000000  00063749  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002cd8  00000000  00000000  0008283c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000029a8  00000000  00000000  00085514  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e056  00000000  00000000  00087ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00095f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009d0  00000000  00000000  00095f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0009c2fd  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0009c303  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009c30f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009c310  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009c311  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009c315  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0009c319  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0009c31d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0009c328  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0009c333  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0009c33e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  0009c34b  2**0
                  CONTENTS, READONLY
 29 .jdi          00005269  00000000  00000000  0009c399  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007aa5a  00000000  00000000  000a1602  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01904000 l    d  .entry	00000000 .entry
01904020 l    d  .exceptions	00000000 .exceptions
008001a0 l    d  .text	00000000 .text
0081bf94 l    d  .rodata	00000000 .rodata
0081c90c l    d  .rwdata	00000000 .rwdata
0081ffe4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001d8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 dtw.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080243c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0081c90c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00803bb8 l     F .text	00000058 __sprint_r
0081c5da l     O .rodata	00000010 blanks.3452
0081c5ca l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00805c1c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00807618 l     F .text	00000058 std
00807724 l     F .text	00000008 __fp_lock
0080772c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0081e3c8 l     O .rwdata	00000004 charset
0081c60c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0081c754 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080ba20 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
0080bc68 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080bcc8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080bdc8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080bee8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080bfc8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080c124 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0080c36c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081e3ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080c608 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0081e3f0 l     O .rwdata	00000004 lockid
00820060 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0081e3f4 l     O .rwdata	00000004 lockid
00820068 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0080e040 l     F .text	00000044 OS_InitMisc
0080e084 l     F .text	0000006c OS_InitRdyList
0080e1e8 l     F .text	000000e0 OS_InitTCBList
0080df64 l     F .text	000000dc OS_InitEventList
0080e0f0 l     F .text	0000007c OS_InitTaskIdle
0080e16c l     F .text	0000007c OS_InitTaskStat
0080e45c l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0081037c l     F .text	00000110 OS_FlagTaskRdy
008100d4 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081d2c8 l     O .rwdata	0000106c jtag_uart_0
0081e334 l     O .rwdata	0000002c character_lcd_0
0081e360 l     O .rwdata	0000002c rs232_0
0081e38c l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00814cd4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00814f84 l     F .text	000002c8 altera_avalon_jtag_uart_irq
0081524c l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00815a64 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081aa7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081ac68 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0081af64 l     F .text	000000dc alt_file_locked
0081b1c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0081bd70 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0081bf24 l     F .text	00000040 alt_sim_halt
008200c8 g     O .bss	00000004 aux_status_register
008093d4 g     F .text	00000094 _mprec_log10
0081e442 g     O .rwdata	00000002 OSTaskNameSize
008094c0 g     F .text	00000088 __any_on
0080ab9c g     F .text	00000070 _isatty_r
0081c72c g     O .rodata	00000028 __mprec_tinytens
0080c184 g     F .text	000000c8 alt_main
00803a90 g     F .text	000000a0 _puts_r
0081ffe4 g     O .bss	00000004 t
00836284 g     O .bss	00000100 alt_irq
0081ffe8 g     O .bss	00000004 template_number
0080ac0c g     F .text	00000078 _lseek_r
00810c70 g     F .text	000000d0 OS_MemInit
00801db4 g     F .text	00000130 sqrt
0081e478 g       *ABS*	00000000 __flash_rwdata_start
00814bb0 g     F .text	00000064 OSTimeSet
00815bdc g     F .text	00000034 alt_up_character_lcd_send_cmd
0080b888 g     F .text	00000088 __eqdf2
0081ffec g     O .bss	00000004 pCharacter
008167d8 g     F .text	000001b0 Check_for_Master_Boot_Record
0080cbbc g     F .text	000006b4 OSEventPendMulti
00836514 g       *ABS*	00000000 __alt_heap_start
0081b7d0 g     F .text	00000020 OSTaskCreateHook
008023b4 g     F .text	00000088 __floatdidf
0081a68c g     F .text	000001cc alt_up_sd_card_fclose
00803a18 g     F .text	00000044 printf
0081e41a g     O .rwdata	00000002 OSMboxEn
0080d2c4 g     F .text	0000007c OSIntEnter
0080a668 g     F .text	00000068 __sseek
00807680 g     F .text	000000a4 __sinit
00820128 g     O .bss	00002000 taskCalibrate_stk
0081e42a g     O .rwdata	00000002 OSQEn
00808358 g     F .text	00000084 _setlocale_r
00807780 g     F .text	00000068 __sfmoreglue
0080c878 g     F .text	000000d0 __malloc_unlock
0081b82c g     F .text	0000001c OSTaskStatHook
008162c4 g     F .text	00000090 alt_up_rs232_read_fd
00820070 g     O .bss	00000001 OSLockNesting
008200ec g     O .bss	00000004 current_sector_modified
0081e468 g     O .rwdata	00000002 OSDataSize
00820071 g     O .bss	00000001 OSRunning
0081fff0 g     O .bss	00000004 dtw_semy
00808e50 g     F .text	000000e0 memmove
0081b864 g     F .text	0000001c OSInitHookBegin
00800374 g     F .text	00000354 dtw
0081fff4 g     O .bss	00000004 dtwy
0081e460 g     O .rwdata	00000002 OSTmrSize
00807770 g     F .text	00000010 _cleanup
00809548 g     F .text	000000bc _Balloc
00819248 g     F .text	000000c8 alt_up_sd_card_is_Present
008164f0 g     F .text	00000050 Save_Modified_Sector
00820074 g     O .bss	00000004 OSIdleCtr
0081fff8 g     O .bss	00000004 semy
0080b998 g     F .text	00000088 __gtdf2
0081b49c g       .text	00000000 OSStartTsk
00803a08 g     F .text	00000010 __errno
00815b60 g     F .text	0000007c get_DDRAM_addr
0080e790 g     F .text	000002e0 OS_TCBInit
01904000 g     F .entry	0000001c __reset
008200e4 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
0081e466 g     O .rwdata	00000002 OSTmrWheelTblSize
00800000 g       *ABS*	00000000 __flash_exceptions_start
0081e406 g     O .rwdata	00000002 OSEventSize
00820078 g     O .bss	00000001 OSPrioHighRdy
0080ab28 g     F .text	00000074 _fstat_r
0081b7f0 g     F .text	00000020 OSTaskDelHook
0082004c g     O .bss	00000004 errno
0081b47c g       .text	00000000 OSStartHighRdy
00813384 g     F .text	00000200 OSTaskCreateExt
0080fbf0 g     F .text	00000068 OSFlagPendGetFlagsRdy
0081e446 g     O .rwdata	00000002 OSTaskStatStkSize
0080ebfc g     F .text	00000334 OSFlagAccept
008113a8 g     F .text	000000c8 OSQFlush
00810d40 g     F .text	00000154 OSQAccept
00820058 g     O .bss	00000004 alt_argv
008263b8 g       *ABS*	00000000 _gp
00819808 g     F .text	000003a8 alt_up_sd_card_fopen
00819384 g     F .text	000000d4 alt_up_sd_card_find_first
0080121c g     F .text	000004dc taskCharacterRead
008131b0 g     F .text	000001d4 OSTaskCreate
008200d8 g     O .bss	00000004 command_argument_register
00812c3c g     F .text	00000574 OSTaskChangePrio
0082006c g     O .bss	00000004 alt_heapsem
0080ea70 g     F .text	0000018c OSDebugInit
00813584 g     F .text	0000040c OSTaskDel
0081d148 g     O .rwdata	00000180 alt_fd_list
0081fffc g     O .bss	00000004 readsem
00832af8 g     O .bss	00000370 OSFlagTbl
0080dd40 g     F .text	000000b8 OS_EventTaskRemove
00818a78 g     F .text	0000012c find_first_empty_record_in_root_directory
0081aba4 g     F .text	00000094 alt_find_dev
00808db0 g     F .text	000000a0 memcpy
0081e430 g     O .rwdata	00000002 OSRdyTblSize
00815d74 g     F .text	0000004c alt_up_character_lcd_write_fd
00807764 g     F .text	0000000c _cleanup_r
00802fe4 g     F .text	000000f8 __floatsidf
0081ad2c g     F .text	00000078 alt_io_redirect
00802f5c g     F .text	00000088 __ltdf2
00800fc0 g     F .text	0000025c taskWriteSDCard
0081bf94 g       *ABS*	00000000 __DTOR_END__
00816250 g     F .text	00000074 alt_up_rs232_read_data
00803b30 g     F .text	00000014 puts
0080c948 g     F .text	00000130 OSEventNameGet
0081e414 g     O .rwdata	00000002 OSFlagMax
00818688 g     F .text	000001a4 find_first_empty_cluster
00809324 g     F .text	000000b0 __ratio
00819184 g     F .text	000000c4 alt_up_sd_card_open_dev
0080d340 g     F .text	00000100 OSIntExit
0081e44e g     O .rwdata	00000002 OSTCBSize
00820079 g     O .bss	00000001 OSPrioCur
008154c8 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00803a5c g     F .text	00000034 _printf_r
01904000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0080bb5c g     F .text	00000008 __udivsi3
00820000 g     O .bss	00000004 loadsdcardsem
0080be28 g     F .text	000000c0 isatty
0081e434 g     O .rwdata	00000002 OSStkWidth
00820004 g     O .bss	00000004 writesem
0081c63c g     O .rodata	000000c8 __mprec_tens
0081e428 g     O .rwdata	00000002 OSPtrSize
00808334 g     F .text	00000008 __locale_charset
0081e408 g     O .rwdata	00000002 OSEventTblSize
008033c8 g     F .text	000000a4 __fixunsdfsi
0081b3f0 g       .text	00000000 OSCtxSw
0081baec g     F .text	00000090 alt_icache_flush
00820040 g     O .bss	00000004 __malloc_top_pad
0082007c g     O .bss	00000004 OSTCBList
00820050 g     O .bss	00000004 alt_fd_list_lock
0081e3c4 g     O .rwdata	00000004 __mb_cur_max
0080833c g     F .text	0000000c _localeconv_r
00809c40 g     F .text	0000003c __i2b
00807d18 g     F .text	0000049c __sfvwrite_r
00817964 g     F .text	000000c0 get_dir_divider_location
00832e68 g     O .bss	00000c30 OSMemTbl
00820080 g     O .bss	00000001 OSTickStepState
0080a5f0 g     F .text	00000070 _sbrk_r
00817604 g     F .text	000000d0 filename_to_upper_case
0081e42c g     O .rwdata	00000002 OSQMax
00819bb0 g     F .text	00000090 alt_up_sd_card_set_attributes
00833a98 g     O .bss	00000800 OSTaskStatStk
00820008 g     O .bss	00000004 configuresem
00810858 g     F .text	0000010c OSMemNameGet
00816988 g     F .text	00000284 Read_File_Record_At_Offset
0081e40c g     O .rwdata	00000002 OSFlagEn
0080ac84 g     F .text	00000078 _read_r
0081e452 g     O .rwdata	00000002 OSTimeTickHookEn
0081048c g     F .text	000000ac OS_FlagUnlink
0081190c g     F .text	00000180 OSQPost
0081cd0c g     O .rwdata	0000000c __lc_ctype
0081e3e4 g     O .rwdata	00000004 alt_max_fd
008161b8 g     F .text	00000050 alt_up_rs232_check_parity
0080e31c g     F .text	0000006c OS_MemCopy
0080e388 g     F .text	000000d4 OS_Sched
00803780 g     F .text	00000138 __unpack_d
00818224 g     F .text	00000464 find_file_in_directory
0080aa04 g     F .text	00000110 _fclose_r
00810754 g     F .text	00000104 OSMemGet
00813cb8 g     F .text	000001c4 OSTaskNameSet
008075e4 g     F .text	00000034 fflush
00820044 g     O .bss	00000004 __malloc_max_sbrked_mem
00820084 g     O .bss	00000004 OSCtxSwCtr
0081b848 g     F .text	0000001c OSTimeTickHook
0081ada4 g     F .text	000001c0 alt_irq_register
0081e416 g     O .rwdata	00000002 OSFlagNameSize
0082000c g     O .bss	00000004 uartsem
0080ddf8 g     F .text	00000104 OS_EventTaskRemoveMulti
00819310 g     F .text	00000074 alt_up_sd_card_is_FAT16
008028cc g     F .text	00000074 __adddf3
0080dbec g     F .text	00000154 OS_EventTaskWaitMulti
00809204 g     F .text	00000120 __b2d
0081e42e g     O .rwdata	00000002 OSQSize
0080b2d8 g     F .text	000005b0 __umoddi3
0080c034 g     F .text	000000f0 lseek
008124e8 g     F .text	0000027c OSSemPend
0081e3b8 g     O .rwdata	00000004 __fdlib_version
0081e3c0 g     O .rwdata	00000004 _global_impure_ptr
00817d10 g     F .text	00000514 get_home_directory_cluster_for_file
00809fbc g     F .text	000005f4 _realloc_r
0081e418 g     O .rwdata	00000002 OSLowestPrio
00822128 g     O .bss	00002000 taskCharacterRead_stk
00836514 g       *ABS*	00000000 __bss_end
0081b8b8 g     F .text	00000020 OSTCBInitHook
0081e45e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0081b2c0 g     F .text	00000110 alt_tick
0080acfc g     F .text	000005dc __udivdi3
0081e400 g     O .rwdata	00000002 OSEventEn
0081c704 g     O .rodata	00000028 __mprec_bigtens
00809e9c g     F .text	00000120 __s2b
0081e45a g     O .rwdata	00000002 OSTmrCfgNameSize
008031b4 g     F .text	00000194 __floatunsidf
00809124 g     F .text	00000060 __mcmp
008200f0 g     O .bss	00000004 current_sector_index
00820010 g     O .bss	00000004 message
0080774c g     F .text	00000018 __fp_lock_all
008001dc g     F .text	0000005c min_three
00810298 g     F .text	000000e4 OS_FlagInit
008002c0 g     F .text	000000b4 dist
00824128 g     O .bss	00002000 taskModeSelect_stk
0081b228 g     F .text	00000098 alt_alarm_stop
00826128 g     O .bss	00002000 taskTemplateMatch_stk
008166f4 g     F .text	000000e4 mark_cluster
0081e43c g     O .rwdata	00000002 OSTaskIdleStkSize
008200f4 g     O .bss	00000004 alt_irq_active
00812074 g     F .text	000000c0 OSSemAccept
00810a84 g     F .text	000000f0 OSMemPut
00810538 g     F .text	0000021c OSMemCreate
00820088 g     O .bss	00000004 OSIdleCtrMax
019040ec g     F .exceptions	000000d4 alt_irq_handler
0081d120 g     O .rwdata	00000028 alt_dev_null
0081e450 g     O .rwdata	00000002 OSTicksPerSec
00818ba4 g     F .text	000001b8 convert_filename_to_name_extension
0081605c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0081b3f0 g       .text	00000000 OSIntCtxSw
00820014 g     O .bss	00000004 dtwx
0081a9ac g     F .text	0000001c alt_dcache_flush_all
00808ff0 g     F .text	00000070 __hi0bits
008200c4 g     O .bss	00000004 is_sd_card_formated_as_FAT16
008030dc g     F .text	000000d8 __fixdfsi
00800854 g     F .text	000003cc taskLoadSDCard
0081882c g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0082008c g     O .bss	00000004 OSTCBFreeList
0081e478 g       *ABS*	00000000 __ram_rwdata_end
00812764 g     F .text	0000017c OSSemPendAbort
00820018 g     O .bss	00000004 dtw_sem
0081e3dc g     O .rwdata	00000008 alt_dev_list
0080c4e8 g     F .text	00000120 write
008200e8 g     O .bss	00000004 device_pointer
0081e454 g     O .rwdata	00000002 OSVersionNbr
0081c90c g       *ABS*	00000000 __ram_rodata_end
0080bcf4 g     F .text	000000d4 fstat
00816354 g     F .text	00000094 alt_up_rs232_write_fd
0081e3fc g     O .rwdata	00000004 OSEndiannessTest
00809d7c g     F .text	00000120 __pow5mult
00820034 g     O .bss	00000004 __nlocale_changed
0080bb64 g     F .text	00000008 __umodsi3
0081e40e g     O .rwdata	00000002 OSFlagGrpSize
00836514 g       *ABS*	00000000 end
00814e54 g     F .text	00000130 altera_avalon_jtag_uart_init
0080e600 g     F .text	000000c8 OS_TaskStat
0081bf90 g       *ABS*	00000000 __CTOR_LIST__
0082001c g     O .bss	00000004 dtw_semx
01000000 g       *ABS*	00000000 __alt_stack_pointer
00815ad8 g     F .text	00000088 alt_avalon_timer_sc_init
00803348 g     F .text	00000080 __clzsi2
00820020 g     O .bss	00000004 loadsem
00815788 g     F .text	000002dc altera_avalon_jtag_uart_write
00828128 g     O .bss	00002000 taskDTWX_stk
00807670 g     F .text	00000004 __sfp_lock_acquire
00808ccc g     F .text	000000e4 memchr
0080e2c8 g     F .text	00000054 OS_MemClr
00815c84 g     F .text	00000078 alt_up_character_lcd_write
00803c10 g     F .text	00001eac ___vfprintf_internal_r
0081b4c0 g     F .text	00000310 OSTaskStkInit
00807a04 g     F .text	00000314 _free_r
0080d948 g     F .text	00000194 OS_EventTaskRdy
0081bd74 g     F .text	000001b0 __call_exitprocs
00820090 g     O .bss	00000001 OSCPUUsage
00820038 g     O .bss	00000004 __mlocale_changed
0081e3d0 g     O .rwdata	00000004 __malloc_sbrk_base
008001a0 g     F .text	0000003c _start
008200f8 g     O .bss	00000004 _alt_tick_rate
00811470 g     F .text	00000320 OSQPend
0081467c g     F .text	0000014c OSTimeDly
0080990c g     F .text	0000014c __lshift
008200fc g     O .bss	00000004 _alt_nticks
0080c24c g     F .text	00000120 read
00814c48 g     F .text	0000008c alt_sys_init
00815ee8 g     F .text	000000b0 alt_up_character_lcd_shift_display
0081bc3c g     F .text	00000134 __register_exitproc
00820091 g     O .bss	00000001 OSTaskCtr
00816178 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
008147c8 g     F .text	00000174 OSTimeDlyHMSM
00809a58 g     F .text	000001e8 __multiply
00815f98 g     F .text	00000090 alt_up_character_lcd_erase_pos
00815360 g     F .text	00000074 altera_avalon_jtag_uart_close
0081c90c g       *ABS*	00000000 __ram_rwdata_start
0081bf94 g       *ABS*	00000000 __ram_rodata_start
00820100 g     O .bss	00000028 __malloc_current_mallinfo
0081e402 g     O .rwdata	00000002 OSEventMax
00809604 g     F .text	0000017c __d2b
008128e0 g     F .text	00000128 OSSemPost
008200c0 g     O .bss	00000004 initialized
0080d4cc g     F .text	000000e4 OSSchedUnlock
00814d0c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0081b9f8 g     F .text	000000f4 alt_get_fd
00820094 g     O .bss	00000004 OSMemFreeList
0080d620 g     F .text	000000ac OSStatInit
00835d1c g     O .bss	00000014 search_data
00810000 g     F .text	000000d4 OSFlagQuery
008038b8 g     F .text	000000c8 __fpcmp_parts_d
0081e438 g     O .rwdata	00000002 OSTaskCreateExtEn
0080a994 g     F .text	00000070 _close_r
0080027c g     F .text	00000044 max
0082a128 g     O .bss	00002000 taskWriteSDCard_stk
0081bbc8 g     F .text	00000074 memcmp
0080d92c g     F .text	0000001c OS_Dummy
00814dbc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00836514 g       *ABS*	00000000 __alt_stack_base
00814e04 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00805ae0 g     F .text	0000013c __swsetup_r
00834298 g     O .bss	000001e0 OSQTbl
00802d04 g     F .text	00000258 __divdf3
008077e8 g     F .text	000000f0 __sfp
00835d30 g     O .bss	00000054 boot_sector_data
00809468 g     F .text	00000058 __copybits
0081cd18 g     O .rwdata	00000408 __malloc_av_
0080767c g     F .text	00000004 __sinit_lock_release
00820098 g     O .bss	00000004 OSTCBHighRdy
00802940 g     F .text	000003c4 __muldf3
0080a74c g     F .text	00000060 __sread
0082009c g     O .bss	00000004 OSQFreeList
008160e4 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
0081b8d8 g     F .text	00000120 alt_find_file
0081a9c8 g     F .text	000000b4 alt_dev_llist_insert
0080c770 g     F .text	00000108 __malloc_lock
0080c42c g     F .text	000000bc sbrk
0082c128 g     O .bss	00002000 taskLoadSDCard_stk
0080ca78 g     F .text	00000144 OSEventNameSet
008073e8 g     F .text	000001fc _fflush_r
0080a8e0 g     F .text	000000b4 _calloc_r
008200a0 g     O .bss	00000001 OSRdyGrp
0081ffe4 g       *ABS*	00000000 __bss_start
00808f30 g     F .text	00000098 memset
00820024 g     O .bss	00000001 err
00801ae4 g     F .text	000002d0 main
0082005c g     O .bss	00000004 alt_envp
00820048 g     O .bss	00000004 __malloc_max_total_mem
00814d64 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0082e128 g     O .bss	00000020 templates
0081c780 g     O .rodata	00000100 OSUnMapTbl
00819c40 g     F .text	0000008c alt_up_sd_card_get_attributes
0081e432 g     O .rwdata	00000002 OSSemEn
00816428 g     F .text	000000c8 Write_Sector_Data
0081a068 g     F .text	00000624 alt_up_sd_card_write
00815e38 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0080fc58 g     F .text	000003a8 OSFlagPost
0080a660 g     F .text	00000008 __sclose
008021dc g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
0080ab14 g     F .text	00000014 fclose
0080dadc g     F .text	00000110 OS_EventTaskWait
0080e6c8 g     F .text	000000c8 OS_TaskStatStkChk
00836384 g     O .bss	00000190 _atexit0
00813990 g     F .text	00000170 OSTaskDelReq
00805e34 g     F .text	000015b4 _dtoa_r
0080858c g     F .text	00000740 _malloc_r
0081e3e8 g     O .rwdata	00000004 alt_errno
0080d5b0 g     F .text	00000070 OSStart
0080c714 g     F .text	0000005c __env_unlock
0080827c g     F .text	000000b8 _fwalk
00813e7c g     F .text	00000218 OSTaskResume
00810b74 g     F .text	000000fc OSMemQuery
0081e444 g     O .rwdata	00000002 OSTaskStatEn
0081e41e g     O .rwdata	00000002 OSMemMax
00811a8c g     F .text	00000188 OSQPostFront
0080ba9c g     F .text	00000060 __divsi3
008200a1 g     O .bss	00000003 OSRdyTbl
0081e3f8 g     O .rwdata	00000002 OSDebugEn
0081c450 g     O .rodata	00000014 __thenan_df
00815c44 g     F .text	00000040 alt_up_character_lcd_open_dev
008078d8 g     F .text	0000012c _malloc_trim_r
0081bf94 g       *ABS*	00000000 __CTOR_END__
0081e410 g     O .rwdata	00000002 OSFlagNodeSize
008200cc g     O .bss	00000004 status_register
0081e458 g     O .rwdata	00000002 OSTmrCfgMax
00815c10 g     F .text	00000034 alt_up_character_lcd_init
0080a7ac g     F .text	000000bc strcmp
008200d4 g     O .bss	00000004 command_register
00810e94 g     F .text	00000214 OSQCreate
00813b00 g     F .text	000001b8 OSTaskNameGet
0081bf94 g       *ABS*	00000000 __flash_rodata_start
00811c14 g     F .text	00000234 OSQPostOpt
0080d6cc g     F .text	00000240 OSTimeTick
0081e440 g     O .rwdata	00000002 OSTaskMax
0081bf94 g       *ABS*	00000000 __DTOR_LIST__
00812134 g     F .text	00000114 OSSemCreate
0081e464 g     O .rwdata	00000002 OSTmrWheelSize
00800238 g     F .text	00000044 min
008163e8 g     F .text	00000040 alt_up_rs232_open_dev
0080b910 g     F .text	00000088 __nedf2
008022f8 g     F .text	000000bc __fixunsdfdi
0081e43a g     O .rwdata	00000002 OSTaskDelEn
01880000 g       *ABS*	00000000 __alt_mem_sram_0
00812a08 g     F .text	00000130 OSSemQuery
008110a8 g     F .text	00000300 OSQDel
00811790 g     F .text	0000017c OSQPendAbort
00814c14 g     F .text	00000034 alt_irq_init
0080c3cc g     F .text	00000060 alt_release_fd
0081663c g     F .text	000000b8 get_cluster_flag
00816028 g     F .text	00000034 alt_up_character_lcd_cursor_off
0081c464 g     O .rodata	00000100 __clz_tab
0082e148 g     O .bss	000000c0 template
00816c0c g     F .text	000002b8 Write_File_Record_At_Offset
0082003c g     O .bss	00000004 _PathLocale
0080227c g     F .text	0000007c __fixdfdi
01400000 g       *ABS*	00000000 __alt_mem_generic_tristate_controller_0
0081bb7c g     F .text	00000014 atexit
0080a868 g     F .text	00000078 _write_r
00820028 g     O .bss	00000004 semx
0080d440 g     F .text	0000008c OSSchedLock
008083dc g     F .text	0000001c setlocale
0080ef30 g     F .text	0000013c OSFlagCreate
00816ec4 g     F .text	00000648 Check_for_DOS_FAT
00818d5c g     F .text	000002d4 create_file
0081e3bc g     O .rwdata	00000004 _impure_ptr
008200d0 g     O .bss	00000004 CSD_register_w0
00820054 g     O .bss	00000004 alt_argc
0081ab40 g     F .text	00000064 _do_dtors
0081e40a g     O .rwdata	00000002 OSEventMultiEn
0082e208 g     O .bss	00000030 array
0080f06c g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
008200a4 g     O .bss	00000004 OSEventFreeList
01904020 g       .exceptions	00000000 alt_irq_entry
00809184 g     F .text	00000080 __ulp
0080a5b0 g     F .text	00000040 __isinfd
0080f5ac g     F .text	00000644 OSFlagPend
0081e456 g     O .rwdata	00000002 OSTmrEn
00807734 g     F .text	00000018 __fp_unlock_all
008019cc g     F .text	00000088 taskDTWX
0081e3d4 g     O .rwdata	00000008 alt_fs_list
008176d4 g     F .text	00000290 check_file_name_for_FAT16_compliance
0080e4cc g     F .text	00000080 OS_StrCopy
008200dc g     O .bss	00000004 buffer_memory
00816090 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0082e238 g     O .bss	00002000 SWQ_stk
00816208 g     F .text	00000048 alt_up_rs232_write_data
0081e420 g     O .rwdata	00000002 OSMemNameSize
0082002c g     O .bss	00000004 modeselectsem
0081b880 g     F .text	0000001c OSInitHookEnd
01904020 g       *ABS*	00000000 __ram_exceptions_start
0081e44c g     O .rwdata	00000002 OSTCBPrioTblMax
00808348 g     F .text	00000010 localeconv
00801ee4 g     F .text	000002c8 __ieee754_sqrt
0081e448 g     O .rwdata	00000002 OSTaskStatStkChkEn
0081e41c g     O .rwdata	00000002 OSMemEn
008200e0 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
0081e426 g     O .rwdata	00000002 OSMutexEn
0081e478 g       *ABS*	00000000 _edata
00800c20 g     F .text	000003a0 taskCalibrate
00836514 g       *ABS*	00000000 _end
00835d84 g     O .bss	00000500 active_files
008200a8 g     O .bss	00000001 OSIntNesting
019041c0 g       *ABS*	00000000 __ram_exceptions_end
00819030 g     F .text	00000154 copy_file_record_name_to_string
008153d4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0081493c g     F .text	00000210 OSTimeDlyResume
0081750c g     F .text	000000f8 Look_for_FAT16
0080f458 g     F .text	00000154 OSFlagNameSet
00830238 g     O .bss	00002000 taskDTWY_stk
00814094 g     F .text	000001fc OSTaskStkChk
0081e422 g     O .rwdata	00000002 OSMemSize
0080a6d0 g     F .text	0000007c __swrite
0081e3cc g     O .rwdata	00000004 __malloc_trim_threshold
0081b3d0 g     F .text	00000020 altera_nios2_qsys_irq_init
008200ac g     O .bss	00000004 OSTCBCur
0081bb90 g     F .text	00000038 exit
00819458 g     F .text	000003b0 alt_up_sd_card_find_next
0081e424 g     O .rwdata	00000002 OSMemTblSize
008081b4 g     F .text	000000c8 _fwalk_reent
00820030 g     O .bss	00000004 SWQ
00809780 g     F .text	0000018c __mdiff
0080bafc g     F .text	00000060 __modsi3
008006c8 g     F .text	0000018c taskModeSelect
00816540 g     F .text	000000fc Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
01904020 g     F .exceptions	00000000 alt_exception
00807674 g     F .text	00000004 __sfp_lock_release
0080d270 g     F .text	00000054 OSInit
008144bc g     F .text	00000144 OSTaskQuery
00815cfc g     F .text	00000078 alt_up_character_lcd_string
00811fc8 g     F .text	000000ac OS_QInit
0080e54c g     F .text	00000058 OS_StrLen
00810964 g     F .text	00000120 OSMemNameSet
0081e43e g     O .rwdata	00000002 OSTaskProfileEn
008200b0 g     O .bss	00000004 OSTime
00834478 g     O .bss	00000800 OSTaskIdleStk
0081bf64 g     F .text	0000002c _exit
008021ac g     F .text	00000030 __isnand
0081a858 g     F .text	00000154 alt_alarm_start
0080f314 g     F .text	00000144 OSFlagNameGet
00814b4c g     F .text	00000064 OSTimeGet
008021e4 g     F .text	00000098 __muldi3
00819ccc g     F .text	0000039c alt_up_sd_card_read
008083f8 g     F .text	00000194 __smakebuf_r
008016f8 g     F .text	000002d4 taskTemplateMatch
00803b44 g     F .text	00000074 strlen
0081b810 g     F .text	0000001c OSTaskSwHook
0081b040 g     F .text	00000188 open
00834c78 g     O .bss	00000b40 OSEventTbl
00803980 g     F .text	00000088 __gedf2
00832238 g     O .bss	00000800 messageArray
008357b8 g     O .bss	00000510 OSTCBTbl
00812b38 g     F .text	00000104 OSSemSet
0081ac38 g     F .text	00000030 alt_icache_flush_all
00815dc0 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0081e46c g     O .rwdata	00000004 alt_priority_mask
00812248 g     F .text	000002a0 OSSemDel
008200b4 g     O .bss	00000004 OSFlagFreeList
0081e404 g     O .rwdata	00000002 OSEventNameSize
00805abc g     F .text	00000024 __vfprintf_internal
008200b8 g     O .bss	00000001 OSStatRdy
00835cc8 g     O .bss	00000054 OSTCBPrioTbl
0080c668 g     F .text	000000ac __env_lock
0081e44a g     O .rwdata	00000002 OSTaskSwHookEn
00801a54 g     F .text	00000090 taskDTWY
0080284c g     F .text	00000080 __subdf3
00809060 g     F .text	000000c4 __lo0bits
00832a38 g     O .bss	000000c0 array_8
0081e470 g     O .rwdata	00000008 alt_alarm_list
0081e412 g     O .rwdata	00000002 OSFlagWidth
0081aadc g     F .text	00000064 _do_ctors
0081613c g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0080bb6c g     F .text	000000fc close
00820064 g     O .bss	00000004 alt_envsem
008200bc g     O .bss	00000004 OSIdleCtrRun
0080d90c g     F .text	00000020 OSVersion
0081e45c g     O .rwdata	00000002 OSTmrCfgWheelSize
0080bf48 g     F .text	00000080 alt_load
00814600 g     F .text	0000007c OS_TaskStkClr
0080346c g     F .text	00000314 __pack_d
0081e436 g     O .rwdata	00000002 OSTaskCreateEn
00817a24 g     F .text	000002ec match_file_record_to_name_ext
0080defc g     F .text	00000068 OS_EventWaitListInit
0081b89c g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00807678 g     F .text	00000004 __sinit_lock_acquire
00809c7c g     F .text	00000100 __multadd
00814290 g     F .text	0000022c OSTaskSuspend
00808fc8 g     F .text	00000028 _Bfree
0080e5a4 g     F .text	0000005c OS_TaskIdle
0081e462 g     O .rwdata	00000002 OSTmrTblSize
00811e48 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01904000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1904000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1904004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1904008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 190400c:	00bffd16 	blt	zero,r2,1904004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1904010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1904014:	08406814 	ori	at,at,416
    jmp r1
 1904018:	0800683a 	jmp	at
 190401c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

01904020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1904020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1904024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1904028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 190402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1904030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1904034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1904038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 190403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1904040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1904044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1904048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 190404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1904050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1904054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1904058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 190405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1904060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1904064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1904068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 190406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1904070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1904074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1904078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 190407c:	10000326 	beq	r2,zero,190408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1904080:	20000226 	beq	r4,zero,190408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1904084:	19040ec0 	call	19040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1904088:	00000306 	br	1904098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 190408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1904090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1904094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1904098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 190409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 19040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 19040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 19040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 19040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 19040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 19040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 19040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 19040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 19040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 19040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 19040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 19040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 19040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 19040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 19040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 19040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 19040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 19040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 19040e8:	ef80083a 	eret

019040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 19040ec:	defff904 	addi	sp,sp,-28
 19040f0:	dfc00615 	stw	ra,24(sp)
 19040f4:	df000515 	stw	fp,20(sp)
 19040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 19040fc:	080d2c40 	call	80d2c4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1904100:	0005313a 	rdctl	r2,ipending
 1904104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1904108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 190410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1904110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1904114:	00800044 	movi	r2,1
 1904118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 190411c:	e0ffff17 	ldw	r3,-4(fp)
 1904120:	e0bffe17 	ldw	r2,-8(fp)
 1904124:	1884703a 	and	r2,r3,r2
 1904128:	1005003a 	cmpeq	r2,r2,zero
 190412c:	1000171e 	bne	r2,zero,190418c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1904130:	e0bffd17 	ldw	r2,-12(fp)
 1904134:	00c020f4 	movhi	r3,131
 1904138:	18d8a104 	addi	r3,r3,25220
 190413c:	100490fa 	slli	r2,r2,3
 1904140:	10c5883a 	add	r2,r2,r3
 1904144:	11800017 	ldw	r6,0(r2)
 1904148:	e0bffd17 	ldw	r2,-12(fp)
 190414c:	00c020f4 	movhi	r3,131
 1904150:	18d8a104 	addi	r3,r3,25220
 1904154:	100490fa 	slli	r2,r2,3
 1904158:	10c5883a 	add	r2,r2,r3
 190415c:	10800104 	addi	r2,r2,4
 1904160:	11000017 	ldw	r4,0(r2)
 1904164:	e17ffd17 	ldw	r5,-12(fp)
 1904168:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 190416c:	0005313a 	rdctl	r2,ipending
 1904170:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1904174:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1904178:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 190417c:	e0bfff17 	ldw	r2,-4(fp)
 1904180:	1004c03a 	cmpne	r2,r2,zero
 1904184:	103fe21e 	bne	r2,zero,1904110 <alt_irq_handler+0x24>
 1904188:	00000706 	br	19041a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 190418c:	e0bffe17 	ldw	r2,-8(fp)
 1904190:	1085883a 	add	r2,r2,r2
 1904194:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1904198:	e0bffd17 	ldw	r2,-12(fp)
 190419c:	10800044 	addi	r2,r2,1
 19041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19041a4:	003fdd06 	br	190411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 19041a8:	080d3400 	call	80d340 <OSIntExit>
}
 19041ac:	e037883a 	mov	sp,fp
 19041b0:	dfc00117 	ldw	ra,4(sp)
 19041b4:	df000017 	ldw	fp,0(sp)
 19041b8:	dec00204 	addi	sp,sp,8
 19041bc:	f800283a 	ret

Disassembly of section .text:

008001a0 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001a0:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001a4:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001a8:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001ac:	d698ee14 	ori	gp,gp,25528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001b0:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001b4:	10bff914 	ori	r2,r2,65508

    movhi r3, %hi(__bss_end)
  8001b8:	00c020f4 	movhi	r3,131
    ori r3, r3, %lo(__bss_end)
  8001bc:	18d94514 	ori	r3,r3,25876

    beq r2, r3, 1f
  8001c0:	10c00326 	beq	r2,r3,8001d0 <_start+0x30>

0:
    stw zero, (r2)
  8001c4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001c8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001cc:	10fffd36 	bltu	r2,r3,8001c4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001d0:	080bf480 	call	80bf48 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001d4:	080c1840 	call	80c184 <alt_main>

008001d8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001d8:	003fff06 	br	8001d8 <alt_after_alt_main>

008001dc <min_three>:
int min(int a, int b);
int max(int a, int b);
long dist(signed long x, signed long y);

/* Returns minimum of three numbers */
long min_three(long a, long b, long c){
  8001dc:	defffb04 	addi	sp,sp,-20
  8001e0:	df000415 	stw	fp,16(sp)
  8001e4:	df000404 	addi	fp,sp,16
  8001e8:	e13ffd15 	stw	r4,-12(fp)
  8001ec:	e17ffe15 	stw	r5,-8(fp)
  8001f0:	e1bfff15 	stw	r6,-4(fp)
	long min = a;
  8001f4:	e0bffd17 	ldw	r2,-12(fp)
  8001f8:	e0bffc15 	stw	r2,-16(fp)
	if (min > b) min = b;
  8001fc:	e0fffc17 	ldw	r3,-16(fp)
  800200:	e0bffe17 	ldw	r2,-8(fp)
  800204:	10c0020e 	bge	r2,r3,800210 <min_three+0x34>
  800208:	e0bffe17 	ldw	r2,-8(fp)
  80020c:	e0bffc15 	stw	r2,-16(fp)
	if (min > c) min = c;
  800210:	e0fffc17 	ldw	r3,-16(fp)
  800214:	e0bfff17 	ldw	r2,-4(fp)
  800218:	10c0020e 	bge	r2,r3,800224 <min_three+0x48>
  80021c:	e0bfff17 	ldw	r2,-4(fp)
  800220:	e0bffc15 	stw	r2,-16(fp)
	return min;
  800224:	e0bffc17 	ldw	r2,-16(fp)
}
  800228:	e037883a 	mov	sp,fp
  80022c:	df000017 	ldw	fp,0(sp)
  800230:	dec00104 	addi	sp,sp,4
  800234:	f800283a 	ret

00800238 <min>:

/* Returns minimum of two numbers */
int min(int a, int b){
  800238:	defffc04 	addi	sp,sp,-16
  80023c:	df000315 	stw	fp,12(sp)
  800240:	df000304 	addi	fp,sp,12
  800244:	e13ffe15 	stw	r4,-8(fp)
  800248:	e17fff15 	stw	r5,-4(fp)
	int m = a;
  80024c:	e0bffe17 	ldw	r2,-8(fp)
  800250:	e0bffd15 	stw	r2,-12(fp)
	if (m > b) m = b;
  800254:	e0fffd17 	ldw	r3,-12(fp)
  800258:	e0bfff17 	ldw	r2,-4(fp)
  80025c:	10c0020e 	bge	r2,r3,800268 <min+0x30>
  800260:	e0bfff17 	ldw	r2,-4(fp)
  800264:	e0bffd15 	stw	r2,-12(fp)
	return m;
  800268:	e0bffd17 	ldw	r2,-12(fp)
}
  80026c:	e037883a 	mov	sp,fp
  800270:	df000017 	ldw	fp,0(sp)
  800274:	dec00104 	addi	sp,sp,4
  800278:	f800283a 	ret

0080027c <max>:

/* Returns maximum of two numbers */
int max(int a, int b){
  80027c:	defffc04 	addi	sp,sp,-16
  800280:	df000315 	stw	fp,12(sp)
  800284:	df000304 	addi	fp,sp,12
  800288:	e13ffe15 	stw	r4,-8(fp)
  80028c:	e17fff15 	stw	r5,-4(fp)
	int m = a;
  800290:	e0bffe17 	ldw	r2,-8(fp)
  800294:	e0bffd15 	stw	r2,-12(fp)
	if (m < b) m = b;
  800298:	e0fffd17 	ldw	r3,-12(fp)
  80029c:	e0bfff17 	ldw	r2,-4(fp)
  8002a0:	1880020e 	bge	r3,r2,8002ac <max+0x30>
  8002a4:	e0bfff17 	ldw	r2,-4(fp)
  8002a8:	e0bffd15 	stw	r2,-12(fp)
	return m;
  8002ac:	e0bffd17 	ldw	r2,-12(fp)
}
  8002b0:	e037883a 	mov	sp,fp
  8002b4:	df000017 	ldw	fp,0(sp)
  8002b8:	dec00104 	addi	sp,sp,4
  8002bc:	f800283a 	ret

008002c0 <dist>:

// Euclidean distance
long dist(signed long x, signed long y) {
  8002c0:	defffc04 	addi	sp,sp,-16
  8002c4:	dfc00315 	stw	ra,12(sp)
  8002c8:	df000215 	stw	fp,8(sp)
  8002cc:	df000204 	addi	fp,sp,8
  8002d0:	e13ffe15 	stw	r4,-8(fp)
  8002d4:	e17fff15 	stw	r5,-4(fp)
	return (long) sqrt(((signed long long)(x-y))*((signed long long)(x-y)));
  8002d8:	e0fffe17 	ldw	r3,-8(fp)
  8002dc:	e0bfff17 	ldw	r2,-4(fp)
  8002e0:	1885c83a 	sub	r2,r3,r2
  8002e4:	1007d7fa 	srai	r3,r2,31
  8002e8:	100b883a 	mov	r5,r2
  8002ec:	180d883a 	mov	r6,r3
  8002f0:	e0fffe17 	ldw	r3,-8(fp)
  8002f4:	e0bfff17 	ldw	r2,-4(fp)
  8002f8:	1889c83a 	sub	r4,r3,r2
  8002fc:	200fd7fa 	srai	r7,r4,31
  800300:	2005883a 	mov	r2,r4
  800304:	3807883a 	mov	r3,r7
  800308:	2809883a 	mov	r4,r5
  80030c:	300b883a 	mov	r5,r6
  800310:	100d883a 	mov	r6,r2
  800314:	180f883a 	mov	r7,r3
  800318:	08021e40 	call	8021e4 <__muldi3>
  80031c:	1009883a 	mov	r4,r2
  800320:	180b883a 	mov	r5,r3
  800324:	2005883a 	mov	r2,r4
  800328:	2807883a 	mov	r3,r5
  80032c:	1009883a 	mov	r4,r2
  800330:	180b883a 	mov	r5,r3
  800334:	08023b40 	call	8023b4 <__floatdidf>
  800338:	100b883a 	mov	r5,r2
  80033c:	180d883a 	mov	r6,r3
  800340:	2809883a 	mov	r4,r5
  800344:	300b883a 	mov	r5,r6
  800348:	0801db40 	call	801db4 <sqrt>
  80034c:	100b883a 	mov	r5,r2
  800350:	180d883a 	mov	r6,r3
  800354:	2809883a 	mov	r4,r5
  800358:	300b883a 	mov	r5,r6
  80035c:	08030dc0 	call	8030dc <__fixdfsi>
	//return (x-y)*(x-y);
}
  800360:	e037883a 	mov	sp,fp
  800364:	dfc00117 	ldw	ra,4(sp)
  800368:	df000017 	ldw	fp,0(sp)
  80036c:	dec00204 	addi	sp,sp,8
  800370:	f800283a 	ret

00800374 <dtw>:

long dtw(long * t1, long * t2, int m, int n, int coord) {
  800374:	defff204 	addi	sp,sp,-56
  800378:	dfc00d15 	stw	ra,52(sp)
  80037c:	df000c15 	stw	fp,48(sp)
  800380:	dc400b15 	stw	r17,44(sp)
  800384:	dc000a15 	stw	r16,40(sp)
  800388:	df000a04 	addi	fp,sp,40
  80038c:	e13ffc15 	stw	r4,-16(fp)
  800390:	e17ffd15 	stw	r5,-12(fp)
  800394:	e1bffe15 	stw	r6,-8(fp)
  800398:	e1ffff15 	stw	r7,-4(fp)
	int i;
	int j;
	long zero = 0;
  80039c:	e03ff915 	stw	zero,-28(fp)
	volatile alt_u32 * pCost;
	int window = (int)(0.1*(max(m, n))+0.5); //band size of 10% max of m or n
  8003a0:	e13ffe17 	ldw	r4,-8(fp)
  8003a4:	e17fff17 	ldw	r5,-4(fp)
  8003a8:	080027c0 	call	80027c <max>
  8003ac:	1009883a 	mov	r4,r2
  8003b0:	0802fe40 	call	802fe4 <__floatsidf>
  8003b4:	100b883a 	mov	r5,r2
  8003b8:	180d883a 	mov	r6,r3
  8003bc:	2809883a 	mov	r4,r5
  8003c0:	300b883a 	mov	r5,r6
  8003c4:	01a666b4 	movhi	r6,39322
  8003c8:	31a66684 	addi	r6,r6,-26214
  8003cc:	01cfeeb4 	movhi	r7,16314
  8003d0:	39e66644 	addi	r7,r7,-26215
  8003d4:	08029400 	call	802940 <__muldf3>
  8003d8:	1009883a 	mov	r4,r2
  8003dc:	180b883a 	mov	r5,r3
  8003e0:	2005883a 	mov	r2,r4
  8003e4:	2807883a 	mov	r3,r5
  8003e8:	1009883a 	mov	r4,r2
  8003ec:	180b883a 	mov	r5,r3
  8003f0:	000d883a 	mov	r6,zero
  8003f4:	01cff834 	movhi	r7,16352
  8003f8:	08028cc0 	call	8028cc <__adddf3>
  8003fc:	1009883a 	mov	r4,r2
  800400:	180b883a 	mov	r5,r3
  800404:	2005883a 	mov	r2,r4
  800408:	2807883a 	mov	r3,r5
  80040c:	1009883a 	mov	r4,r2
  800410:	180b883a 	mov	r5,r3
  800414:	08030dc0 	call	8030dc <__fixdfsi>
  800418:	e0bff715 	stw	r2,-36(fp)
	int constraint = abs(n-m);
  80041c:	e0ffff17 	ldw	r3,-4(fp)
  800420:	e0bffe17 	ldw	r2,-8(fp)
  800424:	1885c83a 	sub	r2,r3,r2
  800428:	e0bff615 	stw	r2,-40(fp)
  80042c:	e0bff617 	ldw	r2,-40(fp)
  800430:	1004403a 	cmpge	r2,r2,zero
  800434:	1000031e 	bne	r2,zero,800444 <dtw+0xd0>
  800438:	e0bff617 	ldw	r2,-40(fp)
  80043c:	0085c83a 	sub	r2,zero,r2
  800440:	e0bff615 	stw	r2,-40(fp)
	window = max(window, constraint);
  800444:	e13ff717 	ldw	r4,-36(fp)
  800448:	e17ff617 	ldw	r5,-40(fp)
  80044c:	080027c0 	call	80027c <max>
  800450:	e0bff715 	stw	r2,-36(fp)

	// create cost matrix
	//int cost[m][n];
	if(coord == 0){
  800454:	e0800417 	ldw	r2,16(fp)
  800458:	1004c03a 	cmpne	r2,r2,zero
  80045c:	1000031e 	bne	r2,zero,80046c <dtw+0xf8>
		pCost = ((alt_u32*) SRAM_0_BASE);// + sizeof(int)*800;
  800460:	00806234 	movhi	r2,392
  800464:	e0bff815 	stw	r2,-32(fp)
  800468:	00000306 	br	800478 <dtw+0x104>
	}
	else{
		pCost = ((alt_u32*) SRAM_0_BASE) + DTW_BASE_Y;
  80046c:	008062b4 	movhi	r2,394
  800470:	109c4004 	addi	r2,r2,28928
  800474:	e0bff815 	stw	r2,-32(fp)
	}
	//long index = 0;
	// setup initial state of matrix
	for (i = 0; i < m; i++){
  800478:	e03ffb15 	stw	zero,-20(fp)
  80047c:	00001806 	br	8004e0 <dtw+0x16c>
		for (j = 0; j < n; j++){
  800480:	e03ffa15 	stw	zero,-24(fp)
  800484:	00001006 	br	8004c8 <dtw+0x154>
			*(pCost +(i*n+j)) = (signed long)INFIN;
  800488:	e0fffb17 	ldw	r3,-20(fp)
  80048c:	e0bfff17 	ldw	r2,-4(fp)
  800490:	1887383a 	mul	r3,r3,r2
  800494:	e0bffa17 	ldw	r2,-24(fp)
  800498:	1885883a 	add	r2,r3,r2
  80049c:	1085883a 	add	r2,r2,r2
  8004a0:	1085883a 	add	r2,r2,r2
  8004a4:	1007883a 	mov	r3,r2
  8004a8:	e0bff817 	ldw	r2,-32(fp)
  8004ac:	1887883a 	add	r3,r3,r2
  8004b0:	00a00034 	movhi	r2,32768
  8004b4:	10bfff84 	addi	r2,r2,-2
  8004b8:	18800015 	stw	r2,0(r3)
		pCost = ((alt_u32*) SRAM_0_BASE) + DTW_BASE_Y;
	}
	//long index = 0;
	// setup initial state of matrix
	for (i = 0; i < m; i++){
		for (j = 0; j < n; j++){
  8004bc:	e0bffa17 	ldw	r2,-24(fp)
  8004c0:	10800044 	addi	r2,r2,1
  8004c4:	e0bffa15 	stw	r2,-24(fp)
  8004c8:	e0fffa17 	ldw	r3,-24(fp)
  8004cc:	e0bfff17 	ldw	r2,-4(fp)
  8004d0:	18bfed16 	blt	r3,r2,800488 <dtw+0x114>
	else{
		pCost = ((alt_u32*) SRAM_0_BASE) + DTW_BASE_Y;
	}
	//long index = 0;
	// setup initial state of matrix
	for (i = 0; i < m; i++){
  8004d4:	e0bffb17 	ldw	r2,-20(fp)
  8004d8:	10800044 	addi	r2,r2,1
  8004dc:	e0bffb15 	stw	r2,-20(fp)
  8004e0:	e0fffb17 	ldw	r3,-20(fp)
  8004e4:	e0bffe17 	ldw	r2,-8(fp)
  8004e8:	18bfe516 	blt	r3,r2,800480 <dtw+0x10c>
			//cost[i][j]
			//printf("%d\n", index++);
		}
	}
	//cost[0][0] = 0;
	*pCost = zero;
  8004ec:	e0bff917 	ldw	r2,-28(fp)
  8004f0:	e0fff817 	ldw	r3,-32(fp)
  8004f4:	18800015 	stw	r2,0(r3)
	// fill matrix
	for (i = 1; i < m; i++) {
  8004f8:	00800044 	movi	r2,1
  8004fc:	e0bffb15 	stw	r2,-20(fp)
  800500:	00005a06 	br	80066c <dtw+0x2f8>
		for (j = max(1, i - window); j < min(n, i + window)+1; j++) {
  800504:	e0fffb17 	ldw	r3,-20(fp)
  800508:	e0bff717 	ldw	r2,-36(fp)
  80050c:	188bc83a 	sub	r5,r3,r2
  800510:	01000044 	movi	r4,1
  800514:	080027c0 	call	80027c <max>
  800518:	e0bffa15 	stw	r2,-24(fp)
  80051c:	00004806 	br	800640 <dtw+0x2cc>
			*(pCost +(i*n+j)) = min_three(
  800520:	e0fffb17 	ldw	r3,-20(fp)
  800524:	e0bfff17 	ldw	r2,-4(fp)
  800528:	1887383a 	mul	r3,r3,r2
  80052c:	e0bffa17 	ldw	r2,-24(fp)
  800530:	1885883a 	add	r2,r3,r2
  800534:	1085883a 	add	r2,r2,r2
  800538:	1085883a 	add	r2,r2,r2
  80053c:	1007883a 	mov	r3,r2
  800540:	e0bff817 	ldw	r2,-32(fp)
  800544:	18a1883a 	add	r16,r3,r2
  800548:	e0bffb17 	ldw	r2,-20(fp)
  80054c:	10ffffc4 	addi	r3,r2,-1
  800550:	e0bfff17 	ldw	r2,-4(fp)
  800554:	1887383a 	mul	r3,r3,r2
  800558:	e0bffa17 	ldw	r2,-24(fp)
  80055c:	1885883a 	add	r2,r3,r2
  800560:	1085883a 	add	r2,r2,r2
  800564:	1085883a 	add	r2,r2,r2
  800568:	1007883a 	mov	r3,r2
  80056c:	e0bff817 	ldw	r2,-32(fp)
  800570:	1885883a 	add	r2,r3,r2
  800574:	10800017 	ldw	r2,0(r2)
  800578:	1009883a 	mov	r4,r2
  80057c:	e0fffb17 	ldw	r3,-20(fp)
  800580:	e0bfff17 	ldw	r2,-4(fp)
  800584:	1887383a 	mul	r3,r3,r2
  800588:	e0bffa17 	ldw	r2,-24(fp)
  80058c:	1885883a 	add	r2,r3,r2
  800590:	1085883a 	add	r2,r2,r2
  800594:	1085883a 	add	r2,r2,r2
  800598:	1007883a 	mov	r3,r2
  80059c:	e0bff817 	ldw	r2,-32(fp)
  8005a0:	1885883a 	add	r2,r3,r2
  8005a4:	10bfff04 	addi	r2,r2,-4
  8005a8:	10800017 	ldw	r2,0(r2)
  8005ac:	100b883a 	mov	r5,r2
  8005b0:	e0bffb17 	ldw	r2,-20(fp)
  8005b4:	10ffffc4 	addi	r3,r2,-1
  8005b8:	e0bfff17 	ldw	r2,-4(fp)
  8005bc:	1887383a 	mul	r3,r3,r2
  8005c0:	e0bffa17 	ldw	r2,-24(fp)
  8005c4:	1885883a 	add	r2,r3,r2
  8005c8:	1085883a 	add	r2,r2,r2
  8005cc:	1085883a 	add	r2,r2,r2
  8005d0:	1007883a 	mov	r3,r2
  8005d4:	e0bff817 	ldw	r2,-32(fp)
  8005d8:	1885883a 	add	r2,r3,r2
  8005dc:	10bfff04 	addi	r2,r2,-4
  8005e0:	10800017 	ldw	r2,0(r2)
  8005e4:	100d883a 	mov	r6,r2
  8005e8:	08001dc0 	call	8001dc <min_three>
  8005ec:	1023883a 	mov	r17,r2
  8005f0:	e0bffb17 	ldw	r2,-20(fp)
  8005f4:	1085883a 	add	r2,r2,r2
  8005f8:	1085883a 	add	r2,r2,r2
  8005fc:	1007883a 	mov	r3,r2
  800600:	e0bffc17 	ldw	r2,-16(fp)
  800604:	1885883a 	add	r2,r3,r2
  800608:	11000017 	ldw	r4,0(r2)
  80060c:	e0bffa17 	ldw	r2,-24(fp)
  800610:	1085883a 	add	r2,r2,r2
  800614:	1085883a 	add	r2,r2,r2
  800618:	1007883a 	mov	r3,r2
  80061c:	e0bffd17 	ldw	r2,-12(fp)
  800620:	1885883a 	add	r2,r3,r2
  800624:	11400017 	ldw	r5,0(r2)
  800628:	08002c00 	call	8002c0 <dist>
  80062c:	8885883a 	add	r2,r17,r2
  800630:	80800015 	stw	r2,0(r16)
	}
	//cost[0][0] = 0;
	*pCost = zero;
	// fill matrix
	for (i = 1; i < m; i++) {
		for (j = max(1, i - window); j < min(n, i + window)+1; j++) {
  800634:	e0bffa17 	ldw	r2,-24(fp)
  800638:	10800044 	addi	r2,r2,1
  80063c:	e0bffa15 	stw	r2,-24(fp)
  800640:	e0fffb17 	ldw	r3,-20(fp)
  800644:	e0bff717 	ldw	r2,-36(fp)
  800648:	188b883a 	add	r5,r3,r2
  80064c:	e13fff17 	ldw	r4,-4(fp)
  800650:	08002380 	call	800238 <min>
  800654:	10c00044 	addi	r3,r2,1
  800658:	e0bffa17 	ldw	r2,-24(fp)
  80065c:	10ffb016 	blt	r2,r3,800520 <dtw+0x1ac>
		}
	}
	//cost[0][0] = 0;
	*pCost = zero;
	// fill matrix
	for (i = 1; i < m; i++) {
  800660:	e0bffb17 	ldw	r2,-20(fp)
  800664:	10800044 	addi	r2,r2,1
  800668:	e0bffb15 	stw	r2,-20(fp)
  80066c:	e0fffb17 	ldw	r3,-20(fp)
  800670:	e0bffe17 	ldw	r2,-8(fp)
  800674:	18bfa316 	blt	r3,r2,800504 <dtw+0x190>
					(long)(*(pCost +((i-1)*n+(j-1)))))
					+ dist(t1[i], t2[j]);

		}
	}
	return (long)*(pCost + ((m-1)*n+(n-1)));
  800678:	e0bffe17 	ldw	r2,-8(fp)
  80067c:	10ffffc4 	addi	r3,r2,-1
  800680:	e0bfff17 	ldw	r2,-4(fp)
  800684:	1887383a 	mul	r3,r3,r2
  800688:	e0bfff17 	ldw	r2,-4(fp)
  80068c:	1885883a 	add	r2,r3,r2
  800690:	1085883a 	add	r2,r2,r2
  800694:	1085883a 	add	r2,r2,r2
  800698:	1007883a 	mov	r3,r2
  80069c:	e0bff817 	ldw	r2,-32(fp)
  8006a0:	1885883a 	add	r2,r3,r2
  8006a4:	10bfff04 	addi	r2,r2,-4
  8006a8:	10800017 	ldw	r2,0(r2)
	//return pCost[m - 1][n - 1];

}
  8006ac:	e037883a 	mov	sp,fp
  8006b0:	dfc00317 	ldw	ra,12(sp)
  8006b4:	df000217 	ldw	fp,8(sp)
  8006b8:	dc400117 	ldw	r17,4(sp)
  8006bc:	dc000017 	ldw	r16,0(sp)
  8006c0:	dec00404 	addi	sp,sp,16
  8006c4:	f800283a 	ret

008006c8 <taskModeSelect>:
//i++;
//// I only want to display the least significant nibble
//printf("SEVEN_SEG: %x\n", i & 0x0000000f);

//todo ModeSelect
void taskModeSelect(void* pdata){
  8006c8:	deffed04 	addi	sp,sp,-76
  8006cc:	dfc01215 	stw	ra,72(sp)
  8006d0:	df001115 	stw	fp,68(sp)
  8006d4:	df001104 	addi	fp,sp,68
  8006d8:	e13fff15 	stw	r4,-4(fp)
	//int i;
	OSSemPend(modeselectsem, 0, &err);
  8006dc:	d1271d17 	ldw	r4,-25484(gp)
  8006e0:	000b883a 	mov	r5,zero
  8006e4:	d1a71b04 	addi	r6,gp,-25492
  8006e8:	08124e80 	call	8124e8 <OSSemPend>
	printf("Starting ModeSelect\n");
  8006ec:	010020b4 	movhi	r4,130
  8006f0:	212fe504 	addi	r4,r4,-16492
  8006f4:	0803b300 	call	803b30 <puts>

	while(1){
		//alt_dcache_flush_all();
		//printf("Starting ModeSelect\n");
		if (IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE) == 1) {
  8006f8:	00806474 	movhi	r2,401
  8006fc:	10a50c04 	addi	r2,r2,-27600
  800700:	10800037 	ldwio	r2,0(r2)
  800704:	10800058 	cmpnei	r2,r2,1
  800708:	10004a1e 	bne	r2,zero,800834 <taskModeSelect+0x16c>
			//printf("Starting ModeSelect2\n");
			//loadSDCard(1);
			err = OSSemPost(loadsdcardsem);
  80070c:	d1271217 	ldw	r4,-25528(gp)
  800710:	08128e00 	call	8128e0 <OSSemPost>
  800714:	d0a71b05 	stb	r2,-25492(gp)
			OSSemPend(loadsem, 0, &err);
  800718:	d1271a17 	ldw	r4,-25496(gp)
  80071c:	000b883a 	mov	r5,zero
  800720:	d1a71b04 	addi	r6,gp,-25492
  800724:	08124e80 	call	8124e8 <OSSemPend>
			//int t1[3] = { 0, 1, 2 };
//			int t2[2] = { 2, 3 };
//			int t3[3] = { 6, 0, 9 };
//			int t4[3] = { 4, 5, 8 };

			int t1[4] = {0, 1, 2, 3};
  800728:	e03fef15 	stw	zero,-68(fp)
  80072c:	00800044 	movi	r2,1
  800730:	e0bff015 	stw	r2,-64(fp)
  800734:	00800084 	movi	r2,2
  800738:	e0bff115 	stw	r2,-60(fp)
  80073c:	008000c4 	movi	r2,3
  800740:	e0bff215 	stw	r2,-56(fp)
			int t2[4] = {4, 5, 6, 7};
  800744:	00800104 	movi	r2,4
  800748:	e0bff315 	stw	r2,-52(fp)
  80074c:	00800144 	movi	r2,5
  800750:	e0bff415 	stw	r2,-48(fp)
  800754:	00800184 	movi	r2,6
  800758:	e0bff515 	stw	r2,-44(fp)
  80075c:	008001c4 	movi	r2,7
  800760:	e0bff615 	stw	r2,-40(fp)
			int t3[4] = {8, 9, 10, 11};
  800764:	00800204 	movi	r2,8
  800768:	e0bff715 	stw	r2,-36(fp)
  80076c:	00800244 	movi	r2,9
  800770:	e0bff815 	stw	r2,-32(fp)
  800774:	00800284 	movi	r2,10
  800778:	e0bff915 	stw	r2,-28(fp)
  80077c:	008002c4 	movi	r2,11
  800780:	e0bffa15 	stw	r2,-24(fp)
			int t4[4] = {12, 13, 14, 15};
  800784:	00800304 	movi	r2,12
  800788:	e0bffb15 	stw	r2,-20(fp)
  80078c:	00800344 	movi	r2,13
  800790:	e0bffc15 	stw	r2,-16(fp)
  800794:	00800384 	movi	r2,14
  800798:	e0bffd15 	stw	r2,-12(fp)
  80079c:	008003c4 	movi	r2,15
  8007a0:	e0bffe15 	stw	r2,-8(fp)

			templates[0].t = t1;
  8007a4:	008020f4 	movhi	r2,131
  8007a8:	10b84a04 	addi	r2,r2,-7896
  8007ac:	e0ffef04 	addi	r3,fp,-68
  8007b0:	10c00015 	stw	r3,0(r2)
			templates[1].t = t2;
  8007b4:	00c020f4 	movhi	r3,131
  8007b8:	18f84a04 	addi	r3,r3,-7896
  8007bc:	e0bff304 	addi	r2,fp,-52
  8007c0:	18800215 	stw	r2,8(r3)
			templates[2].t = t3;
  8007c4:	00c020f4 	movhi	r3,131
  8007c8:	18f84a04 	addi	r3,r3,-7896
  8007cc:	e0bff704 	addi	r2,fp,-36
  8007d0:	18800415 	stw	r2,16(r3)
			templates[3].t = t4;
  8007d4:	00c020f4 	movhi	r3,131
  8007d8:	18f84a04 	addi	r3,r3,-7896
  8007dc:	e0bffb04 	addi	r2,fp,-20
  8007e0:	18800615 	stw	r2,24(r3)
			templates[0].size = 4;
  8007e4:	00c020f4 	movhi	r3,131
  8007e8:	18f84a04 	addi	r3,r3,-7896
  8007ec:	00800104 	movi	r2,4
  8007f0:	18800115 	stw	r2,4(r3)
			templates[1].size = 4;
  8007f4:	00c020f4 	movhi	r3,131
  8007f8:	18f84a04 	addi	r3,r3,-7896
  8007fc:	00800104 	movi	r2,4
  800800:	18800315 	stw	r2,12(r3)
			templates[2].size = 4;
  800804:	00c020f4 	movhi	r3,131
  800808:	18f84a04 	addi	r3,r3,-7896
  80080c:	00800104 	movi	r2,4
  800810:	18800515 	stw	r2,20(r3)
			templates[3].size = 4;
  800814:	00c020f4 	movhi	r3,131
  800818:	18f84a04 	addi	r3,r3,-7896
  80081c:	00800104 	movi	r2,4
  800820:	18800715 	stw	r2,28(r3)
//
//			for(i = 0; i < 4; i++){
//
//			}
			err = OSSemPost(uartsem);
  800824:	d1271517 	ldw	r4,-25516(gp)
  800828:	08128e00 	call	8128e0 <OSSemPost>
  80082c:	d0a71b05 	stb	r2,-25492(gp)
  800830:	00000306 	br	800840 <taskModeSelect+0x178>
		} else {
			err = OSSemPost(configuresem);
  800834:	d1271417 	ldw	r4,-25520(gp)
  800838:	08128e00 	call	8128e0 <OSSemPost>
  80083c:	d0a71b05 	stb	r2,-25492(gp)
		}
		//OSTimeDlyHMSM(0, 0, 0, 50);
		//break;
		OSSemPend(modeselectsem, 0, &err);
  800840:	d1271d17 	ldw	r4,-25484(gp)
  800844:	000b883a 	mov	r5,zero
  800848:	d1a71b04 	addi	r6,gp,-25492
  80084c:	08124e80 	call	8124e8 <OSSemPend>
	}
  800850:	003fa906 	br	8006f8 <taskModeSelect+0x30>

00800854 <taskLoadSDCard>:
	return;
}

/* Helper function that loads the character templates from the SDCard and deposits them in SRAM */
//todo loadSDCARD
void taskLoadSDCard(void* pdata) {
  800854:	defff404 	addi	sp,sp,-48
  800858:	dfc00b15 	stw	ra,44(sp)
  80085c:	df000a15 	stw	fp,40(sp)
  800860:	dc000915 	stw	r16,36(sp)
  800864:	df000904 	addi	fp,sp,36
  800868:	e13fff15 	stw	r4,-4(fp)
	OSSemPend(loadsdcardsem, 0, &err);
  80086c:	d1271217 	ldw	r4,-25528(gp)
  800870:	000b883a 	mov	r5,zero
  800874:	d1a71b04 	addi	r6,gp,-25492
  800878:	08124e80 	call	8124e8 <OSSemPend>
	//int index;
	int i;
	int j;
	int temp;
	short int a;
	int debug = 0;
  80087c:	e03ff915 	stw	zero,-28(fp)
	signed long test;
	//OSSemPend(readsem, 0, &err);

	for(i=0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  800880:	e03ffd15 	stw	zero,-12(fp)
  800884:	00001e06 	br	800900 <taskLoadSDCard+0xac>

		template[i].pX = (alt_u8*)((alt_u8*) SRAM_0_BASE) + sizeof(long)*(DTW_BASE + X_COORD_BASE + Y_COORD_BASE + INPUT_SIZE*i);
  800888:	e17ffd17 	ldw	r5,-12(fp)
  80088c:	e0bffd17 	ldw	r2,-12(fp)
  800890:	1080c824 	muli	r2,r2,800
  800894:	1007883a 	mov	r3,r2
  800898:	00806374 	movhi	r2,397
  80089c:	10882004 	addi	r2,r2,8320
  8008a0:	1885883a 	add	r2,r3,r2
  8008a4:	1009883a 	mov	r4,r2
  8008a8:	00c020f4 	movhi	r3,131
  8008ac:	18f85204 	addi	r3,r3,-7864
  8008b0:	28800324 	muli	r2,r5,12
  8008b4:	10c5883a 	add	r2,r2,r3
  8008b8:	11000015 	stw	r4,0(r2)
		//template[i].pX = (alt_u8*)alt_remap_uncached( template[i].pX, 200 );
		template[i].pY = (alt_u8*)((alt_u8*) SRAM_0_BASE) + sizeof(long)*(DTW_BASE + X_COORD_BASE + X_COORD_BASE + OFFSET + Y_COORD_BASE + INPUT_SIZE*i);//1200 for 16
  8008bc:	e17ffd17 	ldw	r5,-12(fp)
  8008c0:	e0bffd17 	ldw	r2,-12(fp)
  8008c4:	1080c824 	muli	r2,r2,800
  8008c8:	1007883a 	mov	r3,r2
  8008cc:	00806374 	movhi	r2,397
  8008d0:	1094a004 	addi	r2,r2,21120
  8008d4:	1885883a 	add	r2,r3,r2
  8008d8:	1009883a 	mov	r4,r2
  8008dc:	00c020f4 	movhi	r3,131
  8008e0:	18f85204 	addi	r3,r3,-7864
  8008e4:	28800324 	muli	r2,r5,12
  8008e8:	10c5883a 	add	r2,r2,r3
  8008ec:	10800104 	addi	r2,r2,4
  8008f0:	11000015 	stw	r4,0(r2)
	short int a;
	int debug = 0;
	signed long test;
	//OSSemPend(readsem, 0, &err);

	for(i=0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  8008f4:	e0bffd17 	ldw	r2,-12(fp)
  8008f8:	10800044 	addi	r2,r2,1
  8008fc:	e0bffd15 	stw	r2,-12(fp)
  800900:	e0bffd17 	ldw	r2,-12(fp)
  800904:	10800410 	cmplti	r2,r2,16
  800908:	103fdf1e 	bne	r2,zero,800888 <taskLoadSDCard+0x34>
  80090c:	00000006 	br	800910 <taskLoadSDCard+0xbc>
//		template[i].pX = ((alt_u32*) SRAM_0_BASE) + sizeof(long)*(DTW_BASE + X_COORD_BASE + Y_COORD_BASE + INPUT_SIZE*i);
//		template[i].pY = ((alt_u32*) SRAM_0_BASE) + sizeof(long)*(DTW_BASE + X_COORD_BASE + X_COORD_BASE + Y_COORD_BASE + INPUT_SIZE*i);
//	}

	while(1){
	printf("SD Card Read Startup\n");
  800910:	010020b4 	movhi	r4,130
  800914:	212fea04 	addi	r4,r4,-16472
  800918:	0803b300 	call	803b30 <puts>

	alt_up_sd_card_dev *sd_card_dev = alt_up_sd_card_open_dev(
			ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
  80091c:	010020b4 	movhi	r4,130
  800920:	212ff004 	addi	r4,r4,-16448
  800924:	08191840 	call	819184 <alt_up_sd_card_open_dev>
  800928:	e0bff715 	stw	r2,-36(fp)

	if (sd_card_dev != 0) {
  80092c:	e0bff717 	ldw	r2,-36(fp)
  800930:	1005003a 	cmpeq	r2,r2,zero
  800934:	103ff61e 	bne	r2,zero,800910 <taskLoadSDCard+0xbc>
		if (alt_up_sd_card_is_Present()) {
  800938:	08192480 	call	819248 <alt_up_sd_card_is_Present>
  80093c:	1005003a 	cmpeq	r2,r2,zero
  800940:	103ff31e 	bne	r2,zero,800910 <taskLoadSDCard+0xbc>
			if (alt_up_sd_card_is_FAT16())
  800944:	08193100 	call	819310 <alt_up_sd_card_is_FAT16>
  800948:	1005003a 	cmpeq	r2,r2,zero
  80094c:	1000041e 	bne	r2,zero,800960 <taskLoadSDCard+0x10c>
				printf("Card is FAT16\n");
  800950:	010020b4 	movhi	r4,130
  800954:	212ffb04 	addi	r4,r4,-16404
  800958:	0803b300 	call	803b30 <puts>
  80095c:	00000306 	br	80096c <taskLoadSDCard+0x118>
			else
				printf("Card is not FAT16\n");
  800960:	010020b4 	movhi	r4,130
  800964:	212fff04 	addi	r4,r4,-16388
  800968:	0803b300 	call	803b30 <puts>

			sd_fileh = alt_up_sd_card_fopen("file.txt", false);
  80096c:	010020b4 	movhi	r4,130
  800970:	21300404 	addi	r4,r4,-16368
  800974:	000b883a 	mov	r5,zero
  800978:	08198080 	call	819808 <alt_up_sd_card_fopen>
  80097c:	e0bffe0d 	sth	r2,-8(fp)

			if (sd_fileh < 0)
  800980:	e0bffe0f 	ldh	r2,-8(fp)
  800984:	1004403a 	cmpge	r2,r2,zero
  800988:	1000051e 	bne	r2,zero,8009a0 <taskLoadSDCard+0x14c>
				printf("Problem accessing file. Error %i", sd_fileh);
  80098c:	e17ffe0f 	ldh	r5,-8(fp)
  800990:	010020b4 	movhi	r4,130
  800994:	21300704 	addi	r4,r4,-16356
  800998:	0803a180 	call	803a18 <printf>
  80099c:	003fdc06 	br	800910 <taskLoadSDCard+0xbc>
			else {
				printf("SD Accessed Successfully, reading data...\n");
  8009a0:	010020b4 	movhi	r4,130
  8009a4:	21301004 	addi	r4,r4,-16320
  8009a8:	0803b300 	call	803b30 <puts>

				//char * pbuffer = read_buffer;


				for(i = 0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  8009ac:	e03ffd15 	stw	zero,-12(fp)
  8009b0:	00008506 	br	800bc8 <taskLoadSDCard+0x374>
					template[i].size = (int) alt_up_sd_card_read(sd_fileh); //reads first byte of data which indicates the size of a template array
  8009b4:	e43ffd17 	ldw	r16,-12(fp)
  8009b8:	e13ffe0f 	ldh	r4,-8(fp)
  8009bc:	0819ccc0 	call	819ccc <alt_up_sd_card_read>
  8009c0:	113fffcc 	andi	r4,r2,65535
  8009c4:	2120001c 	xori	r4,r4,32768
  8009c8:	21200004 	addi	r4,r4,-32768
  8009cc:	00c020f4 	movhi	r3,131
  8009d0:	18f85204 	addi	r3,r3,-7864
  8009d4:	80800324 	muli	r2,r16,12
  8009d8:	10c5883a 	add	r2,r2,r3
  8009dc:	10800204 	addi	r2,r2,8
  8009e0:	11000015 	stw	r4,0(r2)
					//printf("%d\n", template[i].size);
					if (i == debug) {
  8009e4:	e0fffd17 	ldw	r3,-12(fp)
  8009e8:	e0bff917 	ldw	r2,-28(fp)
  8009ec:	1880041e 	bne	r3,r2,800a00 <taskLoadSDCard+0x1ac>
						printf(
  8009f0:	010020b4 	movhi	r4,130
  8009f4:	21301b04 	addi	r4,r4,-16276
  8009f8:	e17ff917 	ldw	r5,-28(fp)
  8009fc:	0803a180 	call	803a18 <printf>
								"X VALUES for %d -----------------------------------------------\n", debug);
					}
					for( j = 0;  j < template[i].size; j++){
  800a00:	e03ffc15 	stw	zero,-16(fp)
  800a04:	00002806 	br	800aa8 <taskLoadSDCard+0x254>
						//printf("")
						a = alt_up_sd_card_read(sd_fileh);
  800a08:	e13ffe0f 	ldh	r4,-8(fp)
  800a0c:	0819ccc0 	call	819ccc <alt_up_sd_card_read>
  800a10:	e0bffa0d 	sth	r2,-24(fp)
						//*(template[i].pX + sizeof(long)*j) = (long)(a);
						//*(template[i].pX + sizeof(long)*j) = (long)(a*10);
						*(((signed long*)template[i].pX) + j) = (signed long)(a*10);
  800a14:	e0bffd17 	ldw	r2,-12(fp)
  800a18:	00c020f4 	movhi	r3,131
  800a1c:	18f85204 	addi	r3,r3,-7864
  800a20:	10800324 	muli	r2,r2,12
  800a24:	10c5883a 	add	r2,r2,r3
  800a28:	10800017 	ldw	r2,0(r2)
  800a2c:	1007883a 	mov	r3,r2
  800a30:	e0bffc17 	ldw	r2,-16(fp)
  800a34:	1085883a 	add	r2,r2,r2
  800a38:	1085883a 	add	r2,r2,r2
  800a3c:	1887883a 	add	r3,r3,r2
  800a40:	e0bffa0f 	ldh	r2,-24(fp)
  800a44:	108002a4 	muli	r2,r2,10
  800a48:	18800015 	stw	r2,0(r3)
						//IOWR_32DIRECT(template[i].pX, j*4, (long)(a*10));
						//*(template[i].pX + sizeof(long)*j) = (long)(alt_up_sd_card_read(sd_fileh)*10);
						//temp = *(template[i].pX + sizeof(long)*j);
						if(i == debug){
  800a4c:	e0fffd17 	ldw	r3,-12(fp)
  800a50:	e0bff917 	ldw	r2,-28(fp)
  800a54:	1880111e 	bne	r3,r2,800a9c <taskLoadSDCard+0x248>
							test = *(((signed long*)template[i].pX) + j);
  800a58:	e0bffd17 	ldw	r2,-12(fp)
  800a5c:	00c020f4 	movhi	r3,131
  800a60:	18f85204 	addi	r3,r3,-7864
  800a64:	10800324 	muli	r2,r2,12
  800a68:	10c5883a 	add	r2,r2,r3
  800a6c:	10800017 	ldw	r2,0(r2)
  800a70:	1007883a 	mov	r3,r2
  800a74:	e0bffc17 	ldw	r2,-16(fp)
  800a78:	1085883a 	add	r2,r2,r2
  800a7c:	1085883a 	add	r2,r2,r2
  800a80:	1885883a 	add	r2,r3,r2
  800a84:	10800017 	ldw	r2,0(r2)
  800a88:	e0bff815 	stw	r2,-32(fp)
							printf("%ld\n", test);
  800a8c:	010020b4 	movhi	r4,130
  800a90:	21302c04 	addi	r4,r4,-16208
  800a94:	e17ff817 	ldw	r5,-32(fp)
  800a98:	0803a180 	call	803a18 <printf>
					//printf("%d\n", template[i].size);
					if (i == debug) {
						printf(
								"X VALUES for %d -----------------------------------------------\n", debug);
					}
					for( j = 0;  j < template[i].size; j++){
  800a9c:	e0bffc17 	ldw	r2,-16(fp)
  800aa0:	10800044 	addi	r2,r2,1
  800aa4:	e0bffc15 	stw	r2,-16(fp)
  800aa8:	e0bffd17 	ldw	r2,-12(fp)
  800aac:	00c020f4 	movhi	r3,131
  800ab0:	18f85204 	addi	r3,r3,-7864
  800ab4:	10800324 	muli	r2,r2,12
  800ab8:	10c5883a 	add	r2,r2,r3
  800abc:	10800204 	addi	r2,r2,8
  800ac0:	10c00017 	ldw	r3,0(r2)
  800ac4:	e0bffc17 	ldw	r2,-16(fp)
  800ac8:	10ffcf16 	blt	r2,r3,800a08 <taskLoadSDCard+0x1b4>
							//printf("0x%08x   0x%08x \n",((long*)template[i].pX + j),((long*)template[i].pX + (j-1)));
						}
						//printf("%d\n", temp);
					}

					if(i == debug){
  800acc:	e0fffd17 	ldw	r3,-12(fp)
  800ad0:	e0bff917 	ldw	r2,-28(fp)
  800ad4:	1880041e 	bne	r3,r2,800ae8 <taskLoadSDCard+0x294>
						printf("Y VALUES for %d -----------------------------------------------\n", debug);
  800ad8:	010020b4 	movhi	r4,130
  800adc:	21302e04 	addi	r4,r4,-16200
  800ae0:	e17ff917 	ldw	r5,-28(fp)
  800ae4:	0803a180 	call	803a18 <printf>
					}
					for( j = 0;  j < template[i].size; j++){
  800ae8:	e03ffc15 	stw	zero,-16(fp)
  800aec:	00002a06 	br	800b98 <taskLoadSDCard+0x344>
						a = alt_up_sd_card_read(sd_fileh);
  800af0:	e13ffe0f 	ldh	r4,-8(fp)
  800af4:	0819ccc0 	call	819ccc <alt_up_sd_card_read>
  800af8:	e0bffa0d 	sth	r2,-24(fp)
						//*(template[i].pY + sizeof(long)*j) = (long)(a);
						*(((signed long*)template[i].pY) + j) = (signed long)(a*10);
  800afc:	e0bffd17 	ldw	r2,-12(fp)
  800b00:	00c020f4 	movhi	r3,131
  800b04:	18f85204 	addi	r3,r3,-7864
  800b08:	10800324 	muli	r2,r2,12
  800b0c:	10c5883a 	add	r2,r2,r3
  800b10:	10800104 	addi	r2,r2,4
  800b14:	10800017 	ldw	r2,0(r2)
  800b18:	1007883a 	mov	r3,r2
  800b1c:	e0bffc17 	ldw	r2,-16(fp)
  800b20:	1085883a 	add	r2,r2,r2
  800b24:	1085883a 	add	r2,r2,r2
  800b28:	1887883a 	add	r3,r3,r2
  800b2c:	e0bffa0f 	ldh	r2,-24(fp)
  800b30:	108002a4 	muli	r2,r2,10
  800b34:	18800015 	stw	r2,0(r3)
						//*(template[i].pY + sizeof(long)*j) = (long)(a*10);
						//*(template[i].pY + sizeof(long)*j) = (long)(alt_up_sd_card_read(sd_fileh)*10);
						//temp = *(template[i].pY + sizeof(long)*j);
						if(i == debug){
  800b38:	e0fffd17 	ldw	r3,-12(fp)
  800b3c:	e0bff917 	ldw	r2,-28(fp)
  800b40:	1880121e 	bne	r3,r2,800b8c <taskLoadSDCard+0x338>
							//printf("%d\n", a);
//							printf("%ld\n", *((long*)template[i].pX + j));
							//printf("%ld\n", temp);
							//printf("short int =%d\n", a);

							test = *(((signed long*)template[i].pY) + j);
  800b44:	e0bffd17 	ldw	r2,-12(fp)
  800b48:	00c020f4 	movhi	r3,131
  800b4c:	18f85204 	addi	r3,r3,-7864
  800b50:	10800324 	muli	r2,r2,12
  800b54:	10c5883a 	add	r2,r2,r3
  800b58:	10800104 	addi	r2,r2,4
  800b5c:	10800017 	ldw	r2,0(r2)
  800b60:	1007883a 	mov	r3,r2
  800b64:	e0bffc17 	ldw	r2,-16(fp)
  800b68:	1085883a 	add	r2,r2,r2
  800b6c:	1085883a 	add	r2,r2,r2
  800b70:	1885883a 	add	r2,r3,r2
  800b74:	10800017 	ldw	r2,0(r2)
  800b78:	e0bff815 	stw	r2,-32(fp)
							printf("%ld\n", test);
  800b7c:	010020b4 	movhi	r4,130
  800b80:	21302c04 	addi	r4,r4,-16208
  800b84:	e17ff817 	ldw	r5,-32(fp)
  800b88:	0803a180 	call	803a18 <printf>
					}

					if(i == debug){
						printf("Y VALUES for %d -----------------------------------------------\n", debug);
					}
					for( j = 0;  j < template[i].size; j++){
  800b8c:	e0bffc17 	ldw	r2,-16(fp)
  800b90:	10800044 	addi	r2,r2,1
  800b94:	e0bffc15 	stw	r2,-16(fp)
  800b98:	e0bffd17 	ldw	r2,-12(fp)
  800b9c:	00c020f4 	movhi	r3,131
  800ba0:	18f85204 	addi	r3,r3,-7864
  800ba4:	10800324 	muli	r2,r2,12
  800ba8:	10c5883a 	add	r2,r2,r3
  800bac:	10800204 	addi	r2,r2,8
  800bb0:	10c00017 	ldw	r3,0(r2)
  800bb4:	e0bffc17 	ldw	r2,-16(fp)
  800bb8:	10ffcd16 	blt	r2,r3,800af0 <taskLoadSDCard+0x29c>
				printf("SD Accessed Successfully, reading data...\n");

				//char * pbuffer = read_buffer;


				for(i = 0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  800bbc:	e0bffd17 	ldw	r2,-12(fp)
  800bc0:	10800044 	addi	r2,r2,1
  800bc4:	e0bffd15 	stw	r2,-12(fp)
  800bc8:	e0bffd17 	ldw	r2,-12(fp)
  800bcc:	10800410 	cmplti	r2,r2,16
  800bd0:	103f781e 	bne	r2,zero,8009b4 <taskLoadSDCard+0x160>
//					*pbuffer = data;
//					pbuffer = pbuffer + (sizeof(char));
//				}
//				*pbuffer = '\0';

				printf("Done!\n");
  800bd4:	010020b4 	movhi	r4,130
  800bd8:	21303f04 	addi	r4,r4,-16132
  800bdc:	0803b300 	call	803b30 <puts>
				printf("Closing File...");
  800be0:	010020b4 	movhi	r4,130
  800be4:	21304104 	addi	r4,r4,-16124
  800be8:	0803a180 	call	803a18 <printf>
				alt_up_sd_card_fclose(sd_fileh);
  800bec:	e13ffe0f 	ldh	r4,-8(fp)
  800bf0:	081a68c0 	call	81a68c <alt_up_sd_card_fclose>
				printf("Done!\n");
  800bf4:	010020b4 	movhi	r4,130
  800bf8:	21303f04 	addi	r4,r4,-16132
  800bfc:	0803b300 	call	803b30 <puts>
				err = OSSemPost(loadsem);
  800c00:	d1271a17 	ldw	r4,-25496(gp)
  800c04:	08128e00 	call	8128e0 <OSSemPost>
  800c08:	d0a71b05 	stb	r2,-25492(gp)
				OSSemPend(loadsdcardsem, 0, &err);
  800c0c:	d1271217 	ldw	r4,-25528(gp)
  800c10:	000b883a 	mov	r5,zero
  800c14:	d1a71b04 	addi	r6,gp,-25492
  800c18:	08124e80 	call	8124e8 <OSSemPend>
				//printf("%s\n", read_buffer);
				//OSQPost(message, (void*) &read_buffer);
			}
		}
	}
}
  800c1c:	003f3c06 	br	800910 <taskLoadSDCard+0xbc>

00800c20 <taskCalibrate>:
	return;
}

//todo taskCalibrate
/* Calibrates the pen, stores the calibrations in SRAM. Posts to the SDCard write task to save the data.*/
void taskCalibrate(void* pdata) {
  800c20:	defff404 	addi	sp,sp,-48
  800c24:	dfc00b15 	stw	ra,44(sp)
  800c28:	df000a15 	stw	fp,40(sp)
  800c2c:	df000a04 	addi	fp,sp,40
  800c30:	e13fff15 	stw	r4,-4(fp)
	OSSemPend(configuresem, 0, &err);
  800c34:	d1271417 	ldw	r4,-25520(gp)
  800c38:	000b883a 	mov	r5,zero
  800c3c:	d1a71b04 	addi	r6,gp,-25492
  800c40:	08124e80 	call	8124e8 <OSSemPend>
	alt_u16 read_FIFO_used;
	alt_8 data_R8;
	unsigned p_error;
	alt_up_rs232_dev* rs232_dev;
	int index = 0;
  800c44:	e03ffb15 	stw	zero,-20(fp)
	int i;
	int start = 0;
  800c48:	e03ff915 	stw	zero,-28(fp)
	int coord = 0;
  800c4c:	e03ff815 	stw	zero,-32(fp)
	int current_address = -1;
  800c50:	00bfffc4 	movi	r2,-1
  800c54:	e0bff715 	stw	r2,-36(fp)

	int reading = 0;
  800c58:	e03ff615 	stw	zero,-40(fp)

	for(i=0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  800c5c:	e03ffa15 	stw	zero,-24(fp)
  800c60:	00001c06 	br	800cd4 <taskCalibrate+0xb4>
		array_8[i].pX = (alt_8*)((alt_u8*) SRAM_0_BASE) + sizeof(signed char)*(DTW_BASE + INPUT_SIZE*i);
  800c64:	e17ffa17 	ldw	r5,-24(fp)
  800c68:	e0bffa17 	ldw	r2,-24(fp)
  800c6c:	10803224 	muli	r2,r2,200
  800c70:	1007883a 	mov	r3,r2
  800c74:	00806274 	movhi	r2,393
  800c78:	108e2004 	addi	r2,r2,14464
  800c7c:	1889883a 	add	r4,r3,r2
  800c80:	00c020f4 	movhi	r3,131
  800c84:	18ca8e04 	addi	r3,r3,10808
  800c88:	28800324 	muli	r2,r5,12
  800c8c:	10c5883a 	add	r2,r2,r3
  800c90:	11000015 	stw	r4,0(r2)
		array_8[i].pY = (alt_8*)((alt_u8*) SRAM_0_BASE) + sizeof(signed char)*(DTW_BASE + X_COORD_BASE + OFFSET + INPUT_SIZE*i);//1200 for 16 templates
  800c94:	e17ffa17 	ldw	r5,-24(fp)
  800c98:	e0bffa17 	ldw	r2,-24(fp)
  800c9c:	10803224 	muli	r2,r2,200
  800ca0:	1007883a 	mov	r3,r2
  800ca4:	00806274 	movhi	r2,393
  800ca8:	10914004 	addi	r2,r2,17664
  800cac:	1889883a 	add	r4,r3,r2
  800cb0:	00c020f4 	movhi	r3,131
  800cb4:	18ca8e04 	addi	r3,r3,10808
  800cb8:	28800324 	muli	r2,r5,12
  800cbc:	10c5883a 	add	r2,r2,r3
  800cc0:	10800104 	addi	r2,r2,4
  800cc4:	11000015 	stw	r4,0(r2)
	int coord = 0;
	int current_address = -1;

	int reading = 0;

	for(i=0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  800cc8:	e0bffa17 	ldw	r2,-24(fp)
  800ccc:	10800044 	addi	r2,r2,1
  800cd0:	e0bffa15 	stw	r2,-24(fp)
  800cd4:	e0bffa17 	ldw	r2,-24(fp)
  800cd8:	10800410 	cmplti	r2,r2,16
  800cdc:	103fe11e 	bne	r2,zero,800c64 <taskCalibrate+0x44>
//		array_8[i].pX = (alt_8*)((alt_u32*) SRAM_0_BASE) + sizeof(signed char)*(DTW_BASE + INPUT_SIZE*i);
//		array_8[i].pY = (alt_8*)((alt_u32*) SRAM_0_BASE) + sizeof(signed char)*(DTW_BASE + X_COORD_BASE + OFFSET + INPUT_SIZE*i);//1200 for 16 templates
//	}

	// open the RS232 UART port
	rs232_dev = alt_up_rs232_open_dev("/dev/rs232_0");
  800ce0:	010020b4 	movhi	r4,130
  800ce4:	21304504 	addi	r4,r4,-16108
  800ce8:	08163e80 	call	8163e8 <alt_up_rs232_open_dev>
  800cec:	e0bffc15 	stw	r2,-16(fp)
	if (rs232_dev == NULL)
  800cf0:	e0bffc17 	ldw	r2,-16(fp)
  800cf4:	1004c03a 	cmpne	r2,r2,zero
  800cf8:	1000041e 	bne	r2,zero,800d0c <taskCalibrate+0xec>
		printf("Error: could not open RS232 UART\n");
  800cfc:	010020b4 	movhi	r4,130
  800d00:	21304904 	addi	r4,r4,-16092
  800d04:	0803b300 	call	803b30 <puts>
  800d08:	00000306 	br	800d18 <taskCalibrate+0xf8>
	else
		printf("Opened RS232 UART device\n");
  800d0c:	010020b4 	movhi	r4,130
  800d10:	21305204 	addi	r4,r4,-16056
  800d14:	0803b300 	call	803b30 <puts>

	alt_up_rs232_enable_read_interrupt(rs232_dev);
  800d18:	e13ffc17 	ldw	r4,-16(fp)
  800d1c:	08160900 	call	816090 <alt_up_rs232_enable_read_interrupt>

	printf("UART Read For Configuration\n");
  800d20:	010020b4 	movhi	r4,130
  800d24:	21305904 	addi	r4,r4,-16028
  800d28:	0803b300 	call	803b30 <puts>
	printf("Starting Calibration. Write character 0...\n\n");
  800d2c:	010020b4 	movhi	r4,130
  800d30:	21306004 	addi	r4,r4,-16000
  800d34:	0803b300 	call	803b30 <puts>
	*SEVEN_SEG = 0xC;
  800d38:	00806474 	movhi	r2,401
  800d3c:	10a51a04 	addi	r2,r2,-27544
  800d40:	00c00304 	movi	r3,12
  800d44:	10c00015 	stw	r3,0(r2)
	OSTimeDlyHMSM(0, 0, 3, 0);
  800d48:	0009883a 	mov	r4,zero
  800d4c:	000b883a 	mov	r5,zero
  800d50:	018000c4 	movi	r6,3
  800d54:	000f883a 	mov	r7,zero
  800d58:	08147c80 	call	8147c8 <OSTimeDlyHMSM>
	*SEVEN_SEG = 0;
  800d5c:	00806474 	movhi	r2,401
  800d60:	10a51a04 	addi	r2,r2,-27544
  800d64:	10000015 	stw	zero,0(r2)
	while (1) {

		// Read from UART
		read_FIFO_used = alt_up_rs232_get_used_space_in_read_FIFO(rs232_dev);
  800d68:	e13ffc17 	ldw	r4,-16(fp)
  800d6c:	081613c0 	call	81613c <alt_up_rs232_get_used_space_in_read_FIFO>
  800d70:	e0bffd0d 	sth	r2,-12(fp)
		if (read_FIFO_used > READ_FIFO_EMPTY) {
  800d74:	e0bffd0b 	ldhu	r2,-12(fp)
  800d78:	1005003a 	cmpeq	r2,r2,zero
  800d7c:	10005d1e 	bne	r2,zero,800ef4 <taskCalibrate+0x2d4>
			//alt_printf("char stored in read_FIFO: %x\n", read_FIFO_used);
			alt_up_rs232_read_data(rs232_dev, &data_R8, &p_error);
  800d80:	e17ffd84 	addi	r5,fp,-10
  800d84:	e1bffe04 	addi	r6,fp,-8
  800d88:	e13ffc17 	ldw	r4,-16(fp)
  800d8c:	08162500 	call	816250 <alt_up_rs232_read_data>
			//alt_printf("read %c from RS232 UART\n", data_R8);

			if (reading == 0) {
  800d90:	e0bff617 	ldw	r2,-40(fp)
  800d94:	1004c03a 	cmpne	r2,r2,zero
  800d98:	10000a1e 	bne	r2,zero,800dc4 <taskCalibrate+0x1a4>
				reading = 1;
  800d9c:	00800044 	movi	r2,1
  800da0:	e0bff615 	stw	r2,-40(fp)
				if (current_address == TEMP_ARRAY_BUFF_SIZE - 1) {
  800da4:	e0bff717 	ldw	r2,-36(fp)
  800da8:	108003d8 	cmpnei	r2,r2,15
  800dac:	1000021e 	bne	r2,zero,800db8 <taskCalibrate+0x198>
					current_address = 0;
  800db0:	e03ff715 	stw	zero,-36(fp)
  800db4:	00000306 	br	800dc4 <taskCalibrate+0x1a4>
				}
				else {
					current_address++;
  800db8:	e0bff717 	ldw	r2,-36(fp)
  800dbc:	10800044 	addi	r2,r2,1
  800dc0:	e0bff715 	stw	r2,-36(fp)
				}
			 }

			if(coord == 0 && index <= INPUT_SIZE) {
  800dc4:	e0bff817 	ldw	r2,-32(fp)
  800dc8:	1004c03a 	cmpne	r2,r2,zero
  800dcc:	10001f1e 	bne	r2,zero,800e4c <taskCalibrate+0x22c>
  800dd0:	e0bffb17 	ldw	r2,-20(fp)
  800dd4:	10803248 	cmpgei	r2,r2,201
  800dd8:	10001c1e 	bne	r2,zero,800e4c <taskCalibrate+0x22c>
				//alt_printf("read %c from RS232 UART\n", data_R8);
				//*(array_8[current_address].pX + sizeof(unsigned char)*index) = (unsigned char)data_R8;
				//*(array_8[current_address].pX + sizeof(unsigned char)*index) = data_R8;
				*((unsigned char*)array_8[current_address].pX + index) = data_R8;
  800ddc:	e0bff717 	ldw	r2,-36(fp)
  800de0:	00c020f4 	movhi	r3,131
  800de4:	18ca8e04 	addi	r3,r3,10808
  800de8:	10800324 	muli	r2,r2,12
  800dec:	10c5883a 	add	r2,r2,r3
  800df0:	10800017 	ldw	r2,0(r2)
  800df4:	1007883a 	mov	r3,r2
  800df8:	e0bffb17 	ldw	r2,-20(fp)
  800dfc:	1887883a 	add	r3,r3,r2
  800e00:	e0bffd83 	ldbu	r2,-10(fp)
  800e04:	18800005 	stb	r2,0(r3)
				printf("x =%d\n", (short int)*((unsigned char*)array_8[current_address].pX + index));
  800e08:	e0bff717 	ldw	r2,-36(fp)
  800e0c:	00c020f4 	movhi	r3,131
  800e10:	18ca8e04 	addi	r3,r3,10808
  800e14:	10800324 	muli	r2,r2,12
  800e18:	10c5883a 	add	r2,r2,r3
  800e1c:	10800017 	ldw	r2,0(r2)
  800e20:	1007883a 	mov	r3,r2
  800e24:	e0bffb17 	ldw	r2,-20(fp)
  800e28:	1885883a 	add	r2,r3,r2
  800e2c:	10800003 	ldbu	r2,0(r2)
  800e30:	11403fcc 	andi	r5,r2,255
  800e34:	010020b4 	movhi	r4,130
  800e38:	21306b04 	addi	r4,r4,-15956
  800e3c:	0803a180 	call	803a18 <printf>
				coord = 1;
  800e40:	00800044 	movi	r2,1
  800e44:	e0bff815 	stw	r2,-32(fp)
				else {
					current_address++;
				}
			 }

			if(coord == 0 && index <= INPUT_SIZE) {
  800e48:	00005706 	br	800fa8 <taskCalibrate+0x388>
				*((unsigned char*)array_8[current_address].pX + index) = data_R8;
				printf("x =%d\n", (short int)*((unsigned char*)array_8[current_address].pX + index));
				coord = 1;
				//index++;
			}
			else if(coord == 1){
  800e4c:	e0bff817 	ldw	r2,-32(fp)
  800e50:	10800058 	cmpnei	r2,r2,1
  800e54:	1000231e 	bne	r2,zero,800ee4 <taskCalibrate+0x2c4>
				*((unsigned char*)array_8[current_address].pY + index) = (unsigned char)data_R8;
  800e58:	e0bff717 	ldw	r2,-36(fp)
  800e5c:	00c020f4 	movhi	r3,131
  800e60:	18ca8e04 	addi	r3,r3,10808
  800e64:	10800324 	muli	r2,r2,12
  800e68:	10c5883a 	add	r2,r2,r3
  800e6c:	10800104 	addi	r2,r2,4
  800e70:	10800017 	ldw	r2,0(r2)
  800e74:	1007883a 	mov	r3,r2
  800e78:	e0bffb17 	ldw	r2,-20(fp)
  800e7c:	1887883a 	add	r3,r3,r2
  800e80:	e0bffd83 	ldbu	r2,-10(fp)
  800e84:	18800005 	stb	r2,0(r3)
				printf("y =%d\n", (short int)*((unsigned char*)array_8[current_address].pY + index));
  800e88:	e0bff717 	ldw	r2,-36(fp)
  800e8c:	00c020f4 	movhi	r3,131
  800e90:	18ca8e04 	addi	r3,r3,10808
  800e94:	10800324 	muli	r2,r2,12
  800e98:	10c5883a 	add	r2,r2,r3
  800e9c:	10800104 	addi	r2,r2,4
  800ea0:	10800017 	ldw	r2,0(r2)
  800ea4:	1007883a 	mov	r3,r2
  800ea8:	e0bffb17 	ldw	r2,-20(fp)
  800eac:	1885883a 	add	r2,r3,r2
  800eb0:	10800003 	ldbu	r2,0(r2)
  800eb4:	11403fcc 	andi	r5,r2,255
  800eb8:	010020b4 	movhi	r4,130
  800ebc:	21306d04 	addi	r4,r4,-15948
  800ec0:	0803a180 	call	803a18 <printf>

				if(index < INPUT_SIZE){
  800ec4:	e0bffb17 	ldw	r2,-20(fp)
  800ec8:	10803208 	cmpgei	r2,r2,200
  800ecc:	1000031e 	bne	r2,zero,800edc <taskCalibrate+0x2bc>
					index++;
  800ed0:	e0bffb17 	ldw	r2,-20(fp)
  800ed4:	10800044 	addi	r2,r2,1
  800ed8:	e0bffb15 	stw	r2,-20(fp)
				}
				coord = 0;
  800edc:	e03ff815 	stw	zero,-32(fp)
  800ee0:	00003106 	br	800fa8 <taskCalibrate+0x388>
			}
			else{
				printf("sync issue\n");
  800ee4:	010020b4 	movhi	r4,130
  800ee8:	21306f04 	addi	r4,r4,-15940
  800eec:	0803b300 	call	803b30 <puts>
  800ef0:	00002d06 	br	800fa8 <taskCalibrate+0x388>
			}

		}
			else {
			//detect end of character values
			if (reading) {
  800ef4:	e0bff617 	ldw	r2,-40(fp)
  800ef8:	1005003a 	cmpeq	r2,r2,zero
  800efc:	10002a1e 	bne	r2,zero,800fa8 <taskCalibrate+0x388>
				start++;
  800f00:	e0bff917 	ldw	r2,-28(fp)
  800f04:	10800044 	addi	r2,r2,1
  800f08:	e0bff915 	stw	r2,-28(fp)
				//finished character value
				if (start == 2) {
  800f0c:	e0bff917 	ldw	r2,-28(fp)
  800f10:	10800098 	cmpnei	r2,r2,2
  800f14:	1000241e 	bne	r2,zero,800fa8 <taskCalibrate+0x388>
					array_8[current_address].size = index;
  800f18:	e0bff717 	ldw	r2,-36(fp)
  800f1c:	00c020f4 	movhi	r3,131
  800f20:	18ca8e04 	addi	r3,r3,10808
  800f24:	10800324 	muli	r2,r2,12
  800f28:	10c5883a 	add	r2,r2,r3
  800f2c:	10c00204 	addi	r3,r2,8
  800f30:	e0bffb17 	ldw	r2,-20(fp)
  800f34:	18800015 	stw	r2,0(r3)
					if(current_address != TEMP_ARRAY_BUFF_SIZE - 1 ){
  800f38:	e0bff717 	ldw	r2,-36(fp)
  800f3c:	108003e0 	cmpeqi	r2,r2,15
  800f40:	10000c1e 	bne	r2,zero,800f74 <taskCalibrate+0x354>
						printf("Finished reading character %d, write character %d...\n", current_address, current_address + 1);
  800f44:	e0bff717 	ldw	r2,-36(fp)
  800f48:	11800044 	addi	r6,r2,1
  800f4c:	010020b4 	movhi	r4,130
  800f50:	21307204 	addi	r4,r4,-15928
  800f54:	e17ff717 	ldw	r5,-36(fp)
  800f58:	0803a180 	call	803a18 <printf>
						*SEVEN_SEG = current_address + 1;
  800f5c:	00c06474 	movhi	r3,401
  800f60:	18e51a04 	addi	r3,r3,-27544
  800f64:	e0bff717 	ldw	r2,-36(fp)
  800f68:	10800044 	addi	r2,r2,1
  800f6c:	18800015 	stw	r2,0(r3)
  800f70:	00000a06 	br	800f9c <taskCalibrate+0x37c>
						//printf("Finished reading character %d, write character %d...\n", current_address, current_address + 1);

					}
					else{
						printf("Finished reading character %d, Starting SDCard Write Task\n", current_address);
  800f74:	010020b4 	movhi	r4,130
  800f78:	21308004 	addi	r4,r4,-15872
  800f7c:	e17ff717 	ldw	r5,-36(fp)
  800f80:	0803a180 	call	803a18 <printf>
//						for(i=0; i < TEMP_ARRAY_BUFF_SIZE; i++){
//							printf("%ld\n", array_8[i].pX
//						}
						OSSemPost(writesem);
  800f84:	d1271317 	ldw	r4,-25524(gp)
  800f88:	08128e00 	call	8128e0 <OSSemPost>
						OSSemPend(configuresem, 0, &err);
  800f8c:	d1271417 	ldw	r4,-25520(gp)
  800f90:	000b883a 	mov	r5,zero
  800f94:	d1a71b04 	addi	r6,gp,-25492
  800f98:	08124e80 	call	8124e8 <OSSemPend>
					}

					index = 0;
  800f9c:	e03ffb15 	stw	zero,-20(fp)
					start = 0;
  800fa0:	e03ff915 	stw	zero,-28(fp)
					reading = 0;
  800fa4:	e03ff615 	stw	zero,-40(fp)
				}
			}
		}
		OSTimeDlyHMSM(0, 0, 0, 5);
  800fa8:	0009883a 	mov	r4,zero
  800fac:	000b883a 	mov	r5,zero
  800fb0:	000d883a 	mov	r6,zero
  800fb4:	01c00144 	movi	r7,5
  800fb8:	08147c80 	call	8147c8 <OSTimeDlyHMSM>
	}
  800fbc:	003f6a06 	br	800d68 <taskCalibrate+0x148>

00800fc0 <taskWriteSDCard>:
}

//todo WriteSDCARD
/* Checks for an SDCard, and writes the configuration data to the card. Pends on the calibration task.  */
void taskWriteSDCard(void* pdata) {
  800fc0:	defff604 	addi	sp,sp,-40
  800fc4:	dfc00915 	stw	ra,36(sp)
  800fc8:	df000815 	stw	fp,32(sp)
  800fcc:	df000804 	addi	fp,sp,32
  800fd0:	e13fff15 	stw	r4,-4(fp)
  800fd4:	00000006 	br	800fd8 <taskWriteSDCard+0x18>
	alt_8 temp;
	bool b;
	short int a;
	while (1) {

		OSSemPend(writesem, 0, &err);
  800fd8:	d1271317 	ldw	r4,-25524(gp)
  800fdc:	000b883a 	mov	r5,zero
  800fe0:	d1a71b04 	addi	r6,gp,-25492
  800fe4:	08124e80 	call	8124e8 <OSSemPend>
		printf("SD Card Write for configuration\n");
  800fe8:	010020b4 	movhi	r4,130
  800fec:	21308f04 	addi	r4,r4,-15812
  800ff0:	0803b300 	call	803b30 <puts>

		alt_up_sd_card_dev *sd_card_dev = alt_up_sd_card_open_dev(
				ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
  800ff4:	010020b4 	movhi	r4,130
  800ff8:	212ff004 	addi	r4,r4,-16448
  800ffc:	08191840 	call	819184 <alt_up_sd_card_open_dev>
  801000:	e0bff815 	stw	r2,-32(fp)

		if (sd_card_dev != 0) {
  801004:	e0bff817 	ldw	r2,-32(fp)
  801008:	1005003a 	cmpeq	r2,r2,zero
  80100c:	103ff21e 	bne	r2,zero,800fd8 <taskWriteSDCard+0x18>
			if (alt_up_sd_card_is_Present()) {
  801010:	08192480 	call	819248 <alt_up_sd_card_is_Present>
  801014:	1005003a 	cmpeq	r2,r2,zero
  801018:	103fef1e 	bne	r2,zero,800fd8 <taskWriteSDCard+0x18>
				if (alt_up_sd_card_is_FAT16())
  80101c:	08193100 	call	819310 <alt_up_sd_card_is_FAT16>
  801020:	1005003a 	cmpeq	r2,r2,zero
  801024:	1000041e 	bne	r2,zero,801038 <taskWriteSDCard+0x78>
					printf("Card is FAT16\n");
  801028:	010020b4 	movhi	r4,130
  80102c:	212ffb04 	addi	r4,r4,-16404
  801030:	0803b300 	call	803b30 <puts>
  801034:	00000306 	br	801044 <taskWriteSDCard+0x84>
				else
					printf("Card is not FAT16\n");
  801038:	010020b4 	movhi	r4,130
  80103c:	212fff04 	addi	r4,r4,-16388
  801040:	0803b300 	call	803b30 <puts>

				sd_fileh = alt_up_sd_card_fopen("file.txt", false);
  801044:	010020b4 	movhi	r4,130
  801048:	21300404 	addi	r4,r4,-16368
  80104c:	000b883a 	mov	r5,zero
  801050:	08198080 	call	819808 <alt_up_sd_card_fopen>
  801054:	e0bffe0d 	sth	r2,-8(fp)

				if (sd_fileh < 0)
  801058:	e0bffe0f 	ldh	r2,-8(fp)
  80105c:	1004403a 	cmpge	r2,r2,zero
  801060:	1000051e 	bne	r2,zero,801078 <taskWriteSDCard+0xb8>
					printf("Problem creating file. Error %i", sd_fileh);
  801064:	e17ffe0f 	ldh	r5,-8(fp)
  801068:	010020b4 	movhi	r4,130
  80106c:	21309704 	addi	r4,r4,-15780
  801070:	0803a180 	call	803a18 <printf>
  801074:	003fd806 	br	800fd8 <taskWriteSDCard+0x18>
				else {
					printf("SD Accessed Successfully, writing data...\n");
  801078:	010020b4 	movhi	r4,130
  80107c:	21309f04 	addi	r4,r4,-15748
  801080:	0803b300 	call	803b30 <puts>

					for(i = 0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  801084:	e03ffd15 	stw	zero,-12(fp)
  801088:	00004e06 	br	8011c4 <taskWriteSDCard+0x204>
						temp = (unsigned char) array_8[i].size;
  80108c:	e0bffd17 	ldw	r2,-12(fp)
  801090:	00c020f4 	movhi	r3,131
  801094:	18ca8e04 	addi	r3,r3,10808
  801098:	10800324 	muli	r2,r2,12
  80109c:	10c5883a 	add	r2,r2,r3
  8010a0:	10800204 	addi	r2,r2,8
  8010a4:	10800017 	ldw	r2,0(r2)
  8010a8:	e0bffb05 	stb	r2,-20(fp)
						//temp = 1;
						alt_up_sd_card_write(sd_fileh, temp);
  8010ac:	e13ffe0f 	ldh	r4,-8(fp)
  8010b0:	e17ffb07 	ldb	r5,-20(fp)
  8010b4:	081a0680 	call	81a068 <alt_up_sd_card_write>
						//printf("%d\n", array_8[i].size);
						//for x values
						for(j = 0; j < array_8[i].size; j++){
  8010b8:	e03ffc15 	stw	zero,-16(fp)
  8010bc:	00001806 	br	801120 <taskWriteSDCard+0x160>
							temp = (*((unsigned char*)array_8[i].pX + j));
  8010c0:	e0bffd17 	ldw	r2,-12(fp)
  8010c4:	00c020f4 	movhi	r3,131
  8010c8:	18ca8e04 	addi	r3,r3,10808
  8010cc:	10800324 	muli	r2,r2,12
  8010d0:	10c5883a 	add	r2,r2,r3
  8010d4:	10800017 	ldw	r2,0(r2)
  8010d8:	1007883a 	mov	r3,r2
  8010dc:	e0bffc17 	ldw	r2,-16(fp)
  8010e0:	1885883a 	add	r2,r3,r2
  8010e4:	10800003 	ldbu	r2,0(r2)
  8010e8:	e0bffb05 	stb	r2,-20(fp)
							//temp = 1;
							//printf("%c\n", (unsigned char)(*(array_8[i].pX + j*sizeof(signed char))));
							//a = temp;
							//printf("%i\n", a);
							b = alt_up_sd_card_write(sd_fileh, temp);
  8010ec:	e13ffe0f 	ldh	r4,-8(fp)
  8010f0:	e17ffb07 	ldb	r5,-20(fp)
  8010f4:	081a0680 	call	81a068 <alt_up_sd_card_write>
  8010f8:	e0bffa15 	stw	r2,-24(fp)
							if(!b){
  8010fc:	e0bffa17 	ldw	r2,-24(fp)
  801100:	1004c03a 	cmpne	r2,r2,zero
  801104:	1000031e 	bne	r2,zero,801114 <taskWriteSDCard+0x154>
								printf("error\n");
  801108:	010020b4 	movhi	r4,130
  80110c:	2130aa04 	addi	r4,r4,-15704
  801110:	0803b300 	call	803b30 <puts>
						temp = (unsigned char) array_8[i].size;
						//temp = 1;
						alt_up_sd_card_write(sd_fileh, temp);
						//printf("%d\n", array_8[i].size);
						//for x values
						for(j = 0; j < array_8[i].size; j++){
  801114:	e0bffc17 	ldw	r2,-16(fp)
  801118:	10800044 	addi	r2,r2,1
  80111c:	e0bffc15 	stw	r2,-16(fp)
  801120:	e0bffd17 	ldw	r2,-12(fp)
  801124:	00c020f4 	movhi	r3,131
  801128:	18ca8e04 	addi	r3,r3,10808
  80112c:	10800324 	muli	r2,r2,12
  801130:	10c5883a 	add	r2,r2,r3
  801134:	10800204 	addi	r2,r2,8
  801138:	10c00017 	ldw	r3,0(r2)
  80113c:	e0bffc17 	ldw	r2,-16(fp)
  801140:	10ffdf16 	blt	r2,r3,8010c0 <taskWriteSDCard+0x100>
							if(!b){
								printf("error\n");
							}
						}
						//for y values
						for(j = 0; j < array_8[i].size; j++){
  801144:	e03ffc15 	stw	zero,-16(fp)
  801148:	00001206 	br	801194 <taskWriteSDCard+0x1d4>
							temp = (*((unsigned char*)array_8[i].pY + j));
  80114c:	e0bffd17 	ldw	r2,-12(fp)
  801150:	00c020f4 	movhi	r3,131
  801154:	18ca8e04 	addi	r3,r3,10808
  801158:	10800324 	muli	r2,r2,12
  80115c:	10c5883a 	add	r2,r2,r3
  801160:	10800104 	addi	r2,r2,4
  801164:	10800017 	ldw	r2,0(r2)
  801168:	1007883a 	mov	r3,r2
  80116c:	e0bffc17 	ldw	r2,-16(fp)
  801170:	1885883a 	add	r2,r3,r2
  801174:	10800003 	ldbu	r2,0(r2)
  801178:	e0bffb05 	stb	r2,-20(fp)
							//temp = (unsigned char)(*(array_8[i].pY + j*sizeof(signed char)));
							//temp = 1;
							//printf("%c\n", temp);
							alt_up_sd_card_write(sd_fileh, temp);
  80117c:	e13ffe0f 	ldh	r4,-8(fp)
  801180:	e17ffb07 	ldb	r5,-20(fp)
  801184:	081a0680 	call	81a068 <alt_up_sd_card_write>
							if(!b){
								printf("error\n");
							}
						}
						//for y values
						for(j = 0; j < array_8[i].size; j++){
  801188:	e0bffc17 	ldw	r2,-16(fp)
  80118c:	10800044 	addi	r2,r2,1
  801190:	e0bffc15 	stw	r2,-16(fp)
  801194:	e0bffd17 	ldw	r2,-12(fp)
  801198:	00c020f4 	movhi	r3,131
  80119c:	18ca8e04 	addi	r3,r3,10808
  8011a0:	10800324 	muli	r2,r2,12
  8011a4:	10c5883a 	add	r2,r2,r3
  8011a8:	10800204 	addi	r2,r2,8
  8011ac:	10c00017 	ldw	r3,0(r2)
  8011b0:	e0bffc17 	ldw	r2,-16(fp)
  8011b4:	10ffe516 	blt	r2,r3,80114c <taskWriteSDCard+0x18c>
				if (sd_fileh < 0)
					printf("Problem creating file. Error %i", sd_fileh);
				else {
					printf("SD Accessed Successfully, writing data...\n");

					for(i = 0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  8011b8:	e0bffd17 	ldw	r2,-12(fp)
  8011bc:	10800044 	addi	r2,r2,1
  8011c0:	e0bffd15 	stw	r2,-12(fp)
  8011c4:	e0bffd17 	ldw	r2,-12(fp)
  8011c8:	10800410 	cmplti	r2,r2,16
  8011cc:	103faf1e 	bne	r2,zero,80108c <taskWriteSDCard+0xcc>
							//temp = 1;
							//printf("%c\n", temp);
							alt_up_sd_card_write(sd_fileh, temp);
						}
					}
					alt_up_sd_card_write(sd_fileh, '\0');
  8011d0:	e13ffe0f 	ldh	r4,-8(fp)
  8011d4:	000b883a 	mov	r5,zero
  8011d8:	081a0680 	call	81a068 <alt_up_sd_card_write>

					printf("Done!\n");
  8011dc:	010020b4 	movhi	r4,130
  8011e0:	21303f04 	addi	r4,r4,-16132
  8011e4:	0803b300 	call	803b30 <puts>
					printf("Closing File...");
  8011e8:	010020b4 	movhi	r4,130
  8011ec:	21304104 	addi	r4,r4,-16124
  8011f0:	0803a180 	call	803a18 <printf>
					alt_up_sd_card_fclose(sd_fileh);
  8011f4:	e13ffe0f 	ldh	r4,-8(fp)
  8011f8:	081a68c0 	call	81a68c <alt_up_sd_card_fclose>
					printf("Done!\n\n");
  8011fc:	010020b4 	movhi	r4,130
  801200:	2130ac04 	addi	r4,r4,-15696
  801204:	0803b300 	call	803b30 <puts>
					OSSemPend(writesem, 0, &err);
  801208:	d1271317 	ldw	r4,-25524(gp)
  80120c:	000b883a 	mov	r5,zero
  801210:	d1a71b04 	addi	r6,gp,-25492
  801214:	08124e80 	call	8124e8 <OSSemPend>
					//OSSemPost(readsem);
				}
			}
		}
	}
  801218:	003f6f06 	br	800fd8 <taskWriteSDCard+0x18>

0080121c <taskCharacterRead>:
}

//todo CharacterRead
/* Task to read a character from the UART */
void taskCharacterRead(void* pdata) {
  80121c:	deffe704 	addi	sp,sp,-100
  801220:	dfc01815 	stw	ra,96(sp)
  801224:	df001715 	stw	fp,92(sp)
  801228:	df001704 	addi	fp,sp,92
  80122c:	e13fff15 	stw	r4,-4(fp)
	OSSemPend(uartsem, 0, &err);
  801230:	d1271517 	ldw	r4,-25516(gp)
  801234:	000b883a 	mov	r5,zero
  801238:	d1a71b04 	addi	r6,gp,-25492
  80123c:	08124e80 	call	8124e8 <OSSemPend>
	alt_8 data_R8;
	unsigned p_error;
	alt_up_rs232_dev* rs232_dev;
	int buffer[BUFFER_SIZE];
//	char * pbuffer = buffer;
	int index = 0;
  801240:	e03ff115 	stw	zero,-60(fp)
	int i;
	int start = 0;
  801244:	e03fef15 	stw	zero,-68(fp)
	//int sram_ready = 0;
	int coord = 0;
  801248:	e03fee15 	stw	zero,-72(fp)
	int current_address = -1;
  80124c:	00bfffc4 	movi	r2,-1
  801250:	e0bfed15 	stw	r2,-76(fp)
	int reading = 0;
  801254:	e03fec15 	stw	zero,-80(fp)
//	int val;
	int k;
	short int a;
	signed long test;

	buffer[0] = -1;
  801258:	00bfffc4 	movi	r2,-1
  80125c:	e0bff515 	stw	r2,-44(fp)
	buffer[1] = -1;
  801260:	00bfffc4 	movi	r2,-1
  801264:	e0bff615 	stw	r2,-40(fp)

	//todo replace 10 with define
	for(i=0; i < 10; i++){
  801268:	e03ff015 	stw	zero,-64(fp)
  80126c:	00001e06 	br	8012e8 <taskCharacterRead+0xcc>
		array[i].pX = ((alt_u32*) SRAM_0_BASE) + (DTW_BASE + INPUT_SIZE*i);
  801270:	e17ff017 	ldw	r5,-64(fp)
  801274:	e0bff017 	ldw	r2,-64(fp)
  801278:	1080c824 	muli	r2,r2,800
  80127c:	1007883a 	mov	r3,r2
  801280:	00806374 	movhi	r2,397
  801284:	10b88004 	addi	r2,r2,-7680
  801288:	1885883a 	add	r2,r3,r2
  80128c:	1009883a 	mov	r4,r2
  801290:	00c020f4 	movhi	r3,131
  801294:	18f88204 	addi	r3,r3,-7672
  801298:	28800324 	muli	r2,r5,12
  80129c:	10c5883a 	add	r2,r2,r3
  8012a0:	11000015 	stw	r4,0(r2)
		array[i].pY = ((alt_u32*) SRAM_0_BASE) + (DTW_BASE + X_COORD_BASE + INPUT_SIZE*i);
  8012a4:	e17ff017 	ldw	r5,-64(fp)
  8012a8:	e0bff017 	ldw	r2,-64(fp)
  8012ac:	1080c824 	muli	r2,r2,800
  8012b0:	1007883a 	mov	r3,r2
  8012b4:	00806374 	movhi	r2,397
  8012b8:	10805004 	addi	r2,r2,320
  8012bc:	1885883a 	add	r2,r3,r2
  8012c0:	1009883a 	mov	r4,r2
  8012c4:	00c020f4 	movhi	r3,131
  8012c8:	18f88204 	addi	r3,r3,-7672
  8012cc:	28800324 	muli	r2,r5,12
  8012d0:	10c5883a 	add	r2,r2,r3
  8012d4:	10800104 	addi	r2,r2,4
  8012d8:	11000015 	stw	r4,0(r2)

	buffer[0] = -1;
	buffer[1] = -1;

	//todo replace 10 with define
	for(i=0; i < 10; i++){
  8012dc:	e0bff017 	ldw	r2,-64(fp)
  8012e0:	10800044 	addi	r2,r2,1
  8012e4:	e0bff015 	stw	r2,-64(fp)
  8012e8:	e0bff017 	ldw	r2,-64(fp)
  8012ec:	10800290 	cmplti	r2,r2,10
  8012f0:	103fdf1e 	bne	r2,zero,801270 <taskCharacterRead+0x54>
//
//		printf("address 0x%08x\n", ptr1 );
//		ptr1 += sizeof(long);
//	}
	// open the RS232 UART port
	rs232_dev = alt_up_rs232_open_dev("/dev/rs232_0");
  8012f4:	010020b4 	movhi	r4,130
  8012f8:	21304504 	addi	r4,r4,-16108
  8012fc:	08163e80 	call	8163e8 <alt_up_rs232_open_dev>
  801300:	e0bff215 	stw	r2,-56(fp)
	if (rs232_dev == NULL)
  801304:	e0bff217 	ldw	r2,-56(fp)
  801308:	1004c03a 	cmpne	r2,r2,zero
  80130c:	1000041e 	bne	r2,zero,801320 <taskCharacterRead+0x104>
		printf("Error: could not open RS232 UART\n");
  801310:	010020b4 	movhi	r4,130
  801314:	21304904 	addi	r4,r4,-16092
  801318:	0803b300 	call	803b30 <puts>
  80131c:	00000306 	br	80132c <taskCharacterRead+0x110>
	else
		printf("Opened RS232 UART device\n");
  801320:	010020b4 	movhi	r4,130
  801324:	21305204 	addi	r4,r4,-16056
  801328:	0803b300 	call	803b30 <puts>

	alt_up_rs232_enable_read_interrupt(rs232_dev);
  80132c:	e13ff217 	ldw	r4,-56(fp)
  801330:	08160900 	call	816090 <alt_up_rs232_enable_read_interrupt>

	printf("UART Ready for input\n");
  801334:	010020b4 	movhi	r4,130
  801338:	2130ae04 	addi	r4,r4,-15688
  80133c:	0803b300 	call	803b30 <puts>
	while (1) {

		//character values read
		if((buffer[0] != -1)){
  801340:	e0bff517 	ldw	r2,-44(fp)
  801344:	10bfffe0 	cmpeqi	r2,r2,-1
  801348:	10005b1e 	bne	r2,zero,8014b8 <taskCharacterRead+0x29c>

			//resource available
			//printf("\n*********************FINISHED READING A CHARACTER******************\n");
			if (OSSemAccept(dtw_sem) == 1) {
  80134c:	d1271817 	ldw	r4,-25504(gp)
  801350:	08120740 	call	812074 <OSSemAccept>
  801354:	10bfffcc 	andi	r2,r2,65535
  801358:	10800058 	cmpnei	r2,r2,1
  80135c:	1000561e 	bne	r2,zero,8014b8 <taskCharacterRead+0x29c>

				pCharacter = &array[buffer[0]];
  801360:	e0bff517 	ldw	r2,-44(fp)
  801364:	10800324 	muli	r2,r2,12
  801368:	1007883a 	mov	r3,r2
  80136c:	008020f4 	movhi	r2,131
  801370:	10b88204 	addi	r2,r2,-7672
  801374:	1885883a 	add	r2,r3,r2
  801378:	d0a70d15 	stw	r2,-25548(gp)
				printf("X VALUES for current char -----------------------------------------------\n");
  80137c:	010020b4 	movhi	r4,130
  801380:	2130b404 	addi	r4,r4,-15664
  801384:	0803b300 	call	803b30 <puts>
				for(k=0; k<pCharacter->size ;k++){
  801388:	e03feb15 	stw	zero,-84(fp)
  80138c:	00001006 	br	8013d0 <taskCharacterRead+0x1b4>
					test = *(((long*)pCharacter->pX)+k);
  801390:	d0a70d17 	ldw	r2,-25548(gp)
  801394:	10800017 	ldw	r2,0(r2)
  801398:	1007883a 	mov	r3,r2
  80139c:	e0bfeb17 	ldw	r2,-84(fp)
  8013a0:	1085883a 	add	r2,r2,r2
  8013a4:	1085883a 	add	r2,r2,r2
  8013a8:	1885883a 	add	r2,r3,r2
  8013ac:	10800017 	ldw	r2,0(r2)
  8013b0:	e0bfe915 	stw	r2,-92(fp)
					//printf("%ld\n",*(((long*)pCharacter->pX)+k));
					printf("%ld\n",test);
  8013b4:	010020b4 	movhi	r4,130
  8013b8:	21302c04 	addi	r4,r4,-16208
  8013bc:	e17fe917 	ldw	r5,-92(fp)
  8013c0:	0803a180 	call	803a18 <printf>
			//printf("\n*********************FINISHED READING A CHARACTER******************\n");
			if (OSSemAccept(dtw_sem) == 1) {

				pCharacter = &array[buffer[0]];
				printf("X VALUES for current char -----------------------------------------------\n");
				for(k=0; k<pCharacter->size ;k++){
  8013c4:	e0bfeb17 	ldw	r2,-84(fp)
  8013c8:	10800044 	addi	r2,r2,1
  8013cc:	e0bfeb15 	stw	r2,-84(fp)
  8013d0:	d0a70d17 	ldw	r2,-25548(gp)
  8013d4:	10c00217 	ldw	r3,8(r2)
  8013d8:	e0bfeb17 	ldw	r2,-84(fp)
  8013dc:	10ffec16 	blt	r2,r3,801390 <taskCharacterRead+0x174>
					test = *(((long*)pCharacter->pX)+k);
					//printf("%ld\n",*(((long*)pCharacter->pX)+k));
					printf("%ld\n",test);
				}
				printf("Y VALUES for current char -----------------------------------------------\n");
  8013e0:	010020b4 	movhi	r4,130
  8013e4:	2130c704 	addi	r4,r4,-15588
  8013e8:	0803b300 	call	803b30 <puts>
				for(k=0; k < pCharacter->size ;k++){
  8013ec:	e03feb15 	stw	zero,-84(fp)
  8013f0:	00001006 	br	801434 <taskCharacterRead+0x218>
					//printf("%ld\n",*(((long*)pCharacter->pY)+k));
					test = *(((long*)pCharacter->pY)+k);
  8013f4:	d0a70d17 	ldw	r2,-25548(gp)
  8013f8:	10800117 	ldw	r2,4(r2)
  8013fc:	1007883a 	mov	r3,r2
  801400:	e0bfeb17 	ldw	r2,-84(fp)
  801404:	1085883a 	add	r2,r2,r2
  801408:	1085883a 	add	r2,r2,r2
  80140c:	1885883a 	add	r2,r3,r2
  801410:	10800017 	ldw	r2,0(r2)
  801414:	e0bfe915 	stw	r2,-92(fp)
					printf("%ld\n",test);
  801418:	010020b4 	movhi	r4,130
  80141c:	21302c04 	addi	r4,r4,-16208
  801420:	e17fe917 	ldw	r5,-92(fp)
  801424:	0803a180 	call	803a18 <printf>
					test = *(((long*)pCharacter->pX)+k);
					//printf("%ld\n",*(((long*)pCharacter->pX)+k));
					printf("%ld\n",test);
				}
				printf("Y VALUES for current char -----------------------------------------------\n");
				for(k=0; k < pCharacter->size ;k++){
  801428:	e0bfeb17 	ldw	r2,-84(fp)
  80142c:	10800044 	addi	r2,r2,1
  801430:	e0bfeb15 	stw	r2,-84(fp)
  801434:	d0a70d17 	ldw	r2,-25548(gp)
  801438:	10c00217 	ldw	r3,8(r2)
  80143c:	e0bfeb17 	ldw	r2,-84(fp)
  801440:	10ffec16 	blt	r2,r3,8013f4 <taskCharacterRead+0x1d8>
//				for(k=0; k < pCharacter->size ;k++){
//					printf("%ld\n",*(((long*)pCharacter->pY)+k*sizeof(long)));
//
//				}
				//printf("size %i\n", pCharacter->size);
				printf("\n*********************POSTED TO DTW******************\n");
  801444:	010020b4 	movhi	r4,130
  801448:	2130da04 	addi	r4,r4,-15512
  80144c:	0803b300 	call	803b30 <puts>

				err = OSQPost(message, (void*) &buffer);
  801450:	d1271617 	ldw	r4,-25512(gp)
  801454:	e17ff504 	addi	r5,fp,-44
  801458:	081190c0 	call	81190c <OSQPost>
  80145c:	d0a71b05 	stb	r2,-25492(gp)

				//shift to next in queue
				if(buffer[1] != -1){
  801460:	e0bff617 	ldw	r2,-40(fp)
  801464:	10bfffe0 	cmpeqi	r2,r2,-1
  801468:	1000111e 	bne	r2,zero,8014b0 <taskCharacterRead+0x294>
					buffer[0] = buffer[1];
  80146c:	e0bff617 	ldw	r2,-40(fp)
  801470:	e0bff515 	stw	r2,-44(fp)
					//
					if(buffer[1] != current_address){
  801474:	e0fff617 	ldw	r3,-40(fp)
  801478:	e0bfed17 	ldw	r2,-76(fp)
  80147c:	18800926 	beq	r3,r2,8014a4 <taskCharacterRead+0x288>
						if(buffer[1]==CHAR_ARRAY_BUFF_SIZE - 1){
  801480:	e0bff617 	ldw	r2,-40(fp)
  801484:	108000d8 	cmpnei	r2,r2,3
  801488:	1000021e 	bne	r2,zero,801494 <taskCharacterRead+0x278>
							buffer[1] = 0;
  80148c:	e03ff615 	stw	zero,-40(fp)
  801490:	00000906 	br	8014b8 <taskCharacterRead+0x29c>
						}
						else{
							buffer[1]++;
  801494:	e0bff617 	ldw	r2,-40(fp)
  801498:	10800044 	addi	r2,r2,1
  80149c:	e0bff615 	stw	r2,-40(fp)
  8014a0:	00000506 	br	8014b8 <taskCharacterRead+0x29c>
						}
					}
					else{
						buffer[1] = -1;
  8014a4:	00bfffc4 	movi	r2,-1
  8014a8:	e0bff615 	stw	r2,-40(fp)
  8014ac:	00000206 	br	8014b8 <taskCharacterRead+0x29c>
					}
				}
				//nothing left in queue
				else{
					buffer[0] = -1;
  8014b0:	00bfffc4 	movi	r2,-1
  8014b4:	e0bff515 	stw	r2,-44(fp)
				//if(buffer[])
			}
		}

		// Read from UART
		read_FIFO_used = alt_up_rs232_get_used_space_in_read_FIFO(rs232_dev);
  8014b8:	e13ff217 	ldw	r4,-56(fp)
  8014bc:	081613c0 	call	81613c <alt_up_rs232_get_used_space_in_read_FIFO>
  8014c0:	e0bff30d 	sth	r2,-52(fp)
		if (read_FIFO_used > READ_FIFO_EMPTY) {
  8014c4:	e0bff30b 	ldhu	r2,-52(fp)
  8014c8:	1005003a 	cmpeq	r2,r2,zero
  8014cc:	10004e1e 	bne	r2,zero,801608 <taskCharacterRead+0x3ec>
			//alt_printf("char stored in read_FIFO: %x\n", read_FIFO_used);
			alt_up_rs232_read_data(rs232_dev, &data_R8, &p_error);
  8014d0:	e17ff384 	addi	r5,fp,-50
  8014d4:	e1bff404 	addi	r6,fp,-48
  8014d8:	e13ff217 	ldw	r4,-56(fp)
  8014dc:	08162500 	call	816250 <alt_up_rs232_read_data>
			//alt_printf("read %c from RS232 UART\n", data_R8);

			if (reading == 0) {
  8014e0:	e0bfec17 	ldw	r2,-80(fp)
  8014e4:	1004c03a 	cmpne	r2,r2,zero
  8014e8:	10000a1e 	bne	r2,zero,801514 <taskCharacterRead+0x2f8>
				reading = 1;
  8014ec:	00800044 	movi	r2,1
  8014f0:	e0bfec15 	stw	r2,-80(fp)
				if (current_address == CHAR_ARRAY_BUFF_SIZE - 1) {
  8014f4:	e0bfed17 	ldw	r2,-76(fp)
  8014f8:	108000d8 	cmpnei	r2,r2,3
  8014fc:	1000021e 	bne	r2,zero,801508 <taskCharacterRead+0x2ec>
					current_address = 0;
  801500:	e03fed15 	stw	zero,-76(fp)
  801504:	00000306 	br	801514 <taskCharacterRead+0x2f8>
				}
				else {
					current_address++;
  801508:	e0bfed17 	ldw	r2,-76(fp)
  80150c:	10800044 	addi	r2,r2,1
  801510:	e0bfed15 	stw	r2,-76(fp)
				}
			 }

			if(coord == 0 && index <= INPUT_SIZE) {
  801514:	e0bfee17 	ldw	r2,-72(fp)
  801518:	1004c03a 	cmpne	r2,r2,zero
  80151c:	1000181e 	bne	r2,zero,801580 <taskCharacterRead+0x364>
  801520:	e0bff117 	ldw	r2,-60(fp)
  801524:	10803248 	cmpgei	r2,r2,201
  801528:	1000151e 	bne	r2,zero,801580 <taskCharacterRead+0x364>
				a = (short int)(data_R8);
  80152c:	e0bff383 	ldbu	r2,-50(fp)
  801530:	10803fcc 	andi	r2,r2,255
  801534:	1080201c 	xori	r2,r2,128
  801538:	10bfe004 	addi	r2,r2,-128
  80153c:	e0bfea0d 	sth	r2,-88(fp)


				//*(array[current_address].pX + sizeof(long)*index) = (long)(a);
				//*(array[current_address].pX + sizeof(long)*index) = (long)(a*10);
				*(array[current_address].pX + index) = (signed long)(a*10);
  801540:	e0bfed17 	ldw	r2,-76(fp)
  801544:	00c020f4 	movhi	r3,131
  801548:	18f88204 	addi	r3,r3,-7672
  80154c:	10800324 	muli	r2,r2,12
  801550:	10c5883a 	add	r2,r2,r3
  801554:	10c00017 	ldw	r3,0(r2)
  801558:	e0bff117 	ldw	r2,-60(fp)
  80155c:	1085883a 	add	r2,r2,r2
  801560:	1085883a 	add	r2,r2,r2
  801564:	1887883a 	add	r3,r3,r2
  801568:	e0bfea0f 	ldh	r2,-88(fp)
  80156c:	108002a4 	muli	r2,r2,10
  801570:	18800015 	stw	r2,0(r3)
				//IOWR_16DIRECT(SRAM_0_BASE, DTW_BASE + index, (long)(data_R8*10));
				//printf("x address =  0x%08x  val = %ld\n", (array[current_address].pX + index*sizeof(long)), *((long*)array[current_address].pX + index) );
				//*(array[current_address].pX + sizeof(long)*index) = (long)(((signed char)data_R8)*10);
				//alt_printf("char stored in read_FIFO: %x\n", read_FIFO_used);
				//printf("read x = %ld from RS232 UART\n", (long)a);
				coord = 1;
  801574:	00800044 	movi	r2,1
  801578:	e0bfee15 	stw	r2,-72(fp)
				else {
					current_address++;
				}
			 }

			if(coord == 0 && index <= INPUT_SIZE) {
  80157c:	00005806 	br	8016e0 <taskCharacterRead+0x4c4>
				//printf("read x = %ld from RS232 UART\n", (long)a);
				coord = 1;
				//index++;
			}
			else
			if(coord == 1){
  801580:	e0bfee17 	ldw	r2,-72(fp)
  801584:	10800058 	cmpnei	r2,r2,1
  801588:	10001b1e 	bne	r2,zero,8015f8 <taskCharacterRead+0x3dc>
				a = (short int)(data_R8);
  80158c:	e0bff383 	ldbu	r2,-50(fp)
  801590:	10803fcc 	andi	r2,r2,255
  801594:	1080201c 	xori	r2,r2,128
  801598:	10bfe004 	addi	r2,r2,-128
  80159c:	e0bfea0d 	sth	r2,-88(fp)
				*(array[current_address].pY + index) = (signed long)(a*10);
  8015a0:	e0bfed17 	ldw	r2,-76(fp)
  8015a4:	00c020f4 	movhi	r3,131
  8015a8:	18f88204 	addi	r3,r3,-7672
  8015ac:	10800324 	muli	r2,r2,12
  8015b0:	10c5883a 	add	r2,r2,r3
  8015b4:	10800104 	addi	r2,r2,4
  8015b8:	10c00017 	ldw	r3,0(r2)
  8015bc:	e0bff117 	ldw	r2,-60(fp)
  8015c0:	1085883a 	add	r2,r2,r2
  8015c4:	1085883a 	add	r2,r2,r2
  8015c8:	1887883a 	add	r3,r3,r2
  8015cc:	e0bfea0f 	ldh	r2,-88(fp)
  8015d0:	108002a4 	muli	r2,r2,10
  8015d4:	18800015 	stw	r2,0(r3)
				//printf("y address =  0x%08x  val = %ld\n", array[current_address].pY + index*sizeof(long), *((long*)array[current_address].pY + index) );
				//*(array[current_address].pY +  sizeof(long)*index) = (long)(((signed char)data_R8)*10);
				//alt_printf("char stored in read_FIFO: %x\n", read_FIFO_used);
				//printf("read y = %ld from RS232 UART\n", (long)a);
				//index++;
				if(index < INPUT_SIZE){
  8015d8:	e0bff117 	ldw	r2,-60(fp)
  8015dc:	10803208 	cmpgei	r2,r2,200
  8015e0:	1000031e 	bne	r2,zero,8015f0 <taskCharacterRead+0x3d4>
					index++;
  8015e4:	e0bff117 	ldw	r2,-60(fp)
  8015e8:	10800044 	addi	r2,r2,1
  8015ec:	e0bff115 	stw	r2,-60(fp)
				}
				coord = 0;
  8015f0:	e03fee15 	stw	zero,-72(fp)
  8015f4:	00003a06 	br	8016e0 <taskCharacterRead+0x4c4>
			}
			else{
				printf("sync issue\n");
  8015f8:	010020b4 	movhi	r4,130
  8015fc:	21306f04 	addi	r4,r4,-15940
  801600:	0803b300 	call	803b30 <puts>
  801604:	00003606 	br	8016e0 <taskCharacterRead+0x4c4>
			}

		}
		else {
			//detect end of character values
			if (reading) {
  801608:	e0bfec17 	ldw	r2,-80(fp)
  80160c:	1005003a 	cmpeq	r2,r2,zero
  801610:	1000331e 	bne	r2,zero,8016e0 <taskCharacterRead+0x4c4>
				start++;
  801614:	e0bfef17 	ldw	r2,-68(fp)
  801618:	10800044 	addi	r2,r2,1
  80161c:	e0bfef15 	stw	r2,-68(fp)
				//finished character value
				if (start == 2) {
  801620:	e0bfef17 	ldw	r2,-68(fp)
  801624:	10800098 	cmpnei	r2,r2,2
  801628:	10002d1e 	bne	r2,zero,8016e0 <taskCharacterRead+0x4c4>

					printf("\n*********************FINISHED READING A CHARACTER******************\n");
  80162c:	010020b4 	movhi	r4,130
  801630:	2130e804 	addi	r4,r4,-15456
  801634:	0803b300 	call	803b30 <puts>
					if(index <= INPUT_SIZE){
  801638:	e0bff117 	ldw	r2,-60(fp)
  80163c:	10803248 	cmpgei	r2,r2,201
  801640:	1000091e 	bne	r2,zero,801668 <taskCharacterRead+0x44c>
						array[current_address].size = index;
  801644:	e0bfed17 	ldw	r2,-76(fp)
  801648:	00c020f4 	movhi	r3,131
  80164c:	18f88204 	addi	r3,r3,-7672
  801650:	10800324 	muli	r2,r2,12
  801654:	10c5883a 	add	r2,r2,r3
  801658:	10c00204 	addi	r3,r2,8
  80165c:	e0bff117 	ldw	r2,-60(fp)
  801660:	18800015 	stw	r2,0(r3)
  801664:	00000806 	br	801688 <taskCharacterRead+0x46c>
					}
					else{
						array[current_address].size = INPUT_SIZE;
  801668:	e0bfed17 	ldw	r2,-76(fp)
  80166c:	00c020f4 	movhi	r3,131
  801670:	18f88204 	addi	r3,r3,-7672
  801674:	10800324 	muli	r2,r2,12
  801678:	10c5883a 	add	r2,r2,r3
  80167c:	10c00204 	addi	r3,r2,8
  801680:	00803204 	movi	r2,200
  801684:	18800015 	stw	r2,0(r3)
					}
					//Check to see if there is a queue for dtw
					//no queue
					if(buffer[0] == -1 && buffer[1] == -1){
  801688:	e0bff517 	ldw	r2,-44(fp)
  80168c:	10bfffd8 	cmpnei	r2,r2,-1
  801690:	1000061e 	bne	r2,zero,8016ac <taskCharacterRead+0x490>
  801694:	e0bff617 	ldw	r2,-40(fp)
  801698:	10bfffd8 	cmpnei	r2,r2,-1
  80169c:	1000031e 	bne	r2,zero,8016ac <taskCharacterRead+0x490>
						buffer[0] = current_address;
  8016a0:	e0bfed17 	ldw	r2,-76(fp)
  8016a4:	e0bff515 	stw	r2,-44(fp)
					else{
						array[current_address].size = INPUT_SIZE;
					}
					//Check to see if there is a queue for dtw
					//no queue
					if(buffer[0] == -1 && buffer[1] == -1){
  8016a8:	00000906 	br	8016d0 <taskCharacterRead+0x4b4>
						buffer[0] = current_address;
					}
					//queue
					else if (buffer[0] != -1 && buffer[1] == -1){
  8016ac:	e0bff517 	ldw	r2,-44(fp)
  8016b0:	10bfffe0 	cmpeqi	r2,r2,-1
  8016b4:	1000061e 	bne	r2,zero,8016d0 <taskCharacterRead+0x4b4>
  8016b8:	e0bff617 	ldw	r2,-40(fp)
  8016bc:	10bfffd8 	cmpnei	r2,r2,-1
  8016c0:	1000031e 	bne	r2,zero,8016d0 <taskCharacterRead+0x4b4>
						buffer[1] = buffer[0] + 1;
  8016c4:	e0bff517 	ldw	r2,-44(fp)
  8016c8:	10800044 	addi	r2,r2,1
  8016cc:	e0bff615 	stw	r2,-40(fp)
					}

					index = 0;
  8016d0:	e03ff115 	stw	zero,-60(fp)
					start = 0;
  8016d4:	e03fef15 	stw	zero,-68(fp)
					reading = 0;
  8016d8:	e03fec15 	stw	zero,-80(fp)
					coord = 0;
  8016dc:	e03fee15 	stw	zero,-72(fp)
				}
			}
		}
		OSTimeDlyHMSM(0, 0, 0, 5);
  8016e0:	0009883a 	mov	r4,zero
  8016e4:	000b883a 	mov	r5,zero
  8016e8:	000d883a 	mov	r6,zero
  8016ec:	01c00144 	movi	r7,5
  8016f0:	08147c80 	call	8147c8 <OSTimeDlyHMSM>
	}
  8016f4:	003f1206 	br	801340 <taskCharacterRead+0x124>

008016f8 <taskTemplateMatch>:
//int er

//todo Template Match
/* Task matches templates. Synchronized with the character input task. Spawns two threads which run dtw on the x and y axis. Computes final score.
 * Algorithm ignores tasks based on groups with similar profiles if the score is too high.*/
void taskTemplateMatch(void* pdata) {
  8016f8:	deffee04 	addi	sp,sp,-72
  8016fc:	dfc01115 	stw	ra,68(sp)
  801700:	df001015 	stw	fp,64(sp)
  801704:	dcc00f15 	stw	r19,60(sp)
  801708:	dc800e15 	stw	r18,56(sp)
  80170c:	dc400d15 	stw	r17,52(sp)
  801710:	dc000c15 	stw	r16,48(sp)
  801714:	df000c04 	addi	fp,sp,48
  801718:	e13fff15 	stw	r4,-4(fp)
	char* msg;
	long long best_match = INFIN;
  80171c:	00a00034 	movhi	r2,32768
  801720:	10bfffc4 	addi	r2,r2,-1
  801724:	e0bffc15 	stw	r2,-16(fp)
  801728:	e03ffd15 	stw	zero,-12(fp)
	long long sec_best_match = INFIN;
  80172c:	00a00034 	movhi	r2,32768
  801730:	10bfffc4 	addi	r2,r2,-1
  801734:	e0bffa15 	stw	r2,-24(fp)
  801738:	e03ffb15 	stw	zero,-20(fp)
	int match_group;
	int match = 0;
  80173c:	e03ff815 	stw	zero,-32(fp)
//	int x;
//	int y;
	int i;
	int j;
	long long score =0;
  801740:	e03ff415 	stw	zero,-48(fp)
  801744:	e03ff515 	stw	zero,-44(fp)
//	int bufferx[BUFFER_SIZE];
//	int buffery[BUFFER_SIZE];


	while (1) {
		msg = OSQPend(message, 0, &err);
  801748:	d1271617 	ldw	r4,-25512(gp)
  80174c:	000b883a 	mov	r5,zero
  801750:	d1a71b04 	addi	r6,gp,-25492
  801754:	08114700 	call	811470 <OSQPend>
  801758:	e0bffe15 	stw	r2,-8(fp)
//					match = template_number;
//				}
//			}
//		}

		for(i=0; i < 4; i++){
  80175c:	e03ff715 	stw	zero,-36(fp)
  801760:	00008306 	br	801970 <taskTemplateMatch+0x278>
			for(j=0; j < 4;j++){
  801764:	e03ff615 	stw	zero,-40(fp)
  801768:	00006906 	br	801910 <taskTemplateMatch+0x218>
				template_number = templates[i].t[j];
  80176c:	e0bff717 	ldw	r2,-36(fp)
  801770:	00c020f4 	movhi	r3,131
  801774:	18f84a04 	addi	r3,r3,-7896
  801778:	100490fa 	slli	r2,r2,3
  80177c:	10c5883a 	add	r2,r2,r3
  801780:	10c00017 	ldw	r3,0(r2)
  801784:	e0bff617 	ldw	r2,-40(fp)
  801788:	1085883a 	add	r2,r2,r2
  80178c:	1085883a 	add	r2,r2,r2
  801790:	1885883a 	add	r2,r3,r2
  801794:	10800017 	ldw	r2,0(r2)
  801798:	d0a70c15 	stw	r2,-25552(gp)
				OSSemPost(dtw_semx);
  80179c:	d1271917 	ldw	r4,-25500(gp)
  8017a0:	08128e00 	call	8128e0 <OSSemPost>
				OSSemPost(dtw_semy);
  8017a4:	d1270e17 	ldw	r4,-25544(gp)
  8017a8:	08128e00 	call	8128e0 <OSSemPost>
				//post dtwy
				OSSemPend(semx, 0, &err);
  8017ac:	d1271c17 	ldw	r4,-25488(gp)
  8017b0:	000b883a 	mov	r5,zero
  8017b4:	d1a71b04 	addi	r6,gp,-25492
  8017b8:	08124e80 	call	8124e8 <OSSemPend>
				OSSemPend(semy, 0, &err);
  8017bc:	d1271017 	ldw	r4,-25536(gp)
  8017c0:	000b883a 	mov	r5,zero
  8017c4:	d1a71b04 	addi	r6,gp,-25492
  8017c8:	08124e80 	call	8124e8 <OSSemPend>
//					printf("dtw failed at %d x\n", template_number );
//				}
//				if(dtwy==0){
//					printf("dtw failed at %d y\n", template_number );
//				}
				score += (sqrt(((unsigned long)(dtwx * dtwx) + (unsigned long)(dtwy * dtwy)))) + (2*dtwx) + (2*dtwy);
  8017cc:	e13ff417 	ldw	r4,-48(fp)
  8017d0:	e17ff517 	ldw	r5,-44(fp)
  8017d4:	08023b40 	call	8023b4 <__floatdidf>
  8017d8:	1025883a 	mov	r18,r2
  8017dc:	1827883a 	mov	r19,r3
  8017e0:	d0e71717 	ldw	r3,-25508(gp)
  8017e4:	d0a71717 	ldw	r2,-25508(gp)
  8017e8:	1885383a 	mul	r2,r3,r2
  8017ec:	1009883a 	mov	r4,r2
  8017f0:	d0e70f17 	ldw	r3,-25540(gp)
  8017f4:	d0a70f17 	ldw	r2,-25540(gp)
  8017f8:	1885383a 	mul	r2,r3,r2
  8017fc:	2089883a 	add	r4,r4,r2
  801800:	08031b40 	call	8031b4 <__floatunsidf>
  801804:	100b883a 	mov	r5,r2
  801808:	180d883a 	mov	r6,r3
  80180c:	2809883a 	mov	r4,r5
  801810:	300b883a 	mov	r5,r6
  801814:	0801db40 	call	801db4 <sqrt>
  801818:	1021883a 	mov	r16,r2
  80181c:	1823883a 	mov	r17,r3
  801820:	d0a71717 	ldw	r2,-25508(gp)
  801824:	1085883a 	add	r2,r2,r2
  801828:	1009883a 	mov	r4,r2
  80182c:	0802fe40 	call	802fe4 <__floatsidf>
  801830:	100f883a 	mov	r7,r2
  801834:	1811883a 	mov	r8,r3
  801838:	8009883a 	mov	r4,r16
  80183c:	880b883a 	mov	r5,r17
  801840:	380d883a 	mov	r6,r7
  801844:	400f883a 	mov	r7,r8
  801848:	08028cc0 	call	8028cc <__adddf3>
  80184c:	1009883a 	mov	r4,r2
  801850:	180b883a 	mov	r5,r3
  801854:	2021883a 	mov	r16,r4
  801858:	2823883a 	mov	r17,r5
  80185c:	d0a70f17 	ldw	r2,-25540(gp)
  801860:	1085883a 	add	r2,r2,r2
  801864:	1009883a 	mov	r4,r2
  801868:	0802fe40 	call	802fe4 <__floatsidf>
  80186c:	100f883a 	mov	r7,r2
  801870:	1811883a 	mov	r8,r3
  801874:	8009883a 	mov	r4,r16
  801878:	880b883a 	mov	r5,r17
  80187c:	380d883a 	mov	r6,r7
  801880:	400f883a 	mov	r7,r8
  801884:	08028cc0 	call	8028cc <__adddf3>
  801888:	1009883a 	mov	r4,r2
  80188c:	180b883a 	mov	r5,r3
  801890:	2005883a 	mov	r2,r4
  801894:	2807883a 	mov	r3,r5
  801898:	9009883a 	mov	r4,r18
  80189c:	980b883a 	mov	r5,r19
  8018a0:	100d883a 	mov	r6,r2
  8018a4:	180f883a 	mov	r7,r3
  8018a8:	08028cc0 	call	8028cc <__adddf3>
  8018ac:	1009883a 	mov	r4,r2
  8018b0:	180b883a 	mov	r5,r3
  8018b4:	2005883a 	mov	r2,r4
  8018b8:	2807883a 	mov	r3,r5
  8018bc:	1009883a 	mov	r4,r2
  8018c0:	180b883a 	mov	r5,r3
  8018c4:	080227c0 	call	80227c <__fixdfdi>
  8018c8:	1009883a 	mov	r4,r2
  8018cc:	180b883a 	mov	r5,r3
  8018d0:	e13ff415 	stw	r4,-48(fp)
  8018d4:	e17ff515 	stw	r5,-44(fp)

//				if(score == 0){
//					printf("dtwx=%ld    dtwy=%ld\n", dtwx, dtwy);
//				}
				printf("dtwx = %ld   dtwy = %ld\n", dtwx, dtwy);
  8018d8:	d1671717 	ldw	r5,-25508(gp)
  8018dc:	d1a70f17 	ldw	r6,-25540(gp)
  8018e0:	010020b4 	movhi	r4,130
  8018e4:	2130fa04 	addi	r4,r4,-15384
  8018e8:	0803a180 	call	803a18 <printf>
				printf("template %d score= %ld\n\n",template_number, score);
  8018ec:	d1670c17 	ldw	r5,-25552(gp)
  8018f0:	010020b4 	movhi	r4,130
  8018f4:	21310104 	addi	r4,r4,-15356
  8018f8:	e1bff417 	ldw	r6,-48(fp)
  8018fc:	e1fff517 	ldw	r7,-44(fp)
  801900:	0803a180 	call	803a18 <printf>
//				}
//			}
//		}

		for(i=0; i < 4; i++){
			for(j=0; j < 4;j++){
  801904:	e0bff617 	ldw	r2,-40(fp)
  801908:	10800044 	addi	r2,r2,1
  80190c:	e0bff615 	stw	r2,-40(fp)
  801910:	e0bff617 	ldw	r2,-40(fp)
  801914:	10800110 	cmplti	r2,r2,4
  801918:	103f941e 	bne	r2,zero,80176c <taskTemplateMatch+0x74>
//				}
				printf("dtwx = %ld   dtwy = %ld\n", dtwx, dtwy);
				printf("template %d score= %ld\n\n",template_number, score);

			}
			if(best_match > score){
  80191c:	e0fffd17 	ldw	r3,-12(fp)
  801920:	e0bff517 	ldw	r2,-44(fp)
  801924:	10c00716 	blt	r2,r3,801944 <taskTemplateMatch+0x24c>
  801928:	e0fffd17 	ldw	r3,-12(fp)
  80192c:	e0bff517 	ldw	r2,-44(fp)
  801930:	18800a1e 	bne	r3,r2,80195c <taskTemplateMatch+0x264>
  801934:	e0fffc17 	ldw	r3,-16(fp)
  801938:	e0bff417 	ldw	r2,-48(fp)
  80193c:	10c00136 	bltu	r2,r3,801944 <taskTemplateMatch+0x24c>
  801940:	00000606 	br	80195c <taskTemplateMatch+0x264>
						//sec_best_match = match;
						best_match = score;
  801944:	e0bff417 	ldw	r2,-48(fp)
  801948:	e0bffc15 	stw	r2,-16(fp)
  80194c:	e0bff517 	ldw	r2,-44(fp)
  801950:	e0bffd15 	stw	r2,-12(fp)
						match = i;
  801954:	e0bff717 	ldw	r2,-36(fp)
  801958:	e0bff815 	stw	r2,-32(fp)

					}
			score =0;
  80195c:	e03ff415 	stw	zero,-48(fp)
  801960:	e03ff515 	stw	zero,-44(fp)
//					match = template_number;
//				}
//			}
//		}

		for(i=0; i < 4; i++){
  801964:	e0bff717 	ldw	r2,-36(fp)
  801968:	10800044 	addi	r2,r2,1
  80196c:	e0bff715 	stw	r2,-36(fp)
  801970:	e0bff717 	ldw	r2,-36(fp)
  801974:	10800110 	cmplti	r2,r2,4
  801978:	103f7a1e 	bne	r2,zero,801764 <taskTemplateMatch+0x6c>

					}
			score =0;
		}

		*SEVEN_SEG = match;
  80197c:	00c06474 	movhi	r3,401
  801980:	18e51a04 	addi	r3,r3,-27544
  801984:	e0bff817 	ldw	r2,-32(fp)
  801988:	18800015 	stw	r2,0(r3)
		printf("best match is \'%d\' with score a of %ld\n", match, best_match);
  80198c:	010020b4 	movhi	r4,130
  801990:	21310804 	addi	r4,r4,-15328
  801994:	e17ff817 	ldw	r5,-32(fp)
  801998:	e1bffc17 	ldw	r6,-16(fp)
  80199c:	e1fffd17 	ldw	r7,-12(fp)
  8019a0:	0803a180 	call	803a18 <printf>
		best_match = INFIN;
  8019a4:	00a00034 	movhi	r2,32768
  8019a8:	10bfffc4 	addi	r2,r2,-1
  8019ac:	e0bffc15 	stw	r2,-16(fp)
  8019b0:	e03ffd15 	stw	zero,-12(fp)
		score = 0;
  8019b4:	e03ff415 	stw	zero,-48(fp)
  8019b8:	e03ff515 	stw	zero,-44(fp)
		match=0;
  8019bc:	e03ff815 	stw	zero,-32(fp)
		OSSemPost(dtw_sem);
  8019c0:	d1271817 	ldw	r4,-25504(gp)
  8019c4:	08128e00 	call	8128e0 <OSSemPost>
//		}
//		*SEVEN_SEG = match;
//		printf("best match is \'%d\' with score a of %ld\n", match, best_match);
//		OSSemPost(dtw_sem);

	}
  8019c8:	003f5f06 	br	801748 <taskTemplateMatch+0x50>

008019cc <taskDTWX>:
}

/* Performs DTW on X coordinates */
void taskDTWX(void* pdata) {
  8019cc:	defffc04 	addi	sp,sp,-16
  8019d0:	dfc00315 	stw	ra,12(sp)
  8019d4:	df000215 	stw	fp,8(sp)
  8019d8:	df000204 	addi	fp,sp,8
  8019dc:	e13fff15 	stw	r4,-4(fp)
	//volatile alt_u32 * pSRAM2 = ((alt_u32*) SRAM_0_BASE) + sizeof(int)*INPUT_SIZE;

	//char buffer[SD_BUFFER_SIZE];// = "SD CARD test message\r\n\0";
	while (1) {
		//msg = OSQPend(message, 0, &err);
		OSSemPend(dtw_semx, 0, &err);
  8019e0:	d1271917 	ldw	r4,-25500(gp)
  8019e4:	000b883a 	mov	r5,zero
  8019e8:	d1a71b04 	addi	r6,gp,-25492
  8019ec:	08124e80 	call	8124e8 <OSSemPend>
		//t = clock();
		//template[template_number].
		//pCharacter->s
		//pCharacter->
		//int answer = dtw((int*)pCharacter->pX, t1 , pCharacter->size, INPUT_SIZE);
		dtwx = dtw( (long*)template[template_number].pX, (long*)(pCharacter->pX), template[template_number].size,  pCharacter->size, 0);
  8019f0:	d0a70c17 	ldw	r2,-25552(gp)
  8019f4:	00c020f4 	movhi	r3,131
  8019f8:	18f85204 	addi	r3,r3,-7864
  8019fc:	10800324 	muli	r2,r2,12
  801a00:	10c5883a 	add	r2,r2,r3
  801a04:	10800017 	ldw	r2,0(r2)
  801a08:	1009883a 	mov	r4,r2
  801a0c:	d0a70d17 	ldw	r2,-25548(gp)
  801a10:	10800017 	ldw	r2,0(r2)
  801a14:	100b883a 	mov	r5,r2
  801a18:	d0a70c17 	ldw	r2,-25552(gp)
  801a1c:	00c020f4 	movhi	r3,131
  801a20:	18f85204 	addi	r3,r3,-7864
  801a24:	10800324 	muli	r2,r2,12
  801a28:	10c5883a 	add	r2,r2,r3
  801a2c:	10800204 	addi	r2,r2,8
  801a30:	11800017 	ldw	r6,0(r2)
  801a34:	d0a70d17 	ldw	r2,-25548(gp)
  801a38:	11c00217 	ldw	r7,8(r2)
  801a3c:	d8000015 	stw	zero,0(sp)
  801a40:	08003740 	call	800374 <dtw>
  801a44:	d0a71715 	stw	r2,-25508(gp)

		//t = clock() - t;
		//float time = ((float) t) / CLOCKS_PER_SEC;
		//printf("%d   time = %f", answer, time);

		OSSemPost(semx);
  801a48:	d1271c17 	ldw	r4,-25488(gp)
  801a4c:	08128e00 	call	8128e0 <OSSemPost>
	}
  801a50:	003fe306 	br	8019e0 <taskDTWX+0x14>

00801a54 <taskDTWY>:
}

/* Performs DTW on X coordinates */
void taskDTWY(void* pdata) {
  801a54:	defffc04 	addi	sp,sp,-16
  801a58:	dfc00315 	stw	ra,12(sp)
  801a5c:	df000215 	stw	fp,8(sp)
  801a60:	df000204 	addi	fp,sp,8
  801a64:	e13fff15 	stw	r4,-4(fp)
	//volatile alt_u32 * pSRAM2 = ((alt_u32*) SRAM_0_BASE) + sizeof(int)*INPUT_SIZE;

	//char buffer[SD_BUFFER_SIZE];// = "SD CARD test message\r\n\0";
	while (1) {
		//msg = OSQPend(message, 0, &err);
		OSSemPend(dtw_semy, 0, &err);
  801a68:	d1270e17 	ldw	r4,-25544(gp)
  801a6c:	000b883a 	mov	r5,zero
  801a70:	d1a71b04 	addi	r6,gp,-25492
  801a74:	08124e80 	call	8124e8 <OSSemPend>
//			return;
//		}

//		t = clock();
//		int answer = dtw((int*)pCharacter->pY, t1 , pCharacter->size, INPUT_SIZE);
		dtwy = dtw( (long*)template[template_number].pY, (long*)(pCharacter->pY), template[template_number].size,  pCharacter->size, 1);
  801a78:	d0a70c17 	ldw	r2,-25552(gp)
  801a7c:	00c020f4 	movhi	r3,131
  801a80:	18f85204 	addi	r3,r3,-7864
  801a84:	10800324 	muli	r2,r2,12
  801a88:	10c5883a 	add	r2,r2,r3
  801a8c:	10800104 	addi	r2,r2,4
  801a90:	10800017 	ldw	r2,0(r2)
  801a94:	1009883a 	mov	r4,r2
  801a98:	d0a70d17 	ldw	r2,-25548(gp)
  801a9c:	10800117 	ldw	r2,4(r2)
  801aa0:	100b883a 	mov	r5,r2
  801aa4:	d0a70c17 	ldw	r2,-25552(gp)
  801aa8:	00c020f4 	movhi	r3,131
  801aac:	18f85204 	addi	r3,r3,-7864
  801ab0:	10800324 	muli	r2,r2,12
  801ab4:	10c5883a 	add	r2,r2,r3
  801ab8:	10800204 	addi	r2,r2,8
  801abc:	11800017 	ldw	r6,0(r2)
  801ac0:	d0a70d17 	ldw	r2,-25548(gp)
  801ac4:	11c00217 	ldw	r7,8(r2)
  801ac8:	00800044 	movi	r2,1
  801acc:	d8800015 	stw	r2,0(sp)
  801ad0:	08003740 	call	800374 <dtw>
  801ad4:	d0a70f15 	stw	r2,-25540(gp)

//		t = clock() - t;
//		float time = ((float) t) / CLOCKS_PER_SEC;
//		printf("%d   time = %f", answer, time);

		OSSemPost(semy);
  801ad8:	d1271017 	ldw	r4,-25536(gp)
  801adc:	08128e00 	call	8128e0 <OSSemPost>
	}
  801ae0:	003fe106 	br	801a68 <taskDTWY+0x14>

00801ae4 <main>:
}



/* The main function runs the accelerometer character recognition and calibration tests. */
int main(void) {
  801ae4:	defff904 	addi	sp,sp,-28
  801ae8:	dfc00615 	stw	ra,24(sp)
  801aec:	df000515 	stw	fp,20(sp)
  801af0:	df000504 	addi	fp,sp,20
	modeselectsem = OSSemCreate(1);
  801af4:	01000044 	movi	r4,1
  801af8:	08121340 	call	812134 <OSSemCreate>
  801afc:	d0a71d15 	stw	r2,-25484(gp)
	uartsem = OSSemCreate(0);
  801b00:	0009883a 	mov	r4,zero
  801b04:	08121340 	call	812134 <OSSemCreate>
  801b08:	d0a71515 	stw	r2,-25516(gp)
	configuresem = OSSemCreate(0);
  801b0c:	0009883a 	mov	r4,zero
  801b10:	08121340 	call	812134 <OSSemCreate>
  801b14:	d0a71415 	stw	r2,-25520(gp)
	dtw_sem = OSSemCreate(1);
  801b18:	01000044 	movi	r4,1
  801b1c:	08121340 	call	812134 <OSSemCreate>
  801b20:	d0a71815 	stw	r2,-25504(gp)
	loadsem = OSSemCreate(0);
  801b24:	0009883a 	mov	r4,zero
  801b28:	08121340 	call	812134 <OSSemCreate>
  801b2c:	d0a71a15 	stw	r2,-25496(gp)

	message = OSQCreate(&messageArray, MSG_QUEUE_SIZE);
  801b30:	010020f4 	movhi	r4,131
  801b34:	21088e04 	addi	r4,r4,8760
  801b38:	01408004 	movi	r5,512
  801b3c:	0810e940 	call	810e94 <OSQCreate>
  801b40:	d0a71615 	stw	r2,-25512(gp)
//	messageX = OSQCreate(&messageArrayX, MSG_QUEUE_SIZE);
//	messageY = OSQCreate(&messageArrayY, MSG_QUEUE_SIZE);
	dtw_semx = OSSemCreate(0);
  801b44:	0009883a 	mov	r4,zero
  801b48:	08121340 	call	812134 <OSSemCreate>
  801b4c:	d0a71915 	stw	r2,-25500(gp)
	dtw_semy = OSSemCreate(0);
  801b50:	0009883a 	mov	r4,zero
  801b54:	08121340 	call	812134 <OSSemCreate>
  801b58:	d0a70e15 	stw	r2,-25544(gp)
	semx = OSSemCreate(0);
  801b5c:	0009883a 	mov	r4,zero
  801b60:	08121340 	call	812134 <OSSemCreate>
  801b64:	d0a71c15 	stw	r2,-25488(gp)
	semy = OSSemCreate(0);
  801b68:	0009883a 	mov	r4,zero
  801b6c:	08121340 	call	812134 <OSSemCreate>
  801b70:	d0a71015 	stw	r2,-25536(gp)

	writesem = OSSemCreate(0);
  801b74:	0009883a 	mov	r4,zero
  801b78:	08121340 	call	812134 <OSSemCreate>
  801b7c:	d0a71315 	stw	r2,-25524(gp)
	readsem = OSSemCreate(0);
  801b80:	0009883a 	mov	r4,zero
  801b84:	08121340 	call	812134 <OSSemCreate>
  801b88:	d0a71115 	stw	r2,-25532(gp)
	loadsdcardsem = OSSemCreate(0);
  801b8c:	0009883a 	mov	r4,zero
  801b90:	08121340 	call	812134 <OSSemCreate>
  801b94:	d0a71215 	stw	r2,-25528(gp)
	//SWQ = OSQCreate(SWQ_stk, TASK_STACKSIZE);

	OSTaskCreateExt(taskModeSelect, NULL, (void *) &taskModeSelect_stk[TASK_STACKSIZE - 1],
  801b98:	018020b4 	movhi	r6,130
  801b9c:	31984904 	addi	r6,r6,24868
  801ba0:	00800044 	movi	r2,1
  801ba4:	d8800015 	stw	r2,0(sp)
  801ba8:	008020b4 	movhi	r2,130
  801bac:	10904a04 	addi	r2,r2,16680
  801bb0:	d8800115 	stw	r2,4(sp)
  801bb4:	00820004 	movi	r2,2048
  801bb8:	d8800215 	stw	r2,8(sp)
  801bbc:	d8000315 	stw	zero,12(sp)
  801bc0:	d8000415 	stw	zero,16(sp)
  801bc4:	01002034 	movhi	r4,128
  801bc8:	2101b204 	addi	r4,r4,1736
  801bcc:	000b883a 	mov	r5,zero
  801bd0:	01c00044 	movi	r7,1
  801bd4:	08133840 	call	813384 <OSTaskCreateExt>
			TASKMODESELECT_PRIORITY, TASKMODESELECT_PRIORITY, taskModeSelect_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskLoadSDCard, NULL, (void *) &taskLoadSDCard_stk[TASK_STACKSIZE - 1],
  801bd8:	018020f4 	movhi	r6,131
  801bdc:	31b84904 	addi	r6,r6,-7900
  801be0:	00800084 	movi	r2,2
  801be4:	d8800015 	stw	r2,0(sp)
  801be8:	008020f4 	movhi	r2,131
  801bec:	10b04a04 	addi	r2,r2,-16088
  801bf0:	d8800115 	stw	r2,4(sp)
  801bf4:	00820004 	movi	r2,2048
  801bf8:	d8800215 	stw	r2,8(sp)
  801bfc:	d8000315 	stw	zero,12(sp)
  801c00:	d8000415 	stw	zero,16(sp)
  801c04:	01002034 	movhi	r4,128
  801c08:	21021504 	addi	r4,r4,2132
  801c0c:	000b883a 	mov	r5,zero
  801c10:	01c00084 	movi	r7,2
  801c14:	08133840 	call	813384 <OSTaskCreateExt>
			TASKLOADSDCARD_PRIORITY, TASKLOADSDCARD_PRIORITY, taskLoadSDCard_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskCalibrate, NULL, (void *) &taskCalibrate_stk[TASK_STACKSIZE - 1],
  801c18:	018020b4 	movhi	r6,130
  801c1c:	31884904 	addi	r6,r6,8484
  801c20:	008000c4 	movi	r2,3
  801c24:	d8800015 	stw	r2,0(sp)
  801c28:	008020b4 	movhi	r2,130
  801c2c:	10804a04 	addi	r2,r2,296
  801c30:	d8800115 	stw	r2,4(sp)
  801c34:	00820004 	movi	r2,2048
  801c38:	d8800215 	stw	r2,8(sp)
  801c3c:	d8000315 	stw	zero,12(sp)
  801c40:	d8000415 	stw	zero,16(sp)
  801c44:	01002034 	movhi	r4,128
  801c48:	21030804 	addi	r4,r4,3104
  801c4c:	000b883a 	mov	r5,zero
  801c50:	01c000c4 	movi	r7,3
  801c54:	08133840 	call	813384 <OSTaskCreateExt>
			TASKCALIBRATE_PRIORITY, TASKCALIBRATE_PRIORITY, taskCalibrate_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskCharacterRead, NULL, (void *) &taskCharacterRead_stk[TASK_STACKSIZE - 1],
  801c58:	018020b4 	movhi	r6,130
  801c5c:	31904904 	addi	r6,r6,16676
  801c60:	00800204 	movi	r2,8
  801c64:	d8800015 	stw	r2,0(sp)
  801c68:	008020b4 	movhi	r2,130
  801c6c:	10884a04 	addi	r2,r2,8488
  801c70:	d8800115 	stw	r2,4(sp)
  801c74:	00820004 	movi	r2,2048
  801c78:	d8800215 	stw	r2,8(sp)
  801c7c:	d8000315 	stw	zero,12(sp)
  801c80:	d8000415 	stw	zero,16(sp)
  801c84:	01002034 	movhi	r4,128
  801c88:	21048704 	addi	r4,r4,4636
  801c8c:	000b883a 	mov	r5,zero
  801c90:	01c00204 	movi	r7,8
  801c94:	08133840 	call	813384 <OSTaskCreateExt>
			TASKCHARACTERREAD_PRIORITY, TASKCHARACTERREAD_PRIORITY, taskCharacterRead_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskTemplateMatch, NULL, (void *) &taskTemplateMatch_stk[TASK_STACKSIZE - 1],
  801c98:	018020f4 	movhi	r6,131
  801c9c:	31a04904 	addi	r6,r6,-32476
  801ca0:	008001c4 	movi	r2,7
  801ca4:	d8800015 	stw	r2,0(sp)
  801ca8:	008020b4 	movhi	r2,130
  801cac:	10984a04 	addi	r2,r2,24872
  801cb0:	d8800115 	stw	r2,4(sp)
  801cb4:	00820004 	movi	r2,2048
  801cb8:	d8800215 	stw	r2,8(sp)
  801cbc:	d8000315 	stw	zero,12(sp)
  801cc0:	d8000415 	stw	zero,16(sp)
  801cc4:	01002034 	movhi	r4,128
  801cc8:	2105be04 	addi	r4,r4,5880
  801ccc:	000b883a 	mov	r5,zero
  801cd0:	01c001c4 	movi	r7,7
  801cd4:	08133840 	call	813384 <OSTaskCreateExt>
			TASKTEMPLATEMATCH_PRIORITY, TASKTEMPLATEMATCH_PRIORITY, taskTemplateMatch_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskDTWX, NULL, (void *) &taskDTWX_stk[TASK_STACKSIZE - 1],
  801cd8:	018020f4 	movhi	r6,131
  801cdc:	31a84904 	addi	r6,r6,-24284
  801ce0:	00800144 	movi	r2,5
  801ce4:	d8800015 	stw	r2,0(sp)
  801ce8:	008020f4 	movhi	r2,131
  801cec:	10a04a04 	addi	r2,r2,-32472
  801cf0:	d8800115 	stw	r2,4(sp)
  801cf4:	00820004 	movi	r2,2048
  801cf8:	d8800215 	stw	r2,8(sp)
  801cfc:	d8000315 	stw	zero,12(sp)
  801d00:	d8000415 	stw	zero,16(sp)
  801d04:	01002034 	movhi	r4,128
  801d08:	21067304 	addi	r4,r4,6604
  801d0c:	000b883a 	mov	r5,zero
  801d10:	01c00144 	movi	r7,5
  801d14:	08133840 	call	813384 <OSTaskCreateExt>
			TASKDTWX_PRIORITY, TASKDTWX_PRIORITY, taskDTWX_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskDTWY, NULL, (void *) &taskDTWY_stk[TASK_STACKSIZE - 1],
  801d18:	018020f4 	movhi	r6,131
  801d1c:	31888d04 	addi	r6,r6,8756
  801d20:	00800184 	movi	r2,6
  801d24:	d8800015 	stw	r2,0(sp)
  801d28:	008020f4 	movhi	r2,131
  801d2c:	10808e04 	addi	r2,r2,568
  801d30:	d8800115 	stw	r2,4(sp)
  801d34:	00820004 	movi	r2,2048
  801d38:	d8800215 	stw	r2,8(sp)
  801d3c:	d8000315 	stw	zero,12(sp)
  801d40:	d8000415 	stw	zero,16(sp)
  801d44:	01002034 	movhi	r4,128
  801d48:	21069504 	addi	r4,r4,6740
  801d4c:	000b883a 	mov	r5,zero
  801d50:	01c00184 	movi	r7,6
  801d54:	08133840 	call	813384 <OSTaskCreateExt>
			TASKDTWY_PRIORITY, TASKDTWY_PRIORITY, taskDTWY_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskWriteSDCard, NULL, (void *) &taskWriteSDCard_stk[TASK_STACKSIZE - 1],
  801d58:	018020f4 	movhi	r6,131
  801d5c:	31b04904 	addi	r6,r6,-16092
  801d60:	00800104 	movi	r2,4
  801d64:	d8800015 	stw	r2,0(sp)
  801d68:	008020f4 	movhi	r2,131
  801d6c:	10a84a04 	addi	r2,r2,-24280
  801d70:	d8800115 	stw	r2,4(sp)
  801d74:	00820004 	movi	r2,2048
  801d78:	d8800215 	stw	r2,8(sp)
  801d7c:	d8000315 	stw	zero,12(sp)
  801d80:	d8000415 	stw	zero,16(sp)
  801d84:	01002034 	movhi	r4,128
  801d88:	2103f004 	addi	r4,r4,4032
  801d8c:	000b883a 	mov	r5,zero
  801d90:	01c00104 	movi	r7,4
  801d94:	08133840 	call	813384 <OSTaskCreateExt>
			TASKWRITESDCARD_PRIORITY, TASKWRITESDCARD_PRIORITY, taskWriteSDCard_stk, TASK_STACKSIZE, NULL, 0);
	OSStart();
  801d98:	080d5b00 	call	80d5b0 <OSStart>
	return 0;
  801d9c:	0005883a 	mov	r2,zero
}
  801da0:	e037883a 	mov	sp,fp
  801da4:	dfc00117 	ldw	ra,4(sp)
  801da8:	df000017 	ldw	fp,0(sp)
  801dac:	dec00204 	addi	sp,sp,8
  801db0:	f800283a 	ret

00801db4 <sqrt>:
  801db4:	defff104 	addi	sp,sp,-60
  801db8:	dd000d15 	stw	r20,52(sp)
  801dbc:	050020b4 	movhi	r20,130
  801dc0:	a538ee04 	addi	r20,r20,-7240
  801dc4:	dcc00c15 	stw	r19,48(sp)
  801dc8:	dc800b15 	stw	r18,44(sp)
  801dcc:	dc400a15 	stw	r17,40(sp)
  801dd0:	dc000915 	stw	r16,36(sp)
  801dd4:	2025883a 	mov	r18,r4
  801dd8:	dfc00e15 	stw	ra,56(sp)
  801ddc:	2827883a 	mov	r19,r5
  801de0:	0801ee40 	call	801ee4 <__ieee754_sqrt>
  801de4:	a1000017 	ldw	r4,0(r20)
  801de8:	1021883a 	mov	r16,r2
  801dec:	00bfffc4 	movi	r2,-1
  801df0:	1823883a 	mov	r17,r3
  801df4:	20800a26 	beq	r4,r2,801e20 <sqrt+0x6c>
  801df8:	9009883a 	mov	r4,r18
  801dfc:	980b883a 	mov	r5,r19
  801e00:	08021ac0 	call	8021ac <__isnand>
  801e04:	1000061e 	bne	r2,zero,801e20 <sqrt+0x6c>
  801e08:	000d883a 	mov	r6,zero
  801e0c:	000f883a 	mov	r7,zero
  801e10:	9009883a 	mov	r4,r18
  801e14:	980b883a 	mov	r5,r19
  801e18:	0802f5c0 	call	802f5c <__ltdf2>
  801e1c:	10000a16 	blt	r2,zero,801e48 <sqrt+0x94>
  801e20:	8005883a 	mov	r2,r16
  801e24:	8807883a 	mov	r3,r17
  801e28:	dfc00e17 	ldw	ra,56(sp)
  801e2c:	dd000d17 	ldw	r20,52(sp)
  801e30:	dcc00c17 	ldw	r19,48(sp)
  801e34:	dc800b17 	ldw	r18,44(sp)
  801e38:	dc400a17 	ldw	r17,40(sp)
  801e3c:	dc000917 	ldw	r16,36(sp)
  801e40:	dec00f04 	addi	sp,sp,60
  801e44:	f800283a 	ret
  801e48:	a4000017 	ldw	r16,0(r20)
  801e4c:	00800044 	movi	r2,1
  801e50:	00c020b4 	movhi	r3,130
  801e54:	18f11204 	addi	r3,r3,-15288
  801e58:	d8800015 	stw	r2,0(sp)
  801e5c:	d8c00115 	stw	r3,4(sp)
  801e60:	dcc00315 	stw	r19,12(sp)
  801e64:	d8000815 	stw	zero,32(sp)
  801e68:	dc800415 	stw	r18,16(sp)
  801e6c:	dcc00515 	stw	r19,20(sp)
  801e70:	dc800215 	stw	r18,8(sp)
  801e74:	80000a1e 	bne	r16,zero,801ea0 <sqrt+0xec>
  801e78:	d8000615 	stw	zero,24(sp)
  801e7c:	d8000715 	stw	zero,28(sp)
  801e80:	d809883a 	mov	r4,sp
  801e84:	08021dc0 	call	8021dc <matherr>
  801e88:	10000e26 	beq	r2,zero,801ec4 <sqrt+0x110>
  801e8c:	d8800817 	ldw	r2,32(sp)
  801e90:	1000101e 	bne	r2,zero,801ed4 <sqrt+0x120>
  801e94:	dc000617 	ldw	r16,24(sp)
  801e98:	dc400717 	ldw	r17,28(sp)
  801e9c:	003fe006 	br	801e20 <sqrt+0x6c>
  801ea0:	0009883a 	mov	r4,zero
  801ea4:	000d883a 	mov	r6,zero
  801ea8:	000b883a 	mov	r5,zero
  801eac:	000f883a 	mov	r7,zero
  801eb0:	0802d040 	call	802d04 <__divdf3>
  801eb4:	d8800615 	stw	r2,24(sp)
  801eb8:	00800084 	movi	r2,2
  801ebc:	d8c00715 	stw	r3,28(sp)
  801ec0:	80bfef1e 	bne	r16,r2,801e80 <sqrt+0xcc>
  801ec4:	0803a080 	call	803a08 <__errno>
  801ec8:	00c00844 	movi	r3,33
  801ecc:	10c00015 	stw	r3,0(r2)
  801ed0:	003fee06 	br	801e8c <sqrt+0xd8>
  801ed4:	0803a080 	call	803a08 <__errno>
  801ed8:	d8c00817 	ldw	r3,32(sp)
  801edc:	10c00015 	stw	r3,0(r2)
  801ee0:	003fec06 	br	801e94 <sqrt+0xe0>

00801ee4 <__ieee754_sqrt>:
  801ee4:	defffd04 	addi	sp,sp,-12
  801ee8:	dc000015 	stw	r16,0(sp)
  801eec:	009ffc34 	movhi	r2,32752
  801ef0:	2021883a 	mov	r16,r4
  801ef4:	291ffc2c 	andhi	r4,r5,32752
  801ef8:	dc400115 	stw	r17,4(sp)
  801efc:	dfc00215 	stw	ra,8(sp)
  801f00:	2823883a 	mov	r17,r5
  801f04:	280f883a 	mov	r7,r5
  801f08:	2807883a 	mov	r3,r5
  801f0c:	8011883a 	mov	r8,r16
  801f10:	20807d26 	beq	r4,r2,802108 <__ieee754_sqrt+0x224>
  801f14:	01408d0e 	bge	zero,r5,80214c <__ieee754_sqrt+0x268>
  801f18:	380dd53a 	srai	r6,r7,20
  801f1c:	3000131e 	bne	r6,zero,801f6c <__ieee754_sqrt+0x88>
  801f20:	1800041e 	bne	r3,zero,801f34 <__ieee754_sqrt+0x50>
  801f24:	400ed2fa 	srli	r7,r8,11
  801f28:	31bffac4 	addi	r6,r6,-21
  801f2c:	4010957a 	slli	r8,r8,21
  801f30:	383ffc26 	beq	r7,zero,801f24 <__ieee754_sqrt+0x40>
  801f34:	3880042c 	andhi	r2,r7,16
  801f38:	1000991e 	bne	r2,zero,8021a0 <__ieee754_sqrt+0x2bc>
  801f3c:	0009883a 	mov	r4,zero
  801f40:	39cf883a 	add	r7,r7,r7
  801f44:	3880042c 	andhi	r2,r7,16
  801f48:	21000044 	addi	r4,r4,1
  801f4c:	103ffc26 	beq	r2,zero,801f40 <__ieee754_sqrt+0x5c>
  801f50:	00800804 	movi	r2,32
  801f54:	1105c83a 	sub	r2,r2,r4
  801f58:	4086d83a 	srl	r3,r8,r2
  801f5c:	4110983a 	sll	r8,r8,r4
  801f60:	3105c83a 	sub	r2,r6,r4
  801f64:	38ceb03a 	or	r7,r7,r3
  801f68:	11800044 	addi	r6,r2,1
  801f6c:	31bf0044 	addi	r6,r6,-1023
  801f70:	30c0004c 	andi	r3,r6,1
  801f74:	00800434 	movhi	r2,16
  801f78:	10bfffc4 	addi	r2,r2,-1
  801f7c:	3884703a 	and	r2,r7,r2
  801f80:	1807003a 	cmpeq	r3,r3,zero
  801f84:	11000434 	orhi	r4,r2,16
  801f88:	18005426 	beq	r3,zero,8020dc <__ieee754_sqrt+0x1f8>
  801f8c:	4004d7fa 	srli	r2,r8,31
  801f90:	4207883a 	add	r3,r8,r8
  801f94:	02800834 	movhi	r10,32
  801f98:	1105883a 	add	r2,r2,r4
  801f9c:	2089883a 	add	r4,r4,r2
  801fa0:	0011883a 	mov	r8,zero
  801fa4:	000b883a 	mov	r5,zero
  801fa8:	0013883a 	mov	r9,zero
  801fac:	02c00584 	movi	r11,22
  801fb0:	520f883a 	add	r7,r10,r8
  801fb4:	1804d7fa 	srli	r2,r3,31
  801fb8:	4a400044 	addi	r9,r9,1
  801fbc:	18c7883a 	add	r3,r3,r3
  801fc0:	21c00316 	blt	r4,r7,801fd0 <__ieee754_sqrt+0xec>
  801fc4:	21c9c83a 	sub	r4,r4,r7
  801fc8:	2a8b883a 	add	r5,r5,r10
  801fcc:	51d1883a 	add	r8,r10,r7
  801fd0:	1105883a 	add	r2,r2,r4
  801fd4:	5014d07a 	srli	r10,r10,1
  801fd8:	2089883a 	add	r4,r4,r2
  801fdc:	4afff41e 	bne	r9,r11,801fb0 <__ieee754_sqrt+0xcc>
  801fe0:	02600034 	movhi	r9,32768
  801fe4:	0017883a 	mov	r11,zero
  801fe8:	0019883a 	mov	r12,zero
  801fec:	0015883a 	mov	r10,zero
  801ff0:	4821883a 	mov	r16,r9
  801ff4:	03c00804 	movi	r15,32
  801ff8:	00000806 	br	80201c <__ieee754_sqrt+0x138>
  801ffc:	22003426 	beq	r4,r8,8020d0 <__ieee754_sqrt+0x1ec>
  802000:	1804d7fa 	srli	r2,r3,31
  802004:	52800044 	addi	r10,r10,1
  802008:	18c7883a 	add	r3,r3,r3
  80200c:	1105883a 	add	r2,r2,r4
  802010:	2089883a 	add	r4,r4,r2
  802014:	4812d07a 	srli	r9,r9,1
  802018:	53c01326 	beq	r10,r15,802068 <__ieee754_sqrt+0x184>
  80201c:	4acf883a 	add	r7,r9,r11
  802020:	413ff60e 	bge	r8,r4,801ffc <__ieee754_sqrt+0x118>
  802024:	38a0002c 	andhi	r2,r7,32768
  802028:	3a57883a 	add	r11,r7,r9
  80202c:	14002426 	beq	r2,r16,8020c0 <__ieee754_sqrt+0x1dc>
  802030:	4005883a 	mov	r2,r8
  802034:	2209c83a 	sub	r4,r4,r8
  802038:	19c0012e 	bgeu	r3,r7,802040 <__ieee754_sqrt+0x15c>
  80203c:	213fffc4 	addi	r4,r4,-1
  802040:	19c7c83a 	sub	r3,r3,r7
  802044:	1011883a 	mov	r8,r2
  802048:	1804d7fa 	srli	r2,r3,31
  80204c:	52800044 	addi	r10,r10,1
  802050:	6259883a 	add	r12,r12,r9
  802054:	1105883a 	add	r2,r2,r4
  802058:	18c7883a 	add	r3,r3,r3
  80205c:	2089883a 	add	r4,r4,r2
  802060:	4812d07a 	srli	r9,r9,1
  802064:	53ffed1e 	bne	r10,r15,80201c <__ieee754_sqrt+0x138>
  802068:	20c4b03a 	or	r2,r4,r3
  80206c:	1000201e 	bne	r2,zero,8020f0 <__ieee754_sqrt+0x20c>
  802070:	600ed07a 	srli	r7,r12,1
  802074:	2880004c 	andi	r2,r5,1
  802078:	1005003a 	cmpeq	r2,r2,zero
  80207c:	1000011e 	bne	r2,zero,802084 <__ieee754_sqrt+0x1a0>
  802080:	39e00034 	orhi	r7,r7,32768
  802084:	300dd07a 	srai	r6,r6,1
  802088:	280bd07a 	srai	r5,r5,1
  80208c:	010ff834 	movhi	r4,16352
  802090:	300c953a 	slli	r6,r6,20
  802094:	290b883a 	add	r5,r5,r4
  802098:	3821883a 	mov	r16,r7
  80209c:	299d883a 	add	r14,r5,r6
  8020a0:	7023883a 	mov	r17,r14
  8020a4:	8005883a 	mov	r2,r16
  8020a8:	8807883a 	mov	r3,r17
  8020ac:	dfc00217 	ldw	ra,8(sp)
  8020b0:	dc400117 	ldw	r17,4(sp)
  8020b4:	dc000017 	ldw	r16,0(sp)
  8020b8:	dec00304 	addi	sp,sp,12
  8020bc:	f800283a 	ret
  8020c0:	5884703a 	and	r2,r11,r2
  8020c4:	103fda1e 	bne	r2,zero,802030 <__ieee754_sqrt+0x14c>
  8020c8:	40800044 	addi	r2,r8,1
  8020cc:	003fd906 	br	802034 <__ieee754_sqrt+0x150>
  8020d0:	19ffd42e 	bgeu	r3,r7,802024 <__ieee754_sqrt+0x140>
  8020d4:	2011883a 	mov	r8,r4
  8020d8:	003fc906 	br	802000 <__ieee754_sqrt+0x11c>
  8020dc:	4004d7fa 	srli	r2,r8,31
  8020e0:	4211883a 	add	r8,r8,r8
  8020e4:	1105883a 	add	r2,r2,r4
  8020e8:	2089883a 	add	r4,r4,r2
  8020ec:	003fa706 	br	801f8c <__ieee754_sqrt+0xa8>
  8020f0:	00bfffc4 	movi	r2,-1
  8020f4:	60802726 	beq	r12,r2,802194 <__ieee754_sqrt+0x2b0>
  8020f8:	6080004c 	andi	r2,r12,1
  8020fc:	6085883a 	add	r2,r12,r2
  802100:	100ed07a 	srli	r7,r2,1
  802104:	003fdb06 	br	802074 <__ieee754_sqrt+0x190>
  802108:	8009883a 	mov	r4,r16
  80210c:	800d883a 	mov	r6,r16
  802110:	08029400 	call	802940 <__muldf3>
  802114:	180f883a 	mov	r7,r3
  802118:	880b883a 	mov	r5,r17
  80211c:	8009883a 	mov	r4,r16
  802120:	100d883a 	mov	r6,r2
  802124:	08028cc0 	call	8028cc <__adddf3>
  802128:	1021883a 	mov	r16,r2
  80212c:	1823883a 	mov	r17,r3
  802130:	8005883a 	mov	r2,r16
  802134:	8807883a 	mov	r3,r17
  802138:	dfc00217 	ldw	ra,8(sp)
  80213c:	dc400117 	ldw	r17,4(sp)
  802140:	dc000017 	ldw	r16,0(sp)
  802144:	dec00304 	addi	sp,sp,12
  802148:	f800283a 	ret
  80214c:	00a00034 	movhi	r2,32768
  802150:	10bfffc4 	addi	r2,r2,-1
  802154:	2884703a 	and	r2,r5,r2
  802158:	8084b03a 	or	r2,r16,r2
  80215c:	103fd126 	beq	r2,zero,8020a4 <__ieee754_sqrt+0x1c0>
  802160:	283f6d26 	beq	r5,zero,801f18 <__ieee754_sqrt+0x34>
  802164:	280f883a 	mov	r7,r5
  802168:	8009883a 	mov	r4,r16
  80216c:	800d883a 	mov	r6,r16
  802170:	080284c0 	call	80284c <__subdf3>
  802174:	1009883a 	mov	r4,r2
  802178:	180b883a 	mov	r5,r3
  80217c:	100d883a 	mov	r6,r2
  802180:	180f883a 	mov	r7,r3
  802184:	0802d040 	call	802d04 <__divdf3>
  802188:	1021883a 	mov	r16,r2
  80218c:	1823883a 	mov	r17,r3
  802190:	003fc406 	br	8020a4 <__ieee754_sqrt+0x1c0>
  802194:	29400044 	addi	r5,r5,1
  802198:	000f883a 	mov	r7,zero
  80219c:	003fb506 	br	802074 <__ieee754_sqrt+0x190>
  8021a0:	0009883a 	mov	r4,zero
  8021a4:	00800804 	movi	r2,32
  8021a8:	003f6b06 	br	801f58 <__ieee754_sqrt+0x74>

008021ac <__isnand>:
  8021ac:	200d883a 	mov	r6,r4
  8021b0:	0109c83a 	sub	r4,zero,r4
  8021b4:	2188b03a 	or	r4,r4,r6
  8021b8:	2008d7fa 	srli	r4,r4,31
  8021bc:	00a00034 	movhi	r2,32768
  8021c0:	10bfffc4 	addi	r2,r2,-1
  8021c4:	1144703a 	and	r2,r2,r5
  8021c8:	2088b03a 	or	r4,r4,r2
  8021cc:	009ffc34 	movhi	r2,32752
  8021d0:	1105c83a 	sub	r2,r2,r4
  8021d4:	1004d7fa 	srli	r2,r2,31
  8021d8:	f800283a 	ret

008021dc <matherr>:
  8021dc:	0005883a 	mov	r2,zero
  8021e0:	f800283a 	ret

008021e4 <__muldi3>:
  8021e4:	2011883a 	mov	r8,r4
  8021e8:	427fffcc 	andi	r9,r8,65535
  8021ec:	4018d43a 	srli	r12,r8,16
  8021f0:	32bfffcc 	andi	r10,r6,65535
  8021f4:	3016d43a 	srli	r11,r6,16
  8021f8:	4a85383a 	mul	r2,r9,r10
  8021fc:	6295383a 	mul	r10,r12,r10
  802200:	4ad3383a 	mul	r9,r9,r11
  802204:	113fffcc 	andi	r4,r2,65535
  802208:	1004d43a 	srli	r2,r2,16
  80220c:	4a93883a 	add	r9,r9,r10
  802210:	3807883a 	mov	r3,r7
  802214:	1245883a 	add	r2,r2,r9
  802218:	280f883a 	mov	r7,r5
  80221c:	180b883a 	mov	r5,r3
  802220:	1006943a 	slli	r3,r2,16
  802224:	defffd04 	addi	sp,sp,-12
  802228:	dc800215 	stw	r18,8(sp)
  80222c:	1907883a 	add	r3,r3,r4
  802230:	dc400115 	stw	r17,4(sp)
  802234:	dc000015 	stw	r16,0(sp)
  802238:	4165383a 	mul	r18,r8,r5
  80223c:	31e3383a 	mul	r17,r6,r7
  802240:	1012d43a 	srli	r9,r2,16
  802244:	62d9383a 	mul	r12,r12,r11
  802248:	181f883a 	mov	r15,r3
  80224c:	1280022e 	bgeu	r2,r10,802258 <__muldi3+0x74>
  802250:	00800074 	movhi	r2,1
  802254:	6099883a 	add	r12,r12,r2
  802258:	624d883a 	add	r6,r12,r9
  80225c:	9187883a 	add	r3,r18,r6
  802260:	88c7883a 	add	r3,r17,r3
  802264:	7805883a 	mov	r2,r15
  802268:	dc800217 	ldw	r18,8(sp)
  80226c:	dc400117 	ldw	r17,4(sp)
  802270:	dc000017 	ldw	r16,0(sp)
  802274:	dec00304 	addi	sp,sp,12
  802278:	f800283a 	ret

0080227c <__fixdfdi>:
  80227c:	defffd04 	addi	sp,sp,-12
  802280:	dc400115 	stw	r17,4(sp)
  802284:	000f883a 	mov	r7,zero
  802288:	2823883a 	mov	r17,r5
  80228c:	000d883a 	mov	r6,zero
  802290:	dc000015 	stw	r16,0(sp)
  802294:	dfc00215 	stw	ra,8(sp)
  802298:	2021883a 	mov	r16,r4
  80229c:	0802f5c0 	call	802f5c <__ltdf2>
  8022a0:	89e0003c 	xorhi	r7,r17,32768
  8022a4:	380b883a 	mov	r5,r7
  8022a8:	8009883a 	mov	r4,r16
  8022ac:	10000616 	blt	r2,zero,8022c8 <__fixdfdi+0x4c>
  8022b0:	880b883a 	mov	r5,r17
  8022b4:	dfc00217 	ldw	ra,8(sp)
  8022b8:	dc400117 	ldw	r17,4(sp)
  8022bc:	dc000017 	ldw	r16,0(sp)
  8022c0:	dec00304 	addi	sp,sp,12
  8022c4:	08022f81 	jmpi	8022f8 <__fixunsdfdi>
  8022c8:	08022f80 	call	8022f8 <__fixunsdfdi>
  8022cc:	0011883a 	mov	r8,zero
  8022d0:	4085c83a 	sub	r2,r8,r2
  8022d4:	4091803a 	cmpltu	r8,r8,r2
  8022d8:	00c7c83a 	sub	r3,zero,r3
  8022dc:	1a11c83a 	sub	r8,r3,r8
  8022e0:	4007883a 	mov	r3,r8
  8022e4:	dfc00217 	ldw	ra,8(sp)
  8022e8:	dc400117 	ldw	r17,4(sp)
  8022ec:	dc000017 	ldw	r16,0(sp)
  8022f0:	dec00304 	addi	sp,sp,12
  8022f4:	f800283a 	ret

008022f8 <__fixunsdfdi>:
  8022f8:	0005883a 	mov	r2,zero
  8022fc:	00cf7c34 	movhi	r3,15856
  802300:	defffb04 	addi	sp,sp,-20
  802304:	180f883a 	mov	r7,r3
  802308:	100d883a 	mov	r6,r2
  80230c:	dfc00415 	stw	ra,16(sp)
  802310:	dcc00315 	stw	r19,12(sp)
  802314:	dc800215 	stw	r18,8(sp)
  802318:	dc400115 	stw	r17,4(sp)
  80231c:	dc000015 	stw	r16,0(sp)
  802320:	2823883a 	mov	r17,r5
  802324:	2021883a 	mov	r16,r4
  802328:	08029400 	call	802940 <__muldf3>
  80232c:	180b883a 	mov	r5,r3
  802330:	1009883a 	mov	r4,r2
  802334:	08033c80 	call	8033c8 <__fixunsdfsi>
  802338:	1009883a 	mov	r4,r2
  80233c:	1027883a 	mov	r19,r2
  802340:	08031b40 	call	8031b4 <__floatunsidf>
  802344:	0011883a 	mov	r8,zero
  802348:	02707c34 	movhi	r9,49648
  80234c:	480f883a 	mov	r7,r9
  802350:	400d883a 	mov	r6,r8
  802354:	180b883a 	mov	r5,r3
  802358:	1009883a 	mov	r4,r2
  80235c:	08029400 	call	802940 <__muldf3>
  802360:	180f883a 	mov	r7,r3
  802364:	880b883a 	mov	r5,r17
  802368:	8009883a 	mov	r4,r16
  80236c:	100d883a 	mov	r6,r2
  802370:	08028cc0 	call	8028cc <__adddf3>
  802374:	180b883a 	mov	r5,r3
  802378:	1009883a 	mov	r4,r2
  80237c:	08033c80 	call	8033c8 <__fixunsdfsi>
  802380:	0025883a 	mov	r18,zero
  802384:	000f883a 	mov	r7,zero
  802388:	9088b03a 	or	r4,r18,r2
  80238c:	99cab03a 	or	r5,r19,r7
  802390:	2005883a 	mov	r2,r4
  802394:	2807883a 	mov	r3,r5
  802398:	dfc00417 	ldw	ra,16(sp)
  80239c:	dcc00317 	ldw	r19,12(sp)
  8023a0:	dc800217 	ldw	r18,8(sp)
  8023a4:	dc400117 	ldw	r17,4(sp)
  8023a8:	dc000017 	ldw	r16,0(sp)
  8023ac:	dec00504 	addi	sp,sp,20
  8023b0:	f800283a 	ret

008023b4 <__floatdidf>:
  8023b4:	defffb04 	addi	sp,sp,-20
  8023b8:	dc800215 	stw	r18,8(sp)
  8023bc:	2025883a 	mov	r18,r4
  8023c0:	2809883a 	mov	r4,r5
  8023c4:	dfc00415 	stw	ra,16(sp)
  8023c8:	dc400115 	stw	r17,4(sp)
  8023cc:	dc000015 	stw	r16,0(sp)
  8023d0:	dcc00315 	stw	r19,12(sp)
  8023d4:	0802fe40 	call	802fe4 <__floatsidf>
  8023d8:	100d883a 	mov	r6,r2
  8023dc:	180f883a 	mov	r7,r3
  8023e0:	0005883a 	mov	r2,zero
  8023e4:	00d07c34 	movhi	r3,16880
  8023e8:	380b883a 	mov	r5,r7
  8023ec:	3009883a 	mov	r4,r6
  8023f0:	180f883a 	mov	r7,r3
  8023f4:	100d883a 	mov	r6,r2
  8023f8:	08029400 	call	802940 <__muldf3>
  8023fc:	9009883a 	mov	r4,r18
  802400:	1021883a 	mov	r16,r2
  802404:	1823883a 	mov	r17,r3
  802408:	08031b40 	call	8031b4 <__floatunsidf>
  80240c:	880b883a 	mov	r5,r17
  802410:	8009883a 	mov	r4,r16
  802414:	180f883a 	mov	r7,r3
  802418:	100d883a 	mov	r6,r2
  80241c:	08028cc0 	call	8028cc <__adddf3>
  802420:	dfc00417 	ldw	ra,16(sp)
  802424:	dcc00317 	ldw	r19,12(sp)
  802428:	dc800217 	ldw	r18,8(sp)
  80242c:	dc400117 	ldw	r17,4(sp)
  802430:	dc000017 	ldw	r16,0(sp)
  802434:	dec00504 	addi	sp,sp,20
  802438:	f800283a 	ret

0080243c <_fpadd_parts>:
  80243c:	defff804 	addi	sp,sp,-32
  802440:	dcc00315 	stw	r19,12(sp)
  802444:	2027883a 	mov	r19,r4
  802448:	21000017 	ldw	r4,0(r4)
  80244c:	00c00044 	movi	r3,1
  802450:	dd400515 	stw	r21,20(sp)
  802454:	dd000415 	stw	r20,16(sp)
  802458:	ddc00715 	stw	r23,28(sp)
  80245c:	dd800615 	stw	r22,24(sp)
  802460:	dc800215 	stw	r18,8(sp)
  802464:	dc400115 	stw	r17,4(sp)
  802468:	dc000015 	stw	r16,0(sp)
  80246c:	282b883a 	mov	r21,r5
  802470:	3029883a 	mov	r20,r6
  802474:	1900632e 	bgeu	r3,r4,802604 <_fpadd_parts+0x1c8>
  802478:	28800017 	ldw	r2,0(r5)
  80247c:	1880812e 	bgeu	r3,r2,802684 <_fpadd_parts+0x248>
  802480:	00c00104 	movi	r3,4
  802484:	20c0dc26 	beq	r4,r3,8027f8 <_fpadd_parts+0x3bc>
  802488:	10c07e26 	beq	r2,r3,802684 <_fpadd_parts+0x248>
  80248c:	00c00084 	movi	r3,2
  802490:	10c06726 	beq	r2,r3,802630 <_fpadd_parts+0x1f4>
  802494:	20c07b26 	beq	r4,r3,802684 <_fpadd_parts+0x248>
  802498:	9dc00217 	ldw	r23,8(r19)
  80249c:	28c00217 	ldw	r3,8(r5)
  8024a0:	9c400317 	ldw	r17,12(r19)
  8024a4:	2bc00317 	ldw	r15,12(r5)
  8024a8:	b8cdc83a 	sub	r6,r23,r3
  8024ac:	9c800417 	ldw	r18,16(r19)
  8024b0:	2c000417 	ldw	r16,16(r5)
  8024b4:	3009883a 	mov	r4,r6
  8024b8:	30009716 	blt	r6,zero,802718 <_fpadd_parts+0x2dc>
  8024bc:	00800fc4 	movi	r2,63
  8024c0:	11806b16 	blt	r2,r6,802670 <_fpadd_parts+0x234>
  8024c4:	0100a40e 	bge	zero,r4,802758 <_fpadd_parts+0x31c>
  8024c8:	35bff804 	addi	r22,r6,-32
  8024cc:	b000bc16 	blt	r22,zero,8027c0 <_fpadd_parts+0x384>
  8024d0:	8596d83a 	srl	r11,r16,r22
  8024d4:	0019883a 	mov	r12,zero
  8024d8:	0013883a 	mov	r9,zero
  8024dc:	01000044 	movi	r4,1
  8024e0:	0015883a 	mov	r10,zero
  8024e4:	b000be16 	blt	r22,zero,8027e0 <_fpadd_parts+0x3a4>
  8024e8:	2590983a 	sll	r8,r4,r22
  8024ec:	000f883a 	mov	r7,zero
  8024f0:	00bfffc4 	movi	r2,-1
  8024f4:	3889883a 	add	r4,r7,r2
  8024f8:	408b883a 	add	r5,r8,r2
  8024fc:	21cd803a 	cmpltu	r6,r4,r7
  802500:	314b883a 	add	r5,r6,r5
  802504:	7904703a 	and	r2,r15,r4
  802508:	8146703a 	and	r3,r16,r5
  80250c:	10c4b03a 	or	r2,r2,r3
  802510:	10000226 	beq	r2,zero,80251c <_fpadd_parts+0xe0>
  802514:	02400044 	movi	r9,1
  802518:	0015883a 	mov	r10,zero
  80251c:	5a5eb03a 	or	r15,r11,r9
  802520:	62a0b03a 	or	r16,r12,r10
  802524:	99400117 	ldw	r5,4(r19)
  802528:	a8800117 	ldw	r2,4(r21)
  80252c:	28806e26 	beq	r5,r2,8026e8 <_fpadd_parts+0x2ac>
  802530:	28006626 	beq	r5,zero,8026cc <_fpadd_parts+0x290>
  802534:	7c45c83a 	sub	r2,r15,r17
  802538:	7889803a 	cmpltu	r4,r15,r2
  80253c:	8487c83a 	sub	r3,r16,r18
  802540:	1909c83a 	sub	r4,r3,r4
  802544:	100d883a 	mov	r6,r2
  802548:	200f883a 	mov	r7,r4
  80254c:	38007716 	blt	r7,zero,80272c <_fpadd_parts+0x2f0>
  802550:	a5c00215 	stw	r23,8(r20)
  802554:	a1c00415 	stw	r7,16(r20)
  802558:	a0000115 	stw	zero,4(r20)
  80255c:	a1800315 	stw	r6,12(r20)
  802560:	a2000317 	ldw	r8,12(r20)
  802564:	a2400417 	ldw	r9,16(r20)
  802568:	00bfffc4 	movi	r2,-1
  80256c:	408b883a 	add	r5,r8,r2
  802570:	2a09803a 	cmpltu	r4,r5,r8
  802574:	488d883a 	add	r6,r9,r2
  802578:	01c40034 	movhi	r7,4096
  80257c:	39ffffc4 	addi	r7,r7,-1
  802580:	218d883a 	add	r6,r4,r6
  802584:	39801736 	bltu	r7,r6,8025e4 <_fpadd_parts+0x1a8>
  802588:	31c06526 	beq	r6,r7,802720 <_fpadd_parts+0x2e4>
  80258c:	a3000217 	ldw	r12,8(r20)
  802590:	4209883a 	add	r4,r8,r8
  802594:	00bfffc4 	movi	r2,-1
  802598:	220f803a 	cmpltu	r7,r4,r8
  80259c:	4a4b883a 	add	r5,r9,r9
  8025a0:	394f883a 	add	r7,r7,r5
  8025a4:	2095883a 	add	r10,r4,r2
  8025a8:	3897883a 	add	r11,r7,r2
  8025ac:	510d803a 	cmpltu	r6,r10,r4
  8025b0:	6099883a 	add	r12,r12,r2
  8025b4:	32d7883a 	add	r11,r6,r11
  8025b8:	00840034 	movhi	r2,4096
  8025bc:	10bfffc4 	addi	r2,r2,-1
  8025c0:	2011883a 	mov	r8,r4
  8025c4:	3813883a 	mov	r9,r7
  8025c8:	a1000315 	stw	r4,12(r20)
  8025cc:	a1c00415 	stw	r7,16(r20)
  8025d0:	a3000215 	stw	r12,8(r20)
  8025d4:	12c00336 	bltu	r2,r11,8025e4 <_fpadd_parts+0x1a8>
  8025d8:	58bfed1e 	bne	r11,r2,802590 <_fpadd_parts+0x154>
  8025dc:	00bfff84 	movi	r2,-2
  8025e0:	12bfeb2e 	bgeu	r2,r10,802590 <_fpadd_parts+0x154>
  8025e4:	a2800417 	ldw	r10,16(r20)
  8025e8:	008000c4 	movi	r2,3
  8025ec:	00c80034 	movhi	r3,8192
  8025f0:	18ffffc4 	addi	r3,r3,-1
  8025f4:	a2400317 	ldw	r9,12(r20)
  8025f8:	a0800015 	stw	r2,0(r20)
  8025fc:	1a802336 	bltu	r3,r10,80268c <_fpadd_parts+0x250>
  802600:	a027883a 	mov	r19,r20
  802604:	9805883a 	mov	r2,r19
  802608:	ddc00717 	ldw	r23,28(sp)
  80260c:	dd800617 	ldw	r22,24(sp)
  802610:	dd400517 	ldw	r21,20(sp)
  802614:	dd000417 	ldw	r20,16(sp)
  802618:	dcc00317 	ldw	r19,12(sp)
  80261c:	dc800217 	ldw	r18,8(sp)
  802620:	dc400117 	ldw	r17,4(sp)
  802624:	dc000017 	ldw	r16,0(sp)
  802628:	dec00804 	addi	sp,sp,32
  80262c:	f800283a 	ret
  802630:	20fff41e 	bne	r4,r3,802604 <_fpadd_parts+0x1c8>
  802634:	31000015 	stw	r4,0(r6)
  802638:	98800117 	ldw	r2,4(r19)
  80263c:	30800115 	stw	r2,4(r6)
  802640:	98c00217 	ldw	r3,8(r19)
  802644:	30c00215 	stw	r3,8(r6)
  802648:	98800317 	ldw	r2,12(r19)
  80264c:	30800315 	stw	r2,12(r6)
  802650:	98c00417 	ldw	r3,16(r19)
  802654:	30c00415 	stw	r3,16(r6)
  802658:	98800117 	ldw	r2,4(r19)
  80265c:	28c00117 	ldw	r3,4(r5)
  802660:	3027883a 	mov	r19,r6
  802664:	10c4703a 	and	r2,r2,r3
  802668:	30800115 	stw	r2,4(r6)
  80266c:	003fe506 	br	802604 <_fpadd_parts+0x1c8>
  802670:	1dc02616 	blt	r3,r23,80270c <_fpadd_parts+0x2d0>
  802674:	0023883a 	mov	r17,zero
  802678:	182f883a 	mov	r23,r3
  80267c:	0025883a 	mov	r18,zero
  802680:	003fa806 	br	802524 <_fpadd_parts+0xe8>
  802684:	a827883a 	mov	r19,r21
  802688:	003fde06 	br	802604 <_fpadd_parts+0x1c8>
  80268c:	01800044 	movi	r6,1
  802690:	500497fa 	slli	r2,r10,31
  802694:	4808d07a 	srli	r4,r9,1
  802698:	518ad83a 	srl	r5,r10,r6
  80269c:	a2000217 	ldw	r8,8(r20)
  8026a0:	1108b03a 	or	r4,r2,r4
  8026a4:	0007883a 	mov	r3,zero
  8026a8:	4984703a 	and	r2,r9,r6
  8026ac:	208cb03a 	or	r6,r4,r2
  8026b0:	28ceb03a 	or	r7,r5,r3
  8026b4:	42000044 	addi	r8,r8,1
  8026b8:	a027883a 	mov	r19,r20
  8026bc:	a1c00415 	stw	r7,16(r20)
  8026c0:	a2000215 	stw	r8,8(r20)
  8026c4:	a1800315 	stw	r6,12(r20)
  8026c8:	003fce06 	br	802604 <_fpadd_parts+0x1c8>
  8026cc:	8bc5c83a 	sub	r2,r17,r15
  8026d0:	8889803a 	cmpltu	r4,r17,r2
  8026d4:	9407c83a 	sub	r3,r18,r16
  8026d8:	1909c83a 	sub	r4,r3,r4
  8026dc:	100d883a 	mov	r6,r2
  8026e0:	200f883a 	mov	r7,r4
  8026e4:	003f9906 	br	80254c <_fpadd_parts+0x110>
  8026e8:	7c45883a 	add	r2,r15,r17
  8026ec:	13c9803a 	cmpltu	r4,r2,r15
  8026f0:	8487883a 	add	r3,r16,r18
  8026f4:	20c9883a 	add	r4,r4,r3
  8026f8:	a1400115 	stw	r5,4(r20)
  8026fc:	a5c00215 	stw	r23,8(r20)
  802700:	a0800315 	stw	r2,12(r20)
  802704:	a1000415 	stw	r4,16(r20)
  802708:	003fb606 	br	8025e4 <_fpadd_parts+0x1a8>
  80270c:	001f883a 	mov	r15,zero
  802710:	0021883a 	mov	r16,zero
  802714:	003f8306 	br	802524 <_fpadd_parts+0xe8>
  802718:	018dc83a 	sub	r6,zero,r6
  80271c:	003f6706 	br	8024bc <_fpadd_parts+0x80>
  802720:	00bfff84 	movi	r2,-2
  802724:	117faf36 	bltu	r2,r5,8025e4 <_fpadd_parts+0x1a8>
  802728:	003f9806 	br	80258c <_fpadd_parts+0x150>
  80272c:	0005883a 	mov	r2,zero
  802730:	1189c83a 	sub	r4,r2,r6
  802734:	1105803a 	cmpltu	r2,r2,r4
  802738:	01cbc83a 	sub	r5,zero,r7
  80273c:	2885c83a 	sub	r2,r5,r2
  802740:	01800044 	movi	r6,1
  802744:	a1800115 	stw	r6,4(r20)
  802748:	a5c00215 	stw	r23,8(r20)
  80274c:	a1000315 	stw	r4,12(r20)
  802750:	a0800415 	stw	r2,16(r20)
  802754:	003f8206 	br	802560 <_fpadd_parts+0x124>
  802758:	203f7226 	beq	r4,zero,802524 <_fpadd_parts+0xe8>
  80275c:	35bff804 	addi	r22,r6,-32
  802760:	b9af883a 	add	r23,r23,r6
  802764:	b0003116 	blt	r22,zero,80282c <_fpadd_parts+0x3f0>
  802768:	959ad83a 	srl	r13,r18,r22
  80276c:	001d883a 	mov	r14,zero
  802770:	000f883a 	mov	r7,zero
  802774:	01000044 	movi	r4,1
  802778:	0011883a 	mov	r8,zero
  80277c:	b0002516 	blt	r22,zero,802814 <_fpadd_parts+0x3d8>
  802780:	2594983a 	sll	r10,r4,r22
  802784:	0013883a 	mov	r9,zero
  802788:	00bfffc4 	movi	r2,-1
  80278c:	4889883a 	add	r4,r9,r2
  802790:	508b883a 	add	r5,r10,r2
  802794:	224d803a 	cmpltu	r6,r4,r9
  802798:	314b883a 	add	r5,r6,r5
  80279c:	8904703a 	and	r2,r17,r4
  8027a0:	9146703a 	and	r3,r18,r5
  8027a4:	10c4b03a 	or	r2,r2,r3
  8027a8:	10000226 	beq	r2,zero,8027b4 <_fpadd_parts+0x378>
  8027ac:	01c00044 	movi	r7,1
  8027b0:	0011883a 	mov	r8,zero
  8027b4:	69e2b03a 	or	r17,r13,r7
  8027b8:	7224b03a 	or	r18,r14,r8
  8027bc:	003f5906 	br	802524 <_fpadd_parts+0xe8>
  8027c0:	8407883a 	add	r3,r16,r16
  8027c4:	008007c4 	movi	r2,31
  8027c8:	1185c83a 	sub	r2,r2,r6
  8027cc:	1886983a 	sll	r3,r3,r2
  8027d0:	7996d83a 	srl	r11,r15,r6
  8027d4:	8198d83a 	srl	r12,r16,r6
  8027d8:	1ad6b03a 	or	r11,r3,r11
  8027dc:	003f3e06 	br	8024d8 <_fpadd_parts+0x9c>
  8027e0:	2006d07a 	srli	r3,r4,1
  8027e4:	008007c4 	movi	r2,31
  8027e8:	1185c83a 	sub	r2,r2,r6
  8027ec:	1890d83a 	srl	r8,r3,r2
  8027f0:	218e983a 	sll	r7,r4,r6
  8027f4:	003f3e06 	br	8024f0 <_fpadd_parts+0xb4>
  8027f8:	113f821e 	bne	r2,r4,802604 <_fpadd_parts+0x1c8>
  8027fc:	28c00117 	ldw	r3,4(r5)
  802800:	98800117 	ldw	r2,4(r19)
  802804:	10ff7f26 	beq	r2,r3,802604 <_fpadd_parts+0x1c8>
  802808:	04c020b4 	movhi	r19,130
  80280c:	9cf11404 	addi	r19,r19,-15280
  802810:	003f7c06 	br	802604 <_fpadd_parts+0x1c8>
  802814:	2006d07a 	srli	r3,r4,1
  802818:	008007c4 	movi	r2,31
  80281c:	1185c83a 	sub	r2,r2,r6
  802820:	1894d83a 	srl	r10,r3,r2
  802824:	2192983a 	sll	r9,r4,r6
  802828:	003fd706 	br	802788 <_fpadd_parts+0x34c>
  80282c:	9487883a 	add	r3,r18,r18
  802830:	008007c4 	movi	r2,31
  802834:	1185c83a 	sub	r2,r2,r6
  802838:	1886983a 	sll	r3,r3,r2
  80283c:	899ad83a 	srl	r13,r17,r6
  802840:	919cd83a 	srl	r14,r18,r6
  802844:	1b5ab03a 	or	r13,r3,r13
  802848:	003fc906 	br	802770 <_fpadd_parts+0x334>

0080284c <__subdf3>:
  80284c:	deffea04 	addi	sp,sp,-88
  802850:	dcc01415 	stw	r19,80(sp)
  802854:	dcc00404 	addi	r19,sp,16
  802858:	2011883a 	mov	r8,r4
  80285c:	2813883a 	mov	r9,r5
  802860:	dc401315 	stw	r17,76(sp)
  802864:	d809883a 	mov	r4,sp
  802868:	980b883a 	mov	r5,r19
  80286c:	dc400904 	addi	r17,sp,36
  802870:	dfc01515 	stw	ra,84(sp)
  802874:	da400115 	stw	r9,4(sp)
  802878:	d9c00315 	stw	r7,12(sp)
  80287c:	da000015 	stw	r8,0(sp)
  802880:	d9800215 	stw	r6,8(sp)
  802884:	08037800 	call	803780 <__unpack_d>
  802888:	d9000204 	addi	r4,sp,8
  80288c:	880b883a 	mov	r5,r17
  802890:	08037800 	call	803780 <__unpack_d>
  802894:	d8800a17 	ldw	r2,40(sp)
  802898:	880b883a 	mov	r5,r17
  80289c:	9809883a 	mov	r4,r19
  8028a0:	d9800e04 	addi	r6,sp,56
  8028a4:	1080005c 	xori	r2,r2,1
  8028a8:	d8800a15 	stw	r2,40(sp)
  8028ac:	080243c0 	call	80243c <_fpadd_parts>
  8028b0:	1009883a 	mov	r4,r2
  8028b4:	080346c0 	call	80346c <__pack_d>
  8028b8:	dfc01517 	ldw	ra,84(sp)
  8028bc:	dcc01417 	ldw	r19,80(sp)
  8028c0:	dc401317 	ldw	r17,76(sp)
  8028c4:	dec01604 	addi	sp,sp,88
  8028c8:	f800283a 	ret

008028cc <__adddf3>:
  8028cc:	deffea04 	addi	sp,sp,-88
  8028d0:	dcc01415 	stw	r19,80(sp)
  8028d4:	dcc00404 	addi	r19,sp,16
  8028d8:	2011883a 	mov	r8,r4
  8028dc:	2813883a 	mov	r9,r5
  8028e0:	dc401315 	stw	r17,76(sp)
  8028e4:	d809883a 	mov	r4,sp
  8028e8:	980b883a 	mov	r5,r19
  8028ec:	dc400904 	addi	r17,sp,36
  8028f0:	dfc01515 	stw	ra,84(sp)
  8028f4:	da400115 	stw	r9,4(sp)
  8028f8:	d9c00315 	stw	r7,12(sp)
  8028fc:	da000015 	stw	r8,0(sp)
  802900:	d9800215 	stw	r6,8(sp)
  802904:	08037800 	call	803780 <__unpack_d>
  802908:	d9000204 	addi	r4,sp,8
  80290c:	880b883a 	mov	r5,r17
  802910:	08037800 	call	803780 <__unpack_d>
  802914:	d9800e04 	addi	r6,sp,56
  802918:	9809883a 	mov	r4,r19
  80291c:	880b883a 	mov	r5,r17
  802920:	080243c0 	call	80243c <_fpadd_parts>
  802924:	1009883a 	mov	r4,r2
  802928:	080346c0 	call	80346c <__pack_d>
  80292c:	dfc01517 	ldw	ra,84(sp)
  802930:	dcc01417 	ldw	r19,80(sp)
  802934:	dc401317 	ldw	r17,76(sp)
  802938:	dec01604 	addi	sp,sp,88
  80293c:	f800283a 	ret

00802940 <__muldf3>:
  802940:	deffe004 	addi	sp,sp,-128
  802944:	dc401815 	stw	r17,96(sp)
  802948:	dc400404 	addi	r17,sp,16
  80294c:	2011883a 	mov	r8,r4
  802950:	2813883a 	mov	r9,r5
  802954:	dc001715 	stw	r16,92(sp)
  802958:	d809883a 	mov	r4,sp
  80295c:	880b883a 	mov	r5,r17
  802960:	dc000904 	addi	r16,sp,36
  802964:	dfc01f15 	stw	ra,124(sp)
  802968:	da400115 	stw	r9,4(sp)
  80296c:	d9c00315 	stw	r7,12(sp)
  802970:	da000015 	stw	r8,0(sp)
  802974:	d9800215 	stw	r6,8(sp)
  802978:	ddc01e15 	stw	r23,120(sp)
  80297c:	dd801d15 	stw	r22,116(sp)
  802980:	dd401c15 	stw	r21,112(sp)
  802984:	dd001b15 	stw	r20,108(sp)
  802988:	dcc01a15 	stw	r19,104(sp)
  80298c:	dc801915 	stw	r18,100(sp)
  802990:	08037800 	call	803780 <__unpack_d>
  802994:	d9000204 	addi	r4,sp,8
  802998:	800b883a 	mov	r5,r16
  80299c:	08037800 	call	803780 <__unpack_d>
  8029a0:	d9000417 	ldw	r4,16(sp)
  8029a4:	00800044 	movi	r2,1
  8029a8:	1100102e 	bgeu	r2,r4,8029ec <__muldf3+0xac>
  8029ac:	d8c00917 	ldw	r3,36(sp)
  8029b0:	10c0062e 	bgeu	r2,r3,8029cc <__muldf3+0x8c>
  8029b4:	00800104 	movi	r2,4
  8029b8:	20800a26 	beq	r4,r2,8029e4 <__muldf3+0xa4>
  8029bc:	1880cc26 	beq	r3,r2,802cf0 <__muldf3+0x3b0>
  8029c0:	00800084 	movi	r2,2
  8029c4:	20800926 	beq	r4,r2,8029ec <__muldf3+0xac>
  8029c8:	1880191e 	bne	r3,r2,802a30 <__muldf3+0xf0>
  8029cc:	d8c00a17 	ldw	r3,40(sp)
  8029d0:	d8800517 	ldw	r2,20(sp)
  8029d4:	8009883a 	mov	r4,r16
  8029d8:	10c4c03a 	cmpne	r2,r2,r3
  8029dc:	d8800a15 	stw	r2,40(sp)
  8029e0:	00000706 	br	802a00 <__muldf3+0xc0>
  8029e4:	00800084 	movi	r2,2
  8029e8:	1880c326 	beq	r3,r2,802cf8 <__muldf3+0x3b8>
  8029ec:	d8800517 	ldw	r2,20(sp)
  8029f0:	d8c00a17 	ldw	r3,40(sp)
  8029f4:	8809883a 	mov	r4,r17
  8029f8:	10c4c03a 	cmpne	r2,r2,r3
  8029fc:	d8800515 	stw	r2,20(sp)
  802a00:	080346c0 	call	80346c <__pack_d>
  802a04:	dfc01f17 	ldw	ra,124(sp)
  802a08:	ddc01e17 	ldw	r23,120(sp)
  802a0c:	dd801d17 	ldw	r22,116(sp)
  802a10:	dd401c17 	ldw	r21,112(sp)
  802a14:	dd001b17 	ldw	r20,108(sp)
  802a18:	dcc01a17 	ldw	r19,104(sp)
  802a1c:	dc801917 	ldw	r18,100(sp)
  802a20:	dc401817 	ldw	r17,96(sp)
  802a24:	dc001717 	ldw	r16,92(sp)
  802a28:	dec02004 	addi	sp,sp,128
  802a2c:	f800283a 	ret
  802a30:	dd800717 	ldw	r22,28(sp)
  802a34:	dc800c17 	ldw	r18,48(sp)
  802a38:	002b883a 	mov	r21,zero
  802a3c:	0023883a 	mov	r17,zero
  802a40:	a80b883a 	mov	r5,r21
  802a44:	b00d883a 	mov	r6,r22
  802a48:	880f883a 	mov	r7,r17
  802a4c:	ddc00817 	ldw	r23,32(sp)
  802a50:	dcc00d17 	ldw	r19,52(sp)
  802a54:	9009883a 	mov	r4,r18
  802a58:	08021e40 	call	8021e4 <__muldi3>
  802a5c:	001b883a 	mov	r13,zero
  802a60:	680f883a 	mov	r7,r13
  802a64:	b009883a 	mov	r4,r22
  802a68:	000b883a 	mov	r5,zero
  802a6c:	980d883a 	mov	r6,r19
  802a70:	b82d883a 	mov	r22,r23
  802a74:	002f883a 	mov	r23,zero
  802a78:	db401615 	stw	r13,88(sp)
  802a7c:	d8801315 	stw	r2,76(sp)
  802a80:	d8c01415 	stw	r3,80(sp)
  802a84:	dcc01515 	stw	r19,84(sp)
  802a88:	08021e40 	call	8021e4 <__muldi3>
  802a8c:	b00d883a 	mov	r6,r22
  802a90:	000b883a 	mov	r5,zero
  802a94:	9009883a 	mov	r4,r18
  802a98:	b80f883a 	mov	r7,r23
  802a9c:	1021883a 	mov	r16,r2
  802aa0:	1823883a 	mov	r17,r3
  802aa4:	08021e40 	call	8021e4 <__muldi3>
  802aa8:	8085883a 	add	r2,r16,r2
  802aac:	140d803a 	cmpltu	r6,r2,r16
  802ab0:	88c7883a 	add	r3,r17,r3
  802ab4:	30cd883a 	add	r6,r6,r3
  802ab8:	1029883a 	mov	r20,r2
  802abc:	302b883a 	mov	r21,r6
  802ac0:	da801317 	ldw	r10,76(sp)
  802ac4:	dac01417 	ldw	r11,80(sp)
  802ac8:	db001517 	ldw	r12,84(sp)
  802acc:	db401617 	ldw	r13,88(sp)
  802ad0:	3440612e 	bgeu	r6,r17,802c58 <__muldf3+0x318>
  802ad4:	0009883a 	mov	r4,zero
  802ad8:	5105883a 	add	r2,r10,r4
  802adc:	128d803a 	cmpltu	r6,r2,r10
  802ae0:	5d07883a 	add	r3,r11,r20
  802ae4:	30cd883a 	add	r6,r6,r3
  802ae8:	0021883a 	mov	r16,zero
  802aec:	04400044 	movi	r17,1
  802af0:	1025883a 	mov	r18,r2
  802af4:	3027883a 	mov	r19,r6
  802af8:	32c06236 	bltu	r6,r11,802c84 <__muldf3+0x344>
  802afc:	59807a26 	beq	r11,r6,802ce8 <__muldf3+0x3a8>
  802b00:	680b883a 	mov	r5,r13
  802b04:	b80f883a 	mov	r7,r23
  802b08:	6009883a 	mov	r4,r12
  802b0c:	b00d883a 	mov	r6,r22
  802b10:	08021e40 	call	8021e4 <__muldi3>
  802b14:	1009883a 	mov	r4,r2
  802b18:	000f883a 	mov	r7,zero
  802b1c:	1545883a 	add	r2,r2,r21
  802b20:	1111803a 	cmpltu	r8,r2,r4
  802b24:	19c7883a 	add	r3,r3,r7
  802b28:	40c7883a 	add	r3,r8,r3
  802b2c:	88cb883a 	add	r5,r17,r3
  802b30:	d8c00617 	ldw	r3,24(sp)
  802b34:	8089883a 	add	r4,r16,r2
  802b38:	d8800b17 	ldw	r2,44(sp)
  802b3c:	18c00104 	addi	r3,r3,4
  802b40:	240d803a 	cmpltu	r6,r4,r16
  802b44:	10c7883a 	add	r3,r2,r3
  802b48:	2013883a 	mov	r9,r4
  802b4c:	d8800a17 	ldw	r2,40(sp)
  802b50:	d9000517 	ldw	r4,20(sp)
  802b54:	314d883a 	add	r6,r6,r5
  802b58:	3015883a 	mov	r10,r6
  802b5c:	2088c03a 	cmpne	r4,r4,r2
  802b60:	00880034 	movhi	r2,8192
  802b64:	10bfffc4 	addi	r2,r2,-1
  802b68:	d9000f15 	stw	r4,60(sp)
  802b6c:	d8c01015 	stw	r3,64(sp)
  802b70:	1180162e 	bgeu	r2,r6,802bcc <__muldf3+0x28c>
  802b74:	1811883a 	mov	r8,r3
  802b78:	101f883a 	mov	r15,r2
  802b7c:	980497fa 	slli	r2,r19,31
  802b80:	9016d07a 	srli	r11,r18,1
  802b84:	500697fa 	slli	r3,r10,31
  802b88:	480cd07a 	srli	r6,r9,1
  802b8c:	500ed07a 	srli	r7,r10,1
  802b90:	12d6b03a 	or	r11,r2,r11
  802b94:	00800044 	movi	r2,1
  802b98:	198cb03a 	or	r6,r3,r6
  802b9c:	4888703a 	and	r4,r9,r2
  802ba0:	9818d07a 	srli	r12,r19,1
  802ba4:	001b883a 	mov	r13,zero
  802ba8:	03a00034 	movhi	r14,32768
  802bac:	3013883a 	mov	r9,r6
  802bb0:	3815883a 	mov	r10,r7
  802bb4:	4091883a 	add	r8,r8,r2
  802bb8:	20000226 	beq	r4,zero,802bc4 <__muldf3+0x284>
  802bbc:	5b64b03a 	or	r18,r11,r13
  802bc0:	63a6b03a 	or	r19,r12,r14
  802bc4:	7abfed36 	bltu	r15,r10,802b7c <__muldf3+0x23c>
  802bc8:	da001015 	stw	r8,64(sp)
  802bcc:	00840034 	movhi	r2,4096
  802bd0:	10bfffc4 	addi	r2,r2,-1
  802bd4:	12801436 	bltu	r2,r10,802c28 <__muldf3+0x2e8>
  802bd8:	da001017 	ldw	r8,64(sp)
  802bdc:	101f883a 	mov	r15,r2
  802be0:	4a45883a 	add	r2,r9,r9
  802be4:	124d803a 	cmpltu	r6,r2,r9
  802be8:	5287883a 	add	r3,r10,r10
  802bec:	9497883a 	add	r11,r18,r18
  802bf0:	5c8f803a 	cmpltu	r7,r11,r18
  802bf4:	9cd9883a 	add	r12,r19,r19
  802bf8:	01000044 	movi	r4,1
  802bfc:	30cd883a 	add	r6,r6,r3
  802c00:	3b0f883a 	add	r7,r7,r12
  802c04:	423fffc4 	addi	r8,r8,-1
  802c08:	1013883a 	mov	r9,r2
  802c0c:	3015883a 	mov	r10,r6
  802c10:	111ab03a 	or	r13,r2,r4
  802c14:	98003016 	blt	r19,zero,802cd8 <__muldf3+0x398>
  802c18:	5825883a 	mov	r18,r11
  802c1c:	3827883a 	mov	r19,r7
  802c20:	7abfef2e 	bgeu	r15,r10,802be0 <__muldf3+0x2a0>
  802c24:	da001015 	stw	r8,64(sp)
  802c28:	00803fc4 	movi	r2,255
  802c2c:	488e703a 	and	r7,r9,r2
  802c30:	00802004 	movi	r2,128
  802c34:	0007883a 	mov	r3,zero
  802c38:	0011883a 	mov	r8,zero
  802c3c:	38801826 	beq	r7,r2,802ca0 <__muldf3+0x360>
  802c40:	008000c4 	movi	r2,3
  802c44:	d9000e04 	addi	r4,sp,56
  802c48:	da801215 	stw	r10,72(sp)
  802c4c:	d8800e15 	stw	r2,56(sp)
  802c50:	da401115 	stw	r9,68(sp)
  802c54:	003f6a06 	br	802a00 <__muldf3+0xc0>
  802c58:	89802126 	beq	r17,r6,802ce0 <__muldf3+0x3a0>
  802c5c:	0009883a 	mov	r4,zero
  802c60:	5105883a 	add	r2,r10,r4
  802c64:	128d803a 	cmpltu	r6,r2,r10
  802c68:	5d07883a 	add	r3,r11,r20
  802c6c:	30cd883a 	add	r6,r6,r3
  802c70:	0021883a 	mov	r16,zero
  802c74:	0023883a 	mov	r17,zero
  802c78:	1025883a 	mov	r18,r2
  802c7c:	3027883a 	mov	r19,r6
  802c80:	32ff9e2e 	bgeu	r6,r11,802afc <__muldf3+0x1bc>
  802c84:	00800044 	movi	r2,1
  802c88:	8089883a 	add	r4,r16,r2
  802c8c:	240d803a 	cmpltu	r6,r4,r16
  802c90:	344d883a 	add	r6,r6,r17
  802c94:	2021883a 	mov	r16,r4
  802c98:	3023883a 	mov	r17,r6
  802c9c:	003f9806 	br	802b00 <__muldf3+0x1c0>
  802ca0:	403fe71e 	bne	r8,zero,802c40 <__muldf3+0x300>
  802ca4:	01004004 	movi	r4,256
  802ca8:	4904703a 	and	r2,r9,r4
  802cac:	10c4b03a 	or	r2,r2,r3
  802cb0:	103fe31e 	bne	r2,zero,802c40 <__muldf3+0x300>
  802cb4:	94c4b03a 	or	r2,r18,r19
  802cb8:	103fe126 	beq	r2,zero,802c40 <__muldf3+0x300>
  802cbc:	49c5883a 	add	r2,r9,r7
  802cc0:	1251803a 	cmpltu	r8,r2,r9
  802cc4:	4291883a 	add	r8,r8,r10
  802cc8:	013fc004 	movi	r4,-256
  802ccc:	1112703a 	and	r9,r2,r4
  802cd0:	4015883a 	mov	r10,r8
  802cd4:	003fda06 	br	802c40 <__muldf3+0x300>
  802cd8:	6813883a 	mov	r9,r13
  802cdc:	003fce06 	br	802c18 <__muldf3+0x2d8>
  802ce0:	143f7c36 	bltu	r2,r16,802ad4 <__muldf3+0x194>
  802ce4:	003fdd06 	br	802c5c <__muldf3+0x31c>
  802ce8:	12bf852e 	bgeu	r2,r10,802b00 <__muldf3+0x1c0>
  802cec:	003fe506 	br	802c84 <__muldf3+0x344>
  802cf0:	00800084 	movi	r2,2
  802cf4:	20bf351e 	bne	r4,r2,8029cc <__muldf3+0x8c>
  802cf8:	010020b4 	movhi	r4,130
  802cfc:	21311404 	addi	r4,r4,-15280
  802d00:	003f3f06 	br	802a00 <__muldf3+0xc0>

00802d04 <__divdf3>:
  802d04:	deffed04 	addi	sp,sp,-76
  802d08:	dcc01115 	stw	r19,68(sp)
  802d0c:	dcc00404 	addi	r19,sp,16
  802d10:	2011883a 	mov	r8,r4
  802d14:	2813883a 	mov	r9,r5
  802d18:	dc000e15 	stw	r16,56(sp)
  802d1c:	d809883a 	mov	r4,sp
  802d20:	980b883a 	mov	r5,r19
  802d24:	dc000904 	addi	r16,sp,36
  802d28:	dfc01215 	stw	ra,72(sp)
  802d2c:	da400115 	stw	r9,4(sp)
  802d30:	d9c00315 	stw	r7,12(sp)
  802d34:	da000015 	stw	r8,0(sp)
  802d38:	d9800215 	stw	r6,8(sp)
  802d3c:	dc801015 	stw	r18,64(sp)
  802d40:	dc400f15 	stw	r17,60(sp)
  802d44:	08037800 	call	803780 <__unpack_d>
  802d48:	d9000204 	addi	r4,sp,8
  802d4c:	800b883a 	mov	r5,r16
  802d50:	08037800 	call	803780 <__unpack_d>
  802d54:	d9000417 	ldw	r4,16(sp)
  802d58:	00800044 	movi	r2,1
  802d5c:	11000b2e 	bgeu	r2,r4,802d8c <__divdf3+0x88>
  802d60:	d9400917 	ldw	r5,36(sp)
  802d64:	1140762e 	bgeu	r2,r5,802f40 <__divdf3+0x23c>
  802d68:	d8800517 	ldw	r2,20(sp)
  802d6c:	d8c00a17 	ldw	r3,40(sp)
  802d70:	01800104 	movi	r6,4
  802d74:	10c4f03a 	xor	r2,r2,r3
  802d78:	d8800515 	stw	r2,20(sp)
  802d7c:	21800226 	beq	r4,r6,802d88 <__divdf3+0x84>
  802d80:	00800084 	movi	r2,2
  802d84:	2080141e 	bne	r4,r2,802dd8 <__divdf3+0xd4>
  802d88:	29000926 	beq	r5,r4,802db0 <__divdf3+0xac>
  802d8c:	9809883a 	mov	r4,r19
  802d90:	080346c0 	call	80346c <__pack_d>
  802d94:	dfc01217 	ldw	ra,72(sp)
  802d98:	dcc01117 	ldw	r19,68(sp)
  802d9c:	dc801017 	ldw	r18,64(sp)
  802da0:	dc400f17 	ldw	r17,60(sp)
  802da4:	dc000e17 	ldw	r16,56(sp)
  802da8:	dec01304 	addi	sp,sp,76
  802dac:	f800283a 	ret
  802db0:	010020b4 	movhi	r4,130
  802db4:	21311404 	addi	r4,r4,-15280
  802db8:	080346c0 	call	80346c <__pack_d>
  802dbc:	dfc01217 	ldw	ra,72(sp)
  802dc0:	dcc01117 	ldw	r19,68(sp)
  802dc4:	dc801017 	ldw	r18,64(sp)
  802dc8:	dc400f17 	ldw	r17,60(sp)
  802dcc:	dc000e17 	ldw	r16,56(sp)
  802dd0:	dec01304 	addi	sp,sp,76
  802dd4:	f800283a 	ret
  802dd8:	29805b26 	beq	r5,r6,802f48 <__divdf3+0x244>
  802ddc:	28802d26 	beq	r5,r2,802e94 <__divdf3+0x190>
  802de0:	d8c00617 	ldw	r3,24(sp)
  802de4:	d8800b17 	ldw	r2,44(sp)
  802de8:	d9c00817 	ldw	r7,32(sp)
  802dec:	dc400d17 	ldw	r17,52(sp)
  802df0:	188bc83a 	sub	r5,r3,r2
  802df4:	d9800717 	ldw	r6,28(sp)
  802df8:	dc000c17 	ldw	r16,48(sp)
  802dfc:	d9400615 	stw	r5,24(sp)
  802e00:	3c403836 	bltu	r7,r17,802ee4 <__divdf3+0x1e0>
  802e04:	89c03626 	beq	r17,r7,802ee0 <__divdf3+0x1dc>
  802e08:	0015883a 	mov	r10,zero
  802e0c:	001d883a 	mov	r14,zero
  802e10:	02c40034 	movhi	r11,4096
  802e14:	001f883a 	mov	r15,zero
  802e18:	003f883a 	mov	ra,zero
  802e1c:	04800f44 	movi	r18,61
  802e20:	00000f06 	br	802e60 <__divdf3+0x15c>
  802e24:	601d883a 	mov	r14,r12
  802e28:	681f883a 	mov	r15,r13
  802e2c:	400d883a 	mov	r6,r8
  802e30:	100f883a 	mov	r7,r2
  802e34:	3191883a 	add	r8,r6,r6
  802e38:	5808d07a 	srli	r4,r11,1
  802e3c:	4185803a 	cmpltu	r2,r8,r6
  802e40:	39d3883a 	add	r9,r7,r7
  802e44:	28c6b03a 	or	r3,r5,r3
  802e48:	1245883a 	add	r2,r2,r9
  802e4c:	1815883a 	mov	r10,r3
  802e50:	2017883a 	mov	r11,r4
  802e54:	400d883a 	mov	r6,r8
  802e58:	100f883a 	mov	r7,r2
  802e5c:	fc801726 	beq	ra,r18,802ebc <__divdf3+0x1b8>
  802e60:	580a97fa 	slli	r5,r11,31
  802e64:	5006d07a 	srli	r3,r10,1
  802e68:	ffc00044 	addi	ra,ra,1
  802e6c:	3c7ff136 	bltu	r7,r17,802e34 <__divdf3+0x130>
  802e70:	3411c83a 	sub	r8,r6,r16
  802e74:	3205803a 	cmpltu	r2,r6,r8
  802e78:	3c53c83a 	sub	r9,r7,r17
  802e7c:	7298b03a 	or	r12,r14,r10
  802e80:	7adab03a 	or	r13,r15,r11
  802e84:	4885c83a 	sub	r2,r9,r2
  802e88:	89ffe61e 	bne	r17,r7,802e24 <__divdf3+0x120>
  802e8c:	343fe936 	bltu	r6,r16,802e34 <__divdf3+0x130>
  802e90:	003fe406 	br	802e24 <__divdf3+0x120>
  802e94:	9809883a 	mov	r4,r19
  802e98:	d9800415 	stw	r6,16(sp)
  802e9c:	080346c0 	call	80346c <__pack_d>
  802ea0:	dfc01217 	ldw	ra,72(sp)
  802ea4:	dcc01117 	ldw	r19,68(sp)
  802ea8:	dc801017 	ldw	r18,64(sp)
  802eac:	dc400f17 	ldw	r17,60(sp)
  802eb0:	dc000e17 	ldw	r16,56(sp)
  802eb4:	dec01304 	addi	sp,sp,76
  802eb8:	f800283a 	ret
  802ebc:	00803fc4 	movi	r2,255
  802ec0:	7090703a 	and	r8,r14,r2
  802ec4:	00802004 	movi	r2,128
  802ec8:	0007883a 	mov	r3,zero
  802ecc:	0013883a 	mov	r9,zero
  802ed0:	40800d26 	beq	r8,r2,802f08 <__divdf3+0x204>
  802ed4:	dbc00815 	stw	r15,32(sp)
  802ed8:	db800715 	stw	r14,28(sp)
  802edc:	003fab06 	br	802d8c <__divdf3+0x88>
  802ee0:	343fc92e 	bgeu	r6,r16,802e08 <__divdf3+0x104>
  802ee4:	3185883a 	add	r2,r6,r6
  802ee8:	1189803a 	cmpltu	r4,r2,r6
  802eec:	39c7883a 	add	r3,r7,r7
  802ef0:	20c9883a 	add	r4,r4,r3
  802ef4:	297fffc4 	addi	r5,r5,-1
  802ef8:	100d883a 	mov	r6,r2
  802efc:	200f883a 	mov	r7,r4
  802f00:	d9400615 	stw	r5,24(sp)
  802f04:	003fc006 	br	802e08 <__divdf3+0x104>
  802f08:	483ff21e 	bne	r9,zero,802ed4 <__divdf3+0x1d0>
  802f0c:	01004004 	movi	r4,256
  802f10:	7104703a 	and	r2,r14,r4
  802f14:	10c4b03a 	or	r2,r2,r3
  802f18:	103fee1e 	bne	r2,zero,802ed4 <__divdf3+0x1d0>
  802f1c:	31c4b03a 	or	r2,r6,r7
  802f20:	103fec26 	beq	r2,zero,802ed4 <__divdf3+0x1d0>
  802f24:	7205883a 	add	r2,r14,r8
  802f28:	1391803a 	cmpltu	r8,r2,r14
  802f2c:	43d1883a 	add	r8,r8,r15
  802f30:	013fc004 	movi	r4,-256
  802f34:	111c703a 	and	r14,r2,r4
  802f38:	401f883a 	mov	r15,r8
  802f3c:	003fe506 	br	802ed4 <__divdf3+0x1d0>
  802f40:	8009883a 	mov	r4,r16
  802f44:	003f9206 	br	802d90 <__divdf3+0x8c>
  802f48:	9809883a 	mov	r4,r19
  802f4c:	d8000715 	stw	zero,28(sp)
  802f50:	d8000815 	stw	zero,32(sp)
  802f54:	d8000615 	stw	zero,24(sp)
  802f58:	003f8d06 	br	802d90 <__divdf3+0x8c>

00802f5c <__ltdf2>:
  802f5c:	deffef04 	addi	sp,sp,-68
  802f60:	dc400f15 	stw	r17,60(sp)
  802f64:	dc400404 	addi	r17,sp,16
  802f68:	2005883a 	mov	r2,r4
  802f6c:	2807883a 	mov	r3,r5
  802f70:	dc000e15 	stw	r16,56(sp)
  802f74:	d809883a 	mov	r4,sp
  802f78:	880b883a 	mov	r5,r17
  802f7c:	dc000904 	addi	r16,sp,36
  802f80:	d8c00115 	stw	r3,4(sp)
  802f84:	d8800015 	stw	r2,0(sp)
  802f88:	d9800215 	stw	r6,8(sp)
  802f8c:	dfc01015 	stw	ra,64(sp)
  802f90:	d9c00315 	stw	r7,12(sp)
  802f94:	08037800 	call	803780 <__unpack_d>
  802f98:	d9000204 	addi	r4,sp,8
  802f9c:	800b883a 	mov	r5,r16
  802fa0:	08037800 	call	803780 <__unpack_d>
  802fa4:	d8800417 	ldw	r2,16(sp)
  802fa8:	00c00044 	movi	r3,1
  802fac:	180d883a 	mov	r6,r3
  802fb0:	1880062e 	bgeu	r3,r2,802fcc <__ltdf2+0x70>
  802fb4:	d8800917 	ldw	r2,36(sp)
  802fb8:	8809883a 	mov	r4,r17
  802fbc:	800b883a 	mov	r5,r16
  802fc0:	1880022e 	bgeu	r3,r2,802fcc <__ltdf2+0x70>
  802fc4:	08038b80 	call	8038b8 <__fpcmp_parts_d>
  802fc8:	100d883a 	mov	r6,r2
  802fcc:	3005883a 	mov	r2,r6
  802fd0:	dfc01017 	ldw	ra,64(sp)
  802fd4:	dc400f17 	ldw	r17,60(sp)
  802fd8:	dc000e17 	ldw	r16,56(sp)
  802fdc:	dec01104 	addi	sp,sp,68
  802fe0:	f800283a 	ret

00802fe4 <__floatsidf>:
  802fe4:	2006d7fa 	srli	r3,r4,31
  802fe8:	defff604 	addi	sp,sp,-40
  802fec:	008000c4 	movi	r2,3
  802ff0:	dfc00915 	stw	ra,36(sp)
  802ff4:	dcc00815 	stw	r19,32(sp)
  802ff8:	dc800715 	stw	r18,28(sp)
  802ffc:	dc400615 	stw	r17,24(sp)
  803000:	dc000515 	stw	r16,20(sp)
  803004:	d8800015 	stw	r2,0(sp)
  803008:	d8c00115 	stw	r3,4(sp)
  80300c:	20000f1e 	bne	r4,zero,80304c <__floatsidf+0x68>
  803010:	00800084 	movi	r2,2
  803014:	d8800015 	stw	r2,0(sp)
  803018:	d809883a 	mov	r4,sp
  80301c:	080346c0 	call	80346c <__pack_d>
  803020:	1009883a 	mov	r4,r2
  803024:	180b883a 	mov	r5,r3
  803028:	2005883a 	mov	r2,r4
  80302c:	2807883a 	mov	r3,r5
  803030:	dfc00917 	ldw	ra,36(sp)
  803034:	dcc00817 	ldw	r19,32(sp)
  803038:	dc800717 	ldw	r18,28(sp)
  80303c:	dc400617 	ldw	r17,24(sp)
  803040:	dc000517 	ldw	r16,20(sp)
  803044:	dec00a04 	addi	sp,sp,40
  803048:	f800283a 	ret
  80304c:	00800f04 	movi	r2,60
  803050:	1807003a 	cmpeq	r3,r3,zero
  803054:	d8800215 	stw	r2,8(sp)
  803058:	18001126 	beq	r3,zero,8030a0 <__floatsidf+0xbc>
  80305c:	0027883a 	mov	r19,zero
  803060:	2025883a 	mov	r18,r4
  803064:	d9000315 	stw	r4,12(sp)
  803068:	dcc00415 	stw	r19,16(sp)
  80306c:	08033480 	call	803348 <__clzsi2>
  803070:	11000744 	addi	r4,r2,29
  803074:	013fe80e 	bge	zero,r4,803018 <__floatsidf+0x34>
  803078:	10bfff44 	addi	r2,r2,-3
  80307c:	10000c16 	blt	r2,zero,8030b0 <__floatsidf+0xcc>
  803080:	90a2983a 	sll	r17,r18,r2
  803084:	0021883a 	mov	r16,zero
  803088:	d8800217 	ldw	r2,8(sp)
  80308c:	dc400415 	stw	r17,16(sp)
  803090:	dc000315 	stw	r16,12(sp)
  803094:	1105c83a 	sub	r2,r2,r4
  803098:	d8800215 	stw	r2,8(sp)
  80309c:	003fde06 	br	803018 <__floatsidf+0x34>
  8030a0:	00a00034 	movhi	r2,32768
  8030a4:	20800a26 	beq	r4,r2,8030d0 <__floatsidf+0xec>
  8030a8:	0109c83a 	sub	r4,zero,r4
  8030ac:	003feb06 	br	80305c <__floatsidf+0x78>
  8030b0:	9006d07a 	srli	r3,r18,1
  8030b4:	008007c4 	movi	r2,31
  8030b8:	1105c83a 	sub	r2,r2,r4
  8030bc:	1886d83a 	srl	r3,r3,r2
  8030c0:	9922983a 	sll	r17,r19,r4
  8030c4:	9120983a 	sll	r16,r18,r4
  8030c8:	1c62b03a 	or	r17,r3,r17
  8030cc:	003fee06 	br	803088 <__floatsidf+0xa4>
  8030d0:	0009883a 	mov	r4,zero
  8030d4:	01707834 	movhi	r5,49632
  8030d8:	003fd306 	br	803028 <__floatsidf+0x44>

008030dc <__fixdfsi>:
  8030dc:	defff804 	addi	sp,sp,-32
  8030e0:	2005883a 	mov	r2,r4
  8030e4:	2807883a 	mov	r3,r5
  8030e8:	d809883a 	mov	r4,sp
  8030ec:	d9400204 	addi	r5,sp,8
  8030f0:	d8c00115 	stw	r3,4(sp)
  8030f4:	d8800015 	stw	r2,0(sp)
  8030f8:	dfc00715 	stw	ra,28(sp)
  8030fc:	08037800 	call	803780 <__unpack_d>
  803100:	d8c00217 	ldw	r3,8(sp)
  803104:	00800084 	movi	r2,2
  803108:	1880051e 	bne	r3,r2,803120 <__fixdfsi+0x44>
  80310c:	0007883a 	mov	r3,zero
  803110:	1805883a 	mov	r2,r3
  803114:	dfc00717 	ldw	ra,28(sp)
  803118:	dec00804 	addi	sp,sp,32
  80311c:	f800283a 	ret
  803120:	00800044 	movi	r2,1
  803124:	10fff92e 	bgeu	r2,r3,80310c <__fixdfsi+0x30>
  803128:	00800104 	movi	r2,4
  80312c:	18800426 	beq	r3,r2,803140 <__fixdfsi+0x64>
  803130:	d8c00417 	ldw	r3,16(sp)
  803134:	183ff516 	blt	r3,zero,80310c <__fixdfsi+0x30>
  803138:	00800784 	movi	r2,30
  80313c:	10c0080e 	bge	r2,r3,803160 <__fixdfsi+0x84>
  803140:	d8800317 	ldw	r2,12(sp)
  803144:	1000121e 	bne	r2,zero,803190 <__fixdfsi+0xb4>
  803148:	00e00034 	movhi	r3,32768
  80314c:	18ffffc4 	addi	r3,r3,-1
  803150:	1805883a 	mov	r2,r3
  803154:	dfc00717 	ldw	ra,28(sp)
  803158:	dec00804 	addi	sp,sp,32
  80315c:	f800283a 	ret
  803160:	00800f04 	movi	r2,60
  803164:	10d1c83a 	sub	r8,r2,r3
  803168:	40bff804 	addi	r2,r8,-32
  80316c:	d9800517 	ldw	r6,20(sp)
  803170:	d9c00617 	ldw	r7,24(sp)
  803174:	10000816 	blt	r2,zero,803198 <__fixdfsi+0xbc>
  803178:	3888d83a 	srl	r4,r7,r2
  80317c:	d8800317 	ldw	r2,12(sp)
  803180:	2007883a 	mov	r3,r4
  803184:	103fe226 	beq	r2,zero,803110 <__fixdfsi+0x34>
  803188:	0107c83a 	sub	r3,zero,r4
  80318c:	003fe006 	br	803110 <__fixdfsi+0x34>
  803190:	00e00034 	movhi	r3,32768
  803194:	003fde06 	br	803110 <__fixdfsi+0x34>
  803198:	39c7883a 	add	r3,r7,r7
  80319c:	008007c4 	movi	r2,31
  8031a0:	1205c83a 	sub	r2,r2,r8
  8031a4:	1886983a 	sll	r3,r3,r2
  8031a8:	3208d83a 	srl	r4,r6,r8
  8031ac:	1908b03a 	or	r4,r3,r4
  8031b0:	003ff206 	br	80317c <__fixdfsi+0xa0>

008031b4 <__floatunsidf>:
  8031b4:	defff204 	addi	sp,sp,-56
  8031b8:	dfc00d15 	stw	ra,52(sp)
  8031bc:	ddc00c15 	stw	r23,48(sp)
  8031c0:	dd800b15 	stw	r22,44(sp)
  8031c4:	dd400a15 	stw	r21,40(sp)
  8031c8:	dd000915 	stw	r20,36(sp)
  8031cc:	dcc00815 	stw	r19,32(sp)
  8031d0:	dc800715 	stw	r18,28(sp)
  8031d4:	dc400615 	stw	r17,24(sp)
  8031d8:	dc000515 	stw	r16,20(sp)
  8031dc:	d8000115 	stw	zero,4(sp)
  8031e0:	20000f1e 	bne	r4,zero,803220 <__floatunsidf+0x6c>
  8031e4:	00800084 	movi	r2,2
  8031e8:	d8800015 	stw	r2,0(sp)
  8031ec:	d809883a 	mov	r4,sp
  8031f0:	080346c0 	call	80346c <__pack_d>
  8031f4:	dfc00d17 	ldw	ra,52(sp)
  8031f8:	ddc00c17 	ldw	r23,48(sp)
  8031fc:	dd800b17 	ldw	r22,44(sp)
  803200:	dd400a17 	ldw	r21,40(sp)
  803204:	dd000917 	ldw	r20,36(sp)
  803208:	dcc00817 	ldw	r19,32(sp)
  80320c:	dc800717 	ldw	r18,28(sp)
  803210:	dc400617 	ldw	r17,24(sp)
  803214:	dc000517 	ldw	r16,20(sp)
  803218:	dec00e04 	addi	sp,sp,56
  80321c:	f800283a 	ret
  803220:	008000c4 	movi	r2,3
  803224:	00c00f04 	movi	r3,60
  803228:	002f883a 	mov	r23,zero
  80322c:	202d883a 	mov	r22,r4
  803230:	d8800015 	stw	r2,0(sp)
  803234:	d8c00215 	stw	r3,8(sp)
  803238:	d9000315 	stw	r4,12(sp)
  80323c:	ddc00415 	stw	r23,16(sp)
  803240:	08033480 	call	803348 <__clzsi2>
  803244:	12400744 	addi	r9,r2,29
  803248:	48000b16 	blt	r9,zero,803278 <__floatunsidf+0xc4>
  80324c:	483fe726 	beq	r9,zero,8031ec <__floatunsidf+0x38>
  803250:	10bfff44 	addi	r2,r2,-3
  803254:	10002e16 	blt	r2,zero,803310 <__floatunsidf+0x15c>
  803258:	b0a2983a 	sll	r17,r22,r2
  80325c:	0021883a 	mov	r16,zero
  803260:	d8800217 	ldw	r2,8(sp)
  803264:	dc400415 	stw	r17,16(sp)
  803268:	dc000315 	stw	r16,12(sp)
  80326c:	1245c83a 	sub	r2,r2,r9
  803270:	d8800215 	stw	r2,8(sp)
  803274:	003fdd06 	br	8031ec <__floatunsidf+0x38>
  803278:	0255c83a 	sub	r10,zero,r9
  80327c:	51bff804 	addi	r6,r10,-32
  803280:	30001b16 	blt	r6,zero,8032f0 <__floatunsidf+0x13c>
  803284:	b9a8d83a 	srl	r20,r23,r6
  803288:	002b883a 	mov	r21,zero
  80328c:	000f883a 	mov	r7,zero
  803290:	01000044 	movi	r4,1
  803294:	0011883a 	mov	r8,zero
  803298:	30002516 	blt	r6,zero,803330 <__floatunsidf+0x17c>
  80329c:	21a6983a 	sll	r19,r4,r6
  8032a0:	0025883a 	mov	r18,zero
  8032a4:	00bfffc4 	movi	r2,-1
  8032a8:	9089883a 	add	r4,r18,r2
  8032ac:	988b883a 	add	r5,r19,r2
  8032b0:	248d803a 	cmpltu	r6,r4,r18
  8032b4:	314b883a 	add	r5,r6,r5
  8032b8:	b104703a 	and	r2,r22,r4
  8032bc:	b946703a 	and	r3,r23,r5
  8032c0:	10c4b03a 	or	r2,r2,r3
  8032c4:	10000226 	beq	r2,zero,8032d0 <__floatunsidf+0x11c>
  8032c8:	01c00044 	movi	r7,1
  8032cc:	0011883a 	mov	r8,zero
  8032d0:	d9000217 	ldw	r4,8(sp)
  8032d4:	a1c4b03a 	or	r2,r20,r7
  8032d8:	aa06b03a 	or	r3,r21,r8
  8032dc:	2249c83a 	sub	r4,r4,r9
  8032e0:	d8c00415 	stw	r3,16(sp)
  8032e4:	d9000215 	stw	r4,8(sp)
  8032e8:	d8800315 	stw	r2,12(sp)
  8032ec:	003fbf06 	br	8031ec <__floatunsidf+0x38>
  8032f0:	bdc7883a 	add	r3,r23,r23
  8032f4:	008007c4 	movi	r2,31
  8032f8:	1285c83a 	sub	r2,r2,r10
  8032fc:	1886983a 	sll	r3,r3,r2
  803300:	b2a8d83a 	srl	r20,r22,r10
  803304:	baaad83a 	srl	r21,r23,r10
  803308:	1d28b03a 	or	r20,r3,r20
  80330c:	003fdf06 	br	80328c <__floatunsidf+0xd8>
  803310:	b006d07a 	srli	r3,r22,1
  803314:	008007c4 	movi	r2,31
  803318:	1245c83a 	sub	r2,r2,r9
  80331c:	1886d83a 	srl	r3,r3,r2
  803320:	ba62983a 	sll	r17,r23,r9
  803324:	b260983a 	sll	r16,r22,r9
  803328:	1c62b03a 	or	r17,r3,r17
  80332c:	003fcc06 	br	803260 <__floatunsidf+0xac>
  803330:	2006d07a 	srli	r3,r4,1
  803334:	008007c4 	movi	r2,31
  803338:	1285c83a 	sub	r2,r2,r10
  80333c:	18a6d83a 	srl	r19,r3,r2
  803340:	22a4983a 	sll	r18,r4,r10
  803344:	003fd706 	br	8032a4 <__floatunsidf+0xf0>

00803348 <__clzsi2>:
  803348:	00bfffd4 	movui	r2,65535
  80334c:	11000e36 	bltu	r2,r4,803388 <__clzsi2+0x40>
  803350:	00803fc4 	movi	r2,255
  803354:	01400204 	movi	r5,8
  803358:	0007883a 	mov	r3,zero
  80335c:	11001036 	bltu	r2,r4,8033a0 <__clzsi2+0x58>
  803360:	000b883a 	mov	r5,zero
  803364:	20c6d83a 	srl	r3,r4,r3
  803368:	008020b4 	movhi	r2,130
  80336c:	10b11904 	addi	r2,r2,-15260
  803370:	1887883a 	add	r3,r3,r2
  803374:	18800003 	ldbu	r2,0(r3)
  803378:	00c00804 	movi	r3,32
  80337c:	2885883a 	add	r2,r5,r2
  803380:	1885c83a 	sub	r2,r3,r2
  803384:	f800283a 	ret
  803388:	01400404 	movi	r5,16
  80338c:	00804034 	movhi	r2,256
  803390:	10bfffc4 	addi	r2,r2,-1
  803394:	2807883a 	mov	r3,r5
  803398:	113ff22e 	bgeu	r2,r4,803364 <__clzsi2+0x1c>
  80339c:	01400604 	movi	r5,24
  8033a0:	2807883a 	mov	r3,r5
  8033a4:	20c6d83a 	srl	r3,r4,r3
  8033a8:	008020b4 	movhi	r2,130
  8033ac:	10b11904 	addi	r2,r2,-15260
  8033b0:	1887883a 	add	r3,r3,r2
  8033b4:	18800003 	ldbu	r2,0(r3)
  8033b8:	00c00804 	movi	r3,32
  8033bc:	2885883a 	add	r2,r5,r2
  8033c0:	1885c83a 	sub	r2,r3,r2
  8033c4:	f800283a 	ret

008033c8 <__fixunsdfsi>:
  8033c8:	defffb04 	addi	sp,sp,-20
  8033cc:	dc400115 	stw	r17,4(sp)
  8033d0:	dc000015 	stw	r16,0(sp)
  8033d4:	04507834 	movhi	r17,16864
  8033d8:	0021883a 	mov	r16,zero
  8033dc:	800d883a 	mov	r6,r16
  8033e0:	880f883a 	mov	r7,r17
  8033e4:	dcc00315 	stw	r19,12(sp)
  8033e8:	dc800215 	stw	r18,8(sp)
  8033ec:	2827883a 	mov	r19,r5
  8033f0:	2025883a 	mov	r18,r4
  8033f4:	dfc00415 	stw	ra,16(sp)
  8033f8:	08039800 	call	803980 <__gedf2>
  8033fc:	000d883a 	mov	r6,zero
  803400:	880f883a 	mov	r7,r17
  803404:	980b883a 	mov	r5,r19
  803408:	9009883a 	mov	r4,r18
  80340c:	10000d16 	blt	r2,zero,803444 <__fixunsdfsi+0x7c>
  803410:	080284c0 	call	80284c <__subdf3>
  803414:	180b883a 	mov	r5,r3
  803418:	1009883a 	mov	r4,r2
  80341c:	08030dc0 	call	8030dc <__fixdfsi>
  803420:	00e00034 	movhi	r3,32768
  803424:	10c5883a 	add	r2,r2,r3
  803428:	dfc00417 	ldw	ra,16(sp)
  80342c:	dcc00317 	ldw	r19,12(sp)
  803430:	dc800217 	ldw	r18,8(sp)
  803434:	dc400117 	ldw	r17,4(sp)
  803438:	dc000017 	ldw	r16,0(sp)
  80343c:	dec00504 	addi	sp,sp,20
  803440:	f800283a 	ret
  803444:	980b883a 	mov	r5,r19
  803448:	9009883a 	mov	r4,r18
  80344c:	08030dc0 	call	8030dc <__fixdfsi>
  803450:	dfc00417 	ldw	ra,16(sp)
  803454:	dcc00317 	ldw	r19,12(sp)
  803458:	dc800217 	ldw	r18,8(sp)
  80345c:	dc400117 	ldw	r17,4(sp)
  803460:	dc000017 	ldw	r16,0(sp)
  803464:	dec00504 	addi	sp,sp,20
  803468:	f800283a 	ret

0080346c <__pack_d>:
  80346c:	20c00017 	ldw	r3,0(r4)
  803470:	defffd04 	addi	sp,sp,-12
  803474:	dc000015 	stw	r16,0(sp)
  803478:	dc800215 	stw	r18,8(sp)
  80347c:	dc400115 	stw	r17,4(sp)
  803480:	00800044 	movi	r2,1
  803484:	22000317 	ldw	r8,12(r4)
  803488:	001f883a 	mov	r15,zero
  80348c:	22400417 	ldw	r9,16(r4)
  803490:	24000117 	ldw	r16,4(r4)
  803494:	10c0552e 	bgeu	r2,r3,8035ec <__pack_d+0x180>
  803498:	00800104 	movi	r2,4
  80349c:	18804f26 	beq	r3,r2,8035dc <__pack_d+0x170>
  8034a0:	00800084 	movi	r2,2
  8034a4:	18800226 	beq	r3,r2,8034b0 <__pack_d+0x44>
  8034a8:	4244b03a 	or	r2,r8,r9
  8034ac:	10001a1e 	bne	r2,zero,803518 <__pack_d+0xac>
  8034b0:	000d883a 	mov	r6,zero
  8034b4:	000f883a 	mov	r7,zero
  8034b8:	0011883a 	mov	r8,zero
  8034bc:	00800434 	movhi	r2,16
  8034c0:	10bfffc4 	addi	r2,r2,-1
  8034c4:	301d883a 	mov	r14,r6
  8034c8:	3884703a 	and	r2,r7,r2
  8034cc:	400a953a 	slli	r5,r8,20
  8034d0:	79bffc2c 	andhi	r6,r15,65520
  8034d4:	308cb03a 	or	r6,r6,r2
  8034d8:	00e00434 	movhi	r3,32784
  8034dc:	18ffffc4 	addi	r3,r3,-1
  8034e0:	800497fa 	slli	r2,r16,31
  8034e4:	30c6703a 	and	r3,r6,r3
  8034e8:	1946b03a 	or	r3,r3,r5
  8034ec:	01600034 	movhi	r5,32768
  8034f0:	297fffc4 	addi	r5,r5,-1
  8034f4:	194a703a 	and	r5,r3,r5
  8034f8:	288ab03a 	or	r5,r5,r2
  8034fc:	2807883a 	mov	r3,r5
  803500:	7005883a 	mov	r2,r14
  803504:	dc800217 	ldw	r18,8(sp)
  803508:	dc400117 	ldw	r17,4(sp)
  80350c:	dc000017 	ldw	r16,0(sp)
  803510:	dec00304 	addi	sp,sp,12
  803514:	f800283a 	ret
  803518:	21000217 	ldw	r4,8(r4)
  80351c:	00bf0084 	movi	r2,-1022
  803520:	20803f16 	blt	r4,r2,803620 <__pack_d+0x1b4>
  803524:	0080ffc4 	movi	r2,1023
  803528:	11002c16 	blt	r2,r4,8035dc <__pack_d+0x170>
  80352c:	00803fc4 	movi	r2,255
  803530:	408c703a 	and	r6,r8,r2
  803534:	00802004 	movi	r2,128
  803538:	0007883a 	mov	r3,zero
  80353c:	000f883a 	mov	r7,zero
  803540:	2280ffc4 	addi	r10,r4,1023
  803544:	30801e26 	beq	r6,r2,8035c0 <__pack_d+0x154>
  803548:	00801fc4 	movi	r2,127
  80354c:	4089883a 	add	r4,r8,r2
  803550:	220d803a 	cmpltu	r6,r4,r8
  803554:	324d883a 	add	r6,r6,r9
  803558:	2011883a 	mov	r8,r4
  80355c:	3013883a 	mov	r9,r6
  803560:	00880034 	movhi	r2,8192
  803564:	10bfffc4 	addi	r2,r2,-1
  803568:	12400d36 	bltu	r2,r9,8035a0 <__pack_d+0x134>
  80356c:	4804963a 	slli	r2,r9,24
  803570:	400cd23a 	srli	r6,r8,8
  803574:	480ed23a 	srli	r7,r9,8
  803578:	013fffc4 	movi	r4,-1
  80357c:	118cb03a 	or	r6,r2,r6
  803580:	01400434 	movhi	r5,16
  803584:	297fffc4 	addi	r5,r5,-1
  803588:	3104703a 	and	r2,r6,r4
  80358c:	3946703a 	and	r3,r7,r5
  803590:	5201ffcc 	andi	r8,r10,2047
  803594:	100d883a 	mov	r6,r2
  803598:	180f883a 	mov	r7,r3
  80359c:	003fc706 	br	8034bc <__pack_d+0x50>
  8035a0:	480897fa 	slli	r4,r9,31
  8035a4:	4004d07a 	srli	r2,r8,1
  8035a8:	4806d07a 	srli	r3,r9,1
  8035ac:	52800044 	addi	r10,r10,1
  8035b0:	2084b03a 	or	r2,r4,r2
  8035b4:	1011883a 	mov	r8,r2
  8035b8:	1813883a 	mov	r9,r3
  8035bc:	003feb06 	br	80356c <__pack_d+0x100>
  8035c0:	383fe11e 	bne	r7,zero,803548 <__pack_d+0xdc>
  8035c4:	01004004 	movi	r4,256
  8035c8:	4104703a 	and	r2,r8,r4
  8035cc:	10c4b03a 	or	r2,r2,r3
  8035d0:	103fe326 	beq	r2,zero,803560 <__pack_d+0xf4>
  8035d4:	3005883a 	mov	r2,r6
  8035d8:	003fdc06 	br	80354c <__pack_d+0xe0>
  8035dc:	000d883a 	mov	r6,zero
  8035e0:	000f883a 	mov	r7,zero
  8035e4:	0201ffc4 	movi	r8,2047
  8035e8:	003fb406 	br	8034bc <__pack_d+0x50>
  8035ec:	0005883a 	mov	r2,zero
  8035f0:	00c00234 	movhi	r3,8
  8035f4:	408cb03a 	or	r6,r8,r2
  8035f8:	48ceb03a 	or	r7,r9,r3
  8035fc:	013fffc4 	movi	r4,-1
  803600:	01400434 	movhi	r5,16
  803604:	297fffc4 	addi	r5,r5,-1
  803608:	3104703a 	and	r2,r6,r4
  80360c:	3946703a 	and	r3,r7,r5
  803610:	100d883a 	mov	r6,r2
  803614:	180f883a 	mov	r7,r3
  803618:	0201ffc4 	movi	r8,2047
  80361c:	003fa706 	br	8034bc <__pack_d+0x50>
  803620:	1109c83a 	sub	r4,r2,r4
  803624:	00800e04 	movi	r2,56
  803628:	11004316 	blt	r2,r4,803738 <__pack_d+0x2cc>
  80362c:	21fff804 	addi	r7,r4,-32
  803630:	38004516 	blt	r7,zero,803748 <__pack_d+0x2dc>
  803634:	49d8d83a 	srl	r12,r9,r7
  803638:	001b883a 	mov	r13,zero
  80363c:	0023883a 	mov	r17,zero
  803640:	01400044 	movi	r5,1
  803644:	0025883a 	mov	r18,zero
  803648:	38004716 	blt	r7,zero,803768 <__pack_d+0x2fc>
  80364c:	29d6983a 	sll	r11,r5,r7
  803650:	0015883a 	mov	r10,zero
  803654:	00bfffc4 	movi	r2,-1
  803658:	5089883a 	add	r4,r10,r2
  80365c:	588b883a 	add	r5,r11,r2
  803660:	228d803a 	cmpltu	r6,r4,r10
  803664:	314b883a 	add	r5,r6,r5
  803668:	4104703a 	and	r2,r8,r4
  80366c:	4946703a 	and	r3,r9,r5
  803670:	10c4b03a 	or	r2,r2,r3
  803674:	10000226 	beq	r2,zero,803680 <__pack_d+0x214>
  803678:	04400044 	movi	r17,1
  80367c:	0025883a 	mov	r18,zero
  803680:	00803fc4 	movi	r2,255
  803684:	644eb03a 	or	r7,r12,r17
  803688:	3892703a 	and	r9,r7,r2
  80368c:	00802004 	movi	r2,128
  803690:	6c90b03a 	or	r8,r13,r18
  803694:	0015883a 	mov	r10,zero
  803698:	48801626 	beq	r9,r2,8036f4 <__pack_d+0x288>
  80369c:	01001fc4 	movi	r4,127
  8036a0:	3905883a 	add	r2,r7,r4
  8036a4:	11cd803a 	cmpltu	r6,r2,r7
  8036a8:	320d883a 	add	r6,r6,r8
  8036ac:	100f883a 	mov	r7,r2
  8036b0:	00840034 	movhi	r2,4096
  8036b4:	10bfffc4 	addi	r2,r2,-1
  8036b8:	3011883a 	mov	r8,r6
  8036bc:	0007883a 	mov	r3,zero
  8036c0:	11801b36 	bltu	r2,r6,803730 <__pack_d+0x2c4>
  8036c4:	4004963a 	slli	r2,r8,24
  8036c8:	3808d23a 	srli	r4,r7,8
  8036cc:	400ad23a 	srli	r5,r8,8
  8036d0:	1813883a 	mov	r9,r3
  8036d4:	1108b03a 	or	r4,r2,r4
  8036d8:	00bfffc4 	movi	r2,-1
  8036dc:	00c00434 	movhi	r3,16
  8036e0:	18ffffc4 	addi	r3,r3,-1
  8036e4:	208c703a 	and	r6,r4,r2
  8036e8:	28ce703a 	and	r7,r5,r3
  8036ec:	4a01ffcc 	andi	r8,r9,2047
  8036f0:	003f7206 	br	8034bc <__pack_d+0x50>
  8036f4:	503fe91e 	bne	r10,zero,80369c <__pack_d+0x230>
  8036f8:	01004004 	movi	r4,256
  8036fc:	3904703a 	and	r2,r7,r4
  803700:	0007883a 	mov	r3,zero
  803704:	10c4b03a 	or	r2,r2,r3
  803708:	10000626 	beq	r2,zero,803724 <__pack_d+0x2b8>
  80370c:	3a45883a 	add	r2,r7,r9
  803710:	11cd803a 	cmpltu	r6,r2,r7
  803714:	320d883a 	add	r6,r6,r8
  803718:	100f883a 	mov	r7,r2
  80371c:	3011883a 	mov	r8,r6
  803720:	0007883a 	mov	r3,zero
  803724:	00840034 	movhi	r2,4096
  803728:	10bfffc4 	addi	r2,r2,-1
  80372c:	123fe52e 	bgeu	r2,r8,8036c4 <__pack_d+0x258>
  803730:	00c00044 	movi	r3,1
  803734:	003fe306 	br	8036c4 <__pack_d+0x258>
  803738:	0009883a 	mov	r4,zero
  80373c:	0013883a 	mov	r9,zero
  803740:	000b883a 	mov	r5,zero
  803744:	003fe406 	br	8036d8 <__pack_d+0x26c>
  803748:	4a47883a 	add	r3,r9,r9
  80374c:	008007c4 	movi	r2,31
  803750:	1105c83a 	sub	r2,r2,r4
  803754:	1886983a 	sll	r3,r3,r2
  803758:	4118d83a 	srl	r12,r8,r4
  80375c:	491ad83a 	srl	r13,r9,r4
  803760:	1b18b03a 	or	r12,r3,r12
  803764:	003fb506 	br	80363c <__pack_d+0x1d0>
  803768:	2806d07a 	srli	r3,r5,1
  80376c:	008007c4 	movi	r2,31
  803770:	1105c83a 	sub	r2,r2,r4
  803774:	1896d83a 	srl	r11,r3,r2
  803778:	2914983a 	sll	r10,r5,r4
  80377c:	003fb506 	br	803654 <__pack_d+0x1e8>

00803780 <__unpack_d>:
  803780:	20c00117 	ldw	r3,4(r4)
  803784:	22400017 	ldw	r9,0(r4)
  803788:	00800434 	movhi	r2,16
  80378c:	10bfffc4 	addi	r2,r2,-1
  803790:	1808d53a 	srli	r4,r3,20
  803794:	180cd7fa 	srli	r6,r3,31
  803798:	1894703a 	and	r10,r3,r2
  80379c:	2201ffcc 	andi	r8,r4,2047
  8037a0:	281b883a 	mov	r13,r5
  8037a4:	4817883a 	mov	r11,r9
  8037a8:	29800115 	stw	r6,4(r5)
  8037ac:	5019883a 	mov	r12,r10
  8037b0:	40001e1e 	bne	r8,zero,80382c <__unpack_d+0xac>
  8037b4:	4a84b03a 	or	r2,r9,r10
  8037b8:	10001926 	beq	r2,zero,803820 <__unpack_d+0xa0>
  8037bc:	4804d63a 	srli	r2,r9,24
  8037c0:	500c923a 	slli	r6,r10,8
  8037c4:	013f0084 	movi	r4,-1022
  8037c8:	00c40034 	movhi	r3,4096
  8037cc:	18ffffc4 	addi	r3,r3,-1
  8037d0:	118cb03a 	or	r6,r2,r6
  8037d4:	008000c4 	movi	r2,3
  8037d8:	480a923a 	slli	r5,r9,8
  8037dc:	68800015 	stw	r2,0(r13)
  8037e0:	69000215 	stw	r4,8(r13)
  8037e4:	19800b36 	bltu	r3,r6,803814 <__unpack_d+0x94>
  8037e8:	200f883a 	mov	r7,r4
  8037ec:	1811883a 	mov	r8,r3
  8037f0:	2945883a 	add	r2,r5,r5
  8037f4:	1149803a 	cmpltu	r4,r2,r5
  8037f8:	3187883a 	add	r3,r6,r6
  8037fc:	20c9883a 	add	r4,r4,r3
  803800:	100b883a 	mov	r5,r2
  803804:	200d883a 	mov	r6,r4
  803808:	39ffffc4 	addi	r7,r7,-1
  80380c:	413ff82e 	bgeu	r8,r4,8037f0 <__unpack_d+0x70>
  803810:	69c00215 	stw	r7,8(r13)
  803814:	69800415 	stw	r6,16(r13)
  803818:	69400315 	stw	r5,12(r13)
  80381c:	f800283a 	ret
  803820:	00800084 	movi	r2,2
  803824:	28800015 	stw	r2,0(r5)
  803828:	f800283a 	ret
  80382c:	0081ffc4 	movi	r2,2047
  803830:	40800f26 	beq	r8,r2,803870 <__unpack_d+0xf0>
  803834:	480cd63a 	srli	r6,r9,24
  803838:	5006923a 	slli	r3,r10,8
  80383c:	4804923a 	slli	r2,r9,8
  803840:	0009883a 	mov	r4,zero
  803844:	30c6b03a 	or	r3,r6,r3
  803848:	01440034 	movhi	r5,4096
  80384c:	110cb03a 	or	r6,r2,r4
  803850:	423f0044 	addi	r8,r8,-1023
  803854:	194eb03a 	or	r7,r3,r5
  803858:	008000c4 	movi	r2,3
  80385c:	69c00415 	stw	r7,16(r13)
  803860:	6a000215 	stw	r8,8(r13)
  803864:	68800015 	stw	r2,0(r13)
  803868:	69800315 	stw	r6,12(r13)
  80386c:	f800283a 	ret
  803870:	4a84b03a 	or	r2,r9,r10
  803874:	1000031e 	bne	r2,zero,803884 <__unpack_d+0x104>
  803878:	00800104 	movi	r2,4
  80387c:	28800015 	stw	r2,0(r5)
  803880:	f800283a 	ret
  803884:	0009883a 	mov	r4,zero
  803888:	01400234 	movhi	r5,8
  80388c:	4904703a 	and	r2,r9,r4
  803890:	5146703a 	and	r3,r10,r5
  803894:	10c4b03a 	or	r2,r2,r3
  803898:	10000526 	beq	r2,zero,8038b0 <__unpack_d+0x130>
  80389c:	00800044 	movi	r2,1
  8038a0:	68800015 	stw	r2,0(r13)
  8038a4:	6b000415 	stw	r12,16(r13)
  8038a8:	6ac00315 	stw	r11,12(r13)
  8038ac:	f800283a 	ret
  8038b0:	68000015 	stw	zero,0(r13)
  8038b4:	003ffb06 	br	8038a4 <__unpack_d+0x124>

008038b8 <__fpcmp_parts_d>:
  8038b8:	21800017 	ldw	r6,0(r4)
  8038bc:	00c00044 	movi	r3,1
  8038c0:	19800a2e 	bgeu	r3,r6,8038ec <__fpcmp_parts_d+0x34>
  8038c4:	28800017 	ldw	r2,0(r5)
  8038c8:	1880082e 	bgeu	r3,r2,8038ec <__fpcmp_parts_d+0x34>
  8038cc:	00c00104 	movi	r3,4
  8038d0:	30c02626 	beq	r6,r3,80396c <__fpcmp_parts_d+0xb4>
  8038d4:	10c02226 	beq	r2,r3,803960 <__fpcmp_parts_d+0xa8>
  8038d8:	00c00084 	movi	r3,2
  8038dc:	30c00526 	beq	r6,r3,8038f4 <__fpcmp_parts_d+0x3c>
  8038e0:	10c0071e 	bne	r2,r3,803900 <__fpcmp_parts_d+0x48>
  8038e4:	20800117 	ldw	r2,4(r4)
  8038e8:	1000091e 	bne	r2,zero,803910 <__fpcmp_parts_d+0x58>
  8038ec:	00800044 	movi	r2,1
  8038f0:	f800283a 	ret
  8038f4:	10c01a1e 	bne	r2,r3,803960 <__fpcmp_parts_d+0xa8>
  8038f8:	0005883a 	mov	r2,zero
  8038fc:	f800283a 	ret
  803900:	22000117 	ldw	r8,4(r4)
  803904:	28800117 	ldw	r2,4(r5)
  803908:	40800326 	beq	r8,r2,803918 <__fpcmp_parts_d+0x60>
  80390c:	403ff726 	beq	r8,zero,8038ec <__fpcmp_parts_d+0x34>
  803910:	00bfffc4 	movi	r2,-1
  803914:	f800283a 	ret
  803918:	20c00217 	ldw	r3,8(r4)
  80391c:	28800217 	ldw	r2,8(r5)
  803920:	10fffa16 	blt	r2,r3,80390c <__fpcmp_parts_d+0x54>
  803924:	18800916 	blt	r3,r2,80394c <__fpcmp_parts_d+0x94>
  803928:	21c00417 	ldw	r7,16(r4)
  80392c:	28c00417 	ldw	r3,16(r5)
  803930:	21800317 	ldw	r6,12(r4)
  803934:	28800317 	ldw	r2,12(r5)
  803938:	19fff436 	bltu	r3,r7,80390c <__fpcmp_parts_d+0x54>
  80393c:	38c00526 	beq	r7,r3,803954 <__fpcmp_parts_d+0x9c>
  803940:	38c00236 	bltu	r7,r3,80394c <__fpcmp_parts_d+0x94>
  803944:	19ffec1e 	bne	r3,r7,8038f8 <__fpcmp_parts_d+0x40>
  803948:	30bfeb2e 	bgeu	r6,r2,8038f8 <__fpcmp_parts_d+0x40>
  80394c:	403fe71e 	bne	r8,zero,8038ec <__fpcmp_parts_d+0x34>
  803950:	003fef06 	br	803910 <__fpcmp_parts_d+0x58>
  803954:	11bffa2e 	bgeu	r2,r6,803940 <__fpcmp_parts_d+0x88>
  803958:	403fe426 	beq	r8,zero,8038ec <__fpcmp_parts_d+0x34>
  80395c:	003fec06 	br	803910 <__fpcmp_parts_d+0x58>
  803960:	28800117 	ldw	r2,4(r5)
  803964:	103fe11e 	bne	r2,zero,8038ec <__fpcmp_parts_d+0x34>
  803968:	003fe906 	br	803910 <__fpcmp_parts_d+0x58>
  80396c:	11bfdd1e 	bne	r2,r6,8038e4 <__fpcmp_parts_d+0x2c>
  803970:	28c00117 	ldw	r3,4(r5)
  803974:	20800117 	ldw	r2,4(r4)
  803978:	1885c83a 	sub	r2,r3,r2
  80397c:	f800283a 	ret

00803980 <__gedf2>:
  803980:	deffef04 	addi	sp,sp,-68
  803984:	dc400f15 	stw	r17,60(sp)
  803988:	dc400404 	addi	r17,sp,16
  80398c:	2005883a 	mov	r2,r4
  803990:	2807883a 	mov	r3,r5
  803994:	dc000e15 	stw	r16,56(sp)
  803998:	d809883a 	mov	r4,sp
  80399c:	880b883a 	mov	r5,r17
  8039a0:	dc000904 	addi	r16,sp,36
  8039a4:	d8c00115 	stw	r3,4(sp)
  8039a8:	d8800015 	stw	r2,0(sp)
  8039ac:	d9800215 	stw	r6,8(sp)
  8039b0:	dfc01015 	stw	ra,64(sp)
  8039b4:	d9c00315 	stw	r7,12(sp)
  8039b8:	08037800 	call	803780 <__unpack_d>
  8039bc:	d9000204 	addi	r4,sp,8
  8039c0:	800b883a 	mov	r5,r16
  8039c4:	08037800 	call	803780 <__unpack_d>
  8039c8:	d8800417 	ldw	r2,16(sp)
  8039cc:	00c00044 	movi	r3,1
  8039d0:	01bfffc4 	movi	r6,-1
  8039d4:	1880062e 	bgeu	r3,r2,8039f0 <__gedf2+0x70>
  8039d8:	d8800917 	ldw	r2,36(sp)
  8039dc:	8809883a 	mov	r4,r17
  8039e0:	800b883a 	mov	r5,r16
  8039e4:	1880022e 	bgeu	r3,r2,8039f0 <__gedf2+0x70>
  8039e8:	08038b80 	call	8038b8 <__fpcmp_parts_d>
  8039ec:	100d883a 	mov	r6,r2
  8039f0:	3005883a 	mov	r2,r6
  8039f4:	dfc01017 	ldw	ra,64(sp)
  8039f8:	dc400f17 	ldw	r17,60(sp)
  8039fc:	dc000e17 	ldw	r16,56(sp)
  803a00:	dec01104 	addi	sp,sp,68
  803a04:	f800283a 	ret

00803a08 <__errno>:
  803a08:	00c020b4 	movhi	r3,130
  803a0c:	18f8ef04 	addi	r3,r3,-7236
  803a10:	18800017 	ldw	r2,0(r3)
  803a14:	f800283a 	ret

00803a18 <printf>:
  803a18:	defffb04 	addi	sp,sp,-20
  803a1c:	dfc00115 	stw	ra,4(sp)
  803a20:	d9400215 	stw	r5,8(sp)
  803a24:	d9800315 	stw	r6,12(sp)
  803a28:	d9c00415 	stw	r7,16(sp)
  803a2c:	008020b4 	movhi	r2,130
  803a30:	10b8ef04 	addi	r2,r2,-7236
  803a34:	10c00017 	ldw	r3,0(r2)
  803a38:	200b883a 	mov	r5,r4
  803a3c:	d8800204 	addi	r2,sp,8
  803a40:	19000217 	ldw	r4,8(r3)
  803a44:	100d883a 	mov	r6,r2
  803a48:	d8800015 	stw	r2,0(sp)
  803a4c:	0805abc0 	call	805abc <__vfprintf_internal>
  803a50:	dfc00117 	ldw	ra,4(sp)
  803a54:	dec00504 	addi	sp,sp,20
  803a58:	f800283a 	ret

00803a5c <_printf_r>:
  803a5c:	defffc04 	addi	sp,sp,-16
  803a60:	dfc00115 	stw	ra,4(sp)
  803a64:	d9800215 	stw	r6,8(sp)
  803a68:	d9c00315 	stw	r7,12(sp)
  803a6c:	280d883a 	mov	r6,r5
  803a70:	21400217 	ldw	r5,8(r4)
  803a74:	d8c00204 	addi	r3,sp,8
  803a78:	180f883a 	mov	r7,r3
  803a7c:	d8c00015 	stw	r3,0(sp)
  803a80:	0803c100 	call	803c10 <___vfprintf_internal_r>
  803a84:	dfc00117 	ldw	ra,4(sp)
  803a88:	dec00404 	addi	sp,sp,16
  803a8c:	f800283a 	ret

00803a90 <_puts_r>:
  803a90:	defff604 	addi	sp,sp,-40
  803a94:	dc400715 	stw	r17,28(sp)
  803a98:	2023883a 	mov	r17,r4
  803a9c:	2809883a 	mov	r4,r5
  803aa0:	dfc00915 	stw	ra,36(sp)
  803aa4:	dcc00815 	stw	r19,32(sp)
  803aa8:	2827883a 	mov	r19,r5
  803aac:	0803b440 	call	803b44 <strlen>
  803ab0:	89400217 	ldw	r5,8(r17)
  803ab4:	00c020b4 	movhi	r3,130
  803ab8:	18f15a04 	addi	r3,r3,-15000
  803abc:	01c00044 	movi	r7,1
  803ac0:	12000044 	addi	r8,r2,1
  803ac4:	d8c00515 	stw	r3,20(sp)
  803ac8:	d9c00615 	stw	r7,24(sp)
  803acc:	d8c00304 	addi	r3,sp,12
  803ad0:	01c00084 	movi	r7,2
  803ad4:	8809883a 	mov	r4,r17
  803ad8:	d80d883a 	mov	r6,sp
  803adc:	d8c00015 	stw	r3,0(sp)
  803ae0:	dcc00315 	stw	r19,12(sp)
  803ae4:	da000215 	stw	r8,8(sp)
  803ae8:	d9c00115 	stw	r7,4(sp)
  803aec:	d8800415 	stw	r2,16(sp)
  803af0:	0807d180 	call	807d18 <__sfvwrite_r>
  803af4:	00ffffc4 	movi	r3,-1
  803af8:	10000626 	beq	r2,zero,803b14 <_puts_r+0x84>
  803afc:	1805883a 	mov	r2,r3
  803b00:	dfc00917 	ldw	ra,36(sp)
  803b04:	dcc00817 	ldw	r19,32(sp)
  803b08:	dc400717 	ldw	r17,28(sp)
  803b0c:	dec00a04 	addi	sp,sp,40
  803b10:	f800283a 	ret
  803b14:	00c00284 	movi	r3,10
  803b18:	1805883a 	mov	r2,r3
  803b1c:	dfc00917 	ldw	ra,36(sp)
  803b20:	dcc00817 	ldw	r19,32(sp)
  803b24:	dc400717 	ldw	r17,28(sp)
  803b28:	dec00a04 	addi	sp,sp,40
  803b2c:	f800283a 	ret

00803b30 <puts>:
  803b30:	008020b4 	movhi	r2,130
  803b34:	10b8ef04 	addi	r2,r2,-7236
  803b38:	200b883a 	mov	r5,r4
  803b3c:	11000017 	ldw	r4,0(r2)
  803b40:	0803a901 	jmpi	803a90 <_puts_r>

00803b44 <strlen>:
  803b44:	208000cc 	andi	r2,r4,3
  803b48:	2011883a 	mov	r8,r4
  803b4c:	1000161e 	bne	r2,zero,803ba8 <strlen+0x64>
  803b50:	20c00017 	ldw	r3,0(r4)
  803b54:	017fbff4 	movhi	r5,65279
  803b58:	297fbfc4 	addi	r5,r5,-257
  803b5c:	01e02074 	movhi	r7,32897
  803b60:	39e02004 	addi	r7,r7,-32640
  803b64:	1945883a 	add	r2,r3,r5
  803b68:	11c4703a 	and	r2,r2,r7
  803b6c:	00c6303a 	nor	r3,zero,r3
  803b70:	1886703a 	and	r3,r3,r2
  803b74:	18000c1e 	bne	r3,zero,803ba8 <strlen+0x64>
  803b78:	280d883a 	mov	r6,r5
  803b7c:	380b883a 	mov	r5,r7
  803b80:	21000104 	addi	r4,r4,4
  803b84:	20800017 	ldw	r2,0(r4)
  803b88:	1187883a 	add	r3,r2,r6
  803b8c:	1946703a 	and	r3,r3,r5
  803b90:	0084303a 	nor	r2,zero,r2
  803b94:	10c4703a 	and	r2,r2,r3
  803b98:	103ff926 	beq	r2,zero,803b80 <strlen+0x3c>
  803b9c:	20800007 	ldb	r2,0(r4)
  803ba0:	10000326 	beq	r2,zero,803bb0 <strlen+0x6c>
  803ba4:	21000044 	addi	r4,r4,1
  803ba8:	20800007 	ldb	r2,0(r4)
  803bac:	103ffd1e 	bne	r2,zero,803ba4 <strlen+0x60>
  803bb0:	2205c83a 	sub	r2,r4,r8
  803bb4:	f800283a 	ret

00803bb8 <__sprint_r>:
  803bb8:	30800217 	ldw	r2,8(r6)
  803bbc:	defffe04 	addi	sp,sp,-8
  803bc0:	dc000015 	stw	r16,0(sp)
  803bc4:	dfc00115 	stw	ra,4(sp)
  803bc8:	3021883a 	mov	r16,r6
  803bcc:	0007883a 	mov	r3,zero
  803bd0:	1000061e 	bne	r2,zero,803bec <__sprint_r+0x34>
  803bd4:	1805883a 	mov	r2,r3
  803bd8:	30000115 	stw	zero,4(r6)
  803bdc:	dfc00117 	ldw	ra,4(sp)
  803be0:	dc000017 	ldw	r16,0(sp)
  803be4:	dec00204 	addi	sp,sp,8
  803be8:	f800283a 	ret
  803bec:	0807d180 	call	807d18 <__sfvwrite_r>
  803bf0:	1007883a 	mov	r3,r2
  803bf4:	1805883a 	mov	r2,r3
  803bf8:	80000115 	stw	zero,4(r16)
  803bfc:	80000215 	stw	zero,8(r16)
  803c00:	dfc00117 	ldw	ra,4(sp)
  803c04:	dc000017 	ldw	r16,0(sp)
  803c08:	dec00204 	addi	sp,sp,8
  803c0c:	f800283a 	ret

00803c10 <___vfprintf_internal_r>:
  803c10:	defea404 	addi	sp,sp,-1392
  803c14:	dd815815 	stw	r22,1376(sp)
  803c18:	dc015215 	stw	r16,1352(sp)
  803c1c:	d9c15115 	stw	r7,1348(sp)
  803c20:	dfc15b15 	stw	ra,1388(sp)
  803c24:	df015a15 	stw	fp,1384(sp)
  803c28:	ddc15915 	stw	r23,1380(sp)
  803c2c:	dd415715 	stw	r21,1372(sp)
  803c30:	dd015615 	stw	r20,1368(sp)
  803c34:	dcc15515 	stw	r19,1364(sp)
  803c38:	dc815415 	stw	r18,1360(sp)
  803c3c:	dc415315 	stw	r17,1356(sp)
  803c40:	282d883a 	mov	r22,r5
  803c44:	3021883a 	mov	r16,r6
  803c48:	d9014f15 	stw	r4,1340(sp)
  803c4c:	080833c0 	call	80833c <_localeconv_r>
  803c50:	10800017 	ldw	r2,0(r2)
  803c54:	d9c15117 	ldw	r7,1348(sp)
  803c58:	d8814915 	stw	r2,1316(sp)
  803c5c:	d8814f17 	ldw	r2,1340(sp)
  803c60:	10000226 	beq	r2,zero,803c6c <___vfprintf_internal_r+0x5c>
  803c64:	10800e17 	ldw	r2,56(r2)
  803c68:	10020d26 	beq	r2,zero,8044a0 <___vfprintf_internal_r+0x890>
  803c6c:	b080030b 	ldhu	r2,12(r22)
  803c70:	1080020c 	andi	r2,r2,8
  803c74:	10020e26 	beq	r2,zero,8044b0 <___vfprintf_internal_r+0x8a0>
  803c78:	b0800417 	ldw	r2,16(r22)
  803c7c:	10020c26 	beq	r2,zero,8044b0 <___vfprintf_internal_r+0x8a0>
  803c80:	b200030b 	ldhu	r8,12(r22)
  803c84:	00800284 	movi	r2,10
  803c88:	40c0068c 	andi	r3,r8,26
  803c8c:	18802f1e 	bne	r3,r2,803d4c <___vfprintf_internal_r+0x13c>
  803c90:	b080038f 	ldh	r2,14(r22)
  803c94:	10002d16 	blt	r2,zero,803d4c <___vfprintf_internal_r+0x13c>
  803c98:	b240038b 	ldhu	r9,14(r22)
  803c9c:	b2800717 	ldw	r10,28(r22)
  803ca0:	b2c00917 	ldw	r11,36(r22)
  803ca4:	d9014f17 	ldw	r4,1340(sp)
  803ca8:	dc402904 	addi	r17,sp,164
  803cac:	d8804004 	addi	r2,sp,256
  803cb0:	00c10004 	movi	r3,1024
  803cb4:	423fff4c 	andi	r8,r8,65533
  803cb8:	800d883a 	mov	r6,r16
  803cbc:	880b883a 	mov	r5,r17
  803cc0:	da002c0d 	sth	r8,176(sp)
  803cc4:	da402c8d 	sth	r9,178(sp)
  803cc8:	da803015 	stw	r10,192(sp)
  803ccc:	dac03215 	stw	r11,200(sp)
  803cd0:	d8802d15 	stw	r2,180(sp)
  803cd4:	d8c02e15 	stw	r3,184(sp)
  803cd8:	d8802915 	stw	r2,164(sp)
  803cdc:	d8c02b15 	stw	r3,172(sp)
  803ce0:	d8002f15 	stw	zero,188(sp)
  803ce4:	0803c100 	call	803c10 <___vfprintf_internal_r>
  803ce8:	d8814b15 	stw	r2,1324(sp)
  803cec:	10000416 	blt	r2,zero,803d00 <___vfprintf_internal_r+0xf0>
  803cf0:	d9014f17 	ldw	r4,1340(sp)
  803cf4:	880b883a 	mov	r5,r17
  803cf8:	08073e80 	call	8073e8 <_fflush_r>
  803cfc:	1002321e 	bne	r2,zero,8045c8 <___vfprintf_internal_r+0x9b8>
  803d00:	d8802c0b 	ldhu	r2,176(sp)
  803d04:	1080100c 	andi	r2,r2,64
  803d08:	10000326 	beq	r2,zero,803d18 <___vfprintf_internal_r+0x108>
  803d0c:	b080030b 	ldhu	r2,12(r22)
  803d10:	10801014 	ori	r2,r2,64
  803d14:	b080030d 	sth	r2,12(r22)
  803d18:	d8814b17 	ldw	r2,1324(sp)
  803d1c:	dfc15b17 	ldw	ra,1388(sp)
  803d20:	df015a17 	ldw	fp,1384(sp)
  803d24:	ddc15917 	ldw	r23,1380(sp)
  803d28:	dd815817 	ldw	r22,1376(sp)
  803d2c:	dd415717 	ldw	r21,1372(sp)
  803d30:	dd015617 	ldw	r20,1368(sp)
  803d34:	dcc15517 	ldw	r19,1364(sp)
  803d38:	dc815417 	ldw	r18,1360(sp)
  803d3c:	dc415317 	ldw	r17,1356(sp)
  803d40:	dc015217 	ldw	r16,1352(sp)
  803d44:	dec15c04 	addi	sp,sp,1392
  803d48:	f800283a 	ret
  803d4c:	0005883a 	mov	r2,zero
  803d50:	0007883a 	mov	r3,zero
  803d54:	dd401904 	addi	r21,sp,100
  803d58:	d8814215 	stw	r2,1288(sp)
  803d5c:	802f883a 	mov	r23,r16
  803d60:	d8c14315 	stw	r3,1292(sp)
  803d64:	d8014b15 	stw	zero,1324(sp)
  803d68:	d8014815 	stw	zero,1312(sp)
  803d6c:	d8014415 	stw	zero,1296(sp)
  803d70:	d8014715 	stw	zero,1308(sp)
  803d74:	dd400c15 	stw	r21,48(sp)
  803d78:	d8000e15 	stw	zero,56(sp)
  803d7c:	d8000d15 	stw	zero,52(sp)
  803d80:	b8800007 	ldb	r2,0(r23)
  803d84:	10001926 	beq	r2,zero,803dec <___vfprintf_internal_r+0x1dc>
  803d88:	00c00944 	movi	r3,37
  803d8c:	10c01726 	beq	r2,r3,803dec <___vfprintf_internal_r+0x1dc>
  803d90:	b821883a 	mov	r16,r23
  803d94:	00000106 	br	803d9c <___vfprintf_internal_r+0x18c>
  803d98:	10c00326 	beq	r2,r3,803da8 <___vfprintf_internal_r+0x198>
  803d9c:	84000044 	addi	r16,r16,1
  803da0:	80800007 	ldb	r2,0(r16)
  803da4:	103ffc1e 	bne	r2,zero,803d98 <___vfprintf_internal_r+0x188>
  803da8:	85e7c83a 	sub	r19,r16,r23
  803dac:	98000e26 	beq	r19,zero,803de8 <___vfprintf_internal_r+0x1d8>
  803db0:	dc800e17 	ldw	r18,56(sp)
  803db4:	dc400d17 	ldw	r17,52(sp)
  803db8:	008001c4 	movi	r2,7
  803dbc:	94e5883a 	add	r18,r18,r19
  803dc0:	8c400044 	addi	r17,r17,1
  803dc4:	adc00015 	stw	r23,0(r21)
  803dc8:	dc800e15 	stw	r18,56(sp)
  803dcc:	acc00115 	stw	r19,4(r21)
  803dd0:	dc400d15 	stw	r17,52(sp)
  803dd4:	14428b16 	blt	r2,r17,804804 <___vfprintf_internal_r+0xbf4>
  803dd8:	ad400204 	addi	r21,r21,8
  803ddc:	d9014b17 	ldw	r4,1324(sp)
  803de0:	24c9883a 	add	r4,r4,r19
  803de4:	d9014b15 	stw	r4,1324(sp)
  803de8:	802f883a 	mov	r23,r16
  803dec:	b8800007 	ldb	r2,0(r23)
  803df0:	10013c26 	beq	r2,zero,8042e4 <___vfprintf_internal_r+0x6d4>
  803df4:	bdc00044 	addi	r23,r23,1
  803df8:	d8000405 	stb	zero,16(sp)
  803dfc:	b8c00007 	ldb	r3,0(r23)
  803e00:	04ffffc4 	movi	r19,-1
  803e04:	d8014c15 	stw	zero,1328(sp)
  803e08:	d8014a15 	stw	zero,1320(sp)
  803e0c:	d8c14d15 	stw	r3,1332(sp)
  803e10:	bdc00044 	addi	r23,r23,1
  803e14:	d9414d17 	ldw	r5,1332(sp)
  803e18:	00801604 	movi	r2,88
  803e1c:	28fff804 	addi	r3,r5,-32
  803e20:	10c06036 	bltu	r2,r3,803fa4 <___vfprintf_internal_r+0x394>
  803e24:	18c5883a 	add	r2,r3,r3
  803e28:	1085883a 	add	r2,r2,r2
  803e2c:	00c02034 	movhi	r3,128
  803e30:	18cf9004 	addi	r3,r3,15936
  803e34:	10c5883a 	add	r2,r2,r3
  803e38:	11000017 	ldw	r4,0(r2)
  803e3c:	2000683a 	jmp	r4
  803e40:	00804db4 	movhi	r2,310
  803e44:	00803fa4 	muli	r2,zero,254
  803e48:	00803fa4 	muli	r2,zero,254
  803e4c:	00804da0 	cmpeqi	r2,zero,310
  803e50:	00803fa4 	muli	r2,zero,254
  803e54:	00803fa4 	muli	r2,zero,254
  803e58:	00803fa4 	muli	r2,zero,254
  803e5c:	00803fa4 	muli	r2,zero,254
  803e60:	00803fa4 	muli	r2,zero,254
  803e64:	00803fa4 	muli	r2,zero,254
  803e68:	00804b80 	call	804b8 <OSCtxSw_SWITCH_PC+0x80478>
  803e6c:	00804d90 	cmplti	r2,zero,310
  803e70:	00803fa4 	muli	r2,zero,254
  803e74:	00804b98 	cmpnei	r2,zero,302
  803e78:	00804e2c 	andhi	r2,zero,312
  803e7c:	00803fa4 	muli	r2,zero,254
  803e80:	00804e18 	cmpnei	r2,zero,312
  803e84:	00804de0 	cmpeqi	r2,zero,311
  803e88:	00804de0 	cmpeqi	r2,zero,311
  803e8c:	00804de0 	cmpeqi	r2,zero,311
  803e90:	00804de0 	cmpeqi	r2,zero,311
  803e94:	00804de0 	cmpeqi	r2,zero,311
  803e98:	00804de0 	cmpeqi	r2,zero,311
  803e9c:	00804de0 	cmpeqi	r2,zero,311
  803ea0:	00804de0 	cmpeqi	r2,zero,311
  803ea4:	00804de0 	cmpeqi	r2,zero,311
  803ea8:	00803fa4 	muli	r2,zero,254
  803eac:	00803fa4 	muli	r2,zero,254
  803eb0:	00803fa4 	muli	r2,zero,254
  803eb4:	00803fa4 	muli	r2,zero,254
  803eb8:	00803fa4 	muli	r2,zero,254
  803ebc:	00803fa4 	muli	r2,zero,254
  803ec0:	00803fa4 	muli	r2,zero,254
  803ec4:	00803fa4 	muli	r2,zero,254
  803ec8:	00803fa4 	muli	r2,zero,254
  803ecc:	00803fa4 	muli	r2,zero,254
  803ed0:	008045fc 	xorhi	r2,zero,279
  803ed4:	00804c68 	cmpgeui	r2,zero,305
  803ed8:	00803fa4 	muli	r2,zero,254
  803edc:	00804c68 	cmpgeui	r2,zero,305
  803ee0:	00803fa4 	muli	r2,zero,254
  803ee4:	00803fa4 	muli	r2,zero,254
  803ee8:	00803fa4 	muli	r2,zero,254
  803eec:	00803fa4 	muli	r2,zero,254
  803ef0:	00804dcc 	andi	r2,zero,311
  803ef4:	00803fa4 	muli	r2,zero,254
  803ef8:	00803fa4 	muli	r2,zero,254
  803efc:	008046b0 	cmpltui	r2,zero,282
  803f00:	00803fa4 	muli	r2,zero,254
  803f04:	00803fa4 	muli	r2,zero,254
  803f08:	00803fa4 	muli	r2,zero,254
  803f0c:	00803fa4 	muli	r2,zero,254
  803f10:	00803fa4 	muli	r2,zero,254
  803f14:	008046fc 	xorhi	r2,zero,283
  803f18:	00803fa4 	muli	r2,zero,254
  803f1c:	00803fa4 	muli	r2,zero,254
  803f20:	00804d1c 	xori	r2,zero,308
  803f24:	00803fa4 	muli	r2,zero,254
  803f28:	00803fa4 	muli	r2,zero,254
  803f2c:	00803fa4 	muli	r2,zero,254
  803f30:	00803fa4 	muli	r2,zero,254
  803f34:	00803fa4 	muli	r2,zero,254
  803f38:	00803fa4 	muli	r2,zero,254
  803f3c:	00803fa4 	muli	r2,zero,254
  803f40:	00803fa4 	muli	r2,zero,254
  803f44:	00803fa4 	muli	r2,zero,254
  803f48:	00803fa4 	muli	r2,zero,254
  803f4c:	00804cf0 	cmpltui	r2,zero,307
  803f50:	00804608 	cmpgei	r2,zero,280
  803f54:	00804c68 	cmpgeui	r2,zero,305
  803f58:	00804c68 	cmpgeui	r2,zero,305
  803f5c:	00804c68 	cmpgeui	r2,zero,305
  803f60:	00804c54 	movui	r2,305
  803f64:	00804608 	cmpgei	r2,zero,280
  803f68:	00803fa4 	muli	r2,zero,254
  803f6c:	00803fa4 	muli	r2,zero,254
  803f70:	00804bdc 	xori	r2,zero,303
  803f74:	00803fa4 	muli	r2,zero,254
  803f78:	00804bac 	andhi	r2,zero,302
  803f7c:	008046bc 	xorhi	r2,zero,282
  803f80:	00804c0c 	andi	r2,zero,304
  803f84:	00804bf8 	rdprs	r2,zero,303
  803f88:	00803fa4 	muli	r2,zero,254
  803f8c:	00804e88 	cmpgei	r2,zero,314
  803f90:	00803fa4 	muli	r2,zero,254
  803f94:	00804708 	cmpgei	r2,zero,284
  803f98:	00803fa4 	muli	r2,zero,254
  803f9c:	00803fa4 	muli	r2,zero,254
  803fa0:	00804d80 	call	804d8 <OSCtxSw_SWITCH_PC+0x80498>
  803fa4:	d9014d17 	ldw	r4,1332(sp)
  803fa8:	2000ce26 	beq	r4,zero,8042e4 <___vfprintf_internal_r+0x6d4>
  803fac:	01400044 	movi	r5,1
  803fb0:	d9800f04 	addi	r6,sp,60
  803fb4:	d9c14015 	stw	r7,1280(sp)
  803fb8:	d9414515 	stw	r5,1300(sp)
  803fbc:	d9814115 	stw	r6,1284(sp)
  803fc0:	280f883a 	mov	r7,r5
  803fc4:	d9000f05 	stb	r4,60(sp)
  803fc8:	d8000405 	stb	zero,16(sp)
  803fcc:	d8014615 	stw	zero,1304(sp)
  803fd0:	d8c14c17 	ldw	r3,1328(sp)
  803fd4:	1880008c 	andi	r2,r3,2
  803fd8:	1005003a 	cmpeq	r2,r2,zero
  803fdc:	d8815015 	stw	r2,1344(sp)
  803fe0:	1000031e 	bne	r2,zero,803ff0 <___vfprintf_internal_r+0x3e0>
  803fe4:	d9014517 	ldw	r4,1300(sp)
  803fe8:	21000084 	addi	r4,r4,2
  803fec:	d9014515 	stw	r4,1300(sp)
  803ff0:	d9414c17 	ldw	r5,1328(sp)
  803ff4:	2940210c 	andi	r5,r5,132
  803ff8:	d9414e15 	stw	r5,1336(sp)
  803ffc:	28002d1e 	bne	r5,zero,8040b4 <___vfprintf_internal_r+0x4a4>
  804000:	d9814a17 	ldw	r6,1320(sp)
  804004:	d8814517 	ldw	r2,1300(sp)
  804008:	30a1c83a 	sub	r16,r6,r2
  80400c:	0400290e 	bge	zero,r16,8040b4 <___vfprintf_internal_r+0x4a4>
  804010:	00800404 	movi	r2,16
  804014:	1404580e 	bge	r2,r16,805178 <___vfprintf_internal_r+0x1568>
  804018:	dc800e17 	ldw	r18,56(sp)
  80401c:	dc400d17 	ldw	r17,52(sp)
  804020:	1027883a 	mov	r19,r2
  804024:	070020b4 	movhi	fp,130
  804028:	e7317684 	addi	fp,fp,-14886
  80402c:	050001c4 	movi	r20,7
  804030:	00000306 	br	804040 <___vfprintf_internal_r+0x430>
  804034:	843ffc04 	addi	r16,r16,-16
  804038:	ad400204 	addi	r21,r21,8
  80403c:	9c00130e 	bge	r19,r16,80408c <___vfprintf_internal_r+0x47c>
  804040:	94800404 	addi	r18,r18,16
  804044:	8c400044 	addi	r17,r17,1
  804048:	af000015 	stw	fp,0(r21)
  80404c:	acc00115 	stw	r19,4(r21)
  804050:	dc800e15 	stw	r18,56(sp)
  804054:	dc400d15 	stw	r17,52(sp)
  804058:	a47ff60e 	bge	r20,r17,804034 <___vfprintf_internal_r+0x424>
  80405c:	d9014f17 	ldw	r4,1340(sp)
  804060:	b00b883a 	mov	r5,r22
  804064:	d9800c04 	addi	r6,sp,48
  804068:	d9c15115 	stw	r7,1348(sp)
  80406c:	0803bb80 	call	803bb8 <__sprint_r>
  804070:	d9c15117 	ldw	r7,1348(sp)
  804074:	10009e1e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  804078:	843ffc04 	addi	r16,r16,-16
  80407c:	dc800e17 	ldw	r18,56(sp)
  804080:	dc400d17 	ldw	r17,52(sp)
  804084:	dd401904 	addi	r21,sp,100
  804088:	9c3fed16 	blt	r19,r16,804040 <___vfprintf_internal_r+0x430>
  80408c:	9425883a 	add	r18,r18,r16
  804090:	8c400044 	addi	r17,r17,1
  804094:	008001c4 	movi	r2,7
  804098:	af000015 	stw	fp,0(r21)
  80409c:	ac000115 	stw	r16,4(r21)
  8040a0:	dc800e15 	stw	r18,56(sp)
  8040a4:	dc400d15 	stw	r17,52(sp)
  8040a8:	1441f516 	blt	r2,r17,804880 <___vfprintf_internal_r+0xc70>
  8040ac:	ad400204 	addi	r21,r21,8
  8040b0:	00000206 	br	8040bc <___vfprintf_internal_r+0x4ac>
  8040b4:	dc800e17 	ldw	r18,56(sp)
  8040b8:	dc400d17 	ldw	r17,52(sp)
  8040bc:	d8800407 	ldb	r2,16(sp)
  8040c0:	10000b26 	beq	r2,zero,8040f0 <___vfprintf_internal_r+0x4e0>
  8040c4:	00800044 	movi	r2,1
  8040c8:	94800044 	addi	r18,r18,1
  8040cc:	8c400044 	addi	r17,r17,1
  8040d0:	a8800115 	stw	r2,4(r21)
  8040d4:	d8c00404 	addi	r3,sp,16
  8040d8:	008001c4 	movi	r2,7
  8040dc:	a8c00015 	stw	r3,0(r21)
  8040e0:	dc800e15 	stw	r18,56(sp)
  8040e4:	dc400d15 	stw	r17,52(sp)
  8040e8:	1441da16 	blt	r2,r17,804854 <___vfprintf_internal_r+0xc44>
  8040ec:	ad400204 	addi	r21,r21,8
  8040f0:	d9015017 	ldw	r4,1344(sp)
  8040f4:	20000b1e 	bne	r4,zero,804124 <___vfprintf_internal_r+0x514>
  8040f8:	d8800444 	addi	r2,sp,17
  8040fc:	94800084 	addi	r18,r18,2
  804100:	8c400044 	addi	r17,r17,1
  804104:	a8800015 	stw	r2,0(r21)
  804108:	00c00084 	movi	r3,2
  80410c:	008001c4 	movi	r2,7
  804110:	a8c00115 	stw	r3,4(r21)
  804114:	dc800e15 	stw	r18,56(sp)
  804118:	dc400d15 	stw	r17,52(sp)
  80411c:	1441c216 	blt	r2,r17,804828 <___vfprintf_internal_r+0xc18>
  804120:	ad400204 	addi	r21,r21,8
  804124:	d9414e17 	ldw	r5,1336(sp)
  804128:	00802004 	movi	r2,128
  80412c:	2880b126 	beq	r5,r2,8043f4 <___vfprintf_internal_r+0x7e4>
  804130:	d8c14617 	ldw	r3,1304(sp)
  804134:	19e1c83a 	sub	r16,r3,r7
  804138:	0400260e 	bge	zero,r16,8041d4 <___vfprintf_internal_r+0x5c4>
  80413c:	00800404 	movi	r2,16
  804140:	1403c90e 	bge	r2,r16,805068 <___vfprintf_internal_r+0x1458>
  804144:	1027883a 	mov	r19,r2
  804148:	070020b4 	movhi	fp,130
  80414c:	e7317284 	addi	fp,fp,-14902
  804150:	050001c4 	movi	r20,7
  804154:	00000306 	br	804164 <___vfprintf_internal_r+0x554>
  804158:	843ffc04 	addi	r16,r16,-16
  80415c:	ad400204 	addi	r21,r21,8
  804160:	9c00130e 	bge	r19,r16,8041b0 <___vfprintf_internal_r+0x5a0>
  804164:	94800404 	addi	r18,r18,16
  804168:	8c400044 	addi	r17,r17,1
  80416c:	af000015 	stw	fp,0(r21)
  804170:	acc00115 	stw	r19,4(r21)
  804174:	dc800e15 	stw	r18,56(sp)
  804178:	dc400d15 	stw	r17,52(sp)
  80417c:	a47ff60e 	bge	r20,r17,804158 <___vfprintf_internal_r+0x548>
  804180:	d9014f17 	ldw	r4,1340(sp)
  804184:	b00b883a 	mov	r5,r22
  804188:	d9800c04 	addi	r6,sp,48
  80418c:	d9c15115 	stw	r7,1348(sp)
  804190:	0803bb80 	call	803bb8 <__sprint_r>
  804194:	d9c15117 	ldw	r7,1348(sp)
  804198:	1000551e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  80419c:	843ffc04 	addi	r16,r16,-16
  8041a0:	dc800e17 	ldw	r18,56(sp)
  8041a4:	dc400d17 	ldw	r17,52(sp)
  8041a8:	dd401904 	addi	r21,sp,100
  8041ac:	9c3fed16 	blt	r19,r16,804164 <___vfprintf_internal_r+0x554>
  8041b0:	9425883a 	add	r18,r18,r16
  8041b4:	8c400044 	addi	r17,r17,1
  8041b8:	008001c4 	movi	r2,7
  8041bc:	af000015 	stw	fp,0(r21)
  8041c0:	ac000115 	stw	r16,4(r21)
  8041c4:	dc800e15 	stw	r18,56(sp)
  8041c8:	dc400d15 	stw	r17,52(sp)
  8041cc:	14418216 	blt	r2,r17,8047d8 <___vfprintf_internal_r+0xbc8>
  8041d0:	ad400204 	addi	r21,r21,8
  8041d4:	d9014c17 	ldw	r4,1328(sp)
  8041d8:	2080400c 	andi	r2,r4,256
  8041dc:	10004a1e 	bne	r2,zero,804308 <___vfprintf_internal_r+0x6f8>
  8041e0:	d9414117 	ldw	r5,1284(sp)
  8041e4:	91e5883a 	add	r18,r18,r7
  8041e8:	8c400044 	addi	r17,r17,1
  8041ec:	008001c4 	movi	r2,7
  8041f0:	a9400015 	stw	r5,0(r21)
  8041f4:	a9c00115 	stw	r7,4(r21)
  8041f8:	dc800e15 	stw	r18,56(sp)
  8041fc:	dc400d15 	stw	r17,52(sp)
  804200:	14416716 	blt	r2,r17,8047a0 <___vfprintf_internal_r+0xb90>
  804204:	a8c00204 	addi	r3,r21,8
  804208:	d9814c17 	ldw	r6,1328(sp)
  80420c:	3080010c 	andi	r2,r6,4
  804210:	10002826 	beq	r2,zero,8042b4 <___vfprintf_internal_r+0x6a4>
  804214:	d8814a17 	ldw	r2,1320(sp)
  804218:	d9014517 	ldw	r4,1300(sp)
  80421c:	1121c83a 	sub	r16,r2,r4
  804220:	0400240e 	bge	zero,r16,8042b4 <___vfprintf_internal_r+0x6a4>
  804224:	00800404 	movi	r2,16
  804228:	14044f0e 	bge	r2,r16,805368 <___vfprintf_internal_r+0x1758>
  80422c:	dc400d17 	ldw	r17,52(sp)
  804230:	1027883a 	mov	r19,r2
  804234:	070020b4 	movhi	fp,130
  804238:	e7317684 	addi	fp,fp,-14886
  80423c:	050001c4 	movi	r20,7
  804240:	00000306 	br	804250 <___vfprintf_internal_r+0x640>
  804244:	843ffc04 	addi	r16,r16,-16
  804248:	18c00204 	addi	r3,r3,8
  80424c:	9c00110e 	bge	r19,r16,804294 <___vfprintf_internal_r+0x684>
  804250:	94800404 	addi	r18,r18,16
  804254:	8c400044 	addi	r17,r17,1
  804258:	1f000015 	stw	fp,0(r3)
  80425c:	1cc00115 	stw	r19,4(r3)
  804260:	dc800e15 	stw	r18,56(sp)
  804264:	dc400d15 	stw	r17,52(sp)
  804268:	a47ff60e 	bge	r20,r17,804244 <___vfprintf_internal_r+0x634>
  80426c:	d9014f17 	ldw	r4,1340(sp)
  804270:	b00b883a 	mov	r5,r22
  804274:	d9800c04 	addi	r6,sp,48
  804278:	0803bb80 	call	803bb8 <__sprint_r>
  80427c:	10001c1e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  804280:	843ffc04 	addi	r16,r16,-16
  804284:	dc800e17 	ldw	r18,56(sp)
  804288:	dc400d17 	ldw	r17,52(sp)
  80428c:	d8c01904 	addi	r3,sp,100
  804290:	9c3fef16 	blt	r19,r16,804250 <___vfprintf_internal_r+0x640>
  804294:	9425883a 	add	r18,r18,r16
  804298:	8c400044 	addi	r17,r17,1
  80429c:	008001c4 	movi	r2,7
  8042a0:	1f000015 	stw	fp,0(r3)
  8042a4:	1c000115 	stw	r16,4(r3)
  8042a8:	dc800e15 	stw	r18,56(sp)
  8042ac:	dc400d15 	stw	r17,52(sp)
  8042b0:	1440cb16 	blt	r2,r17,8045e0 <___vfprintf_internal_r+0x9d0>
  8042b4:	d8814a17 	ldw	r2,1320(sp)
  8042b8:	d9414517 	ldw	r5,1300(sp)
  8042bc:	1140010e 	bge	r2,r5,8042c4 <___vfprintf_internal_r+0x6b4>
  8042c0:	2805883a 	mov	r2,r5
  8042c4:	d9814b17 	ldw	r6,1324(sp)
  8042c8:	308d883a 	add	r6,r6,r2
  8042cc:	d9814b15 	stw	r6,1324(sp)
  8042d0:	90013b1e 	bne	r18,zero,8047c0 <___vfprintf_internal_r+0xbb0>
  8042d4:	d9c14017 	ldw	r7,1280(sp)
  8042d8:	dd401904 	addi	r21,sp,100
  8042dc:	d8000d15 	stw	zero,52(sp)
  8042e0:	003ea706 	br	803d80 <___vfprintf_internal_r+0x170>
  8042e4:	d8800e17 	ldw	r2,56(sp)
  8042e8:	10053f1e 	bne	r2,zero,8057e8 <___vfprintf_internal_r+0x1bd8>
  8042ec:	d8000d15 	stw	zero,52(sp)
  8042f0:	b080030b 	ldhu	r2,12(r22)
  8042f4:	1080100c 	andi	r2,r2,64
  8042f8:	103e8726 	beq	r2,zero,803d18 <___vfprintf_internal_r+0x108>
  8042fc:	00bfffc4 	movi	r2,-1
  804300:	d8814b15 	stw	r2,1324(sp)
  804304:	003e8406 	br	803d18 <___vfprintf_internal_r+0x108>
  804308:	d9814d17 	ldw	r6,1332(sp)
  80430c:	00801944 	movi	r2,101
  804310:	11806e16 	blt	r2,r6,8044cc <___vfprintf_internal_r+0x8bc>
  804314:	d9414717 	ldw	r5,1308(sp)
  804318:	00c00044 	movi	r3,1
  80431c:	1943430e 	bge	r3,r5,80502c <___vfprintf_internal_r+0x141c>
  804320:	d8814117 	ldw	r2,1284(sp)
  804324:	94800044 	addi	r18,r18,1
  804328:	8c400044 	addi	r17,r17,1
  80432c:	a8800015 	stw	r2,0(r21)
  804330:	008001c4 	movi	r2,7
  804334:	a8c00115 	stw	r3,4(r21)
  804338:	dc800e15 	stw	r18,56(sp)
  80433c:	dc400d15 	stw	r17,52(sp)
  804340:	1441ca16 	blt	r2,r17,804a6c <___vfprintf_internal_r+0xe5c>
  804344:	a8c00204 	addi	r3,r21,8
  804348:	d9014917 	ldw	r4,1316(sp)
  80434c:	00800044 	movi	r2,1
  804350:	94800044 	addi	r18,r18,1
  804354:	8c400044 	addi	r17,r17,1
  804358:	18800115 	stw	r2,4(r3)
  80435c:	008001c4 	movi	r2,7
  804360:	19000015 	stw	r4,0(r3)
  804364:	dc800e15 	stw	r18,56(sp)
  804368:	dc400d15 	stw	r17,52(sp)
  80436c:	1441b616 	blt	r2,r17,804a48 <___vfprintf_internal_r+0xe38>
  804370:	1cc00204 	addi	r19,r3,8
  804374:	d9014217 	ldw	r4,1288(sp)
  804378:	d9414317 	ldw	r5,1292(sp)
  80437c:	000d883a 	mov	r6,zero
  804380:	000f883a 	mov	r7,zero
  804384:	080b9100 	call	80b910 <__nedf2>
  804388:	10017426 	beq	r2,zero,80495c <___vfprintf_internal_r+0xd4c>
  80438c:	d9414717 	ldw	r5,1308(sp)
  804390:	d9814117 	ldw	r6,1284(sp)
  804394:	8c400044 	addi	r17,r17,1
  804398:	2c85883a 	add	r2,r5,r18
  80439c:	14bfffc4 	addi	r18,r2,-1
  8043a0:	28bfffc4 	addi	r2,r5,-1
  8043a4:	30c00044 	addi	r3,r6,1
  8043a8:	98800115 	stw	r2,4(r19)
  8043ac:	008001c4 	movi	r2,7
  8043b0:	98c00015 	stw	r3,0(r19)
  8043b4:	dc800e15 	stw	r18,56(sp)
  8043b8:	dc400d15 	stw	r17,52(sp)
  8043bc:	14418e16 	blt	r2,r17,8049f8 <___vfprintf_internal_r+0xde8>
  8043c0:	9cc00204 	addi	r19,r19,8
  8043c4:	d9414817 	ldw	r5,1312(sp)
  8043c8:	d8800804 	addi	r2,sp,32
  8043cc:	8c400044 	addi	r17,r17,1
  8043d0:	9165883a 	add	r18,r18,r5
  8043d4:	98800015 	stw	r2,0(r19)
  8043d8:	008001c4 	movi	r2,7
  8043dc:	99400115 	stw	r5,4(r19)
  8043e0:	dc800e15 	stw	r18,56(sp)
  8043e4:	dc400d15 	stw	r17,52(sp)
  8043e8:	1440ed16 	blt	r2,r17,8047a0 <___vfprintf_internal_r+0xb90>
  8043ec:	98c00204 	addi	r3,r19,8
  8043f0:	003f8506 	br	804208 <___vfprintf_internal_r+0x5f8>
  8043f4:	d9814a17 	ldw	r6,1320(sp)
  8043f8:	d8814517 	ldw	r2,1300(sp)
  8043fc:	30a1c83a 	sub	r16,r6,r2
  804400:	043f4b0e 	bge	zero,r16,804130 <___vfprintf_internal_r+0x520>
  804404:	00800404 	movi	r2,16
  804408:	1404340e 	bge	r2,r16,8054dc <___vfprintf_internal_r+0x18cc>
  80440c:	1027883a 	mov	r19,r2
  804410:	070020b4 	movhi	fp,130
  804414:	e7317284 	addi	fp,fp,-14902
  804418:	050001c4 	movi	r20,7
  80441c:	00000306 	br	80442c <___vfprintf_internal_r+0x81c>
  804420:	843ffc04 	addi	r16,r16,-16
  804424:	ad400204 	addi	r21,r21,8
  804428:	9c00130e 	bge	r19,r16,804478 <___vfprintf_internal_r+0x868>
  80442c:	94800404 	addi	r18,r18,16
  804430:	8c400044 	addi	r17,r17,1
  804434:	af000015 	stw	fp,0(r21)
  804438:	acc00115 	stw	r19,4(r21)
  80443c:	dc800e15 	stw	r18,56(sp)
  804440:	dc400d15 	stw	r17,52(sp)
  804444:	a47ff60e 	bge	r20,r17,804420 <___vfprintf_internal_r+0x810>
  804448:	d9014f17 	ldw	r4,1340(sp)
  80444c:	b00b883a 	mov	r5,r22
  804450:	d9800c04 	addi	r6,sp,48
  804454:	d9c15115 	stw	r7,1348(sp)
  804458:	0803bb80 	call	803bb8 <__sprint_r>
  80445c:	d9c15117 	ldw	r7,1348(sp)
  804460:	103fa31e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  804464:	843ffc04 	addi	r16,r16,-16
  804468:	dc800e17 	ldw	r18,56(sp)
  80446c:	dc400d17 	ldw	r17,52(sp)
  804470:	dd401904 	addi	r21,sp,100
  804474:	9c3fed16 	blt	r19,r16,80442c <___vfprintf_internal_r+0x81c>
  804478:	9425883a 	add	r18,r18,r16
  80447c:	8c400044 	addi	r17,r17,1
  804480:	008001c4 	movi	r2,7
  804484:	af000015 	stw	fp,0(r21)
  804488:	ac000115 	stw	r16,4(r21)
  80448c:	dc800e15 	stw	r18,56(sp)
  804490:	dc400d15 	stw	r17,52(sp)
  804494:	14416116 	blt	r2,r17,804a1c <___vfprintf_internal_r+0xe0c>
  804498:	ad400204 	addi	r21,r21,8
  80449c:	003f2406 	br	804130 <___vfprintf_internal_r+0x520>
  8044a0:	d9014f17 	ldw	r4,1340(sp)
  8044a4:	08076800 	call	807680 <__sinit>
  8044a8:	d9c15117 	ldw	r7,1348(sp)
  8044ac:	003def06 	br	803c6c <___vfprintf_internal_r+0x5c>
  8044b0:	d9014f17 	ldw	r4,1340(sp)
  8044b4:	b00b883a 	mov	r5,r22
  8044b8:	d9c15115 	stw	r7,1348(sp)
  8044bc:	0805ae00 	call	805ae0 <__swsetup_r>
  8044c0:	d9c15117 	ldw	r7,1348(sp)
  8044c4:	103dee26 	beq	r2,zero,803c80 <___vfprintf_internal_r+0x70>
  8044c8:	003f8c06 	br	8042fc <___vfprintf_internal_r+0x6ec>
  8044cc:	d9014217 	ldw	r4,1288(sp)
  8044d0:	d9414317 	ldw	r5,1292(sp)
  8044d4:	000d883a 	mov	r6,zero
  8044d8:	000f883a 	mov	r7,zero
  8044dc:	080b8880 	call	80b888 <__eqdf2>
  8044e0:	1000f21e 	bne	r2,zero,8048ac <___vfprintf_internal_r+0xc9c>
  8044e4:	008020b4 	movhi	r2,130
  8044e8:	10b17204 	addi	r2,r2,-14904
  8044ec:	94800044 	addi	r18,r18,1
  8044f0:	8c400044 	addi	r17,r17,1
  8044f4:	a8800015 	stw	r2,0(r21)
  8044f8:	00c00044 	movi	r3,1
  8044fc:	008001c4 	movi	r2,7
  804500:	a8c00115 	stw	r3,4(r21)
  804504:	dc800e15 	stw	r18,56(sp)
  804508:	dc400d15 	stw	r17,52(sp)
  80450c:	1442fa16 	blt	r2,r17,8050f8 <___vfprintf_internal_r+0x14e8>
  804510:	a8c00204 	addi	r3,r21,8
  804514:	d8800517 	ldw	r2,20(sp)
  804518:	d9014717 	ldw	r4,1308(sp)
  80451c:	11015c0e 	bge	r2,r4,804a90 <___vfprintf_internal_r+0xe80>
  804520:	dc400d17 	ldw	r17,52(sp)
  804524:	d9814917 	ldw	r6,1316(sp)
  804528:	00800044 	movi	r2,1
  80452c:	94800044 	addi	r18,r18,1
  804530:	8c400044 	addi	r17,r17,1
  804534:	18800115 	stw	r2,4(r3)
  804538:	008001c4 	movi	r2,7
  80453c:	19800015 	stw	r6,0(r3)
  804540:	dc800e15 	stw	r18,56(sp)
  804544:	dc400d15 	stw	r17,52(sp)
  804548:	14431016 	blt	r2,r17,80518c <___vfprintf_internal_r+0x157c>
  80454c:	18c00204 	addi	r3,r3,8
  804550:	d8814717 	ldw	r2,1308(sp)
  804554:	143fffc4 	addi	r16,r2,-1
  804558:	043f2b0e 	bge	zero,r16,804208 <___vfprintf_internal_r+0x5f8>
  80455c:	00800404 	movi	r2,16
  804560:	1402a20e 	bge	r2,r16,804fec <___vfprintf_internal_r+0x13dc>
  804564:	dc400d17 	ldw	r17,52(sp)
  804568:	1027883a 	mov	r19,r2
  80456c:	070020b4 	movhi	fp,130
  804570:	e7317284 	addi	fp,fp,-14902
  804574:	050001c4 	movi	r20,7
  804578:	00000306 	br	804588 <___vfprintf_internal_r+0x978>
  80457c:	18c00204 	addi	r3,r3,8
  804580:	843ffc04 	addi	r16,r16,-16
  804584:	9c029c0e 	bge	r19,r16,804ff8 <___vfprintf_internal_r+0x13e8>
  804588:	94800404 	addi	r18,r18,16
  80458c:	8c400044 	addi	r17,r17,1
  804590:	1f000015 	stw	fp,0(r3)
  804594:	1cc00115 	stw	r19,4(r3)
  804598:	dc800e15 	stw	r18,56(sp)
  80459c:	dc400d15 	stw	r17,52(sp)
  8045a0:	a47ff60e 	bge	r20,r17,80457c <___vfprintf_internal_r+0x96c>
  8045a4:	d9014f17 	ldw	r4,1340(sp)
  8045a8:	b00b883a 	mov	r5,r22
  8045ac:	d9800c04 	addi	r6,sp,48
  8045b0:	0803bb80 	call	803bb8 <__sprint_r>
  8045b4:	103f4e1e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  8045b8:	dc800e17 	ldw	r18,56(sp)
  8045bc:	dc400d17 	ldw	r17,52(sp)
  8045c0:	d8c01904 	addi	r3,sp,100
  8045c4:	003fee06 	br	804580 <___vfprintf_internal_r+0x970>
  8045c8:	d8802c0b 	ldhu	r2,176(sp)
  8045cc:	00ffffc4 	movi	r3,-1
  8045d0:	d8c14b15 	stw	r3,1324(sp)
  8045d4:	1080100c 	andi	r2,r2,64
  8045d8:	103dcc1e 	bne	r2,zero,803d0c <___vfprintf_internal_r+0xfc>
  8045dc:	003dce06 	br	803d18 <___vfprintf_internal_r+0x108>
  8045e0:	d9014f17 	ldw	r4,1340(sp)
  8045e4:	b00b883a 	mov	r5,r22
  8045e8:	d9800c04 	addi	r6,sp,48
  8045ec:	0803bb80 	call	803bb8 <__sprint_r>
  8045f0:	103f3f1e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  8045f4:	dc800e17 	ldw	r18,56(sp)
  8045f8:	003f2e06 	br	8042b4 <___vfprintf_internal_r+0x6a4>
  8045fc:	d9414c17 	ldw	r5,1328(sp)
  804600:	29400414 	ori	r5,r5,16
  804604:	d9414c15 	stw	r5,1328(sp)
  804608:	d9814c17 	ldw	r6,1328(sp)
  80460c:	3080080c 	andi	r2,r6,32
  804610:	10014f1e 	bne	r2,zero,804b50 <___vfprintf_internal_r+0xf40>
  804614:	d8c14c17 	ldw	r3,1328(sp)
  804618:	1880040c 	andi	r2,r3,16
  80461c:	1002ea1e 	bne	r2,zero,8051c8 <___vfprintf_internal_r+0x15b8>
  804620:	d9014c17 	ldw	r4,1328(sp)
  804624:	2080100c 	andi	r2,r4,64
  804628:	1002e726 	beq	r2,zero,8051c8 <___vfprintf_internal_r+0x15b8>
  80462c:	3880000f 	ldh	r2,0(r7)
  804630:	39c00104 	addi	r7,r7,4
  804634:	d9c14015 	stw	r7,1280(sp)
  804638:	1023d7fa 	srai	r17,r2,31
  80463c:	1021883a 	mov	r16,r2
  804640:	88037216 	blt	r17,zero,80540c <___vfprintf_internal_r+0x17fc>
  804644:	01000044 	movi	r4,1
  804648:	98000416 	blt	r19,zero,80465c <___vfprintf_internal_r+0xa4c>
  80464c:	d8c14c17 	ldw	r3,1328(sp)
  804650:	00bfdfc4 	movi	r2,-129
  804654:	1886703a 	and	r3,r3,r2
  804658:	d8c14c15 	stw	r3,1328(sp)
  80465c:	8444b03a 	or	r2,r16,r17
  804660:	1002261e 	bne	r2,zero,804efc <___vfprintf_internal_r+0x12ec>
  804664:	9802251e 	bne	r19,zero,804efc <___vfprintf_internal_r+0x12ec>
  804668:	20803fcc 	andi	r2,r4,255
  80466c:	10029b26 	beq	r2,zero,8050dc <___vfprintf_internal_r+0x14cc>
  804670:	d8c01904 	addi	r3,sp,100
  804674:	dd000f04 	addi	r20,sp,60
  804678:	d8c14115 	stw	r3,1284(sp)
  80467c:	d8c14117 	ldw	r3,1284(sp)
  804680:	dcc14515 	stw	r19,1300(sp)
  804684:	a0c5c83a 	sub	r2,r20,r3
  804688:	11c00a04 	addi	r7,r2,40
  80468c:	99c0010e 	bge	r19,r7,804694 <___vfprintf_internal_r+0xa84>
  804690:	d9c14515 	stw	r7,1300(sp)
  804694:	dcc14615 	stw	r19,1304(sp)
  804698:	d8800407 	ldb	r2,16(sp)
  80469c:	103e4c26 	beq	r2,zero,803fd0 <___vfprintf_internal_r+0x3c0>
  8046a0:	d8814517 	ldw	r2,1300(sp)
  8046a4:	10800044 	addi	r2,r2,1
  8046a8:	d8814515 	stw	r2,1300(sp)
  8046ac:	003e4806 	br	803fd0 <___vfprintf_internal_r+0x3c0>
  8046b0:	d9814c17 	ldw	r6,1328(sp)
  8046b4:	31800414 	ori	r6,r6,16
  8046b8:	d9814c15 	stw	r6,1328(sp)
  8046bc:	d8c14c17 	ldw	r3,1328(sp)
  8046c0:	1880080c 	andi	r2,r3,32
  8046c4:	1001271e 	bne	r2,zero,804b64 <___vfprintf_internal_r+0xf54>
  8046c8:	d9414c17 	ldw	r5,1328(sp)
  8046cc:	2880040c 	andi	r2,r5,16
  8046d0:	1002b61e 	bne	r2,zero,8051ac <___vfprintf_internal_r+0x159c>
  8046d4:	d9814c17 	ldw	r6,1328(sp)
  8046d8:	3080100c 	andi	r2,r6,64
  8046dc:	1002b326 	beq	r2,zero,8051ac <___vfprintf_internal_r+0x159c>
  8046e0:	3c00000b 	ldhu	r16,0(r7)
  8046e4:	0009883a 	mov	r4,zero
  8046e8:	39c00104 	addi	r7,r7,4
  8046ec:	0023883a 	mov	r17,zero
  8046f0:	d9c14015 	stw	r7,1280(sp)
  8046f4:	d8000405 	stb	zero,16(sp)
  8046f8:	003fd306 	br	804648 <___vfprintf_internal_r+0xa38>
  8046fc:	d9014c17 	ldw	r4,1328(sp)
  804700:	21000414 	ori	r4,r4,16
  804704:	d9014c15 	stw	r4,1328(sp)
  804708:	d9414c17 	ldw	r5,1328(sp)
  80470c:	2880080c 	andi	r2,r5,32
  804710:	1001081e 	bne	r2,zero,804b34 <___vfprintf_internal_r+0xf24>
  804714:	d8c14c17 	ldw	r3,1328(sp)
  804718:	1880040c 	andi	r2,r3,16
  80471c:	1002b01e 	bne	r2,zero,8051e0 <___vfprintf_internal_r+0x15d0>
  804720:	d9014c17 	ldw	r4,1328(sp)
  804724:	2080100c 	andi	r2,r4,64
  804728:	1002ad26 	beq	r2,zero,8051e0 <___vfprintf_internal_r+0x15d0>
  80472c:	3c00000b 	ldhu	r16,0(r7)
  804730:	01000044 	movi	r4,1
  804734:	39c00104 	addi	r7,r7,4
  804738:	0023883a 	mov	r17,zero
  80473c:	d9c14015 	stw	r7,1280(sp)
  804740:	d8000405 	stb	zero,16(sp)
  804744:	003fc006 	br	804648 <___vfprintf_internal_r+0xa38>
  804748:	d9014f17 	ldw	r4,1340(sp)
  80474c:	b00b883a 	mov	r5,r22
  804750:	d9800c04 	addi	r6,sp,48
  804754:	0803bb80 	call	803bb8 <__sprint_r>
  804758:	103ee51e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  80475c:	dc800e17 	ldw	r18,56(sp)
  804760:	d8c01904 	addi	r3,sp,100
  804764:	d9814c17 	ldw	r6,1328(sp)
  804768:	3080004c 	andi	r2,r6,1
  80476c:	1005003a 	cmpeq	r2,r2,zero
  804770:	103ea51e 	bne	r2,zero,804208 <___vfprintf_internal_r+0x5f8>
  804774:	00800044 	movi	r2,1
  804778:	dc400d17 	ldw	r17,52(sp)
  80477c:	18800115 	stw	r2,4(r3)
  804780:	d8814917 	ldw	r2,1316(sp)
  804784:	94800044 	addi	r18,r18,1
  804788:	8c400044 	addi	r17,r17,1
  80478c:	18800015 	stw	r2,0(r3)
  804790:	008001c4 	movi	r2,7
  804794:	dc800e15 	stw	r18,56(sp)
  804798:	dc400d15 	stw	r17,52(sp)
  80479c:	14421e0e 	bge	r2,r17,805018 <___vfprintf_internal_r+0x1408>
  8047a0:	d9014f17 	ldw	r4,1340(sp)
  8047a4:	b00b883a 	mov	r5,r22
  8047a8:	d9800c04 	addi	r6,sp,48
  8047ac:	0803bb80 	call	803bb8 <__sprint_r>
  8047b0:	103ecf1e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  8047b4:	dc800e17 	ldw	r18,56(sp)
  8047b8:	d8c01904 	addi	r3,sp,100
  8047bc:	003e9206 	br	804208 <___vfprintf_internal_r+0x5f8>
  8047c0:	d9014f17 	ldw	r4,1340(sp)
  8047c4:	b00b883a 	mov	r5,r22
  8047c8:	d9800c04 	addi	r6,sp,48
  8047cc:	0803bb80 	call	803bb8 <__sprint_r>
  8047d0:	103ec026 	beq	r2,zero,8042d4 <___vfprintf_internal_r+0x6c4>
  8047d4:	003ec606 	br	8042f0 <___vfprintf_internal_r+0x6e0>
  8047d8:	d9014f17 	ldw	r4,1340(sp)
  8047dc:	b00b883a 	mov	r5,r22
  8047e0:	d9800c04 	addi	r6,sp,48
  8047e4:	d9c15115 	stw	r7,1348(sp)
  8047e8:	0803bb80 	call	803bb8 <__sprint_r>
  8047ec:	d9c15117 	ldw	r7,1348(sp)
  8047f0:	103ebf1e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  8047f4:	dc800e17 	ldw	r18,56(sp)
  8047f8:	dc400d17 	ldw	r17,52(sp)
  8047fc:	dd401904 	addi	r21,sp,100
  804800:	003e7406 	br	8041d4 <___vfprintf_internal_r+0x5c4>
  804804:	d9014f17 	ldw	r4,1340(sp)
  804808:	b00b883a 	mov	r5,r22
  80480c:	d9800c04 	addi	r6,sp,48
  804810:	d9c15115 	stw	r7,1348(sp)
  804814:	0803bb80 	call	803bb8 <__sprint_r>
  804818:	d9c15117 	ldw	r7,1348(sp)
  80481c:	103eb41e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  804820:	dd401904 	addi	r21,sp,100
  804824:	003d6d06 	br	803ddc <___vfprintf_internal_r+0x1cc>
  804828:	d9014f17 	ldw	r4,1340(sp)
  80482c:	b00b883a 	mov	r5,r22
  804830:	d9800c04 	addi	r6,sp,48
  804834:	d9c15115 	stw	r7,1348(sp)
  804838:	0803bb80 	call	803bb8 <__sprint_r>
  80483c:	d9c15117 	ldw	r7,1348(sp)
  804840:	103eab1e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  804844:	dc800e17 	ldw	r18,56(sp)
  804848:	dc400d17 	ldw	r17,52(sp)
  80484c:	dd401904 	addi	r21,sp,100
  804850:	003e3406 	br	804124 <___vfprintf_internal_r+0x514>
  804854:	d9014f17 	ldw	r4,1340(sp)
  804858:	b00b883a 	mov	r5,r22
  80485c:	d9800c04 	addi	r6,sp,48
  804860:	d9c15115 	stw	r7,1348(sp)
  804864:	0803bb80 	call	803bb8 <__sprint_r>
  804868:	d9c15117 	ldw	r7,1348(sp)
  80486c:	103ea01e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  804870:	dc800e17 	ldw	r18,56(sp)
  804874:	dc400d17 	ldw	r17,52(sp)
  804878:	dd401904 	addi	r21,sp,100
  80487c:	003e1c06 	br	8040f0 <___vfprintf_internal_r+0x4e0>
  804880:	d9014f17 	ldw	r4,1340(sp)
  804884:	b00b883a 	mov	r5,r22
  804888:	d9800c04 	addi	r6,sp,48
  80488c:	d9c15115 	stw	r7,1348(sp)
  804890:	0803bb80 	call	803bb8 <__sprint_r>
  804894:	d9c15117 	ldw	r7,1348(sp)
  804898:	103e951e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  80489c:	dc800e17 	ldw	r18,56(sp)
  8048a0:	dc400d17 	ldw	r17,52(sp)
  8048a4:	dd401904 	addi	r21,sp,100
  8048a8:	003e0406 	br	8040bc <___vfprintf_internal_r+0x4ac>
  8048ac:	d9000517 	ldw	r4,20(sp)
  8048b0:	0102520e 	bge	zero,r4,8051fc <___vfprintf_internal_r+0x15ec>
  8048b4:	d9814717 	ldw	r6,1308(sp)
  8048b8:	21807a16 	blt	r4,r6,804aa4 <___vfprintf_internal_r+0xe94>
  8048bc:	d8814117 	ldw	r2,1284(sp)
  8048c0:	91a5883a 	add	r18,r18,r6
  8048c4:	8c400044 	addi	r17,r17,1
  8048c8:	a8800015 	stw	r2,0(r21)
  8048cc:	008001c4 	movi	r2,7
  8048d0:	a9800115 	stw	r6,4(r21)
  8048d4:	dc800e15 	stw	r18,56(sp)
  8048d8:	dc400d15 	stw	r17,52(sp)
  8048dc:	1442f616 	blt	r2,r17,8054b8 <___vfprintf_internal_r+0x18a8>
  8048e0:	a8c00204 	addi	r3,r21,8
  8048e4:	d9414717 	ldw	r5,1308(sp)
  8048e8:	2161c83a 	sub	r16,r4,r5
  8048ec:	043f9d0e 	bge	zero,r16,804764 <___vfprintf_internal_r+0xb54>
  8048f0:	00800404 	movi	r2,16
  8048f4:	1402130e 	bge	r2,r16,805144 <___vfprintf_internal_r+0x1534>
  8048f8:	dc400d17 	ldw	r17,52(sp)
  8048fc:	1027883a 	mov	r19,r2
  804900:	070020b4 	movhi	fp,130
  804904:	e7317284 	addi	fp,fp,-14902
  804908:	050001c4 	movi	r20,7
  80490c:	00000306 	br	80491c <___vfprintf_internal_r+0xd0c>
  804910:	18c00204 	addi	r3,r3,8
  804914:	843ffc04 	addi	r16,r16,-16
  804918:	9c020d0e 	bge	r19,r16,805150 <___vfprintf_internal_r+0x1540>
  80491c:	94800404 	addi	r18,r18,16
  804920:	8c400044 	addi	r17,r17,1
  804924:	1f000015 	stw	fp,0(r3)
  804928:	1cc00115 	stw	r19,4(r3)
  80492c:	dc800e15 	stw	r18,56(sp)
  804930:	dc400d15 	stw	r17,52(sp)
  804934:	a47ff60e 	bge	r20,r17,804910 <___vfprintf_internal_r+0xd00>
  804938:	d9014f17 	ldw	r4,1340(sp)
  80493c:	b00b883a 	mov	r5,r22
  804940:	d9800c04 	addi	r6,sp,48
  804944:	0803bb80 	call	803bb8 <__sprint_r>
  804948:	103e691e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  80494c:	dc800e17 	ldw	r18,56(sp)
  804950:	dc400d17 	ldw	r17,52(sp)
  804954:	d8c01904 	addi	r3,sp,100
  804958:	003fee06 	br	804914 <___vfprintf_internal_r+0xd04>
  80495c:	d8814717 	ldw	r2,1308(sp)
  804960:	143fffc4 	addi	r16,r2,-1
  804964:	043e970e 	bge	zero,r16,8043c4 <___vfprintf_internal_r+0x7b4>
  804968:	00800404 	movi	r2,16
  80496c:	1400180e 	bge	r2,r16,8049d0 <___vfprintf_internal_r+0xdc0>
  804970:	1029883a 	mov	r20,r2
  804974:	070020b4 	movhi	fp,130
  804978:	e7317284 	addi	fp,fp,-14902
  80497c:	054001c4 	movi	r21,7
  804980:	00000306 	br	804990 <___vfprintf_internal_r+0xd80>
  804984:	9cc00204 	addi	r19,r19,8
  804988:	843ffc04 	addi	r16,r16,-16
  80498c:	a400120e 	bge	r20,r16,8049d8 <___vfprintf_internal_r+0xdc8>
  804990:	94800404 	addi	r18,r18,16
  804994:	8c400044 	addi	r17,r17,1
  804998:	9f000015 	stw	fp,0(r19)
  80499c:	9d000115 	stw	r20,4(r19)
  8049a0:	dc800e15 	stw	r18,56(sp)
  8049a4:	dc400d15 	stw	r17,52(sp)
  8049a8:	ac7ff60e 	bge	r21,r17,804984 <___vfprintf_internal_r+0xd74>
  8049ac:	d9014f17 	ldw	r4,1340(sp)
  8049b0:	b00b883a 	mov	r5,r22
  8049b4:	d9800c04 	addi	r6,sp,48
  8049b8:	0803bb80 	call	803bb8 <__sprint_r>
  8049bc:	103e4c1e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  8049c0:	dc800e17 	ldw	r18,56(sp)
  8049c4:	dc400d17 	ldw	r17,52(sp)
  8049c8:	dcc01904 	addi	r19,sp,100
  8049cc:	003fee06 	br	804988 <___vfprintf_internal_r+0xd78>
  8049d0:	070020b4 	movhi	fp,130
  8049d4:	e7317284 	addi	fp,fp,-14902
  8049d8:	9425883a 	add	r18,r18,r16
  8049dc:	8c400044 	addi	r17,r17,1
  8049e0:	008001c4 	movi	r2,7
  8049e4:	9f000015 	stw	fp,0(r19)
  8049e8:	9c000115 	stw	r16,4(r19)
  8049ec:	dc800e15 	stw	r18,56(sp)
  8049f0:	dc400d15 	stw	r17,52(sp)
  8049f4:	147e720e 	bge	r2,r17,8043c0 <___vfprintf_internal_r+0x7b0>
  8049f8:	d9014f17 	ldw	r4,1340(sp)
  8049fc:	b00b883a 	mov	r5,r22
  804a00:	d9800c04 	addi	r6,sp,48
  804a04:	0803bb80 	call	803bb8 <__sprint_r>
  804a08:	103e391e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  804a0c:	dc800e17 	ldw	r18,56(sp)
  804a10:	dc400d17 	ldw	r17,52(sp)
  804a14:	dcc01904 	addi	r19,sp,100
  804a18:	003e6a06 	br	8043c4 <___vfprintf_internal_r+0x7b4>
  804a1c:	d9014f17 	ldw	r4,1340(sp)
  804a20:	b00b883a 	mov	r5,r22
  804a24:	d9800c04 	addi	r6,sp,48
  804a28:	d9c15115 	stw	r7,1348(sp)
  804a2c:	0803bb80 	call	803bb8 <__sprint_r>
  804a30:	d9c15117 	ldw	r7,1348(sp)
  804a34:	103e2e1e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  804a38:	dc800e17 	ldw	r18,56(sp)
  804a3c:	dc400d17 	ldw	r17,52(sp)
  804a40:	dd401904 	addi	r21,sp,100
  804a44:	003dba06 	br	804130 <___vfprintf_internal_r+0x520>
  804a48:	d9014f17 	ldw	r4,1340(sp)
  804a4c:	b00b883a 	mov	r5,r22
  804a50:	d9800c04 	addi	r6,sp,48
  804a54:	0803bb80 	call	803bb8 <__sprint_r>
  804a58:	103e251e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  804a5c:	dc800e17 	ldw	r18,56(sp)
  804a60:	dc400d17 	ldw	r17,52(sp)
  804a64:	dcc01904 	addi	r19,sp,100
  804a68:	003e4206 	br	804374 <___vfprintf_internal_r+0x764>
  804a6c:	d9014f17 	ldw	r4,1340(sp)
  804a70:	b00b883a 	mov	r5,r22
  804a74:	d9800c04 	addi	r6,sp,48
  804a78:	0803bb80 	call	803bb8 <__sprint_r>
  804a7c:	103e1c1e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  804a80:	dc800e17 	ldw	r18,56(sp)
  804a84:	dc400d17 	ldw	r17,52(sp)
  804a88:	d8c01904 	addi	r3,sp,100
  804a8c:	003e2e06 	br	804348 <___vfprintf_internal_r+0x738>
  804a90:	d9414c17 	ldw	r5,1328(sp)
  804a94:	2880004c 	andi	r2,r5,1
  804a98:	1005003a 	cmpeq	r2,r2,zero
  804a9c:	103dda1e 	bne	r2,zero,804208 <___vfprintf_internal_r+0x5f8>
  804aa0:	003e9f06 	br	804520 <___vfprintf_internal_r+0x910>
  804aa4:	d8c14117 	ldw	r3,1284(sp)
  804aa8:	9125883a 	add	r18,r18,r4
  804aac:	8c400044 	addi	r17,r17,1
  804ab0:	008001c4 	movi	r2,7
  804ab4:	a8c00015 	stw	r3,0(r21)
  804ab8:	a9000115 	stw	r4,4(r21)
  804abc:	dc800e15 	stw	r18,56(sp)
  804ac0:	dc400d15 	stw	r17,52(sp)
  804ac4:	14426616 	blt	r2,r17,805460 <___vfprintf_internal_r+0x1850>
  804ac8:	a8c00204 	addi	r3,r21,8
  804acc:	d9414917 	ldw	r5,1316(sp)
  804ad0:	00800044 	movi	r2,1
  804ad4:	94800044 	addi	r18,r18,1
  804ad8:	8c400044 	addi	r17,r17,1
  804adc:	18800115 	stw	r2,4(r3)
  804ae0:	008001c4 	movi	r2,7
  804ae4:	19400015 	stw	r5,0(r3)
  804ae8:	dc800e15 	stw	r18,56(sp)
  804aec:	dc400d15 	stw	r17,52(sp)
  804af0:	2021883a 	mov	r16,r4
  804af4:	14425016 	blt	r2,r17,805438 <___vfprintf_internal_r+0x1828>
  804af8:	19400204 	addi	r5,r3,8
  804afc:	d9814717 	ldw	r6,1308(sp)
  804b00:	8c400044 	addi	r17,r17,1
  804b04:	dc400d15 	stw	r17,52(sp)
  804b08:	3107c83a 	sub	r3,r6,r4
  804b0c:	d9014117 	ldw	r4,1284(sp)
  804b10:	90e5883a 	add	r18,r18,r3
  804b14:	28c00115 	stw	r3,4(r5)
  804b18:	8105883a 	add	r2,r16,r4
  804b1c:	28800015 	stw	r2,0(r5)
  804b20:	008001c4 	movi	r2,7
  804b24:	dc800e15 	stw	r18,56(sp)
  804b28:	147f1d16 	blt	r2,r17,8047a0 <___vfprintf_internal_r+0xb90>
  804b2c:	28c00204 	addi	r3,r5,8
  804b30:	003db506 	br	804208 <___vfprintf_internal_r+0x5f8>
  804b34:	3c000017 	ldw	r16,0(r7)
  804b38:	3c400117 	ldw	r17,4(r7)
  804b3c:	39800204 	addi	r6,r7,8
  804b40:	01000044 	movi	r4,1
  804b44:	d9814015 	stw	r6,1280(sp)
  804b48:	d8000405 	stb	zero,16(sp)
  804b4c:	003ebe06 	br	804648 <___vfprintf_internal_r+0xa38>
  804b50:	3c000017 	ldw	r16,0(r7)
  804b54:	3c400117 	ldw	r17,4(r7)
  804b58:	38800204 	addi	r2,r7,8
  804b5c:	d8814015 	stw	r2,1280(sp)
  804b60:	003eb706 	br	804640 <___vfprintf_internal_r+0xa30>
  804b64:	3c000017 	ldw	r16,0(r7)
  804b68:	3c400117 	ldw	r17,4(r7)
  804b6c:	39000204 	addi	r4,r7,8
  804b70:	d9014015 	stw	r4,1280(sp)
  804b74:	0009883a 	mov	r4,zero
  804b78:	d8000405 	stb	zero,16(sp)
  804b7c:	003eb206 	br	804648 <___vfprintf_internal_r+0xa38>
  804b80:	38c00017 	ldw	r3,0(r7)
  804b84:	39c00104 	addi	r7,r7,4
  804b88:	d8c14a15 	stw	r3,1320(sp)
  804b8c:	1800d10e 	bge	r3,zero,804ed4 <___vfprintf_internal_r+0x12c4>
  804b90:	00c7c83a 	sub	r3,zero,r3
  804b94:	d8c14a15 	stw	r3,1320(sp)
  804b98:	d9014c17 	ldw	r4,1328(sp)
  804b9c:	b8c00007 	ldb	r3,0(r23)
  804ba0:	21000114 	ori	r4,r4,4
  804ba4:	d9014c15 	stw	r4,1328(sp)
  804ba8:	003c9806 	br	803e0c <___vfprintf_internal_r+0x1fc>
  804bac:	d9814c17 	ldw	r6,1328(sp)
  804bb0:	3080080c 	andi	r2,r6,32
  804bb4:	1001f026 	beq	r2,zero,805378 <___vfprintf_internal_r+0x1768>
  804bb8:	d9014b17 	ldw	r4,1324(sp)
  804bbc:	38800017 	ldw	r2,0(r7)
  804bc0:	39c00104 	addi	r7,r7,4
  804bc4:	d9c14015 	stw	r7,1280(sp)
  804bc8:	2007d7fa 	srai	r3,r4,31
  804bcc:	d9c14017 	ldw	r7,1280(sp)
  804bd0:	11000015 	stw	r4,0(r2)
  804bd4:	10c00115 	stw	r3,4(r2)
  804bd8:	003c6906 	br	803d80 <___vfprintf_internal_r+0x170>
  804bdc:	b8c00007 	ldb	r3,0(r23)
  804be0:	00801b04 	movi	r2,108
  804be4:	18824f26 	beq	r3,r2,805524 <___vfprintf_internal_r+0x1914>
  804be8:	d9414c17 	ldw	r5,1328(sp)
  804bec:	29400414 	ori	r5,r5,16
  804bf0:	d9414c15 	stw	r5,1328(sp)
  804bf4:	003c8506 	br	803e0c <___vfprintf_internal_r+0x1fc>
  804bf8:	d9814c17 	ldw	r6,1328(sp)
  804bfc:	b8c00007 	ldb	r3,0(r23)
  804c00:	31800814 	ori	r6,r6,32
  804c04:	d9814c15 	stw	r6,1328(sp)
  804c08:	003c8006 	br	803e0c <___vfprintf_internal_r+0x1fc>
  804c0c:	d8814c17 	ldw	r2,1328(sp)
  804c10:	3c000017 	ldw	r16,0(r7)
  804c14:	00c01e04 	movi	r3,120
  804c18:	10800094 	ori	r2,r2,2
  804c1c:	d8814c15 	stw	r2,1328(sp)
  804c20:	39c00104 	addi	r7,r7,4
  804c24:	014020b4 	movhi	r5,130
  804c28:	29715b04 	addi	r5,r5,-14996
  804c2c:	00800c04 	movi	r2,48
  804c30:	0023883a 	mov	r17,zero
  804c34:	01000084 	movi	r4,2
  804c38:	d9c14015 	stw	r7,1280(sp)
  804c3c:	d8c14d15 	stw	r3,1332(sp)
  804c40:	d9414415 	stw	r5,1296(sp)
  804c44:	d8800445 	stb	r2,17(sp)
  804c48:	d8c00485 	stb	r3,18(sp)
  804c4c:	d8000405 	stb	zero,16(sp)
  804c50:	003e7d06 	br	804648 <___vfprintf_internal_r+0xa38>
  804c54:	d8814c17 	ldw	r2,1328(sp)
  804c58:	b8c00007 	ldb	r3,0(r23)
  804c5c:	10801014 	ori	r2,r2,64
  804c60:	d8814c15 	stw	r2,1328(sp)
  804c64:	003c6906 	br	803e0c <___vfprintf_internal_r+0x1fc>
  804c68:	d9414c17 	ldw	r5,1328(sp)
  804c6c:	2880020c 	andi	r2,r5,8
  804c70:	1001df26 	beq	r2,zero,8053f0 <___vfprintf_internal_r+0x17e0>
  804c74:	39800017 	ldw	r6,0(r7)
  804c78:	38800204 	addi	r2,r7,8
  804c7c:	d8814015 	stw	r2,1280(sp)
  804c80:	d9814215 	stw	r6,1288(sp)
  804c84:	39c00117 	ldw	r7,4(r7)
  804c88:	d9c14315 	stw	r7,1292(sp)
  804c8c:	d9014217 	ldw	r4,1288(sp)
  804c90:	d9414317 	ldw	r5,1292(sp)
  804c94:	080a5b00 	call	80a5b0 <__isinfd>
  804c98:	10021726 	beq	r2,zero,8054f8 <___vfprintf_internal_r+0x18e8>
  804c9c:	d9014217 	ldw	r4,1288(sp)
  804ca0:	d9414317 	ldw	r5,1292(sp)
  804ca4:	000d883a 	mov	r6,zero
  804ca8:	000f883a 	mov	r7,zero
  804cac:	0802f5c0 	call	802f5c <__ltdf2>
  804cb0:	1002ca16 	blt	r2,zero,8057dc <___vfprintf_internal_r+0x1bcc>
  804cb4:	d9414d17 	ldw	r5,1332(sp)
  804cb8:	008011c4 	movi	r2,71
  804cbc:	11420a16 	blt	r2,r5,8054e8 <___vfprintf_internal_r+0x18d8>
  804cc0:	018020b4 	movhi	r6,130
  804cc4:	31b16004 	addi	r6,r6,-14976
  804cc8:	d9814115 	stw	r6,1284(sp)
  804ccc:	d9014c17 	ldw	r4,1328(sp)
  804cd0:	00c000c4 	movi	r3,3
  804cd4:	00bfdfc4 	movi	r2,-129
  804cd8:	2088703a 	and	r4,r4,r2
  804cdc:	180f883a 	mov	r7,r3
  804ce0:	d8c14515 	stw	r3,1300(sp)
  804ce4:	d9014c15 	stw	r4,1328(sp)
  804ce8:	d8014615 	stw	zero,1304(sp)
  804cec:	003e6a06 	br	804698 <___vfprintf_internal_r+0xa88>
  804cf0:	38800017 	ldw	r2,0(r7)
  804cf4:	00c00044 	movi	r3,1
  804cf8:	39c00104 	addi	r7,r7,4
  804cfc:	d9c14015 	stw	r7,1280(sp)
  804d00:	d9000f04 	addi	r4,sp,60
  804d04:	180f883a 	mov	r7,r3
  804d08:	d8c14515 	stw	r3,1300(sp)
  804d0c:	d9014115 	stw	r4,1284(sp)
  804d10:	d8800f05 	stb	r2,60(sp)
  804d14:	d8000405 	stb	zero,16(sp)
  804d18:	003cac06 	br	803fcc <___vfprintf_internal_r+0x3bc>
  804d1c:	014020b4 	movhi	r5,130
  804d20:	29716604 	addi	r5,r5,-14952
  804d24:	d9414415 	stw	r5,1296(sp)
  804d28:	d9814c17 	ldw	r6,1328(sp)
  804d2c:	3080080c 	andi	r2,r6,32
  804d30:	1000f926 	beq	r2,zero,805118 <___vfprintf_internal_r+0x1508>
  804d34:	3c000017 	ldw	r16,0(r7)
  804d38:	3c400117 	ldw	r17,4(r7)
  804d3c:	38800204 	addi	r2,r7,8
  804d40:	d8814015 	stw	r2,1280(sp)
  804d44:	d9414c17 	ldw	r5,1328(sp)
  804d48:	2880004c 	andi	r2,r5,1
  804d4c:	1005003a 	cmpeq	r2,r2,zero
  804d50:	1000b31e 	bne	r2,zero,805020 <___vfprintf_internal_r+0x1410>
  804d54:	8444b03a 	or	r2,r16,r17
  804d58:	1000b126 	beq	r2,zero,805020 <___vfprintf_internal_r+0x1410>
  804d5c:	d9814d17 	ldw	r6,1332(sp)
  804d60:	29400094 	ori	r5,r5,2
  804d64:	00800c04 	movi	r2,48
  804d68:	01000084 	movi	r4,2
  804d6c:	d9414c15 	stw	r5,1328(sp)
  804d70:	d8800445 	stb	r2,17(sp)
  804d74:	d9800485 	stb	r6,18(sp)
  804d78:	d8000405 	stb	zero,16(sp)
  804d7c:	003e3206 	br	804648 <___vfprintf_internal_r+0xa38>
  804d80:	018020b4 	movhi	r6,130
  804d84:	31b15b04 	addi	r6,r6,-14996
  804d88:	d9814415 	stw	r6,1296(sp)
  804d8c:	003fe606 	br	804d28 <___vfprintf_internal_r+0x1118>
  804d90:	00800ac4 	movi	r2,43
  804d94:	d8800405 	stb	r2,16(sp)
  804d98:	b8c00007 	ldb	r3,0(r23)
  804d9c:	003c1b06 	br	803e0c <___vfprintf_internal_r+0x1fc>
  804da0:	d8814c17 	ldw	r2,1328(sp)
  804da4:	b8c00007 	ldb	r3,0(r23)
  804da8:	10800054 	ori	r2,r2,1
  804dac:	d8814c15 	stw	r2,1328(sp)
  804db0:	003c1606 	br	803e0c <___vfprintf_internal_r+0x1fc>
  804db4:	d8800407 	ldb	r2,16(sp)
  804db8:	1000461e 	bne	r2,zero,804ed4 <___vfprintf_internal_r+0x12c4>
  804dbc:	00800804 	movi	r2,32
  804dc0:	d8800405 	stb	r2,16(sp)
  804dc4:	b8c00007 	ldb	r3,0(r23)
  804dc8:	003c1006 	br	803e0c <___vfprintf_internal_r+0x1fc>
  804dcc:	d9814c17 	ldw	r6,1328(sp)
  804dd0:	b8c00007 	ldb	r3,0(r23)
  804dd4:	31800214 	ori	r6,r6,8
  804dd8:	d9814c15 	stw	r6,1328(sp)
  804ddc:	003c0b06 	br	803e0c <___vfprintf_internal_r+0x1fc>
  804de0:	0007883a 	mov	r3,zero
  804de4:	01000244 	movi	r4,9
  804de8:	188002a4 	muli	r2,r3,10
  804dec:	b8c00007 	ldb	r3,0(r23)
  804df0:	d9814d17 	ldw	r6,1332(sp)
  804df4:	bdc00044 	addi	r23,r23,1
  804df8:	d8c14d15 	stw	r3,1332(sp)
  804dfc:	d9414d17 	ldw	r5,1332(sp)
  804e00:	3085883a 	add	r2,r6,r2
  804e04:	10fff404 	addi	r3,r2,-48
  804e08:	28bff404 	addi	r2,r5,-48
  804e0c:	20bff62e 	bgeu	r4,r2,804de8 <___vfprintf_internal_r+0x11d8>
  804e10:	d8c14a15 	stw	r3,1320(sp)
  804e14:	003bff06 	br	803e14 <___vfprintf_internal_r+0x204>
  804e18:	d9414c17 	ldw	r5,1328(sp)
  804e1c:	b8c00007 	ldb	r3,0(r23)
  804e20:	29402014 	ori	r5,r5,128
  804e24:	d9414c15 	stw	r5,1328(sp)
  804e28:	003bf806 	br	803e0c <___vfprintf_internal_r+0x1fc>
  804e2c:	b8c00007 	ldb	r3,0(r23)
  804e30:	00800a84 	movi	r2,42
  804e34:	bdc00044 	addi	r23,r23,1
  804e38:	18831526 	beq	r3,r2,805a90 <___vfprintf_internal_r+0x1e80>
  804e3c:	d8c14d15 	stw	r3,1332(sp)
  804e40:	18bff404 	addi	r2,r3,-48
  804e44:	00c00244 	movi	r3,9
  804e48:	18827836 	bltu	r3,r2,80582c <___vfprintf_internal_r+0x1c1c>
  804e4c:	000d883a 	mov	r6,zero
  804e50:	308002a4 	muli	r2,r6,10
  804e54:	b9800007 	ldb	r6,0(r23)
  804e58:	d9414d17 	ldw	r5,1332(sp)
  804e5c:	bdc00044 	addi	r23,r23,1
  804e60:	d9814d15 	stw	r6,1332(sp)
  804e64:	d9014d17 	ldw	r4,1332(sp)
  804e68:	1145883a 	add	r2,r2,r5
  804e6c:	11bff404 	addi	r6,r2,-48
  804e70:	20bff404 	addi	r2,r4,-48
  804e74:	18bff62e 	bgeu	r3,r2,804e50 <___vfprintf_internal_r+0x1240>
  804e78:	3027883a 	mov	r19,r6
  804e7c:	303be50e 	bge	r6,zero,803e14 <___vfprintf_internal_r+0x204>
  804e80:	04ffffc4 	movi	r19,-1
  804e84:	003be306 	br	803e14 <___vfprintf_internal_r+0x204>
  804e88:	d8000405 	stb	zero,16(sp)
  804e8c:	39800017 	ldw	r6,0(r7)
  804e90:	39c00104 	addi	r7,r7,4
  804e94:	d9c14015 	stw	r7,1280(sp)
  804e98:	d9814115 	stw	r6,1284(sp)
  804e9c:	3001c926 	beq	r6,zero,8055c4 <___vfprintf_internal_r+0x19b4>
  804ea0:	98000e16 	blt	r19,zero,804edc <___vfprintf_internal_r+0x12cc>
  804ea4:	d9014117 	ldw	r4,1284(sp)
  804ea8:	000b883a 	mov	r5,zero
  804eac:	980d883a 	mov	r6,r19
  804eb0:	0808ccc0 	call	808ccc <memchr>
  804eb4:	10025926 	beq	r2,zero,80581c <___vfprintf_internal_r+0x1c0c>
  804eb8:	d8c14117 	ldw	r3,1284(sp)
  804ebc:	10cfc83a 	sub	r7,r2,r3
  804ec0:	99c19e16 	blt	r19,r7,80553c <___vfprintf_internal_r+0x192c>
  804ec4:	d9c14515 	stw	r7,1300(sp)
  804ec8:	38000916 	blt	r7,zero,804ef0 <___vfprintf_internal_r+0x12e0>
  804ecc:	d8014615 	stw	zero,1304(sp)
  804ed0:	003df106 	br	804698 <___vfprintf_internal_r+0xa88>
  804ed4:	b8c00007 	ldb	r3,0(r23)
  804ed8:	003bcc06 	br	803e0c <___vfprintf_internal_r+0x1fc>
  804edc:	d9014117 	ldw	r4,1284(sp)
  804ee0:	0803b440 	call	803b44 <strlen>
  804ee4:	d8814515 	stw	r2,1300(sp)
  804ee8:	100f883a 	mov	r7,r2
  804eec:	103ff70e 	bge	r2,zero,804ecc <___vfprintf_internal_r+0x12bc>
  804ef0:	d8014515 	stw	zero,1300(sp)
  804ef4:	d8014615 	stw	zero,1304(sp)
  804ef8:	003de706 	br	804698 <___vfprintf_internal_r+0xa88>
  804efc:	20c03fcc 	andi	r3,r4,255
  804f00:	00800044 	movi	r2,1
  804f04:	18802d26 	beq	r3,r2,804fbc <___vfprintf_internal_r+0x13ac>
  804f08:	18800e36 	bltu	r3,r2,804f44 <___vfprintf_internal_r+0x1334>
  804f0c:	00800084 	movi	r2,2
  804f10:	1880fa26 	beq	r3,r2,8052fc <___vfprintf_internal_r+0x16ec>
  804f14:	010020b4 	movhi	r4,130
  804f18:	21316b04 	addi	r4,r4,-14932
  804f1c:	0803b440 	call	803b44 <strlen>
  804f20:	100f883a 	mov	r7,r2
  804f24:	dcc14515 	stw	r19,1300(sp)
  804f28:	9880010e 	bge	r19,r2,804f30 <___vfprintf_internal_r+0x1320>
  804f2c:	d8814515 	stw	r2,1300(sp)
  804f30:	008020b4 	movhi	r2,130
  804f34:	10b16b04 	addi	r2,r2,-14932
  804f38:	dcc14615 	stw	r19,1304(sp)
  804f3c:	d8814115 	stw	r2,1284(sp)
  804f40:	003dd506 	br	804698 <___vfprintf_internal_r+0xa88>
  804f44:	d9401904 	addi	r5,sp,100
  804f48:	dd000f04 	addi	r20,sp,60
  804f4c:	d9414115 	stw	r5,1284(sp)
  804f50:	880a977a 	slli	r5,r17,29
  804f54:	d9814117 	ldw	r6,1284(sp)
  804f58:	8004d0fa 	srli	r2,r16,3
  804f5c:	8806d0fa 	srli	r3,r17,3
  804f60:	810001cc 	andi	r4,r16,7
  804f64:	2884b03a 	or	r2,r5,r2
  804f68:	31bfffc4 	addi	r6,r6,-1
  804f6c:	21000c04 	addi	r4,r4,48
  804f70:	d9814115 	stw	r6,1284(sp)
  804f74:	10cab03a 	or	r5,r2,r3
  804f78:	31000005 	stb	r4,0(r6)
  804f7c:	1021883a 	mov	r16,r2
  804f80:	1823883a 	mov	r17,r3
  804f84:	283ff21e 	bne	r5,zero,804f50 <___vfprintf_internal_r+0x1340>
  804f88:	d8c14c17 	ldw	r3,1328(sp)
  804f8c:	1880004c 	andi	r2,r3,1
  804f90:	1005003a 	cmpeq	r2,r2,zero
  804f94:	103db91e 	bne	r2,zero,80467c <___vfprintf_internal_r+0xa6c>
  804f98:	20803fcc 	andi	r2,r4,255
  804f9c:	1080201c 	xori	r2,r2,128
  804fa0:	10bfe004 	addi	r2,r2,-128
  804fa4:	00c00c04 	movi	r3,48
  804fa8:	10fdb426 	beq	r2,r3,80467c <___vfprintf_internal_r+0xa6c>
  804fac:	31bfffc4 	addi	r6,r6,-1
  804fb0:	d9814115 	stw	r6,1284(sp)
  804fb4:	30c00005 	stb	r3,0(r6)
  804fb8:	003db006 	br	80467c <___vfprintf_internal_r+0xa6c>
  804fbc:	88800068 	cmpgeui	r2,r17,1
  804fc0:	10002c1e 	bne	r2,zero,805074 <___vfprintf_internal_r+0x1464>
  804fc4:	8800021e 	bne	r17,zero,804fd0 <___vfprintf_internal_r+0x13c0>
  804fc8:	00800244 	movi	r2,9
  804fcc:	14002936 	bltu	r2,r16,805074 <___vfprintf_internal_r+0x1464>
  804fd0:	d90018c4 	addi	r4,sp,99
  804fd4:	dd000f04 	addi	r20,sp,60
  804fd8:	d9014115 	stw	r4,1284(sp)
  804fdc:	d9014117 	ldw	r4,1284(sp)
  804fe0:	80800c04 	addi	r2,r16,48
  804fe4:	20800005 	stb	r2,0(r4)
  804fe8:	003da406 	br	80467c <___vfprintf_internal_r+0xa6c>
  804fec:	dc400d17 	ldw	r17,52(sp)
  804ff0:	070020b4 	movhi	fp,130
  804ff4:	e7317284 	addi	fp,fp,-14902
  804ff8:	9425883a 	add	r18,r18,r16
  804ffc:	8c400044 	addi	r17,r17,1
  805000:	008001c4 	movi	r2,7
  805004:	1f000015 	stw	fp,0(r3)
  805008:	1c000115 	stw	r16,4(r3)
  80500c:	dc800e15 	stw	r18,56(sp)
  805010:	dc400d15 	stw	r17,52(sp)
  805014:	147de216 	blt	r2,r17,8047a0 <___vfprintf_internal_r+0xb90>
  805018:	18c00204 	addi	r3,r3,8
  80501c:	003c7a06 	br	804208 <___vfprintf_internal_r+0x5f8>
  805020:	01000084 	movi	r4,2
  805024:	d8000405 	stb	zero,16(sp)
  805028:	003d8706 	br	804648 <___vfprintf_internal_r+0xa38>
  80502c:	d9814c17 	ldw	r6,1328(sp)
  805030:	30c4703a 	and	r2,r6,r3
  805034:	1005003a 	cmpeq	r2,r2,zero
  805038:	103cb926 	beq	r2,zero,804320 <___vfprintf_internal_r+0x710>
  80503c:	d9014117 	ldw	r4,1284(sp)
  805040:	94800044 	addi	r18,r18,1
  805044:	8c400044 	addi	r17,r17,1
  805048:	008001c4 	movi	r2,7
  80504c:	a9000015 	stw	r4,0(r21)
  805050:	a8c00115 	stw	r3,4(r21)
  805054:	dc800e15 	stw	r18,56(sp)
  805058:	dc400d15 	stw	r17,52(sp)
  80505c:	147e6616 	blt	r2,r17,8049f8 <___vfprintf_internal_r+0xde8>
  805060:	acc00204 	addi	r19,r21,8
  805064:	003cd706 	br	8043c4 <___vfprintf_internal_r+0x7b4>
  805068:	070020b4 	movhi	fp,130
  80506c:	e7317284 	addi	fp,fp,-14902
  805070:	003c4f06 	br	8041b0 <___vfprintf_internal_r+0x5a0>
  805074:	dd000f04 	addi	r20,sp,60
  805078:	dc801904 	addi	r18,sp,100
  80507c:	8009883a 	mov	r4,r16
  805080:	880b883a 	mov	r5,r17
  805084:	01800284 	movi	r6,10
  805088:	000f883a 	mov	r7,zero
  80508c:	080b2d80 	call	80b2d8 <__umoddi3>
  805090:	12000c04 	addi	r8,r2,48
  805094:	94bfffc4 	addi	r18,r18,-1
  805098:	8009883a 	mov	r4,r16
  80509c:	880b883a 	mov	r5,r17
  8050a0:	01800284 	movi	r6,10
  8050a4:	000f883a 	mov	r7,zero
  8050a8:	92000005 	stb	r8,0(r18)
  8050ac:	080acfc0 	call	80acfc <__udivdi3>
  8050b0:	1009883a 	mov	r4,r2
  8050b4:	1021883a 	mov	r16,r2
  8050b8:	18800068 	cmpgeui	r2,r3,1
  8050bc:	1823883a 	mov	r17,r3
  8050c0:	103fee1e 	bne	r2,zero,80507c <___vfprintf_internal_r+0x146c>
  8050c4:	1800021e 	bne	r3,zero,8050d0 <___vfprintf_internal_r+0x14c0>
  8050c8:	00800244 	movi	r2,9
  8050cc:	113feb36 	bltu	r2,r4,80507c <___vfprintf_internal_r+0x146c>
  8050d0:	94bfffc4 	addi	r18,r18,-1
  8050d4:	dc814115 	stw	r18,1284(sp)
  8050d8:	003fc006 	br	804fdc <___vfprintf_internal_r+0x13cc>
  8050dc:	d9014c17 	ldw	r4,1328(sp)
  8050e0:	2080004c 	andi	r2,r4,1
  8050e4:	10009a1e 	bne	r2,zero,805350 <___vfprintf_internal_r+0x1740>
  8050e8:	d9401904 	addi	r5,sp,100
  8050ec:	dd000f04 	addi	r20,sp,60
  8050f0:	d9414115 	stw	r5,1284(sp)
  8050f4:	003d6106 	br	80467c <___vfprintf_internal_r+0xa6c>
  8050f8:	d9014f17 	ldw	r4,1340(sp)
  8050fc:	b00b883a 	mov	r5,r22
  805100:	d9800c04 	addi	r6,sp,48
  805104:	0803bb80 	call	803bb8 <__sprint_r>
  805108:	103c791e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  80510c:	dc800e17 	ldw	r18,56(sp)
  805110:	d8c01904 	addi	r3,sp,100
  805114:	003cff06 	br	804514 <___vfprintf_internal_r+0x904>
  805118:	d8c14c17 	ldw	r3,1328(sp)
  80511c:	1880040c 	andi	r2,r3,16
  805120:	1000711e 	bne	r2,zero,8052e8 <___vfprintf_internal_r+0x16d8>
  805124:	d9014c17 	ldw	r4,1328(sp)
  805128:	2080100c 	andi	r2,r4,64
  80512c:	10006e26 	beq	r2,zero,8052e8 <___vfprintf_internal_r+0x16d8>
  805130:	3c00000b 	ldhu	r16,0(r7)
  805134:	0023883a 	mov	r17,zero
  805138:	39c00104 	addi	r7,r7,4
  80513c:	d9c14015 	stw	r7,1280(sp)
  805140:	003f0006 	br	804d44 <___vfprintf_internal_r+0x1134>
  805144:	dc400d17 	ldw	r17,52(sp)
  805148:	070020b4 	movhi	fp,130
  80514c:	e7317284 	addi	fp,fp,-14902
  805150:	9425883a 	add	r18,r18,r16
  805154:	8c400044 	addi	r17,r17,1
  805158:	008001c4 	movi	r2,7
  80515c:	1f000015 	stw	fp,0(r3)
  805160:	1c000115 	stw	r16,4(r3)
  805164:	dc800e15 	stw	r18,56(sp)
  805168:	dc400d15 	stw	r17,52(sp)
  80516c:	147d7616 	blt	r2,r17,804748 <___vfprintf_internal_r+0xb38>
  805170:	18c00204 	addi	r3,r3,8
  805174:	003d7b06 	br	804764 <___vfprintf_internal_r+0xb54>
  805178:	dc800e17 	ldw	r18,56(sp)
  80517c:	dc400d17 	ldw	r17,52(sp)
  805180:	070020b4 	movhi	fp,130
  805184:	e7317684 	addi	fp,fp,-14886
  805188:	003bc006 	br	80408c <___vfprintf_internal_r+0x47c>
  80518c:	d9014f17 	ldw	r4,1340(sp)
  805190:	b00b883a 	mov	r5,r22
  805194:	d9800c04 	addi	r6,sp,48
  805198:	0803bb80 	call	803bb8 <__sprint_r>
  80519c:	103c541e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  8051a0:	dc800e17 	ldw	r18,56(sp)
  8051a4:	d8c01904 	addi	r3,sp,100
  8051a8:	003ce906 	br	804550 <___vfprintf_internal_r+0x940>
  8051ac:	3c000017 	ldw	r16,0(r7)
  8051b0:	0009883a 	mov	r4,zero
  8051b4:	39c00104 	addi	r7,r7,4
  8051b8:	0023883a 	mov	r17,zero
  8051bc:	d9c14015 	stw	r7,1280(sp)
  8051c0:	d8000405 	stb	zero,16(sp)
  8051c4:	003d2006 	br	804648 <___vfprintf_internal_r+0xa38>
  8051c8:	38800017 	ldw	r2,0(r7)
  8051cc:	39c00104 	addi	r7,r7,4
  8051d0:	d9c14015 	stw	r7,1280(sp)
  8051d4:	1023d7fa 	srai	r17,r2,31
  8051d8:	1021883a 	mov	r16,r2
  8051dc:	003d1806 	br	804640 <___vfprintf_internal_r+0xa30>
  8051e0:	3c000017 	ldw	r16,0(r7)
  8051e4:	01000044 	movi	r4,1
  8051e8:	39c00104 	addi	r7,r7,4
  8051ec:	0023883a 	mov	r17,zero
  8051f0:	d9c14015 	stw	r7,1280(sp)
  8051f4:	d8000405 	stb	zero,16(sp)
  8051f8:	003d1306 	br	804648 <___vfprintf_internal_r+0xa38>
  8051fc:	008020b4 	movhi	r2,130
  805200:	10b17204 	addi	r2,r2,-14904
  805204:	94800044 	addi	r18,r18,1
  805208:	8c400044 	addi	r17,r17,1
  80520c:	a8800015 	stw	r2,0(r21)
  805210:	00c00044 	movi	r3,1
  805214:	008001c4 	movi	r2,7
  805218:	a8c00115 	stw	r3,4(r21)
  80521c:	dc800e15 	stw	r18,56(sp)
  805220:	dc400d15 	stw	r17,52(sp)
  805224:	1440ca16 	blt	r2,r17,805550 <___vfprintf_internal_r+0x1940>
  805228:	a8c00204 	addi	r3,r21,8
  80522c:	2000061e 	bne	r4,zero,805248 <___vfprintf_internal_r+0x1638>
  805230:	d9414717 	ldw	r5,1308(sp)
  805234:	2800041e 	bne	r5,zero,805248 <___vfprintf_internal_r+0x1638>
  805238:	d9814c17 	ldw	r6,1328(sp)
  80523c:	3080004c 	andi	r2,r6,1
  805240:	1005003a 	cmpeq	r2,r2,zero
  805244:	103bf01e 	bne	r2,zero,804208 <___vfprintf_internal_r+0x5f8>
  805248:	00800044 	movi	r2,1
  80524c:	dc400d17 	ldw	r17,52(sp)
  805250:	18800115 	stw	r2,4(r3)
  805254:	d8814917 	ldw	r2,1316(sp)
  805258:	94800044 	addi	r18,r18,1
  80525c:	8c400044 	addi	r17,r17,1
  805260:	18800015 	stw	r2,0(r3)
  805264:	008001c4 	movi	r2,7
  805268:	dc800e15 	stw	r18,56(sp)
  80526c:	dc400d15 	stw	r17,52(sp)
  805270:	1440ca16 	blt	r2,r17,80559c <___vfprintf_internal_r+0x198c>
  805274:	18c00204 	addi	r3,r3,8
  805278:	0121c83a 	sub	r16,zero,r4
  80527c:	0400500e 	bge	zero,r16,8053c0 <___vfprintf_internal_r+0x17b0>
  805280:	00800404 	movi	r2,16
  805284:	1400800e 	bge	r2,r16,805488 <___vfprintf_internal_r+0x1878>
  805288:	1027883a 	mov	r19,r2
  80528c:	070020b4 	movhi	fp,130
  805290:	e7317284 	addi	fp,fp,-14902
  805294:	050001c4 	movi	r20,7
  805298:	00000306 	br	8052a8 <___vfprintf_internal_r+0x1698>
  80529c:	18c00204 	addi	r3,r3,8
  8052a0:	843ffc04 	addi	r16,r16,-16
  8052a4:	9c007a0e 	bge	r19,r16,805490 <___vfprintf_internal_r+0x1880>
  8052a8:	94800404 	addi	r18,r18,16
  8052ac:	8c400044 	addi	r17,r17,1
  8052b0:	1f000015 	stw	fp,0(r3)
  8052b4:	1cc00115 	stw	r19,4(r3)
  8052b8:	dc800e15 	stw	r18,56(sp)
  8052bc:	dc400d15 	stw	r17,52(sp)
  8052c0:	a47ff60e 	bge	r20,r17,80529c <___vfprintf_internal_r+0x168c>
  8052c4:	d9014f17 	ldw	r4,1340(sp)
  8052c8:	b00b883a 	mov	r5,r22
  8052cc:	d9800c04 	addi	r6,sp,48
  8052d0:	0803bb80 	call	803bb8 <__sprint_r>
  8052d4:	103c061e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  8052d8:	dc800e17 	ldw	r18,56(sp)
  8052dc:	dc400d17 	ldw	r17,52(sp)
  8052e0:	d8c01904 	addi	r3,sp,100
  8052e4:	003fee06 	br	8052a0 <___vfprintf_internal_r+0x1690>
  8052e8:	3c000017 	ldw	r16,0(r7)
  8052ec:	0023883a 	mov	r17,zero
  8052f0:	39c00104 	addi	r7,r7,4
  8052f4:	d9c14015 	stw	r7,1280(sp)
  8052f8:	003e9206 	br	804d44 <___vfprintf_internal_r+0x1134>
  8052fc:	d9401904 	addi	r5,sp,100
  805300:	dd000f04 	addi	r20,sp,60
  805304:	d9414115 	stw	r5,1284(sp)
  805308:	d9814417 	ldw	r6,1296(sp)
  80530c:	880a973a 	slli	r5,r17,28
  805310:	8004d13a 	srli	r2,r16,4
  805314:	810003cc 	andi	r4,r16,15
  805318:	3109883a 	add	r4,r6,r4
  80531c:	2884b03a 	or	r2,r5,r2
  805320:	21400003 	ldbu	r5,0(r4)
  805324:	d9014117 	ldw	r4,1284(sp)
  805328:	8806d13a 	srli	r3,r17,4
  80532c:	1021883a 	mov	r16,r2
  805330:	213fffc4 	addi	r4,r4,-1
  805334:	d9014115 	stw	r4,1284(sp)
  805338:	d9814117 	ldw	r6,1284(sp)
  80533c:	10c8b03a 	or	r4,r2,r3
  805340:	1823883a 	mov	r17,r3
  805344:	31400005 	stb	r5,0(r6)
  805348:	203fef1e 	bne	r4,zero,805308 <___vfprintf_internal_r+0x16f8>
  80534c:	003ccb06 	br	80467c <___vfprintf_internal_r+0xa6c>
  805350:	00800c04 	movi	r2,48
  805354:	d98018c4 	addi	r6,sp,99
  805358:	dd000f04 	addi	r20,sp,60
  80535c:	d88018c5 	stb	r2,99(sp)
  805360:	d9814115 	stw	r6,1284(sp)
  805364:	003cc506 	br	80467c <___vfprintf_internal_r+0xa6c>
  805368:	dc400d17 	ldw	r17,52(sp)
  80536c:	070020b4 	movhi	fp,130
  805370:	e7317684 	addi	fp,fp,-14886
  805374:	003bc706 	br	804294 <___vfprintf_internal_r+0x684>
  805378:	d9414c17 	ldw	r5,1328(sp)
  80537c:	2880040c 	andi	r2,r5,16
  805380:	10007c26 	beq	r2,zero,805574 <___vfprintf_internal_r+0x1964>
  805384:	38800017 	ldw	r2,0(r7)
  805388:	39c00104 	addi	r7,r7,4
  80538c:	d9c14015 	stw	r7,1280(sp)
  805390:	d9814b17 	ldw	r6,1324(sp)
  805394:	d9c14017 	ldw	r7,1280(sp)
  805398:	11800015 	stw	r6,0(r2)
  80539c:	003a7806 	br	803d80 <___vfprintf_internal_r+0x170>
  8053a0:	d9014f17 	ldw	r4,1340(sp)
  8053a4:	b00b883a 	mov	r5,r22
  8053a8:	d9800c04 	addi	r6,sp,48
  8053ac:	0803bb80 	call	803bb8 <__sprint_r>
  8053b0:	103bcf1e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  8053b4:	dc800e17 	ldw	r18,56(sp)
  8053b8:	dc400d17 	ldw	r17,52(sp)
  8053bc:	d8c01904 	addi	r3,sp,100
  8053c0:	d9014717 	ldw	r4,1308(sp)
  8053c4:	d9414117 	ldw	r5,1284(sp)
  8053c8:	8c400044 	addi	r17,r17,1
  8053cc:	9125883a 	add	r18,r18,r4
  8053d0:	008001c4 	movi	r2,7
  8053d4:	19400015 	stw	r5,0(r3)
  8053d8:	19000115 	stw	r4,4(r3)
  8053dc:	dc800e15 	stw	r18,56(sp)
  8053e0:	dc400d15 	stw	r17,52(sp)
  8053e4:	147cee16 	blt	r2,r17,8047a0 <___vfprintf_internal_r+0xb90>
  8053e8:	18c00204 	addi	r3,r3,8
  8053ec:	003b8606 	br	804208 <___vfprintf_internal_r+0x5f8>
  8053f0:	38c00017 	ldw	r3,0(r7)
  8053f4:	39000204 	addi	r4,r7,8
  8053f8:	d9014015 	stw	r4,1280(sp)
  8053fc:	d8c14215 	stw	r3,1288(sp)
  805400:	39c00117 	ldw	r7,4(r7)
  805404:	d9c14315 	stw	r7,1292(sp)
  805408:	003e2006 	br	804c8c <___vfprintf_internal_r+0x107c>
  80540c:	0005883a 	mov	r2,zero
  805410:	1409c83a 	sub	r4,r2,r16
  805414:	1105803a 	cmpltu	r2,r2,r4
  805418:	044bc83a 	sub	r5,zero,r17
  80541c:	2885c83a 	sub	r2,r5,r2
  805420:	2021883a 	mov	r16,r4
  805424:	1023883a 	mov	r17,r2
  805428:	01000044 	movi	r4,1
  80542c:	00800b44 	movi	r2,45
  805430:	d8800405 	stb	r2,16(sp)
  805434:	003c8406 	br	804648 <___vfprintf_internal_r+0xa38>
  805438:	d9014f17 	ldw	r4,1340(sp)
  80543c:	b00b883a 	mov	r5,r22
  805440:	d9800c04 	addi	r6,sp,48
  805444:	0803bb80 	call	803bb8 <__sprint_r>
  805448:	103ba91e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  80544c:	dc800e17 	ldw	r18,56(sp)
  805450:	dc400d17 	ldw	r17,52(sp)
  805454:	d9000517 	ldw	r4,20(sp)
  805458:	d9401904 	addi	r5,sp,100
  80545c:	003da706 	br	804afc <___vfprintf_internal_r+0xeec>
  805460:	d9014f17 	ldw	r4,1340(sp)
  805464:	b00b883a 	mov	r5,r22
  805468:	d9800c04 	addi	r6,sp,48
  80546c:	0803bb80 	call	803bb8 <__sprint_r>
  805470:	103b9f1e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  805474:	dc800e17 	ldw	r18,56(sp)
  805478:	dc400d17 	ldw	r17,52(sp)
  80547c:	d9000517 	ldw	r4,20(sp)
  805480:	d8c01904 	addi	r3,sp,100
  805484:	003d9106 	br	804acc <___vfprintf_internal_r+0xebc>
  805488:	070020b4 	movhi	fp,130
  80548c:	e7317284 	addi	fp,fp,-14902
  805490:	9425883a 	add	r18,r18,r16
  805494:	8c400044 	addi	r17,r17,1
  805498:	008001c4 	movi	r2,7
  80549c:	1f000015 	stw	fp,0(r3)
  8054a0:	1c000115 	stw	r16,4(r3)
  8054a4:	dc800e15 	stw	r18,56(sp)
  8054a8:	dc400d15 	stw	r17,52(sp)
  8054ac:	147fbc16 	blt	r2,r17,8053a0 <___vfprintf_internal_r+0x1790>
  8054b0:	18c00204 	addi	r3,r3,8
  8054b4:	003fc206 	br	8053c0 <___vfprintf_internal_r+0x17b0>
  8054b8:	d9014f17 	ldw	r4,1340(sp)
  8054bc:	b00b883a 	mov	r5,r22
  8054c0:	d9800c04 	addi	r6,sp,48
  8054c4:	0803bb80 	call	803bb8 <__sprint_r>
  8054c8:	103b891e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  8054cc:	dc800e17 	ldw	r18,56(sp)
  8054d0:	d9000517 	ldw	r4,20(sp)
  8054d4:	d8c01904 	addi	r3,sp,100
  8054d8:	003d0206 	br	8048e4 <___vfprintf_internal_r+0xcd4>
  8054dc:	070020b4 	movhi	fp,130
  8054e0:	e7317284 	addi	fp,fp,-14902
  8054e4:	003be406 	br	804478 <___vfprintf_internal_r+0x868>
  8054e8:	008020b4 	movhi	r2,130
  8054ec:	10b16104 	addi	r2,r2,-14972
  8054f0:	d8814115 	stw	r2,1284(sp)
  8054f4:	003df506 	br	804ccc <___vfprintf_internal_r+0x10bc>
  8054f8:	d9014217 	ldw	r4,1288(sp)
  8054fc:	d9414317 	ldw	r5,1292(sp)
  805500:	08021ac0 	call	8021ac <__isnand>
  805504:	10003926 	beq	r2,zero,8055ec <___vfprintf_internal_r+0x19dc>
  805508:	d9414d17 	ldw	r5,1332(sp)
  80550c:	008011c4 	movi	r2,71
  805510:	1140ce16 	blt	r2,r5,80584c <___vfprintf_internal_r+0x1c3c>
  805514:	018020b4 	movhi	r6,130
  805518:	31b16204 	addi	r6,r6,-14968
  80551c:	d9814115 	stw	r6,1284(sp)
  805520:	003dea06 	br	804ccc <___vfprintf_internal_r+0x10bc>
  805524:	d9014c17 	ldw	r4,1328(sp)
  805528:	bdc00044 	addi	r23,r23,1
  80552c:	b8c00007 	ldb	r3,0(r23)
  805530:	21000814 	ori	r4,r4,32
  805534:	d9014c15 	stw	r4,1328(sp)
  805538:	003a3406 	br	803e0c <___vfprintf_internal_r+0x1fc>
  80553c:	dcc14515 	stw	r19,1300(sp)
  805540:	98011016 	blt	r19,zero,805984 <___vfprintf_internal_r+0x1d74>
  805544:	980f883a 	mov	r7,r19
  805548:	d8014615 	stw	zero,1304(sp)
  80554c:	003c5206 	br	804698 <___vfprintf_internal_r+0xa88>
  805550:	d9014f17 	ldw	r4,1340(sp)
  805554:	b00b883a 	mov	r5,r22
  805558:	d9800c04 	addi	r6,sp,48
  80555c:	0803bb80 	call	803bb8 <__sprint_r>
  805560:	103b631e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  805564:	dc800e17 	ldw	r18,56(sp)
  805568:	d9000517 	ldw	r4,20(sp)
  80556c:	d8c01904 	addi	r3,sp,100
  805570:	003f2e06 	br	80522c <___vfprintf_internal_r+0x161c>
  805574:	d8c14c17 	ldw	r3,1328(sp)
  805578:	1880100c 	andi	r2,r3,64
  80557c:	1000a026 	beq	r2,zero,805800 <___vfprintf_internal_r+0x1bf0>
  805580:	38800017 	ldw	r2,0(r7)
  805584:	39c00104 	addi	r7,r7,4
  805588:	d9c14015 	stw	r7,1280(sp)
  80558c:	d9014b17 	ldw	r4,1324(sp)
  805590:	d9c14017 	ldw	r7,1280(sp)
  805594:	1100000d 	sth	r4,0(r2)
  805598:	0039f906 	br	803d80 <___vfprintf_internal_r+0x170>
  80559c:	d9014f17 	ldw	r4,1340(sp)
  8055a0:	b00b883a 	mov	r5,r22
  8055a4:	d9800c04 	addi	r6,sp,48
  8055a8:	0803bb80 	call	803bb8 <__sprint_r>
  8055ac:	103b501e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  8055b0:	dc800e17 	ldw	r18,56(sp)
  8055b4:	dc400d17 	ldw	r17,52(sp)
  8055b8:	d9000517 	ldw	r4,20(sp)
  8055bc:	d8c01904 	addi	r3,sp,100
  8055c0:	003f2d06 	br	805278 <___vfprintf_internal_r+0x1668>
  8055c4:	00800184 	movi	r2,6
  8055c8:	14c09a36 	bltu	r2,r19,805834 <___vfprintf_internal_r+0x1c24>
  8055cc:	dcc14515 	stw	r19,1300(sp)
  8055d0:	9800010e 	bge	r19,zero,8055d8 <___vfprintf_internal_r+0x19c8>
  8055d4:	d8014515 	stw	zero,1300(sp)
  8055d8:	008020b4 	movhi	r2,130
  8055dc:	10b16404 	addi	r2,r2,-14960
  8055e0:	980f883a 	mov	r7,r19
  8055e4:	d8814115 	stw	r2,1284(sp)
  8055e8:	003a7806 	br	803fcc <___vfprintf_internal_r+0x3bc>
  8055ec:	00bfffc4 	movi	r2,-1
  8055f0:	9880e226 	beq	r19,r2,80597c <___vfprintf_internal_r+0x1d6c>
  8055f4:	d9414d17 	ldw	r5,1332(sp)
  8055f8:	008019c4 	movi	r2,103
  8055fc:	2880dc26 	beq	r5,r2,805970 <___vfprintf_internal_r+0x1d60>
  805600:	008011c4 	movi	r2,71
  805604:	2880da26 	beq	r5,r2,805970 <___vfprintf_internal_r+0x1d60>
  805608:	d9414c17 	ldw	r5,1328(sp)
  80560c:	d9014317 	ldw	r4,1292(sp)
  805610:	d9814217 	ldw	r6,1288(sp)
  805614:	29404014 	ori	r5,r5,256
  805618:	d9414c15 	stw	r5,1328(sp)
  80561c:	2000cc16 	blt	r4,zero,805950 <___vfprintf_internal_r+0x1d40>
  805620:	3021883a 	mov	r16,r6
  805624:	2023883a 	mov	r17,r4
  805628:	0039883a 	mov	fp,zero
  80562c:	d9414d17 	ldw	r5,1332(sp)
  805630:	00801984 	movi	r2,102
  805634:	2880b726 	beq	r5,r2,805914 <___vfprintf_internal_r+0x1d04>
  805638:	00801184 	movi	r2,70
  80563c:	2880b526 	beq	r5,r2,805914 <___vfprintf_internal_r+0x1d04>
  805640:	00801944 	movi	r2,101
  805644:	2880c826 	beq	r5,r2,805968 <___vfprintf_internal_r+0x1d58>
  805648:	00801144 	movi	r2,69
  80564c:	2880c626 	beq	r5,r2,805968 <___vfprintf_internal_r+0x1d58>
  805650:	9829883a 	mov	r20,r19
  805654:	d9014f17 	ldw	r4,1340(sp)
  805658:	d8800504 	addi	r2,sp,20
  80565c:	880d883a 	mov	r6,r17
  805660:	d8800115 	stw	r2,4(sp)
  805664:	d8c00604 	addi	r3,sp,24
  805668:	d8800704 	addi	r2,sp,28
  80566c:	800b883a 	mov	r5,r16
  805670:	01c00084 	movi	r7,2
  805674:	d8c00215 	stw	r3,8(sp)
  805678:	d8800315 	stw	r2,12(sp)
  80567c:	dd000015 	stw	r20,0(sp)
  805680:	0805e340 	call	805e34 <_dtoa_r>
  805684:	d9814d17 	ldw	r6,1332(sp)
  805688:	d8814115 	stw	r2,1284(sp)
  80568c:	008019c4 	movi	r2,103
  805690:	30809526 	beq	r6,r2,8058e8 <___vfprintf_internal_r+0x1cd8>
  805694:	d8c14d17 	ldw	r3,1332(sp)
  805698:	008011c4 	movi	r2,71
  80569c:	18809226 	beq	r3,r2,8058e8 <___vfprintf_internal_r+0x1cd8>
  8056a0:	d9414117 	ldw	r5,1284(sp)
  8056a4:	d9814d17 	ldw	r6,1332(sp)
  8056a8:	00801984 	movi	r2,102
  8056ac:	2d25883a 	add	r18,r5,r20
  8056b0:	30808626 	beq	r6,r2,8058cc <___vfprintf_internal_r+0x1cbc>
  8056b4:	00801184 	movi	r2,70
  8056b8:	30808426 	beq	r6,r2,8058cc <___vfprintf_internal_r+0x1cbc>
  8056bc:	000d883a 	mov	r6,zero
  8056c0:	000f883a 	mov	r7,zero
  8056c4:	880b883a 	mov	r5,r17
  8056c8:	8009883a 	mov	r4,r16
  8056cc:	080b8880 	call	80b888 <__eqdf2>
  8056d0:	1000751e 	bne	r2,zero,8058a8 <___vfprintf_internal_r+0x1c98>
  8056d4:	9005883a 	mov	r2,r18
  8056d8:	dc800715 	stw	r18,28(sp)
  8056dc:	d9014117 	ldw	r4,1284(sp)
  8056e0:	d9414d17 	ldw	r5,1332(sp)
  8056e4:	00c019c4 	movi	r3,103
  8056e8:	1125c83a 	sub	r18,r2,r4
  8056ec:	28c06826 	beq	r5,r3,805890 <___vfprintf_internal_r+0x1c80>
  8056f0:	008011c4 	movi	r2,71
  8056f4:	28806626 	beq	r5,r2,805890 <___vfprintf_internal_r+0x1c80>
  8056f8:	d9000517 	ldw	r4,20(sp)
  8056fc:	d8c14d17 	ldw	r3,1332(sp)
  805700:	00801944 	movi	r2,101
  805704:	10c05516 	blt	r2,r3,80585c <___vfprintf_internal_r+0x1c4c>
  805708:	213fffc4 	addi	r4,r4,-1
  80570c:	d9000515 	stw	r4,20(sp)
  805710:	d8c00805 	stb	r3,32(sp)
  805714:	2021883a 	mov	r16,r4
  805718:	2000c116 	blt	r4,zero,805a20 <___vfprintf_internal_r+0x1e10>
  80571c:	00800ac4 	movi	r2,43
  805720:	d8800845 	stb	r2,33(sp)
  805724:	00800244 	movi	r2,9
  805728:	1400af0e 	bge	r2,r16,8059e8 <___vfprintf_internal_r+0x1dd8>
  80572c:	1027883a 	mov	r19,r2
  805730:	dc400b84 	addi	r17,sp,46
  805734:	8009883a 	mov	r4,r16
  805738:	01400284 	movi	r5,10
  80573c:	080bafc0 	call	80bafc <__modsi3>
  805740:	10800c04 	addi	r2,r2,48
  805744:	8c7fffc4 	addi	r17,r17,-1
  805748:	8009883a 	mov	r4,r16
  80574c:	01400284 	movi	r5,10
  805750:	88800005 	stb	r2,0(r17)
  805754:	080ba9c0 	call	80ba9c <__divsi3>
  805758:	1021883a 	mov	r16,r2
  80575c:	98bff516 	blt	r19,r2,805734 <___vfprintf_internal_r+0x1b24>
  805760:	10c00c04 	addi	r3,r2,48
  805764:	d88009c4 	addi	r2,sp,39
  805768:	108001c4 	addi	r2,r2,7
  80576c:	897fffc4 	addi	r5,r17,-1
  805770:	88ffffc5 	stb	r3,-1(r17)
  805774:	2880a72e 	bgeu	r5,r2,805a14 <___vfprintf_internal_r+0x1e04>
  805778:	1009883a 	mov	r4,r2
  80577c:	d9800804 	addi	r6,sp,32
  805780:	d8c00884 	addi	r3,sp,34
  805784:	28800003 	ldbu	r2,0(r5)
  805788:	29400044 	addi	r5,r5,1
  80578c:	18800005 	stb	r2,0(r3)
  805790:	18c00044 	addi	r3,r3,1
  805794:	293ffb36 	bltu	r5,r4,805784 <___vfprintf_internal_r+0x1b74>
  805798:	1987c83a 	sub	r3,r3,r6
  80579c:	00800044 	movi	r2,1
  8057a0:	d8c14815 	stw	r3,1312(sp)
  8057a4:	90cf883a 	add	r7,r18,r3
  8057a8:	1480960e 	bge	r2,r18,805a04 <___vfprintf_internal_r+0x1df4>
  8057ac:	39c00044 	addi	r7,r7,1
  8057b0:	d9c14515 	stw	r7,1300(sp)
  8057b4:	38003416 	blt	r7,zero,805888 <___vfprintf_internal_r+0x1c78>
  8057b8:	e0803fcc 	andi	r2,fp,255
  8057bc:	1080201c 	xori	r2,r2,128
  8057c0:	10bfe004 	addi	r2,r2,-128
  8057c4:	10004e26 	beq	r2,zero,805900 <___vfprintf_internal_r+0x1cf0>
  8057c8:	00800b44 	movi	r2,45
  8057cc:	dc814715 	stw	r18,1308(sp)
  8057d0:	d8014615 	stw	zero,1304(sp)
  8057d4:	d8800405 	stb	r2,16(sp)
  8057d8:	003bb106 	br	8046a0 <___vfprintf_internal_r+0xa90>
  8057dc:	00800b44 	movi	r2,45
  8057e0:	d8800405 	stb	r2,16(sp)
  8057e4:	003d3306 	br	804cb4 <___vfprintf_internal_r+0x10a4>
  8057e8:	d9014f17 	ldw	r4,1340(sp)
  8057ec:	b00b883a 	mov	r5,r22
  8057f0:	d9800c04 	addi	r6,sp,48
  8057f4:	0803bb80 	call	803bb8 <__sprint_r>
  8057f8:	103abd1e 	bne	r2,zero,8042f0 <___vfprintf_internal_r+0x6e0>
  8057fc:	003abb06 	br	8042ec <___vfprintf_internal_r+0x6dc>
  805800:	38800017 	ldw	r2,0(r7)
  805804:	39c00104 	addi	r7,r7,4
  805808:	d9c14015 	stw	r7,1280(sp)
  80580c:	d9414b17 	ldw	r5,1324(sp)
  805810:	d9c14017 	ldw	r7,1280(sp)
  805814:	11400015 	stw	r5,0(r2)
  805818:	00395906 	br	803d80 <___vfprintf_internal_r+0x170>
  80581c:	980f883a 	mov	r7,r19
  805820:	dcc14515 	stw	r19,1300(sp)
  805824:	d8014615 	stw	zero,1304(sp)
  805828:	003b9b06 	br	804698 <___vfprintf_internal_r+0xa88>
  80582c:	0027883a 	mov	r19,zero
  805830:	00397806 	br	803e14 <___vfprintf_internal_r+0x204>
  805834:	00c020b4 	movhi	r3,130
  805838:	18f16404 	addi	r3,r3,-14960
  80583c:	100f883a 	mov	r7,r2
  805840:	d8814515 	stw	r2,1300(sp)
  805844:	d8c14115 	stw	r3,1284(sp)
  805848:	0039e006 	br	803fcc <___vfprintf_internal_r+0x3bc>
  80584c:	008020b4 	movhi	r2,130
  805850:	10b16304 	addi	r2,r2,-14964
  805854:	d8814115 	stw	r2,1284(sp)
  805858:	003d1c06 	br	804ccc <___vfprintf_internal_r+0x10bc>
  80585c:	d9414d17 	ldw	r5,1332(sp)
  805860:	00801984 	movi	r2,102
  805864:	28804926 	beq	r5,r2,80598c <___vfprintf_internal_r+0x1d7c>
  805868:	200f883a 	mov	r7,r4
  80586c:	24805716 	blt	r4,r18,8059cc <___vfprintf_internal_r+0x1dbc>
  805870:	d9414c17 	ldw	r5,1328(sp)
  805874:	2880004c 	andi	r2,r5,1
  805878:	10000126 	beq	r2,zero,805880 <___vfprintf_internal_r+0x1c70>
  80587c:	21c00044 	addi	r7,r4,1
  805880:	d9c14515 	stw	r7,1300(sp)
  805884:	383fcc0e 	bge	r7,zero,8057b8 <___vfprintf_internal_r+0x1ba8>
  805888:	d8014515 	stw	zero,1300(sp)
  80588c:	003fca06 	br	8057b8 <___vfprintf_internal_r+0x1ba8>
  805890:	d9000517 	ldw	r4,20(sp)
  805894:	00bfff04 	movi	r2,-4
  805898:	1100480e 	bge	r2,r4,8059bc <___vfprintf_internal_r+0x1dac>
  80589c:	99004716 	blt	r19,r4,8059bc <___vfprintf_internal_r+0x1dac>
  8058a0:	d8c14d15 	stw	r3,1332(sp)
  8058a4:	003ff006 	br	805868 <___vfprintf_internal_r+0x1c58>
  8058a8:	d8800717 	ldw	r2,28(sp)
  8058ac:	14bf8b2e 	bgeu	r2,r18,8056dc <___vfprintf_internal_r+0x1acc>
  8058b0:	9007883a 	mov	r3,r18
  8058b4:	01000c04 	movi	r4,48
  8058b8:	11000005 	stb	r4,0(r2)
  8058bc:	10800044 	addi	r2,r2,1
  8058c0:	d8800715 	stw	r2,28(sp)
  8058c4:	18bffc1e 	bne	r3,r2,8058b8 <___vfprintf_internal_r+0x1ca8>
  8058c8:	003f8406 	br	8056dc <___vfprintf_internal_r+0x1acc>
  8058cc:	d8814117 	ldw	r2,1284(sp)
  8058d0:	10c00007 	ldb	r3,0(r2)
  8058d4:	00800c04 	movi	r2,48
  8058d8:	18805b26 	beq	r3,r2,805a48 <___vfprintf_internal_r+0x1e38>
  8058dc:	d9000517 	ldw	r4,20(sp)
  8058e0:	9125883a 	add	r18,r18,r4
  8058e4:	003f7506 	br	8056bc <___vfprintf_internal_r+0x1aac>
  8058e8:	d9014c17 	ldw	r4,1328(sp)
  8058ec:	2080004c 	andi	r2,r4,1
  8058f0:	1005003a 	cmpeq	r2,r2,zero
  8058f4:	103f6a26 	beq	r2,zero,8056a0 <___vfprintf_internal_r+0x1a90>
  8058f8:	d8800717 	ldw	r2,28(sp)
  8058fc:	003f7706 	br	8056dc <___vfprintf_internal_r+0x1acc>
  805900:	d9c14515 	stw	r7,1300(sp)
  805904:	38004d16 	blt	r7,zero,805a3c <___vfprintf_internal_r+0x1e2c>
  805908:	dc814715 	stw	r18,1308(sp)
  80590c:	d8014615 	stw	zero,1304(sp)
  805910:	003b6106 	br	804698 <___vfprintf_internal_r+0xa88>
  805914:	d9014f17 	ldw	r4,1340(sp)
  805918:	d8800504 	addi	r2,sp,20
  80591c:	d8800115 	stw	r2,4(sp)
  805920:	d8c00604 	addi	r3,sp,24
  805924:	d8800704 	addi	r2,sp,28
  805928:	800b883a 	mov	r5,r16
  80592c:	880d883a 	mov	r6,r17
  805930:	01c000c4 	movi	r7,3
  805934:	d8c00215 	stw	r3,8(sp)
  805938:	d8800315 	stw	r2,12(sp)
  80593c:	dcc00015 	stw	r19,0(sp)
  805940:	9829883a 	mov	r20,r19
  805944:	0805e340 	call	805e34 <_dtoa_r>
  805948:	d8814115 	stw	r2,1284(sp)
  80594c:	003f5106 	br	805694 <___vfprintf_internal_r+0x1a84>
  805950:	d8c14217 	ldw	r3,1288(sp)
  805954:	d9014317 	ldw	r4,1292(sp)
  805958:	07000b44 	movi	fp,45
  80595c:	1821883a 	mov	r16,r3
  805960:	2460003c 	xorhi	r17,r4,32768
  805964:	003f3106 	br	80562c <___vfprintf_internal_r+0x1a1c>
  805968:	9d000044 	addi	r20,r19,1
  80596c:	003f3906 	br	805654 <___vfprintf_internal_r+0x1a44>
  805970:	983f251e 	bne	r19,zero,805608 <___vfprintf_internal_r+0x19f8>
  805974:	04c00044 	movi	r19,1
  805978:	003f2306 	br	805608 <___vfprintf_internal_r+0x19f8>
  80597c:	04c00184 	movi	r19,6
  805980:	003f2106 	br	805608 <___vfprintf_internal_r+0x19f8>
  805984:	d8014515 	stw	zero,1300(sp)
  805988:	003eee06 	br	805544 <___vfprintf_internal_r+0x1934>
  80598c:	200f883a 	mov	r7,r4
  805990:	0100370e 	bge	zero,r4,805a70 <___vfprintf_internal_r+0x1e60>
  805994:	9800031e 	bne	r19,zero,8059a4 <___vfprintf_internal_r+0x1d94>
  805998:	d9814c17 	ldw	r6,1328(sp)
  80599c:	3080004c 	andi	r2,r6,1
  8059a0:	103fb726 	beq	r2,zero,805880 <___vfprintf_internal_r+0x1c70>
  8059a4:	20800044 	addi	r2,r4,1
  8059a8:	98a7883a 	add	r19,r19,r2
  8059ac:	dcc14515 	stw	r19,1300(sp)
  8059b0:	980f883a 	mov	r7,r19
  8059b4:	983f800e 	bge	r19,zero,8057b8 <___vfprintf_internal_r+0x1ba8>
  8059b8:	003fb306 	br	805888 <___vfprintf_internal_r+0x1c78>
  8059bc:	d9814d17 	ldw	r6,1332(sp)
  8059c0:	31bfff84 	addi	r6,r6,-2
  8059c4:	d9814d15 	stw	r6,1332(sp)
  8059c8:	003f4c06 	br	8056fc <___vfprintf_internal_r+0x1aec>
  8059cc:	0100180e 	bge	zero,r4,805a30 <___vfprintf_internal_r+0x1e20>
  8059d0:	00800044 	movi	r2,1
  8059d4:	1485883a 	add	r2,r2,r18
  8059d8:	d8814515 	stw	r2,1300(sp)
  8059dc:	100f883a 	mov	r7,r2
  8059e0:	103f750e 	bge	r2,zero,8057b8 <___vfprintf_internal_r+0x1ba8>
  8059e4:	003fa806 	br	805888 <___vfprintf_internal_r+0x1c78>
  8059e8:	80c00c04 	addi	r3,r16,48
  8059ec:	00800c04 	movi	r2,48
  8059f0:	d8c008c5 	stb	r3,35(sp)
  8059f4:	d9800804 	addi	r6,sp,32
  8059f8:	d8c00904 	addi	r3,sp,36
  8059fc:	d8800885 	stb	r2,34(sp)
  805a00:	003f6506 	br	805798 <___vfprintf_internal_r+0x1b88>
  805a04:	d9014c17 	ldw	r4,1328(sp)
  805a08:	2084703a 	and	r2,r4,r2
  805a0c:	103f9c26 	beq	r2,zero,805880 <___vfprintf_internal_r+0x1c70>
  805a10:	003f6606 	br	8057ac <___vfprintf_internal_r+0x1b9c>
  805a14:	d9800804 	addi	r6,sp,32
  805a18:	d8c00884 	addi	r3,sp,34
  805a1c:	003f5e06 	br	805798 <___vfprintf_internal_r+0x1b88>
  805a20:	00800b44 	movi	r2,45
  805a24:	0121c83a 	sub	r16,zero,r4
  805a28:	d8800845 	stb	r2,33(sp)
  805a2c:	003f3d06 	br	805724 <___vfprintf_internal_r+0x1b14>
  805a30:	00800084 	movi	r2,2
  805a34:	1105c83a 	sub	r2,r2,r4
  805a38:	003fe606 	br	8059d4 <___vfprintf_internal_r+0x1dc4>
  805a3c:	d8014515 	stw	zero,1300(sp)
  805a40:	dc814715 	stw	r18,1308(sp)
  805a44:	003fb106 	br	80590c <___vfprintf_internal_r+0x1cfc>
  805a48:	000d883a 	mov	r6,zero
  805a4c:	000f883a 	mov	r7,zero
  805a50:	8009883a 	mov	r4,r16
  805a54:	880b883a 	mov	r5,r17
  805a58:	080b9100 	call	80b910 <__nedf2>
  805a5c:	103f9f26 	beq	r2,zero,8058dc <___vfprintf_internal_r+0x1ccc>
  805a60:	00800044 	movi	r2,1
  805a64:	1509c83a 	sub	r4,r2,r20
  805a68:	d9000515 	stw	r4,20(sp)
  805a6c:	003f9b06 	br	8058dc <___vfprintf_internal_r+0x1ccc>
  805a70:	98000d1e 	bne	r19,zero,805aa8 <___vfprintf_internal_r+0x1e98>
  805a74:	d8c14c17 	ldw	r3,1328(sp)
  805a78:	1880004c 	andi	r2,r3,1
  805a7c:	10000a1e 	bne	r2,zero,805aa8 <___vfprintf_internal_r+0x1e98>
  805a80:	01000044 	movi	r4,1
  805a84:	200f883a 	mov	r7,r4
  805a88:	d9014515 	stw	r4,1300(sp)
  805a8c:	003f4a06 	br	8057b8 <___vfprintf_internal_r+0x1ba8>
  805a90:	3cc00017 	ldw	r19,0(r7)
  805a94:	39c00104 	addi	r7,r7,4
  805a98:	983d0e0e 	bge	r19,zero,804ed4 <___vfprintf_internal_r+0x12c4>
  805a9c:	b8c00007 	ldb	r3,0(r23)
  805aa0:	04ffffc4 	movi	r19,-1
  805aa4:	0038d906 	br	803e0c <___vfprintf_internal_r+0x1fc>
  805aa8:	9cc00084 	addi	r19,r19,2
  805aac:	dcc14515 	stw	r19,1300(sp)
  805ab0:	980f883a 	mov	r7,r19
  805ab4:	983f400e 	bge	r19,zero,8057b8 <___vfprintf_internal_r+0x1ba8>
  805ab8:	003f7306 	br	805888 <___vfprintf_internal_r+0x1c78>

00805abc <__vfprintf_internal>:
  805abc:	008020b4 	movhi	r2,130
  805ac0:	10b8ef04 	addi	r2,r2,-7236
  805ac4:	2013883a 	mov	r9,r4
  805ac8:	11000017 	ldw	r4,0(r2)
  805acc:	2805883a 	mov	r2,r5
  805ad0:	300f883a 	mov	r7,r6
  805ad4:	480b883a 	mov	r5,r9
  805ad8:	100d883a 	mov	r6,r2
  805adc:	0803c101 	jmpi	803c10 <___vfprintf_internal_r>

00805ae0 <__swsetup_r>:
  805ae0:	008020b4 	movhi	r2,130
  805ae4:	10b8ef04 	addi	r2,r2,-7236
  805ae8:	10c00017 	ldw	r3,0(r2)
  805aec:	defffd04 	addi	sp,sp,-12
  805af0:	dc400115 	stw	r17,4(sp)
  805af4:	dc000015 	stw	r16,0(sp)
  805af8:	dfc00215 	stw	ra,8(sp)
  805afc:	2023883a 	mov	r17,r4
  805b00:	2821883a 	mov	r16,r5
  805b04:	18000226 	beq	r3,zero,805b10 <__swsetup_r+0x30>
  805b08:	18800e17 	ldw	r2,56(r3)
  805b0c:	10001f26 	beq	r2,zero,805b8c <__swsetup_r+0xac>
  805b10:	8100030b 	ldhu	r4,12(r16)
  805b14:	2080020c 	andi	r2,r4,8
  805b18:	10002826 	beq	r2,zero,805bbc <__swsetup_r+0xdc>
  805b1c:	81400417 	ldw	r5,16(r16)
  805b20:	28001d26 	beq	r5,zero,805b98 <__swsetup_r+0xb8>
  805b24:	2080004c 	andi	r2,r4,1
  805b28:	1005003a 	cmpeq	r2,r2,zero
  805b2c:	10000b26 	beq	r2,zero,805b5c <__swsetup_r+0x7c>
  805b30:	2080008c 	andi	r2,r4,2
  805b34:	10001226 	beq	r2,zero,805b80 <__swsetup_r+0xa0>
  805b38:	0005883a 	mov	r2,zero
  805b3c:	80800215 	stw	r2,8(r16)
  805b40:	28000b26 	beq	r5,zero,805b70 <__swsetup_r+0x90>
  805b44:	0005883a 	mov	r2,zero
  805b48:	dfc00217 	ldw	ra,8(sp)
  805b4c:	dc400117 	ldw	r17,4(sp)
  805b50:	dc000017 	ldw	r16,0(sp)
  805b54:	dec00304 	addi	sp,sp,12
  805b58:	f800283a 	ret
  805b5c:	80800517 	ldw	r2,20(r16)
  805b60:	80000215 	stw	zero,8(r16)
  805b64:	0085c83a 	sub	r2,zero,r2
  805b68:	80800615 	stw	r2,24(r16)
  805b6c:	283ff51e 	bne	r5,zero,805b44 <__swsetup_r+0x64>
  805b70:	2080200c 	andi	r2,r4,128
  805b74:	103ff326 	beq	r2,zero,805b44 <__swsetup_r+0x64>
  805b78:	00bfffc4 	movi	r2,-1
  805b7c:	003ff206 	br	805b48 <__swsetup_r+0x68>
  805b80:	80800517 	ldw	r2,20(r16)
  805b84:	80800215 	stw	r2,8(r16)
  805b88:	003fed06 	br	805b40 <__swsetup_r+0x60>
  805b8c:	1809883a 	mov	r4,r3
  805b90:	08076800 	call	807680 <__sinit>
  805b94:	003fde06 	br	805b10 <__swsetup_r+0x30>
  805b98:	20c0a00c 	andi	r3,r4,640
  805b9c:	00808004 	movi	r2,512
  805ba0:	18bfe026 	beq	r3,r2,805b24 <__swsetup_r+0x44>
  805ba4:	8809883a 	mov	r4,r17
  805ba8:	800b883a 	mov	r5,r16
  805bac:	08083f80 	call	8083f8 <__smakebuf_r>
  805bb0:	8100030b 	ldhu	r4,12(r16)
  805bb4:	81400417 	ldw	r5,16(r16)
  805bb8:	003fda06 	br	805b24 <__swsetup_r+0x44>
  805bbc:	2080040c 	andi	r2,r4,16
  805bc0:	103fed26 	beq	r2,zero,805b78 <__swsetup_r+0x98>
  805bc4:	2080010c 	andi	r2,r4,4
  805bc8:	10001226 	beq	r2,zero,805c14 <__swsetup_r+0x134>
  805bcc:	81400c17 	ldw	r5,48(r16)
  805bd0:	28000526 	beq	r5,zero,805be8 <__swsetup_r+0x108>
  805bd4:	80801004 	addi	r2,r16,64
  805bd8:	28800226 	beq	r5,r2,805be4 <__swsetup_r+0x104>
  805bdc:	8809883a 	mov	r4,r17
  805be0:	0807a040 	call	807a04 <_free_r>
  805be4:	80000c15 	stw	zero,48(r16)
  805be8:	8080030b 	ldhu	r2,12(r16)
  805bec:	81400417 	ldw	r5,16(r16)
  805bf0:	80000115 	stw	zero,4(r16)
  805bf4:	10bff6cc 	andi	r2,r2,65499
  805bf8:	8080030d 	sth	r2,12(r16)
  805bfc:	81400015 	stw	r5,0(r16)
  805c00:	8080030b 	ldhu	r2,12(r16)
  805c04:	10800214 	ori	r2,r2,8
  805c08:	113fffcc 	andi	r4,r2,65535
  805c0c:	8080030d 	sth	r2,12(r16)
  805c10:	003fc306 	br	805b20 <__swsetup_r+0x40>
  805c14:	81400417 	ldw	r5,16(r16)
  805c18:	003ff906 	br	805c00 <__swsetup_r+0x120>

00805c1c <quorem>:
  805c1c:	28c00417 	ldw	r3,16(r5)
  805c20:	20800417 	ldw	r2,16(r4)
  805c24:	defff604 	addi	sp,sp,-40
  805c28:	ddc00715 	stw	r23,28(sp)
  805c2c:	dd400515 	stw	r21,20(sp)
  805c30:	dfc00915 	stw	ra,36(sp)
  805c34:	df000815 	stw	fp,32(sp)
  805c38:	dd800615 	stw	r22,24(sp)
  805c3c:	dd000415 	stw	r20,16(sp)
  805c40:	dcc00315 	stw	r19,12(sp)
  805c44:	dc800215 	stw	r18,8(sp)
  805c48:	dc400115 	stw	r17,4(sp)
  805c4c:	dc000015 	stw	r16,0(sp)
  805c50:	202f883a 	mov	r23,r4
  805c54:	282b883a 	mov	r21,r5
  805c58:	10c07416 	blt	r2,r3,805e2c <quorem+0x210>
  805c5c:	1c7fffc4 	addi	r17,r3,-1
  805c60:	8c45883a 	add	r2,r17,r17
  805c64:	1085883a 	add	r2,r2,r2
  805c68:	2c000504 	addi	r16,r5,20
  805c6c:	24c00504 	addi	r19,r4,20
  805c70:	14ed883a 	add	r22,r2,r19
  805c74:	80a5883a 	add	r18,r16,r2
  805c78:	b7000017 	ldw	fp,0(r22)
  805c7c:	91400017 	ldw	r5,0(r18)
  805c80:	e009883a 	mov	r4,fp
  805c84:	29400044 	addi	r5,r5,1
  805c88:	080bb5c0 	call	80bb5c <__udivsi3>
  805c8c:	1029883a 	mov	r20,r2
  805c90:	10003c1e 	bne	r2,zero,805d84 <quorem+0x168>
  805c94:	a80b883a 	mov	r5,r21
  805c98:	b809883a 	mov	r4,r23
  805c9c:	08091240 	call	809124 <__mcmp>
  805ca0:	10002b16 	blt	r2,zero,805d50 <quorem+0x134>
  805ca4:	a5000044 	addi	r20,r20,1
  805ca8:	980f883a 	mov	r7,r19
  805cac:	0011883a 	mov	r8,zero
  805cb0:	0009883a 	mov	r4,zero
  805cb4:	81400017 	ldw	r5,0(r16)
  805cb8:	38c00017 	ldw	r3,0(r7)
  805cbc:	84000104 	addi	r16,r16,4
  805cc0:	28bfffcc 	andi	r2,r5,65535
  805cc4:	2085883a 	add	r2,r4,r2
  805cc8:	11bfffcc 	andi	r6,r2,65535
  805ccc:	193fffcc 	andi	r4,r3,65535
  805cd0:	1004d43a 	srli	r2,r2,16
  805cd4:	280ad43a 	srli	r5,r5,16
  805cd8:	2189c83a 	sub	r4,r4,r6
  805cdc:	2209883a 	add	r4,r4,r8
  805ce0:	1806d43a 	srli	r3,r3,16
  805ce4:	288b883a 	add	r5,r5,r2
  805ce8:	200dd43a 	srai	r6,r4,16
  805cec:	28bfffcc 	andi	r2,r5,65535
  805cf0:	1887c83a 	sub	r3,r3,r2
  805cf4:	1987883a 	add	r3,r3,r6
  805cf8:	3900000d 	sth	r4,0(r7)
  805cfc:	38c0008d 	sth	r3,2(r7)
  805d00:	2808d43a 	srli	r4,r5,16
  805d04:	39c00104 	addi	r7,r7,4
  805d08:	1811d43a 	srai	r8,r3,16
  805d0c:	943fe92e 	bgeu	r18,r16,805cb4 <quorem+0x98>
  805d10:	8c45883a 	add	r2,r17,r17
  805d14:	1085883a 	add	r2,r2,r2
  805d18:	9885883a 	add	r2,r19,r2
  805d1c:	10c00017 	ldw	r3,0(r2)
  805d20:	18000b1e 	bne	r3,zero,805d50 <quorem+0x134>
  805d24:	113fff04 	addi	r4,r2,-4
  805d28:	9900082e 	bgeu	r19,r4,805d4c <quorem+0x130>
  805d2c:	10bfff17 	ldw	r2,-4(r2)
  805d30:	10000326 	beq	r2,zero,805d40 <quorem+0x124>
  805d34:	00000506 	br	805d4c <quorem+0x130>
  805d38:	20800017 	ldw	r2,0(r4)
  805d3c:	1000031e 	bne	r2,zero,805d4c <quorem+0x130>
  805d40:	213fff04 	addi	r4,r4,-4
  805d44:	8c7fffc4 	addi	r17,r17,-1
  805d48:	993ffb36 	bltu	r19,r4,805d38 <quorem+0x11c>
  805d4c:	bc400415 	stw	r17,16(r23)
  805d50:	a005883a 	mov	r2,r20
  805d54:	dfc00917 	ldw	ra,36(sp)
  805d58:	df000817 	ldw	fp,32(sp)
  805d5c:	ddc00717 	ldw	r23,28(sp)
  805d60:	dd800617 	ldw	r22,24(sp)
  805d64:	dd400517 	ldw	r21,20(sp)
  805d68:	dd000417 	ldw	r20,16(sp)
  805d6c:	dcc00317 	ldw	r19,12(sp)
  805d70:	dc800217 	ldw	r18,8(sp)
  805d74:	dc400117 	ldw	r17,4(sp)
  805d78:	dc000017 	ldw	r16,0(sp)
  805d7c:	dec00a04 	addi	sp,sp,40
  805d80:	f800283a 	ret
  805d84:	980f883a 	mov	r7,r19
  805d88:	8011883a 	mov	r8,r16
  805d8c:	0013883a 	mov	r9,zero
  805d90:	000d883a 	mov	r6,zero
  805d94:	40c00017 	ldw	r3,0(r8)
  805d98:	39000017 	ldw	r4,0(r7)
  805d9c:	42000104 	addi	r8,r8,4
  805da0:	18bfffcc 	andi	r2,r3,65535
  805da4:	a085383a 	mul	r2,r20,r2
  805da8:	1806d43a 	srli	r3,r3,16
  805dac:	217fffcc 	andi	r5,r4,65535
  805db0:	3085883a 	add	r2,r6,r2
  805db4:	11bfffcc 	andi	r6,r2,65535
  805db8:	a0c7383a 	mul	r3,r20,r3
  805dbc:	1004d43a 	srli	r2,r2,16
  805dc0:	298bc83a 	sub	r5,r5,r6
  805dc4:	2a4b883a 	add	r5,r5,r9
  805dc8:	2008d43a 	srli	r4,r4,16
  805dcc:	1887883a 	add	r3,r3,r2
  805dd0:	280dd43a 	srai	r6,r5,16
  805dd4:	18bfffcc 	andi	r2,r3,65535
  805dd8:	2089c83a 	sub	r4,r4,r2
  805ddc:	2189883a 	add	r4,r4,r6
  805de0:	3900008d 	sth	r4,2(r7)
  805de4:	3940000d 	sth	r5,0(r7)
  805de8:	180cd43a 	srli	r6,r3,16
  805dec:	39c00104 	addi	r7,r7,4
  805df0:	2013d43a 	srai	r9,r4,16
  805df4:	923fe72e 	bgeu	r18,r8,805d94 <quorem+0x178>
  805df8:	e03fa61e 	bne	fp,zero,805c94 <quorem+0x78>
  805dfc:	b0ffff04 	addi	r3,r22,-4
  805e00:	98c0082e 	bgeu	r19,r3,805e24 <quorem+0x208>
  805e04:	b0bfff17 	ldw	r2,-4(r22)
  805e08:	10000326 	beq	r2,zero,805e18 <quorem+0x1fc>
  805e0c:	00000506 	br	805e24 <quorem+0x208>
  805e10:	18800017 	ldw	r2,0(r3)
  805e14:	1000031e 	bne	r2,zero,805e24 <quorem+0x208>
  805e18:	18ffff04 	addi	r3,r3,-4
  805e1c:	8c7fffc4 	addi	r17,r17,-1
  805e20:	98fffb36 	bltu	r19,r3,805e10 <quorem+0x1f4>
  805e24:	bc400415 	stw	r17,16(r23)
  805e28:	003f9a06 	br	805c94 <quorem+0x78>
  805e2c:	0005883a 	mov	r2,zero
  805e30:	003fc806 	br	805d54 <quorem+0x138>

00805e34 <_dtoa_r>:
  805e34:	22001017 	ldw	r8,64(r4)
  805e38:	deffda04 	addi	sp,sp,-152
  805e3c:	dd402115 	stw	r21,132(sp)
  805e40:	dd002015 	stw	r20,128(sp)
  805e44:	dc801e15 	stw	r18,120(sp)
  805e48:	dc401d15 	stw	r17,116(sp)
  805e4c:	dfc02515 	stw	ra,148(sp)
  805e50:	df002415 	stw	fp,144(sp)
  805e54:	ddc02315 	stw	r23,140(sp)
  805e58:	dd802215 	stw	r22,136(sp)
  805e5c:	dcc01f15 	stw	r19,124(sp)
  805e60:	dc001c15 	stw	r16,112(sp)
  805e64:	d9001615 	stw	r4,88(sp)
  805e68:	3023883a 	mov	r17,r6
  805e6c:	2829883a 	mov	r20,r5
  805e70:	d9c01715 	stw	r7,92(sp)
  805e74:	dc802817 	ldw	r18,160(sp)
  805e78:	302b883a 	mov	r21,r6
  805e7c:	40000a26 	beq	r8,zero,805ea8 <_dtoa_r+0x74>
  805e80:	20801117 	ldw	r2,68(r4)
  805e84:	400b883a 	mov	r5,r8
  805e88:	40800115 	stw	r2,4(r8)
  805e8c:	20c01117 	ldw	r3,68(r4)
  805e90:	00800044 	movi	r2,1
  805e94:	10c4983a 	sll	r2,r2,r3
  805e98:	40800215 	stw	r2,8(r8)
  805e9c:	0808fc80 	call	808fc8 <_Bfree>
  805ea0:	d8c01617 	ldw	r3,88(sp)
  805ea4:	18001015 	stw	zero,64(r3)
  805ea8:	8800a316 	blt	r17,zero,806138 <_dtoa_r+0x304>
  805eac:	90000015 	stw	zero,0(r18)
  805eb0:	a8dffc2c 	andhi	r3,r21,32752
  805eb4:	009ffc34 	movhi	r2,32752
  805eb8:	18809126 	beq	r3,r2,806100 <_dtoa_r+0x2cc>
  805ebc:	000d883a 	mov	r6,zero
  805ec0:	000f883a 	mov	r7,zero
  805ec4:	a009883a 	mov	r4,r20
  805ec8:	a80b883a 	mov	r5,r21
  805ecc:	dd001215 	stw	r20,72(sp)
  805ed0:	dd401315 	stw	r21,76(sp)
  805ed4:	080b9100 	call	80b910 <__nedf2>
  805ed8:	1000171e 	bne	r2,zero,805f38 <_dtoa_r+0x104>
  805edc:	d9802717 	ldw	r6,156(sp)
  805ee0:	00800044 	movi	r2,1
  805ee4:	30800015 	stw	r2,0(r6)
  805ee8:	d8802917 	ldw	r2,164(sp)
  805eec:	10029b26 	beq	r2,zero,80695c <_dtoa_r+0xb28>
  805ef0:	d9002917 	ldw	r4,164(sp)
  805ef4:	008020b4 	movhi	r2,130
  805ef8:	10b17244 	addi	r2,r2,-14903
  805efc:	10ffffc4 	addi	r3,r2,-1
  805f00:	20800015 	stw	r2,0(r4)
  805f04:	1805883a 	mov	r2,r3
  805f08:	dfc02517 	ldw	ra,148(sp)
  805f0c:	df002417 	ldw	fp,144(sp)
  805f10:	ddc02317 	ldw	r23,140(sp)
  805f14:	dd802217 	ldw	r22,136(sp)
  805f18:	dd402117 	ldw	r21,132(sp)
  805f1c:	dd002017 	ldw	r20,128(sp)
  805f20:	dcc01f17 	ldw	r19,124(sp)
  805f24:	dc801e17 	ldw	r18,120(sp)
  805f28:	dc401d17 	ldw	r17,116(sp)
  805f2c:	dc001c17 	ldw	r16,112(sp)
  805f30:	dec02604 	addi	sp,sp,152
  805f34:	f800283a 	ret
  805f38:	d9001617 	ldw	r4,88(sp)
  805f3c:	d9401217 	ldw	r5,72(sp)
  805f40:	d8800104 	addi	r2,sp,4
  805f44:	a80d883a 	mov	r6,r21
  805f48:	d9c00204 	addi	r7,sp,8
  805f4c:	d8800015 	stw	r2,0(sp)
  805f50:	08096040 	call	809604 <__d2b>
  805f54:	d8800715 	stw	r2,28(sp)
  805f58:	a804d53a 	srli	r2,r21,20
  805f5c:	1101ffcc 	andi	r4,r2,2047
  805f60:	20008626 	beq	r4,zero,80617c <_dtoa_r+0x348>
  805f64:	d8c01217 	ldw	r3,72(sp)
  805f68:	00800434 	movhi	r2,16
  805f6c:	10bfffc4 	addi	r2,r2,-1
  805f70:	ddc00117 	ldw	r23,4(sp)
  805f74:	a884703a 	and	r2,r21,r2
  805f78:	1811883a 	mov	r8,r3
  805f7c:	124ffc34 	orhi	r9,r2,16368
  805f80:	25bf0044 	addi	r22,r4,-1023
  805f84:	d8000815 	stw	zero,32(sp)
  805f88:	0005883a 	mov	r2,zero
  805f8c:	00cffe34 	movhi	r3,16376
  805f90:	480b883a 	mov	r5,r9
  805f94:	4009883a 	mov	r4,r8
  805f98:	180f883a 	mov	r7,r3
  805f9c:	100d883a 	mov	r6,r2
  805fa0:	080284c0 	call	80284c <__subdf3>
  805fa4:	0218dbf4 	movhi	r8,25455
  805fa8:	4210d844 	addi	r8,r8,17249
  805fac:	024ff4f4 	movhi	r9,16339
  805fb0:	4a61e9c4 	addi	r9,r9,-30809
  805fb4:	480f883a 	mov	r7,r9
  805fb8:	400d883a 	mov	r6,r8
  805fbc:	180b883a 	mov	r5,r3
  805fc0:	1009883a 	mov	r4,r2
  805fc4:	08029400 	call	802940 <__muldf3>
  805fc8:	0222d874 	movhi	r8,35681
  805fcc:	42322cc4 	addi	r8,r8,-14157
  805fd0:	024ff1f4 	movhi	r9,16327
  805fd4:	4a628a04 	addi	r9,r9,-30168
  805fd8:	480f883a 	mov	r7,r9
  805fdc:	400d883a 	mov	r6,r8
  805fe0:	180b883a 	mov	r5,r3
  805fe4:	1009883a 	mov	r4,r2
  805fe8:	08028cc0 	call	8028cc <__adddf3>
  805fec:	b009883a 	mov	r4,r22
  805ff0:	1021883a 	mov	r16,r2
  805ff4:	1823883a 	mov	r17,r3
  805ff8:	0802fe40 	call	802fe4 <__floatsidf>
  805ffc:	021427f4 	movhi	r8,20639
  806000:	421e7ec4 	addi	r8,r8,31227
  806004:	024ff4f4 	movhi	r9,16339
  806008:	4a5104c4 	addi	r9,r9,17427
  80600c:	480f883a 	mov	r7,r9
  806010:	400d883a 	mov	r6,r8
  806014:	180b883a 	mov	r5,r3
  806018:	1009883a 	mov	r4,r2
  80601c:	08029400 	call	802940 <__muldf3>
  806020:	180f883a 	mov	r7,r3
  806024:	880b883a 	mov	r5,r17
  806028:	100d883a 	mov	r6,r2
  80602c:	8009883a 	mov	r4,r16
  806030:	08028cc0 	call	8028cc <__adddf3>
  806034:	1009883a 	mov	r4,r2
  806038:	180b883a 	mov	r5,r3
  80603c:	1021883a 	mov	r16,r2
  806040:	1823883a 	mov	r17,r3
  806044:	08030dc0 	call	8030dc <__fixdfsi>
  806048:	000d883a 	mov	r6,zero
  80604c:	000f883a 	mov	r7,zero
  806050:	8009883a 	mov	r4,r16
  806054:	880b883a 	mov	r5,r17
  806058:	d8800d15 	stw	r2,52(sp)
  80605c:	0802f5c0 	call	802f5c <__ltdf2>
  806060:	10031716 	blt	r2,zero,806cc0 <_dtoa_r+0xe8c>
  806064:	d8c00d17 	ldw	r3,52(sp)
  806068:	00800584 	movi	r2,22
  80606c:	10c1482e 	bgeu	r2,r3,806590 <_dtoa_r+0x75c>
  806070:	01000044 	movi	r4,1
  806074:	d9000c15 	stw	r4,48(sp)
  806078:	bd85c83a 	sub	r2,r23,r22
  80607c:	11bfffc4 	addi	r6,r2,-1
  806080:	30030b16 	blt	r6,zero,806cb0 <_dtoa_r+0xe7c>
  806084:	d9800a15 	stw	r6,40(sp)
  806088:	d8001115 	stw	zero,68(sp)
  80608c:	d8c00d17 	ldw	r3,52(sp)
  806090:	1802ff16 	blt	r3,zero,806c90 <_dtoa_r+0xe5c>
  806094:	d9000a17 	ldw	r4,40(sp)
  806098:	d8c00915 	stw	r3,36(sp)
  80609c:	d8001015 	stw	zero,64(sp)
  8060a0:	20c9883a 	add	r4,r4,r3
  8060a4:	d9000a15 	stw	r4,40(sp)
  8060a8:	d9001717 	ldw	r4,92(sp)
  8060ac:	00800244 	movi	r2,9
  8060b0:	11004636 	bltu	r2,r4,8061cc <_dtoa_r+0x398>
  8060b4:	00800144 	movi	r2,5
  8060b8:	11020416 	blt	r2,r4,8068cc <_dtoa_r+0xa98>
  8060bc:	04400044 	movi	r17,1
  8060c0:	d8c01717 	ldw	r3,92(sp)
  8060c4:	00800144 	movi	r2,5
  8060c8:	10c1ed36 	bltu	r2,r3,806880 <_dtoa_r+0xa4c>
  8060cc:	18c5883a 	add	r2,r3,r3
  8060d0:	1085883a 	add	r2,r2,r2
  8060d4:	00c02034 	movhi	r3,128
  8060d8:	18d83a04 	addi	r3,r3,24808
  8060dc:	10c5883a 	add	r2,r2,r3
  8060e0:	11000017 	ldw	r4,0(r2)
  8060e4:	2000683a 	jmp	r4
  8060e8:	008061d4 	movui	r2,391
  8060ec:	008061d4 	movui	r2,391
  8060f0:	00806bd4 	movui	r2,431
  8060f4:	00806bac 	andhi	r2,zero,430
  8060f8:	00806bf0 	cmpltui	r2,zero,431
  8060fc:	00806bfc 	xorhi	r2,zero,431
  806100:	d9002717 	ldw	r4,156(sp)
  806104:	0089c3c4 	movi	r2,9999
  806108:	20800015 	stw	r2,0(r4)
  80610c:	a0001026 	beq	r20,zero,806150 <_dtoa_r+0x31c>
  806110:	00c020b4 	movhi	r3,130
  806114:	18f17e04 	addi	r3,r3,-14856
  806118:	d9802917 	ldw	r6,164(sp)
  80611c:	303f7926 	beq	r6,zero,805f04 <_dtoa_r+0xd0>
  806120:	188000c7 	ldb	r2,3(r3)
  806124:	190000c4 	addi	r4,r3,3
  806128:	1000101e 	bne	r2,zero,80616c <_dtoa_r+0x338>
  80612c:	d8802917 	ldw	r2,164(sp)
  806130:	11000015 	stw	r4,0(r2)
  806134:	003f7306 	br	805f04 <_dtoa_r+0xd0>
  806138:	00a00034 	movhi	r2,32768
  80613c:	10bfffc4 	addi	r2,r2,-1
  806140:	00c00044 	movi	r3,1
  806144:	88aa703a 	and	r21,r17,r2
  806148:	90c00015 	stw	r3,0(r18)
  80614c:	003f5806 	br	805eb0 <_dtoa_r+0x7c>
  806150:	00800434 	movhi	r2,16
  806154:	10bfffc4 	addi	r2,r2,-1
  806158:	a884703a 	and	r2,r21,r2
  80615c:	103fec1e 	bne	r2,zero,806110 <_dtoa_r+0x2dc>
  806160:	00c020b4 	movhi	r3,130
  806164:	18f17b04 	addi	r3,r3,-14868
  806168:	003feb06 	br	806118 <_dtoa_r+0x2e4>
  80616c:	d8802917 	ldw	r2,164(sp)
  806170:	19000204 	addi	r4,r3,8
  806174:	11000015 	stw	r4,0(r2)
  806178:	003f6206 	br	805f04 <_dtoa_r+0xd0>
  80617c:	ddc00117 	ldw	r23,4(sp)
  806180:	d8800217 	ldw	r2,8(sp)
  806184:	01000804 	movi	r4,32
  806188:	b8c10c84 	addi	r3,r23,1074
  80618c:	18a3883a 	add	r17,r3,r2
  806190:	2441b80e 	bge	r4,r17,806874 <_dtoa_r+0xa40>
  806194:	00c01004 	movi	r3,64
  806198:	1c47c83a 	sub	r3,r3,r17
  80619c:	88bff804 	addi	r2,r17,-32
  8061a0:	a8c6983a 	sll	r3,r21,r3
  8061a4:	a084d83a 	srl	r2,r20,r2
  8061a8:	1888b03a 	or	r4,r3,r2
  8061ac:	08031b40 	call	8031b4 <__floatunsidf>
  8061b0:	1011883a 	mov	r8,r2
  8061b4:	00bf8434 	movhi	r2,65040
  8061b8:	01000044 	movi	r4,1
  8061bc:	10d3883a 	add	r9,r2,r3
  8061c0:	8dbef344 	addi	r22,r17,-1075
  8061c4:	d9000815 	stw	r4,32(sp)
  8061c8:	003f6f06 	br	805f88 <_dtoa_r+0x154>
  8061cc:	d8001715 	stw	zero,92(sp)
  8061d0:	04400044 	movi	r17,1
  8061d4:	00bfffc4 	movi	r2,-1
  8061d8:	00c00044 	movi	r3,1
  8061dc:	d8800e15 	stw	r2,56(sp)
  8061e0:	d8002615 	stw	zero,152(sp)
  8061e4:	d8800f15 	stw	r2,60(sp)
  8061e8:	d8c00b15 	stw	r3,44(sp)
  8061ec:	1021883a 	mov	r16,r2
  8061f0:	d8801617 	ldw	r2,88(sp)
  8061f4:	10001115 	stw	zero,68(r2)
  8061f8:	d8801617 	ldw	r2,88(sp)
  8061fc:	11401117 	ldw	r5,68(r2)
  806200:	1009883a 	mov	r4,r2
  806204:	08095480 	call	809548 <_Balloc>
  806208:	d8c01617 	ldw	r3,88(sp)
  80620c:	d8800515 	stw	r2,20(sp)
  806210:	18801015 	stw	r2,64(r3)
  806214:	00800384 	movi	r2,14
  806218:	14006836 	bltu	r2,r16,8063bc <_dtoa_r+0x588>
  80621c:	8805003a 	cmpeq	r2,r17,zero
  806220:	1000661e 	bne	r2,zero,8063bc <_dtoa_r+0x588>
  806224:	d9000d17 	ldw	r4,52(sp)
  806228:	0102300e 	bge	zero,r4,806aec <_dtoa_r+0xcb8>
  80622c:	208003cc 	andi	r2,r4,15
  806230:	100490fa 	slli	r2,r2,3
  806234:	2025d13a 	srai	r18,r4,4
  806238:	00c020b4 	movhi	r3,130
  80623c:	18f18f04 	addi	r3,r3,-14788
  806240:	10c5883a 	add	r2,r2,r3
  806244:	90c0040c 	andi	r3,r18,16
  806248:	14000017 	ldw	r16,0(r2)
  80624c:	14400117 	ldw	r17,4(r2)
  806250:	18036a1e 	bne	r3,zero,806ffc <_dtoa_r+0x11c8>
  806254:	05800084 	movi	r22,2
  806258:	90001026 	beq	r18,zero,80629c <_dtoa_r+0x468>
  80625c:	04c020b4 	movhi	r19,130
  806260:	9cf1c104 	addi	r19,r19,-14588
  806264:	9080004c 	andi	r2,r18,1
  806268:	1005003a 	cmpeq	r2,r2,zero
  80626c:	1000081e 	bne	r2,zero,806290 <_dtoa_r+0x45c>
  806270:	99800017 	ldw	r6,0(r19)
  806274:	99c00117 	ldw	r7,4(r19)
  806278:	880b883a 	mov	r5,r17
  80627c:	8009883a 	mov	r4,r16
  806280:	08029400 	call	802940 <__muldf3>
  806284:	1021883a 	mov	r16,r2
  806288:	b5800044 	addi	r22,r22,1
  80628c:	1823883a 	mov	r17,r3
  806290:	9025d07a 	srai	r18,r18,1
  806294:	9cc00204 	addi	r19,r19,8
  806298:	903ff21e 	bne	r18,zero,806264 <_dtoa_r+0x430>
  80629c:	a80b883a 	mov	r5,r21
  8062a0:	a009883a 	mov	r4,r20
  8062a4:	880f883a 	mov	r7,r17
  8062a8:	800d883a 	mov	r6,r16
  8062ac:	0802d040 	call	802d04 <__divdf3>
  8062b0:	1029883a 	mov	r20,r2
  8062b4:	182b883a 	mov	r21,r3
  8062b8:	d8c00c17 	ldw	r3,48(sp)
  8062bc:	1805003a 	cmpeq	r2,r3,zero
  8062c0:	1000081e 	bne	r2,zero,8062e4 <_dtoa_r+0x4b0>
  8062c4:	0005883a 	mov	r2,zero
  8062c8:	00cffc34 	movhi	r3,16368
  8062cc:	180f883a 	mov	r7,r3
  8062d0:	a009883a 	mov	r4,r20
  8062d4:	a80b883a 	mov	r5,r21
  8062d8:	100d883a 	mov	r6,r2
  8062dc:	0802f5c0 	call	802f5c <__ltdf2>
  8062e0:	1003fe16 	blt	r2,zero,8072dc <_dtoa_r+0x14a8>
  8062e4:	b009883a 	mov	r4,r22
  8062e8:	0802fe40 	call	802fe4 <__floatsidf>
  8062ec:	180b883a 	mov	r5,r3
  8062f0:	1009883a 	mov	r4,r2
  8062f4:	a00d883a 	mov	r6,r20
  8062f8:	a80f883a 	mov	r7,r21
  8062fc:	08029400 	call	802940 <__muldf3>
  806300:	0011883a 	mov	r8,zero
  806304:	02500734 	movhi	r9,16412
  806308:	1009883a 	mov	r4,r2
  80630c:	180b883a 	mov	r5,r3
  806310:	480f883a 	mov	r7,r9
  806314:	400d883a 	mov	r6,r8
  806318:	08028cc0 	call	8028cc <__adddf3>
  80631c:	d9000f17 	ldw	r4,60(sp)
  806320:	102d883a 	mov	r22,r2
  806324:	00bf3034 	movhi	r2,64704
  806328:	18b9883a 	add	fp,r3,r2
  80632c:	e02f883a 	mov	r23,fp
  806330:	20028f1e 	bne	r4,zero,806d70 <_dtoa_r+0xf3c>
  806334:	0005883a 	mov	r2,zero
  806338:	00d00534 	movhi	r3,16404
  80633c:	a009883a 	mov	r4,r20
  806340:	a80b883a 	mov	r5,r21
  806344:	180f883a 	mov	r7,r3
  806348:	100d883a 	mov	r6,r2
  80634c:	080284c0 	call	80284c <__subdf3>
  806350:	1009883a 	mov	r4,r2
  806354:	e00f883a 	mov	r7,fp
  806358:	180b883a 	mov	r5,r3
  80635c:	b00d883a 	mov	r6,r22
  806360:	1025883a 	mov	r18,r2
  806364:	1827883a 	mov	r19,r3
  806368:	080b9980 	call	80b998 <__gtdf2>
  80636c:	00834f16 	blt	zero,r2,8070ac <_dtoa_r+0x1278>
  806370:	e0e0003c 	xorhi	r3,fp,32768
  806374:	9009883a 	mov	r4,r18
  806378:	980b883a 	mov	r5,r19
  80637c:	180f883a 	mov	r7,r3
  806380:	b00d883a 	mov	r6,r22
  806384:	0802f5c0 	call	802f5c <__ltdf2>
  806388:	1000080e 	bge	r2,zero,8063ac <_dtoa_r+0x578>
  80638c:	0027883a 	mov	r19,zero
  806390:	0025883a 	mov	r18,zero
  806394:	d8802617 	ldw	r2,152(sp)
  806398:	df000517 	ldw	fp,20(sp)
  80639c:	d8000615 	stw	zero,24(sp)
  8063a0:	0084303a 	nor	r2,zero,r2
  8063a4:	d8800d15 	stw	r2,52(sp)
  8063a8:	00019b06 	br	806a18 <_dtoa_r+0xbe4>
  8063ac:	d9801217 	ldw	r6,72(sp)
  8063b0:	d8801317 	ldw	r2,76(sp)
  8063b4:	3029883a 	mov	r20,r6
  8063b8:	102b883a 	mov	r21,r2
  8063bc:	d8c00217 	ldw	r3,8(sp)
  8063c0:	18008516 	blt	r3,zero,8065d8 <_dtoa_r+0x7a4>
  8063c4:	d9000d17 	ldw	r4,52(sp)
  8063c8:	00800384 	movi	r2,14
  8063cc:	11008216 	blt	r2,r4,8065d8 <_dtoa_r+0x7a4>
  8063d0:	200490fa 	slli	r2,r4,3
  8063d4:	d9802617 	ldw	r6,152(sp)
  8063d8:	00c020b4 	movhi	r3,130
  8063dc:	18f18f04 	addi	r3,r3,-14788
  8063e0:	10c5883a 	add	r2,r2,r3
  8063e4:	14800017 	ldw	r18,0(r2)
  8063e8:	14c00117 	ldw	r19,4(r2)
  8063ec:	30031e16 	blt	r6,zero,807068 <_dtoa_r+0x1234>
  8063f0:	d9000517 	ldw	r4,20(sp)
  8063f4:	d8c00f17 	ldw	r3,60(sp)
  8063f8:	a823883a 	mov	r17,r21
  8063fc:	a021883a 	mov	r16,r20
  806400:	192b883a 	add	r21,r3,r4
  806404:	2039883a 	mov	fp,r4
  806408:	00000f06 	br	806448 <_dtoa_r+0x614>
  80640c:	0005883a 	mov	r2,zero
  806410:	00d00934 	movhi	r3,16420
  806414:	5009883a 	mov	r4,r10
  806418:	580b883a 	mov	r5,r11
  80641c:	180f883a 	mov	r7,r3
  806420:	100d883a 	mov	r6,r2
  806424:	08029400 	call	802940 <__muldf3>
  806428:	180b883a 	mov	r5,r3
  80642c:	000d883a 	mov	r6,zero
  806430:	000f883a 	mov	r7,zero
  806434:	1009883a 	mov	r4,r2
  806438:	1021883a 	mov	r16,r2
  80643c:	1823883a 	mov	r17,r3
  806440:	080b9100 	call	80b910 <__nedf2>
  806444:	10004526 	beq	r2,zero,80655c <_dtoa_r+0x728>
  806448:	900d883a 	mov	r6,r18
  80644c:	980f883a 	mov	r7,r19
  806450:	8009883a 	mov	r4,r16
  806454:	880b883a 	mov	r5,r17
  806458:	0802d040 	call	802d04 <__divdf3>
  80645c:	180b883a 	mov	r5,r3
  806460:	1009883a 	mov	r4,r2
  806464:	08030dc0 	call	8030dc <__fixdfsi>
  806468:	1009883a 	mov	r4,r2
  80646c:	1029883a 	mov	r20,r2
  806470:	0802fe40 	call	802fe4 <__floatsidf>
  806474:	180f883a 	mov	r7,r3
  806478:	9009883a 	mov	r4,r18
  80647c:	980b883a 	mov	r5,r19
  806480:	100d883a 	mov	r6,r2
  806484:	08029400 	call	802940 <__muldf3>
  806488:	180f883a 	mov	r7,r3
  80648c:	880b883a 	mov	r5,r17
  806490:	8009883a 	mov	r4,r16
  806494:	100d883a 	mov	r6,r2
  806498:	080284c0 	call	80284c <__subdf3>
  80649c:	1015883a 	mov	r10,r2
  8064a0:	a0800c04 	addi	r2,r20,48
  8064a4:	e0800005 	stb	r2,0(fp)
  8064a8:	e7000044 	addi	fp,fp,1
  8064ac:	1817883a 	mov	r11,r3
  8064b0:	e57fd61e 	bne	fp,r21,80640c <_dtoa_r+0x5d8>
  8064b4:	500d883a 	mov	r6,r10
  8064b8:	180f883a 	mov	r7,r3
  8064bc:	5009883a 	mov	r4,r10
  8064c0:	180b883a 	mov	r5,r3
  8064c4:	08028cc0 	call	8028cc <__adddf3>
  8064c8:	100d883a 	mov	r6,r2
  8064cc:	9009883a 	mov	r4,r18
  8064d0:	980b883a 	mov	r5,r19
  8064d4:	180f883a 	mov	r7,r3
  8064d8:	1021883a 	mov	r16,r2
  8064dc:	1823883a 	mov	r17,r3
  8064e0:	0802f5c0 	call	802f5c <__ltdf2>
  8064e4:	10000816 	blt	r2,zero,806508 <_dtoa_r+0x6d4>
  8064e8:	980b883a 	mov	r5,r19
  8064ec:	800d883a 	mov	r6,r16
  8064f0:	880f883a 	mov	r7,r17
  8064f4:	9009883a 	mov	r4,r18
  8064f8:	080b8880 	call	80b888 <__eqdf2>
  8064fc:	1000171e 	bne	r2,zero,80655c <_dtoa_r+0x728>
  806500:	a080004c 	andi	r2,r20,1
  806504:	10001526 	beq	r2,zero,80655c <_dtoa_r+0x728>
  806508:	d8800d17 	ldw	r2,52(sp)
  80650c:	d8800415 	stw	r2,16(sp)
  806510:	e009883a 	mov	r4,fp
  806514:	213fffc4 	addi	r4,r4,-1
  806518:	20c00007 	ldb	r3,0(r4)
  80651c:	00800e44 	movi	r2,57
  806520:	1880081e 	bne	r3,r2,806544 <_dtoa_r+0x710>
  806524:	d8800517 	ldw	r2,20(sp)
  806528:	113ffa1e 	bne	r2,r4,806514 <_dtoa_r+0x6e0>
  80652c:	d8c00417 	ldw	r3,16(sp)
  806530:	d9800517 	ldw	r6,20(sp)
  806534:	00800c04 	movi	r2,48
  806538:	18c00044 	addi	r3,r3,1
  80653c:	d8c00415 	stw	r3,16(sp)
  806540:	30800005 	stb	r2,0(r6)
  806544:	20800003 	ldbu	r2,0(r4)
  806548:	d8c00417 	ldw	r3,16(sp)
  80654c:	27000044 	addi	fp,r4,1
  806550:	10800044 	addi	r2,r2,1
  806554:	d8c00d15 	stw	r3,52(sp)
  806558:	20800005 	stb	r2,0(r4)
  80655c:	d9001617 	ldw	r4,88(sp)
  806560:	d9400717 	ldw	r5,28(sp)
  806564:	0808fc80 	call	808fc8 <_Bfree>
  806568:	e0000005 	stb	zero,0(fp)
  80656c:	d9800d17 	ldw	r6,52(sp)
  806570:	d8c02717 	ldw	r3,156(sp)
  806574:	d9002917 	ldw	r4,164(sp)
  806578:	30800044 	addi	r2,r6,1
  80657c:	18800015 	stw	r2,0(r3)
  806580:	20029c26 	beq	r4,zero,806ff4 <_dtoa_r+0x11c0>
  806584:	d8c00517 	ldw	r3,20(sp)
  806588:	27000015 	stw	fp,0(r4)
  80658c:	003e5d06 	br	805f04 <_dtoa_r+0xd0>
  806590:	d9800d17 	ldw	r6,52(sp)
  806594:	00c020b4 	movhi	r3,130
  806598:	18f18f04 	addi	r3,r3,-14788
  80659c:	d9001217 	ldw	r4,72(sp)
  8065a0:	300490fa 	slli	r2,r6,3
  8065a4:	d9401317 	ldw	r5,76(sp)
  8065a8:	10c5883a 	add	r2,r2,r3
  8065ac:	12000017 	ldw	r8,0(r2)
  8065b0:	12400117 	ldw	r9,4(r2)
  8065b4:	400d883a 	mov	r6,r8
  8065b8:	480f883a 	mov	r7,r9
  8065bc:	0802f5c0 	call	802f5c <__ltdf2>
  8065c0:	1000030e 	bge	r2,zero,8065d0 <_dtoa_r+0x79c>
  8065c4:	d8800d17 	ldw	r2,52(sp)
  8065c8:	10bfffc4 	addi	r2,r2,-1
  8065cc:	d8800d15 	stw	r2,52(sp)
  8065d0:	d8000c15 	stw	zero,48(sp)
  8065d4:	003ea806 	br	806078 <_dtoa_r+0x244>
  8065d8:	d9000b17 	ldw	r4,44(sp)
  8065dc:	202cc03a 	cmpne	r22,r4,zero
  8065e0:	b000c71e 	bne	r22,zero,806900 <_dtoa_r+0xacc>
  8065e4:	dc001117 	ldw	r16,68(sp)
  8065e8:	dc801017 	ldw	r18,64(sp)
  8065ec:	0027883a 	mov	r19,zero
  8065f0:	04000b0e 	bge	zero,r16,806620 <_dtoa_r+0x7ec>
  8065f4:	d8c00a17 	ldw	r3,40(sp)
  8065f8:	00c0090e 	bge	zero,r3,806620 <_dtoa_r+0x7ec>
  8065fc:	8005883a 	mov	r2,r16
  806600:	1c011316 	blt	r3,r16,806a50 <_dtoa_r+0xc1c>
  806604:	d9000a17 	ldw	r4,40(sp)
  806608:	d9801117 	ldw	r6,68(sp)
  80660c:	80a1c83a 	sub	r16,r16,r2
  806610:	2089c83a 	sub	r4,r4,r2
  806614:	308dc83a 	sub	r6,r6,r2
  806618:	d9000a15 	stw	r4,40(sp)
  80661c:	d9801115 	stw	r6,68(sp)
  806620:	d8801017 	ldw	r2,64(sp)
  806624:	0080150e 	bge	zero,r2,80667c <_dtoa_r+0x848>
  806628:	d8c00b17 	ldw	r3,44(sp)
  80662c:	1805003a 	cmpeq	r2,r3,zero
  806630:	1001c91e 	bne	r2,zero,806d58 <_dtoa_r+0xf24>
  806634:	04800e0e 	bge	zero,r18,806670 <_dtoa_r+0x83c>
  806638:	d9001617 	ldw	r4,88(sp)
  80663c:	980b883a 	mov	r5,r19
  806640:	900d883a 	mov	r6,r18
  806644:	0809d7c0 	call	809d7c <__pow5mult>
  806648:	d9001617 	ldw	r4,88(sp)
  80664c:	d9800717 	ldw	r6,28(sp)
  806650:	100b883a 	mov	r5,r2
  806654:	1027883a 	mov	r19,r2
  806658:	0809a580 	call	809a58 <__multiply>
  80665c:	d9001617 	ldw	r4,88(sp)
  806660:	d9400717 	ldw	r5,28(sp)
  806664:	1023883a 	mov	r17,r2
  806668:	0808fc80 	call	808fc8 <_Bfree>
  80666c:	dc400715 	stw	r17,28(sp)
  806670:	d9001017 	ldw	r4,64(sp)
  806674:	248dc83a 	sub	r6,r4,r18
  806678:	30010e1e 	bne	r6,zero,806ab4 <_dtoa_r+0xc80>
  80667c:	d9001617 	ldw	r4,88(sp)
  806680:	04400044 	movi	r17,1
  806684:	880b883a 	mov	r5,r17
  806688:	0809c400 	call	809c40 <__i2b>
  80668c:	d9800917 	ldw	r6,36(sp)
  806690:	1025883a 	mov	r18,r2
  806694:	0180040e 	bge	zero,r6,8066a8 <_dtoa_r+0x874>
  806698:	d9001617 	ldw	r4,88(sp)
  80669c:	100b883a 	mov	r5,r2
  8066a0:	0809d7c0 	call	809d7c <__pow5mult>
  8066a4:	1025883a 	mov	r18,r2
  8066a8:	d8801717 	ldw	r2,92(sp)
  8066ac:	8880f30e 	bge	r17,r2,806a7c <_dtoa_r+0xc48>
  8066b0:	0023883a 	mov	r17,zero
  8066b4:	d9800917 	ldw	r6,36(sp)
  8066b8:	30019e1e 	bne	r6,zero,806d34 <_dtoa_r+0xf00>
  8066bc:	00c00044 	movi	r3,1
  8066c0:	d9000a17 	ldw	r4,40(sp)
  8066c4:	20c5883a 	add	r2,r4,r3
  8066c8:	10c007cc 	andi	r3,r2,31
  8066cc:	1800841e 	bne	r3,zero,8068e0 <_dtoa_r+0xaac>
  8066d0:	00800704 	movi	r2,28
  8066d4:	d9000a17 	ldw	r4,40(sp)
  8066d8:	d9801117 	ldw	r6,68(sp)
  8066dc:	80a1883a 	add	r16,r16,r2
  8066e0:	2089883a 	add	r4,r4,r2
  8066e4:	308d883a 	add	r6,r6,r2
  8066e8:	d9000a15 	stw	r4,40(sp)
  8066ec:	d9801115 	stw	r6,68(sp)
  8066f0:	d8801117 	ldw	r2,68(sp)
  8066f4:	0080050e 	bge	zero,r2,80670c <_dtoa_r+0x8d8>
  8066f8:	d9400717 	ldw	r5,28(sp)
  8066fc:	d9001617 	ldw	r4,88(sp)
  806700:	100d883a 	mov	r6,r2
  806704:	080990c0 	call	80990c <__lshift>
  806708:	d8800715 	stw	r2,28(sp)
  80670c:	d8c00a17 	ldw	r3,40(sp)
  806710:	00c0050e 	bge	zero,r3,806728 <_dtoa_r+0x8f4>
  806714:	d9001617 	ldw	r4,88(sp)
  806718:	900b883a 	mov	r5,r18
  80671c:	180d883a 	mov	r6,r3
  806720:	080990c0 	call	80990c <__lshift>
  806724:	1025883a 	mov	r18,r2
  806728:	d9000c17 	ldw	r4,48(sp)
  80672c:	2005003a 	cmpeq	r2,r4,zero
  806730:	10016f26 	beq	r2,zero,806cf0 <_dtoa_r+0xebc>
  806734:	d9000f17 	ldw	r4,60(sp)
  806738:	0102170e 	bge	zero,r4,806f98 <_dtoa_r+0x1164>
  80673c:	d9800b17 	ldw	r6,44(sp)
  806740:	3005003a 	cmpeq	r2,r6,zero
  806744:	1000881e 	bne	r2,zero,806968 <_dtoa_r+0xb34>
  806748:	0400050e 	bge	zero,r16,806760 <_dtoa_r+0x92c>
  80674c:	d9001617 	ldw	r4,88(sp)
  806750:	980b883a 	mov	r5,r19
  806754:	800d883a 	mov	r6,r16
  806758:	080990c0 	call	80990c <__lshift>
  80675c:	1027883a 	mov	r19,r2
  806760:	8804c03a 	cmpne	r2,r17,zero
  806764:	1002541e 	bne	r2,zero,8070b8 <_dtoa_r+0x1284>
  806768:	980b883a 	mov	r5,r19
  80676c:	dd800517 	ldw	r22,20(sp)
  806770:	dcc00615 	stw	r19,24(sp)
  806774:	a700004c 	andi	fp,r20,1
  806778:	2827883a 	mov	r19,r5
  80677c:	d9000717 	ldw	r4,28(sp)
  806780:	900b883a 	mov	r5,r18
  806784:	0805c1c0 	call	805c1c <quorem>
  806788:	d9000717 	ldw	r4,28(sp)
  80678c:	d9400617 	ldw	r5,24(sp)
  806790:	1023883a 	mov	r17,r2
  806794:	8dc00c04 	addi	r23,r17,48
  806798:	08091240 	call	809124 <__mcmp>
  80679c:	d9001617 	ldw	r4,88(sp)
  8067a0:	900b883a 	mov	r5,r18
  8067a4:	980d883a 	mov	r6,r19
  8067a8:	1029883a 	mov	r20,r2
  8067ac:	08097800 	call	809780 <__mdiff>
  8067b0:	102b883a 	mov	r21,r2
  8067b4:	10800317 	ldw	r2,12(r2)
  8067b8:	1001281e 	bne	r2,zero,806c5c <_dtoa_r+0xe28>
  8067bc:	d9000717 	ldw	r4,28(sp)
  8067c0:	a80b883a 	mov	r5,r21
  8067c4:	08091240 	call	809124 <__mcmp>
  8067c8:	d9001617 	ldw	r4,88(sp)
  8067cc:	1021883a 	mov	r16,r2
  8067d0:	a80b883a 	mov	r5,r21
  8067d4:	0808fc80 	call	808fc8 <_Bfree>
  8067d8:	8000041e 	bne	r16,zero,8067ec <_dtoa_r+0x9b8>
  8067dc:	d8801717 	ldw	r2,92(sp)
  8067e0:	1000021e 	bne	r2,zero,8067ec <_dtoa_r+0x9b8>
  8067e4:	e004c03a 	cmpne	r2,fp,zero
  8067e8:	10011726 	beq	r2,zero,806c48 <_dtoa_r+0xe14>
  8067ec:	a0010616 	blt	r20,zero,806c08 <_dtoa_r+0xdd4>
  8067f0:	a000041e 	bne	r20,zero,806804 <_dtoa_r+0x9d0>
  8067f4:	d8c01717 	ldw	r3,92(sp)
  8067f8:	1800021e 	bne	r3,zero,806804 <_dtoa_r+0x9d0>
  8067fc:	e004c03a 	cmpne	r2,fp,zero
  806800:	10010126 	beq	r2,zero,806c08 <_dtoa_r+0xdd4>
  806804:	04023d16 	blt	zero,r16,8070fc <_dtoa_r+0x12c8>
  806808:	b5c00005 	stb	r23,0(r22)
  80680c:	d9800517 	ldw	r6,20(sp)
  806810:	d9000f17 	ldw	r4,60(sp)
  806814:	b5800044 	addi	r22,r22,1
  806818:	3105883a 	add	r2,r6,r4
  80681c:	b0806526 	beq	r22,r2,8069b4 <_dtoa_r+0xb80>
  806820:	d9400717 	ldw	r5,28(sp)
  806824:	d9001617 	ldw	r4,88(sp)
  806828:	01800284 	movi	r6,10
  80682c:	000f883a 	mov	r7,zero
  806830:	0809c7c0 	call	809c7c <__multadd>
  806834:	d8800715 	stw	r2,28(sp)
  806838:	d8800617 	ldw	r2,24(sp)
  80683c:	14c10c26 	beq	r2,r19,806c70 <_dtoa_r+0xe3c>
  806840:	d9400617 	ldw	r5,24(sp)
  806844:	d9001617 	ldw	r4,88(sp)
  806848:	01800284 	movi	r6,10
  80684c:	000f883a 	mov	r7,zero
  806850:	0809c7c0 	call	809c7c <__multadd>
  806854:	d9001617 	ldw	r4,88(sp)
  806858:	980b883a 	mov	r5,r19
  80685c:	01800284 	movi	r6,10
  806860:	000f883a 	mov	r7,zero
  806864:	d8800615 	stw	r2,24(sp)
  806868:	0809c7c0 	call	809c7c <__multadd>
  80686c:	1027883a 	mov	r19,r2
  806870:	003fc206 	br	80677c <_dtoa_r+0x948>
  806874:	2445c83a 	sub	r2,r4,r17
  806878:	a088983a 	sll	r4,r20,r2
  80687c:	003e4b06 	br	8061ac <_dtoa_r+0x378>
  806880:	01bfffc4 	movi	r6,-1
  806884:	00800044 	movi	r2,1
  806888:	d9800e15 	stw	r6,56(sp)
  80688c:	d9800f15 	stw	r6,60(sp)
  806890:	d8800b15 	stw	r2,44(sp)
  806894:	d8c01617 	ldw	r3,88(sp)
  806898:	008005c4 	movi	r2,23
  80689c:	18001115 	stw	zero,68(r3)
  8068a0:	1580082e 	bgeu	r2,r22,8068c4 <_dtoa_r+0xa90>
  8068a4:	00c00104 	movi	r3,4
  8068a8:	0009883a 	mov	r4,zero
  8068ac:	18c7883a 	add	r3,r3,r3
  8068b0:	18800504 	addi	r2,r3,20
  8068b4:	21000044 	addi	r4,r4,1
  8068b8:	b0bffc2e 	bgeu	r22,r2,8068ac <_dtoa_r+0xa78>
  8068bc:	d9801617 	ldw	r6,88(sp)
  8068c0:	31001115 	stw	r4,68(r6)
  8068c4:	dc000f17 	ldw	r16,60(sp)
  8068c8:	003e4b06 	br	8061f8 <_dtoa_r+0x3c4>
  8068cc:	d9801717 	ldw	r6,92(sp)
  8068d0:	0023883a 	mov	r17,zero
  8068d4:	31bfff04 	addi	r6,r6,-4
  8068d8:	d9801715 	stw	r6,92(sp)
  8068dc:	003df806 	br	8060c0 <_dtoa_r+0x28c>
  8068e0:	00800804 	movi	r2,32
  8068e4:	10c9c83a 	sub	r4,r2,r3
  8068e8:	00c00104 	movi	r3,4
  8068ec:	19005a16 	blt	r3,r4,806a58 <_dtoa_r+0xc24>
  8068f0:	008000c4 	movi	r2,3
  8068f4:	113f7e16 	blt	r2,r4,8066f0 <_dtoa_r+0x8bc>
  8068f8:	20800704 	addi	r2,r4,28
  8068fc:	003f7506 	br	8066d4 <_dtoa_r+0x8a0>
  806900:	d9801717 	ldw	r6,92(sp)
  806904:	00800044 	movi	r2,1
  806908:	1180a10e 	bge	r2,r6,806b90 <_dtoa_r+0xd5c>
  80690c:	d9800f17 	ldw	r6,60(sp)
  806910:	d8c01017 	ldw	r3,64(sp)
  806914:	30bfffc4 	addi	r2,r6,-1
  806918:	1881c616 	blt	r3,r2,807034 <_dtoa_r+0x1200>
  80691c:	18a5c83a 	sub	r18,r3,r2
  806920:	d8800f17 	ldw	r2,60(sp)
  806924:	10026216 	blt	r2,zero,8072b0 <_dtoa_r+0x147c>
  806928:	dc001117 	ldw	r16,68(sp)
  80692c:	1007883a 	mov	r3,r2
  806930:	d9800a17 	ldw	r6,40(sp)
  806934:	d8801117 	ldw	r2,68(sp)
  806938:	d9001617 	ldw	r4,88(sp)
  80693c:	30cd883a 	add	r6,r6,r3
  806940:	10c5883a 	add	r2,r2,r3
  806944:	01400044 	movi	r5,1
  806948:	d9800a15 	stw	r6,40(sp)
  80694c:	d8801115 	stw	r2,68(sp)
  806950:	0809c400 	call	809c40 <__i2b>
  806954:	1027883a 	mov	r19,r2
  806958:	003f2506 	br	8065f0 <_dtoa_r+0x7bc>
  80695c:	00c020b4 	movhi	r3,130
  806960:	18f17204 	addi	r3,r3,-14904
  806964:	003d6706 	br	805f04 <_dtoa_r+0xd0>
  806968:	dd800517 	ldw	r22,20(sp)
  80696c:	04000044 	movi	r16,1
  806970:	00000706 	br	806990 <_dtoa_r+0xb5c>
  806974:	d9400717 	ldw	r5,28(sp)
  806978:	d9001617 	ldw	r4,88(sp)
  80697c:	01800284 	movi	r6,10
  806980:	000f883a 	mov	r7,zero
  806984:	0809c7c0 	call	809c7c <__multadd>
  806988:	d8800715 	stw	r2,28(sp)
  80698c:	84000044 	addi	r16,r16,1
  806990:	d9000717 	ldw	r4,28(sp)
  806994:	900b883a 	mov	r5,r18
  806998:	0805c1c0 	call	805c1c <quorem>
  80699c:	15c00c04 	addi	r23,r2,48
  8069a0:	b5c00005 	stb	r23,0(r22)
  8069a4:	d8c00f17 	ldw	r3,60(sp)
  8069a8:	b5800044 	addi	r22,r22,1
  8069ac:	80fff116 	blt	r16,r3,806974 <_dtoa_r+0xb40>
  8069b0:	d8000615 	stw	zero,24(sp)
  8069b4:	d9400717 	ldw	r5,28(sp)
  8069b8:	d9001617 	ldw	r4,88(sp)
  8069bc:	01800044 	movi	r6,1
  8069c0:	080990c0 	call	80990c <__lshift>
  8069c4:	1009883a 	mov	r4,r2
  8069c8:	900b883a 	mov	r5,r18
  8069cc:	d8800715 	stw	r2,28(sp)
  8069d0:	08091240 	call	809124 <__mcmp>
  8069d4:	00803c0e 	bge	zero,r2,806ac8 <_dtoa_r+0xc94>
  8069d8:	b009883a 	mov	r4,r22
  8069dc:	213fffc4 	addi	r4,r4,-1
  8069e0:	21400003 	ldbu	r5,0(r4)
  8069e4:	00800e44 	movi	r2,57
  8069e8:	28c03fcc 	andi	r3,r5,255
  8069ec:	18c0201c 	xori	r3,r3,128
  8069f0:	18ffe004 	addi	r3,r3,-128
  8069f4:	1881981e 	bne	r3,r2,807058 <_dtoa_r+0x1224>
  8069f8:	d9800517 	ldw	r6,20(sp)
  8069fc:	21bff71e 	bne	r4,r6,8069dc <_dtoa_r+0xba8>
  806a00:	d8800d17 	ldw	r2,52(sp)
  806a04:	37000044 	addi	fp,r6,1
  806a08:	10800044 	addi	r2,r2,1
  806a0c:	d8800d15 	stw	r2,52(sp)
  806a10:	00800c44 	movi	r2,49
  806a14:	30800005 	stb	r2,0(r6)
  806a18:	d9001617 	ldw	r4,88(sp)
  806a1c:	900b883a 	mov	r5,r18
  806a20:	0808fc80 	call	808fc8 <_Bfree>
  806a24:	983ecd26 	beq	r19,zero,80655c <_dtoa_r+0x728>
  806a28:	d8c00617 	ldw	r3,24(sp)
  806a2c:	18000426 	beq	r3,zero,806a40 <_dtoa_r+0xc0c>
  806a30:	1cc00326 	beq	r3,r19,806a40 <_dtoa_r+0xc0c>
  806a34:	d9001617 	ldw	r4,88(sp)
  806a38:	180b883a 	mov	r5,r3
  806a3c:	0808fc80 	call	808fc8 <_Bfree>
  806a40:	d9001617 	ldw	r4,88(sp)
  806a44:	980b883a 	mov	r5,r19
  806a48:	0808fc80 	call	808fc8 <_Bfree>
  806a4c:	003ec306 	br	80655c <_dtoa_r+0x728>
  806a50:	1805883a 	mov	r2,r3
  806a54:	003eeb06 	br	806604 <_dtoa_r+0x7d0>
  806a58:	d9800a17 	ldw	r6,40(sp)
  806a5c:	d8c01117 	ldw	r3,68(sp)
  806a60:	20bfff04 	addi	r2,r4,-4
  806a64:	308d883a 	add	r6,r6,r2
  806a68:	1887883a 	add	r3,r3,r2
  806a6c:	80a1883a 	add	r16,r16,r2
  806a70:	d9800a15 	stw	r6,40(sp)
  806a74:	d8c01115 	stw	r3,68(sp)
  806a78:	003f1d06 	br	8066f0 <_dtoa_r+0x8bc>
  806a7c:	a03f0c1e 	bne	r20,zero,8066b0 <_dtoa_r+0x87c>
  806a80:	00800434 	movhi	r2,16
  806a84:	10bfffc4 	addi	r2,r2,-1
  806a88:	a884703a 	and	r2,r21,r2
  806a8c:	103f081e 	bne	r2,zero,8066b0 <_dtoa_r+0x87c>
  806a90:	a89ffc2c 	andhi	r2,r21,32752
  806a94:	103f0626 	beq	r2,zero,8066b0 <_dtoa_r+0x87c>
  806a98:	d8c01117 	ldw	r3,68(sp)
  806a9c:	d9000a17 	ldw	r4,40(sp)
  806aa0:	18c00044 	addi	r3,r3,1
  806aa4:	21000044 	addi	r4,r4,1
  806aa8:	d8c01115 	stw	r3,68(sp)
  806aac:	d9000a15 	stw	r4,40(sp)
  806ab0:	003f0006 	br	8066b4 <_dtoa_r+0x880>
  806ab4:	d9400717 	ldw	r5,28(sp)
  806ab8:	d9001617 	ldw	r4,88(sp)
  806abc:	0809d7c0 	call	809d7c <__pow5mult>
  806ac0:	d8800715 	stw	r2,28(sp)
  806ac4:	003eed06 	br	80667c <_dtoa_r+0x848>
  806ac8:	1000021e 	bne	r2,zero,806ad4 <_dtoa_r+0xca0>
  806acc:	b880004c 	andi	r2,r23,1
  806ad0:	103fc11e 	bne	r2,zero,8069d8 <_dtoa_r+0xba4>
  806ad4:	b5bfffc4 	addi	r22,r22,-1
  806ad8:	b0c00007 	ldb	r3,0(r22)
  806adc:	00800c04 	movi	r2,48
  806ae0:	18bffc26 	beq	r3,r2,806ad4 <_dtoa_r+0xca0>
  806ae4:	b7000044 	addi	fp,r22,1
  806ae8:	003fcb06 	br	806a18 <_dtoa_r+0xbe4>
  806aec:	d9800d17 	ldw	r6,52(sp)
  806af0:	018fc83a 	sub	r7,zero,r6
  806af4:	3801f726 	beq	r7,zero,8072d4 <_dtoa_r+0x14a0>
  806af8:	398003cc 	andi	r6,r7,15
  806afc:	300c90fa 	slli	r6,r6,3
  806b00:	014020b4 	movhi	r5,130
  806b04:	29718f04 	addi	r5,r5,-14788
  806b08:	d9001217 	ldw	r4,72(sp)
  806b0c:	314d883a 	add	r6,r6,r5
  806b10:	30c00117 	ldw	r3,4(r6)
  806b14:	30800017 	ldw	r2,0(r6)
  806b18:	d9401317 	ldw	r5,76(sp)
  806b1c:	3821d13a 	srai	r16,r7,4
  806b20:	100d883a 	mov	r6,r2
  806b24:	180f883a 	mov	r7,r3
  806b28:	08029400 	call	802940 <__muldf3>
  806b2c:	1011883a 	mov	r8,r2
  806b30:	1813883a 	mov	r9,r3
  806b34:	1029883a 	mov	r20,r2
  806b38:	182b883a 	mov	r21,r3
  806b3c:	8001e526 	beq	r16,zero,8072d4 <_dtoa_r+0x14a0>
  806b40:	05800084 	movi	r22,2
  806b44:	044020b4 	movhi	r17,130
  806b48:	8c71c104 	addi	r17,r17,-14588
  806b4c:	8080004c 	andi	r2,r16,1
  806b50:	1005003a 	cmpeq	r2,r2,zero
  806b54:	1000081e 	bne	r2,zero,806b78 <_dtoa_r+0xd44>
  806b58:	89800017 	ldw	r6,0(r17)
  806b5c:	89c00117 	ldw	r7,4(r17)
  806b60:	480b883a 	mov	r5,r9
  806b64:	4009883a 	mov	r4,r8
  806b68:	08029400 	call	802940 <__muldf3>
  806b6c:	1011883a 	mov	r8,r2
  806b70:	b5800044 	addi	r22,r22,1
  806b74:	1813883a 	mov	r9,r3
  806b78:	8021d07a 	srai	r16,r16,1
  806b7c:	8c400204 	addi	r17,r17,8
  806b80:	803ff21e 	bne	r16,zero,806b4c <_dtoa_r+0xd18>
  806b84:	4029883a 	mov	r20,r8
  806b88:	482b883a 	mov	r21,r9
  806b8c:	003dca06 	br	8062b8 <_dtoa_r+0x484>
  806b90:	d9000817 	ldw	r4,32(sp)
  806b94:	2005003a 	cmpeq	r2,r4,zero
  806b98:	1001f61e 	bne	r2,zero,807374 <_dtoa_r+0x1540>
  806b9c:	dc001117 	ldw	r16,68(sp)
  806ba0:	dc801017 	ldw	r18,64(sp)
  806ba4:	18c10cc4 	addi	r3,r3,1075
  806ba8:	003f6106 	br	806930 <_dtoa_r+0xafc>
  806bac:	d8000b15 	stw	zero,44(sp)
  806bb0:	d9802617 	ldw	r6,152(sp)
  806bb4:	d8c00d17 	ldw	r3,52(sp)
  806bb8:	30800044 	addi	r2,r6,1
  806bbc:	18ad883a 	add	r22,r3,r2
  806bc0:	b13fffc4 	addi	r4,r22,-1
  806bc4:	d9000e15 	stw	r4,56(sp)
  806bc8:	0581f60e 	bge	zero,r22,8073a4 <_dtoa_r+0x1570>
  806bcc:	dd800f15 	stw	r22,60(sp)
  806bd0:	003f3006 	br	806894 <_dtoa_r+0xa60>
  806bd4:	d8000b15 	stw	zero,44(sp)
  806bd8:	d9002617 	ldw	r4,152(sp)
  806bdc:	0101eb0e 	bge	zero,r4,80738c <_dtoa_r+0x1558>
  806be0:	202d883a 	mov	r22,r4
  806be4:	d9000e15 	stw	r4,56(sp)
  806be8:	d9000f15 	stw	r4,60(sp)
  806bec:	003f2906 	br	806894 <_dtoa_r+0xa60>
  806bf0:	01800044 	movi	r6,1
  806bf4:	d9800b15 	stw	r6,44(sp)
  806bf8:	003ff706 	br	806bd8 <_dtoa_r+0xda4>
  806bfc:	01000044 	movi	r4,1
  806c00:	d9000b15 	stw	r4,44(sp)
  806c04:	003fea06 	br	806bb0 <_dtoa_r+0xd7c>
  806c08:	04000c0e 	bge	zero,r16,806c3c <_dtoa_r+0xe08>
  806c0c:	d9400717 	ldw	r5,28(sp)
  806c10:	d9001617 	ldw	r4,88(sp)
  806c14:	01800044 	movi	r6,1
  806c18:	080990c0 	call	80990c <__lshift>
  806c1c:	1009883a 	mov	r4,r2
  806c20:	900b883a 	mov	r5,r18
  806c24:	d8800715 	stw	r2,28(sp)
  806c28:	08091240 	call	809124 <__mcmp>
  806c2c:	0081e00e 	bge	zero,r2,8073b0 <_dtoa_r+0x157c>
  806c30:	bdc00044 	addi	r23,r23,1
  806c34:	00800e84 	movi	r2,58
  806c38:	b881a226 	beq	r23,r2,8072c4 <_dtoa_r+0x1490>
  806c3c:	b7000044 	addi	fp,r22,1
  806c40:	b5c00005 	stb	r23,0(r22)
  806c44:	003f7406 	br	806a18 <_dtoa_r+0xbe4>
  806c48:	00800e44 	movi	r2,57
  806c4c:	b8819d26 	beq	r23,r2,8072c4 <_dtoa_r+0x1490>
  806c50:	053ffa0e 	bge	zero,r20,806c3c <_dtoa_r+0xe08>
  806c54:	8dc00c44 	addi	r23,r17,49
  806c58:	003ff806 	br	806c3c <_dtoa_r+0xe08>
  806c5c:	d9001617 	ldw	r4,88(sp)
  806c60:	a80b883a 	mov	r5,r21
  806c64:	04000044 	movi	r16,1
  806c68:	0808fc80 	call	808fc8 <_Bfree>
  806c6c:	003edf06 	br	8067ec <_dtoa_r+0x9b8>
  806c70:	d9001617 	ldw	r4,88(sp)
  806c74:	980b883a 	mov	r5,r19
  806c78:	01800284 	movi	r6,10
  806c7c:	000f883a 	mov	r7,zero
  806c80:	0809c7c0 	call	809c7c <__multadd>
  806c84:	1027883a 	mov	r19,r2
  806c88:	d8800615 	stw	r2,24(sp)
  806c8c:	003ebb06 	br	80677c <_dtoa_r+0x948>
  806c90:	d9801117 	ldw	r6,68(sp)
  806c94:	d8800d17 	ldw	r2,52(sp)
  806c98:	d8000915 	stw	zero,36(sp)
  806c9c:	308dc83a 	sub	r6,r6,r2
  806ca0:	0087c83a 	sub	r3,zero,r2
  806ca4:	d9801115 	stw	r6,68(sp)
  806ca8:	d8c01015 	stw	r3,64(sp)
  806cac:	003cfe06 	br	8060a8 <_dtoa_r+0x274>
  806cb0:	018dc83a 	sub	r6,zero,r6
  806cb4:	d9801115 	stw	r6,68(sp)
  806cb8:	d8000a15 	stw	zero,40(sp)
  806cbc:	003cf306 	br	80608c <_dtoa_r+0x258>
  806cc0:	d9000d17 	ldw	r4,52(sp)
  806cc4:	0802fe40 	call	802fe4 <__floatsidf>
  806cc8:	880b883a 	mov	r5,r17
  806ccc:	8009883a 	mov	r4,r16
  806cd0:	180f883a 	mov	r7,r3
  806cd4:	100d883a 	mov	r6,r2
  806cd8:	080b9100 	call	80b910 <__nedf2>
  806cdc:	103ce126 	beq	r2,zero,806064 <_dtoa_r+0x230>
  806ce0:	d9800d17 	ldw	r6,52(sp)
  806ce4:	31bfffc4 	addi	r6,r6,-1
  806ce8:	d9800d15 	stw	r6,52(sp)
  806cec:	003cdd06 	br	806064 <_dtoa_r+0x230>
  806cf0:	d9000717 	ldw	r4,28(sp)
  806cf4:	900b883a 	mov	r5,r18
  806cf8:	08091240 	call	809124 <__mcmp>
  806cfc:	103e8d0e 	bge	r2,zero,806734 <_dtoa_r+0x900>
  806d00:	d9400717 	ldw	r5,28(sp)
  806d04:	d9001617 	ldw	r4,88(sp)
  806d08:	01800284 	movi	r6,10
  806d0c:	000f883a 	mov	r7,zero
  806d10:	0809c7c0 	call	809c7c <__multadd>
  806d14:	d9800d17 	ldw	r6,52(sp)
  806d18:	d8800715 	stw	r2,28(sp)
  806d1c:	31bfffc4 	addi	r6,r6,-1
  806d20:	d9800d15 	stw	r6,52(sp)
  806d24:	b001a71e 	bne	r22,zero,8073c4 <_dtoa_r+0x1590>
  806d28:	d8800e17 	ldw	r2,56(sp)
  806d2c:	d8800f15 	stw	r2,60(sp)
  806d30:	003e8006 	br	806734 <_dtoa_r+0x900>
  806d34:	90800417 	ldw	r2,16(r18)
  806d38:	1085883a 	add	r2,r2,r2
  806d3c:	1085883a 	add	r2,r2,r2
  806d40:	1485883a 	add	r2,r2,r18
  806d44:	11000417 	ldw	r4,16(r2)
  806d48:	0808ff00 	call	808ff0 <__hi0bits>
  806d4c:	00c00804 	movi	r3,32
  806d50:	1887c83a 	sub	r3,r3,r2
  806d54:	003e5a06 	br	8066c0 <_dtoa_r+0x88c>
  806d58:	d9400717 	ldw	r5,28(sp)
  806d5c:	d9801017 	ldw	r6,64(sp)
  806d60:	d9001617 	ldw	r4,88(sp)
  806d64:	0809d7c0 	call	809d7c <__pow5mult>
  806d68:	d8800715 	stw	r2,28(sp)
  806d6c:	003e4306 	br	80667c <_dtoa_r+0x848>
  806d70:	d9800f17 	ldw	r6,60(sp)
  806d74:	d8800d17 	ldw	r2,52(sp)
  806d78:	d9800315 	stw	r6,12(sp)
  806d7c:	d8800415 	stw	r2,16(sp)
  806d80:	d8c00b17 	ldw	r3,44(sp)
  806d84:	1805003a 	cmpeq	r2,r3,zero
  806d88:	1000e21e 	bne	r2,zero,807114 <_dtoa_r+0x12e0>
  806d8c:	d9000317 	ldw	r4,12(sp)
  806d90:	0005883a 	mov	r2,zero
  806d94:	00cff834 	movhi	r3,16352
  806d98:	200c90fa 	slli	r6,r4,3
  806d9c:	010020b4 	movhi	r4,130
  806da0:	21318f04 	addi	r4,r4,-14788
  806da4:	180b883a 	mov	r5,r3
  806da8:	310d883a 	add	r6,r6,r4
  806dac:	327fff17 	ldw	r9,-4(r6)
  806db0:	323ffe17 	ldw	r8,-8(r6)
  806db4:	1009883a 	mov	r4,r2
  806db8:	480f883a 	mov	r7,r9
  806dbc:	400d883a 	mov	r6,r8
  806dc0:	0802d040 	call	802d04 <__divdf3>
  806dc4:	180b883a 	mov	r5,r3
  806dc8:	b00d883a 	mov	r6,r22
  806dcc:	b80f883a 	mov	r7,r23
  806dd0:	1009883a 	mov	r4,r2
  806dd4:	080284c0 	call	80284c <__subdf3>
  806dd8:	a80b883a 	mov	r5,r21
  806ddc:	a009883a 	mov	r4,r20
  806de0:	d8c01915 	stw	r3,100(sp)
  806de4:	d8801815 	stw	r2,96(sp)
  806de8:	08030dc0 	call	8030dc <__fixdfsi>
  806dec:	1009883a 	mov	r4,r2
  806df0:	1027883a 	mov	r19,r2
  806df4:	0802fe40 	call	802fe4 <__floatsidf>
  806df8:	a80b883a 	mov	r5,r21
  806dfc:	a009883a 	mov	r4,r20
  806e00:	180f883a 	mov	r7,r3
  806e04:	100d883a 	mov	r6,r2
  806e08:	080284c0 	call	80284c <__subdf3>
  806e0c:	d9801817 	ldw	r6,96(sp)
  806e10:	1823883a 	mov	r17,r3
  806e14:	d8801415 	stw	r2,80(sp)
  806e18:	302d883a 	mov	r22,r6
  806e1c:	d9800517 	ldw	r6,20(sp)
  806e20:	9cc00c04 	addi	r19,r19,48
  806e24:	dc401515 	stw	r17,84(sp)
  806e28:	d8c01917 	ldw	r3,100(sp)
  806e2c:	34c00005 	stb	r19,0(r6)
  806e30:	d8800517 	ldw	r2,20(sp)
  806e34:	d9401917 	ldw	r5,100(sp)
  806e38:	d9801417 	ldw	r6,80(sp)
  806e3c:	b009883a 	mov	r4,r22
  806e40:	880f883a 	mov	r7,r17
  806e44:	182f883a 	mov	r23,r3
  806e48:	17000044 	addi	fp,r2,1
  806e4c:	080b9980 	call	80b998 <__gtdf2>
  806e50:	00804e16 	blt	zero,r2,806f8c <_dtoa_r+0x1158>
  806e54:	d9801417 	ldw	r6,80(sp)
  806e58:	0005883a 	mov	r2,zero
  806e5c:	00cffc34 	movhi	r3,16368
  806e60:	180b883a 	mov	r5,r3
  806e64:	880f883a 	mov	r7,r17
  806e68:	1009883a 	mov	r4,r2
  806e6c:	080284c0 	call	80284c <__subdf3>
  806e70:	d9401917 	ldw	r5,100(sp)
  806e74:	180f883a 	mov	r7,r3
  806e78:	b009883a 	mov	r4,r22
  806e7c:	100d883a 	mov	r6,r2
  806e80:	080b9980 	call	80b998 <__gtdf2>
  806e84:	00bda216 	blt	zero,r2,806510 <_dtoa_r+0x6dc>
  806e88:	d8c00317 	ldw	r3,12(sp)
  806e8c:	00800044 	movi	r2,1
  806e90:	10c01216 	blt	r2,r3,806edc <_dtoa_r+0x10a8>
  806e94:	003d4506 	br	8063ac <_dtoa_r+0x578>
  806e98:	d9801417 	ldw	r6,80(sp)
  806e9c:	0005883a 	mov	r2,zero
  806ea0:	00cffc34 	movhi	r3,16368
  806ea4:	180b883a 	mov	r5,r3
  806ea8:	880f883a 	mov	r7,r17
  806eac:	1009883a 	mov	r4,r2
  806eb0:	080284c0 	call	80284c <__subdf3>
  806eb4:	d9c01b17 	ldw	r7,108(sp)
  806eb8:	180b883a 	mov	r5,r3
  806ebc:	1009883a 	mov	r4,r2
  806ec0:	b00d883a 	mov	r6,r22
  806ec4:	0802f5c0 	call	802f5c <__ltdf2>
  806ec8:	103d9116 	blt	r2,zero,806510 <_dtoa_r+0x6dc>
  806ecc:	d9800517 	ldw	r6,20(sp)
  806ed0:	d9000317 	ldw	r4,12(sp)
  806ed4:	3105883a 	add	r2,r6,r4
  806ed8:	e0bd3426 	beq	fp,r2,8063ac <_dtoa_r+0x578>
  806edc:	04500934 	movhi	r17,16420
  806ee0:	0021883a 	mov	r16,zero
  806ee4:	b80b883a 	mov	r5,r23
  806ee8:	b009883a 	mov	r4,r22
  806eec:	800d883a 	mov	r6,r16
  806ef0:	880f883a 	mov	r7,r17
  806ef4:	08029400 	call	802940 <__muldf3>
  806ef8:	d9401517 	ldw	r5,84(sp)
  806efc:	d9001417 	ldw	r4,80(sp)
  806f00:	880f883a 	mov	r7,r17
  806f04:	000d883a 	mov	r6,zero
  806f08:	d8801a15 	stw	r2,104(sp)
  806f0c:	d8c01b15 	stw	r3,108(sp)
  806f10:	08029400 	call	802940 <__muldf3>
  806f14:	180b883a 	mov	r5,r3
  806f18:	1009883a 	mov	r4,r2
  806f1c:	1823883a 	mov	r17,r3
  806f20:	1021883a 	mov	r16,r2
  806f24:	08030dc0 	call	8030dc <__fixdfsi>
  806f28:	1009883a 	mov	r4,r2
  806f2c:	102b883a 	mov	r21,r2
  806f30:	0802fe40 	call	802fe4 <__floatsidf>
  806f34:	880b883a 	mov	r5,r17
  806f38:	8009883a 	mov	r4,r16
  806f3c:	180f883a 	mov	r7,r3
  806f40:	100d883a 	mov	r6,r2
  806f44:	080284c0 	call	80284c <__subdf3>
  806f48:	1021883a 	mov	r16,r2
  806f4c:	d9001b17 	ldw	r4,108(sp)
  806f50:	1823883a 	mov	r17,r3
  806f54:	dc001415 	stw	r16,80(sp)
  806f58:	ad400c04 	addi	r21,r21,48
  806f5c:	dc401515 	stw	r17,84(sp)
  806f60:	d8801a17 	ldw	r2,104(sp)
  806f64:	e5400005 	stb	r21,0(fp)
  806f68:	202f883a 	mov	r23,r4
  806f6c:	d9c01b17 	ldw	r7,108(sp)
  806f70:	d9001417 	ldw	r4,80(sp)
  806f74:	880b883a 	mov	r5,r17
  806f78:	100d883a 	mov	r6,r2
  806f7c:	102d883a 	mov	r22,r2
  806f80:	e7000044 	addi	fp,fp,1
  806f84:	0802f5c0 	call	802f5c <__ltdf2>
  806f88:	103fc30e 	bge	r2,zero,806e98 <_dtoa_r+0x1064>
  806f8c:	d9000417 	ldw	r4,16(sp)
  806f90:	d9000d15 	stw	r4,52(sp)
  806f94:	003d7106 	br	80655c <_dtoa_r+0x728>
  806f98:	d9801717 	ldw	r6,92(sp)
  806f9c:	00800084 	movi	r2,2
  806fa0:	11bde60e 	bge	r2,r6,80673c <_dtoa_r+0x908>
  806fa4:	203cfb1e 	bne	r4,zero,806394 <_dtoa_r+0x560>
  806fa8:	d9001617 	ldw	r4,88(sp)
  806fac:	900b883a 	mov	r5,r18
  806fb0:	01800144 	movi	r6,5
  806fb4:	000f883a 	mov	r7,zero
  806fb8:	0809c7c0 	call	809c7c <__multadd>
  806fbc:	d9000717 	ldw	r4,28(sp)
  806fc0:	100b883a 	mov	r5,r2
  806fc4:	1025883a 	mov	r18,r2
  806fc8:	08091240 	call	809124 <__mcmp>
  806fcc:	00bcf10e 	bge	zero,r2,806394 <_dtoa_r+0x560>
  806fd0:	d8c00d17 	ldw	r3,52(sp)
  806fd4:	d9000517 	ldw	r4,20(sp)
  806fd8:	d8000615 	stw	zero,24(sp)
  806fdc:	18c00044 	addi	r3,r3,1
  806fe0:	d8c00d15 	stw	r3,52(sp)
  806fe4:	00800c44 	movi	r2,49
  806fe8:	27000044 	addi	fp,r4,1
  806fec:	20800005 	stb	r2,0(r4)
  806ff0:	003e8906 	br	806a18 <_dtoa_r+0xbe4>
  806ff4:	d8c00517 	ldw	r3,20(sp)
  806ff8:	003bc206 	br	805f04 <_dtoa_r+0xd0>
  806ffc:	018020b4 	movhi	r6,130
  807000:	31b1c104 	addi	r6,r6,-14588
  807004:	30c00917 	ldw	r3,36(r6)
  807008:	30800817 	ldw	r2,32(r6)
  80700c:	d9001217 	ldw	r4,72(sp)
  807010:	d9401317 	ldw	r5,76(sp)
  807014:	180f883a 	mov	r7,r3
  807018:	100d883a 	mov	r6,r2
  80701c:	0802d040 	call	802d04 <__divdf3>
  807020:	948003cc 	andi	r18,r18,15
  807024:	058000c4 	movi	r22,3
  807028:	1029883a 	mov	r20,r2
  80702c:	182b883a 	mov	r21,r3
  807030:	003c8906 	br	806258 <_dtoa_r+0x424>
  807034:	d9001017 	ldw	r4,64(sp)
  807038:	d9800917 	ldw	r6,36(sp)
  80703c:	0025883a 	mov	r18,zero
  807040:	1105c83a 	sub	r2,r2,r4
  807044:	2089883a 	add	r4,r4,r2
  807048:	308d883a 	add	r6,r6,r2
  80704c:	d9001015 	stw	r4,64(sp)
  807050:	d9800915 	stw	r6,36(sp)
  807054:	003e3206 	br	806920 <_dtoa_r+0xaec>
  807058:	28800044 	addi	r2,r5,1
  80705c:	27000044 	addi	fp,r4,1
  807060:	20800005 	stb	r2,0(r4)
  807064:	003e6c06 	br	806a18 <_dtoa_r+0xbe4>
  807068:	d8800f17 	ldw	r2,60(sp)
  80706c:	00bce016 	blt	zero,r2,8063f0 <_dtoa_r+0x5bc>
  807070:	d9800f17 	ldw	r6,60(sp)
  807074:	303cc51e 	bne	r6,zero,80638c <_dtoa_r+0x558>
  807078:	0005883a 	mov	r2,zero
  80707c:	00d00534 	movhi	r3,16404
  807080:	980b883a 	mov	r5,r19
  807084:	180f883a 	mov	r7,r3
  807088:	9009883a 	mov	r4,r18
  80708c:	100d883a 	mov	r6,r2
  807090:	08029400 	call	802940 <__muldf3>
  807094:	180b883a 	mov	r5,r3
  807098:	a80f883a 	mov	r7,r21
  80709c:	1009883a 	mov	r4,r2
  8070a0:	a00d883a 	mov	r6,r20
  8070a4:	08039800 	call	803980 <__gedf2>
  8070a8:	103cb80e 	bge	r2,zero,80638c <_dtoa_r+0x558>
  8070ac:	0027883a 	mov	r19,zero
  8070b0:	0025883a 	mov	r18,zero
  8070b4:	003fc606 	br	806fd0 <_dtoa_r+0x119c>
  8070b8:	99400117 	ldw	r5,4(r19)
  8070bc:	d9001617 	ldw	r4,88(sp)
  8070c0:	08095480 	call	809548 <_Balloc>
  8070c4:	99800417 	ldw	r6,16(r19)
  8070c8:	11000304 	addi	r4,r2,12
  8070cc:	99400304 	addi	r5,r19,12
  8070d0:	318d883a 	add	r6,r6,r6
  8070d4:	318d883a 	add	r6,r6,r6
  8070d8:	31800204 	addi	r6,r6,8
  8070dc:	1023883a 	mov	r17,r2
  8070e0:	0808db00 	call	808db0 <memcpy>
  8070e4:	d9001617 	ldw	r4,88(sp)
  8070e8:	880b883a 	mov	r5,r17
  8070ec:	01800044 	movi	r6,1
  8070f0:	080990c0 	call	80990c <__lshift>
  8070f4:	100b883a 	mov	r5,r2
  8070f8:	003d9c06 	br	80676c <_dtoa_r+0x938>
  8070fc:	00800e44 	movi	r2,57
  807100:	b8807026 	beq	r23,r2,8072c4 <_dtoa_r+0x1490>
  807104:	b8800044 	addi	r2,r23,1
  807108:	b7000044 	addi	fp,r22,1
  80710c:	b0800005 	stb	r2,0(r22)
  807110:	003e4106 	br	806a18 <_dtoa_r+0xbe4>
  807114:	d8800317 	ldw	r2,12(sp)
  807118:	018020b4 	movhi	r6,130
  80711c:	31b18f04 	addi	r6,r6,-14788
  807120:	b009883a 	mov	r4,r22
  807124:	100e90fa 	slli	r7,r2,3
  807128:	b80b883a 	mov	r5,r23
  80712c:	398f883a 	add	r7,r7,r6
  807130:	38bffe17 	ldw	r2,-8(r7)
  807134:	d9800517 	ldw	r6,20(sp)
  807138:	38ffff17 	ldw	r3,-4(r7)
  80713c:	37000044 	addi	fp,r6,1
  807140:	180f883a 	mov	r7,r3
  807144:	100d883a 	mov	r6,r2
  807148:	08029400 	call	802940 <__muldf3>
  80714c:	a80b883a 	mov	r5,r21
  807150:	a009883a 	mov	r4,r20
  807154:	182f883a 	mov	r23,r3
  807158:	102d883a 	mov	r22,r2
  80715c:	08030dc0 	call	8030dc <__fixdfsi>
  807160:	1009883a 	mov	r4,r2
  807164:	1027883a 	mov	r19,r2
  807168:	0802fe40 	call	802fe4 <__floatsidf>
  80716c:	a80b883a 	mov	r5,r21
  807170:	a009883a 	mov	r4,r20
  807174:	180f883a 	mov	r7,r3
  807178:	100d883a 	mov	r6,r2
  80717c:	080284c0 	call	80284c <__subdf3>
  807180:	180b883a 	mov	r5,r3
  807184:	d8c00517 	ldw	r3,20(sp)
  807188:	9cc00c04 	addi	r19,r19,48
  80718c:	1009883a 	mov	r4,r2
  807190:	1cc00005 	stb	r19,0(r3)
  807194:	2021883a 	mov	r16,r4
  807198:	d9000317 	ldw	r4,12(sp)
  80719c:	00800044 	movi	r2,1
  8071a0:	2823883a 	mov	r17,r5
  8071a4:	20802226 	beq	r4,r2,807230 <_dtoa_r+0x13fc>
  8071a8:	1029883a 	mov	r20,r2
  8071ac:	0005883a 	mov	r2,zero
  8071b0:	00d00934 	movhi	r3,16420
  8071b4:	180f883a 	mov	r7,r3
  8071b8:	100d883a 	mov	r6,r2
  8071bc:	880b883a 	mov	r5,r17
  8071c0:	8009883a 	mov	r4,r16
  8071c4:	08029400 	call	802940 <__muldf3>
  8071c8:	180b883a 	mov	r5,r3
  8071cc:	1009883a 	mov	r4,r2
  8071d0:	1823883a 	mov	r17,r3
  8071d4:	1021883a 	mov	r16,r2
  8071d8:	08030dc0 	call	8030dc <__fixdfsi>
  8071dc:	1009883a 	mov	r4,r2
  8071e0:	102b883a 	mov	r21,r2
  8071e4:	0802fe40 	call	802fe4 <__floatsidf>
  8071e8:	880b883a 	mov	r5,r17
  8071ec:	8009883a 	mov	r4,r16
  8071f0:	180f883a 	mov	r7,r3
  8071f4:	100d883a 	mov	r6,r2
  8071f8:	080284c0 	call	80284c <__subdf3>
  8071fc:	180b883a 	mov	r5,r3
  807200:	d8c00517 	ldw	r3,20(sp)
  807204:	1009883a 	mov	r4,r2
  807208:	ad400c04 	addi	r21,r21,48
  80720c:	1d05883a 	add	r2,r3,r20
  807210:	15400005 	stb	r21,0(r2)
  807214:	2021883a 	mov	r16,r4
  807218:	d9000317 	ldw	r4,12(sp)
  80721c:	a5000044 	addi	r20,r20,1
  807220:	2823883a 	mov	r17,r5
  807224:	a13fe11e 	bne	r20,r4,8071ac <_dtoa_r+0x1378>
  807228:	e505883a 	add	r2,fp,r20
  80722c:	173fffc4 	addi	fp,r2,-1
  807230:	0025883a 	mov	r18,zero
  807234:	04cff834 	movhi	r19,16352
  807238:	b009883a 	mov	r4,r22
  80723c:	b80b883a 	mov	r5,r23
  807240:	900d883a 	mov	r6,r18
  807244:	980f883a 	mov	r7,r19
  807248:	08028cc0 	call	8028cc <__adddf3>
  80724c:	180b883a 	mov	r5,r3
  807250:	1009883a 	mov	r4,r2
  807254:	800d883a 	mov	r6,r16
  807258:	880f883a 	mov	r7,r17
  80725c:	0802f5c0 	call	802f5c <__ltdf2>
  807260:	103cab16 	blt	r2,zero,806510 <_dtoa_r+0x6dc>
  807264:	0009883a 	mov	r4,zero
  807268:	980b883a 	mov	r5,r19
  80726c:	b80f883a 	mov	r7,r23
  807270:	b00d883a 	mov	r6,r22
  807274:	080284c0 	call	80284c <__subdf3>
  807278:	180b883a 	mov	r5,r3
  80727c:	880f883a 	mov	r7,r17
  807280:	1009883a 	mov	r4,r2
  807284:	800d883a 	mov	r6,r16
  807288:	080b9980 	call	80b998 <__gtdf2>
  80728c:	00bc470e 	bge	zero,r2,8063ac <_dtoa_r+0x578>
  807290:	00c00c04 	movi	r3,48
  807294:	e73fffc4 	addi	fp,fp,-1
  807298:	e0800007 	ldb	r2,0(fp)
  80729c:	10fffd26 	beq	r2,r3,807294 <_dtoa_r+0x1460>
  8072a0:	d9800417 	ldw	r6,16(sp)
  8072a4:	e7000044 	addi	fp,fp,1
  8072a8:	d9800d15 	stw	r6,52(sp)
  8072ac:	003cab06 	br	80655c <_dtoa_r+0x728>
  8072b0:	d8c00f17 	ldw	r3,60(sp)
  8072b4:	d9001117 	ldw	r4,68(sp)
  8072b8:	20e1c83a 	sub	r16,r4,r3
  8072bc:	0007883a 	mov	r3,zero
  8072c0:	003d9b06 	br	806930 <_dtoa_r+0xafc>
  8072c4:	00800e44 	movi	r2,57
  8072c8:	b0800005 	stb	r2,0(r22)
  8072cc:	b5800044 	addi	r22,r22,1
  8072d0:	003dc106 	br	8069d8 <_dtoa_r+0xba4>
  8072d4:	05800084 	movi	r22,2
  8072d8:	003bf706 	br	8062b8 <_dtoa_r+0x484>
  8072dc:	d9000f17 	ldw	r4,60(sp)
  8072e0:	013c000e 	bge	zero,r4,8062e4 <_dtoa_r+0x4b0>
  8072e4:	d9800e17 	ldw	r6,56(sp)
  8072e8:	01bc300e 	bge	zero,r6,8063ac <_dtoa_r+0x578>
  8072ec:	0005883a 	mov	r2,zero
  8072f0:	00d00934 	movhi	r3,16420
  8072f4:	a80b883a 	mov	r5,r21
  8072f8:	180f883a 	mov	r7,r3
  8072fc:	a009883a 	mov	r4,r20
  807300:	100d883a 	mov	r6,r2
  807304:	08029400 	call	802940 <__muldf3>
  807308:	b1000044 	addi	r4,r22,1
  80730c:	1021883a 	mov	r16,r2
  807310:	1823883a 	mov	r17,r3
  807314:	0802fe40 	call	802fe4 <__floatsidf>
  807318:	880b883a 	mov	r5,r17
  80731c:	8009883a 	mov	r4,r16
  807320:	180f883a 	mov	r7,r3
  807324:	100d883a 	mov	r6,r2
  807328:	08029400 	call	802940 <__muldf3>
  80732c:	0011883a 	mov	r8,zero
  807330:	02500734 	movhi	r9,16412
  807334:	180b883a 	mov	r5,r3
  807338:	480f883a 	mov	r7,r9
  80733c:	1009883a 	mov	r4,r2
  807340:	400d883a 	mov	r6,r8
  807344:	08028cc0 	call	8028cc <__adddf3>
  807348:	102d883a 	mov	r22,r2
  80734c:	00bf3034 	movhi	r2,64704
  807350:	10ef883a 	add	r23,r2,r3
  807354:	d8800d17 	ldw	r2,52(sp)
  807358:	d8c00e17 	ldw	r3,56(sp)
  80735c:	8029883a 	mov	r20,r16
  807360:	10bfffc4 	addi	r2,r2,-1
  807364:	882b883a 	mov	r21,r17
  807368:	d8800415 	stw	r2,16(sp)
  80736c:	d8c00315 	stw	r3,12(sp)
  807370:	003e8306 	br	806d80 <_dtoa_r+0xf4c>
  807374:	d8800117 	ldw	r2,4(sp)
  807378:	dc001117 	ldw	r16,68(sp)
  80737c:	dc801017 	ldw	r18,64(sp)
  807380:	00c00d84 	movi	r3,54
  807384:	1887c83a 	sub	r3,r3,r2
  807388:	003d6906 	br	806930 <_dtoa_r+0xafc>
  80738c:	01800044 	movi	r6,1
  807390:	3021883a 	mov	r16,r6
  807394:	d9800f15 	stw	r6,60(sp)
  807398:	d9802615 	stw	r6,152(sp)
  80739c:	d9800e15 	stw	r6,56(sp)
  8073a0:	003b9306 	br	8061f0 <_dtoa_r+0x3bc>
  8073a4:	b021883a 	mov	r16,r22
  8073a8:	dd800f15 	stw	r22,60(sp)
  8073ac:	003b9006 	br	8061f0 <_dtoa_r+0x3bc>
  8073b0:	103e221e 	bne	r2,zero,806c3c <_dtoa_r+0xe08>
  8073b4:	b880004c 	andi	r2,r23,1
  8073b8:	1005003a 	cmpeq	r2,r2,zero
  8073bc:	103e1f1e 	bne	r2,zero,806c3c <_dtoa_r+0xe08>
  8073c0:	003e1b06 	br	806c30 <_dtoa_r+0xdfc>
  8073c4:	d9001617 	ldw	r4,88(sp)
  8073c8:	980b883a 	mov	r5,r19
  8073cc:	01800284 	movi	r6,10
  8073d0:	000f883a 	mov	r7,zero
  8073d4:	0809c7c0 	call	809c7c <__multadd>
  8073d8:	d8c00e17 	ldw	r3,56(sp)
  8073dc:	1027883a 	mov	r19,r2
  8073e0:	d8c00f15 	stw	r3,60(sp)
  8073e4:	003cd306 	br	806734 <_dtoa_r+0x900>

008073e8 <_fflush_r>:
  8073e8:	defffb04 	addi	sp,sp,-20
  8073ec:	dcc00315 	stw	r19,12(sp)
  8073f0:	dc800215 	stw	r18,8(sp)
  8073f4:	dfc00415 	stw	ra,16(sp)
  8073f8:	dc400115 	stw	r17,4(sp)
  8073fc:	dc000015 	stw	r16,0(sp)
  807400:	2027883a 	mov	r19,r4
  807404:	2825883a 	mov	r18,r5
  807408:	20000226 	beq	r4,zero,807414 <_fflush_r+0x2c>
  80740c:	20800e17 	ldw	r2,56(r4)
  807410:	10005626 	beq	r2,zero,80756c <_fflush_r+0x184>
  807414:	9100030b 	ldhu	r4,12(r18)
  807418:	20ffffcc 	andi	r3,r4,65535
  80741c:	18e0001c 	xori	r3,r3,32768
  807420:	18e00004 	addi	r3,r3,-32768
  807424:	1880020c 	andi	r2,r3,8
  807428:	1000261e 	bne	r2,zero,8074c4 <_fflush_r+0xdc>
  80742c:	90c00117 	ldw	r3,4(r18)
  807430:	20820014 	ori	r2,r4,2048
  807434:	9080030d 	sth	r2,12(r18)
  807438:	1009883a 	mov	r4,r2
  80743c:	00c0400e 	bge	zero,r3,807540 <_fflush_r+0x158>
  807440:	92000a17 	ldw	r8,40(r18)
  807444:	40004026 	beq	r8,zero,807548 <_fflush_r+0x160>
  807448:	2084000c 	andi	r2,r4,4096
  80744c:	10005326 	beq	r2,zero,80759c <_fflush_r+0x1b4>
  807450:	94001417 	ldw	r16,80(r18)
  807454:	9080030b 	ldhu	r2,12(r18)
  807458:	1080010c 	andi	r2,r2,4
  80745c:	1000481e 	bne	r2,zero,807580 <_fflush_r+0x198>
  807460:	91400717 	ldw	r5,28(r18)
  807464:	9809883a 	mov	r4,r19
  807468:	800d883a 	mov	r6,r16
  80746c:	000f883a 	mov	r7,zero
  807470:	403ee83a 	callr	r8
  807474:	8080261e 	bne	r16,r2,807510 <_fflush_r+0x128>
  807478:	9080030b 	ldhu	r2,12(r18)
  80747c:	91000417 	ldw	r4,16(r18)
  807480:	90000115 	stw	zero,4(r18)
  807484:	10bdffcc 	andi	r2,r2,63487
  807488:	10ffffcc 	andi	r3,r2,65535
  80748c:	18c4000c 	andi	r3,r3,4096
  807490:	9080030d 	sth	r2,12(r18)
  807494:	91000015 	stw	r4,0(r18)
  807498:	18002b26 	beq	r3,zero,807548 <_fflush_r+0x160>
  80749c:	0007883a 	mov	r3,zero
  8074a0:	1805883a 	mov	r2,r3
  8074a4:	94001415 	stw	r16,80(r18)
  8074a8:	dfc00417 	ldw	ra,16(sp)
  8074ac:	dcc00317 	ldw	r19,12(sp)
  8074b0:	dc800217 	ldw	r18,8(sp)
  8074b4:	dc400117 	ldw	r17,4(sp)
  8074b8:	dc000017 	ldw	r16,0(sp)
  8074bc:	dec00504 	addi	sp,sp,20
  8074c0:	f800283a 	ret
  8074c4:	94400417 	ldw	r17,16(r18)
  8074c8:	88001f26 	beq	r17,zero,807548 <_fflush_r+0x160>
  8074cc:	90800017 	ldw	r2,0(r18)
  8074d0:	18c000cc 	andi	r3,r3,3
  8074d4:	94400015 	stw	r17,0(r18)
  8074d8:	1461c83a 	sub	r16,r2,r17
  8074dc:	18002526 	beq	r3,zero,807574 <_fflush_r+0x18c>
  8074e0:	0005883a 	mov	r2,zero
  8074e4:	90800215 	stw	r2,8(r18)
  8074e8:	0400170e 	bge	zero,r16,807548 <_fflush_r+0x160>
  8074ec:	90c00917 	ldw	r3,36(r18)
  8074f0:	91400717 	ldw	r5,28(r18)
  8074f4:	880d883a 	mov	r6,r17
  8074f8:	800f883a 	mov	r7,r16
  8074fc:	9809883a 	mov	r4,r19
  807500:	183ee83a 	callr	r3
  807504:	88a3883a 	add	r17,r17,r2
  807508:	80a1c83a 	sub	r16,r16,r2
  80750c:	00bff616 	blt	zero,r2,8074e8 <_fflush_r+0x100>
  807510:	9080030b 	ldhu	r2,12(r18)
  807514:	00ffffc4 	movi	r3,-1
  807518:	10801014 	ori	r2,r2,64
  80751c:	9080030d 	sth	r2,12(r18)
  807520:	1805883a 	mov	r2,r3
  807524:	dfc00417 	ldw	ra,16(sp)
  807528:	dcc00317 	ldw	r19,12(sp)
  80752c:	dc800217 	ldw	r18,8(sp)
  807530:	dc400117 	ldw	r17,4(sp)
  807534:	dc000017 	ldw	r16,0(sp)
  807538:	dec00504 	addi	sp,sp,20
  80753c:	f800283a 	ret
  807540:	90800f17 	ldw	r2,60(r18)
  807544:	00bfbe16 	blt	zero,r2,807440 <_fflush_r+0x58>
  807548:	0007883a 	mov	r3,zero
  80754c:	1805883a 	mov	r2,r3
  807550:	dfc00417 	ldw	ra,16(sp)
  807554:	dcc00317 	ldw	r19,12(sp)
  807558:	dc800217 	ldw	r18,8(sp)
  80755c:	dc400117 	ldw	r17,4(sp)
  807560:	dc000017 	ldw	r16,0(sp)
  807564:	dec00504 	addi	sp,sp,20
  807568:	f800283a 	ret
  80756c:	08076800 	call	807680 <__sinit>
  807570:	003fa806 	br	807414 <_fflush_r+0x2c>
  807574:	90800517 	ldw	r2,20(r18)
  807578:	90800215 	stw	r2,8(r18)
  80757c:	003fda06 	br	8074e8 <_fflush_r+0x100>
  807580:	90800117 	ldw	r2,4(r18)
  807584:	90c00c17 	ldw	r3,48(r18)
  807588:	80a1c83a 	sub	r16,r16,r2
  80758c:	183fb426 	beq	r3,zero,807460 <_fflush_r+0x78>
  807590:	90800f17 	ldw	r2,60(r18)
  807594:	80a1c83a 	sub	r16,r16,r2
  807598:	003fb106 	br	807460 <_fflush_r+0x78>
  80759c:	91400717 	ldw	r5,28(r18)
  8075a0:	9809883a 	mov	r4,r19
  8075a4:	000d883a 	mov	r6,zero
  8075a8:	01c00044 	movi	r7,1
  8075ac:	403ee83a 	callr	r8
  8075b0:	1021883a 	mov	r16,r2
  8075b4:	00bfffc4 	movi	r2,-1
  8075b8:	80800226 	beq	r16,r2,8075c4 <_fflush_r+0x1dc>
  8075bc:	92000a17 	ldw	r8,40(r18)
  8075c0:	003fa406 	br	807454 <_fflush_r+0x6c>
  8075c4:	98c00017 	ldw	r3,0(r19)
  8075c8:	00800744 	movi	r2,29
  8075cc:	18bfde26 	beq	r3,r2,807548 <_fflush_r+0x160>
  8075d0:	9080030b 	ldhu	r2,12(r18)
  8075d4:	8007883a 	mov	r3,r16
  8075d8:	10801014 	ori	r2,r2,64
  8075dc:	9080030d 	sth	r2,12(r18)
  8075e0:	003fcf06 	br	807520 <_fflush_r+0x138>

008075e4 <fflush>:
  8075e4:	01402034 	movhi	r5,128
  8075e8:	295cfa04 	addi	r5,r5,29672
  8075ec:	2007883a 	mov	r3,r4
  8075f0:	20000526 	beq	r4,zero,807608 <fflush+0x24>
  8075f4:	008020b4 	movhi	r2,130
  8075f8:	10b8ef04 	addi	r2,r2,-7236
  8075fc:	11000017 	ldw	r4,0(r2)
  807600:	180b883a 	mov	r5,r3
  807604:	08073e81 	jmpi	8073e8 <_fflush_r>
  807608:	008020b4 	movhi	r2,130
  80760c:	10b8f004 	addi	r2,r2,-7232
  807610:	11000017 	ldw	r4,0(r2)
  807614:	08081b41 	jmpi	8081b4 <_fwalk_reent>

00807618 <std>:
  807618:	00802074 	movhi	r2,129
  80761c:	10a99804 	addi	r2,r2,-22944
  807620:	20800b15 	stw	r2,44(r4)
  807624:	00802074 	movhi	r2,129
  807628:	10a9d304 	addi	r2,r2,-22708
  80762c:	20800815 	stw	r2,32(r4)
  807630:	00c02074 	movhi	r3,129
  807634:	18e9b404 	addi	r3,r3,-22832
  807638:	00802074 	movhi	r2,129
  80763c:	10a99a04 	addi	r2,r2,-22936
  807640:	2140030d 	sth	r5,12(r4)
  807644:	2180038d 	sth	r6,14(r4)
  807648:	20c00915 	stw	r3,36(r4)
  80764c:	20800a15 	stw	r2,40(r4)
  807650:	20000015 	stw	zero,0(r4)
  807654:	20000115 	stw	zero,4(r4)
  807658:	20000215 	stw	zero,8(r4)
  80765c:	20000415 	stw	zero,16(r4)
  807660:	20000515 	stw	zero,20(r4)
  807664:	20000615 	stw	zero,24(r4)
  807668:	21000715 	stw	r4,28(r4)
  80766c:	f800283a 	ret

00807670 <__sfp_lock_acquire>:
  807670:	f800283a 	ret

00807674 <__sfp_lock_release>:
  807674:	f800283a 	ret

00807678 <__sinit_lock_acquire>:
  807678:	f800283a 	ret

0080767c <__sinit_lock_release>:
  80767c:	f800283a 	ret

00807680 <__sinit>:
  807680:	20800e17 	ldw	r2,56(r4)
  807684:	defffd04 	addi	sp,sp,-12
  807688:	dc400115 	stw	r17,4(sp)
  80768c:	dc000015 	stw	r16,0(sp)
  807690:	dfc00215 	stw	ra,8(sp)
  807694:	04400044 	movi	r17,1
  807698:	01400104 	movi	r5,4
  80769c:	000d883a 	mov	r6,zero
  8076a0:	2021883a 	mov	r16,r4
  8076a4:	2200bb04 	addi	r8,r4,748
  8076a8:	200f883a 	mov	r7,r4
  8076ac:	10000526 	beq	r2,zero,8076c4 <__sinit+0x44>
  8076b0:	dfc00217 	ldw	ra,8(sp)
  8076b4:	dc400117 	ldw	r17,4(sp)
  8076b8:	dc000017 	ldw	r16,0(sp)
  8076bc:	dec00304 	addi	sp,sp,12
  8076c0:	f800283a 	ret
  8076c4:	21000117 	ldw	r4,4(r4)
  8076c8:	00802034 	movhi	r2,128
  8076cc:	109dd904 	addi	r2,r2,30564
  8076d0:	00c000c4 	movi	r3,3
  8076d4:	80800f15 	stw	r2,60(r16)
  8076d8:	80c0b915 	stw	r3,740(r16)
  8076dc:	8200ba15 	stw	r8,744(r16)
  8076e0:	84400e15 	stw	r17,56(r16)
  8076e4:	8000b815 	stw	zero,736(r16)
  8076e8:	08076180 	call	807618 <std>
  8076ec:	81000217 	ldw	r4,8(r16)
  8076f0:	880d883a 	mov	r6,r17
  8076f4:	800f883a 	mov	r7,r16
  8076f8:	01400284 	movi	r5,10
  8076fc:	08076180 	call	807618 <std>
  807700:	81000317 	ldw	r4,12(r16)
  807704:	800f883a 	mov	r7,r16
  807708:	01400484 	movi	r5,18
  80770c:	01800084 	movi	r6,2
  807710:	dfc00217 	ldw	ra,8(sp)
  807714:	dc400117 	ldw	r17,4(sp)
  807718:	dc000017 	ldw	r16,0(sp)
  80771c:	dec00304 	addi	sp,sp,12
  807720:	08076181 	jmpi	807618 <std>

00807724 <__fp_lock>:
  807724:	0005883a 	mov	r2,zero
  807728:	f800283a 	ret

0080772c <__fp_unlock>:
  80772c:	0005883a 	mov	r2,zero
  807730:	f800283a 	ret

00807734 <__fp_unlock_all>:
  807734:	008020b4 	movhi	r2,130
  807738:	10b8ef04 	addi	r2,r2,-7236
  80773c:	11000017 	ldw	r4,0(r2)
  807740:	01402034 	movhi	r5,128
  807744:	295dcb04 	addi	r5,r5,30508
  807748:	080827c1 	jmpi	80827c <_fwalk>

0080774c <__fp_lock_all>:
  80774c:	008020b4 	movhi	r2,130
  807750:	10b8ef04 	addi	r2,r2,-7236
  807754:	11000017 	ldw	r4,0(r2)
  807758:	01402034 	movhi	r5,128
  80775c:	295dc904 	addi	r5,r5,30500
  807760:	080827c1 	jmpi	80827c <_fwalk>

00807764 <_cleanup_r>:
  807764:	01402074 	movhi	r5,129
  807768:	296ac504 	addi	r5,r5,-21740
  80776c:	080827c1 	jmpi	80827c <_fwalk>

00807770 <_cleanup>:
  807770:	008020b4 	movhi	r2,130
  807774:	10b8f004 	addi	r2,r2,-7232
  807778:	11000017 	ldw	r4,0(r2)
  80777c:	08077641 	jmpi	807764 <_cleanup_r>

00807780 <__sfmoreglue>:
  807780:	defffc04 	addi	sp,sp,-16
  807784:	dc400115 	stw	r17,4(sp)
  807788:	2c401724 	muli	r17,r5,92
  80778c:	dc800215 	stw	r18,8(sp)
  807790:	2825883a 	mov	r18,r5
  807794:	89400304 	addi	r5,r17,12
  807798:	dc000015 	stw	r16,0(sp)
  80779c:	dfc00315 	stw	ra,12(sp)
  8077a0:	080858c0 	call	80858c <_malloc_r>
  8077a4:	0021883a 	mov	r16,zero
  8077a8:	880d883a 	mov	r6,r17
  8077ac:	000b883a 	mov	r5,zero
  8077b0:	10000626 	beq	r2,zero,8077cc <__sfmoreglue+0x4c>
  8077b4:	11000304 	addi	r4,r2,12
  8077b8:	14800115 	stw	r18,4(r2)
  8077bc:	10000015 	stw	zero,0(r2)
  8077c0:	11000215 	stw	r4,8(r2)
  8077c4:	1021883a 	mov	r16,r2
  8077c8:	0808f300 	call	808f30 <memset>
  8077cc:	8005883a 	mov	r2,r16
  8077d0:	dfc00317 	ldw	ra,12(sp)
  8077d4:	dc800217 	ldw	r18,8(sp)
  8077d8:	dc400117 	ldw	r17,4(sp)
  8077dc:	dc000017 	ldw	r16,0(sp)
  8077e0:	dec00404 	addi	sp,sp,16
  8077e4:	f800283a 	ret

008077e8 <__sfp>:
  8077e8:	defffd04 	addi	sp,sp,-12
  8077ec:	008020b4 	movhi	r2,130
  8077f0:	10b8f004 	addi	r2,r2,-7232
  8077f4:	dc000015 	stw	r16,0(sp)
  8077f8:	14000017 	ldw	r16,0(r2)
  8077fc:	dc400115 	stw	r17,4(sp)
  807800:	dfc00215 	stw	ra,8(sp)
  807804:	80800e17 	ldw	r2,56(r16)
  807808:	2023883a 	mov	r17,r4
  80780c:	10002626 	beq	r2,zero,8078a8 <__sfp+0xc0>
  807810:	8400b804 	addi	r16,r16,736
  807814:	80800117 	ldw	r2,4(r16)
  807818:	81000217 	ldw	r4,8(r16)
  80781c:	10ffffc4 	addi	r3,r2,-1
  807820:	18000916 	blt	r3,zero,807848 <__sfp+0x60>
  807824:	2080030f 	ldh	r2,12(r4)
  807828:	10000b26 	beq	r2,zero,807858 <__sfp+0x70>
  80782c:	017fffc4 	movi	r5,-1
  807830:	00000206 	br	80783c <__sfp+0x54>
  807834:	2080030f 	ldh	r2,12(r4)
  807838:	10000726 	beq	r2,zero,807858 <__sfp+0x70>
  80783c:	18ffffc4 	addi	r3,r3,-1
  807840:	21001704 	addi	r4,r4,92
  807844:	197ffb1e 	bne	r3,r5,807834 <__sfp+0x4c>
  807848:	80800017 	ldw	r2,0(r16)
  80784c:	10001926 	beq	r2,zero,8078b4 <__sfp+0xcc>
  807850:	1021883a 	mov	r16,r2
  807854:	003fef06 	br	807814 <__sfp+0x2c>
  807858:	00bfffc4 	movi	r2,-1
  80785c:	00c00044 	movi	r3,1
  807860:	2080038d 	sth	r2,14(r4)
  807864:	20c0030d 	sth	r3,12(r4)
  807868:	20000015 	stw	zero,0(r4)
  80786c:	20000215 	stw	zero,8(r4)
  807870:	20000115 	stw	zero,4(r4)
  807874:	20000415 	stw	zero,16(r4)
  807878:	20000515 	stw	zero,20(r4)
  80787c:	20000615 	stw	zero,24(r4)
  807880:	20000c15 	stw	zero,48(r4)
  807884:	20000d15 	stw	zero,52(r4)
  807888:	20001115 	stw	zero,68(r4)
  80788c:	20001215 	stw	zero,72(r4)
  807890:	2005883a 	mov	r2,r4
  807894:	dfc00217 	ldw	ra,8(sp)
  807898:	dc400117 	ldw	r17,4(sp)
  80789c:	dc000017 	ldw	r16,0(sp)
  8078a0:	dec00304 	addi	sp,sp,12
  8078a4:	f800283a 	ret
  8078a8:	8009883a 	mov	r4,r16
  8078ac:	08076800 	call	807680 <__sinit>
  8078b0:	003fd706 	br	807810 <__sfp+0x28>
  8078b4:	8809883a 	mov	r4,r17
  8078b8:	01400104 	movi	r5,4
  8078bc:	08077800 	call	807780 <__sfmoreglue>
  8078c0:	80800015 	stw	r2,0(r16)
  8078c4:	103fe21e 	bne	r2,zero,807850 <__sfp+0x68>
  8078c8:	00800304 	movi	r2,12
  8078cc:	0009883a 	mov	r4,zero
  8078d0:	88800015 	stw	r2,0(r17)
  8078d4:	003fee06 	br	807890 <__sfp+0xa8>

008078d8 <_malloc_trim_r>:
  8078d8:	defffb04 	addi	sp,sp,-20
  8078dc:	dcc00315 	stw	r19,12(sp)
  8078e0:	04c020b4 	movhi	r19,130
  8078e4:	9cf34604 	addi	r19,r19,-13032
  8078e8:	dc800215 	stw	r18,8(sp)
  8078ec:	dc400115 	stw	r17,4(sp)
  8078f0:	dc000015 	stw	r16,0(sp)
  8078f4:	2823883a 	mov	r17,r5
  8078f8:	2025883a 	mov	r18,r4
  8078fc:	dfc00415 	stw	ra,16(sp)
  807900:	080c7700 	call	80c770 <__malloc_lock>
  807904:	98800217 	ldw	r2,8(r19)
  807908:	9009883a 	mov	r4,r18
  80790c:	000b883a 	mov	r5,zero
  807910:	10c00117 	ldw	r3,4(r2)
  807914:	00bfff04 	movi	r2,-4
  807918:	18a0703a 	and	r16,r3,r2
  80791c:	8463c83a 	sub	r17,r16,r17
  807920:	8c43fbc4 	addi	r17,r17,4079
  807924:	8822d33a 	srli	r17,r17,12
  807928:	0083ffc4 	movi	r2,4095
  80792c:	8c7fffc4 	addi	r17,r17,-1
  807930:	8822933a 	slli	r17,r17,12
  807934:	1440060e 	bge	r2,r17,807950 <_malloc_trim_r+0x78>
  807938:	080a5f00 	call	80a5f0 <_sbrk_r>
  80793c:	98c00217 	ldw	r3,8(r19)
  807940:	9009883a 	mov	r4,r18
  807944:	044bc83a 	sub	r5,zero,r17
  807948:	80c7883a 	add	r3,r16,r3
  80794c:	10c00926 	beq	r2,r3,807974 <_malloc_trim_r+0x9c>
  807950:	080c8780 	call	80c878 <__malloc_unlock>
  807954:	0005883a 	mov	r2,zero
  807958:	dfc00417 	ldw	ra,16(sp)
  80795c:	dcc00317 	ldw	r19,12(sp)
  807960:	dc800217 	ldw	r18,8(sp)
  807964:	dc400117 	ldw	r17,4(sp)
  807968:	dc000017 	ldw	r16,0(sp)
  80796c:	dec00504 	addi	sp,sp,20
  807970:	f800283a 	ret
  807974:	9009883a 	mov	r4,r18
  807978:	080a5f00 	call	80a5f0 <_sbrk_r>
  80797c:	844dc83a 	sub	r6,r16,r17
  807980:	00ffffc4 	movi	r3,-1
  807984:	9009883a 	mov	r4,r18
  807988:	000b883a 	mov	r5,zero
  80798c:	01c020b4 	movhi	r7,130
  807990:	39c04004 	addi	r7,r7,256
  807994:	31800054 	ori	r6,r6,1
  807998:	10c00926 	beq	r2,r3,8079c0 <_malloc_trim_r+0xe8>
  80799c:	38800017 	ldw	r2,0(r7)
  8079a0:	98c00217 	ldw	r3,8(r19)
  8079a4:	9009883a 	mov	r4,r18
  8079a8:	1445c83a 	sub	r2,r2,r17
  8079ac:	38800015 	stw	r2,0(r7)
  8079b0:	19800115 	stw	r6,4(r3)
  8079b4:	080c8780 	call	80c878 <__malloc_unlock>
  8079b8:	00800044 	movi	r2,1
  8079bc:	003fe606 	br	807958 <_malloc_trim_r+0x80>
  8079c0:	080a5f00 	call	80a5f0 <_sbrk_r>
  8079c4:	99800217 	ldw	r6,8(r19)
  8079c8:	100f883a 	mov	r7,r2
  8079cc:	9009883a 	mov	r4,r18
  8079d0:	1187c83a 	sub	r3,r2,r6
  8079d4:	008003c4 	movi	r2,15
  8079d8:	19400054 	ori	r5,r3,1
  8079dc:	10ffdc0e 	bge	r2,r3,807950 <_malloc_trim_r+0x78>
  8079e0:	008020b4 	movhi	r2,130
  8079e4:	10b8f404 	addi	r2,r2,-7216
  8079e8:	10c00017 	ldw	r3,0(r2)
  8079ec:	008020b4 	movhi	r2,130
  8079f0:	10804004 	addi	r2,r2,256
  8079f4:	31400115 	stw	r5,4(r6)
  8079f8:	38c7c83a 	sub	r3,r7,r3
  8079fc:	10c00015 	stw	r3,0(r2)
  807a00:	003fd306 	br	807950 <_malloc_trim_r+0x78>

00807a04 <_free_r>:
  807a04:	defffd04 	addi	sp,sp,-12
  807a08:	dc400115 	stw	r17,4(sp)
  807a0c:	dc000015 	stw	r16,0(sp)
  807a10:	dfc00215 	stw	ra,8(sp)
  807a14:	2821883a 	mov	r16,r5
  807a18:	2023883a 	mov	r17,r4
  807a1c:	28005a26 	beq	r5,zero,807b88 <_free_r+0x184>
  807a20:	080c7700 	call	80c770 <__malloc_lock>
  807a24:	823ffe04 	addi	r8,r16,-8
  807a28:	41400117 	ldw	r5,4(r8)
  807a2c:	00bfff84 	movi	r2,-2
  807a30:	028020b4 	movhi	r10,130
  807a34:	52b34604 	addi	r10,r10,-13032
  807a38:	288e703a 	and	r7,r5,r2
  807a3c:	41cd883a 	add	r6,r8,r7
  807a40:	30c00117 	ldw	r3,4(r6)
  807a44:	51000217 	ldw	r4,8(r10)
  807a48:	00bfff04 	movi	r2,-4
  807a4c:	1892703a 	and	r9,r3,r2
  807a50:	5017883a 	mov	r11,r10
  807a54:	31006726 	beq	r6,r4,807bf4 <_free_r+0x1f0>
  807a58:	2880004c 	andi	r2,r5,1
  807a5c:	1005003a 	cmpeq	r2,r2,zero
  807a60:	32400115 	stw	r9,4(r6)
  807a64:	10001a1e 	bne	r2,zero,807ad0 <_free_r+0xcc>
  807a68:	000b883a 	mov	r5,zero
  807a6c:	3247883a 	add	r3,r6,r9
  807a70:	18800117 	ldw	r2,4(r3)
  807a74:	1080004c 	andi	r2,r2,1
  807a78:	1000231e 	bne	r2,zero,807b08 <_free_r+0x104>
  807a7c:	280ac03a 	cmpne	r5,r5,zero
  807a80:	3a4f883a 	add	r7,r7,r9
  807a84:	2800451e 	bne	r5,zero,807b9c <_free_r+0x198>
  807a88:	31000217 	ldw	r4,8(r6)
  807a8c:	008020b4 	movhi	r2,130
  807a90:	10b34804 	addi	r2,r2,-13024
  807a94:	20807b26 	beq	r4,r2,807c84 <_free_r+0x280>
  807a98:	30800317 	ldw	r2,12(r6)
  807a9c:	3a07883a 	add	r3,r7,r8
  807aa0:	19c00015 	stw	r7,0(r3)
  807aa4:	11000215 	stw	r4,8(r2)
  807aa8:	20800315 	stw	r2,12(r4)
  807aac:	38800054 	ori	r2,r7,1
  807ab0:	40800115 	stw	r2,4(r8)
  807ab4:	28001a26 	beq	r5,zero,807b20 <_free_r+0x11c>
  807ab8:	8809883a 	mov	r4,r17
  807abc:	dfc00217 	ldw	ra,8(sp)
  807ac0:	dc400117 	ldw	r17,4(sp)
  807ac4:	dc000017 	ldw	r16,0(sp)
  807ac8:	dec00304 	addi	sp,sp,12
  807acc:	080c8781 	jmpi	80c878 <__malloc_unlock>
  807ad0:	80bffe17 	ldw	r2,-8(r16)
  807ad4:	50c00204 	addi	r3,r10,8
  807ad8:	4091c83a 	sub	r8,r8,r2
  807adc:	41000217 	ldw	r4,8(r8)
  807ae0:	388f883a 	add	r7,r7,r2
  807ae4:	20c06126 	beq	r4,r3,807c6c <_free_r+0x268>
  807ae8:	40800317 	ldw	r2,12(r8)
  807aec:	3247883a 	add	r3,r6,r9
  807af0:	000b883a 	mov	r5,zero
  807af4:	11000215 	stw	r4,8(r2)
  807af8:	20800315 	stw	r2,12(r4)
  807afc:	18800117 	ldw	r2,4(r3)
  807b00:	1080004c 	andi	r2,r2,1
  807b04:	103fdd26 	beq	r2,zero,807a7c <_free_r+0x78>
  807b08:	38800054 	ori	r2,r7,1
  807b0c:	3a07883a 	add	r3,r7,r8
  807b10:	280ac03a 	cmpne	r5,r5,zero
  807b14:	40800115 	stw	r2,4(r8)
  807b18:	19c00015 	stw	r7,0(r3)
  807b1c:	283fe61e 	bne	r5,zero,807ab8 <_free_r+0xb4>
  807b20:	00807fc4 	movi	r2,511
  807b24:	11c01f2e 	bgeu	r2,r7,807ba4 <_free_r+0x1a0>
  807b28:	3806d27a 	srli	r3,r7,9
  807b2c:	1800481e 	bne	r3,zero,807c50 <_free_r+0x24c>
  807b30:	3804d0fa 	srli	r2,r7,3
  807b34:	100690fa 	slli	r3,r2,3
  807b38:	1acd883a 	add	r6,r3,r11
  807b3c:	31400217 	ldw	r5,8(r6)
  807b40:	31405926 	beq	r6,r5,807ca8 <_free_r+0x2a4>
  807b44:	28800117 	ldw	r2,4(r5)
  807b48:	00ffff04 	movi	r3,-4
  807b4c:	10c4703a 	and	r2,r2,r3
  807b50:	3880022e 	bgeu	r7,r2,807b5c <_free_r+0x158>
  807b54:	29400217 	ldw	r5,8(r5)
  807b58:	317ffa1e 	bne	r6,r5,807b44 <_free_r+0x140>
  807b5c:	29800317 	ldw	r6,12(r5)
  807b60:	41800315 	stw	r6,12(r8)
  807b64:	41400215 	stw	r5,8(r8)
  807b68:	8809883a 	mov	r4,r17
  807b6c:	2a000315 	stw	r8,12(r5)
  807b70:	32000215 	stw	r8,8(r6)
  807b74:	dfc00217 	ldw	ra,8(sp)
  807b78:	dc400117 	ldw	r17,4(sp)
  807b7c:	dc000017 	ldw	r16,0(sp)
  807b80:	dec00304 	addi	sp,sp,12
  807b84:	080c8781 	jmpi	80c878 <__malloc_unlock>
  807b88:	dfc00217 	ldw	ra,8(sp)
  807b8c:	dc400117 	ldw	r17,4(sp)
  807b90:	dc000017 	ldw	r16,0(sp)
  807b94:	dec00304 	addi	sp,sp,12
  807b98:	f800283a 	ret
  807b9c:	31000217 	ldw	r4,8(r6)
  807ba0:	003fbd06 	br	807a98 <_free_r+0x94>
  807ba4:	3806d0fa 	srli	r3,r7,3
  807ba8:	00800044 	movi	r2,1
  807bac:	51400117 	ldw	r5,4(r10)
  807bb0:	180890fa 	slli	r4,r3,3
  807bb4:	1807d0ba 	srai	r3,r3,2
  807bb8:	22c9883a 	add	r4,r4,r11
  807bbc:	21800217 	ldw	r6,8(r4)
  807bc0:	10c4983a 	sll	r2,r2,r3
  807bc4:	41000315 	stw	r4,12(r8)
  807bc8:	41800215 	stw	r6,8(r8)
  807bcc:	288ab03a 	or	r5,r5,r2
  807bd0:	22000215 	stw	r8,8(r4)
  807bd4:	8809883a 	mov	r4,r17
  807bd8:	51400115 	stw	r5,4(r10)
  807bdc:	32000315 	stw	r8,12(r6)
  807be0:	dfc00217 	ldw	ra,8(sp)
  807be4:	dc400117 	ldw	r17,4(sp)
  807be8:	dc000017 	ldw	r16,0(sp)
  807bec:	dec00304 	addi	sp,sp,12
  807bf0:	080c8781 	jmpi	80c878 <__malloc_unlock>
  807bf4:	2880004c 	andi	r2,r5,1
  807bf8:	3a4d883a 	add	r6,r7,r9
  807bfc:	1000071e 	bne	r2,zero,807c1c <_free_r+0x218>
  807c00:	80bffe17 	ldw	r2,-8(r16)
  807c04:	4091c83a 	sub	r8,r8,r2
  807c08:	41000317 	ldw	r4,12(r8)
  807c0c:	40c00217 	ldw	r3,8(r8)
  807c10:	308d883a 	add	r6,r6,r2
  807c14:	20c00215 	stw	r3,8(r4)
  807c18:	19000315 	stw	r4,12(r3)
  807c1c:	008020b4 	movhi	r2,130
  807c20:	10b8f304 	addi	r2,r2,-7220
  807c24:	11000017 	ldw	r4,0(r2)
  807c28:	30c00054 	ori	r3,r6,1
  807c2c:	52000215 	stw	r8,8(r10)
  807c30:	40c00115 	stw	r3,4(r8)
  807c34:	313fa036 	bltu	r6,r4,807ab8 <_free_r+0xb4>
  807c38:	008020b4 	movhi	r2,130
  807c3c:	10801004 	addi	r2,r2,64
  807c40:	11400017 	ldw	r5,0(r2)
  807c44:	8809883a 	mov	r4,r17
  807c48:	08078d80 	call	8078d8 <_malloc_trim_r>
  807c4c:	003f9a06 	br	807ab8 <_free_r+0xb4>
  807c50:	00800104 	movi	r2,4
  807c54:	10c0072e 	bgeu	r2,r3,807c74 <_free_r+0x270>
  807c58:	00800504 	movi	r2,20
  807c5c:	10c01936 	bltu	r2,r3,807cc4 <_free_r+0x2c0>
  807c60:	188016c4 	addi	r2,r3,91
  807c64:	100690fa 	slli	r3,r2,3
  807c68:	003fb306 	br	807b38 <_free_r+0x134>
  807c6c:	01400044 	movi	r5,1
  807c70:	003f7e06 	br	807a6c <_free_r+0x68>
  807c74:	3804d1ba 	srli	r2,r7,6
  807c78:	10800e04 	addi	r2,r2,56
  807c7c:	100690fa 	slli	r3,r2,3
  807c80:	003fad06 	br	807b38 <_free_r+0x134>
  807c84:	22000315 	stw	r8,12(r4)
  807c88:	22000215 	stw	r8,8(r4)
  807c8c:	3a05883a 	add	r2,r7,r8
  807c90:	38c00054 	ori	r3,r7,1
  807c94:	11c00015 	stw	r7,0(r2)
  807c98:	41000215 	stw	r4,8(r8)
  807c9c:	40c00115 	stw	r3,4(r8)
  807ca0:	41000315 	stw	r4,12(r8)
  807ca4:	003f8406 	br	807ab8 <_free_r+0xb4>
  807ca8:	1005d0ba 	srai	r2,r2,2
  807cac:	00c00044 	movi	r3,1
  807cb0:	51000117 	ldw	r4,4(r10)
  807cb4:	1886983a 	sll	r3,r3,r2
  807cb8:	20c8b03a 	or	r4,r4,r3
  807cbc:	51000115 	stw	r4,4(r10)
  807cc0:	003fa706 	br	807b60 <_free_r+0x15c>
  807cc4:	00801504 	movi	r2,84
  807cc8:	10c00436 	bltu	r2,r3,807cdc <_free_r+0x2d8>
  807ccc:	3804d33a 	srli	r2,r7,12
  807cd0:	10801b84 	addi	r2,r2,110
  807cd4:	100690fa 	slli	r3,r2,3
  807cd8:	003f9706 	br	807b38 <_free_r+0x134>
  807cdc:	00805504 	movi	r2,340
  807ce0:	10c00436 	bltu	r2,r3,807cf4 <_free_r+0x2f0>
  807ce4:	3804d3fa 	srli	r2,r7,15
  807ce8:	10801dc4 	addi	r2,r2,119
  807cec:	100690fa 	slli	r3,r2,3
  807cf0:	003f9106 	br	807b38 <_free_r+0x134>
  807cf4:	00815504 	movi	r2,1364
  807cf8:	10c0032e 	bgeu	r2,r3,807d08 <_free_r+0x304>
  807cfc:	00801f84 	movi	r2,126
  807d00:	00c0fc04 	movi	r3,1008
  807d04:	003f8c06 	br	807b38 <_free_r+0x134>
  807d08:	3804d4ba 	srli	r2,r7,18
  807d0c:	10801f04 	addi	r2,r2,124
  807d10:	100690fa 	slli	r3,r2,3
  807d14:	003f8806 	br	807b38 <_free_r+0x134>

00807d18 <__sfvwrite_r>:
  807d18:	30800217 	ldw	r2,8(r6)
  807d1c:	defff504 	addi	sp,sp,-44
  807d20:	df000915 	stw	fp,36(sp)
  807d24:	dd800715 	stw	r22,28(sp)
  807d28:	dc800315 	stw	r18,12(sp)
  807d2c:	dfc00a15 	stw	ra,40(sp)
  807d30:	ddc00815 	stw	r23,32(sp)
  807d34:	dd400615 	stw	r21,24(sp)
  807d38:	dd000515 	stw	r20,20(sp)
  807d3c:	dcc00415 	stw	r19,16(sp)
  807d40:	dc400215 	stw	r17,8(sp)
  807d44:	dc000115 	stw	r16,4(sp)
  807d48:	302d883a 	mov	r22,r6
  807d4c:	2039883a 	mov	fp,r4
  807d50:	2825883a 	mov	r18,r5
  807d54:	10001c26 	beq	r2,zero,807dc8 <__sfvwrite_r+0xb0>
  807d58:	29c0030b 	ldhu	r7,12(r5)
  807d5c:	3880020c 	andi	r2,r7,8
  807d60:	10002726 	beq	r2,zero,807e00 <__sfvwrite_r+0xe8>
  807d64:	28800417 	ldw	r2,16(r5)
  807d68:	10002526 	beq	r2,zero,807e00 <__sfvwrite_r+0xe8>
  807d6c:	3880008c 	andi	r2,r7,2
  807d70:	b5400017 	ldw	r21,0(r22)
  807d74:	10002826 	beq	r2,zero,807e18 <__sfvwrite_r+0x100>
  807d78:	0021883a 	mov	r16,zero
  807d7c:	0023883a 	mov	r17,zero
  807d80:	880d883a 	mov	r6,r17
  807d84:	e009883a 	mov	r4,fp
  807d88:	00810004 	movi	r2,1024
  807d8c:	80006e26 	beq	r16,zero,807f48 <__sfvwrite_r+0x230>
  807d90:	800f883a 	mov	r7,r16
  807d94:	91400717 	ldw	r5,28(r18)
  807d98:	1400012e 	bgeu	r2,r16,807da0 <__sfvwrite_r+0x88>
  807d9c:	100f883a 	mov	r7,r2
  807da0:	90c00917 	ldw	r3,36(r18)
  807da4:	183ee83a 	callr	r3
  807da8:	1007883a 	mov	r3,r2
  807dac:	80a1c83a 	sub	r16,r16,r2
  807db0:	88a3883a 	add	r17,r17,r2
  807db4:	00806d0e 	bge	zero,r2,807f6c <__sfvwrite_r+0x254>
  807db8:	b0800217 	ldw	r2,8(r22)
  807dbc:	10c5c83a 	sub	r2,r2,r3
  807dc0:	b0800215 	stw	r2,8(r22)
  807dc4:	103fee1e 	bne	r2,zero,807d80 <__sfvwrite_r+0x68>
  807dc8:	0009883a 	mov	r4,zero
  807dcc:	2005883a 	mov	r2,r4
  807dd0:	dfc00a17 	ldw	ra,40(sp)
  807dd4:	df000917 	ldw	fp,36(sp)
  807dd8:	ddc00817 	ldw	r23,32(sp)
  807ddc:	dd800717 	ldw	r22,28(sp)
  807de0:	dd400617 	ldw	r21,24(sp)
  807de4:	dd000517 	ldw	r20,20(sp)
  807de8:	dcc00417 	ldw	r19,16(sp)
  807dec:	dc800317 	ldw	r18,12(sp)
  807df0:	dc400217 	ldw	r17,8(sp)
  807df4:	dc000117 	ldw	r16,4(sp)
  807df8:	dec00b04 	addi	sp,sp,44
  807dfc:	f800283a 	ret
  807e00:	0805ae00 	call	805ae0 <__swsetup_r>
  807e04:	1000e41e 	bne	r2,zero,808198 <__sfvwrite_r+0x480>
  807e08:	91c0030b 	ldhu	r7,12(r18)
  807e0c:	b5400017 	ldw	r21,0(r22)
  807e10:	3880008c 	andi	r2,r7,2
  807e14:	103fd81e 	bne	r2,zero,807d78 <__sfvwrite_r+0x60>
  807e18:	3880004c 	andi	r2,r7,1
  807e1c:	1005003a 	cmpeq	r2,r2,zero
  807e20:	10005726 	beq	r2,zero,807f80 <__sfvwrite_r+0x268>
  807e24:	0029883a 	mov	r20,zero
  807e28:	002f883a 	mov	r23,zero
  807e2c:	a0004226 	beq	r20,zero,807f38 <__sfvwrite_r+0x220>
  807e30:	3880800c 	andi	r2,r7,512
  807e34:	94000217 	ldw	r16,8(r18)
  807e38:	10008b26 	beq	r2,zero,808068 <__sfvwrite_r+0x350>
  807e3c:	800d883a 	mov	r6,r16
  807e40:	a400a536 	bltu	r20,r16,8080d8 <__sfvwrite_r+0x3c0>
  807e44:	3881200c 	andi	r2,r7,1152
  807e48:	10002726 	beq	r2,zero,807ee8 <__sfvwrite_r+0x1d0>
  807e4c:	90800517 	ldw	r2,20(r18)
  807e50:	92000417 	ldw	r8,16(r18)
  807e54:	91400017 	ldw	r5,0(r18)
  807e58:	1087883a 	add	r3,r2,r2
  807e5c:	1887883a 	add	r3,r3,r2
  807e60:	1808d7fa 	srli	r4,r3,31
  807e64:	2a21c83a 	sub	r16,r5,r8
  807e68:	80800044 	addi	r2,r16,1
  807e6c:	20c9883a 	add	r4,r4,r3
  807e70:	2027d07a 	srai	r19,r4,1
  807e74:	a085883a 	add	r2,r20,r2
  807e78:	980d883a 	mov	r6,r19
  807e7c:	9880022e 	bgeu	r19,r2,807e88 <__sfvwrite_r+0x170>
  807e80:	1027883a 	mov	r19,r2
  807e84:	100d883a 	mov	r6,r2
  807e88:	3881000c 	andi	r2,r7,1024
  807e8c:	1000b826 	beq	r2,zero,808170 <__sfvwrite_r+0x458>
  807e90:	300b883a 	mov	r5,r6
  807e94:	e009883a 	mov	r4,fp
  807e98:	080858c0 	call	80858c <_malloc_r>
  807e9c:	10003126 	beq	r2,zero,807f64 <__sfvwrite_r+0x24c>
  807ea0:	91400417 	ldw	r5,16(r18)
  807ea4:	1009883a 	mov	r4,r2
  807ea8:	800d883a 	mov	r6,r16
  807eac:	1023883a 	mov	r17,r2
  807eb0:	0808db00 	call	808db0 <memcpy>
  807eb4:	90c0030b 	ldhu	r3,12(r18)
  807eb8:	00beffc4 	movi	r2,-1025
  807ebc:	1886703a 	and	r3,r3,r2
  807ec0:	18c02014 	ori	r3,r3,128
  807ec4:	90c0030d 	sth	r3,12(r18)
  807ec8:	9c07c83a 	sub	r3,r19,r16
  807ecc:	8c05883a 	add	r2,r17,r16
  807ed0:	a00d883a 	mov	r6,r20
  807ed4:	a021883a 	mov	r16,r20
  807ed8:	90800015 	stw	r2,0(r18)
  807edc:	90c00215 	stw	r3,8(r18)
  807ee0:	94400415 	stw	r17,16(r18)
  807ee4:	94c00515 	stw	r19,20(r18)
  807ee8:	91000017 	ldw	r4,0(r18)
  807eec:	b80b883a 	mov	r5,r23
  807ef0:	a023883a 	mov	r17,r20
  807ef4:	0808e500 	call	808e50 <memmove>
  807ef8:	90c00217 	ldw	r3,8(r18)
  807efc:	90800017 	ldw	r2,0(r18)
  807f00:	a027883a 	mov	r19,r20
  807f04:	1c07c83a 	sub	r3,r3,r16
  807f08:	1405883a 	add	r2,r2,r16
  807f0c:	90c00215 	stw	r3,8(r18)
  807f10:	a021883a 	mov	r16,r20
  807f14:	90800015 	stw	r2,0(r18)
  807f18:	b0800217 	ldw	r2,8(r22)
  807f1c:	1405c83a 	sub	r2,r2,r16
  807f20:	b0800215 	stw	r2,8(r22)
  807f24:	103fa826 	beq	r2,zero,807dc8 <__sfvwrite_r+0xb0>
  807f28:	a469c83a 	sub	r20,r20,r17
  807f2c:	91c0030b 	ldhu	r7,12(r18)
  807f30:	bcef883a 	add	r23,r23,r19
  807f34:	a03fbe1e 	bne	r20,zero,807e30 <__sfvwrite_r+0x118>
  807f38:	adc00017 	ldw	r23,0(r21)
  807f3c:	ad000117 	ldw	r20,4(r21)
  807f40:	ad400204 	addi	r21,r21,8
  807f44:	003fb906 	br	807e2c <__sfvwrite_r+0x114>
  807f48:	ac400017 	ldw	r17,0(r21)
  807f4c:	ac000117 	ldw	r16,4(r21)
  807f50:	ad400204 	addi	r21,r21,8
  807f54:	003f8a06 	br	807d80 <__sfvwrite_r+0x68>
  807f58:	91400417 	ldw	r5,16(r18)
  807f5c:	e009883a 	mov	r4,fp
  807f60:	0807a040 	call	807a04 <_free_r>
  807f64:	00800304 	movi	r2,12
  807f68:	e0800015 	stw	r2,0(fp)
  807f6c:	9080030b 	ldhu	r2,12(r18)
  807f70:	013fffc4 	movi	r4,-1
  807f74:	10801014 	ori	r2,r2,64
  807f78:	9080030d 	sth	r2,12(r18)
  807f7c:	003f9306 	br	807dcc <__sfvwrite_r+0xb4>
  807f80:	0027883a 	mov	r19,zero
  807f84:	002f883a 	mov	r23,zero
  807f88:	d8000015 	stw	zero,0(sp)
  807f8c:	0029883a 	mov	r20,zero
  807f90:	98001e26 	beq	r19,zero,80800c <__sfvwrite_r+0x2f4>
  807f94:	d8c00017 	ldw	r3,0(sp)
  807f98:	1804c03a 	cmpne	r2,r3,zero
  807f9c:	10005e26 	beq	r2,zero,808118 <__sfvwrite_r+0x400>
  807fa0:	9821883a 	mov	r16,r19
  807fa4:	a4c0012e 	bgeu	r20,r19,807fac <__sfvwrite_r+0x294>
  807fa8:	a021883a 	mov	r16,r20
  807fac:	91000017 	ldw	r4,0(r18)
  807fb0:	90800417 	ldw	r2,16(r18)
  807fb4:	91800217 	ldw	r6,8(r18)
  807fb8:	91c00517 	ldw	r7,20(r18)
  807fbc:	1100022e 	bgeu	r2,r4,807fc8 <__sfvwrite_r+0x2b0>
  807fc0:	31e3883a 	add	r17,r6,r7
  807fc4:	8c001616 	blt	r17,r16,808020 <__sfvwrite_r+0x308>
  807fc8:	81c03816 	blt	r16,r7,8080ac <__sfvwrite_r+0x394>
  807fcc:	90c00917 	ldw	r3,36(r18)
  807fd0:	91400717 	ldw	r5,28(r18)
  807fd4:	e009883a 	mov	r4,fp
  807fd8:	b80d883a 	mov	r6,r23
  807fdc:	183ee83a 	callr	r3
  807fe0:	1023883a 	mov	r17,r2
  807fe4:	00bfe10e 	bge	zero,r2,807f6c <__sfvwrite_r+0x254>
  807fe8:	a469c83a 	sub	r20,r20,r17
  807fec:	a0001826 	beq	r20,zero,808050 <__sfvwrite_r+0x338>
  807ff0:	b0800217 	ldw	r2,8(r22)
  807ff4:	1445c83a 	sub	r2,r2,r17
  807ff8:	b0800215 	stw	r2,8(r22)
  807ffc:	103f7226 	beq	r2,zero,807dc8 <__sfvwrite_r+0xb0>
  808000:	9c67c83a 	sub	r19,r19,r17
  808004:	bc6f883a 	add	r23,r23,r17
  808008:	983fe21e 	bne	r19,zero,807f94 <__sfvwrite_r+0x27c>
  80800c:	adc00017 	ldw	r23,0(r21)
  808010:	acc00117 	ldw	r19,4(r21)
  808014:	ad400204 	addi	r21,r21,8
  808018:	d8000015 	stw	zero,0(sp)
  80801c:	003fdc06 	br	807f90 <__sfvwrite_r+0x278>
  808020:	b80b883a 	mov	r5,r23
  808024:	880d883a 	mov	r6,r17
  808028:	0808e500 	call	808e50 <memmove>
  80802c:	90c00017 	ldw	r3,0(r18)
  808030:	e009883a 	mov	r4,fp
  808034:	900b883a 	mov	r5,r18
  808038:	1c47883a 	add	r3,r3,r17
  80803c:	90c00015 	stw	r3,0(r18)
  808040:	08073e80 	call	8073e8 <_fflush_r>
  808044:	103fc91e 	bne	r2,zero,807f6c <__sfvwrite_r+0x254>
  808048:	a469c83a 	sub	r20,r20,r17
  80804c:	a03fe81e 	bne	r20,zero,807ff0 <__sfvwrite_r+0x2d8>
  808050:	e009883a 	mov	r4,fp
  808054:	900b883a 	mov	r5,r18
  808058:	08073e80 	call	8073e8 <_fflush_r>
  80805c:	103fc31e 	bne	r2,zero,807f6c <__sfvwrite_r+0x254>
  808060:	d8000015 	stw	zero,0(sp)
  808064:	003fe206 	br	807ff0 <__sfvwrite_r+0x2d8>
  808068:	91000017 	ldw	r4,0(r18)
  80806c:	90800417 	ldw	r2,16(r18)
  808070:	1100022e 	bgeu	r2,r4,80807c <__sfvwrite_r+0x364>
  808074:	8023883a 	mov	r17,r16
  808078:	85003136 	bltu	r16,r20,808140 <__sfvwrite_r+0x428>
  80807c:	91c00517 	ldw	r7,20(r18)
  808080:	a1c01836 	bltu	r20,r7,8080e4 <__sfvwrite_r+0x3cc>
  808084:	90c00917 	ldw	r3,36(r18)
  808088:	91400717 	ldw	r5,28(r18)
  80808c:	e009883a 	mov	r4,fp
  808090:	b80d883a 	mov	r6,r23
  808094:	183ee83a 	callr	r3
  808098:	1021883a 	mov	r16,r2
  80809c:	00bfb30e 	bge	zero,r2,807f6c <__sfvwrite_r+0x254>
  8080a0:	1023883a 	mov	r17,r2
  8080a4:	1027883a 	mov	r19,r2
  8080a8:	003f9b06 	br	807f18 <__sfvwrite_r+0x200>
  8080ac:	b80b883a 	mov	r5,r23
  8080b0:	800d883a 	mov	r6,r16
  8080b4:	0808e500 	call	808e50 <memmove>
  8080b8:	90c00217 	ldw	r3,8(r18)
  8080bc:	90800017 	ldw	r2,0(r18)
  8080c0:	8023883a 	mov	r17,r16
  8080c4:	1c07c83a 	sub	r3,r3,r16
  8080c8:	1405883a 	add	r2,r2,r16
  8080cc:	90c00215 	stw	r3,8(r18)
  8080d0:	90800015 	stw	r2,0(r18)
  8080d4:	003fc406 	br	807fe8 <__sfvwrite_r+0x2d0>
  8080d8:	a00d883a 	mov	r6,r20
  8080dc:	a021883a 	mov	r16,r20
  8080e0:	003f8106 	br	807ee8 <__sfvwrite_r+0x1d0>
  8080e4:	b80b883a 	mov	r5,r23
  8080e8:	a00d883a 	mov	r6,r20
  8080ec:	0808e500 	call	808e50 <memmove>
  8080f0:	90c00217 	ldw	r3,8(r18)
  8080f4:	90800017 	ldw	r2,0(r18)
  8080f8:	a021883a 	mov	r16,r20
  8080fc:	1d07c83a 	sub	r3,r3,r20
  808100:	1505883a 	add	r2,r2,r20
  808104:	a023883a 	mov	r17,r20
  808108:	a027883a 	mov	r19,r20
  80810c:	90c00215 	stw	r3,8(r18)
  808110:	90800015 	stw	r2,0(r18)
  808114:	003f8006 	br	807f18 <__sfvwrite_r+0x200>
  808118:	b809883a 	mov	r4,r23
  80811c:	01400284 	movi	r5,10
  808120:	980d883a 	mov	r6,r19
  808124:	0808ccc0 	call	808ccc <memchr>
  808128:	10001726 	beq	r2,zero,808188 <__sfvwrite_r+0x470>
  80812c:	15c5c83a 	sub	r2,r2,r23
  808130:	15000044 	addi	r20,r2,1
  808134:	00800044 	movi	r2,1
  808138:	d8800015 	stw	r2,0(sp)
  80813c:	003f9806 	br	807fa0 <__sfvwrite_r+0x288>
  808140:	b80b883a 	mov	r5,r23
  808144:	800d883a 	mov	r6,r16
  808148:	0808e500 	call	808e50 <memmove>
  80814c:	90c00017 	ldw	r3,0(r18)
  808150:	e009883a 	mov	r4,fp
  808154:	900b883a 	mov	r5,r18
  808158:	1c07883a 	add	r3,r3,r16
  80815c:	90c00015 	stw	r3,0(r18)
  808160:	8027883a 	mov	r19,r16
  808164:	08073e80 	call	8073e8 <_fflush_r>
  808168:	103f6b26 	beq	r2,zero,807f18 <__sfvwrite_r+0x200>
  80816c:	003f7f06 	br	807f6c <__sfvwrite_r+0x254>
  808170:	400b883a 	mov	r5,r8
  808174:	e009883a 	mov	r4,fp
  808178:	0809fbc0 	call	809fbc <_realloc_r>
  80817c:	103f7626 	beq	r2,zero,807f58 <__sfvwrite_r+0x240>
  808180:	1023883a 	mov	r17,r2
  808184:	003f5006 	br	807ec8 <__sfvwrite_r+0x1b0>
  808188:	00c00044 	movi	r3,1
  80818c:	9d000044 	addi	r20,r19,1
  808190:	d8c00015 	stw	r3,0(sp)
  808194:	003f8206 	br	807fa0 <__sfvwrite_r+0x288>
  808198:	9080030b 	ldhu	r2,12(r18)
  80819c:	00c00244 	movi	r3,9
  8081a0:	013fffc4 	movi	r4,-1
  8081a4:	10801014 	ori	r2,r2,64
  8081a8:	9080030d 	sth	r2,12(r18)
  8081ac:	e0c00015 	stw	r3,0(fp)
  8081b0:	003f0606 	br	807dcc <__sfvwrite_r+0xb4>

008081b4 <_fwalk_reent>:
  8081b4:	defff704 	addi	sp,sp,-36
  8081b8:	dcc00315 	stw	r19,12(sp)
  8081bc:	24c0b804 	addi	r19,r4,736
  8081c0:	dd800615 	stw	r22,24(sp)
  8081c4:	dd400515 	stw	r21,20(sp)
  8081c8:	dfc00815 	stw	ra,32(sp)
  8081cc:	ddc00715 	stw	r23,28(sp)
  8081d0:	dd000415 	stw	r20,16(sp)
  8081d4:	dc800215 	stw	r18,8(sp)
  8081d8:	dc400115 	stw	r17,4(sp)
  8081dc:	dc000015 	stw	r16,0(sp)
  8081e0:	202b883a 	mov	r21,r4
  8081e4:	282d883a 	mov	r22,r5
  8081e8:	08076700 	call	807670 <__sfp_lock_acquire>
  8081ec:	98002126 	beq	r19,zero,808274 <_fwalk_reent+0xc0>
  8081f0:	002f883a 	mov	r23,zero
  8081f4:	9c800117 	ldw	r18,4(r19)
  8081f8:	9c000217 	ldw	r16,8(r19)
  8081fc:	90bfffc4 	addi	r2,r18,-1
  808200:	10000d16 	blt	r2,zero,808238 <_fwalk_reent+0x84>
  808204:	0023883a 	mov	r17,zero
  808208:	053fffc4 	movi	r20,-1
  80820c:	8080030f 	ldh	r2,12(r16)
  808210:	8c400044 	addi	r17,r17,1
  808214:	10000626 	beq	r2,zero,808230 <_fwalk_reent+0x7c>
  808218:	8080038f 	ldh	r2,14(r16)
  80821c:	800b883a 	mov	r5,r16
  808220:	a809883a 	mov	r4,r21
  808224:	15000226 	beq	r2,r20,808230 <_fwalk_reent+0x7c>
  808228:	b03ee83a 	callr	r22
  80822c:	b8aeb03a 	or	r23,r23,r2
  808230:	84001704 	addi	r16,r16,92
  808234:	947ff51e 	bne	r18,r17,80820c <_fwalk_reent+0x58>
  808238:	9cc00017 	ldw	r19,0(r19)
  80823c:	983fed1e 	bne	r19,zero,8081f4 <_fwalk_reent+0x40>
  808240:	08076740 	call	807674 <__sfp_lock_release>
  808244:	b805883a 	mov	r2,r23
  808248:	dfc00817 	ldw	ra,32(sp)
  80824c:	ddc00717 	ldw	r23,28(sp)
  808250:	dd800617 	ldw	r22,24(sp)
  808254:	dd400517 	ldw	r21,20(sp)
  808258:	dd000417 	ldw	r20,16(sp)
  80825c:	dcc00317 	ldw	r19,12(sp)
  808260:	dc800217 	ldw	r18,8(sp)
  808264:	dc400117 	ldw	r17,4(sp)
  808268:	dc000017 	ldw	r16,0(sp)
  80826c:	dec00904 	addi	sp,sp,36
  808270:	f800283a 	ret
  808274:	002f883a 	mov	r23,zero
  808278:	003ff106 	br	808240 <_fwalk_reent+0x8c>

0080827c <_fwalk>:
  80827c:	defff804 	addi	sp,sp,-32
  808280:	dcc00315 	stw	r19,12(sp)
  808284:	24c0b804 	addi	r19,r4,736
  808288:	dd400515 	stw	r21,20(sp)
  80828c:	dfc00715 	stw	ra,28(sp)
  808290:	dd800615 	stw	r22,24(sp)
  808294:	dd000415 	stw	r20,16(sp)
  808298:	dc800215 	stw	r18,8(sp)
  80829c:	dc400115 	stw	r17,4(sp)
  8082a0:	dc000015 	stw	r16,0(sp)
  8082a4:	282b883a 	mov	r21,r5
  8082a8:	08076700 	call	807670 <__sfp_lock_acquire>
  8082ac:	98001f26 	beq	r19,zero,80832c <_fwalk+0xb0>
  8082b0:	002d883a 	mov	r22,zero
  8082b4:	9c800117 	ldw	r18,4(r19)
  8082b8:	9c000217 	ldw	r16,8(r19)
  8082bc:	90bfffc4 	addi	r2,r18,-1
  8082c0:	10000c16 	blt	r2,zero,8082f4 <_fwalk+0x78>
  8082c4:	0023883a 	mov	r17,zero
  8082c8:	053fffc4 	movi	r20,-1
  8082cc:	8080030f 	ldh	r2,12(r16)
  8082d0:	8c400044 	addi	r17,r17,1
  8082d4:	10000526 	beq	r2,zero,8082ec <_fwalk+0x70>
  8082d8:	8080038f 	ldh	r2,14(r16)
  8082dc:	8009883a 	mov	r4,r16
  8082e0:	15000226 	beq	r2,r20,8082ec <_fwalk+0x70>
  8082e4:	a83ee83a 	callr	r21
  8082e8:	b0acb03a 	or	r22,r22,r2
  8082ec:	84001704 	addi	r16,r16,92
  8082f0:	947ff61e 	bne	r18,r17,8082cc <_fwalk+0x50>
  8082f4:	9cc00017 	ldw	r19,0(r19)
  8082f8:	983fee1e 	bne	r19,zero,8082b4 <_fwalk+0x38>
  8082fc:	08076740 	call	807674 <__sfp_lock_release>
  808300:	b005883a 	mov	r2,r22
  808304:	dfc00717 	ldw	ra,28(sp)
  808308:	dd800617 	ldw	r22,24(sp)
  80830c:	dd400517 	ldw	r21,20(sp)
  808310:	dd000417 	ldw	r20,16(sp)
  808314:	dcc00317 	ldw	r19,12(sp)
  808318:	dc800217 	ldw	r18,8(sp)
  80831c:	dc400117 	ldw	r17,4(sp)
  808320:	dc000017 	ldw	r16,0(sp)
  808324:	dec00804 	addi	sp,sp,32
  808328:	f800283a 	ret
  80832c:	002d883a 	mov	r22,zero
  808330:	003ff206 	br	8082fc <_fwalk+0x80>

00808334 <__locale_charset>:
  808334:	d0a00417 	ldw	r2,-32752(gp)
  808338:	f800283a 	ret

0080833c <_localeconv_r>:
  80833c:	008020b4 	movhi	r2,130
  808340:	10b18304 	addi	r2,r2,-14836
  808344:	f800283a 	ret

00808348 <localeconv>:
  808348:	008020b4 	movhi	r2,130
  80834c:	10b8ef04 	addi	r2,r2,-7236
  808350:	11000017 	ldw	r4,0(r2)
  808354:	080833c1 	jmpi	80833c <_localeconv_r>

00808358 <_setlocale_r>:
  808358:	defffc04 	addi	sp,sp,-16
  80835c:	00c020b4 	movhi	r3,130
  808360:	18f15904 	addi	r3,r3,-15004
  808364:	dc800215 	stw	r18,8(sp)
  808368:	dc400115 	stw	r17,4(sp)
  80836c:	dc000015 	stw	r16,0(sp)
  808370:	2023883a 	mov	r17,r4
  808374:	2825883a 	mov	r18,r5
  808378:	dfc00315 	stw	ra,12(sp)
  80837c:	3021883a 	mov	r16,r6
  808380:	3009883a 	mov	r4,r6
  808384:	180b883a 	mov	r5,r3
  808388:	30000926 	beq	r6,zero,8083b0 <_setlocale_r+0x58>
  80838c:	080a7ac0 	call	80a7ac <strcmp>
  808390:	8009883a 	mov	r4,r16
  808394:	014020b4 	movhi	r5,130
  808398:	29716a04 	addi	r5,r5,-14936
  80839c:	10000b1e 	bne	r2,zero,8083cc <_setlocale_r+0x74>
  8083a0:	8c000d15 	stw	r16,52(r17)
  8083a4:	8c800c15 	stw	r18,48(r17)
  8083a8:	00c020b4 	movhi	r3,130
  8083ac:	18f15904 	addi	r3,r3,-15004
  8083b0:	1805883a 	mov	r2,r3
  8083b4:	dfc00317 	ldw	ra,12(sp)
  8083b8:	dc800217 	ldw	r18,8(sp)
  8083bc:	dc400117 	ldw	r17,4(sp)
  8083c0:	dc000017 	ldw	r16,0(sp)
  8083c4:	dec00404 	addi	sp,sp,16
  8083c8:	f800283a 	ret
  8083cc:	080a7ac0 	call	80a7ac <strcmp>
  8083d0:	0007883a 	mov	r3,zero
  8083d4:	103ff226 	beq	r2,zero,8083a0 <_setlocale_r+0x48>
  8083d8:	003ff506 	br	8083b0 <_setlocale_r+0x58>

008083dc <setlocale>:
  8083dc:	018020b4 	movhi	r6,130
  8083e0:	31b8ef04 	addi	r6,r6,-7236
  8083e4:	2007883a 	mov	r3,r4
  8083e8:	31000017 	ldw	r4,0(r6)
  8083ec:	280d883a 	mov	r6,r5
  8083f0:	180b883a 	mov	r5,r3
  8083f4:	08083581 	jmpi	808358 <_setlocale_r>

008083f8 <__smakebuf_r>:
  8083f8:	2880030b 	ldhu	r2,12(r5)
  8083fc:	deffed04 	addi	sp,sp,-76
  808400:	dc401015 	stw	r17,64(sp)
  808404:	1080008c 	andi	r2,r2,2
  808408:	dc000f15 	stw	r16,60(sp)
  80840c:	dfc01215 	stw	ra,72(sp)
  808410:	dc801115 	stw	r18,68(sp)
  808414:	2821883a 	mov	r16,r5
  808418:	2023883a 	mov	r17,r4
  80841c:	10000b26 	beq	r2,zero,80844c <__smakebuf_r+0x54>
  808420:	28c010c4 	addi	r3,r5,67
  808424:	00800044 	movi	r2,1
  808428:	28800515 	stw	r2,20(r5)
  80842c:	28c00415 	stw	r3,16(r5)
  808430:	28c00015 	stw	r3,0(r5)
  808434:	dfc01217 	ldw	ra,72(sp)
  808438:	dc801117 	ldw	r18,68(sp)
  80843c:	dc401017 	ldw	r17,64(sp)
  808440:	dc000f17 	ldw	r16,60(sp)
  808444:	dec01304 	addi	sp,sp,76
  808448:	f800283a 	ret
  80844c:	2940038f 	ldh	r5,14(r5)
  808450:	28002116 	blt	r5,zero,8084d8 <__smakebuf_r+0xe0>
  808454:	d80d883a 	mov	r6,sp
  808458:	080ab280 	call	80ab28 <_fstat_r>
  80845c:	10001e16 	blt	r2,zero,8084d8 <__smakebuf_r+0xe0>
  808460:	d8800117 	ldw	r2,4(sp)
  808464:	00e00014 	movui	r3,32768
  808468:	113c000c 	andi	r4,r2,61440
  80846c:	20c03126 	beq	r4,r3,808534 <__smakebuf_r+0x13c>
  808470:	8080030b 	ldhu	r2,12(r16)
  808474:	00c80004 	movi	r3,8192
  808478:	10820014 	ori	r2,r2,2048
  80847c:	8080030d 	sth	r2,12(r16)
  808480:	20c01e26 	beq	r4,r3,8084fc <__smakebuf_r+0x104>
  808484:	04810004 	movi	r18,1024
  808488:	8809883a 	mov	r4,r17
  80848c:	900b883a 	mov	r5,r18
  808490:	080858c0 	call	80858c <_malloc_r>
  808494:	1009883a 	mov	r4,r2
  808498:	10003126 	beq	r2,zero,808560 <__smakebuf_r+0x168>
  80849c:	80c0030b 	ldhu	r3,12(r16)
  8084a0:	00802034 	movhi	r2,128
  8084a4:	109dd904 	addi	r2,r2,30564
  8084a8:	88800f15 	stw	r2,60(r17)
  8084ac:	18c02014 	ori	r3,r3,128
  8084b0:	84800515 	stw	r18,20(r16)
  8084b4:	80c0030d 	sth	r3,12(r16)
  8084b8:	81000415 	stw	r4,16(r16)
  8084bc:	81000015 	stw	r4,0(r16)
  8084c0:	dfc01217 	ldw	ra,72(sp)
  8084c4:	dc801117 	ldw	r18,68(sp)
  8084c8:	dc401017 	ldw	r17,64(sp)
  8084cc:	dc000f17 	ldw	r16,60(sp)
  8084d0:	dec01304 	addi	sp,sp,76
  8084d4:	f800283a 	ret
  8084d8:	80c0030b 	ldhu	r3,12(r16)
  8084dc:	1880200c 	andi	r2,r3,128
  8084e0:	10000426 	beq	r2,zero,8084f4 <__smakebuf_r+0xfc>
  8084e4:	04801004 	movi	r18,64
  8084e8:	18820014 	ori	r2,r3,2048
  8084ec:	8080030d 	sth	r2,12(r16)
  8084f0:	003fe506 	br	808488 <__smakebuf_r+0x90>
  8084f4:	04810004 	movi	r18,1024
  8084f8:	003ffb06 	br	8084e8 <__smakebuf_r+0xf0>
  8084fc:	8140038f 	ldh	r5,14(r16)
  808500:	8809883a 	mov	r4,r17
  808504:	080ab9c0 	call	80ab9c <_isatty_r>
  808508:	103fde26 	beq	r2,zero,808484 <__smakebuf_r+0x8c>
  80850c:	8080030b 	ldhu	r2,12(r16)
  808510:	80c010c4 	addi	r3,r16,67
  808514:	04810004 	movi	r18,1024
  808518:	10800054 	ori	r2,r2,1
  80851c:	8080030d 	sth	r2,12(r16)
  808520:	00800044 	movi	r2,1
  808524:	80c00415 	stw	r3,16(r16)
  808528:	80800515 	stw	r2,20(r16)
  80852c:	80c00015 	stw	r3,0(r16)
  808530:	003fd506 	br	808488 <__smakebuf_r+0x90>
  808534:	80c00a17 	ldw	r3,40(r16)
  808538:	00802074 	movhi	r2,129
  80853c:	10a99a04 	addi	r2,r2,-22936
  808540:	18bfcb1e 	bne	r3,r2,808470 <__smakebuf_r+0x78>
  808544:	8080030b 	ldhu	r2,12(r16)
  808548:	00c10004 	movi	r3,1024
  80854c:	1825883a 	mov	r18,r3
  808550:	10c4b03a 	or	r2,r2,r3
  808554:	8080030d 	sth	r2,12(r16)
  808558:	80c01315 	stw	r3,76(r16)
  80855c:	003fca06 	br	808488 <__smakebuf_r+0x90>
  808560:	8100030b 	ldhu	r4,12(r16)
  808564:	2080800c 	andi	r2,r4,512
  808568:	103fb21e 	bne	r2,zero,808434 <__smakebuf_r+0x3c>
  80856c:	80c010c4 	addi	r3,r16,67
  808570:	21000094 	ori	r4,r4,2
  808574:	00800044 	movi	r2,1
  808578:	80800515 	stw	r2,20(r16)
  80857c:	8100030d 	sth	r4,12(r16)
  808580:	80c00415 	stw	r3,16(r16)
  808584:	80c00015 	stw	r3,0(r16)
  808588:	003faa06 	br	808434 <__smakebuf_r+0x3c>

0080858c <_malloc_r>:
  80858c:	defff604 	addi	sp,sp,-40
  808590:	28c002c4 	addi	r3,r5,11
  808594:	00800584 	movi	r2,22
  808598:	dc800215 	stw	r18,8(sp)
  80859c:	dfc00915 	stw	ra,36(sp)
  8085a0:	df000815 	stw	fp,32(sp)
  8085a4:	ddc00715 	stw	r23,28(sp)
  8085a8:	dd800615 	stw	r22,24(sp)
  8085ac:	dd400515 	stw	r21,20(sp)
  8085b0:	dd000415 	stw	r20,16(sp)
  8085b4:	dcc00315 	stw	r19,12(sp)
  8085b8:	dc400115 	stw	r17,4(sp)
  8085bc:	dc000015 	stw	r16,0(sp)
  8085c0:	2025883a 	mov	r18,r4
  8085c4:	10c01236 	bltu	r2,r3,808610 <_malloc_r+0x84>
  8085c8:	04400404 	movi	r17,16
  8085cc:	8940142e 	bgeu	r17,r5,808620 <_malloc_r+0x94>
  8085d0:	00800304 	movi	r2,12
  8085d4:	0007883a 	mov	r3,zero
  8085d8:	90800015 	stw	r2,0(r18)
  8085dc:	1805883a 	mov	r2,r3
  8085e0:	dfc00917 	ldw	ra,36(sp)
  8085e4:	df000817 	ldw	fp,32(sp)
  8085e8:	ddc00717 	ldw	r23,28(sp)
  8085ec:	dd800617 	ldw	r22,24(sp)
  8085f0:	dd400517 	ldw	r21,20(sp)
  8085f4:	dd000417 	ldw	r20,16(sp)
  8085f8:	dcc00317 	ldw	r19,12(sp)
  8085fc:	dc800217 	ldw	r18,8(sp)
  808600:	dc400117 	ldw	r17,4(sp)
  808604:	dc000017 	ldw	r16,0(sp)
  808608:	dec00a04 	addi	sp,sp,40
  80860c:	f800283a 	ret
  808610:	00bffe04 	movi	r2,-8
  808614:	18a2703a 	and	r17,r3,r2
  808618:	883fed16 	blt	r17,zero,8085d0 <_malloc_r+0x44>
  80861c:	897fec36 	bltu	r17,r5,8085d0 <_malloc_r+0x44>
  808620:	9009883a 	mov	r4,r18
  808624:	080c7700 	call	80c770 <__malloc_lock>
  808628:	00807dc4 	movi	r2,503
  80862c:	14402b2e 	bgeu	r2,r17,8086dc <_malloc_r+0x150>
  808630:	8806d27a 	srli	r3,r17,9
  808634:	18003f1e 	bne	r3,zero,808734 <_malloc_r+0x1a8>
  808638:	880cd0fa 	srli	r6,r17,3
  80863c:	300490fa 	slli	r2,r6,3
  808640:	02c020b4 	movhi	r11,130
  808644:	5af34604 	addi	r11,r11,-13032
  808648:	12cb883a 	add	r5,r2,r11
  80864c:	2c000317 	ldw	r16,12(r5)
  808650:	580f883a 	mov	r7,r11
  808654:	2c00041e 	bne	r5,r16,808668 <_malloc_r+0xdc>
  808658:	00000a06 	br	808684 <_malloc_r+0xf8>
  80865c:	1800860e 	bge	r3,zero,808878 <_malloc_r+0x2ec>
  808660:	84000317 	ldw	r16,12(r16)
  808664:	2c000726 	beq	r5,r16,808684 <_malloc_r+0xf8>
  808668:	80800117 	ldw	r2,4(r16)
  80866c:	00ffff04 	movi	r3,-4
  808670:	10c8703a 	and	r4,r2,r3
  808674:	2447c83a 	sub	r3,r4,r17
  808678:	008003c4 	movi	r2,15
  80867c:	10fff70e 	bge	r2,r3,80865c <_malloc_r+0xd0>
  808680:	31bfffc4 	addi	r6,r6,-1
  808684:	32400044 	addi	r9,r6,1
  808688:	028020b4 	movhi	r10,130
  80868c:	52b34804 	addi	r10,r10,-13024
  808690:	54000217 	ldw	r16,8(r10)
  808694:	8280a026 	beq	r16,r10,808918 <_malloc_r+0x38c>
  808698:	80800117 	ldw	r2,4(r16)
  80869c:	00ffff04 	movi	r3,-4
  8086a0:	10ca703a 	and	r5,r2,r3
  8086a4:	2c4dc83a 	sub	r6,r5,r17
  8086a8:	008003c4 	movi	r2,15
  8086ac:	11808316 	blt	r2,r6,8088bc <_malloc_r+0x330>
  8086b0:	52800315 	stw	r10,12(r10)
  8086b4:	52800215 	stw	r10,8(r10)
  8086b8:	30002916 	blt	r6,zero,808760 <_malloc_r+0x1d4>
  8086bc:	8147883a 	add	r3,r16,r5
  8086c0:	18800117 	ldw	r2,4(r3)
  8086c4:	9009883a 	mov	r4,r18
  8086c8:	10800054 	ori	r2,r2,1
  8086cc:	18800115 	stw	r2,4(r3)
  8086d0:	080c8780 	call	80c878 <__malloc_unlock>
  8086d4:	80c00204 	addi	r3,r16,8
  8086d8:	003fc006 	br	8085dc <_malloc_r+0x50>
  8086dc:	02c020b4 	movhi	r11,130
  8086e0:	5af34604 	addi	r11,r11,-13032
  8086e4:	8ac5883a 	add	r2,r17,r11
  8086e8:	14000317 	ldw	r16,12(r2)
  8086ec:	580f883a 	mov	r7,r11
  8086f0:	8806d0fa 	srli	r3,r17,3
  8086f4:	14006c26 	beq	r2,r16,8088a8 <_malloc_r+0x31c>
  8086f8:	80c00117 	ldw	r3,4(r16)
  8086fc:	00bfff04 	movi	r2,-4
  808700:	81800317 	ldw	r6,12(r16)
  808704:	1886703a 	and	r3,r3,r2
  808708:	80c7883a 	add	r3,r16,r3
  80870c:	18800117 	ldw	r2,4(r3)
  808710:	81400217 	ldw	r5,8(r16)
  808714:	9009883a 	mov	r4,r18
  808718:	10800054 	ori	r2,r2,1
  80871c:	18800115 	stw	r2,4(r3)
  808720:	31400215 	stw	r5,8(r6)
  808724:	29800315 	stw	r6,12(r5)
  808728:	080c8780 	call	80c878 <__malloc_unlock>
  80872c:	80c00204 	addi	r3,r16,8
  808730:	003faa06 	br	8085dc <_malloc_r+0x50>
  808734:	00800104 	movi	r2,4
  808738:	10c0052e 	bgeu	r2,r3,808750 <_malloc_r+0x1c4>
  80873c:	00800504 	movi	r2,20
  808740:	10c07836 	bltu	r2,r3,808924 <_malloc_r+0x398>
  808744:	198016c4 	addi	r6,r3,91
  808748:	300490fa 	slli	r2,r6,3
  80874c:	003fbc06 	br	808640 <_malloc_r+0xb4>
  808750:	8804d1ba 	srli	r2,r17,6
  808754:	11800e04 	addi	r6,r2,56
  808758:	300490fa 	slli	r2,r6,3
  80875c:	003fb806 	br	808640 <_malloc_r+0xb4>
  808760:	00807fc4 	movi	r2,511
  808764:	1140bb36 	bltu	r2,r5,808a54 <_malloc_r+0x4c8>
  808768:	2806d0fa 	srli	r3,r5,3
  80876c:	573ffe04 	addi	fp,r10,-8
  808770:	00800044 	movi	r2,1
  808774:	180890fa 	slli	r4,r3,3
  808778:	1807d0ba 	srai	r3,r3,2
  80877c:	e1c00117 	ldw	r7,4(fp)
  808780:	5909883a 	add	r4,r11,r4
  808784:	21400217 	ldw	r5,8(r4)
  808788:	10c4983a 	sll	r2,r2,r3
  80878c:	81000315 	stw	r4,12(r16)
  808790:	81400215 	stw	r5,8(r16)
  808794:	388eb03a 	or	r7,r7,r2
  808798:	2c000315 	stw	r16,12(r5)
  80879c:	24000215 	stw	r16,8(r4)
  8087a0:	e1c00115 	stw	r7,4(fp)
  8087a4:	4807883a 	mov	r3,r9
  8087a8:	4800cd16 	blt	r9,zero,808ae0 <_malloc_r+0x554>
  8087ac:	1807d0ba 	srai	r3,r3,2
  8087b0:	00800044 	movi	r2,1
  8087b4:	10c8983a 	sll	r4,r2,r3
  8087b8:	39004436 	bltu	r7,r4,8088cc <_malloc_r+0x340>
  8087bc:	21c4703a 	and	r2,r4,r7
  8087c0:	10000a1e 	bne	r2,zero,8087ec <_malloc_r+0x260>
  8087c4:	2109883a 	add	r4,r4,r4
  8087c8:	00bfff04 	movi	r2,-4
  8087cc:	4884703a 	and	r2,r9,r2
  8087d0:	3906703a 	and	r3,r7,r4
  8087d4:	12400104 	addi	r9,r2,4
  8087d8:	1800041e 	bne	r3,zero,8087ec <_malloc_r+0x260>
  8087dc:	2109883a 	add	r4,r4,r4
  8087e0:	3904703a 	and	r2,r7,r4
  8087e4:	4a400104 	addi	r9,r9,4
  8087e8:	103ffc26 	beq	r2,zero,8087dc <_malloc_r+0x250>
  8087ec:	480490fa 	slli	r2,r9,3
  8087f0:	4819883a 	mov	r12,r9
  8087f4:	023fff04 	movi	r8,-4
  8087f8:	589b883a 	add	r13,r11,r2
  8087fc:	6807883a 	mov	r3,r13
  808800:	014003c4 	movi	r5,15
  808804:	1c000317 	ldw	r16,12(r3)
  808808:	1c00041e 	bne	r3,r16,80881c <_malloc_r+0x290>
  80880c:	0000a706 	br	808aac <_malloc_r+0x520>
  808810:	3000ab0e 	bge	r6,zero,808ac0 <_malloc_r+0x534>
  808814:	84000317 	ldw	r16,12(r16)
  808818:	1c00a426 	beq	r3,r16,808aac <_malloc_r+0x520>
  80881c:	80800117 	ldw	r2,4(r16)
  808820:	1204703a 	and	r2,r2,r8
  808824:	144dc83a 	sub	r6,r2,r17
  808828:	29bff90e 	bge	r5,r6,808810 <_malloc_r+0x284>
  80882c:	81000317 	ldw	r4,12(r16)
  808830:	80c00217 	ldw	r3,8(r16)
  808834:	89400054 	ori	r5,r17,1
  808838:	8445883a 	add	r2,r16,r17
  80883c:	20c00215 	stw	r3,8(r4)
  808840:	19000315 	stw	r4,12(r3)
  808844:	81400115 	stw	r5,4(r16)
  808848:	1187883a 	add	r3,r2,r6
  80884c:	31000054 	ori	r4,r6,1
  808850:	50800315 	stw	r2,12(r10)
  808854:	50800215 	stw	r2,8(r10)
  808858:	19800015 	stw	r6,0(r3)
  80885c:	11000115 	stw	r4,4(r2)
  808860:	12800215 	stw	r10,8(r2)
  808864:	12800315 	stw	r10,12(r2)
  808868:	9009883a 	mov	r4,r18
  80886c:	080c8780 	call	80c878 <__malloc_unlock>
  808870:	80c00204 	addi	r3,r16,8
  808874:	003f5906 	br	8085dc <_malloc_r+0x50>
  808878:	8109883a 	add	r4,r16,r4
  80887c:	20800117 	ldw	r2,4(r4)
  808880:	80c00217 	ldw	r3,8(r16)
  808884:	81400317 	ldw	r5,12(r16)
  808888:	10800054 	ori	r2,r2,1
  80888c:	20800115 	stw	r2,4(r4)
  808890:	28c00215 	stw	r3,8(r5)
  808894:	19400315 	stw	r5,12(r3)
  808898:	9009883a 	mov	r4,r18
  80889c:	080c8780 	call	80c878 <__malloc_unlock>
  8088a0:	80c00204 	addi	r3,r16,8
  8088a4:	003f4d06 	br	8085dc <_malloc_r+0x50>
  8088a8:	80800204 	addi	r2,r16,8
  8088ac:	14000317 	ldw	r16,12(r2)
  8088b0:	143f911e 	bne	r2,r16,8086f8 <_malloc_r+0x16c>
  8088b4:	1a400084 	addi	r9,r3,2
  8088b8:	003f7306 	br	808688 <_malloc_r+0xfc>
  8088bc:	88c00054 	ori	r3,r17,1
  8088c0:	8445883a 	add	r2,r16,r17
  8088c4:	80c00115 	stw	r3,4(r16)
  8088c8:	003fdf06 	br	808848 <_malloc_r+0x2bc>
  8088cc:	e4000217 	ldw	r16,8(fp)
  8088d0:	00bfff04 	movi	r2,-4
  8088d4:	80c00117 	ldw	r3,4(r16)
  8088d8:	802d883a 	mov	r22,r16
  8088dc:	18aa703a 	and	r21,r3,r2
  8088e0:	ac401636 	bltu	r21,r17,80893c <_malloc_r+0x3b0>
  8088e4:	ac49c83a 	sub	r4,r21,r17
  8088e8:	008003c4 	movi	r2,15
  8088ec:	1100130e 	bge	r2,r4,80893c <_malloc_r+0x3b0>
  8088f0:	88800054 	ori	r2,r17,1
  8088f4:	8447883a 	add	r3,r16,r17
  8088f8:	80800115 	stw	r2,4(r16)
  8088fc:	20800054 	ori	r2,r4,1
  808900:	18800115 	stw	r2,4(r3)
  808904:	e0c00215 	stw	r3,8(fp)
  808908:	9009883a 	mov	r4,r18
  80890c:	080c8780 	call	80c878 <__malloc_unlock>
  808910:	80c00204 	addi	r3,r16,8
  808914:	003f3106 	br	8085dc <_malloc_r+0x50>
  808918:	39c00117 	ldw	r7,4(r7)
  80891c:	573ffe04 	addi	fp,r10,-8
  808920:	003fa006 	br	8087a4 <_malloc_r+0x218>
  808924:	00801504 	movi	r2,84
  808928:	10c06736 	bltu	r2,r3,808ac8 <_malloc_r+0x53c>
  80892c:	8804d33a 	srli	r2,r17,12
  808930:	11801b84 	addi	r6,r2,110
  808934:	300490fa 	slli	r2,r6,3
  808938:	003f4106 	br	808640 <_malloc_r+0xb4>
  80893c:	d0a72217 	ldw	r2,-25464(gp)
  808940:	d0e00617 	ldw	r3,-32744(gp)
  808944:	053fffc4 	movi	r20,-1
  808948:	10800404 	addi	r2,r2,16
  80894c:	88a7883a 	add	r19,r17,r2
  808950:	1d000326 	beq	r3,r20,808960 <_malloc_r+0x3d4>
  808954:	98c3ffc4 	addi	r3,r19,4095
  808958:	00bc0004 	movi	r2,-4096
  80895c:	18a6703a 	and	r19,r3,r2
  808960:	9009883a 	mov	r4,r18
  808964:	980b883a 	mov	r5,r19
  808968:	080a5f00 	call	80a5f0 <_sbrk_r>
  80896c:	1009883a 	mov	r4,r2
  808970:	15000426 	beq	r2,r20,808984 <_malloc_r+0x3f8>
  808974:	854b883a 	add	r5,r16,r21
  808978:	1029883a 	mov	r20,r2
  80897c:	11405a2e 	bgeu	r2,r5,808ae8 <_malloc_r+0x55c>
  808980:	87000c26 	beq	r16,fp,8089b4 <_malloc_r+0x428>
  808984:	e4000217 	ldw	r16,8(fp)
  808988:	80c00117 	ldw	r3,4(r16)
  80898c:	00bfff04 	movi	r2,-4
  808990:	1884703a 	and	r2,r3,r2
  808994:	14400336 	bltu	r2,r17,8089a4 <_malloc_r+0x418>
  808998:	1449c83a 	sub	r4,r2,r17
  80899c:	008003c4 	movi	r2,15
  8089a0:	113fd316 	blt	r2,r4,8088f0 <_malloc_r+0x364>
  8089a4:	9009883a 	mov	r4,r18
  8089a8:	080c8780 	call	80c878 <__malloc_unlock>
  8089ac:	0007883a 	mov	r3,zero
  8089b0:	003f0a06 	br	8085dc <_malloc_r+0x50>
  8089b4:	05c020b4 	movhi	r23,130
  8089b8:	bdc04004 	addi	r23,r23,256
  8089bc:	b8800017 	ldw	r2,0(r23)
  8089c0:	988d883a 	add	r6,r19,r2
  8089c4:	b9800015 	stw	r6,0(r23)
  8089c8:	d0e00617 	ldw	r3,-32744(gp)
  8089cc:	00bfffc4 	movi	r2,-1
  8089d0:	18808e26 	beq	r3,r2,808c0c <_malloc_r+0x680>
  8089d4:	2145c83a 	sub	r2,r4,r5
  8089d8:	3085883a 	add	r2,r6,r2
  8089dc:	b8800015 	stw	r2,0(r23)
  8089e0:	20c001cc 	andi	r3,r4,7
  8089e4:	18005f1e 	bne	r3,zero,808b64 <_malloc_r+0x5d8>
  8089e8:	000b883a 	mov	r5,zero
  8089ec:	a4c5883a 	add	r2,r20,r19
  8089f0:	1083ffcc 	andi	r2,r2,4095
  8089f4:	00c40004 	movi	r3,4096
  8089f8:	1887c83a 	sub	r3,r3,r2
  8089fc:	28e7883a 	add	r19,r5,r3
  808a00:	9009883a 	mov	r4,r18
  808a04:	980b883a 	mov	r5,r19
  808a08:	080a5f00 	call	80a5f0 <_sbrk_r>
  808a0c:	1007883a 	mov	r3,r2
  808a10:	00bfffc4 	movi	r2,-1
  808a14:	18807a26 	beq	r3,r2,808c00 <_malloc_r+0x674>
  808a18:	1d05c83a 	sub	r2,r3,r20
  808a1c:	9885883a 	add	r2,r19,r2
  808a20:	10c00054 	ori	r3,r2,1
  808a24:	b8800017 	ldw	r2,0(r23)
  808a28:	a021883a 	mov	r16,r20
  808a2c:	a0c00115 	stw	r3,4(r20)
  808a30:	9885883a 	add	r2,r19,r2
  808a34:	b8800015 	stw	r2,0(r23)
  808a38:	e5000215 	stw	r20,8(fp)
  808a3c:	b7003626 	beq	r22,fp,808b18 <_malloc_r+0x58c>
  808a40:	018003c4 	movi	r6,15
  808a44:	35404b36 	bltu	r6,r21,808b74 <_malloc_r+0x5e8>
  808a48:	00800044 	movi	r2,1
  808a4c:	a0800115 	stw	r2,4(r20)
  808a50:	003fcd06 	br	808988 <_malloc_r+0x3fc>
  808a54:	2808d27a 	srli	r4,r5,9
  808a58:	2000371e 	bne	r4,zero,808b38 <_malloc_r+0x5ac>
  808a5c:	2808d0fa 	srli	r4,r5,3
  808a60:	200690fa 	slli	r3,r4,3
  808a64:	1ad1883a 	add	r8,r3,r11
  808a68:	41800217 	ldw	r6,8(r8)
  808a6c:	41805b26 	beq	r8,r6,808bdc <_malloc_r+0x650>
  808a70:	30800117 	ldw	r2,4(r6)
  808a74:	00ffff04 	movi	r3,-4
  808a78:	10c4703a 	and	r2,r2,r3
  808a7c:	2880022e 	bgeu	r5,r2,808a88 <_malloc_r+0x4fc>
  808a80:	31800217 	ldw	r6,8(r6)
  808a84:	41bffa1e 	bne	r8,r6,808a70 <_malloc_r+0x4e4>
  808a88:	32000317 	ldw	r8,12(r6)
  808a8c:	39c00117 	ldw	r7,4(r7)
  808a90:	82000315 	stw	r8,12(r16)
  808a94:	81800215 	stw	r6,8(r16)
  808a98:	070020b4 	movhi	fp,130
  808a9c:	e7334604 	addi	fp,fp,-13032
  808aa0:	34000315 	stw	r16,12(r6)
  808aa4:	44000215 	stw	r16,8(r8)
  808aa8:	003f3e06 	br	8087a4 <_malloc_r+0x218>
  808aac:	63000044 	addi	r12,r12,1
  808ab0:	608000cc 	andi	r2,r12,3
  808ab4:	10005d26 	beq	r2,zero,808c2c <_malloc_r+0x6a0>
  808ab8:	18c00204 	addi	r3,r3,8
  808abc:	003f5106 	br	808804 <_malloc_r+0x278>
  808ac0:	8089883a 	add	r4,r16,r2
  808ac4:	003f6d06 	br	80887c <_malloc_r+0x2f0>
  808ac8:	00805504 	movi	r2,340
  808acc:	10c02036 	bltu	r2,r3,808b50 <_malloc_r+0x5c4>
  808ad0:	8804d3fa 	srli	r2,r17,15
  808ad4:	11801dc4 	addi	r6,r2,119
  808ad8:	300490fa 	slli	r2,r6,3
  808adc:	003ed806 	br	808640 <_malloc_r+0xb4>
  808ae0:	48c000c4 	addi	r3,r9,3
  808ae4:	003f3106 	br	8087ac <_malloc_r+0x220>
  808ae8:	05c020b4 	movhi	r23,130
  808aec:	bdc04004 	addi	r23,r23,256
  808af0:	b8800017 	ldw	r2,0(r23)
  808af4:	988d883a 	add	r6,r19,r2
  808af8:	b9800015 	stw	r6,0(r23)
  808afc:	293fb21e 	bne	r5,r4,8089c8 <_malloc_r+0x43c>
  808b00:	2083ffcc 	andi	r2,r4,4095
  808b04:	103fb01e 	bne	r2,zero,8089c8 <_malloc_r+0x43c>
  808b08:	e4000217 	ldw	r16,8(fp)
  808b0c:	9d45883a 	add	r2,r19,r21
  808b10:	10800054 	ori	r2,r2,1
  808b14:	80800115 	stw	r2,4(r16)
  808b18:	b8c00017 	ldw	r3,0(r23)
  808b1c:	d0a72317 	ldw	r2,-25460(gp)
  808b20:	10c0012e 	bgeu	r2,r3,808b28 <_malloc_r+0x59c>
  808b24:	d0e72315 	stw	r3,-25460(gp)
  808b28:	d0a72417 	ldw	r2,-25456(gp)
  808b2c:	10ff962e 	bgeu	r2,r3,808988 <_malloc_r+0x3fc>
  808b30:	d0e72415 	stw	r3,-25456(gp)
  808b34:	003f9406 	br	808988 <_malloc_r+0x3fc>
  808b38:	00800104 	movi	r2,4
  808b3c:	11001e36 	bltu	r2,r4,808bb8 <_malloc_r+0x62c>
  808b40:	2804d1ba 	srli	r2,r5,6
  808b44:	11000e04 	addi	r4,r2,56
  808b48:	200690fa 	slli	r3,r4,3
  808b4c:	003fc506 	br	808a64 <_malloc_r+0x4d8>
  808b50:	00815504 	movi	r2,1364
  808b54:	10c01d2e 	bgeu	r2,r3,808bcc <_malloc_r+0x640>
  808b58:	01801f84 	movi	r6,126
  808b5c:	0080fc04 	movi	r2,1008
  808b60:	003eb706 	br	808640 <_malloc_r+0xb4>
  808b64:	00800204 	movi	r2,8
  808b68:	10cbc83a 	sub	r5,r2,r3
  808b6c:	2169883a 	add	r20,r4,r5
  808b70:	003f9e06 	br	8089ec <_malloc_r+0x460>
  808b74:	00bffe04 	movi	r2,-8
  808b78:	a93ffd04 	addi	r4,r21,-12
  808b7c:	2088703a 	and	r4,r4,r2
  808b80:	b10b883a 	add	r5,r22,r4
  808b84:	00c00144 	movi	r3,5
  808b88:	28c00215 	stw	r3,8(r5)
  808b8c:	28c00115 	stw	r3,4(r5)
  808b90:	b0800117 	ldw	r2,4(r22)
  808b94:	1080004c 	andi	r2,r2,1
  808b98:	2084b03a 	or	r2,r4,r2
  808b9c:	b0800115 	stw	r2,4(r22)
  808ba0:	313fdd2e 	bgeu	r6,r4,808b18 <_malloc_r+0x58c>
  808ba4:	b1400204 	addi	r5,r22,8
  808ba8:	9009883a 	mov	r4,r18
  808bac:	0807a040 	call	807a04 <_free_r>
  808bb0:	e4000217 	ldw	r16,8(fp)
  808bb4:	003fd806 	br	808b18 <_malloc_r+0x58c>
  808bb8:	00800504 	movi	r2,20
  808bbc:	11001536 	bltu	r2,r4,808c14 <_malloc_r+0x688>
  808bc0:	210016c4 	addi	r4,r4,91
  808bc4:	200690fa 	slli	r3,r4,3
  808bc8:	003fa606 	br	808a64 <_malloc_r+0x4d8>
  808bcc:	8804d4ba 	srli	r2,r17,18
  808bd0:	11801f04 	addi	r6,r2,124
  808bd4:	300490fa 	slli	r2,r6,3
  808bd8:	003e9906 	br	808640 <_malloc_r+0xb4>
  808bdc:	2009d0ba 	srai	r4,r4,2
  808be0:	014020b4 	movhi	r5,130
  808be4:	29734604 	addi	r5,r5,-13032
  808be8:	00c00044 	movi	r3,1
  808bec:	28800117 	ldw	r2,4(r5)
  808bf0:	1906983a 	sll	r3,r3,r4
  808bf4:	10c4b03a 	or	r2,r2,r3
  808bf8:	28800115 	stw	r2,4(r5)
  808bfc:	003fa306 	br	808a8c <_malloc_r+0x500>
  808c00:	0027883a 	mov	r19,zero
  808c04:	00c00044 	movi	r3,1
  808c08:	003f8606 	br	808a24 <_malloc_r+0x498>
  808c0c:	d1200615 	stw	r4,-32744(gp)
  808c10:	003f7306 	br	8089e0 <_malloc_r+0x454>
  808c14:	00801504 	movi	r2,84
  808c18:	11001936 	bltu	r2,r4,808c80 <_malloc_r+0x6f4>
  808c1c:	2804d33a 	srli	r2,r5,12
  808c20:	11001b84 	addi	r4,r2,110
  808c24:	200690fa 	slli	r3,r4,3
  808c28:	003f8e06 	br	808a64 <_malloc_r+0x4d8>
  808c2c:	480b883a 	mov	r5,r9
  808c30:	6807883a 	mov	r3,r13
  808c34:	288000cc 	andi	r2,r5,3
  808c38:	18fffe04 	addi	r3,r3,-8
  808c3c:	297fffc4 	addi	r5,r5,-1
  808c40:	10001526 	beq	r2,zero,808c98 <_malloc_r+0x70c>
  808c44:	18800217 	ldw	r2,8(r3)
  808c48:	10fffa26 	beq	r2,r3,808c34 <_malloc_r+0x6a8>
  808c4c:	2109883a 	add	r4,r4,r4
  808c50:	393f1e36 	bltu	r7,r4,8088cc <_malloc_r+0x340>
  808c54:	203f1d26 	beq	r4,zero,8088cc <_malloc_r+0x340>
  808c58:	21c4703a 	and	r2,r4,r7
  808c5c:	10000226 	beq	r2,zero,808c68 <_malloc_r+0x6dc>
  808c60:	6013883a 	mov	r9,r12
  808c64:	003ee106 	br	8087ec <_malloc_r+0x260>
  808c68:	2109883a 	add	r4,r4,r4
  808c6c:	3904703a 	and	r2,r7,r4
  808c70:	63000104 	addi	r12,r12,4
  808c74:	103ffc26 	beq	r2,zero,808c68 <_malloc_r+0x6dc>
  808c78:	6013883a 	mov	r9,r12
  808c7c:	003edb06 	br	8087ec <_malloc_r+0x260>
  808c80:	00805504 	movi	r2,340
  808c84:	11000836 	bltu	r2,r4,808ca8 <_malloc_r+0x71c>
  808c88:	2804d3fa 	srli	r2,r5,15
  808c8c:	11001dc4 	addi	r4,r2,119
  808c90:	200690fa 	slli	r3,r4,3
  808c94:	003f7306 	br	808a64 <_malloc_r+0x4d8>
  808c98:	0104303a 	nor	r2,zero,r4
  808c9c:	388e703a 	and	r7,r7,r2
  808ca0:	e1c00115 	stw	r7,4(fp)
  808ca4:	003fe906 	br	808c4c <_malloc_r+0x6c0>
  808ca8:	00815504 	movi	r2,1364
  808cac:	1100032e 	bgeu	r2,r4,808cbc <_malloc_r+0x730>
  808cb0:	01001f84 	movi	r4,126
  808cb4:	00c0fc04 	movi	r3,1008
  808cb8:	003f6a06 	br	808a64 <_malloc_r+0x4d8>
  808cbc:	2804d4ba 	srli	r2,r5,18
  808cc0:	11001f04 	addi	r4,r2,124
  808cc4:	200690fa 	slli	r3,r4,3
  808cc8:	003f6606 	br	808a64 <_malloc_r+0x4d8>

00808ccc <memchr>:
  808ccc:	008000c4 	movi	r2,3
  808cd0:	29403fcc 	andi	r5,r5,255
  808cd4:	2007883a 	mov	r3,r4
  808cd8:	1180022e 	bgeu	r2,r6,808ce4 <memchr+0x18>
  808cdc:	2084703a 	and	r2,r4,r2
  808ce0:	10000b26 	beq	r2,zero,808d10 <memchr+0x44>
  808ce4:	313fffc4 	addi	r4,r6,-1
  808ce8:	3000051e 	bne	r6,zero,808d00 <memchr+0x34>
  808cec:	00002c06 	br	808da0 <memchr+0xd4>
  808cf0:	213fffc4 	addi	r4,r4,-1
  808cf4:	00bfffc4 	movi	r2,-1
  808cf8:	18c00044 	addi	r3,r3,1
  808cfc:	20802826 	beq	r4,r2,808da0 <memchr+0xd4>
  808d00:	18800003 	ldbu	r2,0(r3)
  808d04:	28bffa1e 	bne	r5,r2,808cf0 <memchr+0x24>
  808d08:	1805883a 	mov	r2,r3
  808d0c:	f800283a 	ret
  808d10:	0011883a 	mov	r8,zero
  808d14:	0007883a 	mov	r3,zero
  808d18:	01c00104 	movi	r7,4
  808d1c:	4004923a 	slli	r2,r8,8
  808d20:	18c00044 	addi	r3,r3,1
  808d24:	1151883a 	add	r8,r2,r5
  808d28:	19fffc1e 	bne	r3,r7,808d1c <memchr+0x50>
  808d2c:	02bfbff4 	movhi	r10,65279
  808d30:	52bfbfc4 	addi	r10,r10,-257
  808d34:	02602074 	movhi	r9,32897
  808d38:	4a602004 	addi	r9,r9,-32640
  808d3c:	02c000c4 	movi	r11,3
  808d40:	20800017 	ldw	r2,0(r4)
  808d44:	31bfff04 	addi	r6,r6,-4
  808d48:	200f883a 	mov	r7,r4
  808d4c:	1204f03a 	xor	r2,r2,r8
  808d50:	1287883a 	add	r3,r2,r10
  808d54:	1a46703a 	and	r3,r3,r9
  808d58:	0084303a 	nor	r2,zero,r2
  808d5c:	10c4703a 	and	r2,r2,r3
  808d60:	10000b26 	beq	r2,zero,808d90 <memchr+0xc4>
  808d64:	20800003 	ldbu	r2,0(r4)
  808d68:	28800f26 	beq	r5,r2,808da8 <memchr+0xdc>
  808d6c:	20800043 	ldbu	r2,1(r4)
  808d70:	21c00044 	addi	r7,r4,1
  808d74:	28800c26 	beq	r5,r2,808da8 <memchr+0xdc>
  808d78:	20800083 	ldbu	r2,2(r4)
  808d7c:	21c00084 	addi	r7,r4,2
  808d80:	28800926 	beq	r5,r2,808da8 <memchr+0xdc>
  808d84:	208000c3 	ldbu	r2,3(r4)
  808d88:	21c000c4 	addi	r7,r4,3
  808d8c:	28800626 	beq	r5,r2,808da8 <memchr+0xdc>
  808d90:	21000104 	addi	r4,r4,4
  808d94:	59bfea36 	bltu	r11,r6,808d40 <memchr+0x74>
  808d98:	2007883a 	mov	r3,r4
  808d9c:	003fd106 	br	808ce4 <memchr+0x18>
  808da0:	0005883a 	mov	r2,zero
  808da4:	f800283a 	ret
  808da8:	3805883a 	mov	r2,r7
  808dac:	f800283a 	ret

00808db0 <memcpy>:
  808db0:	01c003c4 	movi	r7,15
  808db4:	2007883a 	mov	r3,r4
  808db8:	3980032e 	bgeu	r7,r6,808dc8 <memcpy+0x18>
  808dbc:	2904b03a 	or	r2,r5,r4
  808dc0:	108000cc 	andi	r2,r2,3
  808dc4:	10000926 	beq	r2,zero,808dec <memcpy+0x3c>
  808dc8:	30000626 	beq	r6,zero,808de4 <memcpy+0x34>
  808dcc:	30cd883a 	add	r6,r6,r3
  808dd0:	28800003 	ldbu	r2,0(r5)
  808dd4:	29400044 	addi	r5,r5,1
  808dd8:	18800005 	stb	r2,0(r3)
  808ddc:	18c00044 	addi	r3,r3,1
  808de0:	30fffb1e 	bne	r6,r3,808dd0 <memcpy+0x20>
  808de4:	2005883a 	mov	r2,r4
  808de8:	f800283a 	ret
  808dec:	3811883a 	mov	r8,r7
  808df0:	200f883a 	mov	r7,r4
  808df4:	28c00017 	ldw	r3,0(r5)
  808df8:	31bffc04 	addi	r6,r6,-16
  808dfc:	38c00015 	stw	r3,0(r7)
  808e00:	28800117 	ldw	r2,4(r5)
  808e04:	38800115 	stw	r2,4(r7)
  808e08:	28c00217 	ldw	r3,8(r5)
  808e0c:	38c00215 	stw	r3,8(r7)
  808e10:	28800317 	ldw	r2,12(r5)
  808e14:	29400404 	addi	r5,r5,16
  808e18:	38800315 	stw	r2,12(r7)
  808e1c:	39c00404 	addi	r7,r7,16
  808e20:	41bff436 	bltu	r8,r6,808df4 <memcpy+0x44>
  808e24:	008000c4 	movi	r2,3
  808e28:	1180072e 	bgeu	r2,r6,808e48 <memcpy+0x98>
  808e2c:	1007883a 	mov	r3,r2
  808e30:	28800017 	ldw	r2,0(r5)
  808e34:	31bfff04 	addi	r6,r6,-4
  808e38:	29400104 	addi	r5,r5,4
  808e3c:	38800015 	stw	r2,0(r7)
  808e40:	39c00104 	addi	r7,r7,4
  808e44:	19bffa36 	bltu	r3,r6,808e30 <memcpy+0x80>
  808e48:	3807883a 	mov	r3,r7
  808e4c:	003fde06 	br	808dc8 <memcpy+0x18>

00808e50 <memmove>:
  808e50:	2807883a 	mov	r3,r5
  808e54:	2011883a 	mov	r8,r4
  808e58:	29000c2e 	bgeu	r5,r4,808e8c <memmove+0x3c>
  808e5c:	298f883a 	add	r7,r5,r6
  808e60:	21c00a2e 	bgeu	r4,r7,808e8c <memmove+0x3c>
  808e64:	30000726 	beq	r6,zero,808e84 <memmove+0x34>
  808e68:	2187883a 	add	r3,r4,r6
  808e6c:	198dc83a 	sub	r6,r3,r6
  808e70:	39ffffc4 	addi	r7,r7,-1
  808e74:	38800003 	ldbu	r2,0(r7)
  808e78:	18ffffc4 	addi	r3,r3,-1
  808e7c:	18800005 	stb	r2,0(r3)
  808e80:	19bffb1e 	bne	r3,r6,808e70 <memmove+0x20>
  808e84:	2005883a 	mov	r2,r4
  808e88:	f800283a 	ret
  808e8c:	01c003c4 	movi	r7,15
  808e90:	39800a36 	bltu	r7,r6,808ebc <memmove+0x6c>
  808e94:	303ffb26 	beq	r6,zero,808e84 <memmove+0x34>
  808e98:	400f883a 	mov	r7,r8
  808e9c:	320d883a 	add	r6,r6,r8
  808ea0:	28800003 	ldbu	r2,0(r5)
  808ea4:	29400044 	addi	r5,r5,1
  808ea8:	38800005 	stb	r2,0(r7)
  808eac:	39c00044 	addi	r7,r7,1
  808eb0:	39bffb1e 	bne	r7,r6,808ea0 <memmove+0x50>
  808eb4:	2005883a 	mov	r2,r4
  808eb8:	f800283a 	ret
  808ebc:	1904b03a 	or	r2,r3,r4
  808ec0:	108000cc 	andi	r2,r2,3
  808ec4:	103ff31e 	bne	r2,zero,808e94 <memmove+0x44>
  808ec8:	3811883a 	mov	r8,r7
  808ecc:	180b883a 	mov	r5,r3
  808ed0:	200f883a 	mov	r7,r4
  808ed4:	28c00017 	ldw	r3,0(r5)
  808ed8:	31bffc04 	addi	r6,r6,-16
  808edc:	38c00015 	stw	r3,0(r7)
  808ee0:	28800117 	ldw	r2,4(r5)
  808ee4:	38800115 	stw	r2,4(r7)
  808ee8:	28c00217 	ldw	r3,8(r5)
  808eec:	38c00215 	stw	r3,8(r7)
  808ef0:	28800317 	ldw	r2,12(r5)
  808ef4:	29400404 	addi	r5,r5,16
  808ef8:	38800315 	stw	r2,12(r7)
  808efc:	39c00404 	addi	r7,r7,16
  808f00:	41bff436 	bltu	r8,r6,808ed4 <memmove+0x84>
  808f04:	008000c4 	movi	r2,3
  808f08:	1180072e 	bgeu	r2,r6,808f28 <memmove+0xd8>
  808f0c:	1007883a 	mov	r3,r2
  808f10:	28800017 	ldw	r2,0(r5)
  808f14:	31bfff04 	addi	r6,r6,-4
  808f18:	29400104 	addi	r5,r5,4
  808f1c:	38800015 	stw	r2,0(r7)
  808f20:	39c00104 	addi	r7,r7,4
  808f24:	19bffa36 	bltu	r3,r6,808f10 <memmove+0xc0>
  808f28:	3811883a 	mov	r8,r7
  808f2c:	003fd906 	br	808e94 <memmove+0x44>

00808f30 <memset>:
  808f30:	008000c4 	movi	r2,3
  808f34:	29403fcc 	andi	r5,r5,255
  808f38:	2007883a 	mov	r3,r4
  808f3c:	1180022e 	bgeu	r2,r6,808f48 <memset+0x18>
  808f40:	2084703a 	and	r2,r4,r2
  808f44:	10000826 	beq	r2,zero,808f68 <memset+0x38>
  808f48:	30000526 	beq	r6,zero,808f60 <memset+0x30>
  808f4c:	2805883a 	mov	r2,r5
  808f50:	30cd883a 	add	r6,r6,r3
  808f54:	18800005 	stb	r2,0(r3)
  808f58:	18c00044 	addi	r3,r3,1
  808f5c:	19bffd1e 	bne	r3,r6,808f54 <memset+0x24>
  808f60:	2005883a 	mov	r2,r4
  808f64:	f800283a 	ret
  808f68:	2804923a 	slli	r2,r5,8
  808f6c:	020003c4 	movi	r8,15
  808f70:	200f883a 	mov	r7,r4
  808f74:	2884b03a 	or	r2,r5,r2
  808f78:	1006943a 	slli	r3,r2,16
  808f7c:	10c6b03a 	or	r3,r2,r3
  808f80:	41800a2e 	bgeu	r8,r6,808fac <memset+0x7c>
  808f84:	4005883a 	mov	r2,r8
  808f88:	31bffc04 	addi	r6,r6,-16
  808f8c:	38c00015 	stw	r3,0(r7)
  808f90:	38c00115 	stw	r3,4(r7)
  808f94:	38c00215 	stw	r3,8(r7)
  808f98:	38c00315 	stw	r3,12(r7)
  808f9c:	39c00404 	addi	r7,r7,16
  808fa0:	11bff936 	bltu	r2,r6,808f88 <memset+0x58>
  808fa4:	008000c4 	movi	r2,3
  808fa8:	1180052e 	bgeu	r2,r6,808fc0 <memset+0x90>
  808fac:	31bfff04 	addi	r6,r6,-4
  808fb0:	008000c4 	movi	r2,3
  808fb4:	38c00015 	stw	r3,0(r7)
  808fb8:	39c00104 	addi	r7,r7,4
  808fbc:	11bffb36 	bltu	r2,r6,808fac <memset+0x7c>
  808fc0:	3807883a 	mov	r3,r7
  808fc4:	003fe006 	br	808f48 <memset+0x18>

00808fc8 <_Bfree>:
  808fc8:	28000826 	beq	r5,zero,808fec <_Bfree+0x24>
  808fcc:	28800117 	ldw	r2,4(r5)
  808fd0:	21001317 	ldw	r4,76(r4)
  808fd4:	1085883a 	add	r2,r2,r2
  808fd8:	1085883a 	add	r2,r2,r2
  808fdc:	1105883a 	add	r2,r2,r4
  808fe0:	10c00017 	ldw	r3,0(r2)
  808fe4:	28c00015 	stw	r3,0(r5)
  808fe8:	11400015 	stw	r5,0(r2)
  808fec:	f800283a 	ret

00808ff0 <__hi0bits>:
  808ff0:	20bfffec 	andhi	r2,r4,65535
  808ff4:	10001426 	beq	r2,zero,809048 <__hi0bits+0x58>
  808ff8:	0007883a 	mov	r3,zero
  808ffc:	20bfc02c 	andhi	r2,r4,65280
  809000:	1000021e 	bne	r2,zero,80900c <__hi0bits+0x1c>
  809004:	2008923a 	slli	r4,r4,8
  809008:	18c00204 	addi	r3,r3,8
  80900c:	20bc002c 	andhi	r2,r4,61440
  809010:	1000021e 	bne	r2,zero,80901c <__hi0bits+0x2c>
  809014:	2008913a 	slli	r4,r4,4
  809018:	18c00104 	addi	r3,r3,4
  80901c:	20b0002c 	andhi	r2,r4,49152
  809020:	1000031e 	bne	r2,zero,809030 <__hi0bits+0x40>
  809024:	2105883a 	add	r2,r4,r4
  809028:	18c00084 	addi	r3,r3,2
  80902c:	1089883a 	add	r4,r2,r2
  809030:	20000316 	blt	r4,zero,809040 <__hi0bits+0x50>
  809034:	2090002c 	andhi	r2,r4,16384
  809038:	10000626 	beq	r2,zero,809054 <__hi0bits+0x64>
  80903c:	18c00044 	addi	r3,r3,1
  809040:	1805883a 	mov	r2,r3
  809044:	f800283a 	ret
  809048:	2008943a 	slli	r4,r4,16
  80904c:	00c00404 	movi	r3,16
  809050:	003fea06 	br	808ffc <__hi0bits+0xc>
  809054:	00c00804 	movi	r3,32
  809058:	1805883a 	mov	r2,r3
  80905c:	f800283a 	ret

00809060 <__lo0bits>:
  809060:	20c00017 	ldw	r3,0(r4)
  809064:	188001cc 	andi	r2,r3,7
  809068:	10000a26 	beq	r2,zero,809094 <__lo0bits+0x34>
  80906c:	1880004c 	andi	r2,r3,1
  809070:	1005003a 	cmpeq	r2,r2,zero
  809074:	10002126 	beq	r2,zero,8090fc <__lo0bits+0x9c>
  809078:	1880008c 	andi	r2,r3,2
  80907c:	1000251e 	bne	r2,zero,809114 <__lo0bits+0xb4>
  809080:	1804d0ba 	srli	r2,r3,2
  809084:	01400084 	movi	r5,2
  809088:	20800015 	stw	r2,0(r4)
  80908c:	2805883a 	mov	r2,r5
  809090:	f800283a 	ret
  809094:	18bfffcc 	andi	r2,r3,65535
  809098:	10001526 	beq	r2,zero,8090f0 <__lo0bits+0x90>
  80909c:	000b883a 	mov	r5,zero
  8090a0:	18803fcc 	andi	r2,r3,255
  8090a4:	1000021e 	bne	r2,zero,8090b0 <__lo0bits+0x50>
  8090a8:	1806d23a 	srli	r3,r3,8
  8090ac:	29400204 	addi	r5,r5,8
  8090b0:	188003cc 	andi	r2,r3,15
  8090b4:	1000021e 	bne	r2,zero,8090c0 <__lo0bits+0x60>
  8090b8:	1806d13a 	srli	r3,r3,4
  8090bc:	29400104 	addi	r5,r5,4
  8090c0:	188000cc 	andi	r2,r3,3
  8090c4:	1000021e 	bne	r2,zero,8090d0 <__lo0bits+0x70>
  8090c8:	1806d0ba 	srli	r3,r3,2
  8090cc:	29400084 	addi	r5,r5,2
  8090d0:	1880004c 	andi	r2,r3,1
  8090d4:	1000031e 	bne	r2,zero,8090e4 <__lo0bits+0x84>
  8090d8:	1806d07a 	srli	r3,r3,1
  8090dc:	18000a26 	beq	r3,zero,809108 <__lo0bits+0xa8>
  8090e0:	29400044 	addi	r5,r5,1
  8090e4:	2805883a 	mov	r2,r5
  8090e8:	20c00015 	stw	r3,0(r4)
  8090ec:	f800283a 	ret
  8090f0:	1806d43a 	srli	r3,r3,16
  8090f4:	01400404 	movi	r5,16
  8090f8:	003fe906 	br	8090a0 <__lo0bits+0x40>
  8090fc:	000b883a 	mov	r5,zero
  809100:	2805883a 	mov	r2,r5
  809104:	f800283a 	ret
  809108:	01400804 	movi	r5,32
  80910c:	2805883a 	mov	r2,r5
  809110:	f800283a 	ret
  809114:	1804d07a 	srli	r2,r3,1
  809118:	01400044 	movi	r5,1
  80911c:	20800015 	stw	r2,0(r4)
  809120:	003fda06 	br	80908c <__lo0bits+0x2c>

00809124 <__mcmp>:
  809124:	20800417 	ldw	r2,16(r4)
  809128:	28c00417 	ldw	r3,16(r5)
  80912c:	10cfc83a 	sub	r7,r2,r3
  809130:	38000c1e 	bne	r7,zero,809164 <__mcmp+0x40>
  809134:	18c5883a 	add	r2,r3,r3
  809138:	1085883a 	add	r2,r2,r2
  80913c:	10c00504 	addi	r3,r2,20
  809140:	21000504 	addi	r4,r4,20
  809144:	28cb883a 	add	r5,r5,r3
  809148:	2085883a 	add	r2,r4,r2
  80914c:	10bfff04 	addi	r2,r2,-4
  809150:	297fff04 	addi	r5,r5,-4
  809154:	11800017 	ldw	r6,0(r2)
  809158:	28c00017 	ldw	r3,0(r5)
  80915c:	30c0031e 	bne	r6,r3,80916c <__mcmp+0x48>
  809160:	20bffa36 	bltu	r4,r2,80914c <__mcmp+0x28>
  809164:	3805883a 	mov	r2,r7
  809168:	f800283a 	ret
  80916c:	30c00336 	bltu	r6,r3,80917c <__mcmp+0x58>
  809170:	01c00044 	movi	r7,1
  809174:	3805883a 	mov	r2,r7
  809178:	f800283a 	ret
  80917c:	01ffffc4 	movi	r7,-1
  809180:	003ff806 	br	809164 <__mcmp+0x40>

00809184 <__ulp>:
  809184:	295ffc2c 	andhi	r5,r5,32752
  809188:	013f3034 	movhi	r4,64704
  80918c:	290b883a 	add	r5,r5,r4
  809190:	0145c83a 	sub	r2,zero,r5
  809194:	1007d53a 	srai	r3,r2,20
  809198:	000d883a 	mov	r6,zero
  80919c:	0140040e 	bge	zero,r5,8091b0 <__ulp+0x2c>
  8091a0:	280f883a 	mov	r7,r5
  8091a4:	3807883a 	mov	r3,r7
  8091a8:	3005883a 	mov	r2,r6
  8091ac:	f800283a 	ret
  8091b0:	008004c4 	movi	r2,19
  8091b4:	193ffb04 	addi	r4,r3,-20
  8091b8:	10c00c0e 	bge	r2,r3,8091ec <__ulp+0x68>
  8091bc:	008007c4 	movi	r2,31
  8091c0:	1107c83a 	sub	r3,r2,r4
  8091c4:	00800784 	movi	r2,30
  8091c8:	01400044 	movi	r5,1
  8091cc:	11000216 	blt	r2,r4,8091d8 <__ulp+0x54>
  8091d0:	00800044 	movi	r2,1
  8091d4:	10ca983a 	sll	r5,r2,r3
  8091d8:	000f883a 	mov	r7,zero
  8091dc:	280d883a 	mov	r6,r5
  8091e0:	3807883a 	mov	r3,r7
  8091e4:	3005883a 	mov	r2,r6
  8091e8:	f800283a 	ret
  8091ec:	00800234 	movhi	r2,8
  8091f0:	10cfd83a 	sra	r7,r2,r3
  8091f4:	000d883a 	mov	r6,zero
  8091f8:	3005883a 	mov	r2,r6
  8091fc:	3807883a 	mov	r3,r7
  809200:	f800283a 	ret

00809204 <__b2d>:
  809204:	20800417 	ldw	r2,16(r4)
  809208:	defff904 	addi	sp,sp,-28
  80920c:	dd000415 	stw	r20,16(sp)
  809210:	1085883a 	add	r2,r2,r2
  809214:	25000504 	addi	r20,r4,20
  809218:	1085883a 	add	r2,r2,r2
  80921c:	dc000015 	stw	r16,0(sp)
  809220:	a0a1883a 	add	r16,r20,r2
  809224:	dd400515 	stw	r21,20(sp)
  809228:	857fff17 	ldw	r21,-4(r16)
  80922c:	dc400115 	stw	r17,4(sp)
  809230:	dfc00615 	stw	ra,24(sp)
  809234:	a809883a 	mov	r4,r21
  809238:	2823883a 	mov	r17,r5
  80923c:	dcc00315 	stw	r19,12(sp)
  809240:	dc800215 	stw	r18,8(sp)
  809244:	0808ff00 	call	808ff0 <__hi0bits>
  809248:	100b883a 	mov	r5,r2
  80924c:	00800804 	movi	r2,32
  809250:	1145c83a 	sub	r2,r2,r5
  809254:	88800015 	stw	r2,0(r17)
  809258:	00800284 	movi	r2,10
  80925c:	80ffff04 	addi	r3,r16,-4
  809260:	11401416 	blt	r2,r5,8092b4 <__b2d+0xb0>
  809264:	008002c4 	movi	r2,11
  809268:	1149c83a 	sub	r4,r2,r5
  80926c:	a0c02736 	bltu	r20,r3,80930c <__b2d+0x108>
  809270:	000d883a 	mov	r6,zero
  809274:	28800544 	addi	r2,r5,21
  809278:	a906d83a 	srl	r3,r21,r4
  80927c:	a884983a 	sll	r2,r21,r2
  809280:	1ccffc34 	orhi	r19,r3,16368
  809284:	11a4b03a 	or	r18,r2,r6
  809288:	9005883a 	mov	r2,r18
  80928c:	9807883a 	mov	r3,r19
  809290:	dfc00617 	ldw	ra,24(sp)
  809294:	dd400517 	ldw	r21,20(sp)
  809298:	dd000417 	ldw	r20,16(sp)
  80929c:	dcc00317 	ldw	r19,12(sp)
  8092a0:	dc800217 	ldw	r18,8(sp)
  8092a4:	dc400117 	ldw	r17,4(sp)
  8092a8:	dc000017 	ldw	r16,0(sp)
  8092ac:	dec00704 	addi	sp,sp,28
  8092b0:	f800283a 	ret
  8092b4:	a0c00e36 	bltu	r20,r3,8092f0 <__b2d+0xec>
  8092b8:	293ffd44 	addi	r4,r5,-11
  8092bc:	000d883a 	mov	r6,zero
  8092c0:	20000f26 	beq	r4,zero,809300 <__b2d+0xfc>
  8092c4:	00800804 	movi	r2,32
  8092c8:	110bc83a 	sub	r5,r2,r4
  8092cc:	a0c01236 	bltu	r20,r3,809318 <__b2d+0x114>
  8092d0:	000f883a 	mov	r7,zero
  8092d4:	a904983a 	sll	r2,r21,r4
  8092d8:	3146d83a 	srl	r3,r6,r5
  8092dc:	3108983a 	sll	r4,r6,r4
  8092e0:	108ffc34 	orhi	r2,r2,16368
  8092e4:	18a6b03a 	or	r19,r3,r2
  8092e8:	3924b03a 	or	r18,r7,r4
  8092ec:	003fe606 	br	809288 <__b2d+0x84>
  8092f0:	293ffd44 	addi	r4,r5,-11
  8092f4:	81bffe17 	ldw	r6,-8(r16)
  8092f8:	80fffe04 	addi	r3,r16,-8
  8092fc:	203ff11e 	bne	r4,zero,8092c4 <__b2d+0xc0>
  809300:	accffc34 	orhi	r19,r21,16368
  809304:	3025883a 	mov	r18,r6
  809308:	003fdf06 	br	809288 <__b2d+0x84>
  80930c:	18bfff17 	ldw	r2,-4(r3)
  809310:	110cd83a 	srl	r6,r2,r4
  809314:	003fd706 	br	809274 <__b2d+0x70>
  809318:	18bfff17 	ldw	r2,-4(r3)
  80931c:	114ed83a 	srl	r7,r2,r5
  809320:	003fec06 	br	8092d4 <__b2d+0xd0>

00809324 <__ratio>:
  809324:	defff904 	addi	sp,sp,-28
  809328:	dc400215 	stw	r17,8(sp)
  80932c:	2823883a 	mov	r17,r5
  809330:	d80b883a 	mov	r5,sp
  809334:	dfc00615 	stw	ra,24(sp)
  809338:	dd000515 	stw	r20,20(sp)
  80933c:	dcc00415 	stw	r19,16(sp)
  809340:	dc800315 	stw	r18,12(sp)
  809344:	2025883a 	mov	r18,r4
  809348:	08092040 	call	809204 <__b2d>
  80934c:	8809883a 	mov	r4,r17
  809350:	d9400104 	addi	r5,sp,4
  809354:	1027883a 	mov	r19,r2
  809358:	1829883a 	mov	r20,r3
  80935c:	08092040 	call	809204 <__b2d>
  809360:	89000417 	ldw	r4,16(r17)
  809364:	91c00417 	ldw	r7,16(r18)
  809368:	d9800117 	ldw	r6,4(sp)
  80936c:	180b883a 	mov	r5,r3
  809370:	390fc83a 	sub	r7,r7,r4
  809374:	1009883a 	mov	r4,r2
  809378:	d8800017 	ldw	r2,0(sp)
  80937c:	380e917a 	slli	r7,r7,5
  809380:	2011883a 	mov	r8,r4
  809384:	1185c83a 	sub	r2,r2,r6
  809388:	11c5883a 	add	r2,r2,r7
  80938c:	1006953a 	slli	r3,r2,20
  809390:	2813883a 	mov	r9,r5
  809394:	00800d0e 	bge	zero,r2,8093cc <__ratio+0xa8>
  809398:	1d29883a 	add	r20,r3,r20
  80939c:	a00b883a 	mov	r5,r20
  8093a0:	480f883a 	mov	r7,r9
  8093a4:	9809883a 	mov	r4,r19
  8093a8:	400d883a 	mov	r6,r8
  8093ac:	0802d040 	call	802d04 <__divdf3>
  8093b0:	dfc00617 	ldw	ra,24(sp)
  8093b4:	dd000517 	ldw	r20,20(sp)
  8093b8:	dcc00417 	ldw	r19,16(sp)
  8093bc:	dc800317 	ldw	r18,12(sp)
  8093c0:	dc400217 	ldw	r17,8(sp)
  8093c4:	dec00704 	addi	sp,sp,28
  8093c8:	f800283a 	ret
  8093cc:	28d3c83a 	sub	r9,r5,r3
  8093d0:	003ff206 	br	80939c <__ratio+0x78>

008093d4 <_mprec_log10>:
  8093d4:	defffe04 	addi	sp,sp,-8
  8093d8:	008005c4 	movi	r2,23
  8093dc:	dc000015 	stw	r16,0(sp)
  8093e0:	dfc00115 	stw	ra,4(sp)
  8093e4:	2021883a 	mov	r16,r4
  8093e8:	11000c16 	blt	r2,r4,80941c <_mprec_log10+0x48>
  8093ec:	200490fa 	slli	r2,r4,3
  8093f0:	00c020b4 	movhi	r3,130
  8093f4:	18f18f04 	addi	r3,r3,-14788
  8093f8:	10c5883a 	add	r2,r2,r3
  8093fc:	12400117 	ldw	r9,4(r2)
  809400:	12000017 	ldw	r8,0(r2)
  809404:	4807883a 	mov	r3,r9
  809408:	4005883a 	mov	r2,r8
  80940c:	dfc00117 	ldw	ra,4(sp)
  809410:	dc000017 	ldw	r16,0(sp)
  809414:	dec00204 	addi	sp,sp,8
  809418:	f800283a 	ret
  80941c:	0011883a 	mov	r8,zero
  809420:	024ffc34 	movhi	r9,16368
  809424:	0005883a 	mov	r2,zero
  809428:	00d00934 	movhi	r3,16420
  80942c:	480b883a 	mov	r5,r9
  809430:	4009883a 	mov	r4,r8
  809434:	180f883a 	mov	r7,r3
  809438:	100d883a 	mov	r6,r2
  80943c:	08029400 	call	802940 <__muldf3>
  809440:	843fffc4 	addi	r16,r16,-1
  809444:	1011883a 	mov	r8,r2
  809448:	1813883a 	mov	r9,r3
  80944c:	803ff51e 	bne	r16,zero,809424 <_mprec_log10+0x50>
  809450:	4005883a 	mov	r2,r8
  809454:	4807883a 	mov	r3,r9
  809458:	dfc00117 	ldw	ra,4(sp)
  80945c:	dc000017 	ldw	r16,0(sp)
  809460:	dec00204 	addi	sp,sp,8
  809464:	f800283a 	ret

00809468 <__copybits>:
  809468:	297fffc4 	addi	r5,r5,-1
  80946c:	30800417 	ldw	r2,16(r6)
  809470:	280bd17a 	srai	r5,r5,5
  809474:	31800504 	addi	r6,r6,20
  809478:	1085883a 	add	r2,r2,r2
  80947c:	294b883a 	add	r5,r5,r5
  809480:	294b883a 	add	r5,r5,r5
  809484:	1085883a 	add	r2,r2,r2
  809488:	290b883a 	add	r5,r5,r4
  80948c:	3087883a 	add	r3,r6,r2
  809490:	29400104 	addi	r5,r5,4
  809494:	30c0052e 	bgeu	r6,r3,8094ac <__copybits+0x44>
  809498:	30800017 	ldw	r2,0(r6)
  80949c:	31800104 	addi	r6,r6,4
  8094a0:	20800015 	stw	r2,0(r4)
  8094a4:	21000104 	addi	r4,r4,4
  8094a8:	30fffb36 	bltu	r6,r3,809498 <__copybits+0x30>
  8094ac:	2140032e 	bgeu	r4,r5,8094bc <__copybits+0x54>
  8094b0:	20000015 	stw	zero,0(r4)
  8094b4:	21000104 	addi	r4,r4,4
  8094b8:	217ffd36 	bltu	r4,r5,8094b0 <__copybits+0x48>
  8094bc:	f800283a 	ret

008094c0 <__any_on>:
  8094c0:	20800417 	ldw	r2,16(r4)
  8094c4:	2807d17a 	srai	r3,r5,5
  8094c8:	21000504 	addi	r4,r4,20
  8094cc:	10c00d0e 	bge	r2,r3,809504 <__any_on+0x44>
  8094d0:	1085883a 	add	r2,r2,r2
  8094d4:	1085883a 	add	r2,r2,r2
  8094d8:	208d883a 	add	r6,r4,r2
  8094dc:	2180182e 	bgeu	r4,r6,809540 <__any_on+0x80>
  8094e0:	30bfff17 	ldw	r2,-4(r6)
  8094e4:	30ffff04 	addi	r3,r6,-4
  8094e8:	1000041e 	bne	r2,zero,8094fc <__any_on+0x3c>
  8094ec:	20c0142e 	bgeu	r4,r3,809540 <__any_on+0x80>
  8094f0:	18ffff04 	addi	r3,r3,-4
  8094f4:	18800017 	ldw	r2,0(r3)
  8094f8:	103ffc26 	beq	r2,zero,8094ec <__any_on+0x2c>
  8094fc:	00800044 	movi	r2,1
  809500:	f800283a 	ret
  809504:	18800a0e 	bge	r3,r2,809530 <__any_on+0x70>
  809508:	294007cc 	andi	r5,r5,31
  80950c:	28000826 	beq	r5,zero,809530 <__any_on+0x70>
  809510:	18c5883a 	add	r2,r3,r3
  809514:	1085883a 	add	r2,r2,r2
  809518:	208d883a 	add	r6,r4,r2
  80951c:	30c00017 	ldw	r3,0(r6)
  809520:	1944d83a 	srl	r2,r3,r5
  809524:	1144983a 	sll	r2,r2,r5
  809528:	18bff41e 	bne	r3,r2,8094fc <__any_on+0x3c>
  80952c:	003feb06 	br	8094dc <__any_on+0x1c>
  809530:	18c5883a 	add	r2,r3,r3
  809534:	1085883a 	add	r2,r2,r2
  809538:	208d883a 	add	r6,r4,r2
  80953c:	003fe706 	br	8094dc <__any_on+0x1c>
  809540:	0005883a 	mov	r2,zero
  809544:	f800283a 	ret

00809548 <_Balloc>:
  809548:	20c01317 	ldw	r3,76(r4)
  80954c:	defffb04 	addi	sp,sp,-20
  809550:	dcc00315 	stw	r19,12(sp)
  809554:	dc800215 	stw	r18,8(sp)
  809558:	dfc00415 	stw	ra,16(sp)
  80955c:	2825883a 	mov	r18,r5
  809560:	dc400115 	stw	r17,4(sp)
  809564:	dc000015 	stw	r16,0(sp)
  809568:	2027883a 	mov	r19,r4
  80956c:	01800404 	movi	r6,16
  809570:	01400104 	movi	r5,4
  809574:	18001726 	beq	r3,zero,8095d4 <_Balloc+0x8c>
  809578:	01400044 	movi	r5,1
  80957c:	9485883a 	add	r2,r18,r18
  809580:	2ca2983a 	sll	r17,r5,r18
  809584:	1085883a 	add	r2,r2,r2
  809588:	10c7883a 	add	r3,r2,r3
  80958c:	1c000017 	ldw	r16,0(r3)
  809590:	8c4d883a 	add	r6,r17,r17
  809594:	318d883a 	add	r6,r6,r6
  809598:	9809883a 	mov	r4,r19
  80959c:	31800504 	addi	r6,r6,20
  8095a0:	80001226 	beq	r16,zero,8095ec <_Balloc+0xa4>
  8095a4:	80800017 	ldw	r2,0(r16)
  8095a8:	18800015 	stw	r2,0(r3)
  8095ac:	80000415 	stw	zero,16(r16)
  8095b0:	80000315 	stw	zero,12(r16)
  8095b4:	8005883a 	mov	r2,r16
  8095b8:	dfc00417 	ldw	ra,16(sp)
  8095bc:	dcc00317 	ldw	r19,12(sp)
  8095c0:	dc800217 	ldw	r18,8(sp)
  8095c4:	dc400117 	ldw	r17,4(sp)
  8095c8:	dc000017 	ldw	r16,0(sp)
  8095cc:	dec00504 	addi	sp,sp,20
  8095d0:	f800283a 	ret
  8095d4:	080a8e00 	call	80a8e0 <_calloc_r>
  8095d8:	1007883a 	mov	r3,r2
  8095dc:	0021883a 	mov	r16,zero
  8095e0:	98801315 	stw	r2,76(r19)
  8095e4:	103fe41e 	bne	r2,zero,809578 <_Balloc+0x30>
  8095e8:	003ff206 	br	8095b4 <_Balloc+0x6c>
  8095ec:	080a8e00 	call	80a8e0 <_calloc_r>
  8095f0:	103ff026 	beq	r2,zero,8095b4 <_Balloc+0x6c>
  8095f4:	1021883a 	mov	r16,r2
  8095f8:	14800115 	stw	r18,4(r2)
  8095fc:	14400215 	stw	r17,8(r2)
  809600:	003fea06 	br	8095ac <_Balloc+0x64>

00809604 <__d2b>:
  809604:	defff504 	addi	sp,sp,-44
  809608:	dcc00515 	stw	r19,20(sp)
  80960c:	04c00044 	movi	r19,1
  809610:	dc000215 	stw	r16,8(sp)
  809614:	2821883a 	mov	r16,r5
  809618:	980b883a 	mov	r5,r19
  80961c:	ddc00915 	stw	r23,36(sp)
  809620:	dd800815 	stw	r22,32(sp)
  809624:	dd400715 	stw	r21,28(sp)
  809628:	dd000615 	stw	r20,24(sp)
  80962c:	dc800415 	stw	r18,16(sp)
  809630:	dc400315 	stw	r17,12(sp)
  809634:	dfc00a15 	stw	ra,40(sp)
  809638:	3023883a 	mov	r17,r6
  80963c:	382d883a 	mov	r22,r7
  809640:	ddc00b17 	ldw	r23,44(sp)
  809644:	08095480 	call	809548 <_Balloc>
  809648:	1025883a 	mov	r18,r2
  80964c:	00a00034 	movhi	r2,32768
  809650:	10bfffc4 	addi	r2,r2,-1
  809654:	8888703a 	and	r4,r17,r2
  809658:	202ad53a 	srli	r21,r4,20
  80965c:	00800434 	movhi	r2,16
  809660:	10bfffc4 	addi	r2,r2,-1
  809664:	8886703a 	and	r3,r17,r2
  809668:	a829003a 	cmpeq	r20,r21,zero
  80966c:	800b883a 	mov	r5,r16
  809670:	d8c00115 	stw	r3,4(sp)
  809674:	94000504 	addi	r16,r18,20
  809678:	a000021e 	bne	r20,zero,809684 <__d2b+0x80>
  80967c:	18c00434 	orhi	r3,r3,16
  809680:	d8c00115 	stw	r3,4(sp)
  809684:	28002726 	beq	r5,zero,809724 <__d2b+0x120>
  809688:	d809883a 	mov	r4,sp
  80968c:	d9400015 	stw	r5,0(sp)
  809690:	08090600 	call	809060 <__lo0bits>
  809694:	100d883a 	mov	r6,r2
  809698:	10003526 	beq	r2,zero,809770 <__d2b+0x16c>
  80969c:	d8c00117 	ldw	r3,4(sp)
  8096a0:	00800804 	movi	r2,32
  8096a4:	1185c83a 	sub	r2,r2,r6
  8096a8:	d9000017 	ldw	r4,0(sp)
  8096ac:	1886983a 	sll	r3,r3,r2
  8096b0:	1906b03a 	or	r3,r3,r4
  8096b4:	90c00515 	stw	r3,20(r18)
  8096b8:	d8c00117 	ldw	r3,4(sp)
  8096bc:	1986d83a 	srl	r3,r3,r6
  8096c0:	d8c00115 	stw	r3,4(sp)
  8096c4:	180b003a 	cmpeq	r5,r3,zero
  8096c8:	00800084 	movi	r2,2
  8096cc:	114bc83a 	sub	r5,r2,r5
  8096d0:	80c00115 	stw	r3,4(r16)
  8096d4:	91400415 	stw	r5,16(r18)
  8096d8:	a0001a1e 	bne	r20,zero,809744 <__d2b+0x140>
  8096dc:	3545883a 	add	r2,r6,r21
  8096e0:	10bef344 	addi	r2,r2,-1075
  8096e4:	00c00d44 	movi	r3,53
  8096e8:	b0800015 	stw	r2,0(r22)
  8096ec:	1987c83a 	sub	r3,r3,r6
  8096f0:	b8c00015 	stw	r3,0(r23)
  8096f4:	9005883a 	mov	r2,r18
  8096f8:	dfc00a17 	ldw	ra,40(sp)
  8096fc:	ddc00917 	ldw	r23,36(sp)
  809700:	dd800817 	ldw	r22,32(sp)
  809704:	dd400717 	ldw	r21,28(sp)
  809708:	dd000617 	ldw	r20,24(sp)
  80970c:	dcc00517 	ldw	r19,20(sp)
  809710:	dc800417 	ldw	r18,16(sp)
  809714:	dc400317 	ldw	r17,12(sp)
  809718:	dc000217 	ldw	r16,8(sp)
  80971c:	dec00b04 	addi	sp,sp,44
  809720:	f800283a 	ret
  809724:	d9000104 	addi	r4,sp,4
  809728:	08090600 	call	809060 <__lo0bits>
  80972c:	11800804 	addi	r6,r2,32
  809730:	d8800117 	ldw	r2,4(sp)
  809734:	94c00415 	stw	r19,16(r18)
  809738:	980b883a 	mov	r5,r19
  80973c:	90800515 	stw	r2,20(r18)
  809740:	a03fe626 	beq	r20,zero,8096dc <__d2b+0xd8>
  809744:	2945883a 	add	r2,r5,r5
  809748:	1085883a 	add	r2,r2,r2
  80974c:	1405883a 	add	r2,r2,r16
  809750:	113fff17 	ldw	r4,-4(r2)
  809754:	30fef384 	addi	r3,r6,-1074
  809758:	2820917a 	slli	r16,r5,5
  80975c:	b0c00015 	stw	r3,0(r22)
  809760:	0808ff00 	call	808ff0 <__hi0bits>
  809764:	80a1c83a 	sub	r16,r16,r2
  809768:	bc000015 	stw	r16,0(r23)
  80976c:	003fe106 	br	8096f4 <__d2b+0xf0>
  809770:	d8800017 	ldw	r2,0(sp)
  809774:	90800515 	stw	r2,20(r18)
  809778:	d8c00117 	ldw	r3,4(sp)
  80977c:	003fd106 	br	8096c4 <__d2b+0xc0>

00809780 <__mdiff>:
  809780:	defffb04 	addi	sp,sp,-20
  809784:	dc000015 	stw	r16,0(sp)
  809788:	2821883a 	mov	r16,r5
  80978c:	dc800215 	stw	r18,8(sp)
  809790:	300b883a 	mov	r5,r6
  809794:	2025883a 	mov	r18,r4
  809798:	8009883a 	mov	r4,r16
  80979c:	dc400115 	stw	r17,4(sp)
  8097a0:	dfc00415 	stw	ra,16(sp)
  8097a4:	dcc00315 	stw	r19,12(sp)
  8097a8:	3023883a 	mov	r17,r6
  8097ac:	08091240 	call	809124 <__mcmp>
  8097b0:	10004226 	beq	r2,zero,8098bc <__mdiff+0x13c>
  8097b4:	10005016 	blt	r2,zero,8098f8 <__mdiff+0x178>
  8097b8:	0027883a 	mov	r19,zero
  8097bc:	81400117 	ldw	r5,4(r16)
  8097c0:	9009883a 	mov	r4,r18
  8097c4:	08095480 	call	809548 <_Balloc>
  8097c8:	1019883a 	mov	r12,r2
  8097cc:	82800417 	ldw	r10,16(r16)
  8097d0:	88800417 	ldw	r2,16(r17)
  8097d4:	81800504 	addi	r6,r16,20
  8097d8:	5287883a 	add	r3,r10,r10
  8097dc:	1085883a 	add	r2,r2,r2
  8097e0:	18c7883a 	add	r3,r3,r3
  8097e4:	1085883a 	add	r2,r2,r2
  8097e8:	8a000504 	addi	r8,r17,20
  8097ec:	64c00315 	stw	r19,12(r12)
  8097f0:	30db883a 	add	r13,r6,r3
  8097f4:	4097883a 	add	r11,r8,r2
  8097f8:	61c00504 	addi	r7,r12,20
  8097fc:	0013883a 	mov	r9,zero
  809800:	31000017 	ldw	r4,0(r6)
  809804:	41400017 	ldw	r5,0(r8)
  809808:	42000104 	addi	r8,r8,4
  80980c:	20bfffcc 	andi	r2,r4,65535
  809810:	28ffffcc 	andi	r3,r5,65535
  809814:	10c5c83a 	sub	r2,r2,r3
  809818:	1245883a 	add	r2,r2,r9
  80981c:	2008d43a 	srli	r4,r4,16
  809820:	280ad43a 	srli	r5,r5,16
  809824:	1007d43a 	srai	r3,r2,16
  809828:	3880000d 	sth	r2,0(r7)
  80982c:	2149c83a 	sub	r4,r4,r5
  809830:	20c9883a 	add	r4,r4,r3
  809834:	3900008d 	sth	r4,2(r7)
  809838:	31800104 	addi	r6,r6,4
  80983c:	39c00104 	addi	r7,r7,4
  809840:	2013d43a 	srai	r9,r4,16
  809844:	42ffee36 	bltu	r8,r11,809800 <__mdiff+0x80>
  809848:	33400c2e 	bgeu	r6,r13,80987c <__mdiff+0xfc>
  80984c:	30800017 	ldw	r2,0(r6)
  809850:	31800104 	addi	r6,r6,4
  809854:	10ffffcc 	andi	r3,r2,65535
  809858:	1a47883a 	add	r3,r3,r9
  80985c:	1004d43a 	srli	r2,r2,16
  809860:	1809d43a 	srai	r4,r3,16
  809864:	38c0000d 	sth	r3,0(r7)
  809868:	1105883a 	add	r2,r2,r4
  80986c:	3880008d 	sth	r2,2(r7)
  809870:	1013d43a 	srai	r9,r2,16
  809874:	39c00104 	addi	r7,r7,4
  809878:	337ff436 	bltu	r6,r13,80984c <__mdiff+0xcc>
  80987c:	38bfff17 	ldw	r2,-4(r7)
  809880:	38ffff04 	addi	r3,r7,-4
  809884:	1000041e 	bne	r2,zero,809898 <__mdiff+0x118>
  809888:	18ffff04 	addi	r3,r3,-4
  80988c:	18800017 	ldw	r2,0(r3)
  809890:	52bfffc4 	addi	r10,r10,-1
  809894:	103ffc26 	beq	r2,zero,809888 <__mdiff+0x108>
  809898:	6005883a 	mov	r2,r12
  80989c:	62800415 	stw	r10,16(r12)
  8098a0:	dfc00417 	ldw	ra,16(sp)
  8098a4:	dcc00317 	ldw	r19,12(sp)
  8098a8:	dc800217 	ldw	r18,8(sp)
  8098ac:	dc400117 	ldw	r17,4(sp)
  8098b0:	dc000017 	ldw	r16,0(sp)
  8098b4:	dec00504 	addi	sp,sp,20
  8098b8:	f800283a 	ret
  8098bc:	9009883a 	mov	r4,r18
  8098c0:	000b883a 	mov	r5,zero
  8098c4:	08095480 	call	809548 <_Balloc>
  8098c8:	1019883a 	mov	r12,r2
  8098cc:	00800044 	movi	r2,1
  8098d0:	60800415 	stw	r2,16(r12)
  8098d4:	6005883a 	mov	r2,r12
  8098d8:	60000515 	stw	zero,20(r12)
  8098dc:	dfc00417 	ldw	ra,16(sp)
  8098e0:	dcc00317 	ldw	r19,12(sp)
  8098e4:	dc800217 	ldw	r18,8(sp)
  8098e8:	dc400117 	ldw	r17,4(sp)
  8098ec:	dc000017 	ldw	r16,0(sp)
  8098f0:	dec00504 	addi	sp,sp,20
  8098f4:	f800283a 	ret
  8098f8:	880d883a 	mov	r6,r17
  8098fc:	04c00044 	movi	r19,1
  809900:	8023883a 	mov	r17,r16
  809904:	3021883a 	mov	r16,r6
  809908:	003fac06 	br	8097bc <__mdiff+0x3c>

0080990c <__lshift>:
  80990c:	defff904 	addi	sp,sp,-28
  809910:	28800417 	ldw	r2,16(r5)
  809914:	dc000015 	stw	r16,0(sp)
  809918:	3021d17a 	srai	r16,r6,5
  80991c:	28c00217 	ldw	r3,8(r5)
  809920:	10800044 	addi	r2,r2,1
  809924:	dc400115 	stw	r17,4(sp)
  809928:	80a3883a 	add	r17,r16,r2
  80992c:	dd400515 	stw	r21,20(sp)
  809930:	dd000415 	stw	r20,16(sp)
  809934:	dc800215 	stw	r18,8(sp)
  809938:	dfc00615 	stw	ra,24(sp)
  80993c:	2825883a 	mov	r18,r5
  809940:	dcc00315 	stw	r19,12(sp)
  809944:	3029883a 	mov	r20,r6
  809948:	202b883a 	mov	r21,r4
  80994c:	29400117 	ldw	r5,4(r5)
  809950:	1c40030e 	bge	r3,r17,809960 <__lshift+0x54>
  809954:	18c7883a 	add	r3,r3,r3
  809958:	29400044 	addi	r5,r5,1
  80995c:	1c7ffd16 	blt	r3,r17,809954 <__lshift+0x48>
  809960:	a809883a 	mov	r4,r21
  809964:	08095480 	call	809548 <_Balloc>
  809968:	1027883a 	mov	r19,r2
  80996c:	11400504 	addi	r5,r2,20
  809970:	0400090e 	bge	zero,r16,809998 <__lshift+0x8c>
  809974:	2805883a 	mov	r2,r5
  809978:	0007883a 	mov	r3,zero
  80997c:	18c00044 	addi	r3,r3,1
  809980:	10000015 	stw	zero,0(r2)
  809984:	10800104 	addi	r2,r2,4
  809988:	80fffc1e 	bne	r16,r3,80997c <__lshift+0x70>
  80998c:	8405883a 	add	r2,r16,r16
  809990:	1085883a 	add	r2,r2,r2
  809994:	288b883a 	add	r5,r5,r2
  809998:	90800417 	ldw	r2,16(r18)
  80999c:	91000504 	addi	r4,r18,20
  8099a0:	a18007cc 	andi	r6,r20,31
  8099a4:	1085883a 	add	r2,r2,r2
  8099a8:	1085883a 	add	r2,r2,r2
  8099ac:	208f883a 	add	r7,r4,r2
  8099b0:	30001e26 	beq	r6,zero,809a2c <__lshift+0x120>
  8099b4:	00800804 	movi	r2,32
  8099b8:	1191c83a 	sub	r8,r2,r6
  8099bc:	0007883a 	mov	r3,zero
  8099c0:	20800017 	ldw	r2,0(r4)
  8099c4:	1184983a 	sll	r2,r2,r6
  8099c8:	1884b03a 	or	r2,r3,r2
  8099cc:	28800015 	stw	r2,0(r5)
  8099d0:	20c00017 	ldw	r3,0(r4)
  8099d4:	21000104 	addi	r4,r4,4
  8099d8:	29400104 	addi	r5,r5,4
  8099dc:	1a06d83a 	srl	r3,r3,r8
  8099e0:	21fff736 	bltu	r4,r7,8099c0 <__lshift+0xb4>
  8099e4:	28c00015 	stw	r3,0(r5)
  8099e8:	18000126 	beq	r3,zero,8099f0 <__lshift+0xe4>
  8099ec:	8c400044 	addi	r17,r17,1
  8099f0:	88bfffc4 	addi	r2,r17,-1
  8099f4:	98800415 	stw	r2,16(r19)
  8099f8:	a809883a 	mov	r4,r21
  8099fc:	900b883a 	mov	r5,r18
  809a00:	0808fc80 	call	808fc8 <_Bfree>
  809a04:	9805883a 	mov	r2,r19
  809a08:	dfc00617 	ldw	ra,24(sp)
  809a0c:	dd400517 	ldw	r21,20(sp)
  809a10:	dd000417 	ldw	r20,16(sp)
  809a14:	dcc00317 	ldw	r19,12(sp)
  809a18:	dc800217 	ldw	r18,8(sp)
  809a1c:	dc400117 	ldw	r17,4(sp)
  809a20:	dc000017 	ldw	r16,0(sp)
  809a24:	dec00704 	addi	sp,sp,28
  809a28:	f800283a 	ret
  809a2c:	20800017 	ldw	r2,0(r4)
  809a30:	21000104 	addi	r4,r4,4
  809a34:	28800015 	stw	r2,0(r5)
  809a38:	29400104 	addi	r5,r5,4
  809a3c:	21ffec2e 	bgeu	r4,r7,8099f0 <__lshift+0xe4>
  809a40:	20800017 	ldw	r2,0(r4)
  809a44:	21000104 	addi	r4,r4,4
  809a48:	28800015 	stw	r2,0(r5)
  809a4c:	29400104 	addi	r5,r5,4
  809a50:	21fff636 	bltu	r4,r7,809a2c <__lshift+0x120>
  809a54:	003fe606 	br	8099f0 <__lshift+0xe4>

00809a58 <__multiply>:
  809a58:	defff904 	addi	sp,sp,-28
  809a5c:	dcc00315 	stw	r19,12(sp)
  809a60:	dc800215 	stw	r18,8(sp)
  809a64:	2cc00417 	ldw	r19,16(r5)
  809a68:	34800417 	ldw	r18,16(r6)
  809a6c:	dd000415 	stw	r20,16(sp)
  809a70:	dc400115 	stw	r17,4(sp)
  809a74:	dfc00615 	stw	ra,24(sp)
  809a78:	dd400515 	stw	r21,20(sp)
  809a7c:	dc000015 	stw	r16,0(sp)
  809a80:	2823883a 	mov	r17,r5
  809a84:	3029883a 	mov	r20,r6
  809a88:	9c80040e 	bge	r19,r18,809a9c <__multiply+0x44>
  809a8c:	9027883a 	mov	r19,r18
  809a90:	2c800417 	ldw	r18,16(r5)
  809a94:	2829883a 	mov	r20,r5
  809a98:	3023883a 	mov	r17,r6
  809a9c:	88800217 	ldw	r2,8(r17)
  809aa0:	9ca1883a 	add	r16,r19,r18
  809aa4:	89400117 	ldw	r5,4(r17)
  809aa8:	1400010e 	bge	r2,r16,809ab0 <__multiply+0x58>
  809aac:	29400044 	addi	r5,r5,1
  809ab0:	08095480 	call	809548 <_Balloc>
  809ab4:	102b883a 	mov	r21,r2
  809ab8:	8405883a 	add	r2,r16,r16
  809abc:	1085883a 	add	r2,r2,r2
  809ac0:	a9000504 	addi	r4,r21,20
  809ac4:	209d883a 	add	r14,r4,r2
  809ac8:	2380042e 	bgeu	r4,r14,809adc <__multiply+0x84>
  809acc:	2005883a 	mov	r2,r4
  809ad0:	10000015 	stw	zero,0(r2)
  809ad4:	10800104 	addi	r2,r2,4
  809ad8:	13bffd36 	bltu	r2,r14,809ad0 <__multiply+0x78>
  809adc:	9485883a 	add	r2,r18,r18
  809ae0:	9cc7883a 	add	r3,r19,r19
  809ae4:	a1800504 	addi	r6,r20,20
  809ae8:	1085883a 	add	r2,r2,r2
  809aec:	8b400504 	addi	r13,r17,20
  809af0:	18c7883a 	add	r3,r3,r3
  809af4:	309f883a 	add	r15,r6,r2
  809af8:	68d7883a 	add	r11,r13,r3
  809afc:	33c03b2e 	bgeu	r6,r15,809bec <__multiply+0x194>
  809b00:	2019883a 	mov	r12,r4
  809b04:	30800017 	ldw	r2,0(r6)
  809b08:	127fffcc 	andi	r9,r2,65535
  809b0c:	48001826 	beq	r9,zero,809b70 <__multiply+0x118>
  809b10:	6811883a 	mov	r8,r13
  809b14:	600f883a 	mov	r7,r12
  809b18:	0015883a 	mov	r10,zero
  809b1c:	40c00017 	ldw	r3,0(r8)
  809b20:	39400017 	ldw	r5,0(r7)
  809b24:	42000104 	addi	r8,r8,4
  809b28:	193fffcc 	andi	r4,r3,65535
  809b2c:	4909383a 	mul	r4,r9,r4
  809b30:	1806d43a 	srli	r3,r3,16
  809b34:	28bfffcc 	andi	r2,r5,65535
  809b38:	5085883a 	add	r2,r10,r2
  809b3c:	2089883a 	add	r4,r4,r2
  809b40:	48c7383a 	mul	r3,r9,r3
  809b44:	280ad43a 	srli	r5,r5,16
  809b48:	2004d43a 	srli	r2,r4,16
  809b4c:	3900000d 	sth	r4,0(r7)
  809b50:	1947883a 	add	r3,r3,r5
  809b54:	10c5883a 	add	r2,r2,r3
  809b58:	3880008d 	sth	r2,2(r7)
  809b5c:	1014d43a 	srli	r10,r2,16
  809b60:	39c00104 	addi	r7,r7,4
  809b64:	42ffed36 	bltu	r8,r11,809b1c <__multiply+0xc4>
  809b68:	3a800015 	stw	r10,0(r7)
  809b6c:	30800017 	ldw	r2,0(r6)
  809b70:	1012d43a 	srli	r9,r2,16
  809b74:	48001926 	beq	r9,zero,809bdc <__multiply+0x184>
  809b78:	60800017 	ldw	r2,0(r12)
  809b7c:	6811883a 	mov	r8,r13
  809b80:	600f883a 	mov	r7,r12
  809b84:	0015883a 	mov	r10,zero
  809b88:	100b883a 	mov	r5,r2
  809b8c:	41000017 	ldw	r4,0(r8)
  809b90:	2806d43a 	srli	r3,r5,16
  809b94:	3880000d 	sth	r2,0(r7)
  809b98:	20bfffcc 	andi	r2,r4,65535
  809b9c:	4885383a 	mul	r2,r9,r2
  809ba0:	50c7883a 	add	r3,r10,r3
  809ba4:	2008d43a 	srli	r4,r4,16
  809ba8:	10c5883a 	add	r2,r2,r3
  809bac:	3880008d 	sth	r2,2(r7)
  809bb0:	39c00104 	addi	r7,r7,4
  809bb4:	39400017 	ldw	r5,0(r7)
  809bb8:	4909383a 	mul	r4,r9,r4
  809bbc:	1004d43a 	srli	r2,r2,16
  809bc0:	28ffffcc 	andi	r3,r5,65535
  809bc4:	20c9883a 	add	r4,r4,r3
  809bc8:	1105883a 	add	r2,r2,r4
  809bcc:	42000104 	addi	r8,r8,4
  809bd0:	1014d43a 	srli	r10,r2,16
  809bd4:	42ffed36 	bltu	r8,r11,809b8c <__multiply+0x134>
  809bd8:	38800015 	stw	r2,0(r7)
  809bdc:	31800104 	addi	r6,r6,4
  809be0:	33c0022e 	bgeu	r6,r15,809bec <__multiply+0x194>
  809be4:	63000104 	addi	r12,r12,4
  809be8:	003fc606 	br	809b04 <__multiply+0xac>
  809bec:	0400090e 	bge	zero,r16,809c14 <__multiply+0x1bc>
  809bf0:	70bfff17 	ldw	r2,-4(r14)
  809bf4:	70ffff04 	addi	r3,r14,-4
  809bf8:	10000326 	beq	r2,zero,809c08 <__multiply+0x1b0>
  809bfc:	00000506 	br	809c14 <__multiply+0x1bc>
  809c00:	18800017 	ldw	r2,0(r3)
  809c04:	1000031e 	bne	r2,zero,809c14 <__multiply+0x1bc>
  809c08:	843fffc4 	addi	r16,r16,-1
  809c0c:	18ffff04 	addi	r3,r3,-4
  809c10:	803ffb1e 	bne	r16,zero,809c00 <__multiply+0x1a8>
  809c14:	a805883a 	mov	r2,r21
  809c18:	ac000415 	stw	r16,16(r21)
  809c1c:	dfc00617 	ldw	ra,24(sp)
  809c20:	dd400517 	ldw	r21,20(sp)
  809c24:	dd000417 	ldw	r20,16(sp)
  809c28:	dcc00317 	ldw	r19,12(sp)
  809c2c:	dc800217 	ldw	r18,8(sp)
  809c30:	dc400117 	ldw	r17,4(sp)
  809c34:	dc000017 	ldw	r16,0(sp)
  809c38:	dec00704 	addi	sp,sp,28
  809c3c:	f800283a 	ret

00809c40 <__i2b>:
  809c40:	defffd04 	addi	sp,sp,-12
  809c44:	dc000015 	stw	r16,0(sp)
  809c48:	04000044 	movi	r16,1
  809c4c:	dc800115 	stw	r18,4(sp)
  809c50:	2825883a 	mov	r18,r5
  809c54:	800b883a 	mov	r5,r16
  809c58:	dfc00215 	stw	ra,8(sp)
  809c5c:	08095480 	call	809548 <_Balloc>
  809c60:	14000415 	stw	r16,16(r2)
  809c64:	14800515 	stw	r18,20(r2)
  809c68:	dfc00217 	ldw	ra,8(sp)
  809c6c:	dc800117 	ldw	r18,4(sp)
  809c70:	dc000017 	ldw	r16,0(sp)
  809c74:	dec00304 	addi	sp,sp,12
  809c78:	f800283a 	ret

00809c7c <__multadd>:
  809c7c:	defffa04 	addi	sp,sp,-24
  809c80:	dc800215 	stw	r18,8(sp)
  809c84:	2c800417 	ldw	r18,16(r5)
  809c88:	dd000415 	stw	r20,16(sp)
  809c8c:	dcc00315 	stw	r19,12(sp)
  809c90:	dc000015 	stw	r16,0(sp)
  809c94:	dfc00515 	stw	ra,20(sp)
  809c98:	3821883a 	mov	r16,r7
  809c9c:	dc400115 	stw	r17,4(sp)
  809ca0:	2827883a 	mov	r19,r5
  809ca4:	2029883a 	mov	r20,r4
  809ca8:	2a000504 	addi	r8,r5,20
  809cac:	000f883a 	mov	r7,zero
  809cb0:	40800017 	ldw	r2,0(r8)
  809cb4:	39c00044 	addi	r7,r7,1
  809cb8:	10ffffcc 	andi	r3,r2,65535
  809cbc:	1987383a 	mul	r3,r3,r6
  809cc0:	1004d43a 	srli	r2,r2,16
  809cc4:	1c07883a 	add	r3,r3,r16
  809cc8:	180ad43a 	srli	r5,r3,16
  809ccc:	1185383a 	mul	r2,r2,r6
  809cd0:	18ffffcc 	andi	r3,r3,65535
  809cd4:	1145883a 	add	r2,r2,r5
  809cd8:	1008943a 	slli	r4,r2,16
  809cdc:	1020d43a 	srli	r16,r2,16
  809ce0:	20c9883a 	add	r4,r4,r3
  809ce4:	41000015 	stw	r4,0(r8)
  809ce8:	42000104 	addi	r8,r8,4
  809cec:	3cbff016 	blt	r7,r18,809cb0 <__multadd+0x34>
  809cf0:	80000826 	beq	r16,zero,809d14 <__multadd+0x98>
  809cf4:	98800217 	ldw	r2,8(r19)
  809cf8:	90800f0e 	bge	r18,r2,809d38 <__multadd+0xbc>
  809cfc:	9485883a 	add	r2,r18,r18
  809d00:	1085883a 	add	r2,r2,r2
  809d04:	14c5883a 	add	r2,r2,r19
  809d08:	90c00044 	addi	r3,r18,1
  809d0c:	14000515 	stw	r16,20(r2)
  809d10:	98c00415 	stw	r3,16(r19)
  809d14:	9805883a 	mov	r2,r19
  809d18:	dfc00517 	ldw	ra,20(sp)
  809d1c:	dd000417 	ldw	r20,16(sp)
  809d20:	dcc00317 	ldw	r19,12(sp)
  809d24:	dc800217 	ldw	r18,8(sp)
  809d28:	dc400117 	ldw	r17,4(sp)
  809d2c:	dc000017 	ldw	r16,0(sp)
  809d30:	dec00604 	addi	sp,sp,24
  809d34:	f800283a 	ret
  809d38:	99400117 	ldw	r5,4(r19)
  809d3c:	a009883a 	mov	r4,r20
  809d40:	29400044 	addi	r5,r5,1
  809d44:	08095480 	call	809548 <_Balloc>
  809d48:	99800417 	ldw	r6,16(r19)
  809d4c:	99400304 	addi	r5,r19,12
  809d50:	11000304 	addi	r4,r2,12
  809d54:	318d883a 	add	r6,r6,r6
  809d58:	318d883a 	add	r6,r6,r6
  809d5c:	31800204 	addi	r6,r6,8
  809d60:	1023883a 	mov	r17,r2
  809d64:	0808db00 	call	808db0 <memcpy>
  809d68:	980b883a 	mov	r5,r19
  809d6c:	a009883a 	mov	r4,r20
  809d70:	0808fc80 	call	808fc8 <_Bfree>
  809d74:	8827883a 	mov	r19,r17
  809d78:	003fe006 	br	809cfc <__multadd+0x80>

00809d7c <__pow5mult>:
  809d7c:	defffa04 	addi	sp,sp,-24
  809d80:	308000cc 	andi	r2,r6,3
  809d84:	dd000415 	stw	r20,16(sp)
  809d88:	dcc00315 	stw	r19,12(sp)
  809d8c:	dc000015 	stw	r16,0(sp)
  809d90:	dfc00515 	stw	ra,20(sp)
  809d94:	dc800215 	stw	r18,8(sp)
  809d98:	dc400115 	stw	r17,4(sp)
  809d9c:	3021883a 	mov	r16,r6
  809da0:	2027883a 	mov	r19,r4
  809da4:	2829883a 	mov	r20,r5
  809da8:	10002b1e 	bne	r2,zero,809e58 <__pow5mult+0xdc>
  809dac:	8025d0ba 	srai	r18,r16,2
  809db0:	90001b26 	beq	r18,zero,809e20 <__pow5mult+0xa4>
  809db4:	9c001217 	ldw	r16,72(r19)
  809db8:	8000081e 	bne	r16,zero,809ddc <__pow5mult+0x60>
  809dbc:	00003006 	br	809e80 <__pow5mult+0x104>
  809dc0:	800b883a 	mov	r5,r16
  809dc4:	800d883a 	mov	r6,r16
  809dc8:	9809883a 	mov	r4,r19
  809dcc:	90001426 	beq	r18,zero,809e20 <__pow5mult+0xa4>
  809dd0:	80800017 	ldw	r2,0(r16)
  809dd4:	10001b26 	beq	r2,zero,809e44 <__pow5mult+0xc8>
  809dd8:	1021883a 	mov	r16,r2
  809ddc:	9080004c 	andi	r2,r18,1
  809de0:	1005003a 	cmpeq	r2,r2,zero
  809de4:	9025d07a 	srai	r18,r18,1
  809de8:	800d883a 	mov	r6,r16
  809dec:	9809883a 	mov	r4,r19
  809df0:	a00b883a 	mov	r5,r20
  809df4:	103ff21e 	bne	r2,zero,809dc0 <__pow5mult+0x44>
  809df8:	0809a580 	call	809a58 <__multiply>
  809dfc:	a00b883a 	mov	r5,r20
  809e00:	9809883a 	mov	r4,r19
  809e04:	1023883a 	mov	r17,r2
  809e08:	0808fc80 	call	808fc8 <_Bfree>
  809e0c:	8829883a 	mov	r20,r17
  809e10:	800b883a 	mov	r5,r16
  809e14:	800d883a 	mov	r6,r16
  809e18:	9809883a 	mov	r4,r19
  809e1c:	903fec1e 	bne	r18,zero,809dd0 <__pow5mult+0x54>
  809e20:	a005883a 	mov	r2,r20
  809e24:	dfc00517 	ldw	ra,20(sp)
  809e28:	dd000417 	ldw	r20,16(sp)
  809e2c:	dcc00317 	ldw	r19,12(sp)
  809e30:	dc800217 	ldw	r18,8(sp)
  809e34:	dc400117 	ldw	r17,4(sp)
  809e38:	dc000017 	ldw	r16,0(sp)
  809e3c:	dec00604 	addi	sp,sp,24
  809e40:	f800283a 	ret
  809e44:	0809a580 	call	809a58 <__multiply>
  809e48:	80800015 	stw	r2,0(r16)
  809e4c:	1021883a 	mov	r16,r2
  809e50:	10000015 	stw	zero,0(r2)
  809e54:	003fe106 	br	809ddc <__pow5mult+0x60>
  809e58:	1085883a 	add	r2,r2,r2
  809e5c:	00c020b4 	movhi	r3,130
  809e60:	18f1d504 	addi	r3,r3,-14508
  809e64:	1085883a 	add	r2,r2,r2
  809e68:	10c5883a 	add	r2,r2,r3
  809e6c:	11bfff17 	ldw	r6,-4(r2)
  809e70:	000f883a 	mov	r7,zero
  809e74:	0809c7c0 	call	809c7c <__multadd>
  809e78:	1029883a 	mov	r20,r2
  809e7c:	003fcb06 	br	809dac <__pow5mult+0x30>
  809e80:	9809883a 	mov	r4,r19
  809e84:	01409c44 	movi	r5,625
  809e88:	0809c400 	call	809c40 <__i2b>
  809e8c:	98801215 	stw	r2,72(r19)
  809e90:	1021883a 	mov	r16,r2
  809e94:	10000015 	stw	zero,0(r2)
  809e98:	003fd006 	br	809ddc <__pow5mult+0x60>

00809e9c <__s2b>:
  809e9c:	defff904 	addi	sp,sp,-28
  809ea0:	dcc00315 	stw	r19,12(sp)
  809ea4:	dc800215 	stw	r18,8(sp)
  809ea8:	2827883a 	mov	r19,r5
  809eac:	2025883a 	mov	r18,r4
  809eb0:	01400244 	movi	r5,9
  809eb4:	39000204 	addi	r4,r7,8
  809eb8:	dd000415 	stw	r20,16(sp)
  809ebc:	dc400115 	stw	r17,4(sp)
  809ec0:	dfc00615 	stw	ra,24(sp)
  809ec4:	dd400515 	stw	r21,20(sp)
  809ec8:	dc000015 	stw	r16,0(sp)
  809ecc:	3829883a 	mov	r20,r7
  809ed0:	3023883a 	mov	r17,r6
  809ed4:	080ba9c0 	call	80ba9c <__divsi3>
  809ed8:	00c00044 	movi	r3,1
  809edc:	1880350e 	bge	r3,r2,809fb4 <__s2b+0x118>
  809ee0:	000b883a 	mov	r5,zero
  809ee4:	18c7883a 	add	r3,r3,r3
  809ee8:	29400044 	addi	r5,r5,1
  809eec:	18bffd16 	blt	r3,r2,809ee4 <__s2b+0x48>
  809ef0:	9009883a 	mov	r4,r18
  809ef4:	08095480 	call	809548 <_Balloc>
  809ef8:	1011883a 	mov	r8,r2
  809efc:	d8800717 	ldw	r2,28(sp)
  809f00:	00c00044 	movi	r3,1
  809f04:	01800244 	movi	r6,9
  809f08:	40800515 	stw	r2,20(r8)
  809f0c:	40c00415 	stw	r3,16(r8)
  809f10:	3440260e 	bge	r6,r17,809fac <__s2b+0x110>
  809f14:	3021883a 	mov	r16,r6
  809f18:	99ab883a 	add	r21,r19,r6
  809f1c:	9c05883a 	add	r2,r19,r16
  809f20:	11c00007 	ldb	r7,0(r2)
  809f24:	400b883a 	mov	r5,r8
  809f28:	9009883a 	mov	r4,r18
  809f2c:	39fff404 	addi	r7,r7,-48
  809f30:	01800284 	movi	r6,10
  809f34:	0809c7c0 	call	809c7c <__multadd>
  809f38:	84000044 	addi	r16,r16,1
  809f3c:	1011883a 	mov	r8,r2
  809f40:	8c3ff61e 	bne	r17,r16,809f1c <__s2b+0x80>
  809f44:	ac45883a 	add	r2,r21,r17
  809f48:	117ffe04 	addi	r5,r2,-8
  809f4c:	880d883a 	mov	r6,r17
  809f50:	35000c0e 	bge	r6,r20,809f84 <__s2b+0xe8>
  809f54:	a185c83a 	sub	r2,r20,r6
  809f58:	2821883a 	mov	r16,r5
  809f5c:	28a3883a 	add	r17,r5,r2
  809f60:	81c00007 	ldb	r7,0(r16)
  809f64:	400b883a 	mov	r5,r8
  809f68:	9009883a 	mov	r4,r18
  809f6c:	39fff404 	addi	r7,r7,-48
  809f70:	01800284 	movi	r6,10
  809f74:	0809c7c0 	call	809c7c <__multadd>
  809f78:	84000044 	addi	r16,r16,1
  809f7c:	1011883a 	mov	r8,r2
  809f80:	847ff71e 	bne	r16,r17,809f60 <__s2b+0xc4>
  809f84:	4005883a 	mov	r2,r8
  809f88:	dfc00617 	ldw	ra,24(sp)
  809f8c:	dd400517 	ldw	r21,20(sp)
  809f90:	dd000417 	ldw	r20,16(sp)
  809f94:	dcc00317 	ldw	r19,12(sp)
  809f98:	dc800217 	ldw	r18,8(sp)
  809f9c:	dc400117 	ldw	r17,4(sp)
  809fa0:	dc000017 	ldw	r16,0(sp)
  809fa4:	dec00704 	addi	sp,sp,28
  809fa8:	f800283a 	ret
  809fac:	99400284 	addi	r5,r19,10
  809fb0:	003fe706 	br	809f50 <__s2b+0xb4>
  809fb4:	000b883a 	mov	r5,zero
  809fb8:	003fcd06 	br	809ef0 <__s2b+0x54>

00809fbc <_realloc_r>:
  809fbc:	defff404 	addi	sp,sp,-48
  809fc0:	dd800815 	stw	r22,32(sp)
  809fc4:	dc800415 	stw	r18,16(sp)
  809fc8:	dc400315 	stw	r17,12(sp)
  809fcc:	dfc00b15 	stw	ra,44(sp)
  809fd0:	df000a15 	stw	fp,40(sp)
  809fd4:	ddc00915 	stw	r23,36(sp)
  809fd8:	dd400715 	stw	r21,28(sp)
  809fdc:	dd000615 	stw	r20,24(sp)
  809fe0:	dcc00515 	stw	r19,20(sp)
  809fe4:	dc000215 	stw	r16,8(sp)
  809fe8:	2825883a 	mov	r18,r5
  809fec:	3023883a 	mov	r17,r6
  809ff0:	202d883a 	mov	r22,r4
  809ff4:	2800c926 	beq	r5,zero,80a31c <_realloc_r+0x360>
  809ff8:	080c7700 	call	80c770 <__malloc_lock>
  809ffc:	943ffe04 	addi	r16,r18,-8
  80a000:	88c002c4 	addi	r3,r17,11
  80a004:	00800584 	movi	r2,22
  80a008:	82000117 	ldw	r8,4(r16)
  80a00c:	10c01b2e 	bgeu	r2,r3,80a07c <_realloc_r+0xc0>
  80a010:	00bffe04 	movi	r2,-8
  80a014:	188e703a 	and	r7,r3,r2
  80a018:	3839883a 	mov	fp,r7
  80a01c:	38001a16 	blt	r7,zero,80a088 <_realloc_r+0xcc>
  80a020:	e4401936 	bltu	fp,r17,80a088 <_realloc_r+0xcc>
  80a024:	013fff04 	movi	r4,-4
  80a028:	4126703a 	and	r19,r8,r4
  80a02c:	99c02616 	blt	r19,r7,80a0c8 <_realloc_r+0x10c>
  80a030:	802b883a 	mov	r21,r16
  80a034:	9829883a 	mov	r20,r19
  80a038:	84000204 	addi	r16,r16,8
  80a03c:	a80f883a 	mov	r7,r21
  80a040:	a70dc83a 	sub	r6,r20,fp
  80a044:	008003c4 	movi	r2,15
  80a048:	1180c136 	bltu	r2,r6,80a350 <_realloc_r+0x394>
  80a04c:	38800117 	ldw	r2,4(r7)
  80a050:	a549883a 	add	r4,r20,r21
  80a054:	1080004c 	andi	r2,r2,1
  80a058:	a084b03a 	or	r2,r20,r2
  80a05c:	38800115 	stw	r2,4(r7)
  80a060:	20c00117 	ldw	r3,4(r4)
  80a064:	18c00054 	ori	r3,r3,1
  80a068:	20c00115 	stw	r3,4(r4)
  80a06c:	b009883a 	mov	r4,r22
  80a070:	080c8780 	call	80c878 <__malloc_unlock>
  80a074:	8023883a 	mov	r17,r16
  80a078:	00000606 	br	80a094 <_realloc_r+0xd8>
  80a07c:	01c00404 	movi	r7,16
  80a080:	3839883a 	mov	fp,r7
  80a084:	e47fe72e 	bgeu	fp,r17,80a024 <_realloc_r+0x68>
  80a088:	00800304 	movi	r2,12
  80a08c:	0023883a 	mov	r17,zero
  80a090:	b0800015 	stw	r2,0(r22)
  80a094:	8805883a 	mov	r2,r17
  80a098:	dfc00b17 	ldw	ra,44(sp)
  80a09c:	df000a17 	ldw	fp,40(sp)
  80a0a0:	ddc00917 	ldw	r23,36(sp)
  80a0a4:	dd800817 	ldw	r22,32(sp)
  80a0a8:	dd400717 	ldw	r21,28(sp)
  80a0ac:	dd000617 	ldw	r20,24(sp)
  80a0b0:	dcc00517 	ldw	r19,20(sp)
  80a0b4:	dc800417 	ldw	r18,16(sp)
  80a0b8:	dc400317 	ldw	r17,12(sp)
  80a0bc:	dc000217 	ldw	r16,8(sp)
  80a0c0:	dec00c04 	addi	sp,sp,48
  80a0c4:	f800283a 	ret
  80a0c8:	008020b4 	movhi	r2,130
  80a0cc:	10b34604 	addi	r2,r2,-13032
  80a0d0:	12400217 	ldw	r9,8(r2)
  80a0d4:	84cd883a 	add	r6,r16,r19
  80a0d8:	802b883a 	mov	r21,r16
  80a0dc:	3240b926 	beq	r6,r9,80a3c4 <_realloc_r+0x408>
  80a0e0:	31400117 	ldw	r5,4(r6)
  80a0e4:	00bfff84 	movi	r2,-2
  80a0e8:	2884703a 	and	r2,r5,r2
  80a0ec:	1185883a 	add	r2,r2,r6
  80a0f0:	10c00117 	ldw	r3,4(r2)
  80a0f4:	18c0004c 	andi	r3,r3,1
  80a0f8:	1807003a 	cmpeq	r3,r3,zero
  80a0fc:	1800a326 	beq	r3,zero,80a38c <_realloc_r+0x3d0>
  80a100:	2908703a 	and	r4,r5,r4
  80a104:	9929883a 	add	r20,r19,r4
  80a108:	a1c0a30e 	bge	r20,r7,80a398 <_realloc_r+0x3dc>
  80a10c:	4080004c 	andi	r2,r8,1
  80a110:	1000551e 	bne	r2,zero,80a268 <_realloc_r+0x2ac>
  80a114:	80800017 	ldw	r2,0(r16)
  80a118:	80afc83a 	sub	r23,r16,r2
  80a11c:	b8c00117 	ldw	r3,4(r23)
  80a120:	00bfff04 	movi	r2,-4
  80a124:	1884703a 	and	r2,r3,r2
  80a128:	30002e26 	beq	r6,zero,80a1e4 <_realloc_r+0x228>
  80a12c:	3240b926 	beq	r6,r9,80a414 <_realloc_r+0x458>
  80a130:	98a9883a 	add	r20,r19,r2
  80a134:	2509883a 	add	r4,r4,r20
  80a138:	d9000015 	stw	r4,0(sp)
  80a13c:	21c02a16 	blt	r4,r7,80a1e8 <_realloc_r+0x22c>
  80a140:	30800317 	ldw	r2,12(r6)
  80a144:	30c00217 	ldw	r3,8(r6)
  80a148:	01400904 	movi	r5,36
  80a14c:	99bfff04 	addi	r6,r19,-4
  80a150:	18800315 	stw	r2,12(r3)
  80a154:	10c00215 	stw	r3,8(r2)
  80a158:	b9000317 	ldw	r4,12(r23)
  80a15c:	b8800217 	ldw	r2,8(r23)
  80a160:	b82b883a 	mov	r21,r23
  80a164:	bc000204 	addi	r16,r23,8
  80a168:	20800215 	stw	r2,8(r4)
  80a16c:	11000315 	stw	r4,12(r2)
  80a170:	2980e436 	bltu	r5,r6,80a504 <_realloc_r+0x548>
  80a174:	008004c4 	movi	r2,19
  80a178:	9009883a 	mov	r4,r18
  80a17c:	8011883a 	mov	r8,r16
  80a180:	11800f2e 	bgeu	r2,r6,80a1c0 <_realloc_r+0x204>
  80a184:	90800017 	ldw	r2,0(r18)
  80a188:	ba000404 	addi	r8,r23,16
  80a18c:	91000204 	addi	r4,r18,8
  80a190:	b8800215 	stw	r2,8(r23)
  80a194:	90c00117 	ldw	r3,4(r18)
  80a198:	008006c4 	movi	r2,27
  80a19c:	b8c00315 	stw	r3,12(r23)
  80a1a0:	1180072e 	bgeu	r2,r6,80a1c0 <_realloc_r+0x204>
  80a1a4:	90c00217 	ldw	r3,8(r18)
  80a1a8:	ba000604 	addi	r8,r23,24
  80a1ac:	91000404 	addi	r4,r18,16
  80a1b0:	b8c00415 	stw	r3,16(r23)
  80a1b4:	90800317 	ldw	r2,12(r18)
  80a1b8:	b8800515 	stw	r2,20(r23)
  80a1bc:	3140e726 	beq	r6,r5,80a55c <_realloc_r+0x5a0>
  80a1c0:	20800017 	ldw	r2,0(r4)
  80a1c4:	dd000017 	ldw	r20,0(sp)
  80a1c8:	b80f883a 	mov	r7,r23
  80a1cc:	40800015 	stw	r2,0(r8)
  80a1d0:	20c00117 	ldw	r3,4(r4)
  80a1d4:	40c00115 	stw	r3,4(r8)
  80a1d8:	20800217 	ldw	r2,8(r4)
  80a1dc:	40800215 	stw	r2,8(r8)
  80a1e0:	003f9706 	br	80a040 <_realloc_r+0x84>
  80a1e4:	98a9883a 	add	r20,r19,r2
  80a1e8:	a1c01f16 	blt	r20,r7,80a268 <_realloc_r+0x2ac>
  80a1ec:	b8c00317 	ldw	r3,12(r23)
  80a1f0:	b8800217 	ldw	r2,8(r23)
  80a1f4:	99bfff04 	addi	r6,r19,-4
  80a1f8:	01400904 	movi	r5,36
  80a1fc:	b82b883a 	mov	r21,r23
  80a200:	18800215 	stw	r2,8(r3)
  80a204:	10c00315 	stw	r3,12(r2)
  80a208:	bc000204 	addi	r16,r23,8
  80a20c:	2980c336 	bltu	r5,r6,80a51c <_realloc_r+0x560>
  80a210:	008004c4 	movi	r2,19
  80a214:	9009883a 	mov	r4,r18
  80a218:	8011883a 	mov	r8,r16
  80a21c:	11800f2e 	bgeu	r2,r6,80a25c <_realloc_r+0x2a0>
  80a220:	90800017 	ldw	r2,0(r18)
  80a224:	ba000404 	addi	r8,r23,16
  80a228:	91000204 	addi	r4,r18,8
  80a22c:	b8800215 	stw	r2,8(r23)
  80a230:	90c00117 	ldw	r3,4(r18)
  80a234:	008006c4 	movi	r2,27
  80a238:	b8c00315 	stw	r3,12(r23)
  80a23c:	1180072e 	bgeu	r2,r6,80a25c <_realloc_r+0x2a0>
  80a240:	90c00217 	ldw	r3,8(r18)
  80a244:	ba000604 	addi	r8,r23,24
  80a248:	91000404 	addi	r4,r18,16
  80a24c:	b8c00415 	stw	r3,16(r23)
  80a250:	90800317 	ldw	r2,12(r18)
  80a254:	b8800515 	stw	r2,20(r23)
  80a258:	3140c726 	beq	r6,r5,80a578 <_realloc_r+0x5bc>
  80a25c:	20800017 	ldw	r2,0(r4)
  80a260:	b80f883a 	mov	r7,r23
  80a264:	003fd906 	br	80a1cc <_realloc_r+0x210>
  80a268:	880b883a 	mov	r5,r17
  80a26c:	b009883a 	mov	r4,r22
  80a270:	080858c0 	call	80858c <_malloc_r>
  80a274:	1023883a 	mov	r17,r2
  80a278:	10002526 	beq	r2,zero,80a310 <_realloc_r+0x354>
  80a27c:	80800117 	ldw	r2,4(r16)
  80a280:	00ffff84 	movi	r3,-2
  80a284:	893ffe04 	addi	r4,r17,-8
  80a288:	10c4703a 	and	r2,r2,r3
  80a28c:	8085883a 	add	r2,r16,r2
  80a290:	20809526 	beq	r4,r2,80a4e8 <_realloc_r+0x52c>
  80a294:	99bfff04 	addi	r6,r19,-4
  80a298:	01c00904 	movi	r7,36
  80a29c:	39804536 	bltu	r7,r6,80a3b4 <_realloc_r+0x3f8>
  80a2a0:	008004c4 	movi	r2,19
  80a2a4:	9009883a 	mov	r4,r18
  80a2a8:	880b883a 	mov	r5,r17
  80a2ac:	11800f2e 	bgeu	r2,r6,80a2ec <_realloc_r+0x330>
  80a2b0:	90800017 	ldw	r2,0(r18)
  80a2b4:	89400204 	addi	r5,r17,8
  80a2b8:	91000204 	addi	r4,r18,8
  80a2bc:	88800015 	stw	r2,0(r17)
  80a2c0:	90c00117 	ldw	r3,4(r18)
  80a2c4:	008006c4 	movi	r2,27
  80a2c8:	88c00115 	stw	r3,4(r17)
  80a2cc:	1180072e 	bgeu	r2,r6,80a2ec <_realloc_r+0x330>
  80a2d0:	90c00217 	ldw	r3,8(r18)
  80a2d4:	89400404 	addi	r5,r17,16
  80a2d8:	91000404 	addi	r4,r18,16
  80a2dc:	88c00215 	stw	r3,8(r17)
  80a2e0:	90800317 	ldw	r2,12(r18)
  80a2e4:	88800315 	stw	r2,12(r17)
  80a2e8:	31c09126 	beq	r6,r7,80a530 <_realloc_r+0x574>
  80a2ec:	20800017 	ldw	r2,0(r4)
  80a2f0:	28800015 	stw	r2,0(r5)
  80a2f4:	20c00117 	ldw	r3,4(r4)
  80a2f8:	28c00115 	stw	r3,4(r5)
  80a2fc:	20800217 	ldw	r2,8(r4)
  80a300:	28800215 	stw	r2,8(r5)
  80a304:	900b883a 	mov	r5,r18
  80a308:	b009883a 	mov	r4,r22
  80a30c:	0807a040 	call	807a04 <_free_r>
  80a310:	b009883a 	mov	r4,r22
  80a314:	080c8780 	call	80c878 <__malloc_unlock>
  80a318:	003f5e06 	br	80a094 <_realloc_r+0xd8>
  80a31c:	300b883a 	mov	r5,r6
  80a320:	dfc00b17 	ldw	ra,44(sp)
  80a324:	df000a17 	ldw	fp,40(sp)
  80a328:	ddc00917 	ldw	r23,36(sp)
  80a32c:	dd800817 	ldw	r22,32(sp)
  80a330:	dd400717 	ldw	r21,28(sp)
  80a334:	dd000617 	ldw	r20,24(sp)
  80a338:	dcc00517 	ldw	r19,20(sp)
  80a33c:	dc800417 	ldw	r18,16(sp)
  80a340:	dc400317 	ldw	r17,12(sp)
  80a344:	dc000217 	ldw	r16,8(sp)
  80a348:	dec00c04 	addi	sp,sp,48
  80a34c:	080858c1 	jmpi	80858c <_malloc_r>
  80a350:	38800117 	ldw	r2,4(r7)
  80a354:	e54b883a 	add	r5,fp,r21
  80a358:	31000054 	ori	r4,r6,1
  80a35c:	1080004c 	andi	r2,r2,1
  80a360:	1704b03a 	or	r2,r2,fp
  80a364:	38800115 	stw	r2,4(r7)
  80a368:	29000115 	stw	r4,4(r5)
  80a36c:	2987883a 	add	r3,r5,r6
  80a370:	18800117 	ldw	r2,4(r3)
  80a374:	29400204 	addi	r5,r5,8
  80a378:	b009883a 	mov	r4,r22
  80a37c:	10800054 	ori	r2,r2,1
  80a380:	18800115 	stw	r2,4(r3)
  80a384:	0807a040 	call	807a04 <_free_r>
  80a388:	003f3806 	br	80a06c <_realloc_r+0xb0>
  80a38c:	000d883a 	mov	r6,zero
  80a390:	0009883a 	mov	r4,zero
  80a394:	003f5d06 	br	80a10c <_realloc_r+0x150>
  80a398:	30c00217 	ldw	r3,8(r6)
  80a39c:	30800317 	ldw	r2,12(r6)
  80a3a0:	800f883a 	mov	r7,r16
  80a3a4:	84000204 	addi	r16,r16,8
  80a3a8:	10c00215 	stw	r3,8(r2)
  80a3ac:	18800315 	stw	r2,12(r3)
  80a3b0:	003f2306 	br	80a040 <_realloc_r+0x84>
  80a3b4:	8809883a 	mov	r4,r17
  80a3b8:	900b883a 	mov	r5,r18
  80a3bc:	0808e500 	call	808e50 <memmove>
  80a3c0:	003fd006 	br	80a304 <_realloc_r+0x348>
  80a3c4:	30800117 	ldw	r2,4(r6)
  80a3c8:	e0c00404 	addi	r3,fp,16
  80a3cc:	1108703a 	and	r4,r2,r4
  80a3d0:	9905883a 	add	r2,r19,r4
  80a3d4:	10ff4d16 	blt	r2,r3,80a10c <_realloc_r+0x150>
  80a3d8:	1705c83a 	sub	r2,r2,fp
  80a3dc:	870b883a 	add	r5,r16,fp
  80a3e0:	10800054 	ori	r2,r2,1
  80a3e4:	28800115 	stw	r2,4(r5)
  80a3e8:	80c00117 	ldw	r3,4(r16)
  80a3ec:	008020b4 	movhi	r2,130
  80a3f0:	10b34604 	addi	r2,r2,-13032
  80a3f4:	b009883a 	mov	r4,r22
  80a3f8:	18c0004c 	andi	r3,r3,1
  80a3fc:	e0c6b03a 	or	r3,fp,r3
  80a400:	11400215 	stw	r5,8(r2)
  80a404:	80c00115 	stw	r3,4(r16)
  80a408:	080c8780 	call	80c878 <__malloc_unlock>
  80a40c:	84400204 	addi	r17,r16,8
  80a410:	003f2006 	br	80a094 <_realloc_r+0xd8>
  80a414:	98a9883a 	add	r20,r19,r2
  80a418:	2509883a 	add	r4,r4,r20
  80a41c:	e0800404 	addi	r2,fp,16
  80a420:	d9000115 	stw	r4,4(sp)
  80a424:	20bf7016 	blt	r4,r2,80a1e8 <_realloc_r+0x22c>
  80a428:	b8c00317 	ldw	r3,12(r23)
  80a42c:	b8800217 	ldw	r2,8(r23)
  80a430:	99bfff04 	addi	r6,r19,-4
  80a434:	01400904 	movi	r5,36
  80a438:	18800215 	stw	r2,8(r3)
  80a43c:	10c00315 	stw	r3,12(r2)
  80a440:	bc400204 	addi	r17,r23,8
  80a444:	29804136 	bltu	r5,r6,80a54c <_realloc_r+0x590>
  80a448:	008004c4 	movi	r2,19
  80a44c:	9009883a 	mov	r4,r18
  80a450:	880f883a 	mov	r7,r17
  80a454:	11800f2e 	bgeu	r2,r6,80a494 <_realloc_r+0x4d8>
  80a458:	90800017 	ldw	r2,0(r18)
  80a45c:	b9c00404 	addi	r7,r23,16
  80a460:	91000204 	addi	r4,r18,8
  80a464:	b8800215 	stw	r2,8(r23)
  80a468:	90c00117 	ldw	r3,4(r18)
  80a46c:	008006c4 	movi	r2,27
  80a470:	b8c00315 	stw	r3,12(r23)
  80a474:	1180072e 	bgeu	r2,r6,80a494 <_realloc_r+0x4d8>
  80a478:	90c00217 	ldw	r3,8(r18)
  80a47c:	b9c00604 	addi	r7,r23,24
  80a480:	91000404 	addi	r4,r18,16
  80a484:	b8c00415 	stw	r3,16(r23)
  80a488:	90800317 	ldw	r2,12(r18)
  80a48c:	b8800515 	stw	r2,20(r23)
  80a490:	31404026 	beq	r6,r5,80a594 <_realloc_r+0x5d8>
  80a494:	20800017 	ldw	r2,0(r4)
  80a498:	38800015 	stw	r2,0(r7)
  80a49c:	20c00117 	ldw	r3,4(r4)
  80a4a0:	38c00115 	stw	r3,4(r7)
  80a4a4:	20800217 	ldw	r2,8(r4)
  80a4a8:	38800215 	stw	r2,8(r7)
  80a4ac:	d8c00117 	ldw	r3,4(sp)
  80a4b0:	bf0b883a 	add	r5,r23,fp
  80a4b4:	b009883a 	mov	r4,r22
  80a4b8:	1f05c83a 	sub	r2,r3,fp
  80a4bc:	10800054 	ori	r2,r2,1
  80a4c0:	28800115 	stw	r2,4(r5)
  80a4c4:	b8c00117 	ldw	r3,4(r23)
  80a4c8:	008020b4 	movhi	r2,130
  80a4cc:	10b34604 	addi	r2,r2,-13032
  80a4d0:	11400215 	stw	r5,8(r2)
  80a4d4:	18c0004c 	andi	r3,r3,1
  80a4d8:	e0c6b03a 	or	r3,fp,r3
  80a4dc:	b8c00115 	stw	r3,4(r23)
  80a4e0:	080c8780 	call	80c878 <__malloc_unlock>
  80a4e4:	003eeb06 	br	80a094 <_realloc_r+0xd8>
  80a4e8:	20800117 	ldw	r2,4(r4)
  80a4ec:	00ffff04 	movi	r3,-4
  80a4f0:	800f883a 	mov	r7,r16
  80a4f4:	10c4703a 	and	r2,r2,r3
  80a4f8:	98a9883a 	add	r20,r19,r2
  80a4fc:	84000204 	addi	r16,r16,8
  80a500:	003ecf06 	br	80a040 <_realloc_r+0x84>
  80a504:	900b883a 	mov	r5,r18
  80a508:	8009883a 	mov	r4,r16
  80a50c:	0808e500 	call	808e50 <memmove>
  80a510:	dd000017 	ldw	r20,0(sp)
  80a514:	b80f883a 	mov	r7,r23
  80a518:	003ec906 	br	80a040 <_realloc_r+0x84>
  80a51c:	900b883a 	mov	r5,r18
  80a520:	8009883a 	mov	r4,r16
  80a524:	0808e500 	call	808e50 <memmove>
  80a528:	b80f883a 	mov	r7,r23
  80a52c:	003ec406 	br	80a040 <_realloc_r+0x84>
  80a530:	90c00417 	ldw	r3,16(r18)
  80a534:	89400604 	addi	r5,r17,24
  80a538:	91000604 	addi	r4,r18,24
  80a53c:	88c00415 	stw	r3,16(r17)
  80a540:	90800517 	ldw	r2,20(r18)
  80a544:	88800515 	stw	r2,20(r17)
  80a548:	003f6806 	br	80a2ec <_realloc_r+0x330>
  80a54c:	900b883a 	mov	r5,r18
  80a550:	8809883a 	mov	r4,r17
  80a554:	0808e500 	call	808e50 <memmove>
  80a558:	003fd406 	br	80a4ac <_realloc_r+0x4f0>
  80a55c:	90c00417 	ldw	r3,16(r18)
  80a560:	91000604 	addi	r4,r18,24
  80a564:	ba000804 	addi	r8,r23,32
  80a568:	b8c00615 	stw	r3,24(r23)
  80a56c:	90800517 	ldw	r2,20(r18)
  80a570:	b8800715 	stw	r2,28(r23)
  80a574:	003f1206 	br	80a1c0 <_realloc_r+0x204>
  80a578:	90c00417 	ldw	r3,16(r18)
  80a57c:	91000604 	addi	r4,r18,24
  80a580:	ba000804 	addi	r8,r23,32
  80a584:	b8c00615 	stw	r3,24(r23)
  80a588:	90800517 	ldw	r2,20(r18)
  80a58c:	b8800715 	stw	r2,28(r23)
  80a590:	003f3206 	br	80a25c <_realloc_r+0x2a0>
  80a594:	90c00417 	ldw	r3,16(r18)
  80a598:	91000604 	addi	r4,r18,24
  80a59c:	b9c00804 	addi	r7,r23,32
  80a5a0:	b8c00615 	stw	r3,24(r23)
  80a5a4:	90800517 	ldw	r2,20(r18)
  80a5a8:	b8800715 	stw	r2,28(r23)
  80a5ac:	003fb906 	br	80a494 <_realloc_r+0x4d8>

0080a5b0 <__isinfd>:
  80a5b0:	200d883a 	mov	r6,r4
  80a5b4:	0109c83a 	sub	r4,zero,r4
  80a5b8:	2188b03a 	or	r4,r4,r6
  80a5bc:	2008d7fa 	srli	r4,r4,31
  80a5c0:	00a00034 	movhi	r2,32768
  80a5c4:	10bfffc4 	addi	r2,r2,-1
  80a5c8:	1144703a 	and	r2,r2,r5
  80a5cc:	2088b03a 	or	r4,r4,r2
  80a5d0:	009ffc34 	movhi	r2,32752
  80a5d4:	1105c83a 	sub	r2,r2,r4
  80a5d8:	0087c83a 	sub	r3,zero,r2
  80a5dc:	10c4b03a 	or	r2,r2,r3
  80a5e0:	1004d7fa 	srli	r2,r2,31
  80a5e4:	00c00044 	movi	r3,1
  80a5e8:	1885c83a 	sub	r2,r3,r2
  80a5ec:	f800283a 	ret

0080a5f0 <_sbrk_r>:
  80a5f0:	defffd04 	addi	sp,sp,-12
  80a5f4:	dc000015 	stw	r16,0(sp)
  80a5f8:	040020b4 	movhi	r16,130
  80a5fc:	84001304 	addi	r16,r16,76
  80a600:	dc400115 	stw	r17,4(sp)
  80a604:	80000015 	stw	zero,0(r16)
  80a608:	2023883a 	mov	r17,r4
  80a60c:	2809883a 	mov	r4,r5
  80a610:	dfc00215 	stw	ra,8(sp)
  80a614:	080c42c0 	call	80c42c <sbrk>
  80a618:	1007883a 	mov	r3,r2
  80a61c:	00bfffc4 	movi	r2,-1
  80a620:	18800626 	beq	r3,r2,80a63c <_sbrk_r+0x4c>
  80a624:	1805883a 	mov	r2,r3
  80a628:	dfc00217 	ldw	ra,8(sp)
  80a62c:	dc400117 	ldw	r17,4(sp)
  80a630:	dc000017 	ldw	r16,0(sp)
  80a634:	dec00304 	addi	sp,sp,12
  80a638:	f800283a 	ret
  80a63c:	80800017 	ldw	r2,0(r16)
  80a640:	103ff826 	beq	r2,zero,80a624 <_sbrk_r+0x34>
  80a644:	88800015 	stw	r2,0(r17)
  80a648:	1805883a 	mov	r2,r3
  80a64c:	dfc00217 	ldw	ra,8(sp)
  80a650:	dc400117 	ldw	r17,4(sp)
  80a654:	dc000017 	ldw	r16,0(sp)
  80a658:	dec00304 	addi	sp,sp,12
  80a65c:	f800283a 	ret

0080a660 <__sclose>:
  80a660:	2940038f 	ldh	r5,14(r5)
  80a664:	080a9941 	jmpi	80a994 <_close_r>

0080a668 <__sseek>:
  80a668:	defffe04 	addi	sp,sp,-8
  80a66c:	dc000015 	stw	r16,0(sp)
  80a670:	2821883a 	mov	r16,r5
  80a674:	2940038f 	ldh	r5,14(r5)
  80a678:	dfc00115 	stw	ra,4(sp)
  80a67c:	080ac0c0 	call	80ac0c <_lseek_r>
  80a680:	1007883a 	mov	r3,r2
  80a684:	00bfffc4 	movi	r2,-1
  80a688:	18800926 	beq	r3,r2,80a6b0 <__sseek+0x48>
  80a68c:	8080030b 	ldhu	r2,12(r16)
  80a690:	80c01415 	stw	r3,80(r16)
  80a694:	10840014 	ori	r2,r2,4096
  80a698:	8080030d 	sth	r2,12(r16)
  80a69c:	1805883a 	mov	r2,r3
  80a6a0:	dfc00117 	ldw	ra,4(sp)
  80a6a4:	dc000017 	ldw	r16,0(sp)
  80a6a8:	dec00204 	addi	sp,sp,8
  80a6ac:	f800283a 	ret
  80a6b0:	8080030b 	ldhu	r2,12(r16)
  80a6b4:	10bbffcc 	andi	r2,r2,61439
  80a6b8:	8080030d 	sth	r2,12(r16)
  80a6bc:	1805883a 	mov	r2,r3
  80a6c0:	dfc00117 	ldw	ra,4(sp)
  80a6c4:	dc000017 	ldw	r16,0(sp)
  80a6c8:	dec00204 	addi	sp,sp,8
  80a6cc:	f800283a 	ret

0080a6d0 <__swrite>:
  80a6d0:	2880030b 	ldhu	r2,12(r5)
  80a6d4:	defffb04 	addi	sp,sp,-20
  80a6d8:	dcc00315 	stw	r19,12(sp)
  80a6dc:	1080400c 	andi	r2,r2,256
  80a6e0:	dc800215 	stw	r18,8(sp)
  80a6e4:	dc400115 	stw	r17,4(sp)
  80a6e8:	dc000015 	stw	r16,0(sp)
  80a6ec:	3027883a 	mov	r19,r6
  80a6f0:	3825883a 	mov	r18,r7
  80a6f4:	dfc00415 	stw	ra,16(sp)
  80a6f8:	2821883a 	mov	r16,r5
  80a6fc:	000d883a 	mov	r6,zero
  80a700:	01c00084 	movi	r7,2
  80a704:	2023883a 	mov	r17,r4
  80a708:	10000226 	beq	r2,zero,80a714 <__swrite+0x44>
  80a70c:	2940038f 	ldh	r5,14(r5)
  80a710:	080ac0c0 	call	80ac0c <_lseek_r>
  80a714:	8080030b 	ldhu	r2,12(r16)
  80a718:	8140038f 	ldh	r5,14(r16)
  80a71c:	8809883a 	mov	r4,r17
  80a720:	10bbffcc 	andi	r2,r2,61439
  80a724:	980d883a 	mov	r6,r19
  80a728:	900f883a 	mov	r7,r18
  80a72c:	8080030d 	sth	r2,12(r16)
  80a730:	dfc00417 	ldw	ra,16(sp)
  80a734:	dcc00317 	ldw	r19,12(sp)
  80a738:	dc800217 	ldw	r18,8(sp)
  80a73c:	dc400117 	ldw	r17,4(sp)
  80a740:	dc000017 	ldw	r16,0(sp)
  80a744:	dec00504 	addi	sp,sp,20
  80a748:	080a8681 	jmpi	80a868 <_write_r>

0080a74c <__sread>:
  80a74c:	defffe04 	addi	sp,sp,-8
  80a750:	dc000015 	stw	r16,0(sp)
  80a754:	2821883a 	mov	r16,r5
  80a758:	2940038f 	ldh	r5,14(r5)
  80a75c:	dfc00115 	stw	ra,4(sp)
  80a760:	080ac840 	call	80ac84 <_read_r>
  80a764:	1007883a 	mov	r3,r2
  80a768:	10000816 	blt	r2,zero,80a78c <__sread+0x40>
  80a76c:	80801417 	ldw	r2,80(r16)
  80a770:	10c5883a 	add	r2,r2,r3
  80a774:	80801415 	stw	r2,80(r16)
  80a778:	1805883a 	mov	r2,r3
  80a77c:	dfc00117 	ldw	ra,4(sp)
  80a780:	dc000017 	ldw	r16,0(sp)
  80a784:	dec00204 	addi	sp,sp,8
  80a788:	f800283a 	ret
  80a78c:	8080030b 	ldhu	r2,12(r16)
  80a790:	10bbffcc 	andi	r2,r2,61439
  80a794:	8080030d 	sth	r2,12(r16)
  80a798:	1805883a 	mov	r2,r3
  80a79c:	dfc00117 	ldw	ra,4(sp)
  80a7a0:	dc000017 	ldw	r16,0(sp)
  80a7a4:	dec00204 	addi	sp,sp,8
  80a7a8:	f800283a 	ret

0080a7ac <strcmp>:
  80a7ac:	2144b03a 	or	r2,r4,r5
  80a7b0:	108000cc 	andi	r2,r2,3
  80a7b4:	10001d1e 	bne	r2,zero,80a82c <strcmp+0x80>
  80a7b8:	200f883a 	mov	r7,r4
  80a7bc:	28800017 	ldw	r2,0(r5)
  80a7c0:	21000017 	ldw	r4,0(r4)
  80a7c4:	280d883a 	mov	r6,r5
  80a7c8:	2080161e 	bne	r4,r2,80a824 <strcmp+0x78>
  80a7cc:	023fbff4 	movhi	r8,65279
  80a7d0:	423fbfc4 	addi	r8,r8,-257
  80a7d4:	2207883a 	add	r3,r4,r8
  80a7d8:	01602074 	movhi	r5,32897
  80a7dc:	29602004 	addi	r5,r5,-32640
  80a7e0:	1946703a 	and	r3,r3,r5
  80a7e4:	0104303a 	nor	r2,zero,r4
  80a7e8:	10c4703a 	and	r2,r2,r3
  80a7ec:	10001c1e 	bne	r2,zero,80a860 <strcmp+0xb4>
  80a7f0:	4013883a 	mov	r9,r8
  80a7f4:	2811883a 	mov	r8,r5
  80a7f8:	00000106 	br	80a800 <strcmp+0x54>
  80a7fc:	1800181e 	bne	r3,zero,80a860 <strcmp+0xb4>
  80a800:	39c00104 	addi	r7,r7,4
  80a804:	39000017 	ldw	r4,0(r7)
  80a808:	31800104 	addi	r6,r6,4
  80a80c:	31400017 	ldw	r5,0(r6)
  80a810:	2245883a 	add	r2,r4,r9
  80a814:	1204703a 	and	r2,r2,r8
  80a818:	0106303a 	nor	r3,zero,r4
  80a81c:	1886703a 	and	r3,r3,r2
  80a820:	217ff626 	beq	r4,r5,80a7fc <strcmp+0x50>
  80a824:	3809883a 	mov	r4,r7
  80a828:	300b883a 	mov	r5,r6
  80a82c:	20c00007 	ldb	r3,0(r4)
  80a830:	1800051e 	bne	r3,zero,80a848 <strcmp+0x9c>
  80a834:	00000606 	br	80a850 <strcmp+0xa4>
  80a838:	21000044 	addi	r4,r4,1
  80a83c:	20c00007 	ldb	r3,0(r4)
  80a840:	29400044 	addi	r5,r5,1
  80a844:	18000226 	beq	r3,zero,80a850 <strcmp+0xa4>
  80a848:	28800007 	ldb	r2,0(r5)
  80a84c:	18bffa26 	beq	r3,r2,80a838 <strcmp+0x8c>
  80a850:	20c00003 	ldbu	r3,0(r4)
  80a854:	28800003 	ldbu	r2,0(r5)
  80a858:	1885c83a 	sub	r2,r3,r2
  80a85c:	f800283a 	ret
  80a860:	0005883a 	mov	r2,zero
  80a864:	f800283a 	ret

0080a868 <_write_r>:
  80a868:	defffd04 	addi	sp,sp,-12
  80a86c:	dc000015 	stw	r16,0(sp)
  80a870:	040020b4 	movhi	r16,130
  80a874:	84001304 	addi	r16,r16,76
  80a878:	dc400115 	stw	r17,4(sp)
  80a87c:	80000015 	stw	zero,0(r16)
  80a880:	2023883a 	mov	r17,r4
  80a884:	2809883a 	mov	r4,r5
  80a888:	300b883a 	mov	r5,r6
  80a88c:	380d883a 	mov	r6,r7
  80a890:	dfc00215 	stw	ra,8(sp)
  80a894:	080c4e80 	call	80c4e8 <write>
  80a898:	1007883a 	mov	r3,r2
  80a89c:	00bfffc4 	movi	r2,-1
  80a8a0:	18800626 	beq	r3,r2,80a8bc <_write_r+0x54>
  80a8a4:	1805883a 	mov	r2,r3
  80a8a8:	dfc00217 	ldw	ra,8(sp)
  80a8ac:	dc400117 	ldw	r17,4(sp)
  80a8b0:	dc000017 	ldw	r16,0(sp)
  80a8b4:	dec00304 	addi	sp,sp,12
  80a8b8:	f800283a 	ret
  80a8bc:	80800017 	ldw	r2,0(r16)
  80a8c0:	103ff826 	beq	r2,zero,80a8a4 <_write_r+0x3c>
  80a8c4:	88800015 	stw	r2,0(r17)
  80a8c8:	1805883a 	mov	r2,r3
  80a8cc:	dfc00217 	ldw	ra,8(sp)
  80a8d0:	dc400117 	ldw	r17,4(sp)
  80a8d4:	dc000017 	ldw	r16,0(sp)
  80a8d8:	dec00304 	addi	sp,sp,12
  80a8dc:	f800283a 	ret

0080a8e0 <_calloc_r>:
  80a8e0:	298b383a 	mul	r5,r5,r6
  80a8e4:	defffe04 	addi	sp,sp,-8
  80a8e8:	dc000015 	stw	r16,0(sp)
  80a8ec:	dfc00115 	stw	ra,4(sp)
  80a8f0:	080858c0 	call	80858c <_malloc_r>
  80a8f4:	1021883a 	mov	r16,r2
  80a8f8:	01c00904 	movi	r7,36
  80a8fc:	10000d26 	beq	r2,zero,80a934 <_calloc_r+0x54>
  80a900:	10ffff17 	ldw	r3,-4(r2)
  80a904:	1009883a 	mov	r4,r2
  80a908:	00bfff04 	movi	r2,-4
  80a90c:	1886703a 	and	r3,r3,r2
  80a910:	1887883a 	add	r3,r3,r2
  80a914:	180d883a 	mov	r6,r3
  80a918:	000b883a 	mov	r5,zero
  80a91c:	38c01736 	bltu	r7,r3,80a97c <_calloc_r+0x9c>
  80a920:	008004c4 	movi	r2,19
  80a924:	10c00836 	bltu	r2,r3,80a948 <_calloc_r+0x68>
  80a928:	20000215 	stw	zero,8(r4)
  80a92c:	20000015 	stw	zero,0(r4)
  80a930:	20000115 	stw	zero,4(r4)
  80a934:	8005883a 	mov	r2,r16
  80a938:	dfc00117 	ldw	ra,4(sp)
  80a93c:	dc000017 	ldw	r16,0(sp)
  80a940:	dec00204 	addi	sp,sp,8
  80a944:	f800283a 	ret
  80a948:	008006c4 	movi	r2,27
  80a94c:	80000015 	stw	zero,0(r16)
  80a950:	80000115 	stw	zero,4(r16)
  80a954:	81000204 	addi	r4,r16,8
  80a958:	10fff32e 	bgeu	r2,r3,80a928 <_calloc_r+0x48>
  80a95c:	80000215 	stw	zero,8(r16)
  80a960:	80000315 	stw	zero,12(r16)
  80a964:	81000404 	addi	r4,r16,16
  80a968:	19ffef1e 	bne	r3,r7,80a928 <_calloc_r+0x48>
  80a96c:	81000604 	addi	r4,r16,24
  80a970:	80000415 	stw	zero,16(r16)
  80a974:	80000515 	stw	zero,20(r16)
  80a978:	003feb06 	br	80a928 <_calloc_r+0x48>
  80a97c:	0808f300 	call	808f30 <memset>
  80a980:	8005883a 	mov	r2,r16
  80a984:	dfc00117 	ldw	ra,4(sp)
  80a988:	dc000017 	ldw	r16,0(sp)
  80a98c:	dec00204 	addi	sp,sp,8
  80a990:	f800283a 	ret

0080a994 <_close_r>:
  80a994:	defffd04 	addi	sp,sp,-12
  80a998:	dc000015 	stw	r16,0(sp)
  80a99c:	040020b4 	movhi	r16,130
  80a9a0:	84001304 	addi	r16,r16,76
  80a9a4:	dc400115 	stw	r17,4(sp)
  80a9a8:	80000015 	stw	zero,0(r16)
  80a9ac:	2023883a 	mov	r17,r4
  80a9b0:	2809883a 	mov	r4,r5
  80a9b4:	dfc00215 	stw	ra,8(sp)
  80a9b8:	080bb6c0 	call	80bb6c <close>
  80a9bc:	1007883a 	mov	r3,r2
  80a9c0:	00bfffc4 	movi	r2,-1
  80a9c4:	18800626 	beq	r3,r2,80a9e0 <_close_r+0x4c>
  80a9c8:	1805883a 	mov	r2,r3
  80a9cc:	dfc00217 	ldw	ra,8(sp)
  80a9d0:	dc400117 	ldw	r17,4(sp)
  80a9d4:	dc000017 	ldw	r16,0(sp)
  80a9d8:	dec00304 	addi	sp,sp,12
  80a9dc:	f800283a 	ret
  80a9e0:	80800017 	ldw	r2,0(r16)
  80a9e4:	103ff826 	beq	r2,zero,80a9c8 <_close_r+0x34>
  80a9e8:	88800015 	stw	r2,0(r17)
  80a9ec:	1805883a 	mov	r2,r3
  80a9f0:	dfc00217 	ldw	ra,8(sp)
  80a9f4:	dc400117 	ldw	r17,4(sp)
  80a9f8:	dc000017 	ldw	r16,0(sp)
  80a9fc:	dec00304 	addi	sp,sp,12
  80aa00:	f800283a 	ret

0080aa04 <_fclose_r>:
  80aa04:	defffc04 	addi	sp,sp,-16
  80aa08:	dc400115 	stw	r17,4(sp)
  80aa0c:	dc000015 	stw	r16,0(sp)
  80aa10:	dfc00315 	stw	ra,12(sp)
  80aa14:	dc800215 	stw	r18,8(sp)
  80aa18:	2821883a 	mov	r16,r5
  80aa1c:	2023883a 	mov	r17,r4
  80aa20:	28002926 	beq	r5,zero,80aac8 <_fclose_r+0xc4>
  80aa24:	08076700 	call	807670 <__sfp_lock_acquire>
  80aa28:	88000226 	beq	r17,zero,80aa34 <_fclose_r+0x30>
  80aa2c:	88800e17 	ldw	r2,56(r17)
  80aa30:	10002d26 	beq	r2,zero,80aae8 <_fclose_r+0xe4>
  80aa34:	8080030f 	ldh	r2,12(r16)
  80aa38:	10002226 	beq	r2,zero,80aac4 <_fclose_r+0xc0>
  80aa3c:	8809883a 	mov	r4,r17
  80aa40:	800b883a 	mov	r5,r16
  80aa44:	08073e80 	call	8073e8 <_fflush_r>
  80aa48:	1025883a 	mov	r18,r2
  80aa4c:	80800b17 	ldw	r2,44(r16)
  80aa50:	10000426 	beq	r2,zero,80aa64 <_fclose_r+0x60>
  80aa54:	81400717 	ldw	r5,28(r16)
  80aa58:	8809883a 	mov	r4,r17
  80aa5c:	103ee83a 	callr	r2
  80aa60:	10002a16 	blt	r2,zero,80ab0c <_fclose_r+0x108>
  80aa64:	8080030b 	ldhu	r2,12(r16)
  80aa68:	1080200c 	andi	r2,r2,128
  80aa6c:	1000231e 	bne	r2,zero,80aafc <_fclose_r+0xf8>
  80aa70:	81400c17 	ldw	r5,48(r16)
  80aa74:	28000526 	beq	r5,zero,80aa8c <_fclose_r+0x88>
  80aa78:	80801004 	addi	r2,r16,64
  80aa7c:	28800226 	beq	r5,r2,80aa88 <_fclose_r+0x84>
  80aa80:	8809883a 	mov	r4,r17
  80aa84:	0807a040 	call	807a04 <_free_r>
  80aa88:	80000c15 	stw	zero,48(r16)
  80aa8c:	81401117 	ldw	r5,68(r16)
  80aa90:	28000326 	beq	r5,zero,80aaa0 <_fclose_r+0x9c>
  80aa94:	8809883a 	mov	r4,r17
  80aa98:	0807a040 	call	807a04 <_free_r>
  80aa9c:	80001115 	stw	zero,68(r16)
  80aaa0:	8000030d 	sth	zero,12(r16)
  80aaa4:	08076740 	call	807674 <__sfp_lock_release>
  80aaa8:	9005883a 	mov	r2,r18
  80aaac:	dfc00317 	ldw	ra,12(sp)
  80aab0:	dc800217 	ldw	r18,8(sp)
  80aab4:	dc400117 	ldw	r17,4(sp)
  80aab8:	dc000017 	ldw	r16,0(sp)
  80aabc:	dec00404 	addi	sp,sp,16
  80aac0:	f800283a 	ret
  80aac4:	08076740 	call	807674 <__sfp_lock_release>
  80aac8:	0025883a 	mov	r18,zero
  80aacc:	9005883a 	mov	r2,r18
  80aad0:	dfc00317 	ldw	ra,12(sp)
  80aad4:	dc800217 	ldw	r18,8(sp)
  80aad8:	dc400117 	ldw	r17,4(sp)
  80aadc:	dc000017 	ldw	r16,0(sp)
  80aae0:	dec00404 	addi	sp,sp,16
  80aae4:	f800283a 	ret
  80aae8:	8809883a 	mov	r4,r17
  80aaec:	08076800 	call	807680 <__sinit>
  80aaf0:	8080030f 	ldh	r2,12(r16)
  80aaf4:	103fd11e 	bne	r2,zero,80aa3c <_fclose_r+0x38>
  80aaf8:	003ff206 	br	80aac4 <_fclose_r+0xc0>
  80aafc:	81400417 	ldw	r5,16(r16)
  80ab00:	8809883a 	mov	r4,r17
  80ab04:	0807a040 	call	807a04 <_free_r>
  80ab08:	003fd906 	br	80aa70 <_fclose_r+0x6c>
  80ab0c:	04bfffc4 	movi	r18,-1
  80ab10:	003fd406 	br	80aa64 <_fclose_r+0x60>

0080ab14 <fclose>:
  80ab14:	008020b4 	movhi	r2,130
  80ab18:	10b8ef04 	addi	r2,r2,-7236
  80ab1c:	200b883a 	mov	r5,r4
  80ab20:	11000017 	ldw	r4,0(r2)
  80ab24:	080aa041 	jmpi	80aa04 <_fclose_r>

0080ab28 <_fstat_r>:
  80ab28:	defffd04 	addi	sp,sp,-12
  80ab2c:	dc000015 	stw	r16,0(sp)
  80ab30:	040020b4 	movhi	r16,130
  80ab34:	84001304 	addi	r16,r16,76
  80ab38:	dc400115 	stw	r17,4(sp)
  80ab3c:	80000015 	stw	zero,0(r16)
  80ab40:	2023883a 	mov	r17,r4
  80ab44:	2809883a 	mov	r4,r5
  80ab48:	300b883a 	mov	r5,r6
  80ab4c:	dfc00215 	stw	ra,8(sp)
  80ab50:	080bcf40 	call	80bcf4 <fstat>
  80ab54:	1007883a 	mov	r3,r2
  80ab58:	00bfffc4 	movi	r2,-1
  80ab5c:	18800626 	beq	r3,r2,80ab78 <_fstat_r+0x50>
  80ab60:	1805883a 	mov	r2,r3
  80ab64:	dfc00217 	ldw	ra,8(sp)
  80ab68:	dc400117 	ldw	r17,4(sp)
  80ab6c:	dc000017 	ldw	r16,0(sp)
  80ab70:	dec00304 	addi	sp,sp,12
  80ab74:	f800283a 	ret
  80ab78:	80800017 	ldw	r2,0(r16)
  80ab7c:	103ff826 	beq	r2,zero,80ab60 <_fstat_r+0x38>
  80ab80:	88800015 	stw	r2,0(r17)
  80ab84:	1805883a 	mov	r2,r3
  80ab88:	dfc00217 	ldw	ra,8(sp)
  80ab8c:	dc400117 	ldw	r17,4(sp)
  80ab90:	dc000017 	ldw	r16,0(sp)
  80ab94:	dec00304 	addi	sp,sp,12
  80ab98:	f800283a 	ret

0080ab9c <_isatty_r>:
  80ab9c:	defffd04 	addi	sp,sp,-12
  80aba0:	dc000015 	stw	r16,0(sp)
  80aba4:	040020b4 	movhi	r16,130
  80aba8:	84001304 	addi	r16,r16,76
  80abac:	dc400115 	stw	r17,4(sp)
  80abb0:	80000015 	stw	zero,0(r16)
  80abb4:	2023883a 	mov	r17,r4
  80abb8:	2809883a 	mov	r4,r5
  80abbc:	dfc00215 	stw	ra,8(sp)
  80abc0:	080be280 	call	80be28 <isatty>
  80abc4:	1007883a 	mov	r3,r2
  80abc8:	00bfffc4 	movi	r2,-1
  80abcc:	18800626 	beq	r3,r2,80abe8 <_isatty_r+0x4c>
  80abd0:	1805883a 	mov	r2,r3
  80abd4:	dfc00217 	ldw	ra,8(sp)
  80abd8:	dc400117 	ldw	r17,4(sp)
  80abdc:	dc000017 	ldw	r16,0(sp)
  80abe0:	dec00304 	addi	sp,sp,12
  80abe4:	f800283a 	ret
  80abe8:	80800017 	ldw	r2,0(r16)
  80abec:	103ff826 	beq	r2,zero,80abd0 <_isatty_r+0x34>
  80abf0:	88800015 	stw	r2,0(r17)
  80abf4:	1805883a 	mov	r2,r3
  80abf8:	dfc00217 	ldw	ra,8(sp)
  80abfc:	dc400117 	ldw	r17,4(sp)
  80ac00:	dc000017 	ldw	r16,0(sp)
  80ac04:	dec00304 	addi	sp,sp,12
  80ac08:	f800283a 	ret

0080ac0c <_lseek_r>:
  80ac0c:	defffd04 	addi	sp,sp,-12
  80ac10:	dc000015 	stw	r16,0(sp)
  80ac14:	040020b4 	movhi	r16,130
  80ac18:	84001304 	addi	r16,r16,76
  80ac1c:	dc400115 	stw	r17,4(sp)
  80ac20:	80000015 	stw	zero,0(r16)
  80ac24:	2023883a 	mov	r17,r4
  80ac28:	2809883a 	mov	r4,r5
  80ac2c:	300b883a 	mov	r5,r6
  80ac30:	380d883a 	mov	r6,r7
  80ac34:	dfc00215 	stw	ra,8(sp)
  80ac38:	080c0340 	call	80c034 <lseek>
  80ac3c:	1007883a 	mov	r3,r2
  80ac40:	00bfffc4 	movi	r2,-1
  80ac44:	18800626 	beq	r3,r2,80ac60 <_lseek_r+0x54>
  80ac48:	1805883a 	mov	r2,r3
  80ac4c:	dfc00217 	ldw	ra,8(sp)
  80ac50:	dc400117 	ldw	r17,4(sp)
  80ac54:	dc000017 	ldw	r16,0(sp)
  80ac58:	dec00304 	addi	sp,sp,12
  80ac5c:	f800283a 	ret
  80ac60:	80800017 	ldw	r2,0(r16)
  80ac64:	103ff826 	beq	r2,zero,80ac48 <_lseek_r+0x3c>
  80ac68:	88800015 	stw	r2,0(r17)
  80ac6c:	1805883a 	mov	r2,r3
  80ac70:	dfc00217 	ldw	ra,8(sp)
  80ac74:	dc400117 	ldw	r17,4(sp)
  80ac78:	dc000017 	ldw	r16,0(sp)
  80ac7c:	dec00304 	addi	sp,sp,12
  80ac80:	f800283a 	ret

0080ac84 <_read_r>:
  80ac84:	defffd04 	addi	sp,sp,-12
  80ac88:	dc000015 	stw	r16,0(sp)
  80ac8c:	040020b4 	movhi	r16,130
  80ac90:	84001304 	addi	r16,r16,76
  80ac94:	dc400115 	stw	r17,4(sp)
  80ac98:	80000015 	stw	zero,0(r16)
  80ac9c:	2023883a 	mov	r17,r4
  80aca0:	2809883a 	mov	r4,r5
  80aca4:	300b883a 	mov	r5,r6
  80aca8:	380d883a 	mov	r6,r7
  80acac:	dfc00215 	stw	ra,8(sp)
  80acb0:	080c24c0 	call	80c24c <read>
  80acb4:	1007883a 	mov	r3,r2
  80acb8:	00bfffc4 	movi	r2,-1
  80acbc:	18800626 	beq	r3,r2,80acd8 <_read_r+0x54>
  80acc0:	1805883a 	mov	r2,r3
  80acc4:	dfc00217 	ldw	ra,8(sp)
  80acc8:	dc400117 	ldw	r17,4(sp)
  80accc:	dc000017 	ldw	r16,0(sp)
  80acd0:	dec00304 	addi	sp,sp,12
  80acd4:	f800283a 	ret
  80acd8:	80800017 	ldw	r2,0(r16)
  80acdc:	103ff826 	beq	r2,zero,80acc0 <_read_r+0x3c>
  80ace0:	88800015 	stw	r2,0(r17)
  80ace4:	1805883a 	mov	r2,r3
  80ace8:	dfc00217 	ldw	ra,8(sp)
  80acec:	dc400117 	ldw	r17,4(sp)
  80acf0:	dc000017 	ldw	r16,0(sp)
  80acf4:	dec00304 	addi	sp,sp,12
  80acf8:	f800283a 	ret

0080acfc <__udivdi3>:
  80acfc:	defff004 	addi	sp,sp,-64
  80ad00:	2005883a 	mov	r2,r4
  80ad04:	3011883a 	mov	r8,r6
  80ad08:	df000e15 	stw	fp,56(sp)
  80ad0c:	dd000a15 	stw	r20,40(sp)
  80ad10:	dc000615 	stw	r16,24(sp)
  80ad14:	dfc00f15 	stw	ra,60(sp)
  80ad18:	ddc00d15 	stw	r23,52(sp)
  80ad1c:	dd800c15 	stw	r22,48(sp)
  80ad20:	dd400b15 	stw	r21,44(sp)
  80ad24:	dcc00915 	stw	r19,36(sp)
  80ad28:	dc800815 	stw	r18,32(sp)
  80ad2c:	dc400715 	stw	r17,28(sp)
  80ad30:	4021883a 	mov	r16,r8
  80ad34:	1039883a 	mov	fp,r2
  80ad38:	2829883a 	mov	r20,r5
  80ad3c:	38003b1e 	bne	r7,zero,80ae2c <__udivdi3+0x130>
  80ad40:	2a005c36 	bltu	r5,r8,80aeb4 <__udivdi3+0x1b8>
  80ad44:	4000a626 	beq	r8,zero,80afe0 <__udivdi3+0x2e4>
  80ad48:	00bfffd4 	movui	r2,65535
  80ad4c:	14009e36 	bltu	r2,r16,80afc8 <__udivdi3+0x2cc>
  80ad50:	00803fc4 	movi	r2,255
  80ad54:	14013d36 	bltu	r2,r16,80b24c <__udivdi3+0x550>
  80ad58:	000b883a 	mov	r5,zero
  80ad5c:	0005883a 	mov	r2,zero
  80ad60:	8084d83a 	srl	r2,r16,r2
  80ad64:	010020b4 	movhi	r4,130
  80ad68:	21311904 	addi	r4,r4,-15260
  80ad6c:	01800804 	movi	r6,32
  80ad70:	1105883a 	add	r2,r2,r4
  80ad74:	10c00003 	ldbu	r3,0(r2)
  80ad78:	28c7883a 	add	r3,r5,r3
  80ad7c:	30edc83a 	sub	r22,r6,r3
  80ad80:	b000ee1e 	bne	r22,zero,80b13c <__udivdi3+0x440>
  80ad84:	802ad43a 	srli	r21,r16,16
  80ad88:	00800044 	movi	r2,1
  80ad8c:	a423c83a 	sub	r17,r20,r16
  80ad90:	85ffffcc 	andi	r23,r16,65535
  80ad94:	d8800315 	stw	r2,12(sp)
  80ad98:	8809883a 	mov	r4,r17
  80ad9c:	a80b883a 	mov	r5,r21
  80ada0:	080bb5c0 	call	80bb5c <__udivsi3>
  80ada4:	8809883a 	mov	r4,r17
  80ada8:	a80b883a 	mov	r5,r21
  80adac:	102d883a 	mov	r22,r2
  80adb0:	080bb640 	call	80bb64 <__umodsi3>
  80adb4:	1004943a 	slli	r2,r2,16
  80adb8:	e006d43a 	srli	r3,fp,16
  80adbc:	bda3383a 	mul	r17,r23,r22
  80adc0:	10c4b03a 	or	r2,r2,r3
  80adc4:	1440042e 	bgeu	r2,r17,80add8 <__udivdi3+0xdc>
  80adc8:	1405883a 	add	r2,r2,r16
  80adcc:	b5bfffc4 	addi	r22,r22,-1
  80add0:	14000136 	bltu	r2,r16,80add8 <__udivdi3+0xdc>
  80add4:	14413d36 	bltu	r2,r17,80b2cc <__udivdi3+0x5d0>
  80add8:	1463c83a 	sub	r17,r2,r17
  80addc:	8809883a 	mov	r4,r17
  80ade0:	a80b883a 	mov	r5,r21
  80ade4:	080bb5c0 	call	80bb5c <__udivsi3>
  80ade8:	8809883a 	mov	r4,r17
  80adec:	a80b883a 	mov	r5,r21
  80adf0:	1029883a 	mov	r20,r2
  80adf4:	080bb640 	call	80bb64 <__umodsi3>
  80adf8:	1004943a 	slli	r2,r2,16
  80adfc:	bd09383a 	mul	r4,r23,r20
  80ae00:	e0ffffcc 	andi	r3,fp,65535
  80ae04:	10c4b03a 	or	r2,r2,r3
  80ae08:	1100042e 	bgeu	r2,r4,80ae1c <__udivdi3+0x120>
  80ae0c:	8085883a 	add	r2,r16,r2
  80ae10:	a53fffc4 	addi	r20,r20,-1
  80ae14:	14000136 	bltu	r2,r16,80ae1c <__udivdi3+0x120>
  80ae18:	11012036 	bltu	r2,r4,80b29c <__udivdi3+0x5a0>
  80ae1c:	b004943a 	slli	r2,r22,16
  80ae20:	d9000317 	ldw	r4,12(sp)
  80ae24:	a084b03a 	or	r2,r20,r2
  80ae28:	00001506 	br	80ae80 <__udivdi3+0x184>
  80ae2c:	380d883a 	mov	r6,r7
  80ae30:	29c06236 	bltu	r5,r7,80afbc <__udivdi3+0x2c0>
  80ae34:	00bfffd4 	movui	r2,65535
  80ae38:	11c05a36 	bltu	r2,r7,80afa4 <__udivdi3+0x2a8>
  80ae3c:	00803fc4 	movi	r2,255
  80ae40:	11c0fc36 	bltu	r2,r7,80b234 <__udivdi3+0x538>
  80ae44:	000b883a 	mov	r5,zero
  80ae48:	0005883a 	mov	r2,zero
  80ae4c:	3084d83a 	srl	r2,r6,r2
  80ae50:	010020b4 	movhi	r4,130
  80ae54:	21311904 	addi	r4,r4,-15260
  80ae58:	01c00804 	movi	r7,32
  80ae5c:	1105883a 	add	r2,r2,r4
  80ae60:	10c00003 	ldbu	r3,0(r2)
  80ae64:	28c7883a 	add	r3,r5,r3
  80ae68:	38efc83a 	sub	r23,r7,r3
  80ae6c:	b800691e 	bne	r23,zero,80b014 <__udivdi3+0x318>
  80ae70:	35000136 	bltu	r6,r20,80ae78 <__udivdi3+0x17c>
  80ae74:	e4005136 	bltu	fp,r16,80afbc <__udivdi3+0x2c0>
  80ae78:	00800044 	movi	r2,1
  80ae7c:	0009883a 	mov	r4,zero
  80ae80:	2007883a 	mov	r3,r4
  80ae84:	dfc00f17 	ldw	ra,60(sp)
  80ae88:	df000e17 	ldw	fp,56(sp)
  80ae8c:	ddc00d17 	ldw	r23,52(sp)
  80ae90:	dd800c17 	ldw	r22,48(sp)
  80ae94:	dd400b17 	ldw	r21,44(sp)
  80ae98:	dd000a17 	ldw	r20,40(sp)
  80ae9c:	dcc00917 	ldw	r19,36(sp)
  80aea0:	dc800817 	ldw	r18,32(sp)
  80aea4:	dc400717 	ldw	r17,28(sp)
  80aea8:	dc000617 	ldw	r16,24(sp)
  80aeac:	dec01004 	addi	sp,sp,64
  80aeb0:	f800283a 	ret
  80aeb4:	00bfffd4 	movui	r2,65535
  80aeb8:	12005036 	bltu	r2,r8,80affc <__udivdi3+0x300>
  80aebc:	00803fc4 	movi	r2,255
  80aec0:	1200e836 	bltu	r2,r8,80b264 <__udivdi3+0x568>
  80aec4:	000b883a 	mov	r5,zero
  80aec8:	0005883a 	mov	r2,zero
  80aecc:	8084d83a 	srl	r2,r16,r2
  80aed0:	010020b4 	movhi	r4,130
  80aed4:	21311904 	addi	r4,r4,-15260
  80aed8:	01800804 	movi	r6,32
  80aedc:	1105883a 	add	r2,r2,r4
  80aee0:	10c00003 	ldbu	r3,0(r2)
  80aee4:	28c7883a 	add	r3,r5,r3
  80aee8:	30cbc83a 	sub	r5,r6,r3
  80aeec:	28000626 	beq	r5,zero,80af08 <__udivdi3+0x20c>
  80aef0:	3145c83a 	sub	r2,r6,r5
  80aef4:	e084d83a 	srl	r2,fp,r2
  80aef8:	a146983a 	sll	r3,r20,r5
  80aefc:	e178983a 	sll	fp,fp,r5
  80af00:	8160983a 	sll	r16,r16,r5
  80af04:	18a8b03a 	or	r20,r3,r2
  80af08:	802ad43a 	srli	r21,r16,16
  80af0c:	a009883a 	mov	r4,r20
  80af10:	85ffffcc 	andi	r23,r16,65535
  80af14:	a80b883a 	mov	r5,r21
  80af18:	080bb5c0 	call	80bb5c <__udivsi3>
  80af1c:	a009883a 	mov	r4,r20
  80af20:	a80b883a 	mov	r5,r21
  80af24:	102d883a 	mov	r22,r2
  80af28:	080bb640 	call	80bb64 <__umodsi3>
  80af2c:	1004943a 	slli	r2,r2,16
  80af30:	e006d43a 	srli	r3,fp,16
  80af34:	bda3383a 	mul	r17,r23,r22
  80af38:	10c4b03a 	or	r2,r2,r3
  80af3c:	1440042e 	bgeu	r2,r17,80af50 <__udivdi3+0x254>
  80af40:	1405883a 	add	r2,r2,r16
  80af44:	b5bfffc4 	addi	r22,r22,-1
  80af48:	14000136 	bltu	r2,r16,80af50 <__udivdi3+0x254>
  80af4c:	1440d536 	bltu	r2,r17,80b2a4 <__udivdi3+0x5a8>
  80af50:	1463c83a 	sub	r17,r2,r17
  80af54:	8809883a 	mov	r4,r17
  80af58:	a80b883a 	mov	r5,r21
  80af5c:	080bb5c0 	call	80bb5c <__udivsi3>
  80af60:	8809883a 	mov	r4,r17
  80af64:	a80b883a 	mov	r5,r21
  80af68:	1029883a 	mov	r20,r2
  80af6c:	080bb640 	call	80bb64 <__umodsi3>
  80af70:	1004943a 	slli	r2,r2,16
  80af74:	bd09383a 	mul	r4,r23,r20
  80af78:	e0ffffcc 	andi	r3,fp,65535
  80af7c:	10c4b03a 	or	r2,r2,r3
  80af80:	1100042e 	bgeu	r2,r4,80af94 <__udivdi3+0x298>
  80af84:	8085883a 	add	r2,r16,r2
  80af88:	a53fffc4 	addi	r20,r20,-1
  80af8c:	14000136 	bltu	r2,r16,80af94 <__udivdi3+0x298>
  80af90:	1100c736 	bltu	r2,r4,80b2b0 <__udivdi3+0x5b4>
  80af94:	b004943a 	slli	r2,r22,16
  80af98:	0009883a 	mov	r4,zero
  80af9c:	a084b03a 	or	r2,r20,r2
  80afa0:	003fb706 	br	80ae80 <__udivdi3+0x184>
  80afa4:	00804034 	movhi	r2,256
  80afa8:	10bfffc4 	addi	r2,r2,-1
  80afac:	11c0a436 	bltu	r2,r7,80b240 <__udivdi3+0x544>
  80afb0:	01400404 	movi	r5,16
  80afb4:	2805883a 	mov	r2,r5
  80afb8:	003fa406 	br	80ae4c <__udivdi3+0x150>
  80afbc:	0005883a 	mov	r2,zero
  80afc0:	0009883a 	mov	r4,zero
  80afc4:	003fae06 	br	80ae80 <__udivdi3+0x184>
  80afc8:	00804034 	movhi	r2,256
  80afcc:	10bfffc4 	addi	r2,r2,-1
  80afd0:	1400a136 	bltu	r2,r16,80b258 <__udivdi3+0x55c>
  80afd4:	01400404 	movi	r5,16
  80afd8:	2805883a 	mov	r2,r5
  80afdc:	003f6006 	br	80ad60 <__udivdi3+0x64>
  80afe0:	01000044 	movi	r4,1
  80afe4:	000b883a 	mov	r5,zero
  80afe8:	080bb5c0 	call	80bb5c <__udivsi3>
  80afec:	1021883a 	mov	r16,r2
  80aff0:	00bfffd4 	movui	r2,65535
  80aff4:	143ff436 	bltu	r2,r16,80afc8 <__udivdi3+0x2cc>
  80aff8:	003f5506 	br	80ad50 <__udivdi3+0x54>
  80affc:	00804034 	movhi	r2,256
  80b000:	10bfffc4 	addi	r2,r2,-1
  80b004:	12009a36 	bltu	r2,r8,80b270 <__udivdi3+0x574>
  80b008:	01400404 	movi	r5,16
  80b00c:	2805883a 	mov	r2,r5
  80b010:	003fae06 	br	80aecc <__udivdi3+0x1d0>
  80b014:	3dc5c83a 	sub	r2,r7,r23
  80b018:	35c8983a 	sll	r4,r6,r23
  80b01c:	8086d83a 	srl	r3,r16,r2
  80b020:	a0a2d83a 	srl	r17,r20,r2
  80b024:	e084d83a 	srl	r2,fp,r2
  80b028:	20eab03a 	or	r21,r4,r3
  80b02c:	a82cd43a 	srli	r22,r21,16
  80b030:	a5c6983a 	sll	r3,r20,r23
  80b034:	8809883a 	mov	r4,r17
  80b038:	b00b883a 	mov	r5,r22
  80b03c:	1886b03a 	or	r3,r3,r2
  80b040:	d8c00215 	stw	r3,8(sp)
  80b044:	080bb5c0 	call	80bb5c <__udivsi3>
  80b048:	8809883a 	mov	r4,r17
  80b04c:	b00b883a 	mov	r5,r22
  80b050:	1029883a 	mov	r20,r2
  80b054:	080bb640 	call	80bb64 <__umodsi3>
  80b058:	a8ffffcc 	andi	r3,r21,65535
  80b05c:	d8c00515 	stw	r3,20(sp)
  80b060:	d9000217 	ldw	r4,8(sp)
  80b064:	d9400517 	ldw	r5,20(sp)
  80b068:	1004943a 	slli	r2,r2,16
  80b06c:	2006d43a 	srli	r3,r4,16
  80b070:	85e0983a 	sll	r16,r16,r23
  80b074:	2d23383a 	mul	r17,r5,r20
  80b078:	10c4b03a 	or	r2,r2,r3
  80b07c:	dc000015 	stw	r16,0(sp)
  80b080:	1440032e 	bgeu	r2,r17,80b090 <__udivdi3+0x394>
  80b084:	1545883a 	add	r2,r2,r21
  80b088:	a53fffc4 	addi	r20,r20,-1
  80b08c:	15407f2e 	bgeu	r2,r21,80b28c <__udivdi3+0x590>
  80b090:	1463c83a 	sub	r17,r2,r17
  80b094:	8809883a 	mov	r4,r17
  80b098:	b00b883a 	mov	r5,r22
  80b09c:	080bb5c0 	call	80bb5c <__udivsi3>
  80b0a0:	8809883a 	mov	r4,r17
  80b0a4:	b00b883a 	mov	r5,r22
  80b0a8:	1021883a 	mov	r16,r2
  80b0ac:	080bb640 	call	80bb64 <__umodsi3>
  80b0b0:	d8c00517 	ldw	r3,20(sp)
  80b0b4:	d9000217 	ldw	r4,8(sp)
  80b0b8:	1004943a 	slli	r2,r2,16
  80b0bc:	1c0f383a 	mul	r7,r3,r16
  80b0c0:	20ffffcc 	andi	r3,r4,65535
  80b0c4:	10e2b03a 	or	r17,r2,r3
  80b0c8:	89c0032e 	bgeu	r17,r7,80b0d8 <__udivdi3+0x3dc>
  80b0cc:	8d63883a 	add	r17,r17,r21
  80b0d0:	843fffc4 	addi	r16,r16,-1
  80b0d4:	8d40692e 	bgeu	r17,r21,80b27c <__udivdi3+0x580>
  80b0d8:	a008943a 	slli	r4,r20,16
  80b0dc:	d9400017 	ldw	r5,0(sp)
  80b0e0:	89e3c83a 	sub	r17,r17,r7
  80b0e4:	8110b03a 	or	r8,r16,r4
  80b0e8:	280cd43a 	srli	r6,r5,16
  80b0ec:	28ffffcc 	andi	r3,r5,65535
  80b0f0:	40bfffcc 	andi	r2,r8,65535
  80b0f4:	400ad43a 	srli	r5,r8,16
  80b0f8:	10d3383a 	mul	r9,r2,r3
  80b0fc:	1185383a 	mul	r2,r2,r6
  80b100:	28c7383a 	mul	r3,r5,r3
  80b104:	4808d43a 	srli	r4,r9,16
  80b108:	298b383a 	mul	r5,r5,r6
  80b10c:	10c5883a 	add	r2,r2,r3
  80b110:	2089883a 	add	r4,r4,r2
  80b114:	20c0022e 	bgeu	r4,r3,80b120 <__udivdi3+0x424>
  80b118:	00800074 	movhi	r2,1
  80b11c:	288b883a 	add	r5,r5,r2
  80b120:	2004d43a 	srli	r2,r4,16
  80b124:	288b883a 	add	r5,r5,r2
  80b128:	89403f36 	bltu	r17,r5,80b228 <__udivdi3+0x52c>
  80b12c:	89403926 	beq	r17,r5,80b214 <__udivdi3+0x518>
  80b130:	4005883a 	mov	r2,r8
  80b134:	0009883a 	mov	r4,zero
  80b138:	003f5106 	br	80ae80 <__udivdi3+0x184>
  80b13c:	85a0983a 	sll	r16,r16,r22
  80b140:	3585c83a 	sub	r2,r6,r22
  80b144:	a0a2d83a 	srl	r17,r20,r2
  80b148:	802ad43a 	srli	r21,r16,16
  80b14c:	e084d83a 	srl	r2,fp,r2
  80b150:	a586983a 	sll	r3,r20,r22
  80b154:	8809883a 	mov	r4,r17
  80b158:	a80b883a 	mov	r5,r21
  80b15c:	1886b03a 	or	r3,r3,r2
  80b160:	d8c00115 	stw	r3,4(sp)
  80b164:	080bb5c0 	call	80bb5c <__udivsi3>
  80b168:	8809883a 	mov	r4,r17
  80b16c:	a80b883a 	mov	r5,r21
  80b170:	d8800415 	stw	r2,16(sp)
  80b174:	080bb640 	call	80bb64 <__umodsi3>
  80b178:	d9000117 	ldw	r4,4(sp)
  80b17c:	d9400417 	ldw	r5,16(sp)
  80b180:	1004943a 	slli	r2,r2,16
  80b184:	85ffffcc 	andi	r23,r16,65535
  80b188:	2006d43a 	srli	r3,r4,16
  80b18c:	b963383a 	mul	r17,r23,r5
  80b190:	10c4b03a 	or	r2,r2,r3
  80b194:	1440042e 	bgeu	r2,r17,80b1a8 <__udivdi3+0x4ac>
  80b198:	297fffc4 	addi	r5,r5,-1
  80b19c:	1405883a 	add	r2,r2,r16
  80b1a0:	d9400415 	stw	r5,16(sp)
  80b1a4:	1400442e 	bgeu	r2,r16,80b2b8 <__udivdi3+0x5bc>
  80b1a8:	1463c83a 	sub	r17,r2,r17
  80b1ac:	8809883a 	mov	r4,r17
  80b1b0:	a80b883a 	mov	r5,r21
  80b1b4:	080bb5c0 	call	80bb5c <__udivsi3>
  80b1b8:	8809883a 	mov	r4,r17
  80b1bc:	a80b883a 	mov	r5,r21
  80b1c0:	1029883a 	mov	r20,r2
  80b1c4:	080bb640 	call	80bb64 <__umodsi3>
  80b1c8:	d9400117 	ldw	r5,4(sp)
  80b1cc:	1004943a 	slli	r2,r2,16
  80b1d0:	bd09383a 	mul	r4,r23,r20
  80b1d4:	28ffffcc 	andi	r3,r5,65535
  80b1d8:	10c6b03a 	or	r3,r2,r3
  80b1dc:	1900062e 	bgeu	r3,r4,80b1f8 <__udivdi3+0x4fc>
  80b1e0:	1c07883a 	add	r3,r3,r16
  80b1e4:	a53fffc4 	addi	r20,r20,-1
  80b1e8:	1c000336 	bltu	r3,r16,80b1f8 <__udivdi3+0x4fc>
  80b1ec:	1900022e 	bgeu	r3,r4,80b1f8 <__udivdi3+0x4fc>
  80b1f0:	a53fffc4 	addi	r20,r20,-1
  80b1f4:	1c07883a 	add	r3,r3,r16
  80b1f8:	d9400417 	ldw	r5,16(sp)
  80b1fc:	e5b8983a 	sll	fp,fp,r22
  80b200:	1923c83a 	sub	r17,r3,r4
  80b204:	2804943a 	slli	r2,r5,16
  80b208:	a0a8b03a 	or	r20,r20,r2
  80b20c:	dd000315 	stw	r20,12(sp)
  80b210:	003ee106 	br	80ad98 <__udivdi3+0x9c>
  80b214:	2004943a 	slli	r2,r4,16
  80b218:	e5c8983a 	sll	r4,fp,r23
  80b21c:	48ffffcc 	andi	r3,r9,65535
  80b220:	10c5883a 	add	r2,r2,r3
  80b224:	20bfc22e 	bgeu	r4,r2,80b130 <__udivdi3+0x434>
  80b228:	40bfffc4 	addi	r2,r8,-1
  80b22c:	0009883a 	mov	r4,zero
  80b230:	003f1306 	br	80ae80 <__udivdi3+0x184>
  80b234:	01400204 	movi	r5,8
  80b238:	2805883a 	mov	r2,r5
  80b23c:	003f0306 	br	80ae4c <__udivdi3+0x150>
  80b240:	01400604 	movi	r5,24
  80b244:	2805883a 	mov	r2,r5
  80b248:	003f0006 	br	80ae4c <__udivdi3+0x150>
  80b24c:	01400204 	movi	r5,8
  80b250:	2805883a 	mov	r2,r5
  80b254:	003ec206 	br	80ad60 <__udivdi3+0x64>
  80b258:	01400604 	movi	r5,24
  80b25c:	2805883a 	mov	r2,r5
  80b260:	003ebf06 	br	80ad60 <__udivdi3+0x64>
  80b264:	01400204 	movi	r5,8
  80b268:	2805883a 	mov	r2,r5
  80b26c:	003f1706 	br	80aecc <__udivdi3+0x1d0>
  80b270:	01400604 	movi	r5,24
  80b274:	2805883a 	mov	r2,r5
  80b278:	003f1406 	br	80aecc <__udivdi3+0x1d0>
  80b27c:	89ff962e 	bgeu	r17,r7,80b0d8 <__udivdi3+0x3dc>
  80b280:	8d63883a 	add	r17,r17,r21
  80b284:	843fffc4 	addi	r16,r16,-1
  80b288:	003f9306 	br	80b0d8 <__udivdi3+0x3dc>
  80b28c:	147f802e 	bgeu	r2,r17,80b090 <__udivdi3+0x394>
  80b290:	a53fffc4 	addi	r20,r20,-1
  80b294:	1545883a 	add	r2,r2,r21
  80b298:	003f7d06 	br	80b090 <__udivdi3+0x394>
  80b29c:	a53fffc4 	addi	r20,r20,-1
  80b2a0:	003ede06 	br	80ae1c <__udivdi3+0x120>
  80b2a4:	b5bfffc4 	addi	r22,r22,-1
  80b2a8:	1405883a 	add	r2,r2,r16
  80b2ac:	003f2806 	br	80af50 <__udivdi3+0x254>
  80b2b0:	a53fffc4 	addi	r20,r20,-1
  80b2b4:	003f3706 	br	80af94 <__udivdi3+0x298>
  80b2b8:	147fbb2e 	bgeu	r2,r17,80b1a8 <__udivdi3+0x4ac>
  80b2bc:	297fffc4 	addi	r5,r5,-1
  80b2c0:	1405883a 	add	r2,r2,r16
  80b2c4:	d9400415 	stw	r5,16(sp)
  80b2c8:	003fb706 	br	80b1a8 <__udivdi3+0x4ac>
  80b2cc:	b5bfffc4 	addi	r22,r22,-1
  80b2d0:	1405883a 	add	r2,r2,r16
  80b2d4:	003ec006 	br	80add8 <__udivdi3+0xdc>

0080b2d8 <__umoddi3>:
  80b2d8:	defff104 	addi	sp,sp,-60
  80b2dc:	dd800b15 	stw	r22,44(sp)
  80b2e0:	dd000915 	stw	r20,36(sp)
  80b2e4:	dc000515 	stw	r16,20(sp)
  80b2e8:	dfc00e15 	stw	ra,56(sp)
  80b2ec:	df000d15 	stw	fp,52(sp)
  80b2f0:	ddc00c15 	stw	r23,48(sp)
  80b2f4:	dd400a15 	stw	r21,40(sp)
  80b2f8:	dcc00815 	stw	r19,32(sp)
  80b2fc:	dc800715 	stw	r18,28(sp)
  80b300:	dc400615 	stw	r17,24(sp)
  80b304:	3021883a 	mov	r16,r6
  80b308:	202d883a 	mov	r22,r4
  80b30c:	2829883a 	mov	r20,r5
  80b310:	38002b1e 	bne	r7,zero,80b3c0 <__umoddi3+0xe8>
  80b314:	29805036 	bltu	r5,r6,80b458 <__umoddi3+0x180>
  80b318:	30008a26 	beq	r6,zero,80b544 <__umoddi3+0x26c>
  80b31c:	00bfffd4 	movui	r2,65535
  80b320:	14008236 	bltu	r2,r16,80b52c <__umoddi3+0x254>
  80b324:	00803fc4 	movi	r2,255
  80b328:	14013636 	bltu	r2,r16,80b804 <__umoddi3+0x52c>
  80b32c:	000b883a 	mov	r5,zero
  80b330:	0005883a 	mov	r2,zero
  80b334:	8084d83a 	srl	r2,r16,r2
  80b338:	010020b4 	movhi	r4,130
  80b33c:	21311904 	addi	r4,r4,-15260
  80b340:	01800804 	movi	r6,32
  80b344:	1105883a 	add	r2,r2,r4
  80b348:	10c00003 	ldbu	r3,0(r2)
  80b34c:	28c7883a 	add	r3,r5,r3
  80b350:	30efc83a 	sub	r23,r6,r3
  80b354:	b800941e 	bne	r23,zero,80b5a8 <__umoddi3+0x2d0>
  80b358:	802ad43a 	srli	r21,r16,16
  80b35c:	a423c83a 	sub	r17,r20,r16
  80b360:	0039883a 	mov	fp,zero
  80b364:	853fffcc 	andi	r20,r16,65535
  80b368:	8809883a 	mov	r4,r17
  80b36c:	a80b883a 	mov	r5,r21
  80b370:	080bb5c0 	call	80bb5c <__udivsi3>
  80b374:	8809883a 	mov	r4,r17
  80b378:	a80b883a 	mov	r5,r21
  80b37c:	a0a3383a 	mul	r17,r20,r2
  80b380:	080bb640 	call	80bb64 <__umodsi3>
  80b384:	1004943a 	slli	r2,r2,16
  80b388:	b006d43a 	srli	r3,r22,16
  80b38c:	10c4b03a 	or	r2,r2,r3
  80b390:	1440032e 	bgeu	r2,r17,80b3a0 <__umoddi3+0xc8>
  80b394:	1405883a 	add	r2,r2,r16
  80b398:	14000136 	bltu	r2,r16,80b3a0 <__umoddi3+0xc8>
  80b39c:	14413536 	bltu	r2,r17,80b874 <__umoddi3+0x59c>
  80b3a0:	1463c83a 	sub	r17,r2,r17
  80b3a4:	8809883a 	mov	r4,r17
  80b3a8:	a80b883a 	mov	r5,r21
  80b3ac:	080bb5c0 	call	80bb5c <__udivsi3>
  80b3b0:	8809883a 	mov	r4,r17
  80b3b4:	a0a3383a 	mul	r17,r20,r2
  80b3b8:	a80b883a 	mov	r5,r21
  80b3bc:	00004d06 	br	80b4f4 <__umoddi3+0x21c>
  80b3c0:	380d883a 	mov	r6,r7
  80b3c4:	29c0102e 	bgeu	r5,r7,80b408 <__umoddi3+0x130>
  80b3c8:	2011883a 	mov	r8,r4
  80b3cc:	2813883a 	mov	r9,r5
  80b3d0:	4005883a 	mov	r2,r8
  80b3d4:	4807883a 	mov	r3,r9
  80b3d8:	dfc00e17 	ldw	ra,56(sp)
  80b3dc:	df000d17 	ldw	fp,52(sp)
  80b3e0:	ddc00c17 	ldw	r23,48(sp)
  80b3e4:	dd800b17 	ldw	r22,44(sp)
  80b3e8:	dd400a17 	ldw	r21,40(sp)
  80b3ec:	dd000917 	ldw	r20,36(sp)
  80b3f0:	dcc00817 	ldw	r19,32(sp)
  80b3f4:	dc800717 	ldw	r18,28(sp)
  80b3f8:	dc400617 	ldw	r17,24(sp)
  80b3fc:	dc000517 	ldw	r16,20(sp)
  80b400:	dec00f04 	addi	sp,sp,60
  80b404:	f800283a 	ret
  80b408:	00bfffd4 	movui	r2,65535
  80b40c:	11c05a36 	bltu	r2,r7,80b578 <__umoddi3+0x2a0>
  80b410:	00803fc4 	movi	r2,255
  80b414:	11c0fe36 	bltu	r2,r7,80b810 <__umoddi3+0x538>
  80b418:	000b883a 	mov	r5,zero
  80b41c:	0005883a 	mov	r2,zero
  80b420:	3084d83a 	srl	r2,r6,r2
  80b424:	010020b4 	movhi	r4,130
  80b428:	21311904 	addi	r4,r4,-15260
  80b42c:	01c00804 	movi	r7,32
  80b430:	1105883a 	add	r2,r2,r4
  80b434:	10c00003 	ldbu	r3,0(r2)
  80b438:	28c7883a 	add	r3,r5,r3
  80b43c:	38ebc83a 	sub	r21,r7,r3
  80b440:	a800851e 	bne	r21,zero,80b658 <__umoddi3+0x380>
  80b444:	35005236 	bltu	r6,r20,80b590 <__umoddi3+0x2b8>
  80b448:	b400512e 	bgeu	r22,r16,80b590 <__umoddi3+0x2b8>
  80b44c:	b011883a 	mov	r8,r22
  80b450:	a013883a 	mov	r9,r20
  80b454:	003fde06 	br	80b3d0 <__umoddi3+0xf8>
  80b458:	00bfffd4 	movui	r2,65535
  80b45c:	11804036 	bltu	r2,r6,80b560 <__umoddi3+0x288>
  80b460:	00803fc4 	movi	r2,255
  80b464:	1180ed36 	bltu	r2,r6,80b81c <__umoddi3+0x544>
  80b468:	000b883a 	mov	r5,zero
  80b46c:	0005883a 	mov	r2,zero
  80b470:	8084d83a 	srl	r2,r16,r2
  80b474:	010020b4 	movhi	r4,130
  80b478:	21311904 	addi	r4,r4,-15260
  80b47c:	01800804 	movi	r6,32
  80b480:	1105883a 	add	r2,r2,r4
  80b484:	10c00003 	ldbu	r3,0(r2)
  80b488:	28c7883a 	add	r3,r5,r3
  80b48c:	30c7c83a 	sub	r3,r6,r3
  80b490:	1800bf1e 	bne	r3,zero,80b790 <__umoddi3+0x4b8>
  80b494:	0039883a 	mov	fp,zero
  80b498:	802ad43a 	srli	r21,r16,16
  80b49c:	a009883a 	mov	r4,r20
  80b4a0:	85ffffcc 	andi	r23,r16,65535
  80b4a4:	a80b883a 	mov	r5,r21
  80b4a8:	080bb5c0 	call	80bb5c <__udivsi3>
  80b4ac:	a009883a 	mov	r4,r20
  80b4b0:	a80b883a 	mov	r5,r21
  80b4b4:	b8a3383a 	mul	r17,r23,r2
  80b4b8:	080bb640 	call	80bb64 <__umodsi3>
  80b4bc:	1004943a 	slli	r2,r2,16
  80b4c0:	b006d43a 	srli	r3,r22,16
  80b4c4:	10c4b03a 	or	r2,r2,r3
  80b4c8:	1440032e 	bgeu	r2,r17,80b4d8 <__umoddi3+0x200>
  80b4cc:	1405883a 	add	r2,r2,r16
  80b4d0:	14000136 	bltu	r2,r16,80b4d8 <__umoddi3+0x200>
  80b4d4:	1440e536 	bltu	r2,r17,80b86c <__umoddi3+0x594>
  80b4d8:	1463c83a 	sub	r17,r2,r17
  80b4dc:	8809883a 	mov	r4,r17
  80b4e0:	a80b883a 	mov	r5,r21
  80b4e4:	080bb5c0 	call	80bb5c <__udivsi3>
  80b4e8:	8809883a 	mov	r4,r17
  80b4ec:	b8a3383a 	mul	r17,r23,r2
  80b4f0:	a80b883a 	mov	r5,r21
  80b4f4:	080bb640 	call	80bb64 <__umodsi3>
  80b4f8:	1004943a 	slli	r2,r2,16
  80b4fc:	b0ffffcc 	andi	r3,r22,65535
  80b500:	10c4b03a 	or	r2,r2,r3
  80b504:	1440042e 	bgeu	r2,r17,80b518 <__umoddi3+0x240>
  80b508:	1405883a 	add	r2,r2,r16
  80b50c:	14000236 	bltu	r2,r16,80b518 <__umoddi3+0x240>
  80b510:	1440012e 	bgeu	r2,r17,80b518 <__umoddi3+0x240>
  80b514:	1405883a 	add	r2,r2,r16
  80b518:	1445c83a 	sub	r2,r2,r17
  80b51c:	1724d83a 	srl	r18,r2,fp
  80b520:	0013883a 	mov	r9,zero
  80b524:	9011883a 	mov	r8,r18
  80b528:	003fa906 	br	80b3d0 <__umoddi3+0xf8>
  80b52c:	00804034 	movhi	r2,256
  80b530:	10bfffc4 	addi	r2,r2,-1
  80b534:	1400b036 	bltu	r2,r16,80b7f8 <__umoddi3+0x520>
  80b538:	01400404 	movi	r5,16
  80b53c:	2805883a 	mov	r2,r5
  80b540:	003f7c06 	br	80b334 <__umoddi3+0x5c>
  80b544:	01000044 	movi	r4,1
  80b548:	000b883a 	mov	r5,zero
  80b54c:	080bb5c0 	call	80bb5c <__udivsi3>
  80b550:	1021883a 	mov	r16,r2
  80b554:	00bfffd4 	movui	r2,65535
  80b558:	143ff436 	bltu	r2,r16,80b52c <__umoddi3+0x254>
  80b55c:	003f7106 	br	80b324 <__umoddi3+0x4c>
  80b560:	00804034 	movhi	r2,256
  80b564:	10bfffc4 	addi	r2,r2,-1
  80b568:	1180af36 	bltu	r2,r6,80b828 <__umoddi3+0x550>
  80b56c:	01400404 	movi	r5,16
  80b570:	2805883a 	mov	r2,r5
  80b574:	003fbe06 	br	80b470 <__umoddi3+0x198>
  80b578:	00804034 	movhi	r2,256
  80b57c:	10bfffc4 	addi	r2,r2,-1
  80b580:	11c0ac36 	bltu	r2,r7,80b834 <__umoddi3+0x55c>
  80b584:	01400404 	movi	r5,16
  80b588:	2805883a 	mov	r2,r5
  80b58c:	003fa406 	br	80b420 <__umoddi3+0x148>
  80b590:	b409c83a 	sub	r4,r22,r16
  80b594:	b105803a 	cmpltu	r2,r22,r4
  80b598:	a187c83a 	sub	r3,r20,r6
  80b59c:	18a9c83a 	sub	r20,r3,r2
  80b5a0:	202d883a 	mov	r22,r4
  80b5a4:	003fa906 	br	80b44c <__umoddi3+0x174>
  80b5a8:	85e0983a 	sll	r16,r16,r23
  80b5ac:	35c5c83a 	sub	r2,r6,r23
  80b5b0:	a0a2d83a 	srl	r17,r20,r2
  80b5b4:	802ad43a 	srli	r21,r16,16
  80b5b8:	b084d83a 	srl	r2,r22,r2
  80b5bc:	a5c6983a 	sll	r3,r20,r23
  80b5c0:	8809883a 	mov	r4,r17
  80b5c4:	a80b883a 	mov	r5,r21
  80b5c8:	1886b03a 	or	r3,r3,r2
  80b5cc:	d8c00115 	stw	r3,4(sp)
  80b5d0:	853fffcc 	andi	r20,r16,65535
  80b5d4:	080bb5c0 	call	80bb5c <__udivsi3>
  80b5d8:	8809883a 	mov	r4,r17
  80b5dc:	a80b883a 	mov	r5,r21
  80b5e0:	a0a3383a 	mul	r17,r20,r2
  80b5e4:	080bb640 	call	80bb64 <__umodsi3>
  80b5e8:	d9000117 	ldw	r4,4(sp)
  80b5ec:	1004943a 	slli	r2,r2,16
  80b5f0:	b839883a 	mov	fp,r23
  80b5f4:	2006d43a 	srli	r3,r4,16
  80b5f8:	10c4b03a 	or	r2,r2,r3
  80b5fc:	1440022e 	bgeu	r2,r17,80b608 <__umoddi3+0x330>
  80b600:	1405883a 	add	r2,r2,r16
  80b604:	1400962e 	bgeu	r2,r16,80b860 <__umoddi3+0x588>
  80b608:	1463c83a 	sub	r17,r2,r17
  80b60c:	8809883a 	mov	r4,r17
  80b610:	a80b883a 	mov	r5,r21
  80b614:	080bb5c0 	call	80bb5c <__udivsi3>
  80b618:	8809883a 	mov	r4,r17
  80b61c:	a80b883a 	mov	r5,r21
  80b620:	a0a3383a 	mul	r17,r20,r2
  80b624:	080bb640 	call	80bb64 <__umodsi3>
  80b628:	d9400117 	ldw	r5,4(sp)
  80b62c:	1004943a 	slli	r2,r2,16
  80b630:	28ffffcc 	andi	r3,r5,65535
  80b634:	10c4b03a 	or	r2,r2,r3
  80b638:	1440042e 	bgeu	r2,r17,80b64c <__umoddi3+0x374>
  80b63c:	1405883a 	add	r2,r2,r16
  80b640:	14000236 	bltu	r2,r16,80b64c <__umoddi3+0x374>
  80b644:	1440012e 	bgeu	r2,r17,80b64c <__umoddi3+0x374>
  80b648:	1405883a 	add	r2,r2,r16
  80b64c:	b5ec983a 	sll	r22,r22,r23
  80b650:	1463c83a 	sub	r17,r2,r17
  80b654:	003f4406 	br	80b368 <__umoddi3+0x90>
  80b658:	3d4fc83a 	sub	r7,r7,r21
  80b65c:	3546983a 	sll	r3,r6,r21
  80b660:	81c4d83a 	srl	r2,r16,r7
  80b664:	a1e2d83a 	srl	r17,r20,r7
  80b668:	a54c983a 	sll	r6,r20,r21
  80b66c:	18aeb03a 	or	r23,r3,r2
  80b670:	b828d43a 	srli	r20,r23,16
  80b674:	b1c4d83a 	srl	r2,r22,r7
  80b678:	8809883a 	mov	r4,r17
  80b67c:	a00b883a 	mov	r5,r20
  80b680:	308cb03a 	or	r6,r6,r2
  80b684:	d9c00315 	stw	r7,12(sp)
  80b688:	d9800215 	stw	r6,8(sp)
  80b68c:	080bb5c0 	call	80bb5c <__udivsi3>
  80b690:	8809883a 	mov	r4,r17
  80b694:	a00b883a 	mov	r5,r20
  80b698:	1039883a 	mov	fp,r2
  80b69c:	080bb640 	call	80bb64 <__umodsi3>
  80b6a0:	b8ffffcc 	andi	r3,r23,65535
  80b6a4:	d8c00415 	stw	r3,16(sp)
  80b6a8:	d9000217 	ldw	r4,8(sp)
  80b6ac:	d9400417 	ldw	r5,16(sp)
  80b6b0:	1004943a 	slli	r2,r2,16
  80b6b4:	2006d43a 	srli	r3,r4,16
  80b6b8:	8560983a 	sll	r16,r16,r21
  80b6bc:	2f23383a 	mul	r17,r5,fp
  80b6c0:	10c4b03a 	or	r2,r2,r3
  80b6c4:	dc000015 	stw	r16,0(sp)
  80b6c8:	b56c983a 	sll	r22,r22,r21
  80b6cc:	1440032e 	bgeu	r2,r17,80b6dc <__umoddi3+0x404>
  80b6d0:	15c5883a 	add	r2,r2,r23
  80b6d4:	e73fffc4 	addi	fp,fp,-1
  80b6d8:	15c05d2e 	bgeu	r2,r23,80b850 <__umoddi3+0x578>
  80b6dc:	1463c83a 	sub	r17,r2,r17
  80b6e0:	8809883a 	mov	r4,r17
  80b6e4:	a00b883a 	mov	r5,r20
  80b6e8:	080bb5c0 	call	80bb5c <__udivsi3>
  80b6ec:	8809883a 	mov	r4,r17
  80b6f0:	a00b883a 	mov	r5,r20
  80b6f4:	1021883a 	mov	r16,r2
  80b6f8:	080bb640 	call	80bb64 <__umodsi3>
  80b6fc:	d8c00417 	ldw	r3,16(sp)
  80b700:	d9000217 	ldw	r4,8(sp)
  80b704:	1004943a 	slli	r2,r2,16
  80b708:	1c23383a 	mul	r17,r3,r16
  80b70c:	20ffffcc 	andi	r3,r4,65535
  80b710:	10ceb03a 	or	r7,r2,r3
  80b714:	3c40032e 	bgeu	r7,r17,80b724 <__umoddi3+0x44c>
  80b718:	3dcf883a 	add	r7,r7,r23
  80b71c:	843fffc4 	addi	r16,r16,-1
  80b720:	3dc0472e 	bgeu	r7,r23,80b840 <__umoddi3+0x568>
  80b724:	e004943a 	slli	r2,fp,16
  80b728:	d9400017 	ldw	r5,0(sp)
  80b72c:	3c4fc83a 	sub	r7,r7,r17
  80b730:	8084b03a 	or	r2,r16,r2
  80b734:	28ffffcc 	andi	r3,r5,65535
  80b738:	280cd43a 	srli	r6,r5,16
  80b73c:	100ad43a 	srli	r5,r2,16
  80b740:	10bfffcc 	andi	r2,r2,65535
  80b744:	10d1383a 	mul	r8,r2,r3
  80b748:	28c7383a 	mul	r3,r5,r3
  80b74c:	1185383a 	mul	r2,r2,r6
  80b750:	4008d43a 	srli	r4,r8,16
  80b754:	298b383a 	mul	r5,r5,r6
  80b758:	10c5883a 	add	r2,r2,r3
  80b75c:	2089883a 	add	r4,r4,r2
  80b760:	20c0022e 	bgeu	r4,r3,80b76c <__umoddi3+0x494>
  80b764:	00800074 	movhi	r2,1
  80b768:	288b883a 	add	r5,r5,r2
  80b76c:	2004d43a 	srli	r2,r4,16
  80b770:	2008943a 	slli	r4,r4,16
  80b774:	40ffffcc 	andi	r3,r8,65535
  80b778:	288b883a 	add	r5,r5,r2
  80b77c:	20c9883a 	add	r4,r4,r3
  80b780:	39400b36 	bltu	r7,r5,80b7b0 <__umoddi3+0x4d8>
  80b784:	39403d26 	beq	r7,r5,80b87c <__umoddi3+0x5a4>
  80b788:	394bc83a 	sub	r5,r7,r5
  80b78c:	00000f06 	br	80b7cc <__umoddi3+0x4f4>
  80b790:	30c5c83a 	sub	r2,r6,r3
  80b794:	1839883a 	mov	fp,r3
  80b798:	b084d83a 	srl	r2,r22,r2
  80b79c:	a0c6983a 	sll	r3,r20,r3
  80b7a0:	8720983a 	sll	r16,r16,fp
  80b7a4:	b72c983a 	sll	r22,r22,fp
  80b7a8:	18a8b03a 	or	r20,r3,r2
  80b7ac:	003f3a06 	br	80b498 <__umoddi3+0x1c0>
  80b7b0:	d8c00017 	ldw	r3,0(sp)
  80b7b4:	20c5c83a 	sub	r2,r4,r3
  80b7b8:	2089803a 	cmpltu	r4,r4,r2
  80b7bc:	2dc7c83a 	sub	r3,r5,r23
  80b7c0:	1907c83a 	sub	r3,r3,r4
  80b7c4:	38cbc83a 	sub	r5,r7,r3
  80b7c8:	1009883a 	mov	r4,r2
  80b7cc:	b105c83a 	sub	r2,r22,r4
  80b7d0:	b087803a 	cmpltu	r3,r22,r2
  80b7d4:	28c7c83a 	sub	r3,r5,r3
  80b7d8:	d9400317 	ldw	r5,12(sp)
  80b7dc:	1544d83a 	srl	r2,r2,r21
  80b7e0:	1948983a 	sll	r4,r3,r5
  80b7e4:	1d46d83a 	srl	r3,r3,r21
  80b7e8:	20a4b03a 	or	r18,r4,r2
  80b7ec:	9011883a 	mov	r8,r18
  80b7f0:	1813883a 	mov	r9,r3
  80b7f4:	003ef606 	br	80b3d0 <__umoddi3+0xf8>
  80b7f8:	01400604 	movi	r5,24
  80b7fc:	2805883a 	mov	r2,r5
  80b800:	003ecc06 	br	80b334 <__umoddi3+0x5c>
  80b804:	01400204 	movi	r5,8
  80b808:	2805883a 	mov	r2,r5
  80b80c:	003ec906 	br	80b334 <__umoddi3+0x5c>
  80b810:	01400204 	movi	r5,8
  80b814:	2805883a 	mov	r2,r5
  80b818:	003f0106 	br	80b420 <__umoddi3+0x148>
  80b81c:	01400204 	movi	r5,8
  80b820:	2805883a 	mov	r2,r5
  80b824:	003f1206 	br	80b470 <__umoddi3+0x198>
  80b828:	01400604 	movi	r5,24
  80b82c:	2805883a 	mov	r2,r5
  80b830:	003f0f06 	br	80b470 <__umoddi3+0x198>
  80b834:	01400604 	movi	r5,24
  80b838:	2805883a 	mov	r2,r5
  80b83c:	003ef806 	br	80b420 <__umoddi3+0x148>
  80b840:	3c7fb82e 	bgeu	r7,r17,80b724 <__umoddi3+0x44c>
  80b844:	843fffc4 	addi	r16,r16,-1
  80b848:	3dcf883a 	add	r7,r7,r23
  80b84c:	003fb506 	br	80b724 <__umoddi3+0x44c>
  80b850:	147fa22e 	bgeu	r2,r17,80b6dc <__umoddi3+0x404>
  80b854:	e73fffc4 	addi	fp,fp,-1
  80b858:	15c5883a 	add	r2,r2,r23
  80b85c:	003f9f06 	br	80b6dc <__umoddi3+0x404>
  80b860:	147f692e 	bgeu	r2,r17,80b608 <__umoddi3+0x330>
  80b864:	1405883a 	add	r2,r2,r16
  80b868:	003f6706 	br	80b608 <__umoddi3+0x330>
  80b86c:	1405883a 	add	r2,r2,r16
  80b870:	003f1906 	br	80b4d8 <__umoddi3+0x200>
  80b874:	1405883a 	add	r2,r2,r16
  80b878:	003ec906 	br	80b3a0 <__umoddi3+0xc8>
  80b87c:	b13fcc36 	bltu	r22,r4,80b7b0 <__umoddi3+0x4d8>
  80b880:	000b883a 	mov	r5,zero
  80b884:	003fd106 	br	80b7cc <__umoddi3+0x4f4>

0080b888 <__eqdf2>:
  80b888:	deffef04 	addi	sp,sp,-68
  80b88c:	dc400f15 	stw	r17,60(sp)
  80b890:	dc400404 	addi	r17,sp,16
  80b894:	2005883a 	mov	r2,r4
  80b898:	2807883a 	mov	r3,r5
  80b89c:	dc000e15 	stw	r16,56(sp)
  80b8a0:	d809883a 	mov	r4,sp
  80b8a4:	880b883a 	mov	r5,r17
  80b8a8:	dc000904 	addi	r16,sp,36
  80b8ac:	d8c00115 	stw	r3,4(sp)
  80b8b0:	d8800015 	stw	r2,0(sp)
  80b8b4:	d9800215 	stw	r6,8(sp)
  80b8b8:	dfc01015 	stw	ra,64(sp)
  80b8bc:	d9c00315 	stw	r7,12(sp)
  80b8c0:	08037800 	call	803780 <__unpack_d>
  80b8c4:	d9000204 	addi	r4,sp,8
  80b8c8:	800b883a 	mov	r5,r16
  80b8cc:	08037800 	call	803780 <__unpack_d>
  80b8d0:	d8800417 	ldw	r2,16(sp)
  80b8d4:	00c00044 	movi	r3,1
  80b8d8:	180d883a 	mov	r6,r3
  80b8dc:	1880062e 	bgeu	r3,r2,80b8f8 <__eqdf2+0x70>
  80b8e0:	d8800917 	ldw	r2,36(sp)
  80b8e4:	8809883a 	mov	r4,r17
  80b8e8:	800b883a 	mov	r5,r16
  80b8ec:	1880022e 	bgeu	r3,r2,80b8f8 <__eqdf2+0x70>
  80b8f0:	08038b80 	call	8038b8 <__fpcmp_parts_d>
  80b8f4:	100d883a 	mov	r6,r2
  80b8f8:	3005883a 	mov	r2,r6
  80b8fc:	dfc01017 	ldw	ra,64(sp)
  80b900:	dc400f17 	ldw	r17,60(sp)
  80b904:	dc000e17 	ldw	r16,56(sp)
  80b908:	dec01104 	addi	sp,sp,68
  80b90c:	f800283a 	ret

0080b910 <__nedf2>:
  80b910:	deffef04 	addi	sp,sp,-68
  80b914:	dc400f15 	stw	r17,60(sp)
  80b918:	dc400404 	addi	r17,sp,16
  80b91c:	2005883a 	mov	r2,r4
  80b920:	2807883a 	mov	r3,r5
  80b924:	dc000e15 	stw	r16,56(sp)
  80b928:	d809883a 	mov	r4,sp
  80b92c:	880b883a 	mov	r5,r17
  80b930:	dc000904 	addi	r16,sp,36
  80b934:	d8c00115 	stw	r3,4(sp)
  80b938:	d8800015 	stw	r2,0(sp)
  80b93c:	d9800215 	stw	r6,8(sp)
  80b940:	dfc01015 	stw	ra,64(sp)
  80b944:	d9c00315 	stw	r7,12(sp)
  80b948:	08037800 	call	803780 <__unpack_d>
  80b94c:	d9000204 	addi	r4,sp,8
  80b950:	800b883a 	mov	r5,r16
  80b954:	08037800 	call	803780 <__unpack_d>
  80b958:	d8800417 	ldw	r2,16(sp)
  80b95c:	00c00044 	movi	r3,1
  80b960:	180d883a 	mov	r6,r3
  80b964:	1880062e 	bgeu	r3,r2,80b980 <__nedf2+0x70>
  80b968:	d8800917 	ldw	r2,36(sp)
  80b96c:	8809883a 	mov	r4,r17
  80b970:	800b883a 	mov	r5,r16
  80b974:	1880022e 	bgeu	r3,r2,80b980 <__nedf2+0x70>
  80b978:	08038b80 	call	8038b8 <__fpcmp_parts_d>
  80b97c:	100d883a 	mov	r6,r2
  80b980:	3005883a 	mov	r2,r6
  80b984:	dfc01017 	ldw	ra,64(sp)
  80b988:	dc400f17 	ldw	r17,60(sp)
  80b98c:	dc000e17 	ldw	r16,56(sp)
  80b990:	dec01104 	addi	sp,sp,68
  80b994:	f800283a 	ret

0080b998 <__gtdf2>:
  80b998:	deffef04 	addi	sp,sp,-68
  80b99c:	dc400f15 	stw	r17,60(sp)
  80b9a0:	dc400404 	addi	r17,sp,16
  80b9a4:	2005883a 	mov	r2,r4
  80b9a8:	2807883a 	mov	r3,r5
  80b9ac:	dc000e15 	stw	r16,56(sp)
  80b9b0:	d809883a 	mov	r4,sp
  80b9b4:	880b883a 	mov	r5,r17
  80b9b8:	dc000904 	addi	r16,sp,36
  80b9bc:	d8c00115 	stw	r3,4(sp)
  80b9c0:	d8800015 	stw	r2,0(sp)
  80b9c4:	d9800215 	stw	r6,8(sp)
  80b9c8:	dfc01015 	stw	ra,64(sp)
  80b9cc:	d9c00315 	stw	r7,12(sp)
  80b9d0:	08037800 	call	803780 <__unpack_d>
  80b9d4:	d9000204 	addi	r4,sp,8
  80b9d8:	800b883a 	mov	r5,r16
  80b9dc:	08037800 	call	803780 <__unpack_d>
  80b9e0:	d8800417 	ldw	r2,16(sp)
  80b9e4:	00c00044 	movi	r3,1
  80b9e8:	01bfffc4 	movi	r6,-1
  80b9ec:	1880062e 	bgeu	r3,r2,80ba08 <__gtdf2+0x70>
  80b9f0:	d8800917 	ldw	r2,36(sp)
  80b9f4:	8809883a 	mov	r4,r17
  80b9f8:	800b883a 	mov	r5,r16
  80b9fc:	1880022e 	bgeu	r3,r2,80ba08 <__gtdf2+0x70>
  80ba00:	08038b80 	call	8038b8 <__fpcmp_parts_d>
  80ba04:	100d883a 	mov	r6,r2
  80ba08:	3005883a 	mov	r2,r6
  80ba0c:	dfc01017 	ldw	ra,64(sp)
  80ba10:	dc400f17 	ldw	r17,60(sp)
  80ba14:	dc000e17 	ldw	r16,56(sp)
  80ba18:	dec01104 	addi	sp,sp,68
  80ba1c:	f800283a 	ret

0080ba20 <udivmodsi4>:
  80ba20:	29001b2e 	bgeu	r5,r4,80ba90 <udivmodsi4+0x70>
  80ba24:	28001a16 	blt	r5,zero,80ba90 <udivmodsi4+0x70>
  80ba28:	00800044 	movi	r2,1
  80ba2c:	0007883a 	mov	r3,zero
  80ba30:	01c007c4 	movi	r7,31
  80ba34:	00000306 	br	80ba44 <udivmodsi4+0x24>
  80ba38:	19c01326 	beq	r3,r7,80ba88 <udivmodsi4+0x68>
  80ba3c:	18c00044 	addi	r3,r3,1
  80ba40:	28000416 	blt	r5,zero,80ba54 <udivmodsi4+0x34>
  80ba44:	294b883a 	add	r5,r5,r5
  80ba48:	1085883a 	add	r2,r2,r2
  80ba4c:	293ffa36 	bltu	r5,r4,80ba38 <udivmodsi4+0x18>
  80ba50:	10000d26 	beq	r2,zero,80ba88 <udivmodsi4+0x68>
  80ba54:	0007883a 	mov	r3,zero
  80ba58:	21400236 	bltu	r4,r5,80ba64 <udivmodsi4+0x44>
  80ba5c:	2149c83a 	sub	r4,r4,r5
  80ba60:	1886b03a 	or	r3,r3,r2
  80ba64:	1004d07a 	srli	r2,r2,1
  80ba68:	280ad07a 	srli	r5,r5,1
  80ba6c:	103ffa1e 	bne	r2,zero,80ba58 <udivmodsi4+0x38>
  80ba70:	30000226 	beq	r6,zero,80ba7c <udivmodsi4+0x5c>
  80ba74:	2005883a 	mov	r2,r4
  80ba78:	f800283a 	ret
  80ba7c:	1809883a 	mov	r4,r3
  80ba80:	2005883a 	mov	r2,r4
  80ba84:	f800283a 	ret
  80ba88:	0007883a 	mov	r3,zero
  80ba8c:	003ff806 	br	80ba70 <udivmodsi4+0x50>
  80ba90:	00800044 	movi	r2,1
  80ba94:	0007883a 	mov	r3,zero
  80ba98:	003fef06 	br	80ba58 <udivmodsi4+0x38>

0080ba9c <__divsi3>:
  80ba9c:	defffe04 	addi	sp,sp,-8
  80baa0:	dc000015 	stw	r16,0(sp)
  80baa4:	dfc00115 	stw	ra,4(sp)
  80baa8:	0021883a 	mov	r16,zero
  80baac:	20000c16 	blt	r4,zero,80bae0 <__divsi3+0x44>
  80bab0:	000d883a 	mov	r6,zero
  80bab4:	28000e16 	blt	r5,zero,80baf0 <__divsi3+0x54>
  80bab8:	080ba200 	call	80ba20 <udivmodsi4>
  80babc:	1007883a 	mov	r3,r2
  80bac0:	8005003a 	cmpeq	r2,r16,zero
  80bac4:	1000011e 	bne	r2,zero,80bacc <__divsi3+0x30>
  80bac8:	00c7c83a 	sub	r3,zero,r3
  80bacc:	1805883a 	mov	r2,r3
  80bad0:	dfc00117 	ldw	ra,4(sp)
  80bad4:	dc000017 	ldw	r16,0(sp)
  80bad8:	dec00204 	addi	sp,sp,8
  80badc:	f800283a 	ret
  80bae0:	0109c83a 	sub	r4,zero,r4
  80bae4:	04000044 	movi	r16,1
  80bae8:	000d883a 	mov	r6,zero
  80baec:	283ff20e 	bge	r5,zero,80bab8 <__divsi3+0x1c>
  80baf0:	014bc83a 	sub	r5,zero,r5
  80baf4:	8021003a 	cmpeq	r16,r16,zero
  80baf8:	003fef06 	br	80bab8 <__divsi3+0x1c>

0080bafc <__modsi3>:
  80bafc:	deffff04 	addi	sp,sp,-4
  80bb00:	dfc00015 	stw	ra,0(sp)
  80bb04:	01800044 	movi	r6,1
  80bb08:	2807883a 	mov	r3,r5
  80bb0c:	20000416 	blt	r4,zero,80bb20 <__modsi3+0x24>
  80bb10:	28000c16 	blt	r5,zero,80bb44 <__modsi3+0x48>
  80bb14:	dfc00017 	ldw	ra,0(sp)
  80bb18:	dec00104 	addi	sp,sp,4
  80bb1c:	080ba201 	jmpi	80ba20 <udivmodsi4>
  80bb20:	0109c83a 	sub	r4,zero,r4
  80bb24:	28000b16 	blt	r5,zero,80bb54 <__modsi3+0x58>
  80bb28:	180b883a 	mov	r5,r3
  80bb2c:	01800044 	movi	r6,1
  80bb30:	080ba200 	call	80ba20 <udivmodsi4>
  80bb34:	0085c83a 	sub	r2,zero,r2
  80bb38:	dfc00017 	ldw	ra,0(sp)
  80bb3c:	dec00104 	addi	sp,sp,4
  80bb40:	f800283a 	ret
  80bb44:	014bc83a 	sub	r5,zero,r5
  80bb48:	dfc00017 	ldw	ra,0(sp)
  80bb4c:	dec00104 	addi	sp,sp,4
  80bb50:	080ba201 	jmpi	80ba20 <udivmodsi4>
  80bb54:	0147c83a 	sub	r3,zero,r5
  80bb58:	003ff306 	br	80bb28 <__modsi3+0x2c>

0080bb5c <__udivsi3>:
  80bb5c:	000d883a 	mov	r6,zero
  80bb60:	080ba201 	jmpi	80ba20 <udivmodsi4>

0080bb64 <__umodsi3>:
  80bb64:	01800044 	movi	r6,1
  80bb68:	080ba201 	jmpi	80ba20 <udivmodsi4>

0080bb6c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80bb6c:	defff804 	addi	sp,sp,-32
  80bb70:	dfc00715 	stw	ra,28(sp)
  80bb74:	df000615 	stw	fp,24(sp)
  80bb78:	df000604 	addi	fp,sp,24
  80bb7c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80bb80:	e0bffc17 	ldw	r2,-16(fp)
  80bb84:	1004803a 	cmplt	r2,r2,zero
  80bb88:	1000081e 	bne	r2,zero,80bbac <close+0x40>
  80bb8c:	e0bffc17 	ldw	r2,-16(fp)
  80bb90:	10800324 	muli	r2,r2,12
  80bb94:	1007883a 	mov	r3,r2
  80bb98:	008020b4 	movhi	r2,130
  80bb9c:	10b45204 	addi	r2,r2,-11960
  80bba0:	1887883a 	add	r3,r3,r2
  80bba4:	e0ffff15 	stw	r3,-4(fp)
  80bba8:	00000106 	br	80bbb0 <close+0x44>
  80bbac:	e03fff15 	stw	zero,-4(fp)
  80bbb0:	e0bfff17 	ldw	r2,-4(fp)
  80bbb4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80bbb8:	e0bffb17 	ldw	r2,-20(fp)
  80bbbc:	1005003a 	cmpeq	r2,r2,zero
  80bbc0:	10001d1e 	bne	r2,zero,80bc38 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80bbc4:	e0bffb17 	ldw	r2,-20(fp)
  80bbc8:	10800017 	ldw	r2,0(r2)
  80bbcc:	10800417 	ldw	r2,16(r2)
  80bbd0:	1005003a 	cmpeq	r2,r2,zero
  80bbd4:	1000071e 	bne	r2,zero,80bbf4 <close+0x88>
  80bbd8:	e0bffb17 	ldw	r2,-20(fp)
  80bbdc:	10800017 	ldw	r2,0(r2)
  80bbe0:	10800417 	ldw	r2,16(r2)
  80bbe4:	e13ffb17 	ldw	r4,-20(fp)
  80bbe8:	103ee83a 	callr	r2
  80bbec:	e0bffe15 	stw	r2,-8(fp)
  80bbf0:	00000106 	br	80bbf8 <close+0x8c>
  80bbf4:	e03ffe15 	stw	zero,-8(fp)
  80bbf8:	e0bffe17 	ldw	r2,-8(fp)
  80bbfc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80bc00:	e13ffc17 	ldw	r4,-16(fp)
  80bc04:	080c3cc0 	call	80c3cc <alt_release_fd>
    if (rval < 0)
  80bc08:	e0bffa17 	ldw	r2,-24(fp)
  80bc0c:	1004403a 	cmpge	r2,r2,zero
  80bc10:	1000071e 	bne	r2,zero,80bc30 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80bc14:	080bc680 	call	80bc68 <alt_get_errno>
  80bc18:	e0fffa17 	ldw	r3,-24(fp)
  80bc1c:	00c7c83a 	sub	r3,zero,r3
  80bc20:	10c00015 	stw	r3,0(r2)
      return -1;
  80bc24:	00bfffc4 	movi	r2,-1
  80bc28:	e0bffd15 	stw	r2,-12(fp)
  80bc2c:	00000806 	br	80bc50 <close+0xe4>
    }
    return 0;
  80bc30:	e03ffd15 	stw	zero,-12(fp)
  80bc34:	00000606 	br	80bc50 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80bc38:	080bc680 	call	80bc68 <alt_get_errno>
  80bc3c:	1007883a 	mov	r3,r2
  80bc40:	00801444 	movi	r2,81
  80bc44:	18800015 	stw	r2,0(r3)
    return -1;
  80bc48:	00bfffc4 	movi	r2,-1
  80bc4c:	e0bffd15 	stw	r2,-12(fp)
  80bc50:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80bc54:	e037883a 	mov	sp,fp
  80bc58:	dfc00117 	ldw	ra,4(sp)
  80bc5c:	df000017 	ldw	fp,0(sp)
  80bc60:	dec00204 	addi	sp,sp,8
  80bc64:	f800283a 	ret

0080bc68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80bc68:	defffd04 	addi	sp,sp,-12
  80bc6c:	dfc00215 	stw	ra,8(sp)
  80bc70:	df000115 	stw	fp,4(sp)
  80bc74:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80bc78:	008020b4 	movhi	r2,130
  80bc7c:	10b8fa04 	addi	r2,r2,-7192
  80bc80:	10800017 	ldw	r2,0(r2)
  80bc84:	1005003a 	cmpeq	r2,r2,zero
  80bc88:	1000061e 	bne	r2,zero,80bca4 <alt_get_errno+0x3c>
  80bc8c:	008020b4 	movhi	r2,130
  80bc90:	10b8fa04 	addi	r2,r2,-7192
  80bc94:	10800017 	ldw	r2,0(r2)
  80bc98:	103ee83a 	callr	r2
  80bc9c:	e0bfff15 	stw	r2,-4(fp)
  80bca0:	00000306 	br	80bcb0 <alt_get_errno+0x48>
  80bca4:	008020b4 	movhi	r2,130
  80bca8:	10801304 	addi	r2,r2,76
  80bcac:	e0bfff15 	stw	r2,-4(fp)
  80bcb0:	e0bfff17 	ldw	r2,-4(fp)
}
  80bcb4:	e037883a 	mov	sp,fp
  80bcb8:	dfc00117 	ldw	ra,4(sp)
  80bcbc:	df000017 	ldw	fp,0(sp)
  80bcc0:	dec00204 	addi	sp,sp,8
  80bcc4:	f800283a 	ret

0080bcc8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80bcc8:	defffc04 	addi	sp,sp,-16
  80bccc:	df000315 	stw	fp,12(sp)
  80bcd0:	df000304 	addi	fp,sp,12
  80bcd4:	e13ffd15 	stw	r4,-12(fp)
  80bcd8:	e17ffe15 	stw	r5,-8(fp)
  80bcdc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80bce0:	e0bfff17 	ldw	r2,-4(fp)
}
  80bce4:	e037883a 	mov	sp,fp
  80bce8:	df000017 	ldw	fp,0(sp)
  80bcec:	dec00104 	addi	sp,sp,4
  80bcf0:	f800283a 	ret

0080bcf4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80bcf4:	defff904 	addi	sp,sp,-28
  80bcf8:	dfc00615 	stw	ra,24(sp)
  80bcfc:	df000515 	stw	fp,20(sp)
  80bd00:	df000504 	addi	fp,sp,20
  80bd04:	e13ffc15 	stw	r4,-16(fp)
  80bd08:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80bd0c:	e0bffc17 	ldw	r2,-16(fp)
  80bd10:	1004803a 	cmplt	r2,r2,zero
  80bd14:	1000081e 	bne	r2,zero,80bd38 <fstat+0x44>
  80bd18:	e0bffc17 	ldw	r2,-16(fp)
  80bd1c:	10800324 	muli	r2,r2,12
  80bd20:	1007883a 	mov	r3,r2
  80bd24:	008020b4 	movhi	r2,130
  80bd28:	10b45204 	addi	r2,r2,-11960
  80bd2c:	1887883a 	add	r3,r3,r2
  80bd30:	e0ffff15 	stw	r3,-4(fp)
  80bd34:	00000106 	br	80bd3c <fstat+0x48>
  80bd38:	e03fff15 	stw	zero,-4(fp)
  80bd3c:	e0bfff17 	ldw	r2,-4(fp)
  80bd40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80bd44:	e0bffb17 	ldw	r2,-20(fp)
  80bd48:	1005003a 	cmpeq	r2,r2,zero
  80bd4c:	1000121e 	bne	r2,zero,80bd98 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80bd50:	e0bffb17 	ldw	r2,-20(fp)
  80bd54:	10800017 	ldw	r2,0(r2)
  80bd58:	10800817 	ldw	r2,32(r2)
  80bd5c:	1005003a 	cmpeq	r2,r2,zero
  80bd60:	1000081e 	bne	r2,zero,80bd84 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80bd64:	e0bffb17 	ldw	r2,-20(fp)
  80bd68:	10800017 	ldw	r2,0(r2)
  80bd6c:	10800817 	ldw	r2,32(r2)
  80bd70:	e13ffb17 	ldw	r4,-20(fp)
  80bd74:	e17ffd17 	ldw	r5,-12(fp)
  80bd78:	103ee83a 	callr	r2
  80bd7c:	e0bffe15 	stw	r2,-8(fp)
  80bd80:	00000b06 	br	80bdb0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80bd84:	e0fffd17 	ldw	r3,-12(fp)
  80bd88:	00880004 	movi	r2,8192
  80bd8c:	18800115 	stw	r2,4(r3)
      return 0;
  80bd90:	e03ffe15 	stw	zero,-8(fp)
  80bd94:	00000606 	br	80bdb0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80bd98:	080bdc80 	call	80bdc8 <alt_get_errno>
  80bd9c:	1007883a 	mov	r3,r2
  80bda0:	00801444 	movi	r2,81
  80bda4:	18800015 	stw	r2,0(r3)
    return -1;
  80bda8:	00bfffc4 	movi	r2,-1
  80bdac:	e0bffe15 	stw	r2,-8(fp)
  80bdb0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80bdb4:	e037883a 	mov	sp,fp
  80bdb8:	dfc00117 	ldw	ra,4(sp)
  80bdbc:	df000017 	ldw	fp,0(sp)
  80bdc0:	dec00204 	addi	sp,sp,8
  80bdc4:	f800283a 	ret

0080bdc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80bdc8:	defffd04 	addi	sp,sp,-12
  80bdcc:	dfc00215 	stw	ra,8(sp)
  80bdd0:	df000115 	stw	fp,4(sp)
  80bdd4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80bdd8:	008020b4 	movhi	r2,130
  80bddc:	10b8fa04 	addi	r2,r2,-7192
  80bde0:	10800017 	ldw	r2,0(r2)
  80bde4:	1005003a 	cmpeq	r2,r2,zero
  80bde8:	1000061e 	bne	r2,zero,80be04 <alt_get_errno+0x3c>
  80bdec:	008020b4 	movhi	r2,130
  80bdf0:	10b8fa04 	addi	r2,r2,-7192
  80bdf4:	10800017 	ldw	r2,0(r2)
  80bdf8:	103ee83a 	callr	r2
  80bdfc:	e0bfff15 	stw	r2,-4(fp)
  80be00:	00000306 	br	80be10 <alt_get_errno+0x48>
  80be04:	008020b4 	movhi	r2,130
  80be08:	10801304 	addi	r2,r2,76
  80be0c:	e0bfff15 	stw	r2,-4(fp)
  80be10:	e0bfff17 	ldw	r2,-4(fp)
}
  80be14:	e037883a 	mov	sp,fp
  80be18:	dfc00117 	ldw	ra,4(sp)
  80be1c:	df000017 	ldw	fp,0(sp)
  80be20:	dec00204 	addi	sp,sp,8
  80be24:	f800283a 	ret

0080be28 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80be28:	deffeb04 	addi	sp,sp,-84
  80be2c:	dfc01415 	stw	ra,80(sp)
  80be30:	df001315 	stw	fp,76(sp)
  80be34:	df001304 	addi	fp,sp,76
  80be38:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80be3c:	e0bffd17 	ldw	r2,-12(fp)
  80be40:	1004803a 	cmplt	r2,r2,zero
  80be44:	1000081e 	bne	r2,zero,80be68 <isatty+0x40>
  80be48:	e0bffd17 	ldw	r2,-12(fp)
  80be4c:	10800324 	muli	r2,r2,12
  80be50:	1007883a 	mov	r3,r2
  80be54:	008020b4 	movhi	r2,130
  80be58:	10b45204 	addi	r2,r2,-11960
  80be5c:	1887883a 	add	r3,r3,r2
  80be60:	e0ffff15 	stw	r3,-4(fp)
  80be64:	00000106 	br	80be6c <isatty+0x44>
  80be68:	e03fff15 	stw	zero,-4(fp)
  80be6c:	e0bfff17 	ldw	r2,-4(fp)
  80be70:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80be74:	e0bfed17 	ldw	r2,-76(fp)
  80be78:	1005003a 	cmpeq	r2,r2,zero
  80be7c:	10000f1e 	bne	r2,zero,80bebc <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80be80:	e0bfed17 	ldw	r2,-76(fp)
  80be84:	10800017 	ldw	r2,0(r2)
  80be88:	10800817 	ldw	r2,32(r2)
  80be8c:	1004c03a 	cmpne	r2,r2,zero
  80be90:	1000031e 	bne	r2,zero,80bea0 <isatty+0x78>
    {
      return 1;
  80be94:	00800044 	movi	r2,1
  80be98:	e0bffe15 	stw	r2,-8(fp)
  80be9c:	00000c06 	br	80bed0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80bea0:	e17fee04 	addi	r5,fp,-72
  80bea4:	e13ffd17 	ldw	r4,-12(fp)
  80bea8:	080bcf40 	call	80bcf4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80beac:	e0bfef17 	ldw	r2,-68(fp)
  80beb0:	10880020 	cmpeqi	r2,r2,8192
  80beb4:	e0bffe15 	stw	r2,-8(fp)
  80beb8:	00000506 	br	80bed0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80bebc:	080bee80 	call	80bee8 <alt_get_errno>
  80bec0:	1007883a 	mov	r3,r2
  80bec4:	00801444 	movi	r2,81
  80bec8:	18800015 	stw	r2,0(r3)
    return 0;
  80becc:	e03ffe15 	stw	zero,-8(fp)
  80bed0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80bed4:	e037883a 	mov	sp,fp
  80bed8:	dfc00117 	ldw	ra,4(sp)
  80bedc:	df000017 	ldw	fp,0(sp)
  80bee0:	dec00204 	addi	sp,sp,8
  80bee4:	f800283a 	ret

0080bee8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80bee8:	defffd04 	addi	sp,sp,-12
  80beec:	dfc00215 	stw	ra,8(sp)
  80bef0:	df000115 	stw	fp,4(sp)
  80bef4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80bef8:	008020b4 	movhi	r2,130
  80befc:	10b8fa04 	addi	r2,r2,-7192
  80bf00:	10800017 	ldw	r2,0(r2)
  80bf04:	1005003a 	cmpeq	r2,r2,zero
  80bf08:	1000061e 	bne	r2,zero,80bf24 <alt_get_errno+0x3c>
  80bf0c:	008020b4 	movhi	r2,130
  80bf10:	10b8fa04 	addi	r2,r2,-7192
  80bf14:	10800017 	ldw	r2,0(r2)
  80bf18:	103ee83a 	callr	r2
  80bf1c:	e0bfff15 	stw	r2,-4(fp)
  80bf20:	00000306 	br	80bf30 <alt_get_errno+0x48>
  80bf24:	008020b4 	movhi	r2,130
  80bf28:	10801304 	addi	r2,r2,76
  80bf2c:	e0bfff15 	stw	r2,-4(fp)
  80bf30:	e0bfff17 	ldw	r2,-4(fp)
}
  80bf34:	e037883a 	mov	sp,fp
  80bf38:	dfc00117 	ldw	ra,4(sp)
  80bf3c:	df000017 	ldw	fp,0(sp)
  80bf40:	dec00204 	addi	sp,sp,8
  80bf44:	f800283a 	ret

0080bf48 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80bf48:	defffe04 	addi	sp,sp,-8
  80bf4c:	dfc00115 	stw	ra,4(sp)
  80bf50:	df000015 	stw	fp,0(sp)
  80bf54:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80bf58:	010020b4 	movhi	r4,130
  80bf5c:	21391e04 	addi	r4,r4,-7048
  80bf60:	014020b4 	movhi	r5,130
  80bf64:	29724304 	addi	r5,r5,-14068
  80bf68:	018020b4 	movhi	r6,130
  80bf6c:	31b91e04 	addi	r6,r6,-7048
  80bf70:	080bfc80 	call	80bfc8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80bf74:	01002034 	movhi	r4,128
  80bf78:	21000004 	addi	r4,r4,0
  80bf7c:	01406434 	movhi	r5,400
  80bf80:	29500804 	addi	r5,r5,16416
  80bf84:	01806434 	movhi	r6,400
  80bf88:	31907004 	addi	r6,r6,16832
  80bf8c:	080bfc80 	call	80bfc8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80bf90:	010020b4 	movhi	r4,130
  80bf94:	212fe504 	addi	r4,r4,-16492
  80bf98:	014020b4 	movhi	r5,130
  80bf9c:	296fe504 	addi	r5,r5,-16492
  80bfa0:	018020b4 	movhi	r6,130
  80bfa4:	31b24304 	addi	r6,r6,-14068
  80bfa8:	080bfc80 	call	80bfc8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80bfac:	081a9ac0 	call	81a9ac <alt_dcache_flush_all>
  alt_icache_flush_all();
  80bfb0:	081ac380 	call	81ac38 <alt_icache_flush_all>
}
  80bfb4:	e037883a 	mov	sp,fp
  80bfb8:	dfc00117 	ldw	ra,4(sp)
  80bfbc:	df000017 	ldw	fp,0(sp)
  80bfc0:	dec00204 	addi	sp,sp,8
  80bfc4:	f800283a 	ret

0080bfc8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80bfc8:	defffc04 	addi	sp,sp,-16
  80bfcc:	df000315 	stw	fp,12(sp)
  80bfd0:	df000304 	addi	fp,sp,12
  80bfd4:	e13ffd15 	stw	r4,-12(fp)
  80bfd8:	e17ffe15 	stw	r5,-8(fp)
  80bfdc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80bfe0:	e0fffe17 	ldw	r3,-8(fp)
  80bfe4:	e0bffd17 	ldw	r2,-12(fp)
  80bfe8:	18800e26 	beq	r3,r2,80c024 <alt_load_section+0x5c>
  {
    while( to != end )
  80bfec:	00000a06 	br	80c018 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80bff0:	e0bffd17 	ldw	r2,-12(fp)
  80bff4:	10c00017 	ldw	r3,0(r2)
  80bff8:	e0bffe17 	ldw	r2,-8(fp)
  80bffc:	10c00015 	stw	r3,0(r2)
  80c000:	e0bffe17 	ldw	r2,-8(fp)
  80c004:	10800104 	addi	r2,r2,4
  80c008:	e0bffe15 	stw	r2,-8(fp)
  80c00c:	e0bffd17 	ldw	r2,-12(fp)
  80c010:	10800104 	addi	r2,r2,4
  80c014:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80c018:	e0fffe17 	ldw	r3,-8(fp)
  80c01c:	e0bfff17 	ldw	r2,-4(fp)
  80c020:	18bff31e 	bne	r3,r2,80bff0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80c024:	e037883a 	mov	sp,fp
  80c028:	df000017 	ldw	fp,0(sp)
  80c02c:	dec00104 	addi	sp,sp,4
  80c030:	f800283a 	ret

0080c034 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80c034:	defff804 	addi	sp,sp,-32
  80c038:	dfc00715 	stw	ra,28(sp)
  80c03c:	df000615 	stw	fp,24(sp)
  80c040:	df000604 	addi	fp,sp,24
  80c044:	e13ffc15 	stw	r4,-16(fp)
  80c048:	e17ffd15 	stw	r5,-12(fp)
  80c04c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80c050:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c054:	e0bffc17 	ldw	r2,-16(fp)
  80c058:	1004803a 	cmplt	r2,r2,zero
  80c05c:	1000081e 	bne	r2,zero,80c080 <lseek+0x4c>
  80c060:	e0bffc17 	ldw	r2,-16(fp)
  80c064:	10800324 	muli	r2,r2,12
  80c068:	1007883a 	mov	r3,r2
  80c06c:	008020b4 	movhi	r2,130
  80c070:	10b45204 	addi	r2,r2,-11960
  80c074:	1887883a 	add	r3,r3,r2
  80c078:	e0ffff15 	stw	r3,-4(fp)
  80c07c:	00000106 	br	80c084 <lseek+0x50>
  80c080:	e03fff15 	stw	zero,-4(fp)
  80c084:	e0bfff17 	ldw	r2,-4(fp)
  80c088:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80c08c:	e0bffb17 	ldw	r2,-20(fp)
  80c090:	1005003a 	cmpeq	r2,r2,zero
  80c094:	1000111e 	bne	r2,zero,80c0dc <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80c098:	e0bffb17 	ldw	r2,-20(fp)
  80c09c:	10800017 	ldw	r2,0(r2)
  80c0a0:	10800717 	ldw	r2,28(r2)
  80c0a4:	1005003a 	cmpeq	r2,r2,zero
  80c0a8:	1000091e 	bne	r2,zero,80c0d0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80c0ac:	e0bffb17 	ldw	r2,-20(fp)
  80c0b0:	10800017 	ldw	r2,0(r2)
  80c0b4:	10800717 	ldw	r2,28(r2)
  80c0b8:	e13ffb17 	ldw	r4,-20(fp)
  80c0bc:	e17ffd17 	ldw	r5,-12(fp)
  80c0c0:	e1bffe17 	ldw	r6,-8(fp)
  80c0c4:	103ee83a 	callr	r2
  80c0c8:	e0bffa15 	stw	r2,-24(fp)
  80c0cc:	00000506 	br	80c0e4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80c0d0:	00bfde84 	movi	r2,-134
  80c0d4:	e0bffa15 	stw	r2,-24(fp)
  80c0d8:	00000206 	br	80c0e4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80c0dc:	00bfebc4 	movi	r2,-81
  80c0e0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80c0e4:	e0bffa17 	ldw	r2,-24(fp)
  80c0e8:	1004403a 	cmpge	r2,r2,zero
  80c0ec:	1000071e 	bne	r2,zero,80c10c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80c0f0:	080c1240 	call	80c124 <alt_get_errno>
  80c0f4:	1007883a 	mov	r3,r2
  80c0f8:	e0bffa17 	ldw	r2,-24(fp)
  80c0fc:	0085c83a 	sub	r2,zero,r2
  80c100:	18800015 	stw	r2,0(r3)
    rc = -1;
  80c104:	00bfffc4 	movi	r2,-1
  80c108:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80c10c:	e0bffa17 	ldw	r2,-24(fp)
}
  80c110:	e037883a 	mov	sp,fp
  80c114:	dfc00117 	ldw	ra,4(sp)
  80c118:	df000017 	ldw	fp,0(sp)
  80c11c:	dec00204 	addi	sp,sp,8
  80c120:	f800283a 	ret

0080c124 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c124:	defffd04 	addi	sp,sp,-12
  80c128:	dfc00215 	stw	ra,8(sp)
  80c12c:	df000115 	stw	fp,4(sp)
  80c130:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c134:	008020b4 	movhi	r2,130
  80c138:	10b8fa04 	addi	r2,r2,-7192
  80c13c:	10800017 	ldw	r2,0(r2)
  80c140:	1005003a 	cmpeq	r2,r2,zero
  80c144:	1000061e 	bne	r2,zero,80c160 <alt_get_errno+0x3c>
  80c148:	008020b4 	movhi	r2,130
  80c14c:	10b8fa04 	addi	r2,r2,-7192
  80c150:	10800017 	ldw	r2,0(r2)
  80c154:	103ee83a 	callr	r2
  80c158:	e0bfff15 	stw	r2,-4(fp)
  80c15c:	00000306 	br	80c16c <alt_get_errno+0x48>
  80c160:	008020b4 	movhi	r2,130
  80c164:	10801304 	addi	r2,r2,76
  80c168:	e0bfff15 	stw	r2,-4(fp)
  80c16c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c170:	e037883a 	mov	sp,fp
  80c174:	dfc00117 	ldw	ra,4(sp)
  80c178:	df000017 	ldw	fp,0(sp)
  80c17c:	dec00204 	addi	sp,sp,8
  80c180:	f800283a 	ret

0080c184 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80c184:	defffb04 	addi	sp,sp,-20
  80c188:	dfc00415 	stw	ra,16(sp)
  80c18c:	df000315 	stw	fp,12(sp)
  80c190:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80c194:	0009883a 	mov	r4,zero
  80c198:	0814c140 	call	814c14 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80c19c:	080d2700 	call	80d270 <OSInit>
  80c1a0:	01000044 	movi	r4,1
  80c1a4:	08121340 	call	812134 <OSSemCreate>
  80c1a8:	1007883a 	mov	r3,r2
  80c1ac:	008020b4 	movhi	r2,130
  80c1b0:	10801904 	addi	r2,r2,100
  80c1b4:	10c00015 	stw	r3,0(r2)
  80c1b8:	01000044 	movi	r4,1
  80c1bc:	08121340 	call	812134 <OSSemCreate>
  80c1c0:	1007883a 	mov	r3,r2
  80c1c4:	008020b4 	movhi	r2,130
  80c1c8:	10801b04 	addi	r2,r2,108
  80c1cc:	10c00015 	stw	r3,0(r2)
  80c1d0:	008020b4 	movhi	r2,130
  80c1d4:	10801404 	addi	r2,r2,80
  80c1d8:	e0bffd15 	stw	r2,-12(fp)
  80c1dc:	00800044 	movi	r2,1
  80c1e0:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80c1e4:	e13ffe0b 	ldhu	r4,-8(fp)
  80c1e8:	08121340 	call	812134 <OSSemCreate>
  80c1ec:	1007883a 	mov	r3,r2
  80c1f0:	e0bffd17 	ldw	r2,-12(fp)
  80c1f4:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80c1f8:	0814c480 	call	814c48 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80c1fc:	010020b4 	movhi	r4,130
  80c200:	2131db04 	addi	r4,r4,-14484
  80c204:	014020b4 	movhi	r5,130
  80c208:	2971db04 	addi	r5,r5,-14484
  80c20c:	018020b4 	movhi	r6,130
  80c210:	31b1db04 	addi	r6,r6,-14484
  80c214:	081ad2c0 	call	81ad2c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80c218:	081aadc0 	call	81aadc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80c21c:	010020b4 	movhi	r4,130
  80c220:	212ad004 	addi	r4,r4,-21696
  80c224:	081bb7c0 	call	81bb7c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80c228:	d1272717 	ldw	r4,-25444(gp)
  80c22c:	d1672817 	ldw	r5,-25440(gp)
  80c230:	d1a72917 	ldw	r6,-25436(gp)
  80c234:	0801ae40 	call	801ae4 <main>
  80c238:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80c23c:	01000044 	movi	r4,1
  80c240:	080bb6c0 	call	80bb6c <close>
  exit (result);
  80c244:	e13fff17 	ldw	r4,-4(fp)
  80c248:	081bb900 	call	81bb90 <exit>

0080c24c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80c24c:	defff704 	addi	sp,sp,-36
  80c250:	dfc00815 	stw	ra,32(sp)
  80c254:	df000715 	stw	fp,28(sp)
  80c258:	df000704 	addi	fp,sp,28
  80c25c:	e13ffb15 	stw	r4,-20(fp)
  80c260:	e17ffc15 	stw	r5,-16(fp)
  80c264:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c268:	e0bffb17 	ldw	r2,-20(fp)
  80c26c:	1004803a 	cmplt	r2,r2,zero
  80c270:	1000081e 	bne	r2,zero,80c294 <read+0x48>
  80c274:	e0bffb17 	ldw	r2,-20(fp)
  80c278:	10800324 	muli	r2,r2,12
  80c27c:	1007883a 	mov	r3,r2
  80c280:	008020b4 	movhi	r2,130
  80c284:	10b45204 	addi	r2,r2,-11960
  80c288:	1887883a 	add	r3,r3,r2
  80c28c:	e0ffff15 	stw	r3,-4(fp)
  80c290:	00000106 	br	80c298 <read+0x4c>
  80c294:	e03fff15 	stw	zero,-4(fp)
  80c298:	e0bfff17 	ldw	r2,-4(fp)
  80c29c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80c2a0:	e0bffa17 	ldw	r2,-24(fp)
  80c2a4:	1005003a 	cmpeq	r2,r2,zero
  80c2a8:	1000241e 	bne	r2,zero,80c33c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80c2ac:	e0bffa17 	ldw	r2,-24(fp)
  80c2b0:	10800217 	ldw	r2,8(r2)
  80c2b4:	108000cc 	andi	r2,r2,3
  80c2b8:	10800060 	cmpeqi	r2,r2,1
  80c2bc:	10001a1e 	bne	r2,zero,80c328 <read+0xdc>
  80c2c0:	e0bffa17 	ldw	r2,-24(fp)
  80c2c4:	10800017 	ldw	r2,0(r2)
  80c2c8:	10800517 	ldw	r2,20(r2)
  80c2cc:	1005003a 	cmpeq	r2,r2,zero
  80c2d0:	1000151e 	bne	r2,zero,80c328 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80c2d4:	e0bffa17 	ldw	r2,-24(fp)
  80c2d8:	10800017 	ldw	r2,0(r2)
  80c2dc:	10800517 	ldw	r2,20(r2)
  80c2e0:	e17ffc17 	ldw	r5,-16(fp)
  80c2e4:	e1bffd17 	ldw	r6,-12(fp)
  80c2e8:	e13ffa17 	ldw	r4,-24(fp)
  80c2ec:	103ee83a 	callr	r2
  80c2f0:	e0bff915 	stw	r2,-28(fp)
  80c2f4:	e0bff917 	ldw	r2,-28(fp)
  80c2f8:	1004403a 	cmpge	r2,r2,zero
  80c2fc:	1000071e 	bne	r2,zero,80c31c <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80c300:	080c36c0 	call	80c36c <alt_get_errno>
  80c304:	e0fff917 	ldw	r3,-28(fp)
  80c308:	00c7c83a 	sub	r3,zero,r3
  80c30c:	10c00015 	stw	r3,0(r2)
          return -1;
  80c310:	00bfffc4 	movi	r2,-1
  80c314:	e0bffe15 	stw	r2,-8(fp)
  80c318:	00000e06 	br	80c354 <read+0x108>
        }
        return rval;
  80c31c:	e0bff917 	ldw	r2,-28(fp)
  80c320:	e0bffe15 	stw	r2,-8(fp)
  80c324:	00000b06 	br	80c354 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80c328:	080c36c0 	call	80c36c <alt_get_errno>
  80c32c:	1007883a 	mov	r3,r2
  80c330:	00800344 	movi	r2,13
  80c334:	18800015 	stw	r2,0(r3)
  80c338:	00000406 	br	80c34c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80c33c:	080c36c0 	call	80c36c <alt_get_errno>
  80c340:	1007883a 	mov	r3,r2
  80c344:	00801444 	movi	r2,81
  80c348:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80c34c:	00bfffc4 	movi	r2,-1
  80c350:	e0bffe15 	stw	r2,-8(fp)
  80c354:	e0bffe17 	ldw	r2,-8(fp)
}
  80c358:	e037883a 	mov	sp,fp
  80c35c:	dfc00117 	ldw	ra,4(sp)
  80c360:	df000017 	ldw	fp,0(sp)
  80c364:	dec00204 	addi	sp,sp,8
  80c368:	f800283a 	ret

0080c36c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c36c:	defffd04 	addi	sp,sp,-12
  80c370:	dfc00215 	stw	ra,8(sp)
  80c374:	df000115 	stw	fp,4(sp)
  80c378:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c37c:	008020b4 	movhi	r2,130
  80c380:	10b8fa04 	addi	r2,r2,-7192
  80c384:	10800017 	ldw	r2,0(r2)
  80c388:	1005003a 	cmpeq	r2,r2,zero
  80c38c:	1000061e 	bne	r2,zero,80c3a8 <alt_get_errno+0x3c>
  80c390:	008020b4 	movhi	r2,130
  80c394:	10b8fa04 	addi	r2,r2,-7192
  80c398:	10800017 	ldw	r2,0(r2)
  80c39c:	103ee83a 	callr	r2
  80c3a0:	e0bfff15 	stw	r2,-4(fp)
  80c3a4:	00000306 	br	80c3b4 <alt_get_errno+0x48>
  80c3a8:	008020b4 	movhi	r2,130
  80c3ac:	10801304 	addi	r2,r2,76
  80c3b0:	e0bfff15 	stw	r2,-4(fp)
  80c3b4:	e0bfff17 	ldw	r2,-4(fp)
}
  80c3b8:	e037883a 	mov	sp,fp
  80c3bc:	dfc00117 	ldw	ra,4(sp)
  80c3c0:	df000017 	ldw	fp,0(sp)
  80c3c4:	dec00204 	addi	sp,sp,8
  80c3c8:	f800283a 	ret

0080c3cc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80c3cc:	defffe04 	addi	sp,sp,-8
  80c3d0:	df000115 	stw	fp,4(sp)
  80c3d4:	df000104 	addi	fp,sp,4
  80c3d8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80c3dc:	e0bfff17 	ldw	r2,-4(fp)
  80c3e0:	108000d0 	cmplti	r2,r2,3
  80c3e4:	10000d1e 	bne	r2,zero,80c41c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80c3e8:	e0bfff17 	ldw	r2,-4(fp)
  80c3ec:	00c020b4 	movhi	r3,130
  80c3f0:	18f45204 	addi	r3,r3,-11960
  80c3f4:	10800324 	muli	r2,r2,12
  80c3f8:	10c5883a 	add	r2,r2,r3
  80c3fc:	10800204 	addi	r2,r2,8
  80c400:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80c404:	e0bfff17 	ldw	r2,-4(fp)
  80c408:	00c020b4 	movhi	r3,130
  80c40c:	18f45204 	addi	r3,r3,-11960
  80c410:	10800324 	muli	r2,r2,12
  80c414:	10c5883a 	add	r2,r2,r3
  80c418:	10000015 	stw	zero,0(r2)
  }
}
  80c41c:	e037883a 	mov	sp,fp
  80c420:	df000017 	ldw	fp,0(sp)
  80c424:	dec00104 	addi	sp,sp,4
  80c428:	f800283a 	ret

0080c42c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80c42c:	defff804 	addi	sp,sp,-32
  80c430:	df000715 	stw	fp,28(sp)
  80c434:	df000704 	addi	fp,sp,28
  80c438:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c43c:	0005303a 	rdctl	r2,status
  80c440:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c444:	e0fffb17 	ldw	r3,-20(fp)
  80c448:	00bfff84 	movi	r2,-2
  80c44c:	1884703a 	and	r2,r3,r2
  80c450:	1001703a 	wrctl	status,r2
  
  return context;
  80c454:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80c458:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80c45c:	d0a00d17 	ldw	r2,-32716(gp)
  80c460:	10c000c4 	addi	r3,r2,3
  80c464:	00bfff04 	movi	r2,-4
  80c468:	1884703a 	and	r2,r3,r2
  80c46c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80c470:	d0e00d17 	ldw	r3,-32716(gp)
  80c474:	e0bffe17 	ldw	r2,-8(fp)
  80c478:	1887883a 	add	r3,r3,r2
  80c47c:	00804034 	movhi	r2,256
  80c480:	10800004 	addi	r2,r2,0
  80c484:	10c0072e 	bgeu	r2,r3,80c4a4 <sbrk+0x78>
  80c488:	e0bffd17 	ldw	r2,-12(fp)
  80c48c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c490:	e0bffa17 	ldw	r2,-24(fp)
  80c494:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80c498:	00bfffc4 	movi	r2,-1
  80c49c:	e0bfff15 	stw	r2,-4(fp)
  80c4a0:	00000c06 	br	80c4d4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80c4a4:	d0a00d17 	ldw	r2,-32716(gp)
  80c4a8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80c4ac:	d0e00d17 	ldw	r3,-32716(gp)
  80c4b0:	e0bffe17 	ldw	r2,-8(fp)
  80c4b4:	1885883a 	add	r2,r3,r2
  80c4b8:	d0a00d15 	stw	r2,-32716(gp)
  80c4bc:	e0bffd17 	ldw	r2,-12(fp)
  80c4c0:	e0bff915 	stw	r2,-28(fp)
  80c4c4:	e0bff917 	ldw	r2,-28(fp)
  80c4c8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80c4cc:	e0bffc17 	ldw	r2,-16(fp)
  80c4d0:	e0bfff15 	stw	r2,-4(fp)
  80c4d4:	e0bfff17 	ldw	r2,-4(fp)
} 
  80c4d8:	e037883a 	mov	sp,fp
  80c4dc:	df000017 	ldw	fp,0(sp)
  80c4e0:	dec00104 	addi	sp,sp,4
  80c4e4:	f800283a 	ret

0080c4e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80c4e8:	defff704 	addi	sp,sp,-36
  80c4ec:	dfc00815 	stw	ra,32(sp)
  80c4f0:	df000715 	stw	fp,28(sp)
  80c4f4:	df000704 	addi	fp,sp,28
  80c4f8:	e13ffb15 	stw	r4,-20(fp)
  80c4fc:	e17ffc15 	stw	r5,-16(fp)
  80c500:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c504:	e0bffb17 	ldw	r2,-20(fp)
  80c508:	1004803a 	cmplt	r2,r2,zero
  80c50c:	1000081e 	bne	r2,zero,80c530 <write+0x48>
  80c510:	e0bffb17 	ldw	r2,-20(fp)
  80c514:	10800324 	muli	r2,r2,12
  80c518:	1007883a 	mov	r3,r2
  80c51c:	008020b4 	movhi	r2,130
  80c520:	10b45204 	addi	r2,r2,-11960
  80c524:	1887883a 	add	r3,r3,r2
  80c528:	e0ffff15 	stw	r3,-4(fp)
  80c52c:	00000106 	br	80c534 <write+0x4c>
  80c530:	e03fff15 	stw	zero,-4(fp)
  80c534:	e0bfff17 	ldw	r2,-4(fp)
  80c538:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80c53c:	e0bffa17 	ldw	r2,-24(fp)
  80c540:	1005003a 	cmpeq	r2,r2,zero
  80c544:	1000241e 	bne	r2,zero,80c5d8 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80c548:	e0bffa17 	ldw	r2,-24(fp)
  80c54c:	10800217 	ldw	r2,8(r2)
  80c550:	108000cc 	andi	r2,r2,3
  80c554:	1005003a 	cmpeq	r2,r2,zero
  80c558:	10001a1e 	bne	r2,zero,80c5c4 <write+0xdc>
  80c55c:	e0bffa17 	ldw	r2,-24(fp)
  80c560:	10800017 	ldw	r2,0(r2)
  80c564:	10800617 	ldw	r2,24(r2)
  80c568:	1005003a 	cmpeq	r2,r2,zero
  80c56c:	1000151e 	bne	r2,zero,80c5c4 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80c570:	e0bffa17 	ldw	r2,-24(fp)
  80c574:	10800017 	ldw	r2,0(r2)
  80c578:	10800617 	ldw	r2,24(r2)
  80c57c:	e17ffc17 	ldw	r5,-16(fp)
  80c580:	e1bffd17 	ldw	r6,-12(fp)
  80c584:	e13ffa17 	ldw	r4,-24(fp)
  80c588:	103ee83a 	callr	r2
  80c58c:	e0bff915 	stw	r2,-28(fp)
  80c590:	e0bff917 	ldw	r2,-28(fp)
  80c594:	1004403a 	cmpge	r2,r2,zero
  80c598:	1000071e 	bne	r2,zero,80c5b8 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80c59c:	080c6080 	call	80c608 <alt_get_errno>
  80c5a0:	e0fff917 	ldw	r3,-28(fp)
  80c5a4:	00c7c83a 	sub	r3,zero,r3
  80c5a8:	10c00015 	stw	r3,0(r2)
        return -1;
  80c5ac:	00bfffc4 	movi	r2,-1
  80c5b0:	e0bffe15 	stw	r2,-8(fp)
  80c5b4:	00000e06 	br	80c5f0 <write+0x108>
      }
      return rval;
  80c5b8:	e0bff917 	ldw	r2,-28(fp)
  80c5bc:	e0bffe15 	stw	r2,-8(fp)
  80c5c0:	00000b06 	br	80c5f0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80c5c4:	080c6080 	call	80c608 <alt_get_errno>
  80c5c8:	1007883a 	mov	r3,r2
  80c5cc:	00800344 	movi	r2,13
  80c5d0:	18800015 	stw	r2,0(r3)
  80c5d4:	00000406 	br	80c5e8 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80c5d8:	080c6080 	call	80c608 <alt_get_errno>
  80c5dc:	1007883a 	mov	r3,r2
  80c5e0:	00801444 	movi	r2,81
  80c5e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80c5e8:	00bfffc4 	movi	r2,-1
  80c5ec:	e0bffe15 	stw	r2,-8(fp)
  80c5f0:	e0bffe17 	ldw	r2,-8(fp)
}
  80c5f4:	e037883a 	mov	sp,fp
  80c5f8:	dfc00117 	ldw	ra,4(sp)
  80c5fc:	df000017 	ldw	fp,0(sp)
  80c600:	dec00204 	addi	sp,sp,8
  80c604:	f800283a 	ret

0080c608 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c608:	defffd04 	addi	sp,sp,-12
  80c60c:	dfc00215 	stw	ra,8(sp)
  80c610:	df000115 	stw	fp,4(sp)
  80c614:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c618:	008020b4 	movhi	r2,130
  80c61c:	10b8fa04 	addi	r2,r2,-7192
  80c620:	10800017 	ldw	r2,0(r2)
  80c624:	1005003a 	cmpeq	r2,r2,zero
  80c628:	1000061e 	bne	r2,zero,80c644 <alt_get_errno+0x3c>
  80c62c:	008020b4 	movhi	r2,130
  80c630:	10b8fa04 	addi	r2,r2,-7192
  80c634:	10800017 	ldw	r2,0(r2)
  80c638:	103ee83a 	callr	r2
  80c63c:	e0bfff15 	stw	r2,-4(fp)
  80c640:	00000306 	br	80c650 <alt_get_errno+0x48>
  80c644:	008020b4 	movhi	r2,130
  80c648:	10801304 	addi	r2,r2,76
  80c64c:	e0bfff15 	stw	r2,-4(fp)
  80c650:	e0bfff17 	ldw	r2,-4(fp)
}
  80c654:	e037883a 	mov	sp,fp
  80c658:	dfc00117 	ldw	ra,4(sp)
  80c65c:	df000017 	ldw	fp,0(sp)
  80c660:	dec00204 	addi	sp,sp,8
  80c664:	f800283a 	ret

0080c668 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  80c668:	deffdf04 	addi	sp,sp,-132
  80c66c:	dfc02015 	stw	ra,128(sp)
  80c670:	df001f15 	stw	fp,124(sp)
  80c674:	df001f04 	addi	fp,sp,124
  80c678:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80c67c:	e17fe204 	addi	r5,fp,-120
  80c680:	01003fc4 	movi	r4,255
  80c684:	08144bc0 	call	8144bc <OSTaskQuery>
  80c688:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80c68c:	e0bffe83 	ldbu	r2,-6(fp)
  80c690:	10803fcc 	andi	r2,r2,255
  80c694:	1004c03a 	cmpne	r2,r2,zero
  80c698:	1000191e 	bne	r2,zero,80c700 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  80c69c:	e0bfee83 	ldbu	r2,-70(fp)
  80c6a0:	10803fcc 	andi	r2,r2,255
  80c6a4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  80c6a8:	d1272b17 	ldw	r4,-25428(gp)
  80c6ac:	e17ffd04 	addi	r5,fp,-12
  80c6b0:	0812a080 	call	812a08 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  80c6b4:	e0bffe43 	ldbu	r2,-7(fp)
  80c6b8:	10803fcc 	andi	r2,r2,255
  80c6bc:	1005003a 	cmpeq	r2,r2,zero
  80c6c0:	1000071e 	bne	r2,zero,80c6e0 <__env_lock+0x78>
  80c6c4:	d0e00e17 	ldw	r3,-32712(gp)
  80c6c8:	e0bfe117 	ldw	r2,-124(fp)
  80c6cc:	10c0041e 	bne	r2,r3,80c6e0 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  80c6d0:	d0a72a17 	ldw	r2,-25432(gp)
  80c6d4:	10800044 	addi	r2,r2,1
  80c6d8:	d0a72a15 	stw	r2,-25432(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  80c6dc:	00000806 	br	80c700 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  80c6e0:	d1272b17 	ldw	r4,-25428(gp)
  80c6e4:	e1bffe84 	addi	r6,fp,-6
  80c6e8:	000b883a 	mov	r5,zero
  80c6ec:	08124e80 	call	8124e8 <OSSemPend>
    locks  = 1;
  80c6f0:	00800044 	movi	r2,1
  80c6f4:	d0a72a15 	stw	r2,-25432(gp)
    lockid = id;
  80c6f8:	e0bfe117 	ldw	r2,-124(fp)
  80c6fc:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80c700:	e037883a 	mov	sp,fp
  80c704:	dfc00117 	ldw	ra,4(sp)
  80c708:	df000017 	ldw	fp,0(sp)
  80c70c:	dec00204 	addi	sp,sp,8
  80c710:	f800283a 	ret

0080c714 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  80c714:	defffd04 	addi	sp,sp,-12
  80c718:	dfc00215 	stw	ra,8(sp)
  80c71c:	df000115 	stw	fp,4(sp)
  80c720:	df000104 	addi	fp,sp,4
  80c724:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  80c728:	d0a72a17 	ldw	r2,-25432(gp)
  80c72c:	1005003a 	cmpeq	r2,r2,zero
  80c730:	10000a1e 	bne	r2,zero,80c75c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  80c734:	d0a72a17 	ldw	r2,-25432(gp)
  80c738:	10bfffc4 	addi	r2,r2,-1
  80c73c:	d0a72a15 	stw	r2,-25432(gp)
  80c740:	d0a72a17 	ldw	r2,-25432(gp)
  80c744:	1004c03a 	cmpne	r2,r2,zero
  80c748:	1000041e 	bne	r2,zero,80c75c <__env_unlock+0x48>
  {
    lockid = -1;
  80c74c:	00bfffc4 	movi	r2,-1
  80c750:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
  80c754:	d1272b17 	ldw	r4,-25428(gp)
  80c758:	08128e00 	call	8128e0 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80c75c:	e037883a 	mov	sp,fp
  80c760:	dfc00117 	ldw	ra,4(sp)
  80c764:	df000017 	ldw	fp,0(sp)
  80c768:	dec00204 	addi	sp,sp,8
  80c76c:	f800283a 	ret

0080c770 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  80c770:	deffdb04 	addi	sp,sp,-148
  80c774:	dfc02415 	stw	ra,144(sp)
  80c778:	df002315 	stw	fp,140(sp)
  80c77c:	df002304 	addi	fp,sp,140
  80c780:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80c784:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  80c788:	008020b4 	movhi	r2,130
  80c78c:	10801c44 	addi	r2,r2,113
  80c790:	10800003 	ldbu	r2,0(r2)
  80c794:	10803fcc 	andi	r2,r2,255
  80c798:	10800058 	cmpnei	r2,r2,1
  80c79c:	1000311e 	bne	r2,zero,80c864 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80c7a0:	e17fe204 	addi	r5,fp,-120
  80c7a4:	01003fc4 	movi	r4,255
  80c7a8:	08144bc0 	call	8144bc <OSTaskQuery>
  80c7ac:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80c7b0:	e0bffe83 	ldbu	r2,-6(fp)
  80c7b4:	10803fcc 	andi	r2,r2,255
  80c7b8:	1004c03a 	cmpne	r2,r2,zero
  80c7bc:	1000291e 	bne	r2,zero,80c864 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  80c7c0:	e0bfee83 	ldbu	r2,-70(fp)
  80c7c4:	10803fcc 	andi	r2,r2,255
  80c7c8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  80c7cc:	d1272d17 	ldw	r4,-25420(gp)
  80c7d0:	e17ffd04 	addi	r5,fp,-12
  80c7d4:	0812a080 	call	812a08 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c7d8:	0005303a 	rdctl	r2,status
  80c7dc:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c7e0:	e0ffdf17 	ldw	r3,-132(fp)
  80c7e4:	00bfff84 	movi	r2,-2
  80c7e8:	1884703a 	and	r2,r3,r2
  80c7ec:	1001703a 	wrctl	status,r2
  
  return context;
  80c7f0:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  80c7f4:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  80c7f8:	e0bffd0b 	ldhu	r2,-12(fp)
  80c7fc:	10bfffcc 	andi	r2,r2,65535
  80c800:	1004c03a 	cmpne	r2,r2,zero
  80c804:	10000b1e 	bne	r2,zero,80c834 <__malloc_lock+0xc4>
  80c808:	d0e00f17 	ldw	r3,-32708(gp)
  80c80c:	e0bfe117 	ldw	r2,-124(fp)
  80c810:	10c0081e 	bne	r2,r3,80c834 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  80c814:	d0a72c17 	ldw	r2,-25424(gp)
  80c818:	10800044 	addi	r2,r2,1
  80c81c:	d0a72c15 	stw	r2,-25424(gp)
  80c820:	e0bfe017 	ldw	r2,-128(fp)
  80c824:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c828:	e0bfde17 	ldw	r2,-136(fp)
  80c82c:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  80c830:	00000c06 	br	80c864 <__malloc_lock+0xf4>
  80c834:	e0bfe017 	ldw	r2,-128(fp)
  80c838:	e0bfdd15 	stw	r2,-140(fp)
  80c83c:	e0bfdd17 	ldw	r2,-140(fp)
  80c840:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  80c844:	d1272d17 	ldw	r4,-25420(gp)
  80c848:	e1bffe84 	addi	r6,fp,-6
  80c84c:	000b883a 	mov	r5,zero
  80c850:	08124e80 	call	8124e8 <OSSemPend>
    locks  = 1;
  80c854:	00800044 	movi	r2,1
  80c858:	d0a72c15 	stw	r2,-25424(gp)
    lockid = id;
  80c85c:	e0bfe117 	ldw	r2,-124(fp)
  80c860:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80c864:	e037883a 	mov	sp,fp
  80c868:	dfc00117 	ldw	ra,4(sp)
  80c86c:	df000017 	ldw	fp,0(sp)
  80c870:	dec00204 	addi	sp,sp,8
  80c874:	f800283a 	ret

0080c878 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80c878:	defff804 	addi	sp,sp,-32
  80c87c:	dfc00715 	stw	ra,28(sp)
  80c880:	df000615 	stw	fp,24(sp)
  80c884:	df000604 	addi	fp,sp,24
  80c888:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80c88c:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  80c890:	008020b4 	movhi	r2,130
  80c894:	10801c44 	addi	r2,r2,113
  80c898:	10800003 	ldbu	r2,0(r2)
  80c89c:	10803fcc 	andi	r2,r2,255
  80c8a0:	10800058 	cmpnei	r2,r2,1
  80c8a4:	1000231e 	bne	r2,zero,80c934 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c8a8:	0005303a 	rdctl	r2,status
  80c8ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c8b0:	e0fffd17 	ldw	r3,-12(fp)
  80c8b4:	00bfff84 	movi	r2,-2
  80c8b8:	1884703a 	and	r2,r3,r2
  80c8bc:	1001703a 	wrctl	status,r2
  
  return context;
  80c8c0:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  80c8c4:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  80c8c8:	d0a72c17 	ldw	r2,-25424(gp)
  80c8cc:	1004c03a 	cmpne	r2,r2,zero
  80c8d0:	1000051e 	bne	r2,zero,80c8e8 <__malloc_unlock+0x70>
  80c8d4:	e0bffe17 	ldw	r2,-8(fp)
  80c8d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c8dc:	e0bffc17 	ldw	r2,-16(fp)
  80c8e0:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  80c8e4:	00001306 	br	80c934 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  80c8e8:	d0a72c17 	ldw	r2,-25424(gp)
  80c8ec:	10bfffc4 	addi	r2,r2,-1
  80c8f0:	d0a72c15 	stw	r2,-25424(gp)
  80c8f4:	d0a72c17 	ldw	r2,-25424(gp)
  80c8f8:	1004c03a 	cmpne	r2,r2,zero
  80c8fc:	1000091e 	bne	r2,zero,80c924 <__malloc_unlock+0xac>
  {
    lockid = -1;
  80c900:	00bfffc4 	movi	r2,-1
  80c904:	d0a00f15 	stw	r2,-32708(gp)
  80c908:	e0bffe17 	ldw	r2,-8(fp)
  80c90c:	e0bffb15 	stw	r2,-20(fp)
  80c910:	e0bffb17 	ldw	r2,-20(fp)
  80c914:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  80c918:	d1272d17 	ldw	r4,-25420(gp)
  80c91c:	08128e00 	call	8128e0 <OSSemPost>
  80c920:	00000406 	br	80c934 <__malloc_unlock+0xbc>
  80c924:	e0bffe17 	ldw	r2,-8(fp)
  80c928:	e0bffa15 	stw	r2,-24(fp)
  80c92c:	e0bffa17 	ldw	r2,-24(fp)
  80c930:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80c934:	e037883a 	mov	sp,fp
  80c938:	dfc00117 	ldw	ra,4(sp)
  80c93c:	df000017 	ldw	fp,0(sp)
  80c940:	dec00204 	addi	sp,sp,8
  80c944:	f800283a 	ret

0080c948 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80c948:	defff604 	addi	sp,sp,-40
  80c94c:	dfc00915 	stw	ra,36(sp)
  80c950:	df000815 	stw	fp,32(sp)
  80c954:	df000804 	addi	fp,sp,32
  80c958:	e13ffc15 	stw	r4,-16(fp)
  80c95c:	e17ffd15 	stw	r5,-12(fp)
  80c960:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80c964:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80c968:	e0bffe17 	ldw	r2,-8(fp)
  80c96c:	1004c03a 	cmpne	r2,r2,zero
  80c970:	1000021e 	bne	r2,zero,80c97c <OSEventNameGet+0x34>
        return (0);
  80c974:	e03fff15 	stw	zero,-4(fp)
  80c978:	00003906 	br	80ca60 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80c97c:	e0bffc17 	ldw	r2,-16(fp)
  80c980:	1004c03a 	cmpne	r2,r2,zero
  80c984:	1000051e 	bne	r2,zero,80c99c <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80c988:	e0fffe17 	ldw	r3,-8(fp)
  80c98c:	00800104 	movi	r2,4
  80c990:	18800005 	stb	r2,0(r3)
        return (0);
  80c994:	e03fff15 	stw	zero,-4(fp)
  80c998:	00003106 	br	80ca60 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80c99c:	e0bffd17 	ldw	r2,-12(fp)
  80c9a0:	1004c03a 	cmpne	r2,r2,zero
  80c9a4:	1000051e 	bne	r2,zero,80c9bc <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80c9a8:	e0fffe17 	ldw	r3,-8(fp)
  80c9ac:	00800304 	movi	r2,12
  80c9b0:	18800005 	stb	r2,0(r3)
        return (0);
  80c9b4:	e03fff15 	stw	zero,-4(fp)
  80c9b8:	00002906 	br	80ca60 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80c9bc:	d0a73c03 	ldbu	r2,-25360(gp)
  80c9c0:	10803fcc 	andi	r2,r2,255
  80c9c4:	1005003a 	cmpeq	r2,r2,zero
  80c9c8:	1000051e 	bne	r2,zero,80c9e0 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  80c9cc:	e0fffe17 	ldw	r3,-8(fp)
  80c9d0:	00800444 	movi	r2,17
  80c9d4:	18800005 	stb	r2,0(r3)
        return (0);
  80c9d8:	e03fff15 	stw	zero,-4(fp)
  80c9dc:	00002006 	br	80ca60 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  80c9e0:	e0bffc17 	ldw	r2,-16(fp)
  80c9e4:	10800003 	ldbu	r2,0(r2)
  80c9e8:	10803fcc 	andi	r2,r2,255
  80c9ec:	10bfffc4 	addi	r2,r2,-1
  80c9f0:	10800128 	cmpgeui	r2,r2,4
  80c9f4:	1000161e 	bne	r2,zero,80ca50 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c9f8:	0005303a 	rdctl	r2,status
  80c9fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ca00:	e0fff917 	ldw	r3,-28(fp)
  80ca04:	00bfff84 	movi	r2,-2
  80ca08:	1884703a 	and	r2,r3,r2
  80ca0c:	1001703a 	wrctl	status,r2
  
  return context;
  80ca10:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  80ca14:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  80ca18:	e0bffc17 	ldw	r2,-16(fp)
  80ca1c:	11400384 	addi	r5,r2,14
  80ca20:	e13ffd17 	ldw	r4,-12(fp)
  80ca24:	080e4cc0 	call	80e4cc <OS_StrCopy>
  80ca28:	e0bffb05 	stb	r2,-20(fp)
  80ca2c:	e0bffa17 	ldw	r2,-24(fp)
  80ca30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ca34:	e0bff817 	ldw	r2,-32(fp)
  80ca38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80ca3c:	e0bffe17 	ldw	r2,-8(fp)
  80ca40:	10000005 	stb	zero,0(r2)
    return (len);
  80ca44:	e0bffb03 	ldbu	r2,-20(fp)
  80ca48:	e0bfff15 	stw	r2,-4(fp)
  80ca4c:	00000406 	br	80ca60 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80ca50:	e0fffe17 	ldw	r3,-8(fp)
  80ca54:	00800044 	movi	r2,1
  80ca58:	18800005 	stb	r2,0(r3)
             return (0);
  80ca5c:	e03fff15 	stw	zero,-4(fp)
  80ca60:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  80ca64:	e037883a 	mov	sp,fp
  80ca68:	dfc00117 	ldw	ra,4(sp)
  80ca6c:	df000017 	ldw	fp,0(sp)
  80ca70:	dec00204 	addi	sp,sp,8
  80ca74:	f800283a 	ret

0080ca78 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80ca78:	defff604 	addi	sp,sp,-40
  80ca7c:	dfc00915 	stw	ra,36(sp)
  80ca80:	df000815 	stw	fp,32(sp)
  80ca84:	df000804 	addi	fp,sp,32
  80ca88:	e13ffd15 	stw	r4,-12(fp)
  80ca8c:	e17ffe15 	stw	r5,-8(fp)
  80ca90:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ca94:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80ca98:	e0bfff17 	ldw	r2,-4(fp)
  80ca9c:	1005003a 	cmpeq	r2,r2,zero
  80caa0:	1000411e 	bne	r2,zero,80cba8 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80caa4:	e0bffd17 	ldw	r2,-12(fp)
  80caa8:	1004c03a 	cmpne	r2,r2,zero
  80caac:	1000041e 	bne	r2,zero,80cac0 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  80cab0:	e0ffff17 	ldw	r3,-4(fp)
  80cab4:	00800104 	movi	r2,4
  80cab8:	18800005 	stb	r2,0(r3)
        return;
  80cabc:	00003a06 	br	80cba8 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80cac0:	e0bffe17 	ldw	r2,-8(fp)
  80cac4:	1004c03a 	cmpne	r2,r2,zero
  80cac8:	1000041e 	bne	r2,zero,80cadc <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80cacc:	e0ffff17 	ldw	r3,-4(fp)
  80cad0:	00800304 	movi	r2,12
  80cad4:	18800005 	stb	r2,0(r3)
        return;
  80cad8:	00003306 	br	80cba8 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80cadc:	d0a73c03 	ldbu	r2,-25360(gp)
  80cae0:	10803fcc 	andi	r2,r2,255
  80cae4:	1005003a 	cmpeq	r2,r2,zero
  80cae8:	1000041e 	bne	r2,zero,80cafc <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  80caec:	e0ffff17 	ldw	r3,-4(fp)
  80caf0:	00800484 	movi	r2,18
  80caf4:	18800005 	stb	r2,0(r3)
        return;
  80caf8:	00002b06 	br	80cba8 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  80cafc:	e0bffd17 	ldw	r2,-12(fp)
  80cb00:	10800003 	ldbu	r2,0(r2)
  80cb04:	10803fcc 	andi	r2,r2,255
  80cb08:	10bfffc4 	addi	r2,r2,-1
  80cb0c:	10800128 	cmpgeui	r2,r2,4
  80cb10:	10000f1e 	bne	r2,zero,80cb50 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cb14:	0005303a 	rdctl	r2,status
  80cb18:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cb1c:	e0fffa17 	ldw	r3,-24(fp)
  80cb20:	00bfff84 	movi	r2,-2
  80cb24:	1884703a 	and	r2,r3,r2
  80cb28:	1001703a 	wrctl	status,r2
  
  return context;
  80cb2c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  80cb30:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  80cb34:	e13ffe17 	ldw	r4,-8(fp)
  80cb38:	080e54c0 	call	80e54c <OS_StrLen>
  80cb3c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  80cb40:	e0bffc03 	ldbu	r2,-16(fp)
  80cb44:	10800828 	cmpgeui	r2,r2,32
  80cb48:	1000051e 	bne	r2,zero,80cb60 <OSEventNameSet+0xe8>
  80cb4c:	00000c06 	br	80cb80 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80cb50:	e0ffff17 	ldw	r3,-4(fp)
  80cb54:	00800044 	movi	r2,1
  80cb58:	18800005 	stb	r2,0(r3)
             return;
  80cb5c:	00001206 	br	80cba8 <OSEventNameSet+0x130>
  80cb60:	e0bffb17 	ldw	r2,-20(fp)
  80cb64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cb68:	e0bff917 	ldw	r2,-28(fp)
  80cb6c:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  80cb70:	e0ffff17 	ldw	r3,-4(fp)
  80cb74:	008002c4 	movi	r2,11
  80cb78:	18800005 	stb	r2,0(r3)
        return;
  80cb7c:	00000a06 	br	80cba8 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  80cb80:	e0bffd17 	ldw	r2,-12(fp)
  80cb84:	11000384 	addi	r4,r2,14
  80cb88:	e17ffe17 	ldw	r5,-8(fp)
  80cb8c:	080e4cc0 	call	80e4cc <OS_StrCopy>
  80cb90:	e0bffb17 	ldw	r2,-20(fp)
  80cb94:	e0bff815 	stw	r2,-32(fp)
  80cb98:	e0bff817 	ldw	r2,-32(fp)
  80cb9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80cba0:	e0bfff17 	ldw	r2,-4(fp)
  80cba4:	10000005 	stb	zero,0(r2)
}
  80cba8:	e037883a 	mov	sp,fp
  80cbac:	dfc00117 	ldw	ra,4(sp)
  80cbb0:	df000017 	ldw	fp,0(sp)
  80cbb4:	dec00204 	addi	sp,sp,8
  80cbb8:	f800283a 	ret

0080cbbc <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  80cbbc:	deffe704 	addi	sp,sp,-100
  80cbc0:	dfc01815 	stw	ra,96(sp)
  80cbc4:	df001715 	stw	fp,92(sp)
  80cbc8:	df001704 	addi	fp,sp,92
  80cbcc:	e13ff615 	stw	r4,-40(fp)
  80cbd0:	e17ff715 	stw	r5,-36(fp)
  80cbd4:	e1bff815 	stw	r6,-32(fp)
  80cbd8:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  80cbdc:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  80cbe0:	e0800217 	ldw	r2,8(fp)
  80cbe4:	1004c03a 	cmpne	r2,r2,zero
  80cbe8:	1000021e 	bne	r2,zero,80cbf4 <OSEventPendMulti+0x38>
        return (0);
  80cbec:	e03fff15 	stw	zero,-4(fp)
  80cbf0:	00019906 	br	80d258 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  80cbf4:	e0bff617 	ldw	r2,-40(fp)
  80cbf8:	1004c03a 	cmpne	r2,r2,zero
  80cbfc:	1000051e 	bne	r2,zero,80cc14 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  80cc00:	e0c00217 	ldw	r3,8(fp)
  80cc04:	00800104 	movi	r2,4
  80cc08:	18800005 	stb	r2,0(r3)
        return (0);
  80cc0c:	e03fff15 	stw	zero,-4(fp)
  80cc10:	00019106 	br	80d258 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  80cc14:	e0bff717 	ldw	r2,-36(fp)
  80cc18:	1004c03a 	cmpne	r2,r2,zero
  80cc1c:	1000051e 	bne	r2,zero,80cc34 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  80cc20:	e0c00217 	ldw	r3,8(fp)
  80cc24:	00800104 	movi	r2,4
  80cc28:	18800005 	stb	r2,0(r3)
        return (0);
  80cc2c:	e03fff15 	stw	zero,-4(fp)
  80cc30:	00018906 	br	80d258 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  80cc34:	e0bff817 	ldw	r2,-32(fp)
  80cc38:	1004c03a 	cmpne	r2,r2,zero
  80cc3c:	1000051e 	bne	r2,zero,80cc54 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  80cc40:	e0c00217 	ldw	r3,8(fp)
  80cc44:	00800104 	movi	r2,4
  80cc48:	18800005 	stb	r2,0(r3)
        return (0);
  80cc4c:	e03fff15 	stw	zero,-4(fp)
  80cc50:	00018106 	br	80d258 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  80cc54:	e0bff717 	ldw	r2,-36(fp)
  80cc58:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  80cc5c:	e0bff617 	ldw	r2,-40(fp)
  80cc60:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  80cc64:	e0bff517 	ldw	r2,-44(fp)
  80cc68:	10800017 	ldw	r2,0(r2)
  80cc6c:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  80cc70:	00001806 	br	80ccd4 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  80cc74:	e0bff417 	ldw	r2,-48(fp)
  80cc78:	10800003 	ldbu	r2,0(r2)
  80cc7c:	10803fcc 	andi	r2,r2,255
  80cc80:	e0bffe15 	stw	r2,-8(fp)
  80cc84:	e0fffe17 	ldw	r3,-8(fp)
  80cc88:	188000a0 	cmpeqi	r2,r3,2
  80cc8c:	10000b1e 	bne	r2,zero,80ccbc <OSEventPendMulti+0x100>
  80cc90:	e0fffe17 	ldw	r3,-8(fp)
  80cc94:	188000e0 	cmpeqi	r2,r3,3
  80cc98:	1000081e 	bne	r2,zero,80ccbc <OSEventPendMulti+0x100>
  80cc9c:	e0fffe17 	ldw	r3,-8(fp)
  80cca0:	18800060 	cmpeqi	r2,r3,1
  80cca4:	1000051e 	bne	r2,zero,80ccbc <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  80cca8:	e0c00217 	ldw	r3,8(fp)
  80ccac:	00800044 	movi	r2,1
  80ccb0:	18800005 	stb	r2,0(r3)
                 return (0);
  80ccb4:	e03fff15 	stw	zero,-4(fp)
  80ccb8:	00016706 	br	80d258 <OSEventPendMulti+0x69c>
        }
        pevents++;
  80ccbc:	e0bff517 	ldw	r2,-44(fp)
  80ccc0:	10800104 	addi	r2,r2,4
  80ccc4:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80ccc8:	e0bff517 	ldw	r2,-44(fp)
  80cccc:	10800017 	ldw	r2,0(r2)
  80ccd0:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  80ccd4:	e0bff417 	ldw	r2,-48(fp)
  80ccd8:	1004c03a 	cmpne	r2,r2,zero
  80ccdc:	103fe51e 	bne	r2,zero,80cc74 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  80cce0:	d0a73c03 	ldbu	r2,-25360(gp)
  80cce4:	10803fcc 	andi	r2,r2,255
  80cce8:	1005003a 	cmpeq	r2,r2,zero
  80ccec:	1000051e 	bne	r2,zero,80cd04 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  80ccf0:	e0c00217 	ldw	r3,8(fp)
  80ccf4:	00800084 	movi	r2,2
  80ccf8:	18800005 	stb	r2,0(r3)
        return (0);
  80ccfc:	e03fff15 	stw	zero,-4(fp)
  80cd00:	00015506 	br	80d258 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  80cd04:	d0a72e03 	ldbu	r2,-25416(gp)
  80cd08:	10803fcc 	andi	r2,r2,255
  80cd0c:	1005003a 	cmpeq	r2,r2,zero
  80cd10:	1000051e 	bne	r2,zero,80cd28 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  80cd14:	e0c00217 	ldw	r3,8(fp)
  80cd18:	00800344 	movi	r2,13
  80cd1c:	18800005 	stb	r2,0(r3)
        return (0);
  80cd20:	e03fff15 	stw	zero,-4(fp)
  80cd24:	00014c06 	br	80d258 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cd28:	0005303a 	rdctl	r2,status
  80cd2c:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cd30:	e0ffef17 	ldw	r3,-68(fp)
  80cd34:	00bfff84 	movi	r2,-2
  80cd38:	1884703a 	and	r2,r3,r2
  80cd3c:	1001703a 	wrctl	status,r2
  
  return context;
  80cd40:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80cd44:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  80cd48:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  80cd4c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  80cd50:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  80cd54:	e0bff617 	ldw	r2,-40(fp)
  80cd58:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  80cd5c:	e0bff517 	ldw	r2,-44(fp)
  80cd60:	10800017 	ldw	r2,0(r2)
  80cd64:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80cd68:	00008f06 	br	80cfa8 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  80cd6c:	e0bff417 	ldw	r2,-48(fp)
  80cd70:	10800003 	ldbu	r2,0(r2)
  80cd74:	10803fcc 	andi	r2,r2,255
  80cd78:	e0bffd15 	stw	r2,-12(fp)
  80cd7c:	e0fffd17 	ldw	r3,-12(fp)
  80cd80:	188000a0 	cmpeqi	r2,r3,2
  80cd84:	1000441e 	bne	r2,zero,80ce98 <OSEventPendMulti+0x2dc>
  80cd88:	e0fffd17 	ldw	r3,-12(fp)
  80cd8c:	188000e0 	cmpeqi	r2,r3,3
  80cd90:	1000041e 	bne	r2,zero,80cda4 <OSEventPendMulti+0x1e8>
  80cd94:	e0fffd17 	ldw	r3,-12(fp)
  80cd98:	18800060 	cmpeqi	r2,r3,1
  80cd9c:	1000211e 	bne	r2,zero,80ce24 <OSEventPendMulti+0x268>
  80cda0:	00006f06 	br	80cf60 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  80cda4:	e0bff417 	ldw	r2,-48(fp)
  80cda8:	1080020b 	ldhu	r2,8(r2)
  80cdac:	10bfffcc 	andi	r2,r2,65535
  80cdb0:	1005003a 	cmpeq	r2,r2,zero
  80cdb4:	1000171e 	bne	r2,zero,80ce14 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  80cdb8:	e0bff417 	ldw	r2,-48(fp)
  80cdbc:	1080020b 	ldhu	r2,8(r2)
  80cdc0:	10bfffc4 	addi	r2,r2,-1
  80cdc4:	1007883a 	mov	r3,r2
  80cdc8:	e0bff417 	ldw	r2,-48(fp)
  80cdcc:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  80cdd0:	e0fff717 	ldw	r3,-36(fp)
  80cdd4:	e0bff417 	ldw	r2,-48(fp)
  80cdd8:	18800015 	stw	r2,0(r3)
  80cddc:	e0bff717 	ldw	r2,-36(fp)
  80cde0:	10800104 	addi	r2,r2,4
  80cde4:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  80cde8:	00800044 	movi	r2,1
  80cdec:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  80cdf0:	e0bff817 	ldw	r2,-32(fp)
  80cdf4:	10000015 	stw	zero,0(r2)
  80cdf8:	e0bff817 	ldw	r2,-32(fp)
  80cdfc:	10800104 	addi	r2,r2,4
  80ce00:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  80ce04:	e0bff18b 	ldhu	r2,-58(fp)
  80ce08:	10800044 	addi	r2,r2,1
  80ce0c:	e0bff18d 	sth	r2,-58(fp)
  80ce10:	00005f06 	br	80cf90 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  80ce14:	e0bff103 	ldbu	r2,-60(fp)
  80ce18:	10800054 	ori	r2,r2,1
  80ce1c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80ce20:	00005b06 	br	80cf90 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  80ce24:	e0bff417 	ldw	r2,-48(fp)
  80ce28:	10800117 	ldw	r2,4(r2)
  80ce2c:	1005003a 	cmpeq	r2,r2,zero
  80ce30:	1000151e 	bne	r2,zero,80ce88 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  80ce34:	e0bff417 	ldw	r2,-48(fp)
  80ce38:	10c00117 	ldw	r3,4(r2)
  80ce3c:	e0bff817 	ldw	r2,-32(fp)
  80ce40:	10c00015 	stw	r3,0(r2)
  80ce44:	e0bff817 	ldw	r2,-32(fp)
  80ce48:	10800104 	addi	r2,r2,4
  80ce4c:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  80ce50:	e0bff417 	ldw	r2,-48(fp)
  80ce54:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  80ce58:	e0fff717 	ldw	r3,-36(fp)
  80ce5c:	e0bff417 	ldw	r2,-48(fp)
  80ce60:	18800015 	stw	r2,0(r3)
  80ce64:	e0bff717 	ldw	r2,-36(fp)
  80ce68:	10800104 	addi	r2,r2,4
  80ce6c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  80ce70:	00800044 	movi	r2,1
  80ce74:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80ce78:	e0bff18b 	ldhu	r2,-58(fp)
  80ce7c:	10800044 	addi	r2,r2,1
  80ce80:	e0bff18d 	sth	r2,-58(fp)
  80ce84:	00004206 	br	80cf90 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  80ce88:	e0bff103 	ldbu	r2,-60(fp)
  80ce8c:	10800094 	ori	r2,r2,2
  80ce90:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80ce94:	00003e06 	br	80cf90 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  80ce98:	e0bff417 	ldw	r2,-48(fp)
  80ce9c:	10800117 	ldw	r2,4(r2)
  80cea0:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  80cea4:	e0bff317 	ldw	r2,-52(fp)
  80cea8:	1080058b 	ldhu	r2,22(r2)
  80ceac:	10bfffcc 	andi	r2,r2,65535
  80ceb0:	1005003a 	cmpeq	r2,r2,zero
  80ceb4:	1000261e 	bne	r2,zero,80cf50 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  80ceb8:	e0bff317 	ldw	r2,-52(fp)
  80cebc:	11000417 	ldw	r4,16(r2)
  80cec0:	20c00017 	ldw	r3,0(r4)
  80cec4:	e0bff817 	ldw	r2,-32(fp)
  80cec8:	10c00015 	stw	r3,0(r2)
  80cecc:	e0bff817 	ldw	r2,-32(fp)
  80ced0:	10800104 	addi	r2,r2,4
  80ced4:	e0bff815 	stw	r2,-32(fp)
  80ced8:	20c00104 	addi	r3,r4,4
  80cedc:	e0bff317 	ldw	r2,-52(fp)
  80cee0:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  80cee4:	e0bff317 	ldw	r2,-52(fp)
  80cee8:	10c00417 	ldw	r3,16(r2)
  80ceec:	e0bff317 	ldw	r2,-52(fp)
  80cef0:	10800217 	ldw	r2,8(r2)
  80cef4:	1880041e 	bne	r3,r2,80cf08 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  80cef8:	e0bff317 	ldw	r2,-52(fp)
  80cefc:	10c00117 	ldw	r3,4(r2)
  80cf00:	e0bff317 	ldw	r2,-52(fp)
  80cf04:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  80cf08:	e0bff317 	ldw	r2,-52(fp)
  80cf0c:	1080058b 	ldhu	r2,22(r2)
  80cf10:	10bfffc4 	addi	r2,r2,-1
  80cf14:	1007883a 	mov	r3,r2
  80cf18:	e0bff317 	ldw	r2,-52(fp)
  80cf1c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  80cf20:	e0fff717 	ldw	r3,-36(fp)
  80cf24:	e0bff417 	ldw	r2,-48(fp)
  80cf28:	18800015 	stw	r2,0(r3)
  80cf2c:	e0bff717 	ldw	r2,-36(fp)
  80cf30:	10800104 	addi	r2,r2,4
  80cf34:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  80cf38:	00800044 	movi	r2,1
  80cf3c:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80cf40:	e0bff18b 	ldhu	r2,-58(fp)
  80cf44:	10800044 	addi	r2,r2,1
  80cf48:	e0bff18d 	sth	r2,-58(fp)
  80cf4c:	00001006 	br	80cf90 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  80cf50:	e0bff103 	ldbu	r2,-60(fp)
  80cf54:	10800114 	ori	r2,r2,4
  80cf58:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80cf5c:	00000c06 	br	80cf90 <OSEventPendMulti+0x3d4>
  80cf60:	e0bff017 	ldw	r2,-64(fp)
  80cf64:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cf68:	e0bfee17 	ldw	r2,-72(fp)
  80cf6c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  80cf70:	e0bff717 	ldw	r2,-36(fp)
  80cf74:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  80cf78:	e0c00217 	ldw	r3,8(fp)
  80cf7c:	00800044 	movi	r2,1
  80cf80:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  80cf84:	e0bff18b 	ldhu	r2,-58(fp)
  80cf88:	e0bfff15 	stw	r2,-4(fp)
  80cf8c:	0000b206 	br	80d258 <OSEventPendMulti+0x69c>
        }
        pevents++;
  80cf90:	e0bff517 	ldw	r2,-44(fp)
  80cf94:	10800104 	addi	r2,r2,4
  80cf98:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80cf9c:	e0bff517 	ldw	r2,-44(fp)
  80cfa0:	10800017 	ldw	r2,0(r2)
  80cfa4:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80cfa8:	e0bff417 	ldw	r2,-48(fp)
  80cfac:	1004c03a 	cmpne	r2,r2,zero
  80cfb0:	103f6e1e 	bne	r2,zero,80cd6c <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  80cfb4:	e0bff203 	ldbu	r2,-56(fp)
  80cfb8:	10800058 	cmpnei	r2,r2,1
  80cfbc:	10000b1e 	bne	r2,zero,80cfec <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  80cfc0:	e0bff717 	ldw	r2,-36(fp)
  80cfc4:	10000015 	stw	zero,0(r2)
  80cfc8:	e0bff017 	ldw	r2,-64(fp)
  80cfcc:	e0bfed15 	stw	r2,-76(fp)
  80cfd0:	e0bfed17 	ldw	r2,-76(fp)
  80cfd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  80cfd8:	e0800217 	ldw	r2,8(fp)
  80cfdc:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  80cfe0:	e0fff18b 	ldhu	r3,-58(fp)
  80cfe4:	e0ffff15 	stw	r3,-4(fp)
  80cfe8:	00009b06 	br	80d258 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  80cfec:	d1273d17 	ldw	r4,-25356(gp)
  80cff0:	d0a73d17 	ldw	r2,-25356(gp)
  80cff4:	10c00c03 	ldbu	r3,48(r2)
  80cff8:	e0bff103 	ldbu	r2,-60(fp)
  80cffc:	1884b03a 	or	r2,r3,r2
  80d000:	1007883a 	mov	r3,r2
  80d004:	00bfe004 	movi	r2,-128
  80d008:	1884b03a 	or	r2,r3,r2
  80d00c:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80d010:	d0a73d17 	ldw	r2,-25356(gp)
  80d014:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  80d018:	d0e73d17 	ldw	r3,-25356(gp)
  80d01c:	e0bff90b 	ldhu	r2,-28(fp)
  80d020:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  80d024:	e13ff617 	ldw	r4,-40(fp)
  80d028:	080dbec0 	call	80dbec <OS_EventTaskWaitMulti>
  80d02c:	e0bff017 	ldw	r2,-64(fp)
  80d030:	e0bfec15 	stw	r2,-80(fp)
  80d034:	e0bfec17 	ldw	r2,-80(fp)
  80d038:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  80d03c:	080e3880 	call	80e388 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d040:	0005303a 	rdctl	r2,status
  80d044:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d048:	e0ffeb17 	ldw	r3,-84(fp)
  80d04c:	00bfff84 	movi	r2,-2
  80d050:	1884703a 	and	r2,r3,r2
  80d054:	1001703a 	wrctl	status,r2
  
  return context;
  80d058:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  80d05c:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  80d060:	d0a73d17 	ldw	r2,-25356(gp)
  80d064:	10800c43 	ldbu	r2,49(r2)
  80d068:	10803fcc 	andi	r2,r2,255
  80d06c:	e0bffc15 	stw	r2,-16(fp)
  80d070:	e0fffc17 	ldw	r3,-16(fp)
  80d074:	1805003a 	cmpeq	r2,r3,zero
  80d078:	1000041e 	bne	r2,zero,80d08c <OSEventPendMulti+0x4d0>
  80d07c:	e0fffc17 	ldw	r3,-16(fp)
  80d080:	188000a0 	cmpeqi	r2,r3,2
  80d084:	1000011e 	bne	r2,zero,80d08c <OSEventPendMulti+0x4d0>
  80d088:	00001906 	br	80d0f0 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  80d08c:	d0a73d17 	ldw	r2,-25356(gp)
  80d090:	10800717 	ldw	r2,28(r2)
  80d094:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  80d098:	e0bff417 	ldw	r2,-48(fp)
  80d09c:	1005003a 	cmpeq	r2,r2,zero
  80d0a0:	10000c1e 	bne	r2,zero,80d0d4 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  80d0a4:	e0fff717 	ldw	r3,-36(fp)
  80d0a8:	e0bff417 	ldw	r2,-48(fp)
  80d0ac:	18800015 	stw	r2,0(r3)
  80d0b0:	e0bff717 	ldw	r2,-36(fp)
  80d0b4:	10800104 	addi	r2,r2,4
  80d0b8:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  80d0bc:	e0bff717 	ldw	r2,-36(fp)
  80d0c0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  80d0c4:	e0bff18b 	ldhu	r2,-58(fp)
  80d0c8:	10800044 	addi	r2,r2,1
  80d0cc:	e0bff18d 	sth	r2,-58(fp)
  80d0d0:	00000a06 	br	80d0fc <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  80d0d4:	d0a73d17 	ldw	r2,-25356(gp)
  80d0d8:	00c00044 	movi	r3,1
  80d0dc:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80d0e0:	d1273d17 	ldw	r4,-25356(gp)
  80d0e4:	e17ff617 	ldw	r5,-40(fp)
  80d0e8:	080ddf80 	call	80ddf8 <OS_EventTaskRemoveMulti>
             }
			 break;
  80d0ec:	00000306 	br	80d0fc <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80d0f0:	d1273d17 	ldw	r4,-25356(gp)
  80d0f4:	e17ff617 	ldw	r5,-40(fp)
  80d0f8:	080ddf80 	call	80ddf8 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  80d0fc:	d0a73d17 	ldw	r2,-25356(gp)
  80d100:	10800c43 	ldbu	r2,49(r2)
  80d104:	10803fcc 	andi	r2,r2,255
  80d108:	e0bffb15 	stw	r2,-20(fp)
  80d10c:	e0fffb17 	ldw	r3,-20(fp)
  80d110:	1805003a 	cmpeq	r2,r3,zero
  80d114:	1000041e 	bne	r2,zero,80d128 <OSEventPendMulti+0x56c>
  80d118:	e0fffb17 	ldw	r3,-20(fp)
  80d11c:	188000a0 	cmpeqi	r2,r3,2
  80d120:	10002c1e 	bne	r2,zero,80d1d4 <OSEventPendMulti+0x618>
  80d124:	00003406 	br	80d1f8 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  80d128:	e0bff417 	ldw	r2,-48(fp)
  80d12c:	10800003 	ldbu	r2,0(r2)
  80d130:	10803fcc 	andi	r2,r2,255
  80d134:	e0bffa15 	stw	r2,-24(fp)
  80d138:	e0fffa17 	ldw	r3,-24(fp)
  80d13c:	18800050 	cmplti	r2,r3,1
  80d140:	1000151e 	bne	r2,zero,80d198 <OSEventPendMulti+0x5dc>
  80d144:	e0fffa17 	ldw	r3,-24(fp)
  80d148:	188000d0 	cmplti	r2,r3,3
  80d14c:	10000a1e 	bne	r2,zero,80d178 <OSEventPendMulti+0x5bc>
  80d150:	e0fffa17 	ldw	r3,-24(fp)
  80d154:	188000e0 	cmpeqi	r2,r3,3
  80d158:	1000011e 	bne	r2,zero,80d160 <OSEventPendMulti+0x5a4>
  80d15c:	00000e06 	br	80d198 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  80d160:	e0bff817 	ldw	r2,-32(fp)
  80d164:	10000015 	stw	zero,0(r2)
  80d168:	e0bff817 	ldw	r2,-32(fp)
  80d16c:	10800104 	addi	r2,r2,4
  80d170:	e0bff815 	stw	r2,-32(fp)
                      break;
  80d174:	00001406 	br	80d1c8 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  80d178:	d0a73d17 	ldw	r2,-25356(gp)
  80d17c:	10c00917 	ldw	r3,36(r2)
  80d180:	e0bff817 	ldw	r2,-32(fp)
  80d184:	10c00015 	stw	r3,0(r2)
  80d188:	e0bff817 	ldw	r2,-32(fp)
  80d18c:	10800104 	addi	r2,r2,4
  80d190:	e0bff815 	stw	r2,-32(fp)
                      break;
  80d194:	00000c06 	br	80d1c8 <OSEventPendMulti+0x60c>
  80d198:	e0bff017 	ldw	r2,-64(fp)
  80d19c:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d1a0:	e0bfea17 	ldw	r2,-88(fp)
  80d1a4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  80d1a8:	e0bff717 	ldw	r2,-36(fp)
  80d1ac:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  80d1b0:	e0c00217 	ldw	r3,8(fp)
  80d1b4:	00800044 	movi	r2,1
  80d1b8:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  80d1bc:	e0bff18b 	ldhu	r2,-58(fp)
  80d1c0:	e0bfff15 	stw	r2,-4(fp)
  80d1c4:	00002406 	br	80d258 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  80d1c8:	e0800217 	ldw	r2,8(fp)
  80d1cc:	10000005 	stb	zero,0(r2)
             break;
  80d1d0:	00001106 	br	80d218 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  80d1d4:	e0bff817 	ldw	r2,-32(fp)
  80d1d8:	10000015 	stw	zero,0(r2)
  80d1dc:	e0bff817 	ldw	r2,-32(fp)
  80d1e0:	10800104 	addi	r2,r2,4
  80d1e4:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  80d1e8:	e0c00217 	ldw	r3,8(fp)
  80d1ec:	00800384 	movi	r2,14
  80d1f0:	18800005 	stb	r2,0(r3)
             break;
  80d1f4:	00000806 	br	80d218 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  80d1f8:	e0bff817 	ldw	r2,-32(fp)
  80d1fc:	10000015 	stw	zero,0(r2)
  80d200:	e0bff817 	ldw	r2,-32(fp)
  80d204:	10800104 	addi	r2,r2,4
  80d208:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  80d20c:	e0c00217 	ldw	r3,8(fp)
  80d210:	00800284 	movi	r2,10
  80d214:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  80d218:	d0a73d17 	ldw	r2,-25356(gp)
  80d21c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  80d220:	d0a73d17 	ldw	r2,-25356(gp)
  80d224:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  80d228:	d0a73d17 	ldw	r2,-25356(gp)
  80d22c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80d230:	d0a73d17 	ldw	r2,-25356(gp)
  80d234:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  80d238:	d0a73d17 	ldw	r2,-25356(gp)
  80d23c:	10000915 	stw	zero,36(r2)
  80d240:	e0bff017 	ldw	r2,-64(fp)
  80d244:	e0bfe915 	stw	r2,-92(fp)
  80d248:	e0bfe917 	ldw	r2,-92(fp)
  80d24c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  80d250:	e0fff18b 	ldhu	r3,-58(fp)
  80d254:	e0ffff15 	stw	r3,-4(fp)
  80d258:	e0bfff17 	ldw	r2,-4(fp)
}
  80d25c:	e037883a 	mov	sp,fp
  80d260:	dfc00117 	ldw	ra,4(sp)
  80d264:	df000017 	ldw	fp,0(sp)
  80d268:	dec00204 	addi	sp,sp,8
  80d26c:	f800283a 	ret

0080d270 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  80d270:	defffe04 	addi	sp,sp,-8
  80d274:	dfc00115 	stw	ra,4(sp)
  80d278:	df000015 	stw	fp,0(sp)
  80d27c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  80d280:	081b8640 	call	81b864 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  80d284:	080e0400 	call	80e040 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  80d288:	080e0840 	call	80e084 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  80d28c:	080e1e80 	call	80e1e8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  80d290:	080df640 	call	80df64 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  80d294:	08102980 	call	810298 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  80d298:	0810c700 	call	810c70 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  80d29c:	0811fc80 	call	811fc8 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  80d2a0:	080e0f00 	call	80e0f0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  80d2a4:	080e16c0 	call	80e16c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  80d2a8:	081b8800 	call	81b880 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  80d2ac:	080ea700 	call	80ea70 <OSDebugInit>
#endif
}
  80d2b0:	e037883a 	mov	sp,fp
  80d2b4:	dfc00117 	ldw	ra,4(sp)
  80d2b8:	df000017 	ldw	fp,0(sp)
  80d2bc:	dec00204 	addi	sp,sp,8
  80d2c0:	f800283a 	ret

0080d2c4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  80d2c4:	defffc04 	addi	sp,sp,-16
  80d2c8:	df000315 	stw	fp,12(sp)
  80d2cc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80d2d0:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  80d2d4:	d0a72e43 	ldbu	r2,-25415(gp)
  80d2d8:	10803fcc 	andi	r2,r2,255
  80d2dc:	10800058 	cmpnei	r2,r2,1
  80d2e0:	1000131e 	bne	r2,zero,80d330 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d2e4:	0005303a 	rdctl	r2,status
  80d2e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d2ec:	e0fffe17 	ldw	r3,-8(fp)
  80d2f0:	00bfff84 	movi	r2,-2
  80d2f4:	1884703a 	and	r2,r3,r2
  80d2f8:	1001703a 	wrctl	status,r2
  
  return context;
  80d2fc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80d300:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  80d304:	d0a73c03 	ldbu	r2,-25360(gp)
  80d308:	10803fcc 	andi	r2,r2,255
  80d30c:	10803fe0 	cmpeqi	r2,r2,255
  80d310:	1000031e 	bne	r2,zero,80d320 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  80d314:	d0a73c03 	ldbu	r2,-25360(gp)
  80d318:	10800044 	addi	r2,r2,1
  80d31c:	d0a73c05 	stb	r2,-25360(gp)
  80d320:	e0bfff17 	ldw	r2,-4(fp)
  80d324:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d328:	e0bffd17 	ldw	r2,-12(fp)
  80d32c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  80d330:	e037883a 	mov	sp,fp
  80d334:	df000017 	ldw	fp,0(sp)
  80d338:	dec00104 	addi	sp,sp,4
  80d33c:	f800283a 	ret

0080d340 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  80d340:	defffb04 	addi	sp,sp,-20
  80d344:	dfc00415 	stw	ra,16(sp)
  80d348:	df000315 	stw	fp,12(sp)
  80d34c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80d350:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  80d354:	d0a72e43 	ldbu	r2,-25415(gp)
  80d358:	10803fcc 	andi	r2,r2,255
  80d35c:	10800058 	cmpnei	r2,r2,1
  80d360:	1000321e 	bne	r2,zero,80d42c <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d364:	0005303a 	rdctl	r2,status
  80d368:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d36c:	e0fffe17 	ldw	r3,-8(fp)
  80d370:	00bfff84 	movi	r2,-2
  80d374:	1884703a 	and	r2,r3,r2
  80d378:	1001703a 	wrctl	status,r2
  
  return context;
  80d37c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80d380:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  80d384:	d0a73c03 	ldbu	r2,-25360(gp)
  80d388:	10803fcc 	andi	r2,r2,255
  80d38c:	1005003a 	cmpeq	r2,r2,zero
  80d390:	1000031e 	bne	r2,zero,80d3a0 <OSIntExit+0x60>
            OSIntNesting--;
  80d394:	d0a73c03 	ldbu	r2,-25360(gp)
  80d398:	10bfffc4 	addi	r2,r2,-1
  80d39c:	d0a73c05 	stb	r2,-25360(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  80d3a0:	d0a73c03 	ldbu	r2,-25360(gp)
  80d3a4:	10803fcc 	andi	r2,r2,255
  80d3a8:	1004c03a 	cmpne	r2,r2,zero
  80d3ac:	10001b1e 	bne	r2,zero,80d41c <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  80d3b0:	d0a72e03 	ldbu	r2,-25416(gp)
  80d3b4:	10803fcc 	andi	r2,r2,255
  80d3b8:	1004c03a 	cmpne	r2,r2,zero
  80d3bc:	1000171e 	bne	r2,zero,80d41c <OSIntExit+0xdc>
                OS_SchedNew();
  80d3c0:	080e45c0 	call	80e45c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  80d3c4:	d0a73003 	ldbu	r2,-25408(gp)
  80d3c8:	d0e73043 	ldbu	r3,-25407(gp)
  80d3cc:	11003fcc 	andi	r4,r2,255
  80d3d0:	18803fcc 	andi	r2,r3,255
  80d3d4:	20801126 	beq	r4,r2,80d41c <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  80d3d8:	d0a73003 	ldbu	r2,-25408(gp)
  80d3dc:	10803fcc 	andi	r2,r2,255
  80d3e0:	00c020f4 	movhi	r3,131
  80d3e4:	18d73204 	addi	r3,r3,23752
  80d3e8:	1085883a 	add	r2,r2,r2
  80d3ec:	1085883a 	add	r2,r2,r2
  80d3f0:	10c5883a 	add	r2,r2,r3
  80d3f4:	10800017 	ldw	r2,0(r2)
  80d3f8:	d0a73815 	stw	r2,-25376(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  80d3fc:	d0e73817 	ldw	r3,-25376(gp)
  80d400:	18800e17 	ldw	r2,56(r3)
  80d404:	10800044 	addi	r2,r2,1
  80d408:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  80d40c:	d0a73317 	ldw	r2,-25396(gp)
  80d410:	10800044 	addi	r2,r2,1
  80d414:	d0a73315 	stw	r2,-25396(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  80d418:	081b3f00 	call	81b3f0 <OSCtxSw>
  80d41c:	e0bfff17 	ldw	r2,-4(fp)
  80d420:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d424:	e0bffd17 	ldw	r2,-12(fp)
  80d428:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80d42c:	e037883a 	mov	sp,fp
  80d430:	dfc00117 	ldw	ra,4(sp)
  80d434:	df000017 	ldw	fp,0(sp)
  80d438:	dec00204 	addi	sp,sp,8
  80d43c:	f800283a 	ret

0080d440 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  80d440:	defffc04 	addi	sp,sp,-16
  80d444:	df000315 	stw	fp,12(sp)
  80d448:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d44c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  80d450:	d0a72e43 	ldbu	r2,-25415(gp)
  80d454:	10803fcc 	andi	r2,r2,255
  80d458:	10800058 	cmpnei	r2,r2,1
  80d45c:	1000171e 	bne	r2,zero,80d4bc <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d460:	0005303a 	rdctl	r2,status
  80d464:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d468:	e0fffe17 	ldw	r3,-8(fp)
  80d46c:	00bfff84 	movi	r2,-2
  80d470:	1884703a 	and	r2,r3,r2
  80d474:	1001703a 	wrctl	status,r2
  
  return context;
  80d478:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80d47c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  80d480:	d0a73c03 	ldbu	r2,-25360(gp)
  80d484:	10803fcc 	andi	r2,r2,255
  80d488:	1004c03a 	cmpne	r2,r2,zero
  80d48c:	1000071e 	bne	r2,zero,80d4ac <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  80d490:	d0a72e03 	ldbu	r2,-25416(gp)
  80d494:	10803fcc 	andi	r2,r2,255
  80d498:	10803fe0 	cmpeqi	r2,r2,255
  80d49c:	1000031e 	bne	r2,zero,80d4ac <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  80d4a0:	d0a72e03 	ldbu	r2,-25416(gp)
  80d4a4:	10800044 	addi	r2,r2,1
  80d4a8:	d0a72e05 	stb	r2,-25416(gp)
  80d4ac:	e0bfff17 	ldw	r2,-4(fp)
  80d4b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d4b4:	e0bffd17 	ldw	r2,-12(fp)
  80d4b8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80d4bc:	e037883a 	mov	sp,fp
  80d4c0:	df000017 	ldw	fp,0(sp)
  80d4c4:	dec00104 	addi	sp,sp,4
  80d4c8:	f800283a 	ret

0080d4cc <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  80d4cc:	defff804 	addi	sp,sp,-32
  80d4d0:	dfc00715 	stw	ra,28(sp)
  80d4d4:	df000615 	stw	fp,24(sp)
  80d4d8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80d4dc:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  80d4e0:	d0a72e43 	ldbu	r2,-25415(gp)
  80d4e4:	10803fcc 	andi	r2,r2,255
  80d4e8:	10800058 	cmpnei	r2,r2,1
  80d4ec:	10002b1e 	bne	r2,zero,80d59c <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d4f0:	0005303a 	rdctl	r2,status
  80d4f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d4f8:	e0fffe17 	ldw	r3,-8(fp)
  80d4fc:	00bfff84 	movi	r2,-2
  80d500:	1884703a 	and	r2,r3,r2
  80d504:	1001703a 	wrctl	status,r2
  
  return context;
  80d508:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80d50c:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  80d510:	d0a72e03 	ldbu	r2,-25416(gp)
  80d514:	10803fcc 	andi	r2,r2,255
  80d518:	1005003a 	cmpeq	r2,r2,zero
  80d51c:	10001b1e 	bne	r2,zero,80d58c <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  80d520:	d0a72e03 	ldbu	r2,-25416(gp)
  80d524:	10bfffc4 	addi	r2,r2,-1
  80d528:	d0a72e05 	stb	r2,-25416(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  80d52c:	d0a72e03 	ldbu	r2,-25416(gp)
  80d530:	10803fcc 	andi	r2,r2,255
  80d534:	1004c03a 	cmpne	r2,r2,zero
  80d538:	10000f1e 	bne	r2,zero,80d578 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  80d53c:	d0a73c03 	ldbu	r2,-25360(gp)
  80d540:	10803fcc 	andi	r2,r2,255
  80d544:	1004c03a 	cmpne	r2,r2,zero
  80d548:	1000061e 	bne	r2,zero,80d564 <OSSchedUnlock+0x98>
  80d54c:	e0bfff17 	ldw	r2,-4(fp)
  80d550:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d554:	e0bffd17 	ldw	r2,-12(fp)
  80d558:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  80d55c:	080e3880 	call	80e388 <OS_Sched>
  80d560:	00000e06 	br	80d59c <OSSchedUnlock+0xd0>
  80d564:	e0bfff17 	ldw	r2,-4(fp)
  80d568:	e0bffc15 	stw	r2,-16(fp)
  80d56c:	e0bffc17 	ldw	r2,-16(fp)
  80d570:	1001703a 	wrctl	status,r2
  80d574:	00000906 	br	80d59c <OSSchedUnlock+0xd0>
  80d578:	e0bfff17 	ldw	r2,-4(fp)
  80d57c:	e0bffb15 	stw	r2,-20(fp)
  80d580:	e0bffb17 	ldw	r2,-20(fp)
  80d584:	1001703a 	wrctl	status,r2
  80d588:	00000406 	br	80d59c <OSSchedUnlock+0xd0>
  80d58c:	e0bfff17 	ldw	r2,-4(fp)
  80d590:	e0bffa15 	stw	r2,-24(fp)
  80d594:	e0bffa17 	ldw	r2,-24(fp)
  80d598:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  80d59c:	e037883a 	mov	sp,fp
  80d5a0:	dfc00117 	ldw	ra,4(sp)
  80d5a4:	df000017 	ldw	fp,0(sp)
  80d5a8:	dec00204 	addi	sp,sp,8
  80d5ac:	f800283a 	ret

0080d5b0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  80d5b0:	defffe04 	addi	sp,sp,-8
  80d5b4:	dfc00115 	stw	ra,4(sp)
  80d5b8:	df000015 	stw	fp,0(sp)
  80d5bc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  80d5c0:	d0a72e43 	ldbu	r2,-25415(gp)
  80d5c4:	10803fcc 	andi	r2,r2,255
  80d5c8:	1004c03a 	cmpne	r2,r2,zero
  80d5cc:	10000f1e 	bne	r2,zero,80d60c <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  80d5d0:	080e45c0 	call	80e45c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  80d5d4:	d0a73003 	ldbu	r2,-25408(gp)
  80d5d8:	d0a73045 	stb	r2,-25407(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  80d5dc:	d0a73003 	ldbu	r2,-25408(gp)
  80d5e0:	10803fcc 	andi	r2,r2,255
  80d5e4:	00c020f4 	movhi	r3,131
  80d5e8:	18d73204 	addi	r3,r3,23752
  80d5ec:	1085883a 	add	r2,r2,r2
  80d5f0:	1085883a 	add	r2,r2,r2
  80d5f4:	10c5883a 	add	r2,r2,r3
  80d5f8:	10800017 	ldw	r2,0(r2)
  80d5fc:	d0a73815 	stw	r2,-25376(gp)
        OSTCBCur      = OSTCBHighRdy;
  80d600:	d0a73817 	ldw	r2,-25376(gp)
  80d604:	d0a73d15 	stw	r2,-25356(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  80d608:	081b47c0 	call	81b47c <OSStartHighRdy>
    }
}
  80d60c:	e037883a 	mov	sp,fp
  80d610:	dfc00117 	ldw	ra,4(sp)
  80d614:	df000017 	ldw	fp,0(sp)
  80d618:	dec00204 	addi	sp,sp,8
  80d61c:	f800283a 	ret

0080d620 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  80d620:	defff904 	addi	sp,sp,-28
  80d624:	dfc00615 	stw	ra,24(sp)
  80d628:	df000515 	stw	fp,20(sp)
  80d62c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d630:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  80d634:	01000084 	movi	r4,2
  80d638:	081467c0 	call	81467c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d63c:	0005303a 	rdctl	r2,status
  80d640:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d644:	e0fffe17 	ldw	r3,-8(fp)
  80d648:	00bfff84 	movi	r2,-2
  80d64c:	1884703a 	and	r2,r3,r2
  80d650:	1001703a 	wrctl	status,r2
  
  return context;
  80d654:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  80d658:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  80d65c:	d0272f15 	stw	zero,-25412(gp)
  80d660:	e0bfff17 	ldw	r2,-4(fp)
  80d664:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d668:	e0bffd17 	ldw	r2,-12(fp)
  80d66c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  80d670:	01001904 	movi	r4,100
  80d674:	081467c0 	call	81467c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d678:	0005303a 	rdctl	r2,status
  80d67c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d680:	e0fffc17 	ldw	r3,-16(fp)
  80d684:	00bfff84 	movi	r2,-2
  80d688:	1884703a 	and	r2,r3,r2
  80d68c:	1001703a 	wrctl	status,r2
  
  return context;
  80d690:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  80d694:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  80d698:	d0a72f17 	ldw	r2,-25412(gp)
  80d69c:	d0a73415 	stw	r2,-25392(gp)
    OSStatRdy    = OS_TRUE;
  80d6a0:	00800044 	movi	r2,1
  80d6a4:	d0a74005 	stb	r2,-25344(gp)
  80d6a8:	e0bfff17 	ldw	r2,-4(fp)
  80d6ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d6b0:	e0bffb17 	ldw	r2,-20(fp)
  80d6b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80d6b8:	e037883a 	mov	sp,fp
  80d6bc:	dfc00117 	ldw	ra,4(sp)
  80d6c0:	df000017 	ldw	fp,0(sp)
  80d6c4:	dec00204 	addi	sp,sp,8
  80d6c8:	f800283a 	ret

0080d6cc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  80d6cc:	defff604 	addi	sp,sp,-40
  80d6d0:	dfc00915 	stw	ra,36(sp)
  80d6d4:	df000815 	stw	fp,32(sp)
  80d6d8:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80d6dc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  80d6e0:	081b8480 	call	81b848 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d6e4:	0005303a 	rdctl	r2,status
  80d6e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d6ec:	e0fffb17 	ldw	r3,-20(fp)
  80d6f0:	00bfff84 	movi	r2,-2
  80d6f4:	1884703a 	and	r2,r3,r2
  80d6f8:	1001703a 	wrctl	status,r2
  
  return context;
  80d6fc:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  80d700:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  80d704:	d0a73e17 	ldw	r2,-25352(gp)
  80d708:	10800044 	addi	r2,r2,1
  80d70c:	d0a73e15 	stw	r2,-25352(gp)
  80d710:	e0bffc17 	ldw	r2,-16(fp)
  80d714:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d718:	e0bffa17 	ldw	r2,-24(fp)
  80d71c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  80d720:	d0a72e43 	ldbu	r2,-25415(gp)
  80d724:	10803fcc 	andi	r2,r2,255
  80d728:	10800058 	cmpnei	r2,r2,1
  80d72c:	1000721e 	bne	r2,zero,80d8f8 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  80d730:	d0a73203 	ldbu	r2,-25400(gp)
  80d734:	10803fcc 	andi	r2,r2,255
  80d738:	e0bfff15 	stw	r2,-4(fp)
  80d73c:	e0ffff17 	ldw	r3,-4(fp)
  80d740:	18800060 	cmpeqi	r2,r3,1
  80d744:	10000a1e 	bne	r2,zero,80d770 <OSTimeTick+0xa4>
  80d748:	e0ffff17 	ldw	r3,-4(fp)
  80d74c:	188000a0 	cmpeqi	r2,r3,2
  80d750:	1000091e 	bne	r2,zero,80d778 <OSTimeTick+0xac>
  80d754:	e0ffff17 	ldw	r3,-4(fp)
  80d758:	1805003a 	cmpeq	r2,r3,zero
  80d75c:	1000011e 	bne	r2,zero,80d764 <OSTimeTick+0x98>
  80d760:	00000a06 	br	80d78c <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  80d764:	00800044 	movi	r2,1
  80d768:	e0bffd05 	stb	r2,-12(fp)
                 break;
  80d76c:	00000a06 	br	80d798 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  80d770:	e03ffd05 	stb	zero,-12(fp)
                 break;
  80d774:	00000806 	br	80d798 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  80d778:	00800044 	movi	r2,1
  80d77c:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  80d780:	00800044 	movi	r2,1
  80d784:	d0a73205 	stb	r2,-25400(gp)
                 break;
  80d788:	00000306 	br	80d798 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  80d78c:	00800044 	movi	r2,1
  80d790:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  80d794:	d0273205 	stb	zero,-25400(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  80d798:	e0bffd03 	ldbu	r2,-12(fp)
  80d79c:	1005003a 	cmpeq	r2,r2,zero
  80d7a0:	1000551e 	bne	r2,zero,80d8f8 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  80d7a4:	d0a73117 	ldw	r2,-25404(gp)
  80d7a8:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80d7ac:	00004d06 	br	80d8e4 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d7b0:	0005303a 	rdctl	r2,status
  80d7b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d7b8:	e0fff917 	ldw	r3,-28(fp)
  80d7bc:	00bfff84 	movi	r2,-2
  80d7c0:	1884703a 	and	r2,r3,r2
  80d7c4:	1001703a 	wrctl	status,r2
  
  return context;
  80d7c8:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  80d7cc:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  80d7d0:	e0bffe17 	ldw	r2,-8(fp)
  80d7d4:	10800b8b 	ldhu	r2,46(r2)
  80d7d8:	10bfffcc 	andi	r2,r2,65535
  80d7dc:	1005003a 	cmpeq	r2,r2,zero
  80d7e0:	1000391e 	bne	r2,zero,80d8c8 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  80d7e4:	e0bffe17 	ldw	r2,-8(fp)
  80d7e8:	10800b8b 	ldhu	r2,46(r2)
  80d7ec:	10bfffc4 	addi	r2,r2,-1
  80d7f0:	1007883a 	mov	r3,r2
  80d7f4:	e0bffe17 	ldw	r2,-8(fp)
  80d7f8:	10c00b8d 	sth	r3,46(r2)
  80d7fc:	e0bffe17 	ldw	r2,-8(fp)
  80d800:	10800b8b 	ldhu	r2,46(r2)
  80d804:	10bfffcc 	andi	r2,r2,65535
  80d808:	1004c03a 	cmpne	r2,r2,zero
  80d80c:	10002e1e 	bne	r2,zero,80d8c8 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80d810:	e0bffe17 	ldw	r2,-8(fp)
  80d814:	10800c03 	ldbu	r2,48(r2)
  80d818:	10803fcc 	andi	r2,r2,255
  80d81c:	10800dcc 	andi	r2,r2,55
  80d820:	1005003a 	cmpeq	r2,r2,zero
  80d824:	10000b1e 	bne	r2,zero,80d854 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  80d828:	e0bffe17 	ldw	r2,-8(fp)
  80d82c:	10c00c03 	ldbu	r3,48(r2)
  80d830:	00bff204 	movi	r2,-56
  80d834:	1884703a 	and	r2,r3,r2
  80d838:	1007883a 	mov	r3,r2
  80d83c:	e0bffe17 	ldw	r2,-8(fp)
  80d840:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  80d844:	e0fffe17 	ldw	r3,-8(fp)
  80d848:	00800044 	movi	r2,1
  80d84c:	18800c45 	stb	r2,49(r3)
  80d850:	00000206 	br	80d85c <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80d854:	e0bffe17 	ldw	r2,-8(fp)
  80d858:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  80d85c:	e0bffe17 	ldw	r2,-8(fp)
  80d860:	10800c03 	ldbu	r2,48(r2)
  80d864:	10803fcc 	andi	r2,r2,255
  80d868:	1080020c 	andi	r2,r2,8
  80d86c:	1004c03a 	cmpne	r2,r2,zero
  80d870:	1000151e 	bne	r2,zero,80d8c8 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  80d874:	e0bffe17 	ldw	r2,-8(fp)
  80d878:	10c00d83 	ldbu	r3,54(r2)
  80d87c:	d0a73a03 	ldbu	r2,-25368(gp)
  80d880:	1884b03a 	or	r2,r3,r2
  80d884:	d0a73a05 	stb	r2,-25368(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80d888:	e0bffe17 	ldw	r2,-8(fp)
  80d88c:	10800d03 	ldbu	r2,52(r2)
  80d890:	11003fcc 	andi	r4,r2,255
  80d894:	e0bffe17 	ldw	r2,-8(fp)
  80d898:	10800d03 	ldbu	r2,52(r2)
  80d89c:	10c03fcc 	andi	r3,r2,255
  80d8a0:	d0a73a44 	addi	r2,gp,-25367
  80d8a4:	1885883a 	add	r2,r3,r2
  80d8a8:	10c00003 	ldbu	r3,0(r2)
  80d8ac:	e0bffe17 	ldw	r2,-8(fp)
  80d8b0:	10800d43 	ldbu	r2,53(r2)
  80d8b4:	1884b03a 	or	r2,r3,r2
  80d8b8:	1007883a 	mov	r3,r2
  80d8bc:	d0a73a44 	addi	r2,gp,-25367
  80d8c0:	2085883a 	add	r2,r4,r2
  80d8c4:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  80d8c8:	e0bffe17 	ldw	r2,-8(fp)
  80d8cc:	10800517 	ldw	r2,20(r2)
  80d8d0:	e0bffe15 	stw	r2,-8(fp)
  80d8d4:	e0bffc17 	ldw	r2,-16(fp)
  80d8d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d8dc:	e0bff817 	ldw	r2,-32(fp)
  80d8e0:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80d8e4:	e0bffe17 	ldw	r2,-8(fp)
  80d8e8:	10800c83 	ldbu	r2,50(r2)
  80d8ec:	10803fcc 	andi	r2,r2,255
  80d8f0:	10800518 	cmpnei	r2,r2,20
  80d8f4:	103fae1e 	bne	r2,zero,80d7b0 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  80d8f8:	e037883a 	mov	sp,fp
  80d8fc:	dfc00117 	ldw	ra,4(sp)
  80d900:	df000017 	ldw	fp,0(sp)
  80d904:	dec00204 	addi	sp,sp,8
  80d908:	f800283a 	ret

0080d90c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  80d90c:	deffff04 	addi	sp,sp,-4
  80d910:	df000015 	stw	fp,0(sp)
  80d914:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  80d918:	00804784 	movi	r2,286
}
  80d91c:	e037883a 	mov	sp,fp
  80d920:	df000017 	ldw	fp,0(sp)
  80d924:	dec00104 	addi	sp,sp,4
  80d928:	f800283a 	ret

0080d92c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  80d92c:	deffff04 	addi	sp,sp,-4
  80d930:	df000015 	stw	fp,0(sp)
  80d934:	d839883a 	mov	fp,sp
}
  80d938:	e037883a 	mov	sp,fp
  80d93c:	df000017 	ldw	fp,0(sp)
  80d940:	dec00104 	addi	sp,sp,4
  80d944:	f800283a 	ret

0080d948 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  80d948:	defff804 	addi	sp,sp,-32
  80d94c:	dfc00715 	stw	ra,28(sp)
  80d950:	df000615 	stw	fp,24(sp)
  80d954:	df000604 	addi	fp,sp,24
  80d958:	e13ffc15 	stw	r4,-16(fp)
  80d95c:	e17ffd15 	stw	r5,-12(fp)
  80d960:	e1bffe05 	stb	r6,-8(fp)
  80d964:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  80d968:	e0bffc17 	ldw	r2,-16(fp)
  80d96c:	10800283 	ldbu	r2,10(r2)
  80d970:	10c03fcc 	andi	r3,r2,255
  80d974:	008020b4 	movhi	r2,130
  80d978:	10b1e004 	addi	r2,r2,-14464
  80d97c:	10c5883a 	add	r2,r2,r3
  80d980:	10800003 	ldbu	r2,0(r2)
  80d984:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  80d988:	e0fffa83 	ldbu	r3,-22(fp)
  80d98c:	e0bffc17 	ldw	r2,-16(fp)
  80d990:	1885883a 	add	r2,r3,r2
  80d994:	10800204 	addi	r2,r2,8
  80d998:	108000c3 	ldbu	r2,3(r2)
  80d99c:	10c03fcc 	andi	r3,r2,255
  80d9a0:	008020b4 	movhi	r2,130
  80d9a4:	10b1e004 	addi	r2,r2,-14464
  80d9a8:	10c5883a 	add	r2,r2,r3
  80d9ac:	10800003 	ldbu	r2,0(r2)
  80d9b0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  80d9b4:	e0bffa83 	ldbu	r2,-22(fp)
  80d9b8:	100490fa 	slli	r2,r2,3
  80d9bc:	1007883a 	mov	r3,r2
  80d9c0:	e0bffa43 	ldbu	r2,-23(fp)
  80d9c4:	1885883a 	add	r2,r3,r2
  80d9c8:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  80d9cc:	e0bffa03 	ldbu	r2,-24(fp)
  80d9d0:	00c020f4 	movhi	r3,131
  80d9d4:	18d73204 	addi	r3,r3,23752
  80d9d8:	1085883a 	add	r2,r2,r2
  80d9dc:	1085883a 	add	r2,r2,r2
  80d9e0:	10c5883a 	add	r2,r2,r3
  80d9e4:	10800017 	ldw	r2,0(r2)
  80d9e8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  80d9ec:	e0bffb17 	ldw	r2,-20(fp)
  80d9f0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  80d9f4:	e0fffb17 	ldw	r3,-20(fp)
  80d9f8:	e0bffd17 	ldw	r2,-12(fp)
  80d9fc:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  80da00:	e0bffb17 	ldw	r2,-20(fp)
  80da04:	10800c03 	ldbu	r2,48(r2)
  80da08:	1007883a 	mov	r3,r2
  80da0c:	e0bffe03 	ldbu	r2,-8(fp)
  80da10:	0084303a 	nor	r2,zero,r2
  80da14:	1884703a 	and	r2,r3,r2
  80da18:	1007883a 	mov	r3,r2
  80da1c:	e0bffb17 	ldw	r2,-20(fp)
  80da20:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  80da24:	e0fffb17 	ldw	r3,-20(fp)
  80da28:	e0bfff03 	ldbu	r2,-4(fp)
  80da2c:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  80da30:	e0bffb17 	ldw	r2,-20(fp)
  80da34:	10800c03 	ldbu	r2,48(r2)
  80da38:	10803fcc 	andi	r2,r2,255
  80da3c:	1080020c 	andi	r2,r2,8
  80da40:	1004c03a 	cmpne	r2,r2,zero
  80da44:	1000111e 	bne	r2,zero,80da8c <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  80da48:	e0bffb17 	ldw	r2,-20(fp)
  80da4c:	10c00d83 	ldbu	r3,54(r2)
  80da50:	d0a73a03 	ldbu	r2,-25368(gp)
  80da54:	1884b03a 	or	r2,r3,r2
  80da58:	d0a73a05 	stb	r2,-25368(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  80da5c:	e13ffa83 	ldbu	r4,-22(fp)
  80da60:	e0fffa83 	ldbu	r3,-22(fp)
  80da64:	d0a73a44 	addi	r2,gp,-25367
  80da68:	1885883a 	add	r2,r3,r2
  80da6c:	10c00003 	ldbu	r3,0(r2)
  80da70:	e0bffb17 	ldw	r2,-20(fp)
  80da74:	10800d43 	ldbu	r2,53(r2)
  80da78:	1884b03a 	or	r2,r3,r2
  80da7c:	1007883a 	mov	r3,r2
  80da80:	d0a73a44 	addi	r2,gp,-25367
  80da84:	2085883a 	add	r2,r4,r2
  80da88:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  80da8c:	e13ffb17 	ldw	r4,-20(fp)
  80da90:	e17ffc17 	ldw	r5,-16(fp)
  80da94:	080dd400 	call	80dd40 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  80da98:	e0bffb17 	ldw	r2,-20(fp)
  80da9c:	10800817 	ldw	r2,32(r2)
  80daa0:	1005003a 	cmpeq	r2,r2,zero
  80daa4:	1000071e 	bne	r2,zero,80dac4 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80daa8:	e0bffb17 	ldw	r2,-20(fp)
  80daac:	11400817 	ldw	r5,32(r2)
  80dab0:	e13ffb17 	ldw	r4,-20(fp)
  80dab4:	080ddf80 	call	80ddf8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  80dab8:	e0fffb17 	ldw	r3,-20(fp)
  80dabc:	e0bffc17 	ldw	r2,-16(fp)
  80dac0:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  80dac4:	e0bffa03 	ldbu	r2,-24(fp)
}
  80dac8:	e037883a 	mov	sp,fp
  80dacc:	dfc00117 	ldw	ra,4(sp)
  80dad0:	df000017 	ldw	fp,0(sp)
  80dad4:	dec00204 	addi	sp,sp,8
  80dad8:	f800283a 	ret

0080dadc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  80dadc:	defffd04 	addi	sp,sp,-12
  80dae0:	df000215 	stw	fp,8(sp)
  80dae4:	df000204 	addi	fp,sp,8
  80dae8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  80daec:	d0e73d17 	ldw	r3,-25356(gp)
  80daf0:	e0bfff17 	ldw	r2,-4(fp)
  80daf4:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  80daf8:	d0a73d17 	ldw	r2,-25356(gp)
  80dafc:	10800d03 	ldbu	r2,52(r2)
  80db00:	11003fcc 	andi	r4,r2,255
  80db04:	d0a73d17 	ldw	r2,-25356(gp)
  80db08:	10800d03 	ldbu	r2,52(r2)
  80db0c:	10c03fcc 	andi	r3,r2,255
  80db10:	e0bfff17 	ldw	r2,-4(fp)
  80db14:	1885883a 	add	r2,r3,r2
  80db18:	10800204 	addi	r2,r2,8
  80db1c:	10c000c3 	ldbu	r3,3(r2)
  80db20:	d0a73d17 	ldw	r2,-25356(gp)
  80db24:	10800d43 	ldbu	r2,53(r2)
  80db28:	1884b03a 	or	r2,r3,r2
  80db2c:	1007883a 	mov	r3,r2
  80db30:	e0bfff17 	ldw	r2,-4(fp)
  80db34:	2085883a 	add	r2,r4,r2
  80db38:	10800204 	addi	r2,r2,8
  80db3c:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80db40:	e0bfff17 	ldw	r2,-4(fp)
  80db44:	10c00283 	ldbu	r3,10(r2)
  80db48:	d0a73d17 	ldw	r2,-25356(gp)
  80db4c:	10800d83 	ldbu	r2,54(r2)
  80db50:	1884b03a 	or	r2,r3,r2
  80db54:	1007883a 	mov	r3,r2
  80db58:	e0bfff17 	ldw	r2,-4(fp)
  80db5c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80db60:	d0a73d17 	ldw	r2,-25356(gp)
  80db64:	10800d03 	ldbu	r2,52(r2)
  80db68:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80db6c:	e13ffe03 	ldbu	r4,-8(fp)
  80db70:	e0fffe03 	ldbu	r3,-8(fp)
  80db74:	d0a73a44 	addi	r2,gp,-25367
  80db78:	1885883a 	add	r2,r3,r2
  80db7c:	10800003 	ldbu	r2,0(r2)
  80db80:	1007883a 	mov	r3,r2
  80db84:	d0a73d17 	ldw	r2,-25356(gp)
  80db88:	10800d43 	ldbu	r2,53(r2)
  80db8c:	0084303a 	nor	r2,zero,r2
  80db90:	1884703a 	and	r2,r3,r2
  80db94:	1007883a 	mov	r3,r2
  80db98:	d0a73a44 	addi	r2,gp,-25367
  80db9c:	2085883a 	add	r2,r4,r2
  80dba0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80dba4:	e0fffe03 	ldbu	r3,-8(fp)
  80dba8:	d0a73a44 	addi	r2,gp,-25367
  80dbac:	1885883a 	add	r2,r3,r2
  80dbb0:	10800003 	ldbu	r2,0(r2)
  80dbb4:	10803fcc 	andi	r2,r2,255
  80dbb8:	1004c03a 	cmpne	r2,r2,zero
  80dbbc:	1000071e 	bne	r2,zero,80dbdc <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80dbc0:	d0a73d17 	ldw	r2,-25356(gp)
  80dbc4:	10800d83 	ldbu	r2,54(r2)
  80dbc8:	0084303a 	nor	r2,zero,r2
  80dbcc:	1007883a 	mov	r3,r2
  80dbd0:	d0a73a03 	ldbu	r2,-25368(gp)
  80dbd4:	1884703a 	and	r2,r3,r2
  80dbd8:	d0a73a05 	stb	r2,-25368(gp)
    }
}
  80dbdc:	e037883a 	mov	sp,fp
  80dbe0:	df000017 	ldw	fp,0(sp)
  80dbe4:	dec00104 	addi	sp,sp,4
  80dbe8:	f800283a 	ret

0080dbec <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  80dbec:	defffb04 	addi	sp,sp,-20
  80dbf0:	df000415 	stw	fp,16(sp)
  80dbf4:	df000404 	addi	fp,sp,16
  80dbf8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  80dbfc:	d0a73d17 	ldw	r2,-25356(gp)
  80dc00:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  80dc04:	d0e73d17 	ldw	r3,-25356(gp)
  80dc08:	e0bfff17 	ldw	r2,-4(fp)
  80dc0c:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  80dc10:	e0bfff17 	ldw	r2,-4(fp)
  80dc14:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  80dc18:	e0bffe17 	ldw	r2,-8(fp)
  80dc1c:	10800017 	ldw	r2,0(r2)
  80dc20:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80dc24:	00002006 	br	80dca8 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  80dc28:	d0a73d17 	ldw	r2,-25356(gp)
  80dc2c:	10800d03 	ldbu	r2,52(r2)
  80dc30:	11003fcc 	andi	r4,r2,255
  80dc34:	d0a73d17 	ldw	r2,-25356(gp)
  80dc38:	10800d03 	ldbu	r2,52(r2)
  80dc3c:	10c03fcc 	andi	r3,r2,255
  80dc40:	e0bffd17 	ldw	r2,-12(fp)
  80dc44:	1885883a 	add	r2,r3,r2
  80dc48:	10800204 	addi	r2,r2,8
  80dc4c:	10c000c3 	ldbu	r3,3(r2)
  80dc50:	d0a73d17 	ldw	r2,-25356(gp)
  80dc54:	10800d43 	ldbu	r2,53(r2)
  80dc58:	1884b03a 	or	r2,r3,r2
  80dc5c:	1007883a 	mov	r3,r2
  80dc60:	e0bffd17 	ldw	r2,-12(fp)
  80dc64:	2085883a 	add	r2,r4,r2
  80dc68:	10800204 	addi	r2,r2,8
  80dc6c:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80dc70:	e0bffd17 	ldw	r2,-12(fp)
  80dc74:	10c00283 	ldbu	r3,10(r2)
  80dc78:	d0a73d17 	ldw	r2,-25356(gp)
  80dc7c:	10800d83 	ldbu	r2,54(r2)
  80dc80:	1884b03a 	or	r2,r3,r2
  80dc84:	1007883a 	mov	r3,r2
  80dc88:	e0bffd17 	ldw	r2,-12(fp)
  80dc8c:	10c00285 	stb	r3,10(r2)
        pevents++;
  80dc90:	e0bffe17 	ldw	r2,-8(fp)
  80dc94:	10800104 	addi	r2,r2,4
  80dc98:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  80dc9c:	e0bffe17 	ldw	r2,-8(fp)
  80dca0:	10800017 	ldw	r2,0(r2)
  80dca4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80dca8:	e0bffd17 	ldw	r2,-12(fp)
  80dcac:	1004c03a 	cmpne	r2,r2,zero
  80dcb0:	103fdd1e 	bne	r2,zero,80dc28 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80dcb4:	d0a73d17 	ldw	r2,-25356(gp)
  80dcb8:	10800d03 	ldbu	r2,52(r2)
  80dcbc:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80dcc0:	e13ffc03 	ldbu	r4,-16(fp)
  80dcc4:	e0fffc03 	ldbu	r3,-16(fp)
  80dcc8:	d0a73a44 	addi	r2,gp,-25367
  80dccc:	1885883a 	add	r2,r3,r2
  80dcd0:	10800003 	ldbu	r2,0(r2)
  80dcd4:	1007883a 	mov	r3,r2
  80dcd8:	d0a73d17 	ldw	r2,-25356(gp)
  80dcdc:	10800d43 	ldbu	r2,53(r2)
  80dce0:	0084303a 	nor	r2,zero,r2
  80dce4:	1884703a 	and	r2,r3,r2
  80dce8:	1007883a 	mov	r3,r2
  80dcec:	d0a73a44 	addi	r2,gp,-25367
  80dcf0:	2085883a 	add	r2,r4,r2
  80dcf4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80dcf8:	e0fffc03 	ldbu	r3,-16(fp)
  80dcfc:	d0a73a44 	addi	r2,gp,-25367
  80dd00:	1885883a 	add	r2,r3,r2
  80dd04:	10800003 	ldbu	r2,0(r2)
  80dd08:	10803fcc 	andi	r2,r2,255
  80dd0c:	1004c03a 	cmpne	r2,r2,zero
  80dd10:	1000071e 	bne	r2,zero,80dd30 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80dd14:	d0a73d17 	ldw	r2,-25356(gp)
  80dd18:	10800d83 	ldbu	r2,54(r2)
  80dd1c:	0084303a 	nor	r2,zero,r2
  80dd20:	1007883a 	mov	r3,r2
  80dd24:	d0a73a03 	ldbu	r2,-25368(gp)
  80dd28:	1884703a 	and	r2,r3,r2
  80dd2c:	d0a73a05 	stb	r2,-25368(gp)
    }
}
  80dd30:	e037883a 	mov	sp,fp
  80dd34:	df000017 	ldw	fp,0(sp)
  80dd38:	dec00104 	addi	sp,sp,4
  80dd3c:	f800283a 	ret

0080dd40 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  80dd40:	defffc04 	addi	sp,sp,-16
  80dd44:	df000315 	stw	fp,12(sp)
  80dd48:	df000304 	addi	fp,sp,12
  80dd4c:	e13ffe15 	stw	r4,-8(fp)
  80dd50:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  80dd54:	e0bffe17 	ldw	r2,-8(fp)
  80dd58:	10800d03 	ldbu	r2,52(r2)
  80dd5c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  80dd60:	e13ffd03 	ldbu	r4,-12(fp)
  80dd64:	e0fffd03 	ldbu	r3,-12(fp)
  80dd68:	e0bfff17 	ldw	r2,-4(fp)
  80dd6c:	1885883a 	add	r2,r3,r2
  80dd70:	10800204 	addi	r2,r2,8
  80dd74:	108000c3 	ldbu	r2,3(r2)
  80dd78:	1007883a 	mov	r3,r2
  80dd7c:	e0bffe17 	ldw	r2,-8(fp)
  80dd80:	10800d43 	ldbu	r2,53(r2)
  80dd84:	0084303a 	nor	r2,zero,r2
  80dd88:	1884703a 	and	r2,r3,r2
  80dd8c:	1007883a 	mov	r3,r2
  80dd90:	e0bfff17 	ldw	r2,-4(fp)
  80dd94:	2085883a 	add	r2,r4,r2
  80dd98:	10800204 	addi	r2,r2,8
  80dd9c:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  80dda0:	e0fffd03 	ldbu	r3,-12(fp)
  80dda4:	e0bfff17 	ldw	r2,-4(fp)
  80dda8:	1885883a 	add	r2,r3,r2
  80ddac:	10800204 	addi	r2,r2,8
  80ddb0:	108000c3 	ldbu	r2,3(r2)
  80ddb4:	10803fcc 	andi	r2,r2,255
  80ddb8:	1004c03a 	cmpne	r2,r2,zero
  80ddbc:	10000a1e 	bne	r2,zero,80dde8 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  80ddc0:	e0bfff17 	ldw	r2,-4(fp)
  80ddc4:	10800283 	ldbu	r2,10(r2)
  80ddc8:	1007883a 	mov	r3,r2
  80ddcc:	e0bffe17 	ldw	r2,-8(fp)
  80ddd0:	10800d83 	ldbu	r2,54(r2)
  80ddd4:	0084303a 	nor	r2,zero,r2
  80ddd8:	1884703a 	and	r2,r3,r2
  80dddc:	1007883a 	mov	r3,r2
  80dde0:	e0bfff17 	ldw	r2,-4(fp)
  80dde4:	10c00285 	stb	r3,10(r2)
    }
}
  80dde8:	e037883a 	mov	sp,fp
  80ddec:	df000017 	ldw	fp,0(sp)
  80ddf0:	dec00104 	addi	sp,sp,4
  80ddf4:	f800283a 	ret

0080ddf8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  80ddf8:	defffa04 	addi	sp,sp,-24
  80ddfc:	df000515 	stw	fp,20(sp)
  80de00:	df000504 	addi	fp,sp,20
  80de04:	e13ffe15 	stw	r4,-8(fp)
  80de08:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  80de0c:	e0bffe17 	ldw	r2,-8(fp)
  80de10:	10800d03 	ldbu	r2,52(r2)
  80de14:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  80de18:	e0bffe17 	ldw	r2,-8(fp)
  80de1c:	10800d83 	ldbu	r2,54(r2)
  80de20:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  80de24:	e0bffe17 	ldw	r2,-8(fp)
  80de28:	10800d43 	ldbu	r2,53(r2)
  80de2c:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  80de30:	e0bfff17 	ldw	r2,-4(fp)
  80de34:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  80de38:	e0bffd17 	ldw	r2,-12(fp)
  80de3c:	10800017 	ldw	r2,0(r2)
  80de40:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80de44:	00002606 	br	80dee0 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  80de48:	e13ffb83 	ldbu	r4,-18(fp)
  80de4c:	e0fffb83 	ldbu	r3,-18(fp)
  80de50:	e0bffc17 	ldw	r2,-16(fp)
  80de54:	1885883a 	add	r2,r3,r2
  80de58:	10800204 	addi	r2,r2,8
  80de5c:	108000c3 	ldbu	r2,3(r2)
  80de60:	1007883a 	mov	r3,r2
  80de64:	e0bffb03 	ldbu	r2,-20(fp)
  80de68:	0084303a 	nor	r2,zero,r2
  80de6c:	1884703a 	and	r2,r3,r2
  80de70:	1007883a 	mov	r3,r2
  80de74:	e0bffc17 	ldw	r2,-16(fp)
  80de78:	2085883a 	add	r2,r4,r2
  80de7c:	10800204 	addi	r2,r2,8
  80de80:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  80de84:	e0fffb83 	ldbu	r3,-18(fp)
  80de88:	e0bffc17 	ldw	r2,-16(fp)
  80de8c:	1885883a 	add	r2,r3,r2
  80de90:	10800204 	addi	r2,r2,8
  80de94:	108000c3 	ldbu	r2,3(r2)
  80de98:	10803fcc 	andi	r2,r2,255
  80de9c:	1004c03a 	cmpne	r2,r2,zero
  80dea0:	1000091e 	bne	r2,zero,80dec8 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  80dea4:	e0bffc17 	ldw	r2,-16(fp)
  80dea8:	10800283 	ldbu	r2,10(r2)
  80deac:	1007883a 	mov	r3,r2
  80deb0:	e0bffb43 	ldbu	r2,-19(fp)
  80deb4:	0084303a 	nor	r2,zero,r2
  80deb8:	1884703a 	and	r2,r3,r2
  80debc:	1007883a 	mov	r3,r2
  80dec0:	e0bffc17 	ldw	r2,-16(fp)
  80dec4:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  80dec8:	e0bffd17 	ldw	r2,-12(fp)
  80decc:	10800104 	addi	r2,r2,4
  80ded0:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  80ded4:	e0bffd17 	ldw	r2,-12(fp)
  80ded8:	10800017 	ldw	r2,0(r2)
  80dedc:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80dee0:	e0bffc17 	ldw	r2,-16(fp)
  80dee4:	1004c03a 	cmpne	r2,r2,zero
  80dee8:	103fd71e 	bne	r2,zero,80de48 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  80deec:	e037883a 	mov	sp,fp
  80def0:	df000017 	ldw	fp,0(sp)
  80def4:	dec00104 	addi	sp,sp,4
  80def8:	f800283a 	ret

0080defc <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  80defc:	defffc04 	addi	sp,sp,-16
  80df00:	df000315 	stw	fp,12(sp)
  80df04:	df000304 	addi	fp,sp,12
  80df08:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  80df0c:	e0bfff17 	ldw	r2,-4(fp)
  80df10:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  80df14:	e0bfff17 	ldw	r2,-4(fp)
  80df18:	108002c4 	addi	r2,r2,11
  80df1c:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80df20:	e03ffd05 	stb	zero,-12(fp)
  80df24:	00000806 	br	80df48 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  80df28:	e0bffe17 	ldw	r2,-8(fp)
  80df2c:	10000005 	stb	zero,0(r2)
  80df30:	e0bffe17 	ldw	r2,-8(fp)
  80df34:	10800044 	addi	r2,r2,1
  80df38:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80df3c:	e0bffd03 	ldbu	r2,-12(fp)
  80df40:	10800044 	addi	r2,r2,1
  80df44:	e0bffd05 	stb	r2,-12(fp)
  80df48:	e0bffd03 	ldbu	r2,-12(fp)
  80df4c:	108000f0 	cmpltui	r2,r2,3
  80df50:	103ff51e 	bne	r2,zero,80df28 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  80df54:	e037883a 	mov	sp,fp
  80df58:	df000017 	ldw	fp,0(sp)
  80df5c:	dec00104 	addi	sp,sp,4
  80df60:	f800283a 	ret

0080df64 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  80df64:	defffb04 	addi	sp,sp,-20
  80df68:	dfc00415 	stw	ra,16(sp)
  80df6c:	df000315 	stw	fp,12(sp)
  80df70:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  80df74:	010020f4 	movhi	r4,131
  80df78:	21131e04 	addi	r4,r4,19576
  80df7c:	0142d004 	movi	r5,2880
  80df80:	080e2c80 	call	80e2c8 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  80df84:	008020f4 	movhi	r2,131
  80df88:	10931e04 	addi	r2,r2,19576
  80df8c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  80df90:	008020f4 	movhi	r2,131
  80df94:	10932a04 	addi	r2,r2,19624
  80df98:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80df9c:	e03fff0d 	sth	zero,-4(fp)
  80dfa0:	00001306 	br	80dff0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80dfa4:	e0bffe17 	ldw	r2,-8(fp)
  80dfa8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  80dfac:	e0fffe17 	ldw	r3,-8(fp)
  80dfb0:	e0bffd17 	ldw	r2,-12(fp)
  80dfb4:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  80dfb8:	e0fffe17 	ldw	r3,-8(fp)
  80dfbc:	00800fc4 	movi	r2,63
  80dfc0:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  80dfc4:	e0bffe17 	ldw	r2,-8(fp)
  80dfc8:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  80dfcc:	e0bffe17 	ldw	r2,-8(fp)
  80dfd0:	10800c04 	addi	r2,r2,48
  80dfd4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  80dfd8:	e0bffd17 	ldw	r2,-12(fp)
  80dfdc:	10800c04 	addi	r2,r2,48
  80dfe0:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80dfe4:	e0bfff0b 	ldhu	r2,-4(fp)
  80dfe8:	10800044 	addi	r2,r2,1
  80dfec:	e0bfff0d 	sth	r2,-4(fp)
  80dff0:	e0bfff0b 	ldhu	r2,-4(fp)
  80dff4:	10800ef0 	cmpltui	r2,r2,59
  80dff8:	103fea1e 	bne	r2,zero,80dfa4 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  80dffc:	e0bffe17 	ldw	r2,-8(fp)
  80e000:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  80e004:	e0bffe17 	ldw	r2,-8(fp)
  80e008:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  80e00c:	e0fffe17 	ldw	r3,-8(fp)
  80e010:	00800fc4 	movi	r2,63
  80e014:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  80e018:	e0bffe17 	ldw	r2,-8(fp)
  80e01c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  80e020:	008020f4 	movhi	r2,131
  80e024:	10931e04 	addi	r2,r2,19576
  80e028:	d0a73b15 	stw	r2,-25364(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  80e02c:	e037883a 	mov	sp,fp
  80e030:	dfc00117 	ldw	ra,4(sp)
  80e034:	df000017 	ldw	fp,0(sp)
  80e038:	dec00204 	addi	sp,sp,8
  80e03c:	f800283a 	ret

0080e040 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  80e040:	deffff04 	addi	sp,sp,-4
  80e044:	df000015 	stw	fp,0(sp)
  80e048:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  80e04c:	d0273e15 	stw	zero,-25352(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  80e050:	d0273c05 	stb	zero,-25360(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  80e054:	d0272e05 	stb	zero,-25416(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  80e058:	d0273645 	stb	zero,-25383(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  80e05c:	d0272e45 	stb	zero,-25415(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  80e060:	d0273315 	stw	zero,-25396(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  80e064:	d0272f15 	stw	zero,-25412(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  80e068:	d0274115 	stw	zero,-25340(gp)
    OSIdleCtrMax  = 0L;
  80e06c:	d0273415 	stw	zero,-25392(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  80e070:	d0274005 	stb	zero,-25344(gp)
#endif
}
  80e074:	e037883a 	mov	sp,fp
  80e078:	df000017 	ldw	fp,0(sp)
  80e07c:	dec00104 	addi	sp,sp,4
  80e080:	f800283a 	ret

0080e084 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  80e084:	defffd04 	addi	sp,sp,-12
  80e088:	df000215 	stw	fp,8(sp)
  80e08c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  80e090:	d0273a05 	stb	zero,-25368(gp)
    prdytbl       = &OSRdyTbl[0];
  80e094:	d0a73a44 	addi	r2,gp,-25367
  80e098:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80e09c:	e03fff05 	stb	zero,-4(fp)
  80e0a0:	00000806 	br	80e0c4 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  80e0a4:	e0bffe17 	ldw	r2,-8(fp)
  80e0a8:	10000005 	stb	zero,0(r2)
  80e0ac:	e0bffe17 	ldw	r2,-8(fp)
  80e0b0:	10800044 	addi	r2,r2,1
  80e0b4:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80e0b8:	e0bfff03 	ldbu	r2,-4(fp)
  80e0bc:	10800044 	addi	r2,r2,1
  80e0c0:	e0bfff05 	stb	r2,-4(fp)
  80e0c4:	e0bfff03 	ldbu	r2,-4(fp)
  80e0c8:	108000f0 	cmpltui	r2,r2,3
  80e0cc:	103ff51e 	bne	r2,zero,80e0a4 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  80e0d0:	d0273045 	stb	zero,-25407(gp)
    OSPrioHighRdy = 0;
  80e0d4:	d0273005 	stb	zero,-25408(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  80e0d8:	d0273815 	stw	zero,-25376(gp)
    OSTCBCur      = (OS_TCB *)0;
  80e0dc:	d0273d15 	stw	zero,-25356(gp)
}
  80e0e0:	e037883a 	mov	sp,fp
  80e0e4:	df000017 	ldw	fp,0(sp)
  80e0e8:	dec00104 	addi	sp,sp,4
  80e0ec:	f800283a 	ret

0080e0f0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  80e0f0:	defff804 	addi	sp,sp,-32
  80e0f4:	dfc00715 	stw	ra,28(sp)
  80e0f8:	df000615 	stw	fp,24(sp)
  80e0fc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  80e100:	018020f4 	movhi	r6,131
  80e104:	31931d04 	addi	r6,r6,19572
  80e108:	00bfffd4 	movui	r2,65535
  80e10c:	d8800015 	stw	r2,0(sp)
  80e110:	008020f4 	movhi	r2,131
  80e114:	10911e04 	addi	r2,r2,17528
  80e118:	d8800115 	stw	r2,4(sp)
  80e11c:	00808004 	movi	r2,512
  80e120:	d8800215 	stw	r2,8(sp)
  80e124:	d8000315 	stw	zero,12(sp)
  80e128:	008000c4 	movi	r2,3
  80e12c:	d8800415 	stw	r2,16(sp)
  80e130:	01002074 	movhi	r4,129
  80e134:	21396904 	addi	r4,r4,-6748
  80e138:	000b883a 	mov	r5,zero
  80e13c:	01c00504 	movi	r7,20
  80e140:	08133840 	call	813384 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  80e144:	014020b4 	movhi	r5,130
  80e148:	29722004 	addi	r5,r5,-14208
  80e14c:	01000504 	movi	r4,20
  80e150:	e1bfff04 	addi	r6,fp,-4
  80e154:	0813cb80 	call	813cb8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  80e158:	e037883a 	mov	sp,fp
  80e15c:	dfc00117 	ldw	ra,4(sp)
  80e160:	df000017 	ldw	fp,0(sp)
  80e164:	dec00204 	addi	sp,sp,8
  80e168:	f800283a 	ret

0080e16c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  80e16c:	defff804 	addi	sp,sp,-32
  80e170:	dfc00715 	stw	ra,28(sp)
  80e174:	df000615 	stw	fp,24(sp)
  80e178:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  80e17c:	018020f4 	movhi	r6,131
  80e180:	3190a504 	addi	r6,r6,17044
  80e184:	00bfff94 	movui	r2,65534
  80e188:	d8800015 	stw	r2,0(sp)
  80e18c:	008020f4 	movhi	r2,131
  80e190:	108ea604 	addi	r2,r2,15000
  80e194:	d8800115 	stw	r2,4(sp)
  80e198:	00808004 	movi	r2,512
  80e19c:	d8800215 	stw	r2,8(sp)
  80e1a0:	d8000315 	stw	zero,12(sp)
  80e1a4:	008000c4 	movi	r2,3
  80e1a8:	d8800415 	stw	r2,16(sp)
  80e1ac:	01002074 	movhi	r4,129
  80e1b0:	21398004 	addi	r4,r4,-6656
  80e1b4:	000b883a 	mov	r5,zero
  80e1b8:	01c004c4 	movi	r7,19
  80e1bc:	08133840 	call	813384 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  80e1c0:	014020b4 	movhi	r5,130
  80e1c4:	29722404 	addi	r5,r5,-14192
  80e1c8:	010004c4 	movi	r4,19
  80e1cc:	e1bfff04 	addi	r6,fp,-4
  80e1d0:	0813cb80 	call	813cb8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  80e1d4:	e037883a 	mov	sp,fp
  80e1d8:	dfc00117 	ldw	ra,4(sp)
  80e1dc:	df000017 	ldw	fp,0(sp)
  80e1e0:	dec00204 	addi	sp,sp,8
  80e1e4:	f800283a 	ret

0080e1e8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  80e1e8:	defffb04 	addi	sp,sp,-20
  80e1ec:	dfc00415 	stw	ra,16(sp)
  80e1f0:	df000315 	stw	fp,12(sp)
  80e1f4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  80e1f8:	010020f4 	movhi	r4,131
  80e1fc:	2115ee04 	addi	r4,r4,22456
  80e200:	01414404 	movi	r5,1296
  80e204:	080e2c80 	call	80e2c8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  80e208:	010020f4 	movhi	r4,131
  80e20c:	21173204 	addi	r4,r4,23752
  80e210:	01401504 	movi	r5,84
  80e214:	080e2c80 	call	80e2c8 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  80e218:	008020f4 	movhi	r2,131
  80e21c:	1095ee04 	addi	r2,r2,22456
  80e220:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  80e224:	008020f4 	movhi	r2,131
  80e228:	10960904 	addi	r2,r2,22564
  80e22c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80e230:	e03fff05 	stb	zero,-4(fp)
  80e234:	00001106 	br	80e27c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  80e238:	e0fffe17 	ldw	r3,-8(fp)
  80e23c:	e0bffd17 	ldw	r2,-12(fp)
  80e240:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  80e244:	e0fffe17 	ldw	r3,-8(fp)
  80e248:	00800fc4 	movi	r2,63
  80e24c:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80e250:	e0bffe17 	ldw	r2,-8(fp)
  80e254:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  80e258:	e0bffe17 	ldw	r2,-8(fp)
  80e25c:	10801b04 	addi	r2,r2,108
  80e260:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  80e264:	e0bffd17 	ldw	r2,-12(fp)
  80e268:	10801b04 	addi	r2,r2,108
  80e26c:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80e270:	e0bfff03 	ldbu	r2,-4(fp)
  80e274:	10800044 	addi	r2,r2,1
  80e278:	e0bfff05 	stb	r2,-4(fp)
  80e27c:	e0bfff03 	ldbu	r2,-4(fp)
  80e280:	108002f0 	cmpltui	r2,r2,11
  80e284:	103fec1e 	bne	r2,zero,80e238 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  80e288:	e0bffe17 	ldw	r2,-8(fp)
  80e28c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  80e290:	e0fffe17 	ldw	r3,-8(fp)
  80e294:	00800fc4 	movi	r2,63
  80e298:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80e29c:	e0bffe17 	ldw	r2,-8(fp)
  80e2a0:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  80e2a4:	d0273115 	stw	zero,-25404(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  80e2a8:	008020f4 	movhi	r2,131
  80e2ac:	1095ee04 	addi	r2,r2,22456
  80e2b0:	d0a73515 	stw	r2,-25388(gp)
}
  80e2b4:	e037883a 	mov	sp,fp
  80e2b8:	dfc00117 	ldw	ra,4(sp)
  80e2bc:	df000017 	ldw	fp,0(sp)
  80e2c0:	dec00204 	addi	sp,sp,8
  80e2c4:	f800283a 	ret

0080e2c8 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  80e2c8:	defffd04 	addi	sp,sp,-12
  80e2cc:	df000215 	stw	fp,8(sp)
  80e2d0:	df000204 	addi	fp,sp,8
  80e2d4:	e13ffe15 	stw	r4,-8(fp)
  80e2d8:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  80e2dc:	00000806 	br	80e300 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  80e2e0:	e0bffe17 	ldw	r2,-8(fp)
  80e2e4:	10000005 	stb	zero,0(r2)
  80e2e8:	e0bffe17 	ldw	r2,-8(fp)
  80e2ec:	10800044 	addi	r2,r2,1
  80e2f0:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80e2f4:	e0bfff0b 	ldhu	r2,-4(fp)
  80e2f8:	10bfffc4 	addi	r2,r2,-1
  80e2fc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  80e300:	e0bfff0b 	ldhu	r2,-4(fp)
  80e304:	1004c03a 	cmpne	r2,r2,zero
  80e308:	103ff51e 	bne	r2,zero,80e2e0 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  80e30c:	e037883a 	mov	sp,fp
  80e310:	df000017 	ldw	fp,0(sp)
  80e314:	dec00104 	addi	sp,sp,4
  80e318:	f800283a 	ret

0080e31c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  80e31c:	defffc04 	addi	sp,sp,-16
  80e320:	df000315 	stw	fp,12(sp)
  80e324:	df000304 	addi	fp,sp,12
  80e328:	e13ffd15 	stw	r4,-12(fp)
  80e32c:	e17ffe15 	stw	r5,-8(fp)
  80e330:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  80e334:	00000d06 	br	80e36c <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  80e338:	e0bffe17 	ldw	r2,-8(fp)
  80e33c:	10c00003 	ldbu	r3,0(r2)
  80e340:	e0bffd17 	ldw	r2,-12(fp)
  80e344:	10c00005 	stb	r3,0(r2)
  80e348:	e0bffd17 	ldw	r2,-12(fp)
  80e34c:	10800044 	addi	r2,r2,1
  80e350:	e0bffd15 	stw	r2,-12(fp)
  80e354:	e0bffe17 	ldw	r2,-8(fp)
  80e358:	10800044 	addi	r2,r2,1
  80e35c:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80e360:	e0bfff0b 	ldhu	r2,-4(fp)
  80e364:	10bfffc4 	addi	r2,r2,-1
  80e368:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  80e36c:	e0bfff0b 	ldhu	r2,-4(fp)
  80e370:	1004c03a 	cmpne	r2,r2,zero
  80e374:	103ff01e 	bne	r2,zero,80e338 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  80e378:	e037883a 	mov	sp,fp
  80e37c:	df000017 	ldw	fp,0(sp)
  80e380:	dec00104 	addi	sp,sp,4
  80e384:	f800283a 	ret

0080e388 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  80e388:	defffb04 	addi	sp,sp,-20
  80e38c:	dfc00415 	stw	ra,16(sp)
  80e390:	df000315 	stw	fp,12(sp)
  80e394:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80e398:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e39c:	0005303a 	rdctl	r2,status
  80e3a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e3a4:	e0fffe17 	ldw	r3,-8(fp)
  80e3a8:	00bfff84 	movi	r2,-2
  80e3ac:	1884703a 	and	r2,r3,r2
  80e3b0:	1001703a 	wrctl	status,r2
  
  return context;
  80e3b4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  80e3b8:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  80e3bc:	d0a73c03 	ldbu	r2,-25360(gp)
  80e3c0:	10803fcc 	andi	r2,r2,255
  80e3c4:	1004c03a 	cmpne	r2,r2,zero
  80e3c8:	10001b1e 	bne	r2,zero,80e438 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  80e3cc:	d0a72e03 	ldbu	r2,-25416(gp)
  80e3d0:	10803fcc 	andi	r2,r2,255
  80e3d4:	1004c03a 	cmpne	r2,r2,zero
  80e3d8:	1000171e 	bne	r2,zero,80e438 <OS_Sched+0xb0>
            OS_SchedNew();
  80e3dc:	080e45c0 	call	80e45c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  80e3e0:	d0a73003 	ldbu	r2,-25408(gp)
  80e3e4:	d0e73043 	ldbu	r3,-25407(gp)
  80e3e8:	11003fcc 	andi	r4,r2,255
  80e3ec:	18803fcc 	andi	r2,r3,255
  80e3f0:	20801126 	beq	r4,r2,80e438 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  80e3f4:	d0a73003 	ldbu	r2,-25408(gp)
  80e3f8:	10803fcc 	andi	r2,r2,255
  80e3fc:	00c020f4 	movhi	r3,131
  80e400:	18d73204 	addi	r3,r3,23752
  80e404:	1085883a 	add	r2,r2,r2
  80e408:	1085883a 	add	r2,r2,r2
  80e40c:	10c5883a 	add	r2,r2,r3
  80e410:	10800017 	ldw	r2,0(r2)
  80e414:	d0a73815 	stw	r2,-25376(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  80e418:	d0e73817 	ldw	r3,-25376(gp)
  80e41c:	18800e17 	ldw	r2,56(r3)
  80e420:	10800044 	addi	r2,r2,1
  80e424:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  80e428:	d0a73317 	ldw	r2,-25396(gp)
  80e42c:	10800044 	addi	r2,r2,1
  80e430:	d0a73315 	stw	r2,-25396(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  80e434:	081b3f00 	call	81b3f0 <OSCtxSw>
  80e438:	e0bfff17 	ldw	r2,-4(fp)
  80e43c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e440:	e0bffd17 	ldw	r2,-12(fp)
  80e444:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  80e448:	e037883a 	mov	sp,fp
  80e44c:	dfc00117 	ldw	ra,4(sp)
  80e450:	df000017 	ldw	fp,0(sp)
  80e454:	dec00204 	addi	sp,sp,8
  80e458:	f800283a 	ret

0080e45c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  80e45c:	defffe04 	addi	sp,sp,-8
  80e460:	df000115 	stw	fp,4(sp)
  80e464:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  80e468:	d0a73a03 	ldbu	r2,-25368(gp)
  80e46c:	10c03fcc 	andi	r3,r2,255
  80e470:	008020b4 	movhi	r2,130
  80e474:	10b1e004 	addi	r2,r2,-14464
  80e478:	10c5883a 	add	r2,r2,r3
  80e47c:	10800003 	ldbu	r2,0(r2)
  80e480:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  80e484:	e0bfff03 	ldbu	r2,-4(fp)
  80e488:	100490fa 	slli	r2,r2,3
  80e48c:	1009883a 	mov	r4,r2
  80e490:	e0ffff03 	ldbu	r3,-4(fp)
  80e494:	d0a73a44 	addi	r2,gp,-25367
  80e498:	1885883a 	add	r2,r3,r2
  80e49c:	10800003 	ldbu	r2,0(r2)
  80e4a0:	10c03fcc 	andi	r3,r2,255
  80e4a4:	008020b4 	movhi	r2,130
  80e4a8:	10b1e004 	addi	r2,r2,-14464
  80e4ac:	10c5883a 	add	r2,r2,r3
  80e4b0:	10800003 	ldbu	r2,0(r2)
  80e4b4:	2085883a 	add	r2,r4,r2
  80e4b8:	d0a73005 	stb	r2,-25408(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  80e4bc:	e037883a 	mov	sp,fp
  80e4c0:	df000017 	ldw	fp,0(sp)
  80e4c4:	dec00104 	addi	sp,sp,4
  80e4c8:	f800283a 	ret

0080e4cc <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  80e4cc:	defffc04 	addi	sp,sp,-16
  80e4d0:	df000315 	stw	fp,12(sp)
  80e4d4:	df000304 	addi	fp,sp,12
  80e4d8:	e13ffe15 	stw	r4,-8(fp)
  80e4dc:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  80e4e0:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  80e4e4:	00000d06 	br	80e51c <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  80e4e8:	e0bfff17 	ldw	r2,-4(fp)
  80e4ec:	10c00003 	ldbu	r3,0(r2)
  80e4f0:	e0bffe17 	ldw	r2,-8(fp)
  80e4f4:	10c00005 	stb	r3,0(r2)
  80e4f8:	e0bffe17 	ldw	r2,-8(fp)
  80e4fc:	10800044 	addi	r2,r2,1
  80e500:	e0bffe15 	stw	r2,-8(fp)
  80e504:	e0bfff17 	ldw	r2,-4(fp)
  80e508:	10800044 	addi	r2,r2,1
  80e50c:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80e510:	e0bffd03 	ldbu	r2,-12(fp)
  80e514:	10800044 	addi	r2,r2,1
  80e518:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80e51c:	e0bfff17 	ldw	r2,-4(fp)
  80e520:	10800003 	ldbu	r2,0(r2)
  80e524:	10803fcc 	andi	r2,r2,255
  80e528:	1004c03a 	cmpne	r2,r2,zero
  80e52c:	103fee1e 	bne	r2,zero,80e4e8 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  80e530:	e0bffe17 	ldw	r2,-8(fp)
  80e534:	10000005 	stb	zero,0(r2)
    return (len);
  80e538:	e0bffd03 	ldbu	r2,-12(fp)
}
  80e53c:	e037883a 	mov	sp,fp
  80e540:	df000017 	ldw	fp,0(sp)
  80e544:	dec00104 	addi	sp,sp,4
  80e548:	f800283a 	ret

0080e54c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  80e54c:	defffd04 	addi	sp,sp,-12
  80e550:	df000215 	stw	fp,8(sp)
  80e554:	df000204 	addi	fp,sp,8
  80e558:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  80e55c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  80e560:	00000606 	br	80e57c <OS_StrLen+0x30>
        psrc++;
  80e564:	e0bfff17 	ldw	r2,-4(fp)
  80e568:	10800044 	addi	r2,r2,1
  80e56c:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80e570:	e0bffe03 	ldbu	r2,-8(fp)
  80e574:	10800044 	addi	r2,r2,1
  80e578:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80e57c:	e0bfff17 	ldw	r2,-4(fp)
  80e580:	10800003 	ldbu	r2,0(r2)
  80e584:	10803fcc 	andi	r2,r2,255
  80e588:	1004c03a 	cmpne	r2,r2,zero
  80e58c:	103ff51e 	bne	r2,zero,80e564 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  80e590:	e0bffe03 	ldbu	r2,-8(fp)
}
  80e594:	e037883a 	mov	sp,fp
  80e598:	df000017 	ldw	fp,0(sp)
  80e59c:	dec00104 	addi	sp,sp,4
  80e5a0:	f800283a 	ret

0080e5a4 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  80e5a4:	defffa04 	addi	sp,sp,-24
  80e5a8:	dfc00515 	stw	ra,20(sp)
  80e5ac:	df000415 	stw	fp,16(sp)
  80e5b0:	df000404 	addi	fp,sp,16
  80e5b4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80e5b8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e5bc:	0005303a 	rdctl	r2,status
  80e5c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e5c4:	e0fffd17 	ldw	r3,-12(fp)
  80e5c8:	00bfff84 	movi	r2,-2
  80e5cc:	1884703a 	and	r2,r3,r2
  80e5d0:	1001703a 	wrctl	status,r2
  
  return context;
  80e5d4:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  80e5d8:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  80e5dc:	d0a72f17 	ldw	r2,-25412(gp)
  80e5e0:	10800044 	addi	r2,r2,1
  80e5e4:	d0a72f15 	stw	r2,-25412(gp)
  80e5e8:	e0bffe17 	ldw	r2,-8(fp)
  80e5ec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e5f0:	e0bffc17 	ldw	r2,-16(fp)
  80e5f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  80e5f8:	081b89c0 	call	81b89c <OSTaskIdleHook>
    }
  80e5fc:	003fef06 	br	80e5bc <OS_TaskIdle+0x18>

0080e600 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  80e600:	defffa04 	addi	sp,sp,-24
  80e604:	dfc00515 	stw	ra,20(sp)
  80e608:	df000415 	stw	fp,16(sp)
  80e60c:	df000404 	addi	fp,sp,16
  80e610:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80e614:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80e618:	00000206 	br	80e624 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  80e61c:	01003204 	movi	r4,200
  80e620:	081467c0 	call	81467c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80e624:	d0a74003 	ldbu	r2,-25344(gp)
  80e628:	10803fcc 	andi	r2,r2,255
  80e62c:	1005003a 	cmpeq	r2,r2,zero
  80e630:	103ffa1e 	bne	r2,zero,80e61c <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  80e634:	d1273417 	ldw	r4,-25392(gp)
  80e638:	01401904 	movi	r5,100
  80e63c:	080bb5c0 	call	80bb5c <__udivsi3>
  80e640:	d0a73415 	stw	r2,-25392(gp)
    if (OSIdleCtrMax == 0L) {
  80e644:	d0a73417 	ldw	r2,-25392(gp)
  80e648:	1004c03a 	cmpne	r2,r2,zero
  80e64c:	1000031e 	bne	r2,zero,80e65c <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  80e650:	d0273605 	stb	zero,-25384(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  80e654:	01003fc4 	movi	r4,255
  80e658:	08142900 	call	814290 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e65c:	0005303a 	rdctl	r2,status
  80e660:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e664:	e0fffd17 	ldw	r3,-12(fp)
  80e668:	00bfff84 	movi	r2,-2
  80e66c:	1884703a 	and	r2,r3,r2
  80e670:	1001703a 	wrctl	status,r2
  
  return context;
  80e674:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  80e678:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  80e67c:	d0a72f17 	ldw	r2,-25412(gp)
  80e680:	d0a74115 	stw	r2,-25340(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  80e684:	d0272f15 	stw	zero,-25412(gp)
  80e688:	e0bffe17 	ldw	r2,-8(fp)
  80e68c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e690:	e0bffc17 	ldw	r2,-16(fp)
  80e694:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  80e698:	d1274117 	ldw	r4,-25340(gp)
  80e69c:	d1673417 	ldw	r5,-25392(gp)
  80e6a0:	080bb5c0 	call	80bb5c <__udivsi3>
  80e6a4:	1007883a 	mov	r3,r2
  80e6a8:	00801904 	movi	r2,100
  80e6ac:	10c5c83a 	sub	r2,r2,r3
  80e6b0:	d0a73605 	stb	r2,-25384(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  80e6b4:	081b82c0 	call	81b82c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  80e6b8:	080e6c80 	call	80e6c8 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  80e6bc:	01001904 	movi	r4,100
  80e6c0:	081467c0 	call	81467c <OSTimeDly>
    }
  80e6c4:	003fe506 	br	80e65c <OS_TaskStat+0x5c>

0080e6c8 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  80e6c8:	defffa04 	addi	sp,sp,-24
  80e6cc:	dfc00515 	stw	ra,20(sp)
  80e6d0:	df000415 	stw	fp,16(sp)
  80e6d4:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80e6d8:	e03ffc05 	stb	zero,-16(fp)
  80e6dc:	00002406 	br	80e770 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  80e6e0:	e13ffc03 	ldbu	r4,-16(fp)
  80e6e4:	e17ffe04 	addi	r5,fp,-8
  80e6e8:	08140940 	call	814094 <OSTaskStkChk>
  80e6ec:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  80e6f0:	e0bffc43 	ldbu	r2,-15(fp)
  80e6f4:	1004c03a 	cmpne	r2,r2,zero
  80e6f8:	10001a1e 	bne	r2,zero,80e764 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  80e6fc:	e0bffc03 	ldbu	r2,-16(fp)
  80e700:	00c020f4 	movhi	r3,131
  80e704:	18d73204 	addi	r3,r3,23752
  80e708:	1085883a 	add	r2,r2,r2
  80e70c:	1085883a 	add	r2,r2,r2
  80e710:	10c5883a 	add	r2,r2,r3
  80e714:	10800017 	ldw	r2,0(r2)
  80e718:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  80e71c:	e0bffd17 	ldw	r2,-12(fp)
  80e720:	1005003a 	cmpeq	r2,r2,zero
  80e724:	10000f1e 	bne	r2,zero,80e764 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  80e728:	e0bffd17 	ldw	r2,-12(fp)
  80e72c:	10800060 	cmpeqi	r2,r2,1
  80e730:	10000c1e 	bne	r2,zero,80e764 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  80e734:	e0bffd17 	ldw	r2,-12(fp)
  80e738:	10c00217 	ldw	r3,8(r2)
  80e73c:	e0bffd17 	ldw	r2,-12(fp)
  80e740:	10800317 	ldw	r2,12(r2)
  80e744:	1085883a 	add	r2,r2,r2
  80e748:	1085883a 	add	r2,r2,r2
  80e74c:	1887883a 	add	r3,r3,r2
  80e750:	e0bffd17 	ldw	r2,-12(fp)
  80e754:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  80e758:	e0ffff17 	ldw	r3,-4(fp)
  80e75c:	e0bffd17 	ldw	r2,-12(fp)
  80e760:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80e764:	e0bffc03 	ldbu	r2,-16(fp)
  80e768:	10800044 	addi	r2,r2,1
  80e76c:	e0bffc05 	stb	r2,-16(fp)
  80e770:	e0bffc03 	ldbu	r2,-16(fp)
  80e774:	10800570 	cmpltui	r2,r2,21
  80e778:	103fd91e 	bne	r2,zero,80e6e0 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  80e77c:	e037883a 	mov	sp,fp
  80e780:	dfc00117 	ldw	ra,4(sp)
  80e784:	df000017 	ldw	fp,0(sp)
  80e788:	dec00204 	addi	sp,sp,8
  80e78c:	f800283a 	ret

0080e790 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  80e790:	defff104 	addi	sp,sp,-60
  80e794:	dfc00e15 	stw	ra,56(sp)
  80e798:	df000d15 	stw	fp,52(sp)
  80e79c:	df000d04 	addi	fp,sp,52
  80e7a0:	e17ffb15 	stw	r5,-20(fp)
  80e7a4:	e1bffc15 	stw	r6,-16(fp)
  80e7a8:	e0800417 	ldw	r2,16(fp)
  80e7ac:	e13ffa05 	stb	r4,-24(fp)
  80e7b0:	e1fffd0d 	sth	r7,-12(fp)
  80e7b4:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80e7b8:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e7bc:	0005303a 	rdctl	r2,status
  80e7c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e7c4:	e0fff717 	ldw	r3,-36(fp)
  80e7c8:	00bfff84 	movi	r2,-2
  80e7cc:	1884703a 	and	r2,r3,r2
  80e7d0:	1001703a 	wrctl	status,r2
  
  return context;
  80e7d4:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  80e7d8:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  80e7dc:	d0a73517 	ldw	r2,-25388(gp)
  80e7e0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  80e7e4:	e0bff917 	ldw	r2,-28(fp)
  80e7e8:	1005003a 	cmpeq	r2,r2,zero
  80e7ec:	1000941e 	bne	r2,zero,80ea40 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  80e7f0:	e0bff917 	ldw	r2,-28(fp)
  80e7f4:	10800517 	ldw	r2,20(r2)
  80e7f8:	d0a73515 	stw	r2,-25388(gp)
  80e7fc:	e0bff817 	ldw	r2,-32(fp)
  80e800:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e804:	e0bff617 	ldw	r2,-40(fp)
  80e808:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  80e80c:	e0fff917 	ldw	r3,-28(fp)
  80e810:	e0bffb17 	ldw	r2,-20(fp)
  80e814:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  80e818:	e0fff917 	ldw	r3,-28(fp)
  80e81c:	e0bffa03 	ldbu	r2,-24(fp)
  80e820:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  80e824:	e0bff917 	ldw	r2,-28(fp)
  80e828:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  80e82c:	e0bff917 	ldw	r2,-28(fp)
  80e830:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  80e834:	e0bff917 	ldw	r2,-28(fp)
  80e838:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  80e83c:	e0fff917 	ldw	r3,-28(fp)
  80e840:	e0800317 	ldw	r2,12(fp)
  80e844:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  80e848:	e0fff917 	ldw	r3,-28(fp)
  80e84c:	e0800217 	ldw	r2,8(fp)
  80e850:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  80e854:	e0fff917 	ldw	r3,-28(fp)
  80e858:	e0bffc17 	ldw	r2,-16(fp)
  80e85c:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  80e860:	e0fff917 	ldw	r3,-28(fp)
  80e864:	e0bffe0b 	ldhu	r2,-8(fp)
  80e868:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  80e86c:	e0fff917 	ldw	r3,-28(fp)
  80e870:	e0bffd0b 	ldhu	r2,-12(fp)
  80e874:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  80e878:	e0bff917 	ldw	r2,-28(fp)
  80e87c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  80e880:	e0bffa03 	ldbu	r2,-24(fp)
  80e884:	1004d0fa 	srli	r2,r2,3
  80e888:	1007883a 	mov	r3,r2
  80e88c:	e0bff917 	ldw	r2,-28(fp)
  80e890:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  80e894:	e0bffa03 	ldbu	r2,-24(fp)
  80e898:	108001cc 	andi	r2,r2,7
  80e89c:	1007883a 	mov	r3,r2
  80e8a0:	e0bff917 	ldw	r2,-28(fp)
  80e8a4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  80e8a8:	e0bff917 	ldw	r2,-28(fp)
  80e8ac:	10800d03 	ldbu	r2,52(r2)
  80e8b0:	10c03fcc 	andi	r3,r2,255
  80e8b4:	00800044 	movi	r2,1
  80e8b8:	10c4983a 	sll	r2,r2,r3
  80e8bc:	1007883a 	mov	r3,r2
  80e8c0:	e0bff917 	ldw	r2,-28(fp)
  80e8c4:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  80e8c8:	e0bff917 	ldw	r2,-28(fp)
  80e8cc:	10800cc3 	ldbu	r2,51(r2)
  80e8d0:	10c03fcc 	andi	r3,r2,255
  80e8d4:	00800044 	movi	r2,1
  80e8d8:	10c4983a 	sll	r2,r2,r3
  80e8dc:	1007883a 	mov	r3,r2
  80e8e0:	e0bff917 	ldw	r2,-28(fp)
  80e8e4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  80e8e8:	e0bff917 	ldw	r2,-28(fp)
  80e8ec:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  80e8f0:	e0bff917 	ldw	r2,-28(fp)
  80e8f4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  80e8f8:	e0bff917 	ldw	r2,-28(fp)
  80e8fc:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  80e900:	e0bff917 	ldw	r2,-28(fp)
  80e904:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  80e908:	e0bff917 	ldw	r2,-28(fp)
  80e90c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  80e910:	e0bff917 	ldw	r2,-28(fp)
  80e914:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  80e918:	e0bff917 	ldw	r2,-28(fp)
  80e91c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  80e920:	e0bff917 	ldw	r2,-28(fp)
  80e924:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  80e928:	e0bff917 	ldw	r2,-28(fp)
  80e92c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  80e930:	e0fff917 	ldw	r3,-28(fp)
  80e934:	00800fc4 	movi	r2,63
  80e938:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80e93c:	e0bff917 	ldw	r2,-28(fp)
  80e940:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  80e944:	e13ff917 	ldw	r4,-28(fp)
  80e948:	081b8b80 	call	81b8b8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  80e94c:	e13ff917 	ldw	r4,-28(fp)
  80e950:	081b7d00 	call	81b7d0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e954:	0005303a 	rdctl	r2,status
  80e958:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e95c:	e0fff517 	ldw	r3,-44(fp)
  80e960:	00bfff84 	movi	r2,-2
  80e964:	1884703a 	and	r2,r3,r2
  80e968:	1001703a 	wrctl	status,r2
  
  return context;
  80e96c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  80e970:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  80e974:	e0bffa03 	ldbu	r2,-24(fp)
  80e978:	00c020f4 	movhi	r3,131
  80e97c:	18d73204 	addi	r3,r3,23752
  80e980:	1085883a 	add	r2,r2,r2
  80e984:	1085883a 	add	r2,r2,r2
  80e988:	10c7883a 	add	r3,r2,r3
  80e98c:	e0bff917 	ldw	r2,-28(fp)
  80e990:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  80e994:	d0e73117 	ldw	r3,-25404(gp)
  80e998:	e0bff917 	ldw	r2,-28(fp)
  80e99c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  80e9a0:	e0bff917 	ldw	r2,-28(fp)
  80e9a4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  80e9a8:	d0a73117 	ldw	r2,-25404(gp)
  80e9ac:	1005003a 	cmpeq	r2,r2,zero
  80e9b0:	1000031e 	bne	r2,zero,80e9c0 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  80e9b4:	d0e73117 	ldw	r3,-25404(gp)
  80e9b8:	e0bff917 	ldw	r2,-28(fp)
  80e9bc:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  80e9c0:	e0bff917 	ldw	r2,-28(fp)
  80e9c4:	d0a73115 	stw	r2,-25404(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  80e9c8:	e0bff917 	ldw	r2,-28(fp)
  80e9cc:	10c00d83 	ldbu	r3,54(r2)
  80e9d0:	d0a73a03 	ldbu	r2,-25368(gp)
  80e9d4:	1884b03a 	or	r2,r3,r2
  80e9d8:	d0a73a05 	stb	r2,-25368(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80e9dc:	e0bff917 	ldw	r2,-28(fp)
  80e9e0:	10800d03 	ldbu	r2,52(r2)
  80e9e4:	11003fcc 	andi	r4,r2,255
  80e9e8:	e0bff917 	ldw	r2,-28(fp)
  80e9ec:	10800d03 	ldbu	r2,52(r2)
  80e9f0:	10c03fcc 	andi	r3,r2,255
  80e9f4:	d0a73a44 	addi	r2,gp,-25367
  80e9f8:	1885883a 	add	r2,r3,r2
  80e9fc:	10c00003 	ldbu	r3,0(r2)
  80ea00:	e0bff917 	ldw	r2,-28(fp)
  80ea04:	10800d43 	ldbu	r2,53(r2)
  80ea08:	1884b03a 	or	r2,r3,r2
  80ea0c:	1007883a 	mov	r3,r2
  80ea10:	d0a73a44 	addi	r2,gp,-25367
  80ea14:	2085883a 	add	r2,r4,r2
  80ea18:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  80ea1c:	d0a73643 	ldbu	r2,-25383(gp)
  80ea20:	10800044 	addi	r2,r2,1
  80ea24:	d0a73645 	stb	r2,-25383(gp)
  80ea28:	e0bff817 	ldw	r2,-32(fp)
  80ea2c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ea30:	e0bff417 	ldw	r2,-48(fp)
  80ea34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  80ea38:	e03fff15 	stw	zero,-4(fp)
  80ea3c:	00000606 	br	80ea58 <OS_TCBInit+0x2c8>
  80ea40:	e0bff817 	ldw	r2,-32(fp)
  80ea44:	e0bff315 	stw	r2,-52(fp)
  80ea48:	e0bff317 	ldw	r2,-52(fp)
  80ea4c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  80ea50:	00801084 	movi	r2,66
  80ea54:	e0bfff15 	stw	r2,-4(fp)
  80ea58:	e0bfff17 	ldw	r2,-4(fp)
}
  80ea5c:	e037883a 	mov	sp,fp
  80ea60:	dfc00117 	ldw	ra,4(sp)
  80ea64:	df000017 	ldw	fp,0(sp)
  80ea68:	dec00204 	addi	sp,sp,8
  80ea6c:	f800283a 	ret

0080ea70 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  80ea70:	defffe04 	addi	sp,sp,-8
  80ea74:	df000115 	stw	fp,4(sp)
  80ea78:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  80ea7c:	d0a01004 	addi	r2,gp,-32704
  80ea80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  80ea84:	d0a01104 	addi	r2,gp,-32700
  80ea88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  80ea8c:	d0a01284 	addi	r2,gp,-32694
  80ea90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  80ea94:	d0a01304 	addi	r2,gp,-32692
  80ea98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  80ea9c:	d0a01204 	addi	r2,gp,-32696
  80eaa0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  80eaa4:	d0a01384 	addi	r2,gp,-32690
  80eaa8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  80eaac:	d0a01404 	addi	r2,gp,-32688
  80eab0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  80eab4:	d0a01484 	addi	r2,gp,-32686
  80eab8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  80eabc:	d0a01504 	addi	r2,gp,-32684
  80eac0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  80eac4:	d0a01584 	addi	r2,gp,-32682
  80eac8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  80eacc:	d0a01604 	addi	r2,gp,-32680
  80ead0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  80ead4:	d0a01684 	addi	r2,gp,-32678
  80ead8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  80eadc:	d0a01704 	addi	r2,gp,-32676
  80eae0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  80eae4:	d0a01784 	addi	r2,gp,-32674
  80eae8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  80eaec:	d0a01804 	addi	r2,gp,-32672
  80eaf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  80eaf4:	d0a01884 	addi	r2,gp,-32670
  80eaf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  80eafc:	d0a01904 	addi	r2,gp,-32668
  80eb00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  80eb04:	d0a01984 	addi	r2,gp,-32666
  80eb08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  80eb0c:	d0a01a04 	addi	r2,gp,-32664
  80eb10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  80eb14:	d0a01a84 	addi	r2,gp,-32662
  80eb18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  80eb1c:	d0a01b04 	addi	r2,gp,-32660
  80eb20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  80eb24:	d0a01b84 	addi	r2,gp,-32658
  80eb28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  80eb2c:	d0a01c04 	addi	r2,gp,-32656
  80eb30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  80eb34:	d0a01c84 	addi	r2,gp,-32654
  80eb38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  80eb3c:	d0a01d04 	addi	r2,gp,-32652
  80eb40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  80eb44:	d0a01d84 	addi	r2,gp,-32650
  80eb48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  80eb4c:	d0a01e04 	addi	r2,gp,-32648
  80eb50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  80eb54:	d0a01e84 	addi	r2,gp,-32646
  80eb58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  80eb5c:	d0a01f04 	addi	r2,gp,-32644
  80eb60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  80eb64:	d0a01f84 	addi	r2,gp,-32642
  80eb68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  80eb6c:	d0a02004 	addi	r2,gp,-32640
  80eb70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  80eb74:	d0a02084 	addi	r2,gp,-32638
  80eb78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  80eb7c:	d0a02104 	addi	r2,gp,-32636
  80eb80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  80eb84:	d0a02184 	addi	r2,gp,-32634
  80eb88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  80eb8c:	d0a02204 	addi	r2,gp,-32632
  80eb90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  80eb94:	d0a02284 	addi	r2,gp,-32630
  80eb98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  80eb9c:	d0a02304 	addi	r2,gp,-32628
  80eba0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  80eba4:	d0a02384 	addi	r2,gp,-32626
  80eba8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  80ebac:	d0a02404 	addi	r2,gp,-32624
  80ebb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  80ebb4:	d0a02484 	addi	r2,gp,-32622
  80ebb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  80ebbc:	d0a02504 	addi	r2,gp,-32620
  80ebc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  80ebc4:	d0a02584 	addi	r2,gp,-32618
  80ebc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  80ebcc:	d0a02604 	addi	r2,gp,-32616
  80ebd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  80ebd4:	d0a02684 	addi	r2,gp,-32614
  80ebd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  80ebdc:	d0a02704 	addi	r2,gp,-32612
  80ebe0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  80ebe4:	d0a02c04 	addi	r2,gp,-32592
  80ebe8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  80ebec:	e037883a 	mov	sp,fp
  80ebf0:	df000017 	ldw	fp,0(sp)
  80ebf4:	dec00104 	addi	sp,sp,4
  80ebf8:	f800283a 	ret

0080ebfc <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  80ebfc:	defff104 	addi	sp,sp,-60
  80ec00:	df000e15 	stw	fp,56(sp)
  80ec04:	df000e04 	addi	fp,sp,56
  80ec08:	e13ffa15 	stw	r4,-24(fp)
  80ec0c:	e1fffd15 	stw	r7,-12(fp)
  80ec10:	e17ffb0d 	sth	r5,-20(fp)
  80ec14:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80ec18:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80ec1c:	e0bffd17 	ldw	r2,-12(fp)
  80ec20:	1004c03a 	cmpne	r2,r2,zero
  80ec24:	1000021e 	bne	r2,zero,80ec30 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  80ec28:	e03fff15 	stw	zero,-4(fp)
  80ec2c:	0000bb06 	br	80ef1c <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80ec30:	e0bffa17 	ldw	r2,-24(fp)
  80ec34:	1004c03a 	cmpne	r2,r2,zero
  80ec38:	1000051e 	bne	r2,zero,80ec50 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80ec3c:	e0fffd17 	ldw	r3,-12(fp)
  80ec40:	00801b84 	movi	r2,110
  80ec44:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80ec48:	e03fff15 	stw	zero,-4(fp)
  80ec4c:	0000b306 	br	80ef1c <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80ec50:	e0bffa17 	ldw	r2,-24(fp)
  80ec54:	10800003 	ldbu	r2,0(r2)
  80ec58:	10803fcc 	andi	r2,r2,255
  80ec5c:	10800160 	cmpeqi	r2,r2,5
  80ec60:	1000051e 	bne	r2,zero,80ec78 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80ec64:	e0fffd17 	ldw	r3,-12(fp)
  80ec68:	00800044 	movi	r2,1
  80ec6c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80ec70:	e03fff15 	stw	zero,-4(fp)
  80ec74:	0000a906 	br	80ef1c <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80ec78:	e0fffc03 	ldbu	r3,-16(fp)
  80ec7c:	00bfe004 	movi	r2,-128
  80ec80:	1884703a 	and	r2,r3,r2
  80ec84:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  80ec88:	e0bff943 	ldbu	r2,-27(fp)
  80ec8c:	1005003a 	cmpeq	r2,r2,zero
  80ec90:	1000061e 	bne	r2,zero,80ecac <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  80ec94:	e0bffc03 	ldbu	r2,-16(fp)
  80ec98:	10801fcc 	andi	r2,r2,127
  80ec9c:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  80eca0:	00800044 	movi	r2,1
  80eca4:	e0bff905 	stb	r2,-28(fp)
  80eca8:	00000106 	br	80ecb0 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  80ecac:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  80ecb0:	e0bffd17 	ldw	r2,-12(fp)
  80ecb4:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ecb8:	0005303a 	rdctl	r2,status
  80ecbc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ecc0:	e0fff717 	ldw	r3,-36(fp)
  80ecc4:	00bfff84 	movi	r2,-2
  80ecc8:	1884703a 	and	r2,r3,r2
  80eccc:	1001703a 	wrctl	status,r2
  
  return context;
  80ecd0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80ecd4:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  80ecd8:	e0bffc03 	ldbu	r2,-16(fp)
  80ecdc:	e0bffe15 	stw	r2,-8(fp)
  80ece0:	e0fffe17 	ldw	r3,-8(fp)
  80ece4:	18800060 	cmpeqi	r2,r3,1
  80ece8:	1000651e 	bne	r2,zero,80ee80 <OSFlagAccept+0x284>
  80ecec:	e0fffe17 	ldw	r3,-8(fp)
  80ecf0:	18800088 	cmpgei	r2,r3,2
  80ecf4:	1000041e 	bne	r2,zero,80ed08 <OSFlagAccept+0x10c>
  80ecf8:	e0fffe17 	ldw	r3,-8(fp)
  80ecfc:	1805003a 	cmpeq	r2,r3,zero
  80ed00:	1000421e 	bne	r2,zero,80ee0c <OSFlagAccept+0x210>
  80ed04:	00007b06 	br	80eef4 <OSFlagAccept+0x2f8>
  80ed08:	e0fffe17 	ldw	r3,-8(fp)
  80ed0c:	188000a0 	cmpeqi	r2,r3,2
  80ed10:	1000041e 	bne	r2,zero,80ed24 <OSFlagAccept+0x128>
  80ed14:	e0fffe17 	ldw	r3,-8(fp)
  80ed18:	188000e0 	cmpeqi	r2,r3,3
  80ed1c:	10001e1e 	bne	r2,zero,80ed98 <OSFlagAccept+0x19c>
  80ed20:	00007406 	br	80eef4 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80ed24:	e0bffa17 	ldw	r2,-24(fp)
  80ed28:	10c0020b 	ldhu	r3,8(r2)
  80ed2c:	e0bffb0b 	ldhu	r2,-20(fp)
  80ed30:	1884703a 	and	r2,r3,r2
  80ed34:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80ed38:	e0fff98b 	ldhu	r3,-26(fp)
  80ed3c:	e0bffb0b 	ldhu	r2,-20(fp)
  80ed40:	18800d1e 	bne	r3,r2,80ed78 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80ed44:	e0bff903 	ldbu	r2,-28(fp)
  80ed48:	10800058 	cmpnei	r2,r2,1
  80ed4c:	10000d1e 	bne	r2,zero,80ed84 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80ed50:	e0bffa17 	ldw	r2,-24(fp)
  80ed54:	1080020b 	ldhu	r2,8(r2)
  80ed58:	1007883a 	mov	r3,r2
  80ed5c:	e0bff98b 	ldhu	r2,-26(fp)
  80ed60:	0084303a 	nor	r2,zero,r2
  80ed64:	1884703a 	and	r2,r3,r2
  80ed68:	1007883a 	mov	r3,r2
  80ed6c:	e0bffa17 	ldw	r2,-24(fp)
  80ed70:	10c0020d 	sth	r3,8(r2)
  80ed74:	00000306 	br	80ed84 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80ed78:	e0fffd17 	ldw	r3,-12(fp)
  80ed7c:	00801c04 	movi	r2,112
  80ed80:	18800005 	stb	r2,0(r3)
  80ed84:	e0bff817 	ldw	r2,-32(fp)
  80ed88:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ed8c:	e0bff617 	ldw	r2,-40(fp)
  80ed90:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80ed94:	00005f06 	br	80ef14 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80ed98:	e0bffa17 	ldw	r2,-24(fp)
  80ed9c:	10c0020b 	ldhu	r3,8(r2)
  80eda0:	e0bffb0b 	ldhu	r2,-20(fp)
  80eda4:	1884703a 	and	r2,r3,r2
  80eda8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80edac:	e0bff98b 	ldhu	r2,-26(fp)
  80edb0:	1005003a 	cmpeq	r2,r2,zero
  80edb4:	10000d1e 	bne	r2,zero,80edec <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80edb8:	e0bff903 	ldbu	r2,-28(fp)
  80edbc:	10800058 	cmpnei	r2,r2,1
  80edc0:	10000d1e 	bne	r2,zero,80edf8 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80edc4:	e0bffa17 	ldw	r2,-24(fp)
  80edc8:	1080020b 	ldhu	r2,8(r2)
  80edcc:	1007883a 	mov	r3,r2
  80edd0:	e0bff98b 	ldhu	r2,-26(fp)
  80edd4:	0084303a 	nor	r2,zero,r2
  80edd8:	1884703a 	and	r2,r3,r2
  80eddc:	1007883a 	mov	r3,r2
  80ede0:	e0bffa17 	ldw	r2,-24(fp)
  80ede4:	10c0020d 	sth	r3,8(r2)
  80ede8:	00000306 	br	80edf8 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80edec:	e0fffd17 	ldw	r3,-12(fp)
  80edf0:	00801c04 	movi	r2,112
  80edf4:	18800005 	stb	r2,0(r3)
  80edf8:	e0bff817 	ldw	r2,-32(fp)
  80edfc:	e0bff515 	stw	r2,-44(fp)
  80ee00:	e0bff517 	ldw	r2,-44(fp)
  80ee04:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80ee08:	00004206 	br	80ef14 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80ee0c:	e0bffa17 	ldw	r2,-24(fp)
  80ee10:	1080020b 	ldhu	r2,8(r2)
  80ee14:	0084303a 	nor	r2,zero,r2
  80ee18:	1007883a 	mov	r3,r2
  80ee1c:	e0bffb0b 	ldhu	r2,-20(fp)
  80ee20:	1884703a 	and	r2,r3,r2
  80ee24:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80ee28:	e0fff98b 	ldhu	r3,-26(fp)
  80ee2c:	e0bffb0b 	ldhu	r2,-20(fp)
  80ee30:	18800b1e 	bne	r3,r2,80ee60 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80ee34:	e0bff903 	ldbu	r2,-28(fp)
  80ee38:	10800058 	cmpnei	r2,r2,1
  80ee3c:	10000b1e 	bne	r2,zero,80ee6c <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80ee40:	e0bffa17 	ldw	r2,-24(fp)
  80ee44:	10c0020b 	ldhu	r3,8(r2)
  80ee48:	e0bff98b 	ldhu	r2,-26(fp)
  80ee4c:	1884b03a 	or	r2,r3,r2
  80ee50:	1007883a 	mov	r3,r2
  80ee54:	e0bffa17 	ldw	r2,-24(fp)
  80ee58:	10c0020d 	sth	r3,8(r2)
  80ee5c:	00000306 	br	80ee6c <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80ee60:	e0fffd17 	ldw	r3,-12(fp)
  80ee64:	00801c04 	movi	r2,112
  80ee68:	18800005 	stb	r2,0(r3)
  80ee6c:	e0bff817 	ldw	r2,-32(fp)
  80ee70:	e0bff415 	stw	r2,-48(fp)
  80ee74:	e0bff417 	ldw	r2,-48(fp)
  80ee78:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80ee7c:	00002506 	br	80ef14 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80ee80:	e0bffa17 	ldw	r2,-24(fp)
  80ee84:	1080020b 	ldhu	r2,8(r2)
  80ee88:	0084303a 	nor	r2,zero,r2
  80ee8c:	1007883a 	mov	r3,r2
  80ee90:	e0bffb0b 	ldhu	r2,-20(fp)
  80ee94:	1884703a 	and	r2,r3,r2
  80ee98:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80ee9c:	e0bff98b 	ldhu	r2,-26(fp)
  80eea0:	1005003a 	cmpeq	r2,r2,zero
  80eea4:	10000b1e 	bne	r2,zero,80eed4 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80eea8:	e0bff903 	ldbu	r2,-28(fp)
  80eeac:	10800058 	cmpnei	r2,r2,1
  80eeb0:	10000b1e 	bne	r2,zero,80eee0 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80eeb4:	e0bffa17 	ldw	r2,-24(fp)
  80eeb8:	10c0020b 	ldhu	r3,8(r2)
  80eebc:	e0bff98b 	ldhu	r2,-26(fp)
  80eec0:	1884b03a 	or	r2,r3,r2
  80eec4:	1007883a 	mov	r3,r2
  80eec8:	e0bffa17 	ldw	r2,-24(fp)
  80eecc:	10c0020d 	sth	r3,8(r2)
  80eed0:	00000306 	br	80eee0 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80eed4:	e0fffd17 	ldw	r3,-12(fp)
  80eed8:	00801c04 	movi	r2,112
  80eedc:	18800005 	stb	r2,0(r3)
  80eee0:	e0bff817 	ldw	r2,-32(fp)
  80eee4:	e0bff315 	stw	r2,-52(fp)
  80eee8:	e0bff317 	ldw	r2,-52(fp)
  80eeec:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80eef0:	00000806 	br	80ef14 <OSFlagAccept+0x318>
  80eef4:	e0bff817 	ldw	r2,-32(fp)
  80eef8:	e0bff215 	stw	r2,-56(fp)
  80eefc:	e0bff217 	ldw	r2,-56(fp)
  80ef00:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80ef04:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  80ef08:	e0fffd17 	ldw	r3,-12(fp)
  80ef0c:	00801bc4 	movi	r2,111
  80ef10:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  80ef14:	e0bff98b 	ldhu	r2,-26(fp)
  80ef18:	e0bfff15 	stw	r2,-4(fp)
  80ef1c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ef20:	e037883a 	mov	sp,fp
  80ef24:	df000017 	ldw	fp,0(sp)
  80ef28:	dec00104 	addi	sp,sp,4
  80ef2c:	f800283a 	ret

0080ef30 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  80ef30:	defff704 	addi	sp,sp,-36
  80ef34:	df000815 	stw	fp,32(sp)
  80ef38:	df000804 	addi	fp,sp,32
  80ef3c:	e17ffe15 	stw	r5,-8(fp)
  80ef40:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  80ef44:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  80ef48:	e0bffe17 	ldw	r2,-8(fp)
  80ef4c:	1004c03a 	cmpne	r2,r2,zero
  80ef50:	1000021e 	bne	r2,zero,80ef5c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  80ef54:	e03fff15 	stw	zero,-4(fp)
  80ef58:	00003f06 	br	80f058 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  80ef5c:	008020b4 	movhi	r2,130
  80ef60:	10802a04 	addi	r2,r2,168
  80ef64:	10800003 	ldbu	r2,0(r2)
  80ef68:	10803fcc 	andi	r2,r2,255
  80ef6c:	1005003a 	cmpeq	r2,r2,zero
  80ef70:	1000051e 	bne	r2,zero,80ef88 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  80ef74:	e0fffe17 	ldw	r3,-8(fp)
  80ef78:	00800404 	movi	r2,16
  80ef7c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  80ef80:	e03fff15 	stw	zero,-4(fp)
  80ef84:	00003406 	br	80f058 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ef88:	0005303a 	rdctl	r2,status
  80ef8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ef90:	e0fffa17 	ldw	r3,-24(fp)
  80ef94:	00bfff84 	movi	r2,-2
  80ef98:	1884703a 	and	r2,r3,r2
  80ef9c:	1001703a 	wrctl	status,r2
  
  return context;
  80efa0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80efa4:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  80efa8:	008020b4 	movhi	r2,130
  80efac:	10802d04 	addi	r2,r2,180
  80efb0:	10800017 	ldw	r2,0(r2)
  80efb4:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  80efb8:	e0bffc17 	ldw	r2,-16(fp)
  80efbc:	1005003a 	cmpeq	r2,r2,zero
  80efc0:	10001c1e 	bne	r2,zero,80f034 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  80efc4:	008020b4 	movhi	r2,130
  80efc8:	10802d04 	addi	r2,r2,180
  80efcc:	10800017 	ldw	r2,0(r2)
  80efd0:	10800117 	ldw	r2,4(r2)
  80efd4:	1007883a 	mov	r3,r2
  80efd8:	008020b4 	movhi	r2,130
  80efdc:	10802d04 	addi	r2,r2,180
  80efe0:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  80efe4:	e0fffc17 	ldw	r3,-16(fp)
  80efe8:	00800144 	movi	r2,5
  80efec:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  80eff0:	e0fffc17 	ldw	r3,-16(fp)
  80eff4:	e0bffd0b 	ldhu	r2,-12(fp)
  80eff8:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  80effc:	e0bffc17 	ldw	r2,-16(fp)
  80f000:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  80f004:	e0fffc17 	ldw	r3,-16(fp)
  80f008:	00800fc4 	movi	r2,63
  80f00c:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80f010:	e0bffc17 	ldw	r2,-16(fp)
  80f014:	100002c5 	stb	zero,11(r2)
  80f018:	e0bffb17 	ldw	r2,-20(fp)
  80f01c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f020:	e0bff917 	ldw	r2,-28(fp)
  80f024:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  80f028:	e0bffe17 	ldw	r2,-8(fp)
  80f02c:	10000005 	stb	zero,0(r2)
  80f030:	00000706 	br	80f050 <OSFlagCreate+0x120>
  80f034:	e0bffb17 	ldw	r2,-20(fp)
  80f038:	e0bff815 	stw	r2,-32(fp)
  80f03c:	e0bff817 	ldw	r2,-32(fp)
  80f040:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  80f044:	e0fffe17 	ldw	r3,-8(fp)
  80f048:	00801c84 	movi	r2,114
  80f04c:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  80f050:	e0bffc17 	ldw	r2,-16(fp)
  80f054:	e0bfff15 	stw	r2,-4(fp)
  80f058:	e0bfff17 	ldw	r2,-4(fp)
}
  80f05c:	e037883a 	mov	sp,fp
  80f060:	df000017 	ldw	fp,0(sp)
  80f064:	dec00104 	addi	sp,sp,4
  80f068:	f800283a 	ret

0080f06c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  80f06c:	defff004 	addi	sp,sp,-64
  80f070:	dfc00f15 	stw	ra,60(sp)
  80f074:	df000e15 	stw	fp,56(sp)
  80f078:	df000e04 	addi	fp,sp,56
  80f07c:	e13ffb15 	stw	r4,-20(fp)
  80f080:	e1bffd15 	stw	r6,-12(fp)
  80f084:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80f088:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80f08c:	e0bffd17 	ldw	r2,-12(fp)
  80f090:	1004c03a 	cmpne	r2,r2,zero
  80f094:	1000031e 	bne	r2,zero,80f0a4 <OSFlagDel+0x38>
        return (pgrp);
  80f098:	e0bffb17 	ldw	r2,-20(fp)
  80f09c:	e0bfff15 	stw	r2,-4(fp)
  80f0a0:	00009606 	br	80f2fc <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80f0a4:	e0bffb17 	ldw	r2,-20(fp)
  80f0a8:	1004c03a 	cmpne	r2,r2,zero
  80f0ac:	1000061e 	bne	r2,zero,80f0c8 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80f0b0:	e0fffd17 	ldw	r3,-12(fp)
  80f0b4:	00801b84 	movi	r2,110
  80f0b8:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80f0bc:	e0fffb17 	ldw	r3,-20(fp)
  80f0c0:	e0ffff15 	stw	r3,-4(fp)
  80f0c4:	00008d06 	br	80f2fc <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80f0c8:	008020b4 	movhi	r2,130
  80f0cc:	10802a04 	addi	r2,r2,168
  80f0d0:	10800003 	ldbu	r2,0(r2)
  80f0d4:	10803fcc 	andi	r2,r2,255
  80f0d8:	1005003a 	cmpeq	r2,r2,zero
  80f0dc:	1000061e 	bne	r2,zero,80f0f8 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80f0e0:	e0fffd17 	ldw	r3,-12(fp)
  80f0e4:	008003c4 	movi	r2,15
  80f0e8:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80f0ec:	e0bffb17 	ldw	r2,-20(fp)
  80f0f0:	e0bfff15 	stw	r2,-4(fp)
  80f0f4:	00008106 	br	80f2fc <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  80f0f8:	e0bffb17 	ldw	r2,-20(fp)
  80f0fc:	10800003 	ldbu	r2,0(r2)
  80f100:	10803fcc 	andi	r2,r2,255
  80f104:	10800160 	cmpeqi	r2,r2,5
  80f108:	1000061e 	bne	r2,zero,80f124 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  80f10c:	e0fffd17 	ldw	r3,-12(fp)
  80f110:	00800044 	movi	r2,1
  80f114:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80f118:	e0fffb17 	ldw	r3,-20(fp)
  80f11c:	e0ffff15 	stw	r3,-4(fp)
  80f120:	00007606 	br	80f2fc <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f124:	0005303a 	rdctl	r2,status
  80f128:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f12c:	e0fff617 	ldw	r3,-40(fp)
  80f130:	00bfff84 	movi	r2,-2
  80f134:	1884703a 	and	r2,r3,r2
  80f138:	1001703a 	wrctl	status,r2
  
  return context;
  80f13c:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80f140:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  80f144:	e0bffb17 	ldw	r2,-20(fp)
  80f148:	10800117 	ldw	r2,4(r2)
  80f14c:	1005003a 	cmpeq	r2,r2,zero
  80f150:	1000031e 	bne	r2,zero,80f160 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80f154:	00800044 	movi	r2,1
  80f158:	e0bffa05 	stb	r2,-24(fp)
  80f15c:	00000106 	br	80f164 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80f160:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80f164:	e0bffc03 	ldbu	r2,-16(fp)
  80f168:	e0bffe15 	stw	r2,-8(fp)
  80f16c:	e0fffe17 	ldw	r3,-8(fp)
  80f170:	1805003a 	cmpeq	r2,r3,zero
  80f174:	1000041e 	bne	r2,zero,80f188 <OSFlagDel+0x11c>
  80f178:	e0fffe17 	ldw	r3,-8(fp)
  80f17c:	18800060 	cmpeqi	r2,r3,1
  80f180:	1000281e 	bne	r2,zero,80f224 <OSFlagDel+0x1b8>
  80f184:	00005206 	br	80f2d0 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  80f188:	e0bffa03 	ldbu	r2,-24(fp)
  80f18c:	1004c03a 	cmpne	r2,r2,zero
  80f190:	10001a1e 	bne	r2,zero,80f1fc <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  80f194:	e0fffb17 	ldw	r3,-20(fp)
  80f198:	00800fc4 	movi	r2,63
  80f19c:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80f1a0:	e0bffb17 	ldw	r2,-20(fp)
  80f1a4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80f1a8:	e0bffb17 	ldw	r2,-20(fp)
  80f1ac:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  80f1b0:	008020b4 	movhi	r2,130
  80f1b4:	10802d04 	addi	r2,r2,180
  80f1b8:	10c00017 	ldw	r3,0(r2)
  80f1bc:	e0bffb17 	ldw	r2,-20(fp)
  80f1c0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80f1c4:	e0bffb17 	ldw	r2,-20(fp)
  80f1c8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  80f1cc:	00c020b4 	movhi	r3,130
  80f1d0:	18c02d04 	addi	r3,r3,180
  80f1d4:	e0bffb17 	ldw	r2,-20(fp)
  80f1d8:	18800015 	stw	r2,0(r3)
  80f1dc:	e0bff717 	ldw	r2,-36(fp)
  80f1e0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f1e4:	e0bff517 	ldw	r2,-44(fp)
  80f1e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  80f1ec:	e0bffd17 	ldw	r2,-12(fp)
  80f1f0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  80f1f4:	e03ff815 	stw	zero,-32(fp)
  80f1f8:	00003e06 	br	80f2f4 <OSFlagDel+0x288>
  80f1fc:	e0bff717 	ldw	r2,-36(fp)
  80f200:	e0bff415 	stw	r2,-48(fp)
  80f204:	e0bff417 	ldw	r2,-48(fp)
  80f208:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  80f20c:	e0fffd17 	ldw	r3,-12(fp)
  80f210:	00801244 	movi	r2,73
  80f214:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  80f218:	e0bffb17 	ldw	r2,-20(fp)
  80f21c:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  80f220:	00003406 	br	80f2f4 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80f224:	e0bffb17 	ldw	r2,-20(fp)
  80f228:	10800117 	ldw	r2,4(r2)
  80f22c:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80f230:	00000606 	br	80f24c <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  80f234:	e13ff917 	ldw	r4,-28(fp)
  80f238:	000b883a 	mov	r5,zero
  80f23c:	081037c0 	call	81037c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80f240:	e0bff917 	ldw	r2,-28(fp)
  80f244:	10800017 	ldw	r2,0(r2)
  80f248:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80f24c:	e0bff917 	ldw	r2,-28(fp)
  80f250:	1004c03a 	cmpne	r2,r2,zero
  80f254:	103ff71e 	bne	r2,zero,80f234 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  80f258:	e0fffb17 	ldw	r3,-20(fp)
  80f25c:	00800fc4 	movi	r2,63
  80f260:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80f264:	e0bffb17 	ldw	r2,-20(fp)
  80f268:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80f26c:	e0bffb17 	ldw	r2,-20(fp)
  80f270:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  80f274:	008020b4 	movhi	r2,130
  80f278:	10802d04 	addi	r2,r2,180
  80f27c:	10c00017 	ldw	r3,0(r2)
  80f280:	e0bffb17 	ldw	r2,-20(fp)
  80f284:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80f288:	e0bffb17 	ldw	r2,-20(fp)
  80f28c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  80f290:	00c020b4 	movhi	r3,130
  80f294:	18c02d04 	addi	r3,r3,180
  80f298:	e0bffb17 	ldw	r2,-20(fp)
  80f29c:	18800015 	stw	r2,0(r3)
  80f2a0:	e0bff717 	ldw	r2,-36(fp)
  80f2a4:	e0bff315 	stw	r2,-52(fp)
  80f2a8:	e0bff317 	ldw	r2,-52(fp)
  80f2ac:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80f2b0:	e0bffa03 	ldbu	r2,-24(fp)
  80f2b4:	10800058 	cmpnei	r2,r2,1
  80f2b8:	1000011e 	bne	r2,zero,80f2c0 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80f2bc:	080e3880 	call	80e388 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  80f2c0:	e0bffd17 	ldw	r2,-12(fp)
  80f2c4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  80f2c8:	e03ff815 	stw	zero,-32(fp)
             break;
  80f2cc:	00000906 	br	80f2f4 <OSFlagDel+0x288>
  80f2d0:	e0bff717 	ldw	r2,-36(fp)
  80f2d4:	e0bff215 	stw	r2,-56(fp)
  80f2d8:	e0bff217 	ldw	r2,-56(fp)
  80f2dc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  80f2e0:	e0fffd17 	ldw	r3,-12(fp)
  80f2e4:	008001c4 	movi	r2,7
  80f2e8:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  80f2ec:	e0bffb17 	ldw	r2,-20(fp)
  80f2f0:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  80f2f4:	e0bff817 	ldw	r2,-32(fp)
  80f2f8:	e0bfff15 	stw	r2,-4(fp)
  80f2fc:	e0bfff17 	ldw	r2,-4(fp)
}
  80f300:	e037883a 	mov	sp,fp
  80f304:	dfc00117 	ldw	ra,4(sp)
  80f308:	df000017 	ldw	fp,0(sp)
  80f30c:	dec00204 	addi	sp,sp,8
  80f310:	f800283a 	ret

0080f314 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80f314:	defff504 	addi	sp,sp,-44
  80f318:	dfc00a15 	stw	ra,40(sp)
  80f31c:	df000915 	stw	fp,36(sp)
  80f320:	df000904 	addi	fp,sp,36
  80f324:	e13ffc15 	stw	r4,-16(fp)
  80f328:	e17ffd15 	stw	r5,-12(fp)
  80f32c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f330:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80f334:	e0bffe17 	ldw	r2,-8(fp)
  80f338:	1004c03a 	cmpne	r2,r2,zero
  80f33c:	1000021e 	bne	r2,zero,80f348 <OSFlagNameGet+0x34>
        return (0);
  80f340:	e03fff15 	stw	zero,-4(fp)
  80f344:	00003e06 	br	80f440 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80f348:	e0bffc17 	ldw	r2,-16(fp)
  80f34c:	1004c03a 	cmpne	r2,r2,zero
  80f350:	1000051e 	bne	r2,zero,80f368 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80f354:	e0fffe17 	ldw	r3,-8(fp)
  80f358:	00801b84 	movi	r2,110
  80f35c:	18800005 	stb	r2,0(r3)
        return (0);
  80f360:	e03fff15 	stw	zero,-4(fp)
  80f364:	00003606 	br	80f440 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80f368:	e0bffd17 	ldw	r2,-12(fp)
  80f36c:	1004c03a 	cmpne	r2,r2,zero
  80f370:	1000051e 	bne	r2,zero,80f388 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80f374:	e0fffe17 	ldw	r3,-8(fp)
  80f378:	00800304 	movi	r2,12
  80f37c:	18800005 	stb	r2,0(r3)
        return (0);
  80f380:	e03fff15 	stw	zero,-4(fp)
  80f384:	00002e06 	br	80f440 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80f388:	008020b4 	movhi	r2,130
  80f38c:	10802a04 	addi	r2,r2,168
  80f390:	10800003 	ldbu	r2,0(r2)
  80f394:	10803fcc 	andi	r2,r2,255
  80f398:	1005003a 	cmpeq	r2,r2,zero
  80f39c:	1000051e 	bne	r2,zero,80f3b4 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80f3a0:	e0fffe17 	ldw	r3,-8(fp)
  80f3a4:	00800444 	movi	r2,17
  80f3a8:	18800005 	stb	r2,0(r3)
        return (0);
  80f3ac:	e03fff15 	stw	zero,-4(fp)
  80f3b0:	00002306 	br	80f440 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f3b4:	0005303a 	rdctl	r2,status
  80f3b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f3bc:	e0fff917 	ldw	r3,-28(fp)
  80f3c0:	00bfff84 	movi	r2,-2
  80f3c4:	1884703a 	and	r2,r3,r2
  80f3c8:	1001703a 	wrctl	status,r2
  
  return context;
  80f3cc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80f3d0:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80f3d4:	e0bffc17 	ldw	r2,-16(fp)
  80f3d8:	10800003 	ldbu	r2,0(r2)
  80f3dc:	10803fcc 	andi	r2,r2,255
  80f3e0:	10800160 	cmpeqi	r2,r2,5
  80f3e4:	1000091e 	bne	r2,zero,80f40c <OSFlagNameGet+0xf8>
  80f3e8:	e0bffa17 	ldw	r2,-24(fp)
  80f3ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f3f0:	e0bff817 	ldw	r2,-32(fp)
  80f3f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80f3f8:	e0fffe17 	ldw	r3,-8(fp)
  80f3fc:	00800044 	movi	r2,1
  80f400:	18800005 	stb	r2,0(r3)
        return (0);
  80f404:	e03fff15 	stw	zero,-4(fp)
  80f408:	00000d06 	br	80f440 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  80f40c:	e0bffc17 	ldw	r2,-16(fp)
  80f410:	11400284 	addi	r5,r2,10
  80f414:	e13ffd17 	ldw	r4,-12(fp)
  80f418:	080e4cc0 	call	80e4cc <OS_StrCopy>
  80f41c:	e0bffb05 	stb	r2,-20(fp)
  80f420:	e0bffa17 	ldw	r2,-24(fp)
  80f424:	e0bff715 	stw	r2,-36(fp)
  80f428:	e0bff717 	ldw	r2,-36(fp)
  80f42c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80f430:	e0bffe17 	ldw	r2,-8(fp)
  80f434:	10000005 	stb	zero,0(r2)
    return (len);
  80f438:	e0bffb03 	ldbu	r2,-20(fp)
  80f43c:	e0bfff15 	stw	r2,-4(fp)
  80f440:	e0bfff17 	ldw	r2,-4(fp)
}
  80f444:	e037883a 	mov	sp,fp
  80f448:	dfc00117 	ldw	ra,4(sp)
  80f44c:	df000017 	ldw	fp,0(sp)
  80f450:	dec00204 	addi	sp,sp,8
  80f454:	f800283a 	ret

0080f458 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80f458:	defff504 	addi	sp,sp,-44
  80f45c:	dfc00a15 	stw	ra,40(sp)
  80f460:	df000915 	stw	fp,36(sp)
  80f464:	df000904 	addi	fp,sp,36
  80f468:	e13ffd15 	stw	r4,-12(fp)
  80f46c:	e17ffe15 	stw	r5,-8(fp)
  80f470:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f474:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80f478:	e0bfff17 	ldw	r2,-4(fp)
  80f47c:	1005003a 	cmpeq	r2,r2,zero
  80f480:	1000451e 	bne	r2,zero,80f598 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80f484:	e0bffd17 	ldw	r2,-12(fp)
  80f488:	1004c03a 	cmpne	r2,r2,zero
  80f48c:	1000041e 	bne	r2,zero,80f4a0 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80f490:	e0ffff17 	ldw	r3,-4(fp)
  80f494:	00801b84 	movi	r2,110
  80f498:	18800005 	stb	r2,0(r3)
        return;
  80f49c:	00003e06 	br	80f598 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80f4a0:	e0bffe17 	ldw	r2,-8(fp)
  80f4a4:	1004c03a 	cmpne	r2,r2,zero
  80f4a8:	1000041e 	bne	r2,zero,80f4bc <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80f4ac:	e0ffff17 	ldw	r3,-4(fp)
  80f4b0:	00800304 	movi	r2,12
  80f4b4:	18800005 	stb	r2,0(r3)
        return;
  80f4b8:	00003706 	br	80f598 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80f4bc:	008020b4 	movhi	r2,130
  80f4c0:	10802a04 	addi	r2,r2,168
  80f4c4:	10800003 	ldbu	r2,0(r2)
  80f4c8:	10803fcc 	andi	r2,r2,255
  80f4cc:	1005003a 	cmpeq	r2,r2,zero
  80f4d0:	1000041e 	bne	r2,zero,80f4e4 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80f4d4:	e0ffff17 	ldw	r3,-4(fp)
  80f4d8:	00800484 	movi	r2,18
  80f4dc:	18800005 	stb	r2,0(r3)
        return;
  80f4e0:	00002d06 	br	80f598 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f4e4:	0005303a 	rdctl	r2,status
  80f4e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f4ec:	e0fffa17 	ldw	r3,-24(fp)
  80f4f0:	00bfff84 	movi	r2,-2
  80f4f4:	1884703a 	and	r2,r3,r2
  80f4f8:	1001703a 	wrctl	status,r2
  
  return context;
  80f4fc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80f500:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80f504:	e0bffd17 	ldw	r2,-12(fp)
  80f508:	10800003 	ldbu	r2,0(r2)
  80f50c:	10803fcc 	andi	r2,r2,255
  80f510:	10800160 	cmpeqi	r2,r2,5
  80f514:	1000081e 	bne	r2,zero,80f538 <OSFlagNameSet+0xe0>
  80f518:	e0bffb17 	ldw	r2,-20(fp)
  80f51c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f520:	e0bff917 	ldw	r2,-28(fp)
  80f524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80f528:	e0ffff17 	ldw	r3,-4(fp)
  80f52c:	00800044 	movi	r2,1
  80f530:	18800005 	stb	r2,0(r3)
        return;
  80f534:	00001806 	br	80f598 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80f538:	e13ffe17 	ldw	r4,-8(fp)
  80f53c:	080e54c0 	call	80e54c <OS_StrLen>
  80f540:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  80f544:	e0bffc03 	ldbu	r2,-16(fp)
  80f548:	10800830 	cmpltui	r2,r2,32
  80f54c:	1000081e 	bne	r2,zero,80f570 <OSFlagNameSet+0x118>
  80f550:	e0bffb17 	ldw	r2,-20(fp)
  80f554:	e0bff815 	stw	r2,-32(fp)
  80f558:	e0bff817 	ldw	r2,-32(fp)
  80f55c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  80f560:	e0ffff17 	ldw	r3,-4(fp)
  80f564:	00801cc4 	movi	r2,115
  80f568:	18800005 	stb	r2,0(r3)
        return;
  80f56c:	00000a06 	br	80f598 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  80f570:	e0bffd17 	ldw	r2,-12(fp)
  80f574:	11000284 	addi	r4,r2,10
  80f578:	e17ffe17 	ldw	r5,-8(fp)
  80f57c:	080e4cc0 	call	80e4cc <OS_StrCopy>
  80f580:	e0bffb17 	ldw	r2,-20(fp)
  80f584:	e0bff715 	stw	r2,-36(fp)
  80f588:	e0bff717 	ldw	r2,-36(fp)
  80f58c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80f590:	e0bfff17 	ldw	r2,-4(fp)
  80f594:	10000005 	stb	zero,0(r2)
    return;
}
  80f598:	e037883a 	mov	sp,fp
  80f59c:	dfc00117 	ldw	ra,4(sp)
  80f5a0:	df000017 	ldw	fp,0(sp)
  80f5a4:	dec00204 	addi	sp,sp,8
  80f5a8:	f800283a 	ret

0080f5ac <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  80f5ac:	deffe004 	addi	sp,sp,-128
  80f5b0:	dfc01f15 	stw	ra,124(sp)
  80f5b4:	df001e15 	stw	fp,120(sp)
  80f5b8:	df001e04 	addi	fp,sp,120
  80f5bc:	e13ff915 	stw	r4,-28(fp)
  80f5c0:	e17ffa0d 	sth	r5,-24(fp)
  80f5c4:	e1bffb05 	stb	r6,-20(fp)
  80f5c8:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80f5cc:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80f5d0:	e0800217 	ldw	r2,8(fp)
  80f5d4:	1004c03a 	cmpne	r2,r2,zero
  80f5d8:	1000021e 	bne	r2,zero,80f5e4 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  80f5dc:	e03fff15 	stw	zero,-4(fp)
  80f5e0:	00017d06 	br	80fbd8 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80f5e4:	e0bff917 	ldw	r2,-28(fp)
  80f5e8:	1004c03a 	cmpne	r2,r2,zero
  80f5ec:	1000051e 	bne	r2,zero,80f604 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80f5f0:	e0c00217 	ldw	r3,8(fp)
  80f5f4:	00801b84 	movi	r2,110
  80f5f8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80f5fc:	e03fff15 	stw	zero,-4(fp)
  80f600:	00017506 	br	80fbd8 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80f604:	008020b4 	movhi	r2,130
  80f608:	10802a04 	addi	r2,r2,168
  80f60c:	10800003 	ldbu	r2,0(r2)
  80f610:	10803fcc 	andi	r2,r2,255
  80f614:	1005003a 	cmpeq	r2,r2,zero
  80f618:	1000051e 	bne	r2,zero,80f630 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  80f61c:	e0c00217 	ldw	r3,8(fp)
  80f620:	00800084 	movi	r2,2
  80f624:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80f628:	e03fff15 	stw	zero,-4(fp)
  80f62c:	00016a06 	br	80fbd8 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  80f630:	008020b4 	movhi	r2,130
  80f634:	10801c04 	addi	r2,r2,112
  80f638:	10800003 	ldbu	r2,0(r2)
  80f63c:	10803fcc 	andi	r2,r2,255
  80f640:	1005003a 	cmpeq	r2,r2,zero
  80f644:	1000051e 	bne	r2,zero,80f65c <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  80f648:	e0c00217 	ldw	r3,8(fp)
  80f64c:	00800344 	movi	r2,13
  80f650:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80f654:	e03fff15 	stw	zero,-4(fp)
  80f658:	00015f06 	br	80fbd8 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80f65c:	e0bff917 	ldw	r2,-28(fp)
  80f660:	10800003 	ldbu	r2,0(r2)
  80f664:	10803fcc 	andi	r2,r2,255
  80f668:	10800160 	cmpeqi	r2,r2,5
  80f66c:	1000051e 	bne	r2,zero,80f684 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  80f670:	e0c00217 	ldw	r3,8(fp)
  80f674:	00800044 	movi	r2,1
  80f678:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80f67c:	e03fff15 	stw	zero,-4(fp)
  80f680:	00015506 	br	80fbd8 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80f684:	e0fffb03 	ldbu	r3,-20(fp)
  80f688:	00bfe004 	movi	r2,-128
  80f68c:	1884703a 	and	r2,r3,r2
  80f690:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  80f694:	e0bff283 	ldbu	r2,-54(fp)
  80f698:	1005003a 	cmpeq	r2,r2,zero
  80f69c:	1000071e 	bne	r2,zero,80f6bc <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  80f6a0:	00c01fc4 	movi	r3,127
  80f6a4:	e0bffb03 	ldbu	r2,-20(fp)
  80f6a8:	10c4703a 	and	r2,r2,r3
  80f6ac:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  80f6b0:	00800044 	movi	r2,1
  80f6b4:	e0bff205 	stb	r2,-56(fp)
  80f6b8:	00000106 	br	80f6c0 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  80f6bc:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f6c0:	0005303a 	rdctl	r2,status
  80f6c4:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f6c8:	e0fff017 	ldw	r3,-64(fp)
  80f6cc:	00bfff84 	movi	r2,-2
  80f6d0:	1884703a 	and	r2,r3,r2
  80f6d4:	1001703a 	wrctl	status,r2
  
  return context;
  80f6d8:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80f6dc:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  80f6e0:	e0bffb03 	ldbu	r2,-20(fp)
  80f6e4:	e0bffe15 	stw	r2,-8(fp)
  80f6e8:	e0fffe17 	ldw	r3,-8(fp)
  80f6ec:	18800060 	cmpeqi	r2,r3,1
  80f6f0:	1000981e 	bne	r2,zero,80f954 <OSFlagPend+0x3a8>
  80f6f4:	e0fffe17 	ldw	r3,-8(fp)
  80f6f8:	18800088 	cmpgei	r2,r3,2
  80f6fc:	1000041e 	bne	r2,zero,80f710 <OSFlagPend+0x164>
  80f700:	e0fffe17 	ldw	r3,-8(fp)
  80f704:	1805003a 	cmpeq	r2,r3,zero
  80f708:	1000641e 	bne	r2,zero,80f89c <OSFlagPend+0x2f0>
  80f70c:	0000bf06 	br	80fa0c <OSFlagPend+0x460>
  80f710:	e0fffe17 	ldw	r3,-8(fp)
  80f714:	188000a0 	cmpeqi	r2,r3,2
  80f718:	1000041e 	bne	r2,zero,80f72c <OSFlagPend+0x180>
  80f71c:	e0fffe17 	ldw	r3,-8(fp)
  80f720:	188000e0 	cmpeqi	r2,r3,3
  80f724:	10002f1e 	bne	r2,zero,80f7e4 <OSFlagPend+0x238>
  80f728:	0000b806 	br	80fa0c <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  80f72c:	e0bff917 	ldw	r2,-28(fp)
  80f730:	10c0020b 	ldhu	r3,8(r2)
  80f734:	e0bffa0b 	ldhu	r2,-24(fp)
  80f738:	1884703a 	and	r2,r3,r2
  80f73c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80f740:	e0fff30b 	ldhu	r3,-52(fp)
  80f744:	e0bffa0b 	ldhu	r2,-24(fp)
  80f748:	18801a1e 	bne	r3,r2,80f7b4 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80f74c:	e0bff203 	ldbu	r2,-56(fp)
  80f750:	10800058 	cmpnei	r2,r2,1
  80f754:	1000091e 	bne	r2,zero,80f77c <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80f758:	e0bff917 	ldw	r2,-28(fp)
  80f75c:	1080020b 	ldhu	r2,8(r2)
  80f760:	1007883a 	mov	r3,r2
  80f764:	e0bff30b 	ldhu	r2,-52(fp)
  80f768:	0084303a 	nor	r2,zero,r2
  80f76c:	1884703a 	and	r2,r3,r2
  80f770:	1007883a 	mov	r3,r2
  80f774:	e0bff917 	ldw	r2,-28(fp)
  80f778:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80f77c:	008020b4 	movhi	r2,130
  80f780:	10802b04 	addi	r2,r2,172
  80f784:	10c00017 	ldw	r3,0(r2)
  80f788:	e0bff30b 	ldhu	r2,-52(fp)
  80f78c:	18800b0d 	sth	r2,44(r3)
  80f790:	e0bff117 	ldw	r2,-60(fp)
  80f794:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f798:	e0bfef17 	ldw	r2,-68(fp)
  80f79c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80f7a0:	e0800217 	ldw	r2,8(fp)
  80f7a4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80f7a8:	e0bff30b 	ldhu	r2,-52(fp)
  80f7ac:	e0bfff15 	stw	r2,-4(fp)
  80f7b0:	00010906 	br	80fbd8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80f7b4:	e1bffa0b 	ldhu	r6,-24(fp)
  80f7b8:	e1fffb03 	ldbu	r7,-20(fp)
  80f7bc:	e0bffc0b 	ldhu	r2,-16(fp)
  80f7c0:	e17ff404 	addi	r5,fp,-48
  80f7c4:	d8800015 	stw	r2,0(sp)
  80f7c8:	e13ff917 	ldw	r4,-28(fp)
  80f7cc:	08100d40 	call	8100d4 <OS_FlagBlock>
  80f7d0:	e0bff117 	ldw	r2,-60(fp)
  80f7d4:	e0bfee15 	stw	r2,-72(fp)
  80f7d8:	e0bfee17 	ldw	r2,-72(fp)
  80f7dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80f7e0:	00009506 	br	80fa38 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  80f7e4:	e0bff917 	ldw	r2,-28(fp)
  80f7e8:	10c0020b 	ldhu	r3,8(r2)
  80f7ec:	e0bffa0b 	ldhu	r2,-24(fp)
  80f7f0:	1884703a 	and	r2,r3,r2
  80f7f4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80f7f8:	e0bff30b 	ldhu	r2,-52(fp)
  80f7fc:	1005003a 	cmpeq	r2,r2,zero
  80f800:	10001a1e 	bne	r2,zero,80f86c <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80f804:	e0bff203 	ldbu	r2,-56(fp)
  80f808:	10800058 	cmpnei	r2,r2,1
  80f80c:	1000091e 	bne	r2,zero,80f834 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80f810:	e0bff917 	ldw	r2,-28(fp)
  80f814:	1080020b 	ldhu	r2,8(r2)
  80f818:	1007883a 	mov	r3,r2
  80f81c:	e0bff30b 	ldhu	r2,-52(fp)
  80f820:	0084303a 	nor	r2,zero,r2
  80f824:	1884703a 	and	r2,r3,r2
  80f828:	1007883a 	mov	r3,r2
  80f82c:	e0bff917 	ldw	r2,-28(fp)
  80f830:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80f834:	008020b4 	movhi	r2,130
  80f838:	10802b04 	addi	r2,r2,172
  80f83c:	10c00017 	ldw	r3,0(r2)
  80f840:	e0bff30b 	ldhu	r2,-52(fp)
  80f844:	18800b0d 	sth	r2,44(r3)
  80f848:	e0bff117 	ldw	r2,-60(fp)
  80f84c:	e0bfed15 	stw	r2,-76(fp)
  80f850:	e0bfed17 	ldw	r2,-76(fp)
  80f854:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80f858:	e0800217 	ldw	r2,8(fp)
  80f85c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80f860:	e0fff30b 	ldhu	r3,-52(fp)
  80f864:	e0ffff15 	stw	r3,-4(fp)
  80f868:	0000db06 	br	80fbd8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80f86c:	e1bffa0b 	ldhu	r6,-24(fp)
  80f870:	e1fffb03 	ldbu	r7,-20(fp)
  80f874:	e0bffc0b 	ldhu	r2,-16(fp)
  80f878:	e17ff404 	addi	r5,fp,-48
  80f87c:	d8800015 	stw	r2,0(sp)
  80f880:	e13ff917 	ldw	r4,-28(fp)
  80f884:	08100d40 	call	8100d4 <OS_FlagBlock>
  80f888:	e0bff117 	ldw	r2,-60(fp)
  80f88c:	e0bfec15 	stw	r2,-80(fp)
  80f890:	e0bfec17 	ldw	r2,-80(fp)
  80f894:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80f898:	00006706 	br	80fa38 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80f89c:	e0bff917 	ldw	r2,-28(fp)
  80f8a0:	1080020b 	ldhu	r2,8(r2)
  80f8a4:	0084303a 	nor	r2,zero,r2
  80f8a8:	1007883a 	mov	r3,r2
  80f8ac:	e0bffa0b 	ldhu	r2,-24(fp)
  80f8b0:	1884703a 	and	r2,r3,r2
  80f8b4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80f8b8:	e0fff30b 	ldhu	r3,-52(fp)
  80f8bc:	e0bffa0b 	ldhu	r2,-24(fp)
  80f8c0:	1880181e 	bne	r3,r2,80f924 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80f8c4:	e0bff203 	ldbu	r2,-56(fp)
  80f8c8:	10800058 	cmpnei	r2,r2,1
  80f8cc:	1000071e 	bne	r2,zero,80f8ec <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80f8d0:	e0bff917 	ldw	r2,-28(fp)
  80f8d4:	10c0020b 	ldhu	r3,8(r2)
  80f8d8:	e0bff30b 	ldhu	r2,-52(fp)
  80f8dc:	1884b03a 	or	r2,r3,r2
  80f8e0:	1007883a 	mov	r3,r2
  80f8e4:	e0bff917 	ldw	r2,-28(fp)
  80f8e8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80f8ec:	008020b4 	movhi	r2,130
  80f8f0:	10802b04 	addi	r2,r2,172
  80f8f4:	10c00017 	ldw	r3,0(r2)
  80f8f8:	e0bff30b 	ldhu	r2,-52(fp)
  80f8fc:	18800b0d 	sth	r2,44(r3)
  80f900:	e0bff117 	ldw	r2,-60(fp)
  80f904:	e0bfeb15 	stw	r2,-84(fp)
  80f908:	e0bfeb17 	ldw	r2,-84(fp)
  80f90c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80f910:	e0800217 	ldw	r2,8(fp)
  80f914:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80f918:	e0bff30b 	ldhu	r2,-52(fp)
  80f91c:	e0bfff15 	stw	r2,-4(fp)
  80f920:	0000ad06 	br	80fbd8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80f924:	e1bffa0b 	ldhu	r6,-24(fp)
  80f928:	e1fffb03 	ldbu	r7,-20(fp)
  80f92c:	e0bffc0b 	ldhu	r2,-16(fp)
  80f930:	e17ff404 	addi	r5,fp,-48
  80f934:	d8800015 	stw	r2,0(sp)
  80f938:	e13ff917 	ldw	r4,-28(fp)
  80f93c:	08100d40 	call	8100d4 <OS_FlagBlock>
  80f940:	e0bff117 	ldw	r2,-60(fp)
  80f944:	e0bfea15 	stw	r2,-88(fp)
  80f948:	e0bfea17 	ldw	r2,-88(fp)
  80f94c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80f950:	00003906 	br	80fa38 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80f954:	e0bff917 	ldw	r2,-28(fp)
  80f958:	1080020b 	ldhu	r2,8(r2)
  80f95c:	0084303a 	nor	r2,zero,r2
  80f960:	1007883a 	mov	r3,r2
  80f964:	e0bffa0b 	ldhu	r2,-24(fp)
  80f968:	1884703a 	and	r2,r3,r2
  80f96c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80f970:	e0bff30b 	ldhu	r2,-52(fp)
  80f974:	1005003a 	cmpeq	r2,r2,zero
  80f978:	1000181e 	bne	r2,zero,80f9dc <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80f97c:	e0bff203 	ldbu	r2,-56(fp)
  80f980:	10800058 	cmpnei	r2,r2,1
  80f984:	1000071e 	bne	r2,zero,80f9a4 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80f988:	e0bff917 	ldw	r2,-28(fp)
  80f98c:	10c0020b 	ldhu	r3,8(r2)
  80f990:	e0bff30b 	ldhu	r2,-52(fp)
  80f994:	1884b03a 	or	r2,r3,r2
  80f998:	1007883a 	mov	r3,r2
  80f99c:	e0bff917 	ldw	r2,-28(fp)
  80f9a0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80f9a4:	008020b4 	movhi	r2,130
  80f9a8:	10802b04 	addi	r2,r2,172
  80f9ac:	10c00017 	ldw	r3,0(r2)
  80f9b0:	e0bff30b 	ldhu	r2,-52(fp)
  80f9b4:	18800b0d 	sth	r2,44(r3)
  80f9b8:	e0bff117 	ldw	r2,-60(fp)
  80f9bc:	e0bfe915 	stw	r2,-92(fp)
  80f9c0:	e0bfe917 	ldw	r2,-92(fp)
  80f9c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80f9c8:	e0800217 	ldw	r2,8(fp)
  80f9cc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80f9d0:	e0fff30b 	ldhu	r3,-52(fp)
  80f9d4:	e0ffff15 	stw	r3,-4(fp)
  80f9d8:	00007f06 	br	80fbd8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80f9dc:	e1bffa0b 	ldhu	r6,-24(fp)
  80f9e0:	e1fffb03 	ldbu	r7,-20(fp)
  80f9e4:	e0bffc0b 	ldhu	r2,-16(fp)
  80f9e8:	e17ff404 	addi	r5,fp,-48
  80f9ec:	d8800015 	stw	r2,0(sp)
  80f9f0:	e13ff917 	ldw	r4,-28(fp)
  80f9f4:	08100d40 	call	8100d4 <OS_FlagBlock>
  80f9f8:	e0bff117 	ldw	r2,-60(fp)
  80f9fc:	e0bfe815 	stw	r2,-96(fp)
  80fa00:	e0bfe817 	ldw	r2,-96(fp)
  80fa04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80fa08:	00000b06 	br	80fa38 <OSFlagPend+0x48c>
  80fa0c:	e0bff117 	ldw	r2,-60(fp)
  80fa10:	e0bfe715 	stw	r2,-100(fp)
  80fa14:	e0bfe717 	ldw	r2,-100(fp)
  80fa18:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80fa1c:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  80fa20:	e0c00217 	ldw	r3,8(fp)
  80fa24:	00801bc4 	movi	r2,111
  80fa28:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  80fa2c:	e0bff30b 	ldhu	r2,-52(fp)
  80fa30:	e0bfff15 	stw	r2,-4(fp)
  80fa34:	00006806 	br	80fbd8 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  80fa38:	080e3880 	call	80e388 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fa3c:	0005303a 	rdctl	r2,status
  80fa40:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fa44:	e0ffe617 	ldw	r3,-104(fp)
  80fa48:	00bfff84 	movi	r2,-2
  80fa4c:	1884703a 	and	r2,r3,r2
  80fa50:	1001703a 	wrctl	status,r2
  
  return context;
  80fa54:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  80fa58:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  80fa5c:	008020b4 	movhi	r2,130
  80fa60:	10802b04 	addi	r2,r2,172
  80fa64:	10800017 	ldw	r2,0(r2)
  80fa68:	10800c43 	ldbu	r2,49(r2)
  80fa6c:	10803fcc 	andi	r2,r2,255
  80fa70:	1005003a 	cmpeq	r2,r2,zero
  80fa74:	1000221e 	bne	r2,zero,80fb00 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  80fa78:	008020b4 	movhi	r2,130
  80fa7c:	10802b04 	addi	r2,r2,172
  80fa80:	10800017 	ldw	r2,0(r2)
  80fa84:	10800c43 	ldbu	r2,49(r2)
  80fa88:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80fa8c:	008020b4 	movhi	r2,130
  80fa90:	10802b04 	addi	r2,r2,172
  80fa94:	10800017 	ldw	r2,0(r2)
  80fa98:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  80fa9c:	e13ff404 	addi	r4,fp,-48
  80faa0:	081048c0 	call	81048c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  80faa4:	008020b4 	movhi	r2,130
  80faa8:	10802b04 	addi	r2,r2,172
  80faac:	10800017 	ldw	r2,0(r2)
  80fab0:	10000c05 	stb	zero,48(r2)
  80fab4:	e0bff117 	ldw	r2,-60(fp)
  80fab8:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fabc:	e0bfe517 	ldw	r2,-108(fp)
  80fac0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  80fac4:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  80fac8:	e0bff243 	ldbu	r2,-55(fp)
  80facc:	108000a0 	cmpeqi	r2,r2,2
  80fad0:	1000011e 	bne	r2,zero,80fad8 <OSFlagPend+0x52c>
  80fad4:	00000406 	br	80fae8 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  80fad8:	e0c00217 	ldw	r3,8(fp)
  80fadc:	00800384 	movi	r2,14
  80fae0:	18800005 	stb	r2,0(r3)
                 break;
  80fae4:	00000306 	br	80faf4 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  80fae8:	e0c00217 	ldw	r3,8(fp)
  80faec:	00800284 	movi	r2,10
  80faf0:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  80faf4:	e0fff30b 	ldhu	r3,-52(fp)
  80faf8:	e0ffff15 	stw	r3,-4(fp)
  80fafc:	00003606 	br	80fbd8 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  80fb00:	008020b4 	movhi	r2,130
  80fb04:	10802b04 	addi	r2,r2,172
  80fb08:	10800017 	ldw	r2,0(r2)
  80fb0c:	10800b0b 	ldhu	r2,44(r2)
  80fb10:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  80fb14:	e0bff203 	ldbu	r2,-56(fp)
  80fb18:	10800058 	cmpnei	r2,r2,1
  80fb1c:	1000261e 	bne	r2,zero,80fbb8 <OSFlagPend+0x60c>
        switch (wait_type) {
  80fb20:	e0bffb03 	ldbu	r2,-20(fp)
  80fb24:	e0bffd15 	stw	r2,-12(fp)
  80fb28:	e0fffd17 	ldw	r3,-12(fp)
  80fb2c:	1804803a 	cmplt	r2,r3,zero
  80fb30:	1000181e 	bne	r2,zero,80fb94 <OSFlagPend+0x5e8>
  80fb34:	e0fffd17 	ldw	r3,-12(fp)
  80fb38:	18800090 	cmplti	r2,r3,2
  80fb3c:	10000d1e 	bne	r2,zero,80fb74 <OSFlagPend+0x5c8>
  80fb40:	e0fffd17 	ldw	r3,-12(fp)
  80fb44:	18800108 	cmpgei	r2,r3,4
  80fb48:	1000121e 	bne	r2,zero,80fb94 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  80fb4c:	e0bff917 	ldw	r2,-28(fp)
  80fb50:	1080020b 	ldhu	r2,8(r2)
  80fb54:	1007883a 	mov	r3,r2
  80fb58:	e0bff30b 	ldhu	r2,-52(fp)
  80fb5c:	0084303a 	nor	r2,zero,r2
  80fb60:	1884703a 	and	r2,r3,r2
  80fb64:	1007883a 	mov	r3,r2
  80fb68:	e0bff917 	ldw	r2,-28(fp)
  80fb6c:	10c0020d 	sth	r3,8(r2)
                 break;
  80fb70:	00001106 	br	80fbb8 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  80fb74:	e0bff917 	ldw	r2,-28(fp)
  80fb78:	10c0020b 	ldhu	r3,8(r2)
  80fb7c:	e0bff30b 	ldhu	r2,-52(fp)
  80fb80:	1884b03a 	or	r2,r3,r2
  80fb84:	1007883a 	mov	r3,r2
  80fb88:	e0bff917 	ldw	r2,-28(fp)
  80fb8c:	10c0020d 	sth	r3,8(r2)
                 break;
  80fb90:	00000906 	br	80fbb8 <OSFlagPend+0x60c>
  80fb94:	e0bff117 	ldw	r2,-60(fp)
  80fb98:	e0bfe415 	stw	r2,-112(fp)
  80fb9c:	e0bfe417 	ldw	r2,-112(fp)
  80fba0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80fba4:	e0c00217 	ldw	r3,8(fp)
  80fba8:	00801bc4 	movi	r2,111
  80fbac:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80fbb0:	e03fff15 	stw	zero,-4(fp)
  80fbb4:	00000806 	br	80fbd8 <OSFlagPend+0x62c>
  80fbb8:	e0bff117 	ldw	r2,-60(fp)
  80fbbc:	e0bfe315 	stw	r2,-116(fp)
  80fbc0:	e0bfe317 	ldw	r2,-116(fp)
  80fbc4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  80fbc8:	e0800217 	ldw	r2,8(fp)
  80fbcc:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  80fbd0:	e0bff30b 	ldhu	r2,-52(fp)
  80fbd4:	e0bfff15 	stw	r2,-4(fp)
  80fbd8:	e0bfff17 	ldw	r2,-4(fp)
}
  80fbdc:	e037883a 	mov	sp,fp
  80fbe0:	dfc00117 	ldw	ra,4(sp)
  80fbe4:	df000017 	ldw	fp,0(sp)
  80fbe8:	dec00204 	addi	sp,sp,8
  80fbec:	f800283a 	ret

0080fbf0 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  80fbf0:	defffb04 	addi	sp,sp,-20
  80fbf4:	df000415 	stw	fp,16(sp)
  80fbf8:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80fbfc:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fc00:	0005303a 	rdctl	r2,status
  80fc04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fc08:	e0fffd17 	ldw	r3,-12(fp)
  80fc0c:	00bfff84 	movi	r2,-2
  80fc10:	1884703a 	and	r2,r3,r2
  80fc14:	1001703a 	wrctl	status,r2
  
  return context;
  80fc18:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  80fc1c:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  80fc20:	008020b4 	movhi	r2,130
  80fc24:	10802b04 	addi	r2,r2,172
  80fc28:	10800017 	ldw	r2,0(r2)
  80fc2c:	10800b0b 	ldhu	r2,44(r2)
  80fc30:	e0bfff0d 	sth	r2,-4(fp)
  80fc34:	e0bffe17 	ldw	r2,-8(fp)
  80fc38:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fc3c:	e0bffc17 	ldw	r2,-16(fp)
  80fc40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  80fc44:	e0bfff0b 	ldhu	r2,-4(fp)
}
  80fc48:	e037883a 	mov	sp,fp
  80fc4c:	df000017 	ldw	fp,0(sp)
  80fc50:	dec00104 	addi	sp,sp,4
  80fc54:	f800283a 	ret

0080fc58 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  80fc58:	deffed04 	addi	sp,sp,-76
  80fc5c:	dfc01215 	stw	ra,72(sp)
  80fc60:	df001115 	stw	fp,68(sp)
  80fc64:	df001104 	addi	fp,sp,68
  80fc68:	e13ff915 	stw	r4,-28(fp)
  80fc6c:	e1fffc15 	stw	r7,-16(fp)
  80fc70:	e17ffa0d 	sth	r5,-24(fp)
  80fc74:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  80fc78:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  80fc7c:	e0bffc17 	ldw	r2,-16(fp)
  80fc80:	1004c03a 	cmpne	r2,r2,zero
  80fc84:	1000021e 	bne	r2,zero,80fc90 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  80fc88:	e03fff15 	stw	zero,-4(fp)
  80fc8c:	0000d606 	br	80ffe8 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  80fc90:	e0bff917 	ldw	r2,-28(fp)
  80fc94:	1004c03a 	cmpne	r2,r2,zero
  80fc98:	1000051e 	bne	r2,zero,80fcb0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80fc9c:	e0fffc17 	ldw	r3,-16(fp)
  80fca0:	00801b84 	movi	r2,110
  80fca4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80fca8:	e03fff15 	stw	zero,-4(fp)
  80fcac:	0000ce06 	br	80ffe8 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  80fcb0:	e0bff917 	ldw	r2,-28(fp)
  80fcb4:	10800003 	ldbu	r2,0(r2)
  80fcb8:	10803fcc 	andi	r2,r2,255
  80fcbc:	10800160 	cmpeqi	r2,r2,5
  80fcc0:	1000051e 	bne	r2,zero,80fcd8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  80fcc4:	e0fffc17 	ldw	r3,-16(fp)
  80fcc8:	00800044 	movi	r2,1
  80fccc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80fcd0:	e03fff15 	stw	zero,-4(fp)
  80fcd4:	0000c406 	br	80ffe8 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fcd8:	0005303a 	rdctl	r2,status
  80fcdc:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fce0:	e0fff417 	ldw	r3,-48(fp)
  80fce4:	00bfff84 	movi	r2,-2
  80fce8:	1884703a 	and	r2,r3,r2
  80fcec:	1001703a 	wrctl	status,r2
  
  return context;
  80fcf0:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80fcf4:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  80fcf8:	e0bffb03 	ldbu	r2,-20(fp)
  80fcfc:	e0bffe15 	stw	r2,-8(fp)
  80fd00:	e0fffe17 	ldw	r3,-8(fp)
  80fd04:	1805003a 	cmpeq	r2,r3,zero
  80fd08:	1000041e 	bne	r2,zero,80fd1c <OSFlagPost+0xc4>
  80fd0c:	e0fffe17 	ldw	r3,-8(fp)
  80fd10:	18800060 	cmpeqi	r2,r3,1
  80fd14:	10000b1e 	bne	r2,zero,80fd44 <OSFlagPost+0xec>
  80fd18:	00001206 	br	80fd64 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  80fd1c:	e0bff917 	ldw	r2,-28(fp)
  80fd20:	1080020b 	ldhu	r2,8(r2)
  80fd24:	1007883a 	mov	r3,r2
  80fd28:	e0bffa0b 	ldhu	r2,-24(fp)
  80fd2c:	0084303a 	nor	r2,zero,r2
  80fd30:	1884703a 	and	r2,r3,r2
  80fd34:	1007883a 	mov	r3,r2
  80fd38:	e0bff917 	ldw	r2,-28(fp)
  80fd3c:	10c0020d 	sth	r3,8(r2)
             break;
  80fd40:	00001106 	br	80fd88 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  80fd44:	e0bff917 	ldw	r2,-28(fp)
  80fd48:	10c0020b 	ldhu	r3,8(r2)
  80fd4c:	e0bffa0b 	ldhu	r2,-24(fp)
  80fd50:	1884b03a 	or	r2,r3,r2
  80fd54:	1007883a 	mov	r3,r2
  80fd58:	e0bff917 	ldw	r2,-28(fp)
  80fd5c:	10c0020d 	sth	r3,8(r2)
             break;
  80fd60:	00000906 	br	80fd88 <OSFlagPost+0x130>
  80fd64:	e0bff517 	ldw	r2,-44(fp)
  80fd68:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fd6c:	e0bff317 	ldw	r2,-52(fp)
  80fd70:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  80fd74:	e0fffc17 	ldw	r3,-16(fp)
  80fd78:	00801c44 	movi	r2,113
  80fd7c:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  80fd80:	e03fff15 	stw	zero,-4(fp)
  80fd84:	00009806 	br	80ffe8 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  80fd88:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80fd8c:	e0bff917 	ldw	r2,-28(fp)
  80fd90:	10800117 	ldw	r2,4(r2)
  80fd94:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80fd98:	00007506 	br	80ff70 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  80fd9c:	e0bff817 	ldw	r2,-32(fp)
  80fda0:	10800483 	ldbu	r2,18(r2)
  80fda4:	10803fcc 	andi	r2,r2,255
  80fda8:	e0bffd15 	stw	r2,-12(fp)
  80fdac:	e0fffd17 	ldw	r3,-12(fp)
  80fdb0:	18800060 	cmpeqi	r2,r3,1
  80fdb4:	10004d1e 	bne	r2,zero,80feec <OSFlagPost+0x294>
  80fdb8:	e0fffd17 	ldw	r3,-12(fp)
  80fdbc:	18800088 	cmpgei	r2,r3,2
  80fdc0:	1000041e 	bne	r2,zero,80fdd4 <OSFlagPost+0x17c>
  80fdc4:	e0fffd17 	ldw	r3,-12(fp)
  80fdc8:	1805003a 	cmpeq	r2,r3,zero
  80fdcc:	1000301e 	bne	r2,zero,80fe90 <OSFlagPost+0x238>
  80fdd0:	00005b06 	br	80ff40 <OSFlagPost+0x2e8>
  80fdd4:	e0fffd17 	ldw	r3,-12(fp)
  80fdd8:	188000a0 	cmpeqi	r2,r3,2
  80fddc:	1000041e 	bne	r2,zero,80fdf0 <OSFlagPost+0x198>
  80fde0:	e0fffd17 	ldw	r3,-12(fp)
  80fde4:	188000e0 	cmpeqi	r2,r3,3
  80fde8:	1000161e 	bne	r2,zero,80fe44 <OSFlagPost+0x1ec>
  80fdec:	00005406 	br	80ff40 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80fdf0:	e0bff917 	ldw	r2,-28(fp)
  80fdf4:	10c0020b 	ldhu	r3,8(r2)
  80fdf8:	e0bff817 	ldw	r2,-32(fp)
  80fdfc:	1080040b 	ldhu	r2,16(r2)
  80fe00:	1884703a 	and	r2,r3,r2
  80fe04:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80fe08:	e0bff817 	ldw	r2,-32(fp)
  80fe0c:	1080040b 	ldhu	r2,16(r2)
  80fe10:	10ffffcc 	andi	r3,r2,65535
  80fe14:	e0bff68b 	ldhu	r2,-38(fp)
  80fe18:	1880521e 	bne	r3,r2,80ff64 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80fe1c:	e17ff68b 	ldhu	r5,-38(fp)
  80fe20:	e13ff817 	ldw	r4,-32(fp)
  80fe24:	081037c0 	call	81037c <OS_FlagTaskRdy>
  80fe28:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80fe2c:	e0bff603 	ldbu	r2,-40(fp)
  80fe30:	10800058 	cmpnei	r2,r2,1
  80fe34:	10004b1e 	bne	r2,zero,80ff64 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80fe38:	00800044 	movi	r2,1
  80fe3c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80fe40:	00004806 	br	80ff64 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80fe44:	e0bff917 	ldw	r2,-28(fp)
  80fe48:	10c0020b 	ldhu	r3,8(r2)
  80fe4c:	e0bff817 	ldw	r2,-32(fp)
  80fe50:	1080040b 	ldhu	r2,16(r2)
  80fe54:	1884703a 	and	r2,r3,r2
  80fe58:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80fe5c:	e0bff68b 	ldhu	r2,-38(fp)
  80fe60:	1005003a 	cmpeq	r2,r2,zero
  80fe64:	10003f1e 	bne	r2,zero,80ff64 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80fe68:	e17ff68b 	ldhu	r5,-38(fp)
  80fe6c:	e13ff817 	ldw	r4,-32(fp)
  80fe70:	081037c0 	call	81037c <OS_FlagTaskRdy>
  80fe74:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80fe78:	e0bff603 	ldbu	r2,-40(fp)
  80fe7c:	10800058 	cmpnei	r2,r2,1
  80fe80:	1000381e 	bne	r2,zero,80ff64 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80fe84:	00800044 	movi	r2,1
  80fe88:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80fe8c:	00003506 	br	80ff64 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80fe90:	e0bff917 	ldw	r2,-28(fp)
  80fe94:	1080020b 	ldhu	r2,8(r2)
  80fe98:	0084303a 	nor	r2,zero,r2
  80fe9c:	1007883a 	mov	r3,r2
  80fea0:	e0bff817 	ldw	r2,-32(fp)
  80fea4:	1080040b 	ldhu	r2,16(r2)
  80fea8:	1884703a 	and	r2,r3,r2
  80feac:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80feb0:	e0bff817 	ldw	r2,-32(fp)
  80feb4:	1080040b 	ldhu	r2,16(r2)
  80feb8:	10ffffcc 	andi	r3,r2,65535
  80febc:	e0bff68b 	ldhu	r2,-38(fp)
  80fec0:	1880281e 	bne	r3,r2,80ff64 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80fec4:	e17ff68b 	ldhu	r5,-38(fp)
  80fec8:	e13ff817 	ldw	r4,-32(fp)
  80fecc:	081037c0 	call	81037c <OS_FlagTaskRdy>
  80fed0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80fed4:	e0bff603 	ldbu	r2,-40(fp)
  80fed8:	10800058 	cmpnei	r2,r2,1
  80fedc:	1000211e 	bne	r2,zero,80ff64 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80fee0:	00800044 	movi	r2,1
  80fee4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80fee8:	00001e06 	br	80ff64 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80feec:	e0bff917 	ldw	r2,-28(fp)
  80fef0:	1080020b 	ldhu	r2,8(r2)
  80fef4:	0084303a 	nor	r2,zero,r2
  80fef8:	1007883a 	mov	r3,r2
  80fefc:	e0bff817 	ldw	r2,-32(fp)
  80ff00:	1080040b 	ldhu	r2,16(r2)
  80ff04:	1884703a 	and	r2,r3,r2
  80ff08:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80ff0c:	e0bff68b 	ldhu	r2,-38(fp)
  80ff10:	1005003a 	cmpeq	r2,r2,zero
  80ff14:	1000131e 	bne	r2,zero,80ff64 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80ff18:	e17ff68b 	ldhu	r5,-38(fp)
  80ff1c:	e13ff817 	ldw	r4,-32(fp)
  80ff20:	081037c0 	call	81037c <OS_FlagTaskRdy>
  80ff24:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80ff28:	e0bff603 	ldbu	r2,-40(fp)
  80ff2c:	10800058 	cmpnei	r2,r2,1
  80ff30:	10000c1e 	bne	r2,zero,80ff64 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80ff34:	00800044 	movi	r2,1
  80ff38:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80ff3c:	00000906 	br	80ff64 <OSFlagPost+0x30c>
  80ff40:	e0bff517 	ldw	r2,-44(fp)
  80ff44:	e0bff215 	stw	r2,-56(fp)
  80ff48:	e0bff217 	ldw	r2,-56(fp)
  80ff4c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80ff50:	e0fffc17 	ldw	r3,-16(fp)
  80ff54:	00801bc4 	movi	r2,111
  80ff58:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80ff5c:	e03fff15 	stw	zero,-4(fp)
  80ff60:	00002106 	br	80ffe8 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  80ff64:	e0bff817 	ldw	r2,-32(fp)
  80ff68:	10800017 	ldw	r2,0(r2)
  80ff6c:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80ff70:	e0bff817 	ldw	r2,-32(fp)
  80ff74:	1004c03a 	cmpne	r2,r2,zero
  80ff78:	103f881e 	bne	r2,zero,80fd9c <OSFlagPost+0x144>
  80ff7c:	e0bff517 	ldw	r2,-44(fp)
  80ff80:	e0bff115 	stw	r2,-60(fp)
  80ff84:	e0bff117 	ldw	r2,-60(fp)
  80ff88:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  80ff8c:	e0bff783 	ldbu	r2,-34(fp)
  80ff90:	10800058 	cmpnei	r2,r2,1
  80ff94:	1000011e 	bne	r2,zero,80ff9c <OSFlagPost+0x344>
        OS_Sched();
  80ff98:	080e3880 	call	80e388 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ff9c:	0005303a 	rdctl	r2,status
  80ffa0:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ffa4:	e0fff017 	ldw	r3,-64(fp)
  80ffa8:	00bfff84 	movi	r2,-2
  80ffac:	1884703a 	and	r2,r3,r2
  80ffb0:	1001703a 	wrctl	status,r2
  
  return context;
  80ffb4:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  80ffb8:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  80ffbc:	e0bff917 	ldw	r2,-28(fp)
  80ffc0:	1080020b 	ldhu	r2,8(r2)
  80ffc4:	e0bff70d 	sth	r2,-36(fp)
  80ffc8:	e0bff517 	ldw	r2,-44(fp)
  80ffcc:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ffd0:	e0bfef17 	ldw	r2,-68(fp)
  80ffd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  80ffd8:	e0bffc17 	ldw	r2,-16(fp)
  80ffdc:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  80ffe0:	e0bff70b 	ldhu	r2,-36(fp)
  80ffe4:	e0bfff15 	stw	r2,-4(fp)
  80ffe8:	e0bfff17 	ldw	r2,-4(fp)
}
  80ffec:	e037883a 	mov	sp,fp
  80fff0:	dfc00117 	ldw	ra,4(sp)
  80fff4:	df000017 	ldw	fp,0(sp)
  80fff8:	dec00204 	addi	sp,sp,8
  80fffc:	f800283a 	ret

00810000 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  810000:	defff804 	addi	sp,sp,-32
  810004:	df000715 	stw	fp,28(sp)
  810008:	df000704 	addi	fp,sp,28
  81000c:	e13ffd15 	stw	r4,-12(fp)
  810010:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  810014:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  810018:	e0bffe17 	ldw	r2,-8(fp)
  81001c:	1004c03a 	cmpne	r2,r2,zero
  810020:	1000021e 	bne	r2,zero,81002c <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  810024:	e03fff15 	stw	zero,-4(fp)
  810028:	00002506 	br	8100c0 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  81002c:	e0bffd17 	ldw	r2,-12(fp)
  810030:	1004c03a 	cmpne	r2,r2,zero
  810034:	1000051e 	bne	r2,zero,81004c <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  810038:	e0fffe17 	ldw	r3,-8(fp)
  81003c:	00801b84 	movi	r2,110
  810040:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  810044:	e03fff15 	stw	zero,-4(fp)
  810048:	00001d06 	br	8100c0 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  81004c:	e0bffd17 	ldw	r2,-12(fp)
  810050:	10800003 	ldbu	r2,0(r2)
  810054:	10803fcc 	andi	r2,r2,255
  810058:	10800160 	cmpeqi	r2,r2,5
  81005c:	1000051e 	bne	r2,zero,810074 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  810060:	e0fffe17 	ldw	r3,-8(fp)
  810064:	00800044 	movi	r2,1
  810068:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81006c:	e03fff15 	stw	zero,-4(fp)
  810070:	00001306 	br	8100c0 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810074:	0005303a 	rdctl	r2,status
  810078:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81007c:	e0fffa17 	ldw	r3,-24(fp)
  810080:	00bfff84 	movi	r2,-2
  810084:	1884703a 	and	r2,r3,r2
  810088:	1001703a 	wrctl	status,r2
  
  return context;
  81008c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  810090:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  810094:	e0bffd17 	ldw	r2,-12(fp)
  810098:	1080020b 	ldhu	r2,8(r2)
  81009c:	e0bffc0d 	sth	r2,-16(fp)
  8100a0:	e0bffb17 	ldw	r2,-20(fp)
  8100a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8100a8:	e0bff917 	ldw	r2,-28(fp)
  8100ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8100b0:	e0bffe17 	ldw	r2,-8(fp)
  8100b4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  8100b8:	e0bffc0b 	ldhu	r2,-16(fp)
  8100bc:	e0bfff15 	stw	r2,-4(fp)
  8100c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8100c4:	e037883a 	mov	sp,fp
  8100c8:	df000017 	ldw	fp,0(sp)
  8100cc:	dec00104 	addi	sp,sp,4
  8100d0:	f800283a 	ret

008100d4 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  8100d4:	defff804 	addi	sp,sp,-32
  8100d8:	df000715 	stw	fp,28(sp)
  8100dc:	df000704 	addi	fp,sp,28
  8100e0:	e13ffb15 	stw	r4,-20(fp)
  8100e4:	e17ffc15 	stw	r5,-16(fp)
  8100e8:	e0800117 	ldw	r2,4(fp)
  8100ec:	e1bffd0d 	sth	r6,-12(fp)
  8100f0:	e1fffe05 	stb	r7,-8(fp)
  8100f4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  8100f8:	008020b4 	movhi	r2,130
  8100fc:	10802b04 	addi	r2,r2,172
  810100:	10c00017 	ldw	r3,0(r2)
  810104:	008020b4 	movhi	r2,130
  810108:	10802b04 	addi	r2,r2,172
  81010c:	10800017 	ldw	r2,0(r2)
  810110:	10800c03 	ldbu	r2,48(r2)
  810114:	10800814 	ori	r2,r2,32
  810118:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  81011c:	008020b4 	movhi	r2,130
  810120:	10802b04 	addi	r2,r2,172
  810124:	10800017 	ldw	r2,0(r2)
  810128:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  81012c:	008020b4 	movhi	r2,130
  810130:	10802b04 	addi	r2,r2,172
  810134:	10c00017 	ldw	r3,0(r2)
  810138:	e0bfff0b 	ldhu	r2,-4(fp)
  81013c:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  810140:	008020b4 	movhi	r2,130
  810144:	10802b04 	addi	r2,r2,172
  810148:	10c00017 	ldw	r3,0(r2)
  81014c:	e0bffc17 	ldw	r2,-16(fp)
  810150:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  810154:	e0fffc17 	ldw	r3,-16(fp)
  810158:	e0bffd0b 	ldhu	r2,-12(fp)
  81015c:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  810160:	e0fffc17 	ldw	r3,-16(fp)
  810164:	e0bffe03 	ldbu	r2,-8(fp)
  810168:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  81016c:	008020b4 	movhi	r2,130
  810170:	10802b04 	addi	r2,r2,172
  810174:	10c00017 	ldw	r3,0(r2)
  810178:	e0bffc17 	ldw	r2,-16(fp)
  81017c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  810180:	e0bffb17 	ldw	r2,-20(fp)
  810184:	10c00117 	ldw	r3,4(r2)
  810188:	e0bffc17 	ldw	r2,-16(fp)
  81018c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  810190:	e0bffc17 	ldw	r2,-16(fp)
  810194:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  810198:	e0fffc17 	ldw	r3,-16(fp)
  81019c:	e0bffb17 	ldw	r2,-20(fp)
  8101a0:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  8101a4:	e0bffb17 	ldw	r2,-20(fp)
  8101a8:	10800117 	ldw	r2,4(r2)
  8101ac:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  8101b0:	e0bffa17 	ldw	r2,-24(fp)
  8101b4:	1005003a 	cmpeq	r2,r2,zero
  8101b8:	1000031e 	bne	r2,zero,8101c8 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  8101bc:	e0fffa17 	ldw	r3,-24(fp)
  8101c0:	e0bffc17 	ldw	r2,-16(fp)
  8101c4:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  8101c8:	e0fffb17 	ldw	r3,-20(fp)
  8101cc:	e0bffc17 	ldw	r2,-16(fp)
  8101d0:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  8101d4:	008020b4 	movhi	r2,130
  8101d8:	10802b04 	addi	r2,r2,172
  8101dc:	10800017 	ldw	r2,0(r2)
  8101e0:	10800d03 	ldbu	r2,52(r2)
  8101e4:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  8101e8:	e13ff903 	ldbu	r4,-28(fp)
  8101ec:	e0fff903 	ldbu	r3,-28(fp)
  8101f0:	008020b4 	movhi	r2,130
  8101f4:	10802844 	addi	r2,r2,161
  8101f8:	10c5883a 	add	r2,r2,r3
  8101fc:	10800003 	ldbu	r2,0(r2)
  810200:	1007883a 	mov	r3,r2
  810204:	008020b4 	movhi	r2,130
  810208:	10802b04 	addi	r2,r2,172
  81020c:	10800017 	ldw	r2,0(r2)
  810210:	10800d43 	ldbu	r2,53(r2)
  810214:	0084303a 	nor	r2,zero,r2
  810218:	1884703a 	and	r2,r3,r2
  81021c:	1007883a 	mov	r3,r2
  810220:	008020b4 	movhi	r2,130
  810224:	10802844 	addi	r2,r2,161
  810228:	1105883a 	add	r2,r2,r4
  81022c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  810230:	e0fff903 	ldbu	r3,-28(fp)
  810234:	008020b4 	movhi	r2,130
  810238:	10802844 	addi	r2,r2,161
  81023c:	10c5883a 	add	r2,r2,r3
  810240:	10800003 	ldbu	r2,0(r2)
  810244:	10803fcc 	andi	r2,r2,255
  810248:	1004c03a 	cmpne	r2,r2,zero
  81024c:	10000e1e 	bne	r2,zero,810288 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  810250:	008020b4 	movhi	r2,130
  810254:	10802b04 	addi	r2,r2,172
  810258:	10800017 	ldw	r2,0(r2)
  81025c:	10800d83 	ldbu	r2,54(r2)
  810260:	0084303a 	nor	r2,zero,r2
  810264:	1007883a 	mov	r3,r2
  810268:	008020b4 	movhi	r2,130
  81026c:	10802804 	addi	r2,r2,160
  810270:	10800003 	ldbu	r2,0(r2)
  810274:	1884703a 	and	r2,r3,r2
  810278:	1007883a 	mov	r3,r2
  81027c:	008020b4 	movhi	r2,130
  810280:	10802804 	addi	r2,r2,160
  810284:	10c00005 	stb	r3,0(r2)
    }
}
  810288:	e037883a 	mov	sp,fp
  81028c:	df000017 	ldw	fp,0(sp)
  810290:	dec00104 	addi	sp,sp,4
  810294:	f800283a 	ret

00810298 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  810298:	defffb04 	addi	sp,sp,-20
  81029c:	dfc00415 	stw	ra,16(sp)
  8102a0:	df000315 	stw	fp,12(sp)
  8102a4:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  8102a8:	010020f4 	movhi	r4,131
  8102ac:	210abe04 	addi	r4,r4,11000
  8102b0:	0140dc04 	movi	r5,880
  8102b4:	080e2c80 	call	80e2c8 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  8102b8:	008020f4 	movhi	r2,131
  8102bc:	108abe04 	addi	r2,r2,11000
  8102c0:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  8102c4:	008020f4 	movhi	r2,131
  8102c8:	108ac904 	addi	r2,r2,11044
  8102cc:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  8102d0:	e03fff0d 	sth	zero,-4(fp)
  8102d4:	00001306 	br	810324 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8102d8:	e0bffe17 	ldw	r2,-8(fp)
  8102dc:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  8102e0:	e0fffe17 	ldw	r3,-8(fp)
  8102e4:	e0bffd17 	ldw	r2,-12(fp)
  8102e8:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  8102ec:	e0fffe17 	ldw	r3,-8(fp)
  8102f0:	00800fc4 	movi	r2,63
  8102f4:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  8102f8:	e0bffe17 	ldw	r2,-8(fp)
  8102fc:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  810300:	e0bffe17 	ldw	r2,-8(fp)
  810304:	10800b04 	addi	r2,r2,44
  810308:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  81030c:	e0bffd17 	ldw	r2,-12(fp)
  810310:	10800b04 	addi	r2,r2,44
  810314:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  810318:	e0bfff0b 	ldhu	r2,-4(fp)
  81031c:	10800044 	addi	r2,r2,1
  810320:	e0bfff0d 	sth	r2,-4(fp)
  810324:	e0bfff0b 	ldhu	r2,-4(fp)
  810328:	108004f0 	cmpltui	r2,r2,19
  81032c:	103fea1e 	bne	r2,zero,8102d8 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  810330:	e0bffe17 	ldw	r2,-8(fp)
  810334:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  810338:	e0bffe17 	ldw	r2,-8(fp)
  81033c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  810340:	e0fffe17 	ldw	r3,-8(fp)
  810344:	00800fc4 	movi	r2,63
  810348:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  81034c:	e0bffe17 	ldw	r2,-8(fp)
  810350:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  810354:	00c020b4 	movhi	r3,130
  810358:	18c02d04 	addi	r3,r3,180
  81035c:	008020f4 	movhi	r2,131
  810360:	108abe04 	addi	r2,r2,11000
  810364:	18800015 	stw	r2,0(r3)
#endif
}
  810368:	e037883a 	mov	sp,fp
  81036c:	dfc00117 	ldw	ra,4(sp)
  810370:	df000017 	ldw	fp,0(sp)
  810374:	dec00204 	addi	sp,sp,8
  810378:	f800283a 	ret

0081037c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  81037c:	defffa04 	addi	sp,sp,-24
  810380:	dfc00515 	stw	ra,20(sp)
  810384:	df000415 	stw	fp,16(sp)
  810388:	df000404 	addi	fp,sp,16
  81038c:	e13ffe15 	stw	r4,-8(fp)
  810390:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  810394:	e0bffe17 	ldw	r2,-8(fp)
  810398:	10800217 	ldw	r2,8(r2)
  81039c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  8103a0:	e0bffd17 	ldw	r2,-12(fp)
  8103a4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  8103a8:	e0fffd17 	ldw	r3,-12(fp)
  8103ac:	e0bfff0b 	ldhu	r2,-4(fp)
  8103b0:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  8103b4:	e0bffd17 	ldw	r2,-12(fp)
  8103b8:	10c00c03 	ldbu	r3,48(r2)
  8103bc:	00bff7c4 	movi	r2,-33
  8103c0:	1884703a 	and	r2,r3,r2
  8103c4:	1007883a 	mov	r3,r2
  8103c8:	e0bffd17 	ldw	r2,-12(fp)
  8103cc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  8103d0:	e0bffd17 	ldw	r2,-12(fp)
  8103d4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  8103d8:	e0bffd17 	ldw	r2,-12(fp)
  8103dc:	10800c03 	ldbu	r2,48(r2)
  8103e0:	10803fcc 	andi	r2,r2,255
  8103e4:	1004c03a 	cmpne	r2,r2,zero
  8103e8:	10001f1e 	bne	r2,zero,810468 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  8103ec:	e0bffd17 	ldw	r2,-12(fp)
  8103f0:	10c00d83 	ldbu	r3,54(r2)
  8103f4:	008020b4 	movhi	r2,130
  8103f8:	10802804 	addi	r2,r2,160
  8103fc:	10800003 	ldbu	r2,0(r2)
  810400:	1884b03a 	or	r2,r3,r2
  810404:	1007883a 	mov	r3,r2
  810408:	008020b4 	movhi	r2,130
  81040c:	10802804 	addi	r2,r2,160
  810410:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  810414:	e0bffd17 	ldw	r2,-12(fp)
  810418:	10800d03 	ldbu	r2,52(r2)
  81041c:	11003fcc 	andi	r4,r2,255
  810420:	e0bffd17 	ldw	r2,-12(fp)
  810424:	10800d03 	ldbu	r2,52(r2)
  810428:	10c03fcc 	andi	r3,r2,255
  81042c:	008020b4 	movhi	r2,130
  810430:	10802844 	addi	r2,r2,161
  810434:	10c5883a 	add	r2,r2,r3
  810438:	10c00003 	ldbu	r3,0(r2)
  81043c:	e0bffd17 	ldw	r2,-12(fp)
  810440:	10800d43 	ldbu	r2,53(r2)
  810444:	1884b03a 	or	r2,r3,r2
  810448:	1007883a 	mov	r3,r2
  81044c:	008020b4 	movhi	r2,130
  810450:	10802844 	addi	r2,r2,161
  810454:	1105883a 	add	r2,r2,r4
  810458:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  81045c:	00800044 	movi	r2,1
  810460:	e0bffc05 	stb	r2,-16(fp)
  810464:	00000106 	br	81046c <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  810468:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  81046c:	e13ffe17 	ldw	r4,-8(fp)
  810470:	081048c0 	call	81048c <OS_FlagUnlink>
    return (sched);
  810474:	e0bffc03 	ldbu	r2,-16(fp)
}
  810478:	e037883a 	mov	sp,fp
  81047c:	dfc00117 	ldw	ra,4(sp)
  810480:	df000017 	ldw	fp,0(sp)
  810484:	dec00204 	addi	sp,sp,8
  810488:	f800283a 	ret

0081048c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  81048c:	defffa04 	addi	sp,sp,-24
  810490:	df000515 	stw	fp,20(sp)
  810494:	df000504 	addi	fp,sp,20
  810498:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  81049c:	e0bfff17 	ldw	r2,-4(fp)
  8104a0:	10800117 	ldw	r2,4(r2)
  8104a4:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  8104a8:	e0bfff17 	ldw	r2,-4(fp)
  8104ac:	10800017 	ldw	r2,0(r2)
  8104b0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  8104b4:	e0bffc17 	ldw	r2,-16(fp)
  8104b8:	1004c03a 	cmpne	r2,r2,zero
  8104bc:	10000c1e 	bne	r2,zero,8104f0 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  8104c0:	e0bfff17 	ldw	r2,-4(fp)
  8104c4:	10800317 	ldw	r2,12(r2)
  8104c8:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  8104cc:	e0fffd17 	ldw	r3,-12(fp)
  8104d0:	e0bffb17 	ldw	r2,-20(fp)
  8104d4:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  8104d8:	e0bffb17 	ldw	r2,-20(fp)
  8104dc:	1005003a 	cmpeq	r2,r2,zero
  8104e0:	10000c1e 	bne	r2,zero,810514 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  8104e4:	e0bffb17 	ldw	r2,-20(fp)
  8104e8:	10000115 	stw	zero,4(r2)
  8104ec:	00000906 	br	810514 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  8104f0:	e0fffc17 	ldw	r3,-16(fp)
  8104f4:	e0bffb17 	ldw	r2,-20(fp)
  8104f8:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  8104fc:	e0bffb17 	ldw	r2,-20(fp)
  810500:	1005003a 	cmpeq	r2,r2,zero
  810504:	1000031e 	bne	r2,zero,810514 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  810508:	e0fffb17 	ldw	r3,-20(fp)
  81050c:	e0bffc17 	ldw	r2,-16(fp)
  810510:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  810514:	e0bfff17 	ldw	r2,-4(fp)
  810518:	10800217 	ldw	r2,8(r2)
  81051c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  810520:	e0bffe17 	ldw	r2,-8(fp)
  810524:	10000a15 	stw	zero,40(r2)
#endif
}
  810528:	e037883a 	mov	sp,fp
  81052c:	df000017 	ldw	fp,0(sp)
  810530:	dec00104 	addi	sp,sp,4
  810534:	f800283a 	ret

00810538 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  810538:	defff304 	addi	sp,sp,-52
  81053c:	df000c15 	stw	fp,48(sp)
  810540:	df000c04 	addi	fp,sp,48
  810544:	e13ffb15 	stw	r4,-20(fp)
  810548:	e17ffc15 	stw	r5,-16(fp)
  81054c:	e1bffd15 	stw	r6,-12(fp)
  810550:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810554:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  810558:	e0bffe17 	ldw	r2,-8(fp)
  81055c:	1004c03a 	cmpne	r2,r2,zero
  810560:	1000021e 	bne	r2,zero,81056c <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  810564:	e03fff15 	stw	zero,-4(fp)
  810568:	00007506 	br	810740 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  81056c:	e0bffb17 	ldw	r2,-20(fp)
  810570:	1004c03a 	cmpne	r2,r2,zero
  810574:	1000051e 	bne	r2,zero,81058c <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  810578:	e0fffe17 	ldw	r3,-8(fp)
  81057c:	00801884 	movi	r2,98
  810580:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  810584:	e03fff15 	stw	zero,-4(fp)
  810588:	00006d06 	br	810740 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  81058c:	e0bffb17 	ldw	r2,-20(fp)
  810590:	108000cc 	andi	r2,r2,3
  810594:	1005003a 	cmpeq	r2,r2,zero
  810598:	1000051e 	bne	r2,zero,8105b0 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  81059c:	e0fffe17 	ldw	r3,-8(fp)
  8105a0:	00801884 	movi	r2,98
  8105a4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  8105a8:	e03fff15 	stw	zero,-4(fp)
  8105ac:	00006406 	br	810740 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  8105b0:	e0bffc17 	ldw	r2,-16(fp)
  8105b4:	108000a8 	cmpgeui	r2,r2,2
  8105b8:	1000051e 	bne	r2,zero,8105d0 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  8105bc:	e0fffe17 	ldw	r3,-8(fp)
  8105c0:	008016c4 	movi	r2,91
  8105c4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  8105c8:	e03fff15 	stw	zero,-4(fp)
  8105cc:	00005c06 	br	810740 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  8105d0:	e0bffd17 	ldw	r2,-12(fp)
  8105d4:	10800128 	cmpgeui	r2,r2,4
  8105d8:	1000051e 	bne	r2,zero,8105f0 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  8105dc:	e0fffe17 	ldw	r3,-8(fp)
  8105e0:	00801704 	movi	r2,92
  8105e4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  8105e8:	e03fff15 	stw	zero,-4(fp)
  8105ec:	00005406 	br	810740 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8105f0:	0005303a 	rdctl	r2,status
  8105f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8105f8:	e0fff517 	ldw	r3,-44(fp)
  8105fc:	00bfff84 	movi	r2,-2
  810600:	1884703a 	and	r2,r3,r2
  810604:	1001703a 	wrctl	status,r2
  
  return context;
  810608:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81060c:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  810610:	008020b4 	movhi	r2,130
  810614:	10802504 	addi	r2,r2,148
  810618:	10800017 	ldw	r2,0(r2)
  81061c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  810620:	008020b4 	movhi	r2,130
  810624:	10802504 	addi	r2,r2,148
  810628:	10800017 	ldw	r2,0(r2)
  81062c:	1005003a 	cmpeq	r2,r2,zero
  810630:	1000081e 	bne	r2,zero,810654 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  810634:	008020b4 	movhi	r2,130
  810638:	10802504 	addi	r2,r2,148
  81063c:	10800017 	ldw	r2,0(r2)
  810640:	10800117 	ldw	r2,4(r2)
  810644:	1007883a 	mov	r3,r2
  810648:	008020b4 	movhi	r2,130
  81064c:	10802504 	addi	r2,r2,148
  810650:	10c00015 	stw	r3,0(r2)
  810654:	e0bff617 	ldw	r2,-40(fp)
  810658:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81065c:	e0bff417 	ldw	r2,-48(fp)
  810660:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  810664:	e0bffa17 	ldw	r2,-24(fp)
  810668:	1004c03a 	cmpne	r2,r2,zero
  81066c:	1000051e 	bne	r2,zero,810684 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  810670:	e0fffe17 	ldw	r3,-8(fp)
  810674:	00801684 	movi	r2,90
  810678:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81067c:	e03fff15 	stw	zero,-4(fp)
  810680:	00002f06 	br	810740 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  810684:	e0bffb17 	ldw	r2,-20(fp)
  810688:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  81068c:	e0bffb17 	ldw	r2,-20(fp)
  810690:	1007883a 	mov	r3,r2
  810694:	e0bffd17 	ldw	r2,-12(fp)
  810698:	1885883a 	add	r2,r3,r2
  81069c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  8106a0:	e03ff715 	stw	zero,-36(fp)
  8106a4:	00000d06 	br	8106dc <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  8106a8:	e0fff817 	ldw	r3,-32(fp)
  8106ac:	e0bff917 	ldw	r2,-28(fp)
  8106b0:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  8106b4:	e0bff917 	ldw	r2,-28(fp)
  8106b8:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  8106bc:	e0bff917 	ldw	r2,-28(fp)
  8106c0:	1007883a 	mov	r3,r2
  8106c4:	e0bffd17 	ldw	r2,-12(fp)
  8106c8:	1885883a 	add	r2,r3,r2
  8106cc:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  8106d0:	e0bff717 	ldw	r2,-36(fp)
  8106d4:	10800044 	addi	r2,r2,1
  8106d8:	e0bff715 	stw	r2,-36(fp)
  8106dc:	e0bffc17 	ldw	r2,-16(fp)
  8106e0:	10ffffc4 	addi	r3,r2,-1
  8106e4:	e0bff717 	ldw	r2,-36(fp)
  8106e8:	10ffef36 	bltu	r2,r3,8106a8 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  8106ec:	e0bff817 	ldw	r2,-32(fp)
  8106f0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  8106f4:	e0fffa17 	ldw	r3,-24(fp)
  8106f8:	e0bffb17 	ldw	r2,-20(fp)
  8106fc:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  810700:	e0fffa17 	ldw	r3,-24(fp)
  810704:	e0bffb17 	ldw	r2,-20(fp)
  810708:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  81070c:	e0fffa17 	ldw	r3,-24(fp)
  810710:	e0bffc17 	ldw	r2,-16(fp)
  810714:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  810718:	e0fffa17 	ldw	r3,-24(fp)
  81071c:	e0bffc17 	ldw	r2,-16(fp)
  810720:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  810724:	e0fffa17 	ldw	r3,-24(fp)
  810728:	e0bffd17 	ldw	r2,-12(fp)
  81072c:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  810730:	e0bffe17 	ldw	r2,-8(fp)
  810734:	10000005 	stb	zero,0(r2)
    return (pmem);
  810738:	e0bffa17 	ldw	r2,-24(fp)
  81073c:	e0bfff15 	stw	r2,-4(fp)
  810740:	e0bfff17 	ldw	r2,-4(fp)
}
  810744:	e037883a 	mov	sp,fp
  810748:	df000017 	ldw	fp,0(sp)
  81074c:	dec00104 	addi	sp,sp,4
  810750:	f800283a 	ret

00810754 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  810754:	defff704 	addi	sp,sp,-36
  810758:	df000815 	stw	fp,32(sp)
  81075c:	df000804 	addi	fp,sp,32
  810760:	e13ffd15 	stw	r4,-12(fp)
  810764:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810768:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81076c:	e0bffe17 	ldw	r2,-8(fp)
  810770:	1004c03a 	cmpne	r2,r2,zero
  810774:	1000021e 	bne	r2,zero,810780 <OSMemGet+0x2c>
        return ((void *)0);
  810778:	e03fff15 	stw	zero,-4(fp)
  81077c:	00003106 	br	810844 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  810780:	e0bffd17 	ldw	r2,-12(fp)
  810784:	1004c03a 	cmpne	r2,r2,zero
  810788:	1000051e 	bne	r2,zero,8107a0 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81078c:	e0fffe17 	ldw	r3,-8(fp)
  810790:	00801804 	movi	r2,96
  810794:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  810798:	e03fff15 	stw	zero,-4(fp)
  81079c:	00002906 	br	810844 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8107a0:	0005303a 	rdctl	r2,status
  8107a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8107a8:	e0fffa17 	ldw	r3,-24(fp)
  8107ac:	00bfff84 	movi	r2,-2
  8107b0:	1884703a 	and	r2,r3,r2
  8107b4:	1001703a 	wrctl	status,r2
  
  return context;
  8107b8:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8107bc:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  8107c0:	e0bffd17 	ldw	r2,-12(fp)
  8107c4:	10800417 	ldw	r2,16(r2)
  8107c8:	1005003a 	cmpeq	r2,r2,zero
  8107cc:	1000151e 	bne	r2,zero,810824 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  8107d0:	e0bffd17 	ldw	r2,-12(fp)
  8107d4:	10800117 	ldw	r2,4(r2)
  8107d8:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  8107dc:	e0bffc17 	ldw	r2,-16(fp)
  8107e0:	10c00017 	ldw	r3,0(r2)
  8107e4:	e0bffd17 	ldw	r2,-12(fp)
  8107e8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  8107ec:	e0bffd17 	ldw	r2,-12(fp)
  8107f0:	10800417 	ldw	r2,16(r2)
  8107f4:	10ffffc4 	addi	r3,r2,-1
  8107f8:	e0bffd17 	ldw	r2,-12(fp)
  8107fc:	10c00415 	stw	r3,16(r2)
  810800:	e0bffb17 	ldw	r2,-20(fp)
  810804:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810808:	e0bff917 	ldw	r2,-28(fp)
  81080c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  810810:	e0bffe17 	ldw	r2,-8(fp)
  810814:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  810818:	e0bffc17 	ldw	r2,-16(fp)
  81081c:	e0bfff15 	stw	r2,-4(fp)
  810820:	00000806 	br	810844 <OSMemGet+0xf0>
  810824:	e0bffb17 	ldw	r2,-20(fp)
  810828:	e0bff815 	stw	r2,-32(fp)
  81082c:	e0bff817 	ldw	r2,-32(fp)
  810830:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  810834:	e0fffe17 	ldw	r3,-8(fp)
  810838:	00801744 	movi	r2,93
  81083c:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  810840:	e03fff15 	stw	zero,-4(fp)
  810844:	e0bfff17 	ldw	r2,-4(fp)
}
  810848:	e037883a 	mov	sp,fp
  81084c:	df000017 	ldw	fp,0(sp)
  810850:	dec00104 	addi	sp,sp,4
  810854:	f800283a 	ret

00810858 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  810858:	defff604 	addi	sp,sp,-40
  81085c:	dfc00915 	stw	ra,36(sp)
  810860:	df000815 	stw	fp,32(sp)
  810864:	df000804 	addi	fp,sp,32
  810868:	e13ffc15 	stw	r4,-16(fp)
  81086c:	e17ffd15 	stw	r5,-12(fp)
  810870:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810874:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  810878:	e0bffe17 	ldw	r2,-8(fp)
  81087c:	1004c03a 	cmpne	r2,r2,zero
  810880:	1000021e 	bne	r2,zero,81088c <OSMemNameGet+0x34>
        return (0);
  810884:	e03fff15 	stw	zero,-4(fp)
  810888:	00003006 	br	81094c <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  81088c:	e0bffc17 	ldw	r2,-16(fp)
  810890:	1004c03a 	cmpne	r2,r2,zero
  810894:	1000051e 	bne	r2,zero,8108ac <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  810898:	e0fffe17 	ldw	r3,-8(fp)
  81089c:	00801804 	movi	r2,96
  8108a0:	18800005 	stb	r2,0(r3)
        return (0);
  8108a4:	e03fff15 	stw	zero,-4(fp)
  8108a8:	00002806 	br	81094c <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8108ac:	e0bffd17 	ldw	r2,-12(fp)
  8108b0:	1004c03a 	cmpne	r2,r2,zero
  8108b4:	1000051e 	bne	r2,zero,8108cc <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  8108b8:	e0fffe17 	ldw	r3,-8(fp)
  8108bc:	00800304 	movi	r2,12
  8108c0:	18800005 	stb	r2,0(r3)
        return (0);
  8108c4:	e03fff15 	stw	zero,-4(fp)
  8108c8:	00002006 	br	81094c <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8108cc:	008020b4 	movhi	r2,130
  8108d0:	10802a04 	addi	r2,r2,168
  8108d4:	10800003 	ldbu	r2,0(r2)
  8108d8:	10803fcc 	andi	r2,r2,255
  8108dc:	1005003a 	cmpeq	r2,r2,zero
  8108e0:	1000051e 	bne	r2,zero,8108f8 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  8108e4:	e0fffe17 	ldw	r3,-8(fp)
  8108e8:	00800444 	movi	r2,17
  8108ec:	18800005 	stb	r2,0(r3)
        return (0);
  8108f0:	e03fff15 	stw	zero,-4(fp)
  8108f4:	00001506 	br	81094c <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8108f8:	0005303a 	rdctl	r2,status
  8108fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810900:	e0fff917 	ldw	r3,-28(fp)
  810904:	00bfff84 	movi	r2,-2
  810908:	1884703a 	and	r2,r3,r2
  81090c:	1001703a 	wrctl	status,r2
  
  return context;
  810910:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  810914:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  810918:	e0bffc17 	ldw	r2,-16(fp)
  81091c:	11400504 	addi	r5,r2,20
  810920:	e13ffd17 	ldw	r4,-12(fp)
  810924:	080e4cc0 	call	80e4cc <OS_StrCopy>
  810928:	e0bffb05 	stb	r2,-20(fp)
  81092c:	e0bffa17 	ldw	r2,-24(fp)
  810930:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810934:	e0bff817 	ldw	r2,-32(fp)
  810938:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81093c:	e0bffe17 	ldw	r2,-8(fp)
  810940:	10000005 	stb	zero,0(r2)
    return (len);
  810944:	e0bffb03 	ldbu	r2,-20(fp)
  810948:	e0bfff15 	stw	r2,-4(fp)
  81094c:	e0bfff17 	ldw	r2,-4(fp)
}
  810950:	e037883a 	mov	sp,fp
  810954:	dfc00117 	ldw	ra,4(sp)
  810958:	df000017 	ldw	fp,0(sp)
  81095c:	dec00204 	addi	sp,sp,8
  810960:	f800283a 	ret

00810964 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  810964:	defff604 	addi	sp,sp,-40
  810968:	dfc00915 	stw	ra,36(sp)
  81096c:	df000815 	stw	fp,32(sp)
  810970:	df000804 	addi	fp,sp,32
  810974:	e13ffd15 	stw	r4,-12(fp)
  810978:	e17ffe15 	stw	r5,-8(fp)
  81097c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810980:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  810984:	e0bfff17 	ldw	r2,-4(fp)
  810988:	1005003a 	cmpeq	r2,r2,zero
  81098c:	1000381e 	bne	r2,zero,810a70 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  810990:	e0bffd17 	ldw	r2,-12(fp)
  810994:	1004c03a 	cmpne	r2,r2,zero
  810998:	1000041e 	bne	r2,zero,8109ac <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81099c:	e0ffff17 	ldw	r3,-4(fp)
  8109a0:	00801804 	movi	r2,96
  8109a4:	18800005 	stb	r2,0(r3)
        return;
  8109a8:	00003106 	br	810a70 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8109ac:	e0bffe17 	ldw	r2,-8(fp)
  8109b0:	1004c03a 	cmpne	r2,r2,zero
  8109b4:	1000041e 	bne	r2,zero,8109c8 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  8109b8:	e0ffff17 	ldw	r3,-4(fp)
  8109bc:	00800304 	movi	r2,12
  8109c0:	18800005 	stb	r2,0(r3)
        return;
  8109c4:	00002a06 	br	810a70 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8109c8:	008020b4 	movhi	r2,130
  8109cc:	10802a04 	addi	r2,r2,168
  8109d0:	10800003 	ldbu	r2,0(r2)
  8109d4:	10803fcc 	andi	r2,r2,255
  8109d8:	1005003a 	cmpeq	r2,r2,zero
  8109dc:	1000041e 	bne	r2,zero,8109f0 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  8109e0:	e0ffff17 	ldw	r3,-4(fp)
  8109e4:	00800484 	movi	r2,18
  8109e8:	18800005 	stb	r2,0(r3)
        return;
  8109ec:	00002006 	br	810a70 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8109f0:	0005303a 	rdctl	r2,status
  8109f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8109f8:	e0fffa17 	ldw	r3,-24(fp)
  8109fc:	00bfff84 	movi	r2,-2
  810a00:	1884703a 	and	r2,r3,r2
  810a04:	1001703a 	wrctl	status,r2
  
  return context;
  810a08:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  810a0c:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  810a10:	e13ffe17 	ldw	r4,-8(fp)
  810a14:	080e54c0 	call	80e54c <OS_StrLen>
  810a18:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  810a1c:	e0bffc03 	ldbu	r2,-16(fp)
  810a20:	10800830 	cmpltui	r2,r2,32
  810a24:	1000081e 	bne	r2,zero,810a48 <OSMemNameSet+0xe4>
  810a28:	e0bffb17 	ldw	r2,-20(fp)
  810a2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810a30:	e0bff917 	ldw	r2,-28(fp)
  810a34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  810a38:	e0ffff17 	ldw	r3,-4(fp)
  810a3c:	008018c4 	movi	r2,99
  810a40:	18800005 	stb	r2,0(r3)
        return;
  810a44:	00000a06 	br	810a70 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  810a48:	e0bffd17 	ldw	r2,-12(fp)
  810a4c:	11000504 	addi	r4,r2,20
  810a50:	e17ffe17 	ldw	r5,-8(fp)
  810a54:	080e4cc0 	call	80e4cc <OS_StrCopy>
  810a58:	e0bffb17 	ldw	r2,-20(fp)
  810a5c:	e0bff815 	stw	r2,-32(fp)
  810a60:	e0bff817 	ldw	r2,-32(fp)
  810a64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  810a68:	e0bfff17 	ldw	r2,-4(fp)
  810a6c:	10000005 	stb	zero,0(r2)
}
  810a70:	e037883a 	mov	sp,fp
  810a74:	dfc00117 	ldw	ra,4(sp)
  810a78:	df000017 	ldw	fp,0(sp)
  810a7c:	dec00204 	addi	sp,sp,8
  810a80:	f800283a 	ret

00810a84 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  810a84:	defff804 	addi	sp,sp,-32
  810a88:	df000715 	stw	fp,28(sp)
  810a8c:	df000704 	addi	fp,sp,28
  810a90:	e13ffd15 	stw	r4,-12(fp)
  810a94:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810a98:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  810a9c:	e0bffd17 	ldw	r2,-12(fp)
  810aa0:	1004c03a 	cmpne	r2,r2,zero
  810aa4:	1000031e 	bne	r2,zero,810ab4 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  810aa8:	00801804 	movi	r2,96
  810aac:	e0bfff15 	stw	r2,-4(fp)
  810ab0:	00002b06 	br	810b60 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  810ab4:	e0bffe17 	ldw	r2,-8(fp)
  810ab8:	1004c03a 	cmpne	r2,r2,zero
  810abc:	1000031e 	bne	r2,zero,810acc <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  810ac0:	008017c4 	movi	r2,95
  810ac4:	e0bfff15 	stw	r2,-4(fp)
  810ac8:	00002506 	br	810b60 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810acc:	0005303a 	rdctl	r2,status
  810ad0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810ad4:	e0fffb17 	ldw	r3,-20(fp)
  810ad8:	00bfff84 	movi	r2,-2
  810adc:	1884703a 	and	r2,r3,r2
  810ae0:	1001703a 	wrctl	status,r2
  
  return context;
  810ae4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  810ae8:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  810aec:	e0bffd17 	ldw	r2,-12(fp)
  810af0:	10c00417 	ldw	r3,16(r2)
  810af4:	e0bffd17 	ldw	r2,-12(fp)
  810af8:	10800317 	ldw	r2,12(r2)
  810afc:	18800736 	bltu	r3,r2,810b1c <OSMemPut+0x98>
  810b00:	e0bffc17 	ldw	r2,-16(fp)
  810b04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810b08:	e0bffa17 	ldw	r2,-24(fp)
  810b0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  810b10:	00801784 	movi	r2,94
  810b14:	e0bfff15 	stw	r2,-4(fp)
  810b18:	00001106 	br	810b60 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  810b1c:	e0fffe17 	ldw	r3,-8(fp)
  810b20:	e0bffd17 	ldw	r2,-12(fp)
  810b24:	10800117 	ldw	r2,4(r2)
  810b28:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  810b2c:	e0fffd17 	ldw	r3,-12(fp)
  810b30:	e0bffe17 	ldw	r2,-8(fp)
  810b34:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  810b38:	e0bffd17 	ldw	r2,-12(fp)
  810b3c:	10800417 	ldw	r2,16(r2)
  810b40:	10c00044 	addi	r3,r2,1
  810b44:	e0bffd17 	ldw	r2,-12(fp)
  810b48:	10c00415 	stw	r3,16(r2)
  810b4c:	e0bffc17 	ldw	r2,-16(fp)
  810b50:	e0bff915 	stw	r2,-28(fp)
  810b54:	e0bff917 	ldw	r2,-28(fp)
  810b58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  810b5c:	e03fff15 	stw	zero,-4(fp)
  810b60:	e0bfff17 	ldw	r2,-4(fp)
}
  810b64:	e037883a 	mov	sp,fp
  810b68:	df000017 	ldw	fp,0(sp)
  810b6c:	dec00104 	addi	sp,sp,4
  810b70:	f800283a 	ret

00810b74 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  810b74:	defff904 	addi	sp,sp,-28
  810b78:	df000615 	stw	fp,24(sp)
  810b7c:	df000604 	addi	fp,sp,24
  810b80:	e13ffd15 	stw	r4,-12(fp)
  810b84:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810b88:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  810b8c:	e0bffd17 	ldw	r2,-12(fp)
  810b90:	1004c03a 	cmpne	r2,r2,zero
  810b94:	1000031e 	bne	r2,zero,810ba4 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  810b98:	00801804 	movi	r2,96
  810b9c:	e0bfff15 	stw	r2,-4(fp)
  810ba0:	00002e06 	br	810c5c <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  810ba4:	e0bffe17 	ldw	r2,-8(fp)
  810ba8:	1004c03a 	cmpne	r2,r2,zero
  810bac:	1000031e 	bne	r2,zero,810bbc <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  810bb0:	00801844 	movi	r2,97
  810bb4:	e0bfff15 	stw	r2,-4(fp)
  810bb8:	00002806 	br	810c5c <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810bbc:	0005303a 	rdctl	r2,status
  810bc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810bc4:	e0fffb17 	ldw	r3,-20(fp)
  810bc8:	00bfff84 	movi	r2,-2
  810bcc:	1884703a 	and	r2,r3,r2
  810bd0:	1001703a 	wrctl	status,r2
  
  return context;
  810bd4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  810bd8:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  810bdc:	e0bffd17 	ldw	r2,-12(fp)
  810be0:	10c00017 	ldw	r3,0(r2)
  810be4:	e0bffe17 	ldw	r2,-8(fp)
  810be8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  810bec:	e0bffd17 	ldw	r2,-12(fp)
  810bf0:	10c00117 	ldw	r3,4(r2)
  810bf4:	e0bffe17 	ldw	r2,-8(fp)
  810bf8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  810bfc:	e0bffd17 	ldw	r2,-12(fp)
  810c00:	10c00217 	ldw	r3,8(r2)
  810c04:	e0bffe17 	ldw	r2,-8(fp)
  810c08:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  810c0c:	e0bffd17 	ldw	r2,-12(fp)
  810c10:	10c00317 	ldw	r3,12(r2)
  810c14:	e0bffe17 	ldw	r2,-8(fp)
  810c18:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  810c1c:	e0bffd17 	ldw	r2,-12(fp)
  810c20:	10c00417 	ldw	r3,16(r2)
  810c24:	e0bffe17 	ldw	r2,-8(fp)
  810c28:	10c00415 	stw	r3,16(r2)
  810c2c:	e0bffc17 	ldw	r2,-16(fp)
  810c30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810c34:	e0bffa17 	ldw	r2,-24(fp)
  810c38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  810c3c:	e0bffe17 	ldw	r2,-8(fp)
  810c40:	10c00317 	ldw	r3,12(r2)
  810c44:	e0bffe17 	ldw	r2,-8(fp)
  810c48:	10800417 	ldw	r2,16(r2)
  810c4c:	1887c83a 	sub	r3,r3,r2
  810c50:	e0bffe17 	ldw	r2,-8(fp)
  810c54:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  810c58:	e03fff15 	stw	zero,-4(fp)
  810c5c:	e0bfff17 	ldw	r2,-4(fp)
}
  810c60:	e037883a 	mov	sp,fp
  810c64:	df000017 	ldw	fp,0(sp)
  810c68:	dec00104 	addi	sp,sp,4
  810c6c:	f800283a 	ret

00810c70 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  810c70:	defffc04 	addi	sp,sp,-16
  810c74:	dfc00315 	stw	ra,12(sp)
  810c78:	df000215 	stw	fp,8(sp)
  810c7c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  810c80:	010020f4 	movhi	r4,131
  810c84:	210b9a04 	addi	r4,r4,11880
  810c88:	01430c04 	movi	r5,3120
  810c8c:	080e2c80 	call	80e2c8 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  810c90:	008020f4 	movhi	r2,131
  810c94:	108b9a04 	addi	r2,r2,11880
  810c98:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  810c9c:	e03ffe0d 	sth	zero,-8(fp)
  810ca0:	00001306 	br	810cf0 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  810ca4:	e0bffe0b 	ldhu	r2,-8(fp)
  810ca8:	10800d24 	muli	r2,r2,52
  810cac:	1007883a 	mov	r3,r2
  810cb0:	008020f4 	movhi	r2,131
  810cb4:	108ba704 	addi	r2,r2,11932
  810cb8:	1887883a 	add	r3,r3,r2
  810cbc:	e0bfff17 	ldw	r2,-4(fp)
  810cc0:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  810cc4:	e0ffff17 	ldw	r3,-4(fp)
  810cc8:	00800fc4 	movi	r2,63
  810ccc:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  810cd0:	e0bfff17 	ldw	r2,-4(fp)
  810cd4:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  810cd8:	e0bfff17 	ldw	r2,-4(fp)
  810cdc:	10800d04 	addi	r2,r2,52
  810ce0:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  810ce4:	e0bffe0b 	ldhu	r2,-8(fp)
  810ce8:	10800044 	addi	r2,r2,1
  810cec:	e0bffe0d 	sth	r2,-8(fp)
  810cf0:	e0bffe0b 	ldhu	r2,-8(fp)
  810cf4:	10800ef0 	cmpltui	r2,r2,59
  810cf8:	103fea1e 	bne	r2,zero,810ca4 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  810cfc:	e0bfff17 	ldw	r2,-4(fp)
  810d00:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  810d04:	e0ffff17 	ldw	r3,-4(fp)
  810d08:	00800fc4 	movi	r2,63
  810d0c:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  810d10:	e0bfff17 	ldw	r2,-4(fp)
  810d14:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  810d18:	00c020b4 	movhi	r3,130
  810d1c:	18c02504 	addi	r3,r3,148
  810d20:	008020f4 	movhi	r2,131
  810d24:	108b9a04 	addi	r2,r2,11880
  810d28:	18800015 	stw	r2,0(r3)
#endif
}
  810d2c:	e037883a 	mov	sp,fp
  810d30:	dfc00117 	ldw	ra,4(sp)
  810d34:	df000017 	ldw	fp,0(sp)
  810d38:	dec00204 	addi	sp,sp,8
  810d3c:	f800283a 	ret

00810d40 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  810d40:	defff704 	addi	sp,sp,-36
  810d44:	df000815 	stw	fp,32(sp)
  810d48:	df000804 	addi	fp,sp,32
  810d4c:	e13ffd15 	stw	r4,-12(fp)
  810d50:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810d54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  810d58:	e0bffe17 	ldw	r2,-8(fp)
  810d5c:	1004c03a 	cmpne	r2,r2,zero
  810d60:	1000021e 	bne	r2,zero,810d6c <OSQAccept+0x2c>
        return ((void *)0);
  810d64:	e03fff15 	stw	zero,-4(fp)
  810d68:	00004506 	br	810e80 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  810d6c:	e0bffd17 	ldw	r2,-12(fp)
  810d70:	1004c03a 	cmpne	r2,r2,zero
  810d74:	1000051e 	bne	r2,zero,810d8c <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  810d78:	e0fffe17 	ldw	r3,-8(fp)
  810d7c:	00800104 	movi	r2,4
  810d80:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  810d84:	e03fff15 	stw	zero,-4(fp)
  810d88:	00003d06 	br	810e80 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  810d8c:	e0bffd17 	ldw	r2,-12(fp)
  810d90:	10800003 	ldbu	r2,0(r2)
  810d94:	10803fcc 	andi	r2,r2,255
  810d98:	108000a0 	cmpeqi	r2,r2,2
  810d9c:	1000051e 	bne	r2,zero,810db4 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  810da0:	e0fffe17 	ldw	r3,-8(fp)
  810da4:	00800044 	movi	r2,1
  810da8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  810dac:	e03fff15 	stw	zero,-4(fp)
  810db0:	00003306 	br	810e80 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810db4:	0005303a 	rdctl	r2,status
  810db8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810dbc:	e0fff917 	ldw	r3,-28(fp)
  810dc0:	00bfff84 	movi	r2,-2
  810dc4:	1884703a 	and	r2,r3,r2
  810dc8:	1001703a 	wrctl	status,r2
  
  return context;
  810dcc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  810dd0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  810dd4:	e0bffd17 	ldw	r2,-12(fp)
  810dd8:	10800117 	ldw	r2,4(r2)
  810ddc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  810de0:	e0bffb17 	ldw	r2,-20(fp)
  810de4:	1080058b 	ldhu	r2,22(r2)
  810de8:	10bfffcc 	andi	r2,r2,65535
  810dec:	1005003a 	cmpeq	r2,r2,zero
  810df0:	1000191e 	bne	r2,zero,810e58 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  810df4:	e0bffb17 	ldw	r2,-20(fp)
  810df8:	10c00417 	ldw	r3,16(r2)
  810dfc:	18800017 	ldw	r2,0(r3)
  810e00:	e0bffc15 	stw	r2,-16(fp)
  810e04:	18c00104 	addi	r3,r3,4
  810e08:	e0bffb17 	ldw	r2,-20(fp)
  810e0c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  810e10:	e0bffb17 	ldw	r2,-20(fp)
  810e14:	1080058b 	ldhu	r2,22(r2)
  810e18:	10bfffc4 	addi	r2,r2,-1
  810e1c:	1007883a 	mov	r3,r2
  810e20:	e0bffb17 	ldw	r2,-20(fp)
  810e24:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  810e28:	e0bffb17 	ldw	r2,-20(fp)
  810e2c:	10c00417 	ldw	r3,16(r2)
  810e30:	e0bffb17 	ldw	r2,-20(fp)
  810e34:	10800217 	ldw	r2,8(r2)
  810e38:	1880041e 	bne	r3,r2,810e4c <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  810e3c:	e0bffb17 	ldw	r2,-20(fp)
  810e40:	10c00117 	ldw	r3,4(r2)
  810e44:	e0bffb17 	ldw	r2,-20(fp)
  810e48:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  810e4c:	e0bffe17 	ldw	r2,-8(fp)
  810e50:	10000005 	stb	zero,0(r2)
  810e54:	00000406 	br	810e68 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  810e58:	e0fffe17 	ldw	r3,-8(fp)
  810e5c:	008007c4 	movi	r2,31
  810e60:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  810e64:	e03ffc15 	stw	zero,-16(fp)
  810e68:	e0bffa17 	ldw	r2,-24(fp)
  810e6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810e70:	e0bff817 	ldw	r2,-32(fp)
  810e74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  810e78:	e0bffc17 	ldw	r2,-16(fp)
  810e7c:	e0bfff15 	stw	r2,-4(fp)
  810e80:	e0bfff17 	ldw	r2,-4(fp)
}
  810e84:	e037883a 	mov	sp,fp
  810e88:	df000017 	ldw	fp,0(sp)
  810e8c:	dec00104 	addi	sp,sp,4
  810e90:	f800283a 	ret

00810e94 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  810e94:	defff304 	addi	sp,sp,-52
  810e98:	dfc00c15 	stw	ra,48(sp)
  810e9c:	df000b15 	stw	fp,44(sp)
  810ea0:	df000b04 	addi	fp,sp,44
  810ea4:	e13ffd15 	stw	r4,-12(fp)
  810ea8:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  810eac:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  810eb0:	008020b4 	movhi	r2,130
  810eb4:	10802a04 	addi	r2,r2,168
  810eb8:	10800003 	ldbu	r2,0(r2)
  810ebc:	10803fcc 	andi	r2,r2,255
  810ec0:	1005003a 	cmpeq	r2,r2,zero
  810ec4:	1000021e 	bne	r2,zero,810ed0 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  810ec8:	e03fff15 	stw	zero,-4(fp)
  810ecc:	00007006 	br	811090 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810ed0:	0005303a 	rdctl	r2,status
  810ed4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810ed8:	e0fff917 	ldw	r3,-28(fp)
  810edc:	00bfff84 	movi	r2,-2
  810ee0:	1884703a 	and	r2,r3,r2
  810ee4:	1001703a 	wrctl	status,r2
  
  return context;
  810ee8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  810eec:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  810ef0:	008020b4 	movhi	r2,130
  810ef4:	10802904 	addi	r2,r2,164
  810ef8:	10800017 	ldw	r2,0(r2)
  810efc:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  810f00:	008020b4 	movhi	r2,130
  810f04:	10802904 	addi	r2,r2,164
  810f08:	10800017 	ldw	r2,0(r2)
  810f0c:	1005003a 	cmpeq	r2,r2,zero
  810f10:	1000081e 	bne	r2,zero,810f34 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  810f14:	008020b4 	movhi	r2,130
  810f18:	10802904 	addi	r2,r2,164
  810f1c:	10800017 	ldw	r2,0(r2)
  810f20:	10800117 	ldw	r2,4(r2)
  810f24:	1007883a 	mov	r3,r2
  810f28:	008020b4 	movhi	r2,130
  810f2c:	10802904 	addi	r2,r2,164
  810f30:	10c00015 	stw	r3,0(r2)
  810f34:	e0bffa17 	ldw	r2,-24(fp)
  810f38:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810f3c:	e0bff817 	ldw	r2,-32(fp)
  810f40:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  810f44:	e0bffc17 	ldw	r2,-16(fp)
  810f48:	1005003a 	cmpeq	r2,r2,zero
  810f4c:	10004e1e 	bne	r2,zero,811088 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810f50:	0005303a 	rdctl	r2,status
  810f54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810f58:	e0fff717 	ldw	r3,-36(fp)
  810f5c:	00bfff84 	movi	r2,-2
  810f60:	1884703a 	and	r2,r3,r2
  810f64:	1001703a 	wrctl	status,r2
  
  return context;
  810f68:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  810f6c:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  810f70:	008020b4 	movhi	r2,130
  810f74:	10802704 	addi	r2,r2,156
  810f78:	10800017 	ldw	r2,0(r2)
  810f7c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  810f80:	e0bffb17 	ldw	r2,-20(fp)
  810f84:	1005003a 	cmpeq	r2,r2,zero
  810f88:	1000311e 	bne	r2,zero,811050 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  810f8c:	008020b4 	movhi	r2,130
  810f90:	10802704 	addi	r2,r2,156
  810f94:	10800017 	ldw	r2,0(r2)
  810f98:	10c00017 	ldw	r3,0(r2)
  810f9c:	008020b4 	movhi	r2,130
  810fa0:	10802704 	addi	r2,r2,156
  810fa4:	10c00015 	stw	r3,0(r2)
  810fa8:	e0bffa17 	ldw	r2,-24(fp)
  810fac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810fb0:	e0bff617 	ldw	r2,-40(fp)
  810fb4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  810fb8:	e0fffb17 	ldw	r3,-20(fp)
  810fbc:	e0bffd17 	ldw	r2,-12(fp)
  810fc0:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  810fc4:	e0bffe0b 	ldhu	r2,-8(fp)
  810fc8:	1085883a 	add	r2,r2,r2
  810fcc:	1085883a 	add	r2,r2,r2
  810fd0:	1007883a 	mov	r3,r2
  810fd4:	e0bffd17 	ldw	r2,-12(fp)
  810fd8:	1887883a 	add	r3,r3,r2
  810fdc:	e0bffb17 	ldw	r2,-20(fp)
  810fe0:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  810fe4:	e0fffb17 	ldw	r3,-20(fp)
  810fe8:	e0bffd17 	ldw	r2,-12(fp)
  810fec:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  810ff0:	e0fffb17 	ldw	r3,-20(fp)
  810ff4:	e0bffd17 	ldw	r2,-12(fp)
  810ff8:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  810ffc:	e0fffb17 	ldw	r3,-20(fp)
  811000:	e0bffe0b 	ldhu	r2,-8(fp)
  811004:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  811008:	e0bffb17 	ldw	r2,-20(fp)
  81100c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  811010:	e0fffc17 	ldw	r3,-16(fp)
  811014:	00800084 	movi	r2,2
  811018:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  81101c:	e0bffc17 	ldw	r2,-16(fp)
  811020:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  811024:	e0fffc17 	ldw	r3,-16(fp)
  811028:	e0bffb17 	ldw	r2,-20(fp)
  81102c:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  811030:	e0fffc17 	ldw	r3,-16(fp)
  811034:	00800fc4 	movi	r2,63
  811038:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  81103c:	e0bffc17 	ldw	r2,-16(fp)
  811040:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  811044:	e13ffc17 	ldw	r4,-16(fp)
  811048:	080defc0 	call	80defc <OS_EventWaitListInit>
  81104c:	00000e06 	br	811088 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  811050:	008020b4 	movhi	r2,130
  811054:	10802904 	addi	r2,r2,164
  811058:	10c00017 	ldw	r3,0(r2)
  81105c:	e0bffc17 	ldw	r2,-16(fp)
  811060:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  811064:	00c020b4 	movhi	r3,130
  811068:	18c02904 	addi	r3,r3,164
  81106c:	e0bffc17 	ldw	r2,-16(fp)
  811070:	18800015 	stw	r2,0(r3)
  811074:	e0bffa17 	ldw	r2,-24(fp)
  811078:	e0bff515 	stw	r2,-44(fp)
  81107c:	e0bff517 	ldw	r2,-44(fp)
  811080:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  811084:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  811088:	e0bffc17 	ldw	r2,-16(fp)
  81108c:	e0bfff15 	stw	r2,-4(fp)
  811090:	e0bfff17 	ldw	r2,-4(fp)
}
  811094:	e037883a 	mov	sp,fp
  811098:	dfc00117 	ldw	ra,4(sp)
  81109c:	df000017 	ldw	fp,0(sp)
  8110a0:	dec00204 	addi	sp,sp,8
  8110a4:	f800283a 	ret

008110a8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8110a8:	defff004 	addi	sp,sp,-64
  8110ac:	dfc00f15 	stw	ra,60(sp)
  8110b0:	df000e15 	stw	fp,56(sp)
  8110b4:	df000e04 	addi	fp,sp,56
  8110b8:	e13ffb15 	stw	r4,-20(fp)
  8110bc:	e1bffd15 	stw	r6,-12(fp)
  8110c0:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8110c4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8110c8:	e0bffd17 	ldw	r2,-12(fp)
  8110cc:	1004c03a 	cmpne	r2,r2,zero
  8110d0:	1000031e 	bne	r2,zero,8110e0 <OSQDel+0x38>
        return (pevent);
  8110d4:	e0bffb17 	ldw	r2,-20(fp)
  8110d8:	e0bfff15 	stw	r2,-4(fp)
  8110dc:	0000ac06 	br	811390 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8110e0:	e0bffb17 	ldw	r2,-20(fp)
  8110e4:	1004c03a 	cmpne	r2,r2,zero
  8110e8:	1000061e 	bne	r2,zero,811104 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  8110ec:	e0fffd17 	ldw	r3,-12(fp)
  8110f0:	00800104 	movi	r2,4
  8110f4:	18800005 	stb	r2,0(r3)
        return (pevent);
  8110f8:	e0fffb17 	ldw	r3,-20(fp)
  8110fc:	e0ffff15 	stw	r3,-4(fp)
  811100:	0000a306 	br	811390 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  811104:	e0bffb17 	ldw	r2,-20(fp)
  811108:	10800003 	ldbu	r2,0(r2)
  81110c:	10803fcc 	andi	r2,r2,255
  811110:	108000a0 	cmpeqi	r2,r2,2
  811114:	1000061e 	bne	r2,zero,811130 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  811118:	e0fffd17 	ldw	r3,-12(fp)
  81111c:	00800044 	movi	r2,1
  811120:	18800005 	stb	r2,0(r3)
        return (pevent);
  811124:	e0bffb17 	ldw	r2,-20(fp)
  811128:	e0bfff15 	stw	r2,-4(fp)
  81112c:	00009806 	br	811390 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  811130:	008020b4 	movhi	r2,130
  811134:	10802a04 	addi	r2,r2,168
  811138:	10800003 	ldbu	r2,0(r2)
  81113c:	10803fcc 	andi	r2,r2,255
  811140:	1005003a 	cmpeq	r2,r2,zero
  811144:	1000061e 	bne	r2,zero,811160 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  811148:	e0fffd17 	ldw	r3,-12(fp)
  81114c:	008003c4 	movi	r2,15
  811150:	18800005 	stb	r2,0(r3)
        return (pevent);
  811154:	e0fffb17 	ldw	r3,-20(fp)
  811158:	e0ffff15 	stw	r3,-4(fp)
  81115c:	00008c06 	br	811390 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811160:	0005303a 	rdctl	r2,status
  811164:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811168:	e0fff617 	ldw	r3,-40(fp)
  81116c:	00bfff84 	movi	r2,-2
  811170:	1884703a 	and	r2,r3,r2
  811174:	1001703a 	wrctl	status,r2
  
  return context;
  811178:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  81117c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  811180:	e0bffb17 	ldw	r2,-20(fp)
  811184:	10800283 	ldbu	r2,10(r2)
  811188:	10803fcc 	andi	r2,r2,255
  81118c:	1005003a 	cmpeq	r2,r2,zero
  811190:	1000031e 	bne	r2,zero,8111a0 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  811194:	00800044 	movi	r2,1
  811198:	e0bffa05 	stb	r2,-24(fp)
  81119c:	00000106 	br	8111a4 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  8111a0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  8111a4:	e0bffc03 	ldbu	r2,-16(fp)
  8111a8:	e0bffe15 	stw	r2,-8(fp)
  8111ac:	e0fffe17 	ldw	r3,-8(fp)
  8111b0:	1805003a 	cmpeq	r2,r3,zero
  8111b4:	1000041e 	bne	r2,zero,8111c8 <OSQDel+0x120>
  8111b8:	e0fffe17 	ldw	r3,-8(fp)
  8111bc:	18800060 	cmpeqi	r2,r3,1
  8111c0:	1000391e 	bne	r2,zero,8112a8 <OSQDel+0x200>
  8111c4:	00006706 	br	811364 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  8111c8:	e0bffa03 	ldbu	r2,-24(fp)
  8111cc:	1004c03a 	cmpne	r2,r2,zero
  8111d0:	1000261e 	bne	r2,zero,81126c <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  8111d4:	e0fffb17 	ldw	r3,-20(fp)
  8111d8:	00800fc4 	movi	r2,63
  8111dc:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  8111e0:	e0bffb17 	ldw	r2,-20(fp)
  8111e4:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  8111e8:	e0bffb17 	ldw	r2,-20(fp)
  8111ec:	10800117 	ldw	r2,4(r2)
  8111f0:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  8111f4:	008020b4 	movhi	r2,130
  8111f8:	10802704 	addi	r2,r2,156
  8111fc:	10c00017 	ldw	r3,0(r2)
  811200:	e0bff817 	ldw	r2,-32(fp)
  811204:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  811208:	00c020b4 	movhi	r3,130
  81120c:	18c02704 	addi	r3,r3,156
  811210:	e0bff817 	ldw	r2,-32(fp)
  811214:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  811218:	e0bffb17 	ldw	r2,-20(fp)
  81121c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  811220:	008020b4 	movhi	r2,130
  811224:	10802904 	addi	r2,r2,164
  811228:	10c00017 	ldw	r3,0(r2)
  81122c:	e0bffb17 	ldw	r2,-20(fp)
  811230:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  811234:	e0bffb17 	ldw	r2,-20(fp)
  811238:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  81123c:	00c020b4 	movhi	r3,130
  811240:	18c02904 	addi	r3,r3,164
  811244:	e0bffb17 	ldw	r2,-20(fp)
  811248:	18800015 	stw	r2,0(r3)
  81124c:	e0bff717 	ldw	r2,-36(fp)
  811250:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811254:	e0bff517 	ldw	r2,-44(fp)
  811258:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  81125c:	e0bffd17 	ldw	r2,-12(fp)
  811260:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  811264:	e03ff915 	stw	zero,-28(fp)
  811268:	00004706 	br	811388 <OSQDel+0x2e0>
  81126c:	e0bff717 	ldw	r2,-36(fp)
  811270:	e0bff415 	stw	r2,-48(fp)
  811274:	e0bff417 	ldw	r2,-48(fp)
  811278:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  81127c:	e0fffd17 	ldw	r3,-12(fp)
  811280:	00801244 	movi	r2,73
  811284:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  811288:	e0bffb17 	ldw	r2,-20(fp)
  81128c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  811290:	00003d06 	br	811388 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  811294:	e13ffb17 	ldw	r4,-20(fp)
  811298:	000b883a 	mov	r5,zero
  81129c:	01800104 	movi	r6,4
  8112a0:	000f883a 	mov	r7,zero
  8112a4:	080d9480 	call	80d948 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  8112a8:	e0bffb17 	ldw	r2,-20(fp)
  8112ac:	10800283 	ldbu	r2,10(r2)
  8112b0:	10803fcc 	andi	r2,r2,255
  8112b4:	1004c03a 	cmpne	r2,r2,zero
  8112b8:	103ff61e 	bne	r2,zero,811294 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  8112bc:	e0fffb17 	ldw	r3,-20(fp)
  8112c0:	00800fc4 	movi	r2,63
  8112c4:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  8112c8:	e0bffb17 	ldw	r2,-20(fp)
  8112cc:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  8112d0:	e0bffb17 	ldw	r2,-20(fp)
  8112d4:	10800117 	ldw	r2,4(r2)
  8112d8:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  8112dc:	008020b4 	movhi	r2,130
  8112e0:	10802704 	addi	r2,r2,156
  8112e4:	10c00017 	ldw	r3,0(r2)
  8112e8:	e0bff817 	ldw	r2,-32(fp)
  8112ec:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  8112f0:	00c020b4 	movhi	r3,130
  8112f4:	18c02704 	addi	r3,r3,156
  8112f8:	e0bff817 	ldw	r2,-32(fp)
  8112fc:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  811300:	e0bffb17 	ldw	r2,-20(fp)
  811304:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  811308:	008020b4 	movhi	r2,130
  81130c:	10802904 	addi	r2,r2,164
  811310:	10c00017 	ldw	r3,0(r2)
  811314:	e0bffb17 	ldw	r2,-20(fp)
  811318:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  81131c:	e0bffb17 	ldw	r2,-20(fp)
  811320:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  811324:	00c020b4 	movhi	r3,130
  811328:	18c02904 	addi	r3,r3,164
  81132c:	e0bffb17 	ldw	r2,-20(fp)
  811330:	18800015 	stw	r2,0(r3)
  811334:	e0bff717 	ldw	r2,-36(fp)
  811338:	e0bff315 	stw	r2,-52(fp)
  81133c:	e0bff317 	ldw	r2,-52(fp)
  811340:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  811344:	e0bffa03 	ldbu	r2,-24(fp)
  811348:	10800058 	cmpnei	r2,r2,1
  81134c:	1000011e 	bne	r2,zero,811354 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  811350:	080e3880 	call	80e388 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  811354:	e0bffd17 	ldw	r2,-12(fp)
  811358:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  81135c:	e03ff915 	stw	zero,-28(fp)
             break;
  811360:	00000906 	br	811388 <OSQDel+0x2e0>
  811364:	e0bff717 	ldw	r2,-36(fp)
  811368:	e0bff215 	stw	r2,-56(fp)
  81136c:	e0bff217 	ldw	r2,-56(fp)
  811370:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  811374:	e0fffd17 	ldw	r3,-12(fp)
  811378:	008001c4 	movi	r2,7
  81137c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  811380:	e0bffb17 	ldw	r2,-20(fp)
  811384:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  811388:	e0bff917 	ldw	r2,-28(fp)
  81138c:	e0bfff15 	stw	r2,-4(fp)
  811390:	e0bfff17 	ldw	r2,-4(fp)
}
  811394:	e037883a 	mov	sp,fp
  811398:	dfc00117 	ldw	ra,4(sp)
  81139c:	df000017 	ldw	fp,0(sp)
  8113a0:	dec00204 	addi	sp,sp,8
  8113a4:	f800283a 	ret

008113a8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  8113a8:	defff904 	addi	sp,sp,-28
  8113ac:	df000615 	stw	fp,24(sp)
  8113b0:	df000604 	addi	fp,sp,24
  8113b4:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8113b8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8113bc:	e0bffe17 	ldw	r2,-8(fp)
  8113c0:	1004c03a 	cmpne	r2,r2,zero
  8113c4:	1000031e 	bne	r2,zero,8113d4 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  8113c8:	00800104 	movi	r2,4
  8113cc:	e0bfff15 	stw	r2,-4(fp)
  8113d0:	00002206 	br	81145c <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  8113d4:	e0bffe17 	ldw	r2,-8(fp)
  8113d8:	10800003 	ldbu	r2,0(r2)
  8113dc:	10803fcc 	andi	r2,r2,255
  8113e0:	108000a0 	cmpeqi	r2,r2,2
  8113e4:	1000031e 	bne	r2,zero,8113f4 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  8113e8:	00800044 	movi	r2,1
  8113ec:	e0bfff15 	stw	r2,-4(fp)
  8113f0:	00001a06 	br	81145c <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8113f4:	0005303a 	rdctl	r2,status
  8113f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8113fc:	e0fffb17 	ldw	r3,-20(fp)
  811400:	00bfff84 	movi	r2,-2
  811404:	1884703a 	and	r2,r3,r2
  811408:	1001703a 	wrctl	status,r2
  
  return context;
  81140c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811410:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  811414:	e0bffe17 	ldw	r2,-8(fp)
  811418:	10800117 	ldw	r2,4(r2)
  81141c:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  811420:	e0bffd17 	ldw	r2,-12(fp)
  811424:	10c00117 	ldw	r3,4(r2)
  811428:	e0bffd17 	ldw	r2,-12(fp)
  81142c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  811430:	e0bffd17 	ldw	r2,-12(fp)
  811434:	10c00117 	ldw	r3,4(r2)
  811438:	e0bffd17 	ldw	r2,-12(fp)
  81143c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  811440:	e0bffd17 	ldw	r2,-12(fp)
  811444:	1000058d 	sth	zero,22(r2)
  811448:	e0bffc17 	ldw	r2,-16(fp)
  81144c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811450:	e0bffa17 	ldw	r2,-24(fp)
  811454:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  811458:	e03fff15 	stw	zero,-4(fp)
  81145c:	e0bfff17 	ldw	r2,-4(fp)
}
  811460:	e037883a 	mov	sp,fp
  811464:	df000017 	ldw	fp,0(sp)
  811468:	dec00104 	addi	sp,sp,4
  81146c:	f800283a 	ret

00811470 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  811470:	defff104 	addi	sp,sp,-60
  811474:	dfc00e15 	stw	ra,56(sp)
  811478:	df000d15 	stw	fp,52(sp)
  81147c:	df000d04 	addi	fp,sp,52
  811480:	e13ffb15 	stw	r4,-20(fp)
  811484:	e1bffd15 	stw	r6,-12(fp)
  811488:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81148c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  811490:	e0bffd17 	ldw	r2,-12(fp)
  811494:	1004c03a 	cmpne	r2,r2,zero
  811498:	1000021e 	bne	r2,zero,8114a4 <OSQPend+0x34>
        return ((void *)0);
  81149c:	e03fff15 	stw	zero,-4(fp)
  8114a0:	0000b506 	br	811778 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  8114a4:	e0bffb17 	ldw	r2,-20(fp)
  8114a8:	1004c03a 	cmpne	r2,r2,zero
  8114ac:	1000051e 	bne	r2,zero,8114c4 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  8114b0:	e0fffd17 	ldw	r3,-12(fp)
  8114b4:	00800104 	movi	r2,4
  8114b8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  8114bc:	e03fff15 	stw	zero,-4(fp)
  8114c0:	0000ad06 	br	811778 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  8114c4:	e0bffb17 	ldw	r2,-20(fp)
  8114c8:	10800003 	ldbu	r2,0(r2)
  8114cc:	10803fcc 	andi	r2,r2,255
  8114d0:	108000a0 	cmpeqi	r2,r2,2
  8114d4:	1000051e 	bne	r2,zero,8114ec <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  8114d8:	e0fffd17 	ldw	r3,-12(fp)
  8114dc:	00800044 	movi	r2,1
  8114e0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  8114e4:	e03fff15 	stw	zero,-4(fp)
  8114e8:	0000a306 	br	811778 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  8114ec:	008020b4 	movhi	r2,130
  8114f0:	10802a04 	addi	r2,r2,168
  8114f4:	10800003 	ldbu	r2,0(r2)
  8114f8:	10803fcc 	andi	r2,r2,255
  8114fc:	1005003a 	cmpeq	r2,r2,zero
  811500:	1000051e 	bne	r2,zero,811518 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  811504:	e0fffd17 	ldw	r3,-12(fp)
  811508:	00800084 	movi	r2,2
  81150c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  811510:	e03fff15 	stw	zero,-4(fp)
  811514:	00009806 	br	811778 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  811518:	008020b4 	movhi	r2,130
  81151c:	10801c04 	addi	r2,r2,112
  811520:	10800003 	ldbu	r2,0(r2)
  811524:	10803fcc 	andi	r2,r2,255
  811528:	1005003a 	cmpeq	r2,r2,zero
  81152c:	1000051e 	bne	r2,zero,811544 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  811530:	e0fffd17 	ldw	r3,-12(fp)
  811534:	00800344 	movi	r2,13
  811538:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81153c:	e03fff15 	stw	zero,-4(fp)
  811540:	00008d06 	br	811778 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811544:	0005303a 	rdctl	r2,status
  811548:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81154c:	e0fff717 	ldw	r3,-36(fp)
  811550:	00bfff84 	movi	r2,-2
  811554:	1884703a 	and	r2,r3,r2
  811558:	1001703a 	wrctl	status,r2
  
  return context;
  81155c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  811560:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  811564:	e0bffb17 	ldw	r2,-20(fp)
  811568:	10800117 	ldw	r2,4(r2)
  81156c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  811570:	e0bff917 	ldw	r2,-28(fp)
  811574:	1080058b 	ldhu	r2,22(r2)
  811578:	10bfffcc 	andi	r2,r2,65535
  81157c:	1005003a 	cmpeq	r2,r2,zero
  811580:	10001f1e 	bne	r2,zero,811600 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  811584:	e0bff917 	ldw	r2,-28(fp)
  811588:	10c00417 	ldw	r3,16(r2)
  81158c:	18800017 	ldw	r2,0(r3)
  811590:	e0bffa15 	stw	r2,-24(fp)
  811594:	18c00104 	addi	r3,r3,4
  811598:	e0bff917 	ldw	r2,-28(fp)
  81159c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  8115a0:	e0bff917 	ldw	r2,-28(fp)
  8115a4:	1080058b 	ldhu	r2,22(r2)
  8115a8:	10bfffc4 	addi	r2,r2,-1
  8115ac:	1007883a 	mov	r3,r2
  8115b0:	e0bff917 	ldw	r2,-28(fp)
  8115b4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  8115b8:	e0bff917 	ldw	r2,-28(fp)
  8115bc:	10c00417 	ldw	r3,16(r2)
  8115c0:	e0bff917 	ldw	r2,-28(fp)
  8115c4:	10800217 	ldw	r2,8(r2)
  8115c8:	1880041e 	bne	r3,r2,8115dc <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  8115cc:	e0bff917 	ldw	r2,-28(fp)
  8115d0:	10c00117 	ldw	r3,4(r2)
  8115d4:	e0bff917 	ldw	r2,-28(fp)
  8115d8:	10c00415 	stw	r3,16(r2)
  8115dc:	e0bff817 	ldw	r2,-32(fp)
  8115e0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8115e4:	e0bff617 	ldw	r2,-40(fp)
  8115e8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  8115ec:	e0bffd17 	ldw	r2,-12(fp)
  8115f0:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  8115f4:	e0bffa17 	ldw	r2,-24(fp)
  8115f8:	e0bfff15 	stw	r2,-4(fp)
  8115fc:	00005e06 	br	811778 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  811600:	008020b4 	movhi	r2,130
  811604:	10802b04 	addi	r2,r2,172
  811608:	10c00017 	ldw	r3,0(r2)
  81160c:	008020b4 	movhi	r2,130
  811610:	10802b04 	addi	r2,r2,172
  811614:	10800017 	ldw	r2,0(r2)
  811618:	10800c03 	ldbu	r2,48(r2)
  81161c:	10800114 	ori	r2,r2,4
  811620:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  811624:	008020b4 	movhi	r2,130
  811628:	10802b04 	addi	r2,r2,172
  81162c:	10800017 	ldw	r2,0(r2)
  811630:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  811634:	008020b4 	movhi	r2,130
  811638:	10802b04 	addi	r2,r2,172
  81163c:	10c00017 	ldw	r3,0(r2)
  811640:	e0bffc0b 	ldhu	r2,-16(fp)
  811644:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  811648:	e13ffb17 	ldw	r4,-20(fp)
  81164c:	080dadc0 	call	80dadc <OS_EventTaskWait>
  811650:	e0bff817 	ldw	r2,-32(fp)
  811654:	e0bff515 	stw	r2,-44(fp)
  811658:	e0bff517 	ldw	r2,-44(fp)
  81165c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  811660:	080e3880 	call	80e388 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811664:	0005303a 	rdctl	r2,status
  811668:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81166c:	e0fff417 	ldw	r3,-48(fp)
  811670:	00bfff84 	movi	r2,-2
  811674:	1884703a 	and	r2,r3,r2
  811678:	1001703a 	wrctl	status,r2
  
  return context;
  81167c:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  811680:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  811684:	008020b4 	movhi	r2,130
  811688:	10802b04 	addi	r2,r2,172
  81168c:	10800017 	ldw	r2,0(r2)
  811690:	10800c43 	ldbu	r2,49(r2)
  811694:	10803fcc 	andi	r2,r2,255
  811698:	e0bffe15 	stw	r2,-8(fp)
  81169c:	e0fffe17 	ldw	r3,-8(fp)
  8116a0:	1805003a 	cmpeq	r2,r3,zero
  8116a4:	1000041e 	bne	r2,zero,8116b8 <OSQPend+0x248>
  8116a8:	e0fffe17 	ldw	r3,-8(fp)
  8116ac:	188000a0 	cmpeqi	r2,r3,2
  8116b0:	1000091e 	bne	r2,zero,8116d8 <OSQPend+0x268>
  8116b4:	00000d06 	br	8116ec <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  8116b8:	008020b4 	movhi	r2,130
  8116bc:	10802b04 	addi	r2,r2,172
  8116c0:	10800017 	ldw	r2,0(r2)
  8116c4:	10800917 	ldw	r2,36(r2)
  8116c8:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  8116cc:	e0bffd17 	ldw	r2,-12(fp)
  8116d0:	10000005 	stb	zero,0(r2)
             break;
  8116d4:	00000e06 	br	811710 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  8116d8:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  8116dc:	e0fffd17 	ldw	r3,-12(fp)
  8116e0:	00800384 	movi	r2,14
  8116e4:	18800005 	stb	r2,0(r3)
             break;
  8116e8:	00000906 	br	811710 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  8116ec:	008020b4 	movhi	r2,130
  8116f0:	10802b04 	addi	r2,r2,172
  8116f4:	11000017 	ldw	r4,0(r2)
  8116f8:	e17ffb17 	ldw	r5,-20(fp)
  8116fc:	080dd400 	call	80dd40 <OS_EventTaskRemove>
             pmsg = (void *)0;
  811700:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  811704:	e0fffd17 	ldw	r3,-12(fp)
  811708:	00800284 	movi	r2,10
  81170c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  811710:	008020b4 	movhi	r2,130
  811714:	10802b04 	addi	r2,r2,172
  811718:	10800017 	ldw	r2,0(r2)
  81171c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  811720:	008020b4 	movhi	r2,130
  811724:	10802b04 	addi	r2,r2,172
  811728:	10800017 	ldw	r2,0(r2)
  81172c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  811730:	008020b4 	movhi	r2,130
  811734:	10802b04 	addi	r2,r2,172
  811738:	10800017 	ldw	r2,0(r2)
  81173c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  811740:	008020b4 	movhi	r2,130
  811744:	10802b04 	addi	r2,r2,172
  811748:	10800017 	ldw	r2,0(r2)
  81174c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  811750:	008020b4 	movhi	r2,130
  811754:	10802b04 	addi	r2,r2,172
  811758:	10800017 	ldw	r2,0(r2)
  81175c:	10000915 	stw	zero,36(r2)
  811760:	e0bff817 	ldw	r2,-32(fp)
  811764:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811768:	e0bff317 	ldw	r2,-52(fp)
  81176c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  811770:	e0bffa17 	ldw	r2,-24(fp)
  811774:	e0bfff15 	stw	r2,-4(fp)
  811778:	e0bfff17 	ldw	r2,-4(fp)
}
  81177c:	e037883a 	mov	sp,fp
  811780:	dfc00117 	ldw	ra,4(sp)
  811784:	df000017 	ldw	fp,0(sp)
  811788:	dec00204 	addi	sp,sp,8
  81178c:	f800283a 	ret

00811790 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  811790:	defff504 	addi	sp,sp,-44
  811794:	dfc00a15 	stw	ra,40(sp)
  811798:	df000915 	stw	fp,36(sp)
  81179c:	df000904 	addi	fp,sp,36
  8117a0:	e13ffc15 	stw	r4,-16(fp)
  8117a4:	e1bffe15 	stw	r6,-8(fp)
  8117a8:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8117ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8117b0:	e0bffe17 	ldw	r2,-8(fp)
  8117b4:	1004c03a 	cmpne	r2,r2,zero
  8117b8:	1000021e 	bne	r2,zero,8117c4 <OSQPendAbort+0x34>
        return (0);
  8117bc:	e03fff15 	stw	zero,-4(fp)
  8117c0:	00004c06 	br	8118f4 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8117c4:	e0bffc17 	ldw	r2,-16(fp)
  8117c8:	1004c03a 	cmpne	r2,r2,zero
  8117cc:	1000051e 	bne	r2,zero,8117e4 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  8117d0:	e0fffe17 	ldw	r3,-8(fp)
  8117d4:	00800104 	movi	r2,4
  8117d8:	18800005 	stb	r2,0(r3)
        return (0);
  8117dc:	e03fff15 	stw	zero,-4(fp)
  8117e0:	00004406 	br	8118f4 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  8117e4:	e0bffc17 	ldw	r2,-16(fp)
  8117e8:	10800003 	ldbu	r2,0(r2)
  8117ec:	10803fcc 	andi	r2,r2,255
  8117f0:	108000a0 	cmpeqi	r2,r2,2
  8117f4:	1000051e 	bne	r2,zero,81180c <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  8117f8:	e0fffe17 	ldw	r3,-8(fp)
  8117fc:	00800044 	movi	r2,1
  811800:	18800005 	stb	r2,0(r3)
        return (0);
  811804:	e03fff15 	stw	zero,-4(fp)
  811808:	00003a06 	br	8118f4 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81180c:	0005303a 	rdctl	r2,status
  811810:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811814:	e0fff917 	ldw	r3,-28(fp)
  811818:	00bfff84 	movi	r2,-2
  81181c:	1884703a 	and	r2,r3,r2
  811820:	1001703a 	wrctl	status,r2
  
  return context;
  811824:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  811828:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  81182c:	e0bffc17 	ldw	r2,-16(fp)
  811830:	10800283 	ldbu	r2,10(r2)
  811834:	10803fcc 	andi	r2,r2,255
  811838:	1005003a 	cmpeq	r2,r2,zero
  81183c:	1000261e 	bne	r2,zero,8118d8 <OSQPendAbort+0x148>
        nbr_tasks = 0;
  811840:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  811844:	e0bffd03 	ldbu	r2,-12(fp)
  811848:	10800060 	cmpeqi	r2,r2,1
  81184c:	1000091e 	bne	r2,zero,811874 <OSQPendAbort+0xe4>
  811850:	00000e06 	br	81188c <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  811854:	e13ffc17 	ldw	r4,-16(fp)
  811858:	000b883a 	mov	r5,zero
  81185c:	01800104 	movi	r6,4
  811860:	01c00084 	movi	r7,2
  811864:	080d9480 	call	80d948 <OS_EventTaskRdy>
                     nbr_tasks++;
  811868:	e0bffb03 	ldbu	r2,-20(fp)
  81186c:	10800044 	addi	r2,r2,1
  811870:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  811874:	e0bffc17 	ldw	r2,-16(fp)
  811878:	10800283 	ldbu	r2,10(r2)
  81187c:	10803fcc 	andi	r2,r2,255
  811880:	1004c03a 	cmpne	r2,r2,zero
  811884:	103ff31e 	bne	r2,zero,811854 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  811888:	00000806 	br	8118ac <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  81188c:	e13ffc17 	ldw	r4,-16(fp)
  811890:	000b883a 	mov	r5,zero
  811894:	01800104 	movi	r6,4
  811898:	01c00084 	movi	r7,2
  81189c:	080d9480 	call	80d948 <OS_EventTaskRdy>
                 nbr_tasks++;
  8118a0:	e0bffb03 	ldbu	r2,-20(fp)
  8118a4:	10800044 	addi	r2,r2,1
  8118a8:	e0bffb05 	stb	r2,-20(fp)
  8118ac:	e0bffa17 	ldw	r2,-24(fp)
  8118b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8118b4:	e0bff817 	ldw	r2,-32(fp)
  8118b8:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  8118bc:	080e3880 	call	80e388 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  8118c0:	e0fffe17 	ldw	r3,-8(fp)
  8118c4:	00800384 	movi	r2,14
  8118c8:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  8118cc:	e0bffb03 	ldbu	r2,-20(fp)
  8118d0:	e0bfff15 	stw	r2,-4(fp)
  8118d4:	00000706 	br	8118f4 <OSQPendAbort+0x164>
  8118d8:	e0bffa17 	ldw	r2,-24(fp)
  8118dc:	e0bff715 	stw	r2,-36(fp)
  8118e0:	e0bff717 	ldw	r2,-36(fp)
  8118e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8118e8:	e0bffe17 	ldw	r2,-8(fp)
  8118ec:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  8118f0:	e03fff15 	stw	zero,-4(fp)
  8118f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8118f8:	e037883a 	mov	sp,fp
  8118fc:	dfc00117 	ldw	ra,4(sp)
  811900:	df000017 	ldw	fp,0(sp)
  811904:	dec00204 	addi	sp,sp,8
  811908:	f800283a 	ret

0081190c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  81190c:	defff504 	addi	sp,sp,-44
  811910:	dfc00a15 	stw	ra,40(sp)
  811914:	df000915 	stw	fp,36(sp)
  811918:	df000904 	addi	fp,sp,36
  81191c:	e13ffd15 	stw	r4,-12(fp)
  811920:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  811924:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  811928:	e0bffd17 	ldw	r2,-12(fp)
  81192c:	1004c03a 	cmpne	r2,r2,zero
  811930:	1000031e 	bne	r2,zero,811940 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  811934:	00800104 	movi	r2,4
  811938:	e0bfff15 	stw	r2,-4(fp)
  81193c:	00004d06 	br	811a74 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  811940:	e0bffd17 	ldw	r2,-12(fp)
  811944:	10800003 	ldbu	r2,0(r2)
  811948:	10803fcc 	andi	r2,r2,255
  81194c:	108000a0 	cmpeqi	r2,r2,2
  811950:	1000031e 	bne	r2,zero,811960 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  811954:	00800044 	movi	r2,1
  811958:	e0bfff15 	stw	r2,-4(fp)
  81195c:	00004506 	br	811a74 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811960:	0005303a 	rdctl	r2,status
  811964:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811968:	e0fffa17 	ldw	r3,-24(fp)
  81196c:	00bfff84 	movi	r2,-2
  811970:	1884703a 	and	r2,r3,r2
  811974:	1001703a 	wrctl	status,r2
  
  return context;
  811978:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81197c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  811980:	e0bffd17 	ldw	r2,-12(fp)
  811984:	10800283 	ldbu	r2,10(r2)
  811988:	10803fcc 	andi	r2,r2,255
  81198c:	1005003a 	cmpeq	r2,r2,zero
  811990:	10000c1e 	bne	r2,zero,8119c4 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  811994:	e13ffd17 	ldw	r4,-12(fp)
  811998:	e17ffe17 	ldw	r5,-8(fp)
  81199c:	01800104 	movi	r6,4
  8119a0:	000f883a 	mov	r7,zero
  8119a4:	080d9480 	call	80d948 <OS_EventTaskRdy>
  8119a8:	e0bffb17 	ldw	r2,-20(fp)
  8119ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8119b0:	e0bff917 	ldw	r2,-28(fp)
  8119b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  8119b8:	080e3880 	call	80e388 <OS_Sched>
        return (OS_ERR_NONE);
  8119bc:	e03fff15 	stw	zero,-4(fp)
  8119c0:	00002c06 	br	811a74 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  8119c4:	e0bffd17 	ldw	r2,-12(fp)
  8119c8:	10800117 	ldw	r2,4(r2)
  8119cc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  8119d0:	e0bffc17 	ldw	r2,-16(fp)
  8119d4:	10c0058b 	ldhu	r3,22(r2)
  8119d8:	e0bffc17 	ldw	r2,-16(fp)
  8119dc:	1080050b 	ldhu	r2,20(r2)
  8119e0:	18ffffcc 	andi	r3,r3,65535
  8119e4:	10bfffcc 	andi	r2,r2,65535
  8119e8:	18800736 	bltu	r3,r2,811a08 <OSQPost+0xfc>
  8119ec:	e0bffb17 	ldw	r2,-20(fp)
  8119f0:	e0bff815 	stw	r2,-32(fp)
  8119f4:	e0bff817 	ldw	r2,-32(fp)
  8119f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8119fc:	00800784 	movi	r2,30
  811a00:	e0bfff15 	stw	r2,-4(fp)
  811a04:	00001b06 	br	811a74 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  811a08:	e0bffc17 	ldw	r2,-16(fp)
  811a0c:	10c00317 	ldw	r3,12(r2)
  811a10:	e0bffe17 	ldw	r2,-8(fp)
  811a14:	18800015 	stw	r2,0(r3)
  811a18:	18c00104 	addi	r3,r3,4
  811a1c:	e0bffc17 	ldw	r2,-16(fp)
  811a20:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  811a24:	e0bffc17 	ldw	r2,-16(fp)
  811a28:	1080058b 	ldhu	r2,22(r2)
  811a2c:	10800044 	addi	r2,r2,1
  811a30:	1007883a 	mov	r3,r2
  811a34:	e0bffc17 	ldw	r2,-16(fp)
  811a38:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  811a3c:	e0bffc17 	ldw	r2,-16(fp)
  811a40:	10c00317 	ldw	r3,12(r2)
  811a44:	e0bffc17 	ldw	r2,-16(fp)
  811a48:	10800217 	ldw	r2,8(r2)
  811a4c:	1880041e 	bne	r3,r2,811a60 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  811a50:	e0bffc17 	ldw	r2,-16(fp)
  811a54:	10c00117 	ldw	r3,4(r2)
  811a58:	e0bffc17 	ldw	r2,-16(fp)
  811a5c:	10c00315 	stw	r3,12(r2)
  811a60:	e0bffb17 	ldw	r2,-20(fp)
  811a64:	e0bff715 	stw	r2,-36(fp)
  811a68:	e0bff717 	ldw	r2,-36(fp)
  811a6c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  811a70:	e03fff15 	stw	zero,-4(fp)
  811a74:	e0bfff17 	ldw	r2,-4(fp)
}
  811a78:	e037883a 	mov	sp,fp
  811a7c:	dfc00117 	ldw	ra,4(sp)
  811a80:	df000017 	ldw	fp,0(sp)
  811a84:	dec00204 	addi	sp,sp,8
  811a88:	f800283a 	ret

00811a8c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  811a8c:	defff504 	addi	sp,sp,-44
  811a90:	dfc00a15 	stw	ra,40(sp)
  811a94:	df000915 	stw	fp,36(sp)
  811a98:	df000904 	addi	fp,sp,36
  811a9c:	e13ffd15 	stw	r4,-12(fp)
  811aa0:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  811aa4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  811aa8:	e0bffd17 	ldw	r2,-12(fp)
  811aac:	1004c03a 	cmpne	r2,r2,zero
  811ab0:	1000031e 	bne	r2,zero,811ac0 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  811ab4:	00800104 	movi	r2,4
  811ab8:	e0bfff15 	stw	r2,-4(fp)
  811abc:	00004f06 	br	811bfc <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  811ac0:	e0bffd17 	ldw	r2,-12(fp)
  811ac4:	10800003 	ldbu	r2,0(r2)
  811ac8:	10803fcc 	andi	r2,r2,255
  811acc:	108000a0 	cmpeqi	r2,r2,2
  811ad0:	1000031e 	bne	r2,zero,811ae0 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  811ad4:	00800044 	movi	r2,1
  811ad8:	e0bfff15 	stw	r2,-4(fp)
  811adc:	00004706 	br	811bfc <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811ae0:	0005303a 	rdctl	r2,status
  811ae4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811ae8:	e0fffa17 	ldw	r3,-24(fp)
  811aec:	00bfff84 	movi	r2,-2
  811af0:	1884703a 	and	r2,r3,r2
  811af4:	1001703a 	wrctl	status,r2
  
  return context;
  811af8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  811afc:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  811b00:	e0bffd17 	ldw	r2,-12(fp)
  811b04:	10800283 	ldbu	r2,10(r2)
  811b08:	10803fcc 	andi	r2,r2,255
  811b0c:	1005003a 	cmpeq	r2,r2,zero
  811b10:	10000c1e 	bne	r2,zero,811b44 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  811b14:	e13ffd17 	ldw	r4,-12(fp)
  811b18:	e17ffe17 	ldw	r5,-8(fp)
  811b1c:	01800104 	movi	r6,4
  811b20:	000f883a 	mov	r7,zero
  811b24:	080d9480 	call	80d948 <OS_EventTaskRdy>
  811b28:	e0bffb17 	ldw	r2,-20(fp)
  811b2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811b30:	e0bff917 	ldw	r2,-28(fp)
  811b34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  811b38:	080e3880 	call	80e388 <OS_Sched>
        return (OS_ERR_NONE);
  811b3c:	e03fff15 	stw	zero,-4(fp)
  811b40:	00002e06 	br	811bfc <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  811b44:	e0bffd17 	ldw	r2,-12(fp)
  811b48:	10800117 	ldw	r2,4(r2)
  811b4c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  811b50:	e0bffc17 	ldw	r2,-16(fp)
  811b54:	10c0058b 	ldhu	r3,22(r2)
  811b58:	e0bffc17 	ldw	r2,-16(fp)
  811b5c:	1080050b 	ldhu	r2,20(r2)
  811b60:	18ffffcc 	andi	r3,r3,65535
  811b64:	10bfffcc 	andi	r2,r2,65535
  811b68:	18800736 	bltu	r3,r2,811b88 <OSQPostFront+0xfc>
  811b6c:	e0bffb17 	ldw	r2,-20(fp)
  811b70:	e0bff815 	stw	r2,-32(fp)
  811b74:	e0bff817 	ldw	r2,-32(fp)
  811b78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  811b7c:	00800784 	movi	r2,30
  811b80:	e0bfff15 	stw	r2,-4(fp)
  811b84:	00001d06 	br	811bfc <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  811b88:	e0bffc17 	ldw	r2,-16(fp)
  811b8c:	10c00417 	ldw	r3,16(r2)
  811b90:	e0bffc17 	ldw	r2,-16(fp)
  811b94:	10800117 	ldw	r2,4(r2)
  811b98:	1880041e 	bne	r3,r2,811bac <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  811b9c:	e0bffc17 	ldw	r2,-16(fp)
  811ba0:	10c00217 	ldw	r3,8(r2)
  811ba4:	e0bffc17 	ldw	r2,-16(fp)
  811ba8:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  811bac:	e0bffc17 	ldw	r2,-16(fp)
  811bb0:	10800417 	ldw	r2,16(r2)
  811bb4:	10ffff04 	addi	r3,r2,-4
  811bb8:	e0bffc17 	ldw	r2,-16(fp)
  811bbc:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  811bc0:	e0bffc17 	ldw	r2,-16(fp)
  811bc4:	10c00417 	ldw	r3,16(r2)
  811bc8:	e0bffe17 	ldw	r2,-8(fp)
  811bcc:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  811bd0:	e0bffc17 	ldw	r2,-16(fp)
  811bd4:	1080058b 	ldhu	r2,22(r2)
  811bd8:	10800044 	addi	r2,r2,1
  811bdc:	1007883a 	mov	r3,r2
  811be0:	e0bffc17 	ldw	r2,-16(fp)
  811be4:	10c0058d 	sth	r3,22(r2)
  811be8:	e0bffb17 	ldw	r2,-20(fp)
  811bec:	e0bff715 	stw	r2,-36(fp)
  811bf0:	e0bff717 	ldw	r2,-36(fp)
  811bf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  811bf8:	e03fff15 	stw	zero,-4(fp)
  811bfc:	e0bfff17 	ldw	r2,-4(fp)
}
  811c00:	e037883a 	mov	sp,fp
  811c04:	dfc00117 	ldw	ra,4(sp)
  811c08:	df000017 	ldw	fp,0(sp)
  811c0c:	dec00204 	addi	sp,sp,8
  811c10:	f800283a 	ret

00811c14 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  811c14:	defff404 	addi	sp,sp,-48
  811c18:	dfc00b15 	stw	ra,44(sp)
  811c1c:	df000a15 	stw	fp,40(sp)
  811c20:	df000a04 	addi	fp,sp,40
  811c24:	e13ffc15 	stw	r4,-16(fp)
  811c28:	e17ffd15 	stw	r5,-12(fp)
  811c2c:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  811c30:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  811c34:	e0bffc17 	ldw	r2,-16(fp)
  811c38:	1004c03a 	cmpne	r2,r2,zero
  811c3c:	1000031e 	bne	r2,zero,811c4c <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  811c40:	00800104 	movi	r2,4
  811c44:	e0bfff15 	stw	r2,-4(fp)
  811c48:	00007906 	br	811e30 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  811c4c:	e0bffc17 	ldw	r2,-16(fp)
  811c50:	10800003 	ldbu	r2,0(r2)
  811c54:	10803fcc 	andi	r2,r2,255
  811c58:	108000a0 	cmpeqi	r2,r2,2
  811c5c:	1000031e 	bne	r2,zero,811c6c <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  811c60:	00800044 	movi	r2,1
  811c64:	e0bfff15 	stw	r2,-4(fp)
  811c68:	00007106 	br	811e30 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811c6c:	0005303a 	rdctl	r2,status
  811c70:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811c74:	e0fff917 	ldw	r3,-28(fp)
  811c78:	00bfff84 	movi	r2,-2
  811c7c:	1884703a 	and	r2,r3,r2
  811c80:	1001703a 	wrctl	status,r2
  
  return context;
  811c84:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  811c88:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  811c8c:	e0bffc17 	ldw	r2,-16(fp)
  811c90:	10800283 	ldbu	r2,10(r2)
  811c94:	10803fcc 	andi	r2,r2,255
  811c98:	1005003a 	cmpeq	r2,r2,zero
  811c9c:	1000211e 	bne	r2,zero,811d24 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  811ca0:	e0bffe03 	ldbu	r2,-8(fp)
  811ca4:	1080004c 	andi	r2,r2,1
  811ca8:	10803fcc 	andi	r2,r2,255
  811cac:	1005003a 	cmpeq	r2,r2,zero
  811cb0:	10000c1e 	bne	r2,zero,811ce4 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  811cb4:	00000506 	br	811ccc <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  811cb8:	e13ffc17 	ldw	r4,-16(fp)
  811cbc:	e17ffd17 	ldw	r5,-12(fp)
  811cc0:	01800104 	movi	r6,4
  811cc4:	000f883a 	mov	r7,zero
  811cc8:	080d9480 	call	80d948 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  811ccc:	e0bffc17 	ldw	r2,-16(fp)
  811cd0:	10800283 	ldbu	r2,10(r2)
  811cd4:	10803fcc 	andi	r2,r2,255
  811cd8:	1004c03a 	cmpne	r2,r2,zero
  811cdc:	103ff61e 	bne	r2,zero,811cb8 <OSQPostOpt+0xa4>
  811ce0:	00000506 	br	811cf8 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  811ce4:	e13ffc17 	ldw	r4,-16(fp)
  811ce8:	e17ffd17 	ldw	r5,-12(fp)
  811cec:	01800104 	movi	r6,4
  811cf0:	000f883a 	mov	r7,zero
  811cf4:	080d9480 	call	80d948 <OS_EventTaskRdy>
  811cf8:	e0bffa17 	ldw	r2,-24(fp)
  811cfc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811d00:	e0bff817 	ldw	r2,-32(fp)
  811d04:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  811d08:	e0bffe03 	ldbu	r2,-8(fp)
  811d0c:	1080010c 	andi	r2,r2,4
  811d10:	1004c03a 	cmpne	r2,r2,zero
  811d14:	1000011e 	bne	r2,zero,811d1c <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  811d18:	080e3880 	call	80e388 <OS_Sched>
        }
        return (OS_ERR_NONE);
  811d1c:	e03fff15 	stw	zero,-4(fp)
  811d20:	00004306 	br	811e30 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  811d24:	e0bffc17 	ldw	r2,-16(fp)
  811d28:	10800117 	ldw	r2,4(r2)
  811d2c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  811d30:	e0bffb17 	ldw	r2,-20(fp)
  811d34:	10c0058b 	ldhu	r3,22(r2)
  811d38:	e0bffb17 	ldw	r2,-20(fp)
  811d3c:	1080050b 	ldhu	r2,20(r2)
  811d40:	18ffffcc 	andi	r3,r3,65535
  811d44:	10bfffcc 	andi	r2,r2,65535
  811d48:	18800736 	bltu	r3,r2,811d68 <OSQPostOpt+0x154>
  811d4c:	e0bffa17 	ldw	r2,-24(fp)
  811d50:	e0bff715 	stw	r2,-36(fp)
  811d54:	e0bff717 	ldw	r2,-36(fp)
  811d58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  811d5c:	00800784 	movi	r2,30
  811d60:	e0bfff15 	stw	r2,-4(fp)
  811d64:	00003206 	br	811e30 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  811d68:	e0bffe03 	ldbu	r2,-8(fp)
  811d6c:	1080008c 	andi	r2,r2,2
  811d70:	1005003a 	cmpeq	r2,r2,zero
  811d74:	1000131e 	bne	r2,zero,811dc4 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  811d78:	e0bffb17 	ldw	r2,-20(fp)
  811d7c:	10c00417 	ldw	r3,16(r2)
  811d80:	e0bffb17 	ldw	r2,-20(fp)
  811d84:	10800117 	ldw	r2,4(r2)
  811d88:	1880041e 	bne	r3,r2,811d9c <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  811d8c:	e0bffb17 	ldw	r2,-20(fp)
  811d90:	10c00217 	ldw	r3,8(r2)
  811d94:	e0bffb17 	ldw	r2,-20(fp)
  811d98:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  811d9c:	e0bffb17 	ldw	r2,-20(fp)
  811da0:	10800417 	ldw	r2,16(r2)
  811da4:	10ffff04 	addi	r3,r2,-4
  811da8:	e0bffb17 	ldw	r2,-20(fp)
  811dac:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  811db0:	e0bffb17 	ldw	r2,-20(fp)
  811db4:	10c00417 	ldw	r3,16(r2)
  811db8:	e0bffd17 	ldw	r2,-12(fp)
  811dbc:	18800015 	stw	r2,0(r3)
  811dc0:	00001006 	br	811e04 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  811dc4:	e0bffb17 	ldw	r2,-20(fp)
  811dc8:	10c00317 	ldw	r3,12(r2)
  811dcc:	e0bffd17 	ldw	r2,-12(fp)
  811dd0:	18800015 	stw	r2,0(r3)
  811dd4:	18c00104 	addi	r3,r3,4
  811dd8:	e0bffb17 	ldw	r2,-20(fp)
  811ddc:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  811de0:	e0bffb17 	ldw	r2,-20(fp)
  811de4:	10c00317 	ldw	r3,12(r2)
  811de8:	e0bffb17 	ldw	r2,-20(fp)
  811dec:	10800217 	ldw	r2,8(r2)
  811df0:	1880041e 	bne	r3,r2,811e04 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  811df4:	e0bffb17 	ldw	r2,-20(fp)
  811df8:	10c00117 	ldw	r3,4(r2)
  811dfc:	e0bffb17 	ldw	r2,-20(fp)
  811e00:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  811e04:	e0bffb17 	ldw	r2,-20(fp)
  811e08:	1080058b 	ldhu	r2,22(r2)
  811e0c:	10800044 	addi	r2,r2,1
  811e10:	1007883a 	mov	r3,r2
  811e14:	e0bffb17 	ldw	r2,-20(fp)
  811e18:	10c0058d 	sth	r3,22(r2)
  811e1c:	e0bffa17 	ldw	r2,-24(fp)
  811e20:	e0bff615 	stw	r2,-40(fp)
  811e24:	e0bff617 	ldw	r2,-40(fp)
  811e28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  811e2c:	e03fff15 	stw	zero,-4(fp)
  811e30:	e0bfff17 	ldw	r2,-4(fp)
}
  811e34:	e037883a 	mov	sp,fp
  811e38:	dfc00117 	ldw	ra,4(sp)
  811e3c:	df000017 	ldw	fp,0(sp)
  811e40:	dec00204 	addi	sp,sp,8
  811e44:	f800283a 	ret

00811e48 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  811e48:	defff504 	addi	sp,sp,-44
  811e4c:	df000a15 	stw	fp,40(sp)
  811e50:	df000a04 	addi	fp,sp,40
  811e54:	e13ffd15 	stw	r4,-12(fp)
  811e58:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  811e5c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  811e60:	e0bffd17 	ldw	r2,-12(fp)
  811e64:	1004c03a 	cmpne	r2,r2,zero
  811e68:	1000031e 	bne	r2,zero,811e78 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  811e6c:	00800104 	movi	r2,4
  811e70:	e0bfff15 	stw	r2,-4(fp)
  811e74:	00004f06 	br	811fb4 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  811e78:	e0bffe17 	ldw	r2,-8(fp)
  811e7c:	1004c03a 	cmpne	r2,r2,zero
  811e80:	1000031e 	bne	r2,zero,811e90 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  811e84:	00800244 	movi	r2,9
  811e88:	e0bfff15 	stw	r2,-4(fp)
  811e8c:	00004906 	br	811fb4 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  811e90:	e0bffd17 	ldw	r2,-12(fp)
  811e94:	10800003 	ldbu	r2,0(r2)
  811e98:	10803fcc 	andi	r2,r2,255
  811e9c:	108000a0 	cmpeqi	r2,r2,2
  811ea0:	1000031e 	bne	r2,zero,811eb0 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  811ea4:	00800044 	movi	r2,1
  811ea8:	e0bfff15 	stw	r2,-4(fp)
  811eac:	00004106 	br	811fb4 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811eb0:	0005303a 	rdctl	r2,status
  811eb4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811eb8:	e0fff717 	ldw	r3,-36(fp)
  811ebc:	00bfff84 	movi	r2,-2
  811ec0:	1884703a 	and	r2,r3,r2
  811ec4:	1001703a 	wrctl	status,r2
  
  return context;
  811ec8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  811ecc:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  811ed0:	e0bffd17 	ldw	r2,-12(fp)
  811ed4:	10c00283 	ldbu	r3,10(r2)
  811ed8:	e0bffe17 	ldw	r2,-8(fp)
  811edc:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  811ee0:	e0bffd17 	ldw	r2,-12(fp)
  811ee4:	108002c4 	addi	r2,r2,11
  811ee8:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  811eec:	e0bffe17 	ldw	r2,-8(fp)
  811ef0:	10800204 	addi	r2,r2,8
  811ef4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  811ef8:	e03ffb05 	stb	zero,-20(fp)
  811efc:	00000d06 	br	811f34 <OSQQuery+0xec>
        *pdest++ = *psrc++;
  811f00:	e0bffa17 	ldw	r2,-24(fp)
  811f04:	10c00003 	ldbu	r3,0(r2)
  811f08:	e0bff917 	ldw	r2,-28(fp)
  811f0c:	10c00005 	stb	r3,0(r2)
  811f10:	e0bff917 	ldw	r2,-28(fp)
  811f14:	10800044 	addi	r2,r2,1
  811f18:	e0bff915 	stw	r2,-28(fp)
  811f1c:	e0bffa17 	ldw	r2,-24(fp)
  811f20:	10800044 	addi	r2,r2,1
  811f24:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  811f28:	e0bffb03 	ldbu	r2,-20(fp)
  811f2c:	10800044 	addi	r2,r2,1
  811f30:	e0bffb05 	stb	r2,-20(fp)
  811f34:	e0bffb03 	ldbu	r2,-20(fp)
  811f38:	108000f0 	cmpltui	r2,r2,3
  811f3c:	103ff01e 	bne	r2,zero,811f00 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  811f40:	e0bffd17 	ldw	r2,-12(fp)
  811f44:	10800117 	ldw	r2,4(r2)
  811f48:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  811f4c:	e0bffc17 	ldw	r2,-16(fp)
  811f50:	1080058b 	ldhu	r2,22(r2)
  811f54:	10bfffcc 	andi	r2,r2,65535
  811f58:	1005003a 	cmpeq	r2,r2,zero
  811f5c:	1000061e 	bne	r2,zero,811f78 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  811f60:	e0bffc17 	ldw	r2,-16(fp)
  811f64:	10800417 	ldw	r2,16(r2)
  811f68:	10c00017 	ldw	r3,0(r2)
  811f6c:	e0bffe17 	ldw	r2,-8(fp)
  811f70:	10c00015 	stw	r3,0(r2)
  811f74:	00000206 	br	811f80 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  811f78:	e0bffe17 	ldw	r2,-8(fp)
  811f7c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  811f80:	e0bffc17 	ldw	r2,-16(fp)
  811f84:	10c0058b 	ldhu	r3,22(r2)
  811f88:	e0bffe17 	ldw	r2,-8(fp)
  811f8c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  811f90:	e0bffc17 	ldw	r2,-16(fp)
  811f94:	10c0050b 	ldhu	r3,20(r2)
  811f98:	e0bffe17 	ldw	r2,-8(fp)
  811f9c:	10c0018d 	sth	r3,6(r2)
  811fa0:	e0bff817 	ldw	r2,-32(fp)
  811fa4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811fa8:	e0bff617 	ldw	r2,-40(fp)
  811fac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  811fb0:	e03fff15 	stw	zero,-4(fp)
  811fb4:	e0bfff17 	ldw	r2,-4(fp)
}
  811fb8:	e037883a 	mov	sp,fp
  811fbc:	df000017 	ldw	fp,0(sp)
  811fc0:	dec00104 	addi	sp,sp,4
  811fc4:	f800283a 	ret

00811fc8 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  811fc8:	defffb04 	addi	sp,sp,-20
  811fcc:	dfc00415 	stw	ra,16(sp)
  811fd0:	df000315 	stw	fp,12(sp)
  811fd4:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  811fd8:	010020f4 	movhi	r4,131
  811fdc:	2110a604 	addi	r4,r4,17048
  811fe0:	01407804 	movi	r5,480
  811fe4:	080e2c80 	call	80e2c8 <OS_MemClr>
    pq1 = &OSQTbl[0];
  811fe8:	008020f4 	movhi	r2,131
  811fec:	1090a604 	addi	r2,r2,17048
  811ff0:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  811ff4:	008020f4 	movhi	r2,131
  811ff8:	1090ac04 	addi	r2,r2,17072
  811ffc:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  812000:	e03fff0d 	sth	zero,-4(fp)
  812004:	00000c06 	br	812038 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  812008:	e0fffe17 	ldw	r3,-8(fp)
  81200c:	e0bffd17 	ldw	r2,-12(fp)
  812010:	18800015 	stw	r2,0(r3)
        pq1++;
  812014:	e0bffe17 	ldw	r2,-8(fp)
  812018:	10800604 	addi	r2,r2,24
  81201c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  812020:	e0bffd17 	ldw	r2,-12(fp)
  812024:	10800604 	addi	r2,r2,24
  812028:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  81202c:	e0bfff0b 	ldhu	r2,-4(fp)
  812030:	10800044 	addi	r2,r2,1
  812034:	e0bfff0d 	sth	r2,-4(fp)
  812038:	e0bfff0b 	ldhu	r2,-4(fp)
  81203c:	108004f0 	cmpltui	r2,r2,19
  812040:	103ff11e 	bne	r2,zero,812008 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  812044:	e0bffe17 	ldw	r2,-8(fp)
  812048:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  81204c:	00c020b4 	movhi	r3,130
  812050:	18c02704 	addi	r3,r3,156
  812054:	008020f4 	movhi	r2,131
  812058:	1090a604 	addi	r2,r2,17048
  81205c:	18800015 	stw	r2,0(r3)
#endif
}
  812060:	e037883a 	mov	sp,fp
  812064:	dfc00117 	ldw	ra,4(sp)
  812068:	df000017 	ldw	fp,0(sp)
  81206c:	dec00204 	addi	sp,sp,8
  812070:	f800283a 	ret

00812074 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  812074:	defff904 	addi	sp,sp,-28
  812078:	df000615 	stw	fp,24(sp)
  81207c:	df000604 	addi	fp,sp,24
  812080:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812084:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  812088:	e0bffe17 	ldw	r2,-8(fp)
  81208c:	1004c03a 	cmpne	r2,r2,zero
  812090:	1000021e 	bne	r2,zero,81209c <OSSemAccept+0x28>
        return (0);
  812094:	e03fff15 	stw	zero,-4(fp)
  812098:	00002106 	br	812120 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81209c:	e0bffe17 	ldw	r2,-8(fp)
  8120a0:	10800003 	ldbu	r2,0(r2)
  8120a4:	10803fcc 	andi	r2,r2,255
  8120a8:	108000e0 	cmpeqi	r2,r2,3
  8120ac:	1000021e 	bne	r2,zero,8120b8 <OSSemAccept+0x44>
        return (0);
  8120b0:	e03fff15 	stw	zero,-4(fp)
  8120b4:	00001a06 	br	812120 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8120b8:	0005303a 	rdctl	r2,status
  8120bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8120c0:	e0fffb17 	ldw	r3,-20(fp)
  8120c4:	00bfff84 	movi	r2,-2
  8120c8:	1884703a 	and	r2,r3,r2
  8120cc:	1001703a 	wrctl	status,r2
  
  return context;
  8120d0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  8120d4:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  8120d8:	e0bffe17 	ldw	r2,-8(fp)
  8120dc:	1080020b 	ldhu	r2,8(r2)
  8120e0:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  8120e4:	e0bffd0b 	ldhu	r2,-12(fp)
  8120e8:	1005003a 	cmpeq	r2,r2,zero
  8120ec:	1000061e 	bne	r2,zero,812108 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  8120f0:	e0bffe17 	ldw	r2,-8(fp)
  8120f4:	1080020b 	ldhu	r2,8(r2)
  8120f8:	10bfffc4 	addi	r2,r2,-1
  8120fc:	1007883a 	mov	r3,r2
  812100:	e0bffe17 	ldw	r2,-8(fp)
  812104:	10c0020d 	sth	r3,8(r2)
  812108:	e0bffc17 	ldw	r2,-16(fp)
  81210c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812110:	e0bffa17 	ldw	r2,-24(fp)
  812114:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  812118:	e0bffd0b 	ldhu	r2,-12(fp)
  81211c:	e0bfff15 	stw	r2,-4(fp)
  812120:	e0bfff17 	ldw	r2,-4(fp)
}
  812124:	e037883a 	mov	sp,fp
  812128:	df000017 	ldw	fp,0(sp)
  81212c:	dec00104 	addi	sp,sp,4
  812130:	f800283a 	ret

00812134 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  812134:	defff804 	addi	sp,sp,-32
  812138:	dfc00715 	stw	ra,28(sp)
  81213c:	df000615 	stw	fp,24(sp)
  812140:	df000604 	addi	fp,sp,24
  812144:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  812148:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81214c:	008020b4 	movhi	r2,130
  812150:	10802a04 	addi	r2,r2,168
  812154:	10800003 	ldbu	r2,0(r2)
  812158:	10803fcc 	andi	r2,r2,255
  81215c:	1005003a 	cmpeq	r2,r2,zero
  812160:	1000021e 	bne	r2,zero,81216c <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  812164:	e03fff15 	stw	zero,-4(fp)
  812168:	00003106 	br	812230 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81216c:	0005303a 	rdctl	r2,status
  812170:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812174:	e0fffb17 	ldw	r3,-20(fp)
  812178:	00bfff84 	movi	r2,-2
  81217c:	1884703a 	and	r2,r3,r2
  812180:	1001703a 	wrctl	status,r2
  
  return context;
  812184:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  812188:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  81218c:	008020b4 	movhi	r2,130
  812190:	10802904 	addi	r2,r2,164
  812194:	10800017 	ldw	r2,0(r2)
  812198:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  81219c:	008020b4 	movhi	r2,130
  8121a0:	10802904 	addi	r2,r2,164
  8121a4:	10800017 	ldw	r2,0(r2)
  8121a8:	1005003a 	cmpeq	r2,r2,zero
  8121ac:	1000081e 	bne	r2,zero,8121d0 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  8121b0:	008020b4 	movhi	r2,130
  8121b4:	10802904 	addi	r2,r2,164
  8121b8:	10800017 	ldw	r2,0(r2)
  8121bc:	10800117 	ldw	r2,4(r2)
  8121c0:	1007883a 	mov	r3,r2
  8121c4:	008020b4 	movhi	r2,130
  8121c8:	10802904 	addi	r2,r2,164
  8121cc:	10c00015 	stw	r3,0(r2)
  8121d0:	e0bffc17 	ldw	r2,-16(fp)
  8121d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8121d8:	e0bffa17 	ldw	r2,-24(fp)
  8121dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  8121e0:	e0bffd17 	ldw	r2,-12(fp)
  8121e4:	1005003a 	cmpeq	r2,r2,zero
  8121e8:	10000f1e 	bne	r2,zero,812228 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  8121ec:	e0fffd17 	ldw	r3,-12(fp)
  8121f0:	008000c4 	movi	r2,3
  8121f4:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  8121f8:	e0fffd17 	ldw	r3,-12(fp)
  8121fc:	e0bffe0b 	ldhu	r2,-8(fp)
  812200:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  812204:	e0bffd17 	ldw	r2,-12(fp)
  812208:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  81220c:	e0fffd17 	ldw	r3,-12(fp)
  812210:	00800fc4 	movi	r2,63
  812214:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  812218:	e0bffd17 	ldw	r2,-12(fp)
  81221c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  812220:	e13ffd17 	ldw	r4,-12(fp)
  812224:	080defc0 	call	80defc <OS_EventWaitListInit>
    }
    return (pevent);
  812228:	e0bffd17 	ldw	r2,-12(fp)
  81222c:	e0bfff15 	stw	r2,-4(fp)
  812230:	e0bfff17 	ldw	r2,-4(fp)
}
  812234:	e037883a 	mov	sp,fp
  812238:	dfc00117 	ldw	ra,4(sp)
  81223c:	df000017 	ldw	fp,0(sp)
  812240:	dec00204 	addi	sp,sp,8
  812244:	f800283a 	ret

00812248 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  812248:	defff104 	addi	sp,sp,-60
  81224c:	dfc00e15 	stw	ra,56(sp)
  812250:	df000d15 	stw	fp,52(sp)
  812254:	df000d04 	addi	fp,sp,52
  812258:	e13ffb15 	stw	r4,-20(fp)
  81225c:	e1bffd15 	stw	r6,-12(fp)
  812260:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  812264:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  812268:	e0bffd17 	ldw	r2,-12(fp)
  81226c:	1004c03a 	cmpne	r2,r2,zero
  812270:	1000031e 	bne	r2,zero,812280 <OSSemDel+0x38>
        return (pevent);
  812274:	e0bffb17 	ldw	r2,-20(fp)
  812278:	e0bfff15 	stw	r2,-4(fp)
  81227c:	00009406 	br	8124d0 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  812280:	e0bffb17 	ldw	r2,-20(fp)
  812284:	1004c03a 	cmpne	r2,r2,zero
  812288:	1000061e 	bne	r2,zero,8122a4 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  81228c:	e0fffd17 	ldw	r3,-12(fp)
  812290:	00800104 	movi	r2,4
  812294:	18800005 	stb	r2,0(r3)
        return (pevent);
  812298:	e0fffb17 	ldw	r3,-20(fp)
  81229c:	e0ffff15 	stw	r3,-4(fp)
  8122a0:	00008b06 	br	8124d0 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  8122a4:	e0bffb17 	ldw	r2,-20(fp)
  8122a8:	10800003 	ldbu	r2,0(r2)
  8122ac:	10803fcc 	andi	r2,r2,255
  8122b0:	108000e0 	cmpeqi	r2,r2,3
  8122b4:	1000061e 	bne	r2,zero,8122d0 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  8122b8:	e0fffd17 	ldw	r3,-12(fp)
  8122bc:	00800044 	movi	r2,1
  8122c0:	18800005 	stb	r2,0(r3)
        return (pevent);
  8122c4:	e0bffb17 	ldw	r2,-20(fp)
  8122c8:	e0bfff15 	stw	r2,-4(fp)
  8122cc:	00008006 	br	8124d0 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8122d0:	008020b4 	movhi	r2,130
  8122d4:	10802a04 	addi	r2,r2,168
  8122d8:	10800003 	ldbu	r2,0(r2)
  8122dc:	10803fcc 	andi	r2,r2,255
  8122e0:	1005003a 	cmpeq	r2,r2,zero
  8122e4:	1000061e 	bne	r2,zero,812300 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  8122e8:	e0fffd17 	ldw	r3,-12(fp)
  8122ec:	008003c4 	movi	r2,15
  8122f0:	18800005 	stb	r2,0(r3)
        return (pevent);
  8122f4:	e0fffb17 	ldw	r3,-20(fp)
  8122f8:	e0ffff15 	stw	r3,-4(fp)
  8122fc:	00007406 	br	8124d0 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812300:	0005303a 	rdctl	r2,status
  812304:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812308:	e0fff717 	ldw	r3,-36(fp)
  81230c:	00bfff84 	movi	r2,-2
  812310:	1884703a 	and	r2,r3,r2
  812314:	1001703a 	wrctl	status,r2
  
  return context;
  812318:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81231c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  812320:	e0bffb17 	ldw	r2,-20(fp)
  812324:	10800283 	ldbu	r2,10(r2)
  812328:	10803fcc 	andi	r2,r2,255
  81232c:	1005003a 	cmpeq	r2,r2,zero
  812330:	1000031e 	bne	r2,zero,812340 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  812334:	00800044 	movi	r2,1
  812338:	e0bffa05 	stb	r2,-24(fp)
  81233c:	00000106 	br	812344 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  812340:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  812344:	e0bffc03 	ldbu	r2,-16(fp)
  812348:	e0bffe15 	stw	r2,-8(fp)
  81234c:	e0fffe17 	ldw	r3,-8(fp)
  812350:	1805003a 	cmpeq	r2,r3,zero
  812354:	1000041e 	bne	r2,zero,812368 <OSSemDel+0x120>
  812358:	e0fffe17 	ldw	r3,-8(fp)
  81235c:	18800060 	cmpeqi	r2,r3,1
  812360:	10002d1e 	bne	r2,zero,812418 <OSSemDel+0x1d0>
  812364:	00004f06 	br	8124a4 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  812368:	e0bffa03 	ldbu	r2,-24(fp)
  81236c:	1004c03a 	cmpne	r2,r2,zero
  812370:	10001a1e 	bne	r2,zero,8123dc <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  812374:	e0fffb17 	ldw	r3,-20(fp)
  812378:	00800fc4 	movi	r2,63
  81237c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  812380:	e0bffb17 	ldw	r2,-20(fp)
  812384:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  812388:	e0bffb17 	ldw	r2,-20(fp)
  81238c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  812390:	008020b4 	movhi	r2,130
  812394:	10802904 	addi	r2,r2,164
  812398:	10c00017 	ldw	r3,0(r2)
  81239c:	e0bffb17 	ldw	r2,-20(fp)
  8123a0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  8123a4:	e0bffb17 	ldw	r2,-20(fp)
  8123a8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  8123ac:	00c020b4 	movhi	r3,130
  8123b0:	18c02904 	addi	r3,r3,164
  8123b4:	e0bffb17 	ldw	r2,-20(fp)
  8123b8:	18800015 	stw	r2,0(r3)
  8123bc:	e0bff817 	ldw	r2,-32(fp)
  8123c0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8123c4:	e0bff617 	ldw	r2,-40(fp)
  8123c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  8123cc:	e0bffd17 	ldw	r2,-12(fp)
  8123d0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  8123d4:	e03ff915 	stw	zero,-28(fp)
  8123d8:	00003b06 	br	8124c8 <OSSemDel+0x280>
  8123dc:	e0bff817 	ldw	r2,-32(fp)
  8123e0:	e0bff515 	stw	r2,-44(fp)
  8123e4:	e0bff517 	ldw	r2,-44(fp)
  8123e8:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  8123ec:	e0fffd17 	ldw	r3,-12(fp)
  8123f0:	00801244 	movi	r2,73
  8123f4:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  8123f8:	e0bffb17 	ldw	r2,-20(fp)
  8123fc:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  812400:	00003106 	br	8124c8 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  812404:	e13ffb17 	ldw	r4,-20(fp)
  812408:	000b883a 	mov	r5,zero
  81240c:	01800044 	movi	r6,1
  812410:	000f883a 	mov	r7,zero
  812414:	080d9480 	call	80d948 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  812418:	e0bffb17 	ldw	r2,-20(fp)
  81241c:	10800283 	ldbu	r2,10(r2)
  812420:	10803fcc 	andi	r2,r2,255
  812424:	1004c03a 	cmpne	r2,r2,zero
  812428:	103ff61e 	bne	r2,zero,812404 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  81242c:	e0fffb17 	ldw	r3,-20(fp)
  812430:	00800fc4 	movi	r2,63
  812434:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  812438:	e0bffb17 	ldw	r2,-20(fp)
  81243c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  812440:	e0bffb17 	ldw	r2,-20(fp)
  812444:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  812448:	008020b4 	movhi	r2,130
  81244c:	10802904 	addi	r2,r2,164
  812450:	10c00017 	ldw	r3,0(r2)
  812454:	e0bffb17 	ldw	r2,-20(fp)
  812458:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  81245c:	e0bffb17 	ldw	r2,-20(fp)
  812460:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  812464:	00c020b4 	movhi	r3,130
  812468:	18c02904 	addi	r3,r3,164
  81246c:	e0bffb17 	ldw	r2,-20(fp)
  812470:	18800015 	stw	r2,0(r3)
  812474:	e0bff817 	ldw	r2,-32(fp)
  812478:	e0bff415 	stw	r2,-48(fp)
  81247c:	e0bff417 	ldw	r2,-48(fp)
  812480:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  812484:	e0bffa03 	ldbu	r2,-24(fp)
  812488:	10800058 	cmpnei	r2,r2,1
  81248c:	1000011e 	bne	r2,zero,812494 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  812490:	080e3880 	call	80e388 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  812494:	e0bffd17 	ldw	r2,-12(fp)
  812498:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  81249c:	e03ff915 	stw	zero,-28(fp)
             break;
  8124a0:	00000906 	br	8124c8 <OSSemDel+0x280>
  8124a4:	e0bff817 	ldw	r2,-32(fp)
  8124a8:	e0bff315 	stw	r2,-52(fp)
  8124ac:	e0bff317 	ldw	r2,-52(fp)
  8124b0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  8124b4:	e0fffd17 	ldw	r3,-12(fp)
  8124b8:	008001c4 	movi	r2,7
  8124bc:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  8124c0:	e0bffb17 	ldw	r2,-20(fp)
  8124c4:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  8124c8:	e0bff917 	ldw	r2,-28(fp)
  8124cc:	e0bfff15 	stw	r2,-4(fp)
  8124d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8124d4:	e037883a 	mov	sp,fp
  8124d8:	dfc00117 	ldw	ra,4(sp)
  8124dc:	df000017 	ldw	fp,0(sp)
  8124e0:	dec00204 	addi	sp,sp,8
  8124e4:	f800283a 	ret

008124e8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  8124e8:	defff404 	addi	sp,sp,-48
  8124ec:	dfc00b15 	stw	ra,44(sp)
  8124f0:	df000a15 	stw	fp,40(sp)
  8124f4:	df000a04 	addi	fp,sp,40
  8124f8:	e13ffc15 	stw	r4,-16(fp)
  8124fc:	e1bffe15 	stw	r6,-8(fp)
  812500:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812504:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  812508:	e0bffe17 	ldw	r2,-8(fp)
  81250c:	1005003a 	cmpeq	r2,r2,zero
  812510:	10008f1e 	bne	r2,zero,812750 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  812514:	e0bffc17 	ldw	r2,-16(fp)
  812518:	1004c03a 	cmpne	r2,r2,zero
  81251c:	1000041e 	bne	r2,zero,812530 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  812520:	e0fffe17 	ldw	r3,-8(fp)
  812524:	00800104 	movi	r2,4
  812528:	18800005 	stb	r2,0(r3)
        return;
  81252c:	00008806 	br	812750 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  812530:	e0bffc17 	ldw	r2,-16(fp)
  812534:	10800003 	ldbu	r2,0(r2)
  812538:	10803fcc 	andi	r2,r2,255
  81253c:	108000e0 	cmpeqi	r2,r2,3
  812540:	1000041e 	bne	r2,zero,812554 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  812544:	e0fffe17 	ldw	r3,-8(fp)
  812548:	00800044 	movi	r2,1
  81254c:	18800005 	stb	r2,0(r3)
        return;
  812550:	00007f06 	br	812750 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  812554:	008020b4 	movhi	r2,130
  812558:	10802a04 	addi	r2,r2,168
  81255c:	10800003 	ldbu	r2,0(r2)
  812560:	10803fcc 	andi	r2,r2,255
  812564:	1005003a 	cmpeq	r2,r2,zero
  812568:	1000041e 	bne	r2,zero,81257c <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  81256c:	e0fffe17 	ldw	r3,-8(fp)
  812570:	00800084 	movi	r2,2
  812574:	18800005 	stb	r2,0(r3)
        return;
  812578:	00007506 	br	812750 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  81257c:	008020b4 	movhi	r2,130
  812580:	10801c04 	addi	r2,r2,112
  812584:	10800003 	ldbu	r2,0(r2)
  812588:	10803fcc 	andi	r2,r2,255
  81258c:	1005003a 	cmpeq	r2,r2,zero
  812590:	1000041e 	bne	r2,zero,8125a4 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  812594:	e0fffe17 	ldw	r3,-8(fp)
  812598:	00800344 	movi	r2,13
  81259c:	18800005 	stb	r2,0(r3)
        return;
  8125a0:	00006b06 	br	812750 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8125a4:	0005303a 	rdctl	r2,status
  8125a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8125ac:	e0fffa17 	ldw	r3,-24(fp)
  8125b0:	00bfff84 	movi	r2,-2
  8125b4:	1884703a 	and	r2,r3,r2
  8125b8:	1001703a 	wrctl	status,r2
  
  return context;
  8125bc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  8125c0:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  8125c4:	e0bffc17 	ldw	r2,-16(fp)
  8125c8:	1080020b 	ldhu	r2,8(r2)
  8125cc:	10bfffcc 	andi	r2,r2,65535
  8125d0:	1005003a 	cmpeq	r2,r2,zero
  8125d4:	10000d1e 	bne	r2,zero,81260c <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  8125d8:	e0bffc17 	ldw	r2,-16(fp)
  8125dc:	1080020b 	ldhu	r2,8(r2)
  8125e0:	10bfffc4 	addi	r2,r2,-1
  8125e4:	1007883a 	mov	r3,r2
  8125e8:	e0bffc17 	ldw	r2,-16(fp)
  8125ec:	10c0020d 	sth	r3,8(r2)
  8125f0:	e0bffb17 	ldw	r2,-20(fp)
  8125f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8125f8:	e0bff917 	ldw	r2,-28(fp)
  8125fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  812600:	e0bffe17 	ldw	r2,-8(fp)
  812604:	10000005 	stb	zero,0(r2)
        return;
  812608:	00005106 	br	812750 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  81260c:	008020b4 	movhi	r2,130
  812610:	10802b04 	addi	r2,r2,172
  812614:	10c00017 	ldw	r3,0(r2)
  812618:	008020b4 	movhi	r2,130
  81261c:	10802b04 	addi	r2,r2,172
  812620:	10800017 	ldw	r2,0(r2)
  812624:	10800c03 	ldbu	r2,48(r2)
  812628:	10800054 	ori	r2,r2,1
  81262c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  812630:	008020b4 	movhi	r2,130
  812634:	10802b04 	addi	r2,r2,172
  812638:	10800017 	ldw	r2,0(r2)
  81263c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  812640:	008020b4 	movhi	r2,130
  812644:	10802b04 	addi	r2,r2,172
  812648:	10c00017 	ldw	r3,0(r2)
  81264c:	e0bffd0b 	ldhu	r2,-12(fp)
  812650:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  812654:	e13ffc17 	ldw	r4,-16(fp)
  812658:	080dadc0 	call	80dadc <OS_EventTaskWait>
  81265c:	e0bffb17 	ldw	r2,-20(fp)
  812660:	e0bff815 	stw	r2,-32(fp)
  812664:	e0bff817 	ldw	r2,-32(fp)
  812668:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  81266c:	080e3880 	call	80e388 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812670:	0005303a 	rdctl	r2,status
  812674:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812678:	e0fff717 	ldw	r3,-36(fp)
  81267c:	00bfff84 	movi	r2,-2
  812680:	1884703a 	and	r2,r3,r2
  812684:	1001703a 	wrctl	status,r2
  
  return context;
  812688:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  81268c:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  812690:	008020b4 	movhi	r2,130
  812694:	10802b04 	addi	r2,r2,172
  812698:	10800017 	ldw	r2,0(r2)
  81269c:	10800c43 	ldbu	r2,49(r2)
  8126a0:	10803fcc 	andi	r2,r2,255
  8126a4:	e0bfff15 	stw	r2,-4(fp)
  8126a8:	e0ffff17 	ldw	r3,-4(fp)
  8126ac:	1805003a 	cmpeq	r2,r3,zero
  8126b0:	1000041e 	bne	r2,zero,8126c4 <OSSemPend+0x1dc>
  8126b4:	e0ffff17 	ldw	r3,-4(fp)
  8126b8:	188000a0 	cmpeqi	r2,r3,2
  8126bc:	1000041e 	bne	r2,zero,8126d0 <OSSemPend+0x1e8>
  8126c0:	00000706 	br	8126e0 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  8126c4:	e0bffe17 	ldw	r2,-8(fp)
  8126c8:	10000005 	stb	zero,0(r2)
             break;
  8126cc:	00000c06 	br	812700 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  8126d0:	e0fffe17 	ldw	r3,-8(fp)
  8126d4:	00800384 	movi	r2,14
  8126d8:	18800005 	stb	r2,0(r3)
             break;
  8126dc:	00000806 	br	812700 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  8126e0:	008020b4 	movhi	r2,130
  8126e4:	10802b04 	addi	r2,r2,172
  8126e8:	11000017 	ldw	r4,0(r2)
  8126ec:	e17ffc17 	ldw	r5,-16(fp)
  8126f0:	080dd400 	call	80dd40 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  8126f4:	e0fffe17 	ldw	r3,-8(fp)
  8126f8:	00800284 	movi	r2,10
  8126fc:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  812700:	008020b4 	movhi	r2,130
  812704:	10802b04 	addi	r2,r2,172
  812708:	10800017 	ldw	r2,0(r2)
  81270c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  812710:	008020b4 	movhi	r2,130
  812714:	10802b04 	addi	r2,r2,172
  812718:	10800017 	ldw	r2,0(r2)
  81271c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  812720:	008020b4 	movhi	r2,130
  812724:	10802b04 	addi	r2,r2,172
  812728:	10800017 	ldw	r2,0(r2)
  81272c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  812730:	008020b4 	movhi	r2,130
  812734:	10802b04 	addi	r2,r2,172
  812738:	10800017 	ldw	r2,0(r2)
  81273c:	10000815 	stw	zero,32(r2)
  812740:	e0bffb17 	ldw	r2,-20(fp)
  812744:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812748:	e0bff617 	ldw	r2,-40(fp)
  81274c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  812750:	e037883a 	mov	sp,fp
  812754:	dfc00117 	ldw	ra,4(sp)
  812758:	df000017 	ldw	fp,0(sp)
  81275c:	dec00204 	addi	sp,sp,8
  812760:	f800283a 	ret

00812764 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  812764:	defff504 	addi	sp,sp,-44
  812768:	dfc00a15 	stw	ra,40(sp)
  81276c:	df000915 	stw	fp,36(sp)
  812770:	df000904 	addi	fp,sp,36
  812774:	e13ffc15 	stw	r4,-16(fp)
  812778:	e1bffe15 	stw	r6,-8(fp)
  81277c:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812780:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  812784:	e0bffe17 	ldw	r2,-8(fp)
  812788:	1004c03a 	cmpne	r2,r2,zero
  81278c:	1000021e 	bne	r2,zero,812798 <OSSemPendAbort+0x34>
        return (0);
  812790:	e03fff15 	stw	zero,-4(fp)
  812794:	00004c06 	br	8128c8 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  812798:	e0bffc17 	ldw	r2,-16(fp)
  81279c:	1004c03a 	cmpne	r2,r2,zero
  8127a0:	1000051e 	bne	r2,zero,8127b8 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  8127a4:	e0fffe17 	ldw	r3,-8(fp)
  8127a8:	00800104 	movi	r2,4
  8127ac:	18800005 	stb	r2,0(r3)
        return (0);
  8127b0:	e03fff15 	stw	zero,-4(fp)
  8127b4:	00004406 	br	8128c8 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8127b8:	e0bffc17 	ldw	r2,-16(fp)
  8127bc:	10800003 	ldbu	r2,0(r2)
  8127c0:	10803fcc 	andi	r2,r2,255
  8127c4:	108000e0 	cmpeqi	r2,r2,3
  8127c8:	1000051e 	bne	r2,zero,8127e0 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  8127cc:	e0fffe17 	ldw	r3,-8(fp)
  8127d0:	00800044 	movi	r2,1
  8127d4:	18800005 	stb	r2,0(r3)
        return (0);
  8127d8:	e03fff15 	stw	zero,-4(fp)
  8127dc:	00003a06 	br	8128c8 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8127e0:	0005303a 	rdctl	r2,status
  8127e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8127e8:	e0fff917 	ldw	r3,-28(fp)
  8127ec:	00bfff84 	movi	r2,-2
  8127f0:	1884703a 	and	r2,r3,r2
  8127f4:	1001703a 	wrctl	status,r2
  
  return context;
  8127f8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8127fc:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  812800:	e0bffc17 	ldw	r2,-16(fp)
  812804:	10800283 	ldbu	r2,10(r2)
  812808:	10803fcc 	andi	r2,r2,255
  81280c:	1005003a 	cmpeq	r2,r2,zero
  812810:	1000261e 	bne	r2,zero,8128ac <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  812814:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  812818:	e0bffd03 	ldbu	r2,-12(fp)
  81281c:	10800060 	cmpeqi	r2,r2,1
  812820:	1000091e 	bne	r2,zero,812848 <OSSemPendAbort+0xe4>
  812824:	00000e06 	br	812860 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  812828:	e13ffc17 	ldw	r4,-16(fp)
  81282c:	000b883a 	mov	r5,zero
  812830:	01800044 	movi	r6,1
  812834:	01c00084 	movi	r7,2
  812838:	080d9480 	call	80d948 <OS_EventTaskRdy>
                     nbr_tasks++;
  81283c:	e0bffb03 	ldbu	r2,-20(fp)
  812840:	10800044 	addi	r2,r2,1
  812844:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  812848:	e0bffc17 	ldw	r2,-16(fp)
  81284c:	10800283 	ldbu	r2,10(r2)
  812850:	10803fcc 	andi	r2,r2,255
  812854:	1004c03a 	cmpne	r2,r2,zero
  812858:	103ff31e 	bne	r2,zero,812828 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  81285c:	00000806 	br	812880 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  812860:	e13ffc17 	ldw	r4,-16(fp)
  812864:	000b883a 	mov	r5,zero
  812868:	01800044 	movi	r6,1
  81286c:	01c00084 	movi	r7,2
  812870:	080d9480 	call	80d948 <OS_EventTaskRdy>
                 nbr_tasks++;
  812874:	e0bffb03 	ldbu	r2,-20(fp)
  812878:	10800044 	addi	r2,r2,1
  81287c:	e0bffb05 	stb	r2,-20(fp)
  812880:	e0bffa17 	ldw	r2,-24(fp)
  812884:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812888:	e0bff817 	ldw	r2,-32(fp)
  81288c:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  812890:	080e3880 	call	80e388 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  812894:	e0fffe17 	ldw	r3,-8(fp)
  812898:	00800384 	movi	r2,14
  81289c:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  8128a0:	e0bffb03 	ldbu	r2,-20(fp)
  8128a4:	e0bfff15 	stw	r2,-4(fp)
  8128a8:	00000706 	br	8128c8 <OSSemPendAbort+0x164>
  8128ac:	e0bffa17 	ldw	r2,-24(fp)
  8128b0:	e0bff715 	stw	r2,-36(fp)
  8128b4:	e0bff717 	ldw	r2,-36(fp)
  8128b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8128bc:	e0bffe17 	ldw	r2,-8(fp)
  8128c0:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  8128c4:	e03fff15 	stw	zero,-4(fp)
  8128c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8128cc:	e037883a 	mov	sp,fp
  8128d0:	dfc00117 	ldw	ra,4(sp)
  8128d4:	df000017 	ldw	fp,0(sp)
  8128d8:	dec00204 	addi	sp,sp,8
  8128dc:	f800283a 	ret

008128e0 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  8128e0:	defff704 	addi	sp,sp,-36
  8128e4:	dfc00815 	stw	ra,32(sp)
  8128e8:	df000715 	stw	fp,28(sp)
  8128ec:	df000704 	addi	fp,sp,28
  8128f0:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8128f4:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8128f8:	e0bffe17 	ldw	r2,-8(fp)
  8128fc:	1004c03a 	cmpne	r2,r2,zero
  812900:	1000031e 	bne	r2,zero,812910 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  812904:	00800104 	movi	r2,4
  812908:	e0bfff15 	stw	r2,-4(fp)
  81290c:	00003806 	br	8129f0 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  812910:	e0bffe17 	ldw	r2,-8(fp)
  812914:	10800003 	ldbu	r2,0(r2)
  812918:	10803fcc 	andi	r2,r2,255
  81291c:	108000e0 	cmpeqi	r2,r2,3
  812920:	1000031e 	bne	r2,zero,812930 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  812924:	00800044 	movi	r2,1
  812928:	e0bfff15 	stw	r2,-4(fp)
  81292c:	00003006 	br	8129f0 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812930:	0005303a 	rdctl	r2,status
  812934:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812938:	e0fffc17 	ldw	r3,-16(fp)
  81293c:	00bfff84 	movi	r2,-2
  812940:	1884703a 	and	r2,r3,r2
  812944:	1001703a 	wrctl	status,r2
  
  return context;
  812948:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  81294c:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  812950:	e0bffe17 	ldw	r2,-8(fp)
  812954:	10800283 	ldbu	r2,10(r2)
  812958:	10803fcc 	andi	r2,r2,255
  81295c:	1005003a 	cmpeq	r2,r2,zero
  812960:	10000c1e 	bne	r2,zero,812994 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  812964:	e13ffe17 	ldw	r4,-8(fp)
  812968:	000b883a 	mov	r5,zero
  81296c:	01800044 	movi	r6,1
  812970:	000f883a 	mov	r7,zero
  812974:	080d9480 	call	80d948 <OS_EventTaskRdy>
  812978:	e0bffd17 	ldw	r2,-12(fp)
  81297c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812980:	e0bffb17 	ldw	r2,-20(fp)
  812984:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  812988:	080e3880 	call	80e388 <OS_Sched>
        return (OS_ERR_NONE);
  81298c:	e03fff15 	stw	zero,-4(fp)
  812990:	00001706 	br	8129f0 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  812994:	e0bffe17 	ldw	r2,-8(fp)
  812998:	1080020b 	ldhu	r2,8(r2)
  81299c:	10ffffcc 	andi	r3,r2,65535
  8129a0:	00bfffd4 	movui	r2,65535
  8129a4:	18800c26 	beq	r3,r2,8129d8 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  8129a8:	e0bffe17 	ldw	r2,-8(fp)
  8129ac:	1080020b 	ldhu	r2,8(r2)
  8129b0:	10800044 	addi	r2,r2,1
  8129b4:	1007883a 	mov	r3,r2
  8129b8:	e0bffe17 	ldw	r2,-8(fp)
  8129bc:	10c0020d 	sth	r3,8(r2)
  8129c0:	e0bffd17 	ldw	r2,-12(fp)
  8129c4:	e0bffa15 	stw	r2,-24(fp)
  8129c8:	e0bffa17 	ldw	r2,-24(fp)
  8129cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  8129d0:	e03fff15 	stw	zero,-4(fp)
  8129d4:	00000606 	br	8129f0 <OSSemPost+0x110>
  8129d8:	e0bffd17 	ldw	r2,-12(fp)
  8129dc:	e0bff915 	stw	r2,-28(fp)
  8129e0:	e0bff917 	ldw	r2,-28(fp)
  8129e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  8129e8:	00800c84 	movi	r2,50
  8129ec:	e0bfff15 	stw	r2,-4(fp)
  8129f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8129f4:	e037883a 	mov	sp,fp
  8129f8:	dfc00117 	ldw	ra,4(sp)
  8129fc:	df000017 	ldw	fp,0(sp)
  812a00:	dec00204 	addi	sp,sp,8
  812a04:	f800283a 	ret

00812a08 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  812a08:	defff604 	addi	sp,sp,-40
  812a0c:	df000915 	stw	fp,36(sp)
  812a10:	df000904 	addi	fp,sp,36
  812a14:	e13ffd15 	stw	r4,-12(fp)
  812a18:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  812a1c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  812a20:	e0bffd17 	ldw	r2,-12(fp)
  812a24:	1004c03a 	cmpne	r2,r2,zero
  812a28:	1000031e 	bne	r2,zero,812a38 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  812a2c:	00800104 	movi	r2,4
  812a30:	e0bfff15 	stw	r2,-4(fp)
  812a34:	00003b06 	br	812b24 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  812a38:	e0bffe17 	ldw	r2,-8(fp)
  812a3c:	1004c03a 	cmpne	r2,r2,zero
  812a40:	1000031e 	bne	r2,zero,812a50 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  812a44:	00800244 	movi	r2,9
  812a48:	e0bfff15 	stw	r2,-4(fp)
  812a4c:	00003506 	br	812b24 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  812a50:	e0bffd17 	ldw	r2,-12(fp)
  812a54:	10800003 	ldbu	r2,0(r2)
  812a58:	10803fcc 	andi	r2,r2,255
  812a5c:	108000e0 	cmpeqi	r2,r2,3
  812a60:	1000031e 	bne	r2,zero,812a70 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  812a64:	00800044 	movi	r2,1
  812a68:	e0bfff15 	stw	r2,-4(fp)
  812a6c:	00002d06 	br	812b24 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812a70:	0005303a 	rdctl	r2,status
  812a74:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812a78:	e0fff817 	ldw	r3,-32(fp)
  812a7c:	00bfff84 	movi	r2,-2
  812a80:	1884703a 	and	r2,r3,r2
  812a84:	1001703a 	wrctl	status,r2
  
  return context;
  812a88:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  812a8c:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  812a90:	e0bffd17 	ldw	r2,-12(fp)
  812a94:	10c00283 	ldbu	r3,10(r2)
  812a98:	e0bffe17 	ldw	r2,-8(fp)
  812a9c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  812aa0:	e0bffd17 	ldw	r2,-12(fp)
  812aa4:	108002c4 	addi	r2,r2,11
  812aa8:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  812aac:	e0bffe17 	ldw	r2,-8(fp)
  812ab0:	10800084 	addi	r2,r2,2
  812ab4:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  812ab8:	e03ffa05 	stb	zero,-24(fp)
  812abc:	00000d06 	br	812af4 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  812ac0:	e0bffc17 	ldw	r2,-16(fp)
  812ac4:	10c00003 	ldbu	r3,0(r2)
  812ac8:	e0bffb17 	ldw	r2,-20(fp)
  812acc:	10c00005 	stb	r3,0(r2)
  812ad0:	e0bffb17 	ldw	r2,-20(fp)
  812ad4:	10800044 	addi	r2,r2,1
  812ad8:	e0bffb15 	stw	r2,-20(fp)
  812adc:	e0bffc17 	ldw	r2,-16(fp)
  812ae0:	10800044 	addi	r2,r2,1
  812ae4:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  812ae8:	e0bffa03 	ldbu	r2,-24(fp)
  812aec:	10800044 	addi	r2,r2,1
  812af0:	e0bffa05 	stb	r2,-24(fp)
  812af4:	e0bffa03 	ldbu	r2,-24(fp)
  812af8:	108000f0 	cmpltui	r2,r2,3
  812afc:	103ff01e 	bne	r2,zero,812ac0 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  812b00:	e0bffd17 	ldw	r2,-12(fp)
  812b04:	10c0020b 	ldhu	r3,8(r2)
  812b08:	e0bffe17 	ldw	r2,-8(fp)
  812b0c:	10c0000d 	sth	r3,0(r2)
  812b10:	e0bff917 	ldw	r2,-28(fp)
  812b14:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812b18:	e0bff717 	ldw	r2,-36(fp)
  812b1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  812b20:	e03fff15 	stw	zero,-4(fp)
  812b24:	e0bfff17 	ldw	r2,-4(fp)
}
  812b28:	e037883a 	mov	sp,fp
  812b2c:	df000017 	ldw	fp,0(sp)
  812b30:	dec00104 	addi	sp,sp,4
  812b34:	f800283a 	ret

00812b38 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  812b38:	defff904 	addi	sp,sp,-28
  812b3c:	df000615 	stw	fp,24(sp)
  812b40:	df000604 	addi	fp,sp,24
  812b44:	e13ffd15 	stw	r4,-12(fp)
  812b48:	e1bfff15 	stw	r6,-4(fp)
  812b4c:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812b50:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  812b54:	e0bfff17 	ldw	r2,-4(fp)
  812b58:	1005003a 	cmpeq	r2,r2,zero
  812b5c:	1000331e 	bne	r2,zero,812c2c <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  812b60:	e0bffd17 	ldw	r2,-12(fp)
  812b64:	1004c03a 	cmpne	r2,r2,zero
  812b68:	1000041e 	bne	r2,zero,812b7c <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  812b6c:	e0ffff17 	ldw	r3,-4(fp)
  812b70:	00800104 	movi	r2,4
  812b74:	18800005 	stb	r2,0(r3)
        return;
  812b78:	00002c06 	br	812c2c <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  812b7c:	e0bffd17 	ldw	r2,-12(fp)
  812b80:	10800003 	ldbu	r2,0(r2)
  812b84:	10803fcc 	andi	r2,r2,255
  812b88:	108000e0 	cmpeqi	r2,r2,3
  812b8c:	1000041e 	bne	r2,zero,812ba0 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  812b90:	e0ffff17 	ldw	r3,-4(fp)
  812b94:	00800044 	movi	r2,1
  812b98:	18800005 	stb	r2,0(r3)
        return;
  812b9c:	00002306 	br	812c2c <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812ba0:	0005303a 	rdctl	r2,status
  812ba4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812ba8:	e0fffb17 	ldw	r3,-20(fp)
  812bac:	00bfff84 	movi	r2,-2
  812bb0:	1884703a 	and	r2,r3,r2
  812bb4:	1001703a 	wrctl	status,r2
  
  return context;
  812bb8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  812bbc:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  812bc0:	e0bfff17 	ldw	r2,-4(fp)
  812bc4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  812bc8:	e0bffd17 	ldw	r2,-12(fp)
  812bcc:	1080020b 	ldhu	r2,8(r2)
  812bd0:	10bfffcc 	andi	r2,r2,65535
  812bd4:	1005003a 	cmpeq	r2,r2,zero
  812bd8:	1000041e 	bne	r2,zero,812bec <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  812bdc:	e0fffd17 	ldw	r3,-12(fp)
  812be0:	e0bffe0b 	ldhu	r2,-8(fp)
  812be4:	1880020d 	sth	r2,8(r3)
  812be8:	00000c06 	br	812c1c <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  812bec:	e0bffd17 	ldw	r2,-12(fp)
  812bf0:	10800283 	ldbu	r2,10(r2)
  812bf4:	10803fcc 	andi	r2,r2,255
  812bf8:	1004c03a 	cmpne	r2,r2,zero
  812bfc:	1000041e 	bne	r2,zero,812c10 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  812c00:	e0fffd17 	ldw	r3,-12(fp)
  812c04:	e0bffe0b 	ldhu	r2,-8(fp)
  812c08:	1880020d 	sth	r2,8(r3)
  812c0c:	00000306 	br	812c1c <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  812c10:	e0ffff17 	ldw	r3,-4(fp)
  812c14:	00801244 	movi	r2,73
  812c18:	18800005 	stb	r2,0(r3)
  812c1c:	e0bffc17 	ldw	r2,-16(fp)
  812c20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812c24:	e0bffa17 	ldw	r2,-24(fp)
  812c28:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  812c2c:	e037883a 	mov	sp,fp
  812c30:	df000017 	ldw	fp,0(sp)
  812c34:	dec00104 	addi	sp,sp,4
  812c38:	f800283a 	ret

00812c3c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  812c3c:	defff004 	addi	sp,sp,-64
  812c40:	dfc00f15 	stw	ra,60(sp)
  812c44:	df000e15 	stw	fp,56(sp)
  812c48:	df000e04 	addi	fp,sp,56
  812c4c:	e13ffd05 	stb	r4,-12(fp)
  812c50:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  812c54:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  812c58:	e0bffd03 	ldbu	r2,-12(fp)
  812c5c:	10800530 	cmpltui	r2,r2,20
  812c60:	1000061e 	bne	r2,zero,812c7c <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  812c64:	e0bffd03 	ldbu	r2,-12(fp)
  812c68:	10803fe0 	cmpeqi	r2,r2,255
  812c6c:	1000031e 	bne	r2,zero,812c7c <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  812c70:	00800a84 	movi	r2,42
  812c74:	e0bfff15 	stw	r2,-4(fp)
  812c78:	00014706 	br	813198 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  812c7c:	e0bffe03 	ldbu	r2,-8(fp)
  812c80:	10800530 	cmpltui	r2,r2,20
  812c84:	1000031e 	bne	r2,zero,812c94 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  812c88:	00800a84 	movi	r2,42
  812c8c:	e0bfff15 	stw	r2,-4(fp)
  812c90:	00014106 	br	813198 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812c94:	0005303a 	rdctl	r2,status
  812c98:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812c9c:	e0fff617 	ldw	r3,-40(fp)
  812ca0:	00bfff84 	movi	r2,-2
  812ca4:	1884703a 	and	r2,r3,r2
  812ca8:	1001703a 	wrctl	status,r2
  
  return context;
  812cac:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812cb0:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  812cb4:	e0bffe03 	ldbu	r2,-8(fp)
  812cb8:	00c020f4 	movhi	r3,131
  812cbc:	18d73204 	addi	r3,r3,23752
  812cc0:	1085883a 	add	r2,r2,r2
  812cc4:	1085883a 	add	r2,r2,r2
  812cc8:	10c5883a 	add	r2,r2,r3
  812ccc:	10800017 	ldw	r2,0(r2)
  812cd0:	1005003a 	cmpeq	r2,r2,zero
  812cd4:	1000071e 	bne	r2,zero,812cf4 <OSTaskChangePrio+0xb8>
  812cd8:	e0bff717 	ldw	r2,-36(fp)
  812cdc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812ce0:	e0bff517 	ldw	r2,-44(fp)
  812ce4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  812ce8:	00800a04 	movi	r2,40
  812cec:	e0bfff15 	stw	r2,-4(fp)
  812cf0:	00012906 	br	813198 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  812cf4:	e0bffd03 	ldbu	r2,-12(fp)
  812cf8:	10803fd8 	cmpnei	r2,r2,255
  812cfc:	1000051e 	bne	r2,zero,812d14 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  812d00:	008020b4 	movhi	r2,130
  812d04:	10802b04 	addi	r2,r2,172
  812d08:	10800017 	ldw	r2,0(r2)
  812d0c:	10800c83 	ldbu	r2,50(r2)
  812d10:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  812d14:	e0bffd03 	ldbu	r2,-12(fp)
  812d18:	00c020f4 	movhi	r3,131
  812d1c:	18d73204 	addi	r3,r3,23752
  812d20:	1085883a 	add	r2,r2,r2
  812d24:	1085883a 	add	r2,r2,r2
  812d28:	10c5883a 	add	r2,r2,r3
  812d2c:	10800017 	ldw	r2,0(r2)
  812d30:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  812d34:	e0bffa17 	ldw	r2,-24(fp)
  812d38:	1004c03a 	cmpne	r2,r2,zero
  812d3c:	1000071e 	bne	r2,zero,812d5c <OSTaskChangePrio+0x120>
  812d40:	e0bff717 	ldw	r2,-36(fp)
  812d44:	e0bff415 	stw	r2,-48(fp)
  812d48:	e0bff417 	ldw	r2,-48(fp)
  812d4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  812d50:	00800a44 	movi	r2,41
  812d54:	e0bfff15 	stw	r2,-4(fp)
  812d58:	00010f06 	br	813198 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  812d5c:	e0bffa17 	ldw	r2,-24(fp)
  812d60:	10800058 	cmpnei	r2,r2,1
  812d64:	1000071e 	bne	r2,zero,812d84 <OSTaskChangePrio+0x148>
  812d68:	e0bff717 	ldw	r2,-36(fp)
  812d6c:	e0bff315 	stw	r2,-52(fp)
  812d70:	e0bff317 	ldw	r2,-52(fp)
  812d74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  812d78:	008010c4 	movi	r2,67
  812d7c:	e0bfff15 	stw	r2,-4(fp)
  812d80:	00010506 	br	813198 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  812d84:	e0bffe03 	ldbu	r2,-8(fp)
  812d88:	1004d0fa 	srli	r2,r2,3
  812d8c:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  812d90:	e0bffe03 	ldbu	r2,-8(fp)
  812d94:	108001cc 	andi	r2,r2,7
  812d98:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  812d9c:	e0fff983 	ldbu	r3,-26(fp)
  812da0:	00800044 	movi	r2,1
  812da4:	10c4983a 	sll	r2,r2,r3
  812da8:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  812dac:	e0fff943 	ldbu	r3,-27(fp)
  812db0:	00800044 	movi	r2,1
  812db4:	10c4983a 	sll	r2,r2,r3
  812db8:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  812dbc:	e0bffd03 	ldbu	r2,-12(fp)
  812dc0:	00c020f4 	movhi	r3,131
  812dc4:	18d73204 	addi	r3,r3,23752
  812dc8:	1085883a 	add	r2,r2,r2
  812dcc:	1085883a 	add	r2,r2,r2
  812dd0:	10c5883a 	add	r2,r2,r3
  812dd4:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  812dd8:	e0bffe03 	ldbu	r2,-8(fp)
  812ddc:	00c020f4 	movhi	r3,131
  812de0:	18d73204 	addi	r3,r3,23752
  812de4:	1085883a 	add	r2,r2,r2
  812de8:	1085883a 	add	r2,r2,r2
  812dec:	10c7883a 	add	r3,r2,r3
  812df0:	e0bffa17 	ldw	r2,-24(fp)
  812df4:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  812df8:	e0bffa17 	ldw	r2,-24(fp)
  812dfc:	10800d03 	ldbu	r2,52(r2)
  812e00:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  812e04:	e0bffa17 	ldw	r2,-24(fp)
  812e08:	10800d83 	ldbu	r2,54(r2)
  812e0c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  812e10:	e0bffa17 	ldw	r2,-24(fp)
  812e14:	10800d43 	ldbu	r2,53(r2)
  812e18:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  812e1c:	e0fff903 	ldbu	r3,-28(fp)
  812e20:	008020b4 	movhi	r2,130
  812e24:	10802844 	addi	r2,r2,161
  812e28:	10c5883a 	add	r2,r2,r3
  812e2c:	10c00003 	ldbu	r3,0(r2)
  812e30:	e0bff803 	ldbu	r2,-32(fp)
  812e34:	1884703a 	and	r2,r3,r2
  812e38:	10803fcc 	andi	r2,r2,255
  812e3c:	1005003a 	cmpeq	r2,r2,zero
  812e40:	1000381e 	bne	r2,zero,812f24 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  812e44:	e13ff903 	ldbu	r4,-28(fp)
  812e48:	e0fff903 	ldbu	r3,-28(fp)
  812e4c:	008020b4 	movhi	r2,130
  812e50:	10802844 	addi	r2,r2,161
  812e54:	10c5883a 	add	r2,r2,r3
  812e58:	10800003 	ldbu	r2,0(r2)
  812e5c:	1007883a 	mov	r3,r2
  812e60:	e0bff803 	ldbu	r2,-32(fp)
  812e64:	0084303a 	nor	r2,zero,r2
  812e68:	1884703a 	and	r2,r3,r2
  812e6c:	1007883a 	mov	r3,r2
  812e70:	008020b4 	movhi	r2,130
  812e74:	10802844 	addi	r2,r2,161
  812e78:	1105883a 	add	r2,r2,r4
  812e7c:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  812e80:	e0fff903 	ldbu	r3,-28(fp)
  812e84:	008020b4 	movhi	r2,130
  812e88:	10802844 	addi	r2,r2,161
  812e8c:	10c5883a 	add	r2,r2,r3
  812e90:	10800003 	ldbu	r2,0(r2)
  812e94:	10803fcc 	andi	r2,r2,255
  812e98:	1004c03a 	cmpne	r2,r2,zero
  812e9c:	10000b1e 	bne	r2,zero,812ecc <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  812ea0:	e0bff843 	ldbu	r2,-31(fp)
  812ea4:	0084303a 	nor	r2,zero,r2
  812ea8:	1007883a 	mov	r3,r2
  812eac:	008020b4 	movhi	r2,130
  812eb0:	10802804 	addi	r2,r2,160
  812eb4:	10800003 	ldbu	r2,0(r2)
  812eb8:	1884703a 	and	r2,r3,r2
  812ebc:	1007883a 	mov	r3,r2
  812ec0:	008020b4 	movhi	r2,130
  812ec4:	10802804 	addi	r2,r2,160
  812ec8:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  812ecc:	008020b4 	movhi	r2,130
  812ed0:	10802804 	addi	r2,r2,160
  812ed4:	10c00003 	ldbu	r3,0(r2)
  812ed8:	e0bff8c3 	ldbu	r2,-29(fp)
  812edc:	1884b03a 	or	r2,r3,r2
  812ee0:	1007883a 	mov	r3,r2
  812ee4:	008020b4 	movhi	r2,130
  812ee8:	10802804 	addi	r2,r2,160
  812eec:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  812ef0:	e13ff983 	ldbu	r4,-26(fp)
  812ef4:	e0fff983 	ldbu	r3,-26(fp)
  812ef8:	008020b4 	movhi	r2,130
  812efc:	10802844 	addi	r2,r2,161
  812f00:	10c5883a 	add	r2,r2,r3
  812f04:	10c00003 	ldbu	r3,0(r2)
  812f08:	e0bff883 	ldbu	r2,-30(fp)
  812f0c:	1884b03a 	or	r2,r3,r2
  812f10:	1007883a 	mov	r3,r2
  812f14:	008020b4 	movhi	r2,130
  812f18:	10802844 	addi	r2,r2,161
  812f1c:	1105883a 	add	r2,r2,r4
  812f20:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  812f24:	e0bffa17 	ldw	r2,-24(fp)
  812f28:	10800717 	ldw	r2,28(r2)
  812f2c:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  812f30:	e0bffc17 	ldw	r2,-16(fp)
  812f34:	1005003a 	cmpeq	r2,r2,zero
  812f38:	1000341e 	bne	r2,zero,81300c <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  812f3c:	e13ff903 	ldbu	r4,-28(fp)
  812f40:	e0fff903 	ldbu	r3,-28(fp)
  812f44:	e0bffc17 	ldw	r2,-16(fp)
  812f48:	1885883a 	add	r2,r3,r2
  812f4c:	10800204 	addi	r2,r2,8
  812f50:	108000c3 	ldbu	r2,3(r2)
  812f54:	1007883a 	mov	r3,r2
  812f58:	e0bff803 	ldbu	r2,-32(fp)
  812f5c:	0084303a 	nor	r2,zero,r2
  812f60:	1884703a 	and	r2,r3,r2
  812f64:	1007883a 	mov	r3,r2
  812f68:	e0bffc17 	ldw	r2,-16(fp)
  812f6c:	2085883a 	add	r2,r4,r2
  812f70:	10800204 	addi	r2,r2,8
  812f74:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  812f78:	e0fff903 	ldbu	r3,-28(fp)
  812f7c:	e0bffc17 	ldw	r2,-16(fp)
  812f80:	1885883a 	add	r2,r3,r2
  812f84:	10800204 	addi	r2,r2,8
  812f88:	108000c3 	ldbu	r2,3(r2)
  812f8c:	10803fcc 	andi	r2,r2,255
  812f90:	1004c03a 	cmpne	r2,r2,zero
  812f94:	1000091e 	bne	r2,zero,812fbc <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  812f98:	e0bffc17 	ldw	r2,-16(fp)
  812f9c:	10800283 	ldbu	r2,10(r2)
  812fa0:	1007883a 	mov	r3,r2
  812fa4:	e0bff843 	ldbu	r2,-31(fp)
  812fa8:	0084303a 	nor	r2,zero,r2
  812fac:	1884703a 	and	r2,r3,r2
  812fb0:	1007883a 	mov	r3,r2
  812fb4:	e0bffc17 	ldw	r2,-16(fp)
  812fb8:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  812fbc:	e0bffc17 	ldw	r2,-16(fp)
  812fc0:	10c00283 	ldbu	r3,10(r2)
  812fc4:	e0bff8c3 	ldbu	r2,-29(fp)
  812fc8:	1884b03a 	or	r2,r3,r2
  812fcc:	1007883a 	mov	r3,r2
  812fd0:	e0bffc17 	ldw	r2,-16(fp)
  812fd4:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  812fd8:	e13ff983 	ldbu	r4,-26(fp)
  812fdc:	e0fff983 	ldbu	r3,-26(fp)
  812fe0:	e0bffc17 	ldw	r2,-16(fp)
  812fe4:	1885883a 	add	r2,r3,r2
  812fe8:	10800204 	addi	r2,r2,8
  812fec:	10c000c3 	ldbu	r3,3(r2)
  812ff0:	e0bff883 	ldbu	r2,-30(fp)
  812ff4:	1884b03a 	or	r2,r3,r2
  812ff8:	1007883a 	mov	r3,r2
  812ffc:	e0bffc17 	ldw	r2,-16(fp)
  813000:	2085883a 	add	r2,r4,r2
  813004:	10800204 	addi	r2,r2,8
  813008:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  81300c:	e0bffa17 	ldw	r2,-24(fp)
  813010:	10800817 	ldw	r2,32(r2)
  813014:	1005003a 	cmpeq	r2,r2,zero
  813018:	1000441e 	bne	r2,zero,81312c <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  81301c:	e0bffa17 	ldw	r2,-24(fp)
  813020:	10800817 	ldw	r2,32(r2)
  813024:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  813028:	e0bffb17 	ldw	r2,-20(fp)
  81302c:	10800017 	ldw	r2,0(r2)
  813030:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  813034:	00003a06 	br	813120 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  813038:	e13ff903 	ldbu	r4,-28(fp)
  81303c:	e0fff903 	ldbu	r3,-28(fp)
  813040:	e0bffc17 	ldw	r2,-16(fp)
  813044:	1885883a 	add	r2,r3,r2
  813048:	10800204 	addi	r2,r2,8
  81304c:	108000c3 	ldbu	r2,3(r2)
  813050:	1007883a 	mov	r3,r2
  813054:	e0bff803 	ldbu	r2,-32(fp)
  813058:	0084303a 	nor	r2,zero,r2
  81305c:	1884703a 	and	r2,r3,r2
  813060:	1007883a 	mov	r3,r2
  813064:	e0bffc17 	ldw	r2,-16(fp)
  813068:	2085883a 	add	r2,r4,r2
  81306c:	10800204 	addi	r2,r2,8
  813070:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  813074:	e0fff903 	ldbu	r3,-28(fp)
  813078:	e0bffc17 	ldw	r2,-16(fp)
  81307c:	1885883a 	add	r2,r3,r2
  813080:	10800204 	addi	r2,r2,8
  813084:	108000c3 	ldbu	r2,3(r2)
  813088:	10803fcc 	andi	r2,r2,255
  81308c:	1004c03a 	cmpne	r2,r2,zero
  813090:	1000091e 	bne	r2,zero,8130b8 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  813094:	e0bffc17 	ldw	r2,-16(fp)
  813098:	10800283 	ldbu	r2,10(r2)
  81309c:	1007883a 	mov	r3,r2
  8130a0:	e0bff843 	ldbu	r2,-31(fp)
  8130a4:	0084303a 	nor	r2,zero,r2
  8130a8:	1884703a 	and	r2,r3,r2
  8130ac:	1007883a 	mov	r3,r2
  8130b0:	e0bffc17 	ldw	r2,-16(fp)
  8130b4:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  8130b8:	e0bffc17 	ldw	r2,-16(fp)
  8130bc:	10c00283 	ldbu	r3,10(r2)
  8130c0:	e0bff8c3 	ldbu	r2,-29(fp)
  8130c4:	1884b03a 	or	r2,r3,r2
  8130c8:	1007883a 	mov	r3,r2
  8130cc:	e0bffc17 	ldw	r2,-16(fp)
  8130d0:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  8130d4:	e13ff983 	ldbu	r4,-26(fp)
  8130d8:	e0fff983 	ldbu	r3,-26(fp)
  8130dc:	e0bffc17 	ldw	r2,-16(fp)
  8130e0:	1885883a 	add	r2,r3,r2
  8130e4:	10800204 	addi	r2,r2,8
  8130e8:	10c000c3 	ldbu	r3,3(r2)
  8130ec:	e0bff883 	ldbu	r2,-30(fp)
  8130f0:	1884b03a 	or	r2,r3,r2
  8130f4:	1007883a 	mov	r3,r2
  8130f8:	e0bffc17 	ldw	r2,-16(fp)
  8130fc:	2085883a 	add	r2,r4,r2
  813100:	10800204 	addi	r2,r2,8
  813104:	10c000c5 	stb	r3,3(r2)
            pevents++;
  813108:	e0bffb17 	ldw	r2,-20(fp)
  81310c:	10800104 	addi	r2,r2,4
  813110:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  813114:	e0bffb17 	ldw	r2,-20(fp)
  813118:	10800017 	ldw	r2,0(r2)
  81311c:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  813120:	e0bffc17 	ldw	r2,-16(fp)
  813124:	1004c03a 	cmpne	r2,r2,zero
  813128:	103fc31e 	bne	r2,zero,813038 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  81312c:	e0fffa17 	ldw	r3,-24(fp)
  813130:	e0bffe03 	ldbu	r2,-8(fp)
  813134:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  813138:	e0fffa17 	ldw	r3,-24(fp)
  81313c:	e0bff983 	ldbu	r2,-26(fp)
  813140:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  813144:	e0fffa17 	ldw	r3,-24(fp)
  813148:	e0bff943 	ldbu	r2,-27(fp)
  81314c:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  813150:	e0fffa17 	ldw	r3,-24(fp)
  813154:	e0bff8c3 	ldbu	r2,-29(fp)
  813158:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  81315c:	e0fffa17 	ldw	r3,-24(fp)
  813160:	e0bff883 	ldbu	r2,-30(fp)
  813164:	18800d45 	stb	r2,53(r3)
  813168:	e0bff717 	ldw	r2,-36(fp)
  81316c:	e0bff215 	stw	r2,-56(fp)
  813170:	e0bff217 	ldw	r2,-56(fp)
  813174:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  813178:	008020b4 	movhi	r2,130
  81317c:	10801c44 	addi	r2,r2,113
  813180:	10800003 	ldbu	r2,0(r2)
  813184:	10803fcc 	andi	r2,r2,255
  813188:	10800058 	cmpnei	r2,r2,1
  81318c:	1000011e 	bne	r2,zero,813194 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  813190:	080e3880 	call	80e388 <OS_Sched>
    }
    return (OS_ERR_NONE);
  813194:	e03fff15 	stw	zero,-4(fp)
  813198:	e0bfff17 	ldw	r2,-4(fp)
}
  81319c:	e037883a 	mov	sp,fp
  8131a0:	dfc00117 	ldw	ra,4(sp)
  8131a4:	df000017 	ldw	fp,0(sp)
  8131a8:	dec00204 	addi	sp,sp,8
  8131ac:	f800283a 	ret

008131b0 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  8131b0:	deffed04 	addi	sp,sp,-76
  8131b4:	dfc01215 	stw	ra,72(sp)
  8131b8:	df001115 	stw	fp,68(sp)
  8131bc:	df001104 	addi	fp,sp,68
  8131c0:	e13ffb15 	stw	r4,-20(fp)
  8131c4:	e17ffc15 	stw	r5,-16(fp)
  8131c8:	e1bffd15 	stw	r6,-12(fp)
  8131cc:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  8131d0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  8131d4:	e0bffe03 	ldbu	r2,-8(fp)
  8131d8:	10800570 	cmpltui	r2,r2,21
  8131dc:	1000031e 	bne	r2,zero,8131ec <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  8131e0:	00800a84 	movi	r2,42
  8131e4:	e0bfff15 	stw	r2,-4(fp)
  8131e8:	00006006 	br	81336c <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8131ec:	0005303a 	rdctl	r2,status
  8131f0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8131f4:	e0fff717 	ldw	r3,-36(fp)
  8131f8:	00bfff84 	movi	r2,-2
  8131fc:	1884703a 	and	r2,r3,r2
  813200:	1001703a 	wrctl	status,r2
  
  return context;
  813204:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  813208:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  81320c:	008020b4 	movhi	r2,130
  813210:	10802a04 	addi	r2,r2,168
  813214:	10800003 	ldbu	r2,0(r2)
  813218:	10803fcc 	andi	r2,r2,255
  81321c:	1005003a 	cmpeq	r2,r2,zero
  813220:	1000071e 	bne	r2,zero,813240 <OSTaskCreate+0x90>
  813224:	e0bff817 	ldw	r2,-32(fp)
  813228:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81322c:	e0bff617 	ldw	r2,-40(fp)
  813230:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  813234:	00800f04 	movi	r2,60
  813238:	e0bfff15 	stw	r2,-4(fp)
  81323c:	00004b06 	br	81336c <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  813240:	e0bffe03 	ldbu	r2,-8(fp)
  813244:	00c020f4 	movhi	r3,131
  813248:	18d73204 	addi	r3,r3,23752
  81324c:	1085883a 	add	r2,r2,r2
  813250:	1085883a 	add	r2,r2,r2
  813254:	10c5883a 	add	r2,r2,r3
  813258:	10800017 	ldw	r2,0(r2)
  81325c:	1004c03a 	cmpne	r2,r2,zero
  813260:	10003c1e 	bne	r2,zero,813354 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  813264:	e0bffe03 	ldbu	r2,-8(fp)
  813268:	00c020f4 	movhi	r3,131
  81326c:	18d73204 	addi	r3,r3,23752
  813270:	1085883a 	add	r2,r2,r2
  813274:	1085883a 	add	r2,r2,r2
  813278:	10c7883a 	add	r3,r2,r3
  81327c:	00800044 	movi	r2,1
  813280:	18800015 	stw	r2,0(r3)
  813284:	e0bff817 	ldw	r2,-32(fp)
  813288:	e0bff515 	stw	r2,-44(fp)
  81328c:	e0bff517 	ldw	r2,-44(fp)
  813290:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  813294:	e13ffb17 	ldw	r4,-20(fp)
  813298:	e17ffc17 	ldw	r5,-16(fp)
  81329c:	e1bffd17 	ldw	r6,-12(fp)
  8132a0:	000f883a 	mov	r7,zero
  8132a4:	081b4c00 	call	81b4c0 <OSTaskStkInit>
  8132a8:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  8132ac:	e13ffe03 	ldbu	r4,-8(fp)
  8132b0:	d8000015 	stw	zero,0(sp)
  8132b4:	d8000115 	stw	zero,4(sp)
  8132b8:	d8000215 	stw	zero,8(sp)
  8132bc:	e17ffa17 	ldw	r5,-24(fp)
  8132c0:	000d883a 	mov	r6,zero
  8132c4:	000f883a 	mov	r7,zero
  8132c8:	080e7900 	call	80e790 <OS_TCBInit>
  8132cc:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  8132d0:	e0bff903 	ldbu	r2,-28(fp)
  8132d4:	1004c03a 	cmpne	r2,r2,zero
  8132d8:	1000081e 	bne	r2,zero,8132fc <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  8132dc:	008020b4 	movhi	r2,130
  8132e0:	10801c44 	addi	r2,r2,113
  8132e4:	10800003 	ldbu	r2,0(r2)
  8132e8:	10803fcc 	andi	r2,r2,255
  8132ec:	10800058 	cmpnei	r2,r2,1
  8132f0:	1000151e 	bne	r2,zero,813348 <OSTaskCreate+0x198>
                OS_Sched();
  8132f4:	080e3880 	call	80e388 <OS_Sched>
  8132f8:	00001306 	br	813348 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8132fc:	0005303a 	rdctl	r2,status
  813300:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813304:	e0fff417 	ldw	r3,-48(fp)
  813308:	00bfff84 	movi	r2,-2
  81330c:	1884703a 	and	r2,r3,r2
  813310:	1001703a 	wrctl	status,r2
  
  return context;
  813314:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  813318:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  81331c:	e0bffe03 	ldbu	r2,-8(fp)
  813320:	00c020f4 	movhi	r3,131
  813324:	18d73204 	addi	r3,r3,23752
  813328:	1085883a 	add	r2,r2,r2
  81332c:	1085883a 	add	r2,r2,r2
  813330:	10c5883a 	add	r2,r2,r3
  813334:	10000015 	stw	zero,0(r2)
  813338:	e0bff817 	ldw	r2,-32(fp)
  81333c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813340:	e0bff317 	ldw	r2,-52(fp)
  813344:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  813348:	e0bff903 	ldbu	r2,-28(fp)
  81334c:	e0bfff15 	stw	r2,-4(fp)
  813350:	00000606 	br	81336c <OSTaskCreate+0x1bc>
  813354:	e0bff817 	ldw	r2,-32(fp)
  813358:	e0bff215 	stw	r2,-56(fp)
  81335c:	e0bff217 	ldw	r2,-56(fp)
  813360:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  813364:	00800a04 	movi	r2,40
  813368:	e0bfff15 	stw	r2,-4(fp)
  81336c:	e0bfff17 	ldw	r2,-4(fp)
}
  813370:	e037883a 	mov	sp,fp
  813374:	dfc00117 	ldw	ra,4(sp)
  813378:	df000017 	ldw	fp,0(sp)
  81337c:	dec00204 	addi	sp,sp,8
  813380:	f800283a 	ret

00813384 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  813384:	deffeb04 	addi	sp,sp,-84
  813388:	dfc01415 	stw	ra,80(sp)
  81338c:	df001315 	stw	fp,76(sp)
  813390:	df001304 	addi	fp,sp,76
  813394:	e13ff915 	stw	r4,-28(fp)
  813398:	e17ffa15 	stw	r5,-24(fp)
  81339c:	e1bffb15 	stw	r6,-20(fp)
  8133a0:	e0800217 	ldw	r2,8(fp)
  8133a4:	e0c00617 	ldw	r3,24(fp)
  8133a8:	e1fffc05 	stb	r7,-16(fp)
  8133ac:	e0bffd0d 	sth	r2,-12(fp)
  8133b0:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  8133b4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  8133b8:	e0bffc03 	ldbu	r2,-16(fp)
  8133bc:	10800570 	cmpltui	r2,r2,21
  8133c0:	1000031e 	bne	r2,zero,8133d0 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  8133c4:	00800a84 	movi	r2,42
  8133c8:	e0bfff15 	stw	r2,-4(fp)
  8133cc:	00006706 	br	81356c <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8133d0:	0005303a 	rdctl	r2,status
  8133d4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8133d8:	e0fff517 	ldw	r3,-44(fp)
  8133dc:	00bfff84 	movi	r2,-2
  8133e0:	1884703a 	and	r2,r3,r2
  8133e4:	1001703a 	wrctl	status,r2
  
  return context;
  8133e8:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8133ec:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  8133f0:	008020b4 	movhi	r2,130
  8133f4:	10802a04 	addi	r2,r2,168
  8133f8:	10800003 	ldbu	r2,0(r2)
  8133fc:	10803fcc 	andi	r2,r2,255
  813400:	1005003a 	cmpeq	r2,r2,zero
  813404:	1000071e 	bne	r2,zero,813424 <OSTaskCreateExt+0xa0>
  813408:	e0bff617 	ldw	r2,-40(fp)
  81340c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813410:	e0bff417 	ldw	r2,-48(fp)
  813414:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  813418:	00800f04 	movi	r2,60
  81341c:	e0bfff15 	stw	r2,-4(fp)
  813420:	00005206 	br	81356c <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  813424:	e0bffc03 	ldbu	r2,-16(fp)
  813428:	00c020f4 	movhi	r3,131
  81342c:	18d73204 	addi	r3,r3,23752
  813430:	1085883a 	add	r2,r2,r2
  813434:	1085883a 	add	r2,r2,r2
  813438:	10c5883a 	add	r2,r2,r3
  81343c:	10800017 	ldw	r2,0(r2)
  813440:	1004c03a 	cmpne	r2,r2,zero
  813444:	1000431e 	bne	r2,zero,813554 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  813448:	e0bffc03 	ldbu	r2,-16(fp)
  81344c:	00c020f4 	movhi	r3,131
  813450:	18d73204 	addi	r3,r3,23752
  813454:	1085883a 	add	r2,r2,r2
  813458:	1085883a 	add	r2,r2,r2
  81345c:	10c7883a 	add	r3,r2,r3
  813460:	00800044 	movi	r2,1
  813464:	18800015 	stw	r2,0(r3)
  813468:	e0bff617 	ldw	r2,-40(fp)
  81346c:	e0bff315 	stw	r2,-52(fp)
  813470:	e0bff317 	ldw	r2,-52(fp)
  813474:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  813478:	e1bffe0b 	ldhu	r6,-8(fp)
  81347c:	e1000317 	ldw	r4,12(fp)
  813480:	e1400417 	ldw	r5,16(fp)
  813484:	08146000 	call	814600 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  813488:	e1fffe0b 	ldhu	r7,-8(fp)
  81348c:	e13ff917 	ldw	r4,-28(fp)
  813490:	e17ffa17 	ldw	r5,-24(fp)
  813494:	e1bffb17 	ldw	r6,-20(fp)
  813498:	081b4c00 	call	81b4c0 <OSTaskStkInit>
  81349c:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  8134a0:	e13ffc03 	ldbu	r4,-16(fp)
  8134a4:	e1fffd0b 	ldhu	r7,-12(fp)
  8134a8:	e0fffe0b 	ldhu	r3,-8(fp)
  8134ac:	e0800417 	ldw	r2,16(fp)
  8134b0:	d8800015 	stw	r2,0(sp)
  8134b4:	e0800517 	ldw	r2,20(fp)
  8134b8:	d8800115 	stw	r2,4(sp)
  8134bc:	d8c00215 	stw	r3,8(sp)
  8134c0:	e17ff817 	ldw	r5,-32(fp)
  8134c4:	e1800317 	ldw	r6,12(fp)
  8134c8:	080e7900 	call	80e790 <OS_TCBInit>
  8134cc:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  8134d0:	e0bff703 	ldbu	r2,-36(fp)
  8134d4:	1004c03a 	cmpne	r2,r2,zero
  8134d8:	1000081e 	bne	r2,zero,8134fc <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  8134dc:	008020b4 	movhi	r2,130
  8134e0:	10801c44 	addi	r2,r2,113
  8134e4:	10800003 	ldbu	r2,0(r2)
  8134e8:	10803fcc 	andi	r2,r2,255
  8134ec:	10800058 	cmpnei	r2,r2,1
  8134f0:	1000151e 	bne	r2,zero,813548 <OSTaskCreateExt+0x1c4>
                OS_Sched();
  8134f4:	080e3880 	call	80e388 <OS_Sched>
  8134f8:	00001306 	br	813548 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8134fc:	0005303a 	rdctl	r2,status
  813500:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813504:	e0fff217 	ldw	r3,-56(fp)
  813508:	00bfff84 	movi	r2,-2
  81350c:	1884703a 	and	r2,r3,r2
  813510:	1001703a 	wrctl	status,r2
  
  return context;
  813514:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  813518:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  81351c:	e0bffc03 	ldbu	r2,-16(fp)
  813520:	00c020f4 	movhi	r3,131
  813524:	18d73204 	addi	r3,r3,23752
  813528:	1085883a 	add	r2,r2,r2
  81352c:	1085883a 	add	r2,r2,r2
  813530:	10c5883a 	add	r2,r2,r3
  813534:	10000015 	stw	zero,0(r2)
  813538:	e0bff617 	ldw	r2,-40(fp)
  81353c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813540:	e0bff117 	ldw	r2,-60(fp)
  813544:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  813548:	e0bff703 	ldbu	r2,-36(fp)
  81354c:	e0bfff15 	stw	r2,-4(fp)
  813550:	00000606 	br	81356c <OSTaskCreateExt+0x1e8>
  813554:	e0bff617 	ldw	r2,-40(fp)
  813558:	e0bff015 	stw	r2,-64(fp)
  81355c:	e0bff017 	ldw	r2,-64(fp)
  813560:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  813564:	00800a04 	movi	r2,40
  813568:	e0bfff15 	stw	r2,-4(fp)
  81356c:	e0bfff17 	ldw	r2,-4(fp)
}
  813570:	e037883a 	mov	sp,fp
  813574:	dfc00117 	ldw	ra,4(sp)
  813578:	df000017 	ldw	fp,0(sp)
  81357c:	dec00204 	addi	sp,sp,8
  813580:	f800283a 	ret

00813584 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  813584:	defff304 	addi	sp,sp,-52
  813588:	dfc00c15 	stw	ra,48(sp)
  81358c:	df000b15 	stw	fp,44(sp)
  813590:	df000b04 	addi	fp,sp,44
  813594:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  813598:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  81359c:	008020b4 	movhi	r2,130
  8135a0:	10802a04 	addi	r2,r2,168
  8135a4:	10800003 	ldbu	r2,0(r2)
  8135a8:	10803fcc 	andi	r2,r2,255
  8135ac:	1005003a 	cmpeq	r2,r2,zero
  8135b0:	1000031e 	bne	r2,zero,8135c0 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  8135b4:	00801004 	movi	r2,64
  8135b8:	e0bfff15 	stw	r2,-4(fp)
  8135bc:	0000ee06 	br	813978 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  8135c0:	e0bffe03 	ldbu	r2,-8(fp)
  8135c4:	10800518 	cmpnei	r2,r2,20
  8135c8:	1000031e 	bne	r2,zero,8135d8 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  8135cc:	00800f84 	movi	r2,62
  8135d0:	e0bfff15 	stw	r2,-4(fp)
  8135d4:	0000e806 	br	813978 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  8135d8:	e0bffe03 	ldbu	r2,-8(fp)
  8135dc:	10800530 	cmpltui	r2,r2,20
  8135e0:	1000061e 	bne	r2,zero,8135fc <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  8135e4:	e0bffe03 	ldbu	r2,-8(fp)
  8135e8:	10803fe0 	cmpeqi	r2,r2,255
  8135ec:	1000031e 	bne	r2,zero,8135fc <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  8135f0:	00800a84 	movi	r2,42
  8135f4:	e0bfff15 	stw	r2,-4(fp)
  8135f8:	0000df06 	br	813978 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8135fc:	0005303a 	rdctl	r2,status
  813600:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813604:	e0fffa17 	ldw	r3,-24(fp)
  813608:	00bfff84 	movi	r2,-2
  81360c:	1884703a 	and	r2,r3,r2
  813610:	1001703a 	wrctl	status,r2
  
  return context;
  813614:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  813618:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  81361c:	e0bffe03 	ldbu	r2,-8(fp)
  813620:	10803fd8 	cmpnei	r2,r2,255
  813624:	1000051e 	bne	r2,zero,81363c <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  813628:	008020b4 	movhi	r2,130
  81362c:	10802b04 	addi	r2,r2,172
  813630:	10800017 	ldw	r2,0(r2)
  813634:	10800c83 	ldbu	r2,50(r2)
  813638:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81363c:	e0bffe03 	ldbu	r2,-8(fp)
  813640:	00c020f4 	movhi	r3,131
  813644:	18d73204 	addi	r3,r3,23752
  813648:	1085883a 	add	r2,r2,r2
  81364c:	1085883a 	add	r2,r2,r2
  813650:	10c5883a 	add	r2,r2,r3
  813654:	10800017 	ldw	r2,0(r2)
  813658:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  81365c:	e0bffc17 	ldw	r2,-16(fp)
  813660:	1004c03a 	cmpne	r2,r2,zero
  813664:	1000071e 	bne	r2,zero,813684 <OSTaskDel+0x100>
  813668:	e0bffb17 	ldw	r2,-20(fp)
  81366c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813670:	e0bff917 	ldw	r2,-28(fp)
  813674:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  813678:	008010c4 	movi	r2,67
  81367c:	e0bfff15 	stw	r2,-4(fp)
  813680:	0000bd06 	br	813978 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  813684:	e0bffc17 	ldw	r2,-16(fp)
  813688:	10800058 	cmpnei	r2,r2,1
  81368c:	1000071e 	bne	r2,zero,8136ac <OSTaskDel+0x128>
  813690:	e0bffb17 	ldw	r2,-20(fp)
  813694:	e0bff815 	stw	r2,-32(fp)
  813698:	e0bff817 	ldw	r2,-32(fp)
  81369c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  8136a0:	00800f44 	movi	r2,61
  8136a4:	e0bfff15 	stw	r2,-4(fp)
  8136a8:	0000b306 	br	813978 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  8136ac:	e0bffc17 	ldw	r2,-16(fp)
  8136b0:	10800d03 	ldbu	r2,52(r2)
  8136b4:	11003fcc 	andi	r4,r2,255
  8136b8:	e0bffc17 	ldw	r2,-16(fp)
  8136bc:	10800d03 	ldbu	r2,52(r2)
  8136c0:	10c03fcc 	andi	r3,r2,255
  8136c4:	008020b4 	movhi	r2,130
  8136c8:	10802844 	addi	r2,r2,161
  8136cc:	10c5883a 	add	r2,r2,r3
  8136d0:	10800003 	ldbu	r2,0(r2)
  8136d4:	1007883a 	mov	r3,r2
  8136d8:	e0bffc17 	ldw	r2,-16(fp)
  8136dc:	10800d43 	ldbu	r2,53(r2)
  8136e0:	0084303a 	nor	r2,zero,r2
  8136e4:	1884703a 	and	r2,r3,r2
  8136e8:	1007883a 	mov	r3,r2
  8136ec:	008020b4 	movhi	r2,130
  8136f0:	10802844 	addi	r2,r2,161
  8136f4:	1105883a 	add	r2,r2,r4
  8136f8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  8136fc:	e0bffc17 	ldw	r2,-16(fp)
  813700:	10800d03 	ldbu	r2,52(r2)
  813704:	10c03fcc 	andi	r3,r2,255
  813708:	008020b4 	movhi	r2,130
  81370c:	10802844 	addi	r2,r2,161
  813710:	10c5883a 	add	r2,r2,r3
  813714:	10800003 	ldbu	r2,0(r2)
  813718:	10803fcc 	andi	r2,r2,255
  81371c:	1004c03a 	cmpne	r2,r2,zero
  813720:	10000c1e 	bne	r2,zero,813754 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  813724:	e0bffc17 	ldw	r2,-16(fp)
  813728:	10800d83 	ldbu	r2,54(r2)
  81372c:	0084303a 	nor	r2,zero,r2
  813730:	1007883a 	mov	r3,r2
  813734:	008020b4 	movhi	r2,130
  813738:	10802804 	addi	r2,r2,160
  81373c:	10800003 	ldbu	r2,0(r2)
  813740:	1884703a 	and	r2,r3,r2
  813744:	1007883a 	mov	r3,r2
  813748:	008020b4 	movhi	r2,130
  81374c:	10802804 	addi	r2,r2,160
  813750:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  813754:	e0bffc17 	ldw	r2,-16(fp)
  813758:	10800717 	ldw	r2,28(r2)
  81375c:	1005003a 	cmpeq	r2,r2,zero
  813760:	1000041e 	bne	r2,zero,813774 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  813764:	e0bffc17 	ldw	r2,-16(fp)
  813768:	11400717 	ldw	r5,28(r2)
  81376c:	e13ffc17 	ldw	r4,-16(fp)
  813770:	080dd400 	call	80dd40 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  813774:	e0bffc17 	ldw	r2,-16(fp)
  813778:	10800817 	ldw	r2,32(r2)
  81377c:	1005003a 	cmpeq	r2,r2,zero
  813780:	1000041e 	bne	r2,zero,813794 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  813784:	e0bffc17 	ldw	r2,-16(fp)
  813788:	11400817 	ldw	r5,32(r2)
  81378c:	e13ffc17 	ldw	r4,-16(fp)
  813790:	080ddf80 	call	80ddf8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  813794:	e0bffc17 	ldw	r2,-16(fp)
  813798:	10800a17 	ldw	r2,40(r2)
  81379c:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  8137a0:	e0bffd17 	ldw	r2,-12(fp)
  8137a4:	1005003a 	cmpeq	r2,r2,zero
  8137a8:	1000021e 	bne	r2,zero,8137b4 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  8137ac:	e13ffd17 	ldw	r4,-12(fp)
  8137b0:	081048c0 	call	81048c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  8137b4:	e0bffc17 	ldw	r2,-16(fp)
  8137b8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  8137bc:	e0bffc17 	ldw	r2,-16(fp)
  8137c0:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  8137c4:	e0bffc17 	ldw	r2,-16(fp)
  8137c8:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  8137cc:	008020b4 	movhi	r2,130
  8137d0:	10801c04 	addi	r2,r2,112
  8137d4:	10800003 	ldbu	r2,0(r2)
  8137d8:	10803fcc 	andi	r2,r2,255
  8137dc:	10803fe0 	cmpeqi	r2,r2,255
  8137e0:	1000081e 	bne	r2,zero,813804 <OSTaskDel+0x280>
        OSLockNesting++;
  8137e4:	008020b4 	movhi	r2,130
  8137e8:	10801c04 	addi	r2,r2,112
  8137ec:	10800003 	ldbu	r2,0(r2)
  8137f0:	10800044 	addi	r2,r2,1
  8137f4:	1007883a 	mov	r3,r2
  8137f8:	008020b4 	movhi	r2,130
  8137fc:	10801c04 	addi	r2,r2,112
  813800:	10c00005 	stb	r3,0(r2)
  813804:	e0bffb17 	ldw	r2,-20(fp)
  813808:	e0bff715 	stw	r2,-36(fp)
  81380c:	e0bff717 	ldw	r2,-36(fp)
  813810:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  813814:	080d92c0 	call	80d92c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813818:	0005303a 	rdctl	r2,status
  81381c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813820:	e0fff617 	ldw	r3,-40(fp)
  813824:	00bfff84 	movi	r2,-2
  813828:	1884703a 	and	r2,r3,r2
  81382c:	1001703a 	wrctl	status,r2
  
  return context;
  813830:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  813834:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  813838:	008020b4 	movhi	r2,130
  81383c:	10801c04 	addi	r2,r2,112
  813840:	10800003 	ldbu	r2,0(r2)
  813844:	10803fcc 	andi	r2,r2,255
  813848:	1005003a 	cmpeq	r2,r2,zero
  81384c:	1000081e 	bne	r2,zero,813870 <OSTaskDel+0x2ec>
        OSLockNesting--;
  813850:	008020b4 	movhi	r2,130
  813854:	10801c04 	addi	r2,r2,112
  813858:	10800003 	ldbu	r2,0(r2)
  81385c:	10bfffc4 	addi	r2,r2,-1
  813860:	1007883a 	mov	r3,r2
  813864:	008020b4 	movhi	r2,130
  813868:	10801c04 	addi	r2,r2,112
  81386c:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  813870:	e13ffc17 	ldw	r4,-16(fp)
  813874:	081b7f00 	call	81b7f0 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  813878:	008020b4 	movhi	r2,130
  81387c:	10802444 	addi	r2,r2,145
  813880:	10800003 	ldbu	r2,0(r2)
  813884:	10bfffc4 	addi	r2,r2,-1
  813888:	1007883a 	mov	r3,r2
  81388c:	008020b4 	movhi	r2,130
  813890:	10802444 	addi	r2,r2,145
  813894:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  813898:	e0bffe03 	ldbu	r2,-8(fp)
  81389c:	00c020f4 	movhi	r3,131
  8138a0:	18d73204 	addi	r3,r3,23752
  8138a4:	1085883a 	add	r2,r2,r2
  8138a8:	1085883a 	add	r2,r2,r2
  8138ac:	10c5883a 	add	r2,r2,r3
  8138b0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  8138b4:	e0bffc17 	ldw	r2,-16(fp)
  8138b8:	10800617 	ldw	r2,24(r2)
  8138bc:	1004c03a 	cmpne	r2,r2,zero
  8138c0:	1000091e 	bne	r2,zero,8138e8 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  8138c4:	e0bffc17 	ldw	r2,-16(fp)
  8138c8:	10800517 	ldw	r2,20(r2)
  8138cc:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  8138d0:	e0bffc17 	ldw	r2,-16(fp)
  8138d4:	10c00517 	ldw	r3,20(r2)
  8138d8:	008020b4 	movhi	r2,130
  8138dc:	10801f04 	addi	r2,r2,124
  8138e0:	10c00015 	stw	r3,0(r2)
  8138e4:	00000a06 	br	813910 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  8138e8:	e0bffc17 	ldw	r2,-16(fp)
  8138ec:	10c00617 	ldw	r3,24(r2)
  8138f0:	e0bffc17 	ldw	r2,-16(fp)
  8138f4:	10800517 	ldw	r2,20(r2)
  8138f8:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  8138fc:	e0bffc17 	ldw	r2,-16(fp)
  813900:	10c00517 	ldw	r3,20(r2)
  813904:	e0bffc17 	ldw	r2,-16(fp)
  813908:	10800617 	ldw	r2,24(r2)
  81390c:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  813910:	008020b4 	movhi	r2,130
  813914:	10802304 	addi	r2,r2,140
  813918:	10c00017 	ldw	r3,0(r2)
  81391c:	e0bffc17 	ldw	r2,-16(fp)
  813920:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  813924:	00c020b4 	movhi	r3,130
  813928:	18c02304 	addi	r3,r3,140
  81392c:	e0bffc17 	ldw	r2,-16(fp)
  813930:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  813934:	e0fffc17 	ldw	r3,-16(fp)
  813938:	00800fc4 	movi	r2,63
  81393c:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  813940:	e0bffc17 	ldw	r2,-16(fp)
  813944:	10001345 	stb	zero,77(r2)
  813948:	e0bffb17 	ldw	r2,-20(fp)
  81394c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813950:	e0bff517 	ldw	r2,-44(fp)
  813954:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  813958:	008020b4 	movhi	r2,130
  81395c:	10801c44 	addi	r2,r2,113
  813960:	10800003 	ldbu	r2,0(r2)
  813964:	10803fcc 	andi	r2,r2,255
  813968:	10800058 	cmpnei	r2,r2,1
  81396c:	1000011e 	bne	r2,zero,813974 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  813970:	080e3880 	call	80e388 <OS_Sched>
    }
    return (OS_ERR_NONE);
  813974:	e03fff15 	stw	zero,-4(fp)
  813978:	e0bfff17 	ldw	r2,-4(fp)
}
  81397c:	e037883a 	mov	sp,fp
  813980:	dfc00117 	ldw	ra,4(sp)
  813984:	df000017 	ldw	fp,0(sp)
  813988:	dec00204 	addi	sp,sp,8
  81398c:	f800283a 	ret

00813990 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  813990:	defff404 	addi	sp,sp,-48
  813994:	df000b15 	stw	fp,44(sp)
  813998:	df000b04 	addi	fp,sp,44
  81399c:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8139a0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  8139a4:	e0bffe03 	ldbu	r2,-8(fp)
  8139a8:	10800518 	cmpnei	r2,r2,20
  8139ac:	1000031e 	bne	r2,zero,8139bc <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  8139b0:	00800f84 	movi	r2,62
  8139b4:	e0bfff15 	stw	r2,-4(fp)
  8139b8:	00004c06 	br	813aec <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  8139bc:	e0bffe03 	ldbu	r2,-8(fp)
  8139c0:	10800530 	cmpltui	r2,r2,20
  8139c4:	1000061e 	bne	r2,zero,8139e0 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  8139c8:	e0bffe03 	ldbu	r2,-8(fp)
  8139cc:	10803fe0 	cmpeqi	r2,r2,255
  8139d0:	1000031e 	bne	r2,zero,8139e0 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  8139d4:	00800a84 	movi	r2,42
  8139d8:	e0bfff15 	stw	r2,-4(fp)
  8139dc:	00004306 	br	813aec <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  8139e0:	e0bffe03 	ldbu	r2,-8(fp)
  8139e4:	10803fd8 	cmpnei	r2,r2,255
  8139e8:	1000141e 	bne	r2,zero,813a3c <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8139ec:	0005303a 	rdctl	r2,status
  8139f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8139f4:	e0fffa17 	ldw	r3,-24(fp)
  8139f8:	00bfff84 	movi	r2,-2
  8139fc:	1884703a 	and	r2,r3,r2
  813a00:	1001703a 	wrctl	status,r2
  
  return context;
  813a04:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  813a08:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  813a0c:	008020b4 	movhi	r2,130
  813a10:	10802b04 	addi	r2,r2,172
  813a14:	10800017 	ldw	r2,0(r2)
  813a18:	10800dc3 	ldbu	r2,55(r2)
  813a1c:	e0bffd05 	stb	r2,-12(fp)
  813a20:	e0bffb17 	ldw	r2,-20(fp)
  813a24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813a28:	e0bff917 	ldw	r2,-28(fp)
  813a2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  813a30:	e0bffd03 	ldbu	r2,-12(fp)
  813a34:	e0bfff15 	stw	r2,-4(fp)
  813a38:	00002c06 	br	813aec <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813a3c:	0005303a 	rdctl	r2,status
  813a40:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813a44:	e0fff817 	ldw	r3,-32(fp)
  813a48:	00bfff84 	movi	r2,-2
  813a4c:	1884703a 	and	r2,r3,r2
  813a50:	1001703a 	wrctl	status,r2
  
  return context;
  813a54:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  813a58:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  813a5c:	e0bffe03 	ldbu	r2,-8(fp)
  813a60:	00c020f4 	movhi	r3,131
  813a64:	18d73204 	addi	r3,r3,23752
  813a68:	1085883a 	add	r2,r2,r2
  813a6c:	1085883a 	add	r2,r2,r2
  813a70:	10c5883a 	add	r2,r2,r3
  813a74:	10800017 	ldw	r2,0(r2)
  813a78:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  813a7c:	e0bffc17 	ldw	r2,-16(fp)
  813a80:	1004c03a 	cmpne	r2,r2,zero
  813a84:	1000071e 	bne	r2,zero,813aa4 <OSTaskDelReq+0x114>
  813a88:	e0bffb17 	ldw	r2,-20(fp)
  813a8c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813a90:	e0bff717 	ldw	r2,-36(fp)
  813a94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  813a98:	008010c4 	movi	r2,67
  813a9c:	e0bfff15 	stw	r2,-4(fp)
  813aa0:	00001206 	br	813aec <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  813aa4:	e0bffc17 	ldw	r2,-16(fp)
  813aa8:	10800058 	cmpnei	r2,r2,1
  813aac:	1000071e 	bne	r2,zero,813acc <OSTaskDelReq+0x13c>
  813ab0:	e0bffb17 	ldw	r2,-20(fp)
  813ab4:	e0bff615 	stw	r2,-40(fp)
  813ab8:	e0bff617 	ldw	r2,-40(fp)
  813abc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  813ac0:	00800f44 	movi	r2,61
  813ac4:	e0bfff15 	stw	r2,-4(fp)
  813ac8:	00000806 	br	813aec <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  813acc:	e0fffc17 	ldw	r3,-16(fp)
  813ad0:	00800fc4 	movi	r2,63
  813ad4:	18800dc5 	stb	r2,55(r3)
  813ad8:	e0bffb17 	ldw	r2,-20(fp)
  813adc:	e0bff515 	stw	r2,-44(fp)
  813ae0:	e0bff517 	ldw	r2,-44(fp)
  813ae4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  813ae8:	e03fff15 	stw	zero,-4(fp)
  813aec:	e0bfff17 	ldw	r2,-4(fp)
}
  813af0:	e037883a 	mov	sp,fp
  813af4:	df000017 	ldw	fp,0(sp)
  813af8:	dec00104 	addi	sp,sp,4
  813afc:	f800283a 	ret

00813b00 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  813b00:	defff304 	addi	sp,sp,-52
  813b04:	dfc00c15 	stw	ra,48(sp)
  813b08:	df000b15 	stw	fp,44(sp)
  813b0c:	df000b04 	addi	fp,sp,44
  813b10:	e17ffd15 	stw	r5,-12(fp)
  813b14:	e1bffe15 	stw	r6,-8(fp)
  813b18:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  813b1c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  813b20:	e0bffe17 	ldw	r2,-8(fp)
  813b24:	1004c03a 	cmpne	r2,r2,zero
  813b28:	1000021e 	bne	r2,zero,813b34 <OSTaskNameGet+0x34>
        return (0);
  813b2c:	e03fff15 	stw	zero,-4(fp)
  813b30:	00005b06 	br	813ca0 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  813b34:	e0bffc03 	ldbu	r2,-16(fp)
  813b38:	10800570 	cmpltui	r2,r2,21
  813b3c:	1000081e 	bne	r2,zero,813b60 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  813b40:	e0bffc03 	ldbu	r2,-16(fp)
  813b44:	10803fe0 	cmpeqi	r2,r2,255
  813b48:	1000051e 	bne	r2,zero,813b60 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  813b4c:	e0fffe17 	ldw	r3,-8(fp)
  813b50:	00800a84 	movi	r2,42
  813b54:	18800005 	stb	r2,0(r3)
            return (0);
  813b58:	e03fff15 	stw	zero,-4(fp)
  813b5c:	00005006 	br	813ca0 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  813b60:	e0bffd17 	ldw	r2,-12(fp)
  813b64:	1004c03a 	cmpne	r2,r2,zero
  813b68:	1000051e 	bne	r2,zero,813b80 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  813b6c:	e0fffe17 	ldw	r3,-8(fp)
  813b70:	00800304 	movi	r2,12
  813b74:	18800005 	stb	r2,0(r3)
        return (0);
  813b78:	e03fff15 	stw	zero,-4(fp)
  813b7c:	00004806 	br	813ca0 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  813b80:	008020b4 	movhi	r2,130
  813b84:	10802a04 	addi	r2,r2,168
  813b88:	10800003 	ldbu	r2,0(r2)
  813b8c:	10803fcc 	andi	r2,r2,255
  813b90:	1005003a 	cmpeq	r2,r2,zero
  813b94:	1000051e 	bne	r2,zero,813bac <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  813b98:	e0fffe17 	ldw	r3,-8(fp)
  813b9c:	00800444 	movi	r2,17
  813ba0:	18800005 	stb	r2,0(r3)
        return (0);
  813ba4:	e03fff15 	stw	zero,-4(fp)
  813ba8:	00003d06 	br	813ca0 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813bac:	0005303a 	rdctl	r2,status
  813bb0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813bb4:	e0fff817 	ldw	r3,-32(fp)
  813bb8:	00bfff84 	movi	r2,-2
  813bbc:	1884703a 	and	r2,r3,r2
  813bc0:	1001703a 	wrctl	status,r2
  
  return context;
  813bc4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  813bc8:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  813bcc:	e0bffc03 	ldbu	r2,-16(fp)
  813bd0:	10803fd8 	cmpnei	r2,r2,255
  813bd4:	1000051e 	bne	r2,zero,813bec <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  813bd8:	008020b4 	movhi	r2,130
  813bdc:	10802b04 	addi	r2,r2,172
  813be0:	10800017 	ldw	r2,0(r2)
  813be4:	10800c83 	ldbu	r2,50(r2)
  813be8:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  813bec:	e0bffc03 	ldbu	r2,-16(fp)
  813bf0:	00c020f4 	movhi	r3,131
  813bf4:	18d73204 	addi	r3,r3,23752
  813bf8:	1085883a 	add	r2,r2,r2
  813bfc:	1085883a 	add	r2,r2,r2
  813c00:	10c5883a 	add	r2,r2,r3
  813c04:	10800017 	ldw	r2,0(r2)
  813c08:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  813c0c:	e0bffb17 	ldw	r2,-20(fp)
  813c10:	1004c03a 	cmpne	r2,r2,zero
  813c14:	1000091e 	bne	r2,zero,813c3c <OSTaskNameGet+0x13c>
  813c18:	e0bff917 	ldw	r2,-28(fp)
  813c1c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813c20:	e0bff717 	ldw	r2,-36(fp)
  813c24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  813c28:	e0fffe17 	ldw	r3,-8(fp)
  813c2c:	008010c4 	movi	r2,67
  813c30:	18800005 	stb	r2,0(r3)
        return (0);
  813c34:	e03fff15 	stw	zero,-4(fp)
  813c38:	00001906 	br	813ca0 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  813c3c:	e0bffb17 	ldw	r2,-20(fp)
  813c40:	10800058 	cmpnei	r2,r2,1
  813c44:	1000091e 	bne	r2,zero,813c6c <OSTaskNameGet+0x16c>
  813c48:	e0bff917 	ldw	r2,-28(fp)
  813c4c:	e0bff615 	stw	r2,-40(fp)
  813c50:	e0bff617 	ldw	r2,-40(fp)
  813c54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  813c58:	e0fffe17 	ldw	r3,-8(fp)
  813c5c:	008010c4 	movi	r2,67
  813c60:	18800005 	stb	r2,0(r3)
        return (0);
  813c64:	e03fff15 	stw	zero,-4(fp)
  813c68:	00000d06 	br	813ca0 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  813c6c:	e0bffb17 	ldw	r2,-20(fp)
  813c70:	11401304 	addi	r5,r2,76
  813c74:	e13ffd17 	ldw	r4,-12(fp)
  813c78:	080e4cc0 	call	80e4cc <OS_StrCopy>
  813c7c:	e0bffa05 	stb	r2,-24(fp)
  813c80:	e0bff917 	ldw	r2,-28(fp)
  813c84:	e0bff515 	stw	r2,-44(fp)
  813c88:	e0bff517 	ldw	r2,-44(fp)
  813c8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  813c90:	e0bffe17 	ldw	r2,-8(fp)
  813c94:	10000005 	stb	zero,0(r2)
    return (len);
  813c98:	e0bffa03 	ldbu	r2,-24(fp)
  813c9c:	e0bfff15 	stw	r2,-4(fp)
  813ca0:	e0bfff17 	ldw	r2,-4(fp)
}
  813ca4:	e037883a 	mov	sp,fp
  813ca8:	dfc00117 	ldw	ra,4(sp)
  813cac:	df000017 	ldw	fp,0(sp)
  813cb0:	dec00204 	addi	sp,sp,8
  813cb4:	f800283a 	ret

00813cb8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  813cb8:	defff304 	addi	sp,sp,-52
  813cbc:	dfc00c15 	stw	ra,48(sp)
  813cc0:	df000b15 	stw	fp,44(sp)
  813cc4:	df000b04 	addi	fp,sp,44
  813cc8:	e17ffe15 	stw	r5,-8(fp)
  813ccc:	e1bfff15 	stw	r6,-4(fp)
  813cd0:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  813cd4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  813cd8:	e0bfff17 	ldw	r2,-4(fp)
  813cdc:	1005003a 	cmpeq	r2,r2,zero
  813ce0:	1000611e 	bne	r2,zero,813e68 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  813ce4:	e0bffd03 	ldbu	r2,-12(fp)
  813ce8:	10800570 	cmpltui	r2,r2,21
  813cec:	1000071e 	bne	r2,zero,813d0c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  813cf0:	e0bffd03 	ldbu	r2,-12(fp)
  813cf4:	10803fe0 	cmpeqi	r2,r2,255
  813cf8:	1000041e 	bne	r2,zero,813d0c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  813cfc:	e0ffff17 	ldw	r3,-4(fp)
  813d00:	00800a84 	movi	r2,42
  813d04:	18800005 	stb	r2,0(r3)
            return;
  813d08:	00005706 	br	813e68 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  813d0c:	e0bffe17 	ldw	r2,-8(fp)
  813d10:	1004c03a 	cmpne	r2,r2,zero
  813d14:	1000041e 	bne	r2,zero,813d28 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  813d18:	e0ffff17 	ldw	r3,-4(fp)
  813d1c:	00800304 	movi	r2,12
  813d20:	18800005 	stb	r2,0(r3)
        return;
  813d24:	00005006 	br	813e68 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  813d28:	008020b4 	movhi	r2,130
  813d2c:	10802a04 	addi	r2,r2,168
  813d30:	10800003 	ldbu	r2,0(r2)
  813d34:	10803fcc 	andi	r2,r2,255
  813d38:	1005003a 	cmpeq	r2,r2,zero
  813d3c:	1000041e 	bne	r2,zero,813d50 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  813d40:	e0ffff17 	ldw	r3,-4(fp)
  813d44:	00800484 	movi	r2,18
  813d48:	18800005 	stb	r2,0(r3)
        return;
  813d4c:	00004606 	br	813e68 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813d50:	0005303a 	rdctl	r2,status
  813d54:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813d58:	e0fff917 	ldw	r3,-28(fp)
  813d5c:	00bfff84 	movi	r2,-2
  813d60:	1884703a 	and	r2,r3,r2
  813d64:	1001703a 	wrctl	status,r2
  
  return context;
  813d68:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  813d6c:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  813d70:	e0bffd03 	ldbu	r2,-12(fp)
  813d74:	10803fd8 	cmpnei	r2,r2,255
  813d78:	1000051e 	bne	r2,zero,813d90 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  813d7c:	008020b4 	movhi	r2,130
  813d80:	10802b04 	addi	r2,r2,172
  813d84:	10800017 	ldw	r2,0(r2)
  813d88:	10800c83 	ldbu	r2,50(r2)
  813d8c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  813d90:	e0bffd03 	ldbu	r2,-12(fp)
  813d94:	00c020f4 	movhi	r3,131
  813d98:	18d73204 	addi	r3,r3,23752
  813d9c:	1085883a 	add	r2,r2,r2
  813da0:	1085883a 	add	r2,r2,r2
  813da4:	10c5883a 	add	r2,r2,r3
  813da8:	10800017 	ldw	r2,0(r2)
  813dac:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  813db0:	e0bffb17 	ldw	r2,-20(fp)
  813db4:	1004c03a 	cmpne	r2,r2,zero
  813db8:	1000081e 	bne	r2,zero,813ddc <OSTaskNameSet+0x124>
  813dbc:	e0bffa17 	ldw	r2,-24(fp)
  813dc0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813dc4:	e0bff817 	ldw	r2,-32(fp)
  813dc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  813dcc:	e0ffff17 	ldw	r3,-4(fp)
  813dd0:	008010c4 	movi	r2,67
  813dd4:	18800005 	stb	r2,0(r3)
        return;
  813dd8:	00002306 	br	813e68 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  813ddc:	e0bffb17 	ldw	r2,-20(fp)
  813de0:	10800058 	cmpnei	r2,r2,1
  813de4:	1000081e 	bne	r2,zero,813e08 <OSTaskNameSet+0x150>
  813de8:	e0bffa17 	ldw	r2,-24(fp)
  813dec:	e0bff715 	stw	r2,-36(fp)
  813df0:	e0bff717 	ldw	r2,-36(fp)
  813df4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  813df8:	e0ffff17 	ldw	r3,-4(fp)
  813dfc:	008010c4 	movi	r2,67
  813e00:	18800005 	stb	r2,0(r3)
        return;
  813e04:	00001806 	br	813e68 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  813e08:	e13ffe17 	ldw	r4,-8(fp)
  813e0c:	080e54c0 	call	80e54c <OS_StrLen>
  813e10:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  813e14:	e0bffc03 	ldbu	r2,-16(fp)
  813e18:	10800830 	cmpltui	r2,r2,32
  813e1c:	1000081e 	bne	r2,zero,813e40 <OSTaskNameSet+0x188>
  813e20:	e0bffa17 	ldw	r2,-24(fp)
  813e24:	e0bff615 	stw	r2,-40(fp)
  813e28:	e0bff617 	ldw	r2,-40(fp)
  813e2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  813e30:	e0ffff17 	ldw	r3,-4(fp)
  813e34:	00801044 	movi	r2,65
  813e38:	18800005 	stb	r2,0(r3)
        return;
  813e3c:	00000a06 	br	813e68 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  813e40:	e0bffb17 	ldw	r2,-20(fp)
  813e44:	11001304 	addi	r4,r2,76
  813e48:	e17ffe17 	ldw	r5,-8(fp)
  813e4c:	080e4cc0 	call	80e4cc <OS_StrCopy>
  813e50:	e0bffa17 	ldw	r2,-24(fp)
  813e54:	e0bff515 	stw	r2,-44(fp)
  813e58:	e0bff517 	ldw	r2,-44(fp)
  813e5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  813e60:	e0bfff17 	ldw	r2,-4(fp)
  813e64:	10000005 	stb	zero,0(r2)
}
  813e68:	e037883a 	mov	sp,fp
  813e6c:	dfc00117 	ldw	ra,4(sp)
  813e70:	df000017 	ldw	fp,0(sp)
  813e74:	dec00204 	addi	sp,sp,8
  813e78:	f800283a 	ret

00813e7c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  813e7c:	defff304 	addi	sp,sp,-52
  813e80:	dfc00c15 	stw	ra,48(sp)
  813e84:	df000b15 	stw	fp,44(sp)
  813e88:	df000b04 	addi	fp,sp,44
  813e8c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  813e90:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  813e94:	e0bffe03 	ldbu	r2,-8(fp)
  813e98:	10800530 	cmpltui	r2,r2,20
  813e9c:	1000031e 	bne	r2,zero,813eac <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  813ea0:	00800a84 	movi	r2,42
  813ea4:	e0bfff15 	stw	r2,-4(fp)
  813ea8:	00007406 	br	81407c <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813eac:	0005303a 	rdctl	r2,status
  813eb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813eb4:	e0fffb17 	ldw	r3,-20(fp)
  813eb8:	00bfff84 	movi	r2,-2
  813ebc:	1884703a 	and	r2,r3,r2
  813ec0:	1001703a 	wrctl	status,r2
  
  return context;
  813ec4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  813ec8:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  813ecc:	e0bffe03 	ldbu	r2,-8(fp)
  813ed0:	00c020f4 	movhi	r3,131
  813ed4:	18d73204 	addi	r3,r3,23752
  813ed8:	1085883a 	add	r2,r2,r2
  813edc:	1085883a 	add	r2,r2,r2
  813ee0:	10c5883a 	add	r2,r2,r3
  813ee4:	10800017 	ldw	r2,0(r2)
  813ee8:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  813eec:	e0bffd17 	ldw	r2,-12(fp)
  813ef0:	1004c03a 	cmpne	r2,r2,zero
  813ef4:	1000071e 	bne	r2,zero,813f14 <OSTaskResume+0x98>
  813ef8:	e0bffc17 	ldw	r2,-16(fp)
  813efc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813f00:	e0bffa17 	ldw	r2,-24(fp)
  813f04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  813f08:	00801184 	movi	r2,70
  813f0c:	e0bfff15 	stw	r2,-4(fp)
  813f10:	00005a06 	br	81407c <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  813f14:	e0bffd17 	ldw	r2,-12(fp)
  813f18:	10800058 	cmpnei	r2,r2,1
  813f1c:	1000071e 	bne	r2,zero,813f3c <OSTaskResume+0xc0>
  813f20:	e0bffc17 	ldw	r2,-16(fp)
  813f24:	e0bff915 	stw	r2,-28(fp)
  813f28:	e0bff917 	ldw	r2,-28(fp)
  813f2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  813f30:	008010c4 	movi	r2,67
  813f34:	e0bfff15 	stw	r2,-4(fp)
  813f38:	00005006 	br	81407c <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  813f3c:	e0bffd17 	ldw	r2,-12(fp)
  813f40:	10800c03 	ldbu	r2,48(r2)
  813f44:	10803fcc 	andi	r2,r2,255
  813f48:	1080020c 	andi	r2,r2,8
  813f4c:	1005003a 	cmpeq	r2,r2,zero
  813f50:	1000441e 	bne	r2,zero,814064 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  813f54:	e0bffd17 	ldw	r2,-12(fp)
  813f58:	10c00c03 	ldbu	r3,48(r2)
  813f5c:	00bffdc4 	movi	r2,-9
  813f60:	1884703a 	and	r2,r3,r2
  813f64:	1007883a 	mov	r3,r2
  813f68:	e0bffd17 	ldw	r2,-12(fp)
  813f6c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  813f70:	e0bffd17 	ldw	r2,-12(fp)
  813f74:	10800c03 	ldbu	r2,48(r2)
  813f78:	10803fcc 	andi	r2,r2,255
  813f7c:	1004c03a 	cmpne	r2,r2,zero
  813f80:	1000321e 	bne	r2,zero,81404c <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  813f84:	e0bffd17 	ldw	r2,-12(fp)
  813f88:	10800b8b 	ldhu	r2,46(r2)
  813f8c:	10bfffcc 	andi	r2,r2,65535
  813f90:	1004c03a 	cmpne	r2,r2,zero
  813f94:	1000281e 	bne	r2,zero,814038 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  813f98:	e0bffd17 	ldw	r2,-12(fp)
  813f9c:	10c00d83 	ldbu	r3,54(r2)
  813fa0:	008020b4 	movhi	r2,130
  813fa4:	10802804 	addi	r2,r2,160
  813fa8:	10800003 	ldbu	r2,0(r2)
  813fac:	1884b03a 	or	r2,r3,r2
  813fb0:	1007883a 	mov	r3,r2
  813fb4:	008020b4 	movhi	r2,130
  813fb8:	10802804 	addi	r2,r2,160
  813fbc:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  813fc0:	e0bffd17 	ldw	r2,-12(fp)
  813fc4:	10800d03 	ldbu	r2,52(r2)
  813fc8:	11003fcc 	andi	r4,r2,255
  813fcc:	e0bffd17 	ldw	r2,-12(fp)
  813fd0:	10800d03 	ldbu	r2,52(r2)
  813fd4:	10c03fcc 	andi	r3,r2,255
  813fd8:	008020b4 	movhi	r2,130
  813fdc:	10802844 	addi	r2,r2,161
  813fe0:	10c5883a 	add	r2,r2,r3
  813fe4:	10c00003 	ldbu	r3,0(r2)
  813fe8:	e0bffd17 	ldw	r2,-12(fp)
  813fec:	10800d43 	ldbu	r2,53(r2)
  813ff0:	1884b03a 	or	r2,r3,r2
  813ff4:	1007883a 	mov	r3,r2
  813ff8:	008020b4 	movhi	r2,130
  813ffc:	10802844 	addi	r2,r2,161
  814000:	1105883a 	add	r2,r2,r4
  814004:	10c00005 	stb	r3,0(r2)
  814008:	e0bffc17 	ldw	r2,-16(fp)
  81400c:	e0bff815 	stw	r2,-32(fp)
  814010:	e0bff817 	ldw	r2,-32(fp)
  814014:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  814018:	008020b4 	movhi	r2,130
  81401c:	10801c44 	addi	r2,r2,113
  814020:	10800003 	ldbu	r2,0(r2)
  814024:	10803fcc 	andi	r2,r2,255
  814028:	10800058 	cmpnei	r2,r2,1
  81402c:	10000b1e 	bne	r2,zero,81405c <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  814030:	080e3880 	call	80e388 <OS_Sched>
  814034:	00000906 	br	81405c <OSTaskResume+0x1e0>
  814038:	e0bffc17 	ldw	r2,-16(fp)
  81403c:	e0bff715 	stw	r2,-36(fp)
  814040:	e0bff717 	ldw	r2,-36(fp)
  814044:	1001703a 	wrctl	status,r2
  814048:	00000406 	br	81405c <OSTaskResume+0x1e0>
  81404c:	e0bffc17 	ldw	r2,-16(fp)
  814050:	e0bff615 	stw	r2,-40(fp)
  814054:	e0bff617 	ldw	r2,-40(fp)
  814058:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  81405c:	e03fff15 	stw	zero,-4(fp)
  814060:	00000606 	br	81407c <OSTaskResume+0x200>
  814064:	e0bffc17 	ldw	r2,-16(fp)
  814068:	e0bff515 	stw	r2,-44(fp)
  81406c:	e0bff517 	ldw	r2,-44(fp)
  814070:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  814074:	00801104 	movi	r2,68
  814078:	e0bfff15 	stw	r2,-4(fp)
  81407c:	e0bfff17 	ldw	r2,-4(fp)
}
  814080:	e037883a 	mov	sp,fp
  814084:	dfc00117 	ldw	ra,4(sp)
  814088:	df000017 	ldw	fp,0(sp)
  81408c:	dec00204 	addi	sp,sp,8
  814090:	f800283a 	ret

00814094 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  814094:	defff204 	addi	sp,sp,-56
  814098:	df000d15 	stw	fp,52(sp)
  81409c:	df000d04 	addi	fp,sp,52
  8140a0:	e17ffe15 	stw	r5,-8(fp)
  8140a4:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8140a8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  8140ac:	e0bffd03 	ldbu	r2,-12(fp)
  8140b0:	10800570 	cmpltui	r2,r2,21
  8140b4:	1000061e 	bne	r2,zero,8140d0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  8140b8:	e0bffd03 	ldbu	r2,-12(fp)
  8140bc:	10803fe0 	cmpeqi	r2,r2,255
  8140c0:	1000031e 	bne	r2,zero,8140d0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  8140c4:	00800a84 	movi	r2,42
  8140c8:	e0bfff15 	stw	r2,-4(fp)
  8140cc:	00006b06 	br	81427c <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  8140d0:	e0bffe17 	ldw	r2,-8(fp)
  8140d4:	1004c03a 	cmpne	r2,r2,zero
  8140d8:	1000031e 	bne	r2,zero,8140e8 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  8140dc:	00800244 	movi	r2,9
  8140e0:	e0bfff15 	stw	r2,-4(fp)
  8140e4:	00006506 	br	81427c <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  8140e8:	e0bffe17 	ldw	r2,-8(fp)
  8140ec:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  8140f0:	e0bffe17 	ldw	r2,-8(fp)
  8140f4:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8140f8:	0005303a 	rdctl	r2,status
  8140fc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814100:	e0fff717 	ldw	r3,-36(fp)
  814104:	00bfff84 	movi	r2,-2
  814108:	1884703a 	and	r2,r3,r2
  81410c:	1001703a 	wrctl	status,r2
  
  return context;
  814110:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  814114:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  814118:	e0bffd03 	ldbu	r2,-12(fp)
  81411c:	10803fd8 	cmpnei	r2,r2,255
  814120:	1000051e 	bne	r2,zero,814138 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  814124:	008020b4 	movhi	r2,130
  814128:	10802b04 	addi	r2,r2,172
  81412c:	10800017 	ldw	r2,0(r2)
  814130:	10800c83 	ldbu	r2,50(r2)
  814134:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  814138:	e0bffd03 	ldbu	r2,-12(fp)
  81413c:	00c020f4 	movhi	r3,131
  814140:	18d73204 	addi	r3,r3,23752
  814144:	1085883a 	add	r2,r2,r2
  814148:	1085883a 	add	r2,r2,r2
  81414c:	10c5883a 	add	r2,r2,r3
  814150:	10800017 	ldw	r2,0(r2)
  814154:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  814158:	e0bffc17 	ldw	r2,-16(fp)
  81415c:	1004c03a 	cmpne	r2,r2,zero
  814160:	1000071e 	bne	r2,zero,814180 <OSTaskStkChk+0xec>
  814164:	e0bff817 	ldw	r2,-32(fp)
  814168:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81416c:	e0bff617 	ldw	r2,-40(fp)
  814170:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  814174:	008010c4 	movi	r2,67
  814178:	e0bfff15 	stw	r2,-4(fp)
  81417c:	00003f06 	br	81427c <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  814180:	e0bffc17 	ldw	r2,-16(fp)
  814184:	10800058 	cmpnei	r2,r2,1
  814188:	1000071e 	bne	r2,zero,8141a8 <OSTaskStkChk+0x114>
  81418c:	e0bff817 	ldw	r2,-32(fp)
  814190:	e0bff515 	stw	r2,-44(fp)
  814194:	e0bff517 	ldw	r2,-44(fp)
  814198:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81419c:	008010c4 	movi	r2,67
  8141a0:	e0bfff15 	stw	r2,-4(fp)
  8141a4:	00003506 	br	81427c <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  8141a8:	e0bffc17 	ldw	r2,-16(fp)
  8141ac:	1080040b 	ldhu	r2,16(r2)
  8141b0:	10bfffcc 	andi	r2,r2,65535
  8141b4:	1080004c 	andi	r2,r2,1
  8141b8:	1004c03a 	cmpne	r2,r2,zero
  8141bc:	1000071e 	bne	r2,zero,8141dc <OSTaskStkChk+0x148>
  8141c0:	e0bff817 	ldw	r2,-32(fp)
  8141c4:	e0bff415 	stw	r2,-48(fp)
  8141c8:	e0bff417 	ldw	r2,-48(fp)
  8141cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  8141d0:	00801144 	movi	r2,69
  8141d4:	e0bfff15 	stw	r2,-4(fp)
  8141d8:	00002806 	br	81427c <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  8141dc:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  8141e0:	e0bffc17 	ldw	r2,-16(fp)
  8141e4:	10800317 	ldw	r2,12(r2)
  8141e8:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  8141ec:	e0bffc17 	ldw	r2,-16(fp)
  8141f0:	10800217 	ldw	r2,8(r2)
  8141f4:	e0bffb15 	stw	r2,-20(fp)
  8141f8:	e0bff817 	ldw	r2,-32(fp)
  8141fc:	e0bff315 	stw	r2,-52(fp)
  814200:	e0bff317 	ldw	r2,-52(fp)
  814204:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  814208:	00000306 	br	814218 <OSTaskStkChk+0x184>
        nfree++;
  81420c:	e0bffa17 	ldw	r2,-24(fp)
  814210:	10800044 	addi	r2,r2,1
  814214:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  814218:	e0bffb17 	ldw	r2,-20(fp)
  81421c:	10800017 	ldw	r2,0(r2)
  814220:	1005003a 	cmpeq	r2,r2,zero
  814224:	1007883a 	mov	r3,r2
  814228:	e0bffb17 	ldw	r2,-20(fp)
  81422c:	10800104 	addi	r2,r2,4
  814230:	e0bffb15 	stw	r2,-20(fp)
  814234:	18803fcc 	andi	r2,r3,255
  814238:	1004c03a 	cmpne	r2,r2,zero
  81423c:	103ff31e 	bne	r2,zero,81420c <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  814240:	e0bffa17 	ldw	r2,-24(fp)
  814244:	1085883a 	add	r2,r2,r2
  814248:	1085883a 	add	r2,r2,r2
  81424c:	1007883a 	mov	r3,r2
  814250:	e0bffe17 	ldw	r2,-8(fp)
  814254:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  814258:	e0fff917 	ldw	r3,-28(fp)
  81425c:	e0bffa17 	ldw	r2,-24(fp)
  814260:	1885c83a 	sub	r2,r3,r2
  814264:	1085883a 	add	r2,r2,r2
  814268:	1085883a 	add	r2,r2,r2
  81426c:	1007883a 	mov	r3,r2
  814270:	e0bffe17 	ldw	r2,-8(fp)
  814274:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  814278:	e03fff15 	stw	zero,-4(fp)
  81427c:	e0bfff17 	ldw	r2,-4(fp)
}
  814280:	e037883a 	mov	sp,fp
  814284:	df000017 	ldw	fp,0(sp)
  814288:	dec00104 	addi	sp,sp,4
  81428c:	f800283a 	ret

00814290 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  814290:	defff404 	addi	sp,sp,-48
  814294:	dfc00b15 	stw	ra,44(sp)
  814298:	df000a15 	stw	fp,40(sp)
  81429c:	df000a04 	addi	fp,sp,40
  8142a0:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8142a4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  8142a8:	e0bffe03 	ldbu	r2,-8(fp)
  8142ac:	10800518 	cmpnei	r2,r2,20
  8142b0:	1000031e 	bne	r2,zero,8142c0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  8142b4:	008011c4 	movi	r2,71
  8142b8:	e0bfff15 	stw	r2,-4(fp)
  8142bc:	00007906 	br	8144a4 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  8142c0:	e0bffe03 	ldbu	r2,-8(fp)
  8142c4:	10800530 	cmpltui	r2,r2,20
  8142c8:	1000061e 	bne	r2,zero,8142e4 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  8142cc:	e0bffe03 	ldbu	r2,-8(fp)
  8142d0:	10803fe0 	cmpeqi	r2,r2,255
  8142d4:	1000031e 	bne	r2,zero,8142e4 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  8142d8:	00800a84 	movi	r2,42
  8142dc:	e0bfff15 	stw	r2,-4(fp)
  8142e0:	00007006 	br	8144a4 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8142e4:	0005303a 	rdctl	r2,status
  8142e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8142ec:	e0fff917 	ldw	r3,-28(fp)
  8142f0:	00bfff84 	movi	r2,-2
  8142f4:	1884703a 	and	r2,r3,r2
  8142f8:	1001703a 	wrctl	status,r2
  
  return context;
  8142fc:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  814300:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  814304:	e0bffe03 	ldbu	r2,-8(fp)
  814308:	10803fd8 	cmpnei	r2,r2,255
  81430c:	1000081e 	bne	r2,zero,814330 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  814310:	008020b4 	movhi	r2,130
  814314:	10802b04 	addi	r2,r2,172
  814318:	10800017 	ldw	r2,0(r2)
  81431c:	10800c83 	ldbu	r2,50(r2)
  814320:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  814324:	00800044 	movi	r2,1
  814328:	e0bffd05 	stb	r2,-12(fp)
  81432c:	00000b06 	br	81435c <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  814330:	008020b4 	movhi	r2,130
  814334:	10802b04 	addi	r2,r2,172
  814338:	10800017 	ldw	r2,0(r2)
  81433c:	10800c83 	ldbu	r2,50(r2)
  814340:	10c03fcc 	andi	r3,r2,255
  814344:	e0bffe03 	ldbu	r2,-8(fp)
  814348:	1880031e 	bne	r3,r2,814358 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  81434c:	00800044 	movi	r2,1
  814350:	e0bffd05 	stb	r2,-12(fp)
  814354:	00000106 	br	81435c <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  814358:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81435c:	e0bffe03 	ldbu	r2,-8(fp)
  814360:	00c020f4 	movhi	r3,131
  814364:	18d73204 	addi	r3,r3,23752
  814368:	1085883a 	add	r2,r2,r2
  81436c:	1085883a 	add	r2,r2,r2
  814370:	10c5883a 	add	r2,r2,r3
  814374:	10800017 	ldw	r2,0(r2)
  814378:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  81437c:	e0bffc17 	ldw	r2,-16(fp)
  814380:	1004c03a 	cmpne	r2,r2,zero
  814384:	1000071e 	bne	r2,zero,8143a4 <OSTaskSuspend+0x114>
  814388:	e0bffa17 	ldw	r2,-24(fp)
  81438c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814390:	e0bff817 	ldw	r2,-32(fp)
  814394:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  814398:	00801204 	movi	r2,72
  81439c:	e0bfff15 	stw	r2,-4(fp)
  8143a0:	00004006 	br	8144a4 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  8143a4:	e0bffc17 	ldw	r2,-16(fp)
  8143a8:	10800058 	cmpnei	r2,r2,1
  8143ac:	1000071e 	bne	r2,zero,8143cc <OSTaskSuspend+0x13c>
  8143b0:	e0bffa17 	ldw	r2,-24(fp)
  8143b4:	e0bff715 	stw	r2,-36(fp)
  8143b8:	e0bff717 	ldw	r2,-36(fp)
  8143bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8143c0:	008010c4 	movi	r2,67
  8143c4:	e0bfff15 	stw	r2,-4(fp)
  8143c8:	00003606 	br	8144a4 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  8143cc:	e0bffc17 	ldw	r2,-16(fp)
  8143d0:	10800d03 	ldbu	r2,52(r2)
  8143d4:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  8143d8:	e13ffb03 	ldbu	r4,-20(fp)
  8143dc:	e0fffb03 	ldbu	r3,-20(fp)
  8143e0:	008020b4 	movhi	r2,130
  8143e4:	10802844 	addi	r2,r2,161
  8143e8:	10c5883a 	add	r2,r2,r3
  8143ec:	10800003 	ldbu	r2,0(r2)
  8143f0:	1007883a 	mov	r3,r2
  8143f4:	e0bffc17 	ldw	r2,-16(fp)
  8143f8:	10800d43 	ldbu	r2,53(r2)
  8143fc:	0084303a 	nor	r2,zero,r2
  814400:	1884703a 	and	r2,r3,r2
  814404:	1007883a 	mov	r3,r2
  814408:	008020b4 	movhi	r2,130
  81440c:	10802844 	addi	r2,r2,161
  814410:	1105883a 	add	r2,r2,r4
  814414:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  814418:	e0fffb03 	ldbu	r3,-20(fp)
  81441c:	008020b4 	movhi	r2,130
  814420:	10802844 	addi	r2,r2,161
  814424:	10c5883a 	add	r2,r2,r3
  814428:	10800003 	ldbu	r2,0(r2)
  81442c:	10803fcc 	andi	r2,r2,255
  814430:	1004c03a 	cmpne	r2,r2,zero
  814434:	10000c1e 	bne	r2,zero,814468 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  814438:	e0bffc17 	ldw	r2,-16(fp)
  81443c:	10800d83 	ldbu	r2,54(r2)
  814440:	0084303a 	nor	r2,zero,r2
  814444:	1007883a 	mov	r3,r2
  814448:	008020b4 	movhi	r2,130
  81444c:	10802804 	addi	r2,r2,160
  814450:	10800003 	ldbu	r2,0(r2)
  814454:	1884703a 	and	r2,r3,r2
  814458:	1007883a 	mov	r3,r2
  81445c:	008020b4 	movhi	r2,130
  814460:	10802804 	addi	r2,r2,160
  814464:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  814468:	e0bffc17 	ldw	r2,-16(fp)
  81446c:	10800c03 	ldbu	r2,48(r2)
  814470:	10800214 	ori	r2,r2,8
  814474:	1007883a 	mov	r3,r2
  814478:	e0bffc17 	ldw	r2,-16(fp)
  81447c:	10c00c05 	stb	r3,48(r2)
  814480:	e0bffa17 	ldw	r2,-24(fp)
  814484:	e0bff615 	stw	r2,-40(fp)
  814488:	e0bff617 	ldw	r2,-40(fp)
  81448c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  814490:	e0bffd03 	ldbu	r2,-12(fp)
  814494:	10800058 	cmpnei	r2,r2,1
  814498:	1000011e 	bne	r2,zero,8144a0 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  81449c:	080e3880 	call	80e388 <OS_Sched>
    }
    return (OS_ERR_NONE);
  8144a0:	e03fff15 	stw	zero,-4(fp)
  8144a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8144a8:	e037883a 	mov	sp,fp
  8144ac:	dfc00117 	ldw	ra,4(sp)
  8144b0:	df000017 	ldw	fp,0(sp)
  8144b4:	dec00204 	addi	sp,sp,8
  8144b8:	f800283a 	ret

008144bc <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  8144bc:	defff504 	addi	sp,sp,-44
  8144c0:	dfc00a15 	stw	ra,40(sp)
  8144c4:	df000915 	stw	fp,36(sp)
  8144c8:	df000904 	addi	fp,sp,36
  8144cc:	e17ffe15 	stw	r5,-8(fp)
  8144d0:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8144d4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  8144d8:	e0bffd03 	ldbu	r2,-12(fp)
  8144dc:	10800570 	cmpltui	r2,r2,21
  8144e0:	1000061e 	bne	r2,zero,8144fc <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  8144e4:	e0bffd03 	ldbu	r2,-12(fp)
  8144e8:	10803fe0 	cmpeqi	r2,r2,255
  8144ec:	1000031e 	bne	r2,zero,8144fc <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  8144f0:	00800a84 	movi	r2,42
  8144f4:	e0bfff15 	stw	r2,-4(fp)
  8144f8:	00003b06 	br	8145e8 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  8144fc:	e0bffe17 	ldw	r2,-8(fp)
  814500:	1004c03a 	cmpne	r2,r2,zero
  814504:	1000031e 	bne	r2,zero,814514 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  814508:	00800244 	movi	r2,9
  81450c:	e0bfff15 	stw	r2,-4(fp)
  814510:	00003506 	br	8145e8 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814514:	0005303a 	rdctl	r2,status
  814518:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81451c:	e0fffa17 	ldw	r3,-24(fp)
  814520:	00bfff84 	movi	r2,-2
  814524:	1884703a 	and	r2,r3,r2
  814528:	1001703a 	wrctl	status,r2
  
  return context;
  81452c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814530:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  814534:	e0bffd03 	ldbu	r2,-12(fp)
  814538:	10803fd8 	cmpnei	r2,r2,255
  81453c:	1000051e 	bne	r2,zero,814554 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  814540:	008020b4 	movhi	r2,130
  814544:	10802b04 	addi	r2,r2,172
  814548:	10800017 	ldw	r2,0(r2)
  81454c:	10800c83 	ldbu	r2,50(r2)
  814550:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  814554:	e0bffd03 	ldbu	r2,-12(fp)
  814558:	00c020f4 	movhi	r3,131
  81455c:	18d73204 	addi	r3,r3,23752
  814560:	1085883a 	add	r2,r2,r2
  814564:	1085883a 	add	r2,r2,r2
  814568:	10c5883a 	add	r2,r2,r3
  81456c:	10800017 	ldw	r2,0(r2)
  814570:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  814574:	e0bffc17 	ldw	r2,-16(fp)
  814578:	1004c03a 	cmpne	r2,r2,zero
  81457c:	1000071e 	bne	r2,zero,81459c <OSTaskQuery+0xe0>
  814580:	e0bffb17 	ldw	r2,-20(fp)
  814584:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814588:	e0bff917 	ldw	r2,-28(fp)
  81458c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  814590:	00800a44 	movi	r2,41
  814594:	e0bfff15 	stw	r2,-4(fp)
  814598:	00001306 	br	8145e8 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  81459c:	e0bffc17 	ldw	r2,-16(fp)
  8145a0:	10800058 	cmpnei	r2,r2,1
  8145a4:	1000071e 	bne	r2,zero,8145c4 <OSTaskQuery+0x108>
  8145a8:	e0bffb17 	ldw	r2,-20(fp)
  8145ac:	e0bff815 	stw	r2,-32(fp)
  8145b0:	e0bff817 	ldw	r2,-32(fp)
  8145b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8145b8:	008010c4 	movi	r2,67
  8145bc:	e0bfff15 	stw	r2,-4(fp)
  8145c0:	00000906 	br	8145e8 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  8145c4:	e13ffe17 	ldw	r4,-8(fp)
  8145c8:	e17ffc17 	ldw	r5,-16(fp)
  8145cc:	01801b04 	movi	r6,108
  8145d0:	080e31c0 	call	80e31c <OS_MemCopy>
  8145d4:	e0bffb17 	ldw	r2,-20(fp)
  8145d8:	e0bff715 	stw	r2,-36(fp)
  8145dc:	e0bff717 	ldw	r2,-36(fp)
  8145e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8145e4:	e03fff15 	stw	zero,-4(fp)
  8145e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8145ec:	e037883a 	mov	sp,fp
  8145f0:	dfc00117 	ldw	ra,4(sp)
  8145f4:	df000017 	ldw	fp,0(sp)
  8145f8:	dec00204 	addi	sp,sp,8
  8145fc:	f800283a 	ret

00814600 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  814600:	defffc04 	addi	sp,sp,-16
  814604:	df000315 	stw	fp,12(sp)
  814608:	df000304 	addi	fp,sp,12
  81460c:	e13ffd15 	stw	r4,-12(fp)
  814610:	e17ffe15 	stw	r5,-8(fp)
  814614:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  814618:	e0bfff0b 	ldhu	r2,-4(fp)
  81461c:	1080004c 	andi	r2,r2,1
  814620:	10803fcc 	andi	r2,r2,255
  814624:	1005003a 	cmpeq	r2,r2,zero
  814628:	1000101e 	bne	r2,zero,81466c <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  81462c:	e0bfff0b 	ldhu	r2,-4(fp)
  814630:	1080008c 	andi	r2,r2,2
  814634:	1005003a 	cmpeq	r2,r2,zero
  814638:	10000c1e 	bne	r2,zero,81466c <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  81463c:	00000806 	br	814660 <OS_TaskStkClr+0x60>
                size--;
  814640:	e0bffe17 	ldw	r2,-8(fp)
  814644:	10bfffc4 	addi	r2,r2,-1
  814648:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  81464c:	e0bffd17 	ldw	r2,-12(fp)
  814650:	10000015 	stw	zero,0(r2)
  814654:	e0bffd17 	ldw	r2,-12(fp)
  814658:	10800104 	addi	r2,r2,4
  81465c:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  814660:	e0bffe17 	ldw	r2,-8(fp)
  814664:	1004c03a 	cmpne	r2,r2,zero
  814668:	103ff51e 	bne	r2,zero,814640 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  81466c:	e037883a 	mov	sp,fp
  814670:	df000017 	ldw	fp,0(sp)
  814674:	dec00104 	addi	sp,sp,4
  814678:	f800283a 	ret

0081467c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  81467c:	defff904 	addi	sp,sp,-28
  814680:	dfc00615 	stw	ra,24(sp)
  814684:	df000515 	stw	fp,20(sp)
  814688:	df000504 	addi	fp,sp,20
  81468c:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814690:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  814694:	008020b4 	movhi	r2,130
  814698:	10802a04 	addi	r2,r2,168
  81469c:	10800003 	ldbu	r2,0(r2)
  8146a0:	10803fcc 	andi	r2,r2,255
  8146a4:	1004c03a 	cmpne	r2,r2,zero
  8146a8:	1000421e 	bne	r2,zero,8147b4 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  8146ac:	e0bfff0b 	ldhu	r2,-4(fp)
  8146b0:	1005003a 	cmpeq	r2,r2,zero
  8146b4:	10003f1e 	bne	r2,zero,8147b4 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8146b8:	0005303a 	rdctl	r2,status
  8146bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8146c0:	e0fffc17 	ldw	r3,-16(fp)
  8146c4:	00bfff84 	movi	r2,-2
  8146c8:	1884703a 	and	r2,r3,r2
  8146cc:	1001703a 	wrctl	status,r2
  
  return context;
  8146d0:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  8146d4:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  8146d8:	008020b4 	movhi	r2,130
  8146dc:	10802b04 	addi	r2,r2,172
  8146e0:	10800017 	ldw	r2,0(r2)
  8146e4:	10800d03 	ldbu	r2,52(r2)
  8146e8:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  8146ec:	e13ffe03 	ldbu	r4,-8(fp)
  8146f0:	e0fffe03 	ldbu	r3,-8(fp)
  8146f4:	008020b4 	movhi	r2,130
  8146f8:	10802844 	addi	r2,r2,161
  8146fc:	10c5883a 	add	r2,r2,r3
  814700:	10800003 	ldbu	r2,0(r2)
  814704:	1007883a 	mov	r3,r2
  814708:	008020b4 	movhi	r2,130
  81470c:	10802b04 	addi	r2,r2,172
  814710:	10800017 	ldw	r2,0(r2)
  814714:	10800d43 	ldbu	r2,53(r2)
  814718:	0084303a 	nor	r2,zero,r2
  81471c:	1884703a 	and	r2,r3,r2
  814720:	1007883a 	mov	r3,r2
  814724:	008020b4 	movhi	r2,130
  814728:	10802844 	addi	r2,r2,161
  81472c:	1105883a 	add	r2,r2,r4
  814730:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  814734:	e0fffe03 	ldbu	r3,-8(fp)
  814738:	008020b4 	movhi	r2,130
  81473c:	10802844 	addi	r2,r2,161
  814740:	10c5883a 	add	r2,r2,r3
  814744:	10800003 	ldbu	r2,0(r2)
  814748:	10803fcc 	andi	r2,r2,255
  81474c:	1004c03a 	cmpne	r2,r2,zero
  814750:	10000e1e 	bne	r2,zero,81478c <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  814754:	008020b4 	movhi	r2,130
  814758:	10802b04 	addi	r2,r2,172
  81475c:	10800017 	ldw	r2,0(r2)
  814760:	10800d83 	ldbu	r2,54(r2)
  814764:	0084303a 	nor	r2,zero,r2
  814768:	1007883a 	mov	r3,r2
  81476c:	008020b4 	movhi	r2,130
  814770:	10802804 	addi	r2,r2,160
  814774:	10800003 	ldbu	r2,0(r2)
  814778:	1884703a 	and	r2,r3,r2
  81477c:	1007883a 	mov	r3,r2
  814780:	008020b4 	movhi	r2,130
  814784:	10802804 	addi	r2,r2,160
  814788:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  81478c:	008020b4 	movhi	r2,130
  814790:	10802b04 	addi	r2,r2,172
  814794:	10c00017 	ldw	r3,0(r2)
  814798:	e0bfff0b 	ldhu	r2,-4(fp)
  81479c:	18800b8d 	sth	r2,46(r3)
  8147a0:	e0bffd17 	ldw	r2,-12(fp)
  8147a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8147a8:	e0bffb17 	ldw	r2,-20(fp)
  8147ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  8147b0:	080e3880 	call	80e388 <OS_Sched>
    }
}
  8147b4:	e037883a 	mov	sp,fp
  8147b8:	dfc00117 	ldw	ra,4(sp)
  8147bc:	df000017 	ldw	fp,0(sp)
  8147c0:	dec00204 	addi	sp,sp,8
  8147c4:	f800283a 	ret

008147c8 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  8147c8:	defff604 	addi	sp,sp,-40
  8147cc:	dfc00915 	stw	ra,36(sp)
  8147d0:	df000815 	stw	fp,32(sp)
  8147d4:	dc000715 	stw	r16,28(sp)
  8147d8:	df000704 	addi	fp,sp,28
  8147dc:	e13ffb05 	stb	r4,-20(fp)
  8147e0:	e17ffc05 	stb	r5,-16(fp)
  8147e4:	e1bffd05 	stb	r6,-12(fp)
  8147e8:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8147ec:	008020b4 	movhi	r2,130
  8147f0:	10802a04 	addi	r2,r2,168
  8147f4:	10800003 	ldbu	r2,0(r2)
  8147f8:	10803fcc 	andi	r2,r2,255
  8147fc:	1005003a 	cmpeq	r2,r2,zero
  814800:	1000031e 	bne	r2,zero,814810 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  814804:	00801544 	movi	r2,85
  814808:	e0bfff15 	stw	r2,-4(fp)
  81480c:	00004406 	br	814920 <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  814810:	e0bffb03 	ldbu	r2,-20(fp)
  814814:	1004c03a 	cmpne	r2,r2,zero
  814818:	10000c1e 	bne	r2,zero,81484c <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  81481c:	e0bffc03 	ldbu	r2,-16(fp)
  814820:	1004c03a 	cmpne	r2,r2,zero
  814824:	1000091e 	bne	r2,zero,81484c <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  814828:	e0bffd03 	ldbu	r2,-12(fp)
  81482c:	1004c03a 	cmpne	r2,r2,zero
  814830:	1000061e 	bne	r2,zero,81484c <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  814834:	e0bffe0b 	ldhu	r2,-8(fp)
  814838:	1004c03a 	cmpne	r2,r2,zero
  81483c:	1000031e 	bne	r2,zero,81484c <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  814840:	00801504 	movi	r2,84
  814844:	e0bfff15 	stw	r2,-4(fp)
  814848:	00003506 	br	814920 <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
  81484c:	e0bffc03 	ldbu	r2,-16(fp)
  814850:	10800f30 	cmpltui	r2,r2,60
  814854:	1000031e 	bne	r2,zero,814864 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  814858:	00801444 	movi	r2,81
  81485c:	e0bfff15 	stw	r2,-4(fp)
  814860:	00002f06 	br	814920 <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
  814864:	e0bffd03 	ldbu	r2,-12(fp)
  814868:	10800f30 	cmpltui	r2,r2,60
  81486c:	1000031e 	bne	r2,zero,81487c <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  814870:	00801484 	movi	r2,82
  814874:	e0bfff15 	stw	r2,-4(fp)
  814878:	00002906 	br	814920 <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
  81487c:	e0bffe0b 	ldhu	r2,-8(fp)
  814880:	1080fa30 	cmpltui	r2,r2,1000
  814884:	1000031e 	bne	r2,zero,814894 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  814888:	008014c4 	movi	r2,83
  81488c:	e0bfff15 	stw	r2,-4(fp)
  814890:	00002306 	br	814920 <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  814894:	e0bffb03 	ldbu	r2,-20(fp)
  814898:	10c38424 	muli	r3,r2,3600
  81489c:	e0bffc03 	ldbu	r2,-16(fp)
  8148a0:	10800f24 	muli	r2,r2,60
  8148a4:	1887883a 	add	r3,r3,r2
  8148a8:	e0bffd03 	ldbu	r2,-12(fp)
  8148ac:	1885883a 	add	r2,r3,r2
  8148b0:	1400fa24 	muli	r16,r2,1000
  8148b4:	e0bffe0b 	ldhu	r2,-8(fp)
  8148b8:	1100fa24 	muli	r4,r2,1000
  8148bc:	0140fa04 	movi	r5,1000
  8148c0:	080bb5c0 	call	80bb5c <__udivsi3>
  8148c4:	8085883a 	add	r2,r16,r2
  8148c8:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  8148cc:	e0bffa17 	ldw	r2,-24(fp)
  8148d0:	1004d43a 	srli	r2,r2,16
  8148d4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  8148d8:	e0bffa17 	ldw	r2,-24(fp)
  8148dc:	10bfffcc 	andi	r2,r2,65535
  8148e0:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  8148e4:	e0bffa17 	ldw	r2,-24(fp)
  8148e8:	113fffcc 	andi	r4,r2,65535
  8148ec:	081467c0 	call	81467c <OSTimeDly>
    while (loops > 0) {
  8148f0:	00000706 	br	814910 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
  8148f4:	01200014 	movui	r4,32768
  8148f8:	081467c0 	call	81467c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  8148fc:	01200014 	movui	r4,32768
  814900:	081467c0 	call	81467c <OSTimeDly>
        loops--;
  814904:	e0bff90b 	ldhu	r2,-28(fp)
  814908:	10bfffc4 	addi	r2,r2,-1
  81490c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  814910:	e0bff90b 	ldhu	r2,-28(fp)
  814914:	1004c03a 	cmpne	r2,r2,zero
  814918:	103ff61e 	bne	r2,zero,8148f4 <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  81491c:	e03fff15 	stw	zero,-4(fp)
  814920:	e0bfff17 	ldw	r2,-4(fp)
}
  814924:	e037883a 	mov	sp,fp
  814928:	dfc00217 	ldw	ra,8(sp)
  81492c:	df000117 	ldw	fp,4(sp)
  814930:	dc000017 	ldw	r16,0(sp)
  814934:	dec00304 	addi	sp,sp,12
  814938:	f800283a 	ret

0081493c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  81493c:	defff404 	addi	sp,sp,-48
  814940:	dfc00b15 	stw	ra,44(sp)
  814944:	df000a15 	stw	fp,40(sp)
  814948:	df000a04 	addi	fp,sp,40
  81494c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  814950:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  814954:	e0bffe03 	ldbu	r2,-8(fp)
  814958:	10800530 	cmpltui	r2,r2,20
  81495c:	1000031e 	bne	r2,zero,81496c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  814960:	00800a84 	movi	r2,42
  814964:	e0bfff15 	stw	r2,-4(fp)
  814968:	00007206 	br	814b34 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81496c:	0005303a 	rdctl	r2,status
  814970:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814974:	e0fffb17 	ldw	r3,-20(fp)
  814978:	00bfff84 	movi	r2,-2
  81497c:	1884703a 	and	r2,r3,r2
  814980:	1001703a 	wrctl	status,r2
  
  return context;
  814984:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  814988:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  81498c:	e0bffe03 	ldbu	r2,-8(fp)
  814990:	00c020f4 	movhi	r3,131
  814994:	18d73204 	addi	r3,r3,23752
  814998:	1085883a 	add	r2,r2,r2
  81499c:	1085883a 	add	r2,r2,r2
  8149a0:	10c5883a 	add	r2,r2,r3
  8149a4:	10800017 	ldw	r2,0(r2)
  8149a8:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  8149ac:	e0bffd17 	ldw	r2,-12(fp)
  8149b0:	1004c03a 	cmpne	r2,r2,zero
  8149b4:	1000071e 	bne	r2,zero,8149d4 <OSTimeDlyResume+0x98>
  8149b8:	e0bffc17 	ldw	r2,-16(fp)
  8149bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8149c0:	e0bffa17 	ldw	r2,-24(fp)
  8149c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  8149c8:	008010c4 	movi	r2,67
  8149cc:	e0bfff15 	stw	r2,-4(fp)
  8149d0:	00005806 	br	814b34 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  8149d4:	e0bffd17 	ldw	r2,-12(fp)
  8149d8:	10800058 	cmpnei	r2,r2,1
  8149dc:	1000071e 	bne	r2,zero,8149fc <OSTimeDlyResume+0xc0>
  8149e0:	e0bffc17 	ldw	r2,-16(fp)
  8149e4:	e0bff915 	stw	r2,-28(fp)
  8149e8:	e0bff917 	ldw	r2,-28(fp)
  8149ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  8149f0:	008010c4 	movi	r2,67
  8149f4:	e0bfff15 	stw	r2,-4(fp)
  8149f8:	00004e06 	br	814b34 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  8149fc:	e0bffd17 	ldw	r2,-12(fp)
  814a00:	10800b8b 	ldhu	r2,46(r2)
  814a04:	10bfffcc 	andi	r2,r2,65535
  814a08:	1004c03a 	cmpne	r2,r2,zero
  814a0c:	1000071e 	bne	r2,zero,814a2c <OSTimeDlyResume+0xf0>
  814a10:	e0bffc17 	ldw	r2,-16(fp)
  814a14:	e0bff815 	stw	r2,-32(fp)
  814a18:	e0bff817 	ldw	r2,-32(fp)
  814a1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  814a20:	00801404 	movi	r2,80
  814a24:	e0bfff15 	stw	r2,-4(fp)
  814a28:	00004206 	br	814b34 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  814a2c:	e0bffd17 	ldw	r2,-12(fp)
  814a30:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  814a34:	e0bffd17 	ldw	r2,-12(fp)
  814a38:	10800c03 	ldbu	r2,48(r2)
  814a3c:	10803fcc 	andi	r2,r2,255
  814a40:	10800dcc 	andi	r2,r2,55
  814a44:	1005003a 	cmpeq	r2,r2,zero
  814a48:	10000b1e 	bne	r2,zero,814a78 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  814a4c:	e0bffd17 	ldw	r2,-12(fp)
  814a50:	10c00c03 	ldbu	r3,48(r2)
  814a54:	00bff204 	movi	r2,-56
  814a58:	1884703a 	and	r2,r3,r2
  814a5c:	1007883a 	mov	r3,r2
  814a60:	e0bffd17 	ldw	r2,-12(fp)
  814a64:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  814a68:	e0fffd17 	ldw	r3,-12(fp)
  814a6c:	00800044 	movi	r2,1
  814a70:	18800c45 	stb	r2,49(r3)
  814a74:	00000206 	br	814a80 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  814a78:	e0bffd17 	ldw	r2,-12(fp)
  814a7c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  814a80:	e0bffd17 	ldw	r2,-12(fp)
  814a84:	10800c03 	ldbu	r2,48(r2)
  814a88:	10803fcc 	andi	r2,r2,255
  814a8c:	1080020c 	andi	r2,r2,8
  814a90:	1004c03a 	cmpne	r2,r2,zero
  814a94:	1000221e 	bne	r2,zero,814b20 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  814a98:	e0bffd17 	ldw	r2,-12(fp)
  814a9c:	10c00d83 	ldbu	r3,54(r2)
  814aa0:	008020b4 	movhi	r2,130
  814aa4:	10802804 	addi	r2,r2,160
  814aa8:	10800003 	ldbu	r2,0(r2)
  814aac:	1884b03a 	or	r2,r3,r2
  814ab0:	1007883a 	mov	r3,r2
  814ab4:	008020b4 	movhi	r2,130
  814ab8:	10802804 	addi	r2,r2,160
  814abc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  814ac0:	e0bffd17 	ldw	r2,-12(fp)
  814ac4:	10800d03 	ldbu	r2,52(r2)
  814ac8:	11003fcc 	andi	r4,r2,255
  814acc:	e0bffd17 	ldw	r2,-12(fp)
  814ad0:	10800d03 	ldbu	r2,52(r2)
  814ad4:	10c03fcc 	andi	r3,r2,255
  814ad8:	008020b4 	movhi	r2,130
  814adc:	10802844 	addi	r2,r2,161
  814ae0:	10c5883a 	add	r2,r2,r3
  814ae4:	10c00003 	ldbu	r3,0(r2)
  814ae8:	e0bffd17 	ldw	r2,-12(fp)
  814aec:	10800d43 	ldbu	r2,53(r2)
  814af0:	1884b03a 	or	r2,r3,r2
  814af4:	1007883a 	mov	r3,r2
  814af8:	008020b4 	movhi	r2,130
  814afc:	10802844 	addi	r2,r2,161
  814b00:	1105883a 	add	r2,r2,r4
  814b04:	10c00005 	stb	r3,0(r2)
  814b08:	e0bffc17 	ldw	r2,-16(fp)
  814b0c:	e0bff715 	stw	r2,-36(fp)
  814b10:	e0bff717 	ldw	r2,-36(fp)
  814b14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  814b18:	080e3880 	call	80e388 <OS_Sched>
  814b1c:	00000406 	br	814b30 <OSTimeDlyResume+0x1f4>
  814b20:	e0bffc17 	ldw	r2,-16(fp)
  814b24:	e0bff615 	stw	r2,-40(fp)
  814b28:	e0bff617 	ldw	r2,-40(fp)
  814b2c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  814b30:	e03fff15 	stw	zero,-4(fp)
  814b34:	e0bfff17 	ldw	r2,-4(fp)
}
  814b38:	e037883a 	mov	sp,fp
  814b3c:	dfc00117 	ldw	ra,4(sp)
  814b40:	df000017 	ldw	fp,0(sp)
  814b44:	dec00204 	addi	sp,sp,8
  814b48:	f800283a 	ret

00814b4c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  814b4c:	defffb04 	addi	sp,sp,-20
  814b50:	df000415 	stw	fp,16(sp)
  814b54:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814b58:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814b5c:	0005303a 	rdctl	r2,status
  814b60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814b64:	e0fffd17 	ldw	r3,-12(fp)
  814b68:	00bfff84 	movi	r2,-2
  814b6c:	1884703a 	and	r2,r3,r2
  814b70:	1001703a 	wrctl	status,r2
  
  return context;
  814b74:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  814b78:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  814b7c:	008020b4 	movhi	r2,130
  814b80:	10802c04 	addi	r2,r2,176
  814b84:	10800017 	ldw	r2,0(r2)
  814b88:	e0bfff15 	stw	r2,-4(fp)
  814b8c:	e0bffe17 	ldw	r2,-8(fp)
  814b90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814b94:	e0bffc17 	ldw	r2,-16(fp)
  814b98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  814b9c:	e0bfff17 	ldw	r2,-4(fp)
}
  814ba0:	e037883a 	mov	sp,fp
  814ba4:	df000017 	ldw	fp,0(sp)
  814ba8:	dec00104 	addi	sp,sp,4
  814bac:	f800283a 	ret

00814bb0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  814bb0:	defffb04 	addi	sp,sp,-20
  814bb4:	df000415 	stw	fp,16(sp)
  814bb8:	df000404 	addi	fp,sp,16
  814bbc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814bc0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814bc4:	0005303a 	rdctl	r2,status
  814bc8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814bcc:	e0fffd17 	ldw	r3,-12(fp)
  814bd0:	00bfff84 	movi	r2,-2
  814bd4:	1884703a 	and	r2,r3,r2
  814bd8:	1001703a 	wrctl	status,r2
  
  return context;
  814bdc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  814be0:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  814be4:	00c020b4 	movhi	r3,130
  814be8:	18c02c04 	addi	r3,r3,176
  814bec:	e0bfff17 	ldw	r2,-4(fp)
  814bf0:	18800015 	stw	r2,0(r3)
  814bf4:	e0bffe17 	ldw	r2,-8(fp)
  814bf8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814bfc:	e0bffc17 	ldw	r2,-16(fp)
  814c00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  814c04:	e037883a 	mov	sp,fp
  814c08:	df000017 	ldw	fp,0(sp)
  814c0c:	dec00104 	addi	sp,sp,4
  814c10:	f800283a 	ret

00814c14 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  814c14:	defffd04 	addi	sp,sp,-12
  814c18:	dfc00215 	stw	ra,8(sp)
  814c1c:	df000115 	stw	fp,4(sp)
  814c20:	df000104 	addi	fp,sp,4
  814c24:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  814c28:	081b3d00 	call	81b3d0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  814c2c:	00800044 	movi	r2,1
  814c30:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  814c34:	e037883a 	mov	sp,fp
  814c38:	dfc00117 	ldw	ra,4(sp)
  814c3c:	df000017 	ldw	fp,0(sp)
  814c40:	dec00204 	addi	sp,sp,8
  814c44:	f800283a 	ret

00814c48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  814c48:	defffe04 	addi	sp,sp,-8
  814c4c:	dfc00115 	stw	ra,4(sp)
  814c50:	df000015 	stw	fp,0(sp)
  814c54:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  814c58:	01006474 	movhi	r4,401
  814c5c:	21250004 	addi	r4,r4,-27648
  814c60:	000b883a 	mov	r5,zero
  814c64:	000d883a 	mov	r6,zero
  814c68:	01c0fa04 	movi	r7,1000
  814c6c:	0815ad80 	call	815ad8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  814c70:	010020b4 	movhi	r4,130
  814c74:	2134bc04 	addi	r4,r4,-11536
  814c78:	000b883a 	mov	r5,zero
  814c7c:	01800044 	movi	r6,1
  814c80:	0814e540 	call	814e54 <altera_avalon_jtag_uart_init>
  814c84:	010020b4 	movhi	r4,130
  814c88:	2134b204 	addi	r4,r4,-11576
  814c8c:	0814cd40 	call	814cd4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  814c90:	010020b4 	movhi	r4,130
  814c94:	2138cd04 	addi	r4,r4,-7372
  814c98:	0815c100 	call	815c10 <alt_up_character_lcd_init>
  814c9c:	010020b4 	movhi	r4,130
  814ca0:	2138cd04 	addi	r4,r4,-7372
  814ca4:	0814cd40 	call	814cd4 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
  814ca8:	010020b4 	movhi	r4,130
  814cac:	2138d804 	addi	r4,r4,-7328
  814cb0:	0814cd40 	call	814cd4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
  814cb4:	010020b4 	movhi	r4,130
  814cb8:	2138e304 	addi	r4,r4,-7284
  814cbc:	0814cd40 	call	814cd4 <alt_dev_reg>
}
  814cc0:	e037883a 	mov	sp,fp
  814cc4:	dfc00117 	ldw	ra,4(sp)
  814cc8:	df000017 	ldw	fp,0(sp)
  814ccc:	dec00204 	addi	sp,sp,8
  814cd0:	f800283a 	ret

00814cd4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  814cd4:	defffd04 	addi	sp,sp,-12
  814cd8:	dfc00215 	stw	ra,8(sp)
  814cdc:	df000115 	stw	fp,4(sp)
  814ce0:	df000104 	addi	fp,sp,4
  814ce4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  814ce8:	e13fff17 	ldw	r4,-4(fp)
  814cec:	014020b4 	movhi	r5,130
  814cf0:	2978f704 	addi	r5,r5,-7204
  814cf4:	081a9c80 	call	81a9c8 <alt_dev_llist_insert>
}
  814cf8:	e037883a 	mov	sp,fp
  814cfc:	dfc00117 	ldw	ra,4(sp)
  814d00:	df000017 	ldw	fp,0(sp)
  814d04:	dec00204 	addi	sp,sp,8
  814d08:	f800283a 	ret

00814d0c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  814d0c:	defffa04 	addi	sp,sp,-24
  814d10:	dfc00515 	stw	ra,20(sp)
  814d14:	df000415 	stw	fp,16(sp)
  814d18:	df000404 	addi	fp,sp,16
  814d1c:	e13ffd15 	stw	r4,-12(fp)
  814d20:	e17ffe15 	stw	r5,-8(fp)
  814d24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  814d28:	e0bffd17 	ldw	r2,-12(fp)
  814d2c:	10800017 	ldw	r2,0(r2)
  814d30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  814d34:	e0bffc17 	ldw	r2,-16(fp)
  814d38:	11000a04 	addi	r4,r2,40
  814d3c:	e0bffd17 	ldw	r2,-12(fp)
  814d40:	11c00217 	ldw	r7,8(r2)
  814d44:	e17ffe17 	ldw	r5,-8(fp)
  814d48:	e1bfff17 	ldw	r6,-4(fp)
  814d4c:	08154c80 	call	8154c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  814d50:	e037883a 	mov	sp,fp
  814d54:	dfc00117 	ldw	ra,4(sp)
  814d58:	df000017 	ldw	fp,0(sp)
  814d5c:	dec00204 	addi	sp,sp,8
  814d60:	f800283a 	ret

00814d64 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  814d64:	defffa04 	addi	sp,sp,-24
  814d68:	dfc00515 	stw	ra,20(sp)
  814d6c:	df000415 	stw	fp,16(sp)
  814d70:	df000404 	addi	fp,sp,16
  814d74:	e13ffd15 	stw	r4,-12(fp)
  814d78:	e17ffe15 	stw	r5,-8(fp)
  814d7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  814d80:	e0bffd17 	ldw	r2,-12(fp)
  814d84:	10800017 	ldw	r2,0(r2)
  814d88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  814d8c:	e0bffc17 	ldw	r2,-16(fp)
  814d90:	11000a04 	addi	r4,r2,40
  814d94:	e0bffd17 	ldw	r2,-12(fp)
  814d98:	11c00217 	ldw	r7,8(r2)
  814d9c:	e17ffe17 	ldw	r5,-8(fp)
  814da0:	e1bfff17 	ldw	r6,-4(fp)
  814da4:	08157880 	call	815788 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  814da8:	e037883a 	mov	sp,fp
  814dac:	dfc00117 	ldw	ra,4(sp)
  814db0:	df000017 	ldw	fp,0(sp)
  814db4:	dec00204 	addi	sp,sp,8
  814db8:	f800283a 	ret

00814dbc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  814dbc:	defffc04 	addi	sp,sp,-16
  814dc0:	dfc00315 	stw	ra,12(sp)
  814dc4:	df000215 	stw	fp,8(sp)
  814dc8:	df000204 	addi	fp,sp,8
  814dcc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  814dd0:	e0bfff17 	ldw	r2,-4(fp)
  814dd4:	10800017 	ldw	r2,0(r2)
  814dd8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  814ddc:	e0bffe17 	ldw	r2,-8(fp)
  814de0:	11000a04 	addi	r4,r2,40
  814de4:	e0bfff17 	ldw	r2,-4(fp)
  814de8:	11400217 	ldw	r5,8(r2)
  814dec:	08153600 	call	815360 <altera_avalon_jtag_uart_close>
}
  814df0:	e037883a 	mov	sp,fp
  814df4:	dfc00117 	ldw	ra,4(sp)
  814df8:	df000017 	ldw	fp,0(sp)
  814dfc:	dec00204 	addi	sp,sp,8
  814e00:	f800283a 	ret

00814e04 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  814e04:	defffa04 	addi	sp,sp,-24
  814e08:	dfc00515 	stw	ra,20(sp)
  814e0c:	df000415 	stw	fp,16(sp)
  814e10:	df000404 	addi	fp,sp,16
  814e14:	e13ffd15 	stw	r4,-12(fp)
  814e18:	e17ffe15 	stw	r5,-8(fp)
  814e1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  814e20:	e0bffd17 	ldw	r2,-12(fp)
  814e24:	10800017 	ldw	r2,0(r2)
  814e28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  814e2c:	e0bffc17 	ldw	r2,-16(fp)
  814e30:	11000a04 	addi	r4,r2,40
  814e34:	e17ffe17 	ldw	r5,-8(fp)
  814e38:	e1bfff17 	ldw	r6,-4(fp)
  814e3c:	08153d40 	call	8153d4 <altera_avalon_jtag_uart_ioctl>
}
  814e40:	e037883a 	mov	sp,fp
  814e44:	dfc00117 	ldw	ra,4(sp)
  814e48:	df000017 	ldw	fp,0(sp)
  814e4c:	dec00204 	addi	sp,sp,8
  814e50:	f800283a 	ret

00814e54 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  814e54:	defff504 	addi	sp,sp,-44
  814e58:	dfc00a15 	stw	ra,40(sp)
  814e5c:	df000915 	stw	fp,36(sp)
  814e60:	df000904 	addi	fp,sp,36
  814e64:	e13ffd15 	stw	r4,-12(fp)
  814e68:	e17ffe15 	stw	r5,-8(fp)
  814e6c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  814e70:	e0bffd17 	ldw	r2,-12(fp)
  814e74:	10800c04 	addi	r2,r2,48
  814e78:	e0bffb15 	stw	r2,-20(fp)
  814e7c:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  814e80:	e13ffc0b 	ldhu	r4,-16(fp)
  814e84:	e17ffc84 	addi	r5,fp,-14
  814e88:	080ef300 	call	80ef30 <OSFlagCreate>
  814e8c:	1007883a 	mov	r3,r2
  814e90:	e0bffb17 	ldw	r2,-20(fp)
  814e94:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  814e98:	e0bffd17 	ldw	r2,-12(fp)
  814e9c:	10800a04 	addi	r2,r2,40
  814ea0:	e0bff915 	stw	r2,-28(fp)
  814ea4:	00800044 	movi	r2,1
  814ea8:	e0bffa0d 	sth	r2,-24(fp)
  814eac:	e13ffa0b 	ldhu	r4,-24(fp)
  814eb0:	08121340 	call	812134 <OSSemCreate>
  814eb4:	1007883a 	mov	r3,r2
  814eb8:	e0bff917 	ldw	r2,-28(fp)
  814ebc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  814ec0:	e0bffd17 	ldw	r2,-12(fp)
  814ec4:	10800b04 	addi	r2,r2,44
  814ec8:	e0bff715 	stw	r2,-36(fp)
  814ecc:	00800044 	movi	r2,1
  814ed0:	e0bff80d 	sth	r2,-32(fp)
  814ed4:	e13ff80b 	ldhu	r4,-32(fp)
  814ed8:	08121340 	call	812134 <OSSemCreate>
  814edc:	1007883a 	mov	r3,r2
  814ee0:	e0bff717 	ldw	r2,-36(fp)
  814ee4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  814ee8:	e0fffd17 	ldw	r3,-12(fp)
  814eec:	00800044 	movi	r2,1
  814ef0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  814ef4:	e0bffd17 	ldw	r2,-12(fp)
  814ef8:	10800017 	ldw	r2,0(r2)
  814efc:	11000104 	addi	r4,r2,4
  814f00:	e0bffd17 	ldw	r2,-12(fp)
  814f04:	10800817 	ldw	r2,32(r2)
  814f08:	1007883a 	mov	r3,r2
  814f0c:	2005883a 	mov	r2,r4
  814f10:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  814f14:	e13fff17 	ldw	r4,-4(fp)
  814f18:	e17ffd17 	ldw	r5,-12(fp)
  814f1c:	01802074 	movhi	r6,129
  814f20:	3193e104 	addi	r6,r6,20356
  814f24:	081ada40 	call	81ada4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  814f28:	e0bffd17 	ldw	r2,-12(fp)
  814f2c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  814f30:	e0bffd17 	ldw	r2,-12(fp)
  814f34:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  814f38:	008020b4 	movhi	r2,130
  814f3c:	10803e04 	addi	r2,r2,248
  814f40:	10800017 	ldw	r2,0(r2)
  814f44:	100b883a 	mov	r5,r2
  814f48:	01802074 	movhi	r6,129
  814f4c:	31949304 	addi	r6,r6,21068
  814f50:	e1fffd17 	ldw	r7,-12(fp)
  814f54:	081a8580 	call	81a858 <alt_alarm_start>
  814f58:	1004403a 	cmpge	r2,r2,zero
  814f5c:	1000041e 	bne	r2,zero,814f70 <altera_avalon_jtag_uart_init+0x11c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  814f60:	e0fffd17 	ldw	r3,-12(fp)
  814f64:	00a00034 	movhi	r2,32768
  814f68:	10bfffc4 	addi	r2,r2,-1
  814f6c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  814f70:	e037883a 	mov	sp,fp
  814f74:	dfc00117 	ldw	ra,4(sp)
  814f78:	df000017 	ldw	fp,0(sp)
  814f7c:	dec00204 	addi	sp,sp,8
  814f80:	f800283a 	ret

00814f84 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  814f84:	defff104 	addi	sp,sp,-60
  814f88:	dfc00e15 	stw	ra,56(sp)
  814f8c:	df000d15 	stw	fp,52(sp)
  814f90:	df000d04 	addi	fp,sp,52
  814f94:	e13ffe15 	stw	r4,-8(fp)
  814f98:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  814f9c:	e0bffe17 	ldw	r2,-8(fp)
  814fa0:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
  814fa4:	e0bffc17 	ldw	r2,-16(fp)
  814fa8:	10800017 	ldw	r2,0(r2)
  814fac:	e0bffb15 	stw	r2,-20(fp)
  814fb0:	00000006 	br	814fb4 <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  814fb4:	e0bffb17 	ldw	r2,-20(fp)
  814fb8:	10800104 	addi	r2,r2,4
  814fbc:	10800037 	ldwio	r2,0(r2)
  814fc0:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  814fc4:	e0bffa17 	ldw	r2,-24(fp)
  814fc8:	1080c00c 	andi	r2,r2,768
  814fcc:	1005003a 	cmpeq	r2,r2,zero
  814fd0:	1000991e 	bne	r2,zero,815238 <altera_avalon_jtag_uart_irq+0x2b4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  814fd4:	e0bffa17 	ldw	r2,-24(fp)
  814fd8:	1080400c 	andi	r2,r2,256
  814fdc:	1005003a 	cmpeq	r2,r2,zero
  814fe0:	1000481e 	bne	r2,zero,815104 <altera_avalon_jtag_uart_irq+0x180>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  814fe4:	00800074 	movhi	r2,1
  814fe8:	e0bff915 	stw	r2,-28(fp)
  814fec:	00000006 	br	814ff0 <altera_avalon_jtag_uart_irq+0x6c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  814ff0:	e0bffc17 	ldw	r2,-16(fp)
  814ff4:	10800d17 	ldw	r2,52(r2)
  814ff8:	10800044 	addi	r2,r2,1
  814ffc:	1081ffcc 	andi	r2,r2,2047
  815000:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
  815004:	e0bffc17 	ldw	r2,-16(fp)
  815008:	10c00e17 	ldw	r3,56(r2)
  81500c:	e0bff817 	ldw	r2,-32(fp)
  815010:	18802826 	beq	r3,r2,8150b4 <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  815014:	e0bffb17 	ldw	r2,-20(fp)
  815018:	10800037 	ldwio	r2,0(r2)
  81501c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  815020:	e0bff917 	ldw	r2,-28(fp)
  815024:	10a0000c 	andi	r2,r2,32768
  815028:	1005003a 	cmpeq	r2,r2,zero
  81502c:	1000211e 	bne	r2,zero,8150b4 <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  815030:	e0bffc17 	ldw	r2,-16(fp)
  815034:	10c00d17 	ldw	r3,52(r2)
  815038:	e0bff917 	ldw	r2,-28(fp)
  81503c:	1009883a 	mov	r4,r2
  815040:	e0bffc17 	ldw	r2,-16(fp)
  815044:	1885883a 	add	r2,r3,r2
  815048:	10801104 	addi	r2,r2,68
  81504c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815050:	e0bffc17 	ldw	r2,-16(fp)
  815054:	10800d17 	ldw	r2,52(r2)
  815058:	10800044 	addi	r2,r2,1
  81505c:	10c1ffcc 	andi	r3,r2,2047
  815060:	e0bffc17 	ldw	r2,-16(fp)
  815064:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  815068:	e0bffc17 	ldw	r2,-16(fp)
  81506c:	10800c17 	ldw	r2,48(r2)
  815070:	e0bff515 	stw	r2,-44(fp)
  815074:	00800044 	movi	r2,1
  815078:	e0bff60d 	sth	r2,-40(fp)
  81507c:	00800044 	movi	r2,1
  815080:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  815084:	008020b4 	movhi	r2,130
  815088:	10801c44 	addi	r2,r2,113
  81508c:	10800003 	ldbu	r2,0(r2)
  815090:	10803fcc 	andi	r2,r2,255
  815094:	1005003a 	cmpeq	r2,r2,zero
  815098:	103fd51e 	bne	r2,zero,814ff0 <altera_avalon_jtag_uart_irq+0x6c>
  {
    OSFlagPost (group, flags, opt, &err);
  81509c:	e17ff60b 	ldhu	r5,-40(fp)
  8150a0:	e1bff683 	ldbu	r6,-38(fp)
  8150a4:	e1fffd04 	addi	r7,fp,-12
  8150a8:	e13ff517 	ldw	r4,-44(fp)
  8150ac:	080fc580 	call	80fc58 <OSFlagPost>
    return err;
  8150b0:	003fcf06 	br	814ff0 <altera_avalon_jtag_uart_irq+0x6c>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8150b4:	e0bff917 	ldw	r2,-28(fp)
  8150b8:	10bfffec 	andhi	r2,r2,65535
  8150bc:	1005003a 	cmpeq	r2,r2,zero
  8150c0:	1000101e 	bne	r2,zero,815104 <altera_avalon_jtag_uart_irq+0x180>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8150c4:	e0bffc17 	ldw	r2,-16(fp)
  8150c8:	10c00817 	ldw	r3,32(r2)
  8150cc:	00bfff84 	movi	r2,-2
  8150d0:	1886703a 	and	r3,r3,r2
  8150d4:	e0bffc17 	ldw	r2,-16(fp)
  8150d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8150dc:	e0bffb17 	ldw	r2,-20(fp)
  8150e0:	11000104 	addi	r4,r2,4
  8150e4:	e0bffc17 	ldw	r2,-16(fp)
  8150e8:	10800817 	ldw	r2,32(r2)
  8150ec:	1007883a 	mov	r3,r2
  8150f0:	2005883a 	mov	r2,r4
  8150f4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8150f8:	e0bffb17 	ldw	r2,-20(fp)
  8150fc:	10800104 	addi	r2,r2,4
  815100:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  815104:	e0bffa17 	ldw	r2,-24(fp)
  815108:	1080800c 	andi	r2,r2,512
  81510c:	1005003a 	cmpeq	r2,r2,zero
  815110:	103fa81e 	bne	r2,zero,814fb4 <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  815114:	e0bffa17 	ldw	r2,-24(fp)
  815118:	10bfffec 	andhi	r2,r2,65535
  81511c:	1004d43a 	srli	r2,r2,16
  815120:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  815124:	00002706 	br	8151c4 <altera_avalon_jtag_uart_irq+0x240>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  815128:	e13ffb17 	ldw	r4,-20(fp)
  81512c:	e0bffc17 	ldw	r2,-16(fp)
  815130:	10c01017 	ldw	r3,64(r2)
  815134:	e0bffc17 	ldw	r2,-16(fp)
  815138:	1885883a 	add	r2,r3,r2
  81513c:	10821104 	addi	r2,r2,2116
  815140:	10800003 	ldbu	r2,0(r2)
  815144:	10c03fcc 	andi	r3,r2,255
  815148:	18c0201c 	xori	r3,r3,128
  81514c:	18ffe004 	addi	r3,r3,-128
  815150:	2005883a 	mov	r2,r4
  815154:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815158:	e0bffc17 	ldw	r2,-16(fp)
  81515c:	10801017 	ldw	r2,64(r2)
  815160:	10800044 	addi	r2,r2,1
  815164:	10c1ffcc 	andi	r3,r2,2047
  815168:	e0bffc17 	ldw	r2,-16(fp)
  81516c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  815170:	e0bffc17 	ldw	r2,-16(fp)
  815174:	10800c17 	ldw	r2,48(r2)
  815178:	e0bff315 	stw	r2,-52(fp)
  81517c:	00800084 	movi	r2,2
  815180:	e0bff40d 	sth	r2,-48(fp)
  815184:	00800044 	movi	r2,1
  815188:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  81518c:	008020b4 	movhi	r2,130
  815190:	10801c44 	addi	r2,r2,113
  815194:	10800003 	ldbu	r2,0(r2)
  815198:	10803fcc 	andi	r2,r2,255
  81519c:	1005003a 	cmpeq	r2,r2,zero
  8151a0:	1000051e 	bne	r2,zero,8151b8 <altera_avalon_jtag_uart_irq+0x234>
  {
    OSFlagPost (group, flags, opt, &err);
  8151a4:	e17ff40b 	ldhu	r5,-48(fp)
  8151a8:	e1bff483 	ldbu	r6,-46(fp)
  8151ac:	e1fffd44 	addi	r7,fp,-11
  8151b0:	e13ff317 	ldw	r4,-52(fp)
  8151b4:	080fc580 	call	80fc58 <OSFlagPost>

        space--;
  8151b8:	e0bff717 	ldw	r2,-36(fp)
  8151bc:	10bfffc4 	addi	r2,r2,-1
  8151c0:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8151c4:	e0bff717 	ldw	r2,-36(fp)
  8151c8:	1005003a 	cmpeq	r2,r2,zero
  8151cc:	1000051e 	bne	r2,zero,8151e4 <altera_avalon_jtag_uart_irq+0x260>
  8151d0:	e0bffc17 	ldw	r2,-16(fp)
  8151d4:	10c01017 	ldw	r3,64(r2)
  8151d8:	e0bffc17 	ldw	r2,-16(fp)
  8151dc:	10800f17 	ldw	r2,60(r2)
  8151e0:	18bfd11e 	bne	r3,r2,815128 <altera_avalon_jtag_uart_irq+0x1a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8151e4:	e0bff717 	ldw	r2,-36(fp)
  8151e8:	1005003a 	cmpeq	r2,r2,zero
  8151ec:	103f711e 	bne	r2,zero,814fb4 <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8151f0:	e0bffc17 	ldw	r2,-16(fp)
  8151f4:	10c00817 	ldw	r3,32(r2)
  8151f8:	00bfff44 	movi	r2,-3
  8151fc:	1886703a 	and	r3,r3,r2
  815200:	e0bffc17 	ldw	r2,-16(fp)
  815204:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  815208:	e0bffc17 	ldw	r2,-16(fp)
  81520c:	10800017 	ldw	r2,0(r2)
  815210:	11000104 	addi	r4,r2,4
  815214:	e0bffc17 	ldw	r2,-16(fp)
  815218:	10800817 	ldw	r2,32(r2)
  81521c:	1007883a 	mov	r3,r2
  815220:	2005883a 	mov	r2,r4
  815224:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  815228:	e0bffb17 	ldw	r2,-20(fp)
  81522c:	10800104 	addi	r2,r2,4
  815230:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  815234:	003f5f06 	br	814fb4 <altera_avalon_jtag_uart_irq+0x30>
}
  815238:	e037883a 	mov	sp,fp
  81523c:	dfc00117 	ldw	ra,4(sp)
  815240:	df000017 	ldw	fp,0(sp)
  815244:	dec00204 	addi	sp,sp,8
  815248:	f800283a 	ret

0081524c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  81524c:	defff804 	addi	sp,sp,-32
  815250:	dfc00715 	stw	ra,28(sp)
  815254:	df000615 	stw	fp,24(sp)
  815258:	df000604 	addi	fp,sp,24
  81525c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  815260:	e0bfff17 	ldw	r2,-4(fp)
  815264:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  815268:	e0bffd17 	ldw	r2,-12(fp)
  81526c:	10800017 	ldw	r2,0(r2)
  815270:	10800104 	addi	r2,r2,4
  815274:	10800037 	ldwio	r2,0(r2)
  815278:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  81527c:	e0bffc17 	ldw	r2,-16(fp)
  815280:	1081000c 	andi	r2,r2,1024
  815284:	1005003a 	cmpeq	r2,r2,zero
  815288:	10000c1e 	bne	r2,zero,8152bc <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  81528c:	e0bffd17 	ldw	r2,-12(fp)
  815290:	10800017 	ldw	r2,0(r2)
  815294:	11000104 	addi	r4,r2,4
  815298:	e0bffd17 	ldw	r2,-12(fp)
  81529c:	10800817 	ldw	r2,32(r2)
  8152a0:	10810014 	ori	r2,r2,1024
  8152a4:	1007883a 	mov	r3,r2
  8152a8:	2005883a 	mov	r2,r4
  8152ac:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  8152b0:	e0bffd17 	ldw	r2,-12(fp)
  8152b4:	10000915 	stw	zero,36(r2)
  8152b8:	00002106 	br	815340 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8152bc:	e0bffd17 	ldw	r2,-12(fp)
  8152c0:	10c00917 	ldw	r3,36(r2)
  8152c4:	00a00034 	movhi	r2,32768
  8152c8:	10bfff04 	addi	r2,r2,-4
  8152cc:	10c01c36 	bltu	r2,r3,815340 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  8152d0:	e0bffd17 	ldw	r2,-12(fp)
  8152d4:	10800917 	ldw	r2,36(r2)
  8152d8:	10c00044 	addi	r3,r2,1
  8152dc:	e0bffd17 	ldw	r2,-12(fp)
  8152e0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  8152e4:	e0bffd17 	ldw	r2,-12(fp)
  8152e8:	10c00917 	ldw	r3,36(r2)
  8152ec:	e0bffd17 	ldw	r2,-12(fp)
  8152f0:	10800117 	ldw	r2,4(r2)
  8152f4:	18801236 	bltu	r3,r2,815340 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  8152f8:	e0bffd17 	ldw	r2,-12(fp)
  8152fc:	10800c17 	ldw	r2,48(r2)
  815300:	e0bffa15 	stw	r2,-24(fp)
  815304:	00800104 	movi	r2,4
  815308:	e0bffb0d 	sth	r2,-20(fp)
  81530c:	00800044 	movi	r2,1
  815310:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  815314:	008020b4 	movhi	r2,130
  815318:	10801c44 	addi	r2,r2,113
  81531c:	10800003 	ldbu	r2,0(r2)
  815320:	10803fcc 	andi	r2,r2,255
  815324:	1005003a 	cmpeq	r2,r2,zero
  815328:	1000051e 	bne	r2,zero,815340 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  81532c:	e17ffb0b 	ldhu	r5,-20(fp)
  815330:	e1bffb83 	ldbu	r6,-18(fp)
  815334:	e1fffe04 	addi	r7,fp,-8
  815338:	e13ffa17 	ldw	r4,-24(fp)
  81533c:	080fc580 	call	80fc58 <OSFlagPost>
  815340:	008020b4 	movhi	r2,130
  815344:	10803e04 	addi	r2,r2,248
  815348:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  81534c:	e037883a 	mov	sp,fp
  815350:	dfc00117 	ldw	ra,4(sp)
  815354:	df000017 	ldw	fp,0(sp)
  815358:	dec00204 	addi	sp,sp,8
  81535c:	f800283a 	ret

00815360 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  815360:	defffc04 	addi	sp,sp,-16
  815364:	df000315 	stw	fp,12(sp)
  815368:	df000304 	addi	fp,sp,12
  81536c:	e13ffd15 	stw	r4,-12(fp)
  815370:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  815374:	00000706 	br	815394 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  815378:	e0bffe17 	ldw	r2,-8(fp)
  81537c:	1090000c 	andi	r2,r2,16384
  815380:	1005003a 	cmpeq	r2,r2,zero
  815384:	1000031e 	bne	r2,zero,815394 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  815388:	00bffd44 	movi	r2,-11
  81538c:	e0bfff15 	stw	r2,-4(fp)
  815390:	00000b06 	br	8153c0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  815394:	e0bffd17 	ldw	r2,-12(fp)
  815398:	10c01017 	ldw	r3,64(r2)
  81539c:	e0bffd17 	ldw	r2,-12(fp)
  8153a0:	10800f17 	ldw	r2,60(r2)
  8153a4:	18800526 	beq	r3,r2,8153bc <altera_avalon_jtag_uart_close+0x5c>
  8153a8:	e0bffd17 	ldw	r2,-12(fp)
  8153ac:	10c00917 	ldw	r3,36(r2)
  8153b0:	e0bffd17 	ldw	r2,-12(fp)
  8153b4:	10800117 	ldw	r2,4(r2)
  8153b8:	18bfef36 	bltu	r3,r2,815378 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8153bc:	e03fff15 	stw	zero,-4(fp)
  8153c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8153c4:	e037883a 	mov	sp,fp
  8153c8:	df000017 	ldw	fp,0(sp)
  8153cc:	dec00104 	addi	sp,sp,4
  8153d0:	f800283a 	ret

008153d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8153d4:	defff804 	addi	sp,sp,-32
  8153d8:	df000715 	stw	fp,28(sp)
  8153dc:	df000704 	addi	fp,sp,28
  8153e0:	e13ffb15 	stw	r4,-20(fp)
  8153e4:	e17ffc15 	stw	r5,-16(fp)
  8153e8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  8153ec:	00bff9c4 	movi	r2,-25
  8153f0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  8153f4:	e0bffc17 	ldw	r2,-16(fp)
  8153f8:	e0bfff15 	stw	r2,-4(fp)
  8153fc:	e0ffff17 	ldw	r3,-4(fp)
  815400:	189a8060 	cmpeqi	r2,r3,27137
  815404:	1000041e 	bne	r2,zero,815418 <altera_avalon_jtag_uart_ioctl+0x44>
  815408:	e0ffff17 	ldw	r3,-4(fp)
  81540c:	189a80a0 	cmpeqi	r2,r3,27138
  815410:	10001b1e 	bne	r2,zero,815480 <altera_avalon_jtag_uart_ioctl+0xac>
  815414:	00002706 	br	8154b4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  815418:	e0bffb17 	ldw	r2,-20(fp)
  81541c:	10c00117 	ldw	r3,4(r2)
  815420:	00a00034 	movhi	r2,32768
  815424:	10bfffc4 	addi	r2,r2,-1
  815428:	18802226 	beq	r3,r2,8154b4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  81542c:	e0bffd17 	ldw	r2,-12(fp)
  815430:	10800017 	ldw	r2,0(r2)
  815434:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  815438:	e0bff917 	ldw	r2,-28(fp)
  81543c:	10800090 	cmplti	r2,r2,2
  815440:	1000071e 	bne	r2,zero,815460 <altera_avalon_jtag_uart_ioctl+0x8c>
  815444:	e0fff917 	ldw	r3,-28(fp)
  815448:	00a00034 	movhi	r2,32768
  81544c:	10bfffc4 	addi	r2,r2,-1
  815450:	18800326 	beq	r3,r2,815460 <altera_avalon_jtag_uart_ioctl+0x8c>
  815454:	e0bff917 	ldw	r2,-28(fp)
  815458:	e0bffe15 	stw	r2,-8(fp)
  81545c:	00000306 	br	81546c <altera_avalon_jtag_uart_ioctl+0x98>
  815460:	00e00034 	movhi	r3,32768
  815464:	18ffff84 	addi	r3,r3,-2
  815468:	e0fffe15 	stw	r3,-8(fp)
  81546c:	e0bffb17 	ldw	r2,-20(fp)
  815470:	e0fffe17 	ldw	r3,-8(fp)
  815474:	10c00115 	stw	r3,4(r2)
      rc = 0;
  815478:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  81547c:	00000d06 	br	8154b4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  815480:	e0bffb17 	ldw	r2,-20(fp)
  815484:	10c00117 	ldw	r3,4(r2)
  815488:	00a00034 	movhi	r2,32768
  81548c:	10bfffc4 	addi	r2,r2,-1
  815490:	18800826 	beq	r3,r2,8154b4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  815494:	e13ffd17 	ldw	r4,-12(fp)
  815498:	e0bffb17 	ldw	r2,-20(fp)
  81549c:	10c00917 	ldw	r3,36(r2)
  8154a0:	e0bffb17 	ldw	r2,-20(fp)
  8154a4:	10800117 	ldw	r2,4(r2)
  8154a8:	1885803a 	cmpltu	r2,r3,r2
  8154ac:	20800015 	stw	r2,0(r4)
      rc = 0;
  8154b0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  8154b4:	e0bffa17 	ldw	r2,-24(fp)
}
  8154b8:	e037883a 	mov	sp,fp
  8154bc:	df000017 	ldw	fp,0(sp)
  8154c0:	dec00104 	addi	sp,sp,4
  8154c4:	f800283a 	ret

008154c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8154c8:	deffeb04 	addi	sp,sp,-84
  8154cc:	dfc01415 	stw	ra,80(sp)
  8154d0:	df001315 	stw	fp,76(sp)
  8154d4:	df001304 	addi	fp,sp,76
  8154d8:	e13ffb15 	stw	r4,-20(fp)
  8154dc:	e17ffc15 	stw	r5,-16(fp)
  8154e0:	e1bffd15 	stw	r6,-12(fp)
  8154e4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  8154e8:	e0bffc17 	ldw	r2,-16(fp)
  8154ec:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  8154f0:	e0bffb17 	ldw	r2,-20(fp)
  8154f4:	10800a17 	ldw	r2,40(r2)
  8154f8:	e0bff315 	stw	r2,-52(fp)
  8154fc:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  815500:	e17ff40b 	ldhu	r5,-48(fp)
  815504:	e1bffa44 	addi	r6,fp,-23
  815508:	e13ff317 	ldw	r4,-52(fp)
  81550c:	08124e80 	call	8124e8 <OSSemPend>

  while (space > 0)
  815510:	00006406 	br	8156a4 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  815514:	e0bffb17 	ldw	r2,-20(fp)
  815518:	10800d17 	ldw	r2,52(r2)
  81551c:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  815520:	e0bffb17 	ldw	r2,-20(fp)
  815524:	10800e17 	ldw	r2,56(r2)
  815528:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  81552c:	e0fff617 	ldw	r3,-40(fp)
  815530:	e0bff517 	ldw	r2,-44(fp)
  815534:	18800536 	bltu	r3,r2,81554c <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  815538:	e0bff617 	ldw	r2,-40(fp)
  81553c:	e0fff517 	ldw	r3,-44(fp)
  815540:	10c5c83a 	sub	r2,r2,r3
  815544:	e0bff715 	stw	r2,-36(fp)
  815548:	00000406 	br	81555c <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  81554c:	00820004 	movi	r2,2048
  815550:	e0fff517 	ldw	r3,-44(fp)
  815554:	10c5c83a 	sub	r2,r2,r3
  815558:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  81555c:	e0bff717 	ldw	r2,-36(fp)
  815560:	1005003a 	cmpeq	r2,r2,zero
  815564:	10001f1e 	bne	r2,zero,8155e4 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  815568:	e0fffd17 	ldw	r3,-12(fp)
  81556c:	e0bff717 	ldw	r2,-36(fp)
  815570:	1880022e 	bgeu	r3,r2,81557c <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  815574:	e0bffd17 	ldw	r2,-12(fp)
  815578:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  81557c:	e0bffb17 	ldw	r2,-20(fp)
  815580:	10c01104 	addi	r3,r2,68
  815584:	e0bff517 	ldw	r2,-44(fp)
  815588:	1887883a 	add	r3,r3,r2
  81558c:	e0bff917 	ldw	r2,-28(fp)
  815590:	1009883a 	mov	r4,r2
  815594:	180b883a 	mov	r5,r3
  815598:	e1bff717 	ldw	r6,-36(fp)
  81559c:	0808db00 	call	808db0 <memcpy>
      ptr   += n;
  8155a0:	e0fff717 	ldw	r3,-36(fp)
  8155a4:	e0bff917 	ldw	r2,-28(fp)
  8155a8:	10c5883a 	add	r2,r2,r3
  8155ac:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  8155b0:	e0fffd17 	ldw	r3,-12(fp)
  8155b4:	e0bff717 	ldw	r2,-36(fp)
  8155b8:	1885c83a 	sub	r2,r3,r2
  8155bc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8155c0:	e0fff517 	ldw	r3,-44(fp)
  8155c4:	e0bff717 	ldw	r2,-36(fp)
  8155c8:	1885883a 	add	r2,r3,r2
  8155cc:	10c1ffcc 	andi	r3,r2,2047
  8155d0:	e0bffb17 	ldw	r2,-20(fp)
  8155d4:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  8155d8:	e0bffd17 	ldw	r2,-12(fp)
  8155dc:	10800048 	cmpgei	r2,r2,1
  8155e0:	103fcc1e 	bne	r2,zero,815514 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  8155e4:	e0fff917 	ldw	r3,-28(fp)
  8155e8:	e0bffc17 	ldw	r2,-16(fp)
  8155ec:	1880301e 	bne	r3,r2,8156b0 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8155f0:	e0bffe17 	ldw	r2,-8(fp)
  8155f4:	1090000c 	andi	r2,r2,16384
  8155f8:	1004c03a 	cmpne	r2,r2,zero
  8155fc:	10002c1e 	bne	r2,zero,8156b0 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  815600:	008020b4 	movhi	r2,130
  815604:	10801c44 	addi	r2,r2,113
  815608:	10800003 	ldbu	r2,0(r2)
  81560c:	10803fcc 	andi	r2,r2,255
  815610:	10800058 	cmpnei	r2,r2,1
  815614:	1000161e 	bne	r2,zero,815670 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  815618:	e0bffb17 	ldw	r2,-20(fp)
  81561c:	10800c17 	ldw	r2,48(r2)
  815620:	e0bff015 	stw	r2,-64(fp)
  815624:	00800144 	movi	r2,5
  815628:	e0bff10d 	sth	r2,-60(fp)
  81562c:	00bfe0c4 	movi	r2,-125
  815630:	e0bff185 	stb	r2,-58(fp)
  815634:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  815638:	008020b4 	movhi	r2,130
  81563c:	10801c44 	addi	r2,r2,113
  815640:	10800003 	ldbu	r2,0(r2)
  815644:	10803fcc 	andi	r2,r2,255
  815648:	1005003a 	cmpeq	r2,r2,zero
  81564c:	1000111e 	bne	r2,zero,815694 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  815650:	e17ff10b 	ldhu	r5,-60(fp)
  815654:	e1bff183 	ldbu	r6,-58(fp)
  815658:	e1fff20b 	ldhu	r7,-56(fp)
  81565c:	e0bffa04 	addi	r2,fp,-24
  815660:	d8800015 	stw	r2,0(sp)
  815664:	e13ff017 	ldw	r4,-64(fp)
  815668:	080f5ac0 	call	80f5ac <OSFlagPend>
    return err;
  81566c:	00000906 	br	815694 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  815670:	e0bffb17 	ldw	r2,-20(fp)
  815674:	10c00d17 	ldw	r3,52(r2)
  815678:	e0bff617 	ldw	r2,-40(fp)
  81567c:	1880051e 	bne	r3,r2,815694 <altera_avalon_jtag_uart_read+0x1cc>
  815680:	e0bffb17 	ldw	r2,-20(fp)
  815684:	10c00917 	ldw	r3,36(r2)
  815688:	e0bffb17 	ldw	r2,-20(fp)
  81568c:	10800117 	ldw	r2,4(r2)
  815690:	18bff736 	bltu	r3,r2,815670 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  815694:	e0bffb17 	ldw	r2,-20(fp)
  815698:	10c00d17 	ldw	r3,52(r2)
  81569c:	e0bff617 	ldw	r2,-40(fp)
  8156a0:	18800326 	beq	r3,r2,8156b0 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8156a4:	e0bffd17 	ldw	r2,-12(fp)
  8156a8:	10800048 	cmpgei	r2,r2,1
  8156ac:	103f991e 	bne	r2,zero,815514 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  8156b0:	e0bffb17 	ldw	r2,-20(fp)
  8156b4:	11000a17 	ldw	r4,40(r2)
  8156b8:	08128e00 	call	8128e0 <OSSemPost>

  if (ptr != buffer)
  8156bc:	e0fff917 	ldw	r3,-28(fp)
  8156c0:	e0bffc17 	ldw	r2,-16(fp)
  8156c4:	18801926 	beq	r3,r2,81572c <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8156c8:	0005303a 	rdctl	r2,status
  8156cc:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8156d0:	e0ffef17 	ldw	r3,-68(fp)
  8156d4:	00bfff84 	movi	r2,-2
  8156d8:	1884703a 	and	r2,r3,r2
  8156dc:	1001703a 	wrctl	status,r2
  
  return context;
  8156e0:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8156e4:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8156e8:	e0bffb17 	ldw	r2,-20(fp)
  8156ec:	10800817 	ldw	r2,32(r2)
  8156f0:	10c00054 	ori	r3,r2,1
  8156f4:	e0bffb17 	ldw	r2,-20(fp)
  8156f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8156fc:	e0bffb17 	ldw	r2,-20(fp)
  815700:	10800017 	ldw	r2,0(r2)
  815704:	11000104 	addi	r4,r2,4
  815708:	e0bffb17 	ldw	r2,-20(fp)
  81570c:	10800817 	ldw	r2,32(r2)
  815710:	1007883a 	mov	r3,r2
  815714:	2005883a 	mov	r2,r4
  815718:	10c00035 	stwio	r3,0(r2)
  81571c:	e0bff817 	ldw	r2,-32(fp)
  815720:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815724:	e0bfee17 	ldw	r2,-72(fp)
  815728:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  81572c:	e0fff917 	ldw	r3,-28(fp)
  815730:	e0bffc17 	ldw	r2,-16(fp)
  815734:	18800526 	beq	r3,r2,81574c <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  815738:	e0fff917 	ldw	r3,-28(fp)
  81573c:	e0bffc17 	ldw	r2,-16(fp)
  815740:	1887c83a 	sub	r3,r3,r2
  815744:	e0ffff15 	stw	r3,-4(fp)
  815748:	00000906 	br	815770 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  81574c:	e0bffe17 	ldw	r2,-8(fp)
  815750:	1090000c 	andi	r2,r2,16384
  815754:	1005003a 	cmpeq	r2,r2,zero
  815758:	1000031e 	bne	r2,zero,815768 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  81575c:	00bffd44 	movi	r2,-11
  815760:	e0bfff15 	stw	r2,-4(fp)
  815764:	00000206 	br	815770 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  815768:	00bffec4 	movi	r2,-5
  81576c:	e0bfff15 	stw	r2,-4(fp)
  815770:	e0bfff17 	ldw	r2,-4(fp)
}
  815774:	e037883a 	mov	sp,fp
  815778:	dfc00117 	ldw	ra,4(sp)
  81577c:	df000017 	ldw	fp,0(sp)
  815780:	dec00204 	addi	sp,sp,8
  815784:	f800283a 	ret

00815788 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  815788:	deffeb04 	addi	sp,sp,-84
  81578c:	dfc01415 	stw	ra,80(sp)
  815790:	df001315 	stw	fp,76(sp)
  815794:	df001304 	addi	fp,sp,76
  815798:	e13ffb15 	stw	r4,-20(fp)
  81579c:	e17ffc15 	stw	r5,-16(fp)
  8157a0:	e1bffd15 	stw	r6,-12(fp)
  8157a4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8157a8:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8157ac:	e0bffc17 	ldw	r2,-16(fp)
  8157b0:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  8157b4:	e0bffb17 	ldw	r2,-20(fp)
  8157b8:	10800b17 	ldw	r2,44(r2)
  8157bc:	e0bff315 	stw	r2,-52(fp)
  8157c0:	e03ff40d 	sth	zero,-48(fp)
  8157c4:	e17ff40b 	ldhu	r5,-48(fp)
  8157c8:	e1bffa04 	addi	r6,fp,-24
  8157cc:	e13ff317 	ldw	r4,-52(fp)
  8157d0:	08124e80 	call	8124e8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8157d4:	00003a06 	br	8158c0 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8157d8:	e0bffb17 	ldw	r2,-20(fp)
  8157dc:	10800f17 	ldw	r2,60(r2)
  8157e0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  8157e4:	e0bffb17 	ldw	r2,-20(fp)
  8157e8:	10801017 	ldw	r2,64(r2)
  8157ec:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  8157f0:	e0fff917 	ldw	r3,-28(fp)
  8157f4:	e0bff817 	ldw	r2,-32(fp)
  8157f8:	1880062e 	bgeu	r3,r2,815814 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  8157fc:	e0fff817 	ldw	r3,-32(fp)
  815800:	e0bff917 	ldw	r2,-28(fp)
  815804:	1885c83a 	sub	r2,r3,r2
  815808:	10bfffc4 	addi	r2,r2,-1
  81580c:	e0bff715 	stw	r2,-36(fp)
  815810:	00000c06 	br	815844 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  815814:	e0bff817 	ldw	r2,-32(fp)
  815818:	1005003a 	cmpeq	r2,r2,zero
  81581c:	1000051e 	bne	r2,zero,815834 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  815820:	00820004 	movi	r2,2048
  815824:	e0fff917 	ldw	r3,-28(fp)
  815828:	10c5c83a 	sub	r2,r2,r3
  81582c:	e0bff715 	stw	r2,-36(fp)
  815830:	00000406 	br	815844 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  815834:	0081ffc4 	movi	r2,2047
  815838:	e0fff917 	ldw	r3,-28(fp)
  81583c:	10c5c83a 	sub	r2,r2,r3
  815840:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  815844:	e0bff717 	ldw	r2,-36(fp)
  815848:	1005003a 	cmpeq	r2,r2,zero
  81584c:	10001f1e 	bne	r2,zero,8158cc <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  815850:	e0fffd17 	ldw	r3,-12(fp)
  815854:	e0bff717 	ldw	r2,-36(fp)
  815858:	1880022e 	bgeu	r3,r2,815864 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  81585c:	e0bffd17 	ldw	r2,-12(fp)
  815860:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  815864:	e0bffb17 	ldw	r2,-20(fp)
  815868:	10c21104 	addi	r3,r2,2116
  81586c:	e0bff917 	ldw	r2,-28(fp)
  815870:	1885883a 	add	r2,r3,r2
  815874:	e0fffc17 	ldw	r3,-16(fp)
  815878:	1009883a 	mov	r4,r2
  81587c:	180b883a 	mov	r5,r3
  815880:	e1bff717 	ldw	r6,-36(fp)
  815884:	0808db00 	call	808db0 <memcpy>
      ptr   += n;
  815888:	e0fff717 	ldw	r3,-36(fp)
  81588c:	e0bffc17 	ldw	r2,-16(fp)
  815890:	10c5883a 	add	r2,r2,r3
  815894:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  815898:	e0fffd17 	ldw	r3,-12(fp)
  81589c:	e0bff717 	ldw	r2,-36(fp)
  8158a0:	1885c83a 	sub	r2,r3,r2
  8158a4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8158a8:	e0fff917 	ldw	r3,-28(fp)
  8158ac:	e0bff717 	ldw	r2,-36(fp)
  8158b0:	1885883a 	add	r2,r3,r2
  8158b4:	10c1ffcc 	andi	r3,r2,2047
  8158b8:	e0bffb17 	ldw	r2,-20(fp)
  8158bc:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8158c0:	e0bffd17 	ldw	r2,-12(fp)
  8158c4:	10800048 	cmpgei	r2,r2,1
  8158c8:	103fc31e 	bne	r2,zero,8157d8 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8158cc:	0005303a 	rdctl	r2,status
  8158d0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8158d4:	e0fff217 	ldw	r3,-56(fp)
  8158d8:	00bfff84 	movi	r2,-2
  8158dc:	1884703a 	and	r2,r3,r2
  8158e0:	1001703a 	wrctl	status,r2
  
  return context;
  8158e4:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8158e8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8158ec:	e0bffb17 	ldw	r2,-20(fp)
  8158f0:	10800817 	ldw	r2,32(r2)
  8158f4:	10c00094 	ori	r3,r2,2
  8158f8:	e0bffb17 	ldw	r2,-20(fp)
  8158fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  815900:	e0bffb17 	ldw	r2,-20(fp)
  815904:	10800017 	ldw	r2,0(r2)
  815908:	11000104 	addi	r4,r2,4
  81590c:	e0bffb17 	ldw	r2,-20(fp)
  815910:	10800817 	ldw	r2,32(r2)
  815914:	1007883a 	mov	r3,r2
  815918:	2005883a 	mov	r2,r4
  81591c:	10c00035 	stwio	r3,0(r2)
  815920:	e0bff617 	ldw	r2,-40(fp)
  815924:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815928:	e0bff117 	ldw	r2,-60(fp)
  81592c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  815930:	e0bffd17 	ldw	r2,-12(fp)
  815934:	10800050 	cmplti	r2,r2,1
  815938:	10002d1e 	bne	r2,zero,8159f0 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  81593c:	e0bffe17 	ldw	r2,-8(fp)
  815940:	1090000c 	andi	r2,r2,16384
  815944:	1004c03a 	cmpne	r2,r2,zero
  815948:	10002c1e 	bne	r2,zero,8159fc <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  81594c:	008020b4 	movhi	r2,130
  815950:	10801c44 	addi	r2,r2,113
  815954:	10800003 	ldbu	r2,0(r2)
  815958:	10803fcc 	andi	r2,r2,255
  81595c:	10800058 	cmpnei	r2,r2,1
  815960:	1000161e 	bne	r2,zero,8159bc <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  815964:	e0bffb17 	ldw	r2,-20(fp)
  815968:	10800c17 	ldw	r2,48(r2)
  81596c:	e0bfee15 	stw	r2,-72(fp)
  815970:	00800184 	movi	r2,6
  815974:	e0bfef0d 	sth	r2,-68(fp)
  815978:	00bfe0c4 	movi	r2,-125
  81597c:	e0bfef85 	stb	r2,-66(fp)
  815980:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  815984:	008020b4 	movhi	r2,130
  815988:	10801c44 	addi	r2,r2,113
  81598c:	10800003 	ldbu	r2,0(r2)
  815990:	10803fcc 	andi	r2,r2,255
  815994:	1005003a 	cmpeq	r2,r2,zero
  815998:	1000111e 	bne	r2,zero,8159e0 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  81599c:	e17fef0b 	ldhu	r5,-68(fp)
  8159a0:	e1bfef83 	ldbu	r6,-66(fp)
  8159a4:	e1fff00b 	ldhu	r7,-64(fp)
  8159a8:	e0bffa44 	addi	r2,fp,-23
  8159ac:	d8800015 	stw	r2,0(sp)
  8159b0:	e13fee17 	ldw	r4,-72(fp)
  8159b4:	080f5ac0 	call	80f5ac <OSFlagPend>
    return err;
  8159b8:	00000906 	br	8159e0 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8159bc:	e0bffb17 	ldw	r2,-20(fp)
  8159c0:	10c01017 	ldw	r3,64(r2)
  8159c4:	e0bff817 	ldw	r2,-32(fp)
  8159c8:	1880051e 	bne	r3,r2,8159e0 <altera_avalon_jtag_uart_write+0x258>
  8159cc:	e0bffb17 	ldw	r2,-20(fp)
  8159d0:	10c00917 	ldw	r3,36(r2)
  8159d4:	e0bffb17 	ldw	r2,-20(fp)
  8159d8:	10800117 	ldw	r2,4(r2)
  8159dc:	18bff736 	bltu	r3,r2,8159bc <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  8159e0:	e0bffb17 	ldw	r2,-20(fp)
  8159e4:	10c01017 	ldw	r3,64(r2)
  8159e8:	e0bff817 	ldw	r2,-32(fp)
  8159ec:	18800326 	beq	r3,r2,8159fc <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  8159f0:	e0bffd17 	ldw	r2,-12(fp)
  8159f4:	10800048 	cmpgei	r2,r2,1
  8159f8:	103fb11e 	bne	r2,zero,8158c0 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  8159fc:	e0bffb17 	ldw	r2,-20(fp)
  815a00:	11000b17 	ldw	r4,44(r2)
  815a04:	08128e00 	call	8128e0 <OSSemPost>

  if (ptr != start)
  815a08:	e0fffc17 	ldw	r3,-16(fp)
  815a0c:	e0bff517 	ldw	r2,-44(fp)
  815a10:	18800526 	beq	r3,r2,815a28 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  815a14:	e0fffc17 	ldw	r3,-16(fp)
  815a18:	e0bff517 	ldw	r2,-44(fp)
  815a1c:	1887c83a 	sub	r3,r3,r2
  815a20:	e0ffff15 	stw	r3,-4(fp)
  815a24:	00000906 	br	815a4c <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  815a28:	e0bffe17 	ldw	r2,-8(fp)
  815a2c:	1090000c 	andi	r2,r2,16384
  815a30:	1005003a 	cmpeq	r2,r2,zero
  815a34:	1000031e 	bne	r2,zero,815a44 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  815a38:	00bffd44 	movi	r2,-11
  815a3c:	e0bfff15 	stw	r2,-4(fp)
  815a40:	00000206 	br	815a4c <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  815a44:	00bffec4 	movi	r2,-5
  815a48:	e0bfff15 	stw	r2,-4(fp)
  815a4c:	e0bfff17 	ldw	r2,-4(fp)
}
  815a50:	e037883a 	mov	sp,fp
  815a54:	dfc00117 	ldw	ra,4(sp)
  815a58:	df000017 	ldw	fp,0(sp)
  815a5c:	dec00204 	addi	sp,sp,8
  815a60:	f800283a 	ret

00815a64 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  815a64:	defff904 	addi	sp,sp,-28
  815a68:	dfc00615 	stw	ra,24(sp)
  815a6c:	df000515 	stw	fp,20(sp)
  815a70:	df000504 	addi	fp,sp,20
  815a74:	e13ffe15 	stw	r4,-8(fp)
  815a78:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  815a7c:	e0bffe17 	ldw	r2,-8(fp)
  815a80:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  815a84:	e0bffe17 	ldw	r2,-8(fp)
  815a88:	10800104 	addi	r2,r2,4
  815a8c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815a90:	0005303a 	rdctl	r2,status
  815a94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815a98:	e0fffc17 	ldw	r3,-16(fp)
  815a9c:	00bfff84 	movi	r2,-2
  815aa0:	1884703a 	and	r2,r3,r2
  815aa4:	1001703a 	wrctl	status,r2
  
  return context;
  815aa8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  815aac:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  815ab0:	081b2c00 	call	81b2c0 <alt_tick>
  815ab4:	e0bffd17 	ldw	r2,-12(fp)
  815ab8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815abc:	e0bffb17 	ldw	r2,-20(fp)
  815ac0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  815ac4:	e037883a 	mov	sp,fp
  815ac8:	dfc00117 	ldw	ra,4(sp)
  815acc:	df000017 	ldw	fp,0(sp)
  815ad0:	dec00204 	addi	sp,sp,8
  815ad4:	f800283a 	ret

00815ad8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  815ad8:	defff904 	addi	sp,sp,-28
  815adc:	dfc00615 	stw	ra,24(sp)
  815ae0:	df000515 	stw	fp,20(sp)
  815ae4:	df000504 	addi	fp,sp,20
  815ae8:	e13ffc15 	stw	r4,-16(fp)
  815aec:	e17ffd15 	stw	r5,-12(fp)
  815af0:	e1bffe15 	stw	r6,-8(fp)
  815af4:	e1ffff15 	stw	r7,-4(fp)
  815af8:	e0bfff17 	ldw	r2,-4(fp)
  815afc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  815b00:	008020b4 	movhi	r2,130
  815b04:	10803e04 	addi	r2,r2,248
  815b08:	10800017 	ldw	r2,0(r2)
  815b0c:	1004c03a 	cmpne	r2,r2,zero
  815b10:	1000041e 	bne	r2,zero,815b24 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  815b14:	00c020b4 	movhi	r3,130
  815b18:	18c03e04 	addi	r3,r3,248
  815b1c:	e0bffb17 	ldw	r2,-20(fp)
  815b20:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  815b24:	e0bffc17 	ldw	r2,-16(fp)
  815b28:	10800104 	addi	r2,r2,4
  815b2c:	1007883a 	mov	r3,r2
  815b30:	008001c4 	movi	r2,7
  815b34:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  815b38:	e13ffe17 	ldw	r4,-8(fp)
  815b3c:	e17ffc17 	ldw	r5,-16(fp)
  815b40:	01802074 	movhi	r6,129
  815b44:	31969904 	addi	r6,r6,23140
  815b48:	081ada40 	call	81ada4 <alt_irq_register>
#endif  
}
  815b4c:	e037883a 	mov	sp,fp
  815b50:	dfc00117 	ldw	ra,4(sp)
  815b54:	df000017 	ldw	fp,0(sp)
  815b58:	dec00204 	addi	sp,sp,8
  815b5c:	f800283a 	ret

00815b60 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  815b60:	defffc04 	addi	sp,sp,-16
  815b64:	df000315 	stw	fp,12(sp)
  815b68:	df000304 	addi	fp,sp,12
  815b6c:	e13ffe15 	stw	r4,-8(fp)
  815b70:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  815b74:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  815b78:	e0bfff17 	ldw	r2,-4(fp)
  815b7c:	1004c03a 	cmpne	r2,r2,zero
  815b80:	1000061e 	bne	r2,zero,815b9c <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  815b84:	e0bffe17 	ldw	r2,-8(fp)
  815b88:	1007883a 	mov	r3,r2
  815b8c:	e0bffd03 	ldbu	r2,-12(fp)
  815b90:	10c4b03a 	or	r2,r2,r3
  815b94:	e0bffd05 	stb	r2,-12(fp)
  815b98:	00000806 	br	815bbc <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  815b9c:	e0bffe17 	ldw	r2,-8(fp)
  815ba0:	1007883a 	mov	r3,r2
  815ba4:	e0bffd03 	ldbu	r2,-12(fp)
  815ba8:	10c4b03a 	or	r2,r2,r3
  815bac:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  815bb0:	e0bffd03 	ldbu	r2,-12(fp)
  815bb4:	10801014 	ori	r2,r2,64
  815bb8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  815bbc:	e0fffd03 	ldbu	r3,-12(fp)
  815bc0:	00bfe004 	movi	r2,-128
  815bc4:	1884b03a 	or	r2,r3,r2
  815bc8:	10803fcc 	andi	r2,r2,255
}
  815bcc:	e037883a 	mov	sp,fp
  815bd0:	df000017 	ldw	fp,0(sp)
  815bd4:	dec00104 	addi	sp,sp,4
  815bd8:	f800283a 	ret

00815bdc <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  815bdc:	defffd04 	addi	sp,sp,-12
  815be0:	df000215 	stw	fp,8(sp)
  815be4:	df000204 	addi	fp,sp,8
  815be8:	e13ffe15 	stw	r4,-8(fp)
  815bec:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  815bf0:	e0bffe17 	ldw	r2,-8(fp)
  815bf4:	10800a17 	ldw	r2,40(r2)
  815bf8:	e0ffff03 	ldbu	r3,-4(fp)
  815bfc:	10c00025 	stbio	r3,0(r2)
}
  815c00:	e037883a 	mov	sp,fp
  815c04:	df000017 	ldw	fp,0(sp)
  815c08:	dec00104 	addi	sp,sp,4
  815c0c:	f800283a 	ret

00815c10 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  815c10:	defffe04 	addi	sp,sp,-8
  815c14:	df000115 	stw	fp,4(sp)
  815c18:	df000104 	addi	fp,sp,4
  815c1c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  815c20:	e0bfff17 	ldw	r2,-4(fp)
  815c24:	10800a17 	ldw	r2,40(r2)
  815c28:	1007883a 	mov	r3,r2
  815c2c:	00800044 	movi	r2,1
  815c30:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  815c34:	e037883a 	mov	sp,fp
  815c38:	df000017 	ldw	fp,0(sp)
  815c3c:	dec00104 	addi	sp,sp,4
  815c40:	f800283a 	ret

00815c44 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  815c44:	defffc04 	addi	sp,sp,-16
  815c48:	dfc00315 	stw	ra,12(sp)
  815c4c:	df000215 	stw	fp,8(sp)
  815c50:	df000204 	addi	fp,sp,8
  815c54:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  815c58:	e13fff17 	ldw	r4,-4(fp)
  815c5c:	014020b4 	movhi	r5,130
  815c60:	2978f704 	addi	r5,r5,-7204
  815c64:	081aba40 	call	81aba4 <alt_find_dev>
  815c68:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  815c6c:	e0bffe17 	ldw	r2,-8(fp)
}
  815c70:	e037883a 	mov	sp,fp
  815c74:	dfc00117 	ldw	ra,4(sp)
  815c78:	df000017 	ldw	fp,0(sp)
  815c7c:	dec00204 	addi	sp,sp,8
  815c80:	f800283a 	ret

00815c84 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  815c84:	defffb04 	addi	sp,sp,-20
  815c88:	df000415 	stw	fp,16(sp)
  815c8c:	df000404 	addi	fp,sp,16
  815c90:	e13ffd15 	stw	r4,-12(fp)
  815c94:	e17ffe15 	stw	r5,-8(fp)
  815c98:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  815c9c:	e03ffc15 	stw	zero,-16(fp)
  815ca0:	00000f06 	br	815ce0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  815ca4:	e0bffd17 	ldw	r2,-12(fp)
  815ca8:	10800a17 	ldw	r2,40(r2)
  815cac:	11000044 	addi	r4,r2,1
  815cb0:	e0fffc17 	ldw	r3,-16(fp)
  815cb4:	e0bffe17 	ldw	r2,-8(fp)
  815cb8:	1885883a 	add	r2,r3,r2
  815cbc:	10800003 	ldbu	r2,0(r2)
  815cc0:	10c03fcc 	andi	r3,r2,255
  815cc4:	18c0201c 	xori	r3,r3,128
  815cc8:	18ffe004 	addi	r3,r3,-128
  815ccc:	2005883a 	mov	r2,r4
  815cd0:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  815cd4:	e0bffc17 	ldw	r2,-16(fp)
  815cd8:	10800044 	addi	r2,r2,1
  815cdc:	e0bffc15 	stw	r2,-16(fp)
  815ce0:	e0fffc17 	ldw	r3,-16(fp)
  815ce4:	e0bfff17 	ldw	r2,-4(fp)
  815ce8:	18bfee36 	bltu	r3,r2,815ca4 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  815cec:	e037883a 	mov	sp,fp
  815cf0:	df000017 	ldw	fp,0(sp)
  815cf4:	dec00104 	addi	sp,sp,4
  815cf8:	f800283a 	ret

00815cfc <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  815cfc:	defffd04 	addi	sp,sp,-12
  815d00:	df000215 	stw	fp,8(sp)
  815d04:	df000204 	addi	fp,sp,8
  815d08:	e13ffe15 	stw	r4,-8(fp)
  815d0c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  815d10:	00000d06 	br	815d48 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  815d14:	e0bffe17 	ldw	r2,-8(fp)
  815d18:	10800a17 	ldw	r2,40(r2)
  815d1c:	11000044 	addi	r4,r2,1
  815d20:	e0bfff17 	ldw	r2,-4(fp)
  815d24:	10800003 	ldbu	r2,0(r2)
  815d28:	10c03fcc 	andi	r3,r2,255
  815d2c:	18c0201c 	xori	r3,r3,128
  815d30:	18ffe004 	addi	r3,r3,-128
  815d34:	2005883a 	mov	r2,r4
  815d38:	10c00025 	stbio	r3,0(r2)
		++ptr;
  815d3c:	e0bfff17 	ldw	r2,-4(fp)
  815d40:	10800044 	addi	r2,r2,1
  815d44:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  815d48:	e0bfff17 	ldw	r2,-4(fp)
  815d4c:	10800003 	ldbu	r2,0(r2)
  815d50:	10803fcc 	andi	r2,r2,255
  815d54:	1080201c 	xori	r2,r2,128
  815d58:	10bfe004 	addi	r2,r2,-128
  815d5c:	1004c03a 	cmpne	r2,r2,zero
  815d60:	103fec1e 	bne	r2,zero,815d14 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  815d64:	e037883a 	mov	sp,fp
  815d68:	df000017 	ldw	fp,0(sp)
  815d6c:	dec00104 	addi	sp,sp,4
  815d70:	f800283a 	ret

00815d74 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  815d74:	defffb04 	addi	sp,sp,-20
  815d78:	dfc00415 	stw	ra,16(sp)
  815d7c:	df000315 	stw	fp,12(sp)
  815d80:	df000304 	addi	fp,sp,12
  815d84:	e13ffd15 	stw	r4,-12(fp)
  815d88:	e17ffe15 	stw	r5,-8(fp)
  815d8c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  815d90:	e0bffd17 	ldw	r2,-12(fp)
  815d94:	10800017 	ldw	r2,0(r2)
  815d98:	1009883a 	mov	r4,r2
  815d9c:	e1bfff17 	ldw	r6,-4(fp)
  815da0:	e17ffe17 	ldw	r5,-8(fp)
  815da4:	0815c840 	call	815c84 <alt_up_character_lcd_write>
	return 0;
  815da8:	0005883a 	mov	r2,zero
}
  815dac:	e037883a 	mov	sp,fp
  815db0:	dfc00117 	ldw	ra,4(sp)
  815db4:	df000017 	ldw	fp,0(sp)
  815db8:	dec00204 	addi	sp,sp,8
  815dbc:	f800283a 	ret

00815dc0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  815dc0:	defff904 	addi	sp,sp,-28
  815dc4:	dfc00615 	stw	ra,24(sp)
  815dc8:	df000515 	stw	fp,20(sp)
  815dcc:	df000504 	addi	fp,sp,20
  815dd0:	e13ffc15 	stw	r4,-16(fp)
  815dd4:	e17ffd15 	stw	r5,-12(fp)
  815dd8:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  815ddc:	e0bffd17 	ldw	r2,-12(fp)
  815de0:	10800a28 	cmpgeui	r2,r2,40
  815de4:	1000031e 	bne	r2,zero,815df4 <alt_up_character_lcd_set_cursor_pos+0x34>
  815de8:	e0bffe17 	ldw	r2,-8(fp)
  815dec:	108000b0 	cmpltui	r2,r2,2
  815df0:	1000031e 	bne	r2,zero,815e00 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  815df4:	00bfffc4 	movi	r2,-1
  815df8:	e0bfff15 	stw	r2,-4(fp)
  815dfc:	00000806 	br	815e20 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  815e00:	e13ffd17 	ldw	r4,-12(fp)
  815e04:	e17ffe17 	ldw	r5,-8(fp)
  815e08:	0815b600 	call	815b60 <get_DDRAM_addr>
  815e0c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  815e10:	e17ffb03 	ldbu	r5,-20(fp)
  815e14:	e13ffc17 	ldw	r4,-16(fp)
  815e18:	0815bdc0 	call	815bdc <alt_up_character_lcd_send_cmd>
	return 0;
  815e1c:	e03fff15 	stw	zero,-4(fp)
  815e20:	e0bfff17 	ldw	r2,-4(fp)
}
  815e24:	e037883a 	mov	sp,fp
  815e28:	dfc00117 	ldw	ra,4(sp)
  815e2c:	df000017 	ldw	fp,0(sp)
  815e30:	dec00204 	addi	sp,sp,8
  815e34:	f800283a 	ret

00815e38 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  815e38:	defff904 	addi	sp,sp,-28
  815e3c:	dfc00615 	stw	ra,24(sp)
  815e40:	df000515 	stw	fp,20(sp)
  815e44:	df000504 	addi	fp,sp,20
  815e48:	e13ffc15 	stw	r4,-16(fp)
  815e4c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  815e50:	e0bffd17 	ldw	r2,-12(fp)
  815e54:	1005003a 	cmpeq	r2,r2,zero
  815e58:	10001e1e 	bne	r2,zero,815ed4 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  815e5c:	e0bffd17 	ldw	r2,-12(fp)
  815e60:	10800050 	cmplti	r2,r2,1
  815e64:	1000031e 	bne	r2,zero,815e74 <alt_up_character_lcd_shift_cursor+0x3c>
  815e68:	00800504 	movi	r2,20
  815e6c:	e0bfff05 	stb	r2,-4(fp)
  815e70:	00000206 	br	815e7c <alt_up_character_lcd_shift_cursor+0x44>
  815e74:	00c00404 	movi	r3,16
  815e78:	e0ffff05 	stb	r3,-4(fp)
  815e7c:	e0bfff03 	ldbu	r2,-4(fp)
  815e80:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  815e84:	e0fffd17 	ldw	r3,-12(fp)
  815e88:	e0fffe15 	stw	r3,-8(fp)
  815e8c:	e0fffe17 	ldw	r3,-8(fp)
  815e90:	1804403a 	cmpge	r2,r3,zero
  815e94:	1000031e 	bne	r2,zero,815ea4 <alt_up_character_lcd_shift_cursor+0x6c>
  815e98:	e0bffe17 	ldw	r2,-8(fp)
  815e9c:	0085c83a 	sub	r2,zero,r2
  815ea0:	e0bffe15 	stw	r2,-8(fp)
  815ea4:	e0fffe17 	ldw	r3,-8(fp)
  815ea8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  815eac:	00000306 	br	815ebc <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  815eb0:	e17ffb43 	ldbu	r5,-19(fp)
  815eb4:	e13ffc17 	ldw	r4,-16(fp)
  815eb8:	0815bdc0 	call	815bdc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  815ebc:	e0bffb03 	ldbu	r2,-20(fp)
  815ec0:	10bfffc4 	addi	r2,r2,-1
  815ec4:	e0bffb05 	stb	r2,-20(fp)
  815ec8:	e0bffb03 	ldbu	r2,-20(fp)
  815ecc:	10803fd8 	cmpnei	r2,r2,255
  815ed0:	103ff71e 	bne	r2,zero,815eb0 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  815ed4:	e037883a 	mov	sp,fp
  815ed8:	dfc00117 	ldw	ra,4(sp)
  815edc:	df000017 	ldw	fp,0(sp)
  815ee0:	dec00204 	addi	sp,sp,8
  815ee4:	f800283a 	ret

00815ee8 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  815ee8:	defff904 	addi	sp,sp,-28
  815eec:	dfc00615 	stw	ra,24(sp)
  815ef0:	df000515 	stw	fp,20(sp)
  815ef4:	df000504 	addi	fp,sp,20
  815ef8:	e13ffc15 	stw	r4,-16(fp)
  815efc:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  815f00:	e0bffd17 	ldw	r2,-12(fp)
  815f04:	1005003a 	cmpeq	r2,r2,zero
  815f08:	10001e1e 	bne	r2,zero,815f84 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  815f0c:	e0bffd17 	ldw	r2,-12(fp)
  815f10:	10800050 	cmplti	r2,r2,1
  815f14:	1000031e 	bne	r2,zero,815f24 <alt_up_character_lcd_shift_display+0x3c>
  815f18:	00800704 	movi	r2,28
  815f1c:	e0bfff05 	stb	r2,-4(fp)
  815f20:	00000206 	br	815f2c <alt_up_character_lcd_shift_display+0x44>
  815f24:	00c00604 	movi	r3,24
  815f28:	e0ffff05 	stb	r3,-4(fp)
  815f2c:	e0bfff03 	ldbu	r2,-4(fp)
  815f30:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  815f34:	e0fffd17 	ldw	r3,-12(fp)
  815f38:	e0fffe15 	stw	r3,-8(fp)
  815f3c:	e0fffe17 	ldw	r3,-8(fp)
  815f40:	1804403a 	cmpge	r2,r3,zero
  815f44:	1000031e 	bne	r2,zero,815f54 <alt_up_character_lcd_shift_display+0x6c>
  815f48:	e0bffe17 	ldw	r2,-8(fp)
  815f4c:	0085c83a 	sub	r2,zero,r2
  815f50:	e0bffe15 	stw	r2,-8(fp)
  815f54:	e0fffe17 	ldw	r3,-8(fp)
  815f58:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  815f5c:	00000306 	br	815f6c <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  815f60:	e17ffb43 	ldbu	r5,-19(fp)
  815f64:	e13ffc17 	ldw	r4,-16(fp)
  815f68:	0815bdc0 	call	815bdc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  815f6c:	e0bffb03 	ldbu	r2,-20(fp)
  815f70:	10bfffc4 	addi	r2,r2,-1
  815f74:	e0bffb05 	stb	r2,-20(fp)
  815f78:	e0bffb03 	ldbu	r2,-20(fp)
  815f7c:	10803fd8 	cmpnei	r2,r2,255
  815f80:	103ff71e 	bne	r2,zero,815f60 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  815f84:	e037883a 	mov	sp,fp
  815f88:	dfc00117 	ldw	ra,4(sp)
  815f8c:	df000017 	ldw	fp,0(sp)
  815f90:	dec00204 	addi	sp,sp,8
  815f94:	f800283a 	ret

00815f98 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  815f98:	defff904 	addi	sp,sp,-28
  815f9c:	dfc00615 	stw	ra,24(sp)
  815fa0:	df000515 	stw	fp,20(sp)
  815fa4:	df000504 	addi	fp,sp,20
  815fa8:	e13ffc15 	stw	r4,-16(fp)
  815fac:	e17ffd15 	stw	r5,-12(fp)
  815fb0:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  815fb4:	e0bffd17 	ldw	r2,-12(fp)
  815fb8:	10800a28 	cmpgeui	r2,r2,40
  815fbc:	1000031e 	bne	r2,zero,815fcc <alt_up_character_lcd_erase_pos+0x34>
  815fc0:	e0bffe17 	ldw	r2,-8(fp)
  815fc4:	108000b0 	cmpltui	r2,r2,2
  815fc8:	1000031e 	bne	r2,zero,815fd8 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  815fcc:	00bfffc4 	movi	r2,-1
  815fd0:	e0bfff15 	stw	r2,-4(fp)
  815fd4:	00000e06 	br	816010 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  815fd8:	e13ffd17 	ldw	r4,-12(fp)
  815fdc:	e17ffe17 	ldw	r5,-8(fp)
  815fe0:	0815b600 	call	815b60 <get_DDRAM_addr>
  815fe4:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  815fe8:	e17ffb03 	ldbu	r5,-20(fp)
  815fec:	e13ffc17 	ldw	r4,-16(fp)
  815ff0:	0815bdc0 	call	815bdc <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	// NEM Bug Fix. Next loc sends | to the LCD instead of erase
	// Changed to send a simple space. Not really erase but good enough
	//IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, ' ');
  815ff4:	e0bffc17 	ldw	r2,-16(fp)
  815ff8:	10800a17 	ldw	r2,40(r2)
  815ffc:	10800044 	addi	r2,r2,1
  816000:	1007883a 	mov	r3,r2
  816004:	00800804 	movi	r2,32
  816008:	18800025 	stbio	r2,0(r3)
	// END NEM Bug Fixs
	return 0;
  81600c:	e03fff15 	stw	zero,-4(fp)
  816010:	e0bfff17 	ldw	r2,-4(fp)
}
  816014:	e037883a 	mov	sp,fp
  816018:	dfc00117 	ldw	ra,4(sp)
  81601c:	df000017 	ldw	fp,0(sp)
  816020:	dec00204 	addi	sp,sp,8
  816024:	f800283a 	ret

00816028 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  816028:	defffd04 	addi	sp,sp,-12
  81602c:	dfc00215 	stw	ra,8(sp)
  816030:	df000115 	stw	fp,4(sp)
  816034:	df000104 	addi	fp,sp,4
  816038:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  81603c:	e13fff17 	ldw	r4,-4(fp)
  816040:	01400304 	movi	r5,12
  816044:	0815bdc0 	call	815bdc <alt_up_character_lcd_send_cmd>
}
  816048:	e037883a 	mov	sp,fp
  81604c:	dfc00117 	ldw	ra,4(sp)
  816050:	df000017 	ldw	fp,0(sp)
  816054:	dec00204 	addi	sp,sp,8
  816058:	f800283a 	ret

0081605c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  81605c:	defffd04 	addi	sp,sp,-12
  816060:	dfc00215 	stw	ra,8(sp)
  816064:	df000115 	stw	fp,4(sp)
  816068:	df000104 	addi	fp,sp,4
  81606c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  816070:	e13fff17 	ldw	r4,-4(fp)
  816074:	014003c4 	movi	r5,15
  816078:	0815bdc0 	call	815bdc <alt_up_character_lcd_send_cmd>
}
  81607c:	e037883a 	mov	sp,fp
  816080:	dfc00117 	ldw	ra,4(sp)
  816084:	df000017 	ldw	fp,0(sp)
  816088:	dec00204 	addi	sp,sp,8
  81608c:	f800283a 	ret

00816090 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
  816090:	defffd04 	addi	sp,sp,-12
  816094:	df000215 	stw	fp,8(sp)
  816098:	df000204 	addi	fp,sp,8
  81609c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  8160a0:	e0bfff17 	ldw	r2,-4(fp)
  8160a4:	10800a17 	ldw	r2,40(r2)
  8160a8:	10800104 	addi	r2,r2,4
  8160ac:	10800037 	ldwio	r2,0(r2)
  8160b0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
  8160b4:	e0bffe17 	ldw	r2,-8(fp)
  8160b8:	10800054 	ori	r2,r2,1
  8160bc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  8160c0:	e0bfff17 	ldw	r2,-4(fp)
  8160c4:	10800a17 	ldw	r2,40(r2)
  8160c8:	10800104 	addi	r2,r2,4
  8160cc:	e0fffe17 	ldw	r3,-8(fp)
  8160d0:	10c00035 	stwio	r3,0(r2)
}
  8160d4:	e037883a 	mov	sp,fp
  8160d8:	df000017 	ldw	fp,0(sp)
  8160dc:	dec00104 	addi	sp,sp,4
  8160e0:	f800283a 	ret

008160e4 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
  8160e4:	defffd04 	addi	sp,sp,-12
  8160e8:	df000215 	stw	fp,8(sp)
  8160ec:	df000204 	addi	fp,sp,8
  8160f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  8160f4:	e0bfff17 	ldw	r2,-4(fp)
  8160f8:	10800a17 	ldw	r2,40(r2)
  8160fc:	10800104 	addi	r2,r2,4
  816100:	10800037 	ldwio	r2,0(r2)
  816104:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
  816108:	e0fffe17 	ldw	r3,-8(fp)
  81610c:	00bfff84 	movi	r2,-2
  816110:	1884703a 	and	r2,r3,r2
  816114:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  816118:	e0bfff17 	ldw	r2,-4(fp)
  81611c:	10800a17 	ldw	r2,40(r2)
  816120:	10800104 	addi	r2,r2,4
  816124:	e0fffe17 	ldw	r3,-8(fp)
  816128:	10c00035 	stwio	r3,0(r2)
}
  81612c:	e037883a 	mov	sp,fp
  816130:	df000017 	ldw	fp,0(sp)
  816134:	dec00104 	addi	sp,sp,4
  816138:	f800283a 	ret

0081613c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
  81613c:	defffd04 	addi	sp,sp,-12
  816140:	df000215 	stw	fp,8(sp)
  816144:	df000204 	addi	fp,sp,8
  816148:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
  81614c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
  816150:	e0bfff17 	ldw	r2,-4(fp)
  816154:	10800a17 	ldw	r2,40(r2)
  816158:	10800084 	addi	r2,r2,2
  81615c:	1080002b 	ldhuio	r2,0(r2)
  816160:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
  816164:	e0bffe0b 	ldhu	r2,-8(fp)
}
  816168:	e037883a 	mov	sp,fp
  81616c:	df000017 	ldw	fp,0(sp)
  816170:	dec00104 	addi	sp,sp,4
  816174:	f800283a 	ret

00816178 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
  816178:	defffd04 	addi	sp,sp,-12
  81617c:	df000215 	stw	fp,8(sp)
  816180:	df000204 	addi	fp,sp,8
  816184:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  816188:	e0bfff17 	ldw	r2,-4(fp)
  81618c:	10800a17 	ldw	r2,40(r2)
  816190:	10800104 	addi	r2,r2,4
  816194:	10800037 	ldwio	r2,0(r2)
  816198:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
  81619c:	e0bffe17 	ldw	r2,-8(fp)
  8161a0:	10bfffec 	andhi	r2,r2,65535
  8161a4:	1004d43a 	srli	r2,r2,16
}
  8161a8:	e037883a 	mov	sp,fp
  8161ac:	df000017 	ldw	fp,0(sp)
  8161b0:	dec00104 	addi	sp,sp,4
  8161b4:	f800283a 	ret

008161b8 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
  8161b8:	defffc04 	addi	sp,sp,-16
  8161bc:	df000315 	stw	fp,12(sp)
  8161c0:	df000304 	addi	fp,sp,12
  8161c4:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
  8161c8:	e0bffe17 	ldw	r2,-8(fp)
  8161cc:	1080800c 	andi	r2,r2,512
  8161d0:	1004d27a 	srli	r2,r2,9
  8161d4:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
  8161d8:	e0bffd17 	ldw	r2,-12(fp)
  8161dc:	1005003a 	cmpeq	r2,r2,zero
  8161e0:	1000031e 	bne	r2,zero,8161f0 <alt_up_rs232_check_parity+0x38>
  8161e4:	00bfffc4 	movi	r2,-1
  8161e8:	e0bfff15 	stw	r2,-4(fp)
  8161ec:	00000106 	br	8161f4 <alt_up_rs232_check_parity+0x3c>
  8161f0:	e03fff15 	stw	zero,-4(fp)
  8161f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8161f8:	e037883a 	mov	sp,fp
  8161fc:	df000017 	ldw	fp,0(sp)
  816200:	dec00104 	addi	sp,sp,4
  816204:	f800283a 	ret

00816208 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
  816208:	defffc04 	addi	sp,sp,-16
  81620c:	df000315 	stw	fp,12(sp)
  816210:	df000304 	addi	fp,sp,12
  816214:	e13ffe15 	stw	r4,-8(fp)
  816218:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  81621c:	e0bffe17 	ldw	r2,-8(fp)
  816220:	10800a17 	ldw	r2,40(r2)
  816224:	10800037 	ldwio	r2,0(r2)
  816228:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
  81622c:	e0bffe17 	ldw	r2,-8(fp)
  816230:	10800a17 	ldw	r2,40(r2)
  816234:	e0ffff03 	ldbu	r3,-4(fp)
  816238:	10c00035 	stwio	r3,0(r2)
	return 0;
  81623c:	0005883a 	mov	r2,zero
}
  816240:	e037883a 	mov	sp,fp
  816244:	df000017 	ldw	fp,0(sp)
  816248:	dec00104 	addi	sp,sp,4
  81624c:	f800283a 	ret

00816250 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
  816250:	defffa04 	addi	sp,sp,-24
  816254:	dfc00515 	stw	ra,20(sp)
  816258:	df000415 	stw	fp,16(sp)
  81625c:	df000404 	addi	fp,sp,16
  816260:	e13ffd15 	stw	r4,-12(fp)
  816264:	e17ffe15 	stw	r5,-8(fp)
  816268:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  81626c:	e0bffd17 	ldw	r2,-12(fp)
  816270:	10800a17 	ldw	r2,40(r2)
  816274:	10800037 	ldwio	r2,0(r2)
  816278:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
  81627c:	e0bffc17 	ldw	r2,-16(fp)
  816280:	1007883a 	mov	r3,r2
  816284:	e0bffe17 	ldw	r2,-8(fp)
  816288:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
  81628c:	e13ffc17 	ldw	r4,-16(fp)
  816290:	08161b80 	call	8161b8 <alt_up_rs232_check_parity>
  816294:	1007883a 	mov	r3,r2
  816298:	e0bfff17 	ldw	r2,-4(fp)
  81629c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
  8162a0:	e0bffc17 	ldw	r2,-16(fp)
  8162a4:	10a0000c 	andi	r2,r2,32768
  8162a8:	1004d3fa 	srli	r2,r2,15
  8162ac:	10bfffc4 	addi	r2,r2,-1
}
  8162b0:	e037883a 	mov	sp,fp
  8162b4:	dfc00117 	ldw	ra,4(sp)
  8162b8:	df000017 	ldw	fp,0(sp)
  8162bc:	dec00204 	addi	sp,sp,8
  8162c0:	f800283a 	ret

008162c4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
  8162c4:	defff804 	addi	sp,sp,-32
  8162c8:	dfc00715 	stw	ra,28(sp)
  8162cc:	df000615 	stw	fp,24(sp)
  8162d0:	df000604 	addi	fp,sp,24
  8162d4:	e13ffd15 	stw	r4,-12(fp)
  8162d8:	e17ffe15 	stw	r5,-8(fp)
  8162dc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  8162e0:	e0bffd17 	ldw	r2,-12(fp)
  8162e4:	10800017 	ldw	r2,0(r2)
  8162e8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
  8162ec:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
  8162f0:	00000c06 	br	816324 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
  8162f4:	e17ffe17 	ldw	r5,-8(fp)
  8162f8:	e0bffe17 	ldw	r2,-8(fp)
  8162fc:	10800044 	addi	r2,r2,1
  816300:	e0bffe15 	stw	r2,-8(fp)
  816304:	e1bffc04 	addi	r6,fp,-16
  816308:	e13ffb17 	ldw	r4,-20(fp)
  81630c:	08162500 	call	816250 <alt_up_rs232_read_data>
  816310:	1004c03a 	cmpne	r2,r2,zero
  816314:	1000091e 	bne	r2,zero,81633c <alt_up_rs232_read_fd+0x78>
			count++;
  816318:	e0bffa17 	ldw	r2,-24(fp)
  81631c:	10800044 	addi	r2,r2,1
  816320:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
  816324:	e0bfff17 	ldw	r2,-4(fp)
  816328:	10bfffc4 	addi	r2,r2,-1
  81632c:	e0bfff15 	stw	r2,-4(fp)
  816330:	e0bfff17 	ldw	r2,-4(fp)
  816334:	10bfffd8 	cmpnei	r2,r2,-1
  816338:	103fee1e 	bne	r2,zero,8162f4 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
  81633c:	e0bffa17 	ldw	r2,-24(fp)
}
  816340:	e037883a 	mov	sp,fp
  816344:	dfc00117 	ldw	ra,4(sp)
  816348:	df000017 	ldw	fp,0(sp)
  81634c:	dec00204 	addi	sp,sp,8
  816350:	f800283a 	ret

00816354 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
  816354:	defff904 	addi	sp,sp,-28
  816358:	dfc00615 	stw	ra,24(sp)
  81635c:	df000515 	stw	fp,20(sp)
  816360:	df000504 	addi	fp,sp,20
  816364:	e13ffd15 	stw	r4,-12(fp)
  816368:	e17ffe15 	stw	r5,-8(fp)
  81636c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  816370:	e0bffd17 	ldw	r2,-12(fp)
  816374:	10800017 	ldw	r2,0(r2)
  816378:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
  81637c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
  816380:	00000d06 	br	8163b8 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
  816384:	e0bffe17 	ldw	r2,-8(fp)
  816388:	10800003 	ldbu	r2,0(r2)
  81638c:	11403fcc 	andi	r5,r2,255
  816390:	e13ffc17 	ldw	r4,-16(fp)
  816394:	08162080 	call	816208 <alt_up_rs232_write_data>
  816398:	1004c03a 	cmpne	r2,r2,zero
  81639c:	10000c1e 	bne	r2,zero,8163d0 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
  8163a0:	e0bffb17 	ldw	r2,-20(fp)
  8163a4:	10800044 	addi	r2,r2,1
  8163a8:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
  8163ac:	e0bffe17 	ldw	r2,-8(fp)
  8163b0:	10800044 	addi	r2,r2,1
  8163b4:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
  8163b8:	e0bfff17 	ldw	r2,-4(fp)
  8163bc:	10bfffc4 	addi	r2,r2,-1
  8163c0:	e0bfff15 	stw	r2,-4(fp)
  8163c4:	e0bfff17 	ldw	r2,-4(fp)
  8163c8:	10bfffd8 	cmpnei	r2,r2,-1
  8163cc:	103fed1e 	bne	r2,zero,816384 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
  8163d0:	e0bffb17 	ldw	r2,-20(fp)
}
  8163d4:	e037883a 	mov	sp,fp
  8163d8:	dfc00117 	ldw	ra,4(sp)
  8163dc:	df000017 	ldw	fp,0(sp)
  8163e0:	dec00204 	addi	sp,sp,8
  8163e4:	f800283a 	ret

008163e8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
  8163e8:	defffc04 	addi	sp,sp,-16
  8163ec:	dfc00315 	stw	ra,12(sp)
  8163f0:	df000215 	stw	fp,8(sp)
  8163f4:	df000204 	addi	fp,sp,8
  8163f8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
  8163fc:	e13fff17 	ldw	r4,-4(fp)
  816400:	014020b4 	movhi	r5,130
  816404:	2978f704 	addi	r5,r5,-7204
  816408:	081aba40 	call	81aba4 <alt_find_dev>
  81640c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  816410:	e0bffe17 	ldw	r2,-8(fp)
}
  816414:	e037883a 	mov	sp,fp
  816418:	dfc00117 	ldw	ra,4(sp)
  81641c:	df000017 	ldw	fp,0(sp)
  816420:	dec00204 	addi	sp,sp,8
  816424:	f800283a 	ret

00816428 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
  816428:	defffa04 	addi	sp,sp,-24
  81642c:	dfc00515 	stw	ra,20(sp)
  816430:	df000415 	stw	fp,16(sp)
  816434:	df000404 	addi	fp,sp,16
  816438:	e13ffe15 	stw	r4,-8(fp)
  81643c:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
  816440:	e03ffd15 	stw	zero,-12(fp)
    
    if (alt_up_sd_card_is_Present())
  816444:	08192480 	call	819248 <alt_up_sd_card_is_Present>
  816448:	1005003a 	cmpeq	r2,r2,zero
  81644c:	1000221e 	bne	r2,zero,8164d8 <Write_Sector_Data+0xb0>
    {
        short int reg_state = 0xff;
  816450:	00803fc4 	movi	r2,255
  816454:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  816458:	d0a74817 	ldw	r2,-25312(gp)
  81645c:	1009883a 	mov	r4,r2
  816460:	e0fffe17 	ldw	r3,-8(fp)
  816464:	e0bfff17 	ldw	r2,-4(fp)
  816468:	1885883a 	add	r2,r3,r2
  81646c:	1006927a 	slli	r3,r2,9
  816470:	2005883a 	mov	r2,r4
  816474:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  816478:	d0a74717 	ldw	r2,-25316(gp)
  81647c:	1007883a 	mov	r3,r2
  816480:	00800604 	movi	r2,24
  816484:	1880002d 	sthio	r2,0(r3)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  816488:	d0a74417 	ldw	r2,-25328(gp)
  81648c:	1080002b 	ldhuio	r2,0(r2)
  816490:	e0bffc0d 	sth	r2,-16(fp)
        } while ((reg_state & 0x04)!=0);
  816494:	e0bffc0b 	ldhu	r2,-16(fp)
  816498:	10bfffcc 	andi	r2,r2,65535
  81649c:	1080010c 	andi	r2,r2,4
  8164a0:	1004c03a 	cmpne	r2,r2,zero
  8164a4:	103ff81e 	bne	r2,zero,816488 <Write_Sector_Data+0x60>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
  8164a8:	e0bffc0b 	ldhu	r2,-16(fp)
  8164ac:	10bfffcc 	andi	r2,r2,65535
  8164b0:	1080040c 	andi	r2,r2,16
  8164b4:	1004c03a 	cmpne	r2,r2,zero
  8164b8:	1000071e 	bne	r2,zero,8164d8 <Write_Sector_Data+0xb0>
        {
            result = true;
  8164bc:	00800044 	movi	r2,1
  8164c0:	e0bffd15 	stw	r2,-12(fp)
            current_sector_modified = false;
  8164c4:	d0274d15 	stw	zero,-25292(gp)
            current_sector_index = sector_index+partition_offset;
  8164c8:	e0fffe17 	ldw	r3,-8(fp)
  8164cc:	e0bfff17 	ldw	r2,-4(fp)
  8164d0:	1885883a 	add	r2,r3,r2
  8164d4:	d0a74e15 	stw	r2,-25288(gp)
        }
    }
    return result;
  8164d8:	e0bffd17 	ldw	r2,-12(fp)
}
  8164dc:	e037883a 	mov	sp,fp
  8164e0:	dfc00117 	ldw	ra,4(sp)
  8164e4:	df000017 	ldw	fp,0(sp)
  8164e8:	dec00204 	addi	sp,sp,8
  8164ec:	f800283a 	ret

008164f0 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
  8164f0:	defffd04 	addi	sp,sp,-12
  8164f4:	dfc00215 	stw	ra,8(sp)
  8164f8:	df000115 	stw	fp,4(sp)
  8164fc:	df000104 	addi	fp,sp,4
    bool result = true;
  816500:	00800044 	movi	r2,1
  816504:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
  816508:	d0a74d17 	ldw	r2,-25292(gp)
  81650c:	1005003a 	cmpeq	r2,r2,zero
  816510:	1000051e 	bne	r2,zero,816528 <Save_Modified_Sector+0x38>
    {
        result = Write_Sector_Data(current_sector_index, 0);
  816514:	d0a74e17 	ldw	r2,-25288(gp)
  816518:	1009883a 	mov	r4,r2
  81651c:	000b883a 	mov	r5,zero
  816520:	08164280 	call	816428 <Write_Sector_Data>
  816524:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
  816528:	e0bfff17 	ldw	r2,-4(fp)
}
  81652c:	e037883a 	mov	sp,fp
  816530:	dfc00117 	ldw	ra,4(sp)
  816534:	df000017 	ldw	fp,0(sp)
  816538:	dec00204 	addi	sp,sp,8
  81653c:	f800283a 	ret

00816540 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  816540:	defff904 	addi	sp,sp,-28
  816544:	dfc00615 	stw	ra,24(sp)
  816548:	df000515 	stw	fp,20(sp)
  81654c:	df000504 	addi	fp,sp,20
  816550:	e13ffd15 	stw	r4,-12(fp)
  816554:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  816558:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
  81655c:	08192480 	call	819248 <alt_up_sd_card_is_Present>
  816560:	1005003a 	cmpeq	r2,r2,zero
  816564:	10002d1e 	bne	r2,zero,81661c <Read_Sector_Data+0xdc>
	{
		short int reg_state = 0xff;
  816568:	00803fc4 	movi	r2,255
  81656c:	e0bffb0d 	sth	r2,-20(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
  816570:	d0a74d17 	ldw	r2,-25292(gp)
  816574:	1005003a 	cmpeq	r2,r2,zero
  816578:	1000081e 	bne	r2,zero,81659c <Read_Sector_Data+0x5c>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
  81657c:	d0a74e17 	ldw	r2,-25288(gp)
  816580:	1009883a 	mov	r4,r2
  816584:	000b883a 	mov	r5,zero
  816588:	08164280 	call	816428 <Write_Sector_Data>
  81658c:	1004c03a 	cmpne	r2,r2,zero
  816590:	1000021e 	bne	r2,zero,81659c <Read_Sector_Data+0x5c>
            {
                return false;
  816594:	e03fff15 	stw	zero,-4(fp)
  816598:	00002206 	br	816624 <Read_Sector_Data+0xe4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  81659c:	d0a74817 	ldw	r2,-25312(gp)
  8165a0:	1009883a 	mov	r4,r2
  8165a4:	e0fffd17 	ldw	r3,-12(fp)
  8165a8:	e0bffe17 	ldw	r2,-8(fp)
  8165ac:	1885883a 	add	r2,r3,r2
  8165b0:	1006927a 	slli	r3,r2,9
  8165b4:	2005883a 	mov	r2,r4
  8165b8:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  8165bc:	d0a74717 	ldw	r2,-25316(gp)
  8165c0:	1007883a 	mov	r3,r2
  8165c4:	00800444 	movi	r2,17
  8165c8:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  8165cc:	d0a74417 	ldw	r2,-25328(gp)
  8165d0:	1080002b 	ldhuio	r2,0(r2)
  8165d4:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04)!=0);
  8165d8:	e0bffb0b 	ldhu	r2,-20(fp)
  8165dc:	10bfffcc 	andi	r2,r2,65535
  8165e0:	1080010c 	andi	r2,r2,4
  8165e4:	1004c03a 	cmpne	r2,r2,zero
  8165e8:	103ff81e 	bne	r2,zero,8165cc <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
  8165ec:	e0bffb0b 	ldhu	r2,-20(fp)
  8165f0:	10bfffcc 	andi	r2,r2,65535
  8165f4:	1080040c 	andi	r2,r2,16
  8165f8:	1004c03a 	cmpne	r2,r2,zero
  8165fc:	1000071e 	bne	r2,zero,81661c <Read_Sector_Data+0xdc>
		{
			result = true;
  816600:	00800044 	movi	r2,1
  816604:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
  816608:	d0274d15 	stw	zero,-25292(gp)
            current_sector_index = sector_index+partition_offset;
  81660c:	e0fffd17 	ldw	r3,-12(fp)
  816610:	e0bffe17 	ldw	r2,-8(fp)
  816614:	1885883a 	add	r2,r3,r2
  816618:	d0a74e15 	stw	r2,-25288(gp)
		}
	}
	return result;
  81661c:	e0bffc17 	ldw	r2,-16(fp)
  816620:	e0bfff15 	stw	r2,-4(fp)
  816624:	e0bfff17 	ldw	r2,-4(fp)
}
  816628:	e037883a 	mov	sp,fp
  81662c:	dfc00117 	ldw	ra,4(sp)
  816630:	df000017 	ldw	fp,0(sp)
  816634:	dec00204 	addi	sp,sp,8
  816638:	f800283a 	ret

0081663c <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  81663c:	defffa04 	addi	sp,sp,-24
  816640:	dfc00515 	stw	ra,20(sp)
  816644:	df000415 	stw	fp,16(sp)
  816648:	df000404 	addi	fp,sp,16
  81664c:	e13ffd15 	stw	r4,-12(fp)
  816650:	e17ffe15 	stw	r5,-8(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  816654:	e0bffd17 	ldw	r2,-12(fp)
  816658:	1006d23a 	srli	r3,r2,8
  81665c:	d0a74a17 	ldw	r2,-25304(gp)
  816660:	1885883a 	add	r2,r3,r2
  816664:	e0bffc15 	stw	r2,-16(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  816668:	008020f4 	movhi	r2,131
  81666c:	10974c04 	addi	r2,r2,23856
  816670:	10c01117 	ldw	r3,68(r2)
  816674:	e0bffc17 	ldw	r2,-16(fp)
  816678:	10c5883a 	add	r2,r2,r3
  81667c:	e0bffc15 	stw	r2,-16(fp)
     
    if (sector_index != current_sector_index)
  816680:	d0e74e17 	ldw	r3,-25288(gp)
  816684:	e0bffc17 	ldw	r2,-16(fp)
  816688:	10c00726 	beq	r2,r3,8166a8 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  81668c:	e13ffc17 	ldw	r4,-16(fp)
  816690:	000b883a 	mov	r5,zero
  816694:	08165400 	call	816540 <Read_Sector_Data>
  816698:	1004c03a 	cmpne	r2,r2,zero
  81669c:	1000021e 	bne	r2,zero,8166a8 <get_cluster_flag+0x6c>
        {
            return false;
  8166a0:	e03fff15 	stw	zero,-4(fp)
  8166a4:	00000d06 	br	8166dc <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  8166a8:	d0a74c17 	ldw	r2,-25296(gp)
  8166ac:	10800a17 	ldw	r2,40(r2)
  8166b0:	1007883a 	mov	r3,r2
  8166b4:	e0bffd17 	ldw	r2,-12(fp)
  8166b8:	10803fcc 	andi	r2,r2,255
  8166bc:	1085883a 	add	r2,r2,r2
  8166c0:	1885883a 	add	r2,r3,r2
  8166c4:	1080002b 	ldhuio	r2,0(r2)
  8166c8:	1007883a 	mov	r3,r2
  8166cc:	e0bffe17 	ldw	r2,-8(fp)
  8166d0:	10c0000d 	sth	r3,0(r2)
    return true;
  8166d4:	00800044 	movi	r2,1
  8166d8:	e0bfff15 	stw	r2,-4(fp)
  8166dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8166e0:	e037883a 	mov	sp,fp
  8166e4:	dfc00117 	ldw	ra,4(sp)
  8166e8:	df000017 	ldw	fp,0(sp)
  8166ec:	dec00204 	addi	sp,sp,8
  8166f0:	f800283a 	ret

008166f4 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  8166f4:	defff904 	addi	sp,sp,-28
  8166f8:	dfc00615 	stw	ra,24(sp)
  8166fc:	df000515 	stw	fp,20(sp)
  816700:	df000504 	addi	fp,sp,20
  816704:	e13ffc15 	stw	r4,-16(fp)
  816708:	e1bffe15 	stw	r6,-8(fp)
  81670c:	e17ffd0d 	sth	r5,-12(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  816710:	e0bffc17 	ldw	r2,-16(fp)
  816714:	1006d23a 	srli	r3,r2,8
  816718:	d0a74a17 	ldw	r2,-25304(gp)
  81671c:	1885883a 	add	r2,r3,r2
  816720:	e0bffb15 	stw	r2,-20(fp)
    
    if (first_fat)
  816724:	e0bffe17 	ldw	r2,-8(fp)
  816728:	1005003a 	cmpeq	r2,r2,zero
  81672c:	1000071e 	bne	r2,zero,81674c <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  816730:	008020f4 	movhi	r2,131
  816734:	10974c04 	addi	r2,r2,23856
  816738:	10c01117 	ldw	r3,68(r2)
  81673c:	e0bffb17 	ldw	r2,-20(fp)
  816740:	10c5883a 	add	r2,r2,r3
  816744:	e0bffb15 	stw	r2,-20(fp)
  816748:	00000606 	br	816764 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  81674c:	008020f4 	movhi	r2,131
  816750:	10974c04 	addi	r2,r2,23856
  816754:	10c01217 	ldw	r3,72(r2)
  816758:	e0bffb17 	ldw	r2,-20(fp)
  81675c:	10c5883a 	add	r2,r2,r3
  816760:	e0bffb15 	stw	r2,-20(fp)
    }
     
    if (sector_index != current_sector_index)
  816764:	d0e74e17 	ldw	r3,-25288(gp)
  816768:	e0bffb17 	ldw	r2,-20(fp)
  81676c:	10c00726 	beq	r2,r3,81678c <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  816770:	e13ffb17 	ldw	r4,-20(fp)
  816774:	000b883a 	mov	r5,zero
  816778:	08165400 	call	816540 <Read_Sector_Data>
  81677c:	1004c03a 	cmpne	r2,r2,zero
  816780:	1000021e 	bne	r2,zero,81678c <mark_cluster+0x98>
        {
            return false;
  816784:	e03fff15 	stw	zero,-4(fp)
  816788:	00000d06 	br	8167c0 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  81678c:	d0a74c17 	ldw	r2,-25296(gp)
  816790:	10800a17 	ldw	r2,40(r2)
  816794:	1007883a 	mov	r3,r2
  816798:	e0bffc17 	ldw	r2,-16(fp)
  81679c:	10803fcc 	andi	r2,r2,255
  8167a0:	1085883a 	add	r2,r2,r2
  8167a4:	1885883a 	add	r2,r3,r2
  8167a8:	e0fffd0f 	ldh	r3,-12(fp)
  8167ac:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  8167b0:	00800044 	movi	r2,1
  8167b4:	d0a74d15 	stw	r2,-25292(gp)
    return true;
  8167b8:	00800044 	movi	r2,1
  8167bc:	e0bfff15 	stw	r2,-4(fp)
  8167c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8167c4:	e037883a 	mov	sp,fp
  8167c8:	dfc00117 	ldw	ra,4(sp)
  8167cc:	df000017 	ldw	fp,0(sp)
  8167d0:	dec00204 	addi	sp,sp,8
  8167d4:	f800283a 	ret

008167d8 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  8167d8:	defff704 	addi	sp,sp,-36
  8167dc:	dfc00815 	stw	ra,32(sp)
  8167e0:	df000715 	stw	fp,28(sp)
  8167e4:	df000704 	addi	fp,sp,28
	bool result = false;
  8167e8:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
  8167ec:	0009883a 	mov	r4,zero
  8167f0:	000b883a 	mov	r5,zero
  8167f4:	08165400 	call	816540 <Read_Sector_Data>
  8167f8:	1005003a 	cmpeq	r2,r2,zero
  8167fc:	10005c1e 	bne	r2,zero,816970 <Check_for_Master_Boot_Record+0x198>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  816800:	d0a74c17 	ldw	r2,-25296(gp)
  816804:	10800a17 	ldw	r2,40(r2)
  816808:	10807f84 	addi	r2,r2,510
  81680c:	1080002b 	ldhuio	r2,0(r2)
  816810:	10bfffcc 	andi	r2,r2,65535
  816814:	10a0001c 	xori	r2,r2,32768
  816818:	10a00004 	addi	r2,r2,-32768
  81681c:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
  816820:	e0bffd17 	ldw	r2,-12(fp)
  816824:	10ffffcc 	andi	r3,r2,65535
  816828:	00aa9554 	movui	r2,43605
  81682c:	1880501e 	bne	r3,r2,816970 <Check_for_Master_Boot_Record+0x198>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
  816830:	e03ffe15 	stw	zero,-8(fp)
  816834:	00004b06 	br	816964 <Check_for_Master_Boot_Record+0x18c>
			{
				int partition_data_offset = (index * 16) + 0x01be;
  816838:	e0bffe17 	ldw	r2,-8(fp)
  81683c:	1004913a 	slli	r2,r2,4
  816840:	10806f84 	addi	r2,r2,446
  816844:	e0bffa15 	stw	r2,-24(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  816848:	d0a74c17 	ldw	r2,-25296(gp)
  81684c:	10800a17 	ldw	r2,40(r2)
  816850:	1007883a 	mov	r3,r2
  816854:	e0bffa17 	ldw	r2,-24(fp)
  816858:	1885883a 	add	r2,r3,r2
  81685c:	10800104 	addi	r2,r2,4
  816860:	10800023 	ldbuio	r2,0(r2)
  816864:	e0bff905 	stb	r2,-28(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  816868:	e0bff907 	ldb	r2,-28(fp)
  81686c:	10800060 	cmpeqi	r2,r2,1
  816870:	1000091e 	bne	r2,zero,816898 <Check_for_Master_Boot_Record+0xc0>
  816874:	e0bff907 	ldb	r2,-28(fp)
  816878:	10800120 	cmpeqi	r2,r2,4
  81687c:	1000061e 	bne	r2,zero,816898 <Check_for_Master_Boot_Record+0xc0>
  816880:	e0bff907 	ldb	r2,-28(fp)
  816884:	108001a0 	cmpeqi	r2,r2,6
  816888:	1000031e 	bne	r2,zero,816898 <Check_for_Master_Boot_Record+0xc0>
  81688c:	e0bff907 	ldb	r2,-28(fp)
  816890:	10800398 	cmpnei	r2,r2,14
  816894:	1000301e 	bne	r2,zero,816958 <Check_for_Master_Boot_Record+0x180>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  816898:	d0a74c17 	ldw	r2,-25296(gp)
  81689c:	10800a17 	ldw	r2,40(r2)
  8168a0:	1007883a 	mov	r3,r2
  8168a4:	e0bffa17 	ldw	r2,-24(fp)
  8168a8:	1885883a 	add	r2,r3,r2
  8168ac:	10800284 	addi	r2,r2,10
  8168b0:	1080002b 	ldhuio	r2,0(r2)
  8168b4:	10bfffcc 	andi	r2,r2,65535
  8168b8:	1008943a 	slli	r4,r2,16
  8168bc:	d0a74c17 	ldw	r2,-25296(gp)
  8168c0:	10800a17 	ldw	r2,40(r2)
  8168c4:	1007883a 	mov	r3,r2
  8168c8:	e0bffa17 	ldw	r2,-24(fp)
  8168cc:	1885883a 	add	r2,r3,r2
  8168d0:	10800204 	addi	r2,r2,8
  8168d4:	1080002b 	ldhuio	r2,0(r2)
  8168d8:	10bfffcc 	andi	r2,r2,65535
  8168dc:	2084b03a 	or	r2,r4,r2
  8168e0:	e0bffc15 	stw	r2,-16(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  8168e4:	d0a74c17 	ldw	r2,-25296(gp)
  8168e8:	10800a17 	ldw	r2,40(r2)
  8168ec:	1007883a 	mov	r3,r2
  8168f0:	e0bffa17 	ldw	r2,-24(fp)
  8168f4:	1885883a 	add	r2,r3,r2
  8168f8:	10800384 	addi	r2,r2,14
  8168fc:	1080002b 	ldhuio	r2,0(r2)
  816900:	10bfffcc 	andi	r2,r2,65535
  816904:	1008943a 	slli	r4,r2,16
  816908:	d0a74c17 	ldw	r2,-25296(gp)
  81690c:	10800a17 	ldw	r2,40(r2)
  816910:	1007883a 	mov	r3,r2
  816914:	e0bffa17 	ldw	r2,-24(fp)
  816918:	1885883a 	add	r2,r3,r2
  81691c:	10800304 	addi	r2,r2,12
  816920:	1080002b 	ldhuio	r2,0(r2)
  816924:	10bfffcc 	andi	r2,r2,65535
  816928:	2084b03a 	or	r2,r4,r2
  81692c:	e0bffb15 	stw	r2,-20(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
  816930:	e0bffb17 	ldw	r2,-20(fp)
  816934:	10800050 	cmplti	r2,r2,1
  816938:	1000071e 	bne	r2,zero,816958 <Check_for_Master_Boot_Record+0x180>
					{
						result = true;
  81693c:	00800044 	movi	r2,1
  816940:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
  816944:	e0bffb17 	ldw	r2,-20(fp)
  816948:	d0a74b15 	stw	r2,-25300(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  81694c:	e0bffc17 	ldw	r2,-16(fp)
  816950:	d0a74a15 	stw	r2,-25304(gp)
						break;
  816954:	00000606 	br	816970 <Check_for_Master_Boot_Record+0x198>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
  816958:	e0bffe17 	ldw	r2,-8(fp)
  81695c:	10800044 	addi	r2,r2,1
  816960:	e0bffe15 	stw	r2,-8(fp)
  816964:	e0bffe17 	ldw	r2,-8(fp)
  816968:	10800110 	cmplti	r2,r2,4
  81696c:	103fb21e 	bne	r2,zero,816838 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
  816970:	e0bfff17 	ldw	r2,-4(fp)
}
  816974:	e037883a 	mov	sp,fp
  816978:	dfc00117 	ldw	ra,4(sp)
  81697c:	df000017 	ldw	fp,0(sp)
  816980:	dec00204 	addi	sp,sp,8
  816984:	f800283a 	ret

00816988 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  816988:	defff804 	addi	sp,sp,-32
  81698c:	dfc00715 	stw	ra,28(sp)
  816990:	df000615 	stw	fp,24(sp)
  816994:	df000604 	addi	fp,sp,24
  816998:	e13ffc15 	stw	r4,-16(fp)
  81699c:	e17ffd15 	stw	r5,-12(fp)
  8169a0:	e1bffe15 	stw	r6,-8(fp)
  8169a4:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
  8169a8:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  8169ac:	e0bffc17 	ldw	r2,-16(fp)
  8169b0:	108007cc 	andi	r2,r2,31
  8169b4:	1004c03a 	cmpne	r2,r2,zero
  8169b8:	10008e1e 	bne	r2,zero,816bf4 <Read_File_Record_At_Offset+0x26c>
  8169bc:	08192480 	call	819248 <alt_up_sd_card_is_Present>
  8169c0:	1005003a 	cmpeq	r2,r2,zero
  8169c4:	10008b1e 	bne	r2,zero,816bf4 <Read_File_Record_At_Offset+0x26c>
  8169c8:	d0a74317 	ldw	r2,-25332(gp)
  8169cc:	1005003a 	cmpeq	r2,r2,zero
  8169d0:	1000881e 	bne	r2,zero,816bf4 <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
  8169d4:	e03ffa15 	stw	zero,-24(fp)
  8169d8:	00001006 	br	816a1c <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
  8169dc:	e17ffa17 	ldw	r5,-24(fp)
  8169e0:	d0a74c17 	ldw	r2,-25296(gp)
  8169e4:	10800a17 	ldw	r2,40(r2)
  8169e8:	1009883a 	mov	r4,r2
  8169ec:	e0fffc17 	ldw	r3,-16(fp)
  8169f0:	e0bffa17 	ldw	r2,-24(fp)
  8169f4:	1885883a 	add	r2,r3,r2
  8169f8:	2085883a 	add	r2,r4,r2
  8169fc:	10800023 	ldbuio	r2,0(r2)
  816a00:	1007883a 	mov	r3,r2
  816a04:	e0bffd17 	ldw	r2,-12(fp)
  816a08:	1145883a 	add	r2,r2,r5
  816a0c:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
  816a10:	e0bffa17 	ldw	r2,-24(fp)
  816a14:	10800044 	addi	r2,r2,1
  816a18:	e0bffa15 	stw	r2,-24(fp)
  816a1c:	e0bffa17 	ldw	r2,-24(fp)
  816a20:	10800210 	cmplti	r2,r2,8
  816a24:	103fed1e 	bne	r2,zero,8169dc <Read_File_Record_At_Offset+0x54>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
  816a28:	e03ffa15 	stw	zero,-24(fp)
  816a2c:	00001206 	br	816a78 <Read_File_Record_At_Offset+0xf0>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
  816a30:	e17ffa17 	ldw	r5,-24(fp)
  816a34:	d0a74c17 	ldw	r2,-25296(gp)
  816a38:	10800a17 	ldw	r2,40(r2)
  816a3c:	1009883a 	mov	r4,r2
  816a40:	e0fffc17 	ldw	r3,-16(fp)
  816a44:	e0bffa17 	ldw	r2,-24(fp)
  816a48:	1885883a 	add	r2,r3,r2
  816a4c:	2085883a 	add	r2,r4,r2
  816a50:	10800204 	addi	r2,r2,8
  816a54:	10800023 	ldbuio	r2,0(r2)
  816a58:	1007883a 	mov	r3,r2
  816a5c:	e0bffd17 	ldw	r2,-12(fp)
  816a60:	2885883a 	add	r2,r5,r2
  816a64:	10800204 	addi	r2,r2,8
  816a68:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
  816a6c:	e0bffa17 	ldw	r2,-24(fp)
  816a70:	10800044 	addi	r2,r2,1
  816a74:	e0bffa15 	stw	r2,-24(fp)
  816a78:	e0bffa17 	ldw	r2,-24(fp)
  816a7c:	108000d0 	cmplti	r2,r2,3
  816a80:	103feb1e 	bne	r2,zero,816a30 <Read_File_Record_At_Offset+0xa8>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
  816a84:	d0a74c17 	ldw	r2,-25296(gp)
  816a88:	10800a17 	ldw	r2,40(r2)
  816a8c:	1007883a 	mov	r3,r2
  816a90:	e0bffc17 	ldw	r2,-16(fp)
  816a94:	1885883a 	add	r2,r3,r2
  816a98:	108002c4 	addi	r2,r2,11
  816a9c:	10800023 	ldbuio	r2,0(r2)
  816aa0:	1007883a 	mov	r3,r2
  816aa4:	e0bffd17 	ldw	r2,-12(fp)
  816aa8:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
  816aac:	d0a74c17 	ldw	r2,-25296(gp)
  816ab0:	10800a17 	ldw	r2,40(r2)
  816ab4:	1007883a 	mov	r3,r2
  816ab8:	e0bffc17 	ldw	r2,-16(fp)
  816abc:	1885883a 	add	r2,r3,r2
  816ac0:	10800384 	addi	r2,r2,14
  816ac4:	1080002b 	ldhuio	r2,0(r2)
  816ac8:	1007883a 	mov	r3,r2
  816acc:	e0bffd17 	ldw	r2,-12(fp)
  816ad0:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
  816ad4:	d0a74c17 	ldw	r2,-25296(gp)
  816ad8:	10800a17 	ldw	r2,40(r2)
  816adc:	1007883a 	mov	r3,r2
  816ae0:	e0bffc17 	ldw	r2,-16(fp)
  816ae4:	1885883a 	add	r2,r3,r2
  816ae8:	10800404 	addi	r2,r2,16
  816aec:	1080002b 	ldhuio	r2,0(r2)
  816af0:	1007883a 	mov	r3,r2
  816af4:	e0bffd17 	ldw	r2,-12(fp)
  816af8:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
  816afc:	d0a74c17 	ldw	r2,-25296(gp)
  816b00:	10800a17 	ldw	r2,40(r2)
  816b04:	1007883a 	mov	r3,r2
  816b08:	e0bffc17 	ldw	r2,-16(fp)
  816b0c:	1885883a 	add	r2,r3,r2
  816b10:	10800484 	addi	r2,r2,18
  816b14:	1080002b 	ldhuio	r2,0(r2)
  816b18:	1007883a 	mov	r3,r2
  816b1c:	e0bffd17 	ldw	r2,-12(fp)
  816b20:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
  816b24:	d0a74c17 	ldw	r2,-25296(gp)
  816b28:	10800a17 	ldw	r2,40(r2)
  816b2c:	1007883a 	mov	r3,r2
  816b30:	e0bffc17 	ldw	r2,-16(fp)
  816b34:	1885883a 	add	r2,r3,r2
  816b38:	10800584 	addi	r2,r2,22
  816b3c:	1080002b 	ldhuio	r2,0(r2)
  816b40:	1007883a 	mov	r3,r2
  816b44:	e0bffd17 	ldw	r2,-12(fp)
  816b48:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
  816b4c:	d0a74c17 	ldw	r2,-25296(gp)
  816b50:	10800a17 	ldw	r2,40(r2)
  816b54:	1007883a 	mov	r3,r2
  816b58:	e0bffc17 	ldw	r2,-16(fp)
  816b5c:	1885883a 	add	r2,r3,r2
  816b60:	10800604 	addi	r2,r2,24
  816b64:	1080002b 	ldhuio	r2,0(r2)
  816b68:	1007883a 	mov	r3,r2
  816b6c:	e0bffd17 	ldw	r2,-12(fp)
  816b70:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
  816b74:	d0a74c17 	ldw	r2,-25296(gp)
  816b78:	10800a17 	ldw	r2,40(r2)
  816b7c:	1007883a 	mov	r3,r2
  816b80:	e0bffc17 	ldw	r2,-16(fp)
  816b84:	1885883a 	add	r2,r3,r2
  816b88:	10800684 	addi	r2,r2,26
  816b8c:	1080002b 	ldhuio	r2,0(r2)
  816b90:	1007883a 	mov	r3,r2
  816b94:	e0bffd17 	ldw	r2,-12(fp)
  816b98:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
  816b9c:	d0a74c17 	ldw	r2,-25296(gp)
  816ba0:	10800a17 	ldw	r2,40(r2)
  816ba4:	1007883a 	mov	r3,r2
  816ba8:	e0bffc17 	ldw	r2,-16(fp)
  816bac:	1885883a 	add	r2,r3,r2
  816bb0:	10800704 	addi	r2,r2,28
  816bb4:	10800037 	ldwio	r2,0(r2)
  816bb8:	1007883a 	mov	r3,r2
  816bbc:	e0bffd17 	ldw	r2,-12(fp)
  816bc0:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
  816bc4:	e0fffd17 	ldw	r3,-12(fp)
  816bc8:	e0bffe17 	ldw	r2,-8(fp)
  816bcc:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
  816bd0:	e0fffd17 	ldw	r3,-12(fp)
  816bd4:	e0bfff17 	ldw	r2,-4(fp)
  816bd8:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
  816bdc:	e0bffc17 	ldw	r2,-16(fp)
  816be0:	1007883a 	mov	r3,r2
  816be4:	e0bffd17 	ldw	r2,-12(fp)
  816be8:	10c00c0d 	sth	r3,48(r2)
		result = true;
  816bec:	00800044 	movi	r2,1
  816bf0:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  816bf4:	e0bffb17 	ldw	r2,-20(fp)
}
  816bf8:	e037883a 	mov	sp,fp
  816bfc:	dfc00117 	ldw	ra,4(sp)
  816c00:	df000017 	ldw	fp,0(sp)
  816c04:	dec00204 	addi	sp,sp,8
  816c08:	f800283a 	ret

00816c0c <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  816c0c:	defff904 	addi	sp,sp,-28
  816c10:	dfc00615 	stw	ra,24(sp)
  816c14:	df000515 	stw	fp,20(sp)
  816c18:	df000504 	addi	fp,sp,20
  816c1c:	e13ffe15 	stw	r4,-8(fp)
  816c20:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
  816c24:	e03ffd15 	stw	zero,-12(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  816c28:	e0bffe17 	ldw	r2,-8(fp)
  816c2c:	108007cc 	andi	r2,r2,31
  816c30:	1004c03a 	cmpne	r2,r2,zero
  816c34:	10009d1e 	bne	r2,zero,816eac <Write_File_Record_At_Offset+0x2a0>
  816c38:	08192480 	call	819248 <alt_up_sd_card_is_Present>
  816c3c:	1005003a 	cmpeq	r2,r2,zero
  816c40:	10009a1e 	bne	r2,zero,816eac <Write_File_Record_At_Offset+0x2a0>
  816c44:	d0a74317 	ldw	r2,-25332(gp)
  816c48:	1005003a 	cmpeq	r2,r2,zero
  816c4c:	1000971e 	bne	r2,zero,816eac <Write_File_Record_At_Offset+0x2a0>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
  816c50:	e03ffc15 	stw	zero,-16(fp)
  816c54:	00001e06 	br	816cd0 <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
  816c58:	e0bffc17 	ldw	r2,-16(fp)
  816c5c:	10c00044 	addi	r3,r2,1
  816c60:	e0bfff17 	ldw	r2,-4(fp)
  816c64:	10c5883a 	add	r2,r2,r3
  816c68:	10800003 	ldbu	r2,0(r2)
  816c6c:	10803fcc 	andi	r2,r2,255
  816c70:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars << 8;
  816c74:	e0bffb0f 	ldh	r2,-20(fp)
  816c78:	1004923a 	slli	r2,r2,8
  816c7c:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars | record->name[counter];
  816c80:	e0fffc17 	ldw	r3,-16(fp)
  816c84:	e0bfff17 	ldw	r2,-4(fp)
  816c88:	10c5883a 	add	r2,r2,r3
  816c8c:	10800003 	ldbu	r2,0(r2)
  816c90:	10c03fcc 	andi	r3,r2,255
  816c94:	e0bffb0b 	ldhu	r2,-20(fp)
  816c98:	10c4b03a 	or	r2,r2,r3
  816c9c:	e0bffb0d 	sth	r2,-20(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  816ca0:	d0a74c17 	ldw	r2,-25296(gp)
  816ca4:	10800a17 	ldw	r2,40(r2)
  816ca8:	1009883a 	mov	r4,r2
  816cac:	e0fffe17 	ldw	r3,-8(fp)
  816cb0:	e0bffc17 	ldw	r2,-16(fp)
  816cb4:	1885883a 	add	r2,r3,r2
  816cb8:	2085883a 	add	r2,r4,r2
  816cbc:	e0fffb0f 	ldh	r3,-20(fp)
  816cc0:	10c0002d 	sthio	r3,0(r2)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
  816cc4:	e0bffc17 	ldw	r2,-16(fp)
  816cc8:	10800084 	addi	r2,r2,2
  816ccc:	e0bffc15 	stw	r2,-16(fp)
  816cd0:	e0bffc17 	ldw	r2,-16(fp)
  816cd4:	10800210 	cmplti	r2,r2,8
  816cd8:	103fdf1e 	bne	r2,zero,816c58 <Write_File_Record_At_Offset+0x4c>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
  816cdc:	e03ffc15 	stw	zero,-16(fp)
  816ce0:	00001306 	br	816d30 <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  816ce4:	d0a74c17 	ldw	r2,-25296(gp)
  816ce8:	10800a17 	ldw	r2,40(r2)
  816cec:	1009883a 	mov	r4,r2
  816cf0:	e0fffe17 	ldw	r3,-8(fp)
  816cf4:	e0bffc17 	ldw	r2,-16(fp)
  816cf8:	1885883a 	add	r2,r3,r2
  816cfc:	2085883a 	add	r2,r4,r2
  816d00:	11000204 	addi	r4,r2,8
  816d04:	e0fffc17 	ldw	r3,-16(fp)
  816d08:	e0bfff17 	ldw	r2,-4(fp)
  816d0c:	1885883a 	add	r2,r3,r2
  816d10:	10800204 	addi	r2,r2,8
  816d14:	10800003 	ldbu	r2,0(r2)
  816d18:	10c03fcc 	andi	r3,r2,255
  816d1c:	2005883a 	mov	r2,r4
  816d20:	10c00025 	stbio	r3,0(r2)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
  816d24:	e0bffc17 	ldw	r2,-16(fp)
  816d28:	10800044 	addi	r2,r2,1
  816d2c:	e0bffc15 	stw	r2,-16(fp)
  816d30:	e0bffc17 	ldw	r2,-16(fp)
  816d34:	108000d0 	cmplti	r2,r2,3
  816d38:	103fea1e 	bne	r2,zero,816ce4 <Write_File_Record_At_Offset+0xd8>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  816d3c:	d0a74c17 	ldw	r2,-25296(gp)
  816d40:	10800a17 	ldw	r2,40(r2)
  816d44:	1007883a 	mov	r3,r2
  816d48:	e0bffe17 	ldw	r2,-8(fp)
  816d4c:	1885883a 	add	r2,r3,r2
  816d50:	110002c4 	addi	r4,r2,11
  816d54:	e0bfff17 	ldw	r2,-4(fp)
  816d58:	108002c3 	ldbu	r2,11(r2)
  816d5c:	10c03fcc 	andi	r3,r2,255
  816d60:	2005883a 	mov	r2,r4
  816d64:	10c00025 	stbio	r3,0(r2)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  816d68:	d0a74c17 	ldw	r2,-25296(gp)
  816d6c:	10800a17 	ldw	r2,40(r2)
  816d70:	1007883a 	mov	r3,r2
  816d74:	e0bffe17 	ldw	r2,-8(fp)
  816d78:	1885883a 	add	r2,r3,r2
  816d7c:	11000384 	addi	r4,r2,14
  816d80:	e0bfff17 	ldw	r2,-4(fp)
  816d84:	1080030b 	ldhu	r2,12(r2)
  816d88:	10ffffcc 	andi	r3,r2,65535
  816d8c:	2005883a 	mov	r2,r4
  816d90:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  816d94:	d0a74c17 	ldw	r2,-25296(gp)
  816d98:	10800a17 	ldw	r2,40(r2)
  816d9c:	1007883a 	mov	r3,r2
  816da0:	e0bffe17 	ldw	r2,-8(fp)
  816da4:	1885883a 	add	r2,r3,r2
  816da8:	11000404 	addi	r4,r2,16
  816dac:	e0bfff17 	ldw	r2,-4(fp)
  816db0:	1080038b 	ldhu	r2,14(r2)
  816db4:	10ffffcc 	andi	r3,r2,65535
  816db8:	2005883a 	mov	r2,r4
  816dbc:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  816dc0:	d0a74c17 	ldw	r2,-25296(gp)
  816dc4:	10800a17 	ldw	r2,40(r2)
  816dc8:	1007883a 	mov	r3,r2
  816dcc:	e0bffe17 	ldw	r2,-8(fp)
  816dd0:	1885883a 	add	r2,r3,r2
  816dd4:	11000484 	addi	r4,r2,18
  816dd8:	e0bfff17 	ldw	r2,-4(fp)
  816ddc:	1080040b 	ldhu	r2,16(r2)
  816de0:	10ffffcc 	andi	r3,r2,65535
  816de4:	2005883a 	mov	r2,r4
  816de8:	10c0002d 	sthio	r3,0(r2)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  816dec:	d0a74c17 	ldw	r2,-25296(gp)
  816df0:	10800a17 	ldw	r2,40(r2)
  816df4:	1007883a 	mov	r3,r2
  816df8:	e0bffe17 	ldw	r2,-8(fp)
  816dfc:	1885883a 	add	r2,r3,r2
  816e00:	11000584 	addi	r4,r2,22
  816e04:	e0bfff17 	ldw	r2,-4(fp)
  816e08:	1080048b 	ldhu	r2,18(r2)
  816e0c:	10ffffcc 	andi	r3,r2,65535
  816e10:	2005883a 	mov	r2,r4
  816e14:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  816e18:	d0a74c17 	ldw	r2,-25296(gp)
  816e1c:	10800a17 	ldw	r2,40(r2)
  816e20:	1007883a 	mov	r3,r2
  816e24:	e0bffe17 	ldw	r2,-8(fp)
  816e28:	1885883a 	add	r2,r3,r2
  816e2c:	11000604 	addi	r4,r2,24
  816e30:	e0bfff17 	ldw	r2,-4(fp)
  816e34:	1080050b 	ldhu	r2,20(r2)
  816e38:	10ffffcc 	andi	r3,r2,65535
  816e3c:	2005883a 	mov	r2,r4
  816e40:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  816e44:	d0a74c17 	ldw	r2,-25296(gp)
  816e48:	10800a17 	ldw	r2,40(r2)
  816e4c:	1007883a 	mov	r3,r2
  816e50:	e0bffe17 	ldw	r2,-8(fp)
  816e54:	1885883a 	add	r2,r3,r2
  816e58:	11000684 	addi	r4,r2,26
  816e5c:	e0bfff17 	ldw	r2,-4(fp)
  816e60:	1080058b 	ldhu	r2,22(r2)
  816e64:	10ffffcc 	andi	r3,r2,65535
  816e68:	2005883a 	mov	r2,r4
  816e6c:	10c0002d 	sthio	r3,0(r2)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  816e70:	d0a74c17 	ldw	r2,-25296(gp)
  816e74:	10800a17 	ldw	r2,40(r2)
  816e78:	1007883a 	mov	r3,r2
  816e7c:	e0bffe17 	ldw	r2,-8(fp)
  816e80:	1885883a 	add	r2,r3,r2
  816e84:	11000704 	addi	r4,r2,28
  816e88:	e0bfff17 	ldw	r2,-4(fp)
  816e8c:	10800617 	ldw	r2,24(r2)
  816e90:	1007883a 	mov	r3,r2
  816e94:	2005883a 	mov	r2,r4
  816e98:	10c00035 	stwio	r3,0(r2)
        current_sector_modified = true;                  
  816e9c:	00800044 	movi	r2,1
  816ea0:	d0a74d15 	stw	r2,-25292(gp)
        result = true;
  816ea4:	00800044 	movi	r2,1
  816ea8:	e0bffd15 	stw	r2,-12(fp)
    }
    return result;
  816eac:	e0bffd17 	ldw	r2,-12(fp)
}
  816eb0:	e037883a 	mov	sp,fp
  816eb4:	dfc00117 	ldw	ra,4(sp)
  816eb8:	df000017 	ldw	fp,0(sp)
  816ebc:	dec00204 	addi	sp,sp,8
  816ec0:	f800283a 	ret

00816ec4 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  816ec4:	defff804 	addi	sp,sp,-32
  816ec8:	dfc00715 	stw	ra,28(sp)
  816ecc:	df000615 	stw	fp,24(sp)
  816ed0:	dc000515 	stw	r16,20(sp)
  816ed4:	df000504 	addi	fp,sp,20
  816ed8:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
  816edc:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
  816ee0:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
  816ee4:	0009883a 	mov	r4,zero
  816ee8:	e17fff17 	ldw	r5,-4(fp)
  816eec:	08165400 	call	816540 <Read_Sector_Data>
  816ef0:	e0bffe15 	stw	r2,-8(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  816ef4:	d0a74c17 	ldw	r2,-25296(gp)
  816ef8:	10800a17 	ldw	r2,40(r2)
  816efc:	10807f84 	addi	r2,r2,510
  816f00:	1080002b 	ldhuio	r2,0(r2)
  816f04:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
  816f08:	e0bffc0f 	ldh	r2,-16(fp)
  816f0c:	10ffffcc 	andi	r3,r2,65535
  816f10:	00aa9554 	movui	r2,43605
  816f14:	1881751e 	bne	r3,r2,8174ec <Check_for_DOS_FAT+0x628>
  816f18:	e0bffe17 	ldw	r2,-8(fp)
  816f1c:	1005003a 	cmpeq	r2,r2,zero
  816f20:	1001721e 	bne	r2,zero,8174ec <Check_for_DOS_FAT+0x628>
	{
		int num_clusters = 0;
  816f24:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
  816f28:	d0a74c17 	ldw	r2,-25296(gp)
  816f2c:	10800a17 	ldw	r2,40(r2)
  816f30:	10800023 	ldbuio	r2,0(r2)
  816f34:	1007883a 	mov	r3,r2
  816f38:	008020f4 	movhi	r2,131
  816f3c:	10974c04 	addi	r2,r2,23856
  816f40:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
  816f44:	d0a74c17 	ldw	r2,-25296(gp)
  816f48:	10800a17 	ldw	r2,40(r2)
  816f4c:	10800044 	addi	r2,r2,1
  816f50:	10800023 	ldbuio	r2,0(r2)
  816f54:	1007883a 	mov	r3,r2
  816f58:	008020f4 	movhi	r2,131
  816f5c:	10974c04 	addi	r2,r2,23856
  816f60:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
  816f64:	d0a74c17 	ldw	r2,-25296(gp)
  816f68:	10800a17 	ldw	r2,40(r2)
  816f6c:	10800084 	addi	r2,r2,2
  816f70:	10800023 	ldbuio	r2,0(r2)
  816f74:	1007883a 	mov	r3,r2
  816f78:	008020f4 	movhi	r2,131
  816f7c:	10974c04 	addi	r2,r2,23856
  816f80:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
  816f84:	e03ffd15 	stw	zero,-12(fp)
  816f88:	00001006 	br	816fcc <Check_for_DOS_FAT+0x108>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
  816f8c:	e13ffd17 	ldw	r4,-12(fp)
  816f90:	d0a74c17 	ldw	r2,-25296(gp)
  816f94:	10800a17 	ldw	r2,40(r2)
  816f98:	1007883a 	mov	r3,r2
  816f9c:	e0bffd17 	ldw	r2,-12(fp)
  816fa0:	1885883a 	add	r2,r3,r2
  816fa4:	108000c4 	addi	r2,r2,3
  816fa8:	10800023 	ldbuio	r2,0(r2)
  816fac:	1007883a 	mov	r3,r2
  816fb0:	008020f4 	movhi	r2,131
  816fb4:	10974c04 	addi	r2,r2,23856
  816fb8:	1105883a 	add	r2,r2,r4
  816fbc:	10c000c5 	stb	r3,3(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
  816fc0:	e0bffd17 	ldw	r2,-12(fp)
  816fc4:	10800044 	addi	r2,r2,1
  816fc8:	e0bffd15 	stw	r2,-12(fp)
  816fcc:	e0bffd17 	ldw	r2,-12(fp)
  816fd0:	10800210 	cmplti	r2,r2,8
  816fd4:	103fed1e 	bne	r2,zero,816f8c <Check_for_DOS_FAT+0xc8>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
  816fd8:	d0a74c17 	ldw	r2,-25296(gp)
  816fdc:	10800a17 	ldw	r2,40(r2)
  816fe0:	10800304 	addi	r2,r2,12
  816fe4:	10800023 	ldbuio	r2,0(r2)
  816fe8:	10803fcc 	andi	r2,r2,255
  816fec:	1004923a 	slli	r2,r2,8
  816ff0:	1007883a 	mov	r3,r2
  816ff4:	d0a74c17 	ldw	r2,-25296(gp)
  816ff8:	10800a17 	ldw	r2,40(r2)
  816ffc:	108002c4 	addi	r2,r2,11
  817000:	10800023 	ldbuio	r2,0(r2)
  817004:	10803fcc 	andi	r2,r2,255
  817008:	1080201c 	xori	r2,r2,128
  81700c:	10bfe004 	addi	r2,r2,-128
  817010:	1884b03a 	or	r2,r3,r2
  817014:	1007883a 	mov	r3,r2
  817018:	008020f4 	movhi	r2,131
  81701c:	10974c04 	addi	r2,r2,23856
  817020:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
  817024:	d0a74c17 	ldw	r2,-25296(gp)
  817028:	10800a17 	ldw	r2,40(r2)
  81702c:	10800344 	addi	r2,r2,13
  817030:	10800023 	ldbuio	r2,0(r2)
  817034:	1007883a 	mov	r3,r2
  817038:	008020f4 	movhi	r2,131
  81703c:	10974c04 	addi	r2,r2,23856
  817040:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
  817044:	d0a74c17 	ldw	r2,-25296(gp)
  817048:	10800a17 	ldw	r2,40(r2)
  81704c:	10800384 	addi	r2,r2,14
  817050:	1080002b 	ldhuio	r2,0(r2)
  817054:	1007883a 	mov	r3,r2
  817058:	008020f4 	movhi	r2,131
  81705c:	10974c04 	addi	r2,r2,23856
  817060:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
  817064:	d0a74c17 	ldw	r2,-25296(gp)
  817068:	10800a17 	ldw	r2,40(r2)
  81706c:	10800404 	addi	r2,r2,16
  817070:	10800023 	ldbuio	r2,0(r2)
  817074:	1007883a 	mov	r3,r2
  817078:	008020f4 	movhi	r2,131
  81707c:	10974c04 	addi	r2,r2,23856
  817080:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
  817084:	d0a74c17 	ldw	r2,-25296(gp)
  817088:	10800a17 	ldw	r2,40(r2)
  81708c:	10800484 	addi	r2,r2,18
  817090:	10800023 	ldbuio	r2,0(r2)
  817094:	10803fcc 	andi	r2,r2,255
  817098:	1004923a 	slli	r2,r2,8
  81709c:	1007883a 	mov	r3,r2
  8170a0:	d0a74c17 	ldw	r2,-25296(gp)
  8170a4:	10800a17 	ldw	r2,40(r2)
  8170a8:	10800444 	addi	r2,r2,17
  8170ac:	10800023 	ldbuio	r2,0(r2)
  8170b0:	10803fcc 	andi	r2,r2,255
  8170b4:	1884b03a 	or	r2,r3,r2
  8170b8:	1007883a 	mov	r3,r2
  8170bc:	008020f4 	movhi	r2,131
  8170c0:	10974c04 	addi	r2,r2,23856
  8170c4:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
  8170c8:	d0a74c17 	ldw	r2,-25296(gp)
  8170cc:	10800a17 	ldw	r2,40(r2)
  8170d0:	10800504 	addi	r2,r2,20
  8170d4:	10800023 	ldbuio	r2,0(r2)
  8170d8:	10803fcc 	andi	r2,r2,255
  8170dc:	1004923a 	slli	r2,r2,8
  8170e0:	1007883a 	mov	r3,r2
  8170e4:	d0a74c17 	ldw	r2,-25296(gp)
  8170e8:	10800a17 	ldw	r2,40(r2)
  8170ec:	108004c4 	addi	r2,r2,19
  8170f0:	10800023 	ldbuio	r2,0(r2)
  8170f4:	10803fcc 	andi	r2,r2,255
  8170f8:	1884b03a 	or	r2,r3,r2
  8170fc:	1007883a 	mov	r3,r2
  817100:	008020f4 	movhi	r2,131
  817104:	10974c04 	addi	r2,r2,23856
  817108:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
  81710c:	d0a74c17 	ldw	r2,-25296(gp)
  817110:	10800a17 	ldw	r2,40(r2)
  817114:	10800544 	addi	r2,r2,21
  817118:	10800023 	ldbuio	r2,0(r2)
  81711c:	1007883a 	mov	r3,r2
  817120:	008020f4 	movhi	r2,131
  817124:	10974c04 	addi	r2,r2,23856
  817128:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
  81712c:	d0a74c17 	ldw	r2,-25296(gp)
  817130:	10800a17 	ldw	r2,40(r2)
  817134:	10800584 	addi	r2,r2,22
  817138:	1080002b 	ldhuio	r2,0(r2)
  81713c:	1007883a 	mov	r3,r2
  817140:	008020f4 	movhi	r2,131
  817144:	10974c04 	addi	r2,r2,23856
  817148:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
  81714c:	d0a74c17 	ldw	r2,-25296(gp)
  817150:	10800a17 	ldw	r2,40(r2)
  817154:	10800604 	addi	r2,r2,24
  817158:	1080002b 	ldhuio	r2,0(r2)
  81715c:	1007883a 	mov	r3,r2
  817160:	008020f4 	movhi	r2,131
  817164:	10974c04 	addi	r2,r2,23856
  817168:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
  81716c:	d0a74c17 	ldw	r2,-25296(gp)
  817170:	10800a17 	ldw	r2,40(r2)
  817174:	10800684 	addi	r2,r2,26
  817178:	1080002b 	ldhuio	r2,0(r2)
  81717c:	1007883a 	mov	r3,r2
  817180:	008020f4 	movhi	r2,131
  817184:	10974c04 	addi	r2,r2,23856
  817188:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
  81718c:	d0a74c17 	ldw	r2,-25296(gp)
  817190:	10800a17 	ldw	r2,40(r2)
  817194:	10800704 	addi	r2,r2,28
  817198:	10800037 	ldwio	r2,0(r2)
  81719c:	1007883a 	mov	r3,r2
  8171a0:	008020f4 	movhi	r2,131
  8171a4:	10974c04 	addi	r2,r2,23856
  8171a8:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
  8171ac:	d0a74c17 	ldw	r2,-25296(gp)
  8171b0:	10800a17 	ldw	r2,40(r2)
  8171b4:	10800804 	addi	r2,r2,32
  8171b8:	10800037 	ldwio	r2,0(r2)
  8171bc:	1007883a 	mov	r3,r2
  8171c0:	008020f4 	movhi	r2,131
  8171c4:	10974c04 	addi	r2,r2,23856
  8171c8:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
  8171cc:	d0a74c17 	ldw	r2,-25296(gp)
  8171d0:	10800a17 	ldw	r2,40(r2)
  8171d4:	10800904 	addi	r2,r2,36
  8171d8:	10800023 	ldbuio	r2,0(r2)
  8171dc:	1007883a 	mov	r3,r2
  8171e0:	008020f4 	movhi	r2,131
  8171e4:	10974c04 	addi	r2,r2,23856
  8171e8:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
  8171ec:	d0a74c17 	ldw	r2,-25296(gp)
  8171f0:	10800a17 	ldw	r2,40(r2)
  8171f4:	10800944 	addi	r2,r2,37
  8171f8:	10800023 	ldbuio	r2,0(r2)
  8171fc:	1007883a 	mov	r3,r2
  817200:	008020f4 	movhi	r2,131
  817204:	10974c04 	addi	r2,r2,23856
  817208:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
  81720c:	d0a74c17 	ldw	r2,-25296(gp)
  817210:	10800a17 	ldw	r2,40(r2)
  817214:	10800984 	addi	r2,r2,38
  817218:	10800023 	ldbuio	r2,0(r2)
  81721c:	1007883a 	mov	r3,r2
  817220:	008020f4 	movhi	r2,131
  817224:	10974c04 	addi	r2,r2,23856
  817228:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
  81722c:	008020f4 	movhi	r2,131
  817230:	10974c04 	addi	r2,r2,23856
  817234:	1080040b 	ldhu	r2,16(r2)
  817238:	10ffffcc 	andi	r3,r2,65535
  81723c:	008020f4 	movhi	r2,131
  817240:	10974c04 	addi	r2,r2,23856
  817244:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
  817248:	008020f4 	movhi	r2,131
  81724c:	10974c04 	addi	r2,r2,23856
  817250:	10c01117 	ldw	r3,68(r2)
  817254:	008020f4 	movhi	r2,131
  817258:	10974c04 	addi	r2,r2,23856
  81725c:	1080068b 	ldhu	r2,26(r2)
  817260:	10bfffcc 	andi	r2,r2,65535
  817264:	1887883a 	add	r3,r3,r2
  817268:	008020f4 	movhi	r2,131
  81726c:	10974c04 	addi	r2,r2,23856
  817270:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
  817274:	008020f4 	movhi	r2,131
  817278:	10974c04 	addi	r2,r2,23856
  81727c:	10c01217 	ldw	r3,72(r2)
  817280:	008020f4 	movhi	r2,131
  817284:	10974c04 	addi	r2,r2,23856
  817288:	1080068b 	ldhu	r2,26(r2)
  81728c:	10bfffcc 	andi	r2,r2,65535
  817290:	1887883a 	add	r3,r3,r2
  817294:	008020f4 	movhi	r2,131
  817298:	10974c04 	addi	r2,r2,23856
  81729c:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  8172a0:	008020f4 	movhi	r2,131
  8172a4:	10974c04 	addi	r2,r2,23856
  8172a8:	14001317 	ldw	r16,76(r2)
  8172ac:	008020f4 	movhi	r2,131
  8172b0:	10974c04 	addi	r2,r2,23856
  8172b4:	1080050b 	ldhu	r2,20(r2)
  8172b8:	10bfffcc 	andi	r2,r2,65535
  8172bc:	1008917a 	slli	r4,r2,5
  8172c0:	008020f4 	movhi	r2,131
  8172c4:	10974c04 	addi	r2,r2,23856
  8172c8:	1080030b 	ldhu	r2,12(r2)
  8172cc:	117fffcc 	andi	r5,r2,65535
  8172d0:	080ba9c0 	call	80ba9c <__divsi3>
  8172d4:	8087883a 	add	r3,r16,r2
  8172d8:	008020f4 	movhi	r2,131
  8172dc:	10974c04 	addi	r2,r2,23856
  8172e0:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
  8172e4:	008020f4 	movhi	r2,131
  8172e8:	10974c04 	addi	r2,r2,23856
  8172ec:	1080058b 	ldhu	r2,22(r2)
  8172f0:	10bfffcc 	andi	r2,r2,65535
  8172f4:	1005003a 	cmpeq	r2,r2,zero
  8172f8:	10000b1e 	bne	r2,zero,817328 <Check_for_DOS_FAT+0x464>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
  8172fc:	008020f4 	movhi	r2,131
  817300:	10974c04 	addi	r2,r2,23856
  817304:	1080058b 	ldhu	r2,22(r2)
  817308:	113fffcc 	andi	r4,r2,65535
  81730c:	008020f4 	movhi	r2,131
  817310:	10974c04 	addi	r2,r2,23856
  817314:	10800383 	ldbu	r2,14(r2)
  817318:	11403fcc 	andi	r5,r2,255
  81731c:	080ba9c0 	call	80ba9c <__divsi3>
  817320:	e0bffb15 	stw	r2,-20(fp)
  817324:	00000906 	br	81734c <Check_for_DOS_FAT+0x488>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
  817328:	008020f4 	movhi	r2,131
  81732c:	10974c04 	addi	r2,r2,23856
  817330:	11000917 	ldw	r4,36(r2)
  817334:	008020f4 	movhi	r2,131
  817338:	10974c04 	addi	r2,r2,23856
  81733c:	10800383 	ldbu	r2,14(r2)
  817340:	11403fcc 	andi	r5,r2,255
  817344:	080bb5c0 	call	80bb5c <__udivsi3>
  817348:	e0bffb15 	stw	r2,-20(fp)
		}
		if (num_clusters < 4087)
  81734c:	e0bffb17 	ldw	r2,-20(fp)
  817350:	1083fdc8 	cmpgei	r2,r2,4087
  817354:	1000051e 	bne	r2,zero,81736c <Check_for_DOS_FAT+0x4a8>
		{
			boot_sector_data.bits_for_cluster_index = 12;
  817358:	00c020f4 	movhi	r3,131
  81735c:	18d74c04 	addi	r3,r3,23856
  817360:	00800304 	movi	r2,12
  817364:	18801085 	stb	r2,66(r3)
  817368:	00000c06 	br	81739c <Check_for_DOS_FAT+0x4d8>
		}
		else if (num_clusters <= 65517)
  81736c:	e0fffb17 	ldw	r3,-20(fp)
  817370:	00bffb54 	movui	r2,65517
  817374:	10c00516 	blt	r2,r3,81738c <Check_for_DOS_FAT+0x4c8>
		{
			boot_sector_data.bits_for_cluster_index = 16;
  817378:	00c020f4 	movhi	r3,131
  81737c:	18d74c04 	addi	r3,r3,23856
  817380:	00800404 	movi	r2,16
  817384:	18801085 	stb	r2,66(r3)
  817388:	00000406 	br	81739c <Check_for_DOS_FAT+0x4d8>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
  81738c:	00c020f4 	movhi	r3,131
  817390:	18d74c04 	addi	r3,r3,23856
  817394:	00800804 	movi	r2,32
  817398:	18801085 	stb	r2,66(r3)
		}
	    
		for (counter = 0; counter < 4; counter++)
  81739c:	e03ffd15 	stw	zero,-12(fp)
  8173a0:	00001106 	br	8173e8 <Check_for_DOS_FAT+0x524>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
  8173a4:	e13ffd17 	ldw	r4,-12(fp)
  8173a8:	d0a74c17 	ldw	r2,-25296(gp)
  8173ac:	10800a17 	ldw	r2,40(r2)
  8173b0:	1007883a 	mov	r3,r2
  8173b4:	e0bffd17 	ldw	r2,-12(fp)
  8173b8:	1885883a 	add	r2,r3,r2
  8173bc:	108009c4 	addi	r2,r2,39
  8173c0:	10800023 	ldbuio	r2,0(r2)
  8173c4:	1007883a 	mov	r3,r2
  8173c8:	008020f4 	movhi	r2,131
  8173cc:	10974c04 	addi	r2,r2,23856
  8173d0:	2085883a 	add	r2,r4,r2
  8173d4:	10800a04 	addi	r2,r2,40
  8173d8:	10c000c5 	stb	r3,3(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
  8173dc:	e0bffd17 	ldw	r2,-12(fp)
  8173e0:	10800044 	addi	r2,r2,1
  8173e4:	e0bffd15 	stw	r2,-12(fp)
  8173e8:	e0bffd17 	ldw	r2,-12(fp)
  8173ec:	10800110 	cmplti	r2,r2,4
  8173f0:	103fec1e 	bne	r2,zero,8173a4 <Check_for_DOS_FAT+0x4e0>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
  8173f4:	e03ffd15 	stw	zero,-12(fp)
  8173f8:	00001106 	br	817440 <Check_for_DOS_FAT+0x57c>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
  8173fc:	e13ffd17 	ldw	r4,-12(fp)
  817400:	d0a74c17 	ldw	r2,-25296(gp)
  817404:	10800a17 	ldw	r2,40(r2)
  817408:	1007883a 	mov	r3,r2
  81740c:	e0bffd17 	ldw	r2,-12(fp)
  817410:	1885883a 	add	r2,r3,r2
  817414:	10800ac4 	addi	r2,r2,43
  817418:	10800023 	ldbuio	r2,0(r2)
  81741c:	1007883a 	mov	r3,r2
  817420:	008020f4 	movhi	r2,131
  817424:	10974c04 	addi	r2,r2,23856
  817428:	2085883a 	add	r2,r4,r2
  81742c:	10800b04 	addi	r2,r2,44
  817430:	10c000c5 	stb	r3,3(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
  817434:	e0bffd17 	ldw	r2,-12(fp)
  817438:	10800044 	addi	r2,r2,1
  81743c:	e0bffd15 	stw	r2,-12(fp)
  817440:	e0bffd17 	ldw	r2,-12(fp)
  817444:	108002d0 	cmplti	r2,r2,11
  817448:	103fec1e 	bne	r2,zero,8173fc <Check_for_DOS_FAT+0x538>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
  81744c:	e03ffd15 	stw	zero,-12(fp)
  817450:	00001106 	br	817498 <Check_for_DOS_FAT+0x5d4>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
  817454:	e13ffd17 	ldw	r4,-12(fp)
  817458:	d0a74c17 	ldw	r2,-25296(gp)
  81745c:	10800a17 	ldw	r2,40(r2)
  817460:	1007883a 	mov	r3,r2
  817464:	e0bffd17 	ldw	r2,-12(fp)
  817468:	1885883a 	add	r2,r3,r2
  81746c:	10800d84 	addi	r2,r2,54
  817470:	10800023 	ldbuio	r2,0(r2)
  817474:	1007883a 	mov	r3,r2
  817478:	008020f4 	movhi	r2,131
  81747c:	10974c04 	addi	r2,r2,23856
  817480:	2085883a 	add	r2,r4,r2
  817484:	10800e04 	addi	r2,r2,56
  817488:	10c00085 	stb	r3,2(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
  81748c:	e0bffd17 	ldw	r2,-12(fp)
  817490:	10800044 	addi	r2,r2,1
  817494:	e0bffd15 	stw	r2,-12(fp)
  817498:	e0bffd17 	ldw	r2,-12(fp)
  81749c:	10800210 	cmplti	r2,r2,8
  8174a0:	103fec1e 	bne	r2,zero,817454 <Check_for_DOS_FAT+0x590>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
  8174a4:	e03ffd15 	stw	zero,-12(fp)
  8174a8:	00000a06 	br	8174d4 <Check_for_DOS_FAT+0x610>
		{
			active_files[counter].in_use = false;
  8174ac:	e0bffd17 	ldw	r2,-12(fp)
  8174b0:	00c020f4 	movhi	r3,131
  8174b4:	18d76104 	addi	r3,r3,23940
  8174b8:	100491ba 	slli	r2,r2,6
  8174bc:	10c5883a 	add	r2,r2,r3
  8174c0:	10800f04 	addi	r2,r2,60
  8174c4:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
  8174c8:	e0bffd17 	ldw	r2,-12(fp)
  8174cc:	10800044 	addi	r2,r2,1
  8174d0:	e0bffd15 	stw	r2,-12(fp)
  8174d4:	e0bffd17 	ldw	r2,-12(fp)
  8174d8:	10800510 	cmplti	r2,r2,20
  8174dc:	103ff31e 	bne	r2,zero,8174ac <Check_for_DOS_FAT+0x5e8>
		{
			active_files[counter].in_use = false;
		}
		result = true;
  8174e0:	00800044 	movi	r2,1
  8174e4:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
  8174e8:	00000106 	br	8174f0 <Check_for_DOS_FAT+0x62c>
		}
		result = true;
	}
    else
    {
        result = false;
  8174ec:	e03ffe15 	stw	zero,-8(fp)
    }
	return result;
  8174f0:	e0bffe17 	ldw	r2,-8(fp)
}
  8174f4:	e037883a 	mov	sp,fp
  8174f8:	dfc00217 	ldw	ra,8(sp)
  8174fc:	df000117 	ldw	fp,4(sp)
  817500:	dc000017 	ldw	r16,0(sp)
  817504:	dec00304 	addi	sp,sp,12
  817508:	f800283a 	ret

0081750c <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  81750c:	defffc04 	addi	sp,sp,-16
  817510:	dfc00315 	stw	ra,12(sp)
  817514:	df000215 	stw	fp,8(sp)
  817518:	df000204 	addi	fp,sp,8
	bool result = false;
  81751c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
  817520:	08192480 	call	819248 <alt_up_sd_card_is_Present>
  817524:	1005003a 	cmpeq	r2,r2,zero
  817528:	1000301e 	bne	r2,zero,8175ec <Look_for_FAT16+0xe0>
	{
		short int csd_file_format = *CSD_register_w0;
  81752c:	d0a74617 	ldw	r2,-25320(gp)
  817530:	1080000b 	ldhu	r2,0(r2)
  817534:	e0bffe0d 	sth	r2,-8(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
  817538:	d0274a15 	stw	zero,-25304(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
  81753c:	d0274b15 	stw	zero,-25300(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
  817540:	e0bffe0f 	ldh	r2,-8(fp)
  817544:	1004803a 	cmplt	r2,r2,zero
  817548:	1000281e 	bne	r2,zero,8175ec <Look_for_FAT16+0xe0>
  81754c:	e0bffe0b 	ldhu	r2,-8(fp)
  817550:	10bfffcc 	andi	r2,r2,65535
  817554:	1083000c 	andi	r2,r2,3072
  817558:	10830020 	cmpeqi	r2,r2,3072
  81755c:	1000231e 	bne	r2,zero,8175ec <Look_for_FAT16+0xe0>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
  817560:	e0bffe0b 	ldhu	r2,-8(fp)
  817564:	10bfffcc 	andi	r2,r2,65535
  817568:	1083000c 	andi	r2,r2,3072
  81756c:	10810018 	cmpnei	r2,r2,1024
  817570:	1000031e 	bne	r2,zero,817580 <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  817574:	0009883a 	mov	r4,zero
  817578:	0816ec40 	call	816ec4 <Check_for_DOS_FAT>
  81757c:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
  817580:	e0bffe0b 	ldhu	r2,-8(fp)
  817584:	10bfffcc 	andi	r2,r2,65535
  817588:	1083000c 	andi	r2,r2,3072
  81758c:	1004c03a 	cmpne	r2,r2,zero
  817590:	1000061e 	bne	r2,zero,8175ac <Look_for_FAT16+0xa0>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
  817594:	08167d80 	call	8167d8 <Check_for_Master_Boot_Record>
  817598:	1005003a 	cmpeq	r2,r2,zero
  81759c:	1000031e 	bne	r2,zero,8175ac <Look_for_FAT16+0xa0>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
  8175a0:	d1274a17 	ldw	r4,-25304(gp)
  8175a4:	0816ec40 	call	816ec4 <Check_for_DOS_FAT>
  8175a8:	e0bfff15 	stw	r2,-4(fp)
				}                        
			}
			if (result == true)
  8175ac:	e0bfff17 	ldw	r2,-4(fp)
  8175b0:	10800058 	cmpnei	r2,r2,1
  8175b4:	10000d1e 	bne	r2,zero,8175ec <Look_for_FAT16+0xe0>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
  8175b8:	008020f4 	movhi	r2,131
  8175bc:	10974c04 	addi	r2,r2,23856
  8175c0:	10801083 	ldbu	r2,66(r2)
  8175c4:	10803fcc 	andi	r2,r2,255
  8175c8:	10800420 	cmpeqi	r2,r2,16
  8175cc:	1000021e 	bne	r2,zero,8175d8 <Look_for_FAT16+0xcc>
				{
					result = false;
  8175d0:	e03fff15 	stw	zero,-4(fp)
  8175d4:	00000506 	br	8175ec <Look_for_FAT16+0xe0>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  8175d8:	008020f4 	movhi	r2,131
  8175dc:	10974c04 	addi	r2,r2,23856
  8175e0:	1080058b 	ldhu	r2,22(r2)
  8175e4:	10bfffcc 	andi	r2,r2,65535
  8175e8:	d0a74b15 	stw	r2,-25300(gp)
				}
			}
		}
	}
	return result;
  8175ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8175f0:	e037883a 	mov	sp,fp
  8175f4:	dfc00117 	ldw	ra,4(sp)
  8175f8:	df000017 	ldw	fp,0(sp)
  8175fc:	dec00204 	addi	sp,sp,8
  817600:	f800283a 	ret

00817604 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  817604:	defffb04 	addi	sp,sp,-20
  817608:	dfc00415 	stw	ra,16(sp)
  81760c:	df000315 	stw	fp,12(sp)
  817610:	df000304 	addi	fp,sp,12
  817614:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
  817618:	e13fff17 	ldw	r4,-4(fp)
  81761c:	0803b440 	call	803b44 <strlen>
  817620:	e0bffd15 	stw	r2,-12(fp)
    
    for (index = 0; index < length; index++)
  817624:	e03ffe15 	stw	zero,-8(fp)
  817628:	00002206 	br	8176b4 <filename_to_upper_case+0xb0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  81762c:	e0bffe17 	ldw	r2,-8(fp)
  817630:	1007883a 	mov	r3,r2
  817634:	e0bfff17 	ldw	r2,-4(fp)
  817638:	1885883a 	add	r2,r3,r2
  81763c:	10800003 	ldbu	r2,0(r2)
  817640:	10803fcc 	andi	r2,r2,255
  817644:	1080201c 	xori	r2,r2,128
  817648:	10bfe004 	addi	r2,r2,-128
  81764c:	10801850 	cmplti	r2,r2,97
  817650:	1000151e 	bne	r2,zero,8176a8 <filename_to_upper_case+0xa4>
  817654:	e0bffe17 	ldw	r2,-8(fp)
  817658:	1007883a 	mov	r3,r2
  81765c:	e0bfff17 	ldw	r2,-4(fp)
  817660:	1885883a 	add	r2,r3,r2
  817664:	10800003 	ldbu	r2,0(r2)
  817668:	10803fcc 	andi	r2,r2,255
  81766c:	1080201c 	xori	r2,r2,128
  817670:	10bfe004 	addi	r2,r2,-128
  817674:	10801ec8 	cmpgei	r2,r2,123
  817678:	10000b1e 	bne	r2,zero,8176a8 <filename_to_upper_case+0xa4>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  81767c:	e0bffe17 	ldw	r2,-8(fp)
  817680:	1007883a 	mov	r3,r2
  817684:	e0bfff17 	ldw	r2,-4(fp)
  817688:	1889883a 	add	r4,r3,r2
  81768c:	e0bffe17 	ldw	r2,-8(fp)
  817690:	1007883a 	mov	r3,r2
  817694:	e0bfff17 	ldw	r2,-4(fp)
  817698:	1885883a 	add	r2,r3,r2
  81769c:	10800003 	ldbu	r2,0(r2)
  8176a0:	10bff804 	addi	r2,r2,-32
  8176a4:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  8176a8:	e0bffe17 	ldw	r2,-8(fp)
  8176ac:	10800044 	addi	r2,r2,1
  8176b0:	e0bffe15 	stw	r2,-8(fp)
  8176b4:	e0fffe17 	ldw	r3,-8(fp)
  8176b8:	e0bffd17 	ldw	r2,-12(fp)
  8176bc:	18bfdb16 	blt	r3,r2,81762c <filename_to_upper_case+0x28>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
  8176c0:	e037883a 	mov	sp,fp
  8176c4:	dfc00117 	ldw	ra,4(sp)
  8176c8:	df000017 	ldw	fp,0(sp)
  8176cc:	dec00204 	addi	sp,sp,8
  8176d0:	f800283a 	ret

008176d4 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  8176d4:	defff804 	addi	sp,sp,-32
  8176d8:	dfc00715 	stw	ra,28(sp)
  8176dc:	df000615 	stw	fp,24(sp)
  8176e0:	df000604 	addi	fp,sp,24
  8176e4:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
  8176e8:	e13fff17 	ldw	r4,-4(fp)
  8176ec:	0803b440 	call	803b44 <strlen>
  8176f0:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
  8176f4:	00bfffc4 	movi	r2,-1
  8176f8:	e0bffc15 	stw	r2,-16(fp)
    int last_period = -1;
  8176fc:	00bfffc4 	movi	r2,-1
  817700:	e0bffb15 	stw	r2,-20(fp)
    bool result = true;
  817704:	00800044 	movi	r2,1
  817708:	e0bffa15 	stw	r2,-24(fp)
    
    for(index = 0; index < length; index++)
  81770c:	e03ffd15 	stw	zero,-12(fp)
  817710:	00007606 	br	8178ec <check_file_name_for_FAT16_compliance+0x218>
    {
        if ((file_name[index] == ' ') ||
  817714:	e0bffd17 	ldw	r2,-12(fp)
  817718:	1007883a 	mov	r3,r2
  81771c:	e0bfff17 	ldw	r2,-4(fp)
  817720:	1885883a 	add	r2,r3,r2
  817724:	10800003 	ldbu	r2,0(r2)
  817728:	10803fcc 	andi	r2,r2,255
  81772c:	1080201c 	xori	r2,r2,128
  817730:	10bfe004 	addi	r2,r2,-128
  817734:	10800820 	cmpeqi	r2,r2,32
  817738:	1000431e 	bne	r2,zero,817848 <check_file_name_for_FAT16_compliance+0x174>
  81773c:	e0bffd17 	ldw	r2,-12(fp)
  817740:	10ffffc4 	addi	r3,r2,-1
  817744:	e0bffc17 	ldw	r2,-16(fp)
  817748:	1880141e 	bne	r3,r2,81779c <check_file_name_for_FAT16_compliance+0xc8>
  81774c:	e0bffd17 	ldw	r2,-12(fp)
  817750:	1007883a 	mov	r3,r2
  817754:	e0bfff17 	ldw	r2,-4(fp)
  817758:	1885883a 	add	r2,r3,r2
  81775c:	10800003 	ldbu	r2,0(r2)
  817760:	10803fcc 	andi	r2,r2,255
  817764:	1080201c 	xori	r2,r2,128
  817768:	10bfe004 	addi	r2,r2,-128
  81776c:	10801720 	cmpeqi	r2,r2,92
  817770:	1000351e 	bne	r2,zero,817848 <check_file_name_for_FAT16_compliance+0x174>
  817774:	e0bffd17 	ldw	r2,-12(fp)
  817778:	1007883a 	mov	r3,r2
  81777c:	e0bfff17 	ldw	r2,-4(fp)
  817780:	1885883a 	add	r2,r3,r2
  817784:	10800003 	ldbu	r2,0(r2)
  817788:	10803fcc 	andi	r2,r2,255
  81778c:	1080201c 	xori	r2,r2,128
  817790:	10bfe004 	addi	r2,r2,-128
  817794:	10800be0 	cmpeqi	r2,r2,47
  817798:	10002b1e 	bne	r2,zero,817848 <check_file_name_for_FAT16_compliance+0x174>
  81779c:	e0fffd17 	ldw	r3,-12(fp)
  8177a0:	e0bffb17 	ldw	r2,-20(fp)
  8177a4:	1885c83a 	sub	r2,r3,r2
  8177a8:	10800258 	cmpnei	r2,r2,9
  8177ac:	10000a1e 	bne	r2,zero,8177d8 <check_file_name_for_FAT16_compliance+0x104>
  8177b0:	e0bffd17 	ldw	r2,-12(fp)
  8177b4:	1007883a 	mov	r3,r2
  8177b8:	e0bfff17 	ldw	r2,-4(fp)
  8177bc:	1885883a 	add	r2,r3,r2
  8177c0:	10800003 	ldbu	r2,0(r2)
  8177c4:	10803fcc 	andi	r2,r2,255
  8177c8:	1080201c 	xori	r2,r2,128
  8177cc:	10bfe004 	addi	r2,r2,-128
  8177d0:	10800b98 	cmpnei	r2,r2,46
  8177d4:	10001c1e 	bne	r2,zero,817848 <check_file_name_for_FAT16_compliance+0x174>
  8177d8:	e0fffc17 	ldw	r3,-16(fp)
  8177dc:	e0bffb17 	ldw	r2,-20(fp)
  8177e0:	18801b26 	beq	r3,r2,817850 <check_file_name_for_FAT16_compliance+0x17c>
  8177e4:	e0fffd17 	ldw	r3,-12(fp)
  8177e8:	e0bffb17 	ldw	r2,-20(fp)
  8177ec:	1885c83a 	sub	r2,r3,r2
  8177f0:	10800110 	cmplti	r2,r2,4
  8177f4:	1000161e 	bne	r2,zero,817850 <check_file_name_for_FAT16_compliance+0x17c>
  8177f8:	e0bffd17 	ldw	r2,-12(fp)
  8177fc:	1007883a 	mov	r3,r2
  817800:	e0bfff17 	ldw	r2,-4(fp)
  817804:	1885883a 	add	r2,r3,r2
  817808:	10800003 	ldbu	r2,0(r2)
  81780c:	10803fcc 	andi	r2,r2,255
  817810:	1080201c 	xori	r2,r2,128
  817814:	10bfe004 	addi	r2,r2,-128
  817818:	10801720 	cmpeqi	r2,r2,92
  81781c:	10000c1e 	bne	r2,zero,817850 <check_file_name_for_FAT16_compliance+0x17c>
  817820:	e0bffd17 	ldw	r2,-12(fp)
  817824:	1007883a 	mov	r3,r2
  817828:	e0bfff17 	ldw	r2,-4(fp)
  81782c:	1885883a 	add	r2,r3,r2
  817830:	10800003 	ldbu	r2,0(r2)
  817834:	10803fcc 	andi	r2,r2,255
  817838:	1080201c 	xori	r2,r2,128
  81783c:	10bfe004 	addi	r2,r2,-128
  817840:	10800be0 	cmpeqi	r2,r2,47
  817844:	1000021e 	bne	r2,zero,817850 <check_file_name_for_FAT16_compliance+0x17c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
             (file_name[index] != '\\') && (file_name[index] != '/'))
           )
        {
            result = false;
  817848:	e03ffa15 	stw	zero,-24(fp)
            break;
  81784c:	00002a06 	br	8178f8 <check_file_name_for_FAT16_compliance+0x224>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
  817850:	e0bffd17 	ldw	r2,-12(fp)
  817854:	1007883a 	mov	r3,r2
  817858:	e0bfff17 	ldw	r2,-4(fp)
  81785c:	1885883a 	add	r2,r3,r2
  817860:	10800003 	ldbu	r2,0(r2)
  817864:	10803fcc 	andi	r2,r2,255
  817868:	1080201c 	xori	r2,r2,128
  81786c:	10bfe004 	addi	r2,r2,-128
  817870:	10801720 	cmpeqi	r2,r2,92
  817874:	10000a1e 	bne	r2,zero,8178a0 <check_file_name_for_FAT16_compliance+0x1cc>
  817878:	e0bffd17 	ldw	r2,-12(fp)
  81787c:	1007883a 	mov	r3,r2
  817880:	e0bfff17 	ldw	r2,-4(fp)
  817884:	1885883a 	add	r2,r3,r2
  817888:	10800003 	ldbu	r2,0(r2)
  81788c:	10803fcc 	andi	r2,r2,255
  817890:	1080201c 	xori	r2,r2,128
  817894:	10bfe004 	addi	r2,r2,-128
  817898:	10800bd8 	cmpnei	r2,r2,47
  81789c:	1000041e 	bne	r2,zero,8178b0 <check_file_name_for_FAT16_compliance+0x1dc>
        {
            last_period = index;
  8178a0:	e0bffd17 	ldw	r2,-12(fp)
  8178a4:	e0bffb15 	stw	r2,-20(fp)
            last_dir_break_position = index;
  8178a8:	e0bffd17 	ldw	r2,-12(fp)
  8178ac:	e0bffc15 	stw	r2,-16(fp)
        }
        if (file_name[index] == '.')
  8178b0:	e0bffd17 	ldw	r2,-12(fp)
  8178b4:	1007883a 	mov	r3,r2
  8178b8:	e0bfff17 	ldw	r2,-4(fp)
  8178bc:	1885883a 	add	r2,r3,r2
  8178c0:	10800003 	ldbu	r2,0(r2)
  8178c4:	10803fcc 	andi	r2,r2,255
  8178c8:	1080201c 	xori	r2,r2,128
  8178cc:	10bfe004 	addi	r2,r2,-128
  8178d0:	10800b98 	cmpnei	r2,r2,46
  8178d4:	1000021e 	bne	r2,zero,8178e0 <check_file_name_for_FAT16_compliance+0x20c>
        {
            last_period = index;
  8178d8:	e0bffd17 	ldw	r2,-12(fp)
  8178dc:	e0bffb15 	stw	r2,-20(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  8178e0:	e0bffd17 	ldw	r2,-12(fp)
  8178e4:	10800044 	addi	r2,r2,1
  8178e8:	e0bffd15 	stw	r2,-12(fp)
  8178ec:	e0fffd17 	ldw	r3,-12(fp)
  8178f0:	e0bffe17 	ldw	r2,-8(fp)
  8178f4:	18bf8716 	blt	r3,r2,817714 <check_file_name_for_FAT16_compliance+0x40>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  8178f8:	e0fffe17 	ldw	r3,-8(fp)
  8178fc:	e0bfff17 	ldw	r2,-4(fp)
  817900:	1885883a 	add	r2,r3,r2
  817904:	10bfffc4 	addi	r2,r2,-1
  817908:	10800003 	ldbu	r2,0(r2)
  81790c:	10803fcc 	andi	r2,r2,255
  817910:	1080201c 	xori	r2,r2,128
  817914:	10bfe004 	addi	r2,r2,-128
  817918:	10801720 	cmpeqi	r2,r2,92
  81791c:	10000a1e 	bne	r2,zero,817948 <check_file_name_for_FAT16_compliance+0x274>
  817920:	e0fffe17 	ldw	r3,-8(fp)
  817924:	e0bfff17 	ldw	r2,-4(fp)
  817928:	1885883a 	add	r2,r3,r2
  81792c:	10bfffc4 	addi	r2,r2,-1
  817930:	10800003 	ldbu	r2,0(r2)
  817934:	10803fcc 	andi	r2,r2,255
  817938:	1080201c 	xori	r2,r2,128
  81793c:	10bfe004 	addi	r2,r2,-128
  817940:	10800bd8 	cmpnei	r2,r2,47
  817944:	1000011e 	bne	r2,zero,81794c <check_file_name_for_FAT16_compliance+0x278>
    {
        result = false;
  817948:	e03ffa15 	stw	zero,-24(fp)
    }
    return result;
  81794c:	e0bffa17 	ldw	r2,-24(fp)
}
  817950:	e037883a 	mov	sp,fp
  817954:	dfc00117 	ldw	ra,4(sp)
  817958:	df000017 	ldw	fp,0(sp)
  81795c:	dec00204 	addi	sp,sp,8
  817960:	f800283a 	ret

00817964 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  817964:	defffb04 	addi	sp,sp,-20
  817968:	dfc00415 	stw	ra,16(sp)
  81796c:	df000315 	stw	fp,12(sp)
  817970:	df000304 	addi	fp,sp,12
  817974:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
  817978:	e03ffe15 	stw	zero,-8(fp)
    int length = strlen(name);
  81797c:	e13fff17 	ldw	r4,-4(fp)
  817980:	0803b440 	call	803b44 <strlen>
  817984:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
  817988:	e03ffe15 	stw	zero,-8(fp)
  81798c:	00001706 	br	8179ec <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  817990:	e0bffe17 	ldw	r2,-8(fp)
  817994:	1007883a 	mov	r3,r2
  817998:	e0bfff17 	ldw	r2,-4(fp)
  81799c:	1885883a 	add	r2,r3,r2
  8179a0:	10800003 	ldbu	r2,0(r2)
  8179a4:	10803fcc 	andi	r2,r2,255
  8179a8:	1080201c 	xori	r2,r2,128
  8179ac:	10bfe004 	addi	r2,r2,-128
  8179b0:	10801720 	cmpeqi	r2,r2,92
  8179b4:	1000101e 	bne	r2,zero,8179f8 <get_dir_divider_location+0x94>
  8179b8:	e0bffe17 	ldw	r2,-8(fp)
  8179bc:	1007883a 	mov	r3,r2
  8179c0:	e0bfff17 	ldw	r2,-4(fp)
  8179c4:	1885883a 	add	r2,r3,r2
  8179c8:	10800003 	ldbu	r2,0(r2)
  8179cc:	10803fcc 	andi	r2,r2,255
  8179d0:	1080201c 	xori	r2,r2,128
  8179d4:	10bfe004 	addi	r2,r2,-128
  8179d8:	10800be0 	cmpeqi	r2,r2,47
  8179dc:	1000061e 	bne	r2,zero,8179f8 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  8179e0:	e0bffe17 	ldw	r2,-8(fp)
  8179e4:	10800044 	addi	r2,r2,1
  8179e8:	e0bffe15 	stw	r2,-8(fp)
  8179ec:	e0fffe17 	ldw	r3,-8(fp)
  8179f0:	e0bffd17 	ldw	r2,-12(fp)
  8179f4:	18bfe616 	blt	r3,r2,817990 <get_dir_divider_location+0x2c>
        {
            break;
        }
    }
    
    if (index == length)
  8179f8:	e0fffe17 	ldw	r3,-8(fp)
  8179fc:	e0bffd17 	ldw	r2,-12(fp)
  817a00:	1880021e 	bne	r3,r2,817a0c <get_dir_divider_location+0xa8>
    {
        index = -1;
  817a04:	00bfffc4 	movi	r2,-1
  817a08:	e0bffe15 	stw	r2,-8(fp)
    }
    
    return index;
  817a0c:	e0bffe17 	ldw	r2,-8(fp)
}
  817a10:	e037883a 	mov	sp,fp
  817a14:	dfc00117 	ldw	ra,4(sp)
  817a18:	df000017 	ldw	fp,0(sp)
  817a1c:	dec00204 	addi	sp,sp,8
  817a20:	f800283a 	ret

00817a24 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
  817a24:	defff604 	addi	sp,sp,-40
  817a28:	df000915 	stw	fp,36(sp)
  817a2c:	df000904 	addi	fp,sp,36
  817a30:	e13ff915 	stw	r4,-28(fp)
  817a34:	e17ffa15 	stw	r5,-24(fp)
  817a38:	e1bffb15 	stw	r6,-20(fp)
    bool match = true;
  817a3c:	00800044 	movi	r2,1
  817a40:	e0bff815 	stw	r2,-32(fp)
	int index;

    for (index = 0; index < 8; index++)
  817a44:	e03ff715 	stw	zero,-36(fp)
  817a48:	00005006 	br	817b8c <match_file_record_to_name_ext+0x168>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  817a4c:	e0fff717 	ldw	r3,-36(fp)
  817a50:	e0bff917 	ldw	r2,-28(fp)
  817a54:	10c5883a 	add	r2,r2,r3
  817a58:	10800003 	ldbu	r2,0(r2)
  817a5c:	10803fcc 	andi	r2,r2,255
  817a60:	10801870 	cmpltui	r2,r2,97
  817a64:	1000111e 	bne	r2,zero,817aac <match_file_record_to_name_ext+0x88>
  817a68:	e0fff717 	ldw	r3,-36(fp)
  817a6c:	e0bff917 	ldw	r2,-28(fp)
  817a70:	10c5883a 	add	r2,r2,r3
  817a74:	10800003 	ldbu	r2,0(r2)
  817a78:	10803fcc 	andi	r2,r2,255
  817a7c:	10801ee8 	cmpgeui	r2,r2,123
  817a80:	10000a1e 	bne	r2,zero,817aac <match_file_record_to_name_ext+0x88>
  817a84:	e0fff717 	ldw	r3,-36(fp)
  817a88:	e0bff917 	ldw	r2,-28(fp)
  817a8c:	10c5883a 	add	r2,r2,r3
  817a90:	10800003 	ldbu	r2,0(r2)
  817a94:	10bff804 	addi	r2,r2,-32
  817a98:	10803fcc 	andi	r2,r2,255
  817a9c:	1080201c 	xori	r2,r2,128
  817aa0:	10bfe004 	addi	r2,r2,-128
  817aa4:	e0bfff15 	stw	r2,-4(fp)
  817aa8:	00000806 	br	817acc <match_file_record_to_name_ext+0xa8>
  817aac:	e0fff717 	ldw	r3,-36(fp)
  817ab0:	e0bff917 	ldw	r2,-28(fp)
  817ab4:	10c5883a 	add	r2,r2,r3
  817ab8:	10800003 	ldbu	r2,0(r2)
  817abc:	10803fcc 	andi	r2,r2,255
  817ac0:	1080201c 	xori	r2,r2,128
  817ac4:	10bfe004 	addi	r2,r2,-128
  817ac8:	e0bfff15 	stw	r2,-4(fp)
  817acc:	e0bff717 	ldw	r2,-36(fp)
  817ad0:	1007883a 	mov	r3,r2
  817ad4:	e0bffa17 	ldw	r2,-24(fp)
  817ad8:	1885883a 	add	r2,r3,r2
  817adc:	10800003 	ldbu	r2,0(r2)
  817ae0:	10803fcc 	andi	r2,r2,255
  817ae4:	1080201c 	xori	r2,r2,128
  817ae8:	10bfe004 	addi	r2,r2,-128
  817aec:	10801850 	cmplti	r2,r2,97
  817af0:	1000151e 	bne	r2,zero,817b48 <match_file_record_to_name_ext+0x124>
  817af4:	e0bff717 	ldw	r2,-36(fp)
  817af8:	1007883a 	mov	r3,r2
  817afc:	e0bffa17 	ldw	r2,-24(fp)
  817b00:	1885883a 	add	r2,r3,r2
  817b04:	10800003 	ldbu	r2,0(r2)
  817b08:	10803fcc 	andi	r2,r2,255
  817b0c:	1080201c 	xori	r2,r2,128
  817b10:	10bfe004 	addi	r2,r2,-128
  817b14:	10801ec8 	cmpgei	r2,r2,123
  817b18:	10000b1e 	bne	r2,zero,817b48 <match_file_record_to_name_ext+0x124>
  817b1c:	e0bff717 	ldw	r2,-36(fp)
  817b20:	1007883a 	mov	r3,r2
  817b24:	e0bffa17 	ldw	r2,-24(fp)
  817b28:	1885883a 	add	r2,r3,r2
  817b2c:	10800003 	ldbu	r2,0(r2)
  817b30:	10bff804 	addi	r2,r2,-32
  817b34:	10803fcc 	andi	r2,r2,255
  817b38:	1080201c 	xori	r2,r2,128
  817b3c:	10bfe004 	addi	r2,r2,-128
  817b40:	e0bffe15 	stw	r2,-8(fp)
  817b44:	00000906 	br	817b6c <match_file_record_to_name_ext+0x148>
  817b48:	e0bff717 	ldw	r2,-36(fp)
  817b4c:	1007883a 	mov	r3,r2
  817b50:	e0bffa17 	ldw	r2,-24(fp)
  817b54:	1885883a 	add	r2,r3,r2
  817b58:	10800003 	ldbu	r2,0(r2)
  817b5c:	10803fcc 	andi	r2,r2,255
  817b60:	1080201c 	xori	r2,r2,128
  817b64:	10bfe004 	addi	r2,r2,-128
  817b68:	e0bffe15 	stw	r2,-8(fp)
  817b6c:	e0bfff17 	ldw	r2,-4(fp)
  817b70:	e0fffe17 	ldw	r3,-8(fp)
  817b74:	10c00226 	beq	r2,r3,817b80 <match_file_record_to_name_ext+0x15c>
        {
            match = false;
  817b78:	e03ff815 	stw	zero,-32(fp)
			break;
  817b7c:	00000606 	br	817b98 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
  817b80:	e0bff717 	ldw	r2,-36(fp)
  817b84:	10800044 	addi	r2,r2,1
  817b88:	e0bff715 	stw	r2,-36(fp)
  817b8c:	e0bff717 	ldw	r2,-36(fp)
  817b90:	10800210 	cmplti	r2,r2,8
  817b94:	103fad1e 	bne	r2,zero,817a4c <match_file_record_to_name_ext+0x28>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
  817b98:	e03ff715 	stw	zero,-36(fp)
  817b9c:	00005406 	br	817cf0 <match_file_record_to_name_ext+0x2cc>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  817ba0:	e0fff717 	ldw	r3,-36(fp)
  817ba4:	e0bff917 	ldw	r2,-28(fp)
  817ba8:	1885883a 	add	r2,r3,r2
  817bac:	10800204 	addi	r2,r2,8
  817bb0:	10800003 	ldbu	r2,0(r2)
  817bb4:	10803fcc 	andi	r2,r2,255
  817bb8:	10801870 	cmpltui	r2,r2,97
  817bbc:	1000131e 	bne	r2,zero,817c0c <match_file_record_to_name_ext+0x1e8>
  817bc0:	e0fff717 	ldw	r3,-36(fp)
  817bc4:	e0bff917 	ldw	r2,-28(fp)
  817bc8:	1885883a 	add	r2,r3,r2
  817bcc:	10800204 	addi	r2,r2,8
  817bd0:	10800003 	ldbu	r2,0(r2)
  817bd4:	10803fcc 	andi	r2,r2,255
  817bd8:	10801ee8 	cmpgeui	r2,r2,123
  817bdc:	10000b1e 	bne	r2,zero,817c0c <match_file_record_to_name_ext+0x1e8>
  817be0:	e0fff717 	ldw	r3,-36(fp)
  817be4:	e0bff917 	ldw	r2,-28(fp)
  817be8:	1885883a 	add	r2,r3,r2
  817bec:	10800204 	addi	r2,r2,8
  817bf0:	10800003 	ldbu	r2,0(r2)
  817bf4:	10bff804 	addi	r2,r2,-32
  817bf8:	10803fcc 	andi	r2,r2,255
  817bfc:	1080201c 	xori	r2,r2,128
  817c00:	10bfe004 	addi	r2,r2,-128
  817c04:	e0bffd15 	stw	r2,-12(fp)
  817c08:	00000906 	br	817c30 <match_file_record_to_name_ext+0x20c>
  817c0c:	e0fff717 	ldw	r3,-36(fp)
  817c10:	e0bff917 	ldw	r2,-28(fp)
  817c14:	1885883a 	add	r2,r3,r2
  817c18:	10800204 	addi	r2,r2,8
  817c1c:	10800003 	ldbu	r2,0(r2)
  817c20:	10803fcc 	andi	r2,r2,255
  817c24:	1080201c 	xori	r2,r2,128
  817c28:	10bfe004 	addi	r2,r2,-128
  817c2c:	e0bffd15 	stw	r2,-12(fp)
  817c30:	e0bff717 	ldw	r2,-36(fp)
  817c34:	1007883a 	mov	r3,r2
  817c38:	e0bffb17 	ldw	r2,-20(fp)
  817c3c:	1885883a 	add	r2,r3,r2
  817c40:	10800003 	ldbu	r2,0(r2)
  817c44:	10803fcc 	andi	r2,r2,255
  817c48:	1080201c 	xori	r2,r2,128
  817c4c:	10bfe004 	addi	r2,r2,-128
  817c50:	10801850 	cmplti	r2,r2,97
  817c54:	1000151e 	bne	r2,zero,817cac <match_file_record_to_name_ext+0x288>
  817c58:	e0bff717 	ldw	r2,-36(fp)
  817c5c:	1007883a 	mov	r3,r2
  817c60:	e0bffb17 	ldw	r2,-20(fp)
  817c64:	1885883a 	add	r2,r3,r2
  817c68:	10800003 	ldbu	r2,0(r2)
  817c6c:	10803fcc 	andi	r2,r2,255
  817c70:	1080201c 	xori	r2,r2,128
  817c74:	10bfe004 	addi	r2,r2,-128
  817c78:	10801ec8 	cmpgei	r2,r2,123
  817c7c:	10000b1e 	bne	r2,zero,817cac <match_file_record_to_name_ext+0x288>
  817c80:	e0bff717 	ldw	r2,-36(fp)
  817c84:	1007883a 	mov	r3,r2
  817c88:	e0bffb17 	ldw	r2,-20(fp)
  817c8c:	1885883a 	add	r2,r3,r2
  817c90:	10800003 	ldbu	r2,0(r2)
  817c94:	10bff804 	addi	r2,r2,-32
  817c98:	10803fcc 	andi	r2,r2,255
  817c9c:	1080201c 	xori	r2,r2,128
  817ca0:	10bfe004 	addi	r2,r2,-128
  817ca4:	e0bffc15 	stw	r2,-16(fp)
  817ca8:	00000906 	br	817cd0 <match_file_record_to_name_ext+0x2ac>
  817cac:	e0bff717 	ldw	r2,-36(fp)
  817cb0:	1007883a 	mov	r3,r2
  817cb4:	e0bffb17 	ldw	r2,-20(fp)
  817cb8:	1885883a 	add	r2,r3,r2
  817cbc:	10800003 	ldbu	r2,0(r2)
  817cc0:	10803fcc 	andi	r2,r2,255
  817cc4:	1080201c 	xori	r2,r2,128
  817cc8:	10bfe004 	addi	r2,r2,-128
  817ccc:	e0bffc15 	stw	r2,-16(fp)
  817cd0:	e0bffd17 	ldw	r2,-12(fp)
  817cd4:	e0fffc17 	ldw	r3,-16(fp)
  817cd8:	10c00226 	beq	r2,r3,817ce4 <match_file_record_to_name_ext+0x2c0>
        {
            match = false;
  817cdc:	e03ff815 	stw	zero,-32(fp)
			break;
  817ce0:	00000606 	br	817cfc <match_file_record_to_name_ext+0x2d8>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
  817ce4:	e0bff717 	ldw	r2,-36(fp)
  817ce8:	10800044 	addi	r2,r2,1
  817cec:	e0bff715 	stw	r2,-36(fp)
  817cf0:	e0bff717 	ldw	r2,-36(fp)
  817cf4:	108000d0 	cmplti	r2,r2,3
  817cf8:	103fa91e 	bne	r2,zero,817ba0 <match_file_record_to_name_ext+0x17c>
        {
            match = false;
			break;
        }
    }
	return match;
  817cfc:	e0bff817 	ldw	r2,-32(fp)
}
  817d00:	e037883a 	mov	sp,fp
  817d04:	df000017 	ldw	fp,0(sp)
  817d08:	dec00104 	addi	sp,sp,4
  817d0c:	f800283a 	ret

00817d10 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  817d10:	deffe604 	addi	sp,sp,-104
  817d14:	dfc01915 	stw	ra,100(sp)
  817d18:	df001815 	stw	fp,96(sp)
  817d1c:	df001804 	addi	fp,sp,96
  817d20:	e13ffc15 	stw	r4,-16(fp)
  817d24:	e17ffd15 	stw	r5,-12(fp)
  817d28:	e1bffe15 	stw	r6,-8(fp)
    bool result = false;
  817d2c:	e03ff715 	stw	zero,-36(fp)
    int home_dir_cluster = 0;
  817d30:	e03ff615 	stw	zero,-40(fp)
    int location, index;
    int start_location = 0;
  817d34:	e03ff315 	stw	zero,-52(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
  817d38:	e13ffc17 	ldw	r4,-16(fp)
  817d3c:	08179640 	call	817964 <get_dir_divider_location>
  817d40:	e0bff515 	stw	r2,-44(fp)
    while (location > 0)
  817d44:	00012206 	br	8181d0 <get_home_directory_cluster_for_file+0x4c0>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  817d48:	00800804 	movi	r2,32
  817d4c:	e0bff805 	stb	r2,-32(fp)
  817d50:	00800804 	movi	r2,32
  817d54:	e0bff845 	stb	r2,-31(fp)
  817d58:	00800804 	movi	r2,32
  817d5c:	e0bff885 	stb	r2,-30(fp)
  817d60:	00800804 	movi	r2,32
  817d64:	e0bff8c5 	stb	r2,-29(fp)
  817d68:	00800804 	movi	r2,32
  817d6c:	e0bff905 	stb	r2,-28(fp)
  817d70:	00800804 	movi	r2,32
  817d74:	e0bff945 	stb	r2,-27(fp)
  817d78:	00800804 	movi	r2,32
  817d7c:	e0bff985 	stb	r2,-26(fp)
  817d80:	00800804 	movi	r2,32
  817d84:	e0bff9c5 	stb	r2,-25(fp)
        char extension[3] = { ' ', ' ', ' ' };
  817d88:	00800804 	movi	r2,32
  817d8c:	e0bffa05 	stb	r2,-24(fp)
  817d90:	00800804 	movi	r2,32
  817d94:	e0bffa45 	stb	r2,-23(fp)
  817d98:	00800804 	movi	r2,32
  817d9c:	e0bffa85 	stb	r2,-22(fp)
        int ext_index = -1;
  817da0:	00bfffc4 	movi	r2,-1
  817da4:	e0bff215 	stw	r2,-56(fp)
        int new_cluster = home_dir_cluster;
  817da8:	e0bff617 	ldw	r2,-40(fp)
  817dac:	e0bff115 	stw	r2,-60(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
  817db0:	e03ff415 	stw	zero,-48(fp)
  817db4:	00002e06 	br	817e70 <get_home_directory_cluster_for_file+0x160>
        {
            if (file_name[index+start_location] == '.')
  817db8:	e0fff417 	ldw	r3,-48(fp)
  817dbc:	e0bff317 	ldw	r2,-52(fp)
  817dc0:	1885883a 	add	r2,r3,r2
  817dc4:	1007883a 	mov	r3,r2
  817dc8:	e0bffc17 	ldw	r2,-16(fp)
  817dcc:	1885883a 	add	r2,r3,r2
  817dd0:	10800003 	ldbu	r2,0(r2)
  817dd4:	10803fcc 	andi	r2,r2,255
  817dd8:	1080201c 	xori	r2,r2,128
  817ddc:	10bfe004 	addi	r2,r2,-128
  817de0:	10800b98 	cmpnei	r2,r2,46
  817de4:	1000031e 	bne	r2,zero,817df4 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
  817de8:	e0bff417 	ldw	r2,-48(fp)
  817dec:	e0bff215 	stw	r2,-56(fp)
  817df0:	00001c06 	br	817e64 <get_home_directory_cluster_for_file+0x154>
            }
            else if (ext_index < 0)
  817df4:	e0bff217 	ldw	r2,-56(fp)
  817df8:	1004403a 	cmpge	r2,r2,zero
  817dfc:	10000c1e 	bne	r2,zero,817e30 <get_home_directory_cluster_for_file+0x120>
            {
                name[index] = file_name[index+start_location];
  817e00:	e13ff417 	ldw	r4,-48(fp)
  817e04:	e0fff417 	ldw	r3,-48(fp)
  817e08:	e0bff317 	ldw	r2,-52(fp)
  817e0c:	1885883a 	add	r2,r3,r2
  817e10:	1007883a 	mov	r3,r2
  817e14:	e0bffc17 	ldw	r2,-16(fp)
  817e18:	1885883a 	add	r2,r3,r2
  817e1c:	10c00003 	ldbu	r3,0(r2)
  817e20:	e0bff804 	addi	r2,fp,-32
  817e24:	1105883a 	add	r2,r2,r4
  817e28:	10c00005 	stb	r3,0(r2)
  817e2c:	00000d06 	br	817e64 <get_home_directory_cluster_for_file+0x154>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
  817e30:	e0fff417 	ldw	r3,-48(fp)
  817e34:	e0bff217 	ldw	r2,-56(fp)
  817e38:	1889c83a 	sub	r4,r3,r2
  817e3c:	e0fff417 	ldw	r3,-48(fp)
  817e40:	e0bff317 	ldw	r2,-52(fp)
  817e44:	1885883a 	add	r2,r3,r2
  817e48:	1007883a 	mov	r3,r2
  817e4c:	e0bffc17 	ldw	r2,-16(fp)
  817e50:	1885883a 	add	r2,r3,r2
  817e54:	10c00003 	ldbu	r3,0(r2)
  817e58:	e0bffa04 	addi	r2,fp,-24
  817e5c:	1105883a 	add	r2,r2,r4
  817e60:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
  817e64:	e0bff417 	ldw	r2,-48(fp)
  817e68:	10800044 	addi	r2,r2,1
  817e6c:	e0bff415 	stw	r2,-48(fp)
  817e70:	e0fff417 	ldw	r3,-48(fp)
  817e74:	e0bff517 	ldw	r2,-44(fp)
  817e78:	18bfcf16 	blt	r3,r2,817db8 <get_home_directory_cluster_for_file+0xa8>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
  817e7c:	e0bff617 	ldw	r2,-40(fp)
  817e80:	1004c03a 	cmpne	r2,r2,zero
  817e84:	1000551e 	bne	r2,zero,817fdc <get_home_directory_cluster_for_file+0x2cc>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  817e88:	008020f4 	movhi	r2,131
  817e8c:	10974c04 	addi	r2,r2,23856
  817e90:	1080050b 	ldhu	r2,20(r2)
  817e94:	10bfffcc 	andi	r2,r2,65535
  817e98:	1008917a 	slli	r4,r2,5
  817e9c:	008020f4 	movhi	r2,131
  817ea0:	10974c04 	addi	r2,r2,23856
  817ea4:	1080030b 	ldhu	r2,12(r2)
  817ea8:	117fffcc 	andi	r5,r2,65535
  817eac:	080ba9c0 	call	80ba9c <__divsi3>
  817eb0:	e0bff015 	stw	r2,-64(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  817eb4:	e03fef15 	stw	zero,-68(fp)
  817eb8:	00003806 	br	817f9c <get_home_directory_cluster_for_file+0x28c>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
  817ebc:	008020f4 	movhi	r2,131
  817ec0:	10974c04 	addi	r2,r2,23856
  817ec4:	10c01317 	ldw	r3,76(r2)
  817ec8:	e0bfef17 	ldw	r2,-68(fp)
  817ecc:	1885883a 	add	r2,r3,r2
  817ed0:	1009883a 	mov	r4,r2
  817ed4:	d1674a17 	ldw	r5,-25304(gp)
  817ed8:	08165400 	call	816540 <Read_Sector_Data>
  817edc:	1005003a 	cmpeq	r2,r2,zero
  817ee0:	1000311e 	bne	r2,zero,817fa8 <get_home_directory_cluster_for_file+0x298>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  817ee4:	e03fee15 	stw	zero,-72(fp)
  817ee8:	00002306 	br	817f78 <get_home_directory_cluster_for_file+0x268>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  817eec:	e0bfee17 	ldw	r2,-72(fp)
  817ef0:	1008917a 	slli	r4,r2,5
  817ef4:	e1ffef17 	ldw	r7,-68(fp)
  817ef8:	e17ffe17 	ldw	r5,-8(fp)
  817efc:	000d883a 	mov	r6,zero
  817f00:	08169880 	call	816988 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  817f04:	e0bffe17 	ldw	r2,-8(fp)
  817f08:	10800003 	ldbu	r2,0(r2)
  817f0c:	10803fcc 	andi	r2,r2,255
  817f10:	10803960 	cmpeqi	r2,r2,229
  817f14:	1000151e 	bne	r2,zero,817f6c <get_home_directory_cluster_for_file+0x25c>
  817f18:	e0bffe17 	ldw	r2,-8(fp)
  817f1c:	10800003 	ldbu	r2,0(r2)
  817f20:	10803fcc 	andi	r2,r2,255
  817f24:	1005003a 	cmpeq	r2,r2,zero
  817f28:	1000101e 	bne	r2,zero,817f6c <get_home_directory_cluster_for_file+0x25c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
  817f2c:	e17ff804 	addi	r5,fp,-32
  817f30:	e1bffa04 	addi	r6,fp,-24
  817f34:	e13ffe17 	ldw	r4,-8(fp)
  817f38:	0817a240 	call	817a24 <match_file_record_to_name_ext>
  817f3c:	e0bfed15 	stw	r2,-76(fp)
                            if (match)
  817f40:	e0bfed17 	ldw	r2,-76(fp)
  817f44:	1005003a 	cmpeq	r2,r2,zero
  817f48:	1000081e 	bne	r2,zero,817f6c <get_home_directory_cluster_for_file+0x25c>
                            {
                                new_cluster = file_record->start_cluster_index;
  817f4c:	e0bffe17 	ldw	r2,-8(fp)
  817f50:	1080058b 	ldhu	r2,22(r2)
  817f54:	10bfffcc 	andi	r2,r2,65535
  817f58:	e0bff115 	stw	r2,-60(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  817f5c:	e0fffe17 	ldw	r3,-8(fp)
  817f60:	00800044 	movi	r2,1
  817f64:	18800a15 	stw	r2,40(r3)
                                break;
  817f68:	00000606 	br	817f84 <get_home_directory_cluster_for_file+0x274>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  817f6c:	e0bfee17 	ldw	r2,-72(fp)
  817f70:	10800044 	addi	r2,r2,1
  817f74:	e0bfee15 	stw	r2,-72(fp)
  817f78:	e0bfee17 	ldw	r2,-72(fp)
  817f7c:	10800410 	cmplti	r2,r2,16
  817f80:	103fda1e 	bne	r2,zero,817eec <get_home_directory_cluster_for_file+0x1dc>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
  817f84:	e0fff117 	ldw	r3,-60(fp)
  817f88:	e0bff617 	ldw	r2,-40(fp)
  817f8c:	1880061e 	bne	r3,r2,817fa8 <get_home_directory_cluster_for_file+0x298>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  817f90:	e0bfef17 	ldw	r2,-68(fp)
  817f94:	10800044 	addi	r2,r2,1
  817f98:	e0bfef15 	stw	r2,-68(fp)
  817f9c:	e0ffef17 	ldw	r3,-68(fp)
  817fa0:	e0bff017 	ldw	r2,-64(fp)
  817fa4:	18bfc516 	blt	r3,r2,817ebc <get_home_directory_cluster_for_file+0x1ac>
                if (new_cluster != home_dir_cluster)
                {
                    break;
                }
            }
            if (new_cluster != home_dir_cluster)
  817fa8:	e0fff117 	ldw	r3,-60(fp)
  817fac:	e0bff617 	ldw	r2,-40(fp)
  817fb0:	18800826 	beq	r3,r2,817fd4 <get_home_directory_cluster_for_file+0x2c4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
  817fb4:	e0bff117 	ldw	r2,-60(fp)
  817fb8:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
  817fbc:	e0fff317 	ldw	r3,-52(fp)
  817fc0:	e0bff517 	ldw	r2,-44(fp)
  817fc4:	1885883a 	add	r2,r3,r2
  817fc8:	10800044 	addi	r2,r2,1
  817fcc:	e0bff315 	stw	r2,-52(fp)
  817fd0:	00007406 	br	8181a4 <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
  817fd4:	e03fff15 	stw	zero,-4(fp)
  817fd8:	00008c06 	br	81820c <get_home_directory_cluster_for_file+0x4fc>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
  817fdc:	e0bff617 	ldw	r2,-40(fp)
  817fe0:	e0bfec15 	stw	r2,-80(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  817fe4:	e0bfec17 	ldw	r2,-80(fp)
  817fe8:	10ffff84 	addi	r3,r2,-2
  817fec:	008020f4 	movhi	r2,131
  817ff0:	10974c04 	addi	r2,r2,23856
  817ff4:	10800383 	ldbu	r2,14(r2)
  817ff8:	10803fcc 	andi	r2,r2,255
  817ffc:	1885383a 	mul	r2,r3,r2
  818000:	1007883a 	mov	r3,r2
  818004:	008020f4 	movhi	r2,131
  818008:	10974c04 	addi	r2,r2,23856
  81800c:	10801417 	ldw	r2,80(r2)
  818010:	1885883a 	add	r2,r3,r2
  818014:	e0bfeb15 	stw	r2,-84(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  818018:	e03fea15 	stw	zero,-88(fp)
  81801c:	00003206 	br	8180e8 <get_home_directory_cluster_for_file+0x3d8>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  818020:	e0ffea17 	ldw	r3,-88(fp)
  818024:	e0bfeb17 	ldw	r2,-84(fp)
  818028:	1889883a 	add	r4,r3,r2
  81802c:	d1674a17 	ldw	r5,-25304(gp)
  818030:	08165400 	call	816540 <Read_Sector_Data>
  818034:	1005003a 	cmpeq	r2,r2,zero
  818038:	1000311e 	bne	r2,zero,818100 <get_home_directory_cluster_for_file+0x3f0>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
  81803c:	e03fe915 	stw	zero,-92(fp)
  818040:	00002006 	br	8180c4 <get_home_directory_cluster_for_file+0x3b4>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  818044:	e0bfe917 	ldw	r2,-92(fp)
  818048:	1008917a 	slli	r4,r2,5
  81804c:	e1bfec17 	ldw	r6,-80(fp)
  818050:	e1ffea17 	ldw	r7,-88(fp)
  818054:	e17ffe17 	ldw	r5,-8(fp)
  818058:	08169880 	call	816988 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  81805c:	e0bffe17 	ldw	r2,-8(fp)
  818060:	10800003 	ldbu	r2,0(r2)
  818064:	10803fcc 	andi	r2,r2,255
  818068:	10803960 	cmpeqi	r2,r2,229
  81806c:	1000121e 	bne	r2,zero,8180b8 <get_home_directory_cluster_for_file+0x3a8>
  818070:	e0bffe17 	ldw	r2,-8(fp)
  818074:	10800003 	ldbu	r2,0(r2)
  818078:	10803fcc 	andi	r2,r2,255
  81807c:	1005003a 	cmpeq	r2,r2,zero
  818080:	10000d1e 	bne	r2,zero,8180b8 <get_home_directory_cluster_for_file+0x3a8>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
  818084:	e17ff804 	addi	r5,fp,-32
  818088:	e1bffa04 	addi	r6,fp,-24
  81808c:	e13ffe17 	ldw	r4,-8(fp)
  818090:	0817a240 	call	817a24 <match_file_record_to_name_ext>
  818094:	e0bfe815 	stw	r2,-96(fp)
                                if (match)
  818098:	e0bfe817 	ldw	r2,-96(fp)
  81809c:	1005003a 	cmpeq	r2,r2,zero
  8180a0:	1000051e 	bne	r2,zero,8180b8 <get_home_directory_cluster_for_file+0x3a8>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
  8180a4:	e0bffe17 	ldw	r2,-8(fp)
  8180a8:	1080058b 	ldhu	r2,22(r2)
  8180ac:	10bfffcc 	andi	r2,r2,65535
  8180b0:	e0bff115 	stw	r2,-60(fp)
                                    break;
  8180b4:	00000606 	br	8180d0 <get_home_directory_cluster_for_file+0x3c0>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
  8180b8:	e0bfe917 	ldw	r2,-92(fp)
  8180bc:	10800044 	addi	r2,r2,1
  8180c0:	e0bfe915 	stw	r2,-92(fp)
  8180c4:	e0bfe917 	ldw	r2,-92(fp)
  8180c8:	10800410 	cmplti	r2,r2,16
  8180cc:	103fdd1e 	bne	r2,zero,818044 <get_home_directory_cluster_for_file+0x334>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
  8180d0:	e0fff117 	ldw	r3,-60(fp)
  8180d4:	e0bff617 	ldw	r2,-40(fp)
  8180d8:	1880091e 	bne	r3,r2,818100 <get_home_directory_cluster_for_file+0x3f0>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8180dc:	e0bfea17 	ldw	r2,-88(fp)
  8180e0:	10800044 	addi	r2,r2,1
  8180e4:	e0bfea15 	stw	r2,-88(fp)
  8180e8:	008020f4 	movhi	r2,131
  8180ec:	10974c04 	addi	r2,r2,23856
  8180f0:	10800383 	ldbu	r2,14(r2)
  8180f4:	10c03fcc 	andi	r3,r2,255
  8180f8:	e0bfea17 	ldw	r2,-88(fp)
  8180fc:	10ffc816 	blt	r2,r3,818020 <get_home_directory_cluster_for_file+0x310>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
  818100:	e0fff117 	ldw	r3,-60(fp)
  818104:	e0bff617 	ldw	r2,-40(fp)
  818108:	1880131e 	bne	r3,r2,818158 <get_home_directory_cluster_for_file+0x448>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
  81810c:	e13ff117 	ldw	r4,-60(fp)
  818110:	e17ffb04 	addi	r5,fp,-20
  818114:	081663c0 	call	81663c <get_cluster_flag>
  818118:	1005003a 	cmpeq	r2,r2,zero
  81811c:	10000c1e 	bne	r2,zero,818150 <get_home_directory_cluster_for_file+0x440>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  818120:	e0bffb0b 	ldhu	r2,-20(fp)
  818124:	10bfffcc 	andi	r2,r2,65535
  818128:	10fffe0c 	andi	r3,r2,65528
  81812c:	00bffe14 	movui	r2,65528
  818130:	1880021e 	bne	r3,r2,81813c <get_home_directory_cluster_for_file+0x42c>
						{
							return false;
  818134:	e03fff15 	stw	zero,-4(fp)
  818138:	00003406 	br	81820c <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
  81813c:	e0bffb0b 	ldhu	r2,-20(fp)
  818140:	10bfffcc 	andi	r2,r2,65535
  818144:	10bffe0c 	andi	r2,r2,65528
  818148:	e0bff115 	stw	r2,-60(fp)
  81814c:	00000206 	br	818158 <get_home_directory_cluster_for_file+0x448>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
  818150:	e03fff15 	stw	zero,-4(fp)
  818154:	00002d06 	br	81820c <get_home_directory_cluster_for_file+0x4fc>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
  818158:	e0ffec17 	ldw	r3,-80(fp)
  81815c:	00bffdd4 	movui	r2,65527
  818160:	10c00316 	blt	r2,r3,818170 <get_home_directory_cluster_for_file+0x460>
  818164:	e0fff117 	ldw	r3,-60(fp)
  818168:	e0bff617 	ldw	r2,-40(fp)
  81816c:	18bf9d26 	beq	r3,r2,817fe4 <get_home_directory_cluster_for_file+0x2d4>
            if (new_cluster != home_dir_cluster)
  818170:	e0fff117 	ldw	r3,-60(fp)
  818174:	e0bff617 	ldw	r2,-40(fp)
  818178:	18800826 	beq	r3,r2,81819c <get_home_directory_cluster_for_file+0x48c>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
  81817c:	e0bff117 	ldw	r2,-60(fp)
  818180:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
  818184:	e0fff317 	ldw	r3,-52(fp)
  818188:	e0bff517 	ldw	r2,-44(fp)
  81818c:	1885883a 	add	r2,r3,r2
  818190:	10800044 	addi	r2,r2,1
  818194:	e0bff315 	stw	r2,-52(fp)
  818198:	00000206 	br	8181a4 <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
  81819c:	e03fff15 	stw	zero,-4(fp)
  8181a0:	00001a06 	br	81820c <get_home_directory_cluster_for_file+0x4fc>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
  8181a4:	e0bff317 	ldw	r2,-52(fp)
  8181a8:	1007883a 	mov	r3,r2
  8181ac:	e0bffc17 	ldw	r2,-16(fp)
  8181b0:	1889883a 	add	r4,r3,r2
  8181b4:	08179640 	call	817964 <get_dir_divider_location>
  8181b8:	e0bff515 	stw	r2,-44(fp)
        if (location < 0)
  8181bc:	e0bff517 	ldw	r2,-44(fp)
  8181c0:	1004403a 	cmpge	r2,r2,zero
  8181c4:	1000021e 	bne	r2,zero,8181d0 <get_home_directory_cluster_for_file+0x4c0>
        {
            // Directory has been located.
            result = true;
  8181c8:	00800044 	movi	r2,1
  8181cc:	e0bff715 	stw	r2,-36(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  8181d0:	e0bff517 	ldw	r2,-44(fp)
  8181d4:	10800048 	cmpgei	r2,r2,1
  8181d8:	103edb1e 	bne	r2,zero,817d48 <get_home_directory_cluster_for_file+0x38>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
  8181dc:	e0fffd17 	ldw	r3,-12(fp)
  8181e0:	e0bff617 	ldw	r2,-40(fp)
  8181e4:	18800015 	stw	r2,0(r3)
    if (home_dir_cluster == 0)
  8181e8:	e0bff617 	ldw	r2,-40(fp)
  8181ec:	1004c03a 	cmpne	r2,r2,zero
  8181f0:	1000041e 	bne	r2,zero,818204 <get_home_directory_cluster_for_file+0x4f4>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
  8181f4:	e0bffe17 	ldw	r2,-8(fp)
  8181f8:	10000a15 	stw	zero,40(r2)
		result = true;
  8181fc:	00800044 	movi	r2,1
  818200:	e0bff715 	stw	r2,-36(fp)
    }
    return result;
  818204:	e0bff717 	ldw	r2,-36(fp)
  818208:	e0bfff15 	stw	r2,-4(fp)
  81820c:	e0bfff17 	ldw	r2,-4(fp)
}
  818210:	e037883a 	mov	sp,fp
  818214:	dfc00117 	ldw	ra,4(sp)
  818218:	df000017 	ldw	fp,0(sp)
  81821c:	dec00204 	addi	sp,sp,8
  818220:	f800283a 	ret

00818224 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  818224:	deffe704 	addi	sp,sp,-100
  818228:	dfc01815 	stw	ra,96(sp)
  81822c:	df001715 	stw	fp,92(sp)
  818230:	df001704 	addi	fp,sp,92
  818234:	e13ffc15 	stw	r4,-16(fp)
  818238:	e17ffd15 	stw	r5,-12(fp)
  81823c:	e1bffe15 	stw	r6,-8(fp)
    int location = get_dir_divider_location( file_name );
  818240:	e13ffd17 	ldw	r4,-12(fp)
  818244:	08179640 	call	817964 <get_dir_divider_location>
  818248:	e0bff715 	stw	r2,-36(fp)
    int last_dir_separator = 0;
  81824c:	e03ff615 	stw	zero,-40(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  818250:	00800804 	movi	r2,32
  818254:	e0bff805 	stb	r2,-32(fp)
  818258:	00800804 	movi	r2,32
  81825c:	e0bff845 	stb	r2,-31(fp)
  818260:	00800804 	movi	r2,32
  818264:	e0bff885 	stb	r2,-30(fp)
  818268:	00800804 	movi	r2,32
  81826c:	e0bff8c5 	stb	r2,-29(fp)
  818270:	00800804 	movi	r2,32
  818274:	e0bff905 	stb	r2,-28(fp)
  818278:	00800804 	movi	r2,32
  81827c:	e0bff945 	stb	r2,-27(fp)
  818280:	00800804 	movi	r2,32
  818284:	e0bff985 	stb	r2,-26(fp)
  818288:	00800804 	movi	r2,32
  81828c:	e0bff9c5 	stb	r2,-25(fp)
    char extension[3] = { ' ', ' ', ' ' };
  818290:	00800804 	movi	r2,32
  818294:	e0bffa05 	stb	r2,-24(fp)
  818298:	00800804 	movi	r2,32
  81829c:	e0bffa45 	stb	r2,-23(fp)
  8182a0:	00800804 	movi	r2,32
  8182a4:	e0bffa85 	stb	r2,-22(fp)
    int ext_index = -1;
  8182a8:	00bfffc4 	movi	r2,-1
  8182ac:	e0bff515 	stw	r2,-44(fp)
    int cluster = directory_start_cluster;
  8182b0:	e0bffc17 	ldw	r2,-16(fp)
  8182b4:	e0bff415 	stw	r2,-48(fp)
    int index;
	int length = strlen(file_name);
  8182b8:	e13ffd17 	ldw	r4,-12(fp)
  8182bc:	0803b440 	call	803b44 <strlen>
  8182c0:	e0bff215 	stw	r2,-56(fp)
    bool result = false;
  8182c4:	e03ff115 	stw	zero,-60(fp)
    
    // Skip through all directory separators.
    while (location > 0)
  8182c8:	00000b06 	br	8182f8 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
  8182cc:	e0fff617 	ldw	r3,-40(fp)
  8182d0:	e0bff717 	ldw	r2,-36(fp)
  8182d4:	1885883a 	add	r2,r3,r2
  8182d8:	10800044 	addi	r2,r2,1
  8182dc:	e0bff615 	stw	r2,-40(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
  8182e0:	e0bff617 	ldw	r2,-40(fp)
  8182e4:	1007883a 	mov	r3,r2
  8182e8:	e0bffd17 	ldw	r2,-12(fp)
  8182ec:	1889883a 	add	r4,r3,r2
  8182f0:	08179640 	call	817964 <get_dir_divider_location>
  8182f4:	e0bff715 	stw	r2,-36(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
  8182f8:	e0bff717 	ldw	r2,-36(fp)
  8182fc:	10800048 	cmpgei	r2,r2,1
  818300:	103ff21e 	bne	r2,zero,8182cc <find_file_in_directory+0xa8>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  818304:	e0bff617 	ldw	r2,-40(fp)
  818308:	e0bff315 	stw	r2,-52(fp)
  81830c:	00002b06 	br	8183bc <find_file_in_directory+0x198>
    {
        if (file_name[index] == '.')
  818310:	e0bff317 	ldw	r2,-52(fp)
  818314:	1007883a 	mov	r3,r2
  818318:	e0bffd17 	ldw	r2,-12(fp)
  81831c:	1885883a 	add	r2,r3,r2
  818320:	10800003 	ldbu	r2,0(r2)
  818324:	10803fcc 	andi	r2,r2,255
  818328:	1080201c 	xori	r2,r2,128
  81832c:	10bfe004 	addi	r2,r2,-128
  818330:	10800b98 	cmpnei	r2,r2,46
  818334:	1000031e 	bne	r2,zero,818344 <find_file_in_directory+0x120>
        {
            ext_index = index;
  818338:	e0bff317 	ldw	r2,-52(fp)
  81833c:	e0bff515 	stw	r2,-44(fp)
  818340:	00001b06 	br	8183b0 <find_file_in_directory+0x18c>
        }
        else if (ext_index < 0)
  818344:	e0bff517 	ldw	r2,-44(fp)
  818348:	1004403a 	cmpge	r2,r2,zero
  81834c:	10000c1e 	bne	r2,zero,818380 <find_file_in_directory+0x15c>
        {
            name[index-last_dir_separator] = file_name[index];
  818350:	e0fff317 	ldw	r3,-52(fp)
  818354:	e0bff617 	ldw	r2,-40(fp)
  818358:	1889c83a 	sub	r4,r3,r2
  81835c:	e0bff317 	ldw	r2,-52(fp)
  818360:	1007883a 	mov	r3,r2
  818364:	e0bffd17 	ldw	r2,-12(fp)
  818368:	1885883a 	add	r2,r3,r2
  81836c:	10c00003 	ldbu	r3,0(r2)
  818370:	e0bff804 	addi	r2,fp,-32
  818374:	1105883a 	add	r2,r2,r4
  818378:	10c00005 	stb	r3,0(r2)
  81837c:	00000c06 	br	8183b0 <find_file_in_directory+0x18c>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
  818380:	e0fff317 	ldw	r3,-52(fp)
  818384:	e0bff517 	ldw	r2,-44(fp)
  818388:	1885c83a 	sub	r2,r3,r2
  81838c:	113fffc4 	addi	r4,r2,-1
  818390:	e0bff317 	ldw	r2,-52(fp)
  818394:	1007883a 	mov	r3,r2
  818398:	e0bffd17 	ldw	r2,-12(fp)
  81839c:	1885883a 	add	r2,r3,r2
  8183a0:	10c00003 	ldbu	r3,0(r2)
  8183a4:	e0bffa04 	addi	r2,fp,-24
  8183a8:	1105883a 	add	r2,r2,r4
  8183ac:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  8183b0:	e0bff317 	ldw	r2,-52(fp)
  8183b4:	10800044 	addi	r2,r2,1
  8183b8:	e0bff315 	stw	r2,-52(fp)
  8183bc:	e0fff317 	ldw	r3,-52(fp)
  8183c0:	e0bff217 	ldw	r2,-56(fp)
  8183c4:	18bfd216 	blt	r3,r2,818310 <find_file_in_directory+0xec>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
  8183c8:	e0bffc17 	ldw	r2,-16(fp)
  8183cc:	1004c03a 	cmpne	r2,r2,zero
  8183d0:	1000441e 	bne	r2,zero,8184e4 <find_file_in_directory+0x2c0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  8183d4:	008020f4 	movhi	r2,131
  8183d8:	10974c04 	addi	r2,r2,23856
  8183dc:	1080050b 	ldhu	r2,20(r2)
  8183e0:	10bfffcc 	andi	r2,r2,65535
  8183e4:	1008917a 	slli	r4,r2,5
  8183e8:	008020f4 	movhi	r2,131
  8183ec:	10974c04 	addi	r2,r2,23856
  8183f0:	1080030b 	ldhu	r2,12(r2)
  8183f4:	117fffcc 	andi	r5,r2,65535
  8183f8:	080ba9c0 	call	80ba9c <__divsi3>
  8183fc:	e0bff015 	stw	r2,-64(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  818400:	e03fef15 	stw	zero,-68(fp)
  818404:	00003306 	br	8184d4 <find_file_in_directory+0x2b0>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  818408:	008020f4 	movhi	r2,131
  81840c:	10974c04 	addi	r2,r2,23856
  818410:	10c01317 	ldw	r3,76(r2)
  818414:	e0bfef17 	ldw	r2,-68(fp)
  818418:	1885883a 	add	r2,r3,r2
  81841c:	1009883a 	mov	r4,r2
  818420:	d1674a17 	ldw	r5,-25304(gp)
  818424:	08165400 	call	816540 <Read_Sector_Data>
  818428:	1005003a 	cmpeq	r2,r2,zero
  81842c:	10008e1e 	bne	r2,zero,818668 <find_file_in_directory+0x444>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  818430:	e03fee15 	stw	zero,-72(fp)
  818434:	00001e06 	br	8184b0 <find_file_in_directory+0x28c>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  818438:	e0bfee17 	ldw	r2,-72(fp)
  81843c:	1008917a 	slli	r4,r2,5
  818440:	e1ffef17 	ldw	r7,-68(fp)
  818444:	e17ffe17 	ldw	r5,-8(fp)
  818448:	000d883a 	mov	r6,zero
  81844c:	08169880 	call	816988 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  818450:	e0bffe17 	ldw	r2,-8(fp)
  818454:	10800003 	ldbu	r2,0(r2)
  818458:	10803fcc 	andi	r2,r2,255
  81845c:	10803960 	cmpeqi	r2,r2,229
  818460:	1000101e 	bne	r2,zero,8184a4 <find_file_in_directory+0x280>
  818464:	e0bffe17 	ldw	r2,-8(fp)
  818468:	10800003 	ldbu	r2,0(r2)
  81846c:	10803fcc 	andi	r2,r2,255
  818470:	1005003a 	cmpeq	r2,r2,zero
  818474:	10000b1e 	bne	r2,zero,8184a4 <find_file_in_directory+0x280>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
  818478:	e17ff804 	addi	r5,fp,-32
  81847c:	e1bffa04 	addi	r6,fp,-24
  818480:	e13ffe17 	ldw	r4,-8(fp)
  818484:	0817a240 	call	817a24 <match_file_record_to_name_ext>
  818488:	e0bfed15 	stw	r2,-76(fp)

                        if (match)
  81848c:	e0bfed17 	ldw	r2,-76(fp)
  818490:	1005003a 	cmpeq	r2,r2,zero
  818494:	1000031e 	bne	r2,zero,8184a4 <find_file_in_directory+0x280>
                        {
                            result = true;
  818498:	00800044 	movi	r2,1
  81849c:	e0bff115 	stw	r2,-60(fp)
                            break;
  8184a0:	00000606 	br	8184bc <find_file_in_directory+0x298>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  8184a4:	e0bfee17 	ldw	r2,-72(fp)
  8184a8:	10800044 	addi	r2,r2,1
  8184ac:	e0bfee15 	stw	r2,-72(fp)
  8184b0:	e0bfee17 	ldw	r2,-72(fp)
  8184b4:	10800410 	cmplti	r2,r2,16
  8184b8:	103fdf1e 	bne	r2,zero,818438 <find_file_in_directory+0x214>
            }
            else
            {
                break;
            }
            if (result)
  8184bc:	e0bff117 	ldw	r2,-60(fp)
  8184c0:	1004c03a 	cmpne	r2,r2,zero
  8184c4:	1000681e 	bne	r2,zero,818668 <find_file_in_directory+0x444>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  8184c8:	e0bfef17 	ldw	r2,-68(fp)
  8184cc:	10800044 	addi	r2,r2,1
  8184d0:	e0bfef15 	stw	r2,-68(fp)
  8184d4:	e0ffef17 	ldw	r3,-68(fp)
  8184d8:	e0bff017 	ldw	r2,-64(fp)
  8184dc:	18bfca16 	blt	r3,r2,818408 <find_file_in_directory+0x1e4>
  8184e0:	00006106 	br	818668 <find_file_in_directory+0x444>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  8184e4:	e0bff417 	ldw	r2,-48(fp)
  8184e8:	10ffff84 	addi	r3,r2,-2
  8184ec:	008020f4 	movhi	r2,131
  8184f0:	10974c04 	addi	r2,r2,23856
  8184f4:	10800383 	ldbu	r2,14(r2)
  8184f8:	10803fcc 	andi	r2,r2,255
  8184fc:	1885383a 	mul	r2,r3,r2
  818500:	1007883a 	mov	r3,r2
  818504:	008020f4 	movhi	r2,131
  818508:	10974c04 	addi	r2,r2,23856
  81850c:	10801417 	ldw	r2,80(r2)
  818510:	1885883a 	add	r2,r3,r2
  818514:	e0bfec15 	stw	r2,-80(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  818518:	e03feb15 	stw	zero,-84(fp)
  81851c:	00003006 	br	8185e0 <find_file_in_directory+0x3bc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  818520:	e0ffeb17 	ldw	r3,-84(fp)
  818524:	e0bfec17 	ldw	r2,-80(fp)
  818528:	1889883a 	add	r4,r3,r2
  81852c:	d1674a17 	ldw	r5,-25304(gp)
  818530:	08165400 	call	816540 <Read_Sector_Data>
  818534:	1005003a 	cmpeq	r2,r2,zero
  818538:	10002f1e 	bne	r2,zero,8185f8 <find_file_in_directory+0x3d4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  81853c:	e03fea15 	stw	zero,-88(fp)
  818540:	00001e06 	br	8185bc <find_file_in_directory+0x398>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  818544:	e0bfea17 	ldw	r2,-88(fp)
  818548:	1008917a 	slli	r4,r2,5
  81854c:	e1bff417 	ldw	r6,-48(fp)
  818550:	e1ffeb17 	ldw	r7,-84(fp)
  818554:	e17ffe17 	ldw	r5,-8(fp)
  818558:	08169880 	call	816988 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  81855c:	e0bffe17 	ldw	r2,-8(fp)
  818560:	10800003 	ldbu	r2,0(r2)
  818564:	10803fcc 	andi	r2,r2,255
  818568:	10803960 	cmpeqi	r2,r2,229
  81856c:	1000101e 	bne	r2,zero,8185b0 <find_file_in_directory+0x38c>
  818570:	e0bffe17 	ldw	r2,-8(fp)
  818574:	10800003 	ldbu	r2,0(r2)
  818578:	10803fcc 	andi	r2,r2,255
  81857c:	1005003a 	cmpeq	r2,r2,zero
  818580:	10000b1e 	bne	r2,zero,8185b0 <find_file_in_directory+0x38c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
  818584:	e17ff804 	addi	r5,fp,-32
  818588:	e1bffa04 	addi	r6,fp,-24
  81858c:	e13ffe17 	ldw	r4,-8(fp)
  818590:	0817a240 	call	817a24 <match_file_record_to_name_ext>
  818594:	e0bfe915 	stw	r2,-92(fp)

                            if (match)
  818598:	e0bfe917 	ldw	r2,-92(fp)
  81859c:	1005003a 	cmpeq	r2,r2,zero
  8185a0:	1000031e 	bne	r2,zero,8185b0 <find_file_in_directory+0x38c>
                            {                               
                                result = true;
  8185a4:	00800044 	movi	r2,1
  8185a8:	e0bff115 	stw	r2,-60(fp)
                                break;
  8185ac:	00000606 	br	8185c8 <find_file_in_directory+0x3a4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  8185b0:	e0bfea17 	ldw	r2,-88(fp)
  8185b4:	10800044 	addi	r2,r2,1
  8185b8:	e0bfea15 	stw	r2,-88(fp)
  8185bc:	e0bfea17 	ldw	r2,-88(fp)
  8185c0:	10800410 	cmplti	r2,r2,16
  8185c4:	103fdf1e 	bne	r2,zero,818544 <find_file_in_directory+0x320>
                }
                else
                {
                    break;
                }
                if (result)
  8185c8:	e0bff117 	ldw	r2,-60(fp)
  8185cc:	1004c03a 	cmpne	r2,r2,zero
  8185d0:	1000091e 	bne	r2,zero,8185f8 <find_file_in_directory+0x3d4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8185d4:	e0bfeb17 	ldw	r2,-84(fp)
  8185d8:	10800044 	addi	r2,r2,1
  8185dc:	e0bfeb15 	stw	r2,-84(fp)
  8185e0:	008020f4 	movhi	r2,131
  8185e4:	10974c04 	addi	r2,r2,23856
  8185e8:	10800383 	ldbu	r2,14(r2)
  8185ec:	10c03fcc 	andi	r3,r2,255
  8185f0:	e0bfeb17 	ldw	r2,-84(fp)
  8185f4:	10ffca16 	blt	r2,r3,818520 <find_file_in_directory+0x2fc>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
  8185f8:	e0bff117 	ldw	r2,-60(fp)
  8185fc:	1004c03a 	cmpne	r2,r2,zero
  818600:	1000131e 	bne	r2,zero,818650 <find_file_in_directory+0x42c>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
  818604:	e13ff417 	ldw	r4,-48(fp)
  818608:	e17ffb04 	addi	r5,fp,-20
  81860c:	081663c0 	call	81663c <get_cluster_flag>
  818610:	1005003a 	cmpeq	r2,r2,zero
  818614:	10000c1e 	bne	r2,zero,818648 <find_file_in_directory+0x424>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  818618:	e0bffb0b 	ldhu	r2,-20(fp)
  81861c:	10bfffcc 	andi	r2,r2,65535
  818620:	10fffe0c 	andi	r3,r2,65528
  818624:	00bffe14 	movui	r2,65528
  818628:	1880021e 	bne	r3,r2,818634 <find_file_in_directory+0x410>
					{
						return false;
  81862c:	e03fff15 	stw	zero,-4(fp)
  818630:	00000f06 	br	818670 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
  818634:	e0bffb0b 	ldhu	r2,-20(fp)
  818638:	10bfffcc 	andi	r2,r2,65535
  81863c:	10bffe0c 	andi	r2,r2,65528
  818640:	e0bff415 	stw	r2,-48(fp)
  818644:	00000206 	br	818650 <find_file_in_directory+0x42c>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
  818648:	e03fff15 	stw	zero,-4(fp)
  81864c:	00000806 	br	818670 <find_file_in_directory+0x44c>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
  818650:	e0fff417 	ldw	r3,-48(fp)
  818654:	00bffdd4 	movui	r2,65527
  818658:	10c00316 	blt	r2,r3,818668 <find_file_in_directory+0x444>
  81865c:	e0bff117 	ldw	r2,-60(fp)
  818660:	1005003a 	cmpeq	r2,r2,zero
  818664:	103f9f1e 	bne	r2,zero,8184e4 <find_file_in_directory+0x2c0>
    }
    
    return result;   
  818668:	e0bff117 	ldw	r2,-60(fp)
  81866c:	e0bfff15 	stw	r2,-4(fp)
  818670:	e0bfff17 	ldw	r2,-4(fp)
}
  818674:	e037883a 	mov	sp,fp
  818678:	dfc00117 	ldw	ra,4(sp)
  81867c:	df000017 	ldw	fp,0(sp)
  818680:	dec00204 	addi	sp,sp,8
  818684:	f800283a 	ret

00818688 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  818688:	defff504 	addi	sp,sp,-44
  81868c:	dfc00a15 	stw	ra,40(sp)
  818690:	df000915 	stw	fp,36(sp)
  818694:	df000904 	addi	fp,sp,36
  818698:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  81869c:	008020f4 	movhi	r2,131
  8186a0:	10974c04 	addi	r2,r2,23856
  8186a4:	10801117 	ldw	r2,68(r2)
  8186a8:	e0bffe15 	stw	r2,-8(fp)
    unsigned int cluster_index = 2;
  8186ac:	00800084 	movi	r2,2
  8186b0:	e0bffd15 	stw	r2,-12(fp)
    short int cluster = -1;
  8186b4:	00bfffc4 	movi	r2,-1
  8186b8:	e0bffc0d 	sth	r2,-16(fp)
    bool result = false;
  8186bc:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
  8186c0:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
  8186c4:	008020f4 	movhi	r2,131
  8186c8:	10974c04 	addi	r2,r2,23856
  8186cc:	10801417 	ldw	r2,80(r2)
  8186d0:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
  8186d4:	008020f4 	movhi	r2,131
  8186d8:	10974c04 	addi	r2,r2,23856
  8186dc:	1080058b 	ldhu	r2,22(r2)
  8186e0:	10bfffcc 	andi	r2,r2,65535
  8186e4:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
  8186e8:	008020f4 	movhi	r2,131
  8186ec:	10974c04 	addi	r2,r2,23856
  8186f0:	10800917 	ldw	r2,36(r2)
  8186f4:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32)
  8186f8:	e0fff817 	ldw	r3,-32(fp)
  8186fc:	e0bff717 	ldw	r2,-36(fp)
  818700:	10c00b2e 	bgeu	r2,r3,818730 <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
  818704:	e0fff817 	ldw	r3,-32(fp)
  818708:	e0bff917 	ldw	r2,-28(fp)
  81870c:	1889c83a 	sub	r4,r3,r2
  818710:	008020f4 	movhi	r2,131
  818714:	10974c04 	addi	r2,r2,23856
  818718:	10800383 	ldbu	r2,14(r2)
  81871c:	11403fcc 	andi	r5,r2,255
  818720:	080bb5c0 	call	80bb5c <__udivsi3>
  818724:	10800044 	addi	r2,r2,1
  818728:	e0bffa15 	stw	r2,-24(fp)
  81872c:	00002906 	br	8187d4 <find_first_empty_cluster+0x14c>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
  818730:	e0fff717 	ldw	r3,-36(fp)
  818734:	e0bff917 	ldw	r2,-28(fp)
  818738:	1889c83a 	sub	r4,r3,r2
  81873c:	008020f4 	movhi	r2,131
  818740:	10974c04 	addi	r2,r2,23856
  818744:	10800383 	ldbu	r2,14(r2)
  818748:	11403fcc 	andi	r5,r2,255
  81874c:	080bb5c0 	call	80bb5c <__udivsi3>
  818750:	10800044 	addi	r2,r2,1
  818754:	e0bffa15 	stw	r2,-24(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  818758:	00001e06 	br	8187d4 <find_first_empty_cluster+0x14c>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  81875c:	e13ffe17 	ldw	r4,-8(fp)
  818760:	d1674a17 	ldw	r5,-25304(gp)
  818764:	08165400 	call	816540 <Read_Sector_Data>
  818768:	1005003a 	cmpeq	r2,r2,zero
  81876c:	1000131e 	bne	r2,zero,8187bc <find_first_empty_cluster+0x134>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  818770:	d0a74c17 	ldw	r2,-25296(gp)
  818774:	10800a17 	ldw	r2,40(r2)
  818778:	1007883a 	mov	r3,r2
  81877c:	e0bffd17 	ldw	r2,-12(fp)
  818780:	10803fcc 	andi	r2,r2,255
  818784:	1085883a 	add	r2,r2,r2
  818788:	1885883a 	add	r2,r3,r2
  81878c:	1080002b 	ldhuio	r2,0(r2)
  818790:	e0bffc0d 	sth	r2,-16(fp)
                if (cluster == 0)
  818794:	e0bffc0f 	ldh	r2,-16(fp)
  818798:	1005003a 	cmpeq	r2,r2,zero
  81879c:	1000071e 	bne	r2,zero,8187bc <find_first_empty_cluster+0x134>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  8187a0:	e0bffd17 	ldw	r2,-12(fp)
  8187a4:	10800044 	addi	r2,r2,1
  8187a8:	e0bffd15 	stw	r2,-12(fp)
                } 
            } while ((cluster_index % 256) != 0);
  8187ac:	e0bffd17 	ldw	r2,-12(fp)
  8187b0:	10803fcc 	andi	r2,r2,255
  8187b4:	1004c03a 	cmpne	r2,r2,zero
  8187b8:	103fed1e 	bne	r2,zero,818770 <find_first_empty_cluster+0xe8>
        }
        if (cluster == 0)
  8187bc:	e0bffc0f 	ldh	r2,-16(fp)
  8187c0:	1005003a 	cmpeq	r2,r2,zero
  8187c4:	1000081e 	bne	r2,zero,8187e8 <find_first_empty_cluster+0x160>
        {
            break;
        }
        sector++;
  8187c8:	e0bffe17 	ldw	r2,-8(fp)
  8187cc:	10800044 	addi	r2,r2,1
  8187d0:	e0bffe15 	stw	r2,-8(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  8187d4:	008020f4 	movhi	r2,131
  8187d8:	10974c04 	addi	r2,r2,23856
  8187dc:	10c01217 	ldw	r3,72(r2)
  8187e0:	e0bffe17 	ldw	r2,-8(fp)
  8187e4:	18bfdd1e 	bne	r3,r2,81875c <find_first_empty_cluster+0xd4>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  8187e8:	e0bffc0f 	ldh	r2,-16(fp)
  8187ec:	1004c03a 	cmpne	r2,r2,zero
  8187f0:	1000081e 	bne	r2,zero,818814 <find_first_empty_cluster+0x18c>
  8187f4:	e0fffc0f 	ldh	r3,-16(fp)
  8187f8:	e0bffa17 	ldw	r2,-24(fp)
  8187fc:	10c00536 	bltu	r2,r3,818814 <find_first_empty_cluster+0x18c>
    {
        *cluster_number = cluster_index;
  818800:	e0bfff17 	ldw	r2,-4(fp)
  818804:	e0fffd17 	ldw	r3,-12(fp)
  818808:	10c00015 	stw	r3,0(r2)
		result = true;
  81880c:	00800044 	movi	r2,1
  818810:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
  818814:	e0bffb17 	ldw	r2,-20(fp)
}
  818818:	e037883a 	mov	sp,fp
  81881c:	dfc00117 	ldw	ra,4(sp)
  818820:	df000017 	ldw	fp,0(sp)
  818824:	dec00204 	addi	sp,sp,8
  818828:	f800283a 	ret

0081882c <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  81882c:	defff404 	addi	sp,sp,-48
  818830:	dfc00b15 	stw	ra,44(sp)
  818834:	df000a15 	stw	fp,40(sp)
  818838:	df000a04 	addi	fp,sp,40
  81883c:	e13ffe15 	stw	r4,-8(fp)
    int result = -1;
  818840:	00bfffc4 	movi	r2,-1
  818844:	e0bffb15 	stw	r2,-20(fp)
    int cluster = start_cluster_index;
  818848:	e0bffe17 	ldw	r2,-8(fp)
  81884c:	e0bffa15 	stw	r2,-24(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  818850:	e0bffa17 	ldw	r2,-24(fp)
  818854:	10ffff84 	addi	r3,r2,-2
  818858:	008020f4 	movhi	r2,131
  81885c:	10974c04 	addi	r2,r2,23856
  818860:	10800383 	ldbu	r2,14(r2)
  818864:	10803fcc 	andi	r2,r2,255
  818868:	1885383a 	mul	r2,r3,r2
  81886c:	1007883a 	mov	r3,r2
  818870:	008020f4 	movhi	r2,131
  818874:	10974c04 	addi	r2,r2,23856
  818878:	10801417 	ldw	r2,80(r2)
  81887c:	1885883a 	add	r2,r3,r2
  818880:	e0bff915 	stw	r2,-28(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  818884:	e03ff815 	stw	zero,-32(fp)
  818888:	00002c06 	br	81893c <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  81888c:	e0fff817 	ldw	r3,-32(fp)
  818890:	e0bff917 	ldw	r2,-28(fp)
  818894:	1889883a 	add	r4,r3,r2
  818898:	d1674a17 	ldw	r5,-25304(gp)
  81889c:	08165400 	call	816540 <Read_Sector_Data>
  8188a0:	1005003a 	cmpeq	r2,r2,zero
  8188a4:	10002b1e 	bne	r2,zero,818954 <find_first_empty_record_in_a_subdirectory+0x128>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  8188a8:	e03ff715 	stw	zero,-36(fp)
  8188ac:	00001d06 	br	818924 <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  8188b0:	d0a74c17 	ldw	r2,-25296(gp)
  8188b4:	10800a17 	ldw	r2,40(r2)
  8188b8:	1007883a 	mov	r3,r2
  8188bc:	e0bff717 	ldw	r2,-36(fp)
  8188c0:	1004917a 	slli	r2,r2,5
  8188c4:	1885883a 	add	r2,r3,r2
  8188c8:	10800023 	ldbuio	r2,0(r2)
  8188cc:	10803fcc 	andi	r2,r2,255
  8188d0:	e0bff60d 	sth	r2,-40(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
  8188d4:	e0bff60b 	ldhu	r2,-40(fp)
  8188d8:	10803960 	cmpeqi	r2,r2,229
  8188dc:	1000031e 	bne	r2,zero,8188ec <find_first_empty_record_in_a_subdirectory+0xc0>
  8188e0:	e0bff60b 	ldhu	r2,-40(fp)
  8188e4:	1004c03a 	cmpne	r2,r2,zero
  8188e8:	10000b1e 	bne	r2,zero,818918 <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
  8188ec:	e0bff817 	ldw	r2,-32(fp)
  8188f0:	1006913a 	slli	r3,r2,4
  8188f4:	e0bff717 	ldw	r2,-36(fp)
  8188f8:	1885883a 	add	r2,r3,r2
  8188fc:	1006943a 	slli	r3,r2,16
  818900:	e0bffa17 	ldw	r2,-24(fp)
  818904:	1884b03a 	or	r2,r3,r2
  818908:	e0bffb15 	stw	r2,-20(fp)
                        return result;
  81890c:	e0bffb17 	ldw	r2,-20(fp)
  818910:	e0bfff15 	stw	r2,-4(fp)
  818914:	00005206 	br	818a60 <find_first_empty_record_in_a_subdirectory+0x234>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  818918:	e0bff717 	ldw	r2,-36(fp)
  81891c:	10800044 	addi	r2,r2,1
  818920:	e0bff715 	stw	r2,-36(fp)
  818924:	e0bff717 	ldw	r2,-36(fp)
  818928:	10800410 	cmplti	r2,r2,16
  81892c:	103fe01e 	bne	r2,zero,8188b0 <find_first_empty_record_in_a_subdirectory+0x84>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  818930:	e0bff817 	ldw	r2,-32(fp)
  818934:	10800044 	addi	r2,r2,1
  818938:	e0bff815 	stw	r2,-32(fp)
  81893c:	008020f4 	movhi	r2,131
  818940:	10974c04 	addi	r2,r2,23856
  818944:	10800383 	ldbu	r2,14(r2)
  818948:	10c03fcc 	andi	r3,r2,255
  81894c:	e0bff817 	ldw	r2,-32(fp)
  818950:	10ffce16 	blt	r2,r3,81888c <find_first_empty_record_in_a_subdirectory+0x60>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
  818954:	e0bffb17 	ldw	r2,-20(fp)
  818958:	1004403a 	cmpge	r2,r2,zero
  81895c:	1000381e 	bne	r2,zero,818a40 <find_first_empty_record_in_a_subdirectory+0x214>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
  818960:	e13ffa17 	ldw	r4,-24(fp)
  818964:	e17ffc04 	addi	r5,fp,-16
  818968:	081663c0 	call	81663c <get_cluster_flag>
  81896c:	1005003a 	cmpeq	r2,r2,zero
  818970:	1000311e 	bne	r2,zero,818a38 <find_first_empty_record_in_a_subdirectory+0x20c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  818974:	e0bffc0b 	ldhu	r2,-16(fp)
  818978:	10bfffcc 	andi	r2,r2,65535
  81897c:	10fffe0c 	andi	r3,r2,65528
  818980:	00bffe14 	movui	r2,65528
  818984:	18802e1e 	bne	r3,r2,818a40 <find_first_empty_record_in_a_subdirectory+0x214>
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
  818988:	e13ffd04 	addi	r4,fp,-12
  81898c:	08186880 	call	818688 <find_first_empty_cluster>
  818990:	1005003a 	cmpeq	r2,r2,zero
  818994:	1000231e 	bne	r2,zero,818a24 <find_first_empty_record_in_a_subdirectory+0x1f8>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
  818998:	e13ffa17 	ldw	r4,-24(fp)
  81899c:	e0bffd17 	ldw	r2,-12(fp)
  8189a0:	117fffcc 	andi	r5,r2,65535
  8189a4:	2960001c 	xori	r5,r5,32768
  8189a8:	29600004 	addi	r5,r5,-32768
  8189ac:	01800044 	movi	r6,1
  8189b0:	08166f40 	call	8166f4 <mark_cluster>
  8189b4:	1005003a 	cmpeq	r2,r2,zero
  8189b8:	10001a1e 	bne	r2,zero,818a24 <find_first_empty_record_in_a_subdirectory+0x1f8>
  8189bc:	e0bffd17 	ldw	r2,-12(fp)
  8189c0:	1009883a 	mov	r4,r2
  8189c4:	017fffc4 	movi	r5,-1
  8189c8:	01800044 	movi	r6,1
  8189cc:	08166f40 	call	8166f4 <mark_cluster>
  8189d0:	1005003a 	cmpeq	r2,r2,zero
  8189d4:	1000131e 	bne	r2,zero,818a24 <find_first_empty_record_in_a_subdirectory+0x1f8>
  8189d8:	e13ffa17 	ldw	r4,-24(fp)
  8189dc:	e0bffd17 	ldw	r2,-12(fp)
  8189e0:	117fffcc 	andi	r5,r2,65535
  8189e4:	2960001c 	xori	r5,r5,32768
  8189e8:	29600004 	addi	r5,r5,-32768
  8189ec:	000d883a 	mov	r6,zero
  8189f0:	08166f40 	call	8166f4 <mark_cluster>
  8189f4:	1005003a 	cmpeq	r2,r2,zero
  8189f8:	10000a1e 	bne	r2,zero,818a24 <find_first_empty_record_in_a_subdirectory+0x1f8>
  8189fc:	e0bffd17 	ldw	r2,-12(fp)
  818a00:	1009883a 	mov	r4,r2
  818a04:	017fffc4 	movi	r5,-1
  818a08:	000d883a 	mov	r6,zero
  818a0c:	08166f40 	call	8166f4 <mark_cluster>
  818a10:	1005003a 	cmpeq	r2,r2,zero
  818a14:	1000031e 	bne	r2,zero,818a24 <find_first_empty_record_in_a_subdirectory+0x1f8>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
  818a18:	08164f00 	call	8164f0 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
  818a1c:	e0bffd17 	ldw	r2,-12(fp)
  818a20:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
  818a24:	e0bffc0b 	ldhu	r2,-16(fp)
  818a28:	10bfffcc 	andi	r2,r2,65535
  818a2c:	10bffe0c 	andi	r2,r2,65528
  818a30:	e0bffa15 	stw	r2,-24(fp)
  818a34:	00000206 	br	818a40 <find_first_empty_record_in_a_subdirectory+0x214>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
  818a38:	00bfffc4 	movi	r2,-1
  818a3c:	e0bffb15 	stw	r2,-20(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
  818a40:	e0fffa17 	ldw	r3,-24(fp)
  818a44:	00bffdd4 	movui	r2,65527
  818a48:	10c00316 	blt	r2,r3,818a58 <find_first_empty_record_in_a_subdirectory+0x22c>
  818a4c:	e0bffb17 	ldw	r2,-20(fp)
  818a50:	10bfffe0 	cmpeqi	r2,r2,-1
  818a54:	103f7e1e 	bne	r2,zero,818850 <find_first_empty_record_in_a_subdirectory+0x24>
    return result; 
  818a58:	e0bffb17 	ldw	r2,-20(fp)
  818a5c:	e0bfff15 	stw	r2,-4(fp)
  818a60:	e0bfff17 	ldw	r2,-4(fp)
}
  818a64:	e037883a 	mov	sp,fp
  818a68:	dfc00117 	ldw	ra,4(sp)
  818a6c:	df000017 	ldw	fp,0(sp)
  818a70:	dec00204 	addi	sp,sp,8
  818a74:	f800283a 	ret

00818a78 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  818a78:	defff804 	addi	sp,sp,-32
  818a7c:	dfc00715 	stw	ra,28(sp)
  818a80:	df000615 	stw	fp,24(sp)
  818a84:	df000604 	addi	fp,sp,24
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  818a88:	008020f4 	movhi	r2,131
  818a8c:	10974c04 	addi	r2,r2,23856
  818a90:	1080050b 	ldhu	r2,20(r2)
  818a94:	10bfffcc 	andi	r2,r2,65535
  818a98:	1008917a 	slli	r4,r2,5
  818a9c:	008020f4 	movhi	r2,131
  818aa0:	10974c04 	addi	r2,r2,23856
  818aa4:	1080030b 	ldhu	r2,12(r2)
  818aa8:	117fffcc 	andi	r5,r2,65535
  818aac:	080ba9c0 	call	80ba9c <__divsi3>
  818ab0:	e0bffe15 	stw	r2,-8(fp)
    int sector_index;
    int result = -1;
  818ab4:	00bfffc4 	movi	r2,-1
  818ab8:	e0bffc15 	stw	r2,-16(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  818abc:	e03ffd15 	stw	zero,-12(fp)
  818ac0:	00002d06 	br	818b78 <find_first_empty_record_in_root_directory+0x100>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  818ac4:	008020f4 	movhi	r2,131
  818ac8:	10974c04 	addi	r2,r2,23856
  818acc:	10c01317 	ldw	r3,76(r2)
  818ad0:	e0bffd17 	ldw	r2,-12(fp)
  818ad4:	1885883a 	add	r2,r3,r2
  818ad8:	1009883a 	mov	r4,r2
  818adc:	d1674a17 	ldw	r5,-25304(gp)
  818ae0:	08165400 	call	816540 <Read_Sector_Data>
  818ae4:	1005003a 	cmpeq	r2,r2,zero
  818ae8:	1000261e 	bne	r2,zero,818b84 <find_first_empty_record_in_root_directory+0x10c>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  818aec:	e03ffb15 	stw	zero,-20(fp)
  818af0:	00001b06 	br	818b60 <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  818af4:	d0a74c17 	ldw	r2,-25296(gp)
  818af8:	10800a17 	ldw	r2,40(r2)
  818afc:	1007883a 	mov	r3,r2
  818b00:	e0bffb17 	ldw	r2,-20(fp)
  818b04:	1004917a 	slli	r2,r2,5
  818b08:	1885883a 	add	r2,r3,r2
  818b0c:	10800023 	ldbuio	r2,0(r2)
  818b10:	10803fcc 	andi	r2,r2,255
  818b14:	e0bffa0d 	sth	r2,-24(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
  818b18:	e0bffa0b 	ldhu	r2,-24(fp)
  818b1c:	10803960 	cmpeqi	r2,r2,229
  818b20:	1000031e 	bne	r2,zero,818b30 <find_first_empty_record_in_root_directory+0xb8>
  818b24:	e0bffa0b 	ldhu	r2,-24(fp)
  818b28:	1004c03a 	cmpne	r2,r2,zero
  818b2c:	1000091e 	bne	r2,zero,818b54 <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
  818b30:	e0bffd17 	ldw	r2,-12(fp)
  818b34:	1006913a 	slli	r3,r2,4
  818b38:	e0bffb17 	ldw	r2,-20(fp)
  818b3c:	1885883a 	add	r2,r3,r2
  818b40:	1004943a 	slli	r2,r2,16
  818b44:	e0bffc15 	stw	r2,-16(fp)
                    return result;
  818b48:	e0bffc17 	ldw	r2,-16(fp)
  818b4c:	e0bfff15 	stw	r2,-4(fp)
  818b50:	00000e06 	br	818b8c <find_first_empty_record_in_root_directory+0x114>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  818b54:	e0bffb17 	ldw	r2,-20(fp)
  818b58:	10800044 	addi	r2,r2,1
  818b5c:	e0bffb15 	stw	r2,-20(fp)
  818b60:	e0bffb17 	ldw	r2,-20(fp)
  818b64:	10800410 	cmplti	r2,r2,16
  818b68:	103fe21e 	bne	r2,zero,818af4 <find_first_empty_record_in_root_directory+0x7c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  818b6c:	e0bffd17 	ldw	r2,-12(fp)
  818b70:	10800044 	addi	r2,r2,1
  818b74:	e0bffd15 	stw	r2,-12(fp)
  818b78:	e0fffd17 	ldw	r3,-12(fp)
  818b7c:	e0bffe17 	ldw	r2,-8(fp)
  818b80:	18bfd016 	blt	r3,r2,818ac4 <find_first_empty_record_in_root_directory+0x4c>
        else
        {
            break;
        }
    }
    return result;
  818b84:	e0bffc17 	ldw	r2,-16(fp)
  818b88:	e0bfff15 	stw	r2,-4(fp)
  818b8c:	e0bfff17 	ldw	r2,-4(fp)
}
  818b90:	e037883a 	mov	sp,fp
  818b94:	dfc00117 	ldw	ra,4(sp)
  818b98:	df000017 	ldw	fp,0(sp)
  818b9c:	dec00204 	addi	sp,sp,8
  818ba0:	f800283a 	ret

00818ba4 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
  818ba4:	defffa04 	addi	sp,sp,-24
  818ba8:	df000515 	stw	fp,20(sp)
  818bac:	df000504 	addi	fp,sp,20
  818bb0:	e13ffd15 	stw	r4,-12(fp)
  818bb4:	e17ffe15 	stw	r5,-8(fp)
  818bb8:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
  818bbc:	e03ffb15 	stw	zero,-20(fp)
    
    for(counter = 0; counter < 8; counter++)
  818bc0:	e03ffc15 	stw	zero,-16(fp)
  818bc4:	00002b06 	br	818c74 <convert_filename_to_name_extension+0xd0>
    {
        if (filename[local] != '.')
  818bc8:	e0bffb17 	ldw	r2,-20(fp)
  818bcc:	1007883a 	mov	r3,r2
  818bd0:	e0bffd17 	ldw	r2,-12(fp)
  818bd4:	1885883a 	add	r2,r3,r2
  818bd8:	10800003 	ldbu	r2,0(r2)
  818bdc:	10803fcc 	andi	r2,r2,255
  818be0:	1080201c 	xori	r2,r2,128
  818be4:	10bfe004 	addi	r2,r2,-128
  818be8:	10800ba0 	cmpeqi	r2,r2,46
  818bec:	1000181e 	bne	r2,zero,818c50 <convert_filename_to_name_extension+0xac>
        {
            name[counter] = filename[local];
  818bf0:	e0bffc17 	ldw	r2,-16(fp)
  818bf4:	1007883a 	mov	r3,r2
  818bf8:	e0bffe17 	ldw	r2,-8(fp)
  818bfc:	1889883a 	add	r4,r3,r2
  818c00:	e0bffb17 	ldw	r2,-20(fp)
  818c04:	1007883a 	mov	r3,r2
  818c08:	e0bffd17 	ldw	r2,-12(fp)
  818c0c:	1885883a 	add	r2,r3,r2
  818c10:	10800003 	ldbu	r2,0(r2)
  818c14:	20800005 	stb	r2,0(r4)
            if (filename[local] != 0) local++;
  818c18:	e0bffb17 	ldw	r2,-20(fp)
  818c1c:	1007883a 	mov	r3,r2
  818c20:	e0bffd17 	ldw	r2,-12(fp)
  818c24:	1885883a 	add	r2,r3,r2
  818c28:	10800003 	ldbu	r2,0(r2)
  818c2c:	10803fcc 	andi	r2,r2,255
  818c30:	1080201c 	xori	r2,r2,128
  818c34:	10bfe004 	addi	r2,r2,-128
  818c38:	1005003a 	cmpeq	r2,r2,zero
  818c3c:	10000a1e 	bne	r2,zero,818c68 <convert_filename_to_name_extension+0xc4>
  818c40:	e0bffb17 	ldw	r2,-20(fp)
  818c44:	10800044 	addi	r2,r2,1
  818c48:	e0bffb15 	stw	r2,-20(fp)
  818c4c:	00000606 	br	818c68 <convert_filename_to_name_extension+0xc4>
        }
        else
        {
            name[counter] = ' ';
  818c50:	e0bffc17 	ldw	r2,-16(fp)
  818c54:	1007883a 	mov	r3,r2
  818c58:	e0bffe17 	ldw	r2,-8(fp)
  818c5c:	1887883a 	add	r3,r3,r2
  818c60:	00800804 	movi	r2,32
  818c64:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
  818c68:	e0bffc17 	ldw	r2,-16(fp)
  818c6c:	10800044 	addi	r2,r2,1
  818c70:	e0bffc15 	stw	r2,-16(fp)
  818c74:	e0bffc17 	ldw	r2,-16(fp)
  818c78:	10800210 	cmplti	r2,r2,8
  818c7c:	103fd21e 	bne	r2,zero,818bc8 <convert_filename_to_name_extension+0x24>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
  818c80:	e0bffb17 	ldw	r2,-20(fp)
  818c84:	1007883a 	mov	r3,r2
  818c88:	e0bffd17 	ldw	r2,-12(fp)
  818c8c:	1885883a 	add	r2,r3,r2
  818c90:	10800003 	ldbu	r2,0(r2)
  818c94:	10803fcc 	andi	r2,r2,255
  818c98:	1080201c 	xori	r2,r2,128
  818c9c:	10bfe004 	addi	r2,r2,-128
  818ca0:	10800b98 	cmpnei	r2,r2,46
  818ca4:	1000031e 	bne	r2,zero,818cb4 <convert_filename_to_name_extension+0x110>
  818ca8:	e0bffb17 	ldw	r2,-20(fp)
  818cac:	10800044 	addi	r2,r2,1
  818cb0:	e0bffb15 	stw	r2,-20(fp)
    for(counter = 0; counter < 3; counter++)
  818cb4:	e03ffc15 	stw	zero,-16(fp)
  818cb8:	00002106 	br	818d40 <convert_filename_to_name_extension+0x19c>
    {
        if (filename[local] != 0)
  818cbc:	e0bffb17 	ldw	r2,-20(fp)
  818cc0:	1007883a 	mov	r3,r2
  818cc4:	e0bffd17 	ldw	r2,-12(fp)
  818cc8:	1885883a 	add	r2,r3,r2
  818ccc:	10800003 	ldbu	r2,0(r2)
  818cd0:	10803fcc 	andi	r2,r2,255
  818cd4:	1080201c 	xori	r2,r2,128
  818cd8:	10bfe004 	addi	r2,r2,-128
  818cdc:	1005003a 	cmpeq	r2,r2,zero
  818ce0:	10000e1e 	bne	r2,zero,818d1c <convert_filename_to_name_extension+0x178>
        {
            extension[counter] = filename[local];
  818ce4:	e0bffc17 	ldw	r2,-16(fp)
  818ce8:	1007883a 	mov	r3,r2
  818cec:	e0bfff17 	ldw	r2,-4(fp)
  818cf0:	1889883a 	add	r4,r3,r2
  818cf4:	e0bffb17 	ldw	r2,-20(fp)
  818cf8:	1007883a 	mov	r3,r2
  818cfc:	e0bffd17 	ldw	r2,-12(fp)
  818d00:	1885883a 	add	r2,r3,r2
  818d04:	10800003 	ldbu	r2,0(r2)
  818d08:	20800005 	stb	r2,0(r4)
            local++;
  818d0c:	e0bffb17 	ldw	r2,-20(fp)
  818d10:	10800044 	addi	r2,r2,1
  818d14:	e0bffb15 	stw	r2,-20(fp)
  818d18:	00000606 	br	818d34 <convert_filename_to_name_extension+0x190>
        }
        else
        {
            extension[counter] = ' ';
  818d1c:	e0bffc17 	ldw	r2,-16(fp)
  818d20:	1007883a 	mov	r3,r2
  818d24:	e0bfff17 	ldw	r2,-4(fp)
  818d28:	1887883a 	add	r3,r3,r2
  818d2c:	00800804 	movi	r2,32
  818d30:	18800005 	stb	r2,0(r3)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
  818d34:	e0bffc17 	ldw	r2,-16(fp)
  818d38:	10800044 	addi	r2,r2,1
  818d3c:	e0bffc15 	stw	r2,-16(fp)
  818d40:	e0bffc17 	ldw	r2,-16(fp)
  818d44:	108000d0 	cmplti	r2,r2,3
  818d48:	103fdc1e 	bne	r2,zero,818cbc <convert_filename_to_name_extension+0x118>
        {
            extension[counter] = ' ';
        }
    }

}
  818d4c:	e037883a 	mov	sp,fp
  818d50:	df000017 	ldw	fp,0(sp)
  818d54:	dec00104 	addi	sp,sp,4
  818d58:	f800283a 	ret

00818d5c <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  818d5c:	defff304 	addi	sp,sp,-52
  818d60:	dfc00c15 	stw	ra,48(sp)
  818d64:	df000b15 	stw	fp,44(sp)
  818d68:	df000b04 	addi	fp,sp,44
  818d6c:	e13ffb15 	stw	r4,-20(fp)
  818d70:	e17ffc15 	stw	r5,-16(fp)
  818d74:	e1bffd15 	stw	r6,-12(fp)
    unsigned int cluster_number;
    bool result = false;
  818d78:	e03ff915 	stw	zero,-28(fp)
    
    if (find_first_empty_cluster(&cluster_number))
  818d7c:	e13ffa04 	addi	r4,fp,-24
  818d80:	08186880 	call	818688 <find_first_empty_cluster>
  818d84:	1005003a 	cmpeq	r2,r2,zero
  818d88:	1000a31e 	bne	r2,zero,819018 <create_file+0x2bc>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
  818d8c:	e0bffd17 	ldw	r2,-12(fp)
  818d90:	10800a17 	ldw	r2,40(r2)
  818d94:	1004c03a 	cmpne	r2,r2,zero
  818d98:	1000031e 	bne	r2,zero,818da8 <create_file+0x4c>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
  818d9c:	0818a780 	call	818a78 <find_first_empty_record_in_root_directory>
  818da0:	e0bff815 	stw	r2,-32(fp)
  818da4:	00000506 	br	818dbc <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
  818da8:	e0bffd17 	ldw	r2,-12(fp)
  818dac:	1080058b 	ldhu	r2,22(r2)
  818db0:	113fffcc 	andi	r4,r2,65535
  818db4:	081882c0 	call	81882c <find_first_empty_record_in_a_subdirectory>
  818db8:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
  818dbc:	e0bff817 	ldw	r2,-32(fp)
  818dc0:	1004803a 	cmplt	r2,r2,zero
  818dc4:	1000941e 	bne	r2,zero,819018 <create_file+0x2bc>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
  818dc8:	e13ffb17 	ldw	r4,-20(fp)
  818dcc:	08179640 	call	817964 <get_dir_divider_location>
  818dd0:	e0bff615 	stw	r2,-40(fp)
            int last_dir_separator = 0;
  818dd4:	e03ff515 	stw	zero,-44(fp)

            // Skip through all directory separators.
            while (location > 0)
  818dd8:	00000b06 	br	818e08 <create_file+0xac>
            {
                last_dir_separator = last_dir_separator+location+1;
  818ddc:	e0fff517 	ldw	r3,-44(fp)
  818de0:	e0bff617 	ldw	r2,-40(fp)
  818de4:	1885883a 	add	r2,r3,r2
  818de8:	10800044 	addi	r2,r2,1
  818dec:	e0bff515 	stw	r2,-44(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
  818df0:	e0bff517 	ldw	r2,-44(fp)
  818df4:	1007883a 	mov	r3,r2
  818df8:	e0bffb17 	ldw	r2,-20(fp)
  818dfc:	1889883a 	add	r4,r3,r2
  818e00:	08179640 	call	817964 <get_dir_divider_location>
  818e04:	e0bff615 	stw	r2,-40(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
  818e08:	e0bff617 	ldw	r2,-40(fp)
  818e0c:	10800048 	cmpgei	r2,r2,1
  818e10:	103ff21e 	bne	r2,zero,818ddc <create_file+0x80>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
  818e14:	e0bff517 	ldw	r2,-44(fp)
  818e18:	1007883a 	mov	r3,r2
  818e1c:	e0bffb17 	ldw	r2,-20(fp)
  818e20:	1889883a 	add	r4,r3,r2
  818e24:	e0bffc17 	ldw	r2,-16(fp)
  818e28:	100b883a 	mov	r5,r2
  818e2c:	e0bffc17 	ldw	r2,-16(fp)
  818e30:	10800204 	addi	r2,r2,8
  818e34:	100d883a 	mov	r6,r2
  818e38:	0818ba40 	call	818ba4 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
  818e3c:	e0bffc17 	ldw	r2,-16(fp)
  818e40:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
  818e44:	e0bffc17 	ldw	r2,-16(fp)
  818e48:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
  818e4c:	e0bffc17 	ldw	r2,-16(fp)
  818e50:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
  818e54:	e0bffc17 	ldw	r2,-16(fp)
  818e58:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
  818e5c:	e0bffc17 	ldw	r2,-16(fp)
  818e60:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
  818e64:	e0bffc17 	ldw	r2,-16(fp)
  818e68:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
  818e6c:	e0bffa17 	ldw	r2,-24(fp)
  818e70:	1007883a 	mov	r3,r2
  818e74:	e0bffc17 	ldw	r2,-16(fp)
  818e78:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
  818e7c:	e0bffc17 	ldw	r2,-16(fp)
  818e80:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
  818e84:	e0fffa17 	ldw	r3,-24(fp)
  818e88:	e0bffc17 	ldw	r2,-16(fp)
  818e8c:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
  818e90:	e0bffc17 	ldw	r2,-16(fp)
  818e94:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
  818e98:	e0bffc17 	ldw	r2,-16(fp)
  818e9c:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
  818ea0:	e0bff817 	ldw	r2,-32(fp)
  818ea4:	10ffffcc 	andi	r3,r2,65535
  818ea8:	e0bffc17 	ldw	r2,-16(fp)
  818eac:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
  818eb0:	e0bff817 	ldw	r2,-32(fp)
  818eb4:	1005d43a 	srai	r2,r2,16
  818eb8:	10bfffcc 	andi	r2,r2,65535
  818ebc:	e0bfff15 	stw	r2,-4(fp)
  818ec0:	e0ffff17 	ldw	r3,-4(fp)
  818ec4:	1804403a 	cmpge	r2,r3,zero
  818ec8:	1000031e 	bne	r2,zero,818ed8 <create_file+0x17c>
  818ecc:	e0bfff17 	ldw	r2,-4(fp)
  818ed0:	108003c4 	addi	r2,r2,15
  818ed4:	e0bfff15 	stw	r2,-4(fp)
  818ed8:	e0ffff17 	ldw	r3,-4(fp)
  818edc:	1805d13a 	srai	r2,r3,4
  818ee0:	1007883a 	mov	r3,r2
  818ee4:	e0bffc17 	ldw	r2,-16(fp)
  818ee8:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
  818eec:	e0bff817 	ldw	r2,-32(fp)
  818ef0:	1005d43a 	srai	r2,r2,16
  818ef4:	108003cc 	andi	r2,r2,15
  818ef8:	1004917a 	slli	r2,r2,5
  818efc:	1007883a 	mov	r3,r2
  818f00:	e0bffc17 	ldw	r2,-16(fp)
  818f04:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
  818f08:	e0bffd17 	ldw	r2,-12(fp)
  818f0c:	1080058b 	ldhu	r2,22(r2)
  818f10:	10ffffcc 	andi	r3,r2,65535
  818f14:	e0bffc17 	ldw	r2,-16(fp)
  818f18:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
  818f1c:	e0fffc17 	ldw	r3,-16(fp)
  818f20:	00800044 	movi	r2,1
  818f24:	18800f15 	stw	r2,60(r3)
            file_record->modified = true;
  818f28:	e0fffc17 	ldw	r3,-16(fp)
  818f2c:	00800044 	movi	r2,1
  818f30:	18800e15 	stw	r2,56(r3)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
  818f34:	e0bffc17 	ldw	r2,-16(fp)
  818f38:	10800a17 	ldw	r2,40(r2)
  818f3c:	1004c03a 	cmpne	r2,r2,zero
  818f40:	1000081e 	bne	r2,zero,818f64 <create_file+0x208>
  818f44:	008020f4 	movhi	r2,131
  818f48:	10974c04 	addi	r2,r2,23856
  818f4c:	10c01317 	ldw	r3,76(r2)
  818f50:	e0bffc17 	ldw	r2,-16(fp)
  818f54:	10800b17 	ldw	r2,44(r2)
  818f58:	1887883a 	add	r3,r3,r2
  818f5c:	e0fffe15 	stw	r3,-8(fp)
  818f60:	00001006 	br	818fa4 <create_file+0x248>
  818f64:	008020f4 	movhi	r2,131
  818f68:	10974c04 	addi	r2,r2,23856
  818f6c:	11001417 	ldw	r4,80(r2)
  818f70:	e0bffc17 	ldw	r2,-16(fp)
  818f74:	10800a17 	ldw	r2,40(r2)
  818f78:	10ffff84 	addi	r3,r2,-2
  818f7c:	008020f4 	movhi	r2,131
  818f80:	10974c04 	addi	r2,r2,23856
  818f84:	10800383 	ldbu	r2,14(r2)
  818f88:	10803fcc 	andi	r2,r2,255
  818f8c:	1885383a 	mul	r2,r3,r2
  818f90:	2087883a 	add	r3,r4,r2
  818f94:	e0bffc17 	ldw	r2,-16(fp)
  818f98:	10800b17 	ldw	r2,44(r2)
  818f9c:	1887883a 	add	r3,r3,r2
  818fa0:	e0fffe15 	stw	r3,-8(fp)
  818fa4:	e0bffe17 	ldw	r2,-8(fp)
  818fa8:	e0bff715 	stw	r2,-36(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
  818fac:	e13ff717 	ldw	r4,-36(fp)
  818fb0:	d1674a17 	ldw	r5,-25304(gp)
  818fb4:	08165400 	call	816540 <Read_Sector_Data>
  818fb8:	1005003a 	cmpeq	r2,r2,zero
  818fbc:	1000161e 	bne	r2,zero,819018 <create_file+0x2bc>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
  818fc0:	e0bffc17 	ldw	r2,-16(fp)
  818fc4:	10800c0b 	ldhu	r2,48(r2)
  818fc8:	113fffcc 	andi	r4,r2,65535
  818fcc:	2120001c 	xori	r4,r4,32768
  818fd0:	21200004 	addi	r4,r4,-32768
  818fd4:	e17ffc17 	ldw	r5,-16(fp)
  818fd8:	0816c0c0 	call	816c0c <Write_File_Record_At_Offset>
  818fdc:	1005003a 	cmpeq	r2,r2,zero
  818fe0:	10000d1e 	bne	r2,zero,819018 <create_file+0x2bc>
                {
                    Save_Modified_Sector();
  818fe4:	08164f00 	call	8164f0 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
  818fe8:	e13ffa17 	ldw	r4,-24(fp)
  818fec:	017fffc4 	movi	r5,-1
  818ff0:	01800044 	movi	r6,1
  818ff4:	08166f40 	call	8166f4 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
  818ff8:	e13ffa17 	ldw	r4,-24(fp)
  818ffc:	017fffc4 	movi	r5,-1
  819000:	000d883a 	mov	r6,zero
  819004:	08166f40 	call	8166f4 <mark_cluster>
  819008:	1005003a 	cmpeq	r2,r2,zero
  81900c:	1000021e 	bne	r2,zero,819018 <create_file+0x2bc>
                    {
                        result = true;
  819010:	00800044 	movi	r2,1
  819014:	e0bff915 	stw	r2,-28(fp)
                }
            }
        }

    }
    return result;           
  819018:	e0bff917 	ldw	r2,-28(fp)
}
  81901c:	e037883a 	mov	sp,fp
  819020:	dfc00117 	ldw	ra,4(sp)
  819024:	df000017 	ldw	fp,0(sp)
  819028:	dec00204 	addi	sp,sp,8
  81902c:	f800283a 	ret

00819030 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
  819030:	defffb04 	addi	sp,sp,-20
  819034:	df000415 	stw	fp,16(sp)
  819038:	df000404 	addi	fp,sp,16
  81903c:	e13ffe15 	stw	r4,-8(fp)
  819040:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
  819044:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
  819048:	e03ffd15 	stw	zero,-12(fp)
  81904c:	00001606 	br	8190a8 <copy_file_record_name_to_string+0x78>
	{
		if (file_record->name[index] != ' ')
  819050:	e0fffd17 	ldw	r3,-12(fp)
  819054:	e0bffe17 	ldw	r2,-8(fp)
  819058:	10c5883a 	add	r2,r2,r3
  81905c:	10800003 	ldbu	r2,0(r2)
  819060:	10803fcc 	andi	r2,r2,255
  819064:	10800820 	cmpeqi	r2,r2,32
  819068:	10000c1e 	bne	r2,zero,81909c <copy_file_record_name_to_string+0x6c>
		{
			file_name[flength] = file_record->name[index];
  81906c:	e0bffc17 	ldw	r2,-16(fp)
  819070:	1007883a 	mov	r3,r2
  819074:	e0bfff17 	ldw	r2,-4(fp)
  819078:	1889883a 	add	r4,r3,r2
  81907c:	e0fffd17 	ldw	r3,-12(fp)
  819080:	e0bffe17 	ldw	r2,-8(fp)
  819084:	10c5883a 	add	r2,r2,r3
  819088:	10800003 	ldbu	r2,0(r2)
  81908c:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
  819090:	e0bffc17 	ldw	r2,-16(fp)
  819094:	10800044 	addi	r2,r2,1
  819098:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
  81909c:	e0bffd17 	ldw	r2,-12(fp)
  8190a0:	10800044 	addi	r2,r2,1
  8190a4:	e0bffd15 	stw	r2,-12(fp)
  8190a8:	e0bffd17 	ldw	r2,-12(fp)
  8190ac:	10800210 	cmplti	r2,r2,8
  8190b0:	103fe71e 	bne	r2,zero,819050 <copy_file_record_name_to_string+0x20>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
  8190b4:	e0bffe17 	ldw	r2,-8(fp)
  8190b8:	10800203 	ldbu	r2,8(r2)
  8190bc:	10803fcc 	andi	r2,r2,255
  8190c0:	10800820 	cmpeqi	r2,r2,32
  8190c4:	1000261e 	bne	r2,zero,819160 <copy_file_record_name_to_string+0x130>
	{
		file_name[flength] = '.';
  8190c8:	e0bffc17 	ldw	r2,-16(fp)
  8190cc:	1007883a 	mov	r3,r2
  8190d0:	e0bfff17 	ldw	r2,-4(fp)
  8190d4:	1887883a 	add	r3,r3,r2
  8190d8:	00800b84 	movi	r2,46
  8190dc:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  8190e0:	e0bffc17 	ldw	r2,-16(fp)
  8190e4:	10800044 	addi	r2,r2,1
  8190e8:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++)
  8190ec:	e03ffd15 	stw	zero,-12(fp)
  8190f0:	00001806 	br	819154 <copy_file_record_name_to_string+0x124>
		{
			if (file_record->extension[index] != ' ')
  8190f4:	e0fffd17 	ldw	r3,-12(fp)
  8190f8:	e0bffe17 	ldw	r2,-8(fp)
  8190fc:	1885883a 	add	r2,r3,r2
  819100:	10800204 	addi	r2,r2,8
  819104:	10800003 	ldbu	r2,0(r2)
  819108:	10803fcc 	andi	r2,r2,255
  81910c:	10800820 	cmpeqi	r2,r2,32
  819110:	10000d1e 	bne	r2,zero,819148 <copy_file_record_name_to_string+0x118>
			{
				file_name[flength] = file_record->extension[index];
  819114:	e0bffc17 	ldw	r2,-16(fp)
  819118:	1007883a 	mov	r3,r2
  81911c:	e0bfff17 	ldw	r2,-4(fp)
  819120:	1889883a 	add	r4,r3,r2
  819124:	e0fffd17 	ldw	r3,-12(fp)
  819128:	e0bffe17 	ldw	r2,-8(fp)
  81912c:	1885883a 	add	r2,r3,r2
  819130:	10800204 	addi	r2,r2,8
  819134:	10800003 	ldbu	r2,0(r2)
  819138:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
  81913c:	e0bffc17 	ldw	r2,-16(fp)
  819140:	10800044 	addi	r2,r2,1
  819144:	e0bffc15 	stw	r2,-16(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
  819148:	e0bffd17 	ldw	r2,-12(fp)
  81914c:	10800044 	addi	r2,r2,1
  819150:	e0bffd15 	stw	r2,-12(fp)
  819154:	e0bffd17 	ldw	r2,-12(fp)
  819158:	108000d0 	cmplti	r2,r2,3
  81915c:	103fe51e 	bne	r2,zero,8190f4 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
  819160:	e0bffc17 	ldw	r2,-16(fp)
  819164:	1007883a 	mov	r3,r2
  819168:	e0bfff17 	ldw	r2,-4(fp)
  81916c:	1885883a 	add	r2,r3,r2
  819170:	10000005 	stb	zero,0(r2)
}
  819174:	e037883a 	mov	sp,fp
  819178:	df000017 	ldw	fp,0(sp)
  81917c:	dec00104 	addi	sp,sp,4
  819180:	f800283a 	ret

00819184 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
  819184:	defffc04 	addi	sp,sp,-16
  819188:	dfc00315 	stw	ra,12(sp)
  81918c:	df000215 	stw	fp,8(sp)
  819190:	df000204 	addi	fp,sp,8
  819194:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
  819198:	e13fff17 	ldw	r4,-4(fp)
  81919c:	014020b4 	movhi	r5,130
  8191a0:	2978f704 	addi	r5,r5,-7204
  8191a4:	081aba40 	call	81aba4 <alt_find_dev>
  8191a8:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
  8191ac:	e0bffe17 	ldw	r2,-8(fp)
  8191b0:	1005003a 	cmpeq	r2,r2,zero
  8191b4:	10001e1e 	bne	r2,zero,819230 <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  8191b8:	e0bffe17 	ldw	r2,-8(fp)
  8191bc:	10800a17 	ldw	r2,40(r2)
  8191c0:	10808d04 	addi	r2,r2,564
  8191c4:	d0a74415 	stw	r2,-25328(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  8191c8:	e0bffe17 	ldw	r2,-8(fp)
  8191cc:	10800a17 	ldw	r2,40(r2)
  8191d0:	10808904 	addi	r2,r2,548
  8191d4:	d0a74515 	stw	r2,-25324(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  8191d8:	e0bffe17 	ldw	r2,-8(fp)
  8191dc:	10800a17 	ldw	r2,40(r2)
  8191e0:	10808404 	addi	r2,r2,528
  8191e4:	d0a74615 	stw	r2,-25320(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  8191e8:	e0bffe17 	ldw	r2,-8(fp)
  8191ec:	10800a17 	ldw	r2,40(r2)
  8191f0:	10808c04 	addi	r2,r2,560
  8191f4:	d0a74715 	stw	r2,-25316(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  8191f8:	e0bffe17 	ldw	r2,-8(fp)
  8191fc:	10800a17 	ldw	r2,40(r2)
  819200:	10808b04 	addi	r2,r2,556
  819204:	d0a74815 	stw	r2,-25312(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  819208:	e0bffe17 	ldw	r2,-8(fp)
  81920c:	10800a17 	ldw	r2,40(r2)
  819210:	d0a74915 	stw	r2,-25308(gp)
		device_pointer = dev;
  819214:	e0bffe17 	ldw	r2,-8(fp)
  819218:	d0a74c15 	stw	r2,-25296(gp)
		initialized = false;
  81921c:	d0274215 	stw	zero,-25336(gp)
		is_sd_card_formated_as_FAT16 = false;
  819220:	d0274315 	stw	zero,-25332(gp)
		search_data.valid = false;
  819224:	008020f4 	movhi	r2,131
  819228:	10974704 	addi	r2,r2,23836
  81922c:	10000415 	stw	zero,16(r2)
	}
	return dev;
  819230:	e0bffe17 	ldw	r2,-8(fp)
}
  819234:	e037883a 	mov	sp,fp
  819238:	dfc00117 	ldw	ra,4(sp)
  81923c:	df000017 	ldw	fp,0(sp)
  819240:	dec00204 	addi	sp,sp,8
  819244:	f800283a 	ret

00819248 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
  819248:	defffd04 	addi	sp,sp,-12
  81924c:	df000215 	stw	fp,8(sp)
  819250:	df000204 	addi	fp,sp,8
    bool result = false;
  819254:	e03fff15 	stw	zero,-4(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  819258:	d0a74c17 	ldw	r2,-25296(gp)
  81925c:	1005003a 	cmpeq	r2,r2,zero
  819260:	1000081e 	bne	r2,zero,819284 <alt_up_sd_card_is_Present+0x3c>
  819264:	d0a74417 	ldw	r2,-25328(gp)
  819268:	1080002b 	ldhuio	r2,0(r2)
  81926c:	1080008c 	andi	r2,r2,2
  819270:	1005003a 	cmpeq	r2,r2,zero
  819274:	1000031e 	bne	r2,zero,819284 <alt_up_sd_card_is_Present+0x3c>
    {
        result = true;
  819278:	00800044 	movi	r2,1
  81927c:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  819280:	00001e06 	br	8192fc <alt_up_sd_card_is_Present+0xb4>
    {
        result = true;
    }
	else if (initialized == true)
  819284:	d0a74217 	ldw	r2,-25336(gp)
  819288:	10800058 	cmpnei	r2,r2,1
  81928c:	10001b1e 	bne	r2,zero,8192fc <alt_up_sd_card_is_Present+0xb4>
	{
		int index;

		initialized = false;
  819290:	d0274215 	stw	zero,-25336(gp)
		search_data.valid = false;
  819294:	008020f4 	movhi	r2,131
  819298:	10974704 	addi	r2,r2,23836
  81929c:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
  8192a0:	d0274315 	stw	zero,-25332(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
  8192a4:	e03ffe15 	stw	zero,-8(fp)
  8192a8:	00001106 	br	8192f0 <alt_up_sd_card_is_Present+0xa8>
		{
			active_files[index].in_use = false;
  8192ac:	e0bffe17 	ldw	r2,-8(fp)
  8192b0:	00c020f4 	movhi	r3,131
  8192b4:	18d76104 	addi	r3,r3,23940
  8192b8:	100491ba 	slli	r2,r2,6
  8192bc:	10c5883a 	add	r2,r2,r3
  8192c0:	10800f04 	addi	r2,r2,60
  8192c4:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
  8192c8:	e0bffe17 	ldw	r2,-8(fp)
  8192cc:	00c020f4 	movhi	r3,131
  8192d0:	18d76104 	addi	r3,r3,23940
  8192d4:	100491ba 	slli	r2,r2,6
  8192d8:	10c5883a 	add	r2,r2,r3
  8192dc:	10800e04 	addi	r2,r2,56
  8192e0:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  8192e4:	e0bffe17 	ldw	r2,-8(fp)
  8192e8:	10800044 	addi	r2,r2,1
  8192ec:	e0bffe15 	stw	r2,-8(fp)
  8192f0:	e0bffe17 	ldw	r2,-8(fp)
  8192f4:	10800510 	cmplti	r2,r2,20
  8192f8:	103fec1e 	bne	r2,zero,8192ac <alt_up_sd_card_is_Present+0x64>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
  8192fc:	e0bfff17 	ldw	r2,-4(fp)
}
  819300:	e037883a 	mov	sp,fp
  819304:	df000017 	ldw	fp,0(sp)
  819308:	dec00104 	addi	sp,sp,4
  81930c:	f800283a 	ret

00819310 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  819310:	defffd04 	addi	sp,sp,-12
  819314:	dfc00215 	stw	ra,8(sp)
  819318:	df000115 	stw	fp,4(sp)
  81931c:	df000104 	addi	fp,sp,4
	bool result = false;
  819320:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
  819324:	08192480 	call	819248 <alt_up_sd_card_is_Present>
  819328:	1005003a 	cmpeq	r2,r2,zero
  81932c:	10000d1e 	bne	r2,zero,819364 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
  819330:	d0a74217 	ldw	r2,-25336(gp)
  819334:	1004c03a 	cmpne	r2,r2,zero
  819338:	1000071e 	bne	r2,zero,819358 <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  81933c:	081750c0 	call	81750c <Look_for_FAT16>
  819340:	d0a74315 	stw	r2,-25332(gp)
			initialized = is_sd_card_formated_as_FAT16;
  819344:	d0a74317 	ldw	r2,-25332(gp)
  819348:	d0a74215 	stw	r2,-25336(gp)
			search_data.valid = false;
  81934c:	008020f4 	movhi	r2,131
  819350:	10974704 	addi	r2,r2,23836
  819354:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
  819358:	d0a74317 	ldw	r2,-25332(gp)
  81935c:	e0bfff15 	stw	r2,-4(fp)
  819360:	00000206 	br	81936c <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
  819364:	d0274215 	stw	zero,-25336(gp)
		is_sd_card_formated_as_FAT16 = false;
  819368:	d0274315 	stw	zero,-25332(gp)
	}

	return result;
  81936c:	e0bfff17 	ldw	r2,-4(fp)
}
  819370:	e037883a 	mov	sp,fp
  819374:	dfc00117 	ldw	ra,4(sp)
  819378:	df000017 	ldw	fp,0(sp)
  81937c:	dec00204 	addi	sp,sp,8
  819380:	f800283a 	ret

00819384 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  819384:	deffea04 	addi	sp,sp,-88
  819388:	dfc01515 	stw	ra,84(sp)
  81938c:	df001415 	stw	fp,80(sp)
  819390:	df001404 	addi	fp,sp,80
  819394:	e13ffe15 	stw	r4,-8(fp)
  819398:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
  81939c:	00800084 	movi	r2,2
  8193a0:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  8193a4:	08192480 	call	819248 <alt_up_sd_card_is_Present>
  8193a8:	1005003a 	cmpeq	r2,r2,zero
  8193ac:	1000241e 	bne	r2,zero,819440 <alt_up_sd_card_find_first+0xbc>
  8193b0:	d0a74317 	ldw	r2,-25332(gp)
  8193b4:	1005003a 	cmpeq	r2,r2,zero
  8193b8:	1000211e 	bne	r2,zero,819440 <alt_up_sd_card_find_first+0xbc>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
  8193bc:	e17fed04 	addi	r5,fp,-76
  8193c0:	e1bfee04 	addi	r6,fp,-72
  8193c4:	e13ffe17 	ldw	r4,-8(fp)
  8193c8:	0817d100 	call	817d10 <get_home_directory_cluster_for_file>
  8193cc:	1005003a 	cmpeq	r2,r2,zero
  8193d0:	1000191e 	bne	r2,zero,819438 <alt_up_sd_card_find_first+0xb4>
		{
			search_data.directory_root_cluster = home_directory_cluster;
  8193d4:	e0bfed17 	ldw	r2,-76(fp)
  8193d8:	1007883a 	mov	r3,r2
  8193dc:	008020f4 	movhi	r2,131
  8193e0:	10974704 	addi	r2,r2,23836
  8193e4:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
  8193e8:	e0bfed17 	ldw	r2,-76(fp)
  8193ec:	1007883a 	mov	r3,r2
  8193f0:	008020f4 	movhi	r2,131
  8193f4:	10974704 	addi	r2,r2,23836
  8193f8:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
  8193fc:	008020f4 	movhi	r2,131
  819400:	10974704 	addi	r2,r2,23836
  819404:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
  819408:	00c020f4 	movhi	r3,131
  81940c:	18d74704 	addi	r3,r3,23836
  819410:	00bfffc4 	movi	r2,-1
  819414:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
  819418:	00c020f4 	movhi	r3,131
  81941c:	18d74704 	addi	r3,r3,23836
  819420:	00800044 	movi	r2,1
  819424:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
  819428:	e13fff17 	ldw	r4,-4(fp)
  81942c:	08194580 	call	819458 <alt_up_sd_card_find_next>
  819430:	e0bfec0d 	sth	r2,-80(fp)
  819434:	00000206 	br	819440 <alt_up_sd_card_find_first+0xbc>
		}
		else
		{
			result = 1;
  819438:	00800044 	movi	r2,1
  81943c:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
  819440:	e0bfec0f 	ldh	r2,-80(fp)
}
  819444:	e037883a 	mov	sp,fp
  819448:	dfc00117 	ldw	ra,4(sp)
  81944c:	df000017 	ldw	fp,0(sp)
  819450:	dec00204 	addi	sp,sp,8
  819454:	f800283a 	ret

00819458 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  819458:	deffe404 	addi	sp,sp,-112
  81945c:	dfc01b15 	stw	ra,108(sp)
  819460:	df001a15 	stw	fp,104(sp)
  819464:	df001a04 	addi	fp,sp,104
  819468:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
  81946c:	00800084 	movi	r2,2
  819470:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  819474:	08192480 	call	819248 <alt_up_sd_card_is_Present>
  819478:	1005003a 	cmpeq	r2,r2,zero
  81947c:	1000da1e 	bne	r2,zero,8197e8 <alt_up_sd_card_find_next+0x390>
  819480:	d0a74317 	ldw	r2,-25332(gp)
  819484:	1005003a 	cmpeq	r2,r2,zero
  819488:	1000d71e 	bne	r2,zero,8197e8 <alt_up_sd_card_find_next+0x390>
	{
		if (search_data.valid)
  81948c:	008020f4 	movhi	r2,131
  819490:	10974704 	addi	r2,r2,23836
  819494:	10800417 	ldw	r2,16(r2)
  819498:	1005003a 	cmpeq	r2,r2,zero
  81949c:	1000d01e 	bne	r2,zero,8197e0 <alt_up_sd_card_find_next+0x388>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  8194a0:	008020f4 	movhi	r2,131
  8194a4:	10974704 	addi	r2,r2,23836
  8194a8:	10800117 	ldw	r2,4(r2)
  8194ac:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0)
  8194b0:	e0bfec17 	ldw	r2,-80(fp)
  8194b4:	1004c03a 	cmpne	r2,r2,zero
  8194b8:	1000511e 	bne	r2,zero,819600 <alt_up_sd_card_find_next+0x1a8>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  8194bc:	008020f4 	movhi	r2,131
  8194c0:	10974c04 	addi	r2,r2,23856
  8194c4:	1080050b 	ldhu	r2,20(r2)
  8194c8:	10bfffcc 	andi	r2,r2,65535
  8194cc:	1008917a 	slli	r4,r2,5
  8194d0:	008020f4 	movhi	r2,131
  8194d4:	10974c04 	addi	r2,r2,23856
  8194d8:	1080030b 	ldhu	r2,12(r2)
  8194dc:	117fffcc 	andi	r5,r2,65535
  8194e0:	080ba9c0 	call	80ba9c <__divsi3>
  8194e4:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
  8194e8:	008020f4 	movhi	r2,131
  8194ec:	10974704 	addi	r2,r2,23836
  8194f0:	10800217 	ldw	r2,8(r2)
  8194f4:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector+1;
  8194f8:	008020f4 	movhi	r2,131
  8194fc:	10974704 	addi	r2,r2,23836
  819500:	1080030b 	ldhu	r2,12(r2)
  819504:	10bfffcc 	andi	r2,r2,65535
  819508:	10a0001c 	xori	r2,r2,32768
  81950c:	10a00004 	addi	r2,r2,-32768
  819510:	10800044 	addi	r2,r2,1
  819514:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
  819518:	00003306 	br	8195e8 <alt_up_sd_card_find_next+0x190>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  81951c:	008020f4 	movhi	r2,131
  819520:	10974c04 	addi	r2,r2,23856
  819524:	10c01317 	ldw	r3,76(r2)
  819528:	e0bfea17 	ldw	r2,-88(fp)
  81952c:	1885883a 	add	r2,r3,r2
  819530:	1009883a 	mov	r4,r2
  819534:	d1674a17 	ldw	r5,-25304(gp)
  819538:	08165400 	call	816540 <Read_Sector_Data>
  81953c:	1005003a 	cmpeq	r2,r2,zero
  819540:	10002c1e 	bne	r2,zero,8195f4 <alt_up_sd_card_find_next+0x19c>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  819544:	00002106 	br	8195cc <alt_up_sd_card_find_next+0x174>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
  819548:	e0bfe917 	ldw	r2,-92(fp)
  81954c:	1008917a 	slli	r4,r2,5
  819550:	e1ffea17 	ldw	r7,-88(fp)
  819554:	e17fee04 	addi	r5,fp,-72
  819558:	000d883a 	mov	r6,zero
  81955c:	08169880 	call	816988 <Read_File_Record_At_Offset>
  819560:	1005003a 	cmpeq	r2,r2,zero
  819564:	1000161e 	bne	r2,zero,8195c0 <alt_up_sd_card_find_next+0x168>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  819568:	e0bfee03 	ldbu	r2,-72(fp)
  81956c:	10803fcc 	andi	r2,r2,255
  819570:	1005003a 	cmpeq	r2,r2,zero
  819574:	1000121e 	bne	r2,zero,8195c0 <alt_up_sd_card_find_next+0x168>
  819578:	e0bfee03 	ldbu	r2,-72(fp)
  81957c:	10803fcc 	andi	r2,r2,255
  819580:	10803960 	cmpeqi	r2,r2,229
  819584:	10000e1e 	bne	r2,zero,8195c0 <alt_up_sd_card_find_next+0x168>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
  819588:	e0bfe917 	ldw	r2,-92(fp)
  81958c:	1007883a 	mov	r3,r2
  819590:	008020f4 	movhi	r2,131
  819594:	10974704 	addi	r2,r2,23836
  819598:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
  81959c:	e0ffea17 	ldw	r3,-88(fp)
  8195a0:	008020f4 	movhi	r2,131
  8195a4:	10974704 	addi	r2,r2,23836
  8195a8:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
  8195ac:	e13fee04 	addi	r4,fp,-72
  8195b0:	e17ffe17 	ldw	r5,-8(fp)
  8195b4:	08190300 	call	819030 <copy_file_record_name_to_string>
									return 0;
  8195b8:	e03fff15 	stw	zero,-4(fp)
  8195bc:	00008c06 	br	8197f0 <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  8195c0:	e0bfe917 	ldw	r2,-92(fp)
  8195c4:	10800044 	addi	r2,r2,1
  8195c8:	e0bfe915 	stw	r2,-92(fp)
  8195cc:	e0bfe917 	ldw	r2,-92(fp)
  8195d0:	10800410 	cmplti	r2,r2,16
  8195d4:	103fdc1e 	bne	r2,zero,819548 <alt_up_sd_card_find_next+0xf0>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
  8195d8:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
  8195dc:	e0bfea17 	ldw	r2,-88(fp)
  8195e0:	10800044 	addi	r2,r2,1
  8195e4:	e0bfea15 	stw	r2,-88(fp)
  8195e8:	e0ffea17 	ldw	r3,-88(fp)
  8195ec:	e0bfeb17 	ldw	r2,-84(fp)
  8195f0:	18bfca16 	blt	r3,r2,81951c <alt_up_sd_card_find_next+0xc4>
					else
					{
						break;
					}
				}
				result = -1;
  8195f4:	00bfffc4 	movi	r2,-1
  8195f8:	e0bfed0d 	sth	r2,-76(fp)
  8195fc:	00007a06 	br	8197e8 <alt_up_sd_card_find_next+0x390>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
  819600:	008020f4 	movhi	r2,131
  819604:	10974704 	addi	r2,r2,23836
  819608:	1080030b 	ldhu	r2,12(r2)
  81960c:	10bfffcc 	andi	r2,r2,65535
  819610:	10a0001c 	xori	r2,r2,32768
  819614:	10a00004 	addi	r2,r2,-32768
  819618:	10800044 	addi	r2,r2,1
  81961c:	e0bfe815 	stw	r2,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  819620:	e0bfec17 	ldw	r2,-80(fp)
  819624:	10ffff84 	addi	r3,r2,-2
  819628:	008020f4 	movhi	r2,131
  81962c:	10974c04 	addi	r2,r2,23856
  819630:	10800383 	ldbu	r2,14(r2)
  819634:	10803fcc 	andi	r2,r2,255
  819638:	1885383a 	mul	r2,r3,r2
  81963c:	1007883a 	mov	r3,r2
  819640:	008020f4 	movhi	r2,131
  819644:	10974c04 	addi	r2,r2,23856
  819648:	10801417 	ldw	r2,80(r2)
  81964c:	1885883a 	add	r2,r3,r2
  819650:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
  819654:	008020f4 	movhi	r2,131
  819658:	10974704 	addi	r2,r2,23836
  81965c:	10800217 	ldw	r2,8(r2)
  819660:	e0bfe615 	stw	r2,-104(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  819664:	00003406 	br	819738 <alt_up_sd_card_find_next+0x2e0>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  819668:	e0ffe617 	ldw	r3,-104(fp)
  81966c:	e0bfe717 	ldw	r2,-100(fp)
  819670:	1889883a 	add	r4,r3,r2
  819674:	d1674a17 	ldw	r5,-25304(gp)
  819678:	08165400 	call	816540 <Read_Sector_Data>
  81967c:	1005003a 	cmpeq	r2,r2,zero
  819680:	1000331e 	bne	r2,zero,819750 <alt_up_sd_card_find_next+0x2f8>
						{        
							for (; file_counter < 16; file_counter++)
  819684:	00002506 	br	81971c <alt_up_sd_card_find_next+0x2c4>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
  819688:	e0bfe817 	ldw	r2,-96(fp)
  81968c:	1008917a 	slli	r4,r2,5
  819690:	e1bfec17 	ldw	r6,-80(fp)
  819694:	e1ffe617 	ldw	r7,-104(fp)
  819698:	e17fee04 	addi	r5,fp,-72
  81969c:	08169880 	call	816988 <Read_File_Record_At_Offset>
  8196a0:	1005003a 	cmpeq	r2,r2,zero
  8196a4:	10001a1e 	bne	r2,zero,819710 <alt_up_sd_card_find_next+0x2b8>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  8196a8:	e0bfee03 	ldbu	r2,-72(fp)
  8196ac:	10803fcc 	andi	r2,r2,255
  8196b0:	1005003a 	cmpeq	r2,r2,zero
  8196b4:	1000161e 	bne	r2,zero,819710 <alt_up_sd_card_find_next+0x2b8>
  8196b8:	e0bfee03 	ldbu	r2,-72(fp)
  8196bc:	10803fcc 	andi	r2,r2,255
  8196c0:	10803960 	cmpeqi	r2,r2,229
  8196c4:	1000121e 	bne	r2,zero,819710 <alt_up_sd_card_find_next+0x2b8>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
  8196c8:	e0ffec17 	ldw	r3,-80(fp)
  8196cc:	008020f4 	movhi	r2,131
  8196d0:	10974704 	addi	r2,r2,23836
  8196d4:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
  8196d8:	e0bfe817 	ldw	r2,-96(fp)
  8196dc:	1007883a 	mov	r3,r2
  8196e0:	008020f4 	movhi	r2,131
  8196e4:	10974704 	addi	r2,r2,23836
  8196e8:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
  8196ec:	e0ffe617 	ldw	r3,-104(fp)
  8196f0:	008020f4 	movhi	r2,131
  8196f4:	10974704 	addi	r2,r2,23836
  8196f8:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
  8196fc:	e13fee04 	addi	r4,fp,-72
  819700:	e17ffe17 	ldw	r5,-8(fp)
  819704:	08190300 	call	819030 <copy_file_record_name_to_string>
										return 0;
  819708:	e03fff15 	stw	zero,-4(fp)
  81970c:	00003806 	br	8197f0 <alt_up_sd_card_find_next+0x398>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
  819710:	e0bfe817 	ldw	r2,-96(fp)
  819714:	10800044 	addi	r2,r2,1
  819718:	e0bfe815 	stw	r2,-96(fp)
  81971c:	e0bfe817 	ldw	r2,-96(fp)
  819720:	10800410 	cmplti	r2,r2,16
  819724:	103fd81e 	bne	r2,zero,819688 <alt_up_sd_card_find_next+0x230>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
  819728:	e03fe815 	stw	zero,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  81972c:	e0bfe617 	ldw	r2,-104(fp)
  819730:	10800044 	addi	r2,r2,1
  819734:	e0bfe615 	stw	r2,-104(fp)
  819738:	008020f4 	movhi	r2,131
  81973c:	10974c04 	addi	r2,r2,23856
  819740:	10800383 	ldbu	r2,14(r2)
  819744:	10c03fcc 	andi	r3,r2,255
  819748:	e0bfe617 	ldw	r2,-104(fp)
  81974c:	10ffc616 	blt	r2,r3,819668 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
  819750:	008020f4 	movhi	r2,131
  819754:	10974c04 	addi	r2,r2,23856
  819758:	10800383 	ldbu	r2,14(r2)
  81975c:	10c03fcc 	andi	r3,r2,255
  819760:	e0bfe617 	ldw	r2,-104(fp)
  819764:	10c01a16 	blt	r2,r3,8197d0 <alt_up_sd_card_find_next+0x378>
					{
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
  819768:	e13fec17 	ldw	r4,-80(fp)
  81976c:	e17fed84 	addi	r5,fp,-74
  819770:	081663c0 	call	81663c <get_cluster_flag>
  819774:	1005003a 	cmpeq	r2,r2,zero
  819778:	1000131e 	bne	r2,zero,8197c8 <alt_up_sd_card_find_next+0x370>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  81977c:	e0bfed8b 	ldhu	r2,-74(fp)
  819780:	10bfffcc 	andi	r2,r2,65535
  819784:	10a0001c 	xori	r2,r2,32768
  819788:	10a00004 	addi	r2,r2,-32768
  81978c:	10fffe0c 	andi	r3,r2,65528
  819790:	00bffe14 	movui	r2,65528
  819794:	1880051e 	bne	r3,r2,8197ac <alt_up_sd_card_find_next+0x354>
							{
								result = -1;
  819798:	00bfffc4 	movi	r2,-1
  81979c:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
  8197a0:	008020f4 	movhi	r2,131
  8197a4:	10974704 	addi	r2,r2,23836
  8197a8:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
  8197ac:	e0bfed8b 	ldhu	r2,-74(fp)
  8197b0:	10bfffcc 	andi	r2,r2,65535
  8197b4:	10a0001c 	xori	r2,r2,32768
  8197b8:	10a00004 	addi	r2,r2,-32768
  8197bc:	10bffe0c 	andi	r2,r2,65528
  8197c0:	e0bfec15 	stw	r2,-80(fp)
  8197c4:	00000206 	br	8197d0 <alt_up_sd_card_find_next+0x378>
						}
						else
						{
							// Error encountered.                 
							result = -1;
  8197c8:	00bfffc4 	movi	r2,-1
  8197cc:	e0bfed0d 	sth	r2,-76(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
  8197d0:	e0ffec17 	ldw	r3,-80(fp)
  8197d4:	00bffdd4 	movui	r2,65527
  8197d8:	10ff910e 	bge	r2,r3,819620 <alt_up_sd_card_find_next+0x1c8>
  8197dc:	00000206 	br	8197e8 <alt_up_sd_card_find_next+0x390>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
  8197e0:	008000c4 	movi	r2,3
  8197e4:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
  8197e8:	e0bfed0f 	ldh	r2,-76(fp)
  8197ec:	e0bfff15 	stw	r2,-4(fp)
  8197f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8197f4:	e037883a 	mov	sp,fp
  8197f8:	dfc00117 	ldw	ra,4(sp)
  8197fc:	df000017 	ldw	fp,0(sp)
  819800:	dec00204 	addi	sp,sp,8
  819804:	f800283a 	ret

00819808 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  819808:	deffe804 	addi	sp,sp,-96
  81980c:	dfc01715 	stw	ra,92(sp)
  819810:	df001615 	stw	fp,88(sp)
  819814:	df001604 	addi	fp,sp,88
  819818:	e13ffd15 	stw	r4,-12(fp)
  81981c:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
  819820:	00bfffc4 	movi	r2,-1
  819824:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  819828:	08192480 	call	819248 <alt_up_sd_card_is_Present>
  81982c:	1005003a 	cmpeq	r2,r2,zero
  819830:	1000d71e 	bne	r2,zero,819b90 <alt_up_sd_card_fopen+0x388>
  819834:	d0a74317 	ldw	r2,-25332(gp)
  819838:	1005003a 	cmpeq	r2,r2,zero
  81983c:	1000d41e 	bne	r2,zero,819b90 <alt_up_sd_card_fopen+0x388>
	{
        unsigned int home_directory_cluster = 0;
  819840:	e03fec15 	stw	zero,-80(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
  819844:	e13ffd17 	ldw	r4,-12(fp)
  819848:	08176040 	call	817604 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
  81984c:	e13ffd17 	ldw	r4,-12(fp)
  819850:	08176d40 	call	8176d4 <check_file_name_for_FAT16_compliance>
  819854:	1005003a 	cmpeq	r2,r2,zero
  819858:	1000cd1e 	bne	r2,zero,819b90 <alt_up_sd_card_fopen+0x388>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, &home_directory_cluster, &home_dir))
  81985c:	e17fec04 	addi	r5,fp,-80
  819860:	e1bfed04 	addi	r6,fp,-76
  819864:	e13ffd17 	ldw	r4,-12(fp)
  819868:	0817d100 	call	817d10 <get_home_directory_cluster_for_file>
  81986c:	1004c03a 	cmpne	r2,r2,zero
  819870:	1000031e 	bne	r2,zero,819880 <alt_up_sd_card_fopen+0x78>
            {
                return file_record_index;
  819874:	e0bfeb0f 	ldh	r2,-84(fp)
  819878:	e0bfff15 	stw	r2,-4(fp)
  81987c:	0000c606 	br	819b98 <alt_up_sd_card_fopen+0x390>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
  819880:	e03fea15 	stw	zero,-88(fp)
  819884:	00000f06 	br	8198c4 <alt_up_sd_card_fopen+0xbc>
    		{
    			if (active_files[index].in_use == false)
  819888:	e0bfea17 	ldw	r2,-88(fp)
  81988c:	00c020f4 	movhi	r3,131
  819890:	18d76104 	addi	r3,r3,23940
  819894:	100491ba 	slli	r2,r2,6
  819898:	10c5883a 	add	r2,r2,r3
  81989c:	10800f04 	addi	r2,r2,60
  8198a0:	10800017 	ldw	r2,0(r2)
  8198a4:	1004c03a 	cmpne	r2,r2,zero
  8198a8:	1000031e 	bne	r2,zero,8198b8 <alt_up_sd_card_fopen+0xb0>
    			{
    				file_record_index = index;
  8198ac:	e0bfea17 	ldw	r2,-88(fp)
  8198b0:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
  8198b4:	00000606 	br	8198d0 <alt_up_sd_card_fopen+0xc8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
  8198b8:	e0bfea17 	ldw	r2,-88(fp)
  8198bc:	10800044 	addi	r2,r2,1
  8198c0:	e0bfea15 	stw	r2,-88(fp)
  8198c4:	e0bfea17 	ldw	r2,-88(fp)
  8198c8:	10800510 	cmplti	r2,r2,20
  8198cc:	103fee1e 	bne	r2,zero,819888 <alt_up_sd_card_fopen+0x80>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
  8198d0:	e0bfeb0f 	ldh	r2,-84(fp)
  8198d4:	1004803a 	cmplt	r2,r2,zero
  8198d8:	1000ad1e 	bne	r2,zero,819b90 <alt_up_sd_card_fopen+0x388>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
  8198dc:	e0bfec17 	ldw	r2,-80(fp)
  8198e0:	1009883a 	mov	r4,r2
  8198e4:	e0bfeb0f 	ldh	r2,-84(fp)
  8198e8:	100491ba 	slli	r2,r2,6
  8198ec:	1007883a 	mov	r3,r2
  8198f0:	008020f4 	movhi	r2,131
  8198f4:	10976104 	addi	r2,r2,23940
  8198f8:	188d883a 	add	r6,r3,r2
  8198fc:	e17ffd17 	ldw	r5,-12(fp)
  819900:	08182240 	call	818224 <find_file_in_directory>
  819904:	1005003a 	cmpeq	r2,r2,zero
  819908:	10007d1e 	bne	r2,zero,819b00 <alt_up_sd_card_fopen+0x2f8>
                {
                    if (create)
  81990c:	e0bffe17 	ldw	r2,-8(fp)
  819910:	1005003a 	cmpeq	r2,r2,zero
  819914:	1000031e 	bne	r2,zero,819924 <alt_up_sd_card_fopen+0x11c>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
  819918:	00bfffc4 	movi	r2,-1
  81991c:	e0bfff15 	stw	r2,-4(fp)
  819920:	00009d06 	br	819b98 <alt_up_sd_card_fopen+0x390>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
  819924:	e17feb0f 	ldh	r5,-84(fp)
  819928:	e0bfeb0f 	ldh	r2,-84(fp)
  81992c:	00c020f4 	movhi	r3,131
  819930:	18d76104 	addi	r3,r3,23940
  819934:	100491ba 	slli	r2,r2,6
  819938:	10c5883a 	add	r2,r2,r3
  81993c:	10800504 	addi	r2,r2,20
  819940:	1080008b 	ldhu	r2,2(r2)
  819944:	113fffcc 	andi	r4,r2,65535
  819948:	00c020f4 	movhi	r3,131
  81994c:	18d76104 	addi	r3,r3,23940
  819950:	280491ba 	slli	r2,r5,6
  819954:	10c5883a 	add	r2,r2,r3
  819958:	10800704 	addi	r2,r2,28
  81995c:	11000015 	stw	r4,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
  819960:	e0bfeb0f 	ldh	r2,-84(fp)
  819964:	00c020f4 	movhi	r3,131
  819968:	18d76104 	addi	r3,r3,23940
  81996c:	100491ba 	slli	r2,r2,6
  819970:	10c5883a 	add	r2,r2,r3
  819974:	10800804 	addi	r2,r2,32
  819978:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
  81997c:	e0bfeb0f 	ldh	r2,-84(fp)
  819980:	00c020f4 	movhi	r3,131
  819984:	18d76104 	addi	r3,r3,23940
  819988:	100491ba 	slli	r2,r2,6
  81998c:	10c5883a 	add	r2,r2,r3
  819990:	10800904 	addi	r2,r2,36
  819994:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
  819998:	e0bfeb0f 	ldh	r2,-84(fp)
  81999c:	00c020f4 	movhi	r3,131
  8199a0:	18d76104 	addi	r3,r3,23940
  8199a4:	100491ba 	slli	r2,r2,6
  8199a8:	10c5883a 	add	r2,r2,r3
  8199ac:	10c00f04 	addi	r3,r2,60
  8199b0:	00800044 	movi	r2,1
  8199b4:	18800015 	stw	r2,0(r3)
    				active_files[file_record_index].modified = false;
  8199b8:	e0bfeb0f 	ldh	r2,-84(fp)
  8199bc:	00c020f4 	movhi	r3,131
  8199c0:	18d76104 	addi	r3,r3,23940
  8199c4:	100491ba 	slli	r2,r2,6
  8199c8:	10c5883a 	add	r2,r2,r3
  8199cc:	10800e04 	addi	r2,r2,56
  8199d0:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
  8199d4:	e03fea15 	stw	zero,-88(fp)
  8199d8:	00004506 	br	819af0 <alt_up_sd_card_fopen+0x2e8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
  8199dc:	e0ffeb0f 	ldh	r3,-84(fp)
  8199e0:	e0bfea17 	ldw	r2,-88(fp)
  8199e4:	18803f26 	beq	r3,r2,819ae4 <alt_up_sd_card_fopen+0x2dc>
  8199e8:	e0bfea17 	ldw	r2,-88(fp)
  8199ec:	00c020f4 	movhi	r3,131
  8199f0:	18d76104 	addi	r3,r3,23940
  8199f4:	100491ba 	slli	r2,r2,6
  8199f8:	10c5883a 	add	r2,r2,r3
  8199fc:	10800f04 	addi	r2,r2,60
  819a00:	10800017 	ldw	r2,0(r2)
  819a04:	10800058 	cmpnei	r2,r2,1
  819a08:	1000361e 	bne	r2,zero,819ae4 <alt_up_sd_card_fopen+0x2dc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
  819a0c:	e0bfeb0f 	ldh	r2,-84(fp)
  819a10:	00c020f4 	movhi	r3,131
  819a14:	18d76104 	addi	r3,r3,23940
  819a18:	100491ba 	slli	r2,r2,6
  819a1c:	10c5883a 	add	r2,r2,r3
  819a20:	10800a04 	addi	r2,r2,40
  819a24:	11000017 	ldw	r4,0(r2)
  819a28:	e0bfea17 	ldw	r2,-88(fp)
  819a2c:	00c020f4 	movhi	r3,131
  819a30:	18d76104 	addi	r3,r3,23940
  819a34:	100491ba 	slli	r2,r2,6
  819a38:	10c5883a 	add	r2,r2,r3
  819a3c:	10800a04 	addi	r2,r2,40
  819a40:	10800017 	ldw	r2,0(r2)
  819a44:	2080271e 	bne	r4,r2,819ae4 <alt_up_sd_card_fopen+0x2dc>
  819a48:	e0bfeb0f 	ldh	r2,-84(fp)
  819a4c:	00c020f4 	movhi	r3,131
  819a50:	18d76104 	addi	r3,r3,23940
  819a54:	100491ba 	slli	r2,r2,6
  819a58:	10c5883a 	add	r2,r2,r3
  819a5c:	10800b04 	addi	r2,r2,44
  819a60:	11000017 	ldw	r4,0(r2)
  819a64:	e0bfea17 	ldw	r2,-88(fp)
  819a68:	00c020f4 	movhi	r3,131
  819a6c:	18d76104 	addi	r3,r3,23940
  819a70:	100491ba 	slli	r2,r2,6
  819a74:	10c5883a 	add	r2,r2,r3
  819a78:	10800b04 	addi	r2,r2,44
  819a7c:	10800017 	ldw	r2,0(r2)
  819a80:	2080181e 	bne	r4,r2,819ae4 <alt_up_sd_card_fopen+0x2dc>
  819a84:	e0bfeb0f 	ldh	r2,-84(fp)
  819a88:	00c020f4 	movhi	r3,131
  819a8c:	18d76104 	addi	r3,r3,23940
  819a90:	100491ba 	slli	r2,r2,6
  819a94:	10c5883a 	add	r2,r2,r3
  819a98:	10800c04 	addi	r2,r2,48
  819a9c:	1100000b 	ldhu	r4,0(r2)
  819aa0:	e0bfea17 	ldw	r2,-88(fp)
  819aa4:	00c020f4 	movhi	r3,131
  819aa8:	18d76104 	addi	r3,r3,23940
  819aac:	100491ba 	slli	r2,r2,6
  819ab0:	10c5883a 	add	r2,r2,r3
  819ab4:	10800c04 	addi	r2,r2,48
  819ab8:	1080000b 	ldhu	r2,0(r2)
  819abc:	20ffffcc 	andi	r3,r4,65535
  819ac0:	18e0001c 	xori	r3,r3,32768
  819ac4:	18e00004 	addi	r3,r3,-32768
  819ac8:	10bfffcc 	andi	r2,r2,65535
  819acc:	10a0001c 	xori	r2,r2,32768
  819ad0:	10a00004 	addi	r2,r2,-32768
  819ad4:	1880031e 	bne	r3,r2,819ae4 <alt_up_sd_card_fopen+0x2dc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
  819ad8:	00bfff84 	movi	r2,-2
  819adc:	e0bfeb0d 	sth	r2,-84(fp)
								break;
  819ae0:	00002b06 	br	819b90 <alt_up_sd_card_fopen+0x388>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
  819ae4:	e0bfea17 	ldw	r2,-88(fp)
  819ae8:	10800044 	addi	r2,r2,1
  819aec:	e0bfea15 	stw	r2,-88(fp)
  819af0:	e0bfea17 	ldw	r2,-88(fp)
  819af4:	10800510 	cmplti	r2,r2,20
  819af8:	103fb81e 	bne	r2,zero,8199dc <alt_up_sd_card_fopen+0x1d4>
  819afc:	00002406 	br	819b90 <alt_up_sd_card_fopen+0x388>
							}
						}
					}

                }
                else if (create)
  819b00:	e0bffe17 	ldw	r2,-8(fp)
  819b04:	1005003a 	cmpeq	r2,r2,zero
  819b08:	10001f1e 	bne	r2,zero,819b88 <alt_up_sd_card_fopen+0x380>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
  819b0c:	e0bfeb0f 	ldh	r2,-84(fp)
  819b10:	100491ba 	slli	r2,r2,6
  819b14:	1007883a 	mov	r3,r2
  819b18:	008020f4 	movhi	r2,131
  819b1c:	10976104 	addi	r2,r2,23940
  819b20:	188b883a 	add	r5,r3,r2
  819b24:	e1bfed04 	addi	r6,fp,-76
  819b28:	e13ffd17 	ldw	r4,-12(fp)
  819b2c:	0818d5c0 	call	818d5c <create_file>
  819b30:	1005003a 	cmpeq	r2,r2,zero
  819b34:	1000111e 	bne	r2,zero,819b7c <alt_up_sd_card_fopen+0x374>
                    {
                        active_files[file_record_index].in_use = true;
  819b38:	e0bfeb0f 	ldh	r2,-84(fp)
  819b3c:	00c020f4 	movhi	r3,131
  819b40:	18d76104 	addi	r3,r3,23940
  819b44:	100491ba 	slli	r2,r2,6
  819b48:	10c5883a 	add	r2,r2,r3
  819b4c:	10c00f04 	addi	r3,r2,60
  819b50:	00800044 	movi	r2,1
  819b54:	18800015 	stw	r2,0(r3)
    					active_files[file_record_index].modified = true;
  819b58:	e0bfeb0f 	ldh	r2,-84(fp)
  819b5c:	00c020f4 	movhi	r3,131
  819b60:	18d76104 	addi	r3,r3,23940
  819b64:	100491ba 	slli	r2,r2,6
  819b68:	10c5883a 	add	r2,r2,r3
  819b6c:	10c00e04 	addi	r3,r2,56
  819b70:	00800044 	movi	r2,1
  819b74:	18800015 	stw	r2,0(r3)
  819b78:	00000506 	br	819b90 <alt_up_sd_card_fopen+0x388>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
  819b7c:	00bfffc4 	movi	r2,-1
  819b80:	e0bfeb0d 	sth	r2,-84(fp)
  819b84:	00000206 	br	819b90 <alt_up_sd_card_fopen+0x388>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
  819b88:	00bfffc4 	movi	r2,-1
  819b8c:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
  819b90:	e0bfeb0f 	ldh	r2,-84(fp)
  819b94:	e0bfff15 	stw	r2,-4(fp)
  819b98:	e0bfff17 	ldw	r2,-4(fp)
}
  819b9c:	e037883a 	mov	sp,fp
  819ba0:	dfc00117 	ldw	ra,4(sp)
  819ba4:	df000017 	ldw	fp,0(sp)
  819ba8:	dec00204 	addi	sp,sp,8
  819bac:	f800283a 	ret

00819bb0 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  819bb0:	defffd04 	addi	sp,sp,-12
  819bb4:	df000215 	stw	fp,8(sp)
  819bb8:	df000204 	addi	fp,sp,8
  819bbc:	e13ffe0d 	sth	r4,-8(fp)
  819bc0:	e17fff0d 	sth	r5,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  819bc4:	e0bffe0f 	ldh	r2,-8(fp)
  819bc8:	1004803a 	cmplt	r2,r2,zero
  819bcc:	1000181e 	bne	r2,zero,819c30 <alt_up_sd_card_set_attributes+0x80>
  819bd0:	e0bffe0f 	ldh	r2,-8(fp)
  819bd4:	10800508 	cmpgei	r2,r2,20
  819bd8:	1000151e 	bne	r2,zero,819c30 <alt_up_sd_card_set_attributes+0x80>
    {
        if (active_files[file_handle].in_use)
  819bdc:	e0bffe0f 	ldh	r2,-8(fp)
  819be0:	00c020f4 	movhi	r3,131
  819be4:	18d76104 	addi	r3,r3,23940
  819be8:	100491ba 	slli	r2,r2,6
  819bec:	10c5883a 	add	r2,r2,r3
  819bf0:	10800f04 	addi	r2,r2,60
  819bf4:	10800017 	ldw	r2,0(r2)
  819bf8:	1005003a 	cmpeq	r2,r2,zero
  819bfc:	10000c1e 	bne	r2,zero,819c30 <alt_up_sd_card_set_attributes+0x80>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
  819c00:	e17ffe0f 	ldh	r5,-8(fp)
  819c04:	e0bfff0b 	ldhu	r2,-4(fp)
  819c08:	1007883a 	mov	r3,r2
  819c0c:	00bfffc4 	movi	r2,-1
  819c10:	1884703a 	and	r2,r3,r2
  819c14:	1009883a 	mov	r4,r2
  819c18:	00c020f4 	movhi	r3,131
  819c1c:	18d76104 	addi	r3,r3,23940
  819c20:	280491ba 	slli	r2,r5,6
  819c24:	10c5883a 	add	r2,r2,r3
  819c28:	10800204 	addi	r2,r2,8
  819c2c:	110000c5 	stb	r4,3(r2)
        }
    }
}
  819c30:	e037883a 	mov	sp,fp
  819c34:	df000017 	ldw	fp,0(sp)
  819c38:	dec00104 	addi	sp,sp,4
  819c3c:	f800283a 	ret

00819c40 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  819c40:	defffd04 	addi	sp,sp,-12
  819c44:	df000215 	stw	fp,8(sp)
  819c48:	df000204 	addi	fp,sp,8
  819c4c:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
  819c50:	00bfffc4 	movi	r2,-1
  819c54:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  819c58:	e0bfff0f 	ldh	r2,-4(fp)
  819c5c:	1004803a 	cmplt	r2,r2,zero
  819c60:	1000151e 	bne	r2,zero,819cb8 <alt_up_sd_card_get_attributes+0x78>
  819c64:	e0bfff0f 	ldh	r2,-4(fp)
  819c68:	10800508 	cmpgei	r2,r2,20
  819c6c:	1000121e 	bne	r2,zero,819cb8 <alt_up_sd_card_get_attributes+0x78>
    {
        if (active_files[file_handle].in_use)
  819c70:	e0bfff0f 	ldh	r2,-4(fp)
  819c74:	00c020f4 	movhi	r3,131
  819c78:	18d76104 	addi	r3,r3,23940
  819c7c:	100491ba 	slli	r2,r2,6
  819c80:	10c5883a 	add	r2,r2,r3
  819c84:	10800f04 	addi	r2,r2,60
  819c88:	10800017 	ldw	r2,0(r2)
  819c8c:	1005003a 	cmpeq	r2,r2,zero
  819c90:	1000091e 	bne	r2,zero,819cb8 <alt_up_sd_card_get_attributes+0x78>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
  819c94:	e0bfff0f 	ldh	r2,-4(fp)
  819c98:	00c020f4 	movhi	r3,131
  819c9c:	18d76104 	addi	r3,r3,23940
  819ca0:	100491ba 	slli	r2,r2,6
  819ca4:	10c5883a 	add	r2,r2,r3
  819ca8:	10800204 	addi	r2,r2,8
  819cac:	108000c3 	ldbu	r2,3(r2)
  819cb0:	10803fcc 	andi	r2,r2,255
  819cb4:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
  819cb8:	e0bffe0f 	ldh	r2,-8(fp)
}
  819cbc:	e037883a 	mov	sp,fp
  819cc0:	df000017 	ldw	fp,0(sp)
  819cc4:	dec00104 	addi	sp,sp,4
  819cc8:	f800283a 	ret

00819ccc <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  819ccc:	defffa04 	addi	sp,sp,-24
  819cd0:	dfc00515 	stw	ra,20(sp)
  819cd4:	df000415 	stw	fp,16(sp)
  819cd8:	df000404 	addi	fp,sp,16
  819cdc:	e13ffe0d 	sth	r4,-8(fp)
    short int ch = -1;
  819ce0:	00bfffc4 	movi	r2,-1
  819ce4:	e0bffd0d 	sth	r2,-12(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  819ce8:	e0bffe0f 	ldh	r2,-8(fp)
  819cec:	1004803a 	cmplt	r2,r2,zero
  819cf0:	1000d51e 	bne	r2,zero,81a048 <alt_up_sd_card_read+0x37c>
  819cf4:	e0bffe0f 	ldh	r2,-8(fp)
  819cf8:	10800508 	cmpgei	r2,r2,20
  819cfc:	1000d21e 	bne	r2,zero,81a048 <alt_up_sd_card_read+0x37c>
    {
        if (active_files[file_handle].in_use)
  819d00:	e0bffe0f 	ldh	r2,-8(fp)
  819d04:	00c020f4 	movhi	r3,131
  819d08:	18d76104 	addi	r3,r3,23940
  819d0c:	100491ba 	slli	r2,r2,6
  819d10:	10c5883a 	add	r2,r2,r3
  819d14:	10800f04 	addi	r2,r2,60
  819d18:	10800017 	ldw	r2,0(r2)
  819d1c:	1005003a 	cmpeq	r2,r2,zero
  819d20:	1000c91e 	bne	r2,zero,81a048 <alt_up_sd_card_read+0x37c>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  819d24:	e0bffe0f 	ldh	r2,-8(fp)
  819d28:	00c020f4 	movhi	r3,131
  819d2c:	18d76104 	addi	r3,r3,23940
  819d30:	100491ba 	slli	r2,r2,6
  819d34:	10c5883a 	add	r2,r2,r3
  819d38:	10800904 	addi	r2,r2,36
  819d3c:	11000017 	ldw	r4,0(r2)
  819d40:	e0bffe0f 	ldh	r2,-8(fp)
  819d44:	00c020f4 	movhi	r3,131
  819d48:	18d76104 	addi	r3,r3,23940
  819d4c:	100491ba 	slli	r2,r2,6
  819d50:	10c5883a 	add	r2,r2,r3
  819d54:	10800604 	addi	r2,r2,24
  819d58:	10800017 	ldw	r2,0(r2)
  819d5c:	2080ba2e 	bgeu	r4,r2,81a048 <alt_up_sd_card_read+0x37c>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                                  active_files[file_handle].current_sector_in_cluster;
  819d60:	008020f4 	movhi	r2,131
  819d64:	10974c04 	addi	r2,r2,23856
  819d68:	11001417 	ldw	r4,80(r2)
  819d6c:	e0bffe0f 	ldh	r2,-8(fp)
  819d70:	00c020f4 	movhi	r3,131
  819d74:	18d76104 	addi	r3,r3,23940
  819d78:	100491ba 	slli	r2,r2,6
  819d7c:	10c5883a 	add	r2,r2,r3
  819d80:	10800704 	addi	r2,r2,28
  819d84:	10800017 	ldw	r2,0(r2)
  819d88:	10ffff84 	addi	r3,r2,-2
  819d8c:	008020f4 	movhi	r2,131
  819d90:	10974c04 	addi	r2,r2,23856
  819d94:	10800383 	ldbu	r2,14(r2)
  819d98:	10803fcc 	andi	r2,r2,255
  819d9c:	1885383a 	mul	r2,r3,r2
  819da0:	2089883a 	add	r4,r4,r2
  819da4:	e0bffe0f 	ldh	r2,-8(fp)
  819da8:	00c020f4 	movhi	r3,131
  819dac:	18d76104 	addi	r3,r3,23940
  819db0:	100491ba 	slli	r2,r2,6
  819db4:	10c5883a 	add	r2,r2,r3
  819db8:	10800804 	addi	r2,r2,32
  819dbc:	10800017 	ldw	r2,0(r2)
  819dc0:	2085883a 	add	r2,r4,r2
  819dc4:	e0bffc15 	stw	r2,-16(fp)
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
  819dc8:	e0bffe0f 	ldh	r2,-8(fp)
  819dcc:	00c020f4 	movhi	r3,131
  819dd0:	18d76104 	addi	r3,r3,23940
  819dd4:	100491ba 	slli	r2,r2,6
  819dd8:	10c5883a 	add	r2,r2,r3
  819ddc:	10800904 	addi	r2,r2,36
  819de0:	10800017 	ldw	r2,0(r2)
  819de4:	1005003a 	cmpeq	r2,r2,zero
  819de8:	10006a1e 	bne	r2,zero,819f94 <alt_up_sd_card_read+0x2c8>
  819dec:	e0bffe0f 	ldh	r2,-8(fp)
  819df0:	00c020f4 	movhi	r3,131
  819df4:	18d76104 	addi	r3,r3,23940
  819df8:	100491ba 	slli	r2,r2,6
  819dfc:	10c5883a 	add	r2,r2,r3
  819e00:	10800904 	addi	r2,r2,36
  819e04:	10800017 	ldw	r2,0(r2)
  819e08:	10807fcc 	andi	r2,r2,511
  819e0c:	1004c03a 	cmpne	r2,r2,zero
  819e10:	1000601e 	bne	r2,zero,819f94 <alt_up_sd_card_read+0x2c8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  819e14:	e0bffe0f 	ldh	r2,-8(fp)
  819e18:	00c020f4 	movhi	r3,131
  819e1c:	18d76104 	addi	r3,r3,23940
  819e20:	100491ba 	slli	r2,r2,6
  819e24:	10c5883a 	add	r2,r2,r3
  819e28:	10800804 	addi	r2,r2,32
  819e2c:	10c00017 	ldw	r3,0(r2)
  819e30:	008020f4 	movhi	r2,131
  819e34:	10974c04 	addi	r2,r2,23856
  819e38:	10800383 	ldbu	r2,14(r2)
  819e3c:	10803fcc 	andi	r2,r2,255
  819e40:	10bfffc4 	addi	r2,r2,-1
  819e44:	1880411e 	bne	r3,r2,819f4c <alt_up_sd_card_read+0x280>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  819e48:	e0bffe0f 	ldh	r2,-8(fp)
  819e4c:	00c020f4 	movhi	r3,131
  819e50:	18d76104 	addi	r3,r3,23940
  819e54:	100491ba 	slli	r2,r2,6
  819e58:	10c5883a 	add	r2,r2,r3
  819e5c:	10800704 	addi	r2,r2,28
  819e60:	11000017 	ldw	r4,0(r2)
  819e64:	e17ffd84 	addi	r5,fp,-10
  819e68:	081663c0 	call	81663c <get_cluster_flag>
  819e6c:	1005003a 	cmpeq	r2,r2,zero
  819e70:	1000331e 	bne	r2,zero,819f40 <alt_up_sd_card_read+0x274>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  819e74:	e0bffd8b 	ldhu	r2,-10(fp)
  819e78:	10bfffcc 	andi	r2,r2,65535
  819e7c:	10fffe0c 	andi	r3,r2,65528
  819e80:	00bffe14 	movui	r2,65528
  819e84:	1880031e 	bne	r3,r2,819e94 <alt_up_sd_card_read+0x1c8>
                            {
                                /* End of file */
                                return -1;
  819e88:	00bfffc4 	movi	r2,-1
  819e8c:	e0bfff15 	stw	r2,-4(fp)
  819e90:	00006f06 	br	81a050 <alt_up_sd_card_read+0x384>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  819e94:	e13ffe0f 	ldh	r4,-8(fp)
  819e98:	e0bffd8b 	ldhu	r2,-10(fp)
  819e9c:	117fffcc 	andi	r5,r2,65535
  819ea0:	00c020f4 	movhi	r3,131
  819ea4:	18d76104 	addi	r3,r3,23940
  819ea8:	200491ba 	slli	r2,r4,6
  819eac:	10c5883a 	add	r2,r2,r3
  819eb0:	10800704 	addi	r2,r2,28
  819eb4:	11400015 	stw	r5,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
  819eb8:	e0bffe0f 	ldh	r2,-8(fp)
  819ebc:	00c020f4 	movhi	r3,131
  819ec0:	18d76104 	addi	r3,r3,23940
  819ec4:	100491ba 	slli	r2,r2,6
  819ec8:	10c5883a 	add	r2,r2,r3
  819ecc:	10800804 	addi	r2,r2,32
  819ed0:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  819ed4:	008020f4 	movhi	r2,131
  819ed8:	10974c04 	addi	r2,r2,23856
  819edc:	11001417 	ldw	r4,80(r2)
  819ee0:	e0bffe0f 	ldh	r2,-8(fp)
  819ee4:	00c020f4 	movhi	r3,131
  819ee8:	18d76104 	addi	r3,r3,23940
  819eec:	100491ba 	slli	r2,r2,6
  819ef0:	10c5883a 	add	r2,r2,r3
  819ef4:	10800704 	addi	r2,r2,28
  819ef8:	10800017 	ldw	r2,0(r2)
  819efc:	10ffff84 	addi	r3,r2,-2
  819f00:	008020f4 	movhi	r2,131
  819f04:	10974c04 	addi	r2,r2,23856
  819f08:	10800383 	ldbu	r2,14(r2)
  819f0c:	10803fcc 	andi	r2,r2,255
  819f10:	1885383a 	mul	r2,r3,r2
  819f14:	2089883a 	add	r4,r4,r2
  819f18:	e0bffe0f 	ldh	r2,-8(fp)
  819f1c:	00c020f4 	movhi	r3,131
  819f20:	18d76104 	addi	r3,r3,23940
  819f24:	100491ba 	slli	r2,r2,6
  819f28:	10c5883a 	add	r2,r2,r3
  819f2c:	10800804 	addi	r2,r2,32
  819f30:	10800017 	ldw	r2,0(r2)
  819f34:	2085883a 	add	r2,r4,r2
  819f38:	e0bffc15 	stw	r2,-16(fp)
  819f3c:	00001506 	br	819f94 <alt_up_sd_card_read+0x2c8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
  819f40:	00bfff84 	movi	r2,-2
  819f44:	e0bfff15 	stw	r2,-4(fp)
  819f48:	00004106 	br	81a050 <alt_up_sd_card_read+0x384>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  819f4c:	e17ffe0f 	ldh	r5,-8(fp)
  819f50:	e0bffe0f 	ldh	r2,-8(fp)
  819f54:	00c020f4 	movhi	r3,131
  819f58:	18d76104 	addi	r3,r3,23940
  819f5c:	100491ba 	slli	r2,r2,6
  819f60:	10c5883a 	add	r2,r2,r3
  819f64:	10800804 	addi	r2,r2,32
  819f68:	10800017 	ldw	r2,0(r2)
  819f6c:	11000044 	addi	r4,r2,1
  819f70:	00c020f4 	movhi	r3,131
  819f74:	18d76104 	addi	r3,r3,23940
  819f78:	280491ba 	slli	r2,r5,6
  819f7c:	10c5883a 	add	r2,r2,r3
  819f80:	10800804 	addi	r2,r2,32
  819f84:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
  819f88:	e0bffc17 	ldw	r2,-16(fp)
  819f8c:	10800044 	addi	r2,r2,1
  819f90:	e0bffc15 	stw	r2,-16(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
  819f94:	d0e74a17 	ldw	r3,-25304(gp)
  819f98:	e0bffc17 	ldw	r2,-16(fp)
  819f9c:	1885883a 	add	r2,r3,r2
  819fa0:	1007883a 	mov	r3,r2
  819fa4:	d0a74e17 	ldw	r2,-25288(gp)
  819fa8:	18800826 	beq	r3,r2,819fcc <alt_up_sd_card_read+0x300>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  819fac:	d1674a17 	ldw	r5,-25304(gp)
  819fb0:	e13ffc17 	ldw	r4,-16(fp)
  819fb4:	08165400 	call	816540 <Read_Sector_Data>
  819fb8:	1004c03a 	cmpne	r2,r2,zero
  819fbc:	1000031e 	bne	r2,zero,819fcc <alt_up_sd_card_read+0x300>
                    {
						return -2;
  819fc0:	00bfff84 	movi	r2,-2
  819fc4:	e0bfff15 	stw	r2,-4(fp)
  819fc8:	00002106 	br	81a050 <alt_up_sd_card_read+0x384>
                    }
                }

                ch = (signed char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
  819fcc:	e0bffe0f 	ldh	r2,-8(fp)
  819fd0:	00c020f4 	movhi	r3,131
  819fd4:	18d76104 	addi	r3,r3,23940
  819fd8:	100491ba 	slli	r2,r2,6
  819fdc:	10c5883a 	add	r2,r2,r3
  819fe0:	10800904 	addi	r2,r2,36
  819fe4:	10800017 	ldw	r2,0(r2)
  819fe8:	10807fcc 	andi	r2,r2,511
  819fec:	1007883a 	mov	r3,r2
  819ff0:	d0a74917 	ldw	r2,-25308(gp)
  819ff4:	1885883a 	add	r2,r3,r2
  819ff8:	10800023 	ldbuio	r2,0(r2)
  819ffc:	10803fcc 	andi	r2,r2,255
  81a000:	1080201c 	xori	r2,r2,128
  81a004:	10bfe004 	addi	r2,r2,-128
  81a008:	e0bffd0d 	sth	r2,-12(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  81a00c:	e17ffe0f 	ldh	r5,-8(fp)
  81a010:	e0bffe0f 	ldh	r2,-8(fp)
  81a014:	00c020f4 	movhi	r3,131
  81a018:	18d76104 	addi	r3,r3,23940
  81a01c:	100491ba 	slli	r2,r2,6
  81a020:	10c5883a 	add	r2,r2,r3
  81a024:	10800904 	addi	r2,r2,36
  81a028:	10800017 	ldw	r2,0(r2)
  81a02c:	11000044 	addi	r4,r2,1
  81a030:	00c020f4 	movhi	r3,131
  81a034:	18d76104 	addi	r3,r3,23940
  81a038:	280491ba 	slli	r2,r5,6
  81a03c:	10c5883a 	add	r2,r2,r3
  81a040:	10800904 	addi	r2,r2,36
  81a044:	11000015 	stw	r4,0(r2)
            }
        }
    }
    
    return ch;
  81a048:	e0bffd0f 	ldh	r2,-12(fp)
  81a04c:	e0bfff15 	stw	r2,-4(fp)
  81a050:	e0bfff17 	ldw	r2,-4(fp)
}
  81a054:	e037883a 	mov	sp,fp
  81a058:	dfc00117 	ldw	ra,4(sp)
  81a05c:	df000017 	ldw	fp,0(sp)
  81a060:	dec00204 	addi	sp,sp,8
  81a064:	f800283a 	ret

0081a068 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  81a068:	defff504 	addi	sp,sp,-44
  81a06c:	dfc00a15 	stw	ra,40(sp)
  81a070:	df000915 	stw	fp,36(sp)
  81a074:	dc000815 	stw	r16,32(sp)
  81a078:	df000804 	addi	fp,sp,32
  81a07c:	e13ffd0d 	sth	r4,-12(fp)
  81a080:	e17ffe05 	stb	r5,-8(fp)
    bool result = false;
  81a084:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  81a088:	e0bffd0f 	ldh	r2,-12(fp)
  81a08c:	1004803a 	cmplt	r2,r2,zero
  81a090:	1001751e 	bne	r2,zero,81a668 <alt_up_sd_card_write+0x600>
  81a094:	e0bffd0f 	ldh	r2,-12(fp)
  81a098:	10800508 	cmpgei	r2,r2,20
  81a09c:	1001721e 	bne	r2,zero,81a668 <alt_up_sd_card_write+0x600>
    {
        if (active_files[file_handle].in_use)
  81a0a0:	e0bffd0f 	ldh	r2,-12(fp)
  81a0a4:	00c020f4 	movhi	r3,131
  81a0a8:	18d76104 	addi	r3,r3,23940
  81a0ac:	100491ba 	slli	r2,r2,6
  81a0b0:	10c5883a 	add	r2,r2,r3
  81a0b4:	10800f04 	addi	r2,r2,60
  81a0b8:	10800017 	ldw	r2,0(r2)
  81a0bc:	1005003a 	cmpeq	r2,r2,zero
  81a0c0:	1001691e 	bne	r2,zero,81a668 <alt_up_sd_card_write+0x600>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  81a0c4:	008020f4 	movhi	r2,131
  81a0c8:	10974c04 	addi	r2,r2,23856
  81a0cc:	11001417 	ldw	r4,80(r2)
  81a0d0:	e0bffd0f 	ldh	r2,-12(fp)
  81a0d4:	00c020f4 	movhi	r3,131
  81a0d8:	18d76104 	addi	r3,r3,23940
  81a0dc:	100491ba 	slli	r2,r2,6
  81a0e0:	10c5883a 	add	r2,r2,r3
  81a0e4:	10800704 	addi	r2,r2,28
  81a0e8:	10800017 	ldw	r2,0(r2)
  81a0ec:	10ffff84 	addi	r3,r2,-2
  81a0f0:	008020f4 	movhi	r2,131
  81a0f4:	10974c04 	addi	r2,r2,23856
  81a0f8:	10800383 	ldbu	r2,14(r2)
  81a0fc:	10803fcc 	andi	r2,r2,255
  81a100:	1885383a 	mul	r2,r3,r2
  81a104:	2089883a 	add	r4,r4,r2
  81a108:	e0bffd0f 	ldh	r2,-12(fp)
  81a10c:	00c020f4 	movhi	r3,131
  81a110:	18d76104 	addi	r3,r3,23940
  81a114:	100491ba 	slli	r2,r2,6
  81a118:	10c5883a 	add	r2,r2,r3
  81a11c:	10800804 	addi	r2,r2,32
  81a120:	10800017 	ldw	r2,0(r2)
  81a124:	2085883a 	add	r2,r4,r2
  81a128:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  81a12c:	e0bffd0f 	ldh	r2,-12(fp)
  81a130:	00c020f4 	movhi	r3,131
  81a134:	18d76104 	addi	r3,r3,23940
  81a138:	100491ba 	slli	r2,r2,6
  81a13c:	10c5883a 	add	r2,r2,r3
  81a140:	10800904 	addi	r2,r2,36
  81a144:	11000017 	ldw	r4,0(r2)
  81a148:	008020f4 	movhi	r2,131
  81a14c:	10974c04 	addi	r2,r2,23856
  81a150:	1080030b 	ldhu	r2,12(r2)
  81a154:	117fffcc 	andi	r5,r2,65535
  81a158:	080bb640 	call	80bb64 <__umodsi3>
  81a15c:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  81a160:	e0bffd0f 	ldh	r2,-12(fp)
  81a164:	00c020f4 	movhi	r3,131
  81a168:	18d76104 	addi	r3,r3,23940
  81a16c:	100491ba 	slli	r2,r2,6
  81a170:	10c5883a 	add	r2,r2,r3
  81a174:	10800904 	addi	r2,r2,36
  81a178:	11000017 	ldw	r4,0(r2)
  81a17c:	e0bffd0f 	ldh	r2,-12(fp)
  81a180:	00c020f4 	movhi	r3,131
  81a184:	18d76104 	addi	r3,r3,23940
  81a188:	100491ba 	slli	r2,r2,6
  81a18c:	10c5883a 	add	r2,r2,r3
  81a190:	10800604 	addi	r2,r2,24
  81a194:	10800017 	ldw	r2,0(r2)
  81a198:	2080682e 	bgeu	r4,r2,81a33c <alt_up_sd_card_write+0x2d4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  81a19c:	e0bffd0f 	ldh	r2,-12(fp)
  81a1a0:	00c020f4 	movhi	r3,131
  81a1a4:	18d76104 	addi	r3,r3,23940
  81a1a8:	100491ba 	slli	r2,r2,6
  81a1ac:	10c5883a 	add	r2,r2,r3
  81a1b0:	10800904 	addi	r2,r2,36
  81a1b4:	10800017 	ldw	r2,0(r2)
  81a1b8:	1005003a 	cmpeq	r2,r2,zero
  81a1bc:	1000de1e 	bne	r2,zero,81a538 <alt_up_sd_card_write+0x4d0>
  81a1c0:	e0bff80f 	ldh	r2,-32(fp)
  81a1c4:	1004c03a 	cmpne	r2,r2,zero
  81a1c8:	1000db1e 	bne	r2,zero,81a538 <alt_up_sd_card_write+0x4d0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  81a1cc:	e0bffd0f 	ldh	r2,-12(fp)
  81a1d0:	00c020f4 	movhi	r3,131
  81a1d4:	18d76104 	addi	r3,r3,23940
  81a1d8:	100491ba 	slli	r2,r2,6
  81a1dc:	10c5883a 	add	r2,r2,r3
  81a1e0:	10800804 	addi	r2,r2,32
  81a1e4:	10c00017 	ldw	r3,0(r2)
  81a1e8:	008020f4 	movhi	r2,131
  81a1ec:	10974c04 	addi	r2,r2,23856
  81a1f0:	10800383 	ldbu	r2,14(r2)
  81a1f4:	10803fcc 	andi	r2,r2,255
  81a1f8:	10bfffc4 	addi	r2,r2,-1
  81a1fc:	18803c1e 	bne	r3,r2,81a2f0 <alt_up_sd_card_write+0x288>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  81a200:	e0bffd0f 	ldh	r2,-12(fp)
  81a204:	00c020f4 	movhi	r3,131
  81a208:	18d76104 	addi	r3,r3,23940
  81a20c:	100491ba 	slli	r2,r2,6
  81a210:	10c5883a 	add	r2,r2,r3
  81a214:	10800704 	addi	r2,r2,28
  81a218:	11000017 	ldw	r4,0(r2)
  81a21c:	e17ffb04 	addi	r5,fp,-20
  81a220:	081663c0 	call	81663c <get_cluster_flag>
  81a224:	1005003a 	cmpeq	r2,r2,zero
  81a228:	10002f1e 	bne	r2,zero,81a2e8 <alt_up_sd_card_write+0x280>
                        {
                            if (next_cluster < 0x0000fff8)
  81a22c:	e0bffb0b 	ldhu	r2,-20(fp)
  81a230:	10ffffcc 	andi	r3,r2,65535
  81a234:	00bffdd4 	movui	r2,65527
  81a238:	10c0bf36 	bltu	r2,r3,81a538 <alt_up_sd_card_write+0x4d0>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  81a23c:	e13ffd0f 	ldh	r4,-12(fp)
  81a240:	e0bffb0b 	ldhu	r2,-20(fp)
  81a244:	117fffcc 	andi	r5,r2,65535
  81a248:	00c020f4 	movhi	r3,131
  81a24c:	18d76104 	addi	r3,r3,23940
  81a250:	200491ba 	slli	r2,r4,6
  81a254:	10c5883a 	add	r2,r2,r3
  81a258:	10800704 	addi	r2,r2,28
  81a25c:	11400015 	stw	r5,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
  81a260:	e0bffd0f 	ldh	r2,-12(fp)
  81a264:	00c020f4 	movhi	r3,131
  81a268:	18d76104 	addi	r3,r3,23940
  81a26c:	100491ba 	slli	r2,r2,6
  81a270:	10c5883a 	add	r2,r2,r3
  81a274:	10800804 	addi	r2,r2,32
  81a278:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  81a27c:	008020f4 	movhi	r2,131
  81a280:	10974c04 	addi	r2,r2,23856
  81a284:	11001417 	ldw	r4,80(r2)
  81a288:	e0bffd0f 	ldh	r2,-12(fp)
  81a28c:	00c020f4 	movhi	r3,131
  81a290:	18d76104 	addi	r3,r3,23940
  81a294:	100491ba 	slli	r2,r2,6
  81a298:	10c5883a 	add	r2,r2,r3
  81a29c:	10800704 	addi	r2,r2,28
  81a2a0:	10800017 	ldw	r2,0(r2)
  81a2a4:	10ffff84 	addi	r3,r2,-2
  81a2a8:	008020f4 	movhi	r2,131
  81a2ac:	10974c04 	addi	r2,r2,23856
  81a2b0:	10800383 	ldbu	r2,14(r2)
  81a2b4:	10803fcc 	andi	r2,r2,255
  81a2b8:	1885383a 	mul	r2,r3,r2
  81a2bc:	2089883a 	add	r4,r4,r2
  81a2c0:	e0bffd0f 	ldh	r2,-12(fp)
  81a2c4:	00c020f4 	movhi	r3,131
  81a2c8:	18d76104 	addi	r3,r3,23940
  81a2cc:	100491ba 	slli	r2,r2,6
  81a2d0:	10c5883a 	add	r2,r2,r3
  81a2d4:	10800804 	addi	r2,r2,32
  81a2d8:	10800017 	ldw	r2,0(r2)
  81a2dc:	2085883a 	add	r2,r4,r2
  81a2e0:	e0bff915 	stw	r2,-28(fp)
  81a2e4:	00009406 	br	81a538 <alt_up_sd_card_write+0x4d0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
  81a2e8:	e03fff15 	stw	zero,-4(fp)
  81a2ec:	0000e006 	br	81a670 <alt_up_sd_card_write+0x608>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  81a2f0:	e17ffd0f 	ldh	r5,-12(fp)
  81a2f4:	e0bffd0f 	ldh	r2,-12(fp)
  81a2f8:	00c020f4 	movhi	r3,131
  81a2fc:	18d76104 	addi	r3,r3,23940
  81a300:	100491ba 	slli	r2,r2,6
  81a304:	10c5883a 	add	r2,r2,r3
  81a308:	10800804 	addi	r2,r2,32
  81a30c:	10800017 	ldw	r2,0(r2)
  81a310:	11000044 	addi	r4,r2,1
  81a314:	00c020f4 	movhi	r3,131
  81a318:	18d76104 	addi	r3,r3,23940
  81a31c:	280491ba 	slli	r2,r5,6
  81a320:	10c5883a 	add	r2,r2,r3
  81a324:	10800804 	addi	r2,r2,32
  81a328:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
  81a32c:	e0bff917 	ldw	r2,-28(fp)
  81a330:	10800044 	addi	r2,r2,1
  81a334:	e0bff915 	stw	r2,-28(fp)
  81a338:	00007f06 	br	81a538 <alt_up_sd_card_write+0x4d0>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  81a33c:	e0bffd0f 	ldh	r2,-12(fp)
  81a340:	00c020f4 	movhi	r3,131
  81a344:	18d76104 	addi	r3,r3,23940
  81a348:	100491ba 	slli	r2,r2,6
  81a34c:	10c5883a 	add	r2,r2,r3
  81a350:	10800904 	addi	r2,r2,36
  81a354:	10800017 	ldw	r2,0(r2)
  81a358:	1005003a 	cmpeq	r2,r2,zero
  81a35c:	1000761e 	bne	r2,zero,81a538 <alt_up_sd_card_write+0x4d0>
  81a360:	e0bff80f 	ldh	r2,-32(fp)
  81a364:	1004c03a 	cmpne	r2,r2,zero
  81a368:	1000731e 	bne	r2,zero,81a538 <alt_up_sd_card_write+0x4d0>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  81a36c:	e0bffd0f 	ldh	r2,-12(fp)
  81a370:	00c020f4 	movhi	r3,131
  81a374:	18d76104 	addi	r3,r3,23940
  81a378:	100491ba 	slli	r2,r2,6
  81a37c:	10c5883a 	add	r2,r2,r3
  81a380:	10800804 	addi	r2,r2,32
  81a384:	10c00017 	ldw	r3,0(r2)
  81a388:	008020f4 	movhi	r2,131
  81a38c:	10974c04 	addi	r2,r2,23856
  81a390:	10800383 	ldbu	r2,14(r2)
  81a394:	10803fcc 	andi	r2,r2,255
  81a398:	10bfffc4 	addi	r2,r2,-1
  81a39c:	1880381e 	bne	r3,r2,81a480 <alt_up_sd_card_write+0x418>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
  81a3a0:	e13ffc04 	addi	r4,fp,-16
  81a3a4:	08186880 	call	818688 <find_first_empty_cluster>
  81a3a8:	1005003a 	cmpeq	r2,r2,zero
  81a3ac:	1000321e 	bne	r2,zero,81a478 <alt_up_sd_card_write+0x410>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
  81a3b0:	e0bffd0f 	ldh	r2,-12(fp)
  81a3b4:	00c020f4 	movhi	r3,131
  81a3b8:	18d76104 	addi	r3,r3,23940
  81a3bc:	100491ba 	slli	r2,r2,6
  81a3c0:	10c5883a 	add	r2,r2,r3
  81a3c4:	10800704 	addi	r2,r2,28
  81a3c8:	11000017 	ldw	r4,0(r2)
  81a3cc:	e0bffc17 	ldw	r2,-16(fp)
  81a3d0:	117fffcc 	andi	r5,r2,65535
  81a3d4:	2960001c 	xori	r5,r5,32768
  81a3d8:	29600004 	addi	r5,r5,-32768
  81a3dc:	01800044 	movi	r6,1
  81a3e0:	08166f40 	call	8166f4 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
  81a3e4:	e13ffc17 	ldw	r4,-16(fp)
  81a3e8:	017fffc4 	movi	r5,-1
  81a3ec:	01800044 	movi	r6,1
  81a3f0:	08166f40 	call	8166f4 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
  81a3f4:	e0bffd0f 	ldh	r2,-12(fp)
  81a3f8:	00c020f4 	movhi	r3,131
  81a3fc:	18d76104 	addi	r3,r3,23940
  81a400:	100491ba 	slli	r2,r2,6
  81a404:	10c5883a 	add	r2,r2,r3
  81a408:	10800704 	addi	r2,r2,28
  81a40c:	11000017 	ldw	r4,0(r2)
  81a410:	e0bffc17 	ldw	r2,-16(fp)
  81a414:	117fffcc 	andi	r5,r2,65535
  81a418:	2960001c 	xori	r5,r5,32768
  81a41c:	29600004 	addi	r5,r5,-32768
  81a420:	000d883a 	mov	r6,zero
  81a424:	08166f40 	call	8166f4 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
  81a428:	e13ffc17 	ldw	r4,-16(fp)
  81a42c:	017fffc4 	movi	r5,-1
  81a430:	000d883a 	mov	r6,zero
  81a434:	08166f40 	call	8166f4 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
  81a438:	e0bffd0f 	ldh	r2,-12(fp)
  81a43c:	e13ffc17 	ldw	r4,-16(fp)
  81a440:	00c020f4 	movhi	r3,131
  81a444:	18d76104 	addi	r3,r3,23940
  81a448:	100491ba 	slli	r2,r2,6
  81a44c:	10c5883a 	add	r2,r2,r3
  81a450:	10800704 	addi	r2,r2,28
  81a454:	11000015 	stw	r4,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
  81a458:	e0bffd0f 	ldh	r2,-12(fp)
  81a45c:	00c020f4 	movhi	r3,131
  81a460:	18d76104 	addi	r3,r3,23940
  81a464:	100491ba 	slli	r2,r2,6
  81a468:	10c5883a 	add	r2,r2,r3
  81a46c:	10800804 	addi	r2,r2,32
  81a470:	10000015 	stw	zero,0(r2)
  81a474:	00001606 	br	81a4d0 <alt_up_sd_card_write+0x468>
						}
						else
						{
							return false;
  81a478:	e03fff15 	stw	zero,-4(fp)
  81a47c:	00007c06 	br	81a670 <alt_up_sd_card_write+0x608>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
  81a480:	e43ffd0f 	ldh	r16,-12(fp)
  81a484:	e0bffd0f 	ldh	r2,-12(fp)
  81a488:	00c020f4 	movhi	r3,131
  81a48c:	18d76104 	addi	r3,r3,23940
  81a490:	100491ba 	slli	r2,r2,6
  81a494:	10c5883a 	add	r2,r2,r3
  81a498:	10800904 	addi	r2,r2,36
  81a49c:	11000017 	ldw	r4,0(r2)
  81a4a0:	008020f4 	movhi	r2,131
  81a4a4:	10974c04 	addi	r2,r2,23856
  81a4a8:	1080030b 	ldhu	r2,12(r2)
  81a4ac:	117fffcc 	andi	r5,r2,65535
  81a4b0:	080bb5c0 	call	80bb5c <__udivsi3>
  81a4b4:	1009883a 	mov	r4,r2
  81a4b8:	00c020f4 	movhi	r3,131
  81a4bc:	18d76104 	addi	r3,r3,23940
  81a4c0:	800491ba 	slli	r2,r16,6
  81a4c4:	10c5883a 	add	r2,r2,r3
  81a4c8:	10800804 	addi	r2,r2,32
  81a4cc:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  81a4d0:	008020f4 	movhi	r2,131
  81a4d4:	10974c04 	addi	r2,r2,23856
  81a4d8:	11001417 	ldw	r4,80(r2)
  81a4dc:	e0bffd0f 	ldh	r2,-12(fp)
  81a4e0:	00c020f4 	movhi	r3,131
  81a4e4:	18d76104 	addi	r3,r3,23940
  81a4e8:	100491ba 	slli	r2,r2,6
  81a4ec:	10c5883a 	add	r2,r2,r3
  81a4f0:	10800704 	addi	r2,r2,28
  81a4f4:	10800017 	ldw	r2,0(r2)
  81a4f8:	10ffff84 	addi	r3,r2,-2
  81a4fc:	008020f4 	movhi	r2,131
  81a500:	10974c04 	addi	r2,r2,23856
  81a504:	10800383 	ldbu	r2,14(r2)
  81a508:	10803fcc 	andi	r2,r2,255
  81a50c:	1885383a 	mul	r2,r3,r2
  81a510:	2089883a 	add	r4,r4,r2
  81a514:	e0bffd0f 	ldh	r2,-12(fp)
  81a518:	00c020f4 	movhi	r3,131
  81a51c:	18d76104 	addi	r3,r3,23940
  81a520:	100491ba 	slli	r2,r2,6
  81a524:	10c5883a 	add	r2,r2,r3
  81a528:	10800804 	addi	r2,r2,32
  81a52c:	10800017 	ldw	r2,0(r2)
  81a530:	2085883a 	add	r2,r4,r2
  81a534:	e0bff915 	stw	r2,-28(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
  81a538:	d0e74a17 	ldw	r3,-25304(gp)
  81a53c:	e0bff917 	ldw	r2,-28(fp)
  81a540:	1885883a 	add	r2,r3,r2
  81a544:	1007883a 	mov	r3,r2
  81a548:	d0a74e17 	ldw	r2,-25288(gp)
  81a54c:	18800726 	beq	r3,r2,81a56c <alt_up_sd_card_write+0x504>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  81a550:	d1674a17 	ldw	r5,-25304(gp)
  81a554:	e13ff917 	ldw	r4,-28(fp)
  81a558:	08165400 	call	816540 <Read_Sector_Data>
  81a55c:	1004c03a 	cmpne	r2,r2,zero
  81a560:	1000021e 	bne	r2,zero,81a56c <alt_up_sd_card_write+0x504>
                {
					return false;
  81a564:	e03fff15 	stw	zero,-4(fp)
  81a568:	00004106 	br	81a670 <alt_up_sd_card_write+0x608>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  81a56c:	e0bff80f 	ldh	r2,-32(fp)
  81a570:	1007883a 	mov	r3,r2
  81a574:	d0a74917 	ldw	r2,-25308(gp)
  81a578:	1885883a 	add	r2,r3,r2
  81a57c:	e0fffe07 	ldb	r3,-8(fp)
  81a580:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  81a584:	e17ffd0f 	ldh	r5,-12(fp)
  81a588:	e0bffd0f 	ldh	r2,-12(fp)
  81a58c:	00c020f4 	movhi	r3,131
  81a590:	18d76104 	addi	r3,r3,23940
  81a594:	100491ba 	slli	r2,r2,6
  81a598:	10c5883a 	add	r2,r2,r3
  81a59c:	10800904 	addi	r2,r2,36
  81a5a0:	10800017 	ldw	r2,0(r2)
  81a5a4:	11000044 	addi	r4,r2,1
  81a5a8:	00c020f4 	movhi	r3,131
  81a5ac:	18d76104 	addi	r3,r3,23940
  81a5b0:	280491ba 	slli	r2,r5,6
  81a5b4:	10c5883a 	add	r2,r2,r3
  81a5b8:	10800904 	addi	r2,r2,36
  81a5bc:	11000015 	stw	r4,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
  81a5c0:	e0bffd0f 	ldh	r2,-12(fp)
  81a5c4:	00c020f4 	movhi	r3,131
  81a5c8:	18d76104 	addi	r3,r3,23940
  81a5cc:	100491ba 	slli	r2,r2,6
  81a5d0:	10c5883a 	add	r2,r2,r3
  81a5d4:	10800904 	addi	r2,r2,36
  81a5d8:	11000017 	ldw	r4,0(r2)
  81a5dc:	e0bffd0f 	ldh	r2,-12(fp)
  81a5e0:	00c020f4 	movhi	r3,131
  81a5e4:	18d76104 	addi	r3,r3,23940
  81a5e8:	100491ba 	slli	r2,r2,6
  81a5ec:	10c5883a 	add	r2,r2,r3
  81a5f0:	10800604 	addi	r2,r2,24
  81a5f4:	10800017 	ldw	r2,0(r2)
  81a5f8:	20801736 	bltu	r4,r2,81a658 <alt_up_sd_card_write+0x5f0>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
  81a5fc:	e17ffd0f 	ldh	r5,-12(fp)
  81a600:	e0bffd0f 	ldh	r2,-12(fp)
  81a604:	00c020f4 	movhi	r3,131
  81a608:	18d76104 	addi	r3,r3,23940
  81a60c:	100491ba 	slli	r2,r2,6
  81a610:	10c5883a 	add	r2,r2,r3
  81a614:	10800604 	addi	r2,r2,24
  81a618:	10800017 	ldw	r2,0(r2)
  81a61c:	11000044 	addi	r4,r2,1
  81a620:	00c020f4 	movhi	r3,131
  81a624:	18d76104 	addi	r3,r3,23940
  81a628:	280491ba 	slli	r2,r5,6
  81a62c:	10c5883a 	add	r2,r2,r3
  81a630:	10800604 	addi	r2,r2,24
  81a634:	11000015 	stw	r4,0(r2)
				active_files[file_handle].modified = true;
  81a638:	e0bffd0f 	ldh	r2,-12(fp)
  81a63c:	00c020f4 	movhi	r3,131
  81a640:	18d76104 	addi	r3,r3,23940
  81a644:	100491ba 	slli	r2,r2,6
  81a648:	10c5883a 	add	r2,r2,r3
  81a64c:	10c00e04 	addi	r3,r2,56
  81a650:	00800044 	movi	r2,1
  81a654:	18800015 	stw	r2,0(r3)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
  81a658:	00800044 	movi	r2,1
  81a65c:	d0a74d15 	stw	r2,-25292(gp)
			result = true;
  81a660:	00800044 	movi	r2,1
  81a664:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
  81a668:	e0bffa17 	ldw	r2,-24(fp)
  81a66c:	e0bfff15 	stw	r2,-4(fp)
  81a670:	e0bfff17 	ldw	r2,-4(fp)
}
  81a674:	e037883a 	mov	sp,fp
  81a678:	dfc00217 	ldw	ra,8(sp)
  81a67c:	df000117 	ldw	fp,4(sp)
  81a680:	dc000017 	ldw	r16,0(sp)
  81a684:	dec00304 	addi	sp,sp,12
  81a688:	f800283a 	ret

0081a68c <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  81a68c:	defffb04 	addi	sp,sp,-20
  81a690:	dfc00415 	stw	ra,16(sp)
  81a694:	df000315 	stw	fp,12(sp)
  81a698:	df000304 	addi	fp,sp,12
  81a69c:	e13fff0d 	sth	r4,-4(fp)
    bool result = false;
  81a6a0:	e03ffe15 	stw	zero,-8(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  81a6a4:	08192480 	call	819248 <alt_up_sd_card_is_Present>
  81a6a8:	1005003a 	cmpeq	r2,r2,zero
  81a6ac:	1000641e 	bne	r2,zero,81a840 <alt_up_sd_card_fclose+0x1b4>
  81a6b0:	d0a74317 	ldw	r2,-25332(gp)
  81a6b4:	1005003a 	cmpeq	r2,r2,zero
  81a6b8:	1000611e 	bne	r2,zero,81a840 <alt_up_sd_card_fclose+0x1b4>
    {
        if (active_files[file_handle].in_use) 
  81a6bc:	e0bfff0f 	ldh	r2,-4(fp)
  81a6c0:	00c020f4 	movhi	r3,131
  81a6c4:	18d76104 	addi	r3,r3,23940
  81a6c8:	100491ba 	slli	r2,r2,6
  81a6cc:	10c5883a 	add	r2,r2,r3
  81a6d0:	10800f04 	addi	r2,r2,60
  81a6d4:	10800017 	ldw	r2,0(r2)
  81a6d8:	1005003a 	cmpeq	r2,r2,zero
  81a6dc:	1000581e 	bne	r2,zero,81a840 <alt_up_sd_card_fclose+0x1b4>
        {
			if (active_files[file_handle].modified)
  81a6e0:	e0bfff0f 	ldh	r2,-4(fp)
  81a6e4:	00c020f4 	movhi	r3,131
  81a6e8:	18d76104 	addi	r3,r3,23940
  81a6ec:	100491ba 	slli	r2,r2,6
  81a6f0:	10c5883a 	add	r2,r2,r3
  81a6f4:	10800e04 	addi	r2,r2,56
  81a6f8:	10800017 	ldw	r2,0(r2)
  81a6fc:	1005003a 	cmpeq	r2,r2,zero
  81a700:	1000461e 	bne	r2,zero,81a81c <alt_up_sd_card_fclose+0x190>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
  81a704:	e0bfff0f 	ldh	r2,-4(fp)
  81a708:	00c020f4 	movhi	r3,131
  81a70c:	18d76104 	addi	r3,r3,23940
  81a710:	100491ba 	slli	r2,r2,6
  81a714:	10c5883a 	add	r2,r2,r3
  81a718:	10800b04 	addi	r2,r2,44
  81a71c:	10800017 	ldw	r2,0(r2)
  81a720:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0)
  81a724:	e0bfff0f 	ldh	r2,-4(fp)
  81a728:	00c020f4 	movhi	r3,131
  81a72c:	18d76104 	addi	r3,r3,23940
  81a730:	100491ba 	slli	r2,r2,6
  81a734:	10c5883a 	add	r2,r2,r3
  81a738:	10800a04 	addi	r2,r2,40
  81a73c:	10800017 	ldw	r2,0(r2)
  81a740:	1004c03a 	cmpne	r2,r2,zero
  81a744:	1000071e 	bne	r2,zero,81a764 <alt_up_sd_card_fclose+0xd8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
  81a748:	008020f4 	movhi	r2,131
  81a74c:	10974c04 	addi	r2,r2,23856
  81a750:	10c01317 	ldw	r3,76(r2)
  81a754:	e0bffd17 	ldw	r2,-12(fp)
  81a758:	10c5883a 	add	r2,r2,r3
  81a75c:	e0bffd15 	stw	r2,-12(fp)
  81a760:	00001406 	br	81a7b4 <alt_up_sd_card_fclose+0x128>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
  81a764:	008020f4 	movhi	r2,131
  81a768:	10974c04 	addi	r2,r2,23856
  81a76c:	10c01417 	ldw	r3,80(r2)
  81a770:	e0bffd17 	ldw	r2,-12(fp)
  81a774:	1889883a 	add	r4,r3,r2
  81a778:	e0bfff0f 	ldh	r2,-4(fp)
  81a77c:	00c020f4 	movhi	r3,131
  81a780:	18d76104 	addi	r3,r3,23940
  81a784:	100491ba 	slli	r2,r2,6
  81a788:	10c5883a 	add	r2,r2,r3
  81a78c:	10800a04 	addi	r2,r2,40
  81a790:	10800017 	ldw	r2,0(r2)
  81a794:	10ffff84 	addi	r3,r2,-2
  81a798:	008020f4 	movhi	r2,131
  81a79c:	10974c04 	addi	r2,r2,23856
  81a7a0:	10800383 	ldbu	r2,14(r2)
  81a7a4:	10803fcc 	andi	r2,r2,255
  81a7a8:	1885383a 	mul	r2,r3,r2
  81a7ac:	2085883a 	add	r2,r4,r2
  81a7b0:	e0bffd15 	stw	r2,-12(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
  81a7b4:	e13ffd17 	ldw	r4,-12(fp)
  81a7b8:	d1674a17 	ldw	r5,-25304(gp)
  81a7bc:	08165400 	call	816540 <Read_Sector_Data>
  81a7c0:	1005003a 	cmpeq	r2,r2,zero
  81a7c4:	1000151e 	bne	r2,zero,81a81c <alt_up_sd_card_fclose+0x190>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
  81a7c8:	e0bfff0f 	ldh	r2,-4(fp)
  81a7cc:	00c020f4 	movhi	r3,131
  81a7d0:	18d76104 	addi	r3,r3,23940
  81a7d4:	100491ba 	slli	r2,r2,6
  81a7d8:	10c5883a 	add	r2,r2,r3
  81a7dc:	10800c04 	addi	r2,r2,48
  81a7e0:	1080000b 	ldhu	r2,0(r2)
  81a7e4:	113fffcc 	andi	r4,r2,65535
  81a7e8:	2120001c 	xori	r4,r4,32768
  81a7ec:	21200004 	addi	r4,r4,-32768
  81a7f0:	e0bfff0f 	ldh	r2,-4(fp)
  81a7f4:	100491ba 	slli	r2,r2,6
  81a7f8:	1007883a 	mov	r3,r2
  81a7fc:	008020f4 	movhi	r2,131
  81a800:	10976104 	addi	r2,r2,23940
  81a804:	188b883a 	add	r5,r3,r2
  81a808:	0816c0c0 	call	816c0c <Write_File_Record_At_Offset>
  81a80c:	1005003a 	cmpeq	r2,r2,zero
  81a810:	1000021e 	bne	r2,zero,81a81c <alt_up_sd_card_fclose+0x190>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
  81a814:	08164f00 	call	8164f0 <Save_Modified_Sector>
  81a818:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
  81a81c:	e0bfff0f 	ldh	r2,-4(fp)
  81a820:	00c020f4 	movhi	r3,131
  81a824:	18d76104 	addi	r3,r3,23940
  81a828:	100491ba 	slli	r2,r2,6
  81a82c:	10c5883a 	add	r2,r2,r3
  81a830:	10800f04 	addi	r2,r2,60
  81a834:	10000015 	stw	zero,0(r2)
			result = true;
  81a838:	00800044 	movi	r2,1
  81a83c:	e0bffe15 	stw	r2,-8(fp)
        }
    }
    
    return result;
  81a840:	e0bffe17 	ldw	r2,-8(fp)
}
  81a844:	e037883a 	mov	sp,fp
  81a848:	dfc00117 	ldw	ra,4(sp)
  81a84c:	df000017 	ldw	fp,0(sp)
  81a850:	dec00204 	addi	sp,sp,8
  81a854:	f800283a 	ret

0081a858 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  81a858:	defff404 	addi	sp,sp,-48
  81a85c:	df000b15 	stw	fp,44(sp)
  81a860:	df000b04 	addi	fp,sp,44
  81a864:	e13ffb15 	stw	r4,-20(fp)
  81a868:	e17ffc15 	stw	r5,-16(fp)
  81a86c:	e1bffd15 	stw	r6,-12(fp)
  81a870:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81a874:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81a878:	008020b4 	movhi	r2,130
  81a87c:	10803e04 	addi	r2,r2,248
  81a880:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  81a884:	1005003a 	cmpeq	r2,r2,zero
  81a888:	1000411e 	bne	r2,zero,81a990 <alt_alarm_start+0x138>
  {
    if (alarm)
  81a88c:	e0bffb17 	ldw	r2,-20(fp)
  81a890:	1005003a 	cmpeq	r2,r2,zero
  81a894:	10003b1e 	bne	r2,zero,81a984 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  81a898:	e0fffb17 	ldw	r3,-20(fp)
  81a89c:	e0bffd17 	ldw	r2,-12(fp)
  81a8a0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  81a8a4:	e0fffb17 	ldw	r3,-20(fp)
  81a8a8:	e0bffe17 	ldw	r2,-8(fp)
  81a8ac:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a8b0:	0005303a 	rdctl	r2,status
  81a8b4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a8b8:	e0fff817 	ldw	r3,-32(fp)
  81a8bc:	00bfff84 	movi	r2,-2
  81a8c0:	1884703a 	and	r2,r3,r2
  81a8c4:	1001703a 	wrctl	status,r2
  
  return context;
  81a8c8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81a8cc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81a8d0:	008020b4 	movhi	r2,130
  81a8d4:	10803f04 	addi	r2,r2,252
  81a8d8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81a8dc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81a8e0:	e0fffc17 	ldw	r3,-16(fp)
  81a8e4:	e0bff917 	ldw	r2,-28(fp)
  81a8e8:	1885883a 	add	r2,r3,r2
  81a8ec:	10c00044 	addi	r3,r2,1
  81a8f0:	e0bffb17 	ldw	r2,-20(fp)
  81a8f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81a8f8:	e0bffb17 	ldw	r2,-20(fp)
  81a8fc:	10c00217 	ldw	r3,8(r2)
  81a900:	e0bff917 	ldw	r2,-28(fp)
  81a904:	1880042e 	bgeu	r3,r2,81a918 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  81a908:	e0fffb17 	ldw	r3,-20(fp)
  81a90c:	00800044 	movi	r2,1
  81a910:	18800405 	stb	r2,16(r3)
  81a914:	00000206 	br	81a920 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  81a918:	e0bffb17 	ldw	r2,-20(fp)
  81a91c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81a920:	e0fffb17 	ldw	r3,-20(fp)
  81a924:	008020b4 	movhi	r2,130
  81a928:	10b91c04 	addi	r2,r2,-7056
  81a92c:	e0bff615 	stw	r2,-40(fp)
  81a930:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81a934:	e0fff717 	ldw	r3,-36(fp)
  81a938:	e0bff617 	ldw	r2,-40(fp)
  81a93c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81a940:	e0bff617 	ldw	r2,-40(fp)
  81a944:	10c00017 	ldw	r3,0(r2)
  81a948:	e0bff717 	ldw	r2,-36(fp)
  81a94c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81a950:	e0bff617 	ldw	r2,-40(fp)
  81a954:	10c00017 	ldw	r3,0(r2)
  81a958:	e0bff717 	ldw	r2,-36(fp)
  81a95c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81a960:	e0fff617 	ldw	r3,-40(fp)
  81a964:	e0bff717 	ldw	r2,-36(fp)
  81a968:	18800015 	stw	r2,0(r3)
  81a96c:	e0bffa17 	ldw	r2,-24(fp)
  81a970:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a974:	e0bff517 	ldw	r2,-44(fp)
  81a978:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81a97c:	e03fff15 	stw	zero,-4(fp)
  81a980:	00000506 	br	81a998 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  81a984:	00bffa84 	movi	r2,-22
  81a988:	e0bfff15 	stw	r2,-4(fp)
  81a98c:	00000206 	br	81a998 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  81a990:	00bfde84 	movi	r2,-134
  81a994:	e0bfff15 	stw	r2,-4(fp)
  81a998:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81a99c:	e037883a 	mov	sp,fp
  81a9a0:	df000017 	ldw	fp,0(sp)
  81a9a4:	dec00104 	addi	sp,sp,4
  81a9a8:	f800283a 	ret

0081a9ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81a9ac:	deffff04 	addi	sp,sp,-4
  81a9b0:	df000015 	stw	fp,0(sp)
  81a9b4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81a9b8:	e037883a 	mov	sp,fp
  81a9bc:	df000017 	ldw	fp,0(sp)
  81a9c0:	dec00104 	addi	sp,sp,4
  81a9c4:	f800283a 	ret

0081a9c8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81a9c8:	defff904 	addi	sp,sp,-28
  81a9cc:	dfc00615 	stw	ra,24(sp)
  81a9d0:	df000515 	stw	fp,20(sp)
  81a9d4:	df000504 	addi	fp,sp,20
  81a9d8:	e13ffd15 	stw	r4,-12(fp)
  81a9dc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81a9e0:	e0bffd17 	ldw	r2,-12(fp)
  81a9e4:	1005003a 	cmpeq	r2,r2,zero
  81a9e8:	1000041e 	bne	r2,zero,81a9fc <alt_dev_llist_insert+0x34>
  81a9ec:	e0bffd17 	ldw	r2,-12(fp)
  81a9f0:	10800217 	ldw	r2,8(r2)
  81a9f4:	1004c03a 	cmpne	r2,r2,zero
  81a9f8:	1000071e 	bne	r2,zero,81aa18 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  81a9fc:	081aa7c0 	call	81aa7c <alt_get_errno>
  81aa00:	1007883a 	mov	r3,r2
  81aa04:	00800584 	movi	r2,22
  81aa08:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81aa0c:	00bffa84 	movi	r2,-22
  81aa10:	e0bfff15 	stw	r2,-4(fp)
  81aa14:	00001306 	br	81aa64 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  81aa18:	e0fffd17 	ldw	r3,-12(fp)
  81aa1c:	e0bffe17 	ldw	r2,-8(fp)
  81aa20:	e0bffb15 	stw	r2,-20(fp)
  81aa24:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81aa28:	e0fffc17 	ldw	r3,-16(fp)
  81aa2c:	e0bffb17 	ldw	r2,-20(fp)
  81aa30:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81aa34:	e0bffb17 	ldw	r2,-20(fp)
  81aa38:	10c00017 	ldw	r3,0(r2)
  81aa3c:	e0bffc17 	ldw	r2,-16(fp)
  81aa40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81aa44:	e0bffb17 	ldw	r2,-20(fp)
  81aa48:	10c00017 	ldw	r3,0(r2)
  81aa4c:	e0bffc17 	ldw	r2,-16(fp)
  81aa50:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81aa54:	e0fffb17 	ldw	r3,-20(fp)
  81aa58:	e0bffc17 	ldw	r2,-16(fp)
  81aa5c:	18800015 	stw	r2,0(r3)

  return 0;  
  81aa60:	e03fff15 	stw	zero,-4(fp)
  81aa64:	e0bfff17 	ldw	r2,-4(fp)
}
  81aa68:	e037883a 	mov	sp,fp
  81aa6c:	dfc00117 	ldw	ra,4(sp)
  81aa70:	df000017 	ldw	fp,0(sp)
  81aa74:	dec00204 	addi	sp,sp,8
  81aa78:	f800283a 	ret

0081aa7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81aa7c:	defffd04 	addi	sp,sp,-12
  81aa80:	dfc00215 	stw	ra,8(sp)
  81aa84:	df000115 	stw	fp,4(sp)
  81aa88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81aa8c:	008020b4 	movhi	r2,130
  81aa90:	10b8fa04 	addi	r2,r2,-7192
  81aa94:	10800017 	ldw	r2,0(r2)
  81aa98:	1005003a 	cmpeq	r2,r2,zero
  81aa9c:	1000061e 	bne	r2,zero,81aab8 <alt_get_errno+0x3c>
  81aaa0:	008020b4 	movhi	r2,130
  81aaa4:	10b8fa04 	addi	r2,r2,-7192
  81aaa8:	10800017 	ldw	r2,0(r2)
  81aaac:	103ee83a 	callr	r2
  81aab0:	e0bfff15 	stw	r2,-4(fp)
  81aab4:	00000306 	br	81aac4 <alt_get_errno+0x48>
  81aab8:	008020b4 	movhi	r2,130
  81aabc:	10801304 	addi	r2,r2,76
  81aac0:	e0bfff15 	stw	r2,-4(fp)
  81aac4:	e0bfff17 	ldw	r2,-4(fp)
}
  81aac8:	e037883a 	mov	sp,fp
  81aacc:	dfc00117 	ldw	ra,4(sp)
  81aad0:	df000017 	ldw	fp,0(sp)
  81aad4:	dec00204 	addi	sp,sp,8
  81aad8:	f800283a 	ret

0081aadc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81aadc:	defffd04 	addi	sp,sp,-12
  81aae0:	dfc00215 	stw	ra,8(sp)
  81aae4:	df000115 	stw	fp,4(sp)
  81aae8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81aaec:	00bfff04 	movi	r2,-4
  81aaf0:	00c020b4 	movhi	r3,130
  81aaf4:	18efe504 	addi	r3,r3,-16492
  81aaf8:	1885883a 	add	r2,r3,r2
  81aafc:	e0bfff15 	stw	r2,-4(fp)
  81ab00:	00000606 	br	81ab1c <_do_ctors+0x40>
        (*ctor) (); 
  81ab04:	e0bfff17 	ldw	r2,-4(fp)
  81ab08:	10800017 	ldw	r2,0(r2)
  81ab0c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81ab10:	e0bfff17 	ldw	r2,-4(fp)
  81ab14:	10bfff04 	addi	r2,r2,-4
  81ab18:	e0bfff15 	stw	r2,-4(fp)
  81ab1c:	e0ffff17 	ldw	r3,-4(fp)
  81ab20:	008020b4 	movhi	r2,130
  81ab24:	10afe404 	addi	r2,r2,-16496
  81ab28:	18bff62e 	bgeu	r3,r2,81ab04 <_do_ctors+0x28>
        (*ctor) (); 
}
  81ab2c:	e037883a 	mov	sp,fp
  81ab30:	dfc00117 	ldw	ra,4(sp)
  81ab34:	df000017 	ldw	fp,0(sp)
  81ab38:	dec00204 	addi	sp,sp,8
  81ab3c:	f800283a 	ret

0081ab40 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81ab40:	defffd04 	addi	sp,sp,-12
  81ab44:	dfc00215 	stw	ra,8(sp)
  81ab48:	df000115 	stw	fp,4(sp)
  81ab4c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81ab50:	00bfff04 	movi	r2,-4
  81ab54:	00c020b4 	movhi	r3,130
  81ab58:	18efe504 	addi	r3,r3,-16492
  81ab5c:	1885883a 	add	r2,r3,r2
  81ab60:	e0bfff15 	stw	r2,-4(fp)
  81ab64:	00000606 	br	81ab80 <_do_dtors+0x40>
        (*dtor) (); 
  81ab68:	e0bfff17 	ldw	r2,-4(fp)
  81ab6c:	10800017 	ldw	r2,0(r2)
  81ab70:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81ab74:	e0bfff17 	ldw	r2,-4(fp)
  81ab78:	10bfff04 	addi	r2,r2,-4
  81ab7c:	e0bfff15 	stw	r2,-4(fp)
  81ab80:	e0ffff17 	ldw	r3,-4(fp)
  81ab84:	008020b4 	movhi	r2,130
  81ab88:	10afe504 	addi	r2,r2,-16492
  81ab8c:	18bff62e 	bgeu	r3,r2,81ab68 <_do_dtors+0x28>
        (*dtor) (); 
}
  81ab90:	e037883a 	mov	sp,fp
  81ab94:	dfc00117 	ldw	ra,4(sp)
  81ab98:	df000017 	ldw	fp,0(sp)
  81ab9c:	dec00204 	addi	sp,sp,8
  81aba0:	f800283a 	ret

0081aba4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81aba4:	defff904 	addi	sp,sp,-28
  81aba8:	dfc00615 	stw	ra,24(sp)
  81abac:	df000515 	stw	fp,20(sp)
  81abb0:	df000504 	addi	fp,sp,20
  81abb4:	e13ffd15 	stw	r4,-12(fp)
  81abb8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81abbc:	e0bffe17 	ldw	r2,-8(fp)
  81abc0:	10800017 	ldw	r2,0(r2)
  81abc4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81abc8:	e13ffd17 	ldw	r4,-12(fp)
  81abcc:	0803b440 	call	803b44 <strlen>
  81abd0:	10800044 	addi	r2,r2,1
  81abd4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81abd8:	00000d06 	br	81ac10 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81abdc:	e0bffc17 	ldw	r2,-16(fp)
  81abe0:	11000217 	ldw	r4,8(r2)
  81abe4:	e1bffb17 	ldw	r6,-20(fp)
  81abe8:	e17ffd17 	ldw	r5,-12(fp)
  81abec:	081bbc80 	call	81bbc8 <memcmp>
  81abf0:	1004c03a 	cmpne	r2,r2,zero
  81abf4:	1000031e 	bne	r2,zero,81ac04 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81abf8:	e0bffc17 	ldw	r2,-16(fp)
  81abfc:	e0bfff15 	stw	r2,-4(fp)
  81ac00:	00000706 	br	81ac20 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81ac04:	e0bffc17 	ldw	r2,-16(fp)
  81ac08:	10800017 	ldw	r2,0(r2)
  81ac0c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81ac10:	e0fffe17 	ldw	r3,-8(fp)
  81ac14:	e0bffc17 	ldw	r2,-16(fp)
  81ac18:	10fff01e 	bne	r2,r3,81abdc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81ac1c:	e03fff15 	stw	zero,-4(fp)
  81ac20:	e0bfff17 	ldw	r2,-4(fp)
}
  81ac24:	e037883a 	mov	sp,fp
  81ac28:	dfc00117 	ldw	ra,4(sp)
  81ac2c:	df000017 	ldw	fp,0(sp)
  81ac30:	dec00204 	addi	sp,sp,8
  81ac34:	f800283a 	ret

0081ac38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81ac38:	defffe04 	addi	sp,sp,-8
  81ac3c:	dfc00115 	stw	ra,4(sp)
  81ac40:	df000015 	stw	fp,0(sp)
  81ac44:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81ac48:	0009883a 	mov	r4,zero
  81ac4c:	01440004 	movi	r5,4096
  81ac50:	081baec0 	call	81baec <alt_icache_flush>
#endif
}
  81ac54:	e037883a 	mov	sp,fp
  81ac58:	dfc00117 	ldw	ra,4(sp)
  81ac5c:	df000017 	ldw	fp,0(sp)
  81ac60:	dec00204 	addi	sp,sp,8
  81ac64:	f800283a 	ret

0081ac68 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81ac68:	defff904 	addi	sp,sp,-28
  81ac6c:	dfc00615 	stw	ra,24(sp)
  81ac70:	df000515 	stw	fp,20(sp)
  81ac74:	df000504 	addi	fp,sp,20
  81ac78:	e13ffc15 	stw	r4,-16(fp)
  81ac7c:	e17ffd15 	stw	r5,-12(fp)
  81ac80:	e1bffe15 	stw	r6,-8(fp)
  81ac84:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81ac88:	e13ffd17 	ldw	r4,-12(fp)
  81ac8c:	e17ffe17 	ldw	r5,-8(fp)
  81ac90:	e1bfff17 	ldw	r6,-4(fp)
  81ac94:	081b0400 	call	81b040 <open>
  81ac98:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81ac9c:	e0bffb17 	ldw	r2,-20(fp)
  81aca0:	1004803a 	cmplt	r2,r2,zero
  81aca4:	10001c1e 	bne	r2,zero,81ad18 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81aca8:	e0bffb17 	ldw	r2,-20(fp)
  81acac:	00c020b4 	movhi	r3,130
  81acb0:	18f45204 	addi	r3,r3,-11960
  81acb4:	10800324 	muli	r2,r2,12
  81acb8:	10c5883a 	add	r2,r2,r3
  81acbc:	10c00017 	ldw	r3,0(r2)
  81acc0:	e0bffc17 	ldw	r2,-16(fp)
  81acc4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81acc8:	e0bffb17 	ldw	r2,-20(fp)
  81accc:	00c020b4 	movhi	r3,130
  81acd0:	18f45204 	addi	r3,r3,-11960
  81acd4:	10800324 	muli	r2,r2,12
  81acd8:	10c5883a 	add	r2,r2,r3
  81acdc:	10800104 	addi	r2,r2,4
  81ace0:	10c00017 	ldw	r3,0(r2)
  81ace4:	e0bffc17 	ldw	r2,-16(fp)
  81ace8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81acec:	e0bffb17 	ldw	r2,-20(fp)
  81acf0:	00c020b4 	movhi	r3,130
  81acf4:	18f45204 	addi	r3,r3,-11960
  81acf8:	10800324 	muli	r2,r2,12
  81acfc:	10c5883a 	add	r2,r2,r3
  81ad00:	10800204 	addi	r2,r2,8
  81ad04:	10c00017 	ldw	r3,0(r2)
  81ad08:	e0bffc17 	ldw	r2,-16(fp)
  81ad0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81ad10:	e13ffb17 	ldw	r4,-20(fp)
  81ad14:	080c3cc0 	call	80c3cc <alt_release_fd>
  }
} 
  81ad18:	e037883a 	mov	sp,fp
  81ad1c:	dfc00117 	ldw	ra,4(sp)
  81ad20:	df000017 	ldw	fp,0(sp)
  81ad24:	dec00204 	addi	sp,sp,8
  81ad28:	f800283a 	ret

0081ad2c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81ad2c:	defffb04 	addi	sp,sp,-20
  81ad30:	dfc00415 	stw	ra,16(sp)
  81ad34:	df000315 	stw	fp,12(sp)
  81ad38:	df000304 	addi	fp,sp,12
  81ad3c:	e13ffd15 	stw	r4,-12(fp)
  81ad40:	e17ffe15 	stw	r5,-8(fp)
  81ad44:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81ad48:	010020b4 	movhi	r4,130
  81ad4c:	21345504 	addi	r4,r4,-11948
  81ad50:	e17ffd17 	ldw	r5,-12(fp)
  81ad54:	01800044 	movi	r6,1
  81ad58:	01c07fc4 	movi	r7,511
  81ad5c:	081ac680 	call	81ac68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81ad60:	010020b4 	movhi	r4,130
  81ad64:	21345204 	addi	r4,r4,-11960
  81ad68:	e17ffe17 	ldw	r5,-8(fp)
  81ad6c:	000d883a 	mov	r6,zero
  81ad70:	01c07fc4 	movi	r7,511
  81ad74:	081ac680 	call	81ac68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81ad78:	010020b4 	movhi	r4,130
  81ad7c:	21345804 	addi	r4,r4,-11936
  81ad80:	e17fff17 	ldw	r5,-4(fp)
  81ad84:	01800044 	movi	r6,1
  81ad88:	01c07fc4 	movi	r7,511
  81ad8c:	081ac680 	call	81ac68 <alt_open_fd>
}  
  81ad90:	e037883a 	mov	sp,fp
  81ad94:	dfc00117 	ldw	ra,4(sp)
  81ad98:	df000017 	ldw	fp,0(sp)
  81ad9c:	dec00204 	addi	sp,sp,8
  81ada0:	f800283a 	ret

0081ada4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  81ada4:	deffef04 	addi	sp,sp,-68
  81ada8:	df001015 	stw	fp,64(sp)
  81adac:	df001004 	addi	fp,sp,64
  81adb0:	e13ffc15 	stw	r4,-16(fp)
  81adb4:	e17ffd15 	stw	r5,-12(fp)
  81adb8:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  81adbc:	00bffa84 	movi	r2,-22
  81adc0:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  81adc4:	e0bffc17 	ldw	r2,-16(fp)
  81adc8:	10800828 	cmpgeui	r2,r2,32
  81adcc:	1000601e 	bne	r2,zero,81af50 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81add0:	0005303a 	rdctl	r2,status
  81add4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81add8:	e0fff917 	ldw	r3,-28(fp)
  81addc:	00bfff84 	movi	r2,-2
  81ade0:	1884703a 	and	r2,r3,r2
  81ade4:	1001703a 	wrctl	status,r2
  
  return context;
  81ade8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  81adec:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  81adf0:	e0bffc17 	ldw	r2,-16(fp)
  81adf4:	00c020f4 	movhi	r3,131
  81adf8:	18d8a104 	addi	r3,r3,25220
  81adfc:	100490fa 	slli	r2,r2,3
  81ae00:	10c7883a 	add	r3,r2,r3
  81ae04:	e0bffe17 	ldw	r2,-8(fp)
  81ae08:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  81ae0c:	e0bffc17 	ldw	r2,-16(fp)
  81ae10:	00c020f4 	movhi	r3,131
  81ae14:	18d8a104 	addi	r3,r3,25220
  81ae18:	100490fa 	slli	r2,r2,3
  81ae1c:	10c5883a 	add	r2,r2,r3
  81ae20:	10c00104 	addi	r3,r2,4
  81ae24:	e0bffd17 	ldw	r2,-12(fp)
  81ae28:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  81ae2c:	e0bffe17 	ldw	r2,-8(fp)
  81ae30:	1005003a 	cmpeq	r2,r2,zero
  81ae34:	1000201e 	bne	r2,zero,81aeb8 <alt_irq_register+0x114>
  81ae38:	e0bffc17 	ldw	r2,-16(fp)
  81ae3c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ae40:	0005303a 	rdctl	r2,status
  81ae44:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ae48:	e0fff617 	ldw	r3,-40(fp)
  81ae4c:	00bfff84 	movi	r2,-2
  81ae50:	1884703a 	and	r2,r3,r2
  81ae54:	1001703a 	wrctl	status,r2
  
  return context;
  81ae58:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81ae5c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  81ae60:	e0fff717 	ldw	r3,-36(fp)
  81ae64:	00800044 	movi	r2,1
  81ae68:	10c4983a 	sll	r2,r2,r3
  81ae6c:	1007883a 	mov	r3,r2
  81ae70:	008020b4 	movhi	r2,130
  81ae74:	10803d04 	addi	r2,r2,244
  81ae78:	10800017 	ldw	r2,0(r2)
  81ae7c:	1886b03a 	or	r3,r3,r2
  81ae80:	008020b4 	movhi	r2,130
  81ae84:	10803d04 	addi	r2,r2,244
  81ae88:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81ae8c:	008020b4 	movhi	r2,130
  81ae90:	10803d04 	addi	r2,r2,244
  81ae94:	10800017 	ldw	r2,0(r2)
  81ae98:	100170fa 	wrctl	ienable,r2
  81ae9c:	e0bff817 	ldw	r2,-32(fp)
  81aea0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81aea4:	e0bff517 	ldw	r2,-44(fp)
  81aea8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81aeac:	0005883a 	mov	r2,zero
  81aeb0:	e0bfff15 	stw	r2,-4(fp)
  81aeb4:	00002006 	br	81af38 <alt_irq_register+0x194>
  81aeb8:	e0bffc17 	ldw	r2,-16(fp)
  81aebc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81aec0:	0005303a 	rdctl	r2,status
  81aec4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81aec8:	e0fff217 	ldw	r3,-56(fp)
  81aecc:	00bfff84 	movi	r2,-2
  81aed0:	1884703a 	and	r2,r3,r2
  81aed4:	1001703a 	wrctl	status,r2
  
  return context;
  81aed8:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81aedc:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  81aee0:	e0fff317 	ldw	r3,-52(fp)
  81aee4:	00800044 	movi	r2,1
  81aee8:	10c4983a 	sll	r2,r2,r3
  81aeec:	0084303a 	nor	r2,zero,r2
  81aef0:	1007883a 	mov	r3,r2
  81aef4:	008020b4 	movhi	r2,130
  81aef8:	10803d04 	addi	r2,r2,244
  81aefc:	10800017 	ldw	r2,0(r2)
  81af00:	1886703a 	and	r3,r3,r2
  81af04:	008020b4 	movhi	r2,130
  81af08:	10803d04 	addi	r2,r2,244
  81af0c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81af10:	008020b4 	movhi	r2,130
  81af14:	10803d04 	addi	r2,r2,244
  81af18:	10800017 	ldw	r2,0(r2)
  81af1c:	100170fa 	wrctl	ienable,r2
  81af20:	e0bff417 	ldw	r2,-48(fp)
  81af24:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81af28:	e0bff117 	ldw	r2,-60(fp)
  81af2c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81af30:	0005883a 	mov	r2,zero
  81af34:	e0bfff15 	stw	r2,-4(fp)
  81af38:	e0bfff17 	ldw	r2,-4(fp)
  81af3c:	e0bffb15 	stw	r2,-20(fp)
  81af40:	e0bffa17 	ldw	r2,-24(fp)
  81af44:	e0bff015 	stw	r2,-64(fp)
  81af48:	e0bff017 	ldw	r2,-64(fp)
  81af4c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  81af50:	e0bffb17 	ldw	r2,-20(fp)
}
  81af54:	e037883a 	mov	sp,fp
  81af58:	df000017 	ldw	fp,0(sp)
  81af5c:	dec00104 	addi	sp,sp,4
  81af60:	f800283a 	ret

0081af64 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81af64:	defffc04 	addi	sp,sp,-16
  81af68:	df000315 	stw	fp,12(sp)
  81af6c:	df000304 	addi	fp,sp,12
  81af70:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81af74:	e0bffe17 	ldw	r2,-8(fp)
  81af78:	10800217 	ldw	r2,8(r2)
  81af7c:	10d00034 	orhi	r3,r2,16384
  81af80:	e0bffe17 	ldw	r2,-8(fp)
  81af84:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81af88:	e03ffd15 	stw	zero,-12(fp)
  81af8c:	00002006 	br	81b010 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81af90:	e0bffd17 	ldw	r2,-12(fp)
  81af94:	00c020b4 	movhi	r3,130
  81af98:	18f45204 	addi	r3,r3,-11960
  81af9c:	10800324 	muli	r2,r2,12
  81afa0:	10c5883a 	add	r2,r2,r3
  81afa4:	10c00017 	ldw	r3,0(r2)
  81afa8:	e0bffe17 	ldw	r2,-8(fp)
  81afac:	10800017 	ldw	r2,0(r2)
  81afb0:	1880141e 	bne	r3,r2,81b004 <alt_file_locked+0xa0>
  81afb4:	e0bffd17 	ldw	r2,-12(fp)
  81afb8:	00c020b4 	movhi	r3,130
  81afbc:	18f45204 	addi	r3,r3,-11960
  81afc0:	10800324 	muli	r2,r2,12
  81afc4:	10c5883a 	add	r2,r2,r3
  81afc8:	10800204 	addi	r2,r2,8
  81afcc:	10800017 	ldw	r2,0(r2)
  81afd0:	1004403a 	cmpge	r2,r2,zero
  81afd4:	10000b1e 	bne	r2,zero,81b004 <alt_file_locked+0xa0>
  81afd8:	e0bffd17 	ldw	r2,-12(fp)
  81afdc:	10800324 	muli	r2,r2,12
  81afe0:	1007883a 	mov	r3,r2
  81afe4:	008020b4 	movhi	r2,130
  81afe8:	10b45204 	addi	r2,r2,-11960
  81afec:	1887883a 	add	r3,r3,r2
  81aff0:	e0bffe17 	ldw	r2,-8(fp)
  81aff4:	18800326 	beq	r3,r2,81b004 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81aff8:	00bffcc4 	movi	r2,-13
  81affc:	e0bfff15 	stw	r2,-4(fp)
  81b000:	00000a06 	br	81b02c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81b004:	e0bffd17 	ldw	r2,-12(fp)
  81b008:	10800044 	addi	r2,r2,1
  81b00c:	e0bffd15 	stw	r2,-12(fp)
  81b010:	008020b4 	movhi	r2,130
  81b014:	10b8f904 	addi	r2,r2,-7196
  81b018:	10800017 	ldw	r2,0(r2)
  81b01c:	1007883a 	mov	r3,r2
  81b020:	e0bffd17 	ldw	r2,-12(fp)
  81b024:	18bfda2e 	bgeu	r3,r2,81af90 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81b028:	e03fff15 	stw	zero,-4(fp)
  81b02c:	e0bfff17 	ldw	r2,-4(fp)
}
  81b030:	e037883a 	mov	sp,fp
  81b034:	df000017 	ldw	fp,0(sp)
  81b038:	dec00104 	addi	sp,sp,4
  81b03c:	f800283a 	ret

0081b040 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81b040:	defff404 	addi	sp,sp,-48
  81b044:	dfc00b15 	stw	ra,44(sp)
  81b048:	df000a15 	stw	fp,40(sp)
  81b04c:	df000a04 	addi	fp,sp,40
  81b050:	e13ffb15 	stw	r4,-20(fp)
  81b054:	e17ffc15 	stw	r5,-16(fp)
  81b058:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81b05c:	00bfffc4 	movi	r2,-1
  81b060:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  81b064:	00bffb44 	movi	r2,-19
  81b068:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  81b06c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81b070:	e13ffb17 	ldw	r4,-20(fp)
  81b074:	014020b4 	movhi	r5,130
  81b078:	2978f704 	addi	r5,r5,-7204
  81b07c:	081aba40 	call	81aba4 <alt_find_dev>
  81b080:	e0bffa15 	stw	r2,-24(fp)
  81b084:	e0bffa17 	ldw	r2,-24(fp)
  81b088:	1004c03a 	cmpne	r2,r2,zero
  81b08c:	1000051e 	bne	r2,zero,81b0a4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81b090:	e13ffb17 	ldw	r4,-20(fp)
  81b094:	081b8d80 	call	81b8d8 <alt_find_file>
  81b098:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  81b09c:	00800044 	movi	r2,1
  81b0a0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81b0a4:	e0bffa17 	ldw	r2,-24(fp)
  81b0a8:	1005003a 	cmpeq	r2,r2,zero
  81b0ac:	1000301e 	bne	r2,zero,81b170 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81b0b0:	e13ffa17 	ldw	r4,-24(fp)
  81b0b4:	081b9f80 	call	81b9f8 <alt_get_fd>
  81b0b8:	e0bff815 	stw	r2,-32(fp)
  81b0bc:	e0bff817 	ldw	r2,-32(fp)
  81b0c0:	1004403a 	cmpge	r2,r2,zero
  81b0c4:	1000031e 	bne	r2,zero,81b0d4 <open+0x94>
    {
      status = index;
  81b0c8:	e0bff817 	ldw	r2,-32(fp)
  81b0cc:	e0bff715 	stw	r2,-36(fp)
  81b0d0:	00002906 	br	81b178 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  81b0d4:	e0bff817 	ldw	r2,-32(fp)
  81b0d8:	10800324 	muli	r2,r2,12
  81b0dc:	1007883a 	mov	r3,r2
  81b0e0:	008020b4 	movhi	r2,130
  81b0e4:	10b45204 	addi	r2,r2,-11960
  81b0e8:	1885883a 	add	r2,r3,r2
  81b0ec:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81b0f0:	e0fffc17 	ldw	r3,-16(fp)
  81b0f4:	00900034 	movhi	r2,16384
  81b0f8:	10bfffc4 	addi	r2,r2,-1
  81b0fc:	1886703a 	and	r3,r3,r2
  81b100:	e0bff917 	ldw	r2,-28(fp)
  81b104:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81b108:	e0bff617 	ldw	r2,-40(fp)
  81b10c:	1004c03a 	cmpne	r2,r2,zero
  81b110:	1000061e 	bne	r2,zero,81b12c <open+0xec>
  81b114:	e13ff917 	ldw	r4,-28(fp)
  81b118:	081af640 	call	81af64 <alt_file_locked>
  81b11c:	e0bff715 	stw	r2,-36(fp)
  81b120:	e0bff717 	ldw	r2,-36(fp)
  81b124:	1004803a 	cmplt	r2,r2,zero
  81b128:	1000131e 	bne	r2,zero,81b178 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81b12c:	e0bffa17 	ldw	r2,-24(fp)
  81b130:	10800317 	ldw	r2,12(r2)
  81b134:	1005003a 	cmpeq	r2,r2,zero
  81b138:	1000091e 	bne	r2,zero,81b160 <open+0x120>
  81b13c:	e0bffa17 	ldw	r2,-24(fp)
  81b140:	10800317 	ldw	r2,12(r2)
  81b144:	e13ff917 	ldw	r4,-28(fp)
  81b148:	e17ffb17 	ldw	r5,-20(fp)
  81b14c:	e1bffc17 	ldw	r6,-16(fp)
  81b150:	e1fffd17 	ldw	r7,-12(fp)
  81b154:	103ee83a 	callr	r2
  81b158:	e0bfff15 	stw	r2,-4(fp)
  81b15c:	00000106 	br	81b164 <open+0x124>
  81b160:	e03fff15 	stw	zero,-4(fp)
  81b164:	e0bfff17 	ldw	r2,-4(fp)
  81b168:	e0bff715 	stw	r2,-36(fp)
  81b16c:	00000206 	br	81b178 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81b170:	00bffb44 	movi	r2,-19
  81b174:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81b178:	e0bff717 	ldw	r2,-36(fp)
  81b17c:	1004403a 	cmpge	r2,r2,zero
  81b180:	1000091e 	bne	r2,zero,81b1a8 <open+0x168>
  {
    alt_release_fd (index);  
  81b184:	e13ff817 	ldw	r4,-32(fp)
  81b188:	080c3cc0 	call	80c3cc <alt_release_fd>
    ALT_ERRNO = -status;
  81b18c:	081b1c80 	call	81b1c8 <alt_get_errno>
  81b190:	e0fff717 	ldw	r3,-36(fp)
  81b194:	00c7c83a 	sub	r3,zero,r3
  81b198:	10c00015 	stw	r3,0(r2)
    return -1;
  81b19c:	00bfffc4 	movi	r2,-1
  81b1a0:	e0bffe15 	stw	r2,-8(fp)
  81b1a4:	00000206 	br	81b1b0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  81b1a8:	e0bff817 	ldw	r2,-32(fp)
  81b1ac:	e0bffe15 	stw	r2,-8(fp)
  81b1b0:	e0bffe17 	ldw	r2,-8(fp)
}
  81b1b4:	e037883a 	mov	sp,fp
  81b1b8:	dfc00117 	ldw	ra,4(sp)
  81b1bc:	df000017 	ldw	fp,0(sp)
  81b1c0:	dec00204 	addi	sp,sp,8
  81b1c4:	f800283a 	ret

0081b1c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81b1c8:	defffd04 	addi	sp,sp,-12
  81b1cc:	dfc00215 	stw	ra,8(sp)
  81b1d0:	df000115 	stw	fp,4(sp)
  81b1d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81b1d8:	008020b4 	movhi	r2,130
  81b1dc:	10b8fa04 	addi	r2,r2,-7192
  81b1e0:	10800017 	ldw	r2,0(r2)
  81b1e4:	1005003a 	cmpeq	r2,r2,zero
  81b1e8:	1000061e 	bne	r2,zero,81b204 <alt_get_errno+0x3c>
  81b1ec:	008020b4 	movhi	r2,130
  81b1f0:	10b8fa04 	addi	r2,r2,-7192
  81b1f4:	10800017 	ldw	r2,0(r2)
  81b1f8:	103ee83a 	callr	r2
  81b1fc:	e0bfff15 	stw	r2,-4(fp)
  81b200:	00000306 	br	81b210 <alt_get_errno+0x48>
  81b204:	008020b4 	movhi	r2,130
  81b208:	10801304 	addi	r2,r2,76
  81b20c:	e0bfff15 	stw	r2,-4(fp)
  81b210:	e0bfff17 	ldw	r2,-4(fp)
}
  81b214:	e037883a 	mov	sp,fp
  81b218:	dfc00117 	ldw	ra,4(sp)
  81b21c:	df000017 	ldw	fp,0(sp)
  81b220:	dec00204 	addi	sp,sp,8
  81b224:	f800283a 	ret

0081b228 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81b228:	defffa04 	addi	sp,sp,-24
  81b22c:	df000515 	stw	fp,20(sp)
  81b230:	df000504 	addi	fp,sp,20
  81b234:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b238:	0005303a 	rdctl	r2,status
  81b23c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b240:	e0fffd17 	ldw	r3,-12(fp)
  81b244:	00bfff84 	movi	r2,-2
  81b248:	1884703a 	and	r2,r3,r2
  81b24c:	1001703a 	wrctl	status,r2
  
  return context;
  81b250:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  81b254:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  81b258:	e0bfff17 	ldw	r2,-4(fp)
  81b25c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81b260:	e0bffc17 	ldw	r2,-16(fp)
  81b264:	10c00017 	ldw	r3,0(r2)
  81b268:	e0bffc17 	ldw	r2,-16(fp)
  81b26c:	10800117 	ldw	r2,4(r2)
  81b270:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  81b274:	e0bffc17 	ldw	r2,-16(fp)
  81b278:	10c00117 	ldw	r3,4(r2)
  81b27c:	e0bffc17 	ldw	r2,-16(fp)
  81b280:	10800017 	ldw	r2,0(r2)
  81b284:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  81b288:	e0fffc17 	ldw	r3,-16(fp)
  81b28c:	e0bffc17 	ldw	r2,-16(fp)
  81b290:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  81b294:	e0fffc17 	ldw	r3,-16(fp)
  81b298:	e0bffc17 	ldw	r2,-16(fp)
  81b29c:	18800015 	stw	r2,0(r3)
  81b2a0:	e0bffe17 	ldw	r2,-8(fp)
  81b2a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b2a8:	e0bffb17 	ldw	r2,-20(fp)
  81b2ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  81b2b0:	e037883a 	mov	sp,fp
  81b2b4:	df000017 	ldw	fp,0(sp)
  81b2b8:	dec00104 	addi	sp,sp,4
  81b2bc:	f800283a 	ret

0081b2c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81b2c0:	defffb04 	addi	sp,sp,-20
  81b2c4:	dfc00415 	stw	ra,16(sp)
  81b2c8:	df000315 	stw	fp,12(sp)
  81b2cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  81b2d0:	d0a02e17 	ldw	r2,-32584(gp)
  81b2d4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81b2d8:	d0a75117 	ldw	r2,-25276(gp)
  81b2dc:	10800044 	addi	r2,r2,1
  81b2e0:	d0a75115 	stw	r2,-25276(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81b2e4:	00003106 	br	81b3ac <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  81b2e8:	e0bffe17 	ldw	r2,-8(fp)
  81b2ec:	10800017 	ldw	r2,0(r2)
  81b2f0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  81b2f4:	e0bffe17 	ldw	r2,-8(fp)
  81b2f8:	10800403 	ldbu	r2,16(r2)
  81b2fc:	10803fcc 	andi	r2,r2,255
  81b300:	1005003a 	cmpeq	r2,r2,zero
  81b304:	1000051e 	bne	r2,zero,81b31c <alt_tick+0x5c>
  81b308:	d0a75117 	ldw	r2,-25276(gp)
  81b30c:	1004c03a 	cmpne	r2,r2,zero
  81b310:	1000021e 	bne	r2,zero,81b31c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  81b314:	e0bffe17 	ldw	r2,-8(fp)
  81b318:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81b31c:	e0bffe17 	ldw	r2,-8(fp)
  81b320:	10c00217 	ldw	r3,8(r2)
  81b324:	d0a75117 	ldw	r2,-25276(gp)
  81b328:	10c01e36 	bltu	r2,r3,81b3a4 <alt_tick+0xe4>
  81b32c:	e0bffe17 	ldw	r2,-8(fp)
  81b330:	10800403 	ldbu	r2,16(r2)
  81b334:	10803fcc 	andi	r2,r2,255
  81b338:	1004c03a 	cmpne	r2,r2,zero
  81b33c:	1000191e 	bne	r2,zero,81b3a4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  81b340:	e0bffe17 	ldw	r2,-8(fp)
  81b344:	10c00317 	ldw	r3,12(r2)
  81b348:	e0bffe17 	ldw	r2,-8(fp)
  81b34c:	11000517 	ldw	r4,20(r2)
  81b350:	183ee83a 	callr	r3
  81b354:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  81b358:	e0bffd17 	ldw	r2,-12(fp)
  81b35c:	1004c03a 	cmpne	r2,r2,zero
  81b360:	1000031e 	bne	r2,zero,81b370 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  81b364:	e13ffe17 	ldw	r4,-8(fp)
  81b368:	081b2280 	call	81b228 <alt_alarm_stop>
  81b36c:	00000d06 	br	81b3a4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  81b370:	e0bffe17 	ldw	r2,-8(fp)
  81b374:	10c00217 	ldw	r3,8(r2)
  81b378:	e0bffd17 	ldw	r2,-12(fp)
  81b37c:	1887883a 	add	r3,r3,r2
  81b380:	e0bffe17 	ldw	r2,-8(fp)
  81b384:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81b388:	e0bffe17 	ldw	r2,-8(fp)
  81b38c:	10c00217 	ldw	r3,8(r2)
  81b390:	d0a75117 	ldw	r2,-25276(gp)
  81b394:	1880032e 	bgeu	r3,r2,81b3a4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  81b398:	e0fffe17 	ldw	r3,-8(fp)
  81b39c:	00800044 	movi	r2,1
  81b3a0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  81b3a4:	e0bfff17 	ldw	r2,-4(fp)
  81b3a8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81b3ac:	d0e02e04 	addi	r3,gp,-32584
  81b3b0:	e0bffe17 	ldw	r2,-8(fp)
  81b3b4:	10ffcc1e 	bne	r2,r3,81b2e8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  81b3b8:	080d6cc0 	call	80d6cc <OSTimeTick>
}
  81b3bc:	e037883a 	mov	sp,fp
  81b3c0:	dfc00117 	ldw	ra,4(sp)
  81b3c4:	df000017 	ldw	fp,0(sp)
  81b3c8:	dec00204 	addi	sp,sp,8
  81b3cc:	f800283a 	ret

0081b3d0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  81b3d0:	deffff04 	addi	sp,sp,-4
  81b3d4:	df000015 	stw	fp,0(sp)
  81b3d8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81b3dc:	000170fa 	wrctl	ienable,zero
}
  81b3e0:	e037883a 	mov	sp,fp
  81b3e4:	df000017 	ldw	fp,0(sp)
  81b3e8:	dec00104 	addi	sp,sp,4
  81b3ec:	f800283a 	ret

0081b3f0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  81b3f0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  81b3f4:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  81b3f8:	d1273d17 	ldw	r4,-25356(gp)

      stw ra,  0(sp)
  81b3fc:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  81b400:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  81b404:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  81b408:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  81b40c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  81b410:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  81b414:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  81b418:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  81b41c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  81b420:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  81b424:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  81b428:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81b42c:	081b8100 	call	81b810 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  81b430:	d1273817 	ldw	r4,-25376(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  81b434:	d1673007 	ldb	r5,-25408(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  81b438:	d1273d15 	stw	r4,-25356(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  81b43c:	d1673045 	stb	r5,-25407(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  81b440:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  81b444:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  81b448:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  81b44c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  81b450:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  81b454:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  81b458:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  81b45c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  81b460:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  81b464:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  81b468:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  81b46c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  81b470:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  81b474:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  81b478:	f800283a 	ret

0081b47c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  81b47c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  81b480:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  81b484:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  81b488:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81b48c:	081b8100 	call	81b810 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  81b490:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  81b494:	d4a72e45 	stb	r18,-25415(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  81b498:	003fe506 	br	81b430 <OSCtxSw+0x40>

0081b49c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  81b49c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  81b4a0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  81b4a4:	10800054 	ori	r2,r2,1
      wrctl status, r2
  81b4a8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  81b4ac:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  81b4b0:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  81b4b4:	dec00204 	addi	sp,sp,8

      callr r2
  81b4b8:	103ee83a 	callr	r2

      nop
  81b4bc:	0001883a 	nop

0081b4c0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  81b4c0:	defff704 	addi	sp,sp,-36
  81b4c4:	dfc00815 	stw	ra,32(sp)
  81b4c8:	df000715 	stw	fp,28(sp)
  81b4cc:	df000704 	addi	fp,sp,28
  81b4d0:	e13ffc15 	stw	r4,-16(fp)
  81b4d4:	e17ffd15 	stw	r5,-12(fp)
  81b4d8:	e1bffe15 	stw	r6,-8(fp)
  81b4dc:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  81b4e0:	e0bffe17 	ldw	r2,-8(fp)
  81b4e4:	1007883a 	mov	r3,r2
  81b4e8:	00bfff04 	movi	r2,-4
  81b4ec:	1884703a 	and	r2,r3,r2
  81b4f0:	10bf0004 	addi	r2,r2,-1024
  81b4f4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  81b4f8:	e0bff917 	ldw	r2,-28(fp)
  81b4fc:	10000015 	stw	zero,0(r2)
  81b500:	e0bff917 	ldw	r2,-28(fp)
  81b504:	10c0bb04 	addi	r3,r2,748
  81b508:	e0bff917 	ldw	r2,-28(fp)
  81b50c:	10c00115 	stw	r3,4(r2)
  81b510:	e0bff917 	ldw	r2,-28(fp)
  81b514:	1080bb04 	addi	r2,r2,748
  81b518:	10c01704 	addi	r3,r2,92
  81b51c:	e0bff917 	ldw	r2,-28(fp)
  81b520:	10c00215 	stw	r3,8(r2)
  81b524:	e0bff917 	ldw	r2,-28(fp)
  81b528:	1080bb04 	addi	r2,r2,748
  81b52c:	10c02e04 	addi	r3,r2,184
  81b530:	e0bff917 	ldw	r2,-28(fp)
  81b534:	10c00315 	stw	r3,12(r2)
  81b538:	e0bff917 	ldw	r2,-28(fp)
  81b53c:	10000415 	stw	zero,16(r2)
  81b540:	e0bff917 	ldw	r2,-28(fp)
  81b544:	10800504 	addi	r2,r2,20
  81b548:	1009883a 	mov	r4,r2
  81b54c:	01800644 	movi	r6,25
  81b550:	000b883a 	mov	r5,zero
  81b554:	0808f300 	call	808f30 <memset>
  81b558:	e0bff917 	ldw	r2,-28(fp)
  81b55c:	10000c15 	stw	zero,48(r2)
  81b560:	e0fff917 	ldw	r3,-28(fp)
  81b564:	008020b4 	movhi	r2,130
  81b568:	10b24204 	addi	r2,r2,-14072
  81b56c:	18800d15 	stw	r2,52(r3)
  81b570:	e0bff917 	ldw	r2,-28(fp)
  81b574:	10000e15 	stw	zero,56(r2)
  81b578:	e0bff917 	ldw	r2,-28(fp)
  81b57c:	10000f15 	stw	zero,60(r2)
  81b580:	e0bff917 	ldw	r2,-28(fp)
  81b584:	10001015 	stw	zero,64(r2)
  81b588:	e0bff917 	ldw	r2,-28(fp)
  81b58c:	10001115 	stw	zero,68(r2)
  81b590:	e0bff917 	ldw	r2,-28(fp)
  81b594:	10001215 	stw	zero,72(r2)
  81b598:	e0bff917 	ldw	r2,-28(fp)
  81b59c:	10001315 	stw	zero,76(r2)
  81b5a0:	e0bff917 	ldw	r2,-28(fp)
  81b5a4:	10001415 	stw	zero,80(r2)
  81b5a8:	e0bff917 	ldw	r2,-28(fp)
  81b5ac:	10001515 	stw	zero,84(r2)
  81b5b0:	e0bff917 	ldw	r2,-28(fp)
  81b5b4:	10001615 	stw	zero,88(r2)
  81b5b8:	e0bff917 	ldw	r2,-28(fp)
  81b5bc:	10001715 	stw	zero,92(r2)
  81b5c0:	e0bff917 	ldw	r2,-28(fp)
  81b5c4:	10001805 	stb	zero,96(r2)
  81b5c8:	e0bff917 	ldw	r2,-28(fp)
  81b5cc:	10801f04 	addi	r2,r2,124
  81b5d0:	10000015 	stw	zero,0(r2)
  81b5d4:	10000115 	stw	zero,4(r2)
  81b5d8:	10000215 	stw	zero,8(r2)
  81b5dc:	10000315 	stw	zero,12(r2)
  81b5e0:	10000415 	stw	zero,16(r2)
  81b5e4:	10000515 	stw	zero,20(r2)
  81b5e8:	10000615 	stw	zero,24(r2)
  81b5ec:	10000715 	stw	zero,28(r2)
  81b5f0:	10000815 	stw	zero,32(r2)
  81b5f4:	e0bff917 	ldw	r2,-28(fp)
  81b5f8:	10002815 	stw	zero,160(r2)
  81b5fc:	e0fff917 	ldw	r3,-28(fp)
  81b600:	00800044 	movi	r2,1
  81b604:	18802915 	stw	r2,164(r3)
  81b608:	18002a15 	stw	zero,168(r3)
  81b60c:	e0fff917 	ldw	r3,-28(fp)
  81b610:	008cc384 	movi	r2,13070
  81b614:	18802b0d 	sth	r2,172(r3)
  81b618:	e0fff917 	ldw	r3,-28(fp)
  81b61c:	00aaf344 	movi	r2,-21555
  81b620:	18802b8d 	sth	r2,174(r3)
  81b624:	e0fff917 	ldw	r3,-28(fp)
  81b628:	00848d04 	movi	r2,4660
  81b62c:	18802c0d 	sth	r2,176(r3)
  81b630:	e0fff917 	ldw	r3,-28(fp)
  81b634:	00b99b44 	movi	r2,-6547
  81b638:	18802c8d 	sth	r2,178(r3)
  81b63c:	e0fff917 	ldw	r3,-28(fp)
  81b640:	00b7bb04 	movi	r2,-8468
  81b644:	18802d0d 	sth	r2,180(r3)
  81b648:	e0fff917 	ldw	r3,-28(fp)
  81b64c:	00800144 	movi	r2,5
  81b650:	18802d8d 	sth	r2,182(r3)
  81b654:	e0fff917 	ldw	r3,-28(fp)
  81b658:	008002c4 	movi	r2,11
  81b65c:	18802e0d 	sth	r2,184(r3)
  81b660:	e0bff917 	ldw	r2,-28(fp)
  81b664:	10002f15 	stw	zero,188(r2)
  81b668:	e0bff917 	ldw	r2,-28(fp)
  81b66c:	10003015 	stw	zero,192(r2)
  81b670:	e0bff917 	ldw	r2,-28(fp)
  81b674:	10003115 	stw	zero,196(r2)
  81b678:	e0bff917 	ldw	r2,-28(fp)
  81b67c:	10003215 	stw	zero,200(r2)
  81b680:	e0bff917 	ldw	r2,-28(fp)
  81b684:	10003315 	stw	zero,204(r2)
  81b688:	e0bff917 	ldw	r2,-28(fp)
  81b68c:	10003415 	stw	zero,208(r2)
  81b690:	e0bff917 	ldw	r2,-28(fp)
  81b694:	10003e15 	stw	zero,248(r2)
  81b698:	e0bff917 	ldw	r2,-28(fp)
  81b69c:	10003f15 	stw	zero,252(r2)
  81b6a0:	e0bff917 	ldw	r2,-28(fp)
  81b6a4:	10004015 	stw	zero,256(r2)
  81b6a8:	e0bff917 	ldw	r2,-28(fp)
  81b6ac:	10004115 	stw	zero,260(r2)
  81b6b0:	e0bff917 	ldw	r2,-28(fp)
  81b6b4:	10004215 	stw	zero,264(r2)
  81b6b8:	e0bff917 	ldw	r2,-28(fp)
  81b6bc:	10004315 	stw	zero,268(r2)
  81b6c0:	e0bff917 	ldw	r2,-28(fp)
  81b6c4:	10004415 	stw	zero,272(r2)
  81b6c8:	e0bff917 	ldw	r2,-28(fp)
  81b6cc:	10004515 	stw	zero,276(r2)
  81b6d0:	e0bff917 	ldw	r2,-28(fp)
  81b6d4:	10004615 	stw	zero,280(r2)
  81b6d8:	e0bff917 	ldw	r2,-28(fp)
  81b6dc:	10004715 	stw	zero,284(r2)
  81b6e0:	e0bff917 	ldw	r2,-28(fp)
  81b6e4:	10003505 	stb	zero,212(r2)
  81b6e8:	e0bff917 	ldw	r2,-28(fp)
  81b6ec:	10003705 	stb	zero,220(r2)
  81b6f0:	e0bff917 	ldw	r2,-28(fp)
  81b6f4:	10003d15 	stw	zero,244(r2)
  81b6f8:	e0bff917 	ldw	r2,-28(fp)
  81b6fc:	10005215 	stw	zero,328(r2)
  81b700:	e0bff917 	ldw	r2,-28(fp)
  81b704:	10005315 	stw	zero,332(r2)
  81b708:	e0bff917 	ldw	r2,-28(fp)
  81b70c:	10005415 	stw	zero,336(r2)
  81b710:	e0bff917 	ldw	r2,-28(fp)
  81b714:	10005515 	stw	zero,340(r2)
  81b718:	e0bff917 	ldw	r2,-28(fp)
  81b71c:	1000b515 	stw	zero,724(r2)
  81b720:	e0bff917 	ldw	r2,-28(fp)
  81b724:	10007515 	stw	zero,468(r2)
  81b728:	e0bff917 	ldw	r2,-28(fp)
  81b72c:	1000b715 	stw	zero,732(r2)
  81b730:	e0bff917 	ldw	r2,-28(fp)
  81b734:	1000b815 	stw	zero,736(r2)
  81b738:	e0bff917 	ldw	r2,-28(fp)
  81b73c:	1000b915 	stw	zero,740(r2)
  81b740:	e0bff917 	ldw	r2,-28(fp)
  81b744:	1000ba15 	stw	zero,744(r2)
  81b748:	e0bff917 	ldw	r2,-28(fp)
  81b74c:	1080bb04 	addi	r2,r2,748
  81b750:	1009883a 	mov	r4,r2
  81b754:	01804504 	movi	r6,276
  81b758:	000b883a 	mov	r5,zero
  81b75c:	0808f300 	call	808f30 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  81b760:	e0bff917 	ldw	r2,-28(fp)
  81b764:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  81b768:	e0bffb17 	ldw	r2,-20(fp)
  81b76c:	10bff304 	addi	r2,r2,-52
  81b770:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  81b774:	e0bffa17 	ldw	r2,-24(fp)
  81b778:	10c00c04 	addi	r3,r2,48
  81b77c:	e0bffc17 	ldw	r2,-16(fp)
  81b780:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  81b784:	e0bffa17 	ldw	r2,-24(fp)
  81b788:	10c00b04 	addi	r3,r2,44
  81b78c:	e0bffd17 	ldw	r2,-12(fp)
  81b790:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  81b794:	e0bffa17 	ldw	r2,-24(fp)
  81b798:	10c00a04 	addi	r3,r2,40
  81b79c:	e0bff917 	ldw	r2,-28(fp)
  81b7a0:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  81b7a4:	008020b4 	movhi	r2,130
  81b7a8:	10ad2704 	addi	r2,r2,-19300
  81b7ac:	10c00104 	addi	r3,r2,4
  81b7b0:	e0bffa17 	ldw	r2,-24(fp)
  81b7b4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  81b7b8:	e0bffa17 	ldw	r2,-24(fp)
}
  81b7bc:	e037883a 	mov	sp,fp
  81b7c0:	dfc00117 	ldw	ra,4(sp)
  81b7c4:	df000017 	ldw	fp,0(sp)
  81b7c8:	dec00204 	addi	sp,sp,8
  81b7cc:	f800283a 	ret

0081b7d0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  81b7d0:	defffe04 	addi	sp,sp,-8
  81b7d4:	df000115 	stw	fp,4(sp)
  81b7d8:	df000104 	addi	fp,sp,4
  81b7dc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  81b7e0:	e037883a 	mov	sp,fp
  81b7e4:	df000017 	ldw	fp,0(sp)
  81b7e8:	dec00104 	addi	sp,sp,4
  81b7ec:	f800283a 	ret

0081b7f0 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  81b7f0:	defffe04 	addi	sp,sp,-8
  81b7f4:	df000115 	stw	fp,4(sp)
  81b7f8:	df000104 	addi	fp,sp,4
  81b7fc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  81b800:	e037883a 	mov	sp,fp
  81b804:	df000017 	ldw	fp,0(sp)
  81b808:	dec00104 	addi	sp,sp,4
  81b80c:	f800283a 	ret

0081b810 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  81b810:	deffff04 	addi	sp,sp,-4
  81b814:	df000015 	stw	fp,0(sp)
  81b818:	d839883a 	mov	fp,sp
}
  81b81c:	e037883a 	mov	sp,fp
  81b820:	df000017 	ldw	fp,0(sp)
  81b824:	dec00104 	addi	sp,sp,4
  81b828:	f800283a 	ret

0081b82c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  81b82c:	deffff04 	addi	sp,sp,-4
  81b830:	df000015 	stw	fp,0(sp)
  81b834:	d839883a 	mov	fp,sp
}
  81b838:	e037883a 	mov	sp,fp
  81b83c:	df000017 	ldw	fp,0(sp)
  81b840:	dec00104 	addi	sp,sp,4
  81b844:	f800283a 	ret

0081b848 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  81b848:	deffff04 	addi	sp,sp,-4
  81b84c:	df000015 	stw	fp,0(sp)
  81b850:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  81b854:	e037883a 	mov	sp,fp
  81b858:	df000017 	ldw	fp,0(sp)
  81b85c:	dec00104 	addi	sp,sp,4
  81b860:	f800283a 	ret

0081b864 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  81b864:	deffff04 	addi	sp,sp,-4
  81b868:	df000015 	stw	fp,0(sp)
  81b86c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  81b870:	e037883a 	mov	sp,fp
  81b874:	df000017 	ldw	fp,0(sp)
  81b878:	dec00104 	addi	sp,sp,4
  81b87c:	f800283a 	ret

0081b880 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  81b880:	deffff04 	addi	sp,sp,-4
  81b884:	df000015 	stw	fp,0(sp)
  81b888:	d839883a 	mov	fp,sp
}
  81b88c:	e037883a 	mov	sp,fp
  81b890:	df000017 	ldw	fp,0(sp)
  81b894:	dec00104 	addi	sp,sp,4
  81b898:	f800283a 	ret

0081b89c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  81b89c:	deffff04 	addi	sp,sp,-4
  81b8a0:	df000015 	stw	fp,0(sp)
  81b8a4:	d839883a 	mov	fp,sp
}
  81b8a8:	e037883a 	mov	sp,fp
  81b8ac:	df000017 	ldw	fp,0(sp)
  81b8b0:	dec00104 	addi	sp,sp,4
  81b8b4:	f800283a 	ret

0081b8b8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  81b8b8:	defffe04 	addi	sp,sp,-8
  81b8bc:	df000115 	stw	fp,4(sp)
  81b8c0:	df000104 	addi	fp,sp,4
  81b8c4:	e13fff15 	stw	r4,-4(fp)
}
  81b8c8:	e037883a 	mov	sp,fp
  81b8cc:	df000017 	ldw	fp,0(sp)
  81b8d0:	dec00104 	addi	sp,sp,4
  81b8d4:	f800283a 	ret

0081b8d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81b8d8:	defffa04 	addi	sp,sp,-24
  81b8dc:	dfc00515 	stw	ra,20(sp)
  81b8e0:	df000415 	stw	fp,16(sp)
  81b8e4:	df000404 	addi	fp,sp,16
  81b8e8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81b8ec:	008020b4 	movhi	r2,130
  81b8f0:	10b8f504 	addi	r2,r2,-7212
  81b8f4:	10800017 	ldw	r2,0(r2)
  81b8f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81b8fc:	00003306 	br	81b9cc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  81b900:	e0bffd17 	ldw	r2,-12(fp)
  81b904:	11000217 	ldw	r4,8(r2)
  81b908:	0803b440 	call	803b44 <strlen>
  81b90c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  81b910:	e0bffd17 	ldw	r2,-12(fp)
  81b914:	10c00217 	ldw	r3,8(r2)
  81b918:	e0bffc17 	ldw	r2,-16(fp)
  81b91c:	1885883a 	add	r2,r3,r2
  81b920:	10bfffc4 	addi	r2,r2,-1
  81b924:	10800003 	ldbu	r2,0(r2)
  81b928:	10803fcc 	andi	r2,r2,255
  81b92c:	1080201c 	xori	r2,r2,128
  81b930:	10bfe004 	addi	r2,r2,-128
  81b934:	10800bd8 	cmpnei	r2,r2,47
  81b938:	1000031e 	bne	r2,zero,81b948 <alt_find_file+0x70>
    {
      len -= 1;
  81b93c:	e0bffc17 	ldw	r2,-16(fp)
  81b940:	10bfffc4 	addi	r2,r2,-1
  81b944:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81b948:	e0bffc17 	ldw	r2,-16(fp)
  81b94c:	1007883a 	mov	r3,r2
  81b950:	e0bffe17 	ldw	r2,-8(fp)
  81b954:	1885883a 	add	r2,r3,r2
  81b958:	10800003 	ldbu	r2,0(r2)
  81b95c:	10803fcc 	andi	r2,r2,255
  81b960:	1080201c 	xori	r2,r2,128
  81b964:	10bfe004 	addi	r2,r2,-128
  81b968:	10800be0 	cmpeqi	r2,r2,47
  81b96c:	10000a1e 	bne	r2,zero,81b998 <alt_find_file+0xc0>
  81b970:	e0bffc17 	ldw	r2,-16(fp)
  81b974:	1007883a 	mov	r3,r2
  81b978:	e0bffe17 	ldw	r2,-8(fp)
  81b97c:	1885883a 	add	r2,r3,r2
  81b980:	10800003 	ldbu	r2,0(r2)
  81b984:	10803fcc 	andi	r2,r2,255
  81b988:	1080201c 	xori	r2,r2,128
  81b98c:	10bfe004 	addi	r2,r2,-128
  81b990:	1004c03a 	cmpne	r2,r2,zero
  81b994:	10000a1e 	bne	r2,zero,81b9c0 <alt_find_file+0xe8>
  81b998:	e0bffd17 	ldw	r2,-12(fp)
  81b99c:	11000217 	ldw	r4,8(r2)
  81b9a0:	e1bffc17 	ldw	r6,-16(fp)
  81b9a4:	e17ffe17 	ldw	r5,-8(fp)
  81b9a8:	081bbc80 	call	81bbc8 <memcmp>
  81b9ac:	1004c03a 	cmpne	r2,r2,zero
  81b9b0:	1000031e 	bne	r2,zero,81b9c0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81b9b4:	e0bffd17 	ldw	r2,-12(fp)
  81b9b8:	e0bfff15 	stw	r2,-4(fp)
  81b9bc:	00000806 	br	81b9e0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  81b9c0:	e0bffd17 	ldw	r2,-12(fp)
  81b9c4:	10800017 	ldw	r2,0(r2)
  81b9c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81b9cc:	00c020b4 	movhi	r3,130
  81b9d0:	18f8f504 	addi	r3,r3,-7212
  81b9d4:	e0bffd17 	ldw	r2,-12(fp)
  81b9d8:	10ffc91e 	bne	r2,r3,81b900 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81b9dc:	e03fff15 	stw	zero,-4(fp)
  81b9e0:	e0bfff17 	ldw	r2,-4(fp)
}
  81b9e4:	e037883a 	mov	sp,fp
  81b9e8:	dfc00117 	ldw	ra,4(sp)
  81b9ec:	df000017 	ldw	fp,0(sp)
  81b9f0:	dec00204 	addi	sp,sp,8
  81b9f4:	f800283a 	ret

0081b9f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81b9f8:	defff804 	addi	sp,sp,-32
  81b9fc:	dfc00715 	stw	ra,28(sp)
  81ba00:	df000615 	stw	fp,24(sp)
  81ba04:	df000604 	addi	fp,sp,24
  81ba08:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81ba0c:	00bffa04 	movi	r2,-24
  81ba10:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  81ba14:	008020b4 	movhi	r2,130
  81ba18:	10801404 	addi	r2,r2,80
  81ba1c:	10800017 	ldw	r2,0(r2)
  81ba20:	e0bffa15 	stw	r2,-24(fp)
  81ba24:	e03ffb0d 	sth	zero,-20(fp)
  81ba28:	e17ffb0b 	ldhu	r5,-20(fp)
  81ba2c:	e1bffe04 	addi	r6,fp,-8
  81ba30:	e13ffa17 	ldw	r4,-24(fp)
  81ba34:	08124e80 	call	8124e8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81ba38:	e03ffd15 	stw	zero,-12(fp)
  81ba3c:	00001e06 	br	81bab8 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  81ba40:	e0bffd17 	ldw	r2,-12(fp)
  81ba44:	00c020b4 	movhi	r3,130
  81ba48:	18f45204 	addi	r3,r3,-11960
  81ba4c:	10800324 	muli	r2,r2,12
  81ba50:	10c5883a 	add	r2,r2,r3
  81ba54:	10800017 	ldw	r2,0(r2)
  81ba58:	1004c03a 	cmpne	r2,r2,zero
  81ba5c:	1000131e 	bne	r2,zero,81baac <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  81ba60:	e0bffd17 	ldw	r2,-12(fp)
  81ba64:	00c020b4 	movhi	r3,130
  81ba68:	18f45204 	addi	r3,r3,-11960
  81ba6c:	10800324 	muli	r2,r2,12
  81ba70:	10c7883a 	add	r3,r2,r3
  81ba74:	e0bfff17 	ldw	r2,-4(fp)
  81ba78:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  81ba7c:	008020b4 	movhi	r2,130
  81ba80:	10b8f904 	addi	r2,r2,-7196
  81ba84:	10c00017 	ldw	r3,0(r2)
  81ba88:	e0bffd17 	ldw	r2,-12(fp)
  81ba8c:	1880040e 	bge	r3,r2,81baa0 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  81ba90:	00c020b4 	movhi	r3,130
  81ba94:	18f8f904 	addi	r3,r3,-7196
  81ba98:	e0bffd17 	ldw	r2,-12(fp)
  81ba9c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  81baa0:	e0bffd17 	ldw	r2,-12(fp)
  81baa4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  81baa8:	00000606 	br	81bac4 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81baac:	e0bffd17 	ldw	r2,-12(fp)
  81bab0:	10800044 	addi	r2,r2,1
  81bab4:	e0bffd15 	stw	r2,-12(fp)
  81bab8:	e0bffd17 	ldw	r2,-12(fp)
  81babc:	10800810 	cmplti	r2,r2,32
  81bac0:	103fdf1e 	bne	r2,zero,81ba40 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  81bac4:	008020b4 	movhi	r2,130
  81bac8:	10801404 	addi	r2,r2,80
  81bacc:	11000017 	ldw	r4,0(r2)
  81bad0:	08128e00 	call	8128e0 <OSSemPost>

  return rc;
  81bad4:	e0bffc17 	ldw	r2,-16(fp)
}
  81bad8:	e037883a 	mov	sp,fp
  81badc:	dfc00117 	ldw	ra,4(sp)
  81bae0:	df000017 	ldw	fp,0(sp)
  81bae4:	dec00204 	addi	sp,sp,8
  81bae8:	f800283a 	ret

0081baec <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81baec:	defffb04 	addi	sp,sp,-20
  81baf0:	df000415 	stw	fp,16(sp)
  81baf4:	df000404 	addi	fp,sp,16
  81baf8:	e13ffe15 	stw	r4,-8(fp)
  81bafc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  81bb00:	e0bfff17 	ldw	r2,-4(fp)
  81bb04:	10840070 	cmpltui	r2,r2,4097
  81bb08:	1000021e 	bne	r2,zero,81bb14 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81bb0c:	00840004 	movi	r2,4096
  81bb10:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  81bb14:	e0fffe17 	ldw	r3,-8(fp)
  81bb18:	e0bfff17 	ldw	r2,-4(fp)
  81bb1c:	1885883a 	add	r2,r3,r2
  81bb20:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81bb24:	e0bffe17 	ldw	r2,-8(fp)
  81bb28:	e0bffd15 	stw	r2,-12(fp)
  81bb2c:	00000506 	br	81bb44 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  81bb30:	e0bffd17 	ldw	r2,-12(fp)
  81bb34:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81bb38:	e0bffd17 	ldw	r2,-12(fp)
  81bb3c:	10800804 	addi	r2,r2,32
  81bb40:	e0bffd15 	stw	r2,-12(fp)
  81bb44:	e0fffd17 	ldw	r3,-12(fp)
  81bb48:	e0bffc17 	ldw	r2,-16(fp)
  81bb4c:	18bff836 	bltu	r3,r2,81bb30 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  81bb50:	e0bffe17 	ldw	r2,-8(fp)
  81bb54:	108007cc 	andi	r2,r2,31
  81bb58:	1005003a 	cmpeq	r2,r2,zero
  81bb5c:	1000021e 	bne	r2,zero,81bb68 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81bb60:	e0bffd17 	ldw	r2,-12(fp)
  81bb64:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81bb68:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81bb6c:	e037883a 	mov	sp,fp
  81bb70:	df000017 	ldw	fp,0(sp)
  81bb74:	dec00104 	addi	sp,sp,4
  81bb78:	f800283a 	ret

0081bb7c <atexit>:
  81bb7c:	200b883a 	mov	r5,r4
  81bb80:	000d883a 	mov	r6,zero
  81bb84:	0009883a 	mov	r4,zero
  81bb88:	000f883a 	mov	r7,zero
  81bb8c:	081bc3c1 	jmpi	81bc3c <__register_exitproc>

0081bb90 <exit>:
  81bb90:	defffe04 	addi	sp,sp,-8
  81bb94:	000b883a 	mov	r5,zero
  81bb98:	dc000015 	stw	r16,0(sp)
  81bb9c:	dfc00115 	stw	ra,4(sp)
  81bba0:	2021883a 	mov	r16,r4
  81bba4:	081bd740 	call	81bd74 <__call_exitprocs>
  81bba8:	008020b4 	movhi	r2,130
  81bbac:	10b8f004 	addi	r2,r2,-7232
  81bbb0:	11000017 	ldw	r4,0(r2)
  81bbb4:	20800f17 	ldw	r2,60(r4)
  81bbb8:	10000126 	beq	r2,zero,81bbc0 <exit+0x30>
  81bbbc:	103ee83a 	callr	r2
  81bbc0:	8009883a 	mov	r4,r16
  81bbc4:	081bf640 	call	81bf64 <_exit>

0081bbc8 <memcmp>:
  81bbc8:	00c000c4 	movi	r3,3
  81bbcc:	1980032e 	bgeu	r3,r6,81bbdc <memcmp+0x14>
  81bbd0:	2144b03a 	or	r2,r4,r5
  81bbd4:	10c4703a 	and	r2,r2,r3
  81bbd8:	10000f26 	beq	r2,zero,81bc18 <memcmp+0x50>
  81bbdc:	31ffffc4 	addi	r7,r6,-1
  81bbe0:	3000061e 	bne	r6,zero,81bbfc <memcmp+0x34>
  81bbe4:	00000a06 	br	81bc10 <memcmp+0x48>
  81bbe8:	39ffffc4 	addi	r7,r7,-1
  81bbec:	00bfffc4 	movi	r2,-1
  81bbf0:	21000044 	addi	r4,r4,1
  81bbf4:	29400044 	addi	r5,r5,1
  81bbf8:	38800526 	beq	r7,r2,81bc10 <memcmp+0x48>
  81bbfc:	20c00003 	ldbu	r3,0(r4)
  81bc00:	28800003 	ldbu	r2,0(r5)
  81bc04:	18bff826 	beq	r3,r2,81bbe8 <memcmp+0x20>
  81bc08:	1885c83a 	sub	r2,r3,r2
  81bc0c:	f800283a 	ret
  81bc10:	0005883a 	mov	r2,zero
  81bc14:	f800283a 	ret
  81bc18:	180f883a 	mov	r7,r3
  81bc1c:	20c00017 	ldw	r3,0(r4)
  81bc20:	28800017 	ldw	r2,0(r5)
  81bc24:	18bfed1e 	bne	r3,r2,81bbdc <memcmp+0x14>
  81bc28:	31bfff04 	addi	r6,r6,-4
  81bc2c:	21000104 	addi	r4,r4,4
  81bc30:	29400104 	addi	r5,r5,4
  81bc34:	39bff936 	bltu	r7,r6,81bc1c <memcmp+0x54>
  81bc38:	003fe806 	br	81bbdc <memcmp+0x14>

0081bc3c <__register_exitproc>:
  81bc3c:	defffa04 	addi	sp,sp,-24
  81bc40:	008020b4 	movhi	r2,130
  81bc44:	10b8f004 	addi	r2,r2,-7232
  81bc48:	dc000015 	stw	r16,0(sp)
  81bc4c:	14000017 	ldw	r16,0(r2)
  81bc50:	dd000415 	stw	r20,16(sp)
  81bc54:	2829883a 	mov	r20,r5
  81bc58:	81405217 	ldw	r5,328(r16)
  81bc5c:	dcc00315 	stw	r19,12(sp)
  81bc60:	dc800215 	stw	r18,8(sp)
  81bc64:	dc400115 	stw	r17,4(sp)
  81bc68:	dfc00515 	stw	ra,20(sp)
  81bc6c:	2023883a 	mov	r17,r4
  81bc70:	3027883a 	mov	r19,r6
  81bc74:	3825883a 	mov	r18,r7
  81bc78:	28002526 	beq	r5,zero,81bd10 <__register_exitproc+0xd4>
  81bc7c:	29000117 	ldw	r4,4(r5)
  81bc80:	008007c4 	movi	r2,31
  81bc84:	11002716 	blt	r2,r4,81bd24 <__register_exitproc+0xe8>
  81bc88:	8800101e 	bne	r17,zero,81bccc <__register_exitproc+0x90>
  81bc8c:	2105883a 	add	r2,r4,r4
  81bc90:	1085883a 	add	r2,r2,r2
  81bc94:	20c00044 	addi	r3,r4,1
  81bc98:	1145883a 	add	r2,r2,r5
  81bc9c:	0009883a 	mov	r4,zero
  81bca0:	15000215 	stw	r20,8(r2)
  81bca4:	28c00115 	stw	r3,4(r5)
  81bca8:	2005883a 	mov	r2,r4
  81bcac:	dfc00517 	ldw	ra,20(sp)
  81bcb0:	dd000417 	ldw	r20,16(sp)
  81bcb4:	dcc00317 	ldw	r19,12(sp)
  81bcb8:	dc800217 	ldw	r18,8(sp)
  81bcbc:	dc400117 	ldw	r17,4(sp)
  81bcc0:	dc000017 	ldw	r16,0(sp)
  81bcc4:	dec00604 	addi	sp,sp,24
  81bcc8:	f800283a 	ret
  81bccc:	29802204 	addi	r6,r5,136
  81bcd0:	00800044 	movi	r2,1
  81bcd4:	110e983a 	sll	r7,r2,r4
  81bcd8:	30c04017 	ldw	r3,256(r6)
  81bcdc:	2105883a 	add	r2,r4,r4
  81bce0:	1085883a 	add	r2,r2,r2
  81bce4:	1185883a 	add	r2,r2,r6
  81bce8:	19c6b03a 	or	r3,r3,r7
  81bcec:	14802015 	stw	r18,128(r2)
  81bcf0:	14c00015 	stw	r19,0(r2)
  81bcf4:	00800084 	movi	r2,2
  81bcf8:	30c04015 	stw	r3,256(r6)
  81bcfc:	88bfe31e 	bne	r17,r2,81bc8c <__register_exitproc+0x50>
  81bd00:	30804117 	ldw	r2,260(r6)
  81bd04:	11c4b03a 	or	r2,r2,r7
  81bd08:	30804115 	stw	r2,260(r6)
  81bd0c:	003fdf06 	br	81bc8c <__register_exitproc+0x50>
  81bd10:	008020f4 	movhi	r2,131
  81bd14:	1098e104 	addi	r2,r2,25476
  81bd18:	100b883a 	mov	r5,r2
  81bd1c:	80805215 	stw	r2,328(r16)
  81bd20:	003fd606 	br	81bc7c <__register_exitproc+0x40>
  81bd24:	00800034 	movhi	r2,0
  81bd28:	10800004 	addi	r2,r2,0
  81bd2c:	1000021e 	bne	r2,zero,81bd38 <__register_exitproc+0xfc>
  81bd30:	013fffc4 	movi	r4,-1
  81bd34:	003fdc06 	br	81bca8 <__register_exitproc+0x6c>
  81bd38:	01006404 	movi	r4,400
  81bd3c:	103ee83a 	callr	r2
  81bd40:	1007883a 	mov	r3,r2
  81bd44:	103ffa26 	beq	r2,zero,81bd30 <__register_exitproc+0xf4>
  81bd48:	80805217 	ldw	r2,328(r16)
  81bd4c:	180b883a 	mov	r5,r3
  81bd50:	18000115 	stw	zero,4(r3)
  81bd54:	18800015 	stw	r2,0(r3)
  81bd58:	80c05215 	stw	r3,328(r16)
  81bd5c:	18006215 	stw	zero,392(r3)
  81bd60:	18006315 	stw	zero,396(r3)
  81bd64:	0009883a 	mov	r4,zero
  81bd68:	883fc826 	beq	r17,zero,81bc8c <__register_exitproc+0x50>
  81bd6c:	003fd706 	br	81bccc <__register_exitproc+0x90>

0081bd70 <register_fini>:
  81bd70:	f800283a 	ret

0081bd74 <__call_exitprocs>:
  81bd74:	008020b4 	movhi	r2,130
  81bd78:	10b8f004 	addi	r2,r2,-7232
  81bd7c:	10800017 	ldw	r2,0(r2)
  81bd80:	defff304 	addi	sp,sp,-52
  81bd84:	df000b15 	stw	fp,44(sp)
  81bd88:	d8800115 	stw	r2,4(sp)
  81bd8c:	00800034 	movhi	r2,0
  81bd90:	10800004 	addi	r2,r2,0
  81bd94:	1005003a 	cmpeq	r2,r2,zero
  81bd98:	d8800215 	stw	r2,8(sp)
  81bd9c:	d8800117 	ldw	r2,4(sp)
  81bda0:	dd400815 	stw	r21,32(sp)
  81bda4:	dd000715 	stw	r20,28(sp)
  81bda8:	10805204 	addi	r2,r2,328
  81bdac:	dfc00c15 	stw	ra,48(sp)
  81bdb0:	ddc00a15 	stw	r23,40(sp)
  81bdb4:	dd800915 	stw	r22,36(sp)
  81bdb8:	dcc00615 	stw	r19,24(sp)
  81bdbc:	dc800515 	stw	r18,20(sp)
  81bdc0:	dc400415 	stw	r17,16(sp)
  81bdc4:	dc000315 	stw	r16,12(sp)
  81bdc8:	282b883a 	mov	r21,r5
  81bdcc:	2039883a 	mov	fp,r4
  81bdd0:	d8800015 	stw	r2,0(sp)
  81bdd4:	2829003a 	cmpeq	r20,r5,zero
  81bdd8:	d8800117 	ldw	r2,4(sp)
  81bddc:	14405217 	ldw	r17,328(r2)
  81bde0:	88001026 	beq	r17,zero,81be24 <__call_exitprocs+0xb0>
  81bde4:	ddc00017 	ldw	r23,0(sp)
  81bde8:	88800117 	ldw	r2,4(r17)
  81bdec:	8c802204 	addi	r18,r17,136
  81bdf0:	143fffc4 	addi	r16,r2,-1
  81bdf4:	80000916 	blt	r16,zero,81be1c <__call_exitprocs+0xa8>
  81bdf8:	05bfffc4 	movi	r22,-1
  81bdfc:	a000151e 	bne	r20,zero,81be54 <__call_exitprocs+0xe0>
  81be00:	8409883a 	add	r4,r16,r16
  81be04:	2105883a 	add	r2,r4,r4
  81be08:	1485883a 	add	r2,r2,r18
  81be0c:	10c02017 	ldw	r3,128(r2)
  81be10:	a8c01126 	beq	r21,r3,81be58 <__call_exitprocs+0xe4>
  81be14:	843fffc4 	addi	r16,r16,-1
  81be18:	85bff81e 	bne	r16,r22,81bdfc <__call_exitprocs+0x88>
  81be1c:	d8800217 	ldw	r2,8(sp)
  81be20:	10003126 	beq	r2,zero,81bee8 <__call_exitprocs+0x174>
  81be24:	dfc00c17 	ldw	ra,48(sp)
  81be28:	df000b17 	ldw	fp,44(sp)
  81be2c:	ddc00a17 	ldw	r23,40(sp)
  81be30:	dd800917 	ldw	r22,36(sp)
  81be34:	dd400817 	ldw	r21,32(sp)
  81be38:	dd000717 	ldw	r20,28(sp)
  81be3c:	dcc00617 	ldw	r19,24(sp)
  81be40:	dc800517 	ldw	r18,20(sp)
  81be44:	dc400417 	ldw	r17,16(sp)
  81be48:	dc000317 	ldw	r16,12(sp)
  81be4c:	dec00d04 	addi	sp,sp,52
  81be50:	f800283a 	ret
  81be54:	8409883a 	add	r4,r16,r16
  81be58:	88c00117 	ldw	r3,4(r17)
  81be5c:	2105883a 	add	r2,r4,r4
  81be60:	1445883a 	add	r2,r2,r17
  81be64:	18ffffc4 	addi	r3,r3,-1
  81be68:	11800217 	ldw	r6,8(r2)
  81be6c:	1c001526 	beq	r3,r16,81bec4 <__call_exitprocs+0x150>
  81be70:	10000215 	stw	zero,8(r2)
  81be74:	303fe726 	beq	r6,zero,81be14 <__call_exitprocs+0xa0>
  81be78:	00c00044 	movi	r3,1
  81be7c:	1c06983a 	sll	r3,r3,r16
  81be80:	90804017 	ldw	r2,256(r18)
  81be84:	8cc00117 	ldw	r19,4(r17)
  81be88:	1884703a 	and	r2,r3,r2
  81be8c:	10001426 	beq	r2,zero,81bee0 <__call_exitprocs+0x16c>
  81be90:	90804117 	ldw	r2,260(r18)
  81be94:	1884703a 	and	r2,r3,r2
  81be98:	10000c1e 	bne	r2,zero,81becc <__call_exitprocs+0x158>
  81be9c:	2105883a 	add	r2,r4,r4
  81bea0:	1485883a 	add	r2,r2,r18
  81bea4:	11400017 	ldw	r5,0(r2)
  81bea8:	e009883a 	mov	r4,fp
  81beac:	303ee83a 	callr	r6
  81beb0:	88800117 	ldw	r2,4(r17)
  81beb4:	98bfc81e 	bne	r19,r2,81bdd8 <__call_exitprocs+0x64>
  81beb8:	b8800017 	ldw	r2,0(r23)
  81bebc:	147fd526 	beq	r2,r17,81be14 <__call_exitprocs+0xa0>
  81bec0:	003fc506 	br	81bdd8 <__call_exitprocs+0x64>
  81bec4:	8c000115 	stw	r16,4(r17)
  81bec8:	003fea06 	br	81be74 <__call_exitprocs+0x100>
  81becc:	2105883a 	add	r2,r4,r4
  81bed0:	1485883a 	add	r2,r2,r18
  81bed4:	11000017 	ldw	r4,0(r2)
  81bed8:	303ee83a 	callr	r6
  81bedc:	003ff406 	br	81beb0 <__call_exitprocs+0x13c>
  81bee0:	303ee83a 	callr	r6
  81bee4:	003ff206 	br	81beb0 <__call_exitprocs+0x13c>
  81bee8:	88800117 	ldw	r2,4(r17)
  81beec:	1000081e 	bne	r2,zero,81bf10 <__call_exitprocs+0x19c>
  81bef0:	89000017 	ldw	r4,0(r17)
  81bef4:	20000726 	beq	r4,zero,81bf14 <__call_exitprocs+0x1a0>
  81bef8:	b9000015 	stw	r4,0(r23)
  81befc:	8809883a 	mov	r4,r17
  81bf00:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  81bf04:	bc400017 	ldw	r17,0(r23)
  81bf08:	883fb71e 	bne	r17,zero,81bde8 <__call_exitprocs+0x74>
  81bf0c:	003fc506 	br	81be24 <__call_exitprocs+0xb0>
  81bf10:	89000017 	ldw	r4,0(r17)
  81bf14:	882f883a 	mov	r23,r17
  81bf18:	2023883a 	mov	r17,r4
  81bf1c:	883fb21e 	bne	r17,zero,81bde8 <__call_exitprocs+0x74>
  81bf20:	003fc006 	br	81be24 <__call_exitprocs+0xb0>

0081bf24 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  81bf24:	defffd04 	addi	sp,sp,-12
  81bf28:	df000215 	stw	fp,8(sp)
  81bf2c:	df000204 	addi	fp,sp,8
  81bf30:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  81bf34:	e0bfff17 	ldw	r2,-4(fp)
  81bf38:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81bf3c:	e0bffe17 	ldw	r2,-8(fp)
  81bf40:	1005003a 	cmpeq	r2,r2,zero
  81bf44:	1000021e 	bne	r2,zero,81bf50 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  81bf48:	002af070 	cmpltui	zero,zero,43969
  81bf4c:	00000106 	br	81bf54 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  81bf50:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  81bf54:	e037883a 	mov	sp,fp
  81bf58:	df000017 	ldw	fp,0(sp)
  81bf5c:	dec00104 	addi	sp,sp,4
  81bf60:	f800283a 	ret

0081bf64 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81bf64:	defffd04 	addi	sp,sp,-12
  81bf68:	dfc00215 	stw	ra,8(sp)
  81bf6c:	df000115 	stw	fp,4(sp)
  81bf70:	df000104 	addi	fp,sp,4
  81bf74:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81bf78:	008020b4 	movhi	r2,130
  81bf7c:	10801c44 	addi	r2,r2,113
  81bf80:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  81bf84:	e13fff17 	ldw	r4,-4(fp)
  81bf88:	081bf240 	call	81bf24 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81bf8c:	003fff06 	br	81bf8c <_exit+0x28>
  81bf90:	0081bd70 	cmpltui	r2,zero,1781
