
test_new_dtw.elf:     file format elf32-littlenios2
test_new_dtw.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001a0

Program Header:
    LOAD off    0x00001020 vaddr 0x01904020 paddr 0x00800000 align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags r-x
    LOAD off    0x000021a0 vaddr 0x008001a0 paddr 0x008001a0 align 2**12
         filesz 0x00021d98 memsz 0x00021d98 flags r-x
    LOAD off    0x00023f38 vaddr 0x00821f38 paddr 0x00823a78 align 2**12
         filesz 0x00001b40 memsz 0x00001b40 flags rw-
    LOAD off    0x000265b8 vaddr 0x008255b8 paddr 0x008255b8 align 2**12
         filesz 0x00000000 memsz 0x0000557c flags rw-
    LOAD off    0x00026000 vaddr 0x01904000 paddr 0x01904000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01904000  01904000  00026000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  01904020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0002141c  008001a0  008001a0  000021a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000097c  008215bc  008215bc  000235bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b40  00821f38  00823a78  00023f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000557c  008255b8  008255b8  000265b8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00026020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000016b8  00000000  00000000  00026048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002ca1  00000000  00000000  00027700  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003c963  00000000  00000000  0002a3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000dd55  00000000  00000000  00066d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00028ec6  00000000  00000000  00074a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003598  00000000  00000000  0009d920  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003a05  00000000  00000000  000a0eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000141ca  00000000  00000000  000a48bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000b8a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001148  00000000  00000000  000b8a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000bf8d1  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000bf8d7  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000bf8e3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000bf8e4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000bf8e5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000bf8e9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000bf8ed  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000bf8f1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000bf8fc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000bf907  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  000bf912  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003e  00000000  00000000  000bf91f  2**0
                  CONTENTS, READONLY
 29 .jdi          00005269  00000000  00000000  000bf95d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006bbce  00000000  00000000  000c4bc6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01904000 l    d  .entry	00000000 .entry
01904020 l    d  .exceptions	00000000 .exceptions
008001a0 l    d  .text	00000000 .text
008215bc l    d  .rodata	00000000 .rodata
00821f38 l    d  .rwdata	00000000 .rwdata
008255b8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001d8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 dtw.c
00000000 l    df *ABS*	00000000 test_new_dtw.c
008215bc l     O .rodata	00000190 C.13.2933
00000000 l    df *ABS*	00000000 stubs.c
00000000 l    df *ABS*	00000000 s_atan.c
008217b8 l     O .rodata	00000020 atanhi
008217d8 l     O .rodata	00000020 atanlo
00000000 l    df *ABS*	00000000 s_ceil.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 s_ldexp.c
00000000 l    df *ABS*	00000000 s_modf.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 s_tan.c
00000000 l    df *ABS*	00000000 s_tanh.c
00000000 l    df *ABS*	00000000 w_acos.c
00000000 l    df *ABS*	00000000 w_asin.c
00000000 l    df *ABS*	00000000 w_atan2.c
00000000 l    df *ABS*	00000000 w_cosh.c
00000000 l    df *ABS*	00000000 w_exp.c
00000000 l    df *ABS*	00000000 w_fmod.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 w_log10.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 w_sinh.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 wf_sqrt.c
00000000 l    df *ABS*	00000000 e_acos.c
00000000 l    df *ABS*	00000000 e_asin.c
00000000 l    df *ABS*	00000000 e_atan2.c
00000000 l    df *ABS*	00000000 e_cosh.c
00000000 l    df *ABS*	00000000 e_exp.c
00821864 l     O .rodata	00000010 halF
00821844 l     O .rodata	00000010 ln2HI
00821854 l     O .rodata	00000010 ln2LO
00000000 l    df *ABS*	00000000 e_fmod.c
00821874 l     O .rodata	00000010 Zero
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 e_log10.c
00000000 l    df *ABS*	00000000 e_pow.c
00821884 l     O .rodata	00000010 bp
00821894 l     O .rodata	00000010 dp_l
008218a4 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00821934 l     O .rodata	00000108 two_over_pi
008218b4 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sinh.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00821a3c l     O .rodata	00000010 init_jk
00821a4c l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 k_tan.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 s_expm1.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
00821a8c l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_isnan.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
0080aee4 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080b6f4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080c7c0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00821f38 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080e268 l     F .text	00000058 __sprint_r
00821c32 l     O .rodata	00000010 blanks.3452
00821c22 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
008102e4 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00811d0c l     F .text	00000058 std
00811e18 l     F .text	00000008 __fp_lock
00811e20 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
008239d0 l     O .rwdata	00000004 charset
00821c64 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00821dac l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
008155ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0081564c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00815750 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00815874 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00815954 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00815ab4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00815d00 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008239ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00815f28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
008160ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
008239f0 l     O .rwdata	00000004 lockid
008255ec l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
008239f4 l     O .rwdata	00000004 lockid
008255f4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00817ae4 l     F .text	00000044 OS_InitMisc
00817b28 l     F .text	0000006c OS_InitRdyList
00817c8c l     F .text	000000e0 OS_InitTCBList
00817a08 l     F .text	000000dc OS_InitEventList
00817b94 l     F .text	0000007c OS_InitTaskIdle
00817c10 l     F .text	0000007c OS_InitTaskStat
00817f00 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00819e20 l     F .text	00000110 OS_FlagTaskRdy
00819b78 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
008228f4 l     O .rwdata	0000106c jtag_uart_0
00823960 l     O .rwdata	0000002c character_lcd_0
0082398c l     O .rwdata	0000002c rs232_0
0081e78c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0081ea3c l     F .text	000002c8 altera_avalon_jtag_uart_irq
0081ed04 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0081f51c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00820104 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008202dc l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
008205ec l     F .text	000000f8 alt_file_locked
00820870 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00821398 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0082154c l     F .text	00000040 alt_sim_halt
0081331c g     F .text	00000094 _mprec_log10
00800d40 g     F .text	00000004 asinl
00823a42 g     O .rwdata	00000002 OSTaskNameSize
00813408 g     F .text	00000088 __any_on
0081452c g     F .text	00000070 _isatty_r
00821d84 g     O .rodata	00000028 __mprec_tinytens
00815b14 g     F .text	000000c8 alt_main
0080dab8 g     F .text	000000a0 _puts_r
0080a244 g     F .text	000008f0 expm1
0082a8a4 g     O .bss	00000100 alt_irq
0080175c g     F .text	00000018 fabs
0081459c g     F .text	00000078 _lseek_r
008029a0 g     F .text	00000188 log
0081a714 g     F .text	000000d4 OS_MemInit
008032ac g     F .text	00000130 sqrt
00823a78 g       *ABS*	00000000 __flash_rwdata_start
00802554 g     F .text	00000148 cosh
0081e674 g     F .text	00000064 OSTimeSet
0081f694 g     F .text	00000034 alt_up_character_lcd_send_cmd
0080c214 g     F .text	00000088 __eqdf2
00807cb0 g     F .text	000002f8 __ieee754_sinh
00816660 g     F .text	000006b4 OSEventPendMulti
0082ab34 g       *ABS*	00000000 __alt_heap_start
00820e78 g     F .text	00000020 OSTaskCreateHook
00825680 g     O .bss	00002000 task1_stk
0080da40 g     F .text	00000044 printf
00823a1a g     O .rwdata	00000002 OSMboxEn
00816d68 g     F .text	0000007c OSIntEnter
00800d38 g     F .text	00000004 atan2l
00800bc0 g     F .text	00000004 sqrtl
00813fe4 g     F .text	00000068 __sseek
00811d74 g     F .text	000000a4 __sinit
00823a2a g     O .rwdata	00000002 OSQEn
00812a80 g     F .text	00000084 _setlocale_r
008255b8 g     O .bss	00000004 sem
00811e74 g     F .text	0000009c __sfmoreglue
0081631c g     F .text	000000d0 __malloc_unlock
00820ed4 g     F .text	0000001c OSTaskStatHook
0081fd7c g     F .text	00000090 alt_up_rs232_read_fd
008255fc g     O .bss	00000001 OSLockNesting
0080b37c g     F .text	00000174 __divsf3
00823a68 g     O .rwdata	00000002 OSDataSize
008255fd g     O .bss	00000001 OSRunning
00812d98 g     F .text	000000e0 memmove
00820f0c g     F .text	0000001c OSInitHookBegin
0080036c g     F .text	000003d0 dtw
00823a60 g     O .rwdata	00000002 OSTmrSize
00811e64 g     F .text	00000010 _cleanup
00813490 g     F .text	000000bc _Balloc
00825600 g     O .bss	00000004 OSIdleCtr
0080c324 g     F .text	00000088 __gtdf2
00820b44 g       .text	00000000 OSStartTsk
0080d228 g     F .text	00000010 __errno
0081f618 g     F .text	0000007c get_DDRAM_addr
00818234 g     F .text	000002e0 OS_TCBInit
01904000 g     F .entry	0000000c __reset
00815e94 g     F .text	00000094 times
00800a94 g     F .text	00000004 tanhl
00823a66 g     O .rwdata	00000002 OSTmrWheelTblSize
008013e0 g     F .text	00000214 ceil
00800000 g       *ABS*	00000000 __flash_exceptions_start
00823a06 g     O .rwdata	00000002 OSEventSize
00825604 g     O .bss	00000001 OSPrioHighRdy
008144b8 g     F .text	00000074 _fstat_r
008053ec g     F .text	0000038c __ieee754_fmod
00820e98 g     F .text	00000020 OSTaskDelHook
008255cc g     O .bss	00000004 errno
0080c714 g     F .text	00000038 __make_dp
00801774 g     F .text	00000224 floor
00820b24 g       .text	00000000 OSStartHighRdy
0081ce2c g     F .text	00000200 OSTaskCreateExt
00819694 g     F .text	00000068 OSFlagPendGetFlagsRdy
00823a46 g     O .rwdata	00000002 OSTaskStatStkSize
0080cc94 g     F .text	0000002c __make_fp
008186a0 g     F .text	00000334 OSFlagAccept
0081ae50 g     F .text	000000c8 OSQFlush
0081a7e8 g     F .text	00000154 OSQAccept
008255e4 g     O .bss	00000004 alt_argv
0082b9b8 g       *ABS*	00000000 _gp
0080b0c8 g     F .text	00000070 __subsf3
0081cc58 g     F .text	000001d4 OSTaskCreate
0081c6e4 g     F .text	00000574 OSTaskChangePrio
008255f8 g     O .bss	00000004 alt_heapsem
00818514 g     F .text	0000018c OSDebugInit
0081d02c g     F .text	0000040c OSTaskDel
008033dc g     F .text	00000138 sqrtf
00822774 g     O .rwdata	00000180 alt_fd_list
00827680 g     O .bss	00000370 OSFlagTbl
00807488 g     F .text	00000828 __ieee754_rem_pio2
008177e4 g     F .text	000000b8 OS_EventTaskRemove
0082022c g     F .text	00000094 alt_find_dev
0080e260 g     F .text	00000008 _times_r
0080d9a0 g     F .text	000000a0 memcpy
00823a30 g     O .rwdata	00000002 OSRdyTblSize
0081f82c g     F .text	0000004c alt_up_character_lcd_write_fd
00811e58 g     F .text	0000000c _cleanup_r
0080c544 g     F .text	000000f8 __floatsidf
008203b4 g     F .text	00000078 alt_io_redirect
00800aa0 g     F .text	00000004 sinl
0080c434 g     F .text	00000088 __ltdf2
008215bc g       *ABS*	00000000 __DTOR_END__
0081fd08 g     F .text	00000074 alt_up_rs232_read_data
0080db58 g     F .text	00000014 puts
008163ec g     F .text	00000130 OSEventNameGet
00823a14 g     O .rwdata	00000002 OSFlagMax
0081326c g     F .text	000000b0 __ratio
00816de4 g     F .text	00000100 OSIntExit
00823a4e g     O .rwdata	00000002 OSTCBSize
00825605 g     O .bss	00000001 OSPrioCur
0081ef80 g     F .text	000002c0 altera_avalon_jtag_uart_read
0080d24c g     F .text	00000014 malloc
0080da84 g     F .text	00000034 _printf_r
01904000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0080c8fc g     F .text	00000008 __udivsi3
008157b0 g     F .text	000000c4 isatty
00823a34 g     O .rwdata	00000002 OSStkWidth
00821c94 g     O .rodata	000000c8 __mprec_tens
00823a28 g     O .rwdata	00000002 OSPtrSize
00812a5c g     F .text	00000008 __locale_charset
008083dc g     F .text	0000052c __kernel_cos
00801a58 g     F .text	000000cc ldexp
00823a08 g     O .rwdata	00000002 OSEventTblSize
00820a98 g       .text	00000000 OSCtxSw
008255c0 g     O .bss	00000004 __malloc_top_pad
00825608 g     O .bss	00000004 OSTCBList
008255dc g     O .bss	00000004 alt_fd_list_lock
008239cc g     O .rwdata	00000004 __mb_cur_max
00812a64 g     F .text	0000000c _localeconv_r
00813bf4 g     F .text	0000003c __i2b
00812440 g     F .text	0000049c __sfvwrite_r
008279f0 g     O .bss	00000c30 OSMemTbl
0082560c g     O .bss	00000001 OSTickStepState
0080e17c g     F .text	00000070 _sbrk_r
00823a2c g     O .rwdata	00000002 OSQMax
00828620 g     O .bss	00000800 OSTaskStatStk
0081a2fc g     F .text	0000010c OSMemNameGet
00823a0c g     O .rwdata	00000002 OSFlagEn
00814614 g     F .text	00000078 _read_r
00823a52 g     O .rwdata	00000002 OSTimeTickHookEn
00805f70 g     F .text	00000218 __ieee754_log10
0081b3b4 g     F .text	00000180 OSQPost
00819f30 g     F .text	000000ac OS_FlagUnlink
00822740 g     O .rwdata	0000000c __lc_ctype
008239e4 g     O .rwdata	00000004 alt_max_fd
0081fc70 g     F .text	00000050 alt_up_rs232_check_parity
00817dc0 g     F .text	0000006c OS_MemCopy
00817e2c g     F .text	000000d4 OS_Sched
0080cfd4 g     F .text	00000138 __unpack_d
00814394 g     F .text	00000110 _fclose_r
0081a1f8 g     F .text	00000104 OSMemGet
0081d760 g     F .text	000001c4 OSTaskNameSet
00811cd8 g     F .text	00000034 fflush
008255c4 g     O .bss	00000004 __malloc_max_sbrked_mem
00825610 g     O .bss	00000004 OSCtxSwCtr
00820ef0 g     F .text	0000001c OSTimeTickHook
0082042c g     F .text	000001c0 alt_irq_register
00823a16 g     O .rwdata	00000002 OSFlagNameSize
0080978c g     F .text	00000318 __kernel_sin
0080b5e0 g     F .text	00000054 __extendsfdf2
0080ada8 g     F .text	00000018 isnanf
0081789c g     F .text	00000104 OS_EventTaskRemoveMulti
0080bb84 g     F .text	00000074 __adddf3
00817690 g     F .text	00000154 OS_EventTaskWaitMulti
0081314c g     F .text	00000120 __b2d
00823a2e g     O .rwdata	00000002 OSQSize
00814cf8 g     F .text	00000660 __umoddi3
008159c0 g     F .text	000000f4 lseek
0081bf90 g     F .text	0000027c OSSemPend
008239b8 g     O .rwdata	00000004 __fdlib_version
008239c0 g     O .rwdata	00000004 _global_impure_ptr
0080db88 g     F .text	000005f4 _realloc_r
00823a18 g     O .rwdata	00000002 OSLowestPrio
0082ab34 g       *ABS*	00000000 __bss_end
00804e1c g     F .text	000005d0 __ieee754_exp
00820f60 g     F .text	00000020 OSTCBInitHook
00823a5e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00820968 g     F .text	00000110 alt_tick
0081468c g     F .text	0000066c __udivdi3
00823a00 g     O .rwdata	00000002 OSEventEn
00821d5c g     O .rodata	00000028 __mprec_bigtens
00813e7c g     F .text	00000120 __s2b
00823a5a g     O .rwdata	00000002 OSTmrCfgNameSize
00815358 g     F .text	00000194 __floatunsidf
0081306c g     F .text	00000060 __mcmp
00811e40 g     F .text	00000018 __fp_lock_all
00804b78 g     F .text	000002a4 __ieee754_cosh
008001dc g     F .text	0000005c min_three
00819d3c g     F .text	000000e4 OS_FlagInit
008002c0 g     F .text	000000ac dist
008208d0 g     F .text	00000098 alt_alarm_stop
00823a3c g     O .rwdata	00000002 OSTaskIdleStkSize
0082564c g     O .bss	00000004 alt_irq_active
0081bb1c g     F .text	000000c0 OSSemAccept
0081a528 g     F .text	000000f0 OSMemPut
00819fdc g     F .text	0000021c OSMemCreate
00825614 g     O .bss	00000004 OSIdleCtrMax
019040ec g     F .exceptions	000000d4 alt_irq_handler
0082274c g     O .rwdata	00000028 alt_dev_null
00823a50 g     O .rwdata	00000002 OSTicksPerSec
00800a7c g     F .text	00000018 fabsl
00808908 g     F .text	00000e84 __kernel_rem_pio2
0080ab98 g     F .text	00000210 rint
0080cb24 g     F .text	000000c8 __unpack_f
0081fb14 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00820a98 g       .text	00000000 OSIntCtxSw
00820034 g     F .text	0000001c alt_dcache_flush_all
00812f38 g     F .text	00000070 __hi0bits
00800d3c g     F .text	00000004 atanl
0080c63c g     F .text	000000d8 __fixdfsi
00800aa8 g     F .text	00000040 modfl
00825618 g     O .bss	00000004 OSTCBFreeList
00823a78 g       *ABS*	00000000 __ram_rwdata_end
0081c20c g     F .text	0000017c OSSemPendAbort
008239dc g     O .rwdata	00000008 alt_dev_list
00815f88 g     F .text	00000124 write
00804828 g     F .text	00000350 __ieee754_atan2
00823a54 g     O .rwdata	00000002 OSVersionNbr
00821f38 g       *ABS*	00000000 __ram_rodata_end
00815678 g     F .text	000000d8 fstat
0081fe0c g     F .text	00000094 alt_up_rs232_write_fd
0080c4bc g     F .text	00000088 __ledf2
00800d24 g     F .text	00000004 floorl
008239fc g     O .rwdata	00000004 OSEndiannessTest
00813d5c g     F .text	00000120 __pow5mult
008255d0 g     O .bss	00000004 __nlocale_changed
0080c904 g     F .text	00000008 __umodsi3
00800af4 g     F .text	000000cc hypotf
00823a0e g     O .rwdata	00000002 OSFlagGrpSize
0082ab34 g       *ABS*	00000000 end
0080c9c4 g     F .text	00000160 __pack_f
00801b24 g     F .text	0000014c modf
0081e90c g     F .text	00000130 altera_avalon_jtag_uart_init
008180a4 g     F .text	000000c8 OS_TaskStat
00803f6c g     F .text	000008bc __ieee754_asin
008215b8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081f590 g     F .text	00000088 alt_avalon_timer_sc_init
0080c944 g     F .text	00000080 __clzsi2
00802848 g     F .text	00000158 fmod
0081f240 g     F .text	000002dc altera_avalon_jtag_uart_write
008015f4 g     F .text	00000168 cos
008020a4 g     F .text	0000024c tanh
00811d64 g     F .text	00000004 __sfp_lock_acquire
00812cb4 g     F .text	000000e4 memchr
00817d6c g     F .text	00000054 OS_MemClr
0081f73c g     F .text	00000078 alt_up_character_lcd_write
0080e2c0 g     F .text	00001ec4 ___vfprintf_internal_r
00820b68 g     F .text	00000310 OSTaskStkInit
0080073c g     F .text	000002c8 task1
0081212c g     F .text	00000314 _free_r
008173ec g     F .text	00000194 OS_EventTaskRdy
0082139c g     F .text	000001b0 __call_exitprocs
0082561c g     O .bss	00000001 OSCPUUsage
008255d4 g     O .bss	00000004 __mlocale_changed
008239c8 g     O .rwdata	00000004 __malloc_sbrk_base
008001a0 g     F .text	0000003c _start
00825650 g     O .bss	00000004 _alt_tick_rate
0081af18 g     F .text	00000320 OSQPend
00801e50 g     F .text	0000016c sin
0081e124 g     F .text	0000014c OSTimeDly
00813854 g     F .text	0000014c __lshift
00802550 g     F .text	00000004 atan2
00825654 g     O .bss	00000004 _alt_nticks
00815bdc g     F .text	00000124 read
0081e70c g     F .text	00000080 alt_sys_init
0081f9a0 g     F .text	000000b0 alt_up_character_lcd_shift_display
00821264 g     F .text	00000134 __register_exitproc
0082561d g     O .bss	00000001 OSTaskCtr
0081fc30 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
0081e270 g     F .text	00000190 OSTimeDlyHMSM
008139a0 g     F .text	00000254 __multiply
0081fa50 g     F .text	00000090 alt_up_character_lcd_erase_pos
00806188 g     F .text	00001300 __ieee754_pow
0081ee18 g     F .text	00000074 altera_avalon_jtag_uart_close
00802cb0 g     F .text	00000488 pow
0080c90c g     F .text	00000038 __mulsi3
00821f38 g       *ABS*	00000000 __ram_rwdata_start
008215bc g       *ABS*	00000000 __ram_rodata_start
00825658 g     O .bss	00000028 __malloc_current_mallinfo
00803138 g     F .text	00000174 sinh
00800aec g     F .text	00000004 logl
00823a02 g     O .rwdata	00000002 OSEventMax
0080b4f0 g     F .text	00000078 __eqsf2
0081354c g     F .text	0000017c __d2b
0081c388 g     F .text	00000128 OSSemPost
00800a98 g     F .text	00000004 tanl
00802b28 g     F .text	00000188 log10
00816f70 g     F .text	000000e4 OSSchedUnlock
0080db6c g     F .text	0000001c realloc
0081e7c4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
008210a0 g     F .text	00000104 alt_get_fd
00825620 g     O .bss	00000004 OSMemFreeList
008170c4 g     F .text	000000ac OSStatInit
00819aa4 g     F .text	000000d4 OSFlagQuery
0080d10c g     F .text	000000c8 __fpcmp_parts_d
00823a38 g     O .rwdata	00000002 OSTaskCreateExtEn
00814324 g     F .text	00000070 _close_r
0080027c g     F .text	00000044 max
008211f0 g     F .text	00000074 memcmp
008173d0 g     F .text	0000001c OS_Dummy
0081e874 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0082ab34 g       *ABS*	00000000 __alt_stack_base
0081e8bc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008101a8 g     F .text	0000013c __swsetup_r
00828e20 g     O .bss	000001e0 OSQTbl
00800d2c g     F .text	00000004 coshl
0080bfbc g     F .text	00000258 __divdf3
00811f10 g     F .text	000000f0 __sfp
008133b0 g     F .text	00000058 __copybits
00822338 g     O .rwdata	00000408 __malloc_av_
00811d70 g     F .text	00000004 __sinit_lock_release
00800d44 g     F .text	00000004 acosl
00825624 g     O .bss	00000004 OSTCBHighRdy
0080bbf8 g     F .text	000003c4 __muldf3
008140c8 g     F .text	00000060 __sread
00821a9c g     O .rodata	00000010 __thenan_sf
00825628 g     O .bss	00000004 OSQFreeList
0081fb9c g     F .text	00000058 alt_up_rs232_disable_read_interrupt
00820f80 g     F .text	00000120 alt_find_file
00820050 g     F .text	000000b4 alt_dev_llist_insert
00816214 g     F .text	00000108 __malloc_lock
00815dd8 g     F .text	000000bc sbrk
0081651c g     F .text	00000144 OSEventNameSet
00811adc g     F .text	000001fc _fflush_r
0081425c g     F .text	000000c8 _calloc_r
0082562c g     O .bss	00000001 OSRdyGrp
008255b8 g       *ABS*	00000000 __bss_start
00812e78 g     F .text	00000098 memset
00808270 g     F .text	0000016c __ieee754_sqrtf
008255bc g     O .bss	00000001 err
00800a04 g     F .text	00000078 main
008255e8 g     O .bss	00000004 alt_envp
008255c8 g     O .bss	00000004 __malloc_max_total_mem
0081e81c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00800bc4 g     F .text	00000158 hypotl
00821dd8 g     O .rodata	00000100 OSUnMapTbl
0080b568 g     F .text	00000078 __ltsf2
00823a32 g     O .rwdata	00000002 OSSemEn
0081f8f0 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
008196fc g     F .text	000003a8 OSFlagPost
00813fdc g     F .text	00000008 __sclose
0080ab80 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
008144a4 g     F .text	00000014 fclose
00817580 g     F .text	00000110 OS_EventTaskWait
0080c74c g     F .text	00000074 __truncdfsf2
0081816c g     F .text	000000c8 OS_TaskStatStkChk
0082a9a4 g     O .bss	00000190 _atexit0
0081d438 g     F .text	00000170 OSTaskDelReq
00810528 g     F .text	000015b4 _dtoa_r
0080d260 g     F .text	00000740 _malloc_r
008239e8 g     O .rwdata	00000004 alt_errno
00817054 g     F .text	00000070 OSStart
008161b8 g     F .text	0000005c __env_unlock
008129a4 g     F .text	000000b8 _fwalk
0081d924 g     F .text	00000218 OSTaskResume
0081a618 g     F .text	000000fc OSMemQuery
00800d30 g     F .text	00000004 cosl
00823a44 g     O .rwdata	00000002 OSTaskStatEn
00823a1e g     O .rwdata	00000002 OSMemMax
0081b534 g     F .text	00000188 OSQPostFront
0080269c g     F .text	000001ac exp
0080c83c g     F .text	00000060 __divsi3
0082562d g     O .bss	00000003 OSRdyTbl
008239f8 g     O .rwdata	00000002 OSDebugEn
00821aac g     O .rodata	00000014 __thenan_df
0081f6fc g     F .text	00000040 alt_up_character_lcd_open_dev
00812000 g     F .text	0000012c _malloc_trim_r
008215bc g       *ABS*	00000000 __CTOR_END__
0080b19c g     F .text	000001e0 __mulsf3
0080ab34 g     F .text	0000001c finite
00823a10 g     O .rwdata	00000002 OSFlagNodeSize
00823a58 g     O .rwdata	00000002 OSTmrCfgMax
0081f6c8 g     F .text	00000034 alt_up_character_lcd_init
00814128 g     F .text	000000bc strcmp
0081a93c g     F .text	00000214 OSQCreate
0081d5a8 g     F .text	000001b8 OSTaskNameGet
008215bc g       *ABS*	00000000 __flash_rodata_start
0081b6bc g     F .text	00000234 OSQPostOpt
00817170 g     F .text	00000240 OSTimeTick
00823a40 g     O .rwdata	00000002 OSTaskMax
008215bc g       *ABS*	00000000 __DTOR_LIST__
0081bbdc g     F .text	00000114 OSSemCreate
00823a64 g     O .rwdata	00000002 OSTmrWheelSize
00801fbc g     F .text	000000e8 tan
00800238 g     F .text	00000044 min
0081fea0 g     F .text	00000040 alt_up_rs232_open_dev
0080a220 g     F .text	00000024 copysign
0080c29c g     F .text	00000088 __nedf2
00823a3a g     O .rwdata	00000002 OSTaskDelEn
01880000 g       *ABS*	00000000 __alt_mem_sram_0
0081c4b0 g     F .text	00000130 OSSemQuery
0081ab50 g     F .text	00000300 OSQDel
0081b238 g     F .text	0000017c OSQPendAbort
0081e6d8 g     F .text	00000034 alt_irq_init
00815d60 g     F .text	00000078 alt_release_fd
00800d48 g     F .text	00000698 atan
0081fae0 g     F .text	00000034 alt_up_character_lcd_cursor_off
00821ac0 g     O .rodata	00000100 __clz_tab
008255d8 g     O .bss	00000004 _PathLocale
01400000 g       *ABS*	00000000 __alt_mem_generic_tristate_controller_0
008211a4 g     F .text	00000014 atexit
008141e4 g     F .text	00000078 _write_r
00802420 g     F .text	00000130 asin
00816ee4 g     F .text	0000008c OSSchedLock
00812b04 g     F .text	0000001c setlocale
008189d4 g     F .text	0000013c OSFlagCreate
008239bc g     O .rwdata	00000004 _impure_ptr
008255e0 g     O .bss	00000004 alt_argc
00801c70 g     F .text	000001e0 scalbn
00800d20 g     F .text	00000004 fmodl
008201c8 g     F .text	00000064 _do_dtors
00805778 g     F .text	000007f8 __ieee754_log
00823a0a g     O .rwdata	00000002 OSEventMultiEn
00818b10 g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00825630 g     O .bss	00000004 OSEventFreeList
01904020 g       .exceptions	00000000 alt_irq_entry
008130cc g     F .text	00000080 __ulp
00813f9c g     F .text	00000040 __isinfd
00819050 g     F .text	00000644 OSFlagPend
00823a56 g     O .rwdata	00000002 OSTmrEn
00811e28 g     F .text	00000018 __fp_unlock_all
008239d4 g     O .rwdata	00000008 alt_fs_list
00817f70 g     F .text	00000080 OS_StrCopy
0081fb48 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0081fcc0 g     F .text	00000048 alt_up_rs232_write_data
00823a20 g     O .rwdata	00000002 OSMemNameSize
0080ab88 g     F .text	00000010 nan
00820f28 g     F .text	0000001c OSInitHookEnd
01904020 g       *ABS*	00000000 __ram_exceptions_start
00823a4c g     O .rwdata	00000002 OSTCBPrioTblMax
00812a70 g     F .text	00000010 localeconv
00800ae8 g     F .text	00000004 log10l
00807fa8 g     F .text	000002c8 __ieee754_sqrt
00823a48 g     O .rwdata	00000002 OSTaskStatStkChkEn
00823a1c g     O .rwdata	00000002 OSMemEn
00823a26 g     O .rwdata	00000002 OSMutexEn
00800d28 g     F .text	00000004 expl
00823a78 g       *ABS*	00000000 _edata
0082ab34 g       *ABS*	00000000 _end
00825634 g     O .bss	00000001 OSIntNesting
00800aa4 g     F .text	00000004 powl
019041c0 g       *ABS*	00000000 __ram_exceptions_end
0081ee8c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0081e400 g     F .text	00000210 OSTimeDlyResume
00818efc g     F .text	00000154 OSFlagNameSet
0081db3c g     F .text	000001fc OSTaskStkChk
00823a22 g     O .rwdata	00000002 OSMemSize
0081404c g     F .text	0000007c __swrite
008239c4 g     O .rwdata	00000004 __malloc_trim_threshold
00800a9c g     F .text	00000004 sinhl
00820a78 g     F .text	00000020 altera_nios2_qsys_irq_init
00825638 g     O .bss	00000004 OSTCBCur
008211b8 g     F .text	00000038 exit
00823a24 g     O .rwdata	00000002 OSMemTblSize
008128dc g     F .text	000000c8 _fwalk_reent
0080b634 g     F .text	000000c0 __floatunsisf
008136c8 g     F .text	0000018c __mdiff
0080c89c g     F .text	00000060 __modsi3
00800d1c g     F .text	00000004 frexpl
01000000 g       *ABS*	00000000 __alt_data_end
01904020 g     F .exceptions	00000000 alt_exception
00811d68 g     F .text	00000004 __sfp_lock_release
00816d14 g     F .text	00000054 OSInit
0081df64 g     F .text	00000144 OSTaskQuery
0081f7b4 g     F .text	00000078 alt_up_character_lcd_string
0081ba70 g     F .text	000000ac OS_QInit
00817ff0 g     F .text	00000058 OS_StrLen
0081a408 g     F .text	00000120 OSMemNameSet
00823a3e g     O .rwdata	00000002 OSTaskProfileEn
0082563c g     O .bss	00000004 OSTime
00800d34 g     F .text	00000004 ceill
0080cbec g     F .text	000000a8 __fpcmp_parts_f
00829000 g     O .bss	00000800 OSTaskIdleStk
0082158c g     F .text	0000002c _exit
0080ab50 g     F .text	00000030 __isnand
0081fee0 g     F .text	00000154 alt_alarm_start
00818db8 g     F .text	00000144 OSFlagNameGet
0081e610 g     F .text	00000064 OSTimeGet
0080adc0 g     F .text	00000124 __muldi3
00812b20 g     F .text	00000194 __smakebuf_r
0080e1ec g     F .text	00000074 strlen
00820eb8 g     F .text	0000001c OSTaskSwHook
008206e4 g     F .text	0000018c open
00829800 g     O .bss	00000b40 OSEventTbl
0080c3ac g     F .text	00000088 __gedf2
0082a340 g     O .bss	00000510 OSTCBTbl
0081c5e0 g     F .text	00000104 OSSemSet
0080d1d4 g     F .text	00000054 clock
008202c0 g     F .text	0000001c alt_icache_flush_all
0081f878 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00823a6c g     O .rwdata	00000004 alt_priority_mask
0081bcf0 g     F .text	000002a0 OSSemDel
00825640 g     O .bss	00000004 OSFlagFreeList
00823a04 g     O .rwdata	00000002 OSEventNameSize
00810184 g     F .text	00000024 __vfprintf_internal
008022f0 g     F .text	00000130 acos
00825644 g     O .bss	00000001 OSStatRdy
0082a850 g     O .bss	00000054 OSTCBPrioTbl
0081610c g     F .text	000000ac __env_lock
00823a4a g     O .rwdata	00000002 OSTaskSwHookEn
0080bb04 g     F .text	00000080 __subdf3
00812fa8 g     F .text	000000c4 __lo0bits
00800af0 g     F .text	00000004 ldexpl
00823a70 g     O .rwdata	00000008 alt_alarm_list
00809aa4 g     F .text	0000077c __kernel_tan
00823a12 g     O .rwdata	00000002 OSFlagWidth
00820164 g     F .text	00000064 _do_ctors
0081fbf4 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
008154ec g     F .text	00000100 close
00801998 g     F .text	000000c0 frexp
0080b138 g     F .text	00000064 __addsf3
008255f0 g     O .bss	00000004 alt_envsem
00825648 g     O .bss	00000004 OSIdleCtrRun
008173b0 g     F .text	00000020 OSVersion
00823a5c g     O .rwdata	00000002 OSTmrCfgWheelSize
008158d4 g     F .text	00000080 alt_load
0081e0a8 g     F .text	0000007c OS_TaskStkClr
0080ccc0 g     F .text	00000314 __pack_d
00823a36 g     O .rwdata	00000002 OSTaskCreateEn
008179a0 g     F .text	00000068 OS_EventWaitListInit
00820f44 g     F .text	0000001c OSTaskIdleHook
0080d238 g     F .text	00000014 free
00811d6c g     F .text	00000004 __sinit_lock_acquire
00803514 g     F .text	00000a58 __ieee754_acos
00813c30 g     F .text	0000012c __multadd
0081dd38 g     F .text	0000022c OSTaskSuspend
00812f10 g     F .text	00000028 _Bfree
00818048 g     F .text	0000005c OS_TaskIdle
00823a62 g     O .rwdata	00000002 OSTmrTblSize
0081b8f0 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01904000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1904000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1904004:	08406814 	ori	at,at,416
    jmp r1
 1904008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01904020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1904020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1904024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1904028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 190402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1904030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1904034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1904038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 190403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1904040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1904044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1904048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 190404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1904050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1904054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1904058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 190405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1904060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1904064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1904068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 190406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1904070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1904074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1904078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 190407c:	10000326 	beq	r2,zero,190408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1904080:	20000226 	beq	r4,zero,190408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1904084:	19040ec0 	call	19040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1904088:	00000306 	br	1904098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 190408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1904090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1904094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1904098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 190409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 19040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 19040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 19040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 19040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 19040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 19040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 19040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 19040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 19040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 19040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 19040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 19040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 19040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 19040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 19040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 19040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 19040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 19040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 19040e8:	ef80083a 	eret

019040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 19040ec:	defff904 	addi	sp,sp,-28
 19040f0:	dfc00615 	stw	ra,24(sp)
 19040f4:	df000515 	stw	fp,20(sp)
 19040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 19040fc:	0816d680 	call	816d68 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1904100:	0005313a 	rdctl	r2,ipending
 1904104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1904108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 190410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1904110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1904114:	00800044 	movi	r2,1
 1904118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 190411c:	e0ffff17 	ldw	r3,-4(fp)
 1904120:	e0bffe17 	ldw	r2,-8(fp)
 1904124:	1884703a 	and	r2,r3,r2
 1904128:	1005003a 	cmpeq	r2,r2,zero
 190412c:	1000171e 	bne	r2,zero,190418c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1904130:	e0bffd17 	ldw	r2,-12(fp)
 1904134:	00c020f4 	movhi	r3,131
 1904138:	18ea2904 	addi	r3,r3,-22364
 190413c:	100490fa 	slli	r2,r2,3
 1904140:	10c5883a 	add	r2,r2,r3
 1904144:	11800017 	ldw	r6,0(r2)
 1904148:	e0bffd17 	ldw	r2,-12(fp)
 190414c:	00c020f4 	movhi	r3,131
 1904150:	18ea2904 	addi	r3,r3,-22364
 1904154:	100490fa 	slli	r2,r2,3
 1904158:	10c5883a 	add	r2,r2,r3
 190415c:	10800104 	addi	r2,r2,4
 1904160:	11000017 	ldw	r4,0(r2)
 1904164:	e17ffd17 	ldw	r5,-12(fp)
 1904168:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 190416c:	0005313a 	rdctl	r2,ipending
 1904170:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1904174:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1904178:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 190417c:	e0bfff17 	ldw	r2,-4(fp)
 1904180:	1004c03a 	cmpne	r2,r2,zero
 1904184:	103fe21e 	bne	r2,zero,1904110 <alt_irq_handler+0x24>
 1904188:	00000706 	br	19041a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 190418c:	e0bffe17 	ldw	r2,-8(fp)
 1904190:	1085883a 	add	r2,r2,r2
 1904194:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1904198:	e0bffd17 	ldw	r2,-12(fp)
 190419c:	10800044 	addi	r2,r2,1
 19041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19041a4:	003fdd06 	br	190411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 19041a8:	0816de40 	call	816de4 <OSIntExit>
}
 19041ac:	e037883a 	mov	sp,fp
 19041b0:	dfc00117 	ldw	ra,4(sp)
 19041b4:	df000017 	ldw	fp,0(sp)
 19041b8:	dec00204 	addi	sp,sp,8
 19041bc:	f800283a 	ret

Disassembly of section .text:

008001a0 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001a0:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001a4:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001a8:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001ac:	d6ae6e14 	ori	gp,gp,47544
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001b0:	008020b4 	movhi	r2,130
    ori r2, r2, %lo(__bss_start)
  8001b4:	10956e14 	ori	r2,r2,21944

    movhi r3, %hi(__bss_end)
  8001b8:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  8001bc:	18eacd14 	ori	r3,r3,43828

    beq r2, r3, 1f
  8001c0:	10c00326 	beq	r2,r3,8001d0 <_start+0x30>

0:
    stw zero, (r2)
  8001c4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001c8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001cc:	10fffd36 	bltu	r2,r3,8001c4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001d0:	08158d40 	call	8158d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001d4:	0815b140 	call	815b14 <alt_main>

008001d8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001d8:	003fff06 	br	8001d8 <alt_after_alt_main>

008001dc <min_three>:
int min(int a, int b);
int max(int a, int b);
int dist(int x, int y);

/* Returns minimum of three numbers */
int min_three(int a, int b, int c){
  8001dc:	defffb04 	addi	sp,sp,-20
  8001e0:	df000415 	stw	fp,16(sp)
  8001e4:	df000404 	addi	fp,sp,16
  8001e8:	e13ffd15 	stw	r4,-12(fp)
  8001ec:	e17ffe15 	stw	r5,-8(fp)
  8001f0:	e1bfff15 	stw	r6,-4(fp)
	int min = a;
  8001f4:	e0bffd17 	ldw	r2,-12(fp)
  8001f8:	e0bffc15 	stw	r2,-16(fp)
	if (min > b) min = b;
  8001fc:	e0fffc17 	ldw	r3,-16(fp)
  800200:	e0bffe17 	ldw	r2,-8(fp)
  800204:	10c0020e 	bge	r2,r3,800210 <min_three+0x34>
  800208:	e0bffe17 	ldw	r2,-8(fp)
  80020c:	e0bffc15 	stw	r2,-16(fp)
	if (min > c) min = c;
  800210:	e0fffc17 	ldw	r3,-16(fp)
  800214:	e0bfff17 	ldw	r2,-4(fp)
  800218:	10c0020e 	bge	r2,r3,800224 <min_three+0x48>
  80021c:	e0bfff17 	ldw	r2,-4(fp)
  800220:	e0bffc15 	stw	r2,-16(fp)
	return min;
  800224:	e0bffc17 	ldw	r2,-16(fp)
}
  800228:	e037883a 	mov	sp,fp
  80022c:	df000017 	ldw	fp,0(sp)
  800230:	dec00104 	addi	sp,sp,4
  800234:	f800283a 	ret

00800238 <min>:

/* Returns minimum of two numbers */
int min(int a, int b){
  800238:	defffc04 	addi	sp,sp,-16
  80023c:	df000315 	stw	fp,12(sp)
  800240:	df000304 	addi	fp,sp,12
  800244:	e13ffe15 	stw	r4,-8(fp)
  800248:	e17fff15 	stw	r5,-4(fp)
	int m = a;
  80024c:	e0bffe17 	ldw	r2,-8(fp)
  800250:	e0bffd15 	stw	r2,-12(fp)
	if (m > b) m = b;
  800254:	e0fffd17 	ldw	r3,-12(fp)
  800258:	e0bfff17 	ldw	r2,-4(fp)
  80025c:	10c0020e 	bge	r2,r3,800268 <min+0x30>
  800260:	e0bfff17 	ldw	r2,-4(fp)
  800264:	e0bffd15 	stw	r2,-12(fp)
	return m;
  800268:	e0bffd17 	ldw	r2,-12(fp)
}
  80026c:	e037883a 	mov	sp,fp
  800270:	df000017 	ldw	fp,0(sp)
  800274:	dec00104 	addi	sp,sp,4
  800278:	f800283a 	ret

0080027c <max>:

/* Returns maximum of two numbers */
int max(int a, int b){
  80027c:	defffc04 	addi	sp,sp,-16
  800280:	df000315 	stw	fp,12(sp)
  800284:	df000304 	addi	fp,sp,12
  800288:	e13ffe15 	stw	r4,-8(fp)
  80028c:	e17fff15 	stw	r5,-4(fp)
	int m = a;
  800290:	e0bffe17 	ldw	r2,-8(fp)
  800294:	e0bffd15 	stw	r2,-12(fp)
	if (m < b) m = b;
  800298:	e0fffd17 	ldw	r3,-12(fp)
  80029c:	e0bfff17 	ldw	r2,-4(fp)
  8002a0:	1880020e 	bge	r3,r2,8002ac <max+0x30>
  8002a4:	e0bfff17 	ldw	r2,-4(fp)
  8002a8:	e0bffd15 	stw	r2,-12(fp)
	return m;
  8002ac:	e0bffd17 	ldw	r2,-12(fp)
}
  8002b0:	e037883a 	mov	sp,fp
  8002b4:	df000017 	ldw	fp,0(sp)
  8002b8:	dec00104 	addi	sp,sp,4
  8002bc:	f800283a 	ret

008002c0 <dist>:

// Euclidean distance
int dist(int x, int y) {
  8002c0:	defffc04 	addi	sp,sp,-16
  8002c4:	dfc00315 	stw	ra,12(sp)
  8002c8:	df000215 	stw	fp,8(sp)
  8002cc:	df000204 	addi	fp,sp,8
  8002d0:	e13ffe15 	stw	r4,-8(fp)
  8002d4:	e17fff15 	stw	r5,-4(fp)
	return sqrtl((long)pow((x - y), 2));
  8002d8:	e0fffe17 	ldw	r3,-8(fp)
  8002dc:	e0bfff17 	ldw	r2,-4(fp)
  8002e0:	1889c83a 	sub	r4,r3,r2
  8002e4:	080c5440 	call	80c544 <__floatsidf>
  8002e8:	100f883a 	mov	r7,r2
  8002ec:	1811883a 	mov	r8,r3
  8002f0:	3809883a 	mov	r4,r7
  8002f4:	400b883a 	mov	r5,r8
  8002f8:	380d883a 	mov	r6,r7
  8002fc:	400f883a 	mov	r7,r8
  800300:	080bbf80 	call	80bbf8 <__muldf3>
  800304:	1009883a 	mov	r4,r2
  800308:	180b883a 	mov	r5,r3
  80030c:	200d883a 	mov	r6,r4
  800310:	280f883a 	mov	r7,r5
  800314:	3005883a 	mov	r2,r6
  800318:	3807883a 	mov	r3,r7
  80031c:	1009883a 	mov	r4,r2
  800320:	180b883a 	mov	r5,r3
  800324:	080c63c0 	call	80c63c <__fixdfsi>
  800328:	1009883a 	mov	r4,r2
  80032c:	080c5440 	call	80c544 <__floatsidf>
  800330:	100b883a 	mov	r5,r2
  800334:	180d883a 	mov	r6,r3
  800338:	2809883a 	mov	r4,r5
  80033c:	300b883a 	mov	r5,r6
  800340:	0800bc00 	call	800bc0 <sqrtl>
  800344:	100b883a 	mov	r5,r2
  800348:	180d883a 	mov	r6,r3
  80034c:	2809883a 	mov	r4,r5
  800350:	300b883a 	mov	r5,r6
  800354:	080c63c0 	call	80c63c <__fixdfsi>
}
  800358:	e037883a 	mov	sp,fp
  80035c:	dfc00117 	ldw	ra,4(sp)
  800360:	df000017 	ldw	fp,0(sp)
  800364:	dec00204 	addi	sp,sp,8
  800368:	f800283a 	ret

0080036c <dtw>:

int dtw(int * t1, int * t2, int n, int m) {
  80036c:	deffea04 	addi	sp,sp,-88
  800370:	dfc01515 	stw	ra,84(sp)
  800374:	df001415 	stw	fp,80(sp)
  800378:	dd801315 	stw	r22,76(sp)
  80037c:	dd401215 	stw	r21,72(sp)
  800380:	dd001115 	stw	r20,68(sp)
  800384:	dcc01015 	stw	r19,64(sp)
  800388:	dc800f15 	stw	r18,60(sp)
  80038c:	dc400e15 	stw	r17,56(sp)
  800390:	dc000d15 	stw	r16,52(sp)
  800394:	df000d04 	addi	fp,sp,52
  800398:	e13ff815 	stw	r4,-32(fp)
  80039c:	e17ff915 	stw	r5,-28(fp)
  8003a0:	e1bffa15 	stw	r6,-24(fp)
  8003a4:	e1fffb15 	stw	r7,-20(fp)
  8003a8:	e6ffff15 	stw	sp,-4(fp)
  8003ac:	d805883a 	mov	r2,sp
  8003b0:	e0bffc15 	stw	r2,-16(fp)
	int i;
	int j;
	int window = (int)(0.1*(max(m, n))+0.5); //band size of 10% max of m or n
  8003b4:	e13ffb17 	ldw	r4,-20(fp)
  8003b8:	e17ffa17 	ldw	r5,-24(fp)
  8003bc:	080027c0 	call	80027c <max>
  8003c0:	1009883a 	mov	r4,r2
  8003c4:	080c5440 	call	80c544 <__floatsidf>
  8003c8:	100b883a 	mov	r5,r2
  8003cc:	180d883a 	mov	r6,r3
  8003d0:	2809883a 	mov	r4,r5
  8003d4:	300b883a 	mov	r5,r6
  8003d8:	01a666b4 	movhi	r6,39322
  8003dc:	31a66684 	addi	r6,r6,-26214
  8003e0:	01cfeeb4 	movhi	r7,16314
  8003e4:	39e66644 	addi	r7,r7,-26215
  8003e8:	080bbf80 	call	80bbf8 <__muldf3>
  8003ec:	1009883a 	mov	r4,r2
  8003f0:	180b883a 	mov	r5,r3
  8003f4:	2005883a 	mov	r2,r4
  8003f8:	2807883a 	mov	r3,r5
  8003fc:	1009883a 	mov	r4,r2
  800400:	180b883a 	mov	r5,r3
  800404:	000d883a 	mov	r6,zero
  800408:	01cff834 	movhi	r7,16352
  80040c:	080bb840 	call	80bb84 <__adddf3>
  800410:	1009883a 	mov	r4,r2
  800414:	180b883a 	mov	r5,r3
  800418:	2005883a 	mov	r2,r4
  80041c:	2807883a 	mov	r3,r5
  800420:	1009883a 	mov	r4,r2
  800424:	180b883a 	mov	r5,r3
  800428:	080c63c0 	call	80c63c <__fixdfsi>
  80042c:	e0bff415 	stw	r2,-48(fp)
	int constraint = abs(n-m);
  800430:	e0fffa17 	ldw	r3,-24(fp)
  800434:	e0bffb17 	ldw	r2,-20(fp)
  800438:	1885c83a 	sub	r2,r3,r2
  80043c:	e0bff315 	stw	r2,-52(fp)
  800440:	e0bff317 	ldw	r2,-52(fp)
  800444:	1004403a 	cmpge	r2,r2,zero
  800448:	1000031e 	bne	r2,zero,800458 <dtw+0xec>
  80044c:	e0bff317 	ldw	r2,-52(fp)
  800450:	0085c83a 	sub	r2,zero,r2
  800454:	e0bff315 	stw	r2,-52(fp)
	window = max(window, constraint);
  800458:	e13ff417 	ldw	r4,-48(fp)
  80045c:	e17ff317 	ldw	r5,-52(fp)
  800460:	080027c0 	call	80027c <max>
  800464:	e0bff415 	stw	r2,-48(fp)

	// create cost matrix
	int cost[m][n];
  800468:	e0fffa17 	ldw	r3,-24(fp)
  80046c:	1805883a 	mov	r2,r3
  800470:	1085883a 	add	r2,r2,r2
  800474:	1085883a 	add	r2,r2,r2
  800478:	e0bffe15 	stw	r2,-8(fp)
  80047c:	e0bffb17 	ldw	r2,-20(fp)
  800480:	1809883a 	mov	r4,r3
  800484:	100b883a 	mov	r5,r2
  800488:	080c90c0 	call	80c90c <__mulsi3>
  80048c:	1085883a 	add	r2,r2,r2
  800490:	1085883a 	add	r2,r2,r2
  800494:	108000c4 	addi	r2,r2,3
  800498:	108000c4 	addi	r2,r2,3
  80049c:	1004d0ba 	srli	r2,r2,2
  8004a0:	1085883a 	add	r2,r2,r2
  8004a4:	1085883a 	add	r2,r2,r2
  8004a8:	d8b7c83a 	sub	sp,sp,r2
  8004ac:	e6fffd15 	stw	sp,-12(fp)
  8004b0:	e0fffd17 	ldw	r3,-12(fp)
  8004b4:	188000c4 	addi	r2,r3,3
  8004b8:	1004d0ba 	srli	r2,r2,2
  8004bc:	1085883a 	add	r2,r2,r2
  8004c0:	1085883a 	add	r2,r2,r2
  8004c4:	e0bffd15 	stw	r2,-12(fp)
  8004c8:	e0bffd17 	ldw	r2,-12(fp)
  8004cc:	e0bff715 	stw	r2,-36(fp)

	// setup initial state of matrix
	for (i = 0; i < m; i++)
  8004d0:	e03ff615 	stw	zero,-40(fp)
  8004d4:	00001806 	br	800538 <dtw+0x1cc>
		for (j = 0; j < n; j++)
  8004d8:	e03ff515 	stw	zero,-44(fp)
  8004dc:	00001006 	br	800520 <dtw+0x1b4>
			cost[i][j] = INFIN;
  8004e0:	e0fffe17 	ldw	r3,-8(fp)
  8004e4:	1808d0ba 	srli	r4,r3,2
  8004e8:	e17ff617 	ldw	r5,-40(fp)
  8004ec:	e43ff517 	ldw	r16,-44(fp)
  8004f0:	e47ff717 	ldw	r17,-36(fp)
  8004f4:	080c90c0 	call	80c90c <__mulsi3>
  8004f8:	1405883a 	add	r2,r2,r16
  8004fc:	1085883a 	add	r2,r2,r2
  800500:	1085883a 	add	r2,r2,r2
  800504:	1447883a 	add	r3,r2,r17
  800508:	008ee6f4 	movhi	r2,15259
  80050c:	10b28004 	addi	r2,r2,-13824
  800510:	18800015 	stw	r2,0(r3)
	// create cost matrix
	int cost[m][n];

	// setup initial state of matrix
	for (i = 0; i < m; i++)
		for (j = 0; j < n; j++)
  800514:	e0bff517 	ldw	r2,-44(fp)
  800518:	10800044 	addi	r2,r2,1
  80051c:	e0bff515 	stw	r2,-44(fp)
  800520:	e0fff517 	ldw	r3,-44(fp)
  800524:	e0bffa17 	ldw	r2,-24(fp)
  800528:	18bfed16 	blt	r3,r2,8004e0 <dtw+0x174>

	// create cost matrix
	int cost[m][n];

	// setup initial state of matrix
	for (i = 0; i < m; i++)
  80052c:	e0bff617 	ldw	r2,-40(fp)
  800530:	10800044 	addi	r2,r2,1
  800534:	e0bff615 	stw	r2,-40(fp)
  800538:	e0fff617 	ldw	r3,-40(fp)
  80053c:	e0bffb17 	ldw	r2,-20(fp)
  800540:	18bfe516 	blt	r3,r2,8004d8 <dtw+0x16c>
		for (j = 0; j < n; j++)
			cost[i][j] = INFIN;
	cost[0][0] = 0;
  800544:	e0bff717 	ldw	r2,-36(fp)
  800548:	10000015 	stw	zero,0(r2)

	// fill matrix
	for(i = 1; i < m; i++)
  80054c:	00800044 	movi	r2,1
  800550:	e0bff615 	stw	r2,-40(fp)
  800554:	00005b06 	br	8006c4 <dtw+0x358>
	for(j = max(1, i-window); j < min(n,i+window); j++)
  800558:	e0fff617 	ldw	r3,-40(fp)
  80055c:	e0bff417 	ldw	r2,-48(fp)
  800560:	188bc83a 	sub	r5,r3,r2
  800564:	01000044 	movi	r4,1
  800568:	080027c0 	call	80027c <max>
  80056c:	e0bff515 	stw	r2,-44(fp)
  800570:	00004906 	br	800698 <dtw+0x32c>
			cost[i][j] = min_three(cost[i-1][j], cost[i][j-1], cost[i-1][j-1])
  800574:	e0bffe17 	ldw	r2,-8(fp)
  800578:	1024d0ba 	srli	r18,r2,2
  80057c:	e4fff617 	ldw	r19,-40(fp)
  800580:	e53ff517 	ldw	r20,-44(fp)
  800584:	e0fffe17 	ldw	r3,-8(fp)
  800588:	1808d0ba 	srli	r4,r3,2
  80058c:	e0bff617 	ldw	r2,-40(fp)
  800590:	117fffc4 	addi	r5,r2,-1
  800594:	e43ff517 	ldw	r16,-44(fp)
  800598:	e47ff717 	ldw	r17,-36(fp)
  80059c:	080c90c0 	call	80c90c <__mulsi3>
  8005a0:	1405883a 	add	r2,r2,r16
  8005a4:	1085883a 	add	r2,r2,r2
  8005a8:	1085883a 	add	r2,r2,r2
  8005ac:	1445883a 	add	r2,r2,r17
  8005b0:	15400017 	ldw	r21,0(r2)
  8005b4:	e0bffe17 	ldw	r2,-8(fp)
  8005b8:	1008d0ba 	srli	r4,r2,2
  8005bc:	e17ff617 	ldw	r5,-40(fp)
  8005c0:	e0bff517 	ldw	r2,-44(fp)
  8005c4:	143fffc4 	addi	r16,r2,-1
  8005c8:	e47ff717 	ldw	r17,-36(fp)
  8005cc:	080c90c0 	call	80c90c <__mulsi3>
  8005d0:	1405883a 	add	r2,r2,r16
  8005d4:	1085883a 	add	r2,r2,r2
  8005d8:	1085883a 	add	r2,r2,r2
  8005dc:	1445883a 	add	r2,r2,r17
  8005e0:	15800017 	ldw	r22,0(r2)
  8005e4:	e0fffe17 	ldw	r3,-8(fp)
  8005e8:	1808d0ba 	srli	r4,r3,2
  8005ec:	e0bff617 	ldw	r2,-40(fp)
  8005f0:	117fffc4 	addi	r5,r2,-1
  8005f4:	e0bff517 	ldw	r2,-44(fp)
  8005f8:	143fffc4 	addi	r16,r2,-1
  8005fc:	e47ff717 	ldw	r17,-36(fp)
  800600:	080c90c0 	call	80c90c <__mulsi3>
  800604:	1405883a 	add	r2,r2,r16
  800608:	1085883a 	add	r2,r2,r2
  80060c:	1085883a 	add	r2,r2,r2
  800610:	1445883a 	add	r2,r2,r17
  800614:	11800017 	ldw	r6,0(r2)
  800618:	a809883a 	mov	r4,r21
  80061c:	b00b883a 	mov	r5,r22
  800620:	08001dc0 	call	8001dc <min_three>
  800624:	1021883a 	mov	r16,r2
  800628:	e0bff617 	ldw	r2,-40(fp)
  80062c:	1085883a 	add	r2,r2,r2
  800630:	1085883a 	add	r2,r2,r2
  800634:	1007883a 	mov	r3,r2
  800638:	e0bff817 	ldw	r2,-32(fp)
  80063c:	1885883a 	add	r2,r3,r2
  800640:	11000017 	ldw	r4,0(r2)
  800644:	e0bff517 	ldw	r2,-44(fp)
  800648:	1085883a 	add	r2,r2,r2
  80064c:	1085883a 	add	r2,r2,r2
  800650:	1007883a 	mov	r3,r2
  800654:	e0bff917 	ldw	r2,-28(fp)
  800658:	1885883a 	add	r2,r3,r2
  80065c:	11400017 	ldw	r5,0(r2)
  800660:	08002c00 	call	8002c0 <dist>
  800664:	80a1883a 	add	r16,r16,r2
  800668:	e47ff717 	ldw	r17,-36(fp)
  80066c:	9009883a 	mov	r4,r18
  800670:	980b883a 	mov	r5,r19
  800674:	080c90c0 	call	80c90c <__mulsi3>
  800678:	1505883a 	add	r2,r2,r20
  80067c:	1085883a 	add	r2,r2,r2
  800680:	1085883a 	add	r2,r2,r2
  800684:	1445883a 	add	r2,r2,r17
  800688:	14000015 	stw	r16,0(r2)
			cost[i][j] = INFIN;
	cost[0][0] = 0;

	// fill matrix
	for(i = 1; i < m; i++)
	for(j = max(1, i-window); j < min(n,i+window); j++)
  80068c:	e0bff517 	ldw	r2,-44(fp)
  800690:	10800044 	addi	r2,r2,1
  800694:	e0bff515 	stw	r2,-44(fp)
  800698:	e0fff617 	ldw	r3,-40(fp)
  80069c:	e0bff417 	ldw	r2,-48(fp)
  8006a0:	188b883a 	add	r5,r3,r2
  8006a4:	e13ffa17 	ldw	r4,-24(fp)
  8006a8:	08002380 	call	800238 <min>
  8006ac:	1007883a 	mov	r3,r2
  8006b0:	e0bff517 	ldw	r2,-44(fp)
  8006b4:	10ffaf16 	blt	r2,r3,800574 <dtw+0x208>
		for (j = 0; j < n; j++)
			cost[i][j] = INFIN;
	cost[0][0] = 0;

	// fill matrix
	for(i = 1; i < m; i++)
  8006b8:	e0bff617 	ldw	r2,-40(fp)
  8006bc:	10800044 	addi	r2,r2,1
  8006c0:	e0bff615 	stw	r2,-40(fp)
  8006c4:	e0fff617 	ldw	r3,-40(fp)
  8006c8:	e0bffb17 	ldw	r2,-20(fp)
  8006cc:	18bfa216 	blt	r3,r2,800558 <dtw+0x1ec>
	for(j = max(1, i-window); j < min(n,i+window); j++)
			cost[i][j] = min_three(cost[i-1][j], cost[i][j-1], cost[i-1][j-1])
			+ dist(t1[i],t2[j]);

			return cost[m - 1][n - 1];
  8006d0:	e0bffe17 	ldw	r2,-8(fp)
  8006d4:	1008d0ba 	srli	r4,r2,2
  8006d8:	e0bffb17 	ldw	r2,-20(fp)
  8006dc:	117fffc4 	addi	r5,r2,-1
  8006e0:	e0bffa17 	ldw	r2,-24(fp)
  8006e4:	143fffc4 	addi	r16,r2,-1
  8006e8:	e47ff717 	ldw	r17,-36(fp)
  8006ec:	080c90c0 	call	80c90c <__mulsi3>
  8006f0:	1405883a 	add	r2,r2,r16
  8006f4:	1085883a 	add	r2,r2,r2
  8006f8:	1085883a 	add	r2,r2,r2
  8006fc:	1445883a 	add	r2,r2,r17
  800700:	10800017 	ldw	r2,0(r2)
  800704:	e6fffc17 	ldw	sp,-16(fp)
		}
  800708:	e6ffff17 	ldw	sp,-4(fp)
  80070c:	e037883a 	mov	sp,fp
  800710:	dfc00817 	ldw	ra,32(sp)
  800714:	df000717 	ldw	fp,28(sp)
  800718:	dd800617 	ldw	r22,24(sp)
  80071c:	dd400517 	ldw	r21,20(sp)
  800720:	dd000417 	ldw	r20,16(sp)
  800724:	dcc00317 	ldw	r19,12(sp)
  800728:	dc800217 	ldw	r18,8(sp)
  80072c:	dc400117 	ldw	r17,4(sp)
  800730:	dc000017 	ldw	r16,0(sp)
  800734:	dec00904 	addi	sp,sp,36
  800738:	f800283a 	ret

0080073c <task1>:
#define INPUT_SIZE 400
OS_EVENT *sem;
INT8U err;

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata) {
  80073c:	deff8f04 	addi	sp,sp,-452
  800740:	dfc07015 	stw	ra,448(sp)
  800744:	df006f15 	stw	fp,444(sp)
  800748:	dc006e15 	stw	r16,440(sp)
  80074c:	df006e04 	addi	fp,sp,440
  800750:	e13fff15 	stw	r4,-4(fp)
	int init_size = 50;
  800754:	00800c84 	movi	r2,50
  800758:	e0bf9a15 	stw	r2,-408(fp)
	int *t1;
	int *t2;
	int *temp;

	int index = 0;
  80075c:	e03f9615 	stw	zero,-424(fp)
	int i;

	clock_t t;

	signed char str[INPUT_SIZE] = {};
  800760:	008020b4 	movhi	r2,130
  800764:	10856f04 	addi	r2,r2,5564
  800768:	e13f9b04 	addi	r4,fp,-404
  80076c:	100b883a 	mov	r5,r2
  800770:	01806404 	movi	r6,400
  800774:	080d9a00 	call	80d9a0 <memcpy>

	while (1) {
		OSSemPend(sem, 0, &err);
  800778:	d1270017 	ldw	r4,-25600(gp)
  80077c:	000b883a 	mov	r5,zero
  800780:	d1a70104 	addi	r6,gp,-25596
  800784:	081bf900 	call	81bf90 <OSSemPend>
		printf("DTW test\n");
  800788:	010020b4 	movhi	r4,130
  80078c:	2105d304 	addi	r4,r4,5964
  800790:	080db580 	call	80db58 <puts>
		t1 = malloc(init_size*sizeof(int));
  800794:	e0bf9a17 	ldw	r2,-408(fp)
  800798:	1085883a 	add	r2,r2,r2
  80079c:	1085883a 	add	r2,r2,r2
  8007a0:	1009883a 	mov	r4,r2
  8007a4:	080d24c0 	call	80d24c <malloc>
  8007a8:	e0bf9915 	stw	r2,-412(fp)
		if (t1 == NULL) {
  8007ac:	e0bf9917 	ldw	r2,-412(fp)
  8007b0:	1004c03a 	cmpne	r2,r2,zero
  8007b4:	1000041e 	bne	r2,zero,8007c8 <task1+0x8c>
			printf("1Error allocating memory\n"); //print an error message
  8007b8:	010020b4 	movhi	r4,130
  8007bc:	2105d604 	addi	r4,r4,5976
  8007c0:	080db580 	call	80db58 <puts>
			return;
  8007c4:	00008906 	br	8009ec <task1+0x2b0>
		}
		t2 = malloc(init_size*sizeof(int));
  8007c8:	e0bf9a17 	ldw	r2,-408(fp)
  8007cc:	1085883a 	add	r2,r2,r2
  8007d0:	1085883a 	add	r2,r2,r2
  8007d4:	1009883a 	mov	r4,r2
  8007d8:	080d24c0 	call	80d24c <malloc>
  8007dc:	e0bf9815 	stw	r2,-416(fp)
		if (t2 == NULL) {
  8007e0:	e0bf9817 	ldw	r2,-416(fp)
  8007e4:	1004c03a 	cmpne	r2,r2,zero
  8007e8:	1000041e 	bne	r2,zero,8007fc <task1+0xc0>
			printf("Error allocating memory\n"); //print an error message
  8007ec:	010020b4 	movhi	r4,130
  8007f0:	2105dd04 	addi	r4,r4,6004
  8007f4:	080db580 	call	80db58 <puts>
			return;
  8007f8:	00007c06 	br	8009ec <task1+0x2b0>
		}


		for(i=0; i<5; i++){
  8007fc:	e03f9515 	stw	zero,-428(fp)
  800800:	00005506 	br	800958 <task1+0x21c>
			*(t1+index) = (int)(str[i] * 100);
  800804:	e0bf9617 	ldw	r2,-424(fp)
  800808:	1085883a 	add	r2,r2,r2
  80080c:	1085883a 	add	r2,r2,r2
  800810:	1007883a 	mov	r3,r2
  800814:	e0bf9917 	ldw	r2,-412(fp)
  800818:	18a1883a 	add	r16,r3,r2
  80081c:	e0ff9517 	ldw	r3,-428(fp)
  800820:	e0bf9b04 	addi	r2,fp,-404
  800824:	10c5883a 	add	r2,r2,r3
  800828:	10800003 	ldbu	r2,0(r2)
  80082c:	11003fcc 	andi	r4,r2,255
  800830:	2100201c 	xori	r4,r4,128
  800834:	213fe004 	addi	r4,r4,-128
  800838:	01401904 	movi	r5,100
  80083c:	080c90c0 	call	80c90c <__mulsi3>
  800840:	80800015 	stw	r2,0(r16)
			*(t2+index) = (int)((str[i]+1)* 100);
  800844:	e0bf9617 	ldw	r2,-424(fp)
  800848:	1085883a 	add	r2,r2,r2
  80084c:	1085883a 	add	r2,r2,r2
  800850:	1007883a 	mov	r3,r2
  800854:	e0bf9817 	ldw	r2,-416(fp)
  800858:	18a1883a 	add	r16,r3,r2
  80085c:	e0ff9517 	ldw	r3,-428(fp)
  800860:	e0bf9b04 	addi	r2,fp,-404
  800864:	10c5883a 	add	r2,r2,r3
  800868:	10800003 	ldbu	r2,0(r2)
  80086c:	11003fcc 	andi	r4,r2,255
  800870:	2100201c 	xori	r4,r4,128
  800874:	213fe004 	addi	r4,r4,-128
  800878:	01401904 	movi	r5,100
  80087c:	080c90c0 	call	80c90c <__mulsi3>
  800880:	10801904 	addi	r2,r2,100
  800884:	80800015 	stw	r2,0(r16)
			index++;
  800888:	e0bf9617 	ldw	r2,-424(fp)
  80088c:	10800044 	addi	r2,r2,1
  800890:	e0bf9615 	stw	r2,-424(fp)
		    //pStr = strtok (NULL, " ");
			if(index == init_size){
  800894:	e0ff9617 	ldw	r3,-424(fp)
  800898:	e0bf9a17 	ldw	r2,-408(fp)
  80089c:	18802b1e 	bne	r3,r2,80094c <task1+0x210>
				temp = realloc(t1, (init_size+100)*sizeof(int));
  8008a0:	e0bf9a17 	ldw	r2,-408(fp)
  8008a4:	1085883a 	add	r2,r2,r2
  8008a8:	1085883a 	add	r2,r2,r2
  8008ac:	10806404 	addi	r2,r2,400
  8008b0:	100b883a 	mov	r5,r2
  8008b4:	e13f9917 	ldw	r4,-412(fp)
  8008b8:	080db6c0 	call	80db6c <realloc>
  8008bc:	e0bf9715 	stw	r2,-420(fp)
				if(temp != NULL){
  8008c0:	e0bf9717 	ldw	r2,-420(fp)
  8008c4:	1005003a 	cmpeq	r2,r2,zero
  8008c8:	10000e1e 	bne	r2,zero,800904 <task1+0x1c8>
					t1 = temp;
  8008cc:	e0bf9717 	ldw	r2,-420(fp)
  8008d0:	e0bf9915 	stw	r2,-412(fp)
				else{
					printf("Error reallocating memory\n");
					free(t1);
					return;
				}
				temp = realloc(t2, (init_size+100)*sizeof(int));
  8008d4:	e0bf9a17 	ldw	r2,-408(fp)
  8008d8:	1085883a 	add	r2,r2,r2
  8008dc:	1085883a 	add	r2,r2,r2
  8008e0:	10806404 	addi	r2,r2,400
  8008e4:	100b883a 	mov	r5,r2
  8008e8:	e13f9817 	ldw	r4,-416(fp)
  8008ec:	080db6c0 	call	80db6c <realloc>
  8008f0:	e0bf9715 	stw	r2,-420(fp)
				if(temp != NULL){
  8008f4:	e0bf9717 	ldw	r2,-420(fp)
  8008f8:	1004c03a 	cmpne	r2,r2,zero
  8008fc:	1000071e 	bne	r2,zero,80091c <task1+0x1e0>
  800900:	00000c06 	br	800934 <task1+0x1f8>
				temp = realloc(t1, (init_size+100)*sizeof(int));
				if(temp != NULL){
					t1 = temp;
				}
				else{
					printf("Error reallocating memory\n");
  800904:	010020b4 	movhi	r4,130
  800908:	2105e304 	addi	r4,r4,6028
  80090c:	080db580 	call	80db58 <puts>
					free(t1);
  800910:	e13f9917 	ldw	r4,-412(fp)
  800914:	080d2380 	call	80d238 <free>
					return;
  800918:	00003406 	br	8009ec <task1+0x2b0>
				}
				temp = realloc(t2, (init_size+100)*sizeof(int));
				if(temp != NULL){
					t1 = temp;
  80091c:	e0bf9717 	ldw	r2,-420(fp)
  800920:	e0bf9915 	stw	r2,-412(fp)
				else{
					printf("Error reallocating memory\n");
					free(t2);
					return;
				}
				init_size += 100;
  800924:	e0bf9a17 	ldw	r2,-408(fp)
  800928:	10801904 	addi	r2,r2,100
  80092c:	e0bf9a15 	stw	r2,-408(fp)
  800930:	00000606 	br	80094c <task1+0x210>
				temp = realloc(t2, (init_size+100)*sizeof(int));
				if(temp != NULL){
					t1 = temp;
				}
				else{
					printf("Error reallocating memory\n");
  800934:	010020b4 	movhi	r4,130
  800938:	2105e304 	addi	r4,r4,6028
  80093c:	080db580 	call	80db58 <puts>
					free(t2);
  800940:	e13f9817 	ldw	r4,-416(fp)
  800944:	080d2380 	call	80d238 <free>
					return;
  800948:	00002806 	br	8009ec <task1+0x2b0>
			printf("Error allocating memory\n"); //print an error message
			return;
		}


		for(i=0; i<5; i++){
  80094c:	e0bf9517 	ldw	r2,-428(fp)
  800950:	10800044 	addi	r2,r2,1
  800954:	e0bf9515 	stw	r2,-428(fp)
  800958:	e0bf9517 	ldw	r2,-428(fp)
  80095c:	10800150 	cmplti	r2,r2,5
  800960:	103fa81e 	bne	r2,zero,800804 <task1+0xc8>
				}
				init_size += 100;
			}
		}

		t = clock();
  800964:	080d1d40 	call	80d1d4 <clock>
  800968:	e0bf9415 	stw	r2,-432(fp)
		//pass t1 and t2 to dtw
		int answer = dtw(t1, t2, index, index);
  80096c:	e13f9917 	ldw	r4,-412(fp)
  800970:	e17f9817 	ldw	r5,-416(fp)
  800974:	e1bf9617 	ldw	r6,-424(fp)
  800978:	e1ff9617 	ldw	r7,-424(fp)
  80097c:	080036c0 	call	80036c <dtw>
  800980:	e0bf9315 	stw	r2,-436(fp)

		//runtime
		t = clock() - t;
  800984:	080d1d40 	call	80d1d4 <clock>
  800988:	1007883a 	mov	r3,r2
  80098c:	e0bf9417 	ldw	r2,-432(fp)
  800990:	1885c83a 	sub	r2,r3,r2
  800994:	e0bf9415 	stw	r2,-432(fp)
		float time = ((float) t) / CLOCKS_PER_SEC;
  800998:	e13f9417 	ldw	r4,-432(fp)
  80099c:	080b6340 	call	80b634 <__floatunsisf>
  8009a0:	1009883a 	mov	r4,r2
  8009a4:	01511eb4 	movhi	r5,17530
  8009a8:	080b37c0 	call	80b37c <__divsf3>
  8009ac:	e0bf9215 	stw	r2,-440(fp)
		printf("%d   time = %f", answer, time);
  8009b0:	e13f9217 	ldw	r4,-440(fp)
  8009b4:	080b5e00 	call	80b5e0 <__extendsfdf2>
  8009b8:	100f883a 	mov	r7,r2
  8009bc:	1811883a 	mov	r8,r3
  8009c0:	010020b4 	movhi	r4,130
  8009c4:	2105ea04 	addi	r4,r4,6056
  8009c8:	e17f9317 	ldw	r5,-436(fp)
  8009cc:	380d883a 	mov	r6,r7
  8009d0:	400f883a 	mov	r7,r8
  8009d4:	080da400 	call	80da40 <printf>
		free(t1);
  8009d8:	e13f9917 	ldw	r4,-412(fp)
  8009dc:	080d2380 	call	80d238 <free>
		free(t2);
  8009e0:	e13f9817 	ldw	r4,-416(fp)
  8009e4:	080d2380 	call	80d238 <free>
	}
  8009e8:	003f6306 	br	800778 <task1+0x3c>
}
  8009ec:	e037883a 	mov	sp,fp
  8009f0:	dfc00217 	ldw	ra,8(sp)
  8009f4:	df000117 	ldw	fp,4(sp)
  8009f8:	dc000017 	ldw	r16,0(sp)
  8009fc:	dec00304 	addi	sp,sp,12
  800a00:	f800283a 	ret

00800a04 <main>:

/* The main function creates two task and starts multi-tasking */
int main(void) {
  800a04:	defff904 	addi	sp,sp,-28
  800a08:	dfc00615 	stw	ra,24(sp)
  800a0c:	df000515 	stw	fp,20(sp)
  800a10:	df000504 	addi	fp,sp,20

	sem = OSSemCreate(1);
  800a14:	01000044 	movi	r4,1
  800a18:	081bbdc0 	call	81bbdc <OSSemCreate>
  800a1c:	d0a70015 	stw	r2,-25600(gp)
	OSTaskCreateExt(task1, NULL, (void *) &task1_stk[TASK_STACKSIZE - 1],
  800a20:	018020b4 	movhi	r6,130
  800a24:	319d9f04 	addi	r6,r6,30332
  800a28:	00800044 	movi	r2,1
  800a2c:	d8800015 	stw	r2,0(sp)
  800a30:	008020b4 	movhi	r2,130
  800a34:	1095a004 	addi	r2,r2,22144
  800a38:	d8800115 	stw	r2,4(sp)
  800a3c:	00820004 	movi	r2,2048
  800a40:	d8800215 	stw	r2,8(sp)
  800a44:	d8000315 	stw	zero,12(sp)
  800a48:	d8000415 	stw	zero,16(sp)
  800a4c:	01002034 	movhi	r4,128
  800a50:	2101cf04 	addi	r4,r4,1852
  800a54:	000b883a 	mov	r5,zero
  800a58:	01c00044 	movi	r7,1
  800a5c:	081ce2c0 	call	81ce2c <OSTaskCreateExt>
			TASK1_PRIORITY, TASK1_PRIORITY, task1_stk, TASK_STACKSIZE, NULL, 0);


	OSStart();
  800a60:	08170540 	call	817054 <OSStart>
	return 0;
  800a64:	0005883a 	mov	r2,zero
}
  800a68:	e037883a 	mov	sp,fp
  800a6c:	dfc00117 	ldw	ra,4(sp)
  800a70:	df000017 	ldw	fp,0(sp)
  800a74:	dec00204 	addi	sp,sp,8
  800a78:	f800283a 	ret

00800a7c <fabsl>:
  800a7c:	02200034 	movhi	r8,32768
  800a80:	423fffc4 	addi	r8,r8,-1
  800a84:	2a0a703a 	and	r5,r5,r8
  800a88:	2005883a 	mov	r2,r4
  800a8c:	2807883a 	mov	r3,r5
  800a90:	f800283a 	ret

00800a94 <tanhl>:
  800a94:	08020a41 	jmpi	8020a4 <tanh>

00800a98 <tanl>:
  800a98:	0801fbc1 	jmpi	801fbc <tan>

00800a9c <sinhl>:
  800a9c:	08031381 	jmpi	803138 <sinh>

00800aa0 <sinl>:
  800aa0:	0801e501 	jmpi	801e50 <sin>

00800aa4 <powl>:
  800aa4:	0802cb01 	jmpi	802cb0 <pow>

00800aa8 <modfl>:
  800aa8:	defffc04 	addi	sp,sp,-16
  800aac:	dc400215 	stw	r17,8(sp)
  800ab0:	3023883a 	mov	r17,r6
  800ab4:	d80d883a 	mov	r6,sp
  800ab8:	dfc00315 	stw	ra,12(sp)
  800abc:	0801b240 	call	801b24 <modf>
  800ac0:	100d883a 	mov	r6,r2
  800ac4:	d8800117 	ldw	r2,4(sp)
  800ac8:	d9000017 	ldw	r4,0(sp)
  800acc:	88800115 	stw	r2,4(r17)
  800ad0:	3005883a 	mov	r2,r6
  800ad4:	89000015 	stw	r4,0(r17)
  800ad8:	dfc00317 	ldw	ra,12(sp)
  800adc:	dc400217 	ldw	r17,8(sp)
  800ae0:	dec00404 	addi	sp,sp,16
  800ae4:	f800283a 	ret

00800ae8 <log10l>:
  800ae8:	0802b281 	jmpi	802b28 <log10>

00800aec <logl>:
  800aec:	08029a01 	jmpi	8029a0 <log>

00800af0 <ldexpl>:
  800af0:	0801a581 	jmpi	801a58 <ldexp>

00800af4 <hypotf>:
  800af4:	defffb04 	addi	sp,sp,-20
  800af8:	dc000015 	stw	r16,0(sp)
  800afc:	2021883a 	mov	r16,r4
  800b00:	01200034 	movhi	r4,32768
  800b04:	213fffc4 	addi	r4,r4,-1
  800b08:	dcc00315 	stw	r19,12(sp)
  800b0c:	2827883a 	mov	r19,r5
  800b10:	214a703a 	and	r5,r4,r5
  800b14:	2408703a 	and	r4,r4,r16
  800b18:	dfc00415 	stw	ra,16(sp)
  800b1c:	dc800215 	stw	r18,8(sp)
  800b20:	dc400115 	stw	r17,4(sp)
  800b24:	080b1380 	call	80b138 <__addsf3>
  800b28:	1009883a 	mov	r4,r2
  800b2c:	000b883a 	mov	r5,zero
  800b30:	1025883a 	mov	r18,r2
  800b34:	1023883a 	mov	r17,r2
  800b38:	080b4f00 	call	80b4f0 <__eqsf2>
  800b3c:	8009883a 	mov	r4,r16
  800b40:	900b883a 	mov	r5,r18
  800b44:	10001626 	beq	r2,zero,800ba0 <hypotf+0xac>
  800b48:	080b37c0 	call	80b37c <__divsf3>
  800b4c:	9809883a 	mov	r4,r19
  800b50:	900b883a 	mov	r5,r18
  800b54:	1021883a 	mov	r16,r2
  800b58:	080b37c0 	call	80b37c <__divsf3>
  800b5c:	1023883a 	mov	r17,r2
  800b60:	8009883a 	mov	r4,r16
  800b64:	800b883a 	mov	r5,r16
  800b68:	080b19c0 	call	80b19c <__mulsf3>
  800b6c:	8809883a 	mov	r4,r17
  800b70:	880b883a 	mov	r5,r17
  800b74:	1021883a 	mov	r16,r2
  800b78:	080b19c0 	call	80b19c <__mulsf3>
  800b7c:	100b883a 	mov	r5,r2
  800b80:	8009883a 	mov	r4,r16
  800b84:	080b1380 	call	80b138 <__addsf3>
  800b88:	1009883a 	mov	r4,r2
  800b8c:	08033dc0 	call	8033dc <sqrtf>
  800b90:	100b883a 	mov	r5,r2
  800b94:	9009883a 	mov	r4,r18
  800b98:	080b19c0 	call	80b19c <__mulsf3>
  800b9c:	1023883a 	mov	r17,r2
  800ba0:	8805883a 	mov	r2,r17
  800ba4:	dfc00417 	ldw	ra,16(sp)
  800ba8:	dcc00317 	ldw	r19,12(sp)
  800bac:	dc800217 	ldw	r18,8(sp)
  800bb0:	dc400117 	ldw	r17,4(sp)
  800bb4:	dc000017 	ldw	r16,0(sp)
  800bb8:	dec00504 	addi	sp,sp,20
  800bbc:	f800283a 	ret

00800bc0 <sqrtl>:
  800bc0:	08032ac1 	jmpi	8032ac <sqrt>

00800bc4 <hypotl>:
  800bc4:	defff504 	addi	sp,sp,-44
  800bc8:	dc000215 	stw	r16,8(sp)
  800bcc:	2021883a 	mov	r16,r4
  800bd0:	01200034 	movhi	r4,32768
  800bd4:	213fffc4 	addi	r4,r4,-1
  800bd8:	3912703a 	and	r9,r7,r4
  800bdc:	2906703a 	and	r3,r5,r4
  800be0:	dcc00515 	stw	r19,20(sp)
  800be4:	dc400315 	stw	r17,12(sp)
  800be8:	8009883a 	mov	r4,r16
  800bec:	2823883a 	mov	r17,r5
  800bf0:	3827883a 	mov	r19,r7
  800bf4:	180b883a 	mov	r5,r3
  800bf8:	480f883a 	mov	r7,r9
  800bfc:	dfc00a15 	stw	ra,40(sp)
  800c00:	ddc00915 	stw	r23,36(sp)
  800c04:	dd800815 	stw	r22,32(sp)
  800c08:	dc800415 	stw	r18,16(sp)
  800c0c:	dd400715 	stw	r21,28(sp)
  800c10:	3025883a 	mov	r18,r6
  800c14:	dd000615 	stw	r20,24(sp)
  800c18:	080bb840 	call	80bb84 <__adddf3>
  800c1c:	102d883a 	mov	r22,r2
  800c20:	000d883a 	mov	r6,zero
  800c24:	000f883a 	mov	r7,zero
  800c28:	b009883a 	mov	r4,r22
  800c2c:	180b883a 	mov	r5,r3
  800c30:	d8800015 	stw	r2,0(sp)
  800c34:	d8c00115 	stw	r3,4(sp)
  800c38:	182f883a 	mov	r23,r3
  800c3c:	080c2140 	call	80c214 <__eqdf2>
  800c40:	880b883a 	mov	r5,r17
  800c44:	b00d883a 	mov	r6,r22
  800c48:	8009883a 	mov	r4,r16
  800c4c:	d9c00117 	ldw	r7,4(sp)
  800c50:	10002526 	beq	r2,zero,800ce8 <hypotl+0x124>
  800c54:	080bfbc0 	call	80bfbc <__divdf3>
  800c58:	d9c00117 	ldw	r7,4(sp)
  800c5c:	980b883a 	mov	r5,r19
  800c60:	b00d883a 	mov	r6,r22
  800c64:	9009883a 	mov	r4,r18
  800c68:	1827883a 	mov	r19,r3
  800c6c:	1025883a 	mov	r18,r2
  800c70:	080bfbc0 	call	80bfbc <__divdf3>
  800c74:	1029883a 	mov	r20,r2
  800c78:	182b883a 	mov	r21,r3
  800c7c:	9009883a 	mov	r4,r18
  800c80:	980b883a 	mov	r5,r19
  800c84:	900d883a 	mov	r6,r18
  800c88:	980f883a 	mov	r7,r19
  800c8c:	080bbf80 	call	80bbf8 <__muldf3>
  800c90:	a00d883a 	mov	r6,r20
  800c94:	a80f883a 	mov	r7,r21
  800c98:	a009883a 	mov	r4,r20
  800c9c:	a80b883a 	mov	r5,r21
  800ca0:	1021883a 	mov	r16,r2
  800ca4:	1823883a 	mov	r17,r3
  800ca8:	080bbf80 	call	80bbf8 <__muldf3>
  800cac:	180f883a 	mov	r7,r3
  800cb0:	100d883a 	mov	r6,r2
  800cb4:	880b883a 	mov	r5,r17
  800cb8:	8009883a 	mov	r4,r16
  800cbc:	080bb840 	call	80bb84 <__adddf3>
  800cc0:	180b883a 	mov	r5,r3
  800cc4:	1009883a 	mov	r4,r2
  800cc8:	0800bc00 	call	800bc0 <sqrtl>
  800ccc:	d9400117 	ldw	r5,4(sp)
  800cd0:	b009883a 	mov	r4,r22
  800cd4:	180f883a 	mov	r7,r3
  800cd8:	100d883a 	mov	r6,r2
  800cdc:	080bbf80 	call	80bbf8 <__muldf3>
  800ce0:	102d883a 	mov	r22,r2
  800ce4:	182f883a 	mov	r23,r3
  800ce8:	b807883a 	mov	r3,r23
  800cec:	b005883a 	mov	r2,r22
  800cf0:	dfc00a17 	ldw	ra,40(sp)
  800cf4:	ddc00917 	ldw	r23,36(sp)
  800cf8:	dd800817 	ldw	r22,32(sp)
  800cfc:	dd400717 	ldw	r21,28(sp)
  800d00:	dd000617 	ldw	r20,24(sp)
  800d04:	dcc00517 	ldw	r19,20(sp)
  800d08:	dc800417 	ldw	r18,16(sp)
  800d0c:	dc400317 	ldw	r17,12(sp)
  800d10:	dc000217 	ldw	r16,8(sp)
  800d14:	dec00b04 	addi	sp,sp,44
  800d18:	f800283a 	ret

00800d1c <frexpl>:
  800d1c:	08019981 	jmpi	801998 <frexp>

00800d20 <fmodl>:
  800d20:	08028481 	jmpi	802848 <fmod>

00800d24 <floorl>:
  800d24:	08017741 	jmpi	801774 <floor>

00800d28 <expl>:
  800d28:	080269c1 	jmpi	80269c <exp>

00800d2c <coshl>:
  800d2c:	08025541 	jmpi	802554 <cosh>

00800d30 <cosl>:
  800d30:	08015f41 	jmpi	8015f4 <cos>

00800d34 <ceill>:
  800d34:	08013e01 	jmpi	8013e0 <ceil>

00800d38 <atan2l>:
  800d38:	08025501 	jmpi	802550 <atan2>

00800d3c <atanl>:
  800d3c:	0800d481 	jmpi	800d48 <atan>

00800d40 <asinl>:
  800d40:	08024201 	jmpi	802420 <asin>

00800d44 <acosl>:
  800d44:	08022f01 	jmpi	8022f0 <acos>

00800d48 <atan>:
  800d48:	defff304 	addi	sp,sp,-52
  800d4c:	00a00034 	movhi	r2,32768
  800d50:	10bfffc4 	addi	r2,r2,-1
  800d54:	dc000315 	stw	r16,12(sp)
  800d58:	28a0703a 	and	r16,r5,r2
  800d5c:	00910434 	movhi	r2,17424
  800d60:	10bfffc4 	addi	r2,r2,-1
  800d64:	df000b15 	stw	fp,44(sp)
  800d68:	dfc00c15 	stw	ra,48(sp)
  800d6c:	ddc00a15 	stw	r23,40(sp)
  800d70:	dd800915 	stw	r22,36(sp)
  800d74:	dd400815 	stw	r21,32(sp)
  800d78:	dd000715 	stw	r20,28(sp)
  800d7c:	dcc00615 	stw	r19,24(sp)
  800d80:	dc800515 	stw	r18,20(sp)
  800d84:	dc400415 	stw	r17,16(sp)
  800d88:	d9000115 	stw	r4,4(sp)
  800d8c:	d9400215 	stw	r5,8(sp)
  800d90:	2839883a 	mov	fp,r5
  800d94:	1400190e 	bge	r2,r16,800dfc <atan+0xb4>
  800d98:	2005883a 	mov	r2,r4
  800d9c:	011ffc34 	movhi	r4,32752
  800da0:	2400eb0e 	bge	r4,r16,801150 <atan+0x408>
  800da4:	d9000117 	ldw	r4,4(sp)
  800da8:	d9c00217 	ldw	r7,8(sp)
  800dac:	200d883a 	mov	r6,r4
  800db0:	080bb840 	call	80bb84 <__adddf3>
  800db4:	d8800115 	stw	r2,4(sp)
  800db8:	d8c00215 	stw	r3,8(sp)
  800dbc:	d9000117 	ldw	r4,4(sp)
  800dc0:	2005883a 	mov	r2,r4
  800dc4:	d9000217 	ldw	r4,8(sp)
  800dc8:	2007883a 	mov	r3,r4
  800dcc:	dfc00c17 	ldw	ra,48(sp)
  800dd0:	df000b17 	ldw	fp,44(sp)
  800dd4:	ddc00a17 	ldw	r23,40(sp)
  800dd8:	dd800917 	ldw	r22,36(sp)
  800ddc:	dd400817 	ldw	r21,32(sp)
  800de0:	dd000717 	ldw	r20,28(sp)
  800de4:	dcc00617 	ldw	r19,24(sp)
  800de8:	dc800517 	ldw	r18,20(sp)
  800dec:	dc400417 	ldw	r17,16(sp)
  800df0:	dc000317 	ldw	r16,12(sp)
  800df4:	dec00d04 	addi	sp,sp,52
  800df8:	f800283a 	ret
  800dfc:	008ff734 	movhi	r2,16348
  800e00:	10bfffc4 	addi	r2,r2,-1
  800e04:	1400ec16 	blt	r2,r16,8011b8 <atan+0x470>
  800e08:	008f8834 	movhi	r2,15904
  800e0c:	10bfffc4 	addi	r2,r2,-1
  800e10:	1400d80e 	bge	r2,r16,801174 <atan+0x42c>
  800e14:	00bfffc4 	movi	r2,-1
  800e18:	d8800015 	stw	r2,0(sp)
  800e1c:	d9000117 	ldw	r4,4(sp)
  800e20:	d9400217 	ldw	r5,8(sp)
  800e24:	200d883a 	mov	r6,r4
  800e28:	280f883a 	mov	r7,r5
  800e2c:	080bbf80 	call	80bbf8 <__muldf3>
  800e30:	1009883a 	mov	r4,r2
  800e34:	180b883a 	mov	r5,r3
  800e38:	100d883a 	mov	r6,r2
  800e3c:	180f883a 	mov	r7,r3
  800e40:	1025883a 	mov	r18,r2
  800e44:	1827883a 	mov	r19,r3
  800e48:	080bbf80 	call	80bbf8 <__muldf3>
  800e4c:	1021883a 	mov	r16,r2
  800e50:	1823883a 	mov	r17,r3
  800e54:	00b8c8f4 	movhi	r2,58147
  800e58:	10b68444 	addi	r2,r2,-9711
  800e5c:	00cfe474 	movhi	r3,16273
  800e60:	18eb4e84 	addi	r3,r3,-21190
  800e64:	180f883a 	mov	r7,r3
  800e68:	8009883a 	mov	r4,r16
  800e6c:	880b883a 	mov	r5,r17
  800e70:	100d883a 	mov	r6,r2
  800e74:	080bbf80 	call	80bbf8 <__muldf3>
  800e78:	02091db4 	movhi	r8,9334
  800e7c:	42037ac4 	addi	r8,r8,3563
  800e80:	024fea74 	movhi	r9,16297
  800e84:	4a5ed2c4 	addi	r9,r9,31563
  800e88:	480f883a 	mov	r7,r9
  800e8c:	400d883a 	mov	r6,r8
  800e90:	180b883a 	mov	r5,r3
  800e94:	1009883a 	mov	r4,r2
  800e98:	080bb840 	call	80bb84 <__adddf3>
  800e9c:	180f883a 	mov	r7,r3
  800ea0:	8009883a 	mov	r4,r16
  800ea4:	880b883a 	mov	r5,r17
  800ea8:	100d883a 	mov	r6,r2
  800eac:	080bbf80 	call	80bbf8 <__muldf3>
  800eb0:	02283434 	movhi	r8,41168
  800eb4:	420f5444 	addi	r8,r8,15697
  800eb8:	024fec74 	movhi	r9,16305
  800ebc:	4a435984 	addi	r9,r9,3430
  800ec0:	480f883a 	mov	r7,r9
  800ec4:	400d883a 	mov	r6,r8
  800ec8:	180b883a 	mov	r5,r3
  800ecc:	1009883a 	mov	r4,r2
  800ed0:	080bb840 	call	80bb84 <__adddf3>
  800ed4:	180f883a 	mov	r7,r3
  800ed8:	8009883a 	mov	r4,r16
  800edc:	880b883a 	mov	r5,r17
  800ee0:	100d883a 	mov	r6,r2
  800ee4:	080bbf80 	call	80bbf8 <__muldf3>
  800ee8:	02315334 	movhi	r8,50508
  800eec:	42081b84 	addi	r8,r8,8302
  800ef0:	024fedf4 	movhi	r9,16311
  800ef4:	4a517344 	addi	r9,r9,17869
  800ef8:	480f883a 	mov	r7,r9
  800efc:	400d883a 	mov	r6,r8
  800f00:	180b883a 	mov	r5,r3
  800f04:	1009883a 	mov	r4,r2
  800f08:	080bb840 	call	80bb84 <__adddf3>
  800f0c:	180f883a 	mov	r7,r3
  800f10:	8009883a 	mov	r4,r16
  800f14:	880b883a 	mov	r5,r17
  800f18:	100d883a 	mov	r6,r2
  800f1c:	080bbf80 	call	80bbf8 <__muldf3>
  800f20:	02248074 	movhi	r8,37377
  800f24:	4220ffc4 	addi	r8,r8,-31745
  800f28:	024ff0b4 	movhi	r9,16322
  800f2c:	4a524904 	addi	r9,r9,18724
  800f30:	480f883a 	mov	r7,r9
  800f34:	400d883a 	mov	r6,r8
  800f38:	180b883a 	mov	r5,r3
  800f3c:	1009883a 	mov	r4,r2
  800f40:	080bb840 	call	80bb84 <__adddf3>
  800f44:	180f883a 	mov	r7,r3
  800f48:	8009883a 	mov	r4,r16
  800f4c:	880b883a 	mov	r5,r17
  800f50:	100d883a 	mov	r6,r2
  800f54:	080bbf80 	call	80bbf8 <__muldf3>
  800f58:	02155574 	movhi	r8,21845
  800f5c:	42154344 	addi	r8,r8,21773
  800f60:	024ff574 	movhi	r9,16341
  800f64:	4a555544 	addi	r9,r9,21845
  800f68:	480f883a 	mov	r7,r9
  800f6c:	400d883a 	mov	r6,r8
  800f70:	180b883a 	mov	r5,r3
  800f74:	1009883a 	mov	r4,r2
  800f78:	080bb840 	call	80bb84 <__adddf3>
  800f7c:	180f883a 	mov	r7,r3
  800f80:	9009883a 	mov	r4,r18
  800f84:	980b883a 	mov	r5,r19
  800f88:	100d883a 	mov	r6,r2
  800f8c:	080bbf80 	call	80bbf8 <__muldf3>
  800f90:	020b1ab4 	movhi	r8,11370
  800f94:	421b0bc4 	addi	r8,r8,27695
  800f98:	026fe8f4 	movhi	r9,49059
  800f9c:	4a6d1104 	addi	r9,r9,-19388
  800fa0:	480f883a 	mov	r7,r9
  800fa4:	400d883a 	mov	r6,r8
  800fa8:	8009883a 	mov	r4,r16
  800fac:	880b883a 	mov	r5,r17
  800fb0:	102d883a 	mov	r22,r2
  800fb4:	182f883a 	mov	r23,r3
  800fb8:	080bbf80 	call	80bbf8 <__muldf3>
  800fbc:	0214b7f4 	movhi	r8,21215
  800fc0:	423f6684 	addi	r8,r8,-614
  800fc4:	024febb4 	movhi	r9,16302
  800fc8:	4a778b44 	addi	r9,r9,-8659
  800fcc:	480f883a 	mov	r7,r9
  800fd0:	400d883a 	mov	r6,r8
  800fd4:	180b883a 	mov	r5,r3
  800fd8:	1009883a 	mov	r4,r2
  800fdc:	080bb040 	call	80bb04 <__subdf3>
  800fe0:	180f883a 	mov	r7,r3
  800fe4:	8009883a 	mov	r4,r16
  800fe8:	880b883a 	mov	r5,r17
  800fec:	100d883a 	mov	r6,r2
  800ff0:	080bbf80 	call	80bbf8 <__muldf3>
  800ff4:	022bdd74 	movhi	r8,44917
  800ff8:	42269b44 	addi	r8,r8,-26003
  800ffc:	024fed34 	movhi	r9,16308
  801000:	4a6c3c84 	addi	r9,r9,-20238
  801004:	480f883a 	mov	r7,r9
  801008:	400d883a 	mov	r6,r8
  80100c:	180b883a 	mov	r5,r3
  801010:	1009883a 	mov	r4,r2
  801014:	080bb040 	call	80bb04 <__subdf3>
  801018:	180f883a 	mov	r7,r3
  80101c:	8009883a 	mov	r4,r16
  801020:	880b883a 	mov	r5,r17
  801024:	100d883a 	mov	r6,r2
  801028:	080bbf80 	call	80bbf8 <__muldf3>
  80102c:	023f88f4 	movhi	r8,65059
  801030:	42059c44 	addi	r8,r8,5745
  801034:	024fef34 	movhi	r9,16316
  801038:	4a5c7184 	addi	r9,r9,29126
  80103c:	480f883a 	mov	r7,r9
  801040:	400d883a 	mov	r6,r8
  801044:	180b883a 	mov	r5,r3
  801048:	1009883a 	mov	r4,r2
  80104c:	080bb040 	call	80bb04 <__subdf3>
  801050:	180f883a 	mov	r7,r3
  801054:	8009883a 	mov	r4,r16
  801058:	880b883a 	mov	r5,r17
  80105c:	100d883a 	mov	r6,r2
  801060:	080bbf80 	call	80bbf8 <__muldf3>
  801064:	02266674 	movhi	r8,39321
  801068:	423af104 	addi	r8,r8,-5180
  80106c:	024ff2b4 	movhi	r9,16330
  801070:	4a666644 	addi	r9,r9,-26215
  801074:	480f883a 	mov	r7,r9
  801078:	400d883a 	mov	r6,r8
  80107c:	180b883a 	mov	r5,r3
  801080:	1009883a 	mov	r4,r2
  801084:	080bb040 	call	80bb04 <__subdf3>
  801088:	180f883a 	mov	r7,r3
  80108c:	8009883a 	mov	r4,r16
  801090:	880b883a 	mov	r5,r17
  801094:	100d883a 	mov	r6,r2
  801098:	080bbf80 	call	80bbf8 <__muldf3>
  80109c:	100f883a 	mov	r7,r2
  8010a0:	d8800017 	ldw	r2,0(sp)
  8010a4:	b009883a 	mov	r4,r22
  8010a8:	b80b883a 	mov	r5,r23
  8010ac:	10006b16 	blt	r2,zero,80125c <atan+0x514>
  8010b0:	d8800017 	ldw	r2,0(sp)
  8010b4:	380d883a 	mov	r6,r7
  8010b8:	b80b883a 	mov	r5,r23
  8010bc:	102490fa 	slli	r18,r2,3
  8010c0:	008020b4 	movhi	r2,130
  8010c4:	1085ee04 	addi	r2,r2,6072
  8010c8:	180f883a 	mov	r7,r3
  8010cc:	9085883a 	add	r2,r18,r2
  8010d0:	14000017 	ldw	r16,0(r2)
  8010d4:	14400117 	ldw	r17,4(r2)
  8010d8:	080bb840 	call	80bb84 <__adddf3>
  8010dc:	d9000117 	ldw	r4,4(sp)
  8010e0:	d9400217 	ldw	r5,8(sp)
  8010e4:	180f883a 	mov	r7,r3
  8010e8:	100d883a 	mov	r6,r2
  8010ec:	080bbf80 	call	80bbf8 <__muldf3>
  8010f0:	010020b4 	movhi	r4,130
  8010f4:	2105f604 	addi	r4,r4,6104
  8010f8:	9125883a 	add	r18,r18,r4
  8010fc:	92000017 	ldw	r8,0(r18)
  801100:	92400117 	ldw	r9,4(r18)
  801104:	180b883a 	mov	r5,r3
  801108:	400d883a 	mov	r6,r8
  80110c:	480f883a 	mov	r7,r9
  801110:	1009883a 	mov	r4,r2
  801114:	080bb040 	call	80bb04 <__subdf3>
  801118:	d9c00217 	ldw	r7,8(sp)
  80111c:	d9800117 	ldw	r6,4(sp)
  801120:	180b883a 	mov	r5,r3
  801124:	1009883a 	mov	r4,r2
  801128:	080bb040 	call	80bb04 <__subdf3>
  80112c:	180f883a 	mov	r7,r3
  801130:	880b883a 	mov	r5,r17
  801134:	8009883a 	mov	r4,r16
  801138:	100d883a 	mov	r6,r2
  80113c:	080bb040 	call	80bb04 <__subdf3>
  801140:	e0003f16 	blt	fp,zero,801240 <atan+0x4f8>
  801144:	d8800115 	stw	r2,4(sp)
  801148:	d8c00215 	stw	r3,8(sp)
  80114c:	003f1b06 	br	800dbc <atan+0x74>
  801150:	81003f26 	beq	r16,r4,801250 <atan+0x508>
  801154:	07005e0e 	bge	zero,fp,8012d0 <atan+0x588>
  801158:	01151134 	movhi	r4,21572
  80115c:	210b4604 	addi	r4,r4,11544
  801160:	008ffe74 	movhi	r2,16377
  801164:	10887ec4 	addi	r2,r2,8699
  801168:	d9000115 	stw	r4,4(sp)
  80116c:	d8800215 	stw	r2,8(sp)
  801170:	003f1206 	br	800dbc <atan+0x74>
  801174:	d9000117 	ldw	r4,4(sp)
  801178:	00a20034 	movhi	r2,34816
  80117c:	109d6704 	addi	r2,r2,30108
  801180:	00df8e34 	movhi	r3,32312
  801184:	18f90f04 	addi	r3,r3,-7108
  801188:	180f883a 	mov	r7,r3
  80118c:	100d883a 	mov	r6,r2
  801190:	080bb840 	call	80bb84 <__adddf3>
  801194:	0011883a 	mov	r8,zero
  801198:	024ffc34 	movhi	r9,16368
  80119c:	180b883a 	mov	r5,r3
  8011a0:	480f883a 	mov	r7,r9
  8011a4:	1009883a 	mov	r4,r2
  8011a8:	400d883a 	mov	r6,r8
  8011ac:	080c3240 	call	80c324 <__gtdf2>
  8011b0:	00bf0216 	blt	zero,r2,800dbc <atan+0x74>
  8011b4:	003f1706 	br	800e14 <atan+0xcc>
  8011b8:	d9000117 	ldw	r4,4(sp)
  8011bc:	080175c0 	call	80175c <fabs>
  8011c0:	102d883a 	mov	r22,r2
  8011c4:	008ffcf4 	movhi	r2,16371
  8011c8:	10bfffc4 	addi	r2,r2,-1
  8011cc:	182f883a 	mov	r23,r3
  8011d0:	14003016 	blt	r2,r16,801294 <atan+0x54c>
  8011d4:	008ff9b4 	movhi	r2,16358
  8011d8:	10bfffc4 	addi	r2,r2,-1
  8011dc:	1400430e 	bge	r2,r16,8012ec <atan+0x5a4>
  8011e0:	044ffc34 	movhi	r17,16368
  8011e4:	0021883a 	mov	r16,zero
  8011e8:	800d883a 	mov	r6,r16
  8011ec:	880f883a 	mov	r7,r17
  8011f0:	b009883a 	mov	r4,r22
  8011f4:	180b883a 	mov	r5,r3
  8011f8:	080bb040 	call	80bb04 <__subdf3>
  8011fc:	880f883a 	mov	r7,r17
  801200:	000d883a 	mov	r6,zero
  801204:	b80b883a 	mov	r5,r23
  801208:	b009883a 	mov	r4,r22
  80120c:	1021883a 	mov	r16,r2
  801210:	1823883a 	mov	r17,r3
  801214:	080bb840 	call	80bb84 <__adddf3>
  801218:	180f883a 	mov	r7,r3
  80121c:	8009883a 	mov	r4,r16
  801220:	880b883a 	mov	r5,r17
  801224:	100d883a 	mov	r6,r2
  801228:	080bfbc0 	call	80bfbc <__divdf3>
  80122c:	01000044 	movi	r4,1
  801230:	d8800115 	stw	r2,4(sp)
  801234:	d8c00215 	stw	r3,8(sp)
  801238:	d9000015 	stw	r4,0(sp)
  80123c:	003ef706 	br	800e1c <atan+0xd4>
  801240:	18e0003c 	xorhi	r3,r3,32768
  801244:	d8800115 	stw	r2,4(sp)
  801248:	d8c00215 	stw	r3,8(sp)
  80124c:	003edb06 	br	800dbc <atan+0x74>
  801250:	103ed41e 	bne	r2,zero,800da4 <atan+0x5c>
  801254:	073fc016 	blt	zero,fp,801158 <atan+0x410>
  801258:	00001d06 	br	8012d0 <atan+0x588>
  80125c:	380d883a 	mov	r6,r7
  801260:	180f883a 	mov	r7,r3
  801264:	080bb840 	call	80bb84 <__adddf3>
  801268:	d9000117 	ldw	r4,4(sp)
  80126c:	d9400217 	ldw	r5,8(sp)
  801270:	180f883a 	mov	r7,r3
  801274:	100d883a 	mov	r6,r2
  801278:	080bbf80 	call	80bbf8 <__muldf3>
  80127c:	d9400217 	ldw	r5,8(sp)
  801280:	d9000117 	ldw	r4,4(sp)
  801284:	180f883a 	mov	r7,r3
  801288:	100d883a 	mov	r6,r2
  80128c:	080bb040 	call	80bb04 <__subdf3>
  801290:	003ec806 	br	800db4 <atan+0x6c>
  801294:	009000f4 	movhi	r2,16387
  801298:	109fffc4 	addi	r2,r2,32767
  80129c:	1400310e 	bge	r2,r16,801364 <atan+0x61c>
  8012a0:	0005883a 	mov	r2,zero
  8012a4:	00effc34 	movhi	r3,49136
  8012a8:	1009883a 	mov	r4,r2
  8012ac:	180b883a 	mov	r5,r3
  8012b0:	b80f883a 	mov	r7,r23
  8012b4:	b00d883a 	mov	r6,r22
  8012b8:	080bfbc0 	call	80bfbc <__divdf3>
  8012bc:	010000c4 	movi	r4,3
  8012c0:	d8800115 	stw	r2,4(sp)
  8012c4:	d8c00215 	stw	r3,8(sp)
  8012c8:	d9000015 	stw	r4,0(sp)
  8012cc:	003ed306 	br	800e1c <atan+0xd4>
  8012d0:	01151134 	movhi	r4,21572
  8012d4:	210b4604 	addi	r4,r4,11544
  8012d8:	00affe74 	movhi	r2,49145
  8012dc:	10887ec4 	addi	r2,r2,8699
  8012e0:	d9000115 	stw	r4,4(sp)
  8012e4:	d8800215 	stw	r2,8(sp)
  8012e8:	003eb406 	br	800dbc <atan+0x74>
  8012ec:	b009883a 	mov	r4,r22
  8012f0:	180b883a 	mov	r5,r3
  8012f4:	b00d883a 	mov	r6,r22
  8012f8:	180f883a 	mov	r7,r3
  8012fc:	080bb840 	call	80bb84 <__adddf3>
  801300:	0011883a 	mov	r8,zero
  801304:	024ffc34 	movhi	r9,16368
  801308:	480f883a 	mov	r7,r9
  80130c:	400d883a 	mov	r6,r8
  801310:	180b883a 	mov	r5,r3
  801314:	1009883a 	mov	r4,r2
  801318:	080bb040 	call	80bb04 <__subdf3>
  80131c:	0011883a 	mov	r8,zero
  801320:	02500034 	movhi	r9,16384
  801324:	480f883a 	mov	r7,r9
  801328:	400d883a 	mov	r6,r8
  80132c:	b80b883a 	mov	r5,r23
  801330:	b009883a 	mov	r4,r22
  801334:	1021883a 	mov	r16,r2
  801338:	1823883a 	mov	r17,r3
  80133c:	080bb840 	call	80bb84 <__adddf3>
  801340:	180f883a 	mov	r7,r3
  801344:	880b883a 	mov	r5,r17
  801348:	8009883a 	mov	r4,r16
  80134c:	100d883a 	mov	r6,r2
  801350:	080bfbc0 	call	80bfbc <__divdf3>
  801354:	d8800115 	stw	r2,4(sp)
  801358:	d8c00215 	stw	r3,8(sp)
  80135c:	d8000015 	stw	zero,0(sp)
  801360:	003eae06 	br	800e1c <atan+0xd4>
  801364:	044ffe34 	movhi	r17,16376
  801368:	0021883a 	mov	r16,zero
  80136c:	800d883a 	mov	r6,r16
  801370:	880f883a 	mov	r7,r17
  801374:	b009883a 	mov	r4,r22
  801378:	180b883a 	mov	r5,r3
  80137c:	080bb040 	call	80bb04 <__subdf3>
  801380:	880f883a 	mov	r7,r17
  801384:	000d883a 	mov	r6,zero
  801388:	b80b883a 	mov	r5,r23
  80138c:	b009883a 	mov	r4,r22
  801390:	1021883a 	mov	r16,r2
  801394:	1823883a 	mov	r17,r3
  801398:	080bbf80 	call	80bbf8 <__muldf3>
  80139c:	0011883a 	mov	r8,zero
  8013a0:	024ffc34 	movhi	r9,16368
  8013a4:	480f883a 	mov	r7,r9
  8013a8:	400d883a 	mov	r6,r8
  8013ac:	180b883a 	mov	r5,r3
  8013b0:	1009883a 	mov	r4,r2
  8013b4:	080bb840 	call	80bb84 <__adddf3>
  8013b8:	180f883a 	mov	r7,r3
  8013bc:	8009883a 	mov	r4,r16
  8013c0:	880b883a 	mov	r5,r17
  8013c4:	100d883a 	mov	r6,r2
  8013c8:	080bfbc0 	call	80bfbc <__divdf3>
  8013cc:	01000084 	movi	r4,2
  8013d0:	d8800115 	stw	r2,4(sp)
  8013d4:	d8c00215 	stw	r3,8(sp)
  8013d8:	d9000015 	stw	r4,0(sp)
  8013dc:	003e8f06 	br	800e1c <atan+0xd4>

008013e0 <ceil>:
  8013e0:	2805d53a 	srai	r2,r5,20
  8013e4:	defff604 	addi	sp,sp,-40
  8013e8:	dd800615 	stw	r22,24(sp)
  8013ec:	10c1ffcc 	andi	r3,r2,2047
  8013f0:	1dbf0044 	addi	r22,r3,-1023
  8013f4:	008004c4 	movi	r2,19
  8013f8:	ddc00715 	stw	r23,28(sp)
  8013fc:	dc800215 	stw	r18,8(sp)
  801400:	dc400115 	stw	r17,4(sp)
  801404:	dc000015 	stw	r16,0(sp)
  801408:	dfc00915 	stw	ra,36(sp)
  80140c:	df000815 	stw	fp,32(sp)
  801410:	dd400515 	stw	r21,20(sp)
  801414:	dd000415 	stw	r20,16(sp)
  801418:	dcc00315 	stw	r19,12(sp)
  80141c:	2021883a 	mov	r16,r4
  801420:	2823883a 	mov	r17,r5
  801424:	282f883a 	mov	r23,r5
  801428:	2025883a 	mov	r18,r4
  80142c:	15802c16 	blt	r2,r22,8014e0 <ceil+0x100>
  801430:	b0005416 	blt	r22,zero,801584 <ceil+0x1a4>
  801434:	00800434 	movhi	r2,16
  801438:	10bfffc4 	addi	r2,r2,-1
  80143c:	15b9d83a 	sra	fp,r2,r22
  801440:	282f883a 	mov	r23,r5
  801444:	e144703a 	and	r2,fp,r5
  801448:	1104b03a 	or	r2,r2,r4
  80144c:	10001626 	beq	r2,zero,8014a8 <ceil+0xc8>
  801450:	00a20034 	movhi	r2,34816
  801454:	109d6704 	addi	r2,r2,30108
  801458:	00df8e34 	movhi	r3,32312
  80145c:	18f90f04 	addi	r3,r3,-7108
  801460:	180f883a 	mov	r7,r3
  801464:	100d883a 	mov	r6,r2
  801468:	080bb840 	call	80bb84 <__adddf3>
  80146c:	180b883a 	mov	r5,r3
  801470:	000d883a 	mov	r6,zero
  801474:	000f883a 	mov	r7,zero
  801478:	1009883a 	mov	r4,r2
  80147c:	080c3240 	call	80c324 <__gtdf2>
  801480:	0080070e 	bge	zero,r2,8014a0 <ceil+0xc0>
  801484:	0440030e 	bge	zero,r17,801494 <ceil+0xb4>
  801488:	00800434 	movhi	r2,16
  80148c:	1585d83a 	sra	r2,r2,r22
  801490:	88af883a 	add	r23,r17,r2
  801494:	0704303a 	nor	r2,zero,fp
  801498:	b8ae703a 	and	r23,r23,r2
  80149c:	0025883a 	mov	r18,zero
  8014a0:	9021883a 	mov	r16,r18
  8014a4:	b823883a 	mov	r17,r23
  8014a8:	8005883a 	mov	r2,r16
  8014ac:	8807883a 	mov	r3,r17
  8014b0:	dfc00917 	ldw	ra,36(sp)
  8014b4:	df000817 	ldw	fp,32(sp)
  8014b8:	ddc00717 	ldw	r23,28(sp)
  8014bc:	dd800617 	ldw	r22,24(sp)
  8014c0:	dd400517 	ldw	r21,20(sp)
  8014c4:	dd000417 	ldw	r20,16(sp)
  8014c8:	dcc00317 	ldw	r19,12(sp)
  8014cc:	dc800217 	ldw	r18,8(sp)
  8014d0:	dc400117 	ldw	r17,4(sp)
  8014d4:	dc000017 	ldw	r16,0(sp)
  8014d8:	dec00a04 	addi	sp,sp,40
  8014dc:	f800283a 	ret
  8014e0:	00800cc4 	movi	r2,51
  8014e4:	15801f16 	blt	r2,r22,801564 <ceil+0x184>
  8014e8:	18befb44 	addi	r2,r3,-1043
  8014ec:	00ffffc4 	movi	r3,-1
  8014f0:	18b8d83a 	srl	fp,r3,r2
  8014f4:	e104703a 	and	r2,fp,r4
  8014f8:	103feb26 	beq	r2,zero,8014a8 <ceil+0xc8>
  8014fc:	00a20034 	movhi	r2,34816
  801500:	109d6704 	addi	r2,r2,30108
  801504:	00df8e34 	movhi	r3,32312
  801508:	18f90f04 	addi	r3,r3,-7108
  80150c:	180f883a 	mov	r7,r3
  801510:	100d883a 	mov	r6,r2
  801514:	080bb840 	call	80bb84 <__adddf3>
  801518:	180b883a 	mov	r5,r3
  80151c:	000d883a 	mov	r6,zero
  801520:	000f883a 	mov	r7,zero
  801524:	1009883a 	mov	r4,r2
  801528:	080c3240 	call	80c324 <__gtdf2>
  80152c:	0080250e 	bge	zero,r2,8015c4 <ceil+0x1e4>
  801530:	0440090e 	bge	zero,r17,801558 <ceil+0x178>
  801534:	00800504 	movi	r2,20
  801538:	b0802926 	beq	r22,r2,8015e0 <ceil+0x200>
  80153c:	00c00d04 	movi	r3,52
  801540:	1d87c83a 	sub	r3,r3,r22
  801544:	00800044 	movi	r2,1
  801548:	10c4983a 	sll	r2,r2,r3
  80154c:	8085883a 	add	r2,r16,r2
  801550:	14001e36 	bltu	r2,r16,8015cc <ceil+0x1ec>
  801554:	1025883a 	mov	r18,r2
  801558:	0704303a 	nor	r2,zero,fp
  80155c:	90a4703a 	and	r18,r18,r2
  801560:	003fcf06 	br	8014a0 <ceil+0xc0>
  801564:	00810004 	movi	r2,1024
  801568:	b0bfcf1e 	bne	r22,r2,8014a8 <ceil+0xc8>
  80156c:	800d883a 	mov	r6,r16
  801570:	280f883a 	mov	r7,r5
  801574:	080bb840 	call	80bb84 <__adddf3>
  801578:	1021883a 	mov	r16,r2
  80157c:	1823883a 	mov	r17,r3
  801580:	003fc906 	br	8014a8 <ceil+0xc8>
  801584:	00a20034 	movhi	r2,34816
  801588:	109d6704 	addi	r2,r2,30108
  80158c:	00df8e34 	movhi	r3,32312
  801590:	18f90f04 	addi	r3,r3,-7108
  801594:	180f883a 	mov	r7,r3
  801598:	100d883a 	mov	r6,r2
  80159c:	080bb840 	call	80bb84 <__adddf3>
  8015a0:	180b883a 	mov	r5,r3
  8015a4:	000d883a 	mov	r6,zero
  8015a8:	000f883a 	mov	r7,zero
  8015ac:	1009883a 	mov	r4,r2
  8015b0:	080c3240 	call	80c324 <__gtdf2>
  8015b4:	00bfba0e 	bge	zero,r2,8014a0 <ceil+0xc0>
  8015b8:	88000b16 	blt	r17,zero,8015e8 <ceil+0x208>
  8015bc:	8c04b03a 	or	r2,r17,r16
  8015c0:	1000041e 	bne	r2,zero,8015d4 <ceil+0x1f4>
  8015c4:	882f883a 	mov	r23,r17
  8015c8:	003fb506 	br	8014a0 <ceil+0xc0>
  8015cc:	8dc00044 	addi	r23,r17,1
  8015d0:	003fe006 	br	801554 <ceil+0x174>
  8015d4:	05cffc34 	movhi	r23,16368
  8015d8:	0025883a 	mov	r18,zero
  8015dc:	003fb006 	br	8014a0 <ceil+0xc0>
  8015e0:	8dc00044 	addi	r23,r17,1
  8015e4:	003fdc06 	br	801558 <ceil+0x178>
  8015e8:	05e00034 	movhi	r23,32768
  8015ec:	0025883a 	mov	r18,zero
  8015f0:	003fab06 	br	8014a0 <ceil+0xc0>

008015f4 <cos>:
  8015f4:	00a00034 	movhi	r2,32768
  8015f8:	10bfffc4 	addi	r2,r2,-1
  8015fc:	defffa04 	addi	sp,sp,-24
  801600:	114c703a 	and	r6,r2,r5
  801604:	008ffa74 	movhi	r2,16361
  801608:	10887ec4 	addi	r2,r2,8699
  80160c:	dfc00515 	stw	ra,20(sp)
  801610:	2011883a 	mov	r8,r4
  801614:	1180210e 	bge	r2,r6,80169c <cos+0xa8>
  801618:	009ffc34 	movhi	r2,32752
  80161c:	10bfffc4 	addi	r2,r2,-1
  801620:	11800a0e 	bge	r2,r6,80164c <cos+0x58>
  801624:	280f883a 	mov	r7,r5
  801628:	400d883a 	mov	r6,r8
  80162c:	080bb040 	call	80bb04 <__subdf3>
  801630:	100d883a 	mov	r6,r2
  801634:	180f883a 	mov	r7,r3
  801638:	3005883a 	mov	r2,r6
  80163c:	3807883a 	mov	r3,r7
  801640:	dfc00517 	ldw	ra,20(sp)
  801644:	dec00604 	addi	sp,sp,24
  801648:	f800283a 	ret
  80164c:	d9800104 	addi	r6,sp,4
  801650:	08074880 	call	807488 <__ieee754_rem_pio2>
  801654:	10c000cc 	andi	r3,r2,3
  801658:	01000044 	movi	r4,1
  80165c:	19001926 	beq	r3,r4,8016c4 <cos+0xd0>
  801660:	00800084 	movi	r2,2
  801664:	18803126 	beq	r3,r2,80172c <cos+0x138>
  801668:	1800231e 	bne	r3,zero,8016f8 <cos+0x104>
  80166c:	d8800117 	ldw	r2,4(sp)
  801670:	da000317 	ldw	r8,12(sp)
  801674:	d8c00217 	ldw	r3,8(sp)
  801678:	da400417 	ldw	r9,16(sp)
  80167c:	400d883a 	mov	r6,r8
  801680:	180b883a 	mov	r5,r3
  801684:	480f883a 	mov	r7,r9
  801688:	1009883a 	mov	r4,r2
  80168c:	08083dc0 	call	8083dc <__kernel_cos>
  801690:	100d883a 	mov	r6,r2
  801694:	180f883a 	mov	r7,r3
  801698:	003fe706 	br	801638 <cos+0x44>
  80169c:	000d883a 	mov	r6,zero
  8016a0:	000f883a 	mov	r7,zero
  8016a4:	08083dc0 	call	8083dc <__kernel_cos>
  8016a8:	100d883a 	mov	r6,r2
  8016ac:	180f883a 	mov	r7,r3
  8016b0:	3005883a 	mov	r2,r6
  8016b4:	3807883a 	mov	r3,r7
  8016b8:	dfc00517 	ldw	ra,20(sp)
  8016bc:	dec00604 	addi	sp,sp,24
  8016c0:	f800283a 	ret
  8016c4:	d8800117 	ldw	r2,4(sp)
  8016c8:	da000317 	ldw	r8,12(sp)
  8016cc:	d8c00217 	ldw	r3,8(sp)
  8016d0:	da400417 	ldw	r9,16(sp)
  8016d4:	d9000015 	stw	r4,0(sp)
  8016d8:	400d883a 	mov	r6,r8
  8016dc:	480f883a 	mov	r7,r9
  8016e0:	180b883a 	mov	r5,r3
  8016e4:	1009883a 	mov	r4,r2
  8016e8:	080978c0 	call	80978c <__kernel_sin>
  8016ec:	100d883a 	mov	r6,r2
  8016f0:	19e0003c 	xorhi	r7,r3,32768
  8016f4:	003fd006 	br	801638 <cos+0x44>
  8016f8:	d8800117 	ldw	r2,4(sp)
  8016fc:	da000317 	ldw	r8,12(sp)
  801700:	d8c00217 	ldw	r3,8(sp)
  801704:	da400417 	ldw	r9,16(sp)
  801708:	d9000015 	stw	r4,0(sp)
  80170c:	400d883a 	mov	r6,r8
  801710:	480f883a 	mov	r7,r9
  801714:	180b883a 	mov	r5,r3
  801718:	1009883a 	mov	r4,r2
  80171c:	080978c0 	call	80978c <__kernel_sin>
  801720:	100d883a 	mov	r6,r2
  801724:	180f883a 	mov	r7,r3
  801728:	003fc306 	br	801638 <cos+0x44>
  80172c:	d8800117 	ldw	r2,4(sp)
  801730:	da000317 	ldw	r8,12(sp)
  801734:	d8c00217 	ldw	r3,8(sp)
  801738:	da400417 	ldw	r9,16(sp)
  80173c:	400d883a 	mov	r6,r8
  801740:	180b883a 	mov	r5,r3
  801744:	480f883a 	mov	r7,r9
  801748:	1009883a 	mov	r4,r2
  80174c:	08083dc0 	call	8083dc <__kernel_cos>
  801750:	100d883a 	mov	r6,r2
  801754:	19e0003c 	xorhi	r7,r3,32768
  801758:	003fb706 	br	801638 <cos+0x44>

0080175c <fabs>:
  80175c:	01e00034 	movhi	r7,32768
  801760:	39ffffc4 	addi	r7,r7,-1
  801764:	394e703a 	and	r7,r7,r5
  801768:	2005883a 	mov	r2,r4
  80176c:	3807883a 	mov	r3,r7
  801770:	f800283a 	ret

00801774 <floor>:
  801774:	2805d53a 	srai	r2,r5,20
  801778:	defff604 	addi	sp,sp,-40
  80177c:	dd800615 	stw	r22,24(sp)
  801780:	10c1ffcc 	andi	r3,r2,2047
  801784:	1dbf0044 	addi	r22,r3,-1023
  801788:	008004c4 	movi	r2,19
  80178c:	ddc00715 	stw	r23,28(sp)
  801790:	dc800215 	stw	r18,8(sp)
  801794:	dc400115 	stw	r17,4(sp)
  801798:	dc000015 	stw	r16,0(sp)
  80179c:	dfc00915 	stw	ra,36(sp)
  8017a0:	df000815 	stw	fp,32(sp)
  8017a4:	dd400515 	stw	r21,20(sp)
  8017a8:	dd000415 	stw	r20,16(sp)
  8017ac:	dcc00315 	stw	r19,12(sp)
  8017b0:	2021883a 	mov	r16,r4
  8017b4:	2823883a 	mov	r17,r5
  8017b8:	282f883a 	mov	r23,r5
  8017bc:	2025883a 	mov	r18,r4
  8017c0:	15802916 	blt	r2,r22,801868 <floor+0xf4>
  8017c4:	b0004816 	blt	r22,zero,8018e8 <floor+0x174>
  8017c8:	00800434 	movhi	r2,16
  8017cc:	10bfffc4 	addi	r2,r2,-1
  8017d0:	15b9d83a 	sra	fp,r2,r22
  8017d4:	282f883a 	mov	r23,r5
  8017d8:	e144703a 	and	r2,fp,r5
  8017dc:	1104b03a 	or	r2,r2,r4
  8017e0:	10001326 	beq	r2,zero,801830 <floor+0xbc>
  8017e4:	00a20034 	movhi	r2,34816
  8017e8:	109d6704 	addi	r2,r2,30108
  8017ec:	00df8e34 	movhi	r3,32312
  8017f0:	18f90f04 	addi	r3,r3,-7108
  8017f4:	180f883a 	mov	r7,r3
  8017f8:	100d883a 	mov	r6,r2
  8017fc:	080bb840 	call	80bb84 <__adddf3>
  801800:	180b883a 	mov	r5,r3
  801804:	000d883a 	mov	r6,zero
  801808:	000f883a 	mov	r7,zero
  80180c:	1009883a 	mov	r4,r2
  801810:	080c3240 	call	80c324 <__gtdf2>
  801814:	0080040e 	bge	zero,r2,801828 <floor+0xb4>
  801818:	88004416 	blt	r17,zero,80192c <floor+0x1b8>
  80181c:	0704303a 	nor	r2,zero,fp
  801820:	b8ae703a 	and	r23,r23,r2
  801824:	0025883a 	mov	r18,zero
  801828:	9021883a 	mov	r16,r18
  80182c:	b823883a 	mov	r17,r23
  801830:	8005883a 	mov	r2,r16
  801834:	8807883a 	mov	r3,r17
  801838:	dfc00917 	ldw	ra,36(sp)
  80183c:	df000817 	ldw	fp,32(sp)
  801840:	ddc00717 	ldw	r23,28(sp)
  801844:	dd800617 	ldw	r22,24(sp)
  801848:	dd400517 	ldw	r21,20(sp)
  80184c:	dd000417 	ldw	r20,16(sp)
  801850:	dcc00317 	ldw	r19,12(sp)
  801854:	dc800217 	ldw	r18,8(sp)
  801858:	dc400117 	ldw	r17,4(sp)
  80185c:	dc000017 	ldw	r16,0(sp)
  801860:	dec00a04 	addi	sp,sp,40
  801864:	f800283a 	ret
  801868:	00800cc4 	movi	r2,51
  80186c:	15801616 	blt	r2,r22,8018c8 <floor+0x154>
  801870:	18befb44 	addi	r2,r3,-1043
  801874:	00ffffc4 	movi	r3,-1
  801878:	18b8d83a 	srl	fp,r3,r2
  80187c:	e104703a 	and	r2,fp,r4
  801880:	103feb26 	beq	r2,zero,801830 <floor+0xbc>
  801884:	00a20034 	movhi	r2,34816
  801888:	109d6704 	addi	r2,r2,30108
  80188c:	00df8e34 	movhi	r3,32312
  801890:	18f90f04 	addi	r3,r3,-7108
  801894:	180f883a 	mov	r7,r3
  801898:	100d883a 	mov	r6,r2
  80189c:	080bb840 	call	80bb84 <__adddf3>
  8018a0:	180b883a 	mov	r5,r3
  8018a4:	000d883a 	mov	r6,zero
  8018a8:	000f883a 	mov	r7,zero
  8018ac:	1009883a 	mov	r4,r2
  8018b0:	080c3240 	call	80c324 <__gtdf2>
  8018b4:	0080210e 	bge	zero,r2,80193c <floor+0x1c8>
  8018b8:	88002216 	blt	r17,zero,801944 <floor+0x1d0>
  8018bc:	0704303a 	nor	r2,zero,fp
  8018c0:	90a4703a 	and	r18,r18,r2
  8018c4:	003fd806 	br	801828 <floor+0xb4>
  8018c8:	00810004 	movi	r2,1024
  8018cc:	b0bfd81e 	bne	r22,r2,801830 <floor+0xbc>
  8018d0:	800d883a 	mov	r6,r16
  8018d4:	280f883a 	mov	r7,r5
  8018d8:	080bb840 	call	80bb84 <__adddf3>
  8018dc:	1021883a 	mov	r16,r2
  8018e0:	1823883a 	mov	r17,r3
  8018e4:	003fd206 	br	801830 <floor+0xbc>
  8018e8:	00a20034 	movhi	r2,34816
  8018ec:	109d6704 	addi	r2,r2,30108
  8018f0:	00df8e34 	movhi	r3,32312
  8018f4:	18f90f04 	addi	r3,r3,-7108
  8018f8:	180f883a 	mov	r7,r3
  8018fc:	100d883a 	mov	r6,r2
  801900:	080bb840 	call	80bb84 <__adddf3>
  801904:	180b883a 	mov	r5,r3
  801908:	000d883a 	mov	r6,zero
  80190c:	000f883a 	mov	r7,zero
  801910:	1009883a 	mov	r4,r2
  801914:	080c3240 	call	80c324 <__gtdf2>
  801918:	00bfc30e 	bge	zero,r2,801828 <floor+0xb4>
  80191c:	88001416 	blt	r17,zero,801970 <floor+0x1fc>
  801920:	002f883a 	mov	r23,zero
  801924:	0025883a 	mov	r18,zero
  801928:	003fbf06 	br	801828 <floor+0xb4>
  80192c:	00800434 	movhi	r2,16
  801930:	1585d83a 	sra	r2,r2,r22
  801934:	88af883a 	add	r23,r17,r2
  801938:	003fb806 	br	80181c <floor+0xa8>
  80193c:	882f883a 	mov	r23,r17
  801940:	003fb906 	br	801828 <floor+0xb4>
  801944:	00800504 	movi	r2,20
  801948:	b0801126 	beq	r22,r2,801990 <floor+0x21c>
  80194c:	00c00d04 	movi	r3,52
  801950:	1d87c83a 	sub	r3,r3,r22
  801954:	00800044 	movi	r2,1
  801958:	10c4983a 	sll	r2,r2,r3
  80195c:	8085883a 	add	r2,r16,r2
  801960:	1400012e 	bgeu	r2,r16,801968 <floor+0x1f4>
  801964:	8dc00044 	addi	r23,r17,1
  801968:	1025883a 	mov	r18,r2
  80196c:	003fd306 	br	8018bc <floor+0x148>
  801970:	00a00034 	movhi	r2,32768
  801974:	10bfffc4 	addi	r2,r2,-1
  801978:	8884703a 	and	r2,r17,r2
  80197c:	8084b03a 	or	r2,r16,r2
  801980:	103fee26 	beq	r2,zero,80193c <floor+0x1c8>
  801984:	05effc34 	movhi	r23,49136
  801988:	0025883a 	mov	r18,zero
  80198c:	003fa606 	br	801828 <floor+0xb4>
  801990:	8dc00044 	addi	r23,r17,1
  801994:	003fc906 	br	8018bc <floor+0x148>

00801998 <frexp>:
  801998:	defffd04 	addi	sp,sp,-12
  80199c:	dc400115 	stw	r17,4(sp)
  8019a0:	04600034 	movhi	r17,32768
  8019a4:	8c7fffc4 	addi	r17,r17,-1
  8019a8:	2c56703a 	and	r11,r5,r17
  8019ac:	2013883a 	mov	r9,r4
  8019b0:	22c4b03a 	or	r2,r4,r11
  8019b4:	011ffc34 	movhi	r4,32752
  8019b8:	213fffc4 	addi	r4,r4,-1
  8019bc:	dc000015 	stw	r16,0(sp)
  8019c0:	dfc00215 	stw	ra,8(sp)
  8019c4:	2815883a 	mov	r10,r5
  8019c8:	2819883a 	mov	r12,r5
  8019cc:	3021883a 	mov	r16,r6
  8019d0:	30000015 	stw	zero,0(r6)
  8019d4:	22c01916 	blt	r4,r11,801a3c <frexp+0xa4>
  8019d8:	10001826 	beq	r2,zero,801a3c <frexp+0xa4>
  8019dc:	0005883a 	mov	r2,zero
  8019e0:	00d0d434 	movhi	r3,17232
  8019e4:	02000434 	movhi	r8,16
  8019e8:	423fffc4 	addi	r8,r8,-1
  8019ec:	4809883a 	mov	r4,r9
  8019f0:	180f883a 	mov	r7,r3
  8019f4:	100d883a 	mov	r6,r2
  8019f8:	42c00616 	blt	r8,r11,801a14 <frexp+0x7c>
  8019fc:	080bbf80 	call	80bbf8 <__muldf3>
  801a00:	1013883a 	mov	r9,r2
  801a04:	00bff284 	movi	r2,-54
  801a08:	1819883a 	mov	r12,r3
  801a0c:	80800015 	stw	r2,0(r16)
  801a10:	1c56703a 	and	r11,r3,r17
  801a14:	81800017 	ldw	r6,0(r16)
  801a18:	580bd53a 	srai	r5,r11,20
  801a1c:	01200434 	movhi	r4,32784
  801a20:	213fffc4 	addi	r4,r4,-1
  801a24:	6108703a 	and	r4,r12,r4
  801a28:	298b883a 	add	r5,r5,r6
  801a2c:	210ff834 	orhi	r4,r4,16352
  801a30:	297f0084 	addi	r5,r5,-1022
  801a34:	81400015 	stw	r5,0(r16)
  801a38:	2015883a 	mov	r10,r4
  801a3c:	5007883a 	mov	r3,r10
  801a40:	4805883a 	mov	r2,r9
  801a44:	dfc00217 	ldw	ra,8(sp)
  801a48:	dc400117 	ldw	r17,4(sp)
  801a4c:	dc000017 	ldw	r16,0(sp)
  801a50:	dec00304 	addi	sp,sp,12
  801a54:	f800283a 	ret

00801a58 <ldexp>:
  801a58:	defffc04 	addi	sp,sp,-16
  801a5c:	dc800215 	stw	r18,8(sp)
  801a60:	dc400115 	stw	r17,4(sp)
  801a64:	dc000015 	stw	r16,0(sp)
  801a68:	2823883a 	mov	r17,r5
  801a6c:	2021883a 	mov	r16,r4
  801a70:	3025883a 	mov	r18,r6
  801a74:	dfc00315 	stw	ra,12(sp)
  801a78:	080ab340 	call	80ab34 <finite>
  801a7c:	000d883a 	mov	r6,zero
  801a80:	000f883a 	mov	r7,zero
  801a84:	8009883a 	mov	r4,r16
  801a88:	880b883a 	mov	r5,r17
  801a8c:	10000526 	beq	r2,zero,801aa4 <ldexp+0x4c>
  801a90:	080c2140 	call	80c214 <__eqdf2>
  801a94:	880b883a 	mov	r5,r17
  801a98:	900d883a 	mov	r6,r18
  801a9c:	8009883a 	mov	r4,r16
  801aa0:	1000081e 	bne	r2,zero,801ac4 <ldexp+0x6c>
  801aa4:	8005883a 	mov	r2,r16
  801aa8:	8807883a 	mov	r3,r17
  801aac:	dfc00317 	ldw	ra,12(sp)
  801ab0:	dc800217 	ldw	r18,8(sp)
  801ab4:	dc400117 	ldw	r17,4(sp)
  801ab8:	dc000017 	ldw	r16,0(sp)
  801abc:	dec00404 	addi	sp,sp,16
  801ac0:	f800283a 	ret
  801ac4:	0801c700 	call	801c70 <scalbn>
  801ac8:	1009883a 	mov	r4,r2
  801acc:	180b883a 	mov	r5,r3
  801ad0:	1021883a 	mov	r16,r2
  801ad4:	1823883a 	mov	r17,r3
  801ad8:	080ab340 	call	80ab34 <finite>
  801adc:	000d883a 	mov	r6,zero
  801ae0:	000f883a 	mov	r7,zero
  801ae4:	8009883a 	mov	r4,r16
  801ae8:	880b883a 	mov	r5,r17
  801aec:	10000226 	beq	r2,zero,801af8 <ldexp+0xa0>
  801af0:	080c2140 	call	80c214 <__eqdf2>
  801af4:	103feb1e 	bne	r2,zero,801aa4 <ldexp+0x4c>
  801af8:	080d2280 	call	80d228 <__errno>
  801afc:	00c00884 	movi	r3,34
  801b00:	10c00015 	stw	r3,0(r2)
  801b04:	8005883a 	mov	r2,r16
  801b08:	8807883a 	mov	r3,r17
  801b0c:	dfc00317 	ldw	ra,12(sp)
  801b10:	dc800217 	ldw	r18,8(sp)
  801b14:	dc400117 	ldw	r17,4(sp)
  801b18:	dc000017 	ldw	r16,0(sp)
  801b1c:	dec00404 	addi	sp,sp,16
  801b20:	f800283a 	ret

00801b24 <modf>:
  801b24:	2011883a 	mov	r8,r4
  801b28:	2809d53a 	srai	r4,r5,20
  801b2c:	defff704 	addi	sp,sp,-36
  801b30:	008004c4 	movi	r2,19
  801b34:	2101ffcc 	andi	r4,r4,2047
  801b38:	21ff0044 	addi	r7,r4,-1023
  801b3c:	dd800615 	stw	r22,24(sp)
  801b40:	dfc00815 	stw	ra,32(sp)
  801b44:	ddc00715 	stw	r23,28(sp)
  801b48:	dd400515 	stw	r21,20(sp)
  801b4c:	dd000415 	stw	r20,16(sp)
  801b50:	dcc00315 	stw	r19,12(sp)
  801b54:	dc800215 	stw	r18,8(sp)
  801b58:	dc400115 	stw	r17,4(sp)
  801b5c:	dc000015 	stw	r16,0(sp)
  801b60:	2813883a 	mov	r9,r5
  801b64:	302d883a 	mov	r22,r6
  801b68:	11c01216 	blt	r2,r7,801bb4 <modf+0x90>
  801b6c:	38003c16 	blt	r7,zero,801c60 <modf+0x13c>
  801b70:	00c00434 	movhi	r3,16
  801b74:	18ffffc4 	addi	r3,r3,-1
  801b78:	19c7d83a 	sra	r3,r3,r7
  801b7c:	1944703a 	and	r2,r3,r5
  801b80:	1204b03a 	or	r2,r2,r8
  801b84:	10002a26 	beq	r2,zero,801c30 <modf+0x10c>
  801b88:	00c4303a 	nor	r2,zero,r3
  801b8c:	289e703a 	and	r15,r5,r2
  801b90:	000d883a 	mov	r6,zero
  801b94:	780f883a 	mov	r7,r15
  801b98:	b3c00115 	stw	r15,4(r22)
  801b9c:	4009883a 	mov	r4,r8
  801ba0:	b1800015 	stw	r6,0(r22)
  801ba4:	080bb040 	call	80bb04 <__subdf3>
  801ba8:	1011883a 	mov	r8,r2
  801bac:	1813883a 	mov	r9,r3
  801bb0:	00000706 	br	801bd0 <modf+0xac>
  801bb4:	00800cc4 	movi	r2,51
  801bb8:	11c0120e 	bge	r2,r7,801c04 <modf+0xe0>
  801bbc:	2ae0002c 	andhi	r11,r5,32768
  801bc0:	b2000015 	stw	r8,0(r22)
  801bc4:	b1400115 	stw	r5,4(r22)
  801bc8:	0011883a 	mov	r8,zero
  801bcc:	5813883a 	mov	r9,r11
  801bd0:	4005883a 	mov	r2,r8
  801bd4:	4807883a 	mov	r3,r9
  801bd8:	dfc00817 	ldw	ra,32(sp)
  801bdc:	ddc00717 	ldw	r23,28(sp)
  801be0:	dd800617 	ldw	r22,24(sp)
  801be4:	dd400517 	ldw	r21,20(sp)
  801be8:	dd000417 	ldw	r20,16(sp)
  801bec:	dcc00317 	ldw	r19,12(sp)
  801bf0:	dc800217 	ldw	r18,8(sp)
  801bf4:	dc400117 	ldw	r17,4(sp)
  801bf8:	dc000017 	ldw	r16,0(sp)
  801bfc:	dec00904 	addi	sp,sp,36
  801c00:	f800283a 	ret
  801c04:	20befb44 	addi	r2,r4,-1043
  801c08:	00ffffc4 	movi	r3,-1
  801c0c:	1884d83a 	srl	r2,r3,r2
  801c10:	1208703a 	and	r4,r2,r8
  801c14:	20000c26 	beq	r4,zero,801c48 <modf+0x124>
  801c18:	0084303a 	nor	r2,zero,r2
  801c1c:	4084703a 	and	r2,r8,r2
  801c20:	100d883a 	mov	r6,r2
  801c24:	280f883a 	mov	r7,r5
  801c28:	b1400115 	stw	r5,4(r22)
  801c2c:	003fdb06 	br	801b9c <modf+0x78>
  801c30:	2d60002c 	andhi	r21,r5,32768
  801c34:	b2000015 	stw	r8,0(r22)
  801c38:	a813883a 	mov	r9,r21
  801c3c:	0011883a 	mov	r8,zero
  801c40:	b1400115 	stw	r5,4(r22)
  801c44:	003fe206 	br	801bd0 <modf+0xac>
  801c48:	2ce0002c 	andhi	r19,r5,32768
  801c4c:	b2000015 	stw	r8,0(r22)
  801c50:	9813883a 	mov	r9,r19
  801c54:	0011883a 	mov	r8,zero
  801c58:	b1400115 	stw	r5,4(r22)
  801c5c:	003fdc06 	br	801bd0 <modf+0xac>
  801c60:	2b60002c 	andhi	r13,r5,32768
  801c64:	b3400115 	stw	r13,4(r22)
  801c68:	b0000015 	stw	zero,0(r22)
  801c6c:	003fd806 	br	801bd0 <modf+0xac>

00801c70 <scalbn>:
  801c70:	2011883a 	mov	r8,r4
  801c74:	291ffc2c 	andhi	r4,r5,32752
  801c78:	2009d53a 	srai	r4,r4,20
  801c7c:	defffd04 	addi	sp,sp,-12
  801c80:	dc000015 	stw	r16,0(sp)
  801c84:	dfc00215 	stw	ra,8(sp)
  801c88:	dc400115 	stw	r17,4(sp)
  801c8c:	2813883a 	mov	r9,r5
  801c90:	2815883a 	mov	r10,r5
  801c94:	3021883a 	mov	r16,r6
  801c98:	2000281e 	bne	r4,zero,801d3c <scalbn+0xcc>
  801c9c:	00a00034 	movhi	r2,32768
  801ca0:	10bfffc4 	addi	r2,r2,-1
  801ca4:	2884703a 	and	r2,r5,r2
  801ca8:	4084b03a 	or	r2,r8,r2
  801cac:	10001826 	beq	r2,zero,801d10 <scalbn+0xa0>
  801cb0:	0005883a 	mov	r2,zero
  801cb4:	00d0d434 	movhi	r3,17232
  801cb8:	4009883a 	mov	r4,r8
  801cbc:	100d883a 	mov	r6,r2
  801cc0:	180f883a 	mov	r7,r3
  801cc4:	080bbf80 	call	80bbf8 <__muldf3>
  801cc8:	100b883a 	mov	r5,r2
  801ccc:	1011883a 	mov	r8,r2
  801cd0:	00bffff4 	movhi	r2,65535
  801cd4:	108f2c04 	addi	r2,r2,15536
  801cd8:	180d883a 	mov	r6,r3
  801cdc:	1813883a 	mov	r9,r3
  801ce0:	8080120e 	bge	r16,r2,801d2c <scalbn+0xbc>
  801ce4:	00b0be74 	movhi	r2,49913
  801ce8:	10bcd644 	addi	r2,r2,-3239
  801cec:	00c06974 	movhi	r3,421
  801cf0:	18db87c4 	addi	r3,r3,28191
  801cf4:	2809883a 	mov	r4,r5
  801cf8:	180f883a 	mov	r7,r3
  801cfc:	300b883a 	mov	r5,r6
  801d00:	100d883a 	mov	r6,r2
  801d04:	080bbf80 	call	80bbf8 <__muldf3>
  801d08:	1011883a 	mov	r8,r2
  801d0c:	1813883a 	mov	r9,r3
  801d10:	4005883a 	mov	r2,r8
  801d14:	4807883a 	mov	r3,r9
  801d18:	dfc00217 	ldw	ra,8(sp)
  801d1c:	dc400117 	ldw	r17,4(sp)
  801d20:	dc000017 	ldw	r16,0(sp)
  801d24:	dec00304 	addi	sp,sp,12
  801d28:	f800283a 	ret
  801d2c:	189ffc2c 	andhi	r2,r3,32752
  801d30:	1005d53a 	srai	r2,r2,20
  801d34:	1815883a 	mov	r10,r3
  801d38:	113ff284 	addi	r4,r2,-54
  801d3c:	0081ffc4 	movi	r2,2047
  801d40:	20801126 	beq	r4,r2,801d88 <scalbn+0x118>
  801d44:	2409883a 	add	r4,r4,r16
  801d48:	0081ff84 	movi	r2,2046
  801d4c:	11001c16 	blt	r2,r4,801dc0 <scalbn+0x150>
  801d50:	0100290e 	bge	zero,r4,801df8 <scalbn+0x188>
  801d54:	200a953a 	slli	r5,r4,20
  801d58:	01200434 	movhi	r4,32784
  801d5c:	213fffc4 	addi	r4,r4,-1
  801d60:	5108703a 	and	r4,r10,r4
  801d64:	2148b03a 	or	r4,r4,r5
  801d68:	2013883a 	mov	r9,r4
  801d6c:	4005883a 	mov	r2,r8
  801d70:	4807883a 	mov	r3,r9
  801d74:	dfc00217 	ldw	ra,8(sp)
  801d78:	dc400117 	ldw	r17,4(sp)
  801d7c:	dc000017 	ldw	r16,0(sp)
  801d80:	dec00304 	addi	sp,sp,12
  801d84:	f800283a 	ret
  801d88:	480f883a 	mov	r7,r9
  801d8c:	4009883a 	mov	r4,r8
  801d90:	480b883a 	mov	r5,r9
  801d94:	400d883a 	mov	r6,r8
  801d98:	080bb840 	call	80bb84 <__adddf3>
  801d9c:	1011883a 	mov	r8,r2
  801da0:	1813883a 	mov	r9,r3
  801da4:	4005883a 	mov	r2,r8
  801da8:	4807883a 	mov	r3,r9
  801dac:	dfc00217 	ldw	ra,8(sp)
  801db0:	dc400117 	ldw	r17,4(sp)
  801db4:	dc000017 	ldw	r16,0(sp)
  801db8:	dec00304 	addi	sp,sp,12
  801dbc:	f800283a 	ret
  801dc0:	04220034 	movhi	r16,34816
  801dc4:	841d6704 	addi	r16,r16,30108
  801dc8:	045f8e34 	movhi	r17,32312
  801dcc:	8c790f04 	addi	r17,r17,-7108
  801dd0:	480f883a 	mov	r7,r9
  801dd4:	400d883a 	mov	r6,r8
  801dd8:	8009883a 	mov	r4,r16
  801ddc:	880b883a 	mov	r5,r17
  801de0:	080a2200 	call	80a220 <copysign>
  801de4:	180b883a 	mov	r5,r3
  801de8:	800d883a 	mov	r6,r16
  801dec:	880f883a 	mov	r7,r17
  801df0:	1009883a 	mov	r4,r2
  801df4:	003fc306 	br	801d04 <scalbn+0x94>
  801df8:	00bff284 	movi	r2,-54
  801dfc:	11000716 	blt	r2,r4,801e1c <scalbn+0x1ac>
  801e00:	00b0d414 	movui	r2,50000
  801e04:	143fee16 	blt	r2,r16,801dc0 <scalbn+0x150>
  801e08:	0430be74 	movhi	r16,49913
  801e0c:	843cd644 	addi	r16,r16,-3239
  801e10:	04406974 	movhi	r17,421
  801e14:	8c5b87c4 	addi	r17,r17,28191
  801e18:	003fed06 	br	801dd0 <scalbn+0x160>
  801e1c:	21000d84 	addi	r4,r4,54
  801e20:	2008953a 	slli	r4,r4,20
  801e24:	01e00434 	movhi	r7,32784
  801e28:	39ffffc4 	addi	r7,r7,-1
  801e2c:	51ce703a 	and	r7,r10,r7
  801e30:	390eb03a 	or	r7,r7,r4
  801e34:	024f2434 	movhi	r9,15504
  801e38:	4009883a 	mov	r4,r8
  801e3c:	0011883a 	mov	r8,zero
  801e40:	380b883a 	mov	r5,r7
  801e44:	400d883a 	mov	r6,r8
  801e48:	480f883a 	mov	r7,r9
  801e4c:	003fad06 	br	801d04 <scalbn+0x94>

00801e50 <sin>:
  801e50:	00a00034 	movhi	r2,32768
  801e54:	10bfffc4 	addi	r2,r2,-1
  801e58:	defffa04 	addi	sp,sp,-24
  801e5c:	114c703a 	and	r6,r2,r5
  801e60:	008ffa74 	movhi	r2,16361
  801e64:	10887ec4 	addi	r2,r2,8699
  801e68:	dfc00515 	stw	ra,20(sp)
  801e6c:	2011883a 	mov	r8,r4
  801e70:	1180220e 	bge	r2,r6,801efc <sin+0xac>
  801e74:	009ffc34 	movhi	r2,32752
  801e78:	10bfffc4 	addi	r2,r2,-1
  801e7c:	11800a0e 	bge	r2,r6,801ea8 <sin+0x58>
  801e80:	280f883a 	mov	r7,r5
  801e84:	400d883a 	mov	r6,r8
  801e88:	080bb040 	call	80bb04 <__subdf3>
  801e8c:	100d883a 	mov	r6,r2
  801e90:	180f883a 	mov	r7,r3
  801e94:	3005883a 	mov	r2,r6
  801e98:	3807883a 	mov	r3,r7
  801e9c:	dfc00517 	ldw	ra,20(sp)
  801ea0:	dec00604 	addi	sp,sp,24
  801ea4:	f800283a 	ret
  801ea8:	d9800104 	addi	r6,sp,4
  801eac:	08074880 	call	807488 <__ieee754_rem_pio2>
  801eb0:	10c000cc 	andi	r3,r2,3
  801eb4:	01000044 	movi	r4,1
  801eb8:	19001b26 	beq	r3,r4,801f28 <sin+0xd8>
  801ebc:	00800084 	movi	r2,2
  801ec0:	18803126 	beq	r3,r2,801f88 <sin+0x138>
  801ec4:	1800241e 	bne	r3,zero,801f58 <sin+0x108>
  801ec8:	d8800117 	ldw	r2,4(sp)
  801ecc:	da000317 	ldw	r8,12(sp)
  801ed0:	d8c00217 	ldw	r3,8(sp)
  801ed4:	da400417 	ldw	r9,16(sp)
  801ed8:	d9000015 	stw	r4,0(sp)
  801edc:	400d883a 	mov	r6,r8
  801ee0:	480f883a 	mov	r7,r9
  801ee4:	180b883a 	mov	r5,r3
  801ee8:	1009883a 	mov	r4,r2
  801eec:	080978c0 	call	80978c <__kernel_sin>
  801ef0:	100d883a 	mov	r6,r2
  801ef4:	180f883a 	mov	r7,r3
  801ef8:	003fe606 	br	801e94 <sin+0x44>
  801efc:	000d883a 	mov	r6,zero
  801f00:	000f883a 	mov	r7,zero
  801f04:	d8000015 	stw	zero,0(sp)
  801f08:	080978c0 	call	80978c <__kernel_sin>
  801f0c:	100d883a 	mov	r6,r2
  801f10:	180f883a 	mov	r7,r3
  801f14:	3005883a 	mov	r2,r6
  801f18:	3807883a 	mov	r3,r7
  801f1c:	dfc00517 	ldw	ra,20(sp)
  801f20:	dec00604 	addi	sp,sp,24
  801f24:	f800283a 	ret
  801f28:	d8800117 	ldw	r2,4(sp)
  801f2c:	da000317 	ldw	r8,12(sp)
  801f30:	d8c00217 	ldw	r3,8(sp)
  801f34:	da400417 	ldw	r9,16(sp)
  801f38:	400d883a 	mov	r6,r8
  801f3c:	180b883a 	mov	r5,r3
  801f40:	480f883a 	mov	r7,r9
  801f44:	1009883a 	mov	r4,r2
  801f48:	08083dc0 	call	8083dc <__kernel_cos>
  801f4c:	100d883a 	mov	r6,r2
  801f50:	180f883a 	mov	r7,r3
  801f54:	003fcf06 	br	801e94 <sin+0x44>
  801f58:	d8800117 	ldw	r2,4(sp)
  801f5c:	da000317 	ldw	r8,12(sp)
  801f60:	d8c00217 	ldw	r3,8(sp)
  801f64:	da400417 	ldw	r9,16(sp)
  801f68:	400d883a 	mov	r6,r8
  801f6c:	180b883a 	mov	r5,r3
  801f70:	480f883a 	mov	r7,r9
  801f74:	1009883a 	mov	r4,r2
  801f78:	08083dc0 	call	8083dc <__kernel_cos>
  801f7c:	100d883a 	mov	r6,r2
  801f80:	19e0003c 	xorhi	r7,r3,32768
  801f84:	003fc306 	br	801e94 <sin+0x44>
  801f88:	d8800117 	ldw	r2,4(sp)
  801f8c:	da000317 	ldw	r8,12(sp)
  801f90:	d8c00217 	ldw	r3,8(sp)
  801f94:	da400417 	ldw	r9,16(sp)
  801f98:	d9000015 	stw	r4,0(sp)
  801f9c:	400d883a 	mov	r6,r8
  801fa0:	480f883a 	mov	r7,r9
  801fa4:	180b883a 	mov	r5,r3
  801fa8:	1009883a 	mov	r4,r2
  801fac:	080978c0 	call	80978c <__kernel_sin>
  801fb0:	100d883a 	mov	r6,r2
  801fb4:	19e0003c 	xorhi	r7,r3,32768
  801fb8:	003fb606 	br	801e94 <sin+0x44>

00801fbc <tan>:
  801fbc:	00a00034 	movhi	r2,32768
  801fc0:	10bfffc4 	addi	r2,r2,-1
  801fc4:	defffa04 	addi	sp,sp,-24
  801fc8:	1146703a 	and	r3,r2,r5
  801fcc:	008ffa74 	movhi	r2,16361
  801fd0:	10887ec4 	addi	r2,r2,8699
  801fd4:	dfc00515 	stw	ra,20(sp)
  801fd8:	000d883a 	mov	r6,zero
  801fdc:	000f883a 	mov	r7,zero
  801fe0:	2015883a 	mov	r10,r4
  801fe4:	10c0250e 	bge	r2,r3,80207c <tan+0xc0>
  801fe8:	009ffc34 	movhi	r2,32752
  801fec:	10bfffc4 	addi	r2,r2,-1
  801ff0:	5009883a 	mov	r4,r10
  801ff4:	d9800104 	addi	r6,sp,4
  801ff8:	280f883a 	mov	r7,r5
  801ffc:	10c0090e 	bge	r2,r3,802024 <tan+0x68>
  802000:	500d883a 	mov	r6,r10
  802004:	080bb040 	call	80bb04 <__subdf3>
  802008:	100d883a 	mov	r6,r2
  80200c:	180f883a 	mov	r7,r3
  802010:	3807883a 	mov	r3,r7
  802014:	3005883a 	mov	r2,r6
  802018:	dfc00517 	ldw	ra,20(sp)
  80201c:	dec00604 	addi	sp,sp,24
  802020:	f800283a 	ret
  802024:	08074880 	call	807488 <__ieee754_rem_pio2>
  802028:	da000117 	ldw	r8,4(sp)
  80202c:	da800317 	ldw	r10,12(sp)
  802030:	da400217 	ldw	r9,8(sp)
  802034:	dac00417 	ldw	r11,16(sp)
  802038:	1080004c 	andi	r2,r2,1
  80203c:	1085883a 	add	r2,r2,r2
  802040:	00c00044 	movi	r3,1
  802044:	580f883a 	mov	r7,r11
  802048:	500d883a 	mov	r6,r10
  80204c:	1887c83a 	sub	r3,r3,r2
  802050:	480b883a 	mov	r5,r9
  802054:	4009883a 	mov	r4,r8
  802058:	d8c00015 	stw	r3,0(sp)
  80205c:	0809aa40 	call	809aa4 <__kernel_tan>
  802060:	100d883a 	mov	r6,r2
  802064:	180f883a 	mov	r7,r3
  802068:	3807883a 	mov	r3,r7
  80206c:	3005883a 	mov	r2,r6
  802070:	dfc00517 	ldw	ra,20(sp)
  802074:	dec00604 	addi	sp,sp,24
  802078:	f800283a 	ret
  80207c:	00800044 	movi	r2,1
  802080:	d8800015 	stw	r2,0(sp)
  802084:	0809aa40 	call	809aa4 <__kernel_tan>
  802088:	100d883a 	mov	r6,r2
  80208c:	180f883a 	mov	r7,r3
  802090:	3807883a 	mov	r3,r7
  802094:	3005883a 	mov	r2,r6
  802098:	dfc00517 	ldw	ra,20(sp)
  80209c:	dec00604 	addi	sp,sp,24
  8020a0:	f800283a 	ret

008020a4 <tanh>:
  8020a4:	00a00034 	movhi	r2,32768
  8020a8:	10bfffc4 	addi	r2,r2,-1
  8020ac:	defffa04 	addi	sp,sp,-24
  8020b0:	288c703a 	and	r6,r5,r2
  8020b4:	009ffc34 	movhi	r2,32752
  8020b8:	10bfffc4 	addi	r2,r2,-1
  8020bc:	dd000415 	stw	r20,16(sp)
  8020c0:	dcc00315 	stw	r19,12(sp)
  8020c4:	dc800215 	stw	r18,8(sp)
  8020c8:	dfc00515 	stw	ra,20(sp)
  8020cc:	dc400115 	stw	r17,4(sp)
  8020d0:	dc000015 	stw	r16,0(sp)
  8020d4:	2025883a 	mov	r18,r4
  8020d8:	2827883a 	mov	r19,r5
  8020dc:	2829883a 	mov	r20,r5
  8020e0:	1180190e 	bge	r2,r6,802148 <tanh+0xa4>
  8020e4:	28005616 	blt	r5,zero,802240 <tanh+0x19c>
  8020e8:	044ffc34 	movhi	r17,16368
  8020ec:	0021883a 	mov	r16,zero
  8020f0:	280f883a 	mov	r7,r5
  8020f4:	8009883a 	mov	r4,r16
  8020f8:	880b883a 	mov	r5,r17
  8020fc:	900d883a 	mov	r6,r18
  802100:	080bfbc0 	call	80bfbc <__divdf3>
  802104:	180b883a 	mov	r5,r3
  802108:	000d883a 	mov	r6,zero
  80210c:	880f883a 	mov	r7,r17
  802110:	1009883a 	mov	r4,r2
  802114:	080bb840 	call	80bb84 <__adddf3>
  802118:	100d883a 	mov	r6,r2
  80211c:	180f883a 	mov	r7,r3
  802120:	3005883a 	mov	r2,r6
  802124:	3807883a 	mov	r3,r7
  802128:	dfc00517 	ldw	ra,20(sp)
  80212c:	dd000417 	ldw	r20,16(sp)
  802130:	dcc00317 	ldw	r19,12(sp)
  802134:	dc800217 	ldw	r18,8(sp)
  802138:	dc400117 	ldw	r17,4(sp)
  80213c:	dc000017 	ldw	r16,0(sp)
  802140:	dec00604 	addi	sp,sp,24
  802144:	f800283a 	ret
  802148:	00900db4 	movhi	r2,16438
  80214c:	10bfffc4 	addi	r2,r2,-1
  802150:	11802a16 	blt	r2,r6,8021fc <tanh+0x158>
  802154:	008f2034 	movhi	r2,15488
  802158:	10bfffc4 	addi	r2,r2,-1
  80215c:	11802b0e 	bge	r2,r6,80220c <tanh+0x168>
  802160:	008ffc34 	movhi	r2,16368
  802164:	10bfffc4 	addi	r2,r2,-1
  802168:	1180440e 	bge	r2,r6,80227c <tanh+0x1d8>
  80216c:	080175c0 	call	80175c <fabs>
  802170:	180f883a 	mov	r7,r3
  802174:	100d883a 	mov	r6,r2
  802178:	1009883a 	mov	r4,r2
  80217c:	180b883a 	mov	r5,r3
  802180:	080bb840 	call	80bb84 <__adddf3>
  802184:	180b883a 	mov	r5,r3
  802188:	1009883a 	mov	r4,r2
  80218c:	080a2440 	call	80a244 <expm1>
  802190:	0011883a 	mov	r8,zero
  802194:	02500034 	movhi	r9,16384
  802198:	480f883a 	mov	r7,r9
  80219c:	400d883a 	mov	r6,r8
  8021a0:	180b883a 	mov	r5,r3
  8021a4:	1009883a 	mov	r4,r2
  8021a8:	080bb840 	call	80bb84 <__adddf3>
  8021ac:	0011883a 	mov	r8,zero
  8021b0:	02700034 	movhi	r9,49152
  8021b4:	480b883a 	mov	r5,r9
  8021b8:	4009883a 	mov	r4,r8
  8021bc:	180f883a 	mov	r7,r3
  8021c0:	100d883a 	mov	r6,r2
  8021c4:	080bfbc0 	call	80bfbc <__divdf3>
  8021c8:	0011883a 	mov	r8,zero
  8021cc:	024ffc34 	movhi	r9,16368
  8021d0:	480f883a 	mov	r7,r9
  8021d4:	400d883a 	mov	r6,r8
  8021d8:	180b883a 	mov	r5,r3
  8021dc:	1009883a 	mov	r4,r2
  8021e0:	080bb840 	call	80bb84 <__adddf3>
  8021e4:	100d883a 	mov	r6,r2
  8021e8:	180f883a 	mov	r7,r3
  8021ec:	a03fcc0e 	bge	r20,zero,802120 <tanh+0x7c>
  8021f0:	38e0003c 	xorhi	r3,r7,32768
  8021f4:	180f883a 	mov	r7,r3
  8021f8:	003fc906 	br	802120 <tanh+0x7c>
  8021fc:	000d883a 	mov	r6,zero
  802200:	01cffc34 	movhi	r7,16368
  802204:	a03fc60e 	bge	r20,zero,802120 <tanh+0x7c>
  802208:	003ff906 	br	8021f0 <tanh+0x14c>
  80220c:	0005883a 	mov	r2,zero
  802210:	00cffc34 	movhi	r3,16368
  802214:	180f883a 	mov	r7,r3
  802218:	100d883a 	mov	r6,r2
  80221c:	080bb840 	call	80bb84 <__adddf3>
  802220:	180f883a 	mov	r7,r3
  802224:	100d883a 	mov	r6,r2
  802228:	980b883a 	mov	r5,r19
  80222c:	9009883a 	mov	r4,r18
  802230:	080bbf80 	call	80bbf8 <__muldf3>
  802234:	100d883a 	mov	r6,r2
  802238:	180f883a 	mov	r7,r3
  80223c:	003fb806 	br	802120 <tanh+0x7c>
  802240:	044ffc34 	movhi	r17,16368
  802244:	0021883a 	mov	r16,zero
  802248:	280f883a 	mov	r7,r5
  80224c:	8009883a 	mov	r4,r16
  802250:	880b883a 	mov	r5,r17
  802254:	900d883a 	mov	r6,r18
  802258:	080bfbc0 	call	80bfbc <__divdf3>
  80225c:	180b883a 	mov	r5,r3
  802260:	000d883a 	mov	r6,zero
  802264:	880f883a 	mov	r7,r17
  802268:	1009883a 	mov	r4,r2
  80226c:	080bb040 	call	80bb04 <__subdf3>
  802270:	100d883a 	mov	r6,r2
  802274:	180f883a 	mov	r7,r3
  802278:	003fa906 	br	802120 <tanh+0x7c>
  80227c:	080175c0 	call	80175c <fabs>
  802280:	0011883a 	mov	r8,zero
  802284:	02700034 	movhi	r9,49152
  802288:	480f883a 	mov	r7,r9
  80228c:	400d883a 	mov	r6,r8
  802290:	180b883a 	mov	r5,r3
  802294:	1009883a 	mov	r4,r2
  802298:	080bbf80 	call	80bbf8 <__muldf3>
  80229c:	180b883a 	mov	r5,r3
  8022a0:	1009883a 	mov	r4,r2
  8022a4:	080a2440 	call	80a244 <expm1>
  8022a8:	0015883a 	mov	r10,zero
  8022ac:	02d00034 	movhi	r11,16384
  8022b0:	580f883a 	mov	r7,r11
  8022b4:	500d883a 	mov	r6,r10
  8022b8:	180b883a 	mov	r5,r3
  8022bc:	1009883a 	mov	r4,r2
  8022c0:	1021883a 	mov	r16,r2
  8022c4:	1c60003c 	xorhi	r17,r3,32768
  8022c8:	080bb840 	call	80bb84 <__adddf3>
  8022cc:	180f883a 	mov	r7,r3
  8022d0:	100d883a 	mov	r6,r2
  8022d4:	880b883a 	mov	r5,r17
  8022d8:	8009883a 	mov	r4,r16
  8022dc:	080bfbc0 	call	80bfbc <__divdf3>
  8022e0:	100d883a 	mov	r6,r2
  8022e4:	180f883a 	mov	r7,r3
  8022e8:	a03f8d0e 	bge	r20,zero,802120 <tanh+0x7c>
  8022ec:	003fc006 	br	8021f0 <tanh+0x14c>

008022f0 <acos>:
  8022f0:	defff104 	addi	sp,sp,-60
  8022f4:	dd000d15 	stw	r20,52(sp)
  8022f8:	050020b4 	movhi	r20,130
  8022fc:	a50e6e04 	addi	r20,r20,14776
  802300:	dcc00c15 	stw	r19,48(sp)
  802304:	dc800b15 	stw	r18,44(sp)
  802308:	dc400a15 	stw	r17,40(sp)
  80230c:	dc000915 	stw	r16,36(sp)
  802310:	2025883a 	mov	r18,r4
  802314:	dfc00e15 	stw	ra,56(sp)
  802318:	2827883a 	mov	r19,r5
  80231c:	08035140 	call	803514 <__ieee754_acos>
  802320:	a1000017 	ldw	r4,0(r20)
  802324:	1021883a 	mov	r16,r2
  802328:	00bfffc4 	movi	r2,-1
  80232c:	1823883a 	mov	r17,r3
  802330:	20800426 	beq	r4,r2,802344 <acos+0x54>
  802334:	9009883a 	mov	r4,r18
  802338:	980b883a 	mov	r5,r19
  80233c:	080ab500 	call	80ab50 <__isnand>
  802340:	10000a26 	beq	r2,zero,80236c <acos+0x7c>
  802344:	8005883a 	mov	r2,r16
  802348:	8807883a 	mov	r3,r17
  80234c:	dfc00e17 	ldw	ra,56(sp)
  802350:	dd000d17 	ldw	r20,52(sp)
  802354:	dcc00c17 	ldw	r19,48(sp)
  802358:	dc800b17 	ldw	r18,44(sp)
  80235c:	dc400a17 	ldw	r17,40(sp)
  802360:	dc000917 	ldw	r16,36(sp)
  802364:	dec00f04 	addi	sp,sp,60
  802368:	f800283a 	ret
  80236c:	9009883a 	mov	r4,r18
  802370:	980b883a 	mov	r5,r19
  802374:	080175c0 	call	80175c <fabs>
  802378:	0011883a 	mov	r8,zero
  80237c:	024ffc34 	movhi	r9,16368
  802380:	180b883a 	mov	r5,r3
  802384:	480f883a 	mov	r7,r9
  802388:	1009883a 	mov	r4,r2
  80238c:	400d883a 	mov	r6,r8
  802390:	080c3240 	call	80c324 <__gtdf2>
  802394:	00bfeb0e 	bge	zero,r2,802344 <acos+0x54>
  802398:	00800044 	movi	r2,1
  80239c:	00c020b4 	movhi	r3,130
  8023a0:	18c5fe04 	addi	r3,r3,6136
  8023a4:	010020b4 	movhi	r4,130
  8023a8:	21070104 	addi	r4,r4,7172
  8023ac:	d8800015 	stw	r2,0(sp)
  8023b0:	d8c00115 	stw	r3,4(sp)
  8023b4:	dcc00315 	stw	r19,12(sp)
  8023b8:	d8000815 	stw	zero,32(sp)
  8023bc:	dc800415 	stw	r18,16(sp)
  8023c0:	dcc00515 	stw	r19,20(sp)
  8023c4:	dc800215 	stw	r18,8(sp)
  8023c8:	080ab880 	call	80ab88 <nan>
  8023cc:	a1800017 	ldw	r6,0(r20)
  8023d0:	d8800615 	stw	r2,24(sp)
  8023d4:	00800084 	movi	r2,2
  8023d8:	d8c00715 	stw	r3,28(sp)
  8023dc:	30800826 	beq	r6,r2,802400 <acos+0x110>
  8023e0:	d809883a 	mov	r4,sp
  8023e4:	080ab800 	call	80ab80 <matherr>
  8023e8:	10000526 	beq	r2,zero,802400 <acos+0x110>
  8023ec:	d8800817 	ldw	r2,32(sp)
  8023f0:	1000071e 	bne	r2,zero,802410 <acos+0x120>
  8023f4:	dc000617 	ldw	r16,24(sp)
  8023f8:	dc400717 	ldw	r17,28(sp)
  8023fc:	003fd106 	br	802344 <acos+0x54>
  802400:	080d2280 	call	80d228 <__errno>
  802404:	00c00844 	movi	r3,33
  802408:	10c00015 	stw	r3,0(r2)
  80240c:	003ff706 	br	8023ec <acos+0xfc>
  802410:	080d2280 	call	80d228 <__errno>
  802414:	d8c00817 	ldw	r3,32(sp)
  802418:	10c00015 	stw	r3,0(r2)
  80241c:	003ff506 	br	8023f4 <acos+0x104>

00802420 <asin>:
  802420:	defff104 	addi	sp,sp,-60
  802424:	dd000d15 	stw	r20,52(sp)
  802428:	050020b4 	movhi	r20,130
  80242c:	a50e6e04 	addi	r20,r20,14776
  802430:	dcc00c15 	stw	r19,48(sp)
  802434:	dc800b15 	stw	r18,44(sp)
  802438:	dc400a15 	stw	r17,40(sp)
  80243c:	dc000915 	stw	r16,36(sp)
  802440:	2025883a 	mov	r18,r4
  802444:	dfc00e15 	stw	ra,56(sp)
  802448:	2827883a 	mov	r19,r5
  80244c:	0803f6c0 	call	803f6c <__ieee754_asin>
  802450:	a1000017 	ldw	r4,0(r20)
  802454:	1021883a 	mov	r16,r2
  802458:	00bfffc4 	movi	r2,-1
  80245c:	1823883a 	mov	r17,r3
  802460:	20800426 	beq	r4,r2,802474 <asin+0x54>
  802464:	9009883a 	mov	r4,r18
  802468:	980b883a 	mov	r5,r19
  80246c:	080ab500 	call	80ab50 <__isnand>
  802470:	10000a26 	beq	r2,zero,80249c <asin+0x7c>
  802474:	8005883a 	mov	r2,r16
  802478:	8807883a 	mov	r3,r17
  80247c:	dfc00e17 	ldw	ra,56(sp)
  802480:	dd000d17 	ldw	r20,52(sp)
  802484:	dcc00c17 	ldw	r19,48(sp)
  802488:	dc800b17 	ldw	r18,44(sp)
  80248c:	dc400a17 	ldw	r17,40(sp)
  802490:	dc000917 	ldw	r16,36(sp)
  802494:	dec00f04 	addi	sp,sp,60
  802498:	f800283a 	ret
  80249c:	9009883a 	mov	r4,r18
  8024a0:	980b883a 	mov	r5,r19
  8024a4:	080175c0 	call	80175c <fabs>
  8024a8:	0011883a 	mov	r8,zero
  8024ac:	024ffc34 	movhi	r9,16368
  8024b0:	180b883a 	mov	r5,r3
  8024b4:	480f883a 	mov	r7,r9
  8024b8:	1009883a 	mov	r4,r2
  8024bc:	400d883a 	mov	r6,r8
  8024c0:	080c3240 	call	80c324 <__gtdf2>
  8024c4:	00bfeb0e 	bge	zero,r2,802474 <asin+0x54>
  8024c8:	00800044 	movi	r2,1
  8024cc:	00c020b4 	movhi	r3,130
  8024d0:	18c60004 	addi	r3,r3,6144
  8024d4:	010020b4 	movhi	r4,130
  8024d8:	21070104 	addi	r4,r4,7172
  8024dc:	d8800015 	stw	r2,0(sp)
  8024e0:	d8c00115 	stw	r3,4(sp)
  8024e4:	dcc00315 	stw	r19,12(sp)
  8024e8:	d8000815 	stw	zero,32(sp)
  8024ec:	dc800415 	stw	r18,16(sp)
  8024f0:	dcc00515 	stw	r19,20(sp)
  8024f4:	dc800215 	stw	r18,8(sp)
  8024f8:	080ab880 	call	80ab88 <nan>
  8024fc:	a1800017 	ldw	r6,0(r20)
  802500:	d8800615 	stw	r2,24(sp)
  802504:	00800084 	movi	r2,2
  802508:	d8c00715 	stw	r3,28(sp)
  80250c:	30800826 	beq	r6,r2,802530 <asin+0x110>
  802510:	d809883a 	mov	r4,sp
  802514:	080ab800 	call	80ab80 <matherr>
  802518:	10000526 	beq	r2,zero,802530 <asin+0x110>
  80251c:	d8800817 	ldw	r2,32(sp)
  802520:	1000071e 	bne	r2,zero,802540 <asin+0x120>
  802524:	dc000617 	ldw	r16,24(sp)
  802528:	dc400717 	ldw	r17,28(sp)
  80252c:	003fd106 	br	802474 <asin+0x54>
  802530:	080d2280 	call	80d228 <__errno>
  802534:	00c00844 	movi	r3,33
  802538:	10c00015 	stw	r3,0(r2)
  80253c:	003ff706 	br	80251c <asin+0xfc>
  802540:	080d2280 	call	80d228 <__errno>
  802544:	d8c00817 	ldw	r3,32(sp)
  802548:	10c00015 	stw	r3,0(r2)
  80254c:	003ff506 	br	802524 <asin+0x104>

00802550 <atan2>:
  802550:	08048281 	jmpi	804828 <__ieee754_atan2>

00802554 <cosh>:
  802554:	defff104 	addi	sp,sp,-60
  802558:	dd000d15 	stw	r20,52(sp)
  80255c:	050020b4 	movhi	r20,130
  802560:	a50e6e04 	addi	r20,r20,14776
  802564:	dcc00c15 	stw	r19,48(sp)
  802568:	dc800b15 	stw	r18,44(sp)
  80256c:	dc400a15 	stw	r17,40(sp)
  802570:	dc000915 	stw	r16,36(sp)
  802574:	2025883a 	mov	r18,r4
  802578:	dfc00e15 	stw	ra,56(sp)
  80257c:	2827883a 	mov	r19,r5
  802580:	0804b780 	call	804b78 <__ieee754_cosh>
  802584:	a1000017 	ldw	r4,0(r20)
  802588:	1021883a 	mov	r16,r2
  80258c:	00bfffc4 	movi	r2,-1
  802590:	1823883a 	mov	r17,r3
  802594:	20800426 	beq	r4,r2,8025a8 <cosh+0x54>
  802598:	9009883a 	mov	r4,r18
  80259c:	980b883a 	mov	r5,r19
  8025a0:	080ab500 	call	80ab50 <__isnand>
  8025a4:	10000a26 	beq	r2,zero,8025d0 <cosh+0x7c>
  8025a8:	8005883a 	mov	r2,r16
  8025ac:	8807883a 	mov	r3,r17
  8025b0:	dfc00e17 	ldw	ra,56(sp)
  8025b4:	dd000d17 	ldw	r20,52(sp)
  8025b8:	dcc00c17 	ldw	r19,48(sp)
  8025bc:	dc800b17 	ldw	r18,44(sp)
  8025c0:	dc400a17 	ldw	r17,40(sp)
  8025c4:	dc000917 	ldw	r16,36(sp)
  8025c8:	dec00f04 	addi	sp,sp,60
  8025cc:	f800283a 	ret
  8025d0:	9009883a 	mov	r4,r18
  8025d4:	980b883a 	mov	r5,r19
  8025d8:	080175c0 	call	80175c <fabs>
  8025dc:	0223eeb4 	movhi	r8,36794
  8025e0:	423e1f44 	addi	r8,r8,-1923
  8025e4:	025021b4 	movhi	r9,16518
  8025e8:	4a4cf384 	addi	r9,r9,13262
  8025ec:	180b883a 	mov	r5,r3
  8025f0:	480f883a 	mov	r7,r9
  8025f4:	1009883a 	mov	r4,r2
  8025f8:	400d883a 	mov	r6,r8
  8025fc:	080c3240 	call	80c324 <__gtdf2>
  802600:	00bfe90e 	bge	zero,r2,8025a8 <cosh+0x54>
  802604:	a1000017 	ldw	r4,0(r20)
  802608:	008000c4 	movi	r2,3
  80260c:	00c020b4 	movhi	r3,130
  802610:	18c60204 	addi	r3,r3,6152
  802614:	d8800015 	stw	r2,0(sp)
  802618:	d8c00115 	stw	r3,4(sp)
  80261c:	dcc00315 	stw	r19,12(sp)
  802620:	d8000815 	stw	zero,32(sp)
  802624:	dc800415 	stw	r18,16(sp)
  802628:	dcc00515 	stw	r19,20(sp)
  80262c:	dc800215 	stw	r18,8(sp)
  802630:	20000d1e 	bne	r4,zero,802668 <cosh+0x114>
  802634:	00b80034 	movhi	r2,57344
  802638:	00d1fc34 	movhi	r3,18416
  80263c:	18ffffc4 	addi	r3,r3,-1
  802640:	d8800615 	stw	r2,24(sp)
  802644:	d8c00715 	stw	r3,28(sp)
  802648:	d809883a 	mov	r4,sp
  80264c:	080ab800 	call	80ab80 <matherr>
  802650:	10000a26 	beq	r2,zero,80267c <cosh+0x128>
  802654:	d8800817 	ldw	r2,32(sp)
  802658:	10000c1e 	bne	r2,zero,80268c <cosh+0x138>
  80265c:	dc000617 	ldw	r16,24(sp)
  802660:	dc400717 	ldw	r17,28(sp)
  802664:	003fd006 	br	8025a8 <cosh+0x54>
  802668:	009ffc34 	movhi	r2,32752
  80266c:	d8800715 	stw	r2,28(sp)
  802670:	00800084 	movi	r2,2
  802674:	d8000615 	stw	zero,24(sp)
  802678:	20bff31e 	bne	r4,r2,802648 <cosh+0xf4>
  80267c:	080d2280 	call	80d228 <__errno>
  802680:	00c00884 	movi	r3,34
  802684:	10c00015 	stw	r3,0(r2)
  802688:	003ff206 	br	802654 <cosh+0x100>
  80268c:	080d2280 	call	80d228 <__errno>
  802690:	d8c00817 	ldw	r3,32(sp)
  802694:	10c00015 	stw	r3,0(r2)
  802698:	003ff006 	br	80265c <cosh+0x108>

0080269c <exp>:
  80269c:	defff104 	addi	sp,sp,-60
  8026a0:	dd000d15 	stw	r20,52(sp)
  8026a4:	050020b4 	movhi	r20,130
  8026a8:	a50e6e04 	addi	r20,r20,14776
  8026ac:	dcc00c15 	stw	r19,48(sp)
  8026b0:	dc800b15 	stw	r18,44(sp)
  8026b4:	dc400a15 	stw	r17,40(sp)
  8026b8:	dc000915 	stw	r16,36(sp)
  8026bc:	2025883a 	mov	r18,r4
  8026c0:	dfc00e15 	stw	ra,56(sp)
  8026c4:	2827883a 	mov	r19,r5
  8026c8:	0804e1c0 	call	804e1c <__ieee754_exp>
  8026cc:	a1000017 	ldw	r4,0(r20)
  8026d0:	1021883a 	mov	r16,r2
  8026d4:	00bfffc4 	movi	r2,-1
  8026d8:	1823883a 	mov	r17,r3
  8026dc:	20802926 	beq	r4,r2,802784 <exp+0xe8>
  8026e0:	9009883a 	mov	r4,r18
  8026e4:	980b883a 	mov	r5,r19
  8026e8:	080ab340 	call	80ab34 <finite>
  8026ec:	10002526 	beq	r2,zero,802784 <exp+0xe8>
  8026f0:	00bfbeb4 	movhi	r2,65274
  8026f4:	108e7bc4 	addi	r2,r2,14831
  8026f8:	00d021b4 	movhi	r3,16518
  8026fc:	18cb9084 	addi	r3,r3,11842
  802700:	180f883a 	mov	r7,r3
  802704:	9009883a 	mov	r4,r18
  802708:	980b883a 	mov	r5,r19
  80270c:	100d883a 	mov	r6,r2
  802710:	080c3240 	call	80c324 <__gtdf2>
  802714:	0080250e 	bge	zero,r2,8027ac <exp+0x110>
  802718:	a1000017 	ldw	r4,0(r20)
  80271c:	008000c4 	movi	r2,3
  802720:	00c020b4 	movhi	r3,130
  802724:	18c60404 	addi	r3,r3,6160
  802728:	d8800015 	stw	r2,0(sp)
  80272c:	d8c00115 	stw	r3,4(sp)
  802730:	dcc00315 	stw	r19,12(sp)
  802734:	d8000815 	stw	zero,32(sp)
  802738:	dc800415 	stw	r18,16(sp)
  80273c:	dcc00515 	stw	r19,20(sp)
  802740:	dc800215 	stw	r18,8(sp)
  802744:	20003a26 	beq	r4,zero,802830 <exp+0x194>
  802748:	009ffc34 	movhi	r2,32752
  80274c:	d8800715 	stw	r2,28(sp)
  802750:	00800084 	movi	r2,2
  802754:	d8000615 	stw	zero,24(sp)
  802758:	20802d1e 	bne	r4,r2,802810 <exp+0x174>
  80275c:	080d2280 	call	80d228 <__errno>
  802760:	00c00884 	movi	r3,34
  802764:	10c00015 	stw	r3,0(r2)
  802768:	d8800817 	ldw	r2,32(sp)
  80276c:	10002d26 	beq	r2,zero,802824 <exp+0x188>
  802770:	080d2280 	call	80d228 <__errno>
  802774:	d8c00817 	ldw	r3,32(sp)
  802778:	10c00015 	stw	r3,0(r2)
  80277c:	dc000617 	ldw	r16,24(sp)
  802780:	dc400717 	ldw	r17,28(sp)
  802784:	8005883a 	mov	r2,r16
  802788:	8807883a 	mov	r3,r17
  80278c:	dfc00e17 	ldw	ra,56(sp)
  802790:	dd000d17 	ldw	r20,52(sp)
  802794:	dcc00c17 	ldw	r19,48(sp)
  802798:	dc800b17 	ldw	r18,44(sp)
  80279c:	dc400a17 	ldw	r17,40(sp)
  8027a0:	dc000917 	ldw	r16,36(sp)
  8027a4:	dec00f04 	addi	sp,sp,60
  8027a8:	f800283a 	ret
  8027ac:	00b54b74 	movhi	r2,54573
  8027b0:	108c1444 	addi	r2,r2,12369
  8027b4:	00f021f4 	movhi	r3,49287
  8027b8:	18d24404 	addi	r3,r3,18704
  8027bc:	180f883a 	mov	r7,r3
  8027c0:	9009883a 	mov	r4,r18
  8027c4:	980b883a 	mov	r5,r19
  8027c8:	100d883a 	mov	r6,r2
  8027cc:	080c4340 	call	80c434 <__ltdf2>
  8027d0:	103fec0e 	bge	r2,zero,802784 <exp+0xe8>
  8027d4:	a1000017 	ldw	r4,0(r20)
  8027d8:	00800104 	movi	r2,4
  8027dc:	d8800015 	stw	r2,0(sp)
  8027e0:	00c020b4 	movhi	r3,130
  8027e4:	18c60404 	addi	r3,r3,6160
  8027e8:	00800084 	movi	r2,2
  8027ec:	d8c00115 	stw	r3,4(sp)
  8027f0:	dcc00315 	stw	r19,12(sp)
  8027f4:	d8000815 	stw	zero,32(sp)
  8027f8:	dc800415 	stw	r18,16(sp)
  8027fc:	dcc00515 	stw	r19,20(sp)
  802800:	dc800215 	stw	r18,8(sp)
  802804:	d8000615 	stw	zero,24(sp)
  802808:	d8000715 	stw	zero,28(sp)
  80280c:	20bfd326 	beq	r4,r2,80275c <exp+0xc0>
  802810:	d809883a 	mov	r4,sp
  802814:	080ab800 	call	80ab80 <matherr>
  802818:	103fd026 	beq	r2,zero,80275c <exp+0xc0>
  80281c:	d8800817 	ldw	r2,32(sp)
  802820:	103fd31e 	bne	r2,zero,802770 <exp+0xd4>
  802824:	dc000617 	ldw	r16,24(sp)
  802828:	dc400717 	ldw	r17,28(sp)
  80282c:	003fd506 	br	802784 <exp+0xe8>
  802830:	00b80034 	movhi	r2,57344
  802834:	00d1fc34 	movhi	r3,18416
  802838:	18ffffc4 	addi	r3,r3,-1
  80283c:	d8800615 	stw	r2,24(sp)
  802840:	d8c00715 	stw	r3,28(sp)
  802844:	003ff206 	br	802810 <exp+0x174>

00802848 <fmod>:
  802848:	deffef04 	addi	sp,sp,-68
  80284c:	dd800f15 	stw	r22,60(sp)
  802850:	058020b4 	movhi	r22,130
  802854:	b58e6e04 	addi	r22,r22,14776
  802858:	dd400e15 	stw	r21,56(sp)
  80285c:	dd000d15 	stw	r20,52(sp)
  802860:	dcc00c15 	stw	r19,48(sp)
  802864:	dc800b15 	stw	r18,44(sp)
  802868:	dc400a15 	stw	r17,40(sp)
  80286c:	dc000915 	stw	r16,36(sp)
  802870:	2029883a 	mov	r20,r4
  802874:	dfc01015 	stw	ra,64(sp)
  802878:	3025883a 	mov	r18,r6
  80287c:	282b883a 	mov	r21,r5
  802880:	3827883a 	mov	r19,r7
  802884:	08053ec0 	call	8053ec <__ieee754_fmod>
  802888:	b1000017 	ldw	r4,0(r22)
  80288c:	1021883a 	mov	r16,r2
  802890:	00bfffc4 	movi	r2,-1
  802894:	1823883a 	mov	r17,r3
  802898:	20800426 	beq	r4,r2,8028ac <fmod+0x64>
  80289c:	9009883a 	mov	r4,r18
  8028a0:	980b883a 	mov	r5,r19
  8028a4:	080ab500 	call	80ab50 <__isnand>
  8028a8:	10000c26 	beq	r2,zero,8028dc <fmod+0x94>
  8028ac:	8005883a 	mov	r2,r16
  8028b0:	8807883a 	mov	r3,r17
  8028b4:	dfc01017 	ldw	ra,64(sp)
  8028b8:	dd800f17 	ldw	r22,60(sp)
  8028bc:	dd400e17 	ldw	r21,56(sp)
  8028c0:	dd000d17 	ldw	r20,52(sp)
  8028c4:	dcc00c17 	ldw	r19,48(sp)
  8028c8:	dc800b17 	ldw	r18,44(sp)
  8028cc:	dc400a17 	ldw	r17,40(sp)
  8028d0:	dc000917 	ldw	r16,36(sp)
  8028d4:	dec01104 	addi	sp,sp,68
  8028d8:	f800283a 	ret
  8028dc:	a009883a 	mov	r4,r20
  8028e0:	a80b883a 	mov	r5,r21
  8028e4:	080ab500 	call	80ab50 <__isnand>
  8028e8:	103ff01e 	bne	r2,zero,8028ac <fmod+0x64>
  8028ec:	000d883a 	mov	r6,zero
  8028f0:	000f883a 	mov	r7,zero
  8028f4:	9009883a 	mov	r4,r18
  8028f8:	980b883a 	mov	r5,r19
  8028fc:	080c2140 	call	80c214 <__eqdf2>
  802900:	103fea1e 	bne	r2,zero,8028ac <fmod+0x64>
  802904:	b4000017 	ldw	r16,0(r22)
  802908:	00800044 	movi	r2,1
  80290c:	00c020b4 	movhi	r3,130
  802910:	18c60504 	addi	r3,r3,6164
  802914:	d8800015 	stw	r2,0(sp)
  802918:	d8c00115 	stw	r3,4(sp)
  80291c:	dcc00515 	stw	r19,20(sp)
  802920:	dd000215 	stw	r20,8(sp)
  802924:	dd400315 	stw	r21,12(sp)
  802928:	dc800415 	stw	r18,16(sp)
  80292c:	d8000815 	stw	zero,32(sp)
  802930:	80000a1e 	bne	r16,zero,80295c <fmod+0x114>
  802934:	dd400715 	stw	r21,28(sp)
  802938:	dd000615 	stw	r20,24(sp)
  80293c:	d809883a 	mov	r4,sp
  802940:	080ab800 	call	80ab80 <matherr>
  802944:	10000e26 	beq	r2,zero,802980 <fmod+0x138>
  802948:	d8800817 	ldw	r2,32(sp)
  80294c:	1000101e 	bne	r2,zero,802990 <fmod+0x148>
  802950:	dc000617 	ldw	r16,24(sp)
  802954:	dc400717 	ldw	r17,28(sp)
  802958:	003fd406 	br	8028ac <fmod+0x64>
  80295c:	0009883a 	mov	r4,zero
  802960:	000d883a 	mov	r6,zero
  802964:	000b883a 	mov	r5,zero
  802968:	000f883a 	mov	r7,zero
  80296c:	080bfbc0 	call	80bfbc <__divdf3>
  802970:	d8800615 	stw	r2,24(sp)
  802974:	00800084 	movi	r2,2
  802978:	d8c00715 	stw	r3,28(sp)
  80297c:	80bfef1e 	bne	r16,r2,80293c <fmod+0xf4>
  802980:	080d2280 	call	80d228 <__errno>
  802984:	00c00844 	movi	r3,33
  802988:	10c00015 	stw	r3,0(r2)
  80298c:	003fee06 	br	802948 <fmod+0x100>
  802990:	080d2280 	call	80d228 <__errno>
  802994:	d8c00817 	ldw	r3,32(sp)
  802998:	10c00015 	stw	r3,0(r2)
  80299c:	003fec06 	br	802950 <fmod+0x108>

008029a0 <log>:
  8029a0:	defff104 	addi	sp,sp,-60
  8029a4:	dd000d15 	stw	r20,52(sp)
  8029a8:	050020b4 	movhi	r20,130
  8029ac:	a50e6e04 	addi	r20,r20,14776
  8029b0:	dcc00c15 	stw	r19,48(sp)
  8029b4:	dc800b15 	stw	r18,44(sp)
  8029b8:	dc400a15 	stw	r17,40(sp)
  8029bc:	dc000915 	stw	r16,36(sp)
  8029c0:	2025883a 	mov	r18,r4
  8029c4:	dfc00e15 	stw	ra,56(sp)
  8029c8:	2827883a 	mov	r19,r5
  8029cc:	08057780 	call	805778 <__ieee754_log>
  8029d0:	a1000017 	ldw	r4,0(r20)
  8029d4:	1021883a 	mov	r16,r2
  8029d8:	00bfffc4 	movi	r2,-1
  8029dc:	1823883a 	mov	r17,r3
  8029e0:	20800a26 	beq	r4,r2,802a0c <log+0x6c>
  8029e4:	9009883a 	mov	r4,r18
  8029e8:	980b883a 	mov	r5,r19
  8029ec:	080ab500 	call	80ab50 <__isnand>
  8029f0:	1000061e 	bne	r2,zero,802a0c <log+0x6c>
  8029f4:	000d883a 	mov	r6,zero
  8029f8:	000f883a 	mov	r7,zero
  8029fc:	9009883a 	mov	r4,r18
  802a00:	980b883a 	mov	r5,r19
  802a04:	080c3240 	call	80c324 <__gtdf2>
  802a08:	00800a0e 	bge	zero,r2,802a34 <log+0x94>
  802a0c:	8005883a 	mov	r2,r16
  802a10:	8807883a 	mov	r3,r17
  802a14:	dfc00e17 	ldw	ra,56(sp)
  802a18:	dd000d17 	ldw	r20,52(sp)
  802a1c:	dcc00c17 	ldw	r19,48(sp)
  802a20:	dc800b17 	ldw	r18,44(sp)
  802a24:	dc400a17 	ldw	r17,40(sp)
  802a28:	dc000917 	ldw	r16,36(sp)
  802a2c:	dec00f04 	addi	sp,sp,60
  802a30:	f800283a 	ret
  802a34:	a4000017 	ldw	r16,0(r20)
  802a38:	008020b4 	movhi	r2,130
  802a3c:	10860704 	addi	r2,r2,6172
  802a40:	d8800115 	stw	r2,4(sp)
  802a44:	d8000815 	stw	zero,32(sp)
  802a48:	dc800215 	stw	r18,8(sp)
  802a4c:	dcc00315 	stw	r19,12(sp)
  802a50:	dc800415 	stw	r18,16(sp)
  802a54:	dcc00515 	stw	r19,20(sp)
  802a58:	8000231e 	bne	r16,zero,802ae8 <log+0x148>
  802a5c:	00b80034 	movhi	r2,57344
  802a60:	00f1fc34 	movhi	r3,51184
  802a64:	18ffffc4 	addi	r3,r3,-1
  802a68:	d8800615 	stw	r2,24(sp)
  802a6c:	d8c00715 	stw	r3,28(sp)
  802a70:	000d883a 	mov	r6,zero
  802a74:	000f883a 	mov	r7,zero
  802a78:	980b883a 	mov	r5,r19
  802a7c:	9009883a 	mov	r4,r18
  802a80:	080c2140 	call	80c214 <__eqdf2>
  802a84:	10000b1e 	bne	r2,zero,802ab4 <log+0x114>
  802a88:	00800084 	movi	r2,2
  802a8c:	d8800015 	stw	r2,0(sp)
  802a90:	80801d26 	beq	r16,r2,802b08 <log+0x168>
  802a94:	d809883a 	mov	r4,sp
  802a98:	080ab800 	call	80ab80 <matherr>
  802a9c:	10001a26 	beq	r2,zero,802b08 <log+0x168>
  802aa0:	d8800817 	ldw	r2,32(sp)
  802aa4:	10001c1e 	bne	r2,zero,802b18 <log+0x178>
  802aa8:	dc000617 	ldw	r16,24(sp)
  802aac:	dc400717 	ldw	r17,28(sp)
  802ab0:	003fd606 	br	802a0c <log+0x6c>
  802ab4:	00800044 	movi	r2,1
  802ab8:	00c00084 	movi	r3,2
  802abc:	d8800015 	stw	r2,0(sp)
  802ac0:	80c00d26 	beq	r16,r3,802af8 <log+0x158>
  802ac4:	d809883a 	mov	r4,sp
  802ac8:	080ab800 	call	80ab80 <matherr>
  802acc:	10000a26 	beq	r2,zero,802af8 <log+0x158>
  802ad0:	010020b4 	movhi	r4,130
  802ad4:	21070104 	addi	r4,r4,7172
  802ad8:	080ab880 	call	80ab88 <nan>
  802adc:	d8c00715 	stw	r3,28(sp)
  802ae0:	d8800615 	stw	r2,24(sp)
  802ae4:	003fee06 	br	802aa0 <log+0x100>
  802ae8:	00bffc34 	movhi	r2,65520
  802aec:	d8800715 	stw	r2,28(sp)
  802af0:	d8000615 	stw	zero,24(sp)
  802af4:	003fde06 	br	802a70 <log+0xd0>
  802af8:	080d2280 	call	80d228 <__errno>
  802afc:	00c00844 	movi	r3,33
  802b00:	10c00015 	stw	r3,0(r2)
  802b04:	003ff206 	br	802ad0 <log+0x130>
  802b08:	080d2280 	call	80d228 <__errno>
  802b0c:	00c00884 	movi	r3,34
  802b10:	10c00015 	stw	r3,0(r2)
  802b14:	003fe206 	br	802aa0 <log+0x100>
  802b18:	080d2280 	call	80d228 <__errno>
  802b1c:	d8c00817 	ldw	r3,32(sp)
  802b20:	10c00015 	stw	r3,0(r2)
  802b24:	003fe006 	br	802aa8 <log+0x108>

00802b28 <log10>:
  802b28:	defff104 	addi	sp,sp,-60
  802b2c:	dd000d15 	stw	r20,52(sp)
  802b30:	050020b4 	movhi	r20,130
  802b34:	a50e6e04 	addi	r20,r20,14776
  802b38:	dcc00c15 	stw	r19,48(sp)
  802b3c:	dc800b15 	stw	r18,44(sp)
  802b40:	dc400a15 	stw	r17,40(sp)
  802b44:	dc000915 	stw	r16,36(sp)
  802b48:	2025883a 	mov	r18,r4
  802b4c:	dfc00e15 	stw	ra,56(sp)
  802b50:	2827883a 	mov	r19,r5
  802b54:	0805f700 	call	805f70 <__ieee754_log10>
  802b58:	a1000017 	ldw	r4,0(r20)
  802b5c:	1021883a 	mov	r16,r2
  802b60:	00bfffc4 	movi	r2,-1
  802b64:	1823883a 	mov	r17,r3
  802b68:	20800a26 	beq	r4,r2,802b94 <log10+0x6c>
  802b6c:	9009883a 	mov	r4,r18
  802b70:	980b883a 	mov	r5,r19
  802b74:	080ab500 	call	80ab50 <__isnand>
  802b78:	1000061e 	bne	r2,zero,802b94 <log10+0x6c>
  802b7c:	000d883a 	mov	r6,zero
  802b80:	000f883a 	mov	r7,zero
  802b84:	9009883a 	mov	r4,r18
  802b88:	980b883a 	mov	r5,r19
  802b8c:	080c4bc0 	call	80c4bc <__ledf2>
  802b90:	00800a0e 	bge	zero,r2,802bbc <log10+0x94>
  802b94:	8005883a 	mov	r2,r16
  802b98:	8807883a 	mov	r3,r17
  802b9c:	dfc00e17 	ldw	ra,56(sp)
  802ba0:	dd000d17 	ldw	r20,52(sp)
  802ba4:	dcc00c17 	ldw	r19,48(sp)
  802ba8:	dc800b17 	ldw	r18,44(sp)
  802bac:	dc400a17 	ldw	r17,40(sp)
  802bb0:	dc000917 	ldw	r16,36(sp)
  802bb4:	dec00f04 	addi	sp,sp,60
  802bb8:	f800283a 	ret
  802bbc:	a4000017 	ldw	r16,0(r20)
  802bc0:	008020b4 	movhi	r2,130
  802bc4:	10860804 	addi	r2,r2,6176
  802bc8:	d8800115 	stw	r2,4(sp)
  802bcc:	d8000815 	stw	zero,32(sp)
  802bd0:	dc800215 	stw	r18,8(sp)
  802bd4:	dcc00315 	stw	r19,12(sp)
  802bd8:	dc800415 	stw	r18,16(sp)
  802bdc:	dcc00515 	stw	r19,20(sp)
  802be0:	8000231e 	bne	r16,zero,802c70 <log10+0x148>
  802be4:	00b80034 	movhi	r2,57344
  802be8:	00f1fc34 	movhi	r3,51184
  802bec:	18ffffc4 	addi	r3,r3,-1
  802bf0:	d8800615 	stw	r2,24(sp)
  802bf4:	d8c00715 	stw	r3,28(sp)
  802bf8:	000d883a 	mov	r6,zero
  802bfc:	000f883a 	mov	r7,zero
  802c00:	980b883a 	mov	r5,r19
  802c04:	9009883a 	mov	r4,r18
  802c08:	080c2140 	call	80c214 <__eqdf2>
  802c0c:	10000b1e 	bne	r2,zero,802c3c <log10+0x114>
  802c10:	00800084 	movi	r2,2
  802c14:	d8800015 	stw	r2,0(sp)
  802c18:	80801d26 	beq	r16,r2,802c90 <log10+0x168>
  802c1c:	d809883a 	mov	r4,sp
  802c20:	080ab800 	call	80ab80 <matherr>
  802c24:	10001a26 	beq	r2,zero,802c90 <log10+0x168>
  802c28:	d8800817 	ldw	r2,32(sp)
  802c2c:	10001c1e 	bne	r2,zero,802ca0 <log10+0x178>
  802c30:	dc000617 	ldw	r16,24(sp)
  802c34:	dc400717 	ldw	r17,28(sp)
  802c38:	003fd606 	br	802b94 <log10+0x6c>
  802c3c:	00800044 	movi	r2,1
  802c40:	00c00084 	movi	r3,2
  802c44:	d8800015 	stw	r2,0(sp)
  802c48:	80c00d26 	beq	r16,r3,802c80 <log10+0x158>
  802c4c:	d809883a 	mov	r4,sp
  802c50:	080ab800 	call	80ab80 <matherr>
  802c54:	10000a26 	beq	r2,zero,802c80 <log10+0x158>
  802c58:	010020b4 	movhi	r4,130
  802c5c:	21070104 	addi	r4,r4,7172
  802c60:	080ab880 	call	80ab88 <nan>
  802c64:	d8c00715 	stw	r3,28(sp)
  802c68:	d8800615 	stw	r2,24(sp)
  802c6c:	003fee06 	br	802c28 <log10+0x100>
  802c70:	00bffc34 	movhi	r2,65520
  802c74:	d8800715 	stw	r2,28(sp)
  802c78:	d8000615 	stw	zero,24(sp)
  802c7c:	003fde06 	br	802bf8 <log10+0xd0>
  802c80:	080d2280 	call	80d228 <__errno>
  802c84:	00c00844 	movi	r3,33
  802c88:	10c00015 	stw	r3,0(r2)
  802c8c:	003ff206 	br	802c58 <log10+0x130>
  802c90:	080d2280 	call	80d228 <__errno>
  802c94:	00c00884 	movi	r3,34
  802c98:	10c00015 	stw	r3,0(r2)
  802c9c:	003fe206 	br	802c28 <log10+0x100>
  802ca0:	080d2280 	call	80d228 <__errno>
  802ca4:	d8c00817 	ldw	r3,32(sp)
  802ca8:	10c00015 	stw	r3,0(r2)
  802cac:	003fe006 	br	802c30 <log10+0x108>

00802cb0 <pow>:
  802cb0:	deffee04 	addi	sp,sp,-72
  802cb4:	ddc01015 	stw	r23,64(sp)
  802cb8:	05c020b4 	movhi	r23,130
  802cbc:	bdce6e04 	addi	r23,r23,14776
  802cc0:	dd800f15 	stw	r22,60(sp)
  802cc4:	dd400e15 	stw	r21,56(sp)
  802cc8:	dd000d15 	stw	r20,52(sp)
  802ccc:	dcc00c15 	stw	r19,48(sp)
  802cd0:	dc800b15 	stw	r18,44(sp)
  802cd4:	dc400a15 	stw	r17,40(sp)
  802cd8:	dc000915 	stw	r16,36(sp)
  802cdc:	2029883a 	mov	r20,r4
  802ce0:	dfc01115 	stw	ra,68(sp)
  802ce4:	3025883a 	mov	r18,r6
  802ce8:	282b883a 	mov	r21,r5
  802cec:	3827883a 	mov	r19,r7
  802cf0:	08061880 	call	806188 <__ieee754_pow>
  802cf4:	b9000017 	ldw	r4,0(r23)
  802cf8:	05bfffc4 	movi	r22,-1
  802cfc:	1021883a 	mov	r16,r2
  802d00:	1823883a 	mov	r17,r3
  802d04:	25800426 	beq	r4,r22,802d18 <pow+0x68>
  802d08:	9009883a 	mov	r4,r18
  802d0c:	980b883a 	mov	r5,r19
  802d10:	080ab500 	call	80ab50 <__isnand>
  802d14:	10000d26 	beq	r2,zero,802d4c <pow+0x9c>
  802d18:	8005883a 	mov	r2,r16
  802d1c:	8807883a 	mov	r3,r17
  802d20:	dfc01117 	ldw	ra,68(sp)
  802d24:	ddc01017 	ldw	r23,64(sp)
  802d28:	dd800f17 	ldw	r22,60(sp)
  802d2c:	dd400e17 	ldw	r21,56(sp)
  802d30:	dd000d17 	ldw	r20,52(sp)
  802d34:	dcc00c17 	ldw	r19,48(sp)
  802d38:	dc800b17 	ldw	r18,44(sp)
  802d3c:	dc400a17 	ldw	r17,40(sp)
  802d40:	dc000917 	ldw	r16,36(sp)
  802d44:	dec01204 	addi	sp,sp,72
  802d48:	f800283a 	ret
  802d4c:	a009883a 	mov	r4,r20
  802d50:	a80b883a 	mov	r5,r21
  802d54:	080ab500 	call	80ab50 <__isnand>
  802d58:	1000151e 	bne	r2,zero,802db0 <pow+0x100>
  802d5c:	000d883a 	mov	r6,zero
  802d60:	000f883a 	mov	r7,zero
  802d64:	a009883a 	mov	r4,r20
  802d68:	a80b883a 	mov	r5,r21
  802d6c:	080c2140 	call	80c214 <__eqdf2>
  802d70:	1000541e 	bne	r2,zero,802ec4 <pow+0x214>
  802d74:	000d883a 	mov	r6,zero
  802d78:	000f883a 	mov	r7,zero
  802d7c:	9009883a 	mov	r4,r18
  802d80:	980b883a 	mov	r5,r19
  802d84:	080c2140 	call	80c214 <__eqdf2>
  802d88:	10002c1e 	bne	r2,zero,802e3c <pow+0x18c>
  802d8c:	b8800017 	ldw	r2,0(r23)
  802d90:	d8000615 	stw	zero,24(sp)
  802d94:	d8000715 	stw	zero,28(sp)
  802d98:	10001226 	beq	r2,zero,802de4 <pow+0x134>
  802d9c:	008ffc34 	movhi	r2,16368
  802da0:	d8800715 	stw	r2,28(sp)
  802da4:	dc000617 	ldw	r16,24(sp)
  802da8:	dc400717 	ldw	r17,28(sp)
  802dac:	003fda06 	br	802d18 <pow+0x68>
  802db0:	000d883a 	mov	r6,zero
  802db4:	000f883a 	mov	r7,zero
  802db8:	9009883a 	mov	r4,r18
  802dbc:	980b883a 	mov	r5,r19
  802dc0:	080c2140 	call	80c214 <__eqdf2>
  802dc4:	103fd41e 	bne	r2,zero,802d18 <pow+0x68>
  802dc8:	b8c00017 	ldw	r3,0(r23)
  802dcc:	010ffc34 	movhi	r4,16368
  802dd0:	d8000615 	stw	zero,24(sp)
  802dd4:	d9000715 	stw	r4,28(sp)
  802dd8:	1d801526 	beq	r3,r22,802e30 <pow+0x180>
  802ddc:	00800084 	movi	r2,2
  802de0:	18801326 	beq	r3,r2,802e30 <pow+0x180>
  802de4:	008020b4 	movhi	r2,130
  802de8:	10860a04 	addi	r2,r2,6184
  802dec:	00c00044 	movi	r3,1
  802df0:	d809883a 	mov	r4,sp
  802df4:	dcc00515 	stw	r19,20(sp)
  802df8:	dd400315 	stw	r21,12(sp)
  802dfc:	d8800115 	stw	r2,4(sp)
  802e00:	d8c00015 	stw	r3,0(sp)
  802e04:	dc800415 	stw	r18,16(sp)
  802e08:	dd000215 	stw	r20,8(sp)
  802e0c:	d8000815 	stw	zero,32(sp)
  802e10:	080ab800 	call	80ab80 <matherr>
  802e14:	10002726 	beq	r2,zero,802eb4 <pow+0x204>
  802e18:	d8800817 	ldw	r2,32(sp)
  802e1c:	103fe126 	beq	r2,zero,802da4 <pow+0xf4>
  802e20:	080d2280 	call	80d228 <__errno>
  802e24:	d8c00817 	ldw	r3,32(sp)
  802e28:	10c00015 	stw	r3,0(r2)
  802e2c:	003fdd06 	br	802da4 <pow+0xf4>
  802e30:	d9000715 	stw	r4,28(sp)
  802e34:	d8000615 	stw	zero,24(sp)
  802e38:	003fda06 	br	802da4 <pow+0xf4>
  802e3c:	9009883a 	mov	r4,r18
  802e40:	980b883a 	mov	r5,r19
  802e44:	080ab340 	call	80ab34 <finite>
  802e48:	103fb326 	beq	r2,zero,802d18 <pow+0x68>
  802e4c:	000d883a 	mov	r6,zero
  802e50:	000f883a 	mov	r7,zero
  802e54:	9009883a 	mov	r4,r18
  802e58:	980b883a 	mov	r5,r19
  802e5c:	080c4340 	call	80c434 <__ltdf2>
  802e60:	103fad0e 	bge	r2,zero,802d18 <pow+0x68>
  802e64:	b9000017 	ldw	r4,0(r23)
  802e68:	00800044 	movi	r2,1
  802e6c:	00c020b4 	movhi	r3,130
  802e70:	18c60a04 	addi	r3,r3,6184
  802e74:	d8800015 	stw	r2,0(sp)
  802e78:	d8c00115 	stw	r3,4(sp)
  802e7c:	dd400315 	stw	r21,12(sp)
  802e80:	dcc00515 	stw	r19,20(sp)
  802e84:	d8000815 	stw	zero,32(sp)
  802e88:	dd000215 	stw	r20,8(sp)
  802e8c:	dc800415 	stw	r18,16(sp)
  802e90:	20005626 	beq	r4,zero,802fec <pow+0x33c>
  802e94:	00bffc34 	movhi	r2,65520
  802e98:	d8800715 	stw	r2,28(sp)
  802e9c:	00800084 	movi	r2,2
  802ea0:	d8000615 	stw	zero,24(sp)
  802ea4:	20800326 	beq	r4,r2,802eb4 <pow+0x204>
  802ea8:	d809883a 	mov	r4,sp
  802eac:	080ab800 	call	80ab80 <matherr>
  802eb0:	103fd91e 	bne	r2,zero,802e18 <pow+0x168>
  802eb4:	080d2280 	call	80d228 <__errno>
  802eb8:	00c00844 	movi	r3,33
  802ebc:	10c00015 	stw	r3,0(r2)
  802ec0:	003fd506 	br	802e18 <pow+0x168>
  802ec4:	8009883a 	mov	r4,r16
  802ec8:	880b883a 	mov	r5,r17
  802ecc:	080ab340 	call	80ab34 <finite>
  802ed0:	10002426 	beq	r2,zero,802f64 <pow+0x2b4>
  802ed4:	000d883a 	mov	r6,zero
  802ed8:	000f883a 	mov	r7,zero
  802edc:	8009883a 	mov	r4,r16
  802ee0:	880b883a 	mov	r5,r17
  802ee4:	080c2140 	call	80c214 <__eqdf2>
  802ee8:	103f8b1e 	bne	r2,zero,802d18 <pow+0x68>
  802eec:	a009883a 	mov	r4,r20
  802ef0:	a80b883a 	mov	r5,r21
  802ef4:	080ab340 	call	80ab34 <finite>
  802ef8:	103f8726 	beq	r2,zero,802d18 <pow+0x68>
  802efc:	9009883a 	mov	r4,r18
  802f00:	980b883a 	mov	r5,r19
  802f04:	080ab340 	call	80ab34 <finite>
  802f08:	103f8326 	beq	r2,zero,802d18 <pow+0x68>
  802f0c:	b9000017 	ldw	r4,0(r23)
  802f10:	00800104 	movi	r2,4
  802f14:	d8800015 	stw	r2,0(sp)
  802f18:	00c020b4 	movhi	r3,130
  802f1c:	18c60a04 	addi	r3,r3,6184
  802f20:	00800084 	movi	r2,2
  802f24:	d8c00115 	stw	r3,4(sp)
  802f28:	dd400315 	stw	r21,12(sp)
  802f2c:	dcc00515 	stw	r19,20(sp)
  802f30:	d8000815 	stw	zero,32(sp)
  802f34:	dd000215 	stw	r20,8(sp)
  802f38:	dc800415 	stw	r18,16(sp)
  802f3c:	d8000615 	stw	zero,24(sp)
  802f40:	d8000715 	stw	zero,28(sp)
  802f44:	20800326 	beq	r4,r2,802f54 <pow+0x2a4>
  802f48:	d809883a 	mov	r4,sp
  802f4c:	080ab800 	call	80ab80 <matherr>
  802f50:	103fb11e 	bne	r2,zero,802e18 <pow+0x168>
  802f54:	080d2280 	call	80d228 <__errno>
  802f58:	00c00884 	movi	r3,34
  802f5c:	10c00015 	stw	r3,0(r2)
  802f60:	003fad06 	br	802e18 <pow+0x168>
  802f64:	a009883a 	mov	r4,r20
  802f68:	a80b883a 	mov	r5,r21
  802f6c:	080ab340 	call	80ab34 <finite>
  802f70:	103fd826 	beq	r2,zero,802ed4 <pow+0x224>
  802f74:	9009883a 	mov	r4,r18
  802f78:	980b883a 	mov	r5,r19
  802f7c:	080ab340 	call	80ab34 <finite>
  802f80:	103fd426 	beq	r2,zero,802ed4 <pow+0x224>
  802f84:	880b883a 	mov	r5,r17
  802f88:	8009883a 	mov	r4,r16
  802f8c:	080ab500 	call	80ab50 <__isnand>
  802f90:	10001926 	beq	r2,zero,802ff8 <pow+0x348>
  802f94:	bc000017 	ldw	r16,0(r23)
  802f98:	00800044 	movi	r2,1
  802f9c:	00c020b4 	movhi	r3,130
  802fa0:	18c60a04 	addi	r3,r3,6184
  802fa4:	d8800015 	stw	r2,0(sp)
  802fa8:	d8c00115 	stw	r3,4(sp)
  802fac:	dd400315 	stw	r21,12(sp)
  802fb0:	dcc00515 	stw	r19,20(sp)
  802fb4:	d8000815 	stw	zero,32(sp)
  802fb8:	dd000215 	stw	r20,8(sp)
  802fbc:	dc800415 	stw	r18,16(sp)
  802fc0:	80000a26 	beq	r16,zero,802fec <pow+0x33c>
  802fc4:	0009883a 	mov	r4,zero
  802fc8:	000d883a 	mov	r6,zero
  802fcc:	000b883a 	mov	r5,zero
  802fd0:	000f883a 	mov	r7,zero
  802fd4:	080bfbc0 	call	80bfbc <__divdf3>
  802fd8:	d8800615 	stw	r2,24(sp)
  802fdc:	00800084 	movi	r2,2
  802fe0:	d8c00715 	stw	r3,28(sp)
  802fe4:	80bfb01e 	bne	r16,r2,802ea8 <pow+0x1f8>
  802fe8:	003fb206 	br	802eb4 <pow+0x204>
  802fec:	d8000615 	stw	zero,24(sp)
  802ff0:	d8000715 	stw	zero,28(sp)
  802ff4:	003fac06 	br	802ea8 <pow+0x1f8>
  802ff8:	b8800017 	ldw	r2,0(r23)
  802ffc:	00c000c4 	movi	r3,3
  803000:	010020b4 	movhi	r4,130
  803004:	21060a04 	addi	r4,r4,6184
  803008:	d8c00015 	stw	r3,0(sp)
  80300c:	d9000115 	stw	r4,4(sp)
  803010:	d8000815 	stw	zero,32(sp)
  803014:	dd000215 	stw	r20,8(sp)
  803018:	dd400315 	stw	r21,12(sp)
  80301c:	dc800415 	stw	r18,16(sp)
  803020:	dcc00515 	stw	r19,20(sp)
  803024:	1000251e 	bne	r2,zero,8030bc <pow+0x40c>
  803028:	05b80034 	movhi	r22,57344
  80302c:	0091fc34 	movhi	r2,18416
  803030:	10bfffc4 	addi	r2,r2,-1
  803034:	000d883a 	mov	r6,zero
  803038:	000f883a 	mov	r7,zero
  80303c:	a80b883a 	mov	r5,r21
  803040:	a009883a 	mov	r4,r20
  803044:	d8800715 	stw	r2,28(sp)
  803048:	dd800615 	stw	r22,24(sp)
  80304c:	080c4340 	call	80c434 <__ltdf2>
  803050:	103fbd0e 	bge	r2,zero,802f48 <pow+0x298>
  803054:	0005883a 	mov	r2,zero
  803058:	00cff834 	movhi	r3,16352
  80305c:	180f883a 	mov	r7,r3
  803060:	100d883a 	mov	r6,r2
  803064:	980b883a 	mov	r5,r19
  803068:	9009883a 	mov	r4,r18
  80306c:	080bbf80 	call	80bbf8 <__muldf3>
  803070:	1009883a 	mov	r4,r2
  803074:	180b883a 	mov	r5,r3
  803078:	1021883a 	mov	r16,r2
  80307c:	1823883a 	mov	r17,r3
  803080:	080ab980 	call	80ab98 <rint>
  803084:	180f883a 	mov	r7,r3
  803088:	8009883a 	mov	r4,r16
  80308c:	880b883a 	mov	r5,r17
  803090:	100d883a 	mov	r6,r2
  803094:	080c29c0 	call	80c29c <__nedf2>
  803098:	10000426 	beq	r2,zero,8030ac <pow+0x3fc>
  80309c:	00b1fc34 	movhi	r2,51184
  8030a0:	10bfffc4 	addi	r2,r2,-1
  8030a4:	dd800615 	stw	r22,24(sp)
  8030a8:	d8800715 	stw	r2,28(sp)
  8030ac:	b8c00017 	ldw	r3,0(r23)
  8030b0:	00800084 	movi	r2,2
  8030b4:	18bfa41e 	bne	r3,r2,802f48 <pow+0x298>
  8030b8:	003fa606 	br	802f54 <pow+0x2a4>
  8030bc:	009ffc34 	movhi	r2,32752
  8030c0:	000d883a 	mov	r6,zero
  8030c4:	000f883a 	mov	r7,zero
  8030c8:	a80b883a 	mov	r5,r21
  8030cc:	a009883a 	mov	r4,r20
  8030d0:	d8800715 	stw	r2,28(sp)
  8030d4:	d8000615 	stw	zero,24(sp)
  8030d8:	080c4340 	call	80c434 <__ltdf2>
  8030dc:	103ff30e 	bge	r2,zero,8030ac <pow+0x3fc>
  8030e0:	0005883a 	mov	r2,zero
  8030e4:	00cff834 	movhi	r3,16352
  8030e8:	180f883a 	mov	r7,r3
  8030ec:	100d883a 	mov	r6,r2
  8030f0:	980b883a 	mov	r5,r19
  8030f4:	9009883a 	mov	r4,r18
  8030f8:	080bbf80 	call	80bbf8 <__muldf3>
  8030fc:	1009883a 	mov	r4,r2
  803100:	180b883a 	mov	r5,r3
  803104:	1021883a 	mov	r16,r2
  803108:	1823883a 	mov	r17,r3
  80310c:	080ab980 	call	80ab98 <rint>
  803110:	180f883a 	mov	r7,r3
  803114:	8009883a 	mov	r4,r16
  803118:	880b883a 	mov	r5,r17
  80311c:	100d883a 	mov	r6,r2
  803120:	080c29c0 	call	80c29c <__nedf2>
  803124:	103fe126 	beq	r2,zero,8030ac <pow+0x3fc>
  803128:	00bffc34 	movhi	r2,65520
  80312c:	d8800715 	stw	r2,28(sp)
  803130:	d8000615 	stw	zero,24(sp)
  803134:	003fdd06 	br	8030ac <pow+0x3fc>

00803138 <sinh>:
  803138:	defff104 	addi	sp,sp,-60
  80313c:	dd000d15 	stw	r20,52(sp)
  803140:	050020b4 	movhi	r20,130
  803144:	a50e6e04 	addi	r20,r20,14776
  803148:	dcc00c15 	stw	r19,48(sp)
  80314c:	dc800b15 	stw	r18,44(sp)
  803150:	dc400a15 	stw	r17,40(sp)
  803154:	dc000915 	stw	r16,36(sp)
  803158:	2025883a 	mov	r18,r4
  80315c:	dfc00e15 	stw	ra,56(sp)
  803160:	2827883a 	mov	r19,r5
  803164:	0807cb00 	call	807cb0 <__ieee754_sinh>
  803168:	a1000017 	ldw	r4,0(r20)
  80316c:	1021883a 	mov	r16,r2
  803170:	00bfffc4 	movi	r2,-1
  803174:	1823883a 	mov	r17,r3
  803178:	20800426 	beq	r4,r2,80318c <sinh+0x54>
  80317c:	8009883a 	mov	r4,r16
  803180:	180b883a 	mov	r5,r3
  803184:	080ab340 	call	80ab34 <finite>
  803188:	10000a26 	beq	r2,zero,8031b4 <sinh+0x7c>
  80318c:	8005883a 	mov	r2,r16
  803190:	8807883a 	mov	r3,r17
  803194:	dfc00e17 	ldw	ra,56(sp)
  803198:	dd000d17 	ldw	r20,52(sp)
  80319c:	dcc00c17 	ldw	r19,48(sp)
  8031a0:	dc800b17 	ldw	r18,44(sp)
  8031a4:	dc400a17 	ldw	r17,40(sp)
  8031a8:	dc000917 	ldw	r16,36(sp)
  8031ac:	dec00f04 	addi	sp,sp,60
  8031b0:	f800283a 	ret
  8031b4:	9009883a 	mov	r4,r18
  8031b8:	980b883a 	mov	r5,r19
  8031bc:	080ab340 	call	80ab34 <finite>
  8031c0:	103ff226 	beq	r2,zero,80318c <sinh+0x54>
  8031c4:	a4000017 	ldw	r16,0(r20)
  8031c8:	008000c4 	movi	r2,3
  8031cc:	00c020b4 	movhi	r3,130
  8031d0:	18c60b04 	addi	r3,r3,6188
  8031d4:	d8800015 	stw	r2,0(sp)
  8031d8:	d8c00115 	stw	r3,4(sp)
  8031dc:	d8000815 	stw	zero,32(sp)
  8031e0:	dc800415 	stw	r18,16(sp)
  8031e4:	dcc00515 	stw	r19,20(sp)
  8031e8:	dc800215 	stw	r18,8(sp)
  8031ec:	dcc00315 	stw	r19,12(sp)
  8031f0:	8000131e 	bne	r16,zero,803240 <sinh+0x108>
  8031f4:	000d883a 	mov	r6,zero
  8031f8:	000f883a 	mov	r7,zero
  8031fc:	980b883a 	mov	r5,r19
  803200:	9009883a 	mov	r4,r18
  803204:	080c3240 	call	80c324 <__gtdf2>
  803208:	0080210e 	bge	zero,r2,803290 <sinh+0x158>
  80320c:	00b80034 	movhi	r2,57344
  803210:	00d1fc34 	movhi	r3,18416
  803214:	18ffffc4 	addi	r3,r3,-1
  803218:	d8c00715 	stw	r3,28(sp)
  80321c:	d8800615 	stw	r2,24(sp)
  803220:	d809883a 	mov	r4,sp
  803224:	080ab800 	call	80ab80 <matherr>
  803228:	10001126 	beq	r2,zero,803270 <sinh+0x138>
  80322c:	d8800817 	ldw	r2,32(sp)
  803230:	1000131e 	bne	r2,zero,803280 <sinh+0x148>
  803234:	dc000617 	ldw	r16,24(sp)
  803238:	dc400717 	ldw	r17,28(sp)
  80323c:	003fd306 	br	80318c <sinh+0x54>
  803240:	000d883a 	mov	r6,zero
  803244:	000f883a 	mov	r7,zero
  803248:	980b883a 	mov	r5,r19
  80324c:	9009883a 	mov	r4,r18
  803250:	080c3240 	call	80c324 <__gtdf2>
  803254:	0080120e 	bge	zero,r2,8032a0 <sinh+0x168>
  803258:	0005883a 	mov	r2,zero
  80325c:	00dffc34 	movhi	r3,32752
  803260:	d8800615 	stw	r2,24(sp)
  803264:	00800084 	movi	r2,2
  803268:	d8c00715 	stw	r3,28(sp)
  80326c:	80bfec1e 	bne	r16,r2,803220 <sinh+0xe8>
  803270:	080d2280 	call	80d228 <__errno>
  803274:	00c00884 	movi	r3,34
  803278:	10c00015 	stw	r3,0(r2)
  80327c:	003feb06 	br	80322c <sinh+0xf4>
  803280:	080d2280 	call	80d228 <__errno>
  803284:	d8c00817 	ldw	r3,32(sp)
  803288:	10c00015 	stw	r3,0(r2)
  80328c:	003fe906 	br	803234 <sinh+0xfc>
  803290:	00b80034 	movhi	r2,57344
  803294:	00f1fc34 	movhi	r3,51184
  803298:	18ffffc4 	addi	r3,r3,-1
  80329c:	003fde06 	br	803218 <sinh+0xe0>
  8032a0:	0005883a 	mov	r2,zero
  8032a4:	00fffc34 	movhi	r3,65520
  8032a8:	003fed06 	br	803260 <sinh+0x128>

008032ac <sqrt>:
  8032ac:	defff104 	addi	sp,sp,-60
  8032b0:	dd000d15 	stw	r20,52(sp)
  8032b4:	050020b4 	movhi	r20,130
  8032b8:	a50e6e04 	addi	r20,r20,14776
  8032bc:	dcc00c15 	stw	r19,48(sp)
  8032c0:	dc800b15 	stw	r18,44(sp)
  8032c4:	dc400a15 	stw	r17,40(sp)
  8032c8:	dc000915 	stw	r16,36(sp)
  8032cc:	2025883a 	mov	r18,r4
  8032d0:	dfc00e15 	stw	ra,56(sp)
  8032d4:	2827883a 	mov	r19,r5
  8032d8:	0807fa80 	call	807fa8 <__ieee754_sqrt>
  8032dc:	a1000017 	ldw	r4,0(r20)
  8032e0:	1021883a 	mov	r16,r2
  8032e4:	00bfffc4 	movi	r2,-1
  8032e8:	1823883a 	mov	r17,r3
  8032ec:	20800a26 	beq	r4,r2,803318 <sqrt+0x6c>
  8032f0:	9009883a 	mov	r4,r18
  8032f4:	980b883a 	mov	r5,r19
  8032f8:	080ab500 	call	80ab50 <__isnand>
  8032fc:	1000061e 	bne	r2,zero,803318 <sqrt+0x6c>
  803300:	000d883a 	mov	r6,zero
  803304:	000f883a 	mov	r7,zero
  803308:	9009883a 	mov	r4,r18
  80330c:	980b883a 	mov	r5,r19
  803310:	080c4340 	call	80c434 <__ltdf2>
  803314:	10000a16 	blt	r2,zero,803340 <sqrt+0x94>
  803318:	8005883a 	mov	r2,r16
  80331c:	8807883a 	mov	r3,r17
  803320:	dfc00e17 	ldw	ra,56(sp)
  803324:	dd000d17 	ldw	r20,52(sp)
  803328:	dcc00c17 	ldw	r19,48(sp)
  80332c:	dc800b17 	ldw	r18,44(sp)
  803330:	dc400a17 	ldw	r17,40(sp)
  803334:	dc000917 	ldw	r16,36(sp)
  803338:	dec00f04 	addi	sp,sp,60
  80333c:	f800283a 	ret
  803340:	a4000017 	ldw	r16,0(r20)
  803344:	00800044 	movi	r2,1
  803348:	00c020b4 	movhi	r3,130
  80334c:	18c60d04 	addi	r3,r3,6196
  803350:	d8800015 	stw	r2,0(sp)
  803354:	d8c00115 	stw	r3,4(sp)
  803358:	dcc00315 	stw	r19,12(sp)
  80335c:	d8000815 	stw	zero,32(sp)
  803360:	dc800415 	stw	r18,16(sp)
  803364:	dcc00515 	stw	r19,20(sp)
  803368:	dc800215 	stw	r18,8(sp)
  80336c:	80000a1e 	bne	r16,zero,803398 <sqrt+0xec>
  803370:	d8000615 	stw	zero,24(sp)
  803374:	d8000715 	stw	zero,28(sp)
  803378:	d809883a 	mov	r4,sp
  80337c:	080ab800 	call	80ab80 <matherr>
  803380:	10000e26 	beq	r2,zero,8033bc <sqrt+0x110>
  803384:	d8800817 	ldw	r2,32(sp)
  803388:	1000101e 	bne	r2,zero,8033cc <sqrt+0x120>
  80338c:	dc000617 	ldw	r16,24(sp)
  803390:	dc400717 	ldw	r17,28(sp)
  803394:	003fe006 	br	803318 <sqrt+0x6c>
  803398:	0009883a 	mov	r4,zero
  80339c:	000d883a 	mov	r6,zero
  8033a0:	000b883a 	mov	r5,zero
  8033a4:	000f883a 	mov	r7,zero
  8033a8:	080bfbc0 	call	80bfbc <__divdf3>
  8033ac:	d8800615 	stw	r2,24(sp)
  8033b0:	00800084 	movi	r2,2
  8033b4:	d8c00715 	stw	r3,28(sp)
  8033b8:	80bfef1e 	bne	r16,r2,803378 <sqrt+0xcc>
  8033bc:	080d2280 	call	80d228 <__errno>
  8033c0:	00c00844 	movi	r3,33
  8033c4:	10c00015 	stw	r3,0(r2)
  8033c8:	003fee06 	br	803384 <sqrt+0xd8>
  8033cc:	080d2280 	call	80d228 <__errno>
  8033d0:	d8c00817 	ldw	r3,32(sp)
  8033d4:	10c00015 	stw	r3,0(r2)
  8033d8:	003fec06 	br	80338c <sqrt+0xe0>

008033dc <sqrtf>:
  8033dc:	defff304 	addi	sp,sp,-52
  8033e0:	dc800b15 	stw	r18,44(sp)
  8033e4:	048020b4 	movhi	r18,130
  8033e8:	948e6e04 	addi	r18,r18,14776
  8033ec:	dc400a15 	stw	r17,40(sp)
  8033f0:	dc000915 	stw	r16,36(sp)
  8033f4:	dfc00c15 	stw	ra,48(sp)
  8033f8:	2021883a 	mov	r16,r4
  8033fc:	08082700 	call	808270 <__ieee754_sqrtf>
  803400:	90c00017 	ldw	r3,0(r18)
  803404:	1023883a 	mov	r17,r2
  803408:	00bfffc4 	movi	r2,-1
  80340c:	18800726 	beq	r3,r2,80342c <sqrtf+0x50>
  803410:	8009883a 	mov	r4,r16
  803414:	080ada80 	call	80ada8 <isnanf>
  803418:	1000041e 	bne	r2,zero,80342c <sqrtf+0x50>
  80341c:	8009883a 	mov	r4,r16
  803420:	000b883a 	mov	r5,zero
  803424:	080b5680 	call	80b568 <__ltsf2>
  803428:	10000716 	blt	r2,zero,803448 <sqrtf+0x6c>
  80342c:	8805883a 	mov	r2,r17
  803430:	dfc00c17 	ldw	ra,48(sp)
  803434:	dc800b17 	ldw	r18,44(sp)
  803438:	dc400a17 	ldw	r17,40(sp)
  80343c:	dc000917 	ldw	r16,36(sp)
  803440:	dec00d04 	addi	sp,sp,52
  803444:	f800283a 	ret
  803448:	8009883a 	mov	r4,r16
  80344c:	00800044 	movi	r2,1
  803450:	00c020b4 	movhi	r3,130
  803454:	18c60f04 	addi	r3,r3,6204
  803458:	d8800015 	stw	r2,0(sp)
  80345c:	d8c00115 	stw	r3,4(sp)
  803460:	d8000815 	stw	zero,32(sp)
  803464:	080b5e00 	call	80b5e0 <__extendsfdf2>
  803468:	94000017 	ldw	r16,0(r18)
  80346c:	d8c00315 	stw	r3,12(sp)
  803470:	d8800415 	stw	r2,16(sp)
  803474:	d8c00515 	stw	r3,20(sp)
  803478:	d8800215 	stw	r2,8(sp)
  80347c:	8000141e 	bne	r16,zero,8034d0 <sqrtf+0xf4>
  803480:	d8000615 	stw	zero,24(sp)
  803484:	d8000715 	stw	zero,28(sp)
  803488:	d809883a 	mov	r4,sp
  80348c:	080ab800 	call	80ab80 <matherr>
  803490:	10001826 	beq	r2,zero,8034f4 <sqrtf+0x118>
  803494:	d8800817 	ldw	r2,32(sp)
  803498:	10001a1e 	bne	r2,zero,803504 <sqrtf+0x128>
  80349c:	d8800617 	ldw	r2,24(sp)
  8034a0:	d8c00717 	ldw	r3,28(sp)
  8034a4:	1009883a 	mov	r4,r2
  8034a8:	180b883a 	mov	r5,r3
  8034ac:	080c74c0 	call	80c74c <__truncdfsf2>
  8034b0:	1023883a 	mov	r17,r2
  8034b4:	8805883a 	mov	r2,r17
  8034b8:	dfc00c17 	ldw	ra,48(sp)
  8034bc:	dc800b17 	ldw	r18,44(sp)
  8034c0:	dc400a17 	ldw	r17,40(sp)
  8034c4:	dc000917 	ldw	r16,36(sp)
  8034c8:	dec00d04 	addi	sp,sp,52
  8034cc:	f800283a 	ret
  8034d0:	0009883a 	mov	r4,zero
  8034d4:	000d883a 	mov	r6,zero
  8034d8:	000b883a 	mov	r5,zero
  8034dc:	000f883a 	mov	r7,zero
  8034e0:	080bfbc0 	call	80bfbc <__divdf3>
  8034e4:	d8800615 	stw	r2,24(sp)
  8034e8:	00800084 	movi	r2,2
  8034ec:	d8c00715 	stw	r3,28(sp)
  8034f0:	80bfe51e 	bne	r16,r2,803488 <sqrtf+0xac>
  8034f4:	080d2280 	call	80d228 <__errno>
  8034f8:	00c00844 	movi	r3,33
  8034fc:	10c00015 	stw	r3,0(r2)
  803500:	003fe406 	br	803494 <sqrtf+0xb8>
  803504:	080d2280 	call	80d228 <__errno>
  803508:	d8c00817 	ldw	r3,32(sp)
  80350c:	10c00015 	stw	r3,0(r2)
  803510:	003fe206 	br	80349c <sqrtf+0xc0>

00803514 <__ieee754_acos>:
  803514:	00a00034 	movhi	r2,32768
  803518:	10bfffc4 	addi	r2,r2,-1
  80351c:	deffeb04 	addi	sp,sp,-84
  803520:	288c703a 	and	r6,r5,r2
  803524:	008ffc34 	movhi	r2,16368
  803528:	10bfffc4 	addi	r2,r2,-1
  80352c:	dfc01415 	stw	ra,80(sp)
  803530:	ddc01315 	stw	r23,76(sp)
  803534:	dd801215 	stw	r22,72(sp)
  803538:	dd401115 	stw	r21,68(sp)
  80353c:	dd001015 	stw	r20,64(sp)
  803540:	dcc00f15 	stw	r19,60(sp)
  803544:	dc800e15 	stw	r18,56(sp)
  803548:	dc400d15 	stw	r17,52(sp)
  80354c:	dc000c15 	stw	r16,48(sp)
  803550:	d9000615 	stw	r4,24(sp)
  803554:	d9400715 	stw	r5,28(sp)
  803558:	1180150e 	bge	r2,r6,8035b0 <__ieee754_acos+0x9c>
  80355c:	2005883a 	mov	r2,r4
  803560:	01300434 	movhi	r4,49168
  803564:	3109883a 	add	r4,r6,r4
  803568:	2088b03a 	or	r4,r4,r2
  80356c:	2001a51e 	bne	r4,zero,803c04 <__ieee754_acos+0x6f0>
  803570:	0142790e 	bge	zero,r5,803f58 <__ieee754_acos+0xa44>
  803574:	000d883a 	mov	r6,zero
  803578:	000f883a 	mov	r7,zero
  80357c:	3005883a 	mov	r2,r6
  803580:	3807883a 	mov	r3,r7
  803584:	dfc01417 	ldw	ra,80(sp)
  803588:	ddc01317 	ldw	r23,76(sp)
  80358c:	dd801217 	ldw	r22,72(sp)
  803590:	dd401117 	ldw	r21,68(sp)
  803594:	dd001017 	ldw	r20,64(sp)
  803598:	dcc00f17 	ldw	r19,60(sp)
  80359c:	dc800e17 	ldw	r18,56(sp)
  8035a0:	dc400d17 	ldw	r17,52(sp)
  8035a4:	dc000c17 	ldw	r16,48(sp)
  8035a8:	dec01504 	addi	sp,sp,84
  8035ac:	f800283a 	ret
  8035b0:	008ff834 	movhi	r2,16352
  8035b4:	10bfffc4 	addi	r2,r2,-1
  8035b8:	1180db0e 	bge	r2,r6,803928 <__ieee754_acos+0x414>
  8035bc:	2801a216 	blt	r5,zero,803c48 <__ieee754_acos+0x734>
  8035c0:	010ffc34 	movhi	r4,16368
  8035c4:	d9000915 	stw	r4,36(sp)
  8035c8:	d9c00717 	ldw	r7,28(sp)
  8035cc:	d9400917 	ldw	r5,36(sp)
  8035d0:	d9800617 	ldw	r6,24(sp)
  8035d4:	0005883a 	mov	r2,zero
  8035d8:	0009883a 	mov	r4,zero
  8035dc:	d8800815 	stw	r2,32(sp)
  8035e0:	080bb040 	call	80bb04 <__subdf3>
  8035e4:	0011883a 	mov	r8,zero
  8035e8:	024ff834 	movhi	r9,16352
  8035ec:	480f883a 	mov	r7,r9
  8035f0:	400d883a 	mov	r6,r8
  8035f4:	180b883a 	mov	r5,r3
  8035f8:	1009883a 	mov	r4,r2
  8035fc:	080bbf80 	call	80bbf8 <__muldf3>
  803600:	1009883a 	mov	r4,r2
  803604:	180b883a 	mov	r5,r3
  803608:	1025883a 	mov	r18,r2
  80360c:	1827883a 	mov	r19,r3
  803610:	0807fa80 	call	807fa8 <__ieee754_sqrt>
  803614:	180b883a 	mov	r5,r3
  803618:	0009883a 	mov	r4,zero
  80361c:	000d883a 	mov	r6,zero
  803620:	180f883a 	mov	r7,r3
  803624:	182f883a 	mov	r23,r3
  803628:	d9000215 	stw	r4,8(sp)
  80362c:	d8800415 	stw	r2,16(sp)
  803630:	d8c00515 	stw	r3,20(sp)
  803634:	d8c00315 	stw	r3,12(sp)
  803638:	080bbf80 	call	80bbf8 <__muldf3>
  80363c:	180f883a 	mov	r7,r3
  803640:	9009883a 	mov	r4,r18
  803644:	980b883a 	mov	r5,r19
  803648:	100d883a 	mov	r6,r2
  80364c:	080bb040 	call	80bb04 <__subdf3>
  803650:	d9000417 	ldw	r4,16(sp)
  803654:	d9400517 	ldw	r5,20(sp)
  803658:	d9800217 	ldw	r6,8(sp)
  80365c:	b80f883a 	mov	r7,r23
  803660:	1021883a 	mov	r16,r2
  803664:	1823883a 	mov	r17,r3
  803668:	080bb840 	call	80bb84 <__adddf3>
  80366c:	180f883a 	mov	r7,r3
  803670:	880b883a 	mov	r5,r17
  803674:	8009883a 	mov	r4,r16
  803678:	100d883a 	mov	r6,r2
  80367c:	080bfbc0 	call	80bfbc <__divdf3>
  803680:	02037fb4 	movhi	r8,3582
  803684:	423dc244 	addi	r8,r8,-2295
  803688:	024fc0b4 	movhi	r9,16130
  80368c:	4a4f7844 	addi	r9,r9,15841
  803690:	480f883a 	mov	r7,r9
  803694:	400d883a 	mov	r6,r8
  803698:	9009883a 	mov	r4,r18
  80369c:	980b883a 	mov	r5,r19
  8036a0:	d8800a15 	stw	r2,40(sp)
  8036a4:	d8c00b15 	stw	r3,44(sp)
  8036a8:	080bbf80 	call	80bbf8 <__muldf3>
  8036ac:	021d40b4 	movhi	r8,29954
  8036b0:	422ca204 	addi	r8,r8,-19832
  8036b4:	024fd2b4 	movhi	r9,16202
  8036b8:	4a7bf804 	addi	r9,r9,-4128
  8036bc:	480f883a 	mov	r7,r9
  8036c0:	400d883a 	mov	r6,r8
  8036c4:	180b883a 	mov	r5,r3
  8036c8:	1009883a 	mov	r4,r2
  8036cc:	080bb840 	call	80bb84 <__adddf3>
  8036d0:	180f883a 	mov	r7,r3
  8036d4:	9009883a 	mov	r4,r18
  8036d8:	980b883a 	mov	r5,r19
  8036dc:	100d883a 	mov	r6,r2
  8036e0:	080bbf80 	call	80bbf8 <__muldf3>
  8036e4:	022d5a74 	movhi	r8,46441
  8036e8:	4223cec4 	addi	r8,r8,-28869
  8036ec:	024fe974 	movhi	r9,16293
  8036f0:	4a608a04 	addi	r9,r9,-32216
  8036f4:	480f883a 	mov	r7,r9
  8036f8:	400d883a 	mov	r6,r8
  8036fc:	180b883a 	mov	r5,r3
  803700:	1009883a 	mov	r4,r2
  803704:	080bb040 	call	80bb04 <__subdf3>
  803708:	180f883a 	mov	r7,r3
  80370c:	9009883a 	mov	r4,r18
  803710:	980b883a 	mov	r5,r19
  803714:	100d883a 	mov	r6,r2
  803718:	080bbf80 	call	80bbf8 <__muldf3>
  80371c:	0203a234 	movhi	r8,3720
  803720:	42111544 	addi	r8,r8,17493
  803724:	024ff2b4 	movhi	r9,16330
  803728:	4a705544 	addi	r9,r9,-16043
  80372c:	480f883a 	mov	r7,r9
  803730:	400d883a 	mov	r6,r8
  803734:	180b883a 	mov	r5,r3
  803738:	1009883a 	mov	r4,r2
  80373c:	080bb840 	call	80bb84 <__adddf3>
  803740:	180f883a 	mov	r7,r3
  803744:	9009883a 	mov	r4,r18
  803748:	980b883a 	mov	r5,r19
  80374c:	100d883a 	mov	r6,r2
  803750:	080bbf80 	call	80bbf8 <__muldf3>
  803754:	0200faf4 	movhi	r8,1003
  803758:	421bdf44 	addi	r8,r8,28541
  80375c:	024ff574 	movhi	r9,16341
  803760:	4a758484 	addi	r9,r9,-10734
  803764:	480f883a 	mov	r7,r9
  803768:	400d883a 	mov	r6,r8
  80376c:	180b883a 	mov	r5,r3
  803770:	1009883a 	mov	r4,r2
  803774:	080bb040 	call	80bb04 <__subdf3>
  803778:	180f883a 	mov	r7,r3
  80377c:	9009883a 	mov	r4,r18
  803780:	980b883a 	mov	r5,r19
  803784:	100d883a 	mov	r6,r2
  803788:	080bbf80 	call	80bbf8 <__muldf3>
  80378c:	02155574 	movhi	r8,21845
  803790:	42155544 	addi	r8,r8,21845
  803794:	024ff174 	movhi	r9,16325
  803798:	4a555544 	addi	r9,r9,21845
  80379c:	480f883a 	mov	r7,r9
  8037a0:	400d883a 	mov	r6,r8
  8037a4:	180b883a 	mov	r5,r3
  8037a8:	1009883a 	mov	r4,r2
  8037ac:	080bb840 	call	80bb84 <__adddf3>
  8037b0:	180f883a 	mov	r7,r3
  8037b4:	9009883a 	mov	r4,r18
  8037b8:	980b883a 	mov	r5,r19
  8037bc:	100d883a 	mov	r6,r2
  8037c0:	080bbf80 	call	80bbf8 <__muldf3>
  8037c4:	022c4bf4 	movhi	r8,45359
  8037c8:	4224a084 	addi	r8,r8,-28030
  8037cc:	024fed34 	movhi	r9,16308
  8037d0:	4a6e3144 	addi	r9,r9,-18235
  8037d4:	480f883a 	mov	r7,r9
  8037d8:	400d883a 	mov	r6,r8
  8037dc:	9009883a 	mov	r4,r18
  8037e0:	980b883a 	mov	r5,r19
  8037e4:	1021883a 	mov	r16,r2
  8037e8:	1823883a 	mov	r17,r3
  8037ec:	080bbf80 	call	80bbf8 <__muldf3>
  8037f0:	0206e374 	movhi	r8,7053
  8037f4:	42005644 	addi	r8,r8,345
  8037f8:	024ff9b4 	movhi	r9,16358
  8037fc:	4a419b04 	addi	r9,r9,1644
  803800:	480f883a 	mov	r7,r9
  803804:	400d883a 	mov	r6,r8
  803808:	180b883a 	mov	r5,r3
  80380c:	1009883a 	mov	r4,r2
  803810:	080bb040 	call	80bb04 <__subdf3>
  803814:	180f883a 	mov	r7,r3
  803818:	9009883a 	mov	r4,r18
  80381c:	980b883a 	mov	r5,r19
  803820:	100d883a 	mov	r6,r2
  803824:	080bbf80 	call	80bbf8 <__muldf3>
  803828:	022716b4 	movhi	r8,40026
  80382c:	4222b204 	addi	r8,r8,-30008
  803830:	02500034 	movhi	r9,16384
  803834:	4a4ab944 	addi	r9,r9,10981
  803838:	480f883a 	mov	r7,r9
  80383c:	400d883a 	mov	r6,r8
  803840:	180b883a 	mov	r5,r3
  803844:	1009883a 	mov	r4,r2
  803848:	080bb840 	call	80bb84 <__adddf3>
  80384c:	180f883a 	mov	r7,r3
  803850:	9009883a 	mov	r4,r18
  803854:	980b883a 	mov	r5,r19
  803858:	100d883a 	mov	r6,r2
  80385c:	080bbf80 	call	80bbf8 <__muldf3>
  803860:	025000f4 	movhi	r9,16387
  803864:	4a4e89c4 	addi	r9,r9,14887
  803868:	020722b4 	movhi	r8,7306
  80386c:	420b52c4 	addi	r8,r8,11595
  803870:	480f883a 	mov	r7,r9
  803874:	400d883a 	mov	r6,r8
  803878:	180b883a 	mov	r5,r3
  80387c:	1009883a 	mov	r4,r2
  803880:	080bb040 	call	80bb04 <__subdf3>
  803884:	180f883a 	mov	r7,r3
  803888:	9009883a 	mov	r4,r18
  80388c:	980b883a 	mov	r5,r19
  803890:	100d883a 	mov	r6,r2
  803894:	080bbf80 	call	80bbf8 <__muldf3>
  803898:	1011883a 	mov	r8,r2
  80389c:	d8800917 	ldw	r2,36(sp)
  8038a0:	4009883a 	mov	r4,r8
  8038a4:	000d883a 	mov	r6,zero
  8038a8:	100f883a 	mov	r7,r2
  8038ac:	180b883a 	mov	r5,r3
  8038b0:	080bb840 	call	80bb84 <__adddf3>
  8038b4:	180f883a 	mov	r7,r3
  8038b8:	880b883a 	mov	r5,r17
  8038bc:	8009883a 	mov	r4,r16
  8038c0:	100d883a 	mov	r6,r2
  8038c4:	080bfbc0 	call	80bfbc <__divdf3>
  8038c8:	d9400517 	ldw	r5,20(sp)
  8038cc:	d9000417 	ldw	r4,16(sp)
  8038d0:	180f883a 	mov	r7,r3
  8038d4:	100d883a 	mov	r6,r2
  8038d8:	080bbf80 	call	80bbf8 <__muldf3>
  8038dc:	d9400b17 	ldw	r5,44(sp)
  8038e0:	d9000a17 	ldw	r4,40(sp)
  8038e4:	180f883a 	mov	r7,r3
  8038e8:	100d883a 	mov	r6,r2
  8038ec:	080bb840 	call	80bb84 <__adddf3>
  8038f0:	d9000217 	ldw	r4,8(sp)
  8038f4:	b80b883a 	mov	r5,r23
  8038f8:	180f883a 	mov	r7,r3
  8038fc:	100d883a 	mov	r6,r2
  803900:	080bb840 	call	80bb84 <__adddf3>
  803904:	1011883a 	mov	r8,r2
  803908:	180f883a 	mov	r7,r3
  80390c:	1009883a 	mov	r4,r2
  803910:	180b883a 	mov	r5,r3
  803914:	400d883a 	mov	r6,r8
  803918:	080bb840 	call	80bb84 <__adddf3>
  80391c:	100d883a 	mov	r6,r2
  803920:	180f883a 	mov	r7,r3
  803924:	003f1506 	br	80357c <__ieee754_acos+0x68>
  803928:	008f1834 	movhi	r2,15456
  80392c:	1180c10e 	bge	r2,r6,803c34 <__ieee754_acos+0x720>
  803930:	d9000617 	ldw	r4,24(sp)
  803934:	d9c00717 	ldw	r7,28(sp)
  803938:	200d883a 	mov	r6,r4
  80393c:	080bbf80 	call	80bbf8 <__muldf3>
  803940:	1021883a 	mov	r16,r2
  803944:	1823883a 	mov	r17,r3
  803948:	00837fb4 	movhi	r2,3582
  80394c:	10bdc244 	addi	r2,r2,-2295
  803950:	00cfc0b4 	movhi	r3,16130
  803954:	18cf7844 	addi	r3,r3,15841
  803958:	180f883a 	mov	r7,r3
  80395c:	8009883a 	mov	r4,r16
  803960:	880b883a 	mov	r5,r17
  803964:	100d883a 	mov	r6,r2
  803968:	080bbf80 	call	80bbf8 <__muldf3>
  80396c:	021d40b4 	movhi	r8,29954
  803970:	422ca204 	addi	r8,r8,-19832
  803974:	024fd2b4 	movhi	r9,16202
  803978:	4a7bf804 	addi	r9,r9,-4128
  80397c:	480f883a 	mov	r7,r9
  803980:	400d883a 	mov	r6,r8
  803984:	180b883a 	mov	r5,r3
  803988:	1009883a 	mov	r4,r2
  80398c:	080bb840 	call	80bb84 <__adddf3>
  803990:	180f883a 	mov	r7,r3
  803994:	8009883a 	mov	r4,r16
  803998:	880b883a 	mov	r5,r17
  80399c:	100d883a 	mov	r6,r2
  8039a0:	080bbf80 	call	80bbf8 <__muldf3>
  8039a4:	022d5a74 	movhi	r8,46441
  8039a8:	4223cec4 	addi	r8,r8,-28869
  8039ac:	024fe974 	movhi	r9,16293
  8039b0:	4a608a04 	addi	r9,r9,-32216
  8039b4:	480f883a 	mov	r7,r9
  8039b8:	400d883a 	mov	r6,r8
  8039bc:	180b883a 	mov	r5,r3
  8039c0:	1009883a 	mov	r4,r2
  8039c4:	080bb040 	call	80bb04 <__subdf3>
  8039c8:	180f883a 	mov	r7,r3
  8039cc:	8009883a 	mov	r4,r16
  8039d0:	880b883a 	mov	r5,r17
  8039d4:	100d883a 	mov	r6,r2
  8039d8:	080bbf80 	call	80bbf8 <__muldf3>
  8039dc:	0203a234 	movhi	r8,3720
  8039e0:	42111544 	addi	r8,r8,17493
  8039e4:	024ff2b4 	movhi	r9,16330
  8039e8:	4a705544 	addi	r9,r9,-16043
  8039ec:	480f883a 	mov	r7,r9
  8039f0:	400d883a 	mov	r6,r8
  8039f4:	180b883a 	mov	r5,r3
  8039f8:	1009883a 	mov	r4,r2
  8039fc:	080bb840 	call	80bb84 <__adddf3>
  803a00:	180f883a 	mov	r7,r3
  803a04:	8009883a 	mov	r4,r16
  803a08:	880b883a 	mov	r5,r17
  803a0c:	100d883a 	mov	r6,r2
  803a10:	080bbf80 	call	80bbf8 <__muldf3>
  803a14:	0200faf4 	movhi	r8,1003
  803a18:	421bdf44 	addi	r8,r8,28541
  803a1c:	024ff574 	movhi	r9,16341
  803a20:	4a758484 	addi	r9,r9,-10734
  803a24:	480f883a 	mov	r7,r9
  803a28:	400d883a 	mov	r6,r8
  803a2c:	180b883a 	mov	r5,r3
  803a30:	1009883a 	mov	r4,r2
  803a34:	080bb040 	call	80bb04 <__subdf3>
  803a38:	180f883a 	mov	r7,r3
  803a3c:	8009883a 	mov	r4,r16
  803a40:	880b883a 	mov	r5,r17
  803a44:	100d883a 	mov	r6,r2
  803a48:	080bbf80 	call	80bbf8 <__muldf3>
  803a4c:	02155574 	movhi	r8,21845
  803a50:	42155544 	addi	r8,r8,21845
  803a54:	024ff174 	movhi	r9,16325
  803a58:	4a555544 	addi	r9,r9,21845
  803a5c:	480f883a 	mov	r7,r9
  803a60:	400d883a 	mov	r6,r8
  803a64:	180b883a 	mov	r5,r3
  803a68:	1009883a 	mov	r4,r2
  803a6c:	080bb840 	call	80bb84 <__adddf3>
  803a70:	180f883a 	mov	r7,r3
  803a74:	8009883a 	mov	r4,r16
  803a78:	880b883a 	mov	r5,r17
  803a7c:	100d883a 	mov	r6,r2
  803a80:	080bbf80 	call	80bbf8 <__muldf3>
  803a84:	022c4bf4 	movhi	r8,45359
  803a88:	4224a084 	addi	r8,r8,-28030
  803a8c:	024fed34 	movhi	r9,16308
  803a90:	4a6e3144 	addi	r9,r9,-18235
  803a94:	480f883a 	mov	r7,r9
  803a98:	400d883a 	mov	r6,r8
  803a9c:	8009883a 	mov	r4,r16
  803aa0:	880b883a 	mov	r5,r17
  803aa4:	1029883a 	mov	r20,r2
  803aa8:	182b883a 	mov	r21,r3
  803aac:	080bbf80 	call	80bbf8 <__muldf3>
  803ab0:	0206e374 	movhi	r8,7053
  803ab4:	42005644 	addi	r8,r8,345
  803ab8:	024ff9b4 	movhi	r9,16358
  803abc:	4a419b04 	addi	r9,r9,1644
  803ac0:	480f883a 	mov	r7,r9
  803ac4:	400d883a 	mov	r6,r8
  803ac8:	180b883a 	mov	r5,r3
  803acc:	1009883a 	mov	r4,r2
  803ad0:	080bb040 	call	80bb04 <__subdf3>
  803ad4:	180f883a 	mov	r7,r3
  803ad8:	8009883a 	mov	r4,r16
  803adc:	880b883a 	mov	r5,r17
  803ae0:	100d883a 	mov	r6,r2
  803ae4:	080bbf80 	call	80bbf8 <__muldf3>
  803ae8:	022716b4 	movhi	r8,40026
  803aec:	4222b204 	addi	r8,r8,-30008
  803af0:	02500034 	movhi	r9,16384
  803af4:	4a4ab944 	addi	r9,r9,10981
  803af8:	480f883a 	mov	r7,r9
  803afc:	400d883a 	mov	r6,r8
  803b00:	180b883a 	mov	r5,r3
  803b04:	1009883a 	mov	r4,r2
  803b08:	080bb840 	call	80bb84 <__adddf3>
  803b0c:	180f883a 	mov	r7,r3
  803b10:	8009883a 	mov	r4,r16
  803b14:	880b883a 	mov	r5,r17
  803b18:	100d883a 	mov	r6,r2
  803b1c:	080bbf80 	call	80bbf8 <__muldf3>
  803b20:	020722b4 	movhi	r8,7306
  803b24:	420b52c4 	addi	r8,r8,11595
  803b28:	025000f4 	movhi	r9,16387
  803b2c:	4a4e89c4 	addi	r9,r9,14887
  803b30:	480f883a 	mov	r7,r9
  803b34:	400d883a 	mov	r6,r8
  803b38:	180b883a 	mov	r5,r3
  803b3c:	1009883a 	mov	r4,r2
  803b40:	080bb040 	call	80bb04 <__subdf3>
  803b44:	180f883a 	mov	r7,r3
  803b48:	8009883a 	mov	r4,r16
  803b4c:	880b883a 	mov	r5,r17
  803b50:	100d883a 	mov	r6,r2
  803b54:	080bbf80 	call	80bbf8 <__muldf3>
  803b58:	0011883a 	mov	r8,zero
  803b5c:	024ffc34 	movhi	r9,16368
  803b60:	480f883a 	mov	r7,r9
  803b64:	400d883a 	mov	r6,r8
  803b68:	180b883a 	mov	r5,r3
  803b6c:	1009883a 	mov	r4,r2
  803b70:	080bb840 	call	80bb84 <__adddf3>
  803b74:	180f883a 	mov	r7,r3
  803b78:	a80b883a 	mov	r5,r21
  803b7c:	a009883a 	mov	r4,r20
  803b80:	100d883a 	mov	r6,r2
  803b84:	080bfbc0 	call	80bfbc <__divdf3>
  803b88:	d9000617 	ldw	r4,24(sp)
  803b8c:	d9400717 	ldw	r5,28(sp)
  803b90:	180f883a 	mov	r7,r3
  803b94:	100d883a 	mov	r6,r2
  803b98:	080bbf80 	call	80bbf8 <__muldf3>
  803b9c:	020cc534 	movhi	r8,13076
  803ba0:	421701c4 	addi	r8,r8,23559
  803ba4:	024f24b4 	movhi	r9,15506
  803ba8:	4a698984 	addi	r9,r9,-23002
  803bac:	480b883a 	mov	r5,r9
  803bb0:	4009883a 	mov	r4,r8
  803bb4:	180f883a 	mov	r7,r3
  803bb8:	100d883a 	mov	r6,r2
  803bbc:	080bb040 	call	80bb04 <__subdf3>
  803bc0:	d9400717 	ldw	r5,28(sp)
  803bc4:	d9000617 	ldw	r4,24(sp)
  803bc8:	180f883a 	mov	r7,r3
  803bcc:	100d883a 	mov	r6,r2
  803bd0:	080bb040 	call	80bb04 <__subdf3>
  803bd4:	02151134 	movhi	r8,21572
  803bd8:	420b4604 	addi	r8,r8,11544
  803bdc:	024ffe74 	movhi	r9,16377
  803be0:	4a487ec4 	addi	r9,r9,8699
  803be4:	180f883a 	mov	r7,r3
  803be8:	100d883a 	mov	r6,r2
  803bec:	480b883a 	mov	r5,r9
  803bf0:	4009883a 	mov	r4,r8
  803bf4:	080bb040 	call	80bb04 <__subdf3>
  803bf8:	100d883a 	mov	r6,r2
  803bfc:	180f883a 	mov	r7,r3
  803c00:	003e5e06 	br	80357c <__ieee754_acos+0x68>
  803c04:	d9000617 	ldw	r4,24(sp)
  803c08:	d9c00717 	ldw	r7,28(sp)
  803c0c:	200d883a 	mov	r6,r4
  803c10:	080bb040 	call	80bb04 <__subdf3>
  803c14:	100d883a 	mov	r6,r2
  803c18:	180f883a 	mov	r7,r3
  803c1c:	1009883a 	mov	r4,r2
  803c20:	180b883a 	mov	r5,r3
  803c24:	080bfbc0 	call	80bfbc <__divdf3>
  803c28:	100d883a 	mov	r6,r2
  803c2c:	180f883a 	mov	r7,r3
  803c30:	003e5206 	br	80357c <__ieee754_acos+0x68>
  803c34:	01951134 	movhi	r6,21572
  803c38:	318b4604 	addi	r6,r6,11544
  803c3c:	01cffe74 	movhi	r7,16377
  803c40:	39c87ec4 	addi	r7,r7,8699
  803c44:	003e4d06 	br	80357c <__ieee754_acos+0x68>
  803c48:	d9000617 	ldw	r4,24(sp)
  803c4c:	05cffc34 	movhi	r23,16368
  803c50:	002d883a 	mov	r22,zero
  803c54:	b00d883a 	mov	r6,r22
  803c58:	b80f883a 	mov	r7,r23
  803c5c:	080bb840 	call	80bb84 <__adddf3>
  803c60:	0011883a 	mov	r8,zero
  803c64:	024ff834 	movhi	r9,16352
  803c68:	480f883a 	mov	r7,r9
  803c6c:	400d883a 	mov	r6,r8
  803c70:	180b883a 	mov	r5,r3
  803c74:	1009883a 	mov	r4,r2
  803c78:	080bbf80 	call	80bbf8 <__muldf3>
  803c7c:	1009883a 	mov	r4,r2
  803c80:	180b883a 	mov	r5,r3
  803c84:	1021883a 	mov	r16,r2
  803c88:	1823883a 	mov	r17,r3
  803c8c:	0807fa80 	call	807fa8 <__ieee754_sqrt>
  803c90:	02037fb4 	movhi	r8,3582
  803c94:	423dc244 	addi	r8,r8,-2295
  803c98:	024fc0b4 	movhi	r9,16130
  803c9c:	4a4f7844 	addi	r9,r9,15841
  803ca0:	480f883a 	mov	r7,r9
  803ca4:	400d883a 	mov	r6,r8
  803ca8:	8009883a 	mov	r4,r16
  803cac:	880b883a 	mov	r5,r17
  803cb0:	d8800015 	stw	r2,0(sp)
  803cb4:	d8c00115 	stw	r3,4(sp)
  803cb8:	080bbf80 	call	80bbf8 <__muldf3>
  803cbc:	021d40b4 	movhi	r8,29954
  803cc0:	422ca204 	addi	r8,r8,-19832
  803cc4:	024fd2b4 	movhi	r9,16202
  803cc8:	4a7bf804 	addi	r9,r9,-4128
  803ccc:	480f883a 	mov	r7,r9
  803cd0:	400d883a 	mov	r6,r8
  803cd4:	180b883a 	mov	r5,r3
  803cd8:	1009883a 	mov	r4,r2
  803cdc:	080bb840 	call	80bb84 <__adddf3>
  803ce0:	180f883a 	mov	r7,r3
  803ce4:	8009883a 	mov	r4,r16
  803ce8:	880b883a 	mov	r5,r17
  803cec:	100d883a 	mov	r6,r2
  803cf0:	080bbf80 	call	80bbf8 <__muldf3>
  803cf4:	022d5a74 	movhi	r8,46441
  803cf8:	4223cec4 	addi	r8,r8,-28869
  803cfc:	024fe974 	movhi	r9,16293
  803d00:	4a608a04 	addi	r9,r9,-32216
  803d04:	480f883a 	mov	r7,r9
  803d08:	400d883a 	mov	r6,r8
  803d0c:	180b883a 	mov	r5,r3
  803d10:	1009883a 	mov	r4,r2
  803d14:	080bb040 	call	80bb04 <__subdf3>
  803d18:	180f883a 	mov	r7,r3
  803d1c:	8009883a 	mov	r4,r16
  803d20:	880b883a 	mov	r5,r17
  803d24:	100d883a 	mov	r6,r2
  803d28:	080bbf80 	call	80bbf8 <__muldf3>
  803d2c:	0203a234 	movhi	r8,3720
  803d30:	42111544 	addi	r8,r8,17493
  803d34:	024ff2b4 	movhi	r9,16330
  803d38:	4a705544 	addi	r9,r9,-16043
  803d3c:	480f883a 	mov	r7,r9
  803d40:	400d883a 	mov	r6,r8
  803d44:	180b883a 	mov	r5,r3
  803d48:	1009883a 	mov	r4,r2
  803d4c:	080bb840 	call	80bb84 <__adddf3>
  803d50:	180f883a 	mov	r7,r3
  803d54:	8009883a 	mov	r4,r16
  803d58:	880b883a 	mov	r5,r17
  803d5c:	100d883a 	mov	r6,r2
  803d60:	080bbf80 	call	80bbf8 <__muldf3>
  803d64:	0200faf4 	movhi	r8,1003
  803d68:	421bdf44 	addi	r8,r8,28541
  803d6c:	024ff574 	movhi	r9,16341
  803d70:	4a758484 	addi	r9,r9,-10734
  803d74:	480f883a 	mov	r7,r9
  803d78:	400d883a 	mov	r6,r8
  803d7c:	180b883a 	mov	r5,r3
  803d80:	1009883a 	mov	r4,r2
  803d84:	080bb040 	call	80bb04 <__subdf3>
  803d88:	180f883a 	mov	r7,r3
  803d8c:	8009883a 	mov	r4,r16
  803d90:	880b883a 	mov	r5,r17
  803d94:	100d883a 	mov	r6,r2
  803d98:	080bbf80 	call	80bbf8 <__muldf3>
  803d9c:	02155574 	movhi	r8,21845
  803da0:	42155544 	addi	r8,r8,21845
  803da4:	024ff174 	movhi	r9,16325
  803da8:	4a555544 	addi	r9,r9,21845
  803dac:	480f883a 	mov	r7,r9
  803db0:	400d883a 	mov	r6,r8
  803db4:	180b883a 	mov	r5,r3
  803db8:	1009883a 	mov	r4,r2
  803dbc:	080bb840 	call	80bb84 <__adddf3>
  803dc0:	180f883a 	mov	r7,r3
  803dc4:	8009883a 	mov	r4,r16
  803dc8:	880b883a 	mov	r5,r17
  803dcc:	100d883a 	mov	r6,r2
  803dd0:	080bbf80 	call	80bbf8 <__muldf3>
  803dd4:	022c4bf4 	movhi	r8,45359
  803dd8:	4224a084 	addi	r8,r8,-28030
  803ddc:	024fed34 	movhi	r9,16308
  803de0:	4a6e3144 	addi	r9,r9,-18235
  803de4:	480f883a 	mov	r7,r9
  803de8:	400d883a 	mov	r6,r8
  803dec:	8009883a 	mov	r4,r16
  803df0:	880b883a 	mov	r5,r17
  803df4:	1029883a 	mov	r20,r2
  803df8:	182b883a 	mov	r21,r3
  803dfc:	080bbf80 	call	80bbf8 <__muldf3>
  803e00:	0206e374 	movhi	r8,7053
  803e04:	42005644 	addi	r8,r8,345
  803e08:	024ff9b4 	movhi	r9,16358
  803e0c:	4a419b04 	addi	r9,r9,1644
  803e10:	480f883a 	mov	r7,r9
  803e14:	400d883a 	mov	r6,r8
  803e18:	180b883a 	mov	r5,r3
  803e1c:	1009883a 	mov	r4,r2
  803e20:	080bb040 	call	80bb04 <__subdf3>
  803e24:	180f883a 	mov	r7,r3
  803e28:	8009883a 	mov	r4,r16
  803e2c:	880b883a 	mov	r5,r17
  803e30:	100d883a 	mov	r6,r2
  803e34:	080bbf80 	call	80bbf8 <__muldf3>
  803e38:	022716b4 	movhi	r8,40026
  803e3c:	4222b204 	addi	r8,r8,-30008
  803e40:	02500034 	movhi	r9,16384
  803e44:	4a4ab944 	addi	r9,r9,10981
  803e48:	480f883a 	mov	r7,r9
  803e4c:	400d883a 	mov	r6,r8
  803e50:	180b883a 	mov	r5,r3
  803e54:	1009883a 	mov	r4,r2
  803e58:	080bb840 	call	80bb84 <__adddf3>
  803e5c:	180f883a 	mov	r7,r3
  803e60:	8009883a 	mov	r4,r16
  803e64:	880b883a 	mov	r5,r17
  803e68:	100d883a 	mov	r6,r2
  803e6c:	080bbf80 	call	80bbf8 <__muldf3>
  803e70:	020722b4 	movhi	r8,7306
  803e74:	420b52c4 	addi	r8,r8,11595
  803e78:	025000f4 	movhi	r9,16387
  803e7c:	4a4e89c4 	addi	r9,r9,14887
  803e80:	480f883a 	mov	r7,r9
  803e84:	400d883a 	mov	r6,r8
  803e88:	180b883a 	mov	r5,r3
  803e8c:	1009883a 	mov	r4,r2
  803e90:	080bb040 	call	80bb04 <__subdf3>
  803e94:	180f883a 	mov	r7,r3
  803e98:	8009883a 	mov	r4,r16
  803e9c:	880b883a 	mov	r5,r17
  803ea0:	100d883a 	mov	r6,r2
  803ea4:	080bbf80 	call	80bbf8 <__muldf3>
  803ea8:	180b883a 	mov	r5,r3
  803eac:	000d883a 	mov	r6,zero
  803eb0:	b80f883a 	mov	r7,r23
  803eb4:	1009883a 	mov	r4,r2
  803eb8:	080bb840 	call	80bb84 <__adddf3>
  803ebc:	180f883a 	mov	r7,r3
  803ec0:	a80b883a 	mov	r5,r21
  803ec4:	a009883a 	mov	r4,r20
  803ec8:	100d883a 	mov	r6,r2
  803ecc:	080bfbc0 	call	80bfbc <__divdf3>
  803ed0:	d9000017 	ldw	r4,0(sp)
  803ed4:	d9400117 	ldw	r5,4(sp)
  803ed8:	180f883a 	mov	r7,r3
  803edc:	100d883a 	mov	r6,r2
  803ee0:	080bbf80 	call	80bbf8 <__muldf3>
  803ee4:	020cc534 	movhi	r8,13076
  803ee8:	421701c4 	addi	r8,r8,23559
  803eec:	024f24b4 	movhi	r9,15506
  803ef0:	4a698984 	addi	r9,r9,-23002
  803ef4:	480f883a 	mov	r7,r9
  803ef8:	400d883a 	mov	r6,r8
  803efc:	180b883a 	mov	r5,r3
  803f00:	1009883a 	mov	r4,r2
  803f04:	080bb040 	call	80bb04 <__subdf3>
  803f08:	d9400117 	ldw	r5,4(sp)
  803f0c:	d9000017 	ldw	r4,0(sp)
  803f10:	180f883a 	mov	r7,r3
  803f14:	100d883a 	mov	r6,r2
  803f18:	080bb840 	call	80bb84 <__adddf3>
  803f1c:	0011883a 	mov	r8,zero
  803f20:	02700034 	movhi	r9,49152
  803f24:	480f883a 	mov	r7,r9
  803f28:	180b883a 	mov	r5,r3
  803f2c:	1009883a 	mov	r4,r2
  803f30:	400d883a 	mov	r6,r8
  803f34:	080bbf80 	call	80bbf8 <__muldf3>
  803f38:	02500274 	movhi	r9,16393
  803f3c:	4a487ec4 	addi	r9,r9,8699
  803f40:	02151134 	movhi	r8,21572
  803f44:	420b4604 	addi	r8,r8,11544
  803f48:	180b883a 	mov	r5,r3
  803f4c:	480f883a 	mov	r7,r9
  803f50:	1009883a 	mov	r4,r2
  803f54:	003e6f06 	br	803914 <__ieee754_acos+0x400>
  803f58:	01951134 	movhi	r6,21572
  803f5c:	318b4604 	addi	r6,r6,11544
  803f60:	01d00274 	movhi	r7,16393
  803f64:	39c87ec4 	addi	r7,r7,8699
  803f68:	003d8406 	br	80357c <__ieee754_acos+0x68>

00803f6c <__ieee754_asin>:
  803f6c:	defff004 	addi	sp,sp,-64
  803f70:	00a00034 	movhi	r2,32768
  803f74:	10bfffc4 	addi	r2,r2,-1
  803f78:	dd000a15 	stw	r20,40(sp)
  803f7c:	28a8703a 	and	r20,r5,r2
  803f80:	008ffc34 	movhi	r2,16368
  803f84:	10bfffc4 	addi	r2,r2,-1
  803f88:	df000e15 	stw	fp,56(sp)
  803f8c:	ddc00d15 	stw	r23,52(sp)
  803f90:	dd800c15 	stw	r22,48(sp)
  803f94:	dfc00f15 	stw	ra,60(sp)
  803f98:	dd400b15 	stw	r21,44(sp)
  803f9c:	dcc00915 	stw	r19,36(sp)
  803fa0:	dc800815 	stw	r18,32(sp)
  803fa4:	dc400715 	stw	r17,28(sp)
  803fa8:	dc000615 	stw	r16,24(sp)
  803fac:	202d883a 	mov	r22,r4
  803fb0:	282f883a 	mov	r23,r5
  803fb4:	2839883a 	mov	fp,r5
  803fb8:	15002d0e 	bge	r2,r20,804070 <__ieee754_asin+0x104>
  803fbc:	01300434 	movhi	r4,49168
  803fc0:	a109883a 	add	r4,r20,r4
  803fc4:	2588b03a 	or	r4,r4,r22
  803fc8:	2000ce1e 	bne	r4,zero,804304 <__ieee754_asin+0x398>
  803fcc:	00951134 	movhi	r2,21572
  803fd0:	108b4604 	addi	r2,r2,11544
  803fd4:	00cffe74 	movhi	r3,16377
  803fd8:	18c87ec4 	addi	r3,r3,8699
  803fdc:	180f883a 	mov	r7,r3
  803fe0:	b009883a 	mov	r4,r22
  803fe4:	100d883a 	mov	r6,r2
  803fe8:	080bbf80 	call	80bbf8 <__muldf3>
  803fec:	020cc534 	movhi	r8,13076
  803ff0:	421701c4 	addi	r8,r8,23559
  803ff4:	024f24b4 	movhi	r9,15506
  803ff8:	4a698984 	addi	r9,r9,-23002
  803ffc:	b80b883a 	mov	r5,r23
  804000:	480f883a 	mov	r7,r9
  804004:	b009883a 	mov	r4,r22
  804008:	400d883a 	mov	r6,r8
  80400c:	1021883a 	mov	r16,r2
  804010:	1823883a 	mov	r17,r3
  804014:	080bbf80 	call	80bbf8 <__muldf3>
  804018:	1011883a 	mov	r8,r2
  80401c:	880b883a 	mov	r5,r17
  804020:	180f883a 	mov	r7,r3
  804024:	8009883a 	mov	r4,r16
  804028:	400d883a 	mov	r6,r8
  80402c:	080bb840 	call	80bb84 <__adddf3>
  804030:	102d883a 	mov	r22,r2
  804034:	182f883a 	mov	r23,r3
  804038:	b005883a 	mov	r2,r22
  80403c:	b807883a 	mov	r3,r23
  804040:	dfc00f17 	ldw	ra,60(sp)
  804044:	df000e17 	ldw	fp,56(sp)
  804048:	ddc00d17 	ldw	r23,52(sp)
  80404c:	dd800c17 	ldw	r22,48(sp)
  804050:	dd400b17 	ldw	r21,44(sp)
  804054:	dd000a17 	ldw	r20,40(sp)
  804058:	dcc00917 	ldw	r19,36(sp)
  80405c:	dc800817 	ldw	r18,32(sp)
  804060:	dc400717 	ldw	r17,28(sp)
  804064:	dc000617 	ldw	r16,24(sp)
  804068:	dec01004 	addi	sp,sp,64
  80406c:	f800283a 	ret
  804070:	008ff834 	movhi	r2,16352
  804074:	10bfffc4 	addi	r2,r2,-1
  804078:	1500bd16 	blt	r2,r20,804370 <__ieee754_asin+0x404>
  80407c:	008f9034 	movhi	r2,15936
  804080:	10bfffc4 	addi	r2,r2,-1
  804084:	1500ab0e 	bge	r2,r20,804334 <__ieee754_asin+0x3c8>
  804088:	280f883a 	mov	r7,r5
  80408c:	b00d883a 	mov	r6,r22
  804090:	080bbf80 	call	80bbf8 <__muldf3>
  804094:	1021883a 	mov	r16,r2
  804098:	1823883a 	mov	r17,r3
  80409c:	00837fb4 	movhi	r2,3582
  8040a0:	10bdc244 	addi	r2,r2,-2295
  8040a4:	00cfc0b4 	movhi	r3,16130
  8040a8:	18cf7844 	addi	r3,r3,15841
  8040ac:	180f883a 	mov	r7,r3
  8040b0:	8009883a 	mov	r4,r16
  8040b4:	880b883a 	mov	r5,r17
  8040b8:	100d883a 	mov	r6,r2
  8040bc:	080bbf80 	call	80bbf8 <__muldf3>
  8040c0:	021d40b4 	movhi	r8,29954
  8040c4:	422ca204 	addi	r8,r8,-19832
  8040c8:	024fd2b4 	movhi	r9,16202
  8040cc:	4a7bf804 	addi	r9,r9,-4128
  8040d0:	480f883a 	mov	r7,r9
  8040d4:	400d883a 	mov	r6,r8
  8040d8:	180b883a 	mov	r5,r3
  8040dc:	1009883a 	mov	r4,r2
  8040e0:	080bb840 	call	80bb84 <__adddf3>
  8040e4:	180f883a 	mov	r7,r3
  8040e8:	8009883a 	mov	r4,r16
  8040ec:	880b883a 	mov	r5,r17
  8040f0:	100d883a 	mov	r6,r2
  8040f4:	080bbf80 	call	80bbf8 <__muldf3>
  8040f8:	022d5a74 	movhi	r8,46441
  8040fc:	4223cec4 	addi	r8,r8,-28869
  804100:	024fe974 	movhi	r9,16293
  804104:	4a608a04 	addi	r9,r9,-32216
  804108:	480f883a 	mov	r7,r9
  80410c:	400d883a 	mov	r6,r8
  804110:	180b883a 	mov	r5,r3
  804114:	1009883a 	mov	r4,r2
  804118:	080bb040 	call	80bb04 <__subdf3>
  80411c:	180f883a 	mov	r7,r3
  804120:	8009883a 	mov	r4,r16
  804124:	880b883a 	mov	r5,r17
  804128:	100d883a 	mov	r6,r2
  80412c:	080bbf80 	call	80bbf8 <__muldf3>
  804130:	0203a234 	movhi	r8,3720
  804134:	42111544 	addi	r8,r8,17493
  804138:	024ff2b4 	movhi	r9,16330
  80413c:	4a705544 	addi	r9,r9,-16043
  804140:	480f883a 	mov	r7,r9
  804144:	400d883a 	mov	r6,r8
  804148:	180b883a 	mov	r5,r3
  80414c:	1009883a 	mov	r4,r2
  804150:	080bb840 	call	80bb84 <__adddf3>
  804154:	180f883a 	mov	r7,r3
  804158:	8009883a 	mov	r4,r16
  80415c:	880b883a 	mov	r5,r17
  804160:	100d883a 	mov	r6,r2
  804164:	080bbf80 	call	80bbf8 <__muldf3>
  804168:	0200faf4 	movhi	r8,1003
  80416c:	421bdf44 	addi	r8,r8,28541
  804170:	024ff574 	movhi	r9,16341
  804174:	4a758484 	addi	r9,r9,-10734
  804178:	480f883a 	mov	r7,r9
  80417c:	400d883a 	mov	r6,r8
  804180:	180b883a 	mov	r5,r3
  804184:	1009883a 	mov	r4,r2
  804188:	080bb040 	call	80bb04 <__subdf3>
  80418c:	180f883a 	mov	r7,r3
  804190:	8009883a 	mov	r4,r16
  804194:	880b883a 	mov	r5,r17
  804198:	100d883a 	mov	r6,r2
  80419c:	080bbf80 	call	80bbf8 <__muldf3>
  8041a0:	02155574 	movhi	r8,21845
  8041a4:	42155544 	addi	r8,r8,21845
  8041a8:	024ff174 	movhi	r9,16325
  8041ac:	4a555544 	addi	r9,r9,21845
  8041b0:	480f883a 	mov	r7,r9
  8041b4:	400d883a 	mov	r6,r8
  8041b8:	180b883a 	mov	r5,r3
  8041bc:	1009883a 	mov	r4,r2
  8041c0:	080bb840 	call	80bb84 <__adddf3>
  8041c4:	180f883a 	mov	r7,r3
  8041c8:	8009883a 	mov	r4,r16
  8041cc:	880b883a 	mov	r5,r17
  8041d0:	100d883a 	mov	r6,r2
  8041d4:	080bbf80 	call	80bbf8 <__muldf3>
  8041d8:	022c4bf4 	movhi	r8,45359
  8041dc:	4224a084 	addi	r8,r8,-28030
  8041e0:	024fed34 	movhi	r9,16308
  8041e4:	4a6e3144 	addi	r9,r9,-18235
  8041e8:	480f883a 	mov	r7,r9
  8041ec:	400d883a 	mov	r6,r8
  8041f0:	8009883a 	mov	r4,r16
  8041f4:	880b883a 	mov	r5,r17
  8041f8:	1029883a 	mov	r20,r2
  8041fc:	182b883a 	mov	r21,r3
  804200:	080bbf80 	call	80bbf8 <__muldf3>
  804204:	0206e374 	movhi	r8,7053
  804208:	42005644 	addi	r8,r8,345
  80420c:	024ff9b4 	movhi	r9,16358
  804210:	4a419b04 	addi	r9,r9,1644
  804214:	480f883a 	mov	r7,r9
  804218:	400d883a 	mov	r6,r8
  80421c:	180b883a 	mov	r5,r3
  804220:	1009883a 	mov	r4,r2
  804224:	080bb040 	call	80bb04 <__subdf3>
  804228:	180f883a 	mov	r7,r3
  80422c:	8009883a 	mov	r4,r16
  804230:	880b883a 	mov	r5,r17
  804234:	100d883a 	mov	r6,r2
  804238:	080bbf80 	call	80bbf8 <__muldf3>
  80423c:	022716b4 	movhi	r8,40026
  804240:	4222b204 	addi	r8,r8,-30008
  804244:	02500034 	movhi	r9,16384
  804248:	4a4ab944 	addi	r9,r9,10981
  80424c:	480f883a 	mov	r7,r9
  804250:	400d883a 	mov	r6,r8
  804254:	180b883a 	mov	r5,r3
  804258:	1009883a 	mov	r4,r2
  80425c:	080bb840 	call	80bb84 <__adddf3>
  804260:	180f883a 	mov	r7,r3
  804264:	8009883a 	mov	r4,r16
  804268:	880b883a 	mov	r5,r17
  80426c:	100d883a 	mov	r6,r2
  804270:	080bbf80 	call	80bbf8 <__muldf3>
  804274:	020722b4 	movhi	r8,7306
  804278:	420b52c4 	addi	r8,r8,11595
  80427c:	025000f4 	movhi	r9,16387
  804280:	4a4e89c4 	addi	r9,r9,14887
  804284:	480f883a 	mov	r7,r9
  804288:	400d883a 	mov	r6,r8
  80428c:	180b883a 	mov	r5,r3
  804290:	1009883a 	mov	r4,r2
  804294:	080bb040 	call	80bb04 <__subdf3>
  804298:	180f883a 	mov	r7,r3
  80429c:	8009883a 	mov	r4,r16
  8042a0:	880b883a 	mov	r5,r17
  8042a4:	100d883a 	mov	r6,r2
  8042a8:	080bbf80 	call	80bbf8 <__muldf3>
  8042ac:	0011883a 	mov	r8,zero
  8042b0:	024ffc34 	movhi	r9,16368
  8042b4:	400d883a 	mov	r6,r8
  8042b8:	480f883a 	mov	r7,r9
  8042bc:	180b883a 	mov	r5,r3
  8042c0:	1009883a 	mov	r4,r2
  8042c4:	080bb840 	call	80bb84 <__adddf3>
  8042c8:	180f883a 	mov	r7,r3
  8042cc:	a80b883a 	mov	r5,r21
  8042d0:	a009883a 	mov	r4,r20
  8042d4:	100d883a 	mov	r6,r2
  8042d8:	080bfbc0 	call	80bfbc <__divdf3>
  8042dc:	180f883a 	mov	r7,r3
  8042e0:	b009883a 	mov	r4,r22
  8042e4:	b80b883a 	mov	r5,r23
  8042e8:	100d883a 	mov	r6,r2
  8042ec:	080bbf80 	call	80bbf8 <__muldf3>
  8042f0:	1011883a 	mov	r8,r2
  8042f4:	b80b883a 	mov	r5,r23
  8042f8:	180f883a 	mov	r7,r3
  8042fc:	b009883a 	mov	r4,r22
  804300:	003f4906 	br	804028 <__ieee754_asin+0xbc>
  804304:	280f883a 	mov	r7,r5
  804308:	b009883a 	mov	r4,r22
  80430c:	b00d883a 	mov	r6,r22
  804310:	080bb040 	call	80bb04 <__subdf3>
  804314:	1009883a 	mov	r4,r2
  804318:	180b883a 	mov	r5,r3
  80431c:	100d883a 	mov	r6,r2
  804320:	180f883a 	mov	r7,r3
  804324:	080bfbc0 	call	80bfbc <__divdf3>
  804328:	102d883a 	mov	r22,r2
  80432c:	182f883a 	mov	r23,r3
  804330:	003f4106 	br	804038 <__ieee754_asin+0xcc>
  804334:	00a20034 	movhi	r2,34816
  804338:	109d6704 	addi	r2,r2,30108
  80433c:	00df8e34 	movhi	r3,32312
  804340:	18f90f04 	addi	r3,r3,-7108
  804344:	180f883a 	mov	r7,r3
  804348:	100d883a 	mov	r6,r2
  80434c:	080bb840 	call	80bb84 <__adddf3>
  804350:	0011883a 	mov	r8,zero
  804354:	024ffc34 	movhi	r9,16368
  804358:	180b883a 	mov	r5,r3
  80435c:	480f883a 	mov	r7,r9
  804360:	1009883a 	mov	r4,r2
  804364:	400d883a 	mov	r6,r8
  804368:	080c3240 	call	80c324 <__gtdf2>
  80436c:	00bf3216 	blt	zero,r2,804038 <__ieee754_asin+0xcc>
  804370:	b80b883a 	mov	r5,r23
  804374:	b009883a 	mov	r4,r22
  804378:	080175c0 	call	80175c <fabs>
  80437c:	044ffc34 	movhi	r17,16368
  804380:	0021883a 	mov	r16,zero
  804384:	180f883a 	mov	r7,r3
  804388:	8009883a 	mov	r4,r16
  80438c:	880b883a 	mov	r5,r17
  804390:	100d883a 	mov	r6,r2
  804394:	080bb040 	call	80bb04 <__subdf3>
  804398:	0011883a 	mov	r8,zero
  80439c:	024ff834 	movhi	r9,16352
  8043a0:	480f883a 	mov	r7,r9
  8043a4:	400d883a 	mov	r6,r8
  8043a8:	180b883a 	mov	r5,r3
  8043ac:	1009883a 	mov	r4,r2
  8043b0:	080bbf80 	call	80bbf8 <__muldf3>
  8043b4:	d8c00515 	stw	r3,20(sp)
  8043b8:	d8800015 	stw	r2,0(sp)
  8043bc:	d9000017 	ldw	r4,0(sp)
  8043c0:	d9400517 	ldw	r5,20(sp)
  8043c4:	d8800415 	stw	r2,16(sp)
  8043c8:	d8c00115 	stw	r3,4(sp)
  8043cc:	00837fb4 	movhi	r2,3582
  8043d0:	10bdc244 	addi	r2,r2,-2295
  8043d4:	00cfc0b4 	movhi	r3,16130
  8043d8:	18cf7844 	addi	r3,r3,15841
  8043dc:	180f883a 	mov	r7,r3
  8043e0:	100d883a 	mov	r6,r2
  8043e4:	080bbf80 	call	80bbf8 <__muldf3>
  8043e8:	021d40b4 	movhi	r8,29954
  8043ec:	422ca204 	addi	r8,r8,-19832
  8043f0:	024fd2b4 	movhi	r9,16202
  8043f4:	4a7bf804 	addi	r9,r9,-4128
  8043f8:	480f883a 	mov	r7,r9
  8043fc:	400d883a 	mov	r6,r8
  804400:	180b883a 	mov	r5,r3
  804404:	1009883a 	mov	r4,r2
  804408:	080bb840 	call	80bb84 <__adddf3>
  80440c:	d9000017 	ldw	r4,0(sp)
  804410:	d9400517 	ldw	r5,20(sp)
  804414:	180f883a 	mov	r7,r3
  804418:	100d883a 	mov	r6,r2
  80441c:	080bbf80 	call	80bbf8 <__muldf3>
  804420:	022d5a74 	movhi	r8,46441
  804424:	4223cec4 	addi	r8,r8,-28869
  804428:	024fe974 	movhi	r9,16293
  80442c:	4a608a04 	addi	r9,r9,-32216
  804430:	480f883a 	mov	r7,r9
  804434:	400d883a 	mov	r6,r8
  804438:	180b883a 	mov	r5,r3
  80443c:	1009883a 	mov	r4,r2
  804440:	080bb040 	call	80bb04 <__subdf3>
  804444:	d9000017 	ldw	r4,0(sp)
  804448:	d9400517 	ldw	r5,20(sp)
  80444c:	180f883a 	mov	r7,r3
  804450:	100d883a 	mov	r6,r2
  804454:	080bbf80 	call	80bbf8 <__muldf3>
  804458:	0203a234 	movhi	r8,3720
  80445c:	42111544 	addi	r8,r8,17493
  804460:	024ff2b4 	movhi	r9,16330
  804464:	4a705544 	addi	r9,r9,-16043
  804468:	480f883a 	mov	r7,r9
  80446c:	400d883a 	mov	r6,r8
  804470:	180b883a 	mov	r5,r3
  804474:	1009883a 	mov	r4,r2
  804478:	080bb840 	call	80bb84 <__adddf3>
  80447c:	d9000017 	ldw	r4,0(sp)
  804480:	d9400517 	ldw	r5,20(sp)
  804484:	180f883a 	mov	r7,r3
  804488:	100d883a 	mov	r6,r2
  80448c:	080bbf80 	call	80bbf8 <__muldf3>
  804490:	0200faf4 	movhi	r8,1003
  804494:	421bdf44 	addi	r8,r8,28541
  804498:	024ff574 	movhi	r9,16341
  80449c:	4a758484 	addi	r9,r9,-10734
  8044a0:	480f883a 	mov	r7,r9
  8044a4:	400d883a 	mov	r6,r8
  8044a8:	180b883a 	mov	r5,r3
  8044ac:	1009883a 	mov	r4,r2
  8044b0:	080bb040 	call	80bb04 <__subdf3>
  8044b4:	d9000017 	ldw	r4,0(sp)
  8044b8:	d9400517 	ldw	r5,20(sp)
  8044bc:	180f883a 	mov	r7,r3
  8044c0:	100d883a 	mov	r6,r2
  8044c4:	080bbf80 	call	80bbf8 <__muldf3>
  8044c8:	02155574 	movhi	r8,21845
  8044cc:	42155544 	addi	r8,r8,21845
  8044d0:	024ff174 	movhi	r9,16325
  8044d4:	4a555544 	addi	r9,r9,21845
  8044d8:	480f883a 	mov	r7,r9
  8044dc:	400d883a 	mov	r6,r8
  8044e0:	180b883a 	mov	r5,r3
  8044e4:	1009883a 	mov	r4,r2
  8044e8:	080bb840 	call	80bb84 <__adddf3>
  8044ec:	d9000017 	ldw	r4,0(sp)
  8044f0:	d9400517 	ldw	r5,20(sp)
  8044f4:	180f883a 	mov	r7,r3
  8044f8:	100d883a 	mov	r6,r2
  8044fc:	080bbf80 	call	80bbf8 <__muldf3>
  804500:	d9000017 	ldw	r4,0(sp)
  804504:	d9400517 	ldw	r5,20(sp)
  804508:	022c4bf4 	movhi	r8,45359
  80450c:	4224a084 	addi	r8,r8,-28030
  804510:	024fed34 	movhi	r9,16308
  804514:	4a6e3144 	addi	r9,r9,-18235
  804518:	480f883a 	mov	r7,r9
  80451c:	400d883a 	mov	r6,r8
  804520:	1025883a 	mov	r18,r2
  804524:	1827883a 	mov	r19,r3
  804528:	080bbf80 	call	80bbf8 <__muldf3>
  80452c:	0206e374 	movhi	r8,7053
  804530:	42005644 	addi	r8,r8,345
  804534:	024ff9b4 	movhi	r9,16358
  804538:	4a419b04 	addi	r9,r9,1644
  80453c:	480f883a 	mov	r7,r9
  804540:	400d883a 	mov	r6,r8
  804544:	180b883a 	mov	r5,r3
  804548:	1009883a 	mov	r4,r2
  80454c:	080bb040 	call	80bb04 <__subdf3>
  804550:	d9000017 	ldw	r4,0(sp)
  804554:	d9400517 	ldw	r5,20(sp)
  804558:	180f883a 	mov	r7,r3
  80455c:	100d883a 	mov	r6,r2
  804560:	080bbf80 	call	80bbf8 <__muldf3>
  804564:	022716b4 	movhi	r8,40026
  804568:	4222b204 	addi	r8,r8,-30008
  80456c:	02500034 	movhi	r9,16384
  804570:	4a4ab944 	addi	r9,r9,10981
  804574:	480f883a 	mov	r7,r9
  804578:	400d883a 	mov	r6,r8
  80457c:	180b883a 	mov	r5,r3
  804580:	1009883a 	mov	r4,r2
  804584:	080bb840 	call	80bb84 <__adddf3>
  804588:	d9000017 	ldw	r4,0(sp)
  80458c:	d9400517 	ldw	r5,20(sp)
  804590:	180f883a 	mov	r7,r3
  804594:	100d883a 	mov	r6,r2
  804598:	080bbf80 	call	80bbf8 <__muldf3>
  80459c:	020722b4 	movhi	r8,7306
  8045a0:	420b52c4 	addi	r8,r8,11595
  8045a4:	025000f4 	movhi	r9,16387
  8045a8:	4a4e89c4 	addi	r9,r9,14887
  8045ac:	480f883a 	mov	r7,r9
  8045b0:	400d883a 	mov	r6,r8
  8045b4:	180b883a 	mov	r5,r3
  8045b8:	1009883a 	mov	r4,r2
  8045bc:	080bb040 	call	80bb04 <__subdf3>
  8045c0:	d9000017 	ldw	r4,0(sp)
  8045c4:	d9400517 	ldw	r5,20(sp)
  8045c8:	180f883a 	mov	r7,r3
  8045cc:	100d883a 	mov	r6,r2
  8045d0:	080bbf80 	call	80bbf8 <__muldf3>
  8045d4:	180b883a 	mov	r5,r3
  8045d8:	000d883a 	mov	r6,zero
  8045dc:	880f883a 	mov	r7,r17
  8045e0:	1009883a 	mov	r4,r2
  8045e4:	080bb840 	call	80bb84 <__adddf3>
  8045e8:	d9000017 	ldw	r4,0(sp)
  8045ec:	d9400517 	ldw	r5,20(sp)
  8045f0:	102d883a 	mov	r22,r2
  8045f4:	182f883a 	mov	r23,r3
  8045f8:	0807fa80 	call	807fa8 <__ieee754_sqrt>
  8045fc:	d8800215 	stw	r2,8(sp)
  804600:	008ffbf4 	movhi	r2,16367
  804604:	108ccc84 	addi	r2,r2,13106
  804608:	9009883a 	mov	r4,r18
  80460c:	b00d883a 	mov	r6,r22
  804610:	d8c00315 	stw	r3,12(sp)
  804614:	980b883a 	mov	r5,r19
  804618:	b80f883a 	mov	r7,r23
  80461c:	1500260e 	bge	r2,r20,8046b8 <__ieee754_asin+0x74c>
  804620:	080bfbc0 	call	80bfbc <__divdf3>
  804624:	d9000217 	ldw	r4,8(sp)
  804628:	d9400317 	ldw	r5,12(sp)
  80462c:	180f883a 	mov	r7,r3
  804630:	100d883a 	mov	r6,r2
  804634:	080bbf80 	call	80bbf8 <__muldf3>
  804638:	d9400317 	ldw	r5,12(sp)
  80463c:	d9000217 	ldw	r4,8(sp)
  804640:	180f883a 	mov	r7,r3
  804644:	100d883a 	mov	r6,r2
  804648:	080bb840 	call	80bb84 <__adddf3>
  80464c:	180f883a 	mov	r7,r3
  804650:	1009883a 	mov	r4,r2
  804654:	180b883a 	mov	r5,r3
  804658:	100d883a 	mov	r6,r2
  80465c:	080bb840 	call	80bb84 <__adddf3>
  804660:	020cc534 	movhi	r8,13076
  804664:	421701c4 	addi	r8,r8,23559
  804668:	024f24b4 	movhi	r9,15506
  80466c:	4a698984 	addi	r9,r9,-23002
  804670:	480f883a 	mov	r7,r9
  804674:	400d883a 	mov	r6,r8
  804678:	180b883a 	mov	r5,r3
  80467c:	1009883a 	mov	r4,r2
  804680:	080bb040 	call	80bb04 <__subdf3>
  804684:	02151134 	movhi	r8,21572
  804688:	420b4604 	addi	r8,r8,11544
  80468c:	024ffe74 	movhi	r9,16377
  804690:	4a487ec4 	addi	r9,r9,8699
  804694:	480b883a 	mov	r5,r9
  804698:	180f883a 	mov	r7,r3
  80469c:	4009883a 	mov	r4,r8
  8046a0:	100d883a 	mov	r6,r2
  8046a4:	080bb040 	call	80bb04 <__subdf3>
  8046a8:	07005c0e 	bge	zero,fp,80481c <__ieee754_asin+0x8b0>
  8046ac:	102d883a 	mov	r22,r2
  8046b0:	182f883a 	mov	r23,r3
  8046b4:	003e6006 	br	804038 <__ieee754_asin+0xcc>
  8046b8:	980b883a 	mov	r5,r19
  8046bc:	b80f883a 	mov	r7,r23
  8046c0:	080bfbc0 	call	80bfbc <__divdf3>
  8046c4:	d9000217 	ldw	r4,8(sp)
  8046c8:	d9400317 	ldw	r5,12(sp)
  8046cc:	1021883a 	mov	r16,r2
  8046d0:	200d883a 	mov	r6,r4
  8046d4:	280f883a 	mov	r7,r5
  8046d8:	1823883a 	mov	r17,r3
  8046dc:	080bb840 	call	80bb84 <__adddf3>
  8046e0:	d9000317 	ldw	r4,12(sp)
  8046e4:	0029883a 	mov	r20,zero
  8046e8:	880b883a 	mov	r5,r17
  8046ec:	2027883a 	mov	r19,r4
  8046f0:	180f883a 	mov	r7,r3
  8046f4:	8009883a 	mov	r4,r16
  8046f8:	100d883a 	mov	r6,r2
  8046fc:	080bbf80 	call	80bbf8 <__muldf3>
  804700:	980b883a 	mov	r5,r19
  804704:	980f883a 	mov	r7,r19
  804708:	a009883a 	mov	r4,r20
  80470c:	a00d883a 	mov	r6,r20
  804710:	102d883a 	mov	r22,r2
  804714:	182f883a 	mov	r23,r3
  804718:	080bbf80 	call	80bbf8 <__muldf3>
  80471c:	d9000017 	ldw	r4,0(sp)
  804720:	d9400517 	ldw	r5,20(sp)
  804724:	180f883a 	mov	r7,r3
  804728:	100d883a 	mov	r6,r2
  80472c:	080bb040 	call	80bb04 <__subdf3>
  804730:	d9400317 	ldw	r5,12(sp)
  804734:	d9000217 	ldw	r4,8(sp)
  804738:	980f883a 	mov	r7,r19
  80473c:	a00d883a 	mov	r6,r20
  804740:	1021883a 	mov	r16,r2
  804744:	1823883a 	mov	r17,r3
  804748:	080bb840 	call	80bb84 <__adddf3>
  80474c:	180f883a 	mov	r7,r3
  804750:	880b883a 	mov	r5,r17
  804754:	8009883a 	mov	r4,r16
  804758:	100d883a 	mov	r6,r2
  80475c:	080bfbc0 	call	80bfbc <__divdf3>
  804760:	04700034 	movhi	r17,49152
  804764:	0021883a 	mov	r16,zero
  804768:	800d883a 	mov	r6,r16
  80476c:	880f883a 	mov	r7,r17
  804770:	180b883a 	mov	r5,r3
  804774:	1009883a 	mov	r4,r2
  804778:	080bbf80 	call	80bbf8 <__muldf3>
  80477c:	020cc534 	movhi	r8,13076
  804780:	421701c4 	addi	r8,r8,23559
  804784:	024f24b4 	movhi	r9,15506
  804788:	4a698984 	addi	r9,r9,-23002
  80478c:	480f883a 	mov	r7,r9
  804790:	400d883a 	mov	r6,r8
  804794:	180b883a 	mov	r5,r3
  804798:	1009883a 	mov	r4,r2
  80479c:	080bb840 	call	80bb84 <__adddf3>
  8047a0:	180f883a 	mov	r7,r3
  8047a4:	b80b883a 	mov	r5,r23
  8047a8:	b009883a 	mov	r4,r22
  8047ac:	100d883a 	mov	r6,r2
  8047b0:	080bb040 	call	80bb04 <__subdf3>
  8047b4:	880f883a 	mov	r7,r17
  8047b8:	980b883a 	mov	r5,r19
  8047bc:	000d883a 	mov	r6,zero
  8047c0:	a009883a 	mov	r4,r20
  8047c4:	1025883a 	mov	r18,r2
  8047c8:	1827883a 	mov	r19,r3
  8047cc:	04151134 	movhi	r16,21572
  8047d0:	840b4604 	addi	r16,r16,11544
  8047d4:	080bbf80 	call	80bbf8 <__muldf3>
  8047d8:	044ffa74 	movhi	r17,16361
  8047dc:	8c487ec4 	addi	r17,r17,8699
  8047e0:	180b883a 	mov	r5,r3
  8047e4:	1009883a 	mov	r4,r2
  8047e8:	800d883a 	mov	r6,r16
  8047ec:	880f883a 	mov	r7,r17
  8047f0:	080bb840 	call	80bb84 <__adddf3>
  8047f4:	180f883a 	mov	r7,r3
  8047f8:	980b883a 	mov	r5,r19
  8047fc:	9009883a 	mov	r4,r18
  804800:	100d883a 	mov	r6,r2
  804804:	080bb040 	call	80bb04 <__subdf3>
  804808:	180f883a 	mov	r7,r3
  80480c:	8009883a 	mov	r4,r16
  804810:	880b883a 	mov	r5,r17
  804814:	100d883a 	mov	r6,r2
  804818:	003fa206 	br	8046a4 <__ieee754_asin+0x738>
  80481c:	102d883a 	mov	r22,r2
  804820:	1de0003c 	xorhi	r23,r3,32768
  804824:	003e0406 	br	804038 <__ieee754_asin+0xcc>

00804828 <__ieee754_atan2>:
  804828:	3015883a 	mov	r10,r6
  80482c:	3019883a 	mov	r12,r6
  804830:	018dc83a 	sub	r6,zero,r6
  804834:	518cb03a 	or	r6,r10,r6
  804838:	300cd7fa 	srli	r6,r6,31
  80483c:	03a00034 	movhi	r14,32768
  804840:	73bfffc4 	addi	r14,r14,-1
  804844:	3b9e703a 	and	r15,r7,r14
  804848:	defffc04 	addi	sp,sp,-16
  80484c:	33ccb03a 	or	r6,r6,r15
  804850:	035ffc34 	movhi	r13,32752
  804854:	dc000015 	stw	r16,0(sp)
  804858:	dfc00315 	stw	ra,12(sp)
  80485c:	dc800215 	stw	r18,8(sp)
  804860:	dc400115 	stw	r17,4(sp)
  804864:	3817883a 	mov	r11,r7
  804868:	2011883a 	mov	r8,r4
  80486c:	2813883a 	mov	r9,r5
  804870:	3821883a 	mov	r16,r7
  804874:	69800736 	bltu	r13,r6,804894 <__ieee754_atan2+0x6c>
  804878:	0105c83a 	sub	r2,zero,r4
  80487c:	2084b03a 	or	r2,r4,r2
  804880:	1004d7fa 	srli	r2,r2,31
  804884:	2b8c703a 	and	r6,r5,r14
  804888:	2823883a 	mov	r17,r5
  80488c:	1184b03a 	or	r2,r2,r6
  804890:	68800d2e 	bgeu	r13,r2,8048c8 <__ieee754_atan2+0xa0>
  804894:	4009883a 	mov	r4,r8
  804898:	500d883a 	mov	r6,r10
  80489c:	080bb840 	call	80bb84 <__adddf3>
  8048a0:	1011883a 	mov	r8,r2
  8048a4:	1813883a 	mov	r9,r3
  8048a8:	4005883a 	mov	r2,r8
  8048ac:	4807883a 	mov	r3,r9
  8048b0:	dfc00317 	ldw	ra,12(sp)
  8048b4:	dc800217 	ldw	r18,8(sp)
  8048b8:	dc400117 	ldw	r17,4(sp)
  8048bc:	dc000017 	ldw	r16,0(sp)
  8048c0:	dec00404 	addi	sp,sp,16
  8048c4:	f800283a 	ret
  8048c8:	00b00434 	movhi	r2,49168
  8048cc:	3885883a 	add	r2,r7,r2
  8048d0:	5084b03a 	or	r2,r10,r2
  8048d4:	10001026 	beq	r2,zero,804918 <__ieee754_atan2+0xf0>
  8048d8:	3805d7ba 	srai	r2,r7,30
  8048dc:	2806d7fa 	srli	r3,r5,31
  8048e0:	2188b03a 	or	r4,r4,r6
  8048e4:	1080008c 	andi	r2,r2,2
  8048e8:	18a4b03a 	or	r18,r3,r2
  8048ec:	00800084 	movi	r2,2
  8048f0:	2000101e 	bne	r4,zero,804934 <__ieee754_atan2+0x10c>
  8048f4:	90803826 	beq	r18,r2,8049d8 <__ieee754_atan2+0x1b0>
  8048f8:	14bfeb0e 	bge	r2,r18,8048a8 <__ieee754_atan2+0x80>
  8048fc:	008000c4 	movi	r2,3
  804900:	90800c1e 	bne	r18,r2,804934 <__ieee754_atan2+0x10c>
  804904:	02151134 	movhi	r8,21572
  804908:	420b4604 	addi	r8,r8,11544
  80490c:	02700274 	movhi	r9,49161
  804910:	4a487ec4 	addi	r9,r9,8699
  804914:	003fe406 	br	8048a8 <__ieee754_atan2+0x80>
  804918:	4009883a 	mov	r4,r8
  80491c:	dfc00317 	ldw	ra,12(sp)
  804920:	dc800217 	ldw	r18,8(sp)
  804924:	dc400117 	ldw	r17,4(sp)
  804928:	dc000017 	ldw	r16,0(sp)
  80492c:	dec00404 	addi	sp,sp,16
  804930:	0800d481 	jmpi	800d48 <atan>
  804934:	63c4b03a 	or	r2,r12,r15
  804938:	10001426 	beq	r2,zero,80498c <__ieee754_atan2+0x164>
  80493c:	009ffc34 	movhi	r2,32752
  804940:	78801d26 	beq	r15,r2,8049b8 <__ieee754_atan2+0x190>
  804944:	009ffc34 	movhi	r2,32752
  804948:	30801026 	beq	r6,r2,80498c <__ieee754_atan2+0x164>
  80494c:	33c5c83a 	sub	r2,r6,r15
  804950:	1009d53a 	srai	r4,r2,20
  804954:	00c00f04 	movi	r3,60
  804958:	1900240e 	bge	r3,r4,8049ec <__ieee754_atan2+0x1c4>
  80495c:	02951134 	movhi	r10,21572
  804960:	528b4604 	addi	r10,r10,11544
  804964:	02cffe74 	movhi	r11,16377
  804968:	5ac87ec4 	addi	r11,r11,8699
  80496c:	00800044 	movi	r2,1
  804970:	90802d26 	beq	r18,r2,804a28 <__ieee754_atan2+0x200>
  804974:	00800084 	movi	r2,2
  804978:	90804426 	beq	r18,r2,804a8c <__ieee754_atan2+0x264>
  80497c:	90002e1e 	bne	r18,zero,804a38 <__ieee754_atan2+0x210>
  804980:	5011883a 	mov	r8,r10
  804984:	5813883a 	mov	r9,r11
  804988:	003fc706 	br	8048a8 <__ieee754_atan2+0x80>
  80498c:	88000516 	blt	r17,zero,8049a4 <__ieee754_atan2+0x17c>
  804990:	02151134 	movhi	r8,21572
  804994:	420b4604 	addi	r8,r8,11544
  804998:	024ffe74 	movhi	r9,16377
  80499c:	4a487ec4 	addi	r9,r9,8699
  8049a0:	003fc106 	br	8048a8 <__ieee754_atan2+0x80>
  8049a4:	02151134 	movhi	r8,21572
  8049a8:	420b4604 	addi	r8,r8,11544
  8049ac:	026ffe74 	movhi	r9,49145
  8049b0:	4a487ec4 	addi	r9,r9,8699
  8049b4:	003fbc06 	br	8048a8 <__ieee754_atan2+0x80>
  8049b8:	33c04b26 	beq	r6,r15,804ae8 <__ieee754_atan2+0x2c0>
  8049bc:	00800044 	movi	r2,1
  8049c0:	90805726 	beq	r18,r2,804b20 <__ieee754_atan2+0x2f8>
  8049c4:	14805116 	blt	r2,r18,804b0c <__ieee754_atan2+0x2e4>
  8049c8:	903fde1e 	bne	r18,zero,804944 <__ieee754_atan2+0x11c>
  8049cc:	0011883a 	mov	r8,zero
  8049d0:	0013883a 	mov	r9,zero
  8049d4:	003fb406 	br	8048a8 <__ieee754_atan2+0x80>
  8049d8:	02151134 	movhi	r8,21572
  8049dc:	420b4604 	addi	r8,r8,11544
  8049e0:	02500274 	movhi	r9,16393
  8049e4:	4a487ec4 	addi	r9,r9,8699
  8049e8:	003faf06 	br	8048a8 <__ieee754_atan2+0x80>
  8049ec:	80003916 	blt	r16,zero,804ad4 <__ieee754_atan2+0x2ac>
  8049f0:	580f883a 	mov	r7,r11
  8049f4:	480b883a 	mov	r5,r9
  8049f8:	500d883a 	mov	r6,r10
  8049fc:	4009883a 	mov	r4,r8
  804a00:	080bfbc0 	call	80bfbc <__divdf3>
  804a04:	180b883a 	mov	r5,r3
  804a08:	1009883a 	mov	r4,r2
  804a0c:	080175c0 	call	80175c <fabs>
  804a10:	180b883a 	mov	r5,r3
  804a14:	1009883a 	mov	r4,r2
  804a18:	0800d480 	call	800d48 <atan>
  804a1c:	1015883a 	mov	r10,r2
  804a20:	1817883a 	mov	r11,r3
  804a24:	003fd106 	br	80496c <__ieee754_atan2+0x144>
  804a28:	59a0003c 	xorhi	r6,r11,32768
  804a2c:	5011883a 	mov	r8,r10
  804a30:	3013883a 	mov	r9,r6
  804a34:	003f9c06 	br	8048a8 <__ieee754_atan2+0x80>
  804a38:	008cc534 	movhi	r2,13076
  804a3c:	109701c4 	addi	r2,r2,23559
  804a40:	00cf28b4 	movhi	r3,15522
  804a44:	18e98984 	addi	r3,r3,-23002
  804a48:	580b883a 	mov	r5,r11
  804a4c:	180f883a 	mov	r7,r3
  804a50:	5009883a 	mov	r4,r10
  804a54:	100d883a 	mov	r6,r2
  804a58:	080bb040 	call	80bb04 <__subdf3>
  804a5c:	02151134 	movhi	r8,21572
  804a60:	420b4604 	addi	r8,r8,11544
  804a64:	02500274 	movhi	r9,16393
  804a68:	4a487ec4 	addi	r9,r9,8699
  804a6c:	180b883a 	mov	r5,r3
  804a70:	480f883a 	mov	r7,r9
  804a74:	1009883a 	mov	r4,r2
  804a78:	400d883a 	mov	r6,r8
  804a7c:	080bb040 	call	80bb04 <__subdf3>
  804a80:	1011883a 	mov	r8,r2
  804a84:	1813883a 	mov	r9,r3
  804a88:	003f8706 	br	8048a8 <__ieee754_atan2+0x80>
  804a8c:	008cc534 	movhi	r2,13076
  804a90:	109701c4 	addi	r2,r2,23559
  804a94:	00cf28b4 	movhi	r3,15522
  804a98:	18e98984 	addi	r3,r3,-23002
  804a9c:	580b883a 	mov	r5,r11
  804aa0:	180f883a 	mov	r7,r3
  804aa4:	5009883a 	mov	r4,r10
  804aa8:	100d883a 	mov	r6,r2
  804aac:	080bb040 	call	80bb04 <__subdf3>
  804ab0:	02151134 	movhi	r8,21572
  804ab4:	420b4604 	addi	r8,r8,11544
  804ab8:	02500274 	movhi	r9,16393
  804abc:	4a487ec4 	addi	r9,r9,8699
  804ac0:	480b883a 	mov	r5,r9
  804ac4:	180f883a 	mov	r7,r3
  804ac8:	4009883a 	mov	r4,r8
  804acc:	100d883a 	mov	r6,r2
  804ad0:	003fea06 	br	804a7c <__ieee754_atan2+0x254>
  804ad4:	00bff104 	movi	r2,-60
  804ad8:	20bfc50e 	bge	r4,r2,8049f0 <__ieee754_atan2+0x1c8>
  804adc:	0015883a 	mov	r10,zero
  804ae0:	0017883a 	mov	r11,zero
  804ae4:	003fa106 	br	80496c <__ieee754_atan2+0x144>
  804ae8:	00800044 	movi	r2,1
  804aec:	90801826 	beq	r18,r2,804b50 <__ieee754_atan2+0x328>
  804af0:	14800e16 	blt	r2,r18,804b2c <__ieee754_atan2+0x304>
  804af4:	903f931e 	bne	r18,zero,804944 <__ieee754_atan2+0x11c>
  804af8:	02151134 	movhi	r8,21572
  804afc:	420b4604 	addi	r8,r8,11544
  804b00:	024ffa74 	movhi	r9,16361
  804b04:	4a487ec4 	addi	r9,r9,8699
  804b08:	003f6706 	br	8048a8 <__ieee754_atan2+0x80>
  804b0c:	00800084 	movi	r2,2
  804b10:	90bfb126 	beq	r18,r2,8049d8 <__ieee754_atan2+0x1b0>
  804b14:	008000c4 	movi	r2,3
  804b18:	90bf8a1e 	bne	r18,r2,804944 <__ieee754_atan2+0x11c>
  804b1c:	003f7906 	br	804904 <__ieee754_atan2+0xdc>
  804b20:	0011883a 	mov	r8,zero
  804b24:	02600034 	movhi	r9,32768
  804b28:	003f5f06 	br	8048a8 <__ieee754_atan2+0x80>
  804b2c:	00800084 	movi	r2,2
  804b30:	90800c26 	beq	r18,r2,804b64 <__ieee754_atan2+0x33c>
  804b34:	008000c4 	movi	r2,3
  804b38:	90bf821e 	bne	r18,r2,804944 <__ieee754_atan2+0x11c>
  804b3c:	021fccf4 	movhi	r8,32563
  804b40:	42087484 	addi	r8,r8,8658
  804b44:	027000f4 	movhi	r9,49155
  804b48:	4a765f04 	addi	r9,r9,-9860
  804b4c:	003f5606 	br	8048a8 <__ieee754_atan2+0x80>
  804b50:	02151134 	movhi	r8,21572
  804b54:	420b4604 	addi	r8,r8,11544
  804b58:	026ffa74 	movhi	r9,49129
  804b5c:	4a487ec4 	addi	r9,r9,8699
  804b60:	003f5106 	br	8048a8 <__ieee754_atan2+0x80>
  804b64:	021fccf4 	movhi	r8,32563
  804b68:	42087484 	addi	r8,r8,8658
  804b6c:	025000f4 	movhi	r9,16387
  804b70:	4a765f04 	addi	r9,r9,-9860
  804b74:	003f4c06 	br	8048a8 <__ieee754_atan2+0x80>

00804b78 <__ieee754_cosh>:
  804b78:	defff604 	addi	sp,sp,-40
  804b7c:	00a00034 	movhi	r2,32768
  804b80:	10bfffc4 	addi	r2,r2,-1
  804b84:	dd800815 	stw	r22,32(sp)
  804b88:	116c703a 	and	r22,r2,r5
  804b8c:	009ffc34 	movhi	r2,32752
  804b90:	10bfffc4 	addi	r2,r2,-1
  804b94:	dfc00915 	stw	ra,36(sp)
  804b98:	dd400715 	stw	r21,28(sp)
  804b9c:	dd000615 	stw	r20,24(sp)
  804ba0:	dcc00515 	stw	r19,20(sp)
  804ba4:	dc800415 	stw	r18,16(sp)
  804ba8:	dc400315 	stw	r17,12(sp)
  804bac:	dc000215 	stw	r16,8(sp)
  804bb0:	2011883a 	mov	r8,r4
  804bb4:	1580110e 	bge	r2,r22,804bfc <__ieee754_cosh+0x84>
  804bb8:	280f883a 	mov	r7,r5
  804bbc:	400d883a 	mov	r6,r8
  804bc0:	080bbf80 	call	80bbf8 <__muldf3>
  804bc4:	1021883a 	mov	r16,r2
  804bc8:	1823883a 	mov	r17,r3
  804bcc:	8005883a 	mov	r2,r16
  804bd0:	8807883a 	mov	r3,r17
  804bd4:	dfc00917 	ldw	ra,36(sp)
  804bd8:	dd800817 	ldw	r22,32(sp)
  804bdc:	dd400717 	ldw	r21,28(sp)
  804be0:	dd000617 	ldw	r20,24(sp)
  804be4:	dcc00517 	ldw	r19,20(sp)
  804be8:	dc800417 	ldw	r18,16(sp)
  804bec:	dc400317 	ldw	r17,12(sp)
  804bf0:	dc000217 	ldw	r16,8(sp)
  804bf4:	dec00a04 	addi	sp,sp,40
  804bf8:	f800283a 	ret
  804bfc:	008ff5b4 	movhi	r2,16342
  804c00:	108b9084 	addi	r2,r2,11842
  804c04:	1580150e 	bge	r2,r22,804c5c <__ieee754_cosh+0xe4>
  804c08:	00900db4 	movhi	r2,16438
  804c0c:	10bfffc4 	addi	r2,r2,-1
  804c10:	15804e0e 	bge	r2,r22,804d4c <__ieee754_cosh+0x1d4>
  804c14:	009021b4 	movhi	r2,16518
  804c18:	108b9044 	addi	r2,r2,11841
  804c1c:	1580400e 	bge	r2,r22,804d20 <__ieee754_cosh+0x1a8>
  804c20:	011021b4 	movhi	r4,16518
  804c24:	210cf344 	addi	r4,r4,13261
  804c28:	2580640e 	bge	r4,r22,804dbc <__ieee754_cosh+0x244>
  804c2c:	009021b4 	movhi	r2,16518
  804c30:	108cf384 	addi	r2,r2,13262
  804c34:	b0805e26 	beq	r22,r2,804db0 <__ieee754_cosh+0x238>
  804c38:	00a20034 	movhi	r2,34816
  804c3c:	109d6704 	addi	r2,r2,30108
  804c40:	00df8e34 	movhi	r3,32312
  804c44:	18f90f04 	addi	r3,r3,-7108
  804c48:	100d883a 	mov	r6,r2
  804c4c:	180f883a 	mov	r7,r3
  804c50:	1009883a 	mov	r4,r2
  804c54:	180b883a 	mov	r5,r3
  804c58:	003fd906 	br	804bc0 <__ieee754_cosh+0x48>
  804c5c:	080175c0 	call	80175c <fabs>
  804c60:	180b883a 	mov	r5,r3
  804c64:	1009883a 	mov	r4,r2
  804c68:	080a2440 	call	80a244 <expm1>
  804c6c:	1029883a 	mov	r20,r2
  804c70:	0005883a 	mov	r2,zero
  804c74:	d8800015 	stw	r2,0(sp)
  804c78:	008ffc34 	movhi	r2,16368
  804c7c:	a009883a 	mov	r4,r20
  804c80:	180b883a 	mov	r5,r3
  804c84:	000d883a 	mov	r6,zero
  804c88:	100f883a 	mov	r7,r2
  804c8c:	182b883a 	mov	r21,r3
  804c90:	d8800115 	stw	r2,4(sp)
  804c94:	080bb840 	call	80bb84 <__adddf3>
  804c98:	1025883a 	mov	r18,r2
  804c9c:	1021883a 	mov	r16,r2
  804ca0:	008f2034 	movhi	r2,15488
  804ca4:	10bfffc4 	addi	r2,r2,-1
  804ca8:	1827883a 	mov	r19,r3
  804cac:	1823883a 	mov	r17,r3
  804cb0:	15bfc60e 	bge	r2,r22,804bcc <__ieee754_cosh+0x54>
  804cb4:	a80f883a 	mov	r7,r21
  804cb8:	a009883a 	mov	r4,r20
  804cbc:	a80b883a 	mov	r5,r21
  804cc0:	a00d883a 	mov	r6,r20
  804cc4:	080bbf80 	call	80bbf8 <__muldf3>
  804cc8:	900d883a 	mov	r6,r18
  804ccc:	980f883a 	mov	r7,r19
  804cd0:	9009883a 	mov	r4,r18
  804cd4:	980b883a 	mov	r5,r19
  804cd8:	1021883a 	mov	r16,r2
  804cdc:	1823883a 	mov	r17,r3
  804ce0:	080bb840 	call	80bb84 <__adddf3>
  804ce4:	180f883a 	mov	r7,r3
  804ce8:	880b883a 	mov	r5,r17
  804cec:	8009883a 	mov	r4,r16
  804cf0:	100d883a 	mov	r6,r2
  804cf4:	080bfbc0 	call	80bfbc <__divdf3>
  804cf8:	1011883a 	mov	r8,r2
  804cfc:	d8800117 	ldw	r2,4(sp)
  804d00:	000d883a 	mov	r6,zero
  804d04:	180b883a 	mov	r5,r3
  804d08:	100f883a 	mov	r7,r2
  804d0c:	4009883a 	mov	r4,r8
  804d10:	080bb840 	call	80bb84 <__adddf3>
  804d14:	1021883a 	mov	r16,r2
  804d18:	1823883a 	mov	r17,r3
  804d1c:	003fab06 	br	804bcc <__ieee754_cosh+0x54>
  804d20:	080175c0 	call	80175c <fabs>
  804d24:	180b883a 	mov	r5,r3
  804d28:	1009883a 	mov	r4,r2
  804d2c:	0804e1c0 	call	804e1c <__ieee754_exp>
  804d30:	0011883a 	mov	r8,zero
  804d34:	024ff834 	movhi	r9,16352
  804d38:	180b883a 	mov	r5,r3
  804d3c:	480f883a 	mov	r7,r9
  804d40:	1009883a 	mov	r4,r2
  804d44:	400d883a 	mov	r6,r8
  804d48:	003f9d06 	br	804bc0 <__ieee754_cosh+0x48>
  804d4c:	080175c0 	call	80175c <fabs>
  804d50:	180b883a 	mov	r5,r3
  804d54:	1009883a 	mov	r4,r2
  804d58:	0804e1c0 	call	804e1c <__ieee754_exp>
  804d5c:	044ff834 	movhi	r17,16352
  804d60:	0021883a 	mov	r16,zero
  804d64:	800d883a 	mov	r6,r16
  804d68:	880f883a 	mov	r7,r17
  804d6c:	1025883a 	mov	r18,r2
  804d70:	1827883a 	mov	r19,r3
  804d74:	1009883a 	mov	r4,r2
  804d78:	180b883a 	mov	r5,r3
  804d7c:	080bbf80 	call	80bbf8 <__muldf3>
  804d80:	880b883a 	mov	r5,r17
  804d84:	0009883a 	mov	r4,zero
  804d88:	980f883a 	mov	r7,r19
  804d8c:	900d883a 	mov	r6,r18
  804d90:	1021883a 	mov	r16,r2
  804d94:	1823883a 	mov	r17,r3
  804d98:	080bfbc0 	call	80bfbc <__divdf3>
  804d9c:	180f883a 	mov	r7,r3
  804da0:	880b883a 	mov	r5,r17
  804da4:	8009883a 	mov	r4,r16
  804da8:	100d883a 	mov	r6,r2
  804dac:	003fd806 	br	804d10 <__ieee754_cosh+0x198>
  804db0:	00a3eeb4 	movhi	r2,36794
  804db4:	10be1f44 	addi	r2,r2,-1923
  804db8:	123f9f36 	bltu	r2,r8,804c38 <__ieee754_cosh+0xc0>
  804dbc:	4009883a 	mov	r4,r8
  804dc0:	080175c0 	call	80175c <fabs>
  804dc4:	04cff834 	movhi	r19,16352
  804dc8:	0025883a 	mov	r18,zero
  804dcc:	900d883a 	mov	r6,r18
  804dd0:	980f883a 	mov	r7,r19
  804dd4:	180b883a 	mov	r5,r3
  804dd8:	1009883a 	mov	r4,r2
  804ddc:	080bbf80 	call	80bbf8 <__muldf3>
  804de0:	180b883a 	mov	r5,r3
  804de4:	1009883a 	mov	r4,r2
  804de8:	0804e1c0 	call	804e1c <__ieee754_exp>
  804dec:	000d883a 	mov	r6,zero
  804df0:	980f883a 	mov	r7,r19
  804df4:	1009883a 	mov	r4,r2
  804df8:	180b883a 	mov	r5,r3
  804dfc:	1021883a 	mov	r16,r2
  804e00:	1823883a 	mov	r17,r3
  804e04:	080bbf80 	call	80bbf8 <__muldf3>
  804e08:	180f883a 	mov	r7,r3
  804e0c:	880b883a 	mov	r5,r17
  804e10:	8009883a 	mov	r4,r16
  804e14:	100d883a 	mov	r6,r2
  804e18:	003f6906 	br	804bc0 <__ieee754_cosh+0x48>

00804e1c <__ieee754_exp>:
  804e1c:	00a00034 	movhi	r2,32768
  804e20:	10bfffc4 	addi	r2,r2,-1
  804e24:	defff404 	addi	sp,sp,-48
  804e28:	2890703a 	and	r8,r5,r2
  804e2c:	0005883a 	mov	r2,zero
  804e30:	d8800015 	stw	r2,0(sp)
  804e34:	d8800115 	stw	r2,4(sp)
  804e38:	009021b4 	movhi	r2,16518
  804e3c:	108b9044 	addi	r2,r2,11841
  804e40:	ddc00915 	stw	r23,36(sp)
  804e44:	dd800815 	stw	r22,32(sp)
  804e48:	dd400715 	stw	r21,28(sp)
  804e4c:	dd000615 	stw	r20,24(sp)
  804e50:	dc400315 	stw	r17,12(sp)
  804e54:	dfc00b15 	stw	ra,44(sp)
  804e58:	df000a15 	stw	fp,40(sp)
  804e5c:	dcc00515 	stw	r19,20(sp)
  804e60:	dc800415 	stw	r18,16(sp)
  804e64:	dc000215 	stw	r16,8(sp)
  804e68:	2029883a 	mov	r20,r4
  804e6c:	282b883a 	mov	r21,r5
  804e70:	002d883a 	mov	r22,zero
  804e74:	002f883a 	mov	r23,zero
  804e78:	2822d7fa 	srli	r17,r5,31
  804e7c:	1200172e 	bgeu	r2,r8,804edc <__ieee754_exp+0xc0>
  804e80:	009ffc34 	movhi	r2,32752
  804e84:	10bfffc4 	addi	r2,r2,-1
  804e88:	1200ee36 	bltu	r2,r8,805244 <__ieee754_exp+0x428>
  804e8c:	00bfbeb4 	movhi	r2,65274
  804e90:	108e7bc4 	addi	r2,r2,14831
  804e94:	00d021b4 	movhi	r3,16518
  804e98:	18cb9084 	addi	r3,r3,11842
  804e9c:	180f883a 	mov	r7,r3
  804ea0:	100d883a 	mov	r6,r2
  804ea4:	080c3240 	call	80c324 <__gtdf2>
  804ea8:	0081230e 	bge	zero,r2,805338 <__ieee754_exp+0x51c>
  804eac:	00a20034 	movhi	r2,34816
  804eb0:	109d6704 	addi	r2,r2,30108
  804eb4:	00df8e34 	movhi	r3,32312
  804eb8:	18f90f04 	addi	r3,r3,-7108
  804ebc:	100d883a 	mov	r6,r2
  804ec0:	180f883a 	mov	r7,r3
  804ec4:	1009883a 	mov	r4,r2
  804ec8:	180b883a 	mov	r5,r3
  804ecc:	080bbf80 	call	80bbf8 <__muldf3>
  804ed0:	1029883a 	mov	r20,r2
  804ed4:	182b883a 	mov	r21,r3
  804ed8:	0000cc06 	br	80520c <__ieee754_exp+0x3f0>
  804edc:	008ff5b4 	movhi	r2,16342
  804ee0:	108b9084 	addi	r2,r2,11842
  804ee4:	12001736 	bltu	r2,r8,804f44 <__ieee754_exp+0x128>
  804ee8:	008f8c34 	movhi	r2,15920
  804eec:	10bfffc4 	addi	r2,r2,-1
  804ef0:	12012136 	bltu	r2,r8,805378 <__ieee754_exp+0x55c>
  804ef4:	00a20034 	movhi	r2,34816
  804ef8:	109d6704 	addi	r2,r2,30108
  804efc:	00df8e34 	movhi	r3,32312
  804f00:	18f90f04 	addi	r3,r3,-7108
  804f04:	180f883a 	mov	r7,r3
  804f08:	100d883a 	mov	r6,r2
  804f0c:	080bb840 	call	80bb84 <__adddf3>
  804f10:	0021883a 	mov	r16,zero
  804f14:	044ffc34 	movhi	r17,16368
  804f18:	180b883a 	mov	r5,r3
  804f1c:	1009883a 	mov	r4,r2
  804f20:	800d883a 	mov	r6,r16
  804f24:	880f883a 	mov	r7,r17
  804f28:	080c3240 	call	80c324 <__gtdf2>
  804f2c:	0080460e 	bge	zero,r2,805048 <__ieee754_exp+0x22c>
  804f30:	000d883a 	mov	r6,zero
  804f34:	880f883a 	mov	r7,r17
  804f38:	a80b883a 	mov	r5,r21
  804f3c:	a009883a 	mov	r4,r20
  804f40:	0000c806 	br	805264 <__ieee754_exp+0x448>
  804f44:	008ffc74 	movhi	r2,16369
  804f48:	10a8ac44 	addi	r2,r2,-23887
  804f4c:	12010c2e 	bgeu	r2,r8,805380 <__ieee754_exp+0x564>
  804f50:	00994b34 	movhi	r2,25900
  804f54:	10a0bf84 	addi	r2,r2,-32002
  804f58:	00cffdf4 	movhi	r3,16375
  804f5c:	18c551c4 	addi	r3,r3,5447
  804f60:	180f883a 	mov	r7,r3
  804f64:	a009883a 	mov	r4,r20
  804f68:	a80b883a 	mov	r5,r21
  804f6c:	100d883a 	mov	r6,r2
  804f70:	080bbf80 	call	80bbf8 <__muldf3>
  804f74:	880890fa 	slli	r4,r17,3
  804f78:	100d883a 	mov	r6,r2
  804f7c:	008020b4 	movhi	r2,130
  804f80:	10861904 	addi	r2,r2,6244
  804f84:	2089883a 	add	r4,r4,r2
  804f88:	22000017 	ldw	r8,0(r4)
  804f8c:	22400117 	ldw	r9,4(r4)
  804f90:	180b883a 	mov	r5,r3
  804f94:	3009883a 	mov	r4,r6
  804f98:	480f883a 	mov	r7,r9
  804f9c:	400d883a 	mov	r6,r8
  804fa0:	080bb840 	call	80bb84 <__adddf3>
  804fa4:	180b883a 	mov	r5,r3
  804fa8:	1009883a 	mov	r4,r2
  804fac:	080c63c0 	call	80c63c <__fixdfsi>
  804fb0:	1009883a 	mov	r4,r2
  804fb4:	1039883a 	mov	fp,r2
  804fb8:	080c5440 	call	80c544 <__floatsidf>
  804fbc:	1021883a 	mov	r16,r2
  804fc0:	1823883a 	mov	r17,r3
  804fc4:	00bfb834 	movhi	r2,65248
  804fc8:	00cff9b4 	movhi	r3,16358
  804fcc:	18cb9084 	addi	r3,r3,11842
  804fd0:	180f883a 	mov	r7,r3
  804fd4:	8009883a 	mov	r4,r16
  804fd8:	880b883a 	mov	r5,r17
  804fdc:	100d883a 	mov	r6,r2
  804fe0:	080bbf80 	call	80bbf8 <__muldf3>
  804fe4:	180f883a 	mov	r7,r3
  804fe8:	a80b883a 	mov	r5,r21
  804fec:	a009883a 	mov	r4,r20
  804ff0:	100d883a 	mov	r6,r2
  804ff4:	080bb040 	call	80bb04 <__subdf3>
  804ff8:	020d5e74 	movhi	r8,13689
  804ffc:	420f1d84 	addi	r8,r8,15478
  805000:	024f7ab4 	movhi	r9,15850
  805004:	4a4e7bc4 	addi	r9,r9,14831
  805008:	8009883a 	mov	r4,r16
  80500c:	880b883a 	mov	r5,r17
  805010:	480f883a 	mov	r7,r9
  805014:	400d883a 	mov	r6,r8
  805018:	d8800015 	stw	r2,0(sp)
  80501c:	d8c00115 	stw	r3,4(sp)
  805020:	080bbf80 	call	80bbf8 <__muldf3>
  805024:	102d883a 	mov	r22,r2
  805028:	182f883a 	mov	r23,r3
  80502c:	d9000017 	ldw	r4,0(sp)
  805030:	d9400117 	ldw	r5,4(sp)
  805034:	b00d883a 	mov	r6,r22
  805038:	b80f883a 	mov	r7,r23
  80503c:	080bb040 	call	80bb04 <__subdf3>
  805040:	1029883a 	mov	r20,r2
  805044:	182b883a 	mov	r21,r3
  805048:	a009883a 	mov	r4,r20
  80504c:	a80b883a 	mov	r5,r21
  805050:	a00d883a 	mov	r6,r20
  805054:	a80f883a 	mov	r7,r21
  805058:	080bbf80 	call	80bbf8 <__muldf3>
  80505c:	1021883a 	mov	r16,r2
  805060:	1823883a 	mov	r17,r3
  805064:	009caff4 	movhi	r2,29375
  805068:	10a93404 	addi	r2,r2,-23344
  80506c:	00cf99b4 	movhi	r3,15974
  805070:	18cdda44 	addi	r3,r3,14185
  805074:	8009883a 	mov	r4,r16
  805078:	880b883a 	mov	r5,r17
  80507c:	180f883a 	mov	r7,r3
  805080:	100d883a 	mov	r6,r2
  805084:	080bbf80 	call	80bbf8 <__muldf3>
  805088:	023174b4 	movhi	r8,50642
  80508c:	421afc44 	addi	r8,r8,27633
  805090:	024faf34 	movhi	r9,16060
  805094:	4a6f5044 	addi	r9,r9,-17087
  805098:	480f883a 	mov	r7,r9
  80509c:	400d883a 	mov	r6,r8
  8050a0:	180b883a 	mov	r5,r3
  8050a4:	1009883a 	mov	r4,r2
  8050a8:	080bb040 	call	80bb04 <__subdf3>
  8050ac:	180f883a 	mov	r7,r3
  8050b0:	8009883a 	mov	r4,r16
  8050b4:	880b883a 	mov	r5,r17
  8050b8:	100d883a 	mov	r6,r2
  8050bc:	080bbf80 	call	80bbf8 <__muldf3>
  8050c0:	022bc9b4 	movhi	r8,44838
  8050c4:	42378b04 	addi	r8,r8,-8660
  8050c8:	024fc474 	movhi	r9,16145
  8050cc:	4a559a84 	addi	r9,r9,22122
  8050d0:	480f883a 	mov	r7,r9
  8050d4:	400d883a 	mov	r6,r8
  8050d8:	180b883a 	mov	r5,r3
  8050dc:	1009883a 	mov	r4,r2
  8050e0:	080bb840 	call	80bb84 <__adddf3>
  8050e4:	180f883a 	mov	r7,r3
  8050e8:	8009883a 	mov	r4,r16
  8050ec:	880b883a 	mov	r5,r17
  8050f0:	100d883a 	mov	r6,r2
  8050f4:	080bbf80 	call	80bbf8 <__muldf3>
  8050f8:	0205aff4 	movhi	r8,5823
  8050fc:	422f64c4 	addi	r8,r8,-17005
  805100:	024fd9f4 	movhi	r9,16231
  805104:	4a705b04 	addi	r9,r9,-16020
  805108:	480f883a 	mov	r7,r9
  80510c:	400d883a 	mov	r6,r8
  805110:	180b883a 	mov	r5,r3
  805114:	1009883a 	mov	r4,r2
  805118:	080bb040 	call	80bb04 <__subdf3>
  80511c:	180f883a 	mov	r7,r3
  805120:	8009883a 	mov	r4,r16
  805124:	880b883a 	mov	r5,r17
  805128:	100d883a 	mov	r6,r2
  80512c:	080bbf80 	call	80bbf8 <__muldf3>
  805130:	02155574 	movhi	r8,21845
  805134:	42154f84 	addi	r8,r8,21822
  805138:	024ff174 	movhi	r9,16325
  80513c:	4a555544 	addi	r9,r9,21845
  805140:	480f883a 	mov	r7,r9
  805144:	400d883a 	mov	r6,r8
  805148:	180b883a 	mov	r5,r3
  80514c:	1009883a 	mov	r4,r2
  805150:	080bb840 	call	80bb84 <__adddf3>
  805154:	180f883a 	mov	r7,r3
  805158:	8009883a 	mov	r4,r16
  80515c:	880b883a 	mov	r5,r17
  805160:	100d883a 	mov	r6,r2
  805164:	080bbf80 	call	80bbf8 <__muldf3>
  805168:	180f883a 	mov	r7,r3
  80516c:	a009883a 	mov	r4,r20
  805170:	a80b883a 	mov	r5,r21
  805174:	100d883a 	mov	r6,r2
  805178:	080bb040 	call	80bb04 <__subdf3>
  80517c:	1021883a 	mov	r16,r2
  805180:	1823883a 	mov	r17,r3
  805184:	e0003b1e 	bne	fp,zero,805274 <__ieee754_exp+0x458>
  805188:	a009883a 	mov	r4,r20
  80518c:	a80b883a 	mov	r5,r21
  805190:	100d883a 	mov	r6,r2
  805194:	180f883a 	mov	r7,r3
  805198:	080bbf80 	call	80bbf8 <__muldf3>
  80519c:	0011883a 	mov	r8,zero
  8051a0:	02500034 	movhi	r9,16384
  8051a4:	480f883a 	mov	r7,r9
  8051a8:	400d883a 	mov	r6,r8
  8051ac:	8009883a 	mov	r4,r16
  8051b0:	880b883a 	mov	r5,r17
  8051b4:	1021883a 	mov	r16,r2
  8051b8:	1823883a 	mov	r17,r3
  8051bc:	080bb040 	call	80bb04 <__subdf3>
  8051c0:	180f883a 	mov	r7,r3
  8051c4:	880b883a 	mov	r5,r17
  8051c8:	8009883a 	mov	r4,r16
  8051cc:	100d883a 	mov	r6,r2
  8051d0:	080bfbc0 	call	80bfbc <__divdf3>
  8051d4:	180b883a 	mov	r5,r3
  8051d8:	a80f883a 	mov	r7,r21
  8051dc:	a00d883a 	mov	r6,r20
  8051e0:	1009883a 	mov	r4,r2
  8051e4:	080bb040 	call	80bb04 <__subdf3>
  8051e8:	0011883a 	mov	r8,zero
  8051ec:	024ffc34 	movhi	r9,16368
  8051f0:	480b883a 	mov	r5,r9
  8051f4:	180f883a 	mov	r7,r3
  8051f8:	4009883a 	mov	r4,r8
  8051fc:	100d883a 	mov	r6,r2
  805200:	080bb040 	call	80bb04 <__subdf3>
  805204:	1029883a 	mov	r20,r2
  805208:	182b883a 	mov	r21,r3
  80520c:	a005883a 	mov	r2,r20
  805210:	a807883a 	mov	r3,r21
  805214:	dfc00b17 	ldw	ra,44(sp)
  805218:	df000a17 	ldw	fp,40(sp)
  80521c:	ddc00917 	ldw	r23,36(sp)
  805220:	dd800817 	ldw	r22,32(sp)
  805224:	dd400717 	ldw	r21,28(sp)
  805228:	dd000617 	ldw	r20,24(sp)
  80522c:	dcc00517 	ldw	r19,20(sp)
  805230:	dc800417 	ldw	r18,16(sp)
  805234:	dc400317 	ldw	r17,12(sp)
  805238:	dc000217 	ldw	r16,8(sp)
  80523c:	dec00c04 	addi	sp,sp,48
  805240:	f800283a 	ret
  805244:	01000434 	movhi	r4,16
  805248:	213fffc4 	addi	r4,r4,-1
  80524c:	4108703a 	and	r4,r8,r4
  805250:	2508b03a 	or	r4,r4,r20
  805254:	20004526 	beq	r4,zero,80536c <__ieee754_exp+0x550>
  805258:	280f883a 	mov	r7,r5
  80525c:	a009883a 	mov	r4,r20
  805260:	a00d883a 	mov	r6,r20
  805264:	080bb840 	call	80bb84 <__adddf3>
  805268:	1029883a 	mov	r20,r2
  80526c:	182b883a 	mov	r21,r3
  805270:	003fe606 	br	80520c <__ieee754_exp+0x3f0>
  805274:	a80b883a 	mov	r5,r21
  805278:	a009883a 	mov	r4,r20
  80527c:	100d883a 	mov	r6,r2
  805280:	180f883a 	mov	r7,r3
  805284:	080bbf80 	call	80bbf8 <__muldf3>
  805288:	0011883a 	mov	r8,zero
  80528c:	02500034 	movhi	r9,16384
  805290:	480b883a 	mov	r5,r9
  805294:	4009883a 	mov	r4,r8
  805298:	800d883a 	mov	r6,r16
  80529c:	880f883a 	mov	r7,r17
  8052a0:	1021883a 	mov	r16,r2
  8052a4:	1823883a 	mov	r17,r3
  8052a8:	080bb040 	call	80bb04 <__subdf3>
  8052ac:	180f883a 	mov	r7,r3
  8052b0:	880b883a 	mov	r5,r17
  8052b4:	8009883a 	mov	r4,r16
  8052b8:	100d883a 	mov	r6,r2
  8052bc:	080bfbc0 	call	80bfbc <__divdf3>
  8052c0:	180f883a 	mov	r7,r3
  8052c4:	b80b883a 	mov	r5,r23
  8052c8:	b009883a 	mov	r4,r22
  8052cc:	100d883a 	mov	r6,r2
  8052d0:	080bb040 	call	80bb04 <__subdf3>
  8052d4:	d9c00117 	ldw	r7,4(sp)
  8052d8:	d9800017 	ldw	r6,0(sp)
  8052dc:	180b883a 	mov	r5,r3
  8052e0:	1009883a 	mov	r4,r2
  8052e4:	080bb040 	call	80bb04 <__subdf3>
  8052e8:	0011883a 	mov	r8,zero
  8052ec:	024ffc34 	movhi	r9,16368
  8052f0:	4009883a 	mov	r4,r8
  8052f4:	480b883a 	mov	r5,r9
  8052f8:	180f883a 	mov	r7,r3
  8052fc:	100d883a 	mov	r6,r2
  805300:	080bb040 	call	80bb04 <__subdf3>
  805304:	1009883a 	mov	r4,r2
  805308:	00bf00c4 	movi	r2,-1021
  80530c:	e080320e 	bge	fp,r2,8053d8 <__ieee754_exp+0x5bc>
  805310:	e200fa04 	addi	r8,fp,1000
  805314:	4010953a 	slli	r8,r8,20
  805318:	0005883a 	mov	r2,zero
  80531c:	200d883a 	mov	r6,r4
  805320:	40d1883a 	add	r8,r8,r3
  805324:	00c05c34 	movhi	r3,368
  805328:	400f883a 	mov	r7,r8
  80532c:	180b883a 	mov	r5,r3
  805330:	1009883a 	mov	r4,r2
  805334:	003ee506 	br	804ecc <__ieee754_exp+0xb0>
  805338:	00b54b74 	movhi	r2,54573
  80533c:	108c1444 	addi	r2,r2,12369
  805340:	00f021f4 	movhi	r3,49287
  805344:	18d24404 	addi	r3,r3,18704
  805348:	180f883a 	mov	r7,r3
  80534c:	a009883a 	mov	r4,r20
  805350:	a80b883a 	mov	r5,r21
  805354:	100d883a 	mov	r6,r2
  805358:	080c4340 	call	80c434 <__ltdf2>
  80535c:	103efc0e 	bge	r2,zero,804f50 <__ieee754_exp+0x134>
  805360:	0029883a 	mov	r20,zero
  805364:	002b883a 	mov	r21,zero
  805368:	003fa806 	br	80520c <__ieee754_exp+0x3f0>
  80536c:	8805003a 	cmpeq	r2,r17,zero
  805370:	103fa61e 	bne	r2,zero,80520c <__ieee754_exp+0x3f0>
  805374:	003ffa06 	br	805360 <__ieee754_exp+0x544>
  805378:	0039883a 	mov	fp,zero
  80537c:	003f3206 	br	805048 <__ieee754_exp+0x22c>
  805380:	882090fa 	slli	r16,r17,3
  805384:	018020b4 	movhi	r6,130
  805388:	31861104 	addi	r6,r6,6212
  80538c:	818d883a 	add	r6,r16,r6
  805390:	30c00117 	ldw	r3,4(r6)
  805394:	30800017 	ldw	r2,0(r6)
  805398:	180f883a 	mov	r7,r3
  80539c:	100d883a 	mov	r6,r2
  8053a0:	080bb040 	call	80bb04 <__subdf3>
  8053a4:	010020b4 	movhi	r4,130
  8053a8:	21061504 	addi	r4,r4,6228
  8053ac:	8121883a 	add	r16,r16,r4
  8053b0:	85800017 	ldw	r22,0(r16)
  8053b4:	1009883a 	mov	r4,r2
  8053b8:	85c00117 	ldw	r23,4(r16)
  8053bc:	0445c83a 	sub	r2,zero,r17
  8053c0:	1445c83a 	sub	r2,r2,r17
  8053c4:	180b883a 	mov	r5,r3
  8053c8:	17000044 	addi	fp,r2,1
  8053cc:	d9000015 	stw	r4,0(sp)
  8053d0:	d9400115 	stw	r5,4(sp)
  8053d4:	003f1506 	br	80502c <__ieee754_exp+0x210>
  8053d8:	e00c953a 	slli	r6,fp,20
  8053dc:	2029883a 	mov	r20,r4
  8053e0:	30cd883a 	add	r6,r6,r3
  8053e4:	302b883a 	mov	r21,r6
  8053e8:	003f8806 	br	80520c <__ieee754_exp+0x3f0>

008053ec <__ieee754_fmod>:
  8053ec:	2011883a 	mov	r8,r4
  8053f0:	01200034 	movhi	r4,32768
  8053f4:	213fffc4 	addi	r4,r4,-1
  8053f8:	2813883a 	mov	r9,r5
  8053fc:	21ca703a 	and	r5,r4,r7
  805400:	defffc04 	addi	sp,sp,-16
  805404:	3148b03a 	or	r4,r6,r5
  805408:	dc400115 	stw	r17,4(sp)
  80540c:	dc000015 	stw	r16,0(sp)
  805410:	dfc00315 	stw	ra,12(sp)
  805414:	dc800215 	stw	r18,8(sp)
  805418:	3015883a 	mov	r10,r6
  80541c:	3817883a 	mov	r11,r7
  805420:	3023883a 	mov	r17,r6
  805424:	4021883a 	mov	r16,r8
  805428:	20000526 	beq	r4,zero,805440 <__ieee754_fmod+0x54>
  80542c:	4ca0002c 	andhi	r18,r9,32768
  805430:	4c88f03a 	xor	r4,r9,r18
  805434:	009ffc34 	movhi	r2,32752
  805438:	10bfffc4 	addi	r2,r2,-1
  80543c:	1100140e 	bge	r2,r4,805490 <__ieee754_fmod+0xa4>
  805440:	480b883a 	mov	r5,r9
  805444:	4009883a 	mov	r4,r8
  805448:	580f883a 	mov	r7,r11
  80544c:	500d883a 	mov	r6,r10
  805450:	080bbf80 	call	80bbf8 <__muldf3>
  805454:	1009883a 	mov	r4,r2
  805458:	180b883a 	mov	r5,r3
  80545c:	100d883a 	mov	r6,r2
  805460:	180f883a 	mov	r7,r3
  805464:	080bfbc0 	call	80bfbc <__divdf3>
  805468:	1011883a 	mov	r8,r2
  80546c:	1813883a 	mov	r9,r3
  805470:	4005883a 	mov	r2,r8
  805474:	4807883a 	mov	r3,r9
  805478:	dfc00317 	ldw	ra,12(sp)
  80547c:	dc800217 	ldw	r18,8(sp)
  805480:	dc400117 	ldw	r17,4(sp)
  805484:	dc000017 	ldw	r16,0(sp)
  805488:	dec00404 	addi	sp,sp,16
  80548c:	f800283a 	ret
  805490:	0185c83a 	sub	r2,zero,r6
  805494:	3084b03a 	or	r2,r6,r2
  805498:	1004d7fa 	srli	r2,r2,31
  80549c:	00dffc34 	movhi	r3,32752
  8054a0:	2884b03a 	or	r2,r5,r2
  8054a4:	18bfe636 	bltu	r3,r2,805440 <__ieee754_fmod+0x54>
  8054a8:	29000b16 	blt	r5,r4,8054d8 <__ieee754_fmod+0xec>
  8054ac:	217ff016 	blt	r4,r5,805470 <__ieee754_fmod+0x84>
  8054b0:	41bfef36 	bltu	r8,r6,805470 <__ieee754_fmod+0x84>
  8054b4:	4180081e 	bne	r8,r6,8054d8 <__ieee754_fmod+0xec>
  8054b8:	9004d7fa 	srli	r2,r18,31
  8054bc:	00c020b4 	movhi	r3,130
  8054c0:	18c61d04 	addi	r3,r3,6260
  8054c4:	100490fa 	slli	r2,r2,3
  8054c8:	10c5883a 	add	r2,r2,r3
  8054cc:	12000017 	ldw	r8,0(r2)
  8054d0:	12400117 	ldw	r9,4(r2)
  8054d4:	003fe606 	br	805470 <__ieee754_fmod+0x84>
  8054d8:	00800434 	movhi	r2,16
  8054dc:	10bfffc4 	addi	r2,r2,-1
  8054e0:	11004c0e 	bge	r2,r4,805614 <__ieee754_fmod+0x228>
  8054e4:	2005d53a 	srai	r2,r4,20
  8054e8:	11ff0044 	addi	r7,r2,-1023
  8054ec:	00800434 	movhi	r2,16
  8054f0:	10bfffc4 	addi	r2,r2,-1
  8054f4:	11405116 	blt	r2,r5,80563c <__ieee754_fmod+0x250>
  8054f8:	2800721e 	bne	r5,zero,8056c4 <__ieee754_fmod+0x2d8>
  8054fc:	8805883a 	mov	r2,r17
  805500:	0440950e 	bge	zero,r17,805758 <__ieee754_fmod+0x36c>
  805504:	02fefb44 	movi	r11,-1043
  805508:	1085883a 	add	r2,r2,r2
  80550c:	5affffc4 	addi	r11,r11,-1
  805510:	00bffd16 	blt	zero,r2,805508 <__ieee754_fmod+0x11c>
  805514:	00bf0084 	movi	r2,-1022
  805518:	38804b16 	blt	r7,r2,805648 <__ieee754_fmod+0x25c>
  80551c:	00800434 	movhi	r2,16
  805520:	10bfffc4 	addi	r2,r2,-1
  805524:	2084703a 	and	r2,r4,r2
  805528:	12400434 	orhi	r9,r2,16
  80552c:	00bf0084 	movi	r2,-1022
  805530:	58804f16 	blt	r11,r2,805670 <__ieee754_fmod+0x284>
  805534:	00800434 	movhi	r2,16
  805538:	10bfffc4 	addi	r2,r2,-1
  80553c:	2884703a 	and	r2,r5,r2
  805540:	10c00434 	orhi	r3,r2,16
  805544:	3ac5c83a 	sub	r2,r7,r11
  805548:	013fffc4 	movi	r4,-1
  80554c:	844dc83a 	sub	r6,r16,r17
  805550:	10bfffc4 	addi	r2,r2,-1
  805554:	8010d7fa 	srli	r8,r16,31
  805558:	3014d7fa 	srli	r10,r6,31
  80555c:	4a4f883a 	add	r7,r9,r9
  805560:	11001026 	beq	r2,r4,8055a4 <__ieee754_fmod+0x1b8>
  805564:	48cbc83a 	sub	r5,r9,r3
  805568:	3a13883a 	add	r9,r7,r8
  80556c:	8440012e 	bgeu	r16,r17,805574 <__ieee754_fmod+0x188>
  805570:	297fffc4 	addi	r5,r5,-1
  805574:	2951883a 	add	r8,r5,r5
  805578:	314eb03a 	or	r7,r6,r5
  80557c:	28002d16 	blt	r5,zero,805634 <__ieee754_fmod+0x248>
  805580:	383fcd26 	beq	r7,zero,8054b8 <__ieee754_fmod+0xcc>
  805584:	31a1883a 	add	r16,r6,r6
  805588:	4293883a 	add	r9,r8,r10
  80558c:	844dc83a 	sub	r6,r16,r17
  805590:	10bfffc4 	addi	r2,r2,-1
  805594:	8010d7fa 	srli	r8,r16,31
  805598:	3014d7fa 	srli	r10,r6,31
  80559c:	4a4f883a 	add	r7,r9,r9
  8055a0:	113ff01e 	bne	r2,r4,805564 <__ieee754_fmod+0x178>
  8055a4:	48c7c83a 	sub	r3,r9,r3
  8055a8:	8440012e 	bgeu	r16,r17,8055b0 <__ieee754_fmod+0x1c4>
  8055ac:	1887883a 	add	r3,r3,r2
  8055b0:	18000216 	blt	r3,zero,8055bc <__ieee754_fmod+0x1d0>
  8055b4:	8461c83a 	sub	r16,r16,r17
  8055b8:	1813883a 	mov	r9,r3
  8055bc:	8244b03a 	or	r2,r16,r9
  8055c0:	103fbd26 	beq	r2,zero,8054b8 <__ieee754_fmod+0xcc>
  8055c4:	00000506 	br	8055dc <__ieee754_fmod+0x1f0>
  8055c8:	8004d7fa 	srli	r2,r16,31
  8055cc:	4a47883a 	add	r3,r9,r9
  8055d0:	8421883a 	add	r16,r16,r16
  8055d4:	1893883a 	add	r9,r3,r2
  8055d8:	5affffc4 	addi	r11,r11,-1
  8055dc:	00800434 	movhi	r2,16
  8055e0:	10bfffc4 	addi	r2,r2,-1
  8055e4:	127ff80e 	bge	r2,r9,8055c8 <__ieee754_fmod+0x1dc>
  8055e8:	00bf0084 	movi	r2,-1022
  8055ec:	58804016 	blt	r11,r2,8056f0 <__ieee754_fmod+0x304>
  8055f0:	58c0ffc4 	addi	r3,r11,1023
  8055f4:	1806953a 	slli	r3,r3,20
  8055f8:	00bffc34 	movhi	r2,65520
  8055fc:	4885883a 	add	r2,r9,r2
  805600:	9084b03a 	or	r2,r18,r2
  805604:	189ab03a 	or	r13,r3,r2
  805608:	8011883a 	mov	r8,r16
  80560c:	6813883a 	mov	r9,r13
  805610:	003f9706 	br	805470 <__ieee754_fmod+0x84>
  805614:	2000201e 	bne	r4,zero,805698 <__ieee754_fmod+0x2ac>
  805618:	8005883a 	mov	r2,r16
  80561c:	0400520e 	bge	zero,r16,805768 <__ieee754_fmod+0x37c>
  805620:	01fefb44 	movi	r7,-1043
  805624:	1085883a 	add	r2,r2,r2
  805628:	39ffffc4 	addi	r7,r7,-1
  80562c:	00bffd16 	blt	zero,r2,805624 <__ieee754_fmod+0x238>
  805630:	003fae06 	br	8054ec <__ieee754_fmod+0x100>
  805634:	8421883a 	add	r16,r16,r16
  805638:	003fc406 	br	80554c <__ieee754_fmod+0x160>
  80563c:	2805d53a 	srai	r2,r5,20
  805640:	12ff0044 	addi	r11,r2,-1023
  805644:	003fb306 	br	805514 <__ieee754_fmod+0x128>
  805648:	11cdc83a 	sub	r6,r2,r7
  80564c:	008007c4 	movi	r2,31
  805650:	11802316 	blt	r2,r6,8056e0 <__ieee754_fmod+0x2f4>
  805654:	00800804 	movi	r2,32
  805658:	1185c83a 	sub	r2,r2,r6
  80565c:	8084d83a 	srl	r2,r16,r2
  805660:	2186983a 	sll	r3,r4,r6
  805664:	81a0983a 	sll	r16,r16,r6
  805668:	1892b03a 	or	r9,r3,r2
  80566c:	003faf06 	br	80552c <__ieee754_fmod+0x140>
  805670:	12cdc83a 	sub	r6,r2,r11
  805674:	008007c4 	movi	r2,31
  805678:	11800e16 	blt	r2,r6,8056b4 <__ieee754_fmod+0x2c8>
  80567c:	00800804 	movi	r2,32
  805680:	1185c83a 	sub	r2,r2,r6
  805684:	8884d83a 	srl	r2,r17,r2
  805688:	2986983a 	sll	r3,r5,r6
  80568c:	89a2983a 	sll	r17,r17,r6
  805690:	1886b03a 	or	r3,r3,r2
  805694:	003fab06 	br	805544 <__ieee754_fmod+0x158>
  805698:	200492fa 	slli	r2,r4,11
  80569c:	0080340e 	bge	zero,r2,805770 <__ieee754_fmod+0x384>
  8056a0:	01ff0084 	movi	r7,-1022
  8056a4:	1085883a 	add	r2,r2,r2
  8056a8:	39ffffc4 	addi	r7,r7,-1
  8056ac:	00bffd16 	blt	zero,r2,8056a4 <__ieee754_fmod+0x2b8>
  8056b0:	003f8e06 	br	8054ec <__ieee754_fmod+0x100>
  8056b4:	30bff804 	addi	r2,r6,-32
  8056b8:	8886983a 	sll	r3,r17,r2
  8056bc:	0023883a 	mov	r17,zero
  8056c0:	003fa006 	br	805544 <__ieee754_fmod+0x158>
  8056c4:	280492fa 	slli	r2,r5,11
  8056c8:	0080250e 	bge	zero,r2,805760 <__ieee754_fmod+0x374>
  8056cc:	02ff0084 	movi	r11,-1022
  8056d0:	1085883a 	add	r2,r2,r2
  8056d4:	5affffc4 	addi	r11,r11,-1
  8056d8:	00bffd16 	blt	zero,r2,8056d0 <__ieee754_fmod+0x2e4>
  8056dc:	003f8d06 	br	805514 <__ieee754_fmod+0x128>
  8056e0:	30bff804 	addi	r2,r6,-32
  8056e4:	8092983a 	sll	r9,r16,r2
  8056e8:	0021883a 	mov	r16,zero
  8056ec:	003f8f06 	br	80552c <__ieee754_fmod+0x140>
  8056f0:	12c9c83a 	sub	r4,r2,r11
  8056f4:	00800504 	movi	r2,20
  8056f8:	11000a16 	blt	r2,r4,805724 <__ieee754_fmod+0x338>
  8056fc:	00800804 	movi	r2,32
  805700:	1105c83a 	sub	r2,r2,r4
  805704:	8106d83a 	srl	r3,r16,r4
  805708:	4884983a 	sll	r2,r9,r2
  80570c:	4909d83a 	sra	r4,r9,r4
  805710:	1884b03a 	or	r2,r3,r2
  805714:	249eb03a 	or	r15,r4,r18
  805718:	1011883a 	mov	r8,r2
  80571c:	7813883a 	mov	r9,r15
  805720:	003f5306 	br	805470 <__ieee754_fmod+0x84>
  805724:	008007c4 	movi	r2,31
  805728:	11000716 	blt	r2,r4,805748 <__ieee754_fmod+0x35c>
  80572c:	00800804 	movi	r2,32
  805730:	1105c83a 	sub	r2,r2,r4
  805734:	8106d83a 	srl	r3,r16,r4
  805738:	4884983a 	sll	r2,r9,r2
  80573c:	9009883a 	mov	r4,r18
  805740:	10c4b03a 	or	r2,r2,r3
  805744:	003ff306 	br	805714 <__ieee754_fmod+0x328>
  805748:	20bff804 	addi	r2,r4,-32
  80574c:	4885d83a 	sra	r2,r9,r2
  805750:	9009883a 	mov	r4,r18
  805754:	003fef06 	br	805714 <__ieee754_fmod+0x328>
  805758:	02fefb44 	movi	r11,-1043
  80575c:	003f6d06 	br	805514 <__ieee754_fmod+0x128>
  805760:	02ff0084 	movi	r11,-1022
  805764:	003f6b06 	br	805514 <__ieee754_fmod+0x128>
  805768:	01fefb44 	movi	r7,-1043
  80576c:	003f5f06 	br	8054ec <__ieee754_fmod+0x100>
  805770:	01ff0084 	movi	r7,-1022
  805774:	003f5d06 	br	8054ec <__ieee754_fmod+0x100>

00805778 <__ieee754_log>:
  805778:	deffe604 	addi	sp,sp,-104
  80577c:	2015883a 	mov	r10,r4
  805780:	01000434 	movhi	r4,16
  805784:	213fffc4 	addi	r4,r4,-1
  805788:	dfc01915 	stw	ra,100(sp)
  80578c:	df001815 	stw	fp,96(sp)
  805790:	ddc01715 	stw	r23,92(sp)
  805794:	dd801615 	stw	r22,88(sp)
  805798:	dd401515 	stw	r21,84(sp)
  80579c:	dd001415 	stw	r20,80(sp)
  8057a0:	dcc01315 	stw	r19,76(sp)
  8057a4:	dc801215 	stw	r18,72(sp)
  8057a8:	dc401115 	stw	r17,68(sp)
  8057ac:	dc001015 	stw	r16,64(sp)
  8057b0:	2817883a 	mov	r11,r5
  8057b4:	2813883a 	mov	r9,r5
  8057b8:	2140190e 	bge	r4,r5,805820 <__ieee754_log+0xa8>
  8057bc:	000d883a 	mov	r6,zero
  8057c0:	009ffc34 	movhi	r2,32752
  8057c4:	10bfffc4 	addi	r2,r2,-1
  8057c8:	1240230e 	bge	r2,r9,805858 <__ieee754_log+0xe0>
  8057cc:	580f883a 	mov	r7,r11
  8057d0:	5009883a 	mov	r4,r10
  8057d4:	580b883a 	mov	r5,r11
  8057d8:	500d883a 	mov	r6,r10
  8057dc:	080bb840 	call	80bb84 <__adddf3>
  8057e0:	100d883a 	mov	r6,r2
  8057e4:	180f883a 	mov	r7,r3
  8057e8:	3005883a 	mov	r2,r6
  8057ec:	3807883a 	mov	r3,r7
  8057f0:	dfc01917 	ldw	ra,100(sp)
  8057f4:	df001817 	ldw	fp,96(sp)
  8057f8:	ddc01717 	ldw	r23,92(sp)
  8057fc:	dd801617 	ldw	r22,88(sp)
  805800:	dd401517 	ldw	r21,84(sp)
  805804:	dd001417 	ldw	r20,80(sp)
  805808:	dcc01317 	ldw	r19,76(sp)
  80580c:	dc801217 	ldw	r18,72(sp)
  805810:	dc401117 	ldw	r17,68(sp)
  805814:	dc001017 	ldw	r16,64(sp)
  805818:	dec01a04 	addi	sp,sp,104
  80581c:	f800283a 	ret
  805820:	00a00034 	movhi	r2,32768
  805824:	10bfffc4 	addi	r2,r2,-1
  805828:	2884703a 	and	r2,r5,r2
  80582c:	5084b03a 	or	r2,r10,r2
  805830:	1000e31e 	bne	r2,zero,805bc0 <__ieee754_log+0x448>
  805834:	00f0d434 	movhi	r3,50000
  805838:	000d883a 	mov	r6,zero
  80583c:	000f883a 	mov	r7,zero
  805840:	180b883a 	mov	r5,r3
  805844:	1009883a 	mov	r4,r2
  805848:	080bfbc0 	call	80bfbc <__divdf3>
  80584c:	100d883a 	mov	r6,r2
  805850:	180f883a 	mov	r7,r3
  805854:	003fe406 	br	8057e8 <__ieee754_log+0x70>
  805858:	04000434 	movhi	r16,16
  80585c:	843fffc4 	addi	r16,r16,-1
  805860:	4c38703a 	and	fp,r9,r16
  805864:	02000274 	movhi	r8,9
  805868:	4217d904 	addi	r8,r8,24420
  80586c:	e211883a 	add	r8,fp,r8
  805870:	4813d53a 	srai	r9,r9,20
  805874:	4200042c 	andhi	r8,r8,16
  805878:	41cffc3c 	xorhi	r7,r8,16368
  80587c:	4011d53a 	srai	r8,r8,20
  805880:	3253883a 	add	r9,r6,r9
  805884:	e1ceb03a 	or	r7,fp,r7
  805888:	0005883a 	mov	r2,zero
  80588c:	00cffc34 	movhi	r3,16368
  805890:	4a7f0044 	addi	r9,r9,-1023
  805894:	5009883a 	mov	r4,r10
  805898:	380b883a 	mov	r5,r7
  80589c:	4a13883a 	add	r9,r9,r8
  8058a0:	180f883a 	mov	r7,r3
  8058a4:	100d883a 	mov	r6,r2
  8058a8:	da400015 	stw	r9,0(sp)
  8058ac:	080bb040 	call	80bb04 <__subdf3>
  8058b0:	d8c00b15 	stw	r3,44(sp)
  8058b4:	d9000b17 	ldw	r4,44(sp)
  8058b8:	e0c00084 	addi	r3,fp,2
  8058bc:	d8800a15 	stw	r2,40(sp)
  8058c0:	d8800815 	stw	r2,32(sp)
  8058c4:	1c06703a 	and	r3,r3,r16
  8058c8:	00800084 	movi	r2,2
  8058cc:	d9000915 	stw	r4,36(sp)
  8058d0:	10c0c70e 	bge	r2,r3,805bf0 <__ieee754_log+0x478>
  8058d4:	d9000817 	ldw	r4,32(sp)
  8058d8:	d9400b17 	ldw	r5,44(sp)
  8058dc:	0005883a 	mov	r2,zero
  8058e0:	00d00034 	movhi	r3,16384
  8058e4:	180f883a 	mov	r7,r3
  8058e8:	100d883a 	mov	r6,r2
  8058ec:	080bb840 	call	80bb84 <__adddf3>
  8058f0:	d9400b17 	ldw	r5,44(sp)
  8058f4:	d9000817 	ldw	r4,32(sp)
  8058f8:	180f883a 	mov	r7,r3
  8058fc:	100d883a 	mov	r6,r2
  805900:	080bfbc0 	call	80bfbc <__divdf3>
  805904:	d9000017 	ldw	r4,0(sp)
  805908:	d8800c15 	stw	r2,48(sp)
  80590c:	d8c00d15 	stw	r3,52(sp)
  805910:	d8800615 	stw	r2,24(sp)
  805914:	080c5440 	call	80c544 <__floatsidf>
  805918:	d9000d17 	ldw	r4,52(sp)
  80591c:	d9400d17 	ldw	r5,52(sp)
  805920:	d8800e15 	stw	r2,56(sp)
  805924:	d9000715 	stw	r4,28(sp)
  805928:	d9000617 	ldw	r4,24(sp)
  80592c:	280f883a 	mov	r7,r5
  805930:	d8c00f15 	stw	r3,60(sp)
  805934:	200d883a 	mov	r6,r4
  805938:	080bbf80 	call	80bbf8 <__muldf3>
  80593c:	1009883a 	mov	r4,r2
  805940:	100d883a 	mov	r6,r2
  805944:	d8800415 	stw	r2,16(sp)
  805948:	00bffeb4 	movhi	r2,65530
  80594c:	10bae184 	addi	r2,r2,-5242
  805950:	180b883a 	mov	r5,r3
  805954:	180f883a 	mov	r7,r3
  805958:	e085883a 	add	r2,fp,r2
  80595c:	182b883a 	mov	r21,r3
  805960:	d8c00515 	stw	r3,20(sp)
  805964:	d8800115 	stw	r2,4(sp)
  805968:	080bbf80 	call	80bbf8 <__muldf3>
  80596c:	1021883a 	mov	r16,r2
  805970:	1823883a 	mov	r17,r3
  805974:	00b41e74 	movhi	r2,53369
  805978:	10b1a7c4 	addi	r2,r2,-14689
  80597c:	00cff134 	movhi	r3,16324
  805980:	18e68244 	addi	r3,r3,-26103
  805984:	8009883a 	mov	r4,r16
  805988:	880b883a 	mov	r5,r17
  80598c:	180f883a 	mov	r7,r3
  805990:	100d883a 	mov	r6,r2
  805994:	080bbf80 	call	80bbf8 <__muldf3>
  805998:	020763b4 	movhi	r8,7566
  80599c:	421e2bc4 	addi	r8,r8,30895
  8059a0:	024ff334 	movhi	r9,16332
  8059a4:	4a5c7144 	addi	r9,r9,29125
  8059a8:	480f883a 	mov	r7,r9
  8059ac:	400d883a 	mov	r6,r8
  8059b0:	180b883a 	mov	r5,r3
  8059b4:	1009883a 	mov	r4,r2
  8059b8:	080bb840 	call	80bb84 <__adddf3>
  8059bc:	180f883a 	mov	r7,r3
  8059c0:	8009883a 	mov	r4,r16
  8059c4:	880b883a 	mov	r5,r17
  8059c8:	100d883a 	mov	r6,r2
  8059cc:	080bbf80 	call	80bbf8 <__muldf3>
  8059d0:	02266634 	movhi	r8,39320
  8059d4:	423e8104 	addi	r8,r8,-1532
  8059d8:	024ff6b4 	movhi	r9,16346
  8059dc:	4a666644 	addi	r9,r9,-26215
  8059e0:	480f883a 	mov	r7,r9
  8059e4:	400d883a 	mov	r6,r8
  8059e8:	180b883a 	mov	r5,r3
  8059ec:	1009883a 	mov	r4,r2
  8059f0:	080bb840 	call	80bb84 <__adddf3>
  8059f4:	180f883a 	mov	r7,r3
  8059f8:	8009883a 	mov	r4,r16
  8059fc:	880b883a 	mov	r5,r17
  805a00:	100d883a 	mov	r6,r2
  805a04:	080bbf80 	call	80bbf8 <__muldf3>
  805a08:	0237cfb4 	movhi	r8,57150
  805a0c:	42149104 	addi	r8,r8,21060
  805a10:	024ff0f4 	movhi	r9,16323
  805a14:	4a7c4484 	addi	r9,r9,-3822
  805a18:	480f883a 	mov	r7,r9
  805a1c:	8009883a 	mov	r4,r16
  805a20:	880b883a 	mov	r5,r17
  805a24:	400d883a 	mov	r6,r8
  805a28:	102d883a 	mov	r22,r2
  805a2c:	182f883a 	mov	r23,r3
  805a30:	080bbf80 	call	80bbf8 <__muldf3>
  805a34:	0225b2f4 	movhi	r8,38603
  805a38:	4200f784 	addi	r8,r8,990
  805a3c:	024ff1f4 	movhi	r9,16327
  805a40:	4a519904 	addi	r9,r9,18020
  805a44:	480f883a 	mov	r7,r9
  805a48:	400d883a 	mov	r6,r8
  805a4c:	180b883a 	mov	r5,r3
  805a50:	1009883a 	mov	r4,r2
  805a54:	080bb840 	call	80bb84 <__adddf3>
  805a58:	180f883a 	mov	r7,r3
  805a5c:	8009883a 	mov	r4,r16
  805a60:	880b883a 	mov	r5,r17
  805a64:	100d883a 	mov	r6,r2
  805a68:	080bbf80 	call	80bbf8 <__muldf3>
  805a6c:	022508f4 	movhi	r8,37923
  805a70:	4224d644 	addi	r8,r8,-27815
  805a74:	024ff4b4 	movhi	r9,16338
  805a78:	4a524904 	addi	r9,r9,18724
  805a7c:	480f883a 	mov	r7,r9
  805a80:	400d883a 	mov	r6,r8
  805a84:	180b883a 	mov	r5,r3
  805a88:	1009883a 	mov	r4,r2
  805a8c:	080bb840 	call	80bb84 <__adddf3>
  805a90:	180f883a 	mov	r7,r3
  805a94:	8009883a 	mov	r4,r16
  805a98:	880b883a 	mov	r5,r17
  805a9c:	100d883a 	mov	r6,r2
  805aa0:	080bbf80 	call	80bbf8 <__muldf3>
  805aa4:	02155574 	movhi	r8,21845
  805aa8:	421564c4 	addi	r8,r8,21907
  805aac:	024ff974 	movhi	r9,16357
  805ab0:	4a555544 	addi	r9,r9,21845
  805ab4:	480f883a 	mov	r7,r9
  805ab8:	400d883a 	mov	r6,r8
  805abc:	180b883a 	mov	r5,r3
  805ac0:	1009883a 	mov	r4,r2
  805ac4:	080bb840 	call	80bb84 <__adddf3>
  805ac8:	d9000417 	ldw	r4,16(sp)
  805acc:	a80b883a 	mov	r5,r21
  805ad0:	180f883a 	mov	r7,r3
  805ad4:	100d883a 	mov	r6,r2
  805ad8:	080bbf80 	call	80bbf8 <__muldf3>
  805adc:	180f883a 	mov	r7,r3
  805ae0:	b009883a 	mov	r4,r22
  805ae4:	b80b883a 	mov	r5,r23
  805ae8:	100d883a 	mov	r6,r2
  805aec:	080bb840 	call	80bb84 <__adddf3>
  805af0:	d9000117 	ldw	r4,4(sp)
  805af4:	1021883a 	mov	r16,r2
  805af8:	008001f4 	movhi	r2,7
  805afc:	10ae1444 	addi	r2,r2,-18351
  805b00:	1705c83a 	sub	r2,r2,fp
  805b04:	1823883a 	mov	r17,r3
  805b08:	2086b03a 	or	r3,r4,r2
  805b0c:	d8800e17 	ldw	r2,56(sp)
  805b10:	d9000f17 	ldw	r4,60(sp)
  805b14:	d8800215 	stw	r2,8(sp)
  805b18:	d9000315 	stw	r4,12(sp)
  805b1c:	00c0df0e 	bge	zero,r3,805e9c <__ieee754_log+0x724>
  805b20:	d9000817 	ldw	r4,32(sp)
  805b24:	d9400b17 	ldw	r5,44(sp)
  805b28:	0005883a 	mov	r2,zero
  805b2c:	00cff834 	movhi	r3,16352
  805b30:	180f883a 	mov	r7,r3
  805b34:	100d883a 	mov	r6,r2
  805b38:	080bbf80 	call	80bbf8 <__muldf3>
  805b3c:	d9000817 	ldw	r4,32(sp)
  805b40:	d9400b17 	ldw	r5,44(sp)
  805b44:	180f883a 	mov	r7,r3
  805b48:	100d883a 	mov	r6,r2
  805b4c:	080bbf80 	call	80bbf8 <__muldf3>
  805b50:	1029883a 	mov	r20,r2
  805b54:	d8800017 	ldw	r2,0(sp)
  805b58:	182b883a 	mov	r21,r3
  805b5c:	1000971e 	bne	r2,zero,805dbc <__ieee754_log+0x644>
  805b60:	8009883a 	mov	r4,r16
  805b64:	880b883a 	mov	r5,r17
  805b68:	a00d883a 	mov	r6,r20
  805b6c:	180f883a 	mov	r7,r3
  805b70:	080bb840 	call	80bb84 <__adddf3>
  805b74:	d9000617 	ldw	r4,24(sp)
  805b78:	d9400d17 	ldw	r5,52(sp)
  805b7c:	180f883a 	mov	r7,r3
  805b80:	100d883a 	mov	r6,r2
  805b84:	080bbf80 	call	80bbf8 <__muldf3>
  805b88:	180f883a 	mov	r7,r3
  805b8c:	a009883a 	mov	r4,r20
  805b90:	a80b883a 	mov	r5,r21
  805b94:	100d883a 	mov	r6,r2
  805b98:	080bb040 	call	80bb04 <__subdf3>
  805b9c:	d9000817 	ldw	r4,32(sp)
  805ba0:	d9400b17 	ldw	r5,44(sp)
  805ba4:	1011883a 	mov	r8,r2
  805ba8:	180f883a 	mov	r7,r3
  805bac:	400d883a 	mov	r6,r8
  805bb0:	080bb040 	call	80bb04 <__subdf3>
  805bb4:	100d883a 	mov	r6,r2
  805bb8:	180f883a 	mov	r7,r3
  805bbc:	003f0a06 	br	8057e8 <__ieee754_log+0x70>
  805bc0:	28002f16 	blt	r5,zero,805c80 <__ieee754_log+0x508>
  805bc4:	0005883a 	mov	r2,zero
  805bc8:	00d0d434 	movhi	r3,17232
  805bcc:	5009883a 	mov	r4,r10
  805bd0:	100d883a 	mov	r6,r2
  805bd4:	180f883a 	mov	r7,r3
  805bd8:	080bbf80 	call	80bbf8 <__muldf3>
  805bdc:	1015883a 	mov	r10,r2
  805be0:	1813883a 	mov	r9,r3
  805be4:	1817883a 	mov	r11,r3
  805be8:	01bff284 	movi	r6,-54
  805bec:	003ef406 	br	8057c0 <__ieee754_log+0x48>
  805bf0:	d9000817 	ldw	r4,32(sp)
  805bf4:	d9400b17 	ldw	r5,44(sp)
  805bf8:	000d883a 	mov	r6,zero
  805bfc:	000f883a 	mov	r7,zero
  805c00:	080c2140 	call	80c214 <__eqdf2>
  805c04:	1000271e 	bne	r2,zero,805ca4 <__ieee754_log+0x52c>
  805c08:	d8800017 	ldw	r2,0(sp)
  805c0c:	1000b026 	beq	r2,zero,805ed0 <__ieee754_log+0x758>
  805c10:	d9000017 	ldw	r4,0(sp)
  805c14:	080c5440 	call	80c544 <__floatsidf>
  805c18:	1021883a 	mov	r16,r2
  805c1c:	1823883a 	mov	r17,r3
  805c20:	00bfb834 	movhi	r2,65248
  805c24:	00cff9b4 	movhi	r3,16358
  805c28:	18cb9084 	addi	r3,r3,11842
  805c2c:	8009883a 	mov	r4,r16
  805c30:	880b883a 	mov	r5,r17
  805c34:	180f883a 	mov	r7,r3
  805c38:	100d883a 	mov	r6,r2
  805c3c:	080bbf80 	call	80bbf8 <__muldf3>
  805c40:	020d5e74 	movhi	r8,13689
  805c44:	420f1d84 	addi	r8,r8,15478
  805c48:	024f7ab4 	movhi	r9,15850
  805c4c:	4a4e7bc4 	addi	r9,r9,14831
  805c50:	8009883a 	mov	r4,r16
  805c54:	880b883a 	mov	r5,r17
  805c58:	480f883a 	mov	r7,r9
  805c5c:	400d883a 	mov	r6,r8
  805c60:	1021883a 	mov	r16,r2
  805c64:	1823883a 	mov	r17,r3
  805c68:	080bbf80 	call	80bbf8 <__muldf3>
  805c6c:	180f883a 	mov	r7,r3
  805c70:	880b883a 	mov	r5,r17
  805c74:	8009883a 	mov	r4,r16
  805c78:	100d883a 	mov	r6,r2
  805c7c:	003ed706 	br	8057dc <__ieee754_log+0x64>
  805c80:	280f883a 	mov	r7,r5
  805c84:	5009883a 	mov	r4,r10
  805c88:	500d883a 	mov	r6,r10
  805c8c:	080bb040 	call	80bb04 <__subdf3>
  805c90:	180b883a 	mov	r5,r3
  805c94:	000d883a 	mov	r6,zero
  805c98:	000f883a 	mov	r7,zero
  805c9c:	1009883a 	mov	r4,r2
  805ca0:	003ee906 	br	805848 <__ieee754_log+0xd0>
  805ca4:	d9000817 	ldw	r4,32(sp)
  805ca8:	d9400b17 	ldw	r5,44(sp)
  805cac:	200d883a 	mov	r6,r4
  805cb0:	280f883a 	mov	r7,r5
  805cb4:	080bbf80 	call	80bbf8 <__muldf3>
  805cb8:	d9000817 	ldw	r4,32(sp)
  805cbc:	d9400b17 	ldw	r5,44(sp)
  805cc0:	02155574 	movhi	r8,21845
  805cc4:	42155544 	addi	r8,r8,21845
  805cc8:	026ff574 	movhi	r9,49109
  805ccc:	4a555544 	addi	r9,r9,21845
  805cd0:	480f883a 	mov	r7,r9
  805cd4:	400d883a 	mov	r6,r8
  805cd8:	1021883a 	mov	r16,r2
  805cdc:	1823883a 	mov	r17,r3
  805ce0:	080bbf80 	call	80bbf8 <__muldf3>
  805ce4:	0011883a 	mov	r8,zero
  805ce8:	024ff834 	movhi	r9,16352
  805cec:	480f883a 	mov	r7,r9
  805cf0:	400d883a 	mov	r6,r8
  805cf4:	180b883a 	mov	r5,r3
  805cf8:	1009883a 	mov	r4,r2
  805cfc:	080bb840 	call	80bb84 <__adddf3>
  805d00:	180f883a 	mov	r7,r3
  805d04:	8009883a 	mov	r4,r16
  805d08:	880b883a 	mov	r5,r17
  805d0c:	100d883a 	mov	r6,r2
  805d10:	080bbf80 	call	80bbf8 <__muldf3>
  805d14:	d9000017 	ldw	r4,0(sp)
  805d18:	1029883a 	mov	r20,r2
  805d1c:	182b883a 	mov	r21,r3
  805d20:	20005926 	beq	r4,zero,805e88 <__ieee754_log+0x710>
  805d24:	d9000017 	ldw	r4,0(sp)
  805d28:	080c5440 	call	80c544 <__floatsidf>
  805d2c:	1021883a 	mov	r16,r2
  805d30:	1823883a 	mov	r17,r3
  805d34:	00bfb834 	movhi	r2,65248
  805d38:	00cff9b4 	movhi	r3,16358
  805d3c:	18cb9084 	addi	r3,r3,11842
  805d40:	8009883a 	mov	r4,r16
  805d44:	880b883a 	mov	r5,r17
  805d48:	180f883a 	mov	r7,r3
  805d4c:	100d883a 	mov	r6,r2
  805d50:	080bbf80 	call	80bbf8 <__muldf3>
  805d54:	020d5e74 	movhi	r8,13689
  805d58:	420f1d84 	addi	r8,r8,15478
  805d5c:	026f7ab4 	movhi	r9,48618
  805d60:	4a4e7bc4 	addi	r9,r9,14831
  805d64:	400d883a 	mov	r6,r8
  805d68:	480f883a 	mov	r7,r9
  805d6c:	8009883a 	mov	r4,r16
  805d70:	880b883a 	mov	r5,r17
  805d74:	1021883a 	mov	r16,r2
  805d78:	1823883a 	mov	r17,r3
  805d7c:	080bbf80 	call	80bbf8 <__muldf3>
  805d80:	180f883a 	mov	r7,r3
  805d84:	a009883a 	mov	r4,r20
  805d88:	a80b883a 	mov	r5,r21
  805d8c:	100d883a 	mov	r6,r2
  805d90:	080bb840 	call	80bb84 <__adddf3>
  805d94:	d9c00b17 	ldw	r7,44(sp)
  805d98:	d9800817 	ldw	r6,32(sp)
  805d9c:	180b883a 	mov	r5,r3
  805da0:	1009883a 	mov	r4,r2
  805da4:	080bb040 	call	80bb04 <__subdf3>
  805da8:	1011883a 	mov	r8,r2
  805dac:	880b883a 	mov	r5,r17
  805db0:	180f883a 	mov	r7,r3
  805db4:	8009883a 	mov	r4,r16
  805db8:	003f7c06 	br	805bac <__ieee754_log+0x434>
  805dbc:	d9000217 	ldw	r4,8(sp)
  805dc0:	d9400f17 	ldw	r5,60(sp)
  805dc4:	00bfb834 	movhi	r2,65248
  805dc8:	00cff9b4 	movhi	r3,16358
  805dcc:	18cb9084 	addi	r3,r3,11842
  805dd0:	180f883a 	mov	r7,r3
  805dd4:	100d883a 	mov	r6,r2
  805dd8:	080bbf80 	call	80bbf8 <__muldf3>
  805ddc:	8009883a 	mov	r4,r16
  805de0:	880b883a 	mov	r5,r17
  805de4:	a00d883a 	mov	r6,r20
  805de8:	a80f883a 	mov	r7,r21
  805dec:	1025883a 	mov	r18,r2
  805df0:	1827883a 	mov	r19,r3
  805df4:	080bb840 	call	80bb84 <__adddf3>
  805df8:	d9000617 	ldw	r4,24(sp)
  805dfc:	d9400d17 	ldw	r5,52(sp)
  805e00:	180f883a 	mov	r7,r3
  805e04:	100d883a 	mov	r6,r2
  805e08:	080bbf80 	call	80bbf8 <__muldf3>
  805e0c:	d9000217 	ldw	r4,8(sp)
  805e10:	d9400f17 	ldw	r5,60(sp)
  805e14:	020d5e74 	movhi	r8,13689
  805e18:	420f1d84 	addi	r8,r8,15478
  805e1c:	024f7ab4 	movhi	r9,15850
  805e20:	4a4e7bc4 	addi	r9,r9,14831
  805e24:	480f883a 	mov	r7,r9
  805e28:	400d883a 	mov	r6,r8
  805e2c:	1021883a 	mov	r16,r2
  805e30:	1823883a 	mov	r17,r3
  805e34:	080bbf80 	call	80bbf8 <__muldf3>
  805e38:	180f883a 	mov	r7,r3
  805e3c:	880b883a 	mov	r5,r17
  805e40:	8009883a 	mov	r4,r16
  805e44:	100d883a 	mov	r6,r2
  805e48:	080bb840 	call	80bb84 <__adddf3>
  805e4c:	180f883a 	mov	r7,r3
  805e50:	a009883a 	mov	r4,r20
  805e54:	a80b883a 	mov	r5,r21
  805e58:	100d883a 	mov	r6,r2
  805e5c:	080bb040 	call	80bb04 <__subdf3>
  805e60:	d9c00b17 	ldw	r7,44(sp)
  805e64:	d9800817 	ldw	r6,32(sp)
  805e68:	180b883a 	mov	r5,r3
  805e6c:	1009883a 	mov	r4,r2
  805e70:	080bb040 	call	80bb04 <__subdf3>
  805e74:	1011883a 	mov	r8,r2
  805e78:	980b883a 	mov	r5,r19
  805e7c:	180f883a 	mov	r7,r3
  805e80:	9009883a 	mov	r4,r18
  805e84:	003f4906 	br	805bac <__ieee754_log+0x434>
  805e88:	d9000817 	ldw	r4,32(sp)
  805e8c:	d9400b17 	ldw	r5,44(sp)
  805e90:	100d883a 	mov	r6,r2
  805e94:	180f883a 	mov	r7,r3
  805e98:	003f4506 	br	805bb0 <__ieee754_log+0x438>
  805e9c:	d9000017 	ldw	r4,0(sp)
  805ea0:	20000e1e 	bne	r4,zero,805edc <__ieee754_log+0x764>
  805ea4:	d9000817 	ldw	r4,32(sp)
  805ea8:	d9400b17 	ldw	r5,44(sp)
  805eac:	800d883a 	mov	r6,r16
  805eb0:	880f883a 	mov	r7,r17
  805eb4:	080bb040 	call	80bb04 <__subdf3>
  805eb8:	d9000617 	ldw	r4,24(sp)
  805ebc:	d9400d17 	ldw	r5,52(sp)
  805ec0:	180f883a 	mov	r7,r3
  805ec4:	100d883a 	mov	r6,r2
  805ec8:	080bbf80 	call	80bbf8 <__muldf3>
  805ecc:	003f3306 	br	805b9c <__ieee754_log+0x424>
  805ed0:	000d883a 	mov	r6,zero
  805ed4:	000f883a 	mov	r7,zero
  805ed8:	003e4306 	br	8057e8 <__ieee754_log+0x70>
  805edc:	d9000217 	ldw	r4,8(sp)
  805ee0:	d9400f17 	ldw	r5,60(sp)
  805ee4:	00bfb834 	movhi	r2,65248
  805ee8:	00cff9b4 	movhi	r3,16358
  805eec:	18cb9084 	addi	r3,r3,11842
  805ef0:	180f883a 	mov	r7,r3
  805ef4:	100d883a 	mov	r6,r2
  805ef8:	080bbf80 	call	80bbf8 <__muldf3>
  805efc:	d9000817 	ldw	r4,32(sp)
  805f00:	d9400b17 	ldw	r5,44(sp)
  805f04:	800d883a 	mov	r6,r16
  805f08:	880f883a 	mov	r7,r17
  805f0c:	1025883a 	mov	r18,r2
  805f10:	1827883a 	mov	r19,r3
  805f14:	080bb040 	call	80bb04 <__subdf3>
  805f18:	d9000617 	ldw	r4,24(sp)
  805f1c:	d9400d17 	ldw	r5,52(sp)
  805f20:	180f883a 	mov	r7,r3
  805f24:	100d883a 	mov	r6,r2
  805f28:	080bbf80 	call	80bbf8 <__muldf3>
  805f2c:	d9000217 	ldw	r4,8(sp)
  805f30:	d9400f17 	ldw	r5,60(sp)
  805f34:	020d5e74 	movhi	r8,13689
  805f38:	420f1d84 	addi	r8,r8,15478
  805f3c:	026f7ab4 	movhi	r9,48618
  805f40:	4a4e7bc4 	addi	r9,r9,14831
  805f44:	480f883a 	mov	r7,r9
  805f48:	400d883a 	mov	r6,r8
  805f4c:	1021883a 	mov	r16,r2
  805f50:	1823883a 	mov	r17,r3
  805f54:	080bbf80 	call	80bbf8 <__muldf3>
  805f58:	180f883a 	mov	r7,r3
  805f5c:	880b883a 	mov	r5,r17
  805f60:	8009883a 	mov	r4,r16
  805f64:	100d883a 	mov	r6,r2
  805f68:	080bb840 	call	80bb84 <__adddf3>
  805f6c:	003fbc06 	br	805e60 <__ieee754_log+0x6e8>

00805f70 <__ieee754_log10>:
  805f70:	defff904 	addi	sp,sp,-28
  805f74:	dc400115 	stw	r17,4(sp)
  805f78:	2023883a 	mov	r17,r4
  805f7c:	01000434 	movhi	r4,16
  805f80:	213fffc4 	addi	r4,r4,-1
  805f84:	dd000415 	stw	r20,16(sp)
  805f88:	dc800215 	stw	r18,8(sp)
  805f8c:	dfc00615 	stw	ra,24(sp)
  805f90:	dd400515 	stw	r21,20(sp)
  805f94:	dcc00315 	stw	r19,12(sp)
  805f98:	dc000015 	stw	r16,0(sp)
  805f9c:	2825883a 	mov	r18,r5
  805fa0:	2829883a 	mov	r20,r5
  805fa4:	2140160e 	bge	r4,r5,806000 <__ieee754_log10+0x90>
  805fa8:	009ffc34 	movhi	r2,32752
  805fac:	10bfffc4 	addi	r2,r2,-1
  805fb0:	000b883a 	mov	r5,zero
  805fb4:	15002e0e 	bge	r2,r20,806070 <__ieee754_log10+0x100>
  805fb8:	900f883a 	mov	r7,r18
  805fbc:	8809883a 	mov	r4,r17
  805fc0:	900b883a 	mov	r5,r18
  805fc4:	880d883a 	mov	r6,r17
  805fc8:	080bb840 	call	80bb84 <__adddf3>
  805fcc:	100d883a 	mov	r6,r2
  805fd0:	180f883a 	mov	r7,r3
  805fd4:	3005883a 	mov	r2,r6
  805fd8:	3807883a 	mov	r3,r7
  805fdc:	dfc00617 	ldw	ra,24(sp)
  805fe0:	dd400517 	ldw	r21,20(sp)
  805fe4:	dd000417 	ldw	r20,16(sp)
  805fe8:	dcc00317 	ldw	r19,12(sp)
  805fec:	dc800217 	ldw	r18,8(sp)
  805ff0:	dc400117 	ldw	r17,4(sp)
  805ff4:	dc000017 	ldw	r16,0(sp)
  805ff8:	dec00704 	addi	sp,sp,28
  805ffc:	f800283a 	ret
  806000:	00a00034 	movhi	r2,32768
  806004:	10bfffc4 	addi	r2,r2,-1
  806008:	2884703a 	and	r2,r5,r2
  80600c:	8884b03a 	or	r2,r17,r2
  806010:	1000091e 	bne	r2,zero,806038 <__ieee754_log10+0xc8>
  806014:	00f0d434 	movhi	r3,50000
  806018:	000d883a 	mov	r6,zero
  80601c:	000f883a 	mov	r7,zero
  806020:	180b883a 	mov	r5,r3
  806024:	1009883a 	mov	r4,r2
  806028:	080bfbc0 	call	80bfbc <__divdf3>
  80602c:	100d883a 	mov	r6,r2
  806030:	180f883a 	mov	r7,r3
  806034:	003fe706 	br	805fd4 <__ieee754_log10+0x64>
  806038:	28004a16 	blt	r5,zero,806164 <__ieee754_log10+0x1f4>
  80603c:	0005883a 	mov	r2,zero
  806040:	00d0d434 	movhi	r3,17232
  806044:	8809883a 	mov	r4,r17
  806048:	180f883a 	mov	r7,r3
  80604c:	100d883a 	mov	r6,r2
  806050:	080bbf80 	call	80bbf8 <__muldf3>
  806054:	1023883a 	mov	r17,r2
  806058:	1829883a 	mov	r20,r3
  80605c:	009ffc34 	movhi	r2,32752
  806060:	10bfffc4 	addi	r2,r2,-1
  806064:	1825883a 	mov	r18,r3
  806068:	017ff284 	movi	r5,-54
  80606c:	153fd216 	blt	r2,r20,805fb8 <__ieee754_log10+0x48>
  806070:	a009d53a 	srai	r4,r20,20
  806074:	2909883a 	add	r4,r5,r4
  806078:	213f0044 	addi	r4,r4,-1023
  80607c:	2020d7fa 	srli	r16,r4,31
  806080:	2409883a 	add	r4,r4,r16
  806084:	080c5440 	call	80c544 <__floatsidf>
  806088:	0180ffc4 	movi	r6,1023
  80608c:	340dc83a 	sub	r6,r6,r16
  806090:	300c953a 	slli	r6,r6,20
  806094:	02000434 	movhi	r8,16
  806098:	423fffc4 	addi	r8,r8,-1
  80609c:	a210703a 	and	r8,r20,r8
  8060a0:	4190b03a 	or	r8,r8,r6
  8060a4:	8809883a 	mov	r4,r17
  8060a8:	400b883a 	mov	r5,r8
  8060ac:	1025883a 	mov	r18,r2
  8060b0:	1827883a 	mov	r19,r3
  8060b4:	08057780 	call	805778 <__ieee754_log>
  8060b8:	02047c74 	movhi	r8,4593
  8060bc:	420acd84 	addi	r8,r8,11062
  8060c0:	024f56b4 	movhi	r9,15706
  8060c4:	4a7fbcc4 	addi	r9,r9,-269
  8060c8:	480f883a 	mov	r7,r9
  8060cc:	400d883a 	mov	r6,r8
  8060d0:	9009883a 	mov	r4,r18
  8060d4:	980b883a 	mov	r5,r19
  8060d8:	1021883a 	mov	r16,r2
  8060dc:	1823883a 	mov	r17,r3
  8060e0:	080bbf80 	call	80bbf8 <__muldf3>
  8060e4:	020549f4 	movhi	r8,5415
  8060e8:	42394384 	addi	r8,r8,-6898
  8060ec:	024ff734 	movhi	r9,16348
  8060f0:	4a72dec4 	addi	r9,r9,-13445
  8060f4:	480f883a 	mov	r7,r9
  8060f8:	400d883a 	mov	r6,r8
  8060fc:	880b883a 	mov	r5,r17
  806100:	8009883a 	mov	r4,r16
  806104:	1823883a 	mov	r17,r3
  806108:	1021883a 	mov	r16,r2
  80610c:	080bbf80 	call	80bbf8 <__muldf3>
  806110:	180f883a 	mov	r7,r3
  806114:	880b883a 	mov	r5,r17
  806118:	8009883a 	mov	r4,r16
  80611c:	100d883a 	mov	r6,r2
  806120:	080bb840 	call	80bb84 <__adddf3>
  806124:	021427f4 	movhi	r8,20639
  806128:	42180004 	addi	r8,r8,24576
  80612c:	024ff4f4 	movhi	r9,16339
  806130:	4a5104c4 	addi	r9,r9,17427
  806134:	9009883a 	mov	r4,r18
  806138:	980b883a 	mov	r5,r19
  80613c:	480f883a 	mov	r7,r9
  806140:	400d883a 	mov	r6,r8
  806144:	1021883a 	mov	r16,r2
  806148:	1823883a 	mov	r17,r3
  80614c:	080bbf80 	call	80bbf8 <__muldf3>
  806150:	180f883a 	mov	r7,r3
  806154:	880b883a 	mov	r5,r17
  806158:	8009883a 	mov	r4,r16
  80615c:	100d883a 	mov	r6,r2
  806160:	003f9906 	br	805fc8 <__ieee754_log10+0x58>
  806164:	280f883a 	mov	r7,r5
  806168:	8809883a 	mov	r4,r17
  80616c:	880d883a 	mov	r6,r17
  806170:	080bb040 	call	80bb04 <__subdf3>
  806174:	180b883a 	mov	r5,r3
  806178:	000d883a 	mov	r6,zero
  80617c:	000f883a 	mov	r7,zero
  806180:	1009883a 	mov	r4,r2
  806184:	003fa806 	br	806028 <__ieee754_log10+0xb8>

00806188 <__ieee754_pow>:
  806188:	deffbb04 	addi	sp,sp,-276
  80618c:	3005883a 	mov	r2,r6
  806190:	dd404015 	stw	r21,256(sp)
  806194:	dd003f15 	stw	r20,252(sp)
  806198:	d9802815 	stw	r6,160(sp)
  80619c:	2029883a 	mov	r20,r4
  8061a0:	282b883a 	mov	r21,r5
  8061a4:	3009883a 	mov	r4,r6
  8061a8:	380b883a 	mov	r5,r7
  8061ac:	01a00034 	movhi	r6,32768
  8061b0:	31bfffc4 	addi	r6,r6,-1
  8061b4:	dc003b15 	stw	r16,236(sp)
  8061b8:	29a0703a 	and	r16,r5,r6
  8061bc:	1404b03a 	or	r2,r2,r16
  8061c0:	dd804115 	stw	r22,260(sp)
  8061c4:	dc403c15 	stw	r17,240(sp)
  8061c8:	d9c02915 	stw	r7,164(sp)
  8061cc:	382d883a 	mov	r22,r7
  8061d0:	dfc04415 	stw	ra,272(sp)
  8061d4:	200f883a 	mov	r7,r4
  8061d8:	df004315 	stw	fp,268(sp)
  8061dc:	ddc04215 	stw	r23,264(sp)
  8061e0:	dcc03e15 	stw	r19,248(sp)
  8061e4:	dc803d15 	stw	r18,244(sp)
  8061e8:	a023883a 	mov	r17,r20
  8061ec:	2809883a 	mov	r4,r5
  8061f0:	10000826 	beq	r2,zero,806214 <__ieee754_pow+0x8c>
  8061f4:	a9a4703a 	and	r18,r21,r6
  8061f8:	009ffc34 	movhi	r2,32752
  8061fc:	a827883a 	mov	r19,r21
  806200:	1480180e 	bge	r2,r18,806264 <__ieee754_pow+0xdc>
  806204:	00b00434 	movhi	r2,49168
  806208:	9085883a 	add	r2,r18,r2
  80620c:	8884b03a 	or	r2,r17,r2
  806210:	1000321e 	bne	r2,zero,8062dc <__ieee754_pow+0x154>
  806214:	0009883a 	mov	r4,zero
  806218:	014ffc34 	movhi	r5,16368
  80621c:	d9002815 	stw	r4,160(sp)
  806220:	d9402915 	stw	r5,164(sp)
  806224:	d9002817 	ldw	r4,160(sp)
  806228:	d9402917 	ldw	r5,164(sp)
  80622c:	2005883a 	mov	r2,r4
  806230:	2807883a 	mov	r3,r5
  806234:	dfc04417 	ldw	ra,272(sp)
  806238:	df004317 	ldw	fp,268(sp)
  80623c:	ddc04217 	ldw	r23,264(sp)
  806240:	dd804117 	ldw	r22,260(sp)
  806244:	dd404017 	ldw	r21,256(sp)
  806248:	dd003f17 	ldw	r20,252(sp)
  80624c:	dcc03e17 	ldw	r19,248(sp)
  806250:	dc803d17 	ldw	r18,244(sp)
  806254:	dc403c17 	ldw	r17,240(sp)
  806258:	dc003b17 	ldw	r16,236(sp)
  80625c:	dec04504 	addi	sp,sp,276
  806260:	f800283a 	ret
  806264:	90802b26 	beq	r18,r2,806314 <__ieee754_pow+0x18c>
  806268:	143fe616 	blt	r2,r16,806204 <__ieee754_pow+0x7c>
  80626c:	80806126 	beq	r16,r2,8063f4 <__ieee754_pow+0x26c>
  806270:	982e403a 	cmpge	r23,r19,zero
  806274:	b8004e26 	beq	r23,zero,8063b0 <__ieee754_pow+0x228>
  806278:	0039883a 	mov	fp,zero
  80627c:	3800281e 	bne	r7,zero,806320 <__ieee754_pow+0x198>
  806280:	009ffc34 	movhi	r2,32752
  806284:	80804f26 	beq	r16,r2,8063c4 <__ieee754_pow+0x23c>
  806288:	008ffc34 	movhi	r2,16368
  80628c:	80808226 	beq	r16,r2,806498 <__ieee754_pow+0x310>
  806290:	00900034 	movhi	r2,16384
  806294:	20828426 	beq	r4,r2,806ca8 <__ieee754_pow+0xb20>
  806298:	008ff834 	movhi	r2,16352
  80629c:	2080201e 	bne	r4,r2,806320 <__ieee754_pow+0x198>
  8062a0:	98001f16 	blt	r19,zero,806320 <__ieee754_pow+0x198>
  8062a4:	a80b883a 	mov	r5,r21
  8062a8:	a009883a 	mov	r4,r20
  8062ac:	dfc04417 	ldw	ra,272(sp)
  8062b0:	df004317 	ldw	fp,268(sp)
  8062b4:	ddc04217 	ldw	r23,264(sp)
  8062b8:	dd804117 	ldw	r22,260(sp)
  8062bc:	dd404017 	ldw	r21,256(sp)
  8062c0:	dd003f17 	ldw	r20,252(sp)
  8062c4:	dcc03e17 	ldw	r19,248(sp)
  8062c8:	dc803d17 	ldw	r18,244(sp)
  8062cc:	dc403c17 	ldw	r17,240(sp)
  8062d0:	dc003b17 	ldw	r16,236(sp)
  8062d4:	dec04504 	addi	sp,sp,276
  8062d8:	0807fa81 	jmpi	807fa8 <__ieee754_sqrt>
  8062dc:	010020b4 	movhi	r4,130
  8062e0:	21070104 	addi	r4,r4,7172
  8062e4:	dfc04417 	ldw	ra,272(sp)
  8062e8:	df004317 	ldw	fp,268(sp)
  8062ec:	ddc04217 	ldw	r23,264(sp)
  8062f0:	dd804117 	ldw	r22,260(sp)
  8062f4:	dd404017 	ldw	r21,256(sp)
  8062f8:	dd003f17 	ldw	r20,252(sp)
  8062fc:	dcc03e17 	ldw	r19,248(sp)
  806300:	dc803d17 	ldw	r18,244(sp)
  806304:	dc403c17 	ldw	r17,240(sp)
  806308:	dc003b17 	ldw	r16,236(sp)
  80630c:	dec04504 	addi	sp,sp,276
  806310:	080ab881 	jmpi	80ab88 <nan>
  806314:	a03fbb1e 	bne	r20,zero,806204 <__ieee754_pow+0x7c>
  806318:	003fd306 	br	806268 <__ieee754_pow+0xe0>
  80631c:	0039883a 	mov	fp,zero
  806320:	a009883a 	mov	r4,r20
  806324:	a80b883a 	mov	r5,r21
  806328:	080175c0 	call	80175c <fabs>
  80632c:	1015883a 	mov	r10,r2
  806330:	1817883a 	mov	r11,r3
  806334:	88001226 	beq	r17,zero,806380 <__ieee754_pow+0x1f8>
  806338:	9804d7fa 	srli	r2,r19,31
  80633c:	10bfffc4 	addi	r2,r2,-1
  806340:	1706b03a 	or	r3,r2,fp
  806344:	d8802515 	stw	r2,148(sp)
  806348:	18002c1e 	bne	r3,zero,8063fc <__ieee754_pow+0x274>
  80634c:	a80f883a 	mov	r7,r21
  806350:	a009883a 	mov	r4,r20
  806354:	a80b883a 	mov	r5,r21
  806358:	a00d883a 	mov	r6,r20
  80635c:	080bb040 	call	80bb04 <__subdf3>
  806360:	1009883a 	mov	r4,r2
  806364:	180b883a 	mov	r5,r3
  806368:	100d883a 	mov	r6,r2
  80636c:	180f883a 	mov	r7,r3
  806370:	080bfbc0 	call	80bfbc <__divdf3>
  806374:	d8802815 	stw	r2,160(sp)
  806378:	d8c02915 	stw	r3,164(sp)
  80637c:	003fa906 	br	806224 <__ieee754_pow+0x9c>
  806380:	009ffc34 	movhi	r2,32752
  806384:	90800326 	beq	r18,r2,806394 <__ieee754_pow+0x20c>
  806388:	90000226 	beq	r18,zero,806394 <__ieee754_pow+0x20c>
  80638c:	008ffc34 	movhi	r2,16368
  806390:	90bfe91e 	bne	r18,r2,806338 <__ieee754_pow+0x1b0>
  806394:	b0026316 	blt	r22,zero,806d24 <__ieee754_pow+0xb9c>
  806398:	5011883a 	mov	r8,r10
  80639c:	5813883a 	mov	r9,r11
  8063a0:	b8023126 	beq	r23,zero,806c68 <__ieee754_pow+0xae0>
  8063a4:	da002815 	stw	r8,160(sp)
  8063a8:	da402915 	stw	r9,164(sp)
  8063ac:	003f9d06 	br	806224 <__ieee754_pow+0x9c>
  8063b0:	0090d034 	movhi	r2,17216
  8063b4:	10bfffc4 	addi	r2,r2,-1
  8063b8:	1400270e 	bge	r2,r16,806458 <__ieee754_pow+0x2d0>
  8063bc:	07000084 	movi	fp,2
  8063c0:	003fae06 	br	80627c <__ieee754_pow+0xf4>
  8063c4:	00b00434 	movhi	r2,49168
  8063c8:	9085883a 	add	r2,r18,r2
  8063cc:	8884b03a 	or	r2,r17,r2
  8063d0:	103f9026 	beq	r2,zero,806214 <__ieee754_pow+0x8c>
  8063d4:	008ffc34 	movhi	r2,16368
  8063d8:	10bfffc4 	addi	r2,r2,-1
  8063dc:	1482d00e 	bge	r2,r18,806f20 <__ieee754_pow+0xd98>
  8063e0:	b03f900e 	bge	r22,zero,806224 <__ieee754_pow+0x9c>
  8063e4:	0005883a 	mov	r2,zero
  8063e8:	d8802815 	stw	r2,160(sp)
  8063ec:	d8802915 	stw	r2,164(sp)
  8063f0:	003f8c06 	br	806224 <__ieee754_pow+0x9c>
  8063f4:	383f9e26 	beq	r7,zero,806270 <__ieee754_pow+0xe8>
  8063f8:	003f8206 	br	806204 <__ieee754_pow+0x7c>
  8063fc:	00907834 	movhi	r2,16864
  806400:	1400290e 	bge	r2,r16,8064a8 <__ieee754_pow+0x320>
  806404:	0090fc34 	movhi	r2,17392
  806408:	1402500e 	bge	r2,r16,806d4c <__ieee754_pow+0xbc4>
  80640c:	008ffc34 	movhi	r2,16368
  806410:	10bfffc4 	addi	r2,r2,-1
  806414:	14800b0e 	bge	r2,r18,806444 <__ieee754_pow+0x2bc>
  806418:	05800b0e 	bge	zero,r22,806448 <__ieee754_pow+0x2c0>
  80641c:	00a20034 	movhi	r2,34816
  806420:	109d6704 	addi	r2,r2,30108
  806424:	00df8e34 	movhi	r3,32312
  806428:	18f90f04 	addi	r3,r3,-7108
  80642c:	100d883a 	mov	r6,r2
  806430:	180f883a 	mov	r7,r3
  806434:	1009883a 	mov	r4,r2
  806438:	180b883a 	mov	r5,r3
  80643c:	080bbf80 	call	80bbf8 <__muldf3>
  806440:	003fcc06 	br	806374 <__ieee754_pow+0x1ec>
  806444:	b03ff516 	blt	r22,zero,80641c <__ieee754_pow+0x294>
  806448:	0007883a 	mov	r3,zero
  80644c:	d8c02815 	stw	r3,160(sp)
  806450:	d8c02915 	stw	r3,164(sp)
  806454:	003f7306 	br	806224 <__ieee754_pow+0x9c>
  806458:	008ffc34 	movhi	r2,16368
  80645c:	10bfffc4 	addi	r2,r2,-1
  806460:	143f850e 	bge	r2,r16,806278 <__ieee754_pow+0xf0>
  806464:	8005d53a 	srai	r2,r16,20
  806468:	01400504 	movi	r5,20
  80646c:	10ff0044 	addi	r3,r2,-1023
  806470:	28c3e10e 	bge	r5,r3,8073f8 <__ieee754_pow+0x1270>
  806474:	00800d04 	movi	r2,52
  806478:	10c5c83a 	sub	r2,r2,r3
  80647c:	3886d83a 	srl	r3,r7,r2
  806480:	1884983a 	sll	r2,r3,r2
  806484:	38bf7c1e 	bne	r7,r2,806278 <__ieee754_pow+0xf0>
  806488:	18c0004c 	andi	r3,r3,1
  80648c:	00800084 	movi	r2,2
  806490:	10f9c83a 	sub	fp,r2,r3
  806494:	003f7906 	br	80627c <__ieee754_pow+0xf4>
  806498:	b0038516 	blt	r22,zero,8072b0 <__ieee754_pow+0x1128>
  80649c:	dd002815 	stw	r20,160(sp)
  8064a0:	dd402915 	stw	r21,164(sp)
  8064a4:	003f5f06 	br	806224 <__ieee754_pow+0x9c>
  8064a8:	00800434 	movhi	r2,16
  8064ac:	10bfffc4 	addi	r2,r2,-1
  8064b0:	1482900e 	bge	r2,r18,806ef4 <__ieee754_pow+0xd6c>
  8064b4:	000b883a 	mov	r5,zero
  8064b8:	9005d53a 	srai	r2,r18,20
  8064bc:	00c00434 	movhi	r3,16
  8064c0:	18ffffc4 	addi	r3,r3,-1
  8064c4:	90c8703a 	and	r4,r18,r3
  8064c8:	2887883a 	add	r3,r5,r2
  8064cc:	18bf0044 	addi	r2,r3,-1023
  8064d0:	d8800015 	stw	r2,0(sp)
  8064d4:	00800134 	movhi	r2,4
  8064d8:	10a62384 	addi	r2,r2,-26482
  8064dc:	250ffc34 	orhi	r20,r4,16368
  8064e0:	1101ee0e 	bge	r2,r4,806c9c <__ieee754_pow+0xb14>
  8064e4:	00800334 	movhi	r2,12
  8064e8:	10ad9e44 	addi	r2,r2,-18823
  8064ec:	1101e716 	blt	r2,r4,806c8c <__ieee754_pow+0xb04>
  8064f0:	01000044 	movi	r4,1
  8064f4:	04000334 	movhi	r16,12
  8064f8:	200890fa 	slli	r4,r4,3
  8064fc:	da800115 	stw	r10,4(sp)
  806500:	dd000215 	stw	r20,8(sp)
  806504:	d9002c15 	stw	r4,176(sp)
  806508:	d9402c17 	ldw	r5,176(sp)
  80650c:	010020b4 	movhi	r4,130
  806510:	21062104 	addi	r4,r4,6276
  806514:	a02bd07a 	srai	r21,r20,1
  806518:	2909883a 	add	r4,r5,r4
  80651c:	25800017 	ldw	r22,0(r4)
  806520:	25c00117 	ldw	r23,4(r4)
  806524:	a00b883a 	mov	r5,r20
  806528:	5009883a 	mov	r4,r10
  80652c:	b00d883a 	mov	r6,r22
  806530:	b80f883a 	mov	r7,r23
  806534:	080bb040 	call	80bb04 <__subdf3>
  806538:	d9000117 	ldw	r4,4(sp)
  80653c:	a00b883a 	mov	r5,r20
  806540:	b00d883a 	mov	r6,r22
  806544:	b80f883a 	mov	r7,r23
  806548:	1025883a 	mov	r18,r2
  80654c:	1827883a 	mov	r19,r3
  806550:	080bb840 	call	80bb84 <__adddf3>
  806554:	0011883a 	mov	r8,zero
  806558:	024ffc34 	movhi	r9,16368
  80655c:	480b883a 	mov	r5,r9
  806560:	4009883a 	mov	r4,r8
  806564:	180f883a 	mov	r7,r3
  806568:	100d883a 	mov	r6,r2
  80656c:	080bfbc0 	call	80bfbc <__divdf3>
  806570:	d8c02e15 	stw	r3,184(sp)
  806574:	d8800f15 	stw	r2,60(sp)
  806578:	d8802d15 	stw	r2,180(sp)
  80657c:	d8802e17 	ldw	r2,184(sp)
  806580:	d9800f17 	ldw	r6,60(sp)
  806584:	9009883a 	mov	r4,r18
  806588:	980b883a 	mov	r5,r19
  80658c:	100f883a 	mov	r7,r2
  806590:	dc800b15 	stw	r18,44(sp)
  806594:	dcc00c15 	stw	r19,48(sp)
  806598:	d8801015 	stw	r2,64(sp)
  80659c:	080bbf80 	call	80bbf8 <__muldf3>
  8065a0:	d8c03015 	stw	r3,192(sp)
  8065a4:	d9003017 	ldw	r4,192(sp)
  8065a8:	d8802f15 	stw	r2,188(sp)
  8065ac:	d8800315 	stw	r2,12(sp)
  8065b0:	ad480034 	orhi	r21,r21,8192
  8065b4:	0005883a 	mov	r2,zero
  8065b8:	ac2b883a 	add	r21,r21,r16
  8065bc:	000b883a 	mov	r5,zero
  8065c0:	1021883a 	mov	r16,r2
  8065c4:	2005883a 	mov	r2,r4
  8065c8:	800d883a 	mov	r6,r16
  8065cc:	a80f883a 	mov	r7,r21
  8065d0:	d9000415 	stw	r4,16(sp)
  8065d4:	d9002715 	stw	r4,156(sp)
  8065d8:	d9402615 	stw	r5,152(sp)
  8065dc:	d9401615 	stw	r5,88(sp)
  8065e0:	d9001715 	stw	r4,92(sp)
  8065e4:	100b883a 	mov	r5,r2
  8065e8:	0009883a 	mov	r4,zero
  8065ec:	080bbf80 	call	80bbf8 <__muldf3>
  8065f0:	d9000b17 	ldw	r4,44(sp)
  8065f4:	980b883a 	mov	r5,r19
  8065f8:	180f883a 	mov	r7,r3
  8065fc:	100d883a 	mov	r6,r2
  806600:	080bb040 	call	80bb04 <__subdf3>
  806604:	8009883a 	mov	r4,r16
  806608:	a80b883a 	mov	r5,r21
  80660c:	b80f883a 	mov	r7,r23
  806610:	b00d883a 	mov	r6,r22
  806614:	1021883a 	mov	r16,r2
  806618:	1823883a 	mov	r17,r3
  80661c:	080bb040 	call	80bb04 <__subdf3>
  806620:	d9000117 	ldw	r4,4(sp)
  806624:	a00b883a 	mov	r5,r20
  806628:	180f883a 	mov	r7,r3
  80662c:	100d883a 	mov	r6,r2
  806630:	080bb040 	call	80bb04 <__subdf3>
  806634:	d9001617 	ldw	r4,88(sp)
  806638:	d9402717 	ldw	r5,156(sp)
  80663c:	180f883a 	mov	r7,r3
  806640:	100d883a 	mov	r6,r2
  806644:	080bbf80 	call	80bbf8 <__muldf3>
  806648:	180f883a 	mov	r7,r3
  80664c:	880b883a 	mov	r5,r17
  806650:	8009883a 	mov	r4,r16
  806654:	100d883a 	mov	r6,r2
  806658:	080bb040 	call	80bb04 <__subdf3>
  80665c:	d9000f17 	ldw	r4,60(sp)
  806660:	d9402e17 	ldw	r5,184(sp)
  806664:	180f883a 	mov	r7,r3
  806668:	100d883a 	mov	r6,r2
  80666c:	080bbf80 	call	80bbf8 <__muldf3>
  806670:	d9000317 	ldw	r4,12(sp)
  806674:	d9403017 	ldw	r5,192(sp)
  806678:	d8803115 	stw	r2,196(sp)
  80667c:	200d883a 	mov	r6,r4
  806680:	280f883a 	mov	r7,r5
  806684:	d8c03215 	stw	r3,200(sp)
  806688:	080bbf80 	call	80bbf8 <__muldf3>
  80668c:	1009883a 	mov	r4,r2
  806690:	180b883a 	mov	r5,r3
  806694:	100d883a 	mov	r6,r2
  806698:	180f883a 	mov	r7,r3
  80669c:	1021883a 	mov	r16,r2
  8066a0:	1823883a 	mov	r17,r3
  8066a4:	080bbf80 	call	80bbf8 <__muldf3>
  8066a8:	02129174 	movhi	r8,19013
  8066ac:	4213bbc4 	addi	r8,r8,20207
  8066b0:	024ff2b4 	movhi	r9,16330
  8066b4:	4a5f8a04 	addi	r9,r9,32296
  8066b8:	480f883a 	mov	r7,r9
  8066bc:	8009883a 	mov	r4,r16
  8066c0:	880b883a 	mov	r5,r17
  8066c4:	400d883a 	mov	r6,r8
  8066c8:	1029883a 	mov	r20,r2
  8066cc:	182b883a 	mov	r21,r3
  8066d0:	080bbf80 	call	80bbf8 <__muldf3>
  8066d4:	0224f2b4 	movhi	r8,37834
  8066d8:	4236d944 	addi	r8,r8,-9371
  8066dc:	024ff3b4 	movhi	r9,16334
  8066e0:	4a619284 	addi	r9,r9,-31158
  8066e4:	480f883a 	mov	r7,r9
  8066e8:	400d883a 	mov	r6,r8
  8066ec:	180b883a 	mov	r5,r3
  8066f0:	1009883a 	mov	r4,r2
  8066f4:	080bb840 	call	80bb84 <__adddf3>
  8066f8:	180f883a 	mov	r7,r3
  8066fc:	8009883a 	mov	r4,r16
  806700:	880b883a 	mov	r5,r17
  806704:	100d883a 	mov	r6,r2
  806708:	080bbf80 	call	80bbf8 <__muldf3>
  80670c:	022a4774 	movhi	r8,43293
  806710:	42104044 	addi	r8,r8,16641
  806714:	024ff474 	movhi	r9,16337
  806718:	4a5d1804 	addi	r9,r9,29792
  80671c:	480f883a 	mov	r7,r9
  806720:	400d883a 	mov	r6,r8
  806724:	180b883a 	mov	r5,r3
  806728:	1009883a 	mov	r4,r2
  80672c:	080bb840 	call	80bb84 <__adddf3>
  806730:	180f883a 	mov	r7,r3
  806734:	8009883a 	mov	r4,r16
  806738:	880b883a 	mov	r5,r17
  80673c:	100d883a 	mov	r6,r2
  806740:	080bbf80 	call	80bbf8 <__muldf3>
  806744:	021463f4 	movhi	r8,20879
  806748:	42099344 	addi	r8,r8,9805
  80674c:	024ff574 	movhi	r9,16341
  806750:	4a555544 	addi	r9,r9,21845
  806754:	480f883a 	mov	r7,r9
  806758:	400d883a 	mov	r6,r8
  80675c:	180b883a 	mov	r5,r3
  806760:	1009883a 	mov	r4,r2
  806764:	080bb840 	call	80bb84 <__adddf3>
  806768:	180f883a 	mov	r7,r3
  80676c:	8009883a 	mov	r4,r16
  806770:	880b883a 	mov	r5,r17
  806774:	100d883a 	mov	r6,r2
  806778:	080bbf80 	call	80bbf8 <__muldf3>
  80677c:	0236dc34 	movhi	r8,56176
  806780:	422affc4 	addi	r8,r8,-21505
  806784:	024ff6f4 	movhi	r9,16347
  806788:	4a5b6d84 	addi	r9,r9,28086
  80678c:	480f883a 	mov	r7,r9
  806790:	400d883a 	mov	r6,r8
  806794:	180b883a 	mov	r5,r3
  806798:	1009883a 	mov	r4,r2
  80679c:	080bb840 	call	80bb84 <__adddf3>
  8067a0:	180f883a 	mov	r7,r3
  8067a4:	8009883a 	mov	r4,r16
  8067a8:	880b883a 	mov	r5,r17
  8067ac:	100d883a 	mov	r6,r2
  8067b0:	080bbf80 	call	80bbf8 <__muldf3>
  8067b4:	020cccf4 	movhi	r8,13107
  8067b8:	420cc0c4 	addi	r8,r8,13059
  8067bc:	024ff8f4 	movhi	r9,16355
  8067c0:	4a4cccc4 	addi	r9,r9,13107
  8067c4:	480f883a 	mov	r7,r9
  8067c8:	400d883a 	mov	r6,r8
  8067cc:	180b883a 	mov	r5,r3
  8067d0:	1009883a 	mov	r4,r2
  8067d4:	080bb840 	call	80bb84 <__adddf3>
  8067d8:	180f883a 	mov	r7,r3
  8067dc:	a80b883a 	mov	r5,r21
  8067e0:	a009883a 	mov	r4,r20
  8067e4:	100d883a 	mov	r6,r2
  8067e8:	080bbf80 	call	80bbf8 <__muldf3>
  8067ec:	d9000317 	ldw	r4,12(sp)
  8067f0:	d9403017 	ldw	r5,192(sp)
  8067f4:	d9801617 	ldw	r6,88(sp)
  8067f8:	d9c02717 	ldw	r7,156(sp)
  8067fc:	1021883a 	mov	r16,r2
  806800:	1823883a 	mov	r17,r3
  806804:	080bb840 	call	80bb84 <__adddf3>
  806808:	d9003117 	ldw	r4,196(sp)
  80680c:	d9403217 	ldw	r5,200(sp)
  806810:	180f883a 	mov	r7,r3
  806814:	100d883a 	mov	r6,r2
  806818:	d9001415 	stw	r4,80(sp)
  80681c:	d9401515 	stw	r5,84(sp)
  806820:	080bbf80 	call	80bbf8 <__muldf3>
  806824:	180f883a 	mov	r7,r3
  806828:	8009883a 	mov	r4,r16
  80682c:	880b883a 	mov	r5,r17
  806830:	100d883a 	mov	r6,r2
  806834:	080bb840 	call	80bb84 <__adddf3>
  806838:	d9001617 	ldw	r4,88(sp)
  80683c:	d9402717 	ldw	r5,156(sp)
  806840:	d8803315 	stw	r2,204(sp)
  806844:	200d883a 	mov	r6,r4
  806848:	280f883a 	mov	r7,r5
  80684c:	d8c03415 	stw	r3,208(sp)
  806850:	080bbf80 	call	80bbf8 <__muldf3>
  806854:	182f883a 	mov	r23,r3
  806858:	05500234 	movhi	r21,16392
  80685c:	0029883a 	mov	r20,zero
  806860:	b80b883a 	mov	r5,r23
  806864:	a00d883a 	mov	r6,r20
  806868:	a80f883a 	mov	r7,r21
  80686c:	1009883a 	mov	r4,r2
  806870:	d8800715 	stw	r2,28(sp)
  806874:	d8c00815 	stw	r3,32(sp)
  806878:	080bb840 	call	80bb84 <__adddf3>
  80687c:	d9003317 	ldw	r4,204(sp)
  806880:	d9403417 	ldw	r5,208(sp)
  806884:	180f883a 	mov	r7,r3
  806888:	100d883a 	mov	r6,r2
  80688c:	d9000515 	stw	r4,20(sp)
  806890:	d9400615 	stw	r5,24(sp)
  806894:	080bb840 	call	80bb84 <__adddf3>
  806898:	d9001617 	ldw	r4,88(sp)
  80689c:	d9402717 	ldw	r5,156(sp)
  8068a0:	0025883a 	mov	r18,zero
  8068a4:	900d883a 	mov	r6,r18
  8068a8:	180f883a 	mov	r7,r3
  8068ac:	1823883a 	mov	r17,r3
  8068b0:	080bbf80 	call	80bbf8 <__muldf3>
  8068b4:	d9001417 	ldw	r4,80(sp)
  8068b8:	d9403217 	ldw	r5,200(sp)
  8068bc:	880f883a 	mov	r7,r17
  8068c0:	900d883a 	mov	r6,r18
  8068c4:	d8803515 	stw	r2,212(sp)
  8068c8:	d8c03615 	stw	r3,216(sp)
  8068cc:	080bbf80 	call	80bbf8 <__muldf3>
  8068d0:	a80f883a 	mov	r7,r21
  8068d4:	880b883a 	mov	r5,r17
  8068d8:	000d883a 	mov	r6,zero
  8068dc:	9009883a 	mov	r4,r18
  8068e0:	1021883a 	mov	r16,r2
  8068e4:	1823883a 	mov	r17,r3
  8068e8:	080bb040 	call	80bb04 <__subdf3>
  8068ec:	d9800717 	ldw	r6,28(sp)
  8068f0:	b80f883a 	mov	r7,r23
  8068f4:	180b883a 	mov	r5,r3
  8068f8:	1009883a 	mov	r4,r2
  8068fc:	080bb040 	call	80bb04 <__subdf3>
  806900:	d9000517 	ldw	r4,20(sp)
  806904:	d9403417 	ldw	r5,208(sp)
  806908:	180f883a 	mov	r7,r3
  80690c:	100d883a 	mov	r6,r2
  806910:	080bb040 	call	80bb04 <__subdf3>
  806914:	d9000317 	ldw	r4,12(sp)
  806918:	d9403017 	ldw	r5,192(sp)
  80691c:	180f883a 	mov	r7,r3
  806920:	100d883a 	mov	r6,r2
  806924:	080bbf80 	call	80bbf8 <__muldf3>
  806928:	180f883a 	mov	r7,r3
  80692c:	880b883a 	mov	r5,r17
  806930:	8009883a 	mov	r4,r16
  806934:	100d883a 	mov	r6,r2
  806938:	080bb840 	call	80bb84 <__adddf3>
  80693c:	102d883a 	mov	r22,r2
  806940:	d9003617 	ldw	r4,216(sp)
  806944:	d8803517 	ldw	r2,212(sp)
  806948:	d9403617 	ldw	r5,216(sp)
  80694c:	182f883a 	mov	r23,r3
  806950:	b00d883a 	mov	r6,r22
  806954:	b80f883a 	mov	r7,r23
  806958:	d9000a15 	stw	r4,40(sp)
  80695c:	1009883a 	mov	r4,r2
  806960:	054ffbf4 	movhi	r21,16367
  806964:	ad71c244 	addi	r21,r21,-14583
  806968:	dd800d15 	stw	r22,52(sp)
  80696c:	ddc00e15 	stw	r23,56(sp)
  806970:	05380034 	movhi	r20,57344
  806974:	d8800915 	stw	r2,36(sp)
  806978:	080bb840 	call	80bb84 <__adddf3>
  80697c:	180b883a 	mov	r5,r3
  806980:	a00d883a 	mov	r6,r20
  806984:	a80f883a 	mov	r7,r21
  806988:	9009883a 	mov	r4,r18
  80698c:	1823883a 	mov	r17,r3
  806990:	080bbf80 	call	80bbf8 <__muldf3>
  806994:	020516f4 	movhi	r8,5211
  806998:	42007d44 	addi	r8,r8,501
  80699c:	026f8fb4 	movhi	r9,48702
  8069a0:	4a4bf804 	addi	r9,r9,12256
  8069a4:	480f883a 	mov	r7,r9
  8069a8:	400d883a 	mov	r6,r8
  8069ac:	880b883a 	mov	r5,r17
  8069b0:	9009883a 	mov	r4,r18
  8069b4:	d8803715 	stw	r2,220(sp)
  8069b8:	d8c03815 	stw	r3,224(sp)
  8069bc:	080bbf80 	call	80bbf8 <__muldf3>
  8069c0:	d9800917 	ldw	r6,36(sp)
  8069c4:	d9c03617 	ldw	r7,216(sp)
  8069c8:	880b883a 	mov	r5,r17
  8069cc:	9009883a 	mov	r4,r18
  8069d0:	1021883a 	mov	r16,r2
  8069d4:	1823883a 	mov	r17,r3
  8069d8:	080bb040 	call	80bb04 <__subdf3>
  8069dc:	d9000d17 	ldw	r4,52(sp)
  8069e0:	b80b883a 	mov	r5,r23
  8069e4:	180f883a 	mov	r7,r3
  8069e8:	100d883a 	mov	r6,r2
  8069ec:	080bb040 	call	80bb04 <__subdf3>
  8069f0:	180b883a 	mov	r5,r3
  8069f4:	a80f883a 	mov	r7,r21
  8069f8:	01b70eb4 	movhi	r6,56378
  8069fc:	3180ff44 	addi	r6,r6,1021
  806a00:	1009883a 	mov	r4,r2
  806a04:	080bbf80 	call	80bbf8 <__muldf3>
  806a08:	180f883a 	mov	r7,r3
  806a0c:	880b883a 	mov	r5,r17
  806a10:	8009883a 	mov	r4,r16
  806a14:	100d883a 	mov	r6,r2
  806a18:	080bb840 	call	80bb84 <__adddf3>
  806a1c:	d9402c17 	ldw	r5,176(sp)
  806a20:	010020b4 	movhi	r4,130
  806a24:	21062504 	addi	r4,r4,6292
  806a28:	2909883a 	add	r4,r5,r4
  806a2c:	22400117 	ldw	r9,4(r4)
  806a30:	22000017 	ldw	r8,0(r4)
  806a34:	180b883a 	mov	r5,r3
  806a38:	480f883a 	mov	r7,r9
  806a3c:	400d883a 	mov	r6,r8
  806a40:	1009883a 	mov	r4,r2
  806a44:	080bb840 	call	80bb84 <__adddf3>
  806a48:	d9000017 	ldw	r4,0(sp)
  806a4c:	182f883a 	mov	r23,r3
  806a50:	102d883a 	mov	r22,r2
  806a54:	080c5440 	call	80c544 <__floatsidf>
  806a58:	d9402c17 	ldw	r5,176(sp)
  806a5c:	010020b4 	movhi	r4,130
  806a60:	21062904 	addi	r4,r4,6308
  806a64:	b00d883a 	mov	r6,r22
  806a68:	2911883a 	add	r8,r5,r4
  806a6c:	d9003717 	ldw	r4,220(sp)
  806a70:	d9403817 	ldw	r5,224(sp)
  806a74:	45000017 	ldw	r20,0(r8)
  806a78:	d9002315 	stw	r4,140(sp)
  806a7c:	d9003817 	ldw	r4,224(sp)
  806a80:	45400117 	ldw	r21,4(r8)
  806a84:	b80f883a 	mov	r7,r23
  806a88:	d9002415 	stw	r4,144(sp)
  806a8c:	d9002317 	ldw	r4,140(sp)
  806a90:	1021883a 	mov	r16,r2
  806a94:	1823883a 	mov	r17,r3
  806a98:	dd802115 	stw	r22,132(sp)
  806a9c:	ddc02215 	stw	r23,136(sp)
  806aa0:	080bb840 	call	80bb84 <__adddf3>
  806aa4:	180b883a 	mov	r5,r3
  806aa8:	1009883a 	mov	r4,r2
  806aac:	a00d883a 	mov	r6,r20
  806ab0:	a80f883a 	mov	r7,r21
  806ab4:	080bb840 	call	80bb84 <__adddf3>
  806ab8:	180f883a 	mov	r7,r3
  806abc:	8009883a 	mov	r4,r16
  806ac0:	880b883a 	mov	r5,r17
  806ac4:	100d883a 	mov	r6,r2
  806ac8:	080bb840 	call	80bb84 <__adddf3>
  806acc:	180b883a 	mov	r5,r3
  806ad0:	0009883a 	mov	r4,zero
  806ad4:	800d883a 	mov	r6,r16
  806ad8:	880f883a 	mov	r7,r17
  806adc:	d9001b15 	stw	r4,108(sp)
  806ae0:	d8c01c15 	stw	r3,112(sp)
  806ae4:	080bb040 	call	80bb04 <__subdf3>
  806ae8:	180b883a 	mov	r5,r3
  806aec:	a80f883a 	mov	r7,r21
  806af0:	1009883a 	mov	r4,r2
  806af4:	a00d883a 	mov	r6,r20
  806af8:	080bb040 	call	80bb04 <__subdf3>
  806afc:	d9802317 	ldw	r6,140(sp)
  806b00:	d9c03817 	ldw	r7,224(sp)
  806b04:	180b883a 	mov	r5,r3
  806b08:	1009883a 	mov	r4,r2
  806b0c:	080bb040 	call	80bb04 <__subdf3>
  806b10:	d9002117 	ldw	r4,132(sp)
  806b14:	1011883a 	mov	r8,r2
  806b18:	1813883a 	mov	r9,r3
  806b1c:	b80b883a 	mov	r5,r23
  806b20:	480f883a 	mov	r7,r9
  806b24:	400d883a 	mov	r6,r8
  806b28:	080bb040 	call	80bb04 <__subdf3>
  806b2c:	1823883a 	mov	r17,r3
  806b30:	d8c02517 	ldw	r3,148(sp)
  806b34:	1021883a 	mov	r16,r2
  806b38:	e0bfffc4 	addi	r2,fp,-1
  806b3c:	1884b03a 	or	r2,r3,r2
  806b40:	1000731e 	bne	r2,zero,806d10 <__ieee754_pow+0xb88>
  806b44:	0009883a 	mov	r4,zero
  806b48:	016ffc34 	movhi	r5,49136
  806b4c:	d9001915 	stw	r4,100(sp)
  806b50:	d9401a15 	stw	r5,104(sp)
  806b54:	d9402917 	ldw	r5,164(sp)
  806b58:	d9002817 	ldw	r4,160(sp)
  806b5c:	0029883a 	mov	r20,zero
  806b60:	a00d883a 	mov	r6,r20
  806b64:	280f883a 	mov	r7,r5
  806b68:	2827883a 	mov	r19,r5
  806b6c:	080bb040 	call	80bb04 <__subdf3>
  806b70:	d9001b17 	ldw	r4,108(sp)
  806b74:	d9401c17 	ldw	r5,112(sp)
  806b78:	180f883a 	mov	r7,r3
  806b7c:	100d883a 	mov	r6,r2
  806b80:	080bbf80 	call	80bbf8 <__muldf3>
  806b84:	d9c02917 	ldw	r7,164(sp)
  806b88:	d9802817 	ldw	r6,160(sp)
  806b8c:	880b883a 	mov	r5,r17
  806b90:	8009883a 	mov	r4,r16
  806b94:	1823883a 	mov	r17,r3
  806b98:	1021883a 	mov	r16,r2
  806b9c:	080bbf80 	call	80bbf8 <__muldf3>
  806ba0:	180f883a 	mov	r7,r3
  806ba4:	880b883a 	mov	r5,r17
  806ba8:	8009883a 	mov	r4,r16
  806bac:	100d883a 	mov	r6,r2
  806bb0:	080bb840 	call	80bb84 <__adddf3>
  806bb4:	d9401c17 	ldw	r5,112(sp)
  806bb8:	d9001b17 	ldw	r4,108(sp)
  806bbc:	a00d883a 	mov	r6,r20
  806bc0:	980f883a 	mov	r7,r19
  806bc4:	1029883a 	mov	r20,r2
  806bc8:	182b883a 	mov	r21,r3
  806bcc:	080bbf80 	call	80bbf8 <__muldf3>
  806bd0:	1025883a 	mov	r18,r2
  806bd4:	1827883a 	mov	r19,r3
  806bd8:	a009883a 	mov	r4,r20
  806bdc:	a80b883a 	mov	r5,r21
  806be0:	900d883a 	mov	r6,r18
  806be4:	980f883a 	mov	r7,r19
  806be8:	dd001d15 	stw	r20,116(sp)
  806bec:	dc801f15 	stw	r18,124(sp)
  806bf0:	dd401e15 	stw	r21,120(sp)
  806bf4:	dcc02015 	stw	r19,128(sp)
  806bf8:	080bb840 	call	80bb84 <__adddf3>
  806bfc:	1823883a 	mov	r17,r3
  806c00:	01102434 	movhi	r4,16528
  806c04:	213fffc4 	addi	r4,r4,-1
  806c08:	1021883a 	mov	r16,r2
  806c0c:	182f883a 	mov	r23,r3
  806c10:	dc401815 	stw	r17,96(sp)
  806c14:	100b883a 	mov	r5,r2
  806c18:	20c02c0e 	bge	r4,r3,806ccc <__ieee754_pow+0xb44>
  806c1c:	00afdc34 	movhi	r2,49008
  806c20:	1885883a 	add	r2,r3,r2
  806c24:	2884b03a 	or	r2,r5,r2
  806c28:	1001a626 	beq	r2,zero,8072c4 <__ieee754_pow+0x113c>
  806c2c:	04220034 	movhi	r16,34816
  806c30:	841d6704 	addi	r16,r16,30108
  806c34:	045f8e34 	movhi	r17,32312
  806c38:	8c790f04 	addi	r17,r17,-7108
  806c3c:	d9401a17 	ldw	r5,104(sp)
  806c40:	d9001917 	ldw	r4,100(sp)
  806c44:	800d883a 	mov	r6,r16
  806c48:	880f883a 	mov	r7,r17
  806c4c:	080bbf80 	call	80bbf8 <__muldf3>
  806c50:	180b883a 	mov	r5,r3
  806c54:	800d883a 	mov	r6,r16
  806c58:	880f883a 	mov	r7,r17
  806c5c:	1009883a 	mov	r4,r2
  806c60:	080bbf80 	call	80bbf8 <__muldf3>
  806c64:	003dc306 	br	806374 <__ieee754_pow+0x1ec>
  806c68:	00b00434 	movhi	r2,49168
  806c6c:	9085883a 	add	r2,r18,r2
  806c70:	e084b03a 	or	r2,fp,r2
  806c74:	1000af1e 	bne	r2,zero,806f34 <__ieee754_pow+0xdac>
  806c78:	480f883a 	mov	r7,r9
  806c7c:	4009883a 	mov	r4,r8
  806c80:	480b883a 	mov	r5,r9
  806c84:	400d883a 	mov	r6,r8
  806c88:	003db406 	br	80635c <__ieee754_pow+0x1d4>
  806c8c:	00bffc34 	movhi	r2,65520
  806c90:	18ff0084 	addi	r3,r3,-1022
  806c94:	a0a9883a 	add	r20,r20,r2
  806c98:	d8c00015 	stw	r3,0(sp)
  806c9c:	0009883a 	mov	r4,zero
  806ca0:	04000234 	movhi	r16,8
  806ca4:	003e1406 	br	8064f8 <__ieee754_pow+0x370>
  806ca8:	a80f883a 	mov	r7,r21
  806cac:	a009883a 	mov	r4,r20
  806cb0:	a80b883a 	mov	r5,r21
  806cb4:	a00d883a 	mov	r6,r20
  806cb8:	080bbf80 	call	80bbf8 <__muldf3>
  806cbc:	180b883a 	mov	r5,r3
  806cc0:	d8802815 	stw	r2,160(sp)
  806cc4:	d9402915 	stw	r5,164(sp)
  806cc8:	003d5606 	br	806224 <__ieee754_pow+0x9c>
  806ccc:	d9001817 	ldw	r4,96(sp)
  806cd0:	00a00034 	movhi	r2,32768
  806cd4:	10bfffc4 	addi	r2,r2,-1
  806cd8:	00d02474 	movhi	r3,16529
  806cdc:	18f2ffc4 	addi	r3,r3,-13313
  806ce0:	20b8703a 	and	fp,r4,r2
  806ce4:	1f009d0e 	bge	r3,fp,806f5c <__ieee754_pow+0xdd4>
  806ce8:	008fdbf4 	movhi	r2,16239
  806cec:	108d0004 	addi	r2,r2,13312
  806cf0:	2085883a 	add	r2,r4,r2
  806cf4:	1144b03a 	or	r2,r2,r5
  806cf8:	1001c626 	beq	r2,zero,807414 <__ieee754_pow+0x128c>
  806cfc:	0430be74 	movhi	r16,49913
  806d00:	843cd644 	addi	r16,r16,-3239
  806d04:	04406974 	movhi	r17,421
  806d08:	8c5b87c4 	addi	r17,r17,28191
  806d0c:	003fcb06 	br	806c3c <__ieee754_pow+0xab4>
  806d10:	0005883a 	mov	r2,zero
  806d14:	00cffc34 	movhi	r3,16368
  806d18:	d8801915 	stw	r2,100(sp)
  806d1c:	d8c01a15 	stw	r3,104(sp)
  806d20:	003f8c06 	br	806b54 <__ieee754_pow+0x9cc>
  806d24:	0005883a 	mov	r2,zero
  806d28:	00cffc34 	movhi	r3,16368
  806d2c:	180b883a 	mov	r5,r3
  806d30:	580f883a 	mov	r7,r11
  806d34:	1009883a 	mov	r4,r2
  806d38:	500d883a 	mov	r6,r10
  806d3c:	080bfbc0 	call	80bfbc <__divdf3>
  806d40:	1011883a 	mov	r8,r2
  806d44:	1813883a 	mov	r9,r3
  806d48:	003d9506 	br	8063a0 <__ieee754_pow+0x218>
  806d4c:	008ffc34 	movhi	r2,16368
  806d50:	10bfff84 	addi	r2,r2,-2
  806d54:	14bdbb0e 	bge	r2,r18,806444 <__ieee754_pow+0x2bc>
  806d58:	008ffc34 	movhi	r2,16368
  806d5c:	14bdae16 	blt	r2,r18,806418 <__ieee754_pow+0x290>
  806d60:	580b883a 	mov	r5,r11
  806d64:	5009883a 	mov	r4,r10
  806d68:	000d883a 	mov	r6,zero
  806d6c:	100f883a 	mov	r7,r2
  806d70:	080bb040 	call	80bb04 <__subdf3>
  806d74:	1021883a 	mov	r16,r2
  806d78:	1823883a 	mov	r17,r3
  806d7c:	00980034 	movhi	r2,24576
  806d80:	00cffdf4 	movhi	r3,16375
  806d84:	18c551c4 	addi	r3,r3,5447
  806d88:	8009883a 	mov	r4,r16
  806d8c:	880b883a 	mov	r5,r17
  806d90:	180f883a 	mov	r7,r3
  806d94:	100d883a 	mov	r6,r2
  806d98:	080bbf80 	call	80bbf8 <__muldf3>
  806d9c:	023e17b4 	movhi	r8,63582
  806da0:	4237d104 	addi	r8,r8,-8380
  806da4:	024f9574 	movhi	r9,15957
  806da8:	4a6b82c4 	addi	r9,r9,-20981
  806dac:	480f883a 	mov	r7,r9
  806db0:	400d883a 	mov	r6,r8
  806db4:	8009883a 	mov	r4,r16
  806db8:	880b883a 	mov	r5,r17
  806dbc:	102d883a 	mov	r22,r2
  806dc0:	182f883a 	mov	r23,r3
  806dc4:	080bbf80 	call	80bbf8 <__muldf3>
  806dc8:	8009883a 	mov	r4,r16
  806dcc:	880b883a 	mov	r5,r17
  806dd0:	800d883a 	mov	r6,r16
  806dd4:	880f883a 	mov	r7,r17
  806dd8:	d8802a15 	stw	r2,168(sp)
  806ddc:	d8c02b15 	stw	r3,172(sp)
  806de0:	080bbf80 	call	80bbf8 <__muldf3>
  806de4:	0011883a 	mov	r8,zero
  806de8:	026ff434 	movhi	r9,49104
  806dec:	480f883a 	mov	r7,r9
  806df0:	8009883a 	mov	r4,r16
  806df4:	880b883a 	mov	r5,r17
  806df8:	400d883a 	mov	r6,r8
  806dfc:	1029883a 	mov	r20,r2
  806e00:	182b883a 	mov	r21,r3
  806e04:	080bbf80 	call	80bbf8 <__muldf3>
  806e08:	02155574 	movhi	r8,21845
  806e0c:	42155544 	addi	r8,r8,21845
  806e10:	024ff574 	movhi	r9,16341
  806e14:	4a555544 	addi	r9,r9,21845
  806e18:	480f883a 	mov	r7,r9
  806e1c:	400d883a 	mov	r6,r8
  806e20:	180b883a 	mov	r5,r3
  806e24:	1009883a 	mov	r4,r2
  806e28:	080bb840 	call	80bb84 <__adddf3>
  806e2c:	180f883a 	mov	r7,r3
  806e30:	8009883a 	mov	r4,r16
  806e34:	880b883a 	mov	r5,r17
  806e38:	100d883a 	mov	r6,r2
  806e3c:	080bbf80 	call	80bbf8 <__muldf3>
  806e40:	0011883a 	mov	r8,zero
  806e44:	024ff834 	movhi	r9,16352
  806e48:	480b883a 	mov	r5,r9
  806e4c:	4009883a 	mov	r4,r8
  806e50:	180f883a 	mov	r7,r3
  806e54:	100d883a 	mov	r6,r2
  806e58:	080bb040 	call	80bb04 <__subdf3>
  806e5c:	180f883a 	mov	r7,r3
  806e60:	a80b883a 	mov	r5,r21
  806e64:	a009883a 	mov	r4,r20
  806e68:	100d883a 	mov	r6,r2
  806e6c:	080bbf80 	call	80bbf8 <__muldf3>
  806e70:	02194b34 	movhi	r8,25900
  806e74:	4220bf84 	addi	r8,r8,-32002
  806e78:	026ffdf4 	movhi	r9,49143
  806e7c:	4a4551c4 	addi	r9,r9,5447
  806e80:	480f883a 	mov	r7,r9
  806e84:	400d883a 	mov	r6,r8
  806e88:	180b883a 	mov	r5,r3
  806e8c:	1009883a 	mov	r4,r2
  806e90:	080bbf80 	call	80bbf8 <__muldf3>
  806e94:	d9402b17 	ldw	r5,172(sp)
  806e98:	d9002a17 	ldw	r4,168(sp)
  806e9c:	180f883a 	mov	r7,r3
  806ea0:	100d883a 	mov	r6,r2
  806ea4:	080bb840 	call	80bb84 <__adddf3>
  806ea8:	100d883a 	mov	r6,r2
  806eac:	b009883a 	mov	r4,r22
  806eb0:	b80b883a 	mov	r5,r23
  806eb4:	180f883a 	mov	r7,r3
  806eb8:	1021883a 	mov	r16,r2
  806ebc:	1823883a 	mov	r17,r3
  806ec0:	080bb840 	call	80bb84 <__adddf3>
  806ec4:	180b883a 	mov	r5,r3
  806ec8:	0009883a 	mov	r4,zero
  806ecc:	b00d883a 	mov	r6,r22
  806ed0:	b80f883a 	mov	r7,r23
  806ed4:	d9001b15 	stw	r4,108(sp)
  806ed8:	d8c01c15 	stw	r3,112(sp)
  806edc:	080bb040 	call	80bb04 <__subdf3>
  806ee0:	1011883a 	mov	r8,r2
  806ee4:	1813883a 	mov	r9,r3
  806ee8:	8009883a 	mov	r4,r16
  806eec:	880b883a 	mov	r5,r17
  806ef0:	003f0b06 	br	806b20 <__ieee754_pow+0x998>
  806ef4:	0005883a 	mov	r2,zero
  806ef8:	00d0d034 	movhi	r3,17216
  806efc:	580b883a 	mov	r5,r11
  806f00:	5009883a 	mov	r4,r10
  806f04:	180f883a 	mov	r7,r3
  806f08:	100d883a 	mov	r6,r2
  806f0c:	080bbf80 	call	80bbf8 <__muldf3>
  806f10:	1015883a 	mov	r10,r2
  806f14:	1825883a 	mov	r18,r3
  806f18:	017ff2c4 	movi	r5,-53
  806f1c:	003d6606 	br	8064b8 <__ieee754_pow+0x330>
  806f20:	b03d300e 	bge	r22,zero,8063e4 <__ieee754_pow+0x25c>
  806f24:	d9402917 	ldw	r5,164(sp)
  806f28:	28e0003c 	xorhi	r3,r5,32768
  806f2c:	d8c02915 	stw	r3,164(sp)
  806f30:	003cbc06 	br	806224 <__ieee754_pow+0x9c>
  806f34:	00800044 	movi	r2,1
  806f38:	e0bd1a1e 	bne	fp,r2,8063a4 <__ieee754_pow+0x21c>
  806f3c:	48e0003c 	xorhi	r3,r9,32768
  806f40:	da002815 	stw	r8,160(sp)
  806f44:	d8c02915 	stw	r3,164(sp)
  806f48:	003cb606 	br	806224 <__ieee754_pow+0x9c>
  806f4c:	d9001817 	ldw	r4,96(sp)
  806f50:	00a00034 	movhi	r2,32768
  806f54:	10bfffc4 	addi	r2,r2,-1
  806f58:	20b8703a 	and	fp,r4,r2
  806f5c:	008ff834 	movhi	r2,16352
  806f60:	1700fc16 	blt	r2,fp,807354 <__ieee754_pow+0x11cc>
  806f64:	0039883a 	mov	fp,zero
  806f68:	d8001315 	stw	zero,76(sp)
  806f6c:	0025883a 	mov	r18,zero
  806f70:	0005883a 	mov	r2,zero
  806f74:	00cff9b4 	movhi	r3,16358
  806f78:	18cb90c4 	addi	r3,r3,11843
  806f7c:	9009883a 	mov	r4,r18
  806f80:	b80b883a 	mov	r5,r23
  806f84:	180f883a 	mov	r7,r3
  806f88:	100d883a 	mov	r6,r2
  806f8c:	080bbf80 	call	80bbf8 <__muldf3>
  806f90:	d9c02017 	ldw	r7,128(sp)
  806f94:	d9801f17 	ldw	r6,124(sp)
  806f98:	9009883a 	mov	r4,r18
  806f9c:	b80b883a 	mov	r5,r23
  806fa0:	b823883a 	mov	r17,r23
  806fa4:	102d883a 	mov	r22,r2
  806fa8:	182f883a 	mov	r23,r3
  806fac:	080bb040 	call	80bb04 <__subdf3>
  806fb0:	d9401e17 	ldw	r5,120(sp)
  806fb4:	d9001d17 	ldw	r4,116(sp)
  806fb8:	180f883a 	mov	r7,r3
  806fbc:	100d883a 	mov	r6,r2
  806fc0:	080bb040 	call	80bb04 <__subdf3>
  806fc4:	023fbeb4 	movhi	r8,65274
  806fc8:	420e7bc4 	addi	r8,r8,14831
  806fcc:	024ff9b4 	movhi	r9,16358
  806fd0:	4a4b9084 	addi	r9,r9,11842
  806fd4:	480f883a 	mov	r7,r9
  806fd8:	400d883a 	mov	r6,r8
  806fdc:	180b883a 	mov	r5,r3
  806fe0:	1009883a 	mov	r4,r2
  806fe4:	080bbf80 	call	80bbf8 <__muldf3>
  806fe8:	02032a34 	movhi	r8,3240
  806fec:	421b0e44 	addi	r8,r8,27705
  806ff0:	026f8834 	movhi	r9,48672
  806ff4:	4a571844 	addi	r9,r9,23649
  806ff8:	480f883a 	mov	r7,r9
  806ffc:	400d883a 	mov	r6,r8
  807000:	9009883a 	mov	r4,r18
  807004:	880b883a 	mov	r5,r17
  807008:	1021883a 	mov	r16,r2
  80700c:	1823883a 	mov	r17,r3
  807010:	080bbf80 	call	80bbf8 <__muldf3>
  807014:	180f883a 	mov	r7,r3
  807018:	880b883a 	mov	r5,r17
  80701c:	8009883a 	mov	r4,r16
  807020:	100d883a 	mov	r6,r2
  807024:	080bb840 	call	80bb84 <__adddf3>
  807028:	100d883a 	mov	r6,r2
  80702c:	b009883a 	mov	r4,r22
  807030:	b80b883a 	mov	r5,r23
  807034:	180f883a 	mov	r7,r3
  807038:	1021883a 	mov	r16,r2
  80703c:	1823883a 	mov	r17,r3
  807040:	080bb840 	call	80bb84 <__adddf3>
  807044:	1009883a 	mov	r4,r2
  807048:	180b883a 	mov	r5,r3
  80704c:	b00d883a 	mov	r6,r22
  807050:	b80f883a 	mov	r7,r23
  807054:	d8803915 	stw	r2,228(sp)
  807058:	d8c03a15 	stw	r3,232(sp)
  80705c:	d8801115 	stw	r2,68(sp)
  807060:	d8c01215 	stw	r3,72(sp)
  807064:	080bb040 	call	80bb04 <__subdf3>
  807068:	180f883a 	mov	r7,r3
  80706c:	8009883a 	mov	r4,r16
  807070:	880b883a 	mov	r5,r17
  807074:	100d883a 	mov	r6,r2
  807078:	080bb040 	call	80bb04 <__subdf3>
  80707c:	d9001117 	ldw	r4,68(sp)
  807080:	d9403a17 	ldw	r5,232(sp)
  807084:	1029883a 	mov	r20,r2
  807088:	200d883a 	mov	r6,r4
  80708c:	280f883a 	mov	r7,r5
  807090:	182b883a 	mov	r21,r3
  807094:	080bbf80 	call	80bbf8 <__muldf3>
  807098:	1021883a 	mov	r16,r2
  80709c:	1823883a 	mov	r17,r3
  8070a0:	009caff4 	movhi	r2,29375
  8070a4:	10a93404 	addi	r2,r2,-23344
  8070a8:	00cf99b4 	movhi	r3,15974
  8070ac:	18cdda44 	addi	r3,r3,14185
  8070b0:	8009883a 	mov	r4,r16
  8070b4:	880b883a 	mov	r5,r17
  8070b8:	180f883a 	mov	r7,r3
  8070bc:	100d883a 	mov	r6,r2
  8070c0:	080bbf80 	call	80bbf8 <__muldf3>
  8070c4:	023174b4 	movhi	r8,50642
  8070c8:	421afc44 	addi	r8,r8,27633
  8070cc:	024faf34 	movhi	r9,16060
  8070d0:	4a6f5044 	addi	r9,r9,-17087
  8070d4:	480f883a 	mov	r7,r9
  8070d8:	400d883a 	mov	r6,r8
  8070dc:	180b883a 	mov	r5,r3
  8070e0:	1009883a 	mov	r4,r2
  8070e4:	080bb040 	call	80bb04 <__subdf3>
  8070e8:	180f883a 	mov	r7,r3
  8070ec:	8009883a 	mov	r4,r16
  8070f0:	880b883a 	mov	r5,r17
  8070f4:	100d883a 	mov	r6,r2
  8070f8:	080bbf80 	call	80bbf8 <__muldf3>
  8070fc:	022bc9b4 	movhi	r8,44838
  807100:	42378b04 	addi	r8,r8,-8660
  807104:	024fc474 	movhi	r9,16145
  807108:	4a559a84 	addi	r9,r9,22122
  80710c:	480f883a 	mov	r7,r9
  807110:	400d883a 	mov	r6,r8
  807114:	180b883a 	mov	r5,r3
  807118:	1009883a 	mov	r4,r2
  80711c:	080bb840 	call	80bb84 <__adddf3>
  807120:	180f883a 	mov	r7,r3
  807124:	8009883a 	mov	r4,r16
  807128:	880b883a 	mov	r5,r17
  80712c:	100d883a 	mov	r6,r2
  807130:	080bbf80 	call	80bbf8 <__muldf3>
  807134:	0205aff4 	movhi	r8,5823
  807138:	422f64c4 	addi	r8,r8,-17005
  80713c:	024fd9f4 	movhi	r9,16231
  807140:	4a705b04 	addi	r9,r9,-16020
  807144:	480f883a 	mov	r7,r9
  807148:	400d883a 	mov	r6,r8
  80714c:	180b883a 	mov	r5,r3
  807150:	1009883a 	mov	r4,r2
  807154:	080bb040 	call	80bb04 <__subdf3>
  807158:	180f883a 	mov	r7,r3
  80715c:	8009883a 	mov	r4,r16
  807160:	880b883a 	mov	r5,r17
  807164:	100d883a 	mov	r6,r2
  807168:	080bbf80 	call	80bbf8 <__muldf3>
  80716c:	02155574 	movhi	r8,21845
  807170:	42154f84 	addi	r8,r8,21822
  807174:	024ff174 	movhi	r9,16325
  807178:	4a555544 	addi	r9,r9,21845
  80717c:	480f883a 	mov	r7,r9
  807180:	400d883a 	mov	r6,r8
  807184:	180b883a 	mov	r5,r3
  807188:	1009883a 	mov	r4,r2
  80718c:	080bb840 	call	80bb84 <__adddf3>
  807190:	180f883a 	mov	r7,r3
  807194:	8009883a 	mov	r4,r16
  807198:	880b883a 	mov	r5,r17
  80719c:	100d883a 	mov	r6,r2
  8071a0:	080bbf80 	call	80bbf8 <__muldf3>
  8071a4:	d9001117 	ldw	r4,68(sp)
  8071a8:	d9403a17 	ldw	r5,232(sp)
  8071ac:	180f883a 	mov	r7,r3
  8071b0:	100d883a 	mov	r6,r2
  8071b4:	080bb040 	call	80bb04 <__subdf3>
  8071b8:	d9001117 	ldw	r4,68(sp)
  8071bc:	d9403a17 	ldw	r5,232(sp)
  8071c0:	100d883a 	mov	r6,r2
  8071c4:	180f883a 	mov	r7,r3
  8071c8:	1021883a 	mov	r16,r2
  8071cc:	1823883a 	mov	r17,r3
  8071d0:	080bbf80 	call	80bbf8 <__muldf3>
  8071d4:	0011883a 	mov	r8,zero
  8071d8:	02500034 	movhi	r9,16384
  8071dc:	480f883a 	mov	r7,r9
  8071e0:	400d883a 	mov	r6,r8
  8071e4:	8009883a 	mov	r4,r16
  8071e8:	880b883a 	mov	r5,r17
  8071ec:	1021883a 	mov	r16,r2
  8071f0:	1823883a 	mov	r17,r3
  8071f4:	080bb040 	call	80bb04 <__subdf3>
  8071f8:	180f883a 	mov	r7,r3
  8071fc:	880b883a 	mov	r5,r17
  807200:	8009883a 	mov	r4,r16
  807204:	100d883a 	mov	r6,r2
  807208:	080bfbc0 	call	80bfbc <__divdf3>
  80720c:	d9001117 	ldw	r4,68(sp)
  807210:	d9403a17 	ldw	r5,232(sp)
  807214:	a00d883a 	mov	r6,r20
  807218:	a80f883a 	mov	r7,r21
  80721c:	1025883a 	mov	r18,r2
  807220:	1827883a 	mov	r19,r3
  807224:	080bbf80 	call	80bbf8 <__muldf3>
  807228:	180f883a 	mov	r7,r3
  80722c:	a009883a 	mov	r4,r20
  807230:	a80b883a 	mov	r5,r21
  807234:	100d883a 	mov	r6,r2
  807238:	080bb840 	call	80bb84 <__adddf3>
  80723c:	180f883a 	mov	r7,r3
  807240:	980b883a 	mov	r5,r19
  807244:	9009883a 	mov	r4,r18
  807248:	100d883a 	mov	r6,r2
  80724c:	080bb040 	call	80bb04 <__subdf3>
  807250:	d9801117 	ldw	r6,68(sp)
  807254:	d9c03a17 	ldw	r7,232(sp)
  807258:	180b883a 	mov	r5,r3
  80725c:	1009883a 	mov	r4,r2
  807260:	080bb040 	call	80bb04 <__subdf3>
  807264:	0011883a 	mov	r8,zero
  807268:	024ffc34 	movhi	r9,16368
  80726c:	480b883a 	mov	r5,r9
  807270:	180f883a 	mov	r7,r3
  807274:	4009883a 	mov	r4,r8
  807278:	100d883a 	mov	r6,r2
  80727c:	080bb040 	call	80bb04 <__subdf3>
  807280:	100b883a 	mov	r5,r2
  807284:	d8801317 	ldw	r2,76(sp)
  807288:	10d5883a 	add	r10,r2,r3
  80728c:	5005d53a 	srai	r2,r10,20
  807290:	0080720e 	bge	zero,r2,80745c <__ieee754_pow+0x12d4>
  807294:	2811883a 	mov	r8,r5
  807298:	5013883a 	mov	r9,r10
  80729c:	d9c01a17 	ldw	r7,104(sp)
  8072a0:	d9801917 	ldw	r6,100(sp)
  8072a4:	480b883a 	mov	r5,r9
  8072a8:	4009883a 	mov	r4,r8
  8072ac:	003e8206 	br	806cb8 <__ieee754_pow+0xb30>
  8072b0:	0009883a 	mov	r4,zero
  8072b4:	800b883a 	mov	r5,r16
  8072b8:	a80f883a 	mov	r7,r21
  8072bc:	a00d883a 	mov	r6,r20
  8072c0:	003c2b06 	br	806370 <__ieee754_pow+0x1e8>
  8072c4:	d9001d17 	ldw	r4,116(sp)
  8072c8:	00994b34 	movhi	r2,25900
  8072cc:	10a0bf84 	addi	r2,r2,-32002
  8072d0:	00cf25f4 	movhi	r3,15511
  8072d4:	18c551c4 	addi	r3,r3,5447
  8072d8:	a80b883a 	mov	r5,r21
  8072dc:	180f883a 	mov	r7,r3
  8072e0:	100d883a 	mov	r6,r2
  8072e4:	080bb840 	call	80bb84 <__adddf3>
  8072e8:	d9801f17 	ldw	r6,124(sp)
  8072ec:	880b883a 	mov	r5,r17
  8072f0:	8009883a 	mov	r4,r16
  8072f4:	980f883a 	mov	r7,r19
  8072f8:	1021883a 	mov	r16,r2
  8072fc:	1823883a 	mov	r17,r3
  807300:	080bb040 	call	80bb04 <__subdf3>
  807304:	180f883a 	mov	r7,r3
  807308:	880b883a 	mov	r5,r17
  80730c:	8009883a 	mov	r4,r16
  807310:	100d883a 	mov	r6,r2
  807314:	080c3240 	call	80c324 <__gtdf2>
  807318:	00bf0c0e 	bge	zero,r2,806f4c <__ieee754_pow+0xdc4>
  80731c:	04220034 	movhi	r16,34816
  807320:	841d6704 	addi	r16,r16,30108
  807324:	045f8e34 	movhi	r17,32312
  807328:	8c790f04 	addi	r17,r17,-7108
  80732c:	d9401a17 	ldw	r5,104(sp)
  807330:	d9001917 	ldw	r4,100(sp)
  807334:	800d883a 	mov	r6,r16
  807338:	880f883a 	mov	r7,r17
  80733c:	080bbf80 	call	80bbf8 <__muldf3>
  807340:	180b883a 	mov	r5,r3
  807344:	800d883a 	mov	r6,r16
  807348:	880f883a 	mov	r7,r17
  80734c:	1009883a 	mov	r4,r2
  807350:	003e5906 	br	806cb8 <__ieee754_pow+0xb30>
  807354:	e005d53a 	srai	r2,fp,20
  807358:	01800434 	movhi	r6,16
  80735c:	d9401817 	ldw	r5,96(sp)
  807360:	10bf0084 	addi	r2,r2,-1022
  807364:	308dd83a 	sra	r6,r6,r2
  807368:	02000434 	movhi	r8,16
  80736c:	423fffc4 	addi	r8,r8,-1
  807370:	0005883a 	mov	r2,zero
  807374:	298d883a 	add	r6,r5,r6
  807378:	318b883a 	add	r5,r6,r6
  80737c:	320e703a 	and	r7,r6,r8
  807380:	1013883a 	mov	r9,r2
  807384:	280ad57a 	srli	r5,r5,21
  807388:	d8801817 	ldw	r2,96(sp)
  80738c:	01000504 	movi	r4,20
  807390:	297f0044 	addi	r5,r5,-1023
  807394:	4151d83a 	sra	r8,r8,r5
  807398:	39c00434 	orhi	r7,r7,16
  80739c:	2149c83a 	sub	r4,r4,r5
  8073a0:	0210303a 	nor	r8,zero,r8
  8073a4:	3939d83a 	sra	fp,r7,r4
  8073a8:	320e703a 	and	r7,r6,r8
  8073ac:	10002916 	blt	r2,zero,807454 <__ieee754_pow+0x12cc>
  8073b0:	d9402017 	ldw	r5,128(sp)
  8073b4:	d9001f17 	ldw	r4,124(sp)
  8073b8:	480d883a 	mov	r6,r9
  8073bc:	080bb040 	call	80bb04 <__subdf3>
  8073c0:	180b883a 	mov	r5,r3
  8073c4:	d9402015 	stw	r5,128(sp)
  8073c8:	280f883a 	mov	r7,r5
  8073cc:	d9001d17 	ldw	r4,116(sp)
  8073d0:	d9401e17 	ldw	r5,120(sp)
  8073d4:	1007883a 	mov	r3,r2
  8073d8:	180d883a 	mov	r6,r3
  8073dc:	d8801f15 	stw	r2,124(sp)
  8073e0:	080bb840 	call	80bb84 <__adddf3>
  8073e4:	180b883a 	mov	r5,r3
  8073e8:	e006953a 	slli	r3,fp,20
  8073ec:	282f883a 	mov	r23,r5
  8073f0:	d8c01315 	stw	r3,76(sp)
  8073f4:	003edd06 	br	806f6c <__ieee754_pow+0xde4>
  8073f8:	383bc81e 	bne	r7,zero,80631c <__ieee754_pow+0x194>
  8073fc:	28c5c83a 	sub	r2,r5,r3
  807400:	8087d83a 	sra	r3,r16,r2
  807404:	1884983a 	sll	r2,r3,r2
  807408:	80801b26 	beq	r16,r2,807478 <__ieee754_pow+0x12f0>
  80740c:	0039883a 	mov	fp,zero
  807410:	003b9d06 	br	806288 <__ieee754_pow+0x100>
  807414:	d9801f17 	ldw	r6,124(sp)
  807418:	8009883a 	mov	r4,r16
  80741c:	880b883a 	mov	r5,r17
  807420:	980f883a 	mov	r7,r19
  807424:	080bb040 	call	80bb04 <__subdf3>
  807428:	d9001d17 	ldw	r4,116(sp)
  80742c:	a80b883a 	mov	r5,r21
  807430:	180f883a 	mov	r7,r3
  807434:	100d883a 	mov	r6,r2
  807438:	080c4bc0 	call	80c4bc <__ledf2>
  80743c:	00bfc516 	blt	zero,r2,807354 <__ieee754_pow+0x11cc>
  807440:	0430be74 	movhi	r16,49913
  807444:	843cd644 	addi	r16,r16,-3239
  807448:	04406974 	movhi	r17,421
  80744c:	8c5b87c4 	addi	r17,r17,28191
  807450:	003fb606 	br	80732c <__ieee754_pow+0x11a4>
  807454:	0739c83a 	sub	fp,zero,fp
  807458:	003fd506 	br	8073b0 <__ieee754_pow+0x1228>
  80745c:	2809883a 	mov	r4,r5
  807460:	e00d883a 	mov	r6,fp
  807464:	180b883a 	mov	r5,r3
  807468:	0801c700 	call	801c70 <scalbn>
  80746c:	1011883a 	mov	r8,r2
  807470:	1813883a 	mov	r9,r3
  807474:	003f8906 	br	80729c <__ieee754_pow+0x1114>
  807478:	18c0004c 	andi	r3,r3,1
  80747c:	00800084 	movi	r2,2
  807480:	10f9c83a 	sub	fp,r2,r3
  807484:	003b8006 	br	806288 <__ieee754_pow+0x100>

00807488 <__ieee754_rem_pio2>:
  807488:	deffe304 	addi	sp,sp,-116
  80748c:	00a00034 	movhi	r2,32768
  807490:	10bfffc4 	addi	r2,r2,-1
  807494:	dd801915 	stw	r22,100(sp)
  807498:	28ac703a 	and	r22,r5,r2
  80749c:	008ffa74 	movhi	r2,16361
  8074a0:	10887ec4 	addi	r2,r2,8699
  8074a4:	df001b15 	stw	fp,108(sp)
  8074a8:	dfc01c15 	stw	ra,112(sp)
  8074ac:	ddc01a15 	stw	r23,104(sp)
  8074b0:	dd401815 	stw	r21,96(sp)
  8074b4:	dd001715 	stw	r20,92(sp)
  8074b8:	dcc01615 	stw	r19,88(sp)
  8074bc:	dc801515 	stw	r18,84(sp)
  8074c0:	dc401415 	stw	r17,80(sp)
  8074c4:	dc001315 	stw	r16,76(sp)
  8074c8:	2013883a 	mov	r9,r4
  8074cc:	d9400a15 	stw	r5,40(sp)
  8074d0:	3039883a 	mov	fp,r6
  8074d4:	15801216 	blt	r2,r22,807520 <__ieee754_rem_pio2+0x98>
  8074d8:	e1400115 	stw	r5,4(fp)
  8074dc:	30000315 	stw	zero,12(r6)
  8074e0:	e1000015 	stw	r4,0(fp)
  8074e4:	d8000b15 	stw	zero,44(sp)
  8074e8:	30000215 	stw	zero,8(r6)
  8074ec:	d8800b17 	ldw	r2,44(sp)
  8074f0:	dfc01c17 	ldw	ra,112(sp)
  8074f4:	df001b17 	ldw	fp,108(sp)
  8074f8:	ddc01a17 	ldw	r23,104(sp)
  8074fc:	dd801917 	ldw	r22,100(sp)
  807500:	dd401817 	ldw	r21,96(sp)
  807504:	dd001717 	ldw	r20,92(sp)
  807508:	dcc01617 	ldw	r19,88(sp)
  80750c:	dc801517 	ldw	r18,84(sp)
  807510:	dc401417 	ldw	r17,80(sp)
  807514:	dc001317 	ldw	r16,76(sp)
  807518:	dec01d04 	addi	sp,sp,116
  80751c:	f800283a 	ret
  807520:	009000f4 	movhi	r2,16387
  807524:	10b65ec4 	addi	r2,r2,-9861
  807528:	15800f0e 	bge	r2,r22,807568 <__ieee754_rem_pio2+0xe0>
  80752c:	00904e74 	movhi	r2,16697
  807530:	10887ec4 	addi	r2,r2,8699
  807534:	1580330e 	bge	r2,r22,807604 <__ieee754_rem_pio2+0x17c>
  807538:	009ffc34 	movhi	r2,32752
  80753c:	10bfffc4 	addi	r2,r2,-1
  807540:	1580fe0e 	bge	r2,r22,80793c <__ieee754_rem_pio2+0x4b4>
  807544:	280f883a 	mov	r7,r5
  807548:	480d883a 	mov	r6,r9
  80754c:	080bb040 	call	80bb04 <__subdf3>
  807550:	e0c00115 	stw	r3,4(fp)
  807554:	d8000b15 	stw	zero,44(sp)
  807558:	e0800015 	stw	r2,0(fp)
  80755c:	e0800215 	stw	r2,8(fp)
  807560:	e0c00315 	stw	r3,12(fp)
  807564:	003fe106 	br	8074ec <__ieee754_rem_pio2+0x64>
  807568:	d9000a17 	ldw	r4,40(sp)
  80756c:	0100ce0e 	bge	zero,r4,8078a8 <__ieee754_rem_pio2+0x420>
  807570:	04151034 	movhi	r16,21568
  807574:	044ffe74 	movhi	r17,16377
  807578:	8c487ec4 	addi	r17,r17,8699
  80757c:	4809883a 	mov	r4,r9
  807580:	800d883a 	mov	r6,r16
  807584:	880f883a 	mov	r7,r17
  807588:	080bb040 	call	80bb04 <__subdf3>
  80758c:	1025883a 	mov	r18,r2
  807590:	1827883a 	mov	r19,r3
  807594:	b4413c26 	beq	r22,r17,807a88 <__ieee754_rem_pio2+0x600>
  807598:	040698b4 	movhi	r16,6754
  80759c:	8418cc44 	addi	r16,r16,25393
  8075a0:	044f7474 	movhi	r17,15825
  8075a4:	8c6d1844 	addi	r17,r17,-19359
  8075a8:	1009883a 	mov	r4,r2
  8075ac:	180b883a 	mov	r5,r3
  8075b0:	800d883a 	mov	r6,r16
  8075b4:	880f883a 	mov	r7,r17
  8075b8:	080bb040 	call	80bb04 <__subdf3>
  8075bc:	100d883a 	mov	r6,r2
  8075c0:	9009883a 	mov	r4,r18
  8075c4:	980b883a 	mov	r5,r19
  8075c8:	180f883a 	mov	r7,r3
  8075cc:	e0800015 	stw	r2,0(fp)
  8075d0:	e0c00115 	stw	r3,4(fp)
  8075d4:	080bb040 	call	80bb04 <__subdf3>
  8075d8:	1009883a 	mov	r4,r2
  8075dc:	800d883a 	mov	r6,r16
  8075e0:	880f883a 	mov	r7,r17
  8075e4:	180b883a 	mov	r5,r3
  8075e8:	080bb040 	call	80bb04 <__subdf3>
  8075ec:	1009883a 	mov	r4,r2
  8075f0:	00800044 	movi	r2,1
  8075f4:	d8800b15 	stw	r2,44(sp)
  8075f8:	e0c00315 	stw	r3,12(fp)
  8075fc:	e1000215 	stw	r4,8(fp)
  807600:	003fba06 	br	8074ec <__ieee754_rem_pio2+0x64>
  807604:	080175c0 	call	80175c <fabs>
  807608:	021b72b4 	movhi	r8,28106
  80760c:	423220c4 	addi	r8,r8,-14205
  807610:	024ff934 	movhi	r9,16356
  807614:	4a57cc04 	addi	r9,r9,24368
  807618:	480f883a 	mov	r7,r9
  80761c:	400d883a 	mov	r6,r8
  807620:	1009883a 	mov	r4,r2
  807624:	180b883a 	mov	r5,r3
  807628:	1025883a 	mov	r18,r2
  80762c:	1827883a 	mov	r19,r3
  807630:	080bbf80 	call	80bbf8 <__muldf3>
  807634:	0011883a 	mov	r8,zero
  807638:	024ff834 	movhi	r9,16352
  80763c:	480f883a 	mov	r7,r9
  807640:	400d883a 	mov	r6,r8
  807644:	180b883a 	mov	r5,r3
  807648:	1009883a 	mov	r4,r2
  80764c:	080bb840 	call	80bb84 <__adddf3>
  807650:	180b883a 	mov	r5,r3
  807654:	1009883a 	mov	r4,r2
  807658:	080c63c0 	call	80c63c <__fixdfsi>
  80765c:	1009883a 	mov	r4,r2
  807660:	d8800b15 	stw	r2,44(sp)
  807664:	080c5440 	call	80c544 <__floatsidf>
  807668:	1823883a 	mov	r17,r3
  80766c:	1009883a 	mov	r4,r2
  807670:	d8800c15 	stw	r2,48(sp)
  807674:	00effe74 	movhi	r3,49145
  807678:	18c87ec4 	addi	r3,r3,8699
  80767c:	00951034 	movhi	r2,21568
  807680:	880b883a 	mov	r5,r17
  807684:	180f883a 	mov	r7,r3
  807688:	100d883a 	mov	r6,r2
  80768c:	dc400d15 	stw	r17,52(sp)
  807690:	080bbf80 	call	80bbf8 <__muldf3>
  807694:	180f883a 	mov	r7,r3
  807698:	980b883a 	mov	r5,r19
  80769c:	9009883a 	mov	r4,r18
  8076a0:	100d883a 	mov	r6,r2
  8076a4:	080bb840 	call	80bb84 <__adddf3>
  8076a8:	d9000c17 	ldw	r4,48(sp)
  8076ac:	020698b4 	movhi	r8,6754
  8076b0:	4218cc44 	addi	r8,r8,25393
  8076b4:	024f7474 	movhi	r9,15825
  8076b8:	4a6d1844 	addi	r9,r9,-19359
  8076bc:	880b883a 	mov	r5,r17
  8076c0:	480f883a 	mov	r7,r9
  8076c4:	400d883a 	mov	r6,r8
  8076c8:	1025883a 	mov	r18,r2
  8076cc:	1827883a 	mov	r19,r3
  8076d0:	080bbf80 	call	80bbf8 <__muldf3>
  8076d4:	d9000b17 	ldw	r4,44(sp)
  8076d8:	100f883a 	mov	r7,r2
  8076dc:	1811883a 	mov	r8,r3
  8076e0:	008007c4 	movi	r2,31
  8076e4:	dc800e15 	stw	r18,56(sp)
  8076e8:	3821883a 	mov	r16,r7
  8076ec:	dcc00f15 	stw	r19,60(sp)
  8076f0:	4023883a 	mov	r17,r8
  8076f4:	11010a0e 	bge	r2,r4,807b20 <__ieee754_rem_pio2+0x698>
  8076f8:	d9000e17 	ldw	r4,56(sp)
  8076fc:	d9400f17 	ldw	r5,60(sp)
  807700:	800d883a 	mov	r6,r16
  807704:	880f883a 	mov	r7,r17
  807708:	080bb040 	call	80bb04 <__subdf3>
  80770c:	1810d53a 	srli	r8,r3,20
  807710:	b02dd53a 	srai	r22,r22,20
  807714:	1009883a 	mov	r4,r2
  807718:	4201ffcc 	andi	r8,r8,2047
  80771c:	180b883a 	mov	r5,r3
  807720:	b211c83a 	sub	r8,r22,r8
  807724:	00800404 	movi	r2,16
  807728:	dd801015 	stw	r22,64(sp)
  80772c:	e1000015 	stw	r4,0(fp)
  807730:	e1400115 	stw	r5,4(fp)
  807734:	1200430e 	bge	r2,r8,807844 <__ieee754_rem_pio2+0x3bc>
  807738:	d9000c17 	ldw	r4,48(sp)
  80773c:	d9400d17 	ldw	r5,52(sp)
  807740:	00869834 	movhi	r2,6752
  807744:	00cf7474 	movhi	r3,15825
  807748:	18ed1844 	addi	r3,r3,-19359
  80774c:	180f883a 	mov	r7,r3
  807750:	100d883a 	mov	r6,r2
  807754:	080bbf80 	call	80bbf8 <__muldf3>
  807758:	d9000e17 	ldw	r4,56(sp)
  80775c:	d9400f17 	ldw	r5,60(sp)
  807760:	100d883a 	mov	r6,r2
  807764:	180f883a 	mov	r7,r3
  807768:	1025883a 	mov	r18,r2
  80776c:	1827883a 	mov	r19,r3
  807770:	080bb040 	call	80bb04 <__subdf3>
  807774:	d9000c17 	ldw	r4,48(sp)
  807778:	d9400d17 	ldw	r5,52(sp)
  80777c:	058b80f4 	movhi	r22,11779
  807780:	b59c1cc4 	addi	r22,r22,28787
  807784:	05cee8f4 	movhi	r23,15267
  807788:	bdc66284 	addi	r23,r23,6538
  80778c:	b00d883a 	mov	r6,r22
  807790:	b80f883a 	mov	r7,r23
  807794:	d8801115 	stw	r2,68(sp)
  807798:	d8c01215 	stw	r3,72(sp)
  80779c:	d8800815 	stw	r2,32(sp)
  8077a0:	080bbf80 	call	80bbf8 <__muldf3>
  8077a4:	d9001217 	ldw	r4,72(sp)
  8077a8:	d9400f17 	ldw	r5,60(sp)
  8077ac:	d9800817 	ldw	r6,32(sp)
  8077b0:	d9000915 	stw	r4,36(sp)
  8077b4:	d9c01217 	ldw	r7,72(sp)
  8077b8:	d9000e17 	ldw	r4,56(sp)
  8077bc:	1021883a 	mov	r16,r2
  8077c0:	1823883a 	mov	r17,r3
  8077c4:	080bb040 	call	80bb04 <__subdf3>
  8077c8:	180b883a 	mov	r5,r3
  8077cc:	900d883a 	mov	r6,r18
  8077d0:	980f883a 	mov	r7,r19
  8077d4:	1009883a 	mov	r4,r2
  8077d8:	080bb040 	call	80bb04 <__subdf3>
  8077dc:	180f883a 	mov	r7,r3
  8077e0:	880b883a 	mov	r5,r17
  8077e4:	8009883a 	mov	r4,r16
  8077e8:	100d883a 	mov	r6,r2
  8077ec:	080bb040 	call	80bb04 <__subdf3>
  8077f0:	d9000817 	ldw	r4,32(sp)
  8077f4:	d9401217 	ldw	r5,72(sp)
  8077f8:	180f883a 	mov	r7,r3
  8077fc:	100d883a 	mov	r6,r2
  807800:	1021883a 	mov	r16,r2
  807804:	1823883a 	mov	r17,r3
  807808:	080bb040 	call	80bb04 <__subdf3>
  80780c:	1810d53a 	srli	r8,r3,20
  807810:	1009883a 	mov	r4,r2
  807814:	d8801017 	ldw	r2,64(sp)
  807818:	4201ffcc 	andi	r8,r8,2047
  80781c:	180b883a 	mov	r5,r3
  807820:	1211c83a 	sub	r8,r2,r8
  807824:	00800c44 	movi	r2,49
  807828:	e1000015 	stw	r4,0(fp)
  80782c:	e1400115 	stw	r5,4(fp)
  807830:	1200f016 	blt	r2,r8,807bf4 <__ieee754_rem_pio2+0x76c>
  807834:	d8c00817 	ldw	r3,32(sp)
  807838:	d9001217 	ldw	r4,72(sp)
  80783c:	d8c00e15 	stw	r3,56(sp)
  807840:	d9000f15 	stw	r4,60(sp)
  807844:	e1800017 	ldw	r6,0(fp)
  807848:	e1c00117 	ldw	r7,4(fp)
  80784c:	d9400f17 	ldw	r5,60(sp)
  807850:	d9000e17 	ldw	r4,56(sp)
  807854:	080bb040 	call	80bb04 <__subdf3>
  807858:	180b883a 	mov	r5,r3
  80785c:	800d883a 	mov	r6,r16
  807860:	880f883a 	mov	r7,r17
  807864:	1009883a 	mov	r4,r2
  807868:	080bb040 	call	80bb04 <__subdf3>
  80786c:	d9400a17 	ldw	r5,40(sp)
  807870:	e0800215 	stw	r2,8(fp)
  807874:	e1800204 	addi	r6,fp,8
  807878:	30c00115 	stw	r3,4(r6)
  80787c:	283f1b0e 	bge	r5,zero,8074ec <__ieee754_rem_pio2+0x64>
  807880:	e0c00117 	ldw	r3,4(fp)
  807884:	d8800b17 	ldw	r2,44(sp)
  807888:	18e0003c 	xorhi	r3,r3,32768
  80788c:	0085c83a 	sub	r2,zero,r2
  807890:	e0c00115 	stw	r3,4(fp)
  807894:	d8800b15 	stw	r2,44(sp)
  807898:	30800117 	ldw	r2,4(r6)
  80789c:	10a0003c 	xorhi	r2,r2,32768
  8078a0:	30800115 	stw	r2,4(r6)
  8078a4:	003f1106 	br	8074ec <__ieee754_rem_pio2+0x64>
  8078a8:	04151034 	movhi	r16,21568
  8078ac:	044ffe74 	movhi	r17,16377
  8078b0:	8c487ec4 	addi	r17,r17,8699
  8078b4:	4809883a 	mov	r4,r9
  8078b8:	800d883a 	mov	r6,r16
  8078bc:	880f883a 	mov	r7,r17
  8078c0:	080bb840 	call	80bb84 <__adddf3>
  8078c4:	1025883a 	mov	r18,r2
  8078c8:	1827883a 	mov	r19,r3
  8078cc:	b440a326 	beq	r22,r17,807b5c <__ieee754_rem_pio2+0x6d4>
  8078d0:	040698b4 	movhi	r16,6754
  8078d4:	8418cc44 	addi	r16,r16,25393
  8078d8:	044f7474 	movhi	r17,15825
  8078dc:	8c6d1844 	addi	r17,r17,-19359
  8078e0:	1009883a 	mov	r4,r2
  8078e4:	180b883a 	mov	r5,r3
  8078e8:	800d883a 	mov	r6,r16
  8078ec:	880f883a 	mov	r7,r17
  8078f0:	080bb840 	call	80bb84 <__adddf3>
  8078f4:	100d883a 	mov	r6,r2
  8078f8:	9009883a 	mov	r4,r18
  8078fc:	980b883a 	mov	r5,r19
  807900:	180f883a 	mov	r7,r3
  807904:	e0800015 	stw	r2,0(fp)
  807908:	e0c00115 	stw	r3,4(fp)
  80790c:	080bb040 	call	80bb04 <__subdf3>
  807910:	1009883a 	mov	r4,r2
  807914:	800d883a 	mov	r6,r16
  807918:	880f883a 	mov	r7,r17
  80791c:	180b883a 	mov	r5,r3
  807920:	080bb840 	call	80bb84 <__adddf3>
  807924:	1009883a 	mov	r4,r2
  807928:	00bfffc4 	movi	r2,-1
  80792c:	d8800b15 	stw	r2,44(sp)
  807930:	e0c00315 	stw	r3,12(fp)
  807934:	e1000215 	stw	r4,8(fp)
  807938:	003eec06 	br	8074ec <__ieee754_rem_pio2+0x64>
  80793c:	b005d53a 	srai	r2,r22,20
  807940:	4821883a 	mov	r16,r9
  807944:	05505c34 	movhi	r21,16752
  807948:	15fefa84 	addi	r23,r2,-1046
  80794c:	b826953a 	slli	r19,r23,20
  807950:	0029883a 	mov	r20,zero
  807954:	048000c4 	movi	r18,3
  807958:	b4e7c83a 	sub	r19,r22,r19
  80795c:	980b883a 	mov	r5,r19
  807960:	080c63c0 	call	80c63c <__fixdfsi>
  807964:	1009883a 	mov	r4,r2
  807968:	080c5440 	call	80c544 <__floatsidf>
  80796c:	980b883a 	mov	r5,r19
  807970:	8009883a 	mov	r4,r16
  807974:	180f883a 	mov	r7,r3
  807978:	100d883a 	mov	r6,r2
  80797c:	d8800215 	stw	r2,8(sp)
  807980:	d8c00315 	stw	r3,12(sp)
  807984:	080bb040 	call	80bb04 <__subdf3>
  807988:	180b883a 	mov	r5,r3
  80798c:	a00d883a 	mov	r6,r20
  807990:	a80f883a 	mov	r7,r21
  807994:	1009883a 	mov	r4,r2
  807998:	080bbf80 	call	80bbf8 <__muldf3>
  80799c:	180b883a 	mov	r5,r3
  8079a0:	1009883a 	mov	r4,r2
  8079a4:	1823883a 	mov	r17,r3
  8079a8:	1021883a 	mov	r16,r2
  8079ac:	080c63c0 	call	80c63c <__fixdfsi>
  8079b0:	1009883a 	mov	r4,r2
  8079b4:	080c5440 	call	80c544 <__floatsidf>
  8079b8:	880b883a 	mov	r5,r17
  8079bc:	8009883a 	mov	r4,r16
  8079c0:	180f883a 	mov	r7,r3
  8079c4:	100d883a 	mov	r6,r2
  8079c8:	d8800415 	stw	r2,16(sp)
  8079cc:	d8c00515 	stw	r3,20(sp)
  8079d0:	080bb040 	call	80bb04 <__subdf3>
  8079d4:	180b883a 	mov	r5,r3
  8079d8:	000d883a 	mov	r6,zero
  8079dc:	a80f883a 	mov	r7,r21
  8079e0:	1009883a 	mov	r4,r2
  8079e4:	080bbf80 	call	80bbf8 <__muldf3>
  8079e8:	d8c00715 	stw	r3,28(sp)
  8079ec:	d8800615 	stw	r2,24(sp)
  8079f0:	00000106 	br	8079f8 <__ieee754_rem_pio2+0x570>
  8079f4:	8025883a 	mov	r18,r16
  8079f8:	943fffc4 	addi	r16,r18,-1
  8079fc:	800890fa 	slli	r4,r16,3
  807a00:	d9400204 	addi	r5,sp,8
  807a04:	000d883a 	mov	r6,zero
  807a08:	2149883a 	add	r4,r4,r5
  807a0c:	20c00117 	ldw	r3,4(r4)
  807a10:	20800017 	ldw	r2,0(r4)
  807a14:	000f883a 	mov	r7,zero
  807a18:	180b883a 	mov	r5,r3
  807a1c:	1009883a 	mov	r4,r2
  807a20:	080c2140 	call	80c214 <__eqdf2>
  807a24:	103ff326 	beq	r2,zero,8079f4 <__ieee754_rem_pio2+0x56c>
  807a28:	00800084 	movi	r2,2
  807a2c:	00c020b4 	movhi	r3,130
  807a30:	18c64d04 	addi	r3,r3,6452
  807a34:	b80d883a 	mov	r6,r23
  807a38:	900f883a 	mov	r7,r18
  807a3c:	d9000204 	addi	r4,sp,8
  807a40:	e00b883a 	mov	r5,fp
  807a44:	d8800015 	stw	r2,0(sp)
  807a48:	d8c00115 	stw	r3,4(sp)
  807a4c:	08089080 	call	808908 <__kernel_rem_pio2>
  807a50:	d8800b15 	stw	r2,44(sp)
  807a54:	d8800a17 	ldw	r2,40(sp)
  807a58:	103ea40e 	bge	r2,zero,8074ec <__ieee754_rem_pio2+0x64>
  807a5c:	e0800117 	ldw	r2,4(fp)
  807a60:	d8c00b17 	ldw	r3,44(sp)
  807a64:	e1000204 	addi	r4,fp,8
  807a68:	10a0003c 	xorhi	r2,r2,32768
  807a6c:	00c7c83a 	sub	r3,zero,r3
  807a70:	e0800115 	stw	r2,4(fp)
  807a74:	d8c00b15 	stw	r3,44(sp)
  807a78:	20c00117 	ldw	r3,4(r4)
  807a7c:	18e0003c 	xorhi	r3,r3,32768
  807a80:	20c00115 	stw	r3,4(r4)
  807a84:	003e9906 	br	8074ec <__ieee754_rem_pio2+0x64>
  807a88:	00869834 	movhi	r2,6752
  807a8c:	00cf7474 	movhi	r3,15825
  807a90:	18ed1844 	addi	r3,r3,-19359
  807a94:	9009883a 	mov	r4,r18
  807a98:	980b883a 	mov	r5,r19
  807a9c:	180f883a 	mov	r7,r3
  807aa0:	100d883a 	mov	r6,r2
  807aa4:	080bb040 	call	80bb04 <__subdf3>
  807aa8:	048b80f4 	movhi	r18,11779
  807aac:	949c1cc4 	addi	r18,r18,28787
  807ab0:	04cee8f4 	movhi	r19,15267
  807ab4:	9cc66284 	addi	r19,r19,6538
  807ab8:	1009883a 	mov	r4,r2
  807abc:	180b883a 	mov	r5,r3
  807ac0:	900d883a 	mov	r6,r18
  807ac4:	980f883a 	mov	r7,r19
  807ac8:	1021883a 	mov	r16,r2
  807acc:	1823883a 	mov	r17,r3
  807ad0:	080bb040 	call	80bb04 <__subdf3>
  807ad4:	100d883a 	mov	r6,r2
  807ad8:	8009883a 	mov	r4,r16
  807adc:	880b883a 	mov	r5,r17
  807ae0:	180f883a 	mov	r7,r3
  807ae4:	e0800015 	stw	r2,0(fp)
  807ae8:	e0c00115 	stw	r3,4(fp)
  807aec:	080bb040 	call	80bb04 <__subdf3>
  807af0:	180b883a 	mov	r5,r3
  807af4:	1009883a 	mov	r4,r2
  807af8:	900d883a 	mov	r6,r18
  807afc:	980f883a 	mov	r7,r19
  807b00:	080bb040 	call	80bb04 <__subdf3>
  807b04:	180b883a 	mov	r5,r3
  807b08:	1009883a 	mov	r4,r2
  807b0c:	00c00044 	movi	r3,1
  807b10:	d8c00b15 	stw	r3,44(sp)
  807b14:	e1400315 	stw	r5,12(fp)
  807b18:	e1000215 	stw	r4,8(fp)
  807b1c:	003e7306 	br	8074ec <__ieee754_rem_pio2+0x64>
  807b20:	2105883a 	add	r2,r4,r4
  807b24:	1085883a 	add	r2,r2,r2
  807b28:	00c020b4 	movhi	r3,130
  807b2c:	18c62d04 	addi	r3,r3,6324
  807b30:	10c5883a 	add	r2,r2,r3
  807b34:	113fff17 	ldw	r4,-4(r2)
  807b38:	b13eef26 	beq	r22,r4,8076f8 <__ieee754_rem_pio2+0x270>
  807b3c:	980b883a 	mov	r5,r19
  807b40:	400f883a 	mov	r7,r8
  807b44:	9009883a 	mov	r4,r18
  807b48:	800d883a 	mov	r6,r16
  807b4c:	080bb040 	call	80bb04 <__subdf3>
  807b50:	e0c00115 	stw	r3,4(fp)
  807b54:	e0800015 	stw	r2,0(fp)
  807b58:	003f3a06 	br	807844 <__ieee754_rem_pio2+0x3bc>
  807b5c:	00869834 	movhi	r2,6752
  807b60:	00cf7474 	movhi	r3,15825
  807b64:	18ed1844 	addi	r3,r3,-19359
  807b68:	9009883a 	mov	r4,r18
  807b6c:	980b883a 	mov	r5,r19
  807b70:	180f883a 	mov	r7,r3
  807b74:	100d883a 	mov	r6,r2
  807b78:	080bb840 	call	80bb84 <__adddf3>
  807b7c:	048b80f4 	movhi	r18,11779
  807b80:	949c1cc4 	addi	r18,r18,28787
  807b84:	04cee8f4 	movhi	r19,15267
  807b88:	9cc66284 	addi	r19,r19,6538
  807b8c:	1009883a 	mov	r4,r2
  807b90:	180b883a 	mov	r5,r3
  807b94:	900d883a 	mov	r6,r18
  807b98:	980f883a 	mov	r7,r19
  807b9c:	1021883a 	mov	r16,r2
  807ba0:	1823883a 	mov	r17,r3
  807ba4:	080bb840 	call	80bb84 <__adddf3>
  807ba8:	100d883a 	mov	r6,r2
  807bac:	8009883a 	mov	r4,r16
  807bb0:	880b883a 	mov	r5,r17
  807bb4:	180f883a 	mov	r7,r3
  807bb8:	e0800015 	stw	r2,0(fp)
  807bbc:	e0c00115 	stw	r3,4(fp)
  807bc0:	080bb040 	call	80bb04 <__subdf3>
  807bc4:	180b883a 	mov	r5,r3
  807bc8:	1009883a 	mov	r4,r2
  807bcc:	900d883a 	mov	r6,r18
  807bd0:	980f883a 	mov	r7,r19
  807bd4:	080bb840 	call	80bb84 <__adddf3>
  807bd8:	180b883a 	mov	r5,r3
  807bdc:	1009883a 	mov	r4,r2
  807be0:	00ffffc4 	movi	r3,-1
  807be4:	d8c00b15 	stw	r3,44(sp)
  807be8:	e1400315 	stw	r5,12(fp)
  807bec:	e1000215 	stw	r4,8(fp)
  807bf0:	003e3e06 	br	8074ec <__ieee754_rem_pio2+0x64>
  807bf4:	d9000c17 	ldw	r4,48(sp)
  807bf8:	d9400d17 	ldw	r5,52(sp)
  807bfc:	018b8034 	movhi	r6,11776
  807c00:	b80f883a 	mov	r7,r23
  807c04:	080bbf80 	call	80bbf8 <__muldf3>
  807c08:	d9000817 	ldw	r4,32(sp)
  807c0c:	d9401217 	ldw	r5,72(sp)
  807c10:	100d883a 	mov	r6,r2
  807c14:	180f883a 	mov	r7,r3
  807c18:	1025883a 	mov	r18,r2
  807c1c:	1827883a 	mov	r19,r3
  807c20:	080bb040 	call	80bb04 <__subdf3>
  807c24:	d9400d17 	ldw	r5,52(sp)
  807c28:	d9000c17 	ldw	r4,48(sp)
  807c2c:	02094834 	movhi	r8,9504
  807c30:	42127044 	addi	r8,r8,18881
  807c34:	024e5f34 	movhi	r9,14716
  807c38:	4a60e684 	addi	r9,r9,-31846
  807c3c:	480f883a 	mov	r7,r9
  807c40:	400d883a 	mov	r6,r8
  807c44:	182b883a 	mov	r21,r3
  807c48:	d8800e15 	stw	r2,56(sp)
  807c4c:	080bbf80 	call	80bbf8 <__muldf3>
  807c50:	d9000817 	ldw	r4,32(sp)
  807c54:	d9401217 	ldw	r5,72(sp)
  807c58:	d9800e17 	ldw	r6,56(sp)
  807c5c:	a80f883a 	mov	r7,r21
  807c60:	1021883a 	mov	r16,r2
  807c64:	1823883a 	mov	r17,r3
  807c68:	dd400f15 	stw	r21,60(sp)
  807c6c:	080bb040 	call	80bb04 <__subdf3>
  807c70:	180b883a 	mov	r5,r3
  807c74:	900d883a 	mov	r6,r18
  807c78:	980f883a 	mov	r7,r19
  807c7c:	1009883a 	mov	r4,r2
  807c80:	080bb040 	call	80bb04 <__subdf3>
  807c84:	180f883a 	mov	r7,r3
  807c88:	880b883a 	mov	r5,r17
  807c8c:	8009883a 	mov	r4,r16
  807c90:	100d883a 	mov	r6,r2
  807c94:	080bb040 	call	80bb04 <__subdf3>
  807c98:	d9000e17 	ldw	r4,56(sp)
  807c9c:	1021883a 	mov	r16,r2
  807ca0:	1823883a 	mov	r17,r3
  807ca4:	a80b883a 	mov	r5,r21
  807ca8:	180f883a 	mov	r7,r3
  807cac:	003fa606 	br	807b48 <__ieee754_rem_pio2+0x6c0>

00807cb0 <__ieee754_sinh>:
  807cb0:	defff904 	addi	sp,sp,-28
  807cb4:	00a00034 	movhi	r2,32768
  807cb8:	10bfffc4 	addi	r2,r2,-1
  807cbc:	dc800215 	stw	r18,8(sp)
  807cc0:	28a4703a 	and	r18,r5,r2
  807cc4:	009ffc34 	movhi	r2,32752
  807cc8:	10bfffc4 	addi	r2,r2,-1
  807ccc:	dc400115 	stw	r17,4(sp)
  807cd0:	dc000015 	stw	r16,0(sp)
  807cd4:	dfc00615 	stw	ra,24(sp)
  807cd8:	dd400515 	stw	r21,20(sp)
  807cdc:	dd000415 	stw	r20,16(sp)
  807ce0:	dcc00315 	stw	r19,12(sp)
  807ce4:	2021883a 	mov	r16,r4
  807ce8:	2823883a 	mov	r17,r5
  807cec:	1480100e 	bge	r2,r18,807d30 <__ieee754_sinh+0x80>
  807cf0:	800d883a 	mov	r6,r16
  807cf4:	280f883a 	mov	r7,r5
  807cf8:	080bb840 	call	80bb84 <__adddf3>
  807cfc:	1021883a 	mov	r16,r2
  807d00:	1823883a 	mov	r17,r3
  807d04:	8005883a 	mov	r2,r16
  807d08:	8807883a 	mov	r3,r17
  807d0c:	dfc00617 	ldw	ra,24(sp)
  807d10:	dd400517 	ldw	r21,20(sp)
  807d14:	dd000417 	ldw	r20,16(sp)
  807d18:	dcc00317 	ldw	r19,12(sp)
  807d1c:	dc800217 	ldw	r18,8(sp)
  807d20:	dc400117 	ldw	r17,4(sp)
  807d24:	dc000017 	ldw	r16,0(sp)
  807d28:	dec00704 	addi	sp,sp,28
  807d2c:	f800283a 	ret
  807d30:	28005616 	blt	r5,zero,807e8c <__ieee754_sinh+0x1dc>
  807d34:	0029883a 	mov	r20,zero
  807d38:	054ff834 	movhi	r21,16352
  807d3c:	00900db4 	movhi	r2,16438
  807d40:	10bfffc4 	addi	r2,r2,-1
  807d44:	14803c16 	blt	r2,r18,807e38 <__ieee754_sinh+0x188>
  807d48:	008f8c34 	movhi	r2,15920
  807d4c:	10bfffc4 	addi	r2,r2,-1
  807d50:	14805116 	blt	r2,r18,807e98 <__ieee754_sinh+0x1e8>
  807d54:	008f2b34 	movhi	r2,15532
  807d58:	109d0cc4 	addi	r2,r2,29747
  807d5c:	00dfeb34 	movhi	r3,32684
  807d60:	18dec7c4 	addi	r3,r3,31519
  807d64:	180f883a 	mov	r7,r3
  807d68:	8009883a 	mov	r4,r16
  807d6c:	880b883a 	mov	r5,r17
  807d70:	100d883a 	mov	r6,r2
  807d74:	080bb840 	call	80bb84 <__adddf3>
  807d78:	0011883a 	mov	r8,zero
  807d7c:	024ffc34 	movhi	r9,16368
  807d80:	180b883a 	mov	r5,r3
  807d84:	480f883a 	mov	r7,r9
  807d88:	1009883a 	mov	r4,r2
  807d8c:	400d883a 	mov	r6,r8
  807d90:	080c3240 	call	80c324 <__gtdf2>
  807d94:	00bfdb16 	blt	zero,r2,807d04 <__ieee754_sinh+0x54>
  807d98:	880b883a 	mov	r5,r17
  807d9c:	8009883a 	mov	r4,r16
  807da0:	080175c0 	call	80175c <fabs>
  807da4:	180b883a 	mov	r5,r3
  807da8:	1009883a 	mov	r4,r2
  807dac:	080a2440 	call	80a244 <expm1>
  807db0:	1021883a 	mov	r16,r2
  807db4:	1823883a 	mov	r17,r3
  807db8:	8009883a 	mov	r4,r16
  807dbc:	880b883a 	mov	r5,r17
  807dc0:	800d883a 	mov	r6,r16
  807dc4:	880f883a 	mov	r7,r17
  807dc8:	080bb840 	call	80bb84 <__adddf3>
  807dcc:	8009883a 	mov	r4,r16
  807dd0:	880b883a 	mov	r5,r17
  807dd4:	800d883a 	mov	r6,r16
  807dd8:	880f883a 	mov	r7,r17
  807ddc:	1025883a 	mov	r18,r2
  807de0:	1827883a 	mov	r19,r3
  807de4:	080bbf80 	call	80bbf8 <__muldf3>
  807de8:	0011883a 	mov	r8,zero
  807dec:	024ffc34 	movhi	r9,16368
  807df0:	480f883a 	mov	r7,r9
  807df4:	400d883a 	mov	r6,r8
  807df8:	880b883a 	mov	r5,r17
  807dfc:	8009883a 	mov	r4,r16
  807e00:	1823883a 	mov	r17,r3
  807e04:	1021883a 	mov	r16,r2
  807e08:	080bb840 	call	80bb84 <__adddf3>
  807e0c:	180f883a 	mov	r7,r3
  807e10:	880b883a 	mov	r5,r17
  807e14:	8009883a 	mov	r4,r16
  807e18:	100d883a 	mov	r6,r2
  807e1c:	080bfbc0 	call	80bfbc <__divdf3>
  807e20:	180f883a 	mov	r7,r3
  807e24:	980b883a 	mov	r5,r19
  807e28:	9009883a 	mov	r4,r18
  807e2c:	100d883a 	mov	r6,r2
  807e30:	080bb040 	call	80bb04 <__subdf3>
  807e34:	00003b06 	br	807f24 <__ieee754_sinh+0x274>
  807e38:	009021b4 	movhi	r2,16518
  807e3c:	108b9044 	addi	r2,r2,11841
  807e40:	1480320e 	bge	r2,r18,807f0c <__ieee754_sinh+0x25c>
  807e44:	011021b4 	movhi	r4,16518
  807e48:	210cf344 	addi	r4,r4,13261
  807e4c:	24803d0e 	bge	r4,r18,807f44 <__ieee754_sinh+0x294>
  807e50:	009021b4 	movhi	r2,16518
  807e54:	108cf384 	addi	r2,r2,13262
  807e58:	90803726 	beq	r18,r2,807f38 <__ieee754_sinh+0x288>
  807e5c:	008f2b34 	movhi	r2,15532
  807e60:	109d0cc4 	addi	r2,r2,29747
  807e64:	00dfeb34 	movhi	r3,32684
  807e68:	18dec7c4 	addi	r3,r3,31519
  807e6c:	880b883a 	mov	r5,r17
  807e70:	180f883a 	mov	r7,r3
  807e74:	8009883a 	mov	r4,r16
  807e78:	100d883a 	mov	r6,r2
  807e7c:	080bbf80 	call	80bbf8 <__muldf3>
  807e80:	1021883a 	mov	r16,r2
  807e84:	1823883a 	mov	r17,r3
  807e88:	003f9e06 	br	807d04 <__ieee754_sinh+0x54>
  807e8c:	0029883a 	mov	r20,zero
  807e90:	056ff834 	movhi	r21,49120
  807e94:	003fa906 	br	807d3c <__ieee754_sinh+0x8c>
  807e98:	880b883a 	mov	r5,r17
  807e9c:	8009883a 	mov	r4,r16
  807ea0:	080175c0 	call	80175c <fabs>
  807ea4:	180b883a 	mov	r5,r3
  807ea8:	1009883a 	mov	r4,r2
  807eac:	080a2440 	call	80a244 <expm1>
  807eb0:	1021883a 	mov	r16,r2
  807eb4:	008ffc34 	movhi	r2,16368
  807eb8:	10bfffc4 	addi	r2,r2,-1
  807ebc:	1823883a 	mov	r17,r3
  807ec0:	14bfbd0e 	bge	r2,r18,807db8 <__ieee754_sinh+0x108>
  807ec4:	0005883a 	mov	r2,zero
  807ec8:	00cffc34 	movhi	r3,16368
  807ecc:	8009883a 	mov	r4,r16
  807ed0:	880b883a 	mov	r5,r17
  807ed4:	180f883a 	mov	r7,r3
  807ed8:	100d883a 	mov	r6,r2
  807edc:	080bb840 	call	80bb84 <__adddf3>
  807ee0:	180f883a 	mov	r7,r3
  807ee4:	8009883a 	mov	r4,r16
  807ee8:	880b883a 	mov	r5,r17
  807eec:	100d883a 	mov	r6,r2
  807ef0:	080bfbc0 	call	80bfbc <__divdf3>
  807ef4:	180f883a 	mov	r7,r3
  807ef8:	880b883a 	mov	r5,r17
  807efc:	8009883a 	mov	r4,r16
  807f00:	100d883a 	mov	r6,r2
  807f04:	080bb840 	call	80bb84 <__adddf3>
  807f08:	00000606 	br	807f24 <__ieee754_sinh+0x274>
  807f0c:	880b883a 	mov	r5,r17
  807f10:	8009883a 	mov	r4,r16
  807f14:	080175c0 	call	80175c <fabs>
  807f18:	180b883a 	mov	r5,r3
  807f1c:	1009883a 	mov	r4,r2
  807f20:	0804e1c0 	call	804e1c <__ieee754_exp>
  807f24:	a80b883a 	mov	r5,r21
  807f28:	180f883a 	mov	r7,r3
  807f2c:	a009883a 	mov	r4,r20
  807f30:	100d883a 	mov	r6,r2
  807f34:	003fd106 	br	807e7c <__ieee754_sinh+0x1cc>
  807f38:	00a3eeb4 	movhi	r2,36794
  807f3c:	10be1f44 	addi	r2,r2,-1923
  807f40:	143fc636 	bltu	r2,r16,807e5c <__ieee754_sinh+0x1ac>
  807f44:	880b883a 	mov	r5,r17
  807f48:	8009883a 	mov	r4,r16
  807f4c:	080175c0 	call	80175c <fabs>
  807f50:	0011883a 	mov	r8,zero
  807f54:	024ff834 	movhi	r9,16352
  807f58:	480f883a 	mov	r7,r9
  807f5c:	400d883a 	mov	r6,r8
  807f60:	180b883a 	mov	r5,r3
  807f64:	1009883a 	mov	r4,r2
  807f68:	080bbf80 	call	80bbf8 <__muldf3>
  807f6c:	180b883a 	mov	r5,r3
  807f70:	1009883a 	mov	r4,r2
  807f74:	0804e1c0 	call	804e1c <__ieee754_exp>
  807f78:	100d883a 	mov	r6,r2
  807f7c:	a80b883a 	mov	r5,r21
  807f80:	a009883a 	mov	r4,r20
  807f84:	180f883a 	mov	r7,r3
  807f88:	1021883a 	mov	r16,r2
  807f8c:	1823883a 	mov	r17,r3
  807f90:	080bbf80 	call	80bbf8 <__muldf3>
  807f94:	180f883a 	mov	r7,r3
  807f98:	880b883a 	mov	r5,r17
  807f9c:	8009883a 	mov	r4,r16
  807fa0:	100d883a 	mov	r6,r2
  807fa4:	003fb506 	br	807e7c <__ieee754_sinh+0x1cc>

00807fa8 <__ieee754_sqrt>:
  807fa8:	defffd04 	addi	sp,sp,-12
  807fac:	dc000015 	stw	r16,0(sp)
  807fb0:	009ffc34 	movhi	r2,32752
  807fb4:	2021883a 	mov	r16,r4
  807fb8:	291ffc2c 	andhi	r4,r5,32752
  807fbc:	dc400115 	stw	r17,4(sp)
  807fc0:	dfc00215 	stw	ra,8(sp)
  807fc4:	2823883a 	mov	r17,r5
  807fc8:	280f883a 	mov	r7,r5
  807fcc:	2807883a 	mov	r3,r5
  807fd0:	8011883a 	mov	r8,r16
  807fd4:	20807d26 	beq	r4,r2,8081cc <__ieee754_sqrt+0x224>
  807fd8:	01408d0e 	bge	zero,r5,808210 <__ieee754_sqrt+0x268>
  807fdc:	380dd53a 	srai	r6,r7,20
  807fe0:	3000131e 	bne	r6,zero,808030 <__ieee754_sqrt+0x88>
  807fe4:	1800041e 	bne	r3,zero,807ff8 <__ieee754_sqrt+0x50>
  807fe8:	400ed2fa 	srli	r7,r8,11
  807fec:	31bffac4 	addi	r6,r6,-21
  807ff0:	4010957a 	slli	r8,r8,21
  807ff4:	383ffc26 	beq	r7,zero,807fe8 <__ieee754_sqrt+0x40>
  807ff8:	3880042c 	andhi	r2,r7,16
  807ffc:	1000991e 	bne	r2,zero,808264 <__ieee754_sqrt+0x2bc>
  808000:	0009883a 	mov	r4,zero
  808004:	39cf883a 	add	r7,r7,r7
  808008:	3880042c 	andhi	r2,r7,16
  80800c:	21000044 	addi	r4,r4,1
  808010:	103ffc26 	beq	r2,zero,808004 <__ieee754_sqrt+0x5c>
  808014:	00800804 	movi	r2,32
  808018:	1105c83a 	sub	r2,r2,r4
  80801c:	4086d83a 	srl	r3,r8,r2
  808020:	4110983a 	sll	r8,r8,r4
  808024:	3105c83a 	sub	r2,r6,r4
  808028:	38ceb03a 	or	r7,r7,r3
  80802c:	11800044 	addi	r6,r2,1
  808030:	31bf0044 	addi	r6,r6,-1023
  808034:	30c0004c 	andi	r3,r6,1
  808038:	00800434 	movhi	r2,16
  80803c:	10bfffc4 	addi	r2,r2,-1
  808040:	3884703a 	and	r2,r7,r2
  808044:	1807003a 	cmpeq	r3,r3,zero
  808048:	11000434 	orhi	r4,r2,16
  80804c:	18005426 	beq	r3,zero,8081a0 <__ieee754_sqrt+0x1f8>
  808050:	4004d7fa 	srli	r2,r8,31
  808054:	4207883a 	add	r3,r8,r8
  808058:	02800834 	movhi	r10,32
  80805c:	1105883a 	add	r2,r2,r4
  808060:	2089883a 	add	r4,r4,r2
  808064:	0011883a 	mov	r8,zero
  808068:	000b883a 	mov	r5,zero
  80806c:	0013883a 	mov	r9,zero
  808070:	02c00584 	movi	r11,22
  808074:	520f883a 	add	r7,r10,r8
  808078:	1804d7fa 	srli	r2,r3,31
  80807c:	4a400044 	addi	r9,r9,1
  808080:	18c7883a 	add	r3,r3,r3
  808084:	21c00316 	blt	r4,r7,808094 <__ieee754_sqrt+0xec>
  808088:	21c9c83a 	sub	r4,r4,r7
  80808c:	2a8b883a 	add	r5,r5,r10
  808090:	51d1883a 	add	r8,r10,r7
  808094:	1105883a 	add	r2,r2,r4
  808098:	5014d07a 	srli	r10,r10,1
  80809c:	2089883a 	add	r4,r4,r2
  8080a0:	4afff41e 	bne	r9,r11,808074 <__ieee754_sqrt+0xcc>
  8080a4:	02600034 	movhi	r9,32768
  8080a8:	0017883a 	mov	r11,zero
  8080ac:	0019883a 	mov	r12,zero
  8080b0:	0015883a 	mov	r10,zero
  8080b4:	4821883a 	mov	r16,r9
  8080b8:	03c00804 	movi	r15,32
  8080bc:	00000806 	br	8080e0 <__ieee754_sqrt+0x138>
  8080c0:	22003426 	beq	r4,r8,808194 <__ieee754_sqrt+0x1ec>
  8080c4:	1804d7fa 	srli	r2,r3,31
  8080c8:	52800044 	addi	r10,r10,1
  8080cc:	18c7883a 	add	r3,r3,r3
  8080d0:	1105883a 	add	r2,r2,r4
  8080d4:	2089883a 	add	r4,r4,r2
  8080d8:	4812d07a 	srli	r9,r9,1
  8080dc:	53c01326 	beq	r10,r15,80812c <__ieee754_sqrt+0x184>
  8080e0:	4acf883a 	add	r7,r9,r11
  8080e4:	413ff60e 	bge	r8,r4,8080c0 <__ieee754_sqrt+0x118>
  8080e8:	38a0002c 	andhi	r2,r7,32768
  8080ec:	3a57883a 	add	r11,r7,r9
  8080f0:	14002426 	beq	r2,r16,808184 <__ieee754_sqrt+0x1dc>
  8080f4:	4005883a 	mov	r2,r8
  8080f8:	2209c83a 	sub	r4,r4,r8
  8080fc:	19c0012e 	bgeu	r3,r7,808104 <__ieee754_sqrt+0x15c>
  808100:	213fffc4 	addi	r4,r4,-1
  808104:	19c7c83a 	sub	r3,r3,r7
  808108:	1011883a 	mov	r8,r2
  80810c:	1804d7fa 	srli	r2,r3,31
  808110:	52800044 	addi	r10,r10,1
  808114:	6259883a 	add	r12,r12,r9
  808118:	1105883a 	add	r2,r2,r4
  80811c:	18c7883a 	add	r3,r3,r3
  808120:	2089883a 	add	r4,r4,r2
  808124:	4812d07a 	srli	r9,r9,1
  808128:	53ffed1e 	bne	r10,r15,8080e0 <__ieee754_sqrt+0x138>
  80812c:	20c4b03a 	or	r2,r4,r3
  808130:	1000201e 	bne	r2,zero,8081b4 <__ieee754_sqrt+0x20c>
  808134:	600ed07a 	srli	r7,r12,1
  808138:	2880004c 	andi	r2,r5,1
  80813c:	1005003a 	cmpeq	r2,r2,zero
  808140:	1000011e 	bne	r2,zero,808148 <__ieee754_sqrt+0x1a0>
  808144:	39e00034 	orhi	r7,r7,32768
  808148:	300dd07a 	srai	r6,r6,1
  80814c:	280bd07a 	srai	r5,r5,1
  808150:	010ff834 	movhi	r4,16352
  808154:	300c953a 	slli	r6,r6,20
  808158:	290b883a 	add	r5,r5,r4
  80815c:	3821883a 	mov	r16,r7
  808160:	299d883a 	add	r14,r5,r6
  808164:	7023883a 	mov	r17,r14
  808168:	8005883a 	mov	r2,r16
  80816c:	8807883a 	mov	r3,r17
  808170:	dfc00217 	ldw	ra,8(sp)
  808174:	dc400117 	ldw	r17,4(sp)
  808178:	dc000017 	ldw	r16,0(sp)
  80817c:	dec00304 	addi	sp,sp,12
  808180:	f800283a 	ret
  808184:	5884703a 	and	r2,r11,r2
  808188:	103fda1e 	bne	r2,zero,8080f4 <__ieee754_sqrt+0x14c>
  80818c:	40800044 	addi	r2,r8,1
  808190:	003fd906 	br	8080f8 <__ieee754_sqrt+0x150>
  808194:	19ffd42e 	bgeu	r3,r7,8080e8 <__ieee754_sqrt+0x140>
  808198:	2011883a 	mov	r8,r4
  80819c:	003fc906 	br	8080c4 <__ieee754_sqrt+0x11c>
  8081a0:	4004d7fa 	srli	r2,r8,31
  8081a4:	4211883a 	add	r8,r8,r8
  8081a8:	1105883a 	add	r2,r2,r4
  8081ac:	2089883a 	add	r4,r4,r2
  8081b0:	003fa706 	br	808050 <__ieee754_sqrt+0xa8>
  8081b4:	00bfffc4 	movi	r2,-1
  8081b8:	60802726 	beq	r12,r2,808258 <__ieee754_sqrt+0x2b0>
  8081bc:	6080004c 	andi	r2,r12,1
  8081c0:	6085883a 	add	r2,r12,r2
  8081c4:	100ed07a 	srli	r7,r2,1
  8081c8:	003fdb06 	br	808138 <__ieee754_sqrt+0x190>
  8081cc:	8009883a 	mov	r4,r16
  8081d0:	800d883a 	mov	r6,r16
  8081d4:	080bbf80 	call	80bbf8 <__muldf3>
  8081d8:	180f883a 	mov	r7,r3
  8081dc:	880b883a 	mov	r5,r17
  8081e0:	8009883a 	mov	r4,r16
  8081e4:	100d883a 	mov	r6,r2
  8081e8:	080bb840 	call	80bb84 <__adddf3>
  8081ec:	1021883a 	mov	r16,r2
  8081f0:	1823883a 	mov	r17,r3
  8081f4:	8005883a 	mov	r2,r16
  8081f8:	8807883a 	mov	r3,r17
  8081fc:	dfc00217 	ldw	ra,8(sp)
  808200:	dc400117 	ldw	r17,4(sp)
  808204:	dc000017 	ldw	r16,0(sp)
  808208:	dec00304 	addi	sp,sp,12
  80820c:	f800283a 	ret
  808210:	00a00034 	movhi	r2,32768
  808214:	10bfffc4 	addi	r2,r2,-1
  808218:	2884703a 	and	r2,r5,r2
  80821c:	8084b03a 	or	r2,r16,r2
  808220:	103fd126 	beq	r2,zero,808168 <__ieee754_sqrt+0x1c0>
  808224:	283f6d26 	beq	r5,zero,807fdc <__ieee754_sqrt+0x34>
  808228:	280f883a 	mov	r7,r5
  80822c:	8009883a 	mov	r4,r16
  808230:	800d883a 	mov	r6,r16
  808234:	080bb040 	call	80bb04 <__subdf3>
  808238:	1009883a 	mov	r4,r2
  80823c:	180b883a 	mov	r5,r3
  808240:	100d883a 	mov	r6,r2
  808244:	180f883a 	mov	r7,r3
  808248:	080bfbc0 	call	80bfbc <__divdf3>
  80824c:	1021883a 	mov	r16,r2
  808250:	1823883a 	mov	r17,r3
  808254:	003fc406 	br	808168 <__ieee754_sqrt+0x1c0>
  808258:	29400044 	addi	r5,r5,1
  80825c:	000f883a 	mov	r7,zero
  808260:	003fb506 	br	808138 <__ieee754_sqrt+0x190>
  808264:	0009883a 	mov	r4,zero
  808268:	00800804 	movi	r2,32
  80826c:	003f6b06 	br	80801c <__ieee754_sqrt+0x74>

00808270 <__ieee754_sqrtf>:
  808270:	00a00034 	movhi	r2,32768
  808274:	10bfffc4 	addi	r2,r2,-1
  808278:	defffe04 	addi	sp,sp,-8
  80827c:	208c703a 	and	r6,r4,r2
  808280:	00dfe034 	movhi	r3,32640
  808284:	18ffffc4 	addi	r3,r3,-1
  808288:	dc000015 	stw	r16,0(sp)
  80828c:	dfc00115 	stw	ra,4(sp)
  808290:	2021883a 	mov	r16,r4
  808294:	200b883a 	mov	r5,r4
  808298:	19800a2e 	bgeu	r3,r6,8082c4 <__ieee754_sqrtf+0x54>
  80829c:	080b19c0 	call	80b19c <__mulsf3>
  8082a0:	100b883a 	mov	r5,r2
  8082a4:	8009883a 	mov	r4,r16
  8082a8:	080b1380 	call	80b138 <__addsf3>
  8082ac:	1021883a 	mov	r16,r2
  8082b0:	8005883a 	mov	r2,r16
  8082b4:	dfc00117 	ldw	ra,4(sp)
  8082b8:	dc000017 	ldw	r16,0(sp)
  8082bc:	dec00204 	addi	sp,sp,8
  8082c0:	f800283a 	ret
  8082c4:	303ffa26 	beq	r6,zero,8082b0 <__ieee754_sqrtf+0x40>
  8082c8:	20003b16 	blt	r4,zero,8083b8 <__ieee754_sqrtf+0x148>
  8082cc:	00802034 	movhi	r2,128
  8082d0:	10bfffc4 	addi	r2,r2,-1
  8082d4:	2007d5fa 	srai	r3,r4,23
  8082d8:	11800936 	bltu	r2,r6,808300 <__ieee754_sqrtf+0x90>
  8082dc:	2080202c 	andhi	r2,r4,128
  8082e0:	10003c1e 	bne	r2,zero,8083d4 <__ieee754_sqrtf+0x164>
  8082e4:	0009883a 	mov	r4,zero
  8082e8:	294b883a 	add	r5,r5,r5
  8082ec:	2880202c 	andhi	r2,r5,128
  8082f0:	21000044 	addi	r4,r4,1
  8082f4:	103ffc26 	beq	r2,zero,8082e8 <__ieee754_sqrtf+0x78>
  8082f8:	1905c83a 	sub	r2,r3,r4
  8082fc:	10c00044 	addi	r3,r2,1
  808300:	1a7fe044 	addi	r9,r3,-127
  808304:	48c0004c 	andi	r3,r9,1
  808308:	00802034 	movhi	r2,128
  80830c:	10bfffc4 	addi	r2,r2,-1
  808310:	2884703a 	and	r2,r5,r2
  808314:	1807003a 	cmpeq	r3,r3,zero
  808318:	10802034 	orhi	r2,r2,128
  80831c:	18002426 	beq	r3,zero,8083b0 <__ieee754_sqrtf+0x140>
  808320:	1085883a 	add	r2,r2,r2
  808324:	01404034 	movhi	r5,256
  808328:	000f883a 	mov	r7,zero
  80832c:	0007883a 	mov	r3,zero
  808330:	000d883a 	mov	r6,zero
  808334:	02000644 	movi	r8,25
  808338:	3949883a 	add	r4,r7,r5
  80833c:	31800044 	addi	r6,r6,1
  808340:	11000316 	blt	r2,r4,808350 <__ieee754_sqrtf+0xe0>
  808344:	1105c83a 	sub	r2,r2,r4
  808348:	1947883a 	add	r3,r3,r5
  80834c:	214f883a 	add	r7,r4,r5
  808350:	1085883a 	add	r2,r2,r2
  808354:	280ad07a 	srli	r5,r5,1
  808358:	323ff71e 	bne	r6,r8,808338 <__ieee754_sqrtf+0xc8>
  80835c:	10000b1e 	bne	r2,zero,80838c <__ieee754_sqrtf+0x11c>
  808360:	4805d07a 	srai	r2,r9,1
  808364:	1807d07a 	srai	r3,r3,1
  808368:	010fc034 	movhi	r4,16128
  80836c:	100495fa 	slli	r2,r2,23
  808370:	1907883a 	add	r3,r3,r4
  808374:	18a1883a 	add	r16,r3,r2
  808378:	8005883a 	mov	r2,r16
  80837c:	dfc00117 	ldw	ra,4(sp)
  808380:	dc000017 	ldw	r16,0(sp)
  808384:	dec00204 	addi	sp,sp,8
  808388:	f800283a 	ret
  80838c:	1880004c 	andi	r2,r3,1
  808390:	1887883a 	add	r3,r3,r2
  808394:	4805d07a 	srai	r2,r9,1
  808398:	1807d07a 	srai	r3,r3,1
  80839c:	010fc034 	movhi	r4,16128
  8083a0:	100495fa 	slli	r2,r2,23
  8083a4:	1907883a 	add	r3,r3,r4
  8083a8:	18a1883a 	add	r16,r3,r2
  8083ac:	003ff206 	br	808378 <__ieee754_sqrtf+0x108>
  8083b0:	1085883a 	add	r2,r2,r2
  8083b4:	003fda06 	br	808320 <__ieee754_sqrtf+0xb0>
  8083b8:	200b883a 	mov	r5,r4
  8083bc:	080b0c80 	call	80b0c8 <__subsf3>
  8083c0:	1009883a 	mov	r4,r2
  8083c4:	100b883a 	mov	r5,r2
  8083c8:	080b37c0 	call	80b37c <__divsf3>
  8083cc:	1021883a 	mov	r16,r2
  8083d0:	003fb706 	br	8082b0 <__ieee754_sqrtf+0x40>
  8083d4:	0009883a 	mov	r4,zero
  8083d8:	003fc706 	br	8082f8 <__ieee754_sqrtf+0x88>

008083dc <__kernel_cos>:
  8083dc:	defff104 	addi	sp,sp,-60
  8083e0:	00a00034 	movhi	r2,32768
  8083e4:	10bfffc4 	addi	r2,r2,-1
  8083e8:	dd800c15 	stw	r22,48(sp)
  8083ec:	116c703a 	and	r22,r2,r5
  8083f0:	0005883a 	mov	r2,zero
  8083f4:	dd000a15 	stw	r20,40(sp)
  8083f8:	d8800215 	stw	r2,8(sp)
  8083fc:	2029883a 	mov	r20,r4
  808400:	008f9034 	movhi	r2,15936
  808404:	10bfffc4 	addi	r2,r2,-1
  808408:	0009883a 	mov	r4,zero
  80840c:	dd400b15 	stw	r21,44(sp)
  808410:	dfc00e15 	stw	ra,56(sp)
  808414:	ddc00d15 	stw	r23,52(sp)
  808418:	dcc00915 	stw	r19,36(sp)
  80841c:	dc800815 	stw	r18,32(sp)
  808420:	dc400715 	stw	r17,28(sp)
  808424:	dc000615 	stw	r16,24(sp)
  808428:	282b883a 	mov	r21,r5
  80842c:	d9800415 	stw	r6,16(sp)
  808430:	d9c00515 	stw	r7,20(sp)
  808434:	d9000315 	stw	r4,12(sp)
  808438:	15809216 	blt	r2,r22,808684 <__kernel_cos+0x2a8>
  80843c:	a009883a 	mov	r4,r20
  808440:	080c63c0 	call	80c63c <__fixdfsi>
  808444:	10011c26 	beq	r2,zero,8088b8 <__kernel_cos+0x4dc>
  808448:	a009883a 	mov	r4,r20
  80844c:	a80b883a 	mov	r5,r21
  808450:	a00d883a 	mov	r6,r20
  808454:	a80f883a 	mov	r7,r21
  808458:	080bbf80 	call	80bbf8 <__muldf3>
  80845c:	1021883a 	mov	r16,r2
  808460:	1823883a 	mov	r17,r3
  808464:	1025883a 	mov	r18,r2
  808468:	1827883a 	mov	r19,r3
  80846c:	00afa234 	movhi	r2,48776
  808470:	108e3504 	addi	r2,r2,14548
  808474:	00ef6a74 	movhi	r3,48553
  808478:	18feba44 	addi	r3,r3,-1303
  80847c:	8009883a 	mov	r4,r16
  808480:	880b883a 	mov	r5,r17
  808484:	180f883a 	mov	r7,r3
  808488:	100d883a 	mov	r6,r2
  80848c:	080bbf80 	call	80bbf8 <__muldf3>
  808490:	022f6d74 	movhi	r8,48565
  808494:	422c7104 	addi	r8,r8,-20028
  808498:	024f88b4 	movhi	r9,15906
  80849c:	4a7ba784 	addi	r9,r9,-4450
  8084a0:	480f883a 	mov	r7,r9
  8084a4:	400d883a 	mov	r6,r8
  8084a8:	180b883a 	mov	r5,r3
  8084ac:	1009883a 	mov	r4,r2
  8084b0:	080bb840 	call	80bb84 <__adddf3>
  8084b4:	180f883a 	mov	r7,r3
  8084b8:	8009883a 	mov	r4,r16
  8084bc:	880b883a 	mov	r5,r17
  8084c0:	100d883a 	mov	r6,r2
  8084c4:	080bbf80 	call	80bbf8 <__muldf3>
  8084c8:	02202734 	movhi	r8,32924
  8084cc:	4214ab44 	addi	r8,r8,21165
  8084d0:	024fa4b4 	movhi	r9,16018
  8084d4:	4a5f93c4 	addi	r9,r9,32335
  8084d8:	480f883a 	mov	r7,r9
  8084dc:	400d883a 	mov	r6,r8
  8084e0:	180b883a 	mov	r5,r3
  8084e4:	1009883a 	mov	r4,r2
  8084e8:	080bb040 	call	80bb04 <__subdf3>
  8084ec:	180f883a 	mov	r7,r3
  8084f0:	8009883a 	mov	r4,r16
  8084f4:	880b883a 	mov	r5,r17
  8084f8:	100d883a 	mov	r6,r2
  8084fc:	080bbf80 	call	80bbf8 <__muldf3>
  808500:	020672f4 	movhi	r8,6603
  808504:	42056404 	addi	r8,r8,5520
  808508:	024fbeb4 	movhi	r9,16122
  80850c:	4a406804 	addi	r9,r9,416
  808510:	480f883a 	mov	r7,r9
  808514:	400d883a 	mov	r6,r8
  808518:	180b883a 	mov	r5,r3
  80851c:	1009883a 	mov	r4,r2
  808520:	080bb840 	call	80bb84 <__adddf3>
  808524:	180f883a 	mov	r7,r3
  808528:	8009883a 	mov	r4,r16
  80852c:	880b883a 	mov	r5,r17
  808530:	100d883a 	mov	r6,r2
  808534:	080bbf80 	call	80bbf8 <__muldf3>
  808538:	0205b074 	movhi	r8,5825
  80853c:	42145dc4 	addi	r8,r8,20855
  808540:	024fd5f4 	movhi	r9,16215
  808544:	4a705b04 	addi	r9,r9,-16020
  808548:	480f883a 	mov	r7,r9
  80854c:	400d883a 	mov	r6,r8
  808550:	180b883a 	mov	r5,r3
  808554:	1009883a 	mov	r4,r2
  808558:	080bb040 	call	80bb04 <__subdf3>
  80855c:	180f883a 	mov	r7,r3
  808560:	8009883a 	mov	r4,r16
  808564:	880b883a 	mov	r5,r17
  808568:	100d883a 	mov	r6,r2
  80856c:	080bbf80 	call	80bbf8 <__muldf3>
  808570:	02155574 	movhi	r8,21845
  808574:	42155304 	addi	r8,r8,21836
  808578:	024fe974 	movhi	r9,16293
  80857c:	4a555544 	addi	r9,r9,21845
  808580:	480f883a 	mov	r7,r9
  808584:	400d883a 	mov	r6,r8
  808588:	180b883a 	mov	r5,r3
  80858c:	1009883a 	mov	r4,r2
  808590:	080bb840 	call	80bb84 <__adddf3>
  808594:	180f883a 	mov	r7,r3
  808598:	880b883a 	mov	r5,r17
  80859c:	8009883a 	mov	r4,r16
  8085a0:	100d883a 	mov	r6,r2
  8085a4:	080bbf80 	call	80bbf8 <__muldf3>
  8085a8:	1021883a 	mov	r16,r2
  8085ac:	1823883a 	mov	r17,r3
  8085b0:	0005883a 	mov	r2,zero
  8085b4:	00cff834 	movhi	r3,16352
  8085b8:	9009883a 	mov	r4,r18
  8085bc:	980b883a 	mov	r5,r19
  8085c0:	180f883a 	mov	r7,r3
  8085c4:	100d883a 	mov	r6,r2
  8085c8:	080bbf80 	call	80bbf8 <__muldf3>
  8085cc:	980b883a 	mov	r5,r19
  8085d0:	880f883a 	mov	r7,r17
  8085d4:	9009883a 	mov	r4,r18
  8085d8:	800d883a 	mov	r6,r16
  8085dc:	1025883a 	mov	r18,r2
  8085e0:	1827883a 	mov	r19,r3
  8085e4:	080bbf80 	call	80bbf8 <__muldf3>
  8085e8:	d9c00517 	ldw	r7,20(sp)
  8085ec:	d9800417 	ldw	r6,16(sp)
  8085f0:	a80b883a 	mov	r5,r21
  8085f4:	a009883a 	mov	r4,r20
  8085f8:	1021883a 	mov	r16,r2
  8085fc:	1823883a 	mov	r17,r3
  808600:	080bbf80 	call	80bbf8 <__muldf3>
  808604:	180f883a 	mov	r7,r3
  808608:	880b883a 	mov	r5,r17
  80860c:	8009883a 	mov	r4,r16
  808610:	100d883a 	mov	r6,r2
  808614:	080bb040 	call	80bb04 <__subdf3>
  808618:	180f883a 	mov	r7,r3
  80861c:	980b883a 	mov	r5,r19
  808620:	9009883a 	mov	r4,r18
  808624:	100d883a 	mov	r6,r2
  808628:	080bb040 	call	80bb04 <__subdf3>
  80862c:	0011883a 	mov	r8,zero
  808630:	024ffc34 	movhi	r9,16368
  808634:	480b883a 	mov	r5,r9
  808638:	180f883a 	mov	r7,r3
  80863c:	4009883a 	mov	r4,r8
  808640:	100d883a 	mov	r6,r2
  808644:	080bb040 	call	80bb04 <__subdf3>
  808648:	100d883a 	mov	r6,r2
  80864c:	180f883a 	mov	r7,r3
  808650:	3005883a 	mov	r2,r6
  808654:	3807883a 	mov	r3,r7
  808658:	dfc00e17 	ldw	ra,56(sp)
  80865c:	ddc00d17 	ldw	r23,52(sp)
  808660:	dd800c17 	ldw	r22,48(sp)
  808664:	dd400b17 	ldw	r21,44(sp)
  808668:	dd000a17 	ldw	r20,40(sp)
  80866c:	dcc00917 	ldw	r19,36(sp)
  808670:	dc800817 	ldw	r18,32(sp)
  808674:	dc400717 	ldw	r17,28(sp)
  808678:	dc000617 	ldw	r16,24(sp)
  80867c:	dec00f04 	addi	sp,sp,60
  808680:	f800283a 	ret
  808684:	280f883a 	mov	r7,r5
  808688:	a009883a 	mov	r4,r20
  80868c:	a00d883a 	mov	r6,r20
  808690:	080bbf80 	call	80bbf8 <__muldf3>
  808694:	1021883a 	mov	r16,r2
  808698:	1823883a 	mov	r17,r3
  80869c:	1025883a 	mov	r18,r2
  8086a0:	1827883a 	mov	r19,r3
  8086a4:	00afa234 	movhi	r2,48776
  8086a8:	108e3504 	addi	r2,r2,14548
  8086ac:	00ef6a74 	movhi	r3,48553
  8086b0:	18feba44 	addi	r3,r3,-1303
  8086b4:	8009883a 	mov	r4,r16
  8086b8:	880b883a 	mov	r5,r17
  8086bc:	180f883a 	mov	r7,r3
  8086c0:	100d883a 	mov	r6,r2
  8086c4:	080bbf80 	call	80bbf8 <__muldf3>
  8086c8:	022f6d74 	movhi	r8,48565
  8086cc:	422c7104 	addi	r8,r8,-20028
  8086d0:	024f88b4 	movhi	r9,15906
  8086d4:	4a7ba784 	addi	r9,r9,-4450
  8086d8:	480f883a 	mov	r7,r9
  8086dc:	400d883a 	mov	r6,r8
  8086e0:	180b883a 	mov	r5,r3
  8086e4:	1009883a 	mov	r4,r2
  8086e8:	080bb840 	call	80bb84 <__adddf3>
  8086ec:	180f883a 	mov	r7,r3
  8086f0:	8009883a 	mov	r4,r16
  8086f4:	880b883a 	mov	r5,r17
  8086f8:	100d883a 	mov	r6,r2
  8086fc:	080bbf80 	call	80bbf8 <__muldf3>
  808700:	02202734 	movhi	r8,32924
  808704:	4214ab44 	addi	r8,r8,21165
  808708:	024fa4b4 	movhi	r9,16018
  80870c:	4a5f93c4 	addi	r9,r9,32335
  808710:	480f883a 	mov	r7,r9
  808714:	400d883a 	mov	r6,r8
  808718:	180b883a 	mov	r5,r3
  80871c:	1009883a 	mov	r4,r2
  808720:	080bb040 	call	80bb04 <__subdf3>
  808724:	180f883a 	mov	r7,r3
  808728:	8009883a 	mov	r4,r16
  80872c:	880b883a 	mov	r5,r17
  808730:	100d883a 	mov	r6,r2
  808734:	080bbf80 	call	80bbf8 <__muldf3>
  808738:	020672f4 	movhi	r8,6603
  80873c:	42056404 	addi	r8,r8,5520
  808740:	024fbeb4 	movhi	r9,16122
  808744:	4a406804 	addi	r9,r9,416
  808748:	480f883a 	mov	r7,r9
  80874c:	400d883a 	mov	r6,r8
  808750:	180b883a 	mov	r5,r3
  808754:	1009883a 	mov	r4,r2
  808758:	080bb840 	call	80bb84 <__adddf3>
  80875c:	180f883a 	mov	r7,r3
  808760:	8009883a 	mov	r4,r16
  808764:	880b883a 	mov	r5,r17
  808768:	100d883a 	mov	r6,r2
  80876c:	080bbf80 	call	80bbf8 <__muldf3>
  808770:	0205b074 	movhi	r8,5825
  808774:	42145dc4 	addi	r8,r8,20855
  808778:	024fd5f4 	movhi	r9,16215
  80877c:	4a705b04 	addi	r9,r9,-16020
  808780:	480f883a 	mov	r7,r9
  808784:	400d883a 	mov	r6,r8
  808788:	180b883a 	mov	r5,r3
  80878c:	1009883a 	mov	r4,r2
  808790:	080bb040 	call	80bb04 <__subdf3>
  808794:	180f883a 	mov	r7,r3
  808798:	8009883a 	mov	r4,r16
  80879c:	880b883a 	mov	r5,r17
  8087a0:	100d883a 	mov	r6,r2
  8087a4:	080bbf80 	call	80bbf8 <__muldf3>
  8087a8:	02155574 	movhi	r8,21845
  8087ac:	42155304 	addi	r8,r8,21836
  8087b0:	024fe974 	movhi	r9,16293
  8087b4:	4a555544 	addi	r9,r9,21845
  8087b8:	480f883a 	mov	r7,r9
  8087bc:	400d883a 	mov	r6,r8
  8087c0:	180b883a 	mov	r5,r3
  8087c4:	1009883a 	mov	r4,r2
  8087c8:	080bb840 	call	80bb84 <__adddf3>
  8087cc:	180f883a 	mov	r7,r3
  8087d0:	880b883a 	mov	r5,r17
  8087d4:	8009883a 	mov	r4,r16
  8087d8:	100d883a 	mov	r6,r2
  8087dc:	080bbf80 	call	80bbf8 <__muldf3>
  8087e0:	1021883a 	mov	r16,r2
  8087e4:	008ff4f4 	movhi	r2,16339
  8087e8:	108ccc84 	addi	r2,r2,13106
  8087ec:	1823883a 	mov	r17,r3
  8087f0:	15bf6f0e 	bge	r2,r22,8085b0 <__kernel_cos+0x1d4>
  8087f4:	008ffa74 	movhi	r2,16361
  8087f8:	1580320e 	bge	r2,r22,8088c4 <__kernel_cos+0x4e8>
  8087fc:	0005883a 	mov	r2,zero
  808800:	010ff9f4 	movhi	r4,16359
  808804:	002d883a 	mov	r22,zero
  808808:	d8800015 	stw	r2,0(sp)
  80880c:	05cff4b4 	movhi	r23,16338
  808810:	d9000115 	stw	r4,4(sp)
  808814:	0005883a 	mov	r2,zero
  808818:	00cff834 	movhi	r3,16352
  80881c:	9009883a 	mov	r4,r18
  808820:	980b883a 	mov	r5,r19
  808824:	180f883a 	mov	r7,r3
  808828:	100d883a 	mov	r6,r2
  80882c:	080bbf80 	call	80bbf8 <__muldf3>
  808830:	180b883a 	mov	r5,r3
  808834:	b80f883a 	mov	r7,r23
  808838:	1009883a 	mov	r4,r2
  80883c:	b00d883a 	mov	r6,r22
  808840:	080bb040 	call	80bb04 <__subdf3>
  808844:	980b883a 	mov	r5,r19
  808848:	880f883a 	mov	r7,r17
  80884c:	9009883a 	mov	r4,r18
  808850:	800d883a 	mov	r6,r16
  808854:	1025883a 	mov	r18,r2
  808858:	1827883a 	mov	r19,r3
  80885c:	080bbf80 	call	80bbf8 <__muldf3>
  808860:	d9c00517 	ldw	r7,20(sp)
  808864:	d9800417 	ldw	r6,16(sp)
  808868:	a80b883a 	mov	r5,r21
  80886c:	a009883a 	mov	r4,r20
  808870:	1021883a 	mov	r16,r2
  808874:	1823883a 	mov	r17,r3
  808878:	080bbf80 	call	80bbf8 <__muldf3>
  80887c:	180f883a 	mov	r7,r3
  808880:	880b883a 	mov	r5,r17
  808884:	8009883a 	mov	r4,r16
  808888:	100d883a 	mov	r6,r2
  80888c:	080bb040 	call	80bb04 <__subdf3>
  808890:	180f883a 	mov	r7,r3
  808894:	980b883a 	mov	r5,r19
  808898:	9009883a 	mov	r4,r18
  80889c:	100d883a 	mov	r6,r2
  8088a0:	080bb040 	call	80bb04 <__subdf3>
  8088a4:	d9400117 	ldw	r5,4(sp)
  8088a8:	d9000017 	ldw	r4,0(sp)
  8088ac:	180f883a 	mov	r7,r3
  8088b0:	100d883a 	mov	r6,r2
  8088b4:	003f6306 	br	808644 <__kernel_cos+0x268>
  8088b8:	000d883a 	mov	r6,zero
  8088bc:	01cffc34 	movhi	r7,16368
  8088c0:	003f6306 	br	808650 <__kernel_cos+0x274>
  8088c4:	00bff834 	movhi	r2,65504
  8088c8:	b0ad883a 	add	r22,r22,r2
  8088cc:	dd800315 	stw	r22,12(sp)
  8088d0:	d9000317 	ldw	r4,12(sp)
  8088d4:	0005883a 	mov	r2,zero
  8088d8:	00cffc34 	movhi	r3,16368
  8088dc:	002d883a 	mov	r22,zero
  8088e0:	200f883a 	mov	r7,r4
  8088e4:	202f883a 	mov	r23,r4
  8088e8:	180b883a 	mov	r5,r3
  8088ec:	1009883a 	mov	r4,r2
  8088f0:	b00d883a 	mov	r6,r22
  8088f4:	d8800215 	stw	r2,8(sp)
  8088f8:	080bb040 	call	80bb04 <__subdf3>
  8088fc:	d8800015 	stw	r2,0(sp)
  808900:	d8c00115 	stw	r3,4(sp)
  808904:	003fc306 	br	808814 <__kernel_cos+0x438>

00808908 <__kernel_rem_pio2>:
  808908:	deff5304 	addi	sp,sp,-692
  80890c:	d880ad17 	ldw	r2,692(sp)
  808910:	d9009615 	stw	r4,600(sp)
  808914:	d9409715 	stw	r5,604(sp)
  808918:	1087883a 	add	r3,r2,r2
  80891c:	18c7883a 	add	r3,r3,r3
  808920:	008020b4 	movhi	r2,130
  808924:	10868f04 	addi	r2,r2,6716
  808928:	1887883a 	add	r3,r3,r2
  80892c:	18c00017 	ldw	r3,0(r3)
  808930:	313fff44 	addi	r4,r6,-3
  808934:	01400604 	movi	r5,24
  808938:	df00ab15 	stw	fp,684(sp)
  80893c:	dc00a315 	stw	r16,652(sp)
  808940:	d8c09515 	stw	r3,596(sp)
  808944:	dfc0ac15 	stw	ra,688(sp)
  808948:	ddc0aa15 	stw	r23,680(sp)
  80894c:	dd80a915 	stw	r22,676(sp)
  808950:	dd40a815 	stw	r21,672(sp)
  808954:	dd00a715 	stw	r20,668(sp)
  808958:	dcc0a615 	stw	r19,664(sp)
  80895c:	dc80a515 	stw	r18,660(sp)
  808960:	dc40a415 	stw	r17,656(sp)
  808964:	3021883a 	mov	r16,r6
  808968:	d9c09815 	stw	r7,608(sp)
  80896c:	080c83c0 	call	80c83c <__divsi3>
  808970:	d8c09817 	ldw	r3,608(sp)
  808974:	d8808c15 	stw	r2,560(sp)
  808978:	1f3fffc4 	addi	fp,r3,-1
  80897c:	10031a16 	blt	r2,zero,8095e8 <__kernel_rem_pio2+0xce0>
  808980:	d9008c17 	ldw	r4,560(sp)
  808984:	017ffa04 	movi	r5,-24
  808988:	080c90c0 	call	80c90c <__mulsi3>
  80898c:	d9009517 	ldw	r4,596(sp)
  808990:	8085883a 	add	r2,r16,r2
  808994:	10bffa04 	addi	r2,r2,-24
  808998:	2707883a 	add	r3,r4,fp
  80899c:	d8809315 	stw	r2,588(sp)
  8089a0:	18001616 	blt	r3,zero,8089fc <__kernel_rem_pio2+0xf4>
  8089a4:	d9408c17 	ldw	r5,560(sp)
  8089a8:	d980ae17 	ldw	r6,696(sp)
  8089ac:	dc801404 	addi	r18,sp,80
  8089b0:	2f21c83a 	sub	r16,r5,fp
  8089b4:	8405883a 	add	r2,r16,r16
  8089b8:	1085883a 	add	r2,r2,r2
  8089bc:	30a3883a 	add	r17,r6,r2
  8089c0:	80e7883a 	add	r19,r16,r3
  8089c4:	00000106 	br	8089cc <__kernel_rem_pio2+0xc4>
  8089c8:	84000044 	addi	r16,r16,1
  8089cc:	0009883a 	mov	r4,zero
  8089d0:	000b883a 	mov	r5,zero
  8089d4:	80000416 	blt	r16,zero,8089e8 <__kernel_rem_pio2+0xe0>
  8089d8:	89000017 	ldw	r4,0(r17)
  8089dc:	080c5440 	call	80c544 <__floatsidf>
  8089e0:	1009883a 	mov	r4,r2
  8089e4:	180b883a 	mov	r5,r3
  8089e8:	91400115 	stw	r5,4(r18)
  8089ec:	91000015 	stw	r4,0(r18)
  8089f0:	8c400104 	addi	r17,r17,4
  8089f4:	94800204 	addi	r18,r18,8
  8089f8:	84fff31e 	bne	r16,r19,8089c8 <__kernel_rem_pio2+0xc0>
  8089fc:	d9c09517 	ldw	r7,596(sp)
  808a00:	38002416 	blt	r7,zero,808a94 <__kernel_rem_pio2+0x18c>
  808a04:	da809817 	ldw	r10,608(sp)
  808a08:	e029883a 	mov	r20,fp
  808a0c:	dd406404 	addi	r21,sp,400
  808a10:	3aaf883a 	add	r23,r7,r10
  808a14:	e02c403a 	cmpge	r22,fp,zero
  808a18:	b0023e26 	beq	r22,zero,809314 <__kernel_rem_pio2+0xa0c>
  808a1c:	dcc09617 	ldw	r19,600(sp)
  808a20:	0021883a 	mov	r16,zero
  808a24:	0025883a 	mov	r18,zero
  808a28:	0023883a 	mov	r17,zero
  808a2c:	a489c83a 	sub	r4,r20,r18
  808a30:	200890fa 	slli	r4,r4,3
  808a34:	99800017 	ldw	r6,0(r19)
  808a38:	99c00117 	ldw	r7,4(r19)
  808a3c:	26c9883a 	add	r4,r4,sp
  808a40:	20c01517 	ldw	r3,84(r4)
  808a44:	20801417 	ldw	r2,80(r4)
  808a48:	94800044 	addi	r18,r18,1
  808a4c:	180b883a 	mov	r5,r3
  808a50:	1009883a 	mov	r4,r2
  808a54:	080bbf80 	call	80bbf8 <__muldf3>
  808a58:	180f883a 	mov	r7,r3
  808a5c:	880b883a 	mov	r5,r17
  808a60:	8009883a 	mov	r4,r16
  808a64:	100d883a 	mov	r6,r2
  808a68:	080bb840 	call	80bb84 <__adddf3>
  808a6c:	1021883a 	mov	r16,r2
  808a70:	d8809817 	ldw	r2,608(sp)
  808a74:	9cc00204 	addi	r19,r19,8
  808a78:	1823883a 	mov	r17,r3
  808a7c:	14bfeb1e 	bne	r2,r18,808a2c <__kernel_rem_pio2+0x124>
  808a80:	a5000044 	addi	r20,r20,1
  808a84:	ac400115 	stw	r17,4(r21)
  808a88:	ac000015 	stw	r16,0(r21)
  808a8c:	ad400204 	addi	r21,r21,8
  808a90:	a5ffe11e 	bne	r20,r23,808a18 <__kernel_rem_pio2+0x110>
  808a94:	d8c09517 	ldw	r3,596(sp)
  808a98:	d9409317 	ldw	r5,588(sp)
  808a9c:	e038403a 	cmpge	fp,fp,zero
  808aa0:	d8c08d15 	stw	r3,564(sp)
  808aa4:	d9008d17 	ldw	r4,564(sp)
  808aa8:	18c5883a 	add	r2,r3,r3
  808aac:	10c7883a 	add	r3,r2,r3
  808ab0:	1907883a 	add	r3,r3,r4
  808ab4:	1085883a 	add	r2,r2,r2
  808ab8:	16c5883a 	add	r2,r2,sp
  808abc:	1ec7883a 	add	r3,r3,sp
  808ac0:	29400050 	cmplti	r5,r5,1
  808ac4:	df00a215 	stw	fp,648(sp)
  808ac8:	d8809915 	stw	r2,612(sp)
  808acc:	d8c0a115 	stw	r3,644(sp)
  808ad0:	d940a015 	stw	r5,640(sp)
  808ad4:	d9808d17 	ldw	r6,564(sp)
  808ad8:	300490fa 	slli	r2,r6,3
  808adc:	16c5883a 	add	r2,r2,sp
  808ae0:	15006417 	ldw	r20,400(r2)
  808ae4:	15406517 	ldw	r21,404(r2)
  808ae8:	01802e0e 	bge	zero,r6,808ba4 <__kernel_rem_pio2+0x29c>
  808aec:	102d883a 	mov	r22,r2
  808af0:	302f883a 	mov	r23,r6
  808af4:	d839883a 	mov	fp,sp
  808af8:	0005883a 	mov	r2,zero
  808afc:	00cf9c34 	movhi	r3,15984
  808b00:	180f883a 	mov	r7,r3
  808b04:	100d883a 	mov	r6,r2
  808b08:	a009883a 	mov	r4,r20
  808b0c:	a80b883a 	mov	r5,r21
  808b10:	080bbf80 	call	80bbf8 <__muldf3>
  808b14:	180b883a 	mov	r5,r3
  808b18:	1009883a 	mov	r4,r2
  808b1c:	080c63c0 	call	80c63c <__fixdfsi>
  808b20:	1009883a 	mov	r4,r2
  808b24:	080c5440 	call	80c544 <__floatsidf>
  808b28:	1021883a 	mov	r16,r2
  808b2c:	1823883a 	mov	r17,r3
  808b30:	0005883a 	mov	r2,zero
  808b34:	00f05c34 	movhi	r3,49520
  808b38:	180f883a 	mov	r7,r3
  808b3c:	8009883a 	mov	r4,r16
  808b40:	880b883a 	mov	r5,r17
  808b44:	100d883a 	mov	r6,r2
  808b48:	080bbf80 	call	80bbf8 <__muldf3>
  808b4c:	180b883a 	mov	r5,r3
  808b50:	a80f883a 	mov	r7,r21
  808b54:	a00d883a 	mov	r6,r20
  808b58:	1009883a 	mov	r4,r2
  808b5c:	080bb840 	call	80bb84 <__adddf3>
  808b60:	180b883a 	mov	r5,r3
  808b64:	1009883a 	mov	r4,r2
  808b68:	080c63c0 	call	80c63c <__fixdfsi>
  808b6c:	e0800015 	stw	r2,0(fp)
  808b70:	b5bffe04 	addi	r22,r22,-8
  808b74:	b0806417 	ldw	r2,400(r22)
  808b78:	b0c06517 	ldw	r3,404(r22)
  808b7c:	8009883a 	mov	r4,r16
  808b80:	880b883a 	mov	r5,r17
  808b84:	180f883a 	mov	r7,r3
  808b88:	100d883a 	mov	r6,r2
  808b8c:	080bb840 	call	80bb84 <__adddf3>
  808b90:	bdffffc4 	addi	r23,r23,-1
  808b94:	e7000104 	addi	fp,fp,4
  808b98:	1029883a 	mov	r20,r2
  808b9c:	182b883a 	mov	r21,r3
  808ba0:	b83fd51e 	bne	r23,zero,808af8 <__kernel_rem_pio2+0x1f0>
  808ba4:	d9809317 	ldw	r6,588(sp)
  808ba8:	a80b883a 	mov	r5,r21
  808bac:	a009883a 	mov	r4,r20
  808bb0:	0801c700 	call	801c70 <scalbn>
  808bb4:	0009883a 	mov	r4,zero
  808bb8:	014ff034 	movhi	r5,16320
  808bbc:	280f883a 	mov	r7,r5
  808bc0:	200d883a 	mov	r6,r4
  808bc4:	180b883a 	mov	r5,r3
  808bc8:	1009883a 	mov	r4,r2
  808bcc:	1021883a 	mov	r16,r2
  808bd0:	1823883a 	mov	r17,r3
  808bd4:	080bbf80 	call	80bbf8 <__muldf3>
  808bd8:	180b883a 	mov	r5,r3
  808bdc:	1009883a 	mov	r4,r2
  808be0:	08017740 	call	801774 <floor>
  808be4:	0011883a 	mov	r8,zero
  808be8:	02700834 	movhi	r9,49184
  808bec:	480f883a 	mov	r7,r9
  808bf0:	400d883a 	mov	r6,r8
  808bf4:	180b883a 	mov	r5,r3
  808bf8:	1009883a 	mov	r4,r2
  808bfc:	080bbf80 	call	80bbf8 <__muldf3>
  808c00:	180f883a 	mov	r7,r3
  808c04:	100d883a 	mov	r6,r2
  808c08:	880b883a 	mov	r5,r17
  808c0c:	8009883a 	mov	r4,r16
  808c10:	080bb840 	call	80bb84 <__adddf3>
  808c14:	180b883a 	mov	r5,r3
  808c18:	1009883a 	mov	r4,r2
  808c1c:	1823883a 	mov	r17,r3
  808c20:	1021883a 	mov	r16,r2
  808c24:	080c63c0 	call	80c63c <__fixdfsi>
  808c28:	1009883a 	mov	r4,r2
  808c2c:	d8809415 	stw	r2,592(sp)
  808c30:	080c5440 	call	80c544 <__floatsidf>
  808c34:	880b883a 	mov	r5,r17
  808c38:	8009883a 	mov	r4,r16
  808c3c:	180f883a 	mov	r7,r3
  808c40:	100d883a 	mov	r6,r2
  808c44:	080bb040 	call	80bb04 <__subdf3>
  808c48:	d9c0a017 	ldw	r7,640(sp)
  808c4c:	180d883a 	mov	r6,r3
  808c50:	1021883a 	mov	r16,r2
  808c54:	1823883a 	mov	r17,r3
  808c58:	38017d1e 	bne	r7,zero,809250 <__kernel_rem_pio2+0x948>
  808c5c:	da808d17 	ldw	r10,564(sp)
  808c60:	d9009317 	ldw	r4,588(sp)
  808c64:	00c00604 	movi	r3,24
  808c68:	50bfffc4 	addi	r2,r10,-1
  808c6c:	1085883a 	add	r2,r2,r2
  808c70:	1085883a 	add	r2,r2,r2
  808c74:	16c5883a 	add	r2,r2,sp
  808c78:	11400017 	ldw	r5,0(r2)
  808c7c:	1907c83a 	sub	r3,r3,r4
  808c80:	d9c09317 	ldw	r7,588(sp)
  808c84:	28cdd83a 	sra	r6,r5,r3
  808c88:	010005c4 	movi	r4,23
  808c8c:	da809417 	ldw	r10,592(sp)
  808c90:	30c6983a 	sll	r3,r6,r3
  808c94:	21c9c83a 	sub	r4,r4,r7
  808c98:	5195883a 	add	r10,r10,r6
  808c9c:	28cbc83a 	sub	r5,r5,r3
  808ca0:	2909d83a 	sra	r4,r5,r4
  808ca4:	da809415 	stw	r10,592(sp)
  808ca8:	11400015 	stw	r5,0(r2)
  808cac:	d9009215 	stw	r4,584(sp)
  808cb0:	d9409217 	ldw	r5,584(sp)
  808cb4:	0140270e 	bge	zero,r5,808d54 <__kernel_rem_pio2+0x44c>
  808cb8:	d9809417 	ldw	r6,592(sp)
  808cbc:	d9c08d17 	ldw	r7,564(sp)
  808cc0:	31800044 	addi	r6,r6,1
  808cc4:	d9809415 	stw	r6,592(sp)
  808cc8:	01c1a50e 	bge	zero,r7,809360 <__kernel_rem_pio2+0xa58>
  808ccc:	002d883a 	mov	r22,zero
  808cd0:	000b883a 	mov	r5,zero
  808cd4:	d809883a 	mov	r4,sp
  808cd8:	01c04034 	movhi	r7,256
  808cdc:	01804034 	movhi	r6,256
  808ce0:	31bfffc4 	addi	r6,r6,-1
  808ce4:	00000806 	br	808d08 <__kernel_rem_pio2+0x400>
  808ce8:	38c5c83a 	sub	r2,r7,r3
  808cec:	18000226 	beq	r3,zero,808cf8 <__kernel_rem_pio2+0x3f0>
  808cf0:	05800044 	movi	r22,1
  808cf4:	20800015 	stw	r2,0(r4)
  808cf8:	da808d17 	ldw	r10,564(sp)
  808cfc:	29400044 	addi	r5,r5,1
  808d00:	21000104 	addi	r4,r4,4
  808d04:	51400926 	beq	r10,r5,808d2c <__kernel_rem_pio2+0x424>
  808d08:	b004c03a 	cmpne	r2,r22,zero
  808d0c:	20c00017 	ldw	r3,0(r4)
  808d10:	103ff526 	beq	r2,zero,808ce8 <__kernel_rem_pio2+0x3e0>
  808d14:	da808d17 	ldw	r10,564(sp)
  808d18:	30c5c83a 	sub	r2,r6,r3
  808d1c:	29400044 	addi	r5,r5,1
  808d20:	20800015 	stw	r2,0(r4)
  808d24:	21000104 	addi	r4,r4,4
  808d28:	517ff71e 	bne	r10,r5,808d08 <__kernel_rem_pio2+0x400>
  808d2c:	d880a017 	ldw	r2,640(sp)
  808d30:	1000051e 	bne	r2,zero,808d48 <__kernel_rem_pio2+0x440>
  808d34:	d8c09317 	ldw	r3,588(sp)
  808d38:	00800044 	movi	r2,1
  808d3c:	18814e26 	beq	r3,r2,809278 <__kernel_rem_pio2+0x970>
  808d40:	00800084 	movi	r2,2
  808d44:	18815826 	beq	r3,r2,8092a8 <__kernel_rem_pio2+0x9a0>
  808d48:	d9c09217 	ldw	r7,584(sp)
  808d4c:	00800084 	movi	r2,2
  808d50:	38806926 	beq	r7,r2,808ef8 <__kernel_rem_pio2+0x5f0>
  808d54:	000d883a 	mov	r6,zero
  808d58:	000f883a 	mov	r7,zero
  808d5c:	8009883a 	mov	r4,r16
  808d60:	880b883a 	mov	r5,r17
  808d64:	080c2140 	call	80c214 <__eqdf2>
  808d68:	1000811e 	bne	r2,zero,808f70 <__kernel_rem_pio2+0x668>
  808d6c:	da808d17 	ldw	r10,564(sp)
  808d70:	d8809517 	ldw	r2,596(sp)
  808d74:	51bfffc4 	addi	r6,r10,-1
  808d78:	30800c16 	blt	r6,r2,808dac <__kernel_rem_pio2+0x4a4>
  808d7c:	3185883a 	add	r2,r6,r6
  808d80:	1085883a 	add	r2,r2,r2
  808d84:	16c9883a 	add	r4,r2,sp
  808d88:	3007883a 	mov	r3,r6
  808d8c:	000b883a 	mov	r5,zero
  808d90:	20800017 	ldw	r2,0(r4)
  808d94:	d9c09517 	ldw	r7,596(sp)
  808d98:	18ffffc4 	addi	r3,r3,-1
  808d9c:	213fff04 	addi	r4,r4,-4
  808da0:	288ab03a 	or	r5,r5,r2
  808da4:	19fffa0e 	bge	r3,r7,808d90 <__kernel_rem_pio2+0x488>
  808da8:	2800791e 	bne	r5,zero,808f90 <__kernel_rem_pio2+0x688>
  808dac:	da809917 	ldw	r10,612(sp)
  808db0:	50bfff17 	ldw	r2,-4(r10)
  808db4:	1001511e 	bne	r2,zero,8092fc <__kernel_rem_pio2+0x9f4>
  808db8:	d880a117 	ldw	r2,644(sp)
  808dbc:	01000044 	movi	r4,1
  808dc0:	10ffff04 	addi	r3,r2,-4
  808dc4:	18ffff04 	addi	r3,r3,-4
  808dc8:	18800017 	ldw	r2,0(r3)
  808dcc:	21000044 	addi	r4,r4,1
  808dd0:	103ffc26 	beq	r2,zero,808dc4 <__kernel_rem_pio2+0x4bc>
  808dd4:	d8c08d17 	ldw	r3,564(sp)
  808dd8:	192f883a 	add	r23,r3,r4
  808ddc:	1f000044 	addi	fp,r3,1
  808de0:	bf00020e 	bge	r23,fp,808dec <__kernel_rem_pio2+0x4e4>
  808de4:	ddc08d15 	stw	r23,564(sp)
  808de8:	003f3a06 	br	808ad4 <__kernel_rem_pio2+0x1cc>
  808dec:	d9408c17 	ldw	r5,560(sp)
  808df0:	d9009817 	ldw	r4,608(sp)
  808df4:	da80ae17 	ldw	r10,696(sp)
  808df8:	1945883a 	add	r2,r3,r5
  808dfc:	190f883a 	add	r7,r3,r4
  808e00:	1085883a 	add	r2,r2,r2
  808e04:	380a90fa 	slli	r5,r7,3
  808e08:	e00c90fa 	slli	r6,fp,3
  808e0c:	1085883a 	add	r2,r2,r2
  808e10:	5085883a 	add	r2,r10,r2
  808e14:	d8c01404 	addi	r3,sp,80
  808e18:	d9006404 	addi	r4,sp,400
  808e1c:	10800104 	addi	r2,r2,4
  808e20:	196b883a 	add	r21,r3,r5
  808e24:	21a1883a 	add	r16,r4,r6
  808e28:	d8809115 	stw	r2,580(sp)
  808e2c:	d9c09015 	stw	r7,576(sp)
  808e30:	d8809117 	ldw	r2,580(sp)
  808e34:	11000017 	ldw	r4,0(r2)
  808e38:	080c5440 	call	80c544 <__floatsidf>
  808e3c:	a8c00115 	stw	r3,4(r21)
  808e40:	d8c0a217 	ldw	r3,648(sp)
  808e44:	a8800015 	stw	r2,0(r21)
  808e48:	18002826 	beq	r3,zero,808eec <__kernel_rem_pio2+0x5e4>
  808e4c:	d9009017 	ldw	r4,576(sp)
  808e50:	dd009617 	ldw	r20,600(sp)
  808e54:	0023883a 	mov	r17,zero
  808e58:	200490fa 	slli	r2,r4,3
  808e5c:	002d883a 	mov	r22,zero
  808e60:	0025883a 	mov	r18,zero
  808e64:	16e7883a 	add	r19,r2,sp
  808e68:	98801417 	ldw	r2,80(r19)
  808e6c:	98c01517 	ldw	r3,84(r19)
  808e70:	a1800017 	ldw	r6,0(r20)
  808e74:	a1c00117 	ldw	r7,4(r20)
  808e78:	180b883a 	mov	r5,r3
  808e7c:	1009883a 	mov	r4,r2
  808e80:	080bbf80 	call	80bbf8 <__muldf3>
  808e84:	180f883a 	mov	r7,r3
  808e88:	900b883a 	mov	r5,r18
  808e8c:	8809883a 	mov	r4,r17
  808e90:	100d883a 	mov	r6,r2
  808e94:	080bb840 	call	80bb84 <__adddf3>
  808e98:	d9409817 	ldw	r5,608(sp)
  808e9c:	b5800044 	addi	r22,r22,1
  808ea0:	9cfffe04 	addi	r19,r19,-8
  808ea4:	1023883a 	mov	r17,r2
  808ea8:	1825883a 	mov	r18,r3
  808eac:	a5000204 	addi	r20,r20,8
  808eb0:	2dbfed1e 	bne	r5,r22,808e68 <__kernel_rem_pio2+0x560>
  808eb4:	d9809117 	ldw	r6,580(sp)
  808eb8:	d9c09017 	ldw	r7,576(sp)
  808ebc:	e7000044 	addi	fp,fp,1
  808ec0:	31800104 	addi	r6,r6,4
  808ec4:	39c00044 	addi	r7,r7,1
  808ec8:	84800115 	stw	r18,4(r16)
  808ecc:	84400015 	stw	r17,0(r16)
  808ed0:	d9809115 	stw	r6,580(sp)
  808ed4:	ad400204 	addi	r21,r21,8
  808ed8:	84000204 	addi	r16,r16,8
  808edc:	d9c09015 	stw	r7,576(sp)
  808ee0:	bf3fd30e 	bge	r23,fp,808e30 <__kernel_rem_pio2+0x528>
  808ee4:	ddc08d15 	stw	r23,564(sp)
  808ee8:	003efa06 	br	808ad4 <__kernel_rem_pio2+0x1cc>
  808eec:	0023883a 	mov	r17,zero
  808ef0:	0025883a 	mov	r18,zero
  808ef4:	003fef06 	br	808eb4 <__kernel_rem_pio2+0x5ac>
  808ef8:	0029883a 	mov	r20,zero
  808efc:	054ffc34 	movhi	r21,16368
  808f00:	880f883a 	mov	r7,r17
  808f04:	800d883a 	mov	r6,r16
  808f08:	a009883a 	mov	r4,r20
  808f0c:	a80b883a 	mov	r5,r21
  808f10:	080bb040 	call	80bb04 <__subdf3>
  808f14:	1025883a 	mov	r18,r2
  808f18:	b005003a 	cmpeq	r2,r22,zero
  808f1c:	1827883a 	mov	r19,r3
  808f20:	9021883a 	mov	r16,r18
  808f24:	1823883a 	mov	r17,r3
  808f28:	103f8a1e 	bne	r2,zero,808d54 <__kernel_rem_pio2+0x44c>
  808f2c:	d9809317 	ldw	r6,588(sp)
  808f30:	0009883a 	mov	r4,zero
  808f34:	a80b883a 	mov	r5,r21
  808f38:	0801c700 	call	801c70 <scalbn>
  808f3c:	180f883a 	mov	r7,r3
  808f40:	9009883a 	mov	r4,r18
  808f44:	980b883a 	mov	r5,r19
  808f48:	100d883a 	mov	r6,r2
  808f4c:	080bb040 	call	80bb04 <__subdf3>
  808f50:	1021883a 	mov	r16,r2
  808f54:	1823883a 	mov	r17,r3
  808f58:	000d883a 	mov	r6,zero
  808f5c:	000f883a 	mov	r7,zero
  808f60:	8009883a 	mov	r4,r16
  808f64:	880b883a 	mov	r5,r17
  808f68:	080c2140 	call	80c214 <__eqdf2>
  808f6c:	103f7f26 	beq	r2,zero,808d6c <__kernel_rem_pio2+0x464>
  808f70:	000d883a 	mov	r6,zero
  808f74:	000f883a 	mov	r7,zero
  808f78:	8009883a 	mov	r4,r16
  808f7c:	880b883a 	mov	r5,r17
  808f80:	080c2140 	call	80c214 <__eqdf2>
  808f84:	10019a1e 	bne	r2,zero,8095f0 <__kernel_rem_pio2+0xce8>
  808f88:	da808d17 	ldw	r10,564(sp)
  808f8c:	51bfffc4 	addi	r6,r10,-1
  808f90:	3185883a 	add	r2,r6,r6
  808f94:	1085883a 	add	r2,r2,r2
  808f98:	d9009317 	ldw	r4,588(sp)
  808f9c:	16c5883a 	add	r2,r2,sp
  808fa0:	10c00017 	ldw	r3,0(r2)
  808fa4:	213ffa04 	addi	r4,r4,-24
  808fa8:	d9009315 	stw	r4,588(sp)
  808fac:	1801d41e 	bne	r3,zero,809700 <__kernel_rem_pio2+0xdf8>
  808fb0:	d9808d15 	stw	r6,564(sp)
  808fb4:	1007883a 	mov	r3,r2
  808fb8:	d9408d17 	ldw	r5,564(sp)
  808fbc:	d9809317 	ldw	r6,588(sp)
  808fc0:	18ffff04 	addi	r3,r3,-4
  808fc4:	18800017 	ldw	r2,0(r3)
  808fc8:	297fffc4 	addi	r5,r5,-1
  808fcc:	31bffa04 	addi	r6,r6,-24
  808fd0:	d9408d15 	stw	r5,564(sp)
  808fd4:	d9809315 	stw	r6,588(sp)
  808fd8:	103ff726 	beq	r2,zero,808fb8 <__kernel_rem_pio2+0x6b0>
  808fdc:	d9809317 	ldw	r6,588(sp)
  808fe0:	0005883a 	mov	r2,zero
  808fe4:	00cffc34 	movhi	r3,16368
  808fe8:	180b883a 	mov	r5,r3
  808fec:	1009883a 	mov	r4,r2
  808ff0:	0801c700 	call	801c70 <scalbn>
  808ff4:	d9808d17 	ldw	r6,564(sp)
  808ff8:	1021883a 	mov	r16,r2
  808ffc:	1823883a 	mov	r17,r3
  809000:	30004616 	blt	r6,zero,80911c <__kernel_rem_pio2+0x814>
  809004:	300690fa 	slli	r3,r6,3
  809008:	3185883a 	add	r2,r6,r6
  80900c:	1085883a 	add	r2,r2,r2
  809010:	16e9883a 	add	r20,r2,sp
  809014:	1ee5883a 	add	r18,r3,sp
  809018:	3027883a 	mov	r19,r6
  80901c:	057fffc4 	movi	r21,-1
  809020:	a1000017 	ldw	r4,0(r20)
  809024:	9cffffc4 	addi	r19,r19,-1
  809028:	a53fff04 	addi	r20,r20,-4
  80902c:	080c5440 	call	80c544 <__floatsidf>
  809030:	800d883a 	mov	r6,r16
  809034:	880f883a 	mov	r7,r17
  809038:	180b883a 	mov	r5,r3
  80903c:	1009883a 	mov	r4,r2
  809040:	080bbf80 	call	80bbf8 <__muldf3>
  809044:	0015883a 	mov	r10,zero
  809048:	02cf9c34 	movhi	r11,15984
  80904c:	880b883a 	mov	r5,r17
  809050:	8009883a 	mov	r4,r16
  809054:	90c06515 	stw	r3,404(r18)
  809058:	90806415 	stw	r2,400(r18)
  80905c:	580f883a 	mov	r7,r11
  809060:	500d883a 	mov	r6,r10
  809064:	080bbf80 	call	80bbf8 <__muldf3>
  809068:	1021883a 	mov	r16,r2
  80906c:	1823883a 	mov	r17,r3
  809070:	94bffe04 	addi	r18,r18,-8
  809074:	9d7fea1e 	bne	r19,r21,809020 <__kernel_rem_pio2+0x718>
  809078:	d9c09517 	ldw	r7,596(sp)
  80907c:	dd808d17 	ldw	r22,564(sp)
  809080:	002b883a 	mov	r21,zero
  809084:	382e403a 	cmpge	r23,r7,zero
  809088:	b800aa26 	beq	r23,zero,809334 <__kernel_rem_pio2+0xa2c>
  80908c:	a800a916 	blt	r21,zero,809334 <__kernel_rem_pio2+0xa2c>
  809090:	b00690fa 	slli	r3,r22,3
  809094:	d8806404 	addi	r2,sp,400
  809098:	0021883a 	mov	r16,zero
  80909c:	10e9883a 	add	r20,r2,r3
  8090a0:	0027883a 	mov	r19,zero
  8090a4:	0023883a 	mov	r17,zero
  8090a8:	048020b4 	movhi	r18,130
  8090ac:	94869304 	addi	r18,r18,6732
  8090b0:	00000106 	br	8090b8 <__kernel_rem_pio2+0x7b0>
  8090b4:	acc01116 	blt	r21,r19,8090fc <__kernel_rem_pio2+0x7f4>
  8090b8:	91000017 	ldw	r4,0(r18)
  8090bc:	91400117 	ldw	r5,4(r18)
  8090c0:	a1800017 	ldw	r6,0(r20)
  8090c4:	a1c00117 	ldw	r7,4(r20)
  8090c8:	9cc00044 	addi	r19,r19,1
  8090cc:	94800204 	addi	r18,r18,8
  8090d0:	080bbf80 	call	80bbf8 <__muldf3>
  8090d4:	180f883a 	mov	r7,r3
  8090d8:	880b883a 	mov	r5,r17
  8090dc:	8009883a 	mov	r4,r16
  8090e0:	100d883a 	mov	r6,r2
  8090e4:	080bb840 	call	80bb84 <__adddf3>
  8090e8:	da809517 	ldw	r10,596(sp)
  8090ec:	a5000204 	addi	r20,r20,8
  8090f0:	1021883a 	mov	r16,r2
  8090f4:	1823883a 	mov	r17,r3
  8090f8:	54ffee0e 	bge	r10,r19,8090b4 <__kernel_rem_pio2+0x7ac>
  8090fc:	a80490fa 	slli	r2,r21,3
  809100:	b5bfffc4 	addi	r22,r22,-1
  809104:	ad400044 	addi	r21,r21,1
  809108:	16c5883a 	add	r2,r2,sp
  80910c:	14403d15 	stw	r17,244(r2)
  809110:	14003c15 	stw	r16,240(r2)
  809114:	00bfffc4 	movi	r2,-1
  809118:	b0bfdb1e 	bne	r22,r2,809088 <__kernel_rem_pio2+0x780>
  80911c:	d8c0ad17 	ldw	r3,692(sp)
  809120:	00800084 	movi	r2,2
  809124:	10c09316 	blt	r2,r3,809374 <__kernel_rem_pio2+0xa6c>
  809128:	00c1120e 	bge	zero,r3,809574 <__kernel_rem_pio2+0xc6c>
  80912c:	d9808d17 	ldw	r6,564(sp)
  809130:	30018d16 	blt	r6,zero,809768 <__kernel_rem_pio2+0xe60>
  809134:	d8c08d17 	ldw	r3,564(sp)
  809138:	0011883a 	mov	r8,zero
  80913c:	0013883a 	mov	r9,zero
  809140:	180490fa 	slli	r2,r3,3
  809144:	1823883a 	mov	r17,r3
  809148:	04bfffc4 	movi	r18,-1
  80914c:	16e1883a 	add	r16,r2,sp
  809150:	80803c17 	ldw	r2,240(r16)
  809154:	80c03d17 	ldw	r3,244(r16)
  809158:	480b883a 	mov	r5,r9
  80915c:	4009883a 	mov	r4,r8
  809160:	180f883a 	mov	r7,r3
  809164:	100d883a 	mov	r6,r2
  809168:	080bb840 	call	80bb84 <__adddf3>
  80916c:	8c7fffc4 	addi	r17,r17,-1
  809170:	843ffe04 	addi	r16,r16,-8
  809174:	1011883a 	mov	r8,r2
  809178:	1813883a 	mov	r9,r3
  80917c:	8cbff41e 	bne	r17,r18,809150 <__kernel_rem_pio2+0x848>
  809180:	d9009217 	ldw	r4,584(sp)
  809184:	20015b1e 	bne	r4,zero,8096f4 <__kernel_rem_pio2+0xdec>
  809188:	4009883a 	mov	r4,r8
  80918c:	480b883a 	mov	r5,r9
  809190:	d9809717 	ldw	r6,604(sp)
  809194:	d8803c17 	ldw	r2,240(sp)
  809198:	480f883a 	mov	r7,r9
  80919c:	31400115 	stw	r5,4(r6)
  8091a0:	31000015 	stw	r4,0(r6)
  8091a4:	d8c03d17 	ldw	r3,244(sp)
  8091a8:	400d883a 	mov	r6,r8
  8091ac:	1009883a 	mov	r4,r2
  8091b0:	180b883a 	mov	r5,r3
  8091b4:	080bb040 	call	80bb04 <__subdf3>
  8091b8:	d9c08d17 	ldw	r7,564(sp)
  8091bc:	1011883a 	mov	r8,r2
  8091c0:	1813883a 	mov	r9,r3
  8091c4:	01c00d0e 	bge	zero,r7,8091fc <__kernel_rem_pio2+0x8f4>
  8091c8:	0023883a 	mov	r17,zero
  8091cc:	dc003e04 	addi	r16,sp,248
  8091d0:	81800017 	ldw	r6,0(r16)
  8091d4:	81c00117 	ldw	r7,4(r16)
  8091d8:	480b883a 	mov	r5,r9
  8091dc:	4009883a 	mov	r4,r8
  8091e0:	080bb840 	call	80bb84 <__adddf3>
  8091e4:	da808d17 	ldw	r10,564(sp)
  8091e8:	8c400044 	addi	r17,r17,1
  8091ec:	1011883a 	mov	r8,r2
  8091f0:	1813883a 	mov	r9,r3
  8091f4:	84000204 	addi	r16,r16,8
  8091f8:	8abff51e 	bne	r17,r10,8091d0 <__kernel_rem_pio2+0x8c8>
  8091fc:	d8809217 	ldw	r2,584(sp)
  809200:	10000226 	beq	r2,zero,80920c <__kernel_rem_pio2+0x904>
  809204:	48e0003c 	xorhi	r3,r9,32768
  809208:	1813883a 	mov	r9,r3
  80920c:	d8c09717 	ldw	r3,604(sp)
  809210:	1a400315 	stw	r9,12(r3)
  809214:	1a000215 	stw	r8,8(r3)
  809218:	d8c09417 	ldw	r3,592(sp)
  80921c:	188001cc 	andi	r2,r3,7
  809220:	dfc0ac17 	ldw	ra,688(sp)
  809224:	df00ab17 	ldw	fp,684(sp)
  809228:	ddc0aa17 	ldw	r23,680(sp)
  80922c:	dd80a917 	ldw	r22,676(sp)
  809230:	dd40a817 	ldw	r21,672(sp)
  809234:	dd00a717 	ldw	r20,668(sp)
  809238:	dcc0a617 	ldw	r19,664(sp)
  80923c:	dc80a517 	ldw	r18,660(sp)
  809240:	dc40a417 	ldw	r17,656(sp)
  809244:	dc00a317 	ldw	r16,652(sp)
  809248:	dec0ad04 	addi	sp,sp,692
  80924c:	f800283a 	ret
  809250:	d8809317 	ldw	r2,588(sp)
  809254:	10001f1e 	bne	r2,zero,8092d4 <__kernel_rem_pio2+0x9cc>
  809258:	d8c08d17 	ldw	r3,564(sp)
  80925c:	18c5883a 	add	r2,r3,r3
  809260:	1085883a 	add	r2,r2,r2
  809264:	16c5883a 	add	r2,r2,sp
  809268:	10ffff17 	ldw	r3,-4(r2)
  80926c:	1807d5fa 	srai	r3,r3,23
  809270:	d8c09215 	stw	r3,584(sp)
  809274:	003e8e06 	br	808cb0 <__kernel_rem_pio2+0x3a8>
  809278:	d9008d17 	ldw	r4,564(sp)
  80927c:	d9409317 	ldw	r5,588(sp)
  809280:	2145c83a 	sub	r2,r4,r5
  809284:	1085883a 	add	r2,r2,r2
  809288:	1085883a 	add	r2,r2,r2
  80928c:	16c5883a 	add	r2,r2,sp
  809290:	10c00017 	ldw	r3,0(r2)
  809294:	01002034 	movhi	r4,128
  809298:	213fffc4 	addi	r4,r4,-1
  80929c:	1906703a 	and	r3,r3,r4
  8092a0:	10c00015 	stw	r3,0(r2)
  8092a4:	003ea806 	br	808d48 <__kernel_rem_pio2+0x440>
  8092a8:	d9808d17 	ldw	r6,564(sp)
  8092ac:	01001034 	movhi	r4,64
  8092b0:	213fffc4 	addi	r4,r4,-1
  8092b4:	30bfffc4 	addi	r2,r6,-1
  8092b8:	1085883a 	add	r2,r2,r2
  8092bc:	1085883a 	add	r2,r2,r2
  8092c0:	16c5883a 	add	r2,r2,sp
  8092c4:	10c00017 	ldw	r3,0(r2)
  8092c8:	1906703a 	and	r3,r3,r4
  8092cc:	10c00015 	stw	r3,0(r2)
  8092d0:	003e9d06 	br	808d48 <__kernel_rem_pio2+0x440>
  8092d4:	0005883a 	mov	r2,zero
  8092d8:	00cff834 	movhi	r3,16352
  8092dc:	300b883a 	mov	r5,r6
  8092e0:	180f883a 	mov	r7,r3
  8092e4:	8009883a 	mov	r4,r16
  8092e8:	100d883a 	mov	r6,r2
  8092ec:	080c3ac0 	call	80c3ac <__gedf2>
  8092f0:	10001d0e 	bge	r2,zero,809368 <__kernel_rem_pio2+0xa60>
  8092f4:	d8009215 	stw	zero,584(sp)
  8092f8:	003e9606 	br	808d54 <__kernel_rem_pio2+0x44c>
  8092fc:	d8c08d17 	ldw	r3,564(sp)
  809300:	01000044 	movi	r4,1
  809304:	192f883a 	add	r23,r3,r4
  809308:	1f000044 	addi	fp,r3,1
  80930c:	bf3eb516 	blt	r23,fp,808de4 <__kernel_rem_pio2+0x4dc>
  809310:	003eb606 	br	808dec <__kernel_rem_pio2+0x4e4>
  809314:	0021883a 	mov	r16,zero
  809318:	0023883a 	mov	r17,zero
  80931c:	a5000044 	addi	r20,r20,1
  809320:	ac400115 	stw	r17,4(r21)
  809324:	ac000015 	stw	r16,0(r21)
  809328:	ad400204 	addi	r21,r21,8
  80932c:	a5fdba1e 	bne	r20,r23,808a18 <__kernel_rem_pio2+0x110>
  809330:	003dd806 	br	808a94 <__kernel_rem_pio2+0x18c>
  809334:	a80490fa 	slli	r2,r21,3
  809338:	0021883a 	mov	r16,zero
  80933c:	0023883a 	mov	r17,zero
  809340:	16c5883a 	add	r2,r2,sp
  809344:	14403d15 	stw	r17,244(r2)
  809348:	14003c15 	stw	r16,240(r2)
  80934c:	b5bfffc4 	addi	r22,r22,-1
  809350:	00bfffc4 	movi	r2,-1
  809354:	ad400044 	addi	r21,r21,1
  809358:	b0bf4b1e 	bne	r22,r2,809088 <__kernel_rem_pio2+0x780>
  80935c:	003f6f06 	br	80911c <__kernel_rem_pio2+0x814>
  809360:	002d883a 	mov	r22,zero
  809364:	003e7106 	br	808d2c <__kernel_rem_pio2+0x424>
  809368:	01000084 	movi	r4,2
  80936c:	d9009215 	stw	r4,584(sp)
  809370:	003e5106 	br	808cb8 <__kernel_rem_pio2+0x3b0>
  809374:	d900ad17 	ldw	r4,692(sp)
  809378:	008000c4 	movi	r2,3
  80937c:	20bfa61e 	bne	r4,r2,809218 <__kernel_rem_pio2+0x910>
  809380:	d9c08d17 	ldw	r7,564(sp)
  809384:	01c02c0e 	bge	zero,r7,809438 <__kernel_rem_pio2+0xb30>
  809388:	3805883a 	mov	r2,r7
  80938c:	00000106 	br	809394 <__kernel_rem_pio2+0xa8c>
  809390:	d8808e17 	ldw	r2,568(sp)
  809394:	113fffc4 	addi	r4,r2,-1
  809398:	100690fa 	slli	r3,r2,3
  80939c:	200490fa 	slli	r2,r4,3
  8093a0:	d9008e15 	stw	r4,568(sp)
  8093a4:	1ef9883a 	add	fp,r3,sp
  8093a8:	16c5883a 	add	r2,r2,sp
  8093ac:	d8809a15 	stw	r2,616(sp)
  8093b0:	11403c04 	addi	r5,r2,240
  8093b4:	e1803c04 	addi	r6,fp,240
  8093b8:	14003c17 	ldw	r16,240(r2)
  8093bc:	e5003c17 	ldw	r20,240(fp)
  8093c0:	d9409b15 	stw	r5,620(sp)
  8093c4:	d9809c15 	stw	r6,624(sp)
  8093c8:	35400117 	ldw	r21,4(r6)
  8093cc:	2c400117 	ldw	r17,4(r5)
  8093d0:	8009883a 	mov	r4,r16
  8093d4:	a00d883a 	mov	r6,r20
  8093d8:	880b883a 	mov	r5,r17
  8093dc:	a80f883a 	mov	r7,r21
  8093e0:	080bb840 	call	80bb84 <__adddf3>
  8093e4:	100d883a 	mov	r6,r2
  8093e8:	880b883a 	mov	r5,r17
  8093ec:	8009883a 	mov	r4,r16
  8093f0:	180f883a 	mov	r7,r3
  8093f4:	1025883a 	mov	r18,r2
  8093f8:	1827883a 	mov	r19,r3
  8093fc:	080bb040 	call	80bb04 <__subdf3>
  809400:	180f883a 	mov	r7,r3
  809404:	a80b883a 	mov	r5,r21
  809408:	a009883a 	mov	r4,r20
  80940c:	100d883a 	mov	r6,r2
  809410:	080bb840 	call	80bb84 <__adddf3>
  809414:	e0803c15 	stw	r2,240(fp)
  809418:	d9c09c17 	ldw	r7,624(sp)
  80941c:	38c00115 	stw	r3,4(r7)
  809420:	da809a17 	ldw	r10,616(sp)
  809424:	54803c15 	stw	r18,240(r10)
  809428:	d8809b17 	ldw	r2,620(sp)
  80942c:	14c00115 	stw	r19,4(r2)
  809430:	d8c08e17 	ldw	r3,568(sp)
  809434:	183fd61e 	bne	r3,zero,809390 <__kernel_rem_pio2+0xa88>
  809438:	d9008d17 	ldw	r4,564(sp)
  80943c:	00800044 	movi	r2,1
  809440:	1100cc0e 	bge	r2,r4,809774 <__kernel_rem_pio2+0xe6c>
  809444:	d8808d17 	ldw	r2,564(sp)
  809448:	117fffc4 	addi	r5,r2,-1
  80944c:	100690fa 	slli	r3,r2,3
  809450:	280490fa 	slli	r2,r5,3
  809454:	d9408f15 	stw	r5,572(sp)
  809458:	1ef9883a 	add	fp,r3,sp
  80945c:	16c5883a 	add	r2,r2,sp
  809460:	d8809d15 	stw	r2,628(sp)
  809464:	11803c04 	addi	r6,r2,240
  809468:	e1c03c04 	addi	r7,fp,240
  80946c:	14003c17 	ldw	r16,240(r2)
  809470:	e5003c17 	ldw	r20,240(fp)
  809474:	d9809e15 	stw	r6,632(sp)
  809478:	d9c09f15 	stw	r7,636(sp)
  80947c:	34400117 	ldw	r17,4(r6)
  809480:	3d400117 	ldw	r21,4(r7)
  809484:	8009883a 	mov	r4,r16
  809488:	880b883a 	mov	r5,r17
  80948c:	a00d883a 	mov	r6,r20
  809490:	a80f883a 	mov	r7,r21
  809494:	080bb840 	call	80bb84 <__adddf3>
  809498:	100d883a 	mov	r6,r2
  80949c:	880b883a 	mov	r5,r17
  8094a0:	8009883a 	mov	r4,r16
  8094a4:	180f883a 	mov	r7,r3
  8094a8:	1025883a 	mov	r18,r2
  8094ac:	1827883a 	mov	r19,r3
  8094b0:	080bb040 	call	80bb04 <__subdf3>
  8094b4:	180f883a 	mov	r7,r3
  8094b8:	a80b883a 	mov	r5,r21
  8094bc:	a009883a 	mov	r4,r20
  8094c0:	100d883a 	mov	r6,r2
  8094c4:	080bb840 	call	80bb84 <__adddf3>
  8094c8:	e0803c15 	stw	r2,240(fp)
  8094cc:	da809f17 	ldw	r10,636(sp)
  8094d0:	50c00115 	stw	r3,4(r10)
  8094d4:	d8c09d17 	ldw	r3,628(sp)
  8094d8:	d8808f17 	ldw	r2,572(sp)
  8094dc:	1c803c15 	stw	r18,240(r3)
  8094e0:	d9009e17 	ldw	r4,632(sp)
  8094e4:	00c00044 	movi	r3,1
  8094e8:	24c00115 	stw	r19,4(r4)
  8094ec:	d9408f17 	ldw	r5,572(sp)
  8094f0:	28ffd51e 	bne	r5,r3,809448 <__kernel_rem_pio2+0xb40>
  8094f4:	dc008d17 	ldw	r16,564(sp)
  8094f8:	0011883a 	mov	r8,zero
  8094fc:	1825883a 	mov	r18,r3
  809500:	800490fa 	slli	r2,r16,3
  809504:	0013883a 	mov	r9,zero
  809508:	16e3883a 	add	r17,r2,sp
  80950c:	88803c17 	ldw	r2,240(r17)
  809510:	88c03d17 	ldw	r3,244(r17)
  809514:	480b883a 	mov	r5,r9
  809518:	4009883a 	mov	r4,r8
  80951c:	180f883a 	mov	r7,r3
  809520:	100d883a 	mov	r6,r2
  809524:	080bb840 	call	80bb84 <__adddf3>
  809528:	843fffc4 	addi	r16,r16,-1
  80952c:	8c7ffe04 	addi	r17,r17,-8
  809530:	1011883a 	mov	r8,r2
  809534:	1813883a 	mov	r9,r3
  809538:	84bff41e 	bne	r16,r18,80950c <__kernel_rem_pio2+0xc04>
  80953c:	d9809217 	ldw	r6,584(sp)
  809540:	30007a1e 	bne	r6,zero,80972c <__kernel_rem_pio2+0xe24>
  809544:	d9c09717 	ldw	r7,604(sp)
  809548:	d8803c17 	ldw	r2,240(sp)
  80954c:	d9003e17 	ldw	r4,248(sp)
  809550:	3a400515 	stw	r9,20(r7)
  809554:	d8c03d17 	ldw	r3,244(sp)
  809558:	d9403f17 	ldw	r5,252(sp)
  80955c:	3a000415 	stw	r8,16(r7)
  809560:	38c00115 	stw	r3,4(r7)
  809564:	39400315 	stw	r5,12(r7)
  809568:	38800015 	stw	r2,0(r7)
  80956c:	39000215 	stw	r4,8(r7)
  809570:	003f2906 	br	809218 <__kernel_rem_pio2+0x910>
  809574:	183f281e 	bne	r3,zero,809218 <__kernel_rem_pio2+0x910>
  809578:	d9408d17 	ldw	r5,564(sp)
  80957c:	28008016 	blt	r5,zero,809780 <__kernel_rem_pio2+0xe78>
  809580:	dc008d17 	ldw	r16,564(sp)
  809584:	000d883a 	mov	r6,zero
  809588:	000f883a 	mov	r7,zero
  80958c:	800490fa 	slli	r2,r16,3
  809590:	04bfffc4 	movi	r18,-1
  809594:	16e3883a 	add	r17,r2,sp
  809598:	88803c17 	ldw	r2,240(r17)
  80959c:	88c03d17 	ldw	r3,244(r17)
  8095a0:	380b883a 	mov	r5,r7
  8095a4:	3009883a 	mov	r4,r6
  8095a8:	180f883a 	mov	r7,r3
  8095ac:	100d883a 	mov	r6,r2
  8095b0:	080bb840 	call	80bb84 <__adddf3>
  8095b4:	843fffc4 	addi	r16,r16,-1
  8095b8:	8c7ffe04 	addi	r17,r17,-8
  8095bc:	100d883a 	mov	r6,r2
  8095c0:	180f883a 	mov	r7,r3
  8095c4:	84bff41e 	bne	r16,r18,809598 <__kernel_rem_pio2+0xc90>
  8095c8:	da809217 	ldw	r10,584(sp)
  8095cc:	50000226 	beq	r10,zero,8095d8 <__kernel_rem_pio2+0xcd0>
  8095d0:	38e0003c 	xorhi	r3,r7,32768
  8095d4:	180f883a 	mov	r7,r3
  8095d8:	d8809717 	ldw	r2,604(sp)
  8095dc:	11c00115 	stw	r7,4(r2)
  8095e0:	11800015 	stw	r6,0(r2)
  8095e4:	003f0c06 	br	809218 <__kernel_rem_pio2+0x910>
  8095e8:	d8008c15 	stw	zero,560(sp)
  8095ec:	003ce406 	br	808980 <__kernel_rem_pio2+0x78>
  8095f0:	d9c09317 	ldw	r7,588(sp)
  8095f4:	880b883a 	mov	r5,r17
  8095f8:	8009883a 	mov	r4,r16
  8095fc:	01cdc83a 	sub	r6,zero,r7
  809600:	0801c700 	call	801c70 <scalbn>
  809604:	0011883a 	mov	r8,zero
  809608:	02505c34 	movhi	r9,16752
  80960c:	480f883a 	mov	r7,r9
  809610:	1009883a 	mov	r4,r2
  809614:	180b883a 	mov	r5,r3
  809618:	400d883a 	mov	r6,r8
  80961c:	102d883a 	mov	r22,r2
  809620:	182f883a 	mov	r23,r3
  809624:	080c3ac0 	call	80c3ac <__gedf2>
  809628:	10003716 	blt	r2,zero,809708 <__kernel_rem_pio2+0xe00>
  80962c:	0005883a 	mov	r2,zero
  809630:	00cf9c34 	movhi	r3,15984
  809634:	180f883a 	mov	r7,r3
  809638:	100d883a 	mov	r6,r2
  80963c:	b009883a 	mov	r4,r22
  809640:	b80b883a 	mov	r5,r23
  809644:	080bbf80 	call	80bbf8 <__muldf3>
  809648:	180b883a 	mov	r5,r3
  80964c:	1009883a 	mov	r4,r2
  809650:	080c63c0 	call	80c63c <__fixdfsi>
  809654:	1009883a 	mov	r4,r2
  809658:	080c5440 	call	80c544 <__floatsidf>
  80965c:	da808d17 	ldw	r10,564(sp)
  809660:	1023883a 	mov	r17,r2
  809664:	1825883a 	mov	r18,r3
  809668:	0005883a 	mov	r2,zero
  80966c:	00f05c34 	movhi	r3,49520
  809670:	180f883a 	mov	r7,r3
  809674:	8809883a 	mov	r4,r17
  809678:	900b883a 	mov	r5,r18
  80967c:	100d883a 	mov	r6,r2
  809680:	52ab883a 	add	r21,r10,r10
  809684:	080bbf80 	call	80bbf8 <__muldf3>
  809688:	180f883a 	mov	r7,r3
  80968c:	b80b883a 	mov	r5,r23
  809690:	100d883a 	mov	r6,r2
  809694:	b009883a 	mov	r4,r22
  809698:	080bb840 	call	80bb84 <__adddf3>
  80969c:	100d883a 	mov	r6,r2
  8096a0:	d8808d17 	ldw	r2,564(sp)
  8096a4:	180b883a 	mov	r5,r3
  8096a8:	3009883a 	mov	r4,r6
  8096ac:	10800044 	addi	r2,r2,1
  8096b0:	ad6b883a 	add	r21,r21,r21
  8096b4:	d8808d15 	stw	r2,564(sp)
  8096b8:	080c63c0 	call	80c63c <__fixdfsi>
  8096bc:	d8c08d17 	ldw	r3,564(sp)
  8096c0:	aeeb883a 	add	r21,r21,sp
  8096c4:	8809883a 	mov	r4,r17
  8096c8:	900b883a 	mov	r5,r18
  8096cc:	a8800015 	stw	r2,0(r21)
  8096d0:	18e1883a 	add	r16,r3,r3
  8096d4:	080c63c0 	call	80c63c <__fixdfsi>
  8096d8:	d9009317 	ldw	r4,588(sp)
  8096dc:	8421883a 	add	r16,r16,r16
  8096e0:	86e1883a 	add	r16,r16,sp
  8096e4:	21000604 	addi	r4,r4,24
  8096e8:	d9009315 	stw	r4,588(sp)
  8096ec:	80800015 	stw	r2,0(r16)
  8096f0:	003e3a06 	br	808fdc <__kernel_rem_pio2+0x6d4>
  8096f4:	4009883a 	mov	r4,r8
  8096f8:	4960003c 	xorhi	r5,r9,32768
  8096fc:	003ea406 	br	809190 <__kernel_rem_pio2+0x888>
  809700:	d9808d15 	stw	r6,564(sp)
  809704:	003e3506 	br	808fdc <__kernel_rem_pio2+0x6d4>
  809708:	d9408d17 	ldw	r5,564(sp)
  80970c:	b009883a 	mov	r4,r22
  809710:	2961883a 	add	r16,r5,r5
  809714:	8421883a 	add	r16,r16,r16
  809718:	b80b883a 	mov	r5,r23
  80971c:	86e1883a 	add	r16,r16,sp
  809720:	080c63c0 	call	80c63c <__fixdfsi>
  809724:	80800015 	stw	r2,0(r16)
  809728:	003e2c06 	br	808fdc <__kernel_rem_pio2+0x6d4>
  80972c:	d8c03d17 	ldw	r3,244(sp)
  809730:	d9403f17 	ldw	r5,252(sp)
  809734:	da809717 	ldw	r10,604(sp)
  809738:	d8803c17 	ldw	r2,240(sp)
  80973c:	d9003e17 	ldw	r4,248(sp)
  809740:	49e0003c 	xorhi	r7,r9,32768
  809744:	51c00515 	stw	r7,20(r10)
  809748:	19a0003c 	xorhi	r6,r3,32768
  80974c:	29e0003c 	xorhi	r7,r5,32768
  809750:	51800115 	stw	r6,4(r10)
  809754:	51c00315 	stw	r7,12(r10)
  809758:	50800015 	stw	r2,0(r10)
  80975c:	51000215 	stw	r4,8(r10)
  809760:	52000415 	stw	r8,16(r10)
  809764:	003eac06 	br	809218 <__kernel_rem_pio2+0x910>
  809768:	0011883a 	mov	r8,zero
  80976c:	0013883a 	mov	r9,zero
  809770:	003e8306 	br	809180 <__kernel_rem_pio2+0x878>
  809774:	0011883a 	mov	r8,zero
  809778:	0013883a 	mov	r9,zero
  80977c:	003f6f06 	br	80953c <__kernel_rem_pio2+0xc34>
  809780:	000d883a 	mov	r6,zero
  809784:	000f883a 	mov	r7,zero
  809788:	003f8f06 	br	8095c8 <__kernel_rem_pio2+0xcc0>

0080978c <__kernel_sin>:
  80978c:	00a00034 	movhi	r2,32768
  809790:	10bfffc4 	addi	r2,r2,-1
  809794:	deffef04 	addi	sp,sp,-68
  809798:	1144703a 	and	r2,r2,r5
  80979c:	00cf9034 	movhi	r3,15936
  8097a0:	18ffffc4 	addi	r3,r3,-1
  8097a4:	dd400d15 	stw	r21,52(sp)
  8097a8:	dd000c15 	stw	r20,48(sp)
  8097ac:	dfc01015 	stw	ra,64(sp)
  8097b0:	ddc00f15 	stw	r23,60(sp)
  8097b4:	dd800e15 	stw	r22,56(sp)
  8097b8:	dcc00b15 	stw	r19,44(sp)
  8097bc:	dc800a15 	stw	r18,40(sp)
  8097c0:	dc400915 	stw	r17,36(sp)
  8097c4:	dc000815 	stw	r16,32(sp)
  8097c8:	2029883a 	mov	r20,r4
  8097cc:	282b883a 	mov	r21,r5
  8097d0:	d9800415 	stw	r6,16(sp)
  8097d4:	d9c00515 	stw	r7,20(sp)
  8097d8:	18800216 	blt	r3,r2,8097e4 <__kernel_sin+0x58>
  8097dc:	080c63c0 	call	80c63c <__fixdfsi>
  8097e0:	10008826 	beq	r2,zero,809a04 <__kernel_sin+0x278>
  8097e4:	a009883a 	mov	r4,r20
  8097e8:	a80b883a 	mov	r5,r21
  8097ec:	a00d883a 	mov	r6,r20
  8097f0:	a80f883a 	mov	r7,r21
  8097f4:	080bbf80 	call	80bbf8 <__muldf3>
  8097f8:	102d883a 	mov	r22,r2
  8097fc:	a009883a 	mov	r4,r20
  809800:	a80b883a 	mov	r5,r21
  809804:	b00d883a 	mov	r6,r22
  809808:	180f883a 	mov	r7,r3
  80980c:	182f883a 	mov	r23,r3
  809810:	d8800215 	stw	r2,8(sp)
  809814:	d8c00315 	stw	r3,12(sp)
  809818:	080bbf80 	call	80bbf8 <__muldf3>
  80981c:	d9000217 	ldw	r4,8(sp)
  809820:	0216b434 	movhi	r8,23248
  809824:	42355f04 	addi	r8,r8,-10884
  809828:	024f79b4 	movhi	r9,15846
  80982c:	4a764e84 	addi	r9,r9,-9926
  809830:	480f883a 	mov	r7,r9
  809834:	400d883a 	mov	r6,r8
  809838:	b80b883a 	mov	r5,r23
  80983c:	d8800615 	stw	r2,24(sp)
  809840:	d8c00715 	stw	r3,28(sp)
  809844:	080bbf80 	call	80bbf8 <__muldf3>
  809848:	02228b34 	movhi	r8,35372
  80984c:	42273ac4 	addi	r8,r8,-25365
  809850:	024f96f4 	movhi	r9,15963
  809854:	4a797984 	addi	r9,r9,-6682
  809858:	480f883a 	mov	r7,r9
  80985c:	400d883a 	mov	r6,r8
  809860:	180b883a 	mov	r5,r3
  809864:	1009883a 	mov	r4,r2
  809868:	080bb040 	call	80bb04 <__subdf3>
  80986c:	d9000217 	ldw	r4,8(sp)
  809870:	180f883a 	mov	r7,r3
  809874:	b80b883a 	mov	r5,r23
  809878:	100d883a 	mov	r6,r2
  80987c:	080bbf80 	call	80bbf8 <__muldf3>
  809880:	0215ecb4 	movhi	r8,22450
  809884:	423f9f44 	addi	r8,r8,-387
  809888:	024fb1f4 	movhi	r9,16071
  80988c:	4a4778c4 	addi	r9,r9,7651
  809890:	480f883a 	mov	r7,r9
  809894:	400d883a 	mov	r6,r8
  809898:	180b883a 	mov	r5,r3
  80989c:	1009883a 	mov	r4,r2
  8098a0:	080bb840 	call	80bb84 <__adddf3>
  8098a4:	d9000217 	ldw	r4,8(sp)
  8098a8:	180f883a 	mov	r7,r3
  8098ac:	b80b883a 	mov	r5,r23
  8098b0:	100d883a 	mov	r6,r2
  8098b4:	080bbf80 	call	80bbf8 <__muldf3>
  8098b8:	02067074 	movhi	r8,6593
  8098bc:	42187544 	addi	r8,r8,25045
  8098c0:	024fcab4 	movhi	r9,16170
  8098c4:	4a406804 	addi	r9,r9,416
  8098c8:	480f883a 	mov	r7,r9
  8098cc:	400d883a 	mov	r6,r8
  8098d0:	180b883a 	mov	r5,r3
  8098d4:	1009883a 	mov	r4,r2
  8098d8:	080bb040 	call	80bb04 <__subdf3>
  8098dc:	d9000217 	ldw	r4,8(sp)
  8098e0:	180f883a 	mov	r7,r3
  8098e4:	b80b883a 	mov	r5,r23
  8098e8:	100d883a 	mov	r6,r2
  8098ec:	080bbf80 	call	80bbf8 <__muldf3>
  8098f0:	02044474 	movhi	r8,4369
  8098f4:	423e2984 	addi	r8,r8,-1882
  8098f8:	024fe074 	movhi	r9,16257
  8098fc:	4a444444 	addi	r9,r9,4369
  809900:	180b883a 	mov	r5,r3
  809904:	480f883a 	mov	r7,r9
  809908:	1009883a 	mov	r4,r2
  80990c:	400d883a 	mov	r6,r8
  809910:	080bb840 	call	80bb84 <__adddf3>
  809914:	1021883a 	mov	r16,r2
  809918:	d8800617 	ldw	r2,24(sp)
  80991c:	1823883a 	mov	r17,r3
  809920:	d8800015 	stw	r2,0(sp)
  809924:	d8800717 	ldw	r2,28(sp)
  809928:	d8800115 	stw	r2,4(sp)
  80992c:	d8801117 	ldw	r2,68(sp)
  809930:	10004126 	beq	r2,zero,809a38 <__kernel_sin+0x2ac>
  809934:	d9000417 	ldw	r4,16(sp)
  809938:	d9400517 	ldw	r5,20(sp)
  80993c:	0005883a 	mov	r2,zero
  809940:	00cff834 	movhi	r3,16352
  809944:	180f883a 	mov	r7,r3
  809948:	100d883a 	mov	r6,r2
  80994c:	080bbf80 	call	80bbf8 <__muldf3>
  809950:	d9000017 	ldw	r4,0(sp)
  809954:	d9400717 	ldw	r5,28(sp)
  809958:	800d883a 	mov	r6,r16
  80995c:	880f883a 	mov	r7,r17
  809960:	1021883a 	mov	r16,r2
  809964:	1823883a 	mov	r17,r3
  809968:	080bbf80 	call	80bbf8 <__muldf3>
  80996c:	180f883a 	mov	r7,r3
  809970:	880b883a 	mov	r5,r17
  809974:	8009883a 	mov	r4,r16
  809978:	100d883a 	mov	r6,r2
  80997c:	080bb040 	call	80bb04 <__subdf3>
  809980:	d9000217 	ldw	r4,8(sp)
  809984:	b80b883a 	mov	r5,r23
  809988:	180f883a 	mov	r7,r3
  80998c:	100d883a 	mov	r6,r2
  809990:	080bbf80 	call	80bbf8 <__muldf3>
  809994:	d9c00517 	ldw	r7,20(sp)
  809998:	d9800417 	ldw	r6,16(sp)
  80999c:	180b883a 	mov	r5,r3
  8099a0:	1009883a 	mov	r4,r2
  8099a4:	080bb040 	call	80bb04 <__subdf3>
  8099a8:	d9000017 	ldw	r4,0(sp)
  8099ac:	d9400717 	ldw	r5,28(sp)
  8099b0:	02155574 	movhi	r8,21845
  8099b4:	42155244 	addi	r8,r8,21833
  8099b8:	024ff174 	movhi	r9,16325
  8099bc:	4a555544 	addi	r9,r9,21845
  8099c0:	480f883a 	mov	r7,r9
  8099c4:	400d883a 	mov	r6,r8
  8099c8:	1021883a 	mov	r16,r2
  8099cc:	1823883a 	mov	r17,r3
  8099d0:	080bbf80 	call	80bbf8 <__muldf3>
  8099d4:	180f883a 	mov	r7,r3
  8099d8:	880b883a 	mov	r5,r17
  8099dc:	8009883a 	mov	r4,r16
  8099e0:	100d883a 	mov	r6,r2
  8099e4:	080bb840 	call	80bb84 <__adddf3>
  8099e8:	180f883a 	mov	r7,r3
  8099ec:	a80b883a 	mov	r5,r21
  8099f0:	a009883a 	mov	r4,r20
  8099f4:	100d883a 	mov	r6,r2
  8099f8:	080bb040 	call	80bb04 <__subdf3>
  8099fc:	1029883a 	mov	r20,r2
  809a00:	182b883a 	mov	r21,r3
  809a04:	a005883a 	mov	r2,r20
  809a08:	a807883a 	mov	r3,r21
  809a0c:	dfc01017 	ldw	ra,64(sp)
  809a10:	ddc00f17 	ldw	r23,60(sp)
  809a14:	dd800e17 	ldw	r22,56(sp)
  809a18:	dd400d17 	ldw	r21,52(sp)
  809a1c:	dd000c17 	ldw	r20,48(sp)
  809a20:	dcc00b17 	ldw	r19,44(sp)
  809a24:	dc800a17 	ldw	r18,40(sp)
  809a28:	dc400917 	ldw	r17,36(sp)
  809a2c:	dc000817 	ldw	r16,32(sp)
  809a30:	dec01104 	addi	sp,sp,68
  809a34:	f800283a 	ret
  809a38:	d9000217 	ldw	r4,8(sp)
  809a3c:	b80b883a 	mov	r5,r23
  809a40:	800d883a 	mov	r6,r16
  809a44:	180f883a 	mov	r7,r3
  809a48:	080bbf80 	call	80bbf8 <__muldf3>
  809a4c:	02155574 	movhi	r8,21845
  809a50:	42155244 	addi	r8,r8,21833
  809a54:	024ff174 	movhi	r9,16325
  809a58:	4a555544 	addi	r9,r9,21845
  809a5c:	480f883a 	mov	r7,r9
  809a60:	400d883a 	mov	r6,r8
  809a64:	180b883a 	mov	r5,r3
  809a68:	1009883a 	mov	r4,r2
  809a6c:	080bb040 	call	80bb04 <__subdf3>
  809a70:	d9000017 	ldw	r4,0(sp)
  809a74:	d9400717 	ldw	r5,28(sp)
  809a78:	180f883a 	mov	r7,r3
  809a7c:	100d883a 	mov	r6,r2
  809a80:	080bbf80 	call	80bbf8 <__muldf3>
  809a84:	180f883a 	mov	r7,r3
  809a88:	a80b883a 	mov	r5,r21
  809a8c:	a009883a 	mov	r4,r20
  809a90:	100d883a 	mov	r6,r2
  809a94:	080bb840 	call	80bb84 <__adddf3>
  809a98:	1029883a 	mov	r20,r2
  809a9c:	182b883a 	mov	r21,r3
  809aa0:	003fd806 	br	809a04 <__kernel_sin+0x278>

00809aa4 <__kernel_tan>:
  809aa4:	deffe104 	addi	sp,sp,-124
  809aa8:	00a00034 	movhi	r2,32768
  809aac:	10bfffc4 	addi	r2,r2,-1
  809ab0:	df001d15 	stw	fp,116(sp)
  809ab4:	28b8703a 	and	fp,r5,r2
  809ab8:	008f8c34 	movhi	r2,15920
  809abc:	10bfffc4 	addi	r2,r2,-1
  809ac0:	dfc01e15 	stw	ra,120(sp)
  809ac4:	ddc01c15 	stw	r23,112(sp)
  809ac8:	dd801b15 	stw	r22,108(sp)
  809acc:	dd401a15 	stw	r21,104(sp)
  809ad0:	dd001915 	stw	r20,100(sp)
  809ad4:	dcc01815 	stw	r19,96(sp)
  809ad8:	dc801715 	stw	r18,92(sp)
  809adc:	dc401615 	stw	r17,88(sp)
  809ae0:	dc001515 	stw	r16,84(sp)
  809ae4:	d9000b15 	stw	r4,44(sp)
  809ae8:	d9400c15 	stw	r5,48(sp)
  809aec:	d9400815 	stw	r5,32(sp)
  809af0:	d9800d15 	stw	r6,52(sp)
  809af4:	d9c00e15 	stw	r7,56(sp)
  809af8:	17013b16 	blt	r2,fp,809fe8 <__kernel_tan+0x544>
  809afc:	080c63c0 	call	80c63c <__fixdfsi>
  809b00:	10019e26 	beq	r2,zero,80a17c <__kernel_tan+0x6d8>
  809b04:	d9000b17 	ldw	r4,44(sp)
  809b08:	d9400c17 	ldw	r5,48(sp)
  809b0c:	200d883a 	mov	r6,r4
  809b10:	280f883a 	mov	r7,r5
  809b14:	080bbf80 	call	80bbf8 <__muldf3>
  809b18:	1009883a 	mov	r4,r2
  809b1c:	180b883a 	mov	r5,r3
  809b20:	100d883a 	mov	r6,r2
  809b24:	180f883a 	mov	r7,r3
  809b28:	182b883a 	mov	r21,r3
  809b2c:	d8800915 	stw	r2,36(sp)
  809b30:	d8c00a15 	stw	r3,40(sp)
  809b34:	080bbf80 	call	80bbf8 <__muldf3>
  809b38:	d9000b17 	ldw	r4,44(sp)
  809b3c:	d9400c17 	ldw	r5,48(sp)
  809b40:	d9800917 	ldw	r6,36(sp)
  809b44:	a80f883a 	mov	r7,r21
  809b48:	1021883a 	mov	r16,r2
  809b4c:	1823883a 	mov	r17,r3
  809b50:	080bbf80 	call	80bbf8 <__muldf3>
  809b54:	0236d834 	movhi	r8,56160
  809b58:	4214dcc4 	addi	r8,r8,21363
  809b5c:	026fbcf4 	movhi	r9,48883
  809b60:	4a5d72c4 	addi	r9,r9,30155
  809b64:	480f883a 	mov	r7,r9
  809b68:	8009883a 	mov	r4,r16
  809b6c:	880b883a 	mov	r5,r17
  809b70:	400d883a 	mov	r6,r8
  809b74:	d8800f15 	stw	r2,60(sp)
  809b78:	d8c01015 	stw	r3,64(sp)
  809b7c:	080bbf80 	call	80bbf8 <__muldf3>
  809b80:	02280e34 	movhi	r8,41016
  809b84:	4224a984 	addi	r8,r8,-27994
  809b88:	024fc534 	movhi	r9,16148
  809b8c:	4a5fa204 	addi	r9,r9,32392
  809b90:	480f883a 	mov	r7,r9
  809b94:	400d883a 	mov	r6,r8
  809b98:	180b883a 	mov	r5,r3
  809b9c:	1009883a 	mov	r4,r2
  809ba0:	080bb840 	call	80bb84 <__adddf3>
  809ba4:	180f883a 	mov	r7,r3
  809ba8:	8009883a 	mov	r4,r16
  809bac:	880b883a 	mov	r5,r17
  809bb0:	100d883a 	mov	r6,r2
  809bb4:	080bbf80 	call	80bbf8 <__muldf3>
  809bb8:	023cbcb4 	movhi	r8,62194
  809bbc:	42194044 	addi	r8,r8,25857
  809bc0:	024fd0f4 	movhi	r9,16195
  809bc4:	4a513604 	addi	r9,r9,17624
  809bc8:	480f883a 	mov	r7,r9
  809bcc:	400d883a 	mov	r6,r8
  809bd0:	180b883a 	mov	r5,r3
  809bd4:	1009883a 	mov	r4,r2
  809bd8:	080bb840 	call	80bb84 <__adddf3>
  809bdc:	180f883a 	mov	r7,r3
  809be0:	8009883a 	mov	r4,r16
  809be4:	880b883a 	mov	r5,r17
  809be8:	100d883a 	mov	r6,r2
  809bec:	080bbf80 	call	80bbf8 <__muldf3>
  809bf0:	023255b4 	movhi	r8,51542
  809bf4:	4200ca04 	addi	r8,r8,808
  809bf8:	024fdb74 	movhi	r9,16237
  809bfc:	4a5b4884 	addi	r9,r9,27938
  809c00:	480f883a 	mov	r7,r9
  809c04:	400d883a 	mov	r6,r8
  809c08:	180b883a 	mov	r5,r3
  809c0c:	1009883a 	mov	r4,r2
  809c10:	080bb840 	call	80bb84 <__adddf3>
  809c14:	180f883a 	mov	r7,r3
  809c18:	8009883a 	mov	r4,r16
  809c1c:	880b883a 	mov	r5,r17
  809c20:	100d883a 	mov	r6,r2
  809c24:	080bbf80 	call	80bbf8 <__muldf3>
  809c28:	022101f4 	movhi	r8,33799
  809c2c:	42358dc4 	addi	r8,r8,-10697
  809c30:	024fe5b4 	movhi	r9,16278
  809c34:	4a593d04 	addi	r9,r9,25844
  809c38:	480f883a 	mov	r7,r9
  809c3c:	400d883a 	mov	r6,r8
  809c40:	180b883a 	mov	r5,r3
  809c44:	1009883a 	mov	r4,r2
  809c48:	080bb840 	call	80bb84 <__adddf3>
  809c4c:	180f883a 	mov	r7,r3
  809c50:	8009883a 	mov	r4,r16
  809c54:	880b883a 	mov	r5,r17
  809c58:	100d883a 	mov	r6,r2
  809c5c:	080bbf80 	call	80bbf8 <__muldf3>
  809c60:	02044474 	movhi	r8,4369
  809c64:	423f9e84 	addi	r8,r8,-390
  809c68:	024ff074 	movhi	r9,16321
  809c6c:	4a444444 	addi	r9,r9,4369
  809c70:	480f883a 	mov	r7,r9
  809c74:	400d883a 	mov	r6,r8
  809c78:	180b883a 	mov	r5,r3
  809c7c:	1009883a 	mov	r4,r2
  809c80:	080bb840 	call	80bb84 <__adddf3>
  809c84:	021d2ff4 	movhi	r8,29887
  809c88:	421eb504 	addi	r8,r8,31444
  809c8c:	024fbef4 	movhi	r9,16123
  809c90:	4a4a9c04 	addi	r9,r9,10864
  809c94:	480f883a 	mov	r7,r9
  809c98:	8009883a 	mov	r4,r16
  809c9c:	880b883a 	mov	r5,r17
  809ca0:	400d883a 	mov	r6,r8
  809ca4:	102d883a 	mov	r22,r2
  809ca8:	182f883a 	mov	r23,r3
  809cac:	080bbf80 	call	80bbf8 <__muldf3>
  809cb0:	020cbc74 	movhi	r8,13041
  809cb4:	4229fa44 	addi	r8,r8,-22551
  809cb8:	024fc4f4 	movhi	r9,16147
  809cbc:	4a6e03c4 	addi	r9,r9,-18417
  809cc0:	480f883a 	mov	r7,r9
  809cc4:	400d883a 	mov	r6,r8
  809cc8:	180b883a 	mov	r5,r3
  809ccc:	1009883a 	mov	r4,r2
  809cd0:	080bb840 	call	80bb84 <__adddf3>
  809cd4:	180f883a 	mov	r7,r3
  809cd8:	8009883a 	mov	r4,r16
  809cdc:	880b883a 	mov	r5,r17
  809ce0:	100d883a 	mov	r6,r2
  809ce4:	080bbf80 	call	80bbf8 <__muldf3>
  809ce8:	0206a374 	movhi	r8,6797
  809cec:	42041a04 	addi	r8,r8,4200
  809cf0:	024fcc34 	movhi	r9,16176
  809cf4:	4a49bdc4 	addi	r9,r9,9975
  809cf8:	480f883a 	mov	r7,r9
  809cfc:	400d883a 	mov	r6,r8
  809d00:	180b883a 	mov	r5,r3
  809d04:	1009883a 	mov	r4,r2
  809d08:	080bb840 	call	80bb84 <__adddf3>
  809d0c:	180f883a 	mov	r7,r3
  809d10:	8009883a 	mov	r4,r16
  809d14:	880b883a 	mov	r5,r17
  809d18:	100d883a 	mov	r6,r2
  809d1c:	080bbf80 	call	80bbf8 <__muldf3>
  809d20:	023fb874 	movhi	r8,65249
  809d24:	4220c544 	addi	r8,r8,-31979
  809d28:	024fd634 	movhi	r9,16216
  809d2c:	4a76f204 	addi	r9,r9,-9272
  809d30:	480f883a 	mov	r7,r9
  809d34:	400d883a 	mov	r6,r8
  809d38:	180b883a 	mov	r5,r3
  809d3c:	1009883a 	mov	r4,r2
  809d40:	080bb840 	call	80bb84 <__adddf3>
  809d44:	180f883a 	mov	r7,r3
  809d48:	8009883a 	mov	r4,r16
  809d4c:	880b883a 	mov	r5,r17
  809d50:	100d883a 	mov	r6,r2
  809d54:	080bbf80 	call	80bbf8 <__muldf3>
  809d58:	023a5bf4 	movhi	r8,59759
  809d5c:	422124c4 	addi	r8,r8,-31597
  809d60:	024fe0b4 	movhi	r9,16258
  809d64:	4a49b8c4 	addi	r9,r9,9955
  809d68:	480f883a 	mov	r7,r9
  809d6c:	400d883a 	mov	r6,r8
  809d70:	180b883a 	mov	r5,r3
  809d74:	1009883a 	mov	r4,r2
  809d78:	080bb840 	call	80bb84 <__adddf3>
  809d7c:	180f883a 	mov	r7,r3
  809d80:	8009883a 	mov	r4,r16
  809d84:	880b883a 	mov	r5,r17
  809d88:	100d883a 	mov	r6,r2
  809d8c:	080bbf80 	call	80bbf8 <__muldf3>
  809d90:	0206ecf4 	movhi	r8,7091
  809d94:	42107f84 	addi	r8,r8,16894
  809d98:	024feb34 	movhi	r9,16300
  809d9c:	4a686e84 	addi	r9,r9,-24134
  809da0:	480f883a 	mov	r7,r9
  809da4:	400d883a 	mov	r6,r8
  809da8:	180b883a 	mov	r5,r3
  809dac:	1009883a 	mov	r4,r2
  809db0:	080bb840 	call	80bb84 <__adddf3>
  809db4:	d9000917 	ldw	r4,36(sp)
  809db8:	180f883a 	mov	r7,r3
  809dbc:	a80b883a 	mov	r5,r21
  809dc0:	100d883a 	mov	r6,r2
  809dc4:	080bbf80 	call	80bbf8 <__muldf3>
  809dc8:	180f883a 	mov	r7,r3
  809dcc:	b80b883a 	mov	r5,r23
  809dd0:	b009883a 	mov	r4,r22
  809dd4:	100d883a 	mov	r6,r2
  809dd8:	080bb840 	call	80bb84 <__adddf3>
  809ddc:	1011883a 	mov	r8,r2
  809de0:	1813883a 	mov	r9,r3
  809de4:	d8800f17 	ldw	r2,60(sp)
  809de8:	d8c01017 	ldw	r3,64(sp)
  809dec:	480f883a 	mov	r7,r9
  809df0:	400d883a 	mov	r6,r8
  809df4:	1009883a 	mov	r4,r2
  809df8:	180b883a 	mov	r5,r3
  809dfc:	1021883a 	mov	r16,r2
  809e00:	080bbf80 	call	80bbf8 <__muldf3>
  809e04:	d9000d17 	ldw	r4,52(sp)
  809e08:	d9400e17 	ldw	r5,56(sp)
  809e0c:	180f883a 	mov	r7,r3
  809e10:	100d883a 	mov	r6,r2
  809e14:	080bb840 	call	80bb84 <__adddf3>
  809e18:	d9000917 	ldw	r4,36(sp)
  809e1c:	a80b883a 	mov	r5,r21
  809e20:	180f883a 	mov	r7,r3
  809e24:	100d883a 	mov	r6,r2
  809e28:	080bbf80 	call	80bbf8 <__muldf3>
  809e2c:	d9400e17 	ldw	r5,56(sp)
  809e30:	d9000d17 	ldw	r4,52(sp)
  809e34:	180f883a 	mov	r7,r3
  809e38:	100d883a 	mov	r6,r2
  809e3c:	080bb840 	call	80bb84 <__adddf3>
  809e40:	d9401017 	ldw	r5,64(sp)
  809e44:	02155574 	movhi	r8,21845
  809e48:	421558c4 	addi	r8,r8,21859
  809e4c:	024ff574 	movhi	r9,16341
  809e50:	4a555544 	addi	r9,r9,21845
  809e54:	480f883a 	mov	r7,r9
  809e58:	400d883a 	mov	r6,r8
  809e5c:	8009883a 	mov	r4,r16
  809e60:	1823883a 	mov	r17,r3
  809e64:	1021883a 	mov	r16,r2
  809e68:	080bbf80 	call	80bbf8 <__muldf3>
  809e6c:	180f883a 	mov	r7,r3
  809e70:	8009883a 	mov	r4,r16
  809e74:	880b883a 	mov	r5,r17
  809e78:	100d883a 	mov	r6,r2
  809e7c:	080bb840 	call	80bb84 <__adddf3>
  809e80:	d9000b17 	ldw	r4,44(sp)
  809e84:	d9400c17 	ldw	r5,48(sp)
  809e88:	100d883a 	mov	r6,r2
  809e8c:	180f883a 	mov	r7,r3
  809e90:	d8801115 	stw	r2,68(sp)
  809e94:	d8c01215 	stw	r3,72(sp)
  809e98:	d8800015 	stw	r2,0(sp)
  809e9c:	d8c00115 	stw	r3,4(sp)
  809ea0:	080bb840 	call	80bb84 <__adddf3>
  809ea4:	d8801315 	stw	r2,76(sp)
  809ea8:	d8800215 	stw	r2,8(sp)
  809eac:	008ff9b4 	movhi	r2,16358
  809eb0:	10a509c4 	addi	r2,r2,-27609
  809eb4:	d8c01415 	stw	r3,80(sp)
  809eb8:	d8c00315 	stw	r3,12(sp)
  809ebc:	17006f0e 	bge	r2,fp,80a07c <__kernel_tan+0x5d8>
  809ec0:	d9001f17 	ldw	r4,124(sp)
  809ec4:	080c5440 	call	80c544 <__floatsidf>
  809ec8:	d9000817 	ldw	r4,32(sp)
  809ecc:	1025883a 	mov	r18,r2
  809ed0:	1827883a 	mov	r19,r3
  809ed4:	200bd7ba 	srai	r5,r4,30
  809ed8:	01000044 	movi	r4,1
  809edc:	2940008c 	andi	r5,r5,2
  809ee0:	2149c83a 	sub	r4,r4,r5
  809ee4:	080c5440 	call	80c544 <__floatsidf>
  809ee8:	d9401417 	ldw	r5,80(sp)
  809eec:	d9000217 	ldw	r4,8(sp)
  809ef0:	102d883a 	mov	r22,r2
  809ef4:	280f883a 	mov	r7,r5
  809ef8:	200d883a 	mov	r6,r4
  809efc:	182f883a 	mov	r23,r3
  809f00:	080bbf80 	call	80bbf8 <__muldf3>
  809f04:	d9000217 	ldw	r4,8(sp)
  809f08:	d9401417 	ldw	r5,80(sp)
  809f0c:	900d883a 	mov	r6,r18
  809f10:	980f883a 	mov	r7,r19
  809f14:	1021883a 	mov	r16,r2
  809f18:	1823883a 	mov	r17,r3
  809f1c:	080bb840 	call	80bb84 <__adddf3>
  809f20:	180f883a 	mov	r7,r3
  809f24:	880b883a 	mov	r5,r17
  809f28:	8009883a 	mov	r4,r16
  809f2c:	100d883a 	mov	r6,r2
  809f30:	080bfbc0 	call	80bfbc <__divdf3>
  809f34:	d9800017 	ldw	r6,0(sp)
  809f38:	d9c01217 	ldw	r7,72(sp)
  809f3c:	180b883a 	mov	r5,r3
  809f40:	1009883a 	mov	r4,r2
  809f44:	080bb040 	call	80bb04 <__subdf3>
  809f48:	d9400c17 	ldw	r5,48(sp)
  809f4c:	d9000b17 	ldw	r4,44(sp)
  809f50:	180f883a 	mov	r7,r3
  809f54:	100d883a 	mov	r6,r2
  809f58:	080bb040 	call	80bb04 <__subdf3>
  809f5c:	0011883a 	mov	r8,zero
  809f60:	02700034 	movhi	r9,49152
  809f64:	480f883a 	mov	r7,r9
  809f68:	400d883a 	mov	r6,r8
  809f6c:	180b883a 	mov	r5,r3
  809f70:	1009883a 	mov	r4,r2
  809f74:	080bbf80 	call	80bbf8 <__muldf3>
  809f78:	180f883a 	mov	r7,r3
  809f7c:	9009883a 	mov	r4,r18
  809f80:	980b883a 	mov	r5,r19
  809f84:	100d883a 	mov	r6,r2
  809f88:	080bb840 	call	80bb84 <__adddf3>
  809f8c:	180f883a 	mov	r7,r3
  809f90:	b80b883a 	mov	r5,r23
  809f94:	b009883a 	mov	r4,r22
  809f98:	100d883a 	mov	r6,r2
  809f9c:	080bbf80 	call	80bbf8 <__muldf3>
  809fa0:	d8800b15 	stw	r2,44(sp)
  809fa4:	d8c00c15 	stw	r3,48(sp)
  809fa8:	d9000b17 	ldw	r4,44(sp)
  809fac:	d9800c17 	ldw	r6,48(sp)
  809fb0:	2005883a 	mov	r2,r4
  809fb4:	3007883a 	mov	r3,r6
  809fb8:	dfc01e17 	ldw	ra,120(sp)
  809fbc:	df001d17 	ldw	fp,116(sp)
  809fc0:	ddc01c17 	ldw	r23,112(sp)
  809fc4:	dd801b17 	ldw	r22,108(sp)
  809fc8:	dd401a17 	ldw	r21,104(sp)
  809fcc:	dd001917 	ldw	r20,100(sp)
  809fd0:	dcc01817 	ldw	r19,96(sp)
  809fd4:	dc801717 	ldw	r18,92(sp)
  809fd8:	dc401617 	ldw	r17,88(sp)
  809fdc:	dc001517 	ldw	r16,84(sp)
  809fe0:	dec01f04 	addi	sp,sp,124
  809fe4:	f800283a 	ret
  809fe8:	008ff9b4 	movhi	r2,16358
  809fec:	10a509c4 	addi	r2,r2,-27609
  809ff0:	173ec40e 	bge	r2,fp,809b04 <__kernel_tan+0x60>
  809ff4:	d8800817 	ldw	r2,32(sp)
  809ff8:	10007d16 	blt	r2,zero,80a1f0 <__kernel_tan+0x74c>
  809ffc:	d9c00c17 	ldw	r7,48(sp)
  80a000:	d9800b17 	ldw	r6,44(sp)
  80a004:	00951134 	movhi	r2,21572
  80a008:	108b4604 	addi	r2,r2,11544
  80a00c:	00cffa74 	movhi	r3,16361
  80a010:	18c87ec4 	addi	r3,r3,8699
  80a014:	180b883a 	mov	r5,r3
  80a018:	1009883a 	mov	r4,r2
  80a01c:	080bb040 	call	80bb04 <__subdf3>
  80a020:	d9c00e17 	ldw	r7,56(sp)
  80a024:	d9800d17 	ldw	r6,52(sp)
  80a028:	020cc534 	movhi	r8,13076
  80a02c:	421701c4 	addi	r8,r8,23559
  80a030:	024f20b4 	movhi	r9,15490
  80a034:	4a698984 	addi	r9,r9,-23002
  80a038:	480b883a 	mov	r5,r9
  80a03c:	4009883a 	mov	r4,r8
  80a040:	1021883a 	mov	r16,r2
  80a044:	1823883a 	mov	r17,r3
  80a048:	080bb040 	call	80bb04 <__subdf3>
  80a04c:	180f883a 	mov	r7,r3
  80a050:	880b883a 	mov	r5,r17
  80a054:	8009883a 	mov	r4,r16
  80a058:	100d883a 	mov	r6,r2
  80a05c:	080bb840 	call	80bb84 <__adddf3>
  80a060:	180b883a 	mov	r5,r3
  80a064:	0007883a 	mov	r3,zero
  80a068:	d8800b15 	stw	r2,44(sp)
  80a06c:	d8c00d15 	stw	r3,52(sp)
  80a070:	d9400c15 	stw	r5,48(sp)
  80a074:	d8c00e15 	stw	r3,56(sp)
  80a078:	003ea206 	br	809b04 <__kernel_tan+0x60>
  80a07c:	d8c01f17 	ldw	r3,124(sp)
  80a080:	00800044 	movi	r2,1
  80a084:	18806126 	beq	r3,r2,80a20c <__kernel_tan+0x768>
  80a088:	d9800217 	ldw	r6,8(sp)
  80a08c:	d9c01417 	ldw	r7,80(sp)
  80a090:	0005883a 	mov	r2,zero
  80a094:	00effc34 	movhi	r3,49136
  80a098:	180b883a 	mov	r5,r3
  80a09c:	1009883a 	mov	r4,r2
  80a0a0:	080bfbc0 	call	80bfbc <__divdf3>
  80a0a4:	d8800615 	stw	r2,24(sp)
  80a0a8:	d8801417 	ldw	r2,80(sp)
  80a0ac:	182f883a 	mov	r23,r3
  80a0b0:	0025883a 	mov	r18,zero
  80a0b4:	d8c00715 	stw	r3,28(sp)
  80a0b8:	9009883a 	mov	r4,r18
  80a0bc:	b80f883a 	mov	r7,r23
  80a0c0:	0007883a 	mov	r3,zero
  80a0c4:	100b883a 	mov	r5,r2
  80a0c8:	000d883a 	mov	r6,zero
  80a0cc:	1023883a 	mov	r17,r2
  80a0d0:	d8c00415 	stw	r3,16(sp)
  80a0d4:	ddc00515 	stw	r23,20(sp)
  80a0d8:	080bbf80 	call	80bbf8 <__muldf3>
  80a0dc:	0011883a 	mov	r8,zero
  80a0e0:	024ffc34 	movhi	r9,16368
  80a0e4:	480f883a 	mov	r7,r9
  80a0e8:	400d883a 	mov	r6,r8
  80a0ec:	180b883a 	mov	r5,r3
  80a0f0:	1009883a 	mov	r4,r2
  80a0f4:	080bb840 	call	80bb84 <__adddf3>
  80a0f8:	d9c00c17 	ldw	r7,48(sp)
  80a0fc:	d9800b17 	ldw	r6,44(sp)
  80a100:	9009883a 	mov	r4,r18
  80a104:	880b883a 	mov	r5,r17
  80a108:	1021883a 	mov	r16,r2
  80a10c:	1823883a 	mov	r17,r3
  80a110:	080bb040 	call	80bb04 <__subdf3>
  80a114:	d9000017 	ldw	r4,0(sp)
  80a118:	d9401217 	ldw	r5,72(sp)
  80a11c:	180f883a 	mov	r7,r3
  80a120:	100d883a 	mov	r6,r2
  80a124:	080bb040 	call	80bb04 <__subdf3>
  80a128:	d9800417 	ldw	r6,16(sp)
  80a12c:	b80f883a 	mov	r7,r23
  80a130:	180b883a 	mov	r5,r3
  80a134:	1009883a 	mov	r4,r2
  80a138:	080bbf80 	call	80bbf8 <__muldf3>
  80a13c:	180f883a 	mov	r7,r3
  80a140:	880b883a 	mov	r5,r17
  80a144:	8009883a 	mov	r4,r16
  80a148:	100d883a 	mov	r6,r2
  80a14c:	080bb840 	call	80bb84 <__adddf3>
  80a150:	d9000617 	ldw	r4,24(sp)
  80a154:	b80b883a 	mov	r5,r23
  80a158:	180f883a 	mov	r7,r3
  80a15c:	100d883a 	mov	r6,r2
  80a160:	080bbf80 	call	80bbf8 <__muldf3>
  80a164:	d9000417 	ldw	r4,16(sp)
  80a168:	b80b883a 	mov	r5,r23
  80a16c:	180f883a 	mov	r7,r3
  80a170:	100d883a 	mov	r6,r2
  80a174:	080bb840 	call	80bb84 <__adddf3>
  80a178:	003f8906 	br	809fa0 <__kernel_tan+0x4fc>
  80a17c:	d9000b17 	ldw	r4,44(sp)
  80a180:	d8c01f17 	ldw	r3,124(sp)
  80a184:	d9800c17 	ldw	r6,48(sp)
  80a188:	e104b03a 	or	r2,fp,r4
  80a18c:	19000044 	addi	r4,r3,1
  80a190:	1104b03a 	or	r2,r2,r4
  80a194:	10000b26 	beq	r2,zero,80a1c4 <__kernel_tan+0x720>
  80a198:	d8c01f17 	ldw	r3,124(sp)
  80a19c:	00800044 	movi	r2,1
  80a1a0:	18bf8126 	beq	r3,r2,809fa8 <__kernel_tan+0x504>
  80a1a4:	d9c00c17 	ldw	r7,48(sp)
  80a1a8:	d9800b17 	ldw	r6,44(sp)
  80a1ac:	0005883a 	mov	r2,zero
  80a1b0:	00effc34 	movhi	r3,49136
  80a1b4:	180b883a 	mov	r5,r3
  80a1b8:	1009883a 	mov	r4,r2
  80a1bc:	080bfbc0 	call	80bfbc <__divdf3>
  80a1c0:	003f7706 	br	809fa0 <__kernel_tan+0x4fc>
  80a1c4:	d9000b17 	ldw	r4,44(sp)
  80a1c8:	300b883a 	mov	r5,r6
  80a1cc:	080175c0 	call	80175c <fabs>
  80a1d0:	0011883a 	mov	r8,zero
  80a1d4:	024ffc34 	movhi	r9,16368
  80a1d8:	480b883a 	mov	r5,r9
  80a1dc:	180f883a 	mov	r7,r3
  80a1e0:	4009883a 	mov	r4,r8
  80a1e4:	100d883a 	mov	r6,r2
  80a1e8:	080bfbc0 	call	80bfbc <__divdf3>
  80a1ec:	003f6c06 	br	809fa0 <__kernel_tan+0x4fc>
  80a1f0:	d9800c17 	ldw	r6,48(sp)
  80a1f4:	30e0003c 	xorhi	r3,r6,32768
  80a1f8:	d9800e17 	ldw	r6,56(sp)
  80a1fc:	d8c00c15 	stw	r3,48(sp)
  80a200:	3160003c 	xorhi	r5,r6,32768
  80a204:	d9400e15 	stw	r5,56(sp)
  80a208:	003f7c06 	br	809ffc <__kernel_tan+0x558>
  80a20c:	d9000217 	ldw	r4,8(sp)
  80a210:	d9801417 	ldw	r6,80(sp)
  80a214:	d9000b15 	stw	r4,44(sp)
  80a218:	d9800c15 	stw	r6,48(sp)
  80a21c:	003f6206 	br	809fa8 <__kernel_tan+0x504>

0080a220 <copysign>:
  80a220:	3813883a 	mov	r9,r7
  80a224:	01e00034 	movhi	r7,32768
  80a228:	39ffffc4 	addi	r7,r7,-1
  80a22c:	394e703a 	and	r7,r7,r5
  80a230:	4aa0002c 	andhi	r10,r9,32768
  80a234:	3a8eb03a 	or	r7,r7,r10
  80a238:	2005883a 	mov	r2,r4
  80a23c:	3807883a 	mov	r3,r7
  80a240:	f800283a 	ret

0080a244 <expm1>:
  80a244:	deffea04 	addi	sp,sp,-88
  80a248:	00a00034 	movhi	r2,32768
  80a24c:	10bfffc4 	addi	r2,r2,-1
  80a250:	d9000415 	stw	r4,16(sp)
  80a254:	2890703a 	and	r8,r5,r2
  80a258:	0009883a 	mov	r4,zero
  80a25c:	009010f4 	movhi	r2,16451
  80a260:	109a1e44 	addi	r2,r2,26745
  80a264:	dc000c15 	stw	r16,48(sp)
  80a268:	dfc01515 	stw	ra,84(sp)
  80a26c:	df001415 	stw	fp,80(sp)
  80a270:	ddc01315 	stw	r23,76(sp)
  80a274:	dd801215 	stw	r22,72(sp)
  80a278:	dd401115 	stw	r21,68(sp)
  80a27c:	dd001015 	stw	r20,64(sp)
  80a280:	dcc00f15 	stw	r19,60(sp)
  80a284:	dc800e15 	stw	r18,56(sp)
  80a288:	dc400d15 	stw	r17,52(sp)
  80a28c:	d9400515 	stw	r5,20(sp)
  80a290:	d9000215 	stw	r4,8(sp)
  80a294:	d9000315 	stw	r4,12(sp)
  80a298:	2c20002c 	andhi	r16,r5,32768
  80a29c:	12010a2e 	bgeu	r2,r8,80a6c8 <expm1+0x484>
  80a2a0:	009021b4 	movhi	r2,16518
  80a2a4:	108b9044 	addi	r2,r2,11841
  80a2a8:	12012036 	bltu	r2,r8,80a72c <expm1+0x4e8>
  80a2ac:	80012e26 	beq	r16,zero,80a768 <expm1+0x524>
  80a2b0:	d9000417 	ldw	r4,16(sp)
  80a2b4:	d9400517 	ldw	r5,20(sp)
  80a2b8:	00b0be74 	movhi	r2,49913
  80a2bc:	10bcd644 	addi	r2,r2,-3239
  80a2c0:	00c06974 	movhi	r3,421
  80a2c4:	18db87c4 	addi	r3,r3,28191
  80a2c8:	180f883a 	mov	r7,r3
  80a2cc:	100d883a 	mov	r6,r2
  80a2d0:	080bb840 	call	80bb84 <__adddf3>
  80a2d4:	180b883a 	mov	r5,r3
  80a2d8:	000d883a 	mov	r6,zero
  80a2dc:	000f883a 	mov	r7,zero
  80a2e0:	1009883a 	mov	r4,r2
  80a2e4:	080c4340 	call	80c434 <__ltdf2>
  80a2e8:	1001e616 	blt	r2,zero,80aa84 <expm1+0x840>
  80a2ec:	d9000417 	ldw	r4,16(sp)
  80a2f0:	d9400517 	ldw	r5,20(sp)
  80a2f4:	00994b34 	movhi	r2,25900
  80a2f8:	10a0bf84 	addi	r2,r2,-32002
  80a2fc:	00cffdf4 	movhi	r3,16375
  80a300:	18c551c4 	addi	r3,r3,5447
  80a304:	180f883a 	mov	r7,r3
  80a308:	100d883a 	mov	r6,r2
  80a30c:	080bbf80 	call	80bbf8 <__muldf3>
  80a310:	1011883a 	mov	r8,r2
  80a314:	1813883a 	mov	r9,r3
  80a318:	0005883a 	mov	r2,zero
  80a31c:	00eff834 	movhi	r3,49120
  80a320:	480f883a 	mov	r7,r9
  80a324:	400d883a 	mov	r6,r8
  80a328:	180b883a 	mov	r5,r3
  80a32c:	1009883a 	mov	r4,r2
  80a330:	080bb840 	call	80bb84 <__adddf3>
  80a334:	180b883a 	mov	r5,r3
  80a338:	1009883a 	mov	r4,r2
  80a33c:	080c63c0 	call	80c63c <__fixdfsi>
  80a340:	1009883a 	mov	r4,r2
  80a344:	1039883a 	mov	fp,r2
  80a348:	080c5440 	call	80c544 <__floatsidf>
  80a34c:	1021883a 	mov	r16,r2
  80a350:	1823883a 	mov	r17,r3
  80a354:	00bfb834 	movhi	r2,65248
  80a358:	00eff9b4 	movhi	r3,49126
  80a35c:	18cb9084 	addi	r3,r3,11842
  80a360:	8009883a 	mov	r4,r16
  80a364:	880b883a 	mov	r5,r17
  80a368:	180f883a 	mov	r7,r3
  80a36c:	100d883a 	mov	r6,r2
  80a370:	080bbf80 	call	80bbf8 <__muldf3>
  80a374:	d9400517 	ldw	r5,20(sp)
  80a378:	d9000417 	ldw	r4,16(sp)
  80a37c:	180f883a 	mov	r7,r3
  80a380:	100d883a 	mov	r6,r2
  80a384:	080bb840 	call	80bb84 <__adddf3>
  80a388:	020d5e74 	movhi	r8,13689
  80a38c:	420f1d84 	addi	r8,r8,15478
  80a390:	024f7ab4 	movhi	r9,15850
  80a394:	4a4e7bc4 	addi	r9,r9,14831
  80a398:	8009883a 	mov	r4,r16
  80a39c:	880b883a 	mov	r5,r17
  80a3a0:	480f883a 	mov	r7,r9
  80a3a4:	400d883a 	mov	r6,r8
  80a3a8:	1025883a 	mov	r18,r2
  80a3ac:	1827883a 	mov	r19,r3
  80a3b0:	080bbf80 	call	80bbf8 <__muldf3>
  80a3b4:	1021883a 	mov	r16,r2
  80a3b8:	1823883a 	mov	r17,r3
  80a3bc:	9009883a 	mov	r4,r18
  80a3c0:	980b883a 	mov	r5,r19
  80a3c4:	800d883a 	mov	r6,r16
  80a3c8:	880f883a 	mov	r7,r17
  80a3cc:	080bb040 	call	80bb04 <__subdf3>
  80a3d0:	180f883a 	mov	r7,r3
  80a3d4:	980b883a 	mov	r5,r19
  80a3d8:	9009883a 	mov	r4,r18
  80a3dc:	100d883a 	mov	r6,r2
  80a3e0:	d8800415 	stw	r2,16(sp)
  80a3e4:	d8c00515 	stw	r3,20(sp)
  80a3e8:	080bb040 	call	80bb04 <__subdf3>
  80a3ec:	180b883a 	mov	r5,r3
  80a3f0:	880f883a 	mov	r7,r17
  80a3f4:	1009883a 	mov	r4,r2
  80a3f8:	800d883a 	mov	r6,r16
  80a3fc:	080bb040 	call	80bb04 <__subdf3>
  80a400:	d8800215 	stw	r2,8(sp)
  80a404:	d8c00315 	stw	r3,12(sp)
  80a408:	018ff834 	movhi	r6,16352
  80a40c:	d9800715 	stw	r6,28(sp)
  80a410:	0009883a 	mov	r4,zero
  80a414:	d9000615 	stw	r4,24(sp)
  80a418:	d9400517 	ldw	r5,20(sp)
  80a41c:	d9000417 	ldw	r4,16(sp)
  80a420:	d9c00717 	ldw	r7,28(sp)
  80a424:	000d883a 	mov	r6,zero
  80a428:	080bbf80 	call	80bbf8 <__muldf3>
  80a42c:	d9000417 	ldw	r4,16(sp)
  80a430:	d9400517 	ldw	r5,20(sp)
  80a434:	100d883a 	mov	r6,r2
  80a438:	180f883a 	mov	r7,r3
  80a43c:	1021883a 	mov	r16,r2
  80a440:	1823883a 	mov	r17,r3
  80a444:	080bbf80 	call	80bbf8 <__muldf3>
  80a448:	1009883a 	mov	r4,r2
  80a44c:	180d883a 	mov	r6,r3
  80a450:	d8800815 	stw	r2,32(sp)
  80a454:	d8c00915 	stw	r3,36(sp)
  80a458:	d8800015 	stw	r2,0(sp)
  80a45c:	d8c00115 	stw	r3,4(sp)
  80a460:	009b82b4 	movhi	r2,28170
  80a464:	10b0cb44 	addi	r2,r2,-15571
  80a468:	00efa2f4 	movhi	r3,48779
  80a46c:	18ff6dc4 	addi	r3,r3,-585
  80a470:	300b883a 	mov	r5,r6
  80a474:	180f883a 	mov	r7,r3
  80a478:	100d883a 	mov	r6,r2
  80a47c:	080bbf80 	call	80bbf8 <__muldf3>
  80a480:	0221b9b4 	movhi	r8,34534
  80a484:	42148e44 	addi	r8,r8,21049
  80a488:	024fb474 	movhi	r9,16081
  80a48c:	4a73f284 	addi	r9,r9,-12342
  80a490:	480f883a 	mov	r7,r9
  80a494:	400d883a 	mov	r6,r8
  80a498:	180b883a 	mov	r5,r3
  80a49c:	1009883a 	mov	r4,r2
  80a4a0:	080bb840 	call	80bb84 <__adddf3>
  80a4a4:	d9000017 	ldw	r4,0(sp)
  80a4a8:	d9400917 	ldw	r5,36(sp)
  80a4ac:	180f883a 	mov	r7,r3
  80a4b0:	100d883a 	mov	r6,r2
  80a4b4:	080bbf80 	call	80bbf8 <__muldf3>
  80a4b8:	0227aaf4 	movhi	r8,40619
  80a4bc:	4236edc4 	addi	r8,r8,-9289
  80a4c0:	024fc574 	movhi	r9,16149
  80a4c4:	4a738644 	addi	r9,r9,-12775
  80a4c8:	480f883a 	mov	r7,r9
  80a4cc:	400d883a 	mov	r6,r8
  80a4d0:	180b883a 	mov	r5,r3
  80a4d4:	1009883a 	mov	r4,r2
  80a4d8:	080bb040 	call	80bb04 <__subdf3>
  80a4dc:	d9000017 	ldw	r4,0(sp)
  80a4e0:	d9400917 	ldw	r5,36(sp)
  80a4e4:	180f883a 	mov	r7,r3
  80a4e8:	100d883a 	mov	r6,r2
  80a4ec:	080bbf80 	call	80bbf8 <__muldf3>
  80a4f0:	02067fb4 	movhi	r8,6654
  80a4f4:	42156144 	addi	r8,r8,21893
  80a4f8:	024fd6b4 	movhi	r9,16218
  80a4fc:	4a406804 	addi	r9,r9,416
  80a500:	480f883a 	mov	r7,r9
  80a504:	400d883a 	mov	r6,r8
  80a508:	180b883a 	mov	r5,r3
  80a50c:	1009883a 	mov	r4,r2
  80a510:	080bb840 	call	80bb84 <__adddf3>
  80a514:	d9000017 	ldw	r4,0(sp)
  80a518:	d9400917 	ldw	r5,36(sp)
  80a51c:	180f883a 	mov	r7,r3
  80a520:	100d883a 	mov	r6,r2
  80a524:	080bbf80 	call	80bbf8 <__muldf3>
  80a528:	02044474 	movhi	r8,4369
  80a52c:	42043d04 	addi	r8,r8,4340
  80a530:	024fe874 	movhi	r9,16289
  80a534:	4a444444 	addi	r9,r9,4369
  80a538:	480f883a 	mov	r7,r9
  80a53c:	400d883a 	mov	r6,r8
  80a540:	180b883a 	mov	r5,r3
  80a544:	1009883a 	mov	r4,r2
  80a548:	080bb040 	call	80bb04 <__subdf3>
  80a54c:	d9000017 	ldw	r4,0(sp)
  80a550:	d9400917 	ldw	r5,36(sp)
  80a554:	180f883a 	mov	r7,r3
  80a558:	100d883a 	mov	r6,r2
  80a55c:	080bbf80 	call	80bbf8 <__muldf3>
  80a560:	010ffc34 	movhi	r4,16368
  80a564:	d9000b15 	stw	r4,44(sp)
  80a568:	d9c00b17 	ldw	r7,44(sp)
  80a56c:	100d883a 	mov	r6,r2
  80a570:	3009883a 	mov	r4,r6
  80a574:	0005883a 	mov	r2,zero
  80a578:	180b883a 	mov	r5,r3
  80a57c:	000d883a 	mov	r6,zero
  80a580:	d8800a15 	stw	r2,40(sp)
  80a584:	080bb840 	call	80bb84 <__adddf3>
  80a588:	100d883a 	mov	r6,r2
  80a58c:	8009883a 	mov	r4,r16
  80a590:	880b883a 	mov	r5,r17
  80a594:	180f883a 	mov	r7,r3
  80a598:	1029883a 	mov	r20,r2
  80a59c:	182b883a 	mov	r21,r3
  80a5a0:	080bbf80 	call	80bbf8 <__muldf3>
  80a5a4:	0011883a 	mov	r8,zero
  80a5a8:	02500234 	movhi	r9,16392
  80a5ac:	480b883a 	mov	r5,r9
  80a5b0:	4009883a 	mov	r4,r8
  80a5b4:	180f883a 	mov	r7,r3
  80a5b8:	100d883a 	mov	r6,r2
  80a5bc:	080bb040 	call	80bb04 <__subdf3>
  80a5c0:	100d883a 	mov	r6,r2
  80a5c4:	a009883a 	mov	r4,r20
  80a5c8:	a80b883a 	mov	r5,r21
  80a5cc:	180f883a 	mov	r7,r3
  80a5d0:	1021883a 	mov	r16,r2
  80a5d4:	1823883a 	mov	r17,r3
  80a5d8:	080bb040 	call	80bb04 <__subdf3>
  80a5dc:	d9000417 	ldw	r4,16(sp)
  80a5e0:	d9400517 	ldw	r5,20(sp)
  80a5e4:	800d883a 	mov	r6,r16
  80a5e8:	880f883a 	mov	r7,r17
  80a5ec:	1021883a 	mov	r16,r2
  80a5f0:	1823883a 	mov	r17,r3
  80a5f4:	080bbf80 	call	80bbf8 <__muldf3>
  80a5f8:	0011883a 	mov	r8,zero
  80a5fc:	02500634 	movhi	r9,16408
  80a600:	480b883a 	mov	r5,r9
  80a604:	4009883a 	mov	r4,r8
  80a608:	180f883a 	mov	r7,r3
  80a60c:	100d883a 	mov	r6,r2
  80a610:	080bb040 	call	80bb04 <__subdf3>
  80a614:	180f883a 	mov	r7,r3
  80a618:	880b883a 	mov	r5,r17
  80a61c:	8009883a 	mov	r4,r16
  80a620:	100d883a 	mov	r6,r2
  80a624:	080bfbc0 	call	80bfbc <__divdf3>
  80a628:	d9000017 	ldw	r4,0(sp)
  80a62c:	d9400917 	ldw	r5,36(sp)
  80a630:	180f883a 	mov	r7,r3
  80a634:	100d883a 	mov	r6,r2
  80a638:	080bbf80 	call	80bbf8 <__muldf3>
  80a63c:	1009883a 	mov	r4,r2
  80a640:	e0008d1e 	bne	fp,zero,80a878 <expm1+0x634>
  80a644:	d9000417 	ldw	r4,16(sp)
  80a648:	d9400517 	ldw	r5,20(sp)
  80a64c:	100d883a 	mov	r6,r2
  80a650:	180f883a 	mov	r7,r3
  80a654:	080bbf80 	call	80bbf8 <__muldf3>
  80a658:	d9800017 	ldw	r6,0(sp)
  80a65c:	d9c00917 	ldw	r7,36(sp)
  80a660:	180b883a 	mov	r5,r3
  80a664:	1009883a 	mov	r4,r2
  80a668:	080bb040 	call	80bb04 <__subdf3>
  80a66c:	d9400517 	ldw	r5,20(sp)
  80a670:	d9000417 	ldw	r4,16(sp)
  80a674:	180f883a 	mov	r7,r3
  80a678:	100d883a 	mov	r6,r2
  80a67c:	080bb040 	call	80bb04 <__subdf3>
  80a680:	d8800415 	stw	r2,16(sp)
  80a684:	d8c00515 	stw	r3,20(sp)
  80a688:	d9000417 	ldw	r4,16(sp)
  80a68c:	d9800517 	ldw	r6,20(sp)
  80a690:	2005883a 	mov	r2,r4
  80a694:	3007883a 	mov	r3,r6
  80a698:	dfc01517 	ldw	ra,84(sp)
  80a69c:	df001417 	ldw	fp,80(sp)
  80a6a0:	ddc01317 	ldw	r23,76(sp)
  80a6a4:	dd801217 	ldw	r22,72(sp)
  80a6a8:	dd401117 	ldw	r21,68(sp)
  80a6ac:	dd001017 	ldw	r20,64(sp)
  80a6b0:	dcc00f17 	ldw	r19,60(sp)
  80a6b4:	dc800e17 	ldw	r18,56(sp)
  80a6b8:	dc400d17 	ldw	r17,52(sp)
  80a6bc:	dc000c17 	ldw	r16,48(sp)
  80a6c0:	dec01604 	addi	sp,sp,88
  80a6c4:	f800283a 	ret
  80a6c8:	008ff5b4 	movhi	r2,16342
  80a6cc:	108b9084 	addi	r2,r2,11842
  80a6d0:	12000536 	bltu	r2,r8,80a6e8 <expm1+0x4a4>
  80a6d4:	008f2434 	movhi	r2,15504
  80a6d8:	10bfffc4 	addi	r2,r2,-1
  80a6dc:	1200432e 	bgeu	r2,r8,80a7ec <expm1+0x5a8>
  80a6e0:	0039883a 	mov	fp,zero
  80a6e4:	003f4806 	br	80a408 <expm1+0x1c4>
  80a6e8:	008ffc74 	movhi	r2,16369
  80a6ec:	10a8ac44 	addi	r2,r2,-23887
  80a6f0:	1200512e 	bgeu	r2,r8,80a838 <expm1+0x5f4>
  80a6f4:	d9000417 	ldw	r4,16(sp)
  80a6f8:	00994b34 	movhi	r2,25900
  80a6fc:	10a0bf84 	addi	r2,r2,-32002
  80a700:	00cffdf4 	movhi	r3,16375
  80a704:	18c551c4 	addi	r3,r3,5447
  80a708:	180f883a 	mov	r7,r3
  80a70c:	100d883a 	mov	r6,r2
  80a710:	080bbf80 	call	80bbf8 <__muldf3>
  80a714:	1011883a 	mov	r8,r2
  80a718:	1813883a 	mov	r9,r3
  80a71c:	80001d26 	beq	r16,zero,80a794 <expm1+0x550>
  80a720:	0005883a 	mov	r2,zero
  80a724:	00eff834 	movhi	r3,49120
  80a728:	003efd06 	br	80a320 <expm1+0xdc>
  80a72c:	009ffc34 	movhi	r2,32752
  80a730:	10bfffc4 	addi	r2,r2,-1
  80a734:	12001a2e 	bgeu	r2,r8,80a7a0 <expm1+0x55c>
  80a738:	d9800417 	ldw	r6,16(sp)
  80a73c:	01000434 	movhi	r4,16
  80a740:	213fffc4 	addi	r4,r4,-1
  80a744:	4108703a 	and	r4,r8,r4
  80a748:	2188b03a 	or	r4,r4,r6
  80a74c:	2000cc26 	beq	r4,zero,80aa80 <expm1+0x83c>
  80a750:	280f883a 	mov	r7,r5
  80a754:	3009883a 	mov	r4,r6
  80a758:	080bb840 	call	80bb84 <__adddf3>
  80a75c:	d8800415 	stw	r2,16(sp)
  80a760:	d8c00515 	stw	r3,20(sp)
  80a764:	003fc806 	br	80a688 <expm1+0x444>
  80a768:	d9000417 	ldw	r4,16(sp)
  80a76c:	d9400517 	ldw	r5,20(sp)
  80a770:	00994b34 	movhi	r2,25900
  80a774:	10a0bf84 	addi	r2,r2,-32002
  80a778:	00cffdf4 	movhi	r3,16375
  80a77c:	18c551c4 	addi	r3,r3,5447
  80a780:	180f883a 	mov	r7,r3
  80a784:	100d883a 	mov	r6,r2
  80a788:	080bbf80 	call	80bbf8 <__muldf3>
  80a78c:	1011883a 	mov	r8,r2
  80a790:	1813883a 	mov	r9,r3
  80a794:	0005883a 	mov	r2,zero
  80a798:	00cff834 	movhi	r3,16352
  80a79c:	003ee006 	br	80a320 <expm1+0xdc>
  80a7a0:	d9000417 	ldw	r4,16(sp)
  80a7a4:	00bfbeb4 	movhi	r2,65274
  80a7a8:	108e7bc4 	addi	r2,r2,14831
  80a7ac:	00d021b4 	movhi	r3,16518
  80a7b0:	18cb9084 	addi	r3,r3,11842
  80a7b4:	180f883a 	mov	r7,r3
  80a7b8:	100d883a 	mov	r6,r2
  80a7bc:	080c3240 	call	80c324 <__gtdf2>
  80a7c0:	00beba0e 	bge	zero,r2,80a2ac <expm1+0x68>
  80a7c4:	00a20034 	movhi	r2,34816
  80a7c8:	109d6704 	addi	r2,r2,30108
  80a7cc:	00df8e34 	movhi	r3,32312
  80a7d0:	18f90f04 	addi	r3,r3,-7108
  80a7d4:	100d883a 	mov	r6,r2
  80a7d8:	180f883a 	mov	r7,r3
  80a7dc:	1009883a 	mov	r4,r2
  80a7e0:	180b883a 	mov	r5,r3
  80a7e4:	080bbf80 	call	80bbf8 <__muldf3>
  80a7e8:	003fdc06 	br	80a75c <expm1+0x518>
  80a7ec:	d9000417 	ldw	r4,16(sp)
  80a7f0:	00a20034 	movhi	r2,34816
  80a7f4:	109d6704 	addi	r2,r2,30108
  80a7f8:	00df8e34 	movhi	r3,32312
  80a7fc:	18f90f04 	addi	r3,r3,-7108
  80a800:	180f883a 	mov	r7,r3
  80a804:	100d883a 	mov	r6,r2
  80a808:	080bb840 	call	80bb84 <__adddf3>
  80a80c:	1009883a 	mov	r4,r2
  80a810:	180b883a 	mov	r5,r3
  80a814:	100d883a 	mov	r6,r2
  80a818:	180f883a 	mov	r7,r3
  80a81c:	080bb040 	call	80bb04 <__subdf3>
  80a820:	d9400517 	ldw	r5,20(sp)
  80a824:	d9000417 	ldw	r4,16(sp)
  80a828:	180f883a 	mov	r7,r3
  80a82c:	100d883a 	mov	r6,r2
  80a830:	080bb040 	call	80bb04 <__subdf3>
  80a834:	003fc906 	br	80a75c <expm1+0x518>
  80a838:	8000821e 	bne	r16,zero,80aa44 <expm1+0x800>
  80a83c:	d9000417 	ldw	r4,16(sp)
  80a840:	00bfb834 	movhi	r2,65248
  80a844:	00cff9b4 	movhi	r3,16358
  80a848:	18cb9084 	addi	r3,r3,11842
  80a84c:	180f883a 	mov	r7,r3
  80a850:	100d883a 	mov	r6,r2
  80a854:	080bb040 	call	80bb04 <__subdf3>
  80a858:	1025883a 	mov	r18,r2
  80a85c:	040d5e74 	movhi	r16,13689
  80a860:	840f1d84 	addi	r16,r16,15478
  80a864:	1827883a 	mov	r19,r3
  80a868:	044f7ab4 	movhi	r17,15850
  80a86c:	8c4e7bc4 	addi	r17,r17,14831
  80a870:	07000044 	movi	fp,1
  80a874:	003ed106 	br	80a3bc <expm1+0x178>
  80a878:	d9800217 	ldw	r6,8(sp)
  80a87c:	d9c00317 	ldw	r7,12(sp)
  80a880:	180b883a 	mov	r5,r3
  80a884:	080bb040 	call	80bb04 <__subdf3>
  80a888:	d9000417 	ldw	r4,16(sp)
  80a88c:	d9400517 	ldw	r5,20(sp)
  80a890:	180f883a 	mov	r7,r3
  80a894:	100d883a 	mov	r6,r2
  80a898:	080bbf80 	call	80bbf8 <__muldf3>
  80a89c:	d9c00317 	ldw	r7,12(sp)
  80a8a0:	d9800217 	ldw	r6,8(sp)
  80a8a4:	180b883a 	mov	r5,r3
  80a8a8:	1009883a 	mov	r4,r2
  80a8ac:	080bb040 	call	80bb04 <__subdf3>
  80a8b0:	d9800017 	ldw	r6,0(sp)
  80a8b4:	d9c00917 	ldw	r7,36(sp)
  80a8b8:	1009883a 	mov	r4,r2
  80a8bc:	180b883a 	mov	r5,r3
  80a8c0:	080bb040 	call	80bb04 <__subdf3>
  80a8c4:	1025883a 	mov	r18,r2
  80a8c8:	00bfffc4 	movi	r2,-1
  80a8cc:	1827883a 	mov	r19,r3
  80a8d0:	e0801a26 	beq	fp,r2,80a93c <expm1+0x6f8>
  80a8d4:	00800044 	movi	r2,1
  80a8d8:	e0804026 	beq	fp,r2,80a9dc <expm1+0x798>
  80a8dc:	e0c00044 	addi	r3,fp,1
  80a8e0:	00800e44 	movi	r2,57
  80a8e4:	10c0282e 	bgeu	r2,r3,80a988 <expm1+0x744>
  80a8e8:	d9c00517 	ldw	r7,20(sp)
  80a8ec:	d9800417 	ldw	r6,16(sp)
  80a8f0:	9009883a 	mov	r4,r18
  80a8f4:	980b883a 	mov	r5,r19
  80a8f8:	080bb040 	call	80bb04 <__subdf3>
  80a8fc:	1011883a 	mov	r8,r2
  80a900:	d8800b17 	ldw	r2,44(sp)
  80a904:	400d883a 	mov	r6,r8
  80a908:	0009883a 	mov	r4,zero
  80a90c:	100b883a 	mov	r5,r2
  80a910:	180f883a 	mov	r7,r3
  80a914:	080bb040 	call	80bb04 <__subdf3>
  80a918:	e016953a 	slli	r11,fp,20
  80a91c:	1009883a 	mov	r4,r2
  80a920:	d8800b17 	ldw	r2,44(sp)
  80a924:	58d7883a 	add	r11,r11,r3
  80a928:	000d883a 	mov	r6,zero
  80a92c:	580b883a 	mov	r5,r11
  80a930:	100f883a 	mov	r7,r2
  80a934:	080bb040 	call	80bb04 <__subdf3>
  80a938:	003f5106 	br	80a680 <expm1+0x43c>
  80a93c:	d9400517 	ldw	r5,20(sp)
  80a940:	d9000417 	ldw	r4,16(sp)
  80a944:	900d883a 	mov	r6,r18
  80a948:	180f883a 	mov	r7,r3
  80a94c:	080bb040 	call	80bb04 <__subdf3>
  80a950:	1011883a 	mov	r8,r2
  80a954:	d8800717 	ldw	r2,28(sp)
  80a958:	4009883a 	mov	r4,r8
  80a95c:	000d883a 	mov	r6,zero
  80a960:	100f883a 	mov	r7,r2
  80a964:	180b883a 	mov	r5,r3
  80a968:	080bbf80 	call	80bbf8 <__muldf3>
  80a96c:	d9000717 	ldw	r4,28(sp)
  80a970:	000d883a 	mov	r6,zero
  80a974:	180b883a 	mov	r5,r3
  80a978:	200f883a 	mov	r7,r4
  80a97c:	1009883a 	mov	r4,r2
  80a980:	080bb040 	call	80bb04 <__subdf3>
  80a984:	003f3e06 	br	80a680 <expm1+0x43c>
  80a988:	008004c4 	movi	r2,19
  80a98c:	17004216 	blt	r2,fp,80aa98 <expm1+0x854>
  80a990:	04400834 	movhi	r17,32
  80a994:	d9c00517 	ldw	r7,20(sp)
  80a998:	d9800417 	ldw	r6,16(sp)
  80a99c:	d8800b17 	ldw	r2,44(sp)
  80a9a0:	8f23d83a 	sra	r17,r17,fp
  80a9a4:	9009883a 	mov	r4,r18
  80a9a8:	980b883a 	mov	r5,r19
  80a9ac:	1463c83a 	sub	r17,r2,r17
  80a9b0:	080bb040 	call	80bb04 <__subdf3>
  80a9b4:	180f883a 	mov	r7,r3
  80a9b8:	0009883a 	mov	r4,zero
  80a9bc:	880b883a 	mov	r5,r17
  80a9c0:	100d883a 	mov	r6,r2
  80a9c4:	080bb040 	call	80bb04 <__subdf3>
  80a9c8:	e010953a 	slli	r8,fp,20
  80a9cc:	d8800415 	stw	r2,16(sp)
  80a9d0:	40d1883a 	add	r8,r8,r3
  80a9d4:	da000515 	stw	r8,20(sp)
  80a9d8:	003f2b06 	br	80a688 <expm1+0x444>
  80a9dc:	d9000417 	ldw	r4,16(sp)
  80a9e0:	d9400517 	ldw	r5,20(sp)
  80a9e4:	0005883a 	mov	r2,zero
  80a9e8:	00eff434 	movhi	r3,49104
  80a9ec:	180f883a 	mov	r7,r3
  80a9f0:	100d883a 	mov	r6,r2
  80a9f4:	080c4340 	call	80c434 <__ltdf2>
  80a9f8:	10003b16 	blt	r2,zero,80aae8 <expm1+0x8a4>
  80a9fc:	d9400517 	ldw	r5,20(sp)
  80aa00:	d9000417 	ldw	r4,16(sp)
  80aa04:	900d883a 	mov	r6,r18
  80aa08:	980f883a 	mov	r7,r19
  80aa0c:	080bb040 	call	80bb04 <__subdf3>
  80aa10:	180f883a 	mov	r7,r3
  80aa14:	1009883a 	mov	r4,r2
  80aa18:	180b883a 	mov	r5,r3
  80aa1c:	100d883a 	mov	r6,r2
  80aa20:	080bb840 	call	80bb84 <__adddf3>
  80aa24:	1011883a 	mov	r8,r2
  80aa28:	d8800b17 	ldw	r2,44(sp)
  80aa2c:	000d883a 	mov	r6,zero
  80aa30:	180b883a 	mov	r5,r3
  80aa34:	100f883a 	mov	r7,r2
  80aa38:	4009883a 	mov	r4,r8
  80aa3c:	080bb840 	call	80bb84 <__adddf3>
  80aa40:	003f0f06 	br	80a680 <expm1+0x43c>
  80aa44:	d9000417 	ldw	r4,16(sp)
  80aa48:	00bfb834 	movhi	r2,65248
  80aa4c:	00cff9b4 	movhi	r3,16358
  80aa50:	18cb9084 	addi	r3,r3,11842
  80aa54:	180f883a 	mov	r7,r3
  80aa58:	100d883a 	mov	r6,r2
  80aa5c:	080bb840 	call	80bb84 <__adddf3>
  80aa60:	1025883a 	mov	r18,r2
  80aa64:	040d5e74 	movhi	r16,13689
  80aa68:	840f1d84 	addi	r16,r16,15478
  80aa6c:	1827883a 	mov	r19,r3
  80aa70:	046f7ab4 	movhi	r17,48618
  80aa74:	8c4e7bc4 	addi	r17,r17,14831
  80aa78:	073fffc4 	movi	fp,-1
  80aa7c:	003e4f06 	br	80a3bc <expm1+0x178>
  80aa80:	803f0126 	beq	r16,zero,80a688 <expm1+0x444>
  80aa84:	0009883a 	mov	r4,zero
  80aa88:	01affc34 	movhi	r6,49136
  80aa8c:	d9000415 	stw	r4,16(sp)
  80aa90:	d9800515 	stw	r6,20(sp)
  80aa94:	003efc06 	br	80a688 <expm1+0x444>
  80aa98:	00c0ffc4 	movi	r3,1023
  80aa9c:	1f07c83a 	sub	r3,r3,fp
  80aaa0:	1806953a 	slli	r3,r3,20
  80aaa4:	9009883a 	mov	r4,r18
  80aaa8:	980b883a 	mov	r5,r19
  80aaac:	000d883a 	mov	r6,zero
  80aab0:	180f883a 	mov	r7,r3
  80aab4:	080bb840 	call	80bb84 <__adddf3>
  80aab8:	d9400517 	ldw	r5,20(sp)
  80aabc:	d9000417 	ldw	r4,16(sp)
  80aac0:	180f883a 	mov	r7,r3
  80aac4:	100d883a 	mov	r6,r2
  80aac8:	080bb040 	call	80bb04 <__subdf3>
  80aacc:	1009883a 	mov	r4,r2
  80aad0:	d8800b17 	ldw	r2,44(sp)
  80aad4:	000d883a 	mov	r6,zero
  80aad8:	180b883a 	mov	r5,r3
  80aadc:	100f883a 	mov	r7,r2
  80aae0:	080bb840 	call	80bb84 <__adddf3>
  80aae4:	003fb806 	br	80a9c8 <expm1+0x784>
  80aae8:	d8800717 	ldw	r2,28(sp)
  80aaec:	d9400517 	ldw	r5,20(sp)
  80aaf0:	d9000417 	ldw	r4,16(sp)
  80aaf4:	000d883a 	mov	r6,zero
  80aaf8:	100f883a 	mov	r7,r2
  80aafc:	080bb840 	call	80bb84 <__adddf3>
  80ab00:	180f883a 	mov	r7,r3
  80ab04:	9009883a 	mov	r4,r18
  80ab08:	980b883a 	mov	r5,r19
  80ab0c:	100d883a 	mov	r6,r2
  80ab10:	080bb040 	call	80bb04 <__subdf3>
  80ab14:	0011883a 	mov	r8,zero
  80ab18:	02700034 	movhi	r9,49152
  80ab1c:	180b883a 	mov	r5,r3
  80ab20:	480f883a 	mov	r7,r9
  80ab24:	1009883a 	mov	r4,r2
  80ab28:	400d883a 	mov	r6,r8
  80ab2c:	080bbf80 	call	80bbf8 <__muldf3>
  80ab30:	003ed306 	br	80a680 <expm1+0x43c>

0080ab34 <finite>:
  80ab34:	00a00034 	movhi	r2,32768
  80ab38:	10bfffc4 	addi	r2,r2,-1
  80ab3c:	2884703a 	and	r2,r5,r2
  80ab40:	01600434 	movhi	r5,32784
  80ab44:	1145883a 	add	r2,r2,r5
  80ab48:	1004d7fa 	srli	r2,r2,31
  80ab4c:	f800283a 	ret

0080ab50 <__isnand>:
  80ab50:	200d883a 	mov	r6,r4
  80ab54:	0109c83a 	sub	r4,zero,r4
  80ab58:	2188b03a 	or	r4,r4,r6
  80ab5c:	2008d7fa 	srli	r4,r4,31
  80ab60:	00a00034 	movhi	r2,32768
  80ab64:	10bfffc4 	addi	r2,r2,-1
  80ab68:	1144703a 	and	r2,r2,r5
  80ab6c:	2088b03a 	or	r4,r4,r2
  80ab70:	009ffc34 	movhi	r2,32752
  80ab74:	1105c83a 	sub	r2,r2,r4
  80ab78:	1004d7fa 	srli	r2,r2,31
  80ab7c:	f800283a 	ret

0080ab80 <matherr>:
  80ab80:	0005883a 	mov	r2,zero
  80ab84:	f800283a 	ret

0080ab88 <nan>:
  80ab88:	015ffe34 	movhi	r5,32760
  80ab8c:	0005883a 	mov	r2,zero
  80ab90:	2807883a 	mov	r3,r5
  80ab94:	f800283a 	ret

0080ab98 <rint>:
  80ab98:	2015883a 	mov	r10,r4
  80ab9c:	2809d53a 	srai	r4,r5,20
  80aba0:	defff904 	addi	sp,sp,-28
  80aba4:	034004c4 	movi	r13,19
  80aba8:	2101ffcc 	andi	r4,r4,2047
  80abac:	227f0044 	addi	r9,r4,-1023
  80abb0:	dc800415 	stw	r18,16(sp)
  80abb4:	dfc00615 	stw	ra,24(sp)
  80abb8:	dcc00515 	stw	r19,20(sp)
  80abbc:	dc400315 	stw	r17,12(sp)
  80abc0:	dc000215 	stw	r16,8(sp)
  80abc4:	2817883a 	mov	r11,r5
  80abc8:	500d883a 	mov	r6,r10
  80abcc:	2824d7fa 	srli	r18,r5,31
  80abd0:	6a403016 	blt	r13,r9,80ac94 <rint+0xfc>
  80abd4:	48004916 	blt	r9,zero,80acfc <rint+0x164>
  80abd8:	00800434 	movhi	r2,16
  80abdc:	10bfffc4 	addi	r2,r2,-1
  80abe0:	1247d83a 	sra	r3,r2,r9
  80abe4:	2809883a 	mov	r4,r5
  80abe8:	1944703a 	and	r2,r3,r5
  80abec:	5084b03a 	or	r2,r10,r2
  80abf0:	10001f26 	beq	r2,zero,80ac70 <rint+0xd8>
  80abf4:	180ad07a 	srli	r5,r3,1
  80abf8:	5944703a 	and	r2,r11,r5
  80abfc:	5084b03a 	or	r2,r10,r2
  80ac00:	10000626 	beq	r2,zero,80ac1c <rint+0x84>
  80ac04:	4b406626 	beq	r9,r13,80ada0 <rint+0x208>
  80ac08:	00c000b4 	movhi	r3,2
  80ac0c:	1a47d83a 	sra	r3,r3,r9
  80ac10:	0144303a 	nor	r2,zero,r5
  80ac14:	5884703a 	and	r2,r11,r2
  80ac18:	10c8b03a 	or	r4,r2,r3
  80ac1c:	900690fa 	slli	r3,r18,3
  80ac20:	008020b4 	movhi	r2,130
  80ac24:	1086a304 	addi	r2,r2,6796
  80ac28:	200f883a 	mov	r7,r4
  80ac2c:	1887883a 	add	r3,r3,r2
  80ac30:	1c000017 	ldw	r16,0(r3)
  80ac34:	1c400117 	ldw	r17,4(r3)
  80ac38:	8009883a 	mov	r4,r16
  80ac3c:	880b883a 	mov	r5,r17
  80ac40:	080bb840 	call	80bb84 <__adddf3>
  80ac44:	d8800015 	stw	r2,0(sp)
  80ac48:	d8c00115 	stw	r3,4(sp)
  80ac4c:	d8800017 	ldw	r2,0(sp)
  80ac50:	d8c00117 	ldw	r3,4(sp)
  80ac54:	880f883a 	mov	r7,r17
  80ac58:	800d883a 	mov	r6,r16
  80ac5c:	180b883a 	mov	r5,r3
  80ac60:	1009883a 	mov	r4,r2
  80ac64:	080bb040 	call	80bb04 <__subdf3>
  80ac68:	1015883a 	mov	r10,r2
  80ac6c:	1817883a 	mov	r11,r3
  80ac70:	5005883a 	mov	r2,r10
  80ac74:	5807883a 	mov	r3,r11
  80ac78:	dfc00617 	ldw	ra,24(sp)
  80ac7c:	dcc00517 	ldw	r19,20(sp)
  80ac80:	dc800417 	ldw	r18,16(sp)
  80ac84:	dc400317 	ldw	r17,12(sp)
  80ac88:	dc000217 	ldw	r16,8(sp)
  80ac8c:	dec00704 	addi	sp,sp,28
  80ac90:	f800283a 	ret
  80ac94:	00800cc4 	movi	r2,51
  80ac98:	12400f16 	blt	r2,r9,80acd8 <rint+0x140>
  80ac9c:	213efb44 	addi	r4,r4,-1043
  80aca0:	00bfffc4 	movi	r2,-1
  80aca4:	1104d83a 	srl	r2,r2,r4
  80aca8:	5086703a 	and	r3,r10,r2
  80acac:	183ff026 	beq	r3,zero,80ac70 <rint+0xd8>
  80acb0:	100ad07a 	srli	r5,r2,1
  80acb4:	5144703a 	and	r2,r10,r5
  80acb8:	10000526 	beq	r2,zero,80acd0 <rint+0x138>
  80acbc:	00d00034 	movhi	r3,16384
  80acc0:	1907d83a 	sra	r3,r3,r4
  80acc4:	0144303a 	nor	r2,zero,r5
  80acc8:	5084703a 	and	r2,r10,r2
  80accc:	10ccb03a 	or	r6,r2,r3
  80acd0:	5809883a 	mov	r4,r11
  80acd4:	003fd106 	br	80ac1c <rint+0x84>
  80acd8:	00810004 	movi	r2,1024
  80acdc:	48bfe41e 	bne	r9,r2,80ac70 <rint+0xd8>
  80ace0:	5009883a 	mov	r4,r10
  80ace4:	500d883a 	mov	r6,r10
  80ace8:	280f883a 	mov	r7,r5
  80acec:	080bb840 	call	80bb84 <__adddf3>
  80acf0:	1015883a 	mov	r10,r2
  80acf4:	1817883a 	mov	r11,r3
  80acf8:	003fdd06 	br	80ac70 <rint+0xd8>
  80acfc:	04e00034 	movhi	r19,32768
  80ad00:	9cffffc4 	addi	r19,r19,-1
  80ad04:	2cc4703a 	and	r2,r5,r19
  80ad08:	5084b03a 	or	r2,r10,r2
  80ad0c:	103fd826 	beq	r2,zero,80ac70 <rint+0xd8>
  80ad10:	00c00434 	movhi	r3,16
  80ad14:	18ffffc4 	addi	r3,r3,-1
  80ad18:	28c6703a 	and	r3,r5,r3
  80ad1c:	50c6b03a 	or	r3,r10,r3
  80ad20:	00cdc83a 	sub	r6,zero,r3
  80ad24:	900a90fa 	slli	r5,r18,3
  80ad28:	1986b03a 	or	r3,r3,r6
  80ad2c:	010020b4 	movhi	r4,130
  80ad30:	2106a304 	addi	r4,r4,6796
  80ad34:	1806d33a 	srli	r3,r3,12
  80ad38:	290b883a 	add	r5,r5,r4
  80ad3c:	2c000017 	ldw	r16,0(r5)
  80ad40:	2c400117 	ldw	r17,4(r5)
  80ad44:	593fffac 	andhi	r4,r11,65534
  80ad48:	18c0022c 	andhi	r3,r3,8
  80ad4c:	1906b03a 	or	r3,r3,r4
  80ad50:	500d883a 	mov	r6,r10
  80ad54:	180f883a 	mov	r7,r3
  80ad58:	8009883a 	mov	r4,r16
  80ad5c:	880b883a 	mov	r5,r17
  80ad60:	080bb840 	call	80bb84 <__adddf3>
  80ad64:	d8800015 	stw	r2,0(sp)
  80ad68:	d8c00115 	stw	r3,4(sp)
  80ad6c:	d8800017 	ldw	r2,0(sp)
  80ad70:	d8c00117 	ldw	r3,4(sp)
  80ad74:	880f883a 	mov	r7,r17
  80ad78:	800d883a 	mov	r6,r16
  80ad7c:	180b883a 	mov	r5,r3
  80ad80:	1009883a 	mov	r4,r2
  80ad84:	080bb040 	call	80bb04 <__subdf3>
  80ad88:	901297fa 	slli	r9,r18,31
  80ad8c:	98d0703a 	and	r8,r19,r3
  80ad90:	1015883a 	mov	r10,r2
  80ad94:	4250b03a 	or	r8,r8,r9
  80ad98:	4017883a 	mov	r11,r8
  80ad9c:	003fb406 	br	80ac70 <rint+0xd8>
  80ada0:	01900034 	movhi	r6,16384
  80ada4:	003f9d06 	br	80ac1c <rint+0x84>

0080ada8 <isnanf>:
  80ada8:	00a00034 	movhi	r2,32768
  80adac:	10bfffc4 	addi	r2,r2,-1
  80adb0:	2088703a 	and	r4,r4,r2
  80adb4:	009fe034 	movhi	r2,32640
  80adb8:	1104803a 	cmplt	r2,r2,r4
  80adbc:	f800283a 	ret

0080adc0 <__muldi3>:
  80adc0:	defff204 	addi	sp,sp,-56
  80adc4:	df000c15 	stw	fp,48(sp)
  80adc8:	3038d43a 	srli	fp,r6,16
  80adcc:	dd000815 	stw	r20,32(sp)
  80add0:	dc400515 	stw	r17,20(sp)
  80add4:	2028d43a 	srli	r20,r4,16
  80add8:	247fffcc 	andi	r17,r4,65535
  80addc:	dc000415 	stw	r16,16(sp)
  80ade0:	343fffcc 	andi	r16,r6,65535
  80ade4:	dcc00715 	stw	r19,28(sp)
  80ade8:	d9000015 	stw	r4,0(sp)
  80adec:	2827883a 	mov	r19,r5
  80adf0:	8809883a 	mov	r4,r17
  80adf4:	d9400115 	stw	r5,4(sp)
  80adf8:	800b883a 	mov	r5,r16
  80adfc:	d9800215 	stw	r6,8(sp)
  80ae00:	dfc00d15 	stw	ra,52(sp)
  80ae04:	d9c00315 	stw	r7,12(sp)
  80ae08:	dd800a15 	stw	r22,40(sp)
  80ae0c:	dd400915 	stw	r21,36(sp)
  80ae10:	302d883a 	mov	r22,r6
  80ae14:	ddc00b15 	stw	r23,44(sp)
  80ae18:	dc800615 	stw	r18,24(sp)
  80ae1c:	080c90c0 	call	80c90c <__mulsi3>
  80ae20:	8809883a 	mov	r4,r17
  80ae24:	e00b883a 	mov	r5,fp
  80ae28:	102b883a 	mov	r21,r2
  80ae2c:	080c90c0 	call	80c90c <__mulsi3>
  80ae30:	800b883a 	mov	r5,r16
  80ae34:	a009883a 	mov	r4,r20
  80ae38:	1023883a 	mov	r17,r2
  80ae3c:	080c90c0 	call	80c90c <__mulsi3>
  80ae40:	a009883a 	mov	r4,r20
  80ae44:	e00b883a 	mov	r5,fp
  80ae48:	1021883a 	mov	r16,r2
  80ae4c:	080c90c0 	call	80c90c <__mulsi3>
  80ae50:	a8ffffcc 	andi	r3,r21,65535
  80ae54:	a82ad43a 	srli	r21,r21,16
  80ae58:	8c23883a 	add	r17,r17,r16
  80ae5c:	1011883a 	mov	r8,r2
  80ae60:	ac6b883a 	add	r21,r21,r17
  80ae64:	a804943a 	slli	r2,r21,16
  80ae68:	b009883a 	mov	r4,r22
  80ae6c:	980b883a 	mov	r5,r19
  80ae70:	10c7883a 	add	r3,r2,r3
  80ae74:	a812d43a 	srli	r9,r21,16
  80ae78:	180d883a 	mov	r6,r3
  80ae7c:	ac00022e 	bgeu	r21,r16,80ae88 <__muldi3+0xc8>
  80ae80:	00800074 	movhi	r2,1
  80ae84:	4091883a 	add	r8,r8,r2
  80ae88:	4267883a 	add	r19,r8,r9
  80ae8c:	302d883a 	mov	r22,r6
  80ae90:	080c90c0 	call	80c90c <__mulsi3>
  80ae94:	d9400317 	ldw	r5,12(sp)
  80ae98:	d9000017 	ldw	r4,0(sp)
  80ae9c:	1023883a 	mov	r17,r2
  80aea0:	080c90c0 	call	80c90c <__mulsi3>
  80aea4:	14cb883a 	add	r5,r2,r19
  80aea8:	894b883a 	add	r5,r17,r5
  80aeac:	b005883a 	mov	r2,r22
  80aeb0:	2807883a 	mov	r3,r5
  80aeb4:	dfc00d17 	ldw	ra,52(sp)
  80aeb8:	df000c17 	ldw	fp,48(sp)
  80aebc:	ddc00b17 	ldw	r23,44(sp)
  80aec0:	dd800a17 	ldw	r22,40(sp)
  80aec4:	dd400917 	ldw	r21,36(sp)
  80aec8:	dd000817 	ldw	r20,32(sp)
  80aecc:	dcc00717 	ldw	r19,28(sp)
  80aed0:	dc800617 	ldw	r18,24(sp)
  80aed4:	dc400517 	ldw	r17,20(sp)
  80aed8:	dc000417 	ldw	r16,16(sp)
  80aedc:	dec00e04 	addi	sp,sp,56
  80aee0:	f800283a 	ret

0080aee4 <_fpadd_parts>:
  80aee4:	21c00017 	ldw	r7,0(r4)
  80aee8:	02000044 	movi	r8,1
  80aeec:	41c0332e 	bgeu	r8,r7,80afbc <_fpadd_parts+0xd8>
  80aef0:	28800017 	ldw	r2,0(r5)
  80aef4:	4080462e 	bgeu	r8,r2,80b010 <_fpadd_parts+0x12c>
  80aef8:	00c00104 	movi	r3,4
  80aefc:	38c06b26 	beq	r7,r3,80b0ac <_fpadd_parts+0x1c8>
  80af00:	10c04326 	beq	r2,r3,80b010 <_fpadd_parts+0x12c>
  80af04:	00c00084 	movi	r3,2
  80af08:	10c02e26 	beq	r2,r3,80afc4 <_fpadd_parts+0xe0>
  80af0c:	38c04026 	beq	r7,r3,80b010 <_fpadd_parts+0x12c>
  80af10:	22800217 	ldw	r10,8(r4)
  80af14:	28c00217 	ldw	r3,8(r5)
  80af18:	23000317 	ldw	r12,12(r4)
  80af1c:	2a400317 	ldw	r9,12(r5)
  80af20:	50cfc83a 	sub	r7,r10,r3
  80af24:	3817883a 	mov	r11,r7
  80af28:	38004f16 	blt	r7,zero,80b068 <_fpadd_parts+0x184>
  80af2c:	008007c4 	movi	r2,31
  80af30:	11c03316 	blt	r2,r7,80b000 <_fpadd_parts+0x11c>
  80af34:	02c0540e 	bge	zero,r11,80b088 <_fpadd_parts+0x1a4>
  80af38:	41c4983a 	sll	r2,r8,r7
  80af3c:	49c6d83a 	srl	r3,r9,r7
  80af40:	10bfffc4 	addi	r2,r2,-1
  80af44:	4884703a 	and	r2,r9,r2
  80af48:	1004c03a 	cmpne	r2,r2,zero
  80af4c:	1892b03a 	or	r9,r3,r2
  80af50:	20c00117 	ldw	r3,4(r4)
  80af54:	28800117 	ldw	r2,4(r5)
  80af58:	18803c26 	beq	r3,r2,80b04c <_fpadd_parts+0x168>
  80af5c:	18002f26 	beq	r3,zero,80b01c <_fpadd_parts+0x138>
  80af60:	4b05c83a 	sub	r2,r9,r12
  80af64:	10004216 	blt	r2,zero,80b070 <_fpadd_parts+0x18c>
  80af68:	32800215 	stw	r10,8(r6)
  80af6c:	30800315 	stw	r2,12(r6)
  80af70:	30000115 	stw	zero,4(r6)
  80af74:	31000317 	ldw	r4,12(r6)
  80af78:	01d00034 	movhi	r7,16384
  80af7c:	39ffff84 	addi	r7,r7,-2
  80af80:	20bfffc4 	addi	r2,r4,-1
  80af84:	2007883a 	mov	r3,r4
  80af88:	38800836 	bltu	r7,r2,80afac <_fpadd_parts+0xc8>
  80af8c:	31400217 	ldw	r5,8(r6)
  80af90:	18c9883a 	add	r4,r3,r3
  80af94:	20bfffc4 	addi	r2,r4,-1
  80af98:	297fffc4 	addi	r5,r5,-1
  80af9c:	2007883a 	mov	r3,r4
  80afa0:	38bffb2e 	bgeu	r7,r2,80af90 <_fpadd_parts+0xac>
  80afa4:	31400215 	stw	r5,8(r6)
  80afa8:	31000315 	stw	r4,12(r6)
  80afac:	008000c4 	movi	r2,3
  80afb0:	30800015 	stw	r2,0(r6)
  80afb4:	20001b16 	blt	r4,zero,80b024 <_fpadd_parts+0x140>
  80afb8:	3009883a 	mov	r4,r6
  80afbc:	2005883a 	mov	r2,r4
  80afc0:	f800283a 	ret
  80afc4:	38fffd1e 	bne	r7,r3,80afbc <_fpadd_parts+0xd8>
  80afc8:	31c00015 	stw	r7,0(r6)
  80afcc:	20800117 	ldw	r2,4(r4)
  80afd0:	30800115 	stw	r2,4(r6)
  80afd4:	20c00217 	ldw	r3,8(r4)
  80afd8:	30c00215 	stw	r3,8(r6)
  80afdc:	20800317 	ldw	r2,12(r4)
  80afe0:	30800315 	stw	r2,12(r6)
  80afe4:	20c00117 	ldw	r3,4(r4)
  80afe8:	28800117 	ldw	r2,4(r5)
  80afec:	3009883a 	mov	r4,r6
  80aff0:	1886703a 	and	r3,r3,r2
  80aff4:	2005883a 	mov	r2,r4
  80aff8:	30c00115 	stw	r3,4(r6)
  80affc:	f800283a 	ret
  80b000:	1a801716 	blt	r3,r10,80b060 <_fpadd_parts+0x17c>
  80b004:	1815883a 	mov	r10,r3
  80b008:	0019883a 	mov	r12,zero
  80b00c:	003fd006 	br	80af50 <_fpadd_parts+0x6c>
  80b010:	2809883a 	mov	r4,r5
  80b014:	2005883a 	mov	r2,r4
  80b018:	f800283a 	ret
  80b01c:	6245c83a 	sub	r2,r12,r9
  80b020:	003fd006 	br	80af64 <_fpadd_parts+0x80>
  80b024:	30800217 	ldw	r2,8(r6)
  80b028:	2006d07a 	srli	r3,r4,1
  80b02c:	2100004c 	andi	r4,r4,1
  80b030:	10800044 	addi	r2,r2,1
  80b034:	1906b03a 	or	r3,r3,r4
  80b038:	3009883a 	mov	r4,r6
  80b03c:	30800215 	stw	r2,8(r6)
  80b040:	2005883a 	mov	r2,r4
  80b044:	30c00315 	stw	r3,12(r6)
  80b048:	f800283a 	ret
  80b04c:	4b09883a 	add	r4,r9,r12
  80b050:	30c00115 	stw	r3,4(r6)
  80b054:	32800215 	stw	r10,8(r6)
  80b058:	31000315 	stw	r4,12(r6)
  80b05c:	003fd306 	br	80afac <_fpadd_parts+0xc8>
  80b060:	0013883a 	mov	r9,zero
  80b064:	003fba06 	br	80af50 <_fpadd_parts+0x6c>
  80b068:	01cfc83a 	sub	r7,zero,r7
  80b06c:	003faf06 	br	80af2c <_fpadd_parts+0x48>
  80b070:	0089c83a 	sub	r4,zero,r2
  80b074:	00800044 	movi	r2,1
  80b078:	30800115 	stw	r2,4(r6)
  80b07c:	32800215 	stw	r10,8(r6)
  80b080:	31000315 	stw	r4,12(r6)
  80b084:	003fbb06 	br	80af74 <_fpadd_parts+0x90>
  80b088:	583fb126 	beq	r11,zero,80af50 <_fpadd_parts+0x6c>
  80b08c:	41c4983a 	sll	r2,r8,r7
  80b090:	61c6d83a 	srl	r3,r12,r7
  80b094:	51d5883a 	add	r10,r10,r7
  80b098:	10bfffc4 	addi	r2,r2,-1
  80b09c:	6084703a 	and	r2,r12,r2
  80b0a0:	1004c03a 	cmpne	r2,r2,zero
  80b0a4:	1898b03a 	or	r12,r3,r2
  80b0a8:	003fa906 	br	80af50 <_fpadd_parts+0x6c>
  80b0ac:	11ffc31e 	bne	r2,r7,80afbc <_fpadd_parts+0xd8>
  80b0b0:	28c00117 	ldw	r3,4(r5)
  80b0b4:	20800117 	ldw	r2,4(r4)
  80b0b8:	10ffc026 	beq	r2,r3,80afbc <_fpadd_parts+0xd8>
  80b0bc:	010020b4 	movhi	r4,130
  80b0c0:	2106a704 	addi	r4,r4,6812
  80b0c4:	003fbd06 	br	80afbc <_fpadd_parts+0xd8>

0080b0c8 <__subsf3>:
  80b0c8:	deffef04 	addi	sp,sp,-68
  80b0cc:	dcc00f15 	stw	r19,60(sp)
  80b0d0:	dcc00204 	addi	r19,sp,8
  80b0d4:	dc400e15 	stw	r17,56(sp)
  80b0d8:	d9000015 	stw	r4,0(sp)
  80b0dc:	d9400115 	stw	r5,4(sp)
  80b0e0:	d809883a 	mov	r4,sp
  80b0e4:	980b883a 	mov	r5,r19
  80b0e8:	dc400604 	addi	r17,sp,24
  80b0ec:	dfc01015 	stw	ra,64(sp)
  80b0f0:	080cb240 	call	80cb24 <__unpack_f>
  80b0f4:	d9000104 	addi	r4,sp,4
  80b0f8:	880b883a 	mov	r5,r17
  80b0fc:	080cb240 	call	80cb24 <__unpack_f>
  80b100:	d8800717 	ldw	r2,28(sp)
  80b104:	9809883a 	mov	r4,r19
  80b108:	880b883a 	mov	r5,r17
  80b10c:	d9800a04 	addi	r6,sp,40
  80b110:	1080005c 	xori	r2,r2,1
  80b114:	d8800715 	stw	r2,28(sp)
  80b118:	080aee40 	call	80aee4 <_fpadd_parts>
  80b11c:	1009883a 	mov	r4,r2
  80b120:	080c9c40 	call	80c9c4 <__pack_f>
  80b124:	dfc01017 	ldw	ra,64(sp)
  80b128:	dcc00f17 	ldw	r19,60(sp)
  80b12c:	dc400e17 	ldw	r17,56(sp)
  80b130:	dec01104 	addi	sp,sp,68
  80b134:	f800283a 	ret

0080b138 <__addsf3>:
  80b138:	deffef04 	addi	sp,sp,-68
  80b13c:	dcc00f15 	stw	r19,60(sp)
  80b140:	dcc00204 	addi	r19,sp,8
  80b144:	dc400e15 	stw	r17,56(sp)
  80b148:	d9000015 	stw	r4,0(sp)
  80b14c:	d9400115 	stw	r5,4(sp)
  80b150:	d809883a 	mov	r4,sp
  80b154:	980b883a 	mov	r5,r19
  80b158:	dc400604 	addi	r17,sp,24
  80b15c:	dfc01015 	stw	ra,64(sp)
  80b160:	080cb240 	call	80cb24 <__unpack_f>
  80b164:	d9000104 	addi	r4,sp,4
  80b168:	880b883a 	mov	r5,r17
  80b16c:	080cb240 	call	80cb24 <__unpack_f>
  80b170:	d9800a04 	addi	r6,sp,40
  80b174:	9809883a 	mov	r4,r19
  80b178:	880b883a 	mov	r5,r17
  80b17c:	080aee40 	call	80aee4 <_fpadd_parts>
  80b180:	1009883a 	mov	r4,r2
  80b184:	080c9c40 	call	80c9c4 <__pack_f>
  80b188:	dfc01017 	ldw	ra,64(sp)
  80b18c:	dcc00f17 	ldw	r19,60(sp)
  80b190:	dc400e17 	ldw	r17,56(sp)
  80b194:	dec01104 	addi	sp,sp,68
  80b198:	f800283a 	ret

0080b19c <__mulsf3>:
  80b19c:	deffef04 	addi	sp,sp,-68
  80b1a0:	dc400f15 	stw	r17,60(sp)
  80b1a4:	dc400204 	addi	r17,sp,8
  80b1a8:	dc000e15 	stw	r16,56(sp)
  80b1ac:	d9000015 	stw	r4,0(sp)
  80b1b0:	d9400115 	stw	r5,4(sp)
  80b1b4:	d809883a 	mov	r4,sp
  80b1b8:	880b883a 	mov	r5,r17
  80b1bc:	dc000604 	addi	r16,sp,24
  80b1c0:	dfc01015 	stw	ra,64(sp)
  80b1c4:	080cb240 	call	80cb24 <__unpack_f>
  80b1c8:	d9000104 	addi	r4,sp,4
  80b1cc:	800b883a 	mov	r5,r16
  80b1d0:	080cb240 	call	80cb24 <__unpack_f>
  80b1d4:	d9000217 	ldw	r4,8(sp)
  80b1d8:	00800044 	movi	r2,1
  80b1dc:	01400104 	movi	r5,4
  80b1e0:	1100142e 	bgeu	r2,r4,80b234 <__mulsf3+0x98>
  80b1e4:	d8c00617 	ldw	r3,24(sp)
  80b1e8:	10c0052e 	bgeu	r2,r3,80b200 <__mulsf3+0x64>
  80b1ec:	21400f26 	beq	r4,r5,80b22c <__mulsf3+0x90>
  80b1f0:	19405d26 	beq	r3,r5,80b368 <__mulsf3+0x1cc>
  80b1f4:	00800084 	movi	r2,2
  80b1f8:	20800e26 	beq	r4,r2,80b234 <__mulsf3+0x98>
  80b1fc:	1880181e 	bne	r3,r2,80b260 <__mulsf3+0xc4>
  80b200:	d8c00717 	ldw	r3,28(sp)
  80b204:	d8800317 	ldw	r2,12(sp)
  80b208:	8009883a 	mov	r4,r16
  80b20c:	10c4c03a 	cmpne	r2,r2,r3
  80b210:	d8800715 	stw	r2,28(sp)
  80b214:	080c9c40 	call	80c9c4 <__pack_f>
  80b218:	dfc01017 	ldw	ra,64(sp)
  80b21c:	dc400f17 	ldw	r17,60(sp)
  80b220:	dc000e17 	ldw	r16,56(sp)
  80b224:	dec01104 	addi	sp,sp,68
  80b228:	f800283a 	ret
  80b22c:	00800084 	movi	r2,2
  80b230:	18804f26 	beq	r3,r2,80b370 <__mulsf3+0x1d4>
  80b234:	d8800317 	ldw	r2,12(sp)
  80b238:	d8c00717 	ldw	r3,28(sp)
  80b23c:	8809883a 	mov	r4,r17
  80b240:	10c4c03a 	cmpne	r2,r2,r3
  80b244:	d8800315 	stw	r2,12(sp)
  80b248:	080c9c40 	call	80c9c4 <__pack_f>
  80b24c:	dfc01017 	ldw	ra,64(sp)
  80b250:	dc400f17 	ldw	r17,60(sp)
  80b254:	dc000e17 	ldw	r16,56(sp)
  80b258:	dec01104 	addi	sp,sp,68
  80b25c:	f800283a 	ret
  80b260:	d8800517 	ldw	r2,20(sp)
  80b264:	da000917 	ldw	r8,36(sp)
  80b268:	0013883a 	mov	r9,zero
  80b26c:	0007883a 	mov	r3,zero
  80b270:	480f883a 	mov	r7,r9
  80b274:	180b883a 	mov	r5,r3
  80b278:	400d883a 	mov	r6,r8
  80b27c:	1009883a 	mov	r4,r2
  80b280:	080adc00 	call	80adc0 <__muldi3>
  80b284:	da800417 	ldw	r10,16(sp)
  80b288:	d9800817 	ldw	r6,32(sp)
  80b28c:	da400317 	ldw	r9,12(sp)
  80b290:	52800084 	addi	r10,r10,2
  80b294:	3295883a 	add	r10,r6,r10
  80b298:	d9800717 	ldw	r6,28(sp)
  80b29c:	180b883a 	mov	r5,r3
  80b2a0:	180f883a 	mov	r7,r3
  80b2a4:	4992c03a 	cmpne	r9,r9,r6
  80b2a8:	da400b15 	stw	r9,44(sp)
  80b2ac:	1007883a 	mov	r3,r2
  80b2b0:	da800c15 	stw	r10,48(sp)
  80b2b4:	2800070e 	bge	r5,zero,80b2d4 <__mulsf3+0x138>
  80b2b8:	2880004c 	andi	r2,r5,1
  80b2bc:	1005003a 	cmpeq	r2,r2,zero
  80b2c0:	500d883a 	mov	r6,r10
  80b2c4:	10001e26 	beq	r2,zero,80b340 <__mulsf3+0x1a4>
  80b2c8:	380ed07a 	srli	r7,r7,1
  80b2cc:	31800044 	addi	r6,r6,1
  80b2d0:	d9800c15 	stw	r6,48(sp)
  80b2d4:	01100034 	movhi	r4,16384
  80b2d8:	213fffc4 	addi	r4,r4,-1
  80b2dc:	21c00b36 	bltu	r4,r7,80b30c <__mulsf3+0x170>
  80b2e0:	d8800c17 	ldw	r2,48(sp)
  80b2e4:	00000206 	br	80b2f0 <__mulsf3+0x154>
  80b2e8:	18c7883a 	add	r3,r3,r3
  80b2ec:	21c00636 	bltu	r4,r7,80b308 <__mulsf3+0x16c>
  80b2f0:	10bfffc4 	addi	r2,r2,-1
  80b2f4:	39cf883a 	add	r7,r7,r7
  80b2f8:	183ffb0e 	bge	r3,zero,80b2e8 <__mulsf3+0x14c>
  80b2fc:	39c00054 	ori	r7,r7,1
  80b300:	18c7883a 	add	r3,r3,r3
  80b304:	21fffa2e 	bgeu	r4,r7,80b2f0 <__mulsf3+0x154>
  80b308:	d8800c15 	stw	r2,48(sp)
  80b30c:	39001fcc 	andi	r4,r7,127
  80b310:	00801004 	movi	r2,64
  80b314:	20800d26 	beq	r4,r2,80b34c <__mulsf3+0x1b0>
  80b318:	008000c4 	movi	r2,3
  80b31c:	d9000a04 	addi	r4,sp,40
  80b320:	d9c00d15 	stw	r7,52(sp)
  80b324:	d8800a15 	stw	r2,40(sp)
  80b328:	080c9c40 	call	80c9c4 <__pack_f>
  80b32c:	dfc01017 	ldw	ra,64(sp)
  80b330:	dc400f17 	ldw	r17,60(sp)
  80b334:	dc000e17 	ldw	r16,56(sp)
  80b338:	dec01104 	addi	sp,sp,68
  80b33c:	f800283a 	ret
  80b340:	1804d07a 	srli	r2,r3,1
  80b344:	10e00034 	orhi	r3,r2,32768
  80b348:	003fdf06 	br	80b2c8 <__mulsf3+0x12c>
  80b34c:	3880200c 	andi	r2,r7,128
  80b350:	103ff11e 	bne	r2,zero,80b318 <__mulsf3+0x17c>
  80b354:	183ff026 	beq	r3,zero,80b318 <__mulsf3+0x17c>
  80b358:	3907883a 	add	r3,r7,r4
  80b35c:	00bfe004 	movi	r2,-128
  80b360:	188e703a 	and	r7,r3,r2
  80b364:	003fec06 	br	80b318 <__mulsf3+0x17c>
  80b368:	00800084 	movi	r2,2
  80b36c:	20bfa41e 	bne	r4,r2,80b200 <__mulsf3+0x64>
  80b370:	010020b4 	movhi	r4,130
  80b374:	2106a704 	addi	r4,r4,6812
  80b378:	003fb306 	br	80b248 <__mulsf3+0xac>

0080b37c <__divsf3>:
  80b37c:	defff304 	addi	sp,sp,-52
  80b380:	dc400b15 	stw	r17,44(sp)
  80b384:	dc400204 	addi	r17,sp,8
  80b388:	dc000a15 	stw	r16,40(sp)
  80b38c:	d9000015 	stw	r4,0(sp)
  80b390:	d9400115 	stw	r5,4(sp)
  80b394:	d809883a 	mov	r4,sp
  80b398:	880b883a 	mov	r5,r17
  80b39c:	dc000604 	addi	r16,sp,24
  80b3a0:	dfc00c15 	stw	ra,48(sp)
  80b3a4:	080cb240 	call	80cb24 <__unpack_f>
  80b3a8:	d9000104 	addi	r4,sp,4
  80b3ac:	800b883a 	mov	r5,r16
  80b3b0:	080cb240 	call	80cb24 <__unpack_f>
  80b3b4:	d9000217 	ldw	r4,8(sp)
  80b3b8:	00800044 	movi	r2,1
  80b3bc:	01800104 	movi	r6,4
  80b3c0:	11000a2e 	bgeu	r2,r4,80b3ec <__divsf3+0x70>
  80b3c4:	d9400617 	ldw	r5,24(sp)
  80b3c8:	1140432e 	bgeu	r2,r5,80b4d8 <__divsf3+0x15c>
  80b3cc:	d8800317 	ldw	r2,12(sp)
  80b3d0:	d8c00717 	ldw	r3,28(sp)
  80b3d4:	10c4f03a 	xor	r2,r2,r3
  80b3d8:	d8800315 	stw	r2,12(sp)
  80b3dc:	21800226 	beq	r4,r6,80b3e8 <__divsf3+0x6c>
  80b3e0:	00800084 	movi	r2,2
  80b3e4:	2080101e 	bne	r4,r2,80b428 <__divsf3+0xac>
  80b3e8:	29000726 	beq	r5,r4,80b408 <__divsf3+0x8c>
  80b3ec:	8809883a 	mov	r4,r17
  80b3f0:	080c9c40 	call	80c9c4 <__pack_f>
  80b3f4:	dfc00c17 	ldw	ra,48(sp)
  80b3f8:	dc400b17 	ldw	r17,44(sp)
  80b3fc:	dc000a17 	ldw	r16,40(sp)
  80b400:	dec00d04 	addi	sp,sp,52
  80b404:	f800283a 	ret
  80b408:	010020b4 	movhi	r4,130
  80b40c:	2106a704 	addi	r4,r4,6812
  80b410:	080c9c40 	call	80c9c4 <__pack_f>
  80b414:	dfc00c17 	ldw	ra,48(sp)
  80b418:	dc400b17 	ldw	r17,44(sp)
  80b41c:	dc000a17 	ldw	r16,40(sp)
  80b420:	dec00d04 	addi	sp,sp,52
  80b424:	f800283a 	ret
  80b428:	29802d26 	beq	r5,r6,80b4e0 <__divsf3+0x164>
  80b42c:	28801a26 	beq	r5,r2,80b498 <__divsf3+0x11c>
  80b430:	d8c00417 	ldw	r3,16(sp)
  80b434:	d8800817 	ldw	r2,32(sp)
  80b438:	d9000517 	ldw	r4,20(sp)
  80b43c:	d9800917 	ldw	r6,36(sp)
  80b440:	1885c83a 	sub	r2,r3,r2
  80b444:	d8800415 	stw	r2,16(sp)
  80b448:	2180032e 	bgeu	r4,r6,80b458 <__divsf3+0xdc>
  80b44c:	10bfffc4 	addi	r2,r2,-1
  80b450:	d8800415 	stw	r2,16(sp)
  80b454:	2109883a 	add	r4,r4,r4
  80b458:	01500034 	movhi	r5,16384
  80b45c:	0007883a 	mov	r3,zero
  80b460:	0005883a 	mov	r2,zero
  80b464:	01c007c4 	movi	r7,31
  80b468:	10800044 	addi	r2,r2,1
  80b46c:	21800236 	bltu	r4,r6,80b478 <__divsf3+0xfc>
  80b470:	1946b03a 	or	r3,r3,r5
  80b474:	2189c83a 	sub	r4,r4,r6
  80b478:	280ad07a 	srli	r5,r5,1
  80b47c:	2109883a 	add	r4,r4,r4
  80b480:	11fff91e 	bne	r2,r7,80b468 <__divsf3+0xec>
  80b484:	19401fcc 	andi	r5,r3,127
  80b488:	00801004 	movi	r2,64
  80b48c:	28800a26 	beq	r5,r2,80b4b8 <__divsf3+0x13c>
  80b490:	d8c00515 	stw	r3,20(sp)
  80b494:	003fd506 	br	80b3ec <__divsf3+0x70>
  80b498:	8809883a 	mov	r4,r17
  80b49c:	d9800215 	stw	r6,8(sp)
  80b4a0:	080c9c40 	call	80c9c4 <__pack_f>
  80b4a4:	dfc00c17 	ldw	ra,48(sp)
  80b4a8:	dc400b17 	ldw	r17,44(sp)
  80b4ac:	dc000a17 	ldw	r16,40(sp)
  80b4b0:	dec00d04 	addi	sp,sp,52
  80b4b4:	f800283a 	ret
  80b4b8:	1880200c 	andi	r2,r3,128
  80b4bc:	103ff41e 	bne	r2,zero,80b490 <__divsf3+0x114>
  80b4c0:	203ff326 	beq	r4,zero,80b490 <__divsf3+0x114>
  80b4c4:	1947883a 	add	r3,r3,r5
  80b4c8:	00bfe004 	movi	r2,-128
  80b4cc:	1886703a 	and	r3,r3,r2
  80b4d0:	d8c00515 	stw	r3,20(sp)
  80b4d4:	003fc506 	br	80b3ec <__divsf3+0x70>
  80b4d8:	8009883a 	mov	r4,r16
  80b4dc:	003fc406 	br	80b3f0 <__divsf3+0x74>
  80b4e0:	8809883a 	mov	r4,r17
  80b4e4:	d8000515 	stw	zero,20(sp)
  80b4e8:	d8000415 	stw	zero,16(sp)
  80b4ec:	003fc006 	br	80b3f0 <__divsf3+0x74>

0080b4f0 <__eqsf2>:
  80b4f0:	defff304 	addi	sp,sp,-52
  80b4f4:	dc400b15 	stw	r17,44(sp)
  80b4f8:	dc400204 	addi	r17,sp,8
  80b4fc:	dc000a15 	stw	r16,40(sp)
  80b500:	d9000015 	stw	r4,0(sp)
  80b504:	d9400115 	stw	r5,4(sp)
  80b508:	d809883a 	mov	r4,sp
  80b50c:	880b883a 	mov	r5,r17
  80b510:	dc000604 	addi	r16,sp,24
  80b514:	dfc00c15 	stw	ra,48(sp)
  80b518:	080cb240 	call	80cb24 <__unpack_f>
  80b51c:	d9000104 	addi	r4,sp,4
  80b520:	800b883a 	mov	r5,r16
  80b524:	080cb240 	call	80cb24 <__unpack_f>
  80b528:	d8800217 	ldw	r2,8(sp)
  80b52c:	00c00044 	movi	r3,1
  80b530:	180d883a 	mov	r6,r3
  80b534:	1880062e 	bgeu	r3,r2,80b550 <__eqsf2+0x60>
  80b538:	d8800617 	ldw	r2,24(sp)
  80b53c:	8809883a 	mov	r4,r17
  80b540:	800b883a 	mov	r5,r16
  80b544:	1880022e 	bgeu	r3,r2,80b550 <__eqsf2+0x60>
  80b548:	080cbec0 	call	80cbec <__fpcmp_parts_f>
  80b54c:	100d883a 	mov	r6,r2
  80b550:	3005883a 	mov	r2,r6
  80b554:	dfc00c17 	ldw	ra,48(sp)
  80b558:	dc400b17 	ldw	r17,44(sp)
  80b55c:	dc000a17 	ldw	r16,40(sp)
  80b560:	dec00d04 	addi	sp,sp,52
  80b564:	f800283a 	ret

0080b568 <__ltsf2>:
  80b568:	defff304 	addi	sp,sp,-52
  80b56c:	dc400b15 	stw	r17,44(sp)
  80b570:	dc400204 	addi	r17,sp,8
  80b574:	dc000a15 	stw	r16,40(sp)
  80b578:	d9000015 	stw	r4,0(sp)
  80b57c:	d9400115 	stw	r5,4(sp)
  80b580:	d809883a 	mov	r4,sp
  80b584:	880b883a 	mov	r5,r17
  80b588:	dc000604 	addi	r16,sp,24
  80b58c:	dfc00c15 	stw	ra,48(sp)
  80b590:	080cb240 	call	80cb24 <__unpack_f>
  80b594:	d9000104 	addi	r4,sp,4
  80b598:	800b883a 	mov	r5,r16
  80b59c:	080cb240 	call	80cb24 <__unpack_f>
  80b5a0:	d8800217 	ldw	r2,8(sp)
  80b5a4:	00c00044 	movi	r3,1
  80b5a8:	180d883a 	mov	r6,r3
  80b5ac:	1880062e 	bgeu	r3,r2,80b5c8 <__ltsf2+0x60>
  80b5b0:	d8800617 	ldw	r2,24(sp)
  80b5b4:	8809883a 	mov	r4,r17
  80b5b8:	800b883a 	mov	r5,r16
  80b5bc:	1880022e 	bgeu	r3,r2,80b5c8 <__ltsf2+0x60>
  80b5c0:	080cbec0 	call	80cbec <__fpcmp_parts_f>
  80b5c4:	100d883a 	mov	r6,r2
  80b5c8:	3005883a 	mov	r2,r6
  80b5cc:	dfc00c17 	ldw	ra,48(sp)
  80b5d0:	dc400b17 	ldw	r17,44(sp)
  80b5d4:	dc000a17 	ldw	r16,40(sp)
  80b5d8:	dec00d04 	addi	sp,sp,52
  80b5dc:	f800283a 	ret

0080b5e0 <__extendsfdf2>:
  80b5e0:	defff904 	addi	sp,sp,-28
  80b5e4:	d9000115 	stw	r4,4(sp)
  80b5e8:	d9400204 	addi	r5,sp,8
  80b5ec:	d9000104 	addi	r4,sp,4
  80b5f0:	dfc00615 	stw	ra,24(sp)
  80b5f4:	080cb240 	call	80cb24 <__unpack_f>
  80b5f8:	d9c00517 	ldw	r7,20(sp)
  80b5fc:	0011883a 	mov	r8,zero
  80b600:	400697ba 	slli	r3,r8,30
  80b604:	3812d0ba 	srli	r9,r7,2
  80b608:	380497ba 	slli	r2,r7,30
  80b60c:	d9000217 	ldw	r4,8(sp)
  80b610:	d9400317 	ldw	r5,12(sp)
  80b614:	d9800417 	ldw	r6,16(sp)
  80b618:	48c6b03a 	or	r3,r9,r3
  80b61c:	100f883a 	mov	r7,r2
  80b620:	d8c00015 	stw	r3,0(sp)
  80b624:	080c7140 	call	80c714 <__make_dp>
  80b628:	dfc00617 	ldw	ra,24(sp)
  80b62c:	dec00704 	addi	sp,sp,28
  80b630:	f800283a 	ret

0080b634 <__floatunsisf>:
  80b634:	defff904 	addi	sp,sp,-28
  80b638:	dc400515 	stw	r17,20(sp)
  80b63c:	dc000415 	stw	r16,16(sp)
  80b640:	dfc00615 	stw	ra,24(sp)
  80b644:	04400784 	movi	r17,30
  80b648:	2021883a 	mov	r16,r4
  80b64c:	d8000115 	stw	zero,4(sp)
  80b650:	2000091e 	bne	r4,zero,80b678 <__floatunsisf+0x44>
  80b654:	00800084 	movi	r2,2
  80b658:	d8800015 	stw	r2,0(sp)
  80b65c:	d809883a 	mov	r4,sp
  80b660:	080c9c40 	call	80c9c4 <__pack_f>
  80b664:	dfc00617 	ldw	ra,24(sp)
  80b668:	dc400517 	ldw	r17,20(sp)
  80b66c:	dc000417 	ldw	r16,16(sp)
  80b670:	dec00704 	addi	sp,sp,28
  80b674:	f800283a 	ret
  80b678:	008000c4 	movi	r2,3
  80b67c:	d9000315 	stw	r4,12(sp)
  80b680:	d8800015 	stw	r2,0(sp)
  80b684:	dc400215 	stw	r17,8(sp)
  80b688:	080c9440 	call	80c944 <__clzsi2>
  80b68c:	117fffc4 	addi	r5,r2,-1
  80b690:	0147c83a 	sub	r3,zero,r5
  80b694:	00800044 	movi	r2,1
  80b698:	10c4983a 	sll	r2,r2,r3
  80b69c:	80c6d83a 	srl	r3,r16,r3
  80b6a0:	8949c83a 	sub	r4,r17,r5
  80b6a4:	10bfffc4 	addi	r2,r2,-1
  80b6a8:	8084703a 	and	r2,r16,r2
  80b6ac:	1004c03a 	cmpne	r2,r2,zero
  80b6b0:	1886b03a 	or	r3,r3,r2
  80b6b4:	28000c16 	blt	r5,zero,80b6e8 <__floatunsisf+0xb4>
  80b6b8:	8144983a 	sll	r2,r16,r5
  80b6bc:	8947c83a 	sub	r3,r17,r5
  80b6c0:	283fe626 	beq	r5,zero,80b65c <__floatunsisf+0x28>
  80b6c4:	d809883a 	mov	r4,sp
  80b6c8:	d8800315 	stw	r2,12(sp)
  80b6cc:	d8c00215 	stw	r3,8(sp)
  80b6d0:	080c9c40 	call	80c9c4 <__pack_f>
  80b6d4:	dfc00617 	ldw	ra,24(sp)
  80b6d8:	dc400517 	ldw	r17,20(sp)
  80b6dc:	dc000417 	ldw	r16,16(sp)
  80b6e0:	dec00704 	addi	sp,sp,28
  80b6e4:	f800283a 	ret
  80b6e8:	d8c00315 	stw	r3,12(sp)
  80b6ec:	d9000215 	stw	r4,8(sp)
  80b6f0:	003fda06 	br	80b65c <__floatunsisf+0x28>

0080b6f4 <_fpadd_parts>:
  80b6f4:	defff804 	addi	sp,sp,-32
  80b6f8:	dcc00315 	stw	r19,12(sp)
  80b6fc:	2027883a 	mov	r19,r4
  80b700:	21000017 	ldw	r4,0(r4)
  80b704:	00c00044 	movi	r3,1
  80b708:	dd400515 	stw	r21,20(sp)
  80b70c:	dd000415 	stw	r20,16(sp)
  80b710:	ddc00715 	stw	r23,28(sp)
  80b714:	dd800615 	stw	r22,24(sp)
  80b718:	dc800215 	stw	r18,8(sp)
  80b71c:	dc400115 	stw	r17,4(sp)
  80b720:	dc000015 	stw	r16,0(sp)
  80b724:	282b883a 	mov	r21,r5
  80b728:	3029883a 	mov	r20,r6
  80b72c:	1900632e 	bgeu	r3,r4,80b8bc <_fpadd_parts+0x1c8>
  80b730:	28800017 	ldw	r2,0(r5)
  80b734:	1880812e 	bgeu	r3,r2,80b93c <_fpadd_parts+0x248>
  80b738:	00c00104 	movi	r3,4
  80b73c:	20c0dc26 	beq	r4,r3,80bab0 <_fpadd_parts+0x3bc>
  80b740:	10c07e26 	beq	r2,r3,80b93c <_fpadd_parts+0x248>
  80b744:	00c00084 	movi	r3,2
  80b748:	10c06726 	beq	r2,r3,80b8e8 <_fpadd_parts+0x1f4>
  80b74c:	20c07b26 	beq	r4,r3,80b93c <_fpadd_parts+0x248>
  80b750:	9dc00217 	ldw	r23,8(r19)
  80b754:	28c00217 	ldw	r3,8(r5)
  80b758:	9c400317 	ldw	r17,12(r19)
  80b75c:	2bc00317 	ldw	r15,12(r5)
  80b760:	b8cdc83a 	sub	r6,r23,r3
  80b764:	9c800417 	ldw	r18,16(r19)
  80b768:	2c000417 	ldw	r16,16(r5)
  80b76c:	3009883a 	mov	r4,r6
  80b770:	30009716 	blt	r6,zero,80b9d0 <_fpadd_parts+0x2dc>
  80b774:	00800fc4 	movi	r2,63
  80b778:	11806b16 	blt	r2,r6,80b928 <_fpadd_parts+0x234>
  80b77c:	0100a40e 	bge	zero,r4,80ba10 <_fpadd_parts+0x31c>
  80b780:	35bff804 	addi	r22,r6,-32
  80b784:	b000bc16 	blt	r22,zero,80ba78 <_fpadd_parts+0x384>
  80b788:	8596d83a 	srl	r11,r16,r22
  80b78c:	0019883a 	mov	r12,zero
  80b790:	0013883a 	mov	r9,zero
  80b794:	01000044 	movi	r4,1
  80b798:	0015883a 	mov	r10,zero
  80b79c:	b000be16 	blt	r22,zero,80ba98 <_fpadd_parts+0x3a4>
  80b7a0:	2590983a 	sll	r8,r4,r22
  80b7a4:	000f883a 	mov	r7,zero
  80b7a8:	00bfffc4 	movi	r2,-1
  80b7ac:	3889883a 	add	r4,r7,r2
  80b7b0:	408b883a 	add	r5,r8,r2
  80b7b4:	21cd803a 	cmpltu	r6,r4,r7
  80b7b8:	314b883a 	add	r5,r6,r5
  80b7bc:	7904703a 	and	r2,r15,r4
  80b7c0:	8146703a 	and	r3,r16,r5
  80b7c4:	10c4b03a 	or	r2,r2,r3
  80b7c8:	10000226 	beq	r2,zero,80b7d4 <_fpadd_parts+0xe0>
  80b7cc:	02400044 	movi	r9,1
  80b7d0:	0015883a 	mov	r10,zero
  80b7d4:	5a5eb03a 	or	r15,r11,r9
  80b7d8:	62a0b03a 	or	r16,r12,r10
  80b7dc:	99400117 	ldw	r5,4(r19)
  80b7e0:	a8800117 	ldw	r2,4(r21)
  80b7e4:	28806e26 	beq	r5,r2,80b9a0 <_fpadd_parts+0x2ac>
  80b7e8:	28006626 	beq	r5,zero,80b984 <_fpadd_parts+0x290>
  80b7ec:	7c45c83a 	sub	r2,r15,r17
  80b7f0:	7889803a 	cmpltu	r4,r15,r2
  80b7f4:	8487c83a 	sub	r3,r16,r18
  80b7f8:	1909c83a 	sub	r4,r3,r4
  80b7fc:	100d883a 	mov	r6,r2
  80b800:	200f883a 	mov	r7,r4
  80b804:	38007716 	blt	r7,zero,80b9e4 <_fpadd_parts+0x2f0>
  80b808:	a5c00215 	stw	r23,8(r20)
  80b80c:	a1c00415 	stw	r7,16(r20)
  80b810:	a0000115 	stw	zero,4(r20)
  80b814:	a1800315 	stw	r6,12(r20)
  80b818:	a2000317 	ldw	r8,12(r20)
  80b81c:	a2400417 	ldw	r9,16(r20)
  80b820:	00bfffc4 	movi	r2,-1
  80b824:	408b883a 	add	r5,r8,r2
  80b828:	2a09803a 	cmpltu	r4,r5,r8
  80b82c:	488d883a 	add	r6,r9,r2
  80b830:	01c40034 	movhi	r7,4096
  80b834:	39ffffc4 	addi	r7,r7,-1
  80b838:	218d883a 	add	r6,r4,r6
  80b83c:	39801736 	bltu	r7,r6,80b89c <_fpadd_parts+0x1a8>
  80b840:	31c06526 	beq	r6,r7,80b9d8 <_fpadd_parts+0x2e4>
  80b844:	a3000217 	ldw	r12,8(r20)
  80b848:	4209883a 	add	r4,r8,r8
  80b84c:	00bfffc4 	movi	r2,-1
  80b850:	220f803a 	cmpltu	r7,r4,r8
  80b854:	4a4b883a 	add	r5,r9,r9
  80b858:	394f883a 	add	r7,r7,r5
  80b85c:	2095883a 	add	r10,r4,r2
  80b860:	3897883a 	add	r11,r7,r2
  80b864:	510d803a 	cmpltu	r6,r10,r4
  80b868:	6099883a 	add	r12,r12,r2
  80b86c:	32d7883a 	add	r11,r6,r11
  80b870:	00840034 	movhi	r2,4096
  80b874:	10bfffc4 	addi	r2,r2,-1
  80b878:	2011883a 	mov	r8,r4
  80b87c:	3813883a 	mov	r9,r7
  80b880:	a1000315 	stw	r4,12(r20)
  80b884:	a1c00415 	stw	r7,16(r20)
  80b888:	a3000215 	stw	r12,8(r20)
  80b88c:	12c00336 	bltu	r2,r11,80b89c <_fpadd_parts+0x1a8>
  80b890:	58bfed1e 	bne	r11,r2,80b848 <_fpadd_parts+0x154>
  80b894:	00bfff84 	movi	r2,-2
  80b898:	12bfeb2e 	bgeu	r2,r10,80b848 <_fpadd_parts+0x154>
  80b89c:	a2800417 	ldw	r10,16(r20)
  80b8a0:	008000c4 	movi	r2,3
  80b8a4:	00c80034 	movhi	r3,8192
  80b8a8:	18ffffc4 	addi	r3,r3,-1
  80b8ac:	a2400317 	ldw	r9,12(r20)
  80b8b0:	a0800015 	stw	r2,0(r20)
  80b8b4:	1a802336 	bltu	r3,r10,80b944 <_fpadd_parts+0x250>
  80b8b8:	a027883a 	mov	r19,r20
  80b8bc:	9805883a 	mov	r2,r19
  80b8c0:	ddc00717 	ldw	r23,28(sp)
  80b8c4:	dd800617 	ldw	r22,24(sp)
  80b8c8:	dd400517 	ldw	r21,20(sp)
  80b8cc:	dd000417 	ldw	r20,16(sp)
  80b8d0:	dcc00317 	ldw	r19,12(sp)
  80b8d4:	dc800217 	ldw	r18,8(sp)
  80b8d8:	dc400117 	ldw	r17,4(sp)
  80b8dc:	dc000017 	ldw	r16,0(sp)
  80b8e0:	dec00804 	addi	sp,sp,32
  80b8e4:	f800283a 	ret
  80b8e8:	20fff41e 	bne	r4,r3,80b8bc <_fpadd_parts+0x1c8>
  80b8ec:	31000015 	stw	r4,0(r6)
  80b8f0:	98800117 	ldw	r2,4(r19)
  80b8f4:	30800115 	stw	r2,4(r6)
  80b8f8:	98c00217 	ldw	r3,8(r19)
  80b8fc:	30c00215 	stw	r3,8(r6)
  80b900:	98800317 	ldw	r2,12(r19)
  80b904:	30800315 	stw	r2,12(r6)
  80b908:	98c00417 	ldw	r3,16(r19)
  80b90c:	30c00415 	stw	r3,16(r6)
  80b910:	98800117 	ldw	r2,4(r19)
  80b914:	28c00117 	ldw	r3,4(r5)
  80b918:	3027883a 	mov	r19,r6
  80b91c:	10c4703a 	and	r2,r2,r3
  80b920:	30800115 	stw	r2,4(r6)
  80b924:	003fe506 	br	80b8bc <_fpadd_parts+0x1c8>
  80b928:	1dc02616 	blt	r3,r23,80b9c4 <_fpadd_parts+0x2d0>
  80b92c:	0023883a 	mov	r17,zero
  80b930:	182f883a 	mov	r23,r3
  80b934:	0025883a 	mov	r18,zero
  80b938:	003fa806 	br	80b7dc <_fpadd_parts+0xe8>
  80b93c:	a827883a 	mov	r19,r21
  80b940:	003fde06 	br	80b8bc <_fpadd_parts+0x1c8>
  80b944:	01800044 	movi	r6,1
  80b948:	500497fa 	slli	r2,r10,31
  80b94c:	4808d07a 	srli	r4,r9,1
  80b950:	518ad83a 	srl	r5,r10,r6
  80b954:	a2000217 	ldw	r8,8(r20)
  80b958:	1108b03a 	or	r4,r2,r4
  80b95c:	0007883a 	mov	r3,zero
  80b960:	4984703a 	and	r2,r9,r6
  80b964:	208cb03a 	or	r6,r4,r2
  80b968:	28ceb03a 	or	r7,r5,r3
  80b96c:	42000044 	addi	r8,r8,1
  80b970:	a027883a 	mov	r19,r20
  80b974:	a1c00415 	stw	r7,16(r20)
  80b978:	a2000215 	stw	r8,8(r20)
  80b97c:	a1800315 	stw	r6,12(r20)
  80b980:	003fce06 	br	80b8bc <_fpadd_parts+0x1c8>
  80b984:	8bc5c83a 	sub	r2,r17,r15
  80b988:	8889803a 	cmpltu	r4,r17,r2
  80b98c:	9407c83a 	sub	r3,r18,r16
  80b990:	1909c83a 	sub	r4,r3,r4
  80b994:	100d883a 	mov	r6,r2
  80b998:	200f883a 	mov	r7,r4
  80b99c:	003f9906 	br	80b804 <_fpadd_parts+0x110>
  80b9a0:	7c45883a 	add	r2,r15,r17
  80b9a4:	13c9803a 	cmpltu	r4,r2,r15
  80b9a8:	8487883a 	add	r3,r16,r18
  80b9ac:	20c9883a 	add	r4,r4,r3
  80b9b0:	a1400115 	stw	r5,4(r20)
  80b9b4:	a5c00215 	stw	r23,8(r20)
  80b9b8:	a0800315 	stw	r2,12(r20)
  80b9bc:	a1000415 	stw	r4,16(r20)
  80b9c0:	003fb606 	br	80b89c <_fpadd_parts+0x1a8>
  80b9c4:	001f883a 	mov	r15,zero
  80b9c8:	0021883a 	mov	r16,zero
  80b9cc:	003f8306 	br	80b7dc <_fpadd_parts+0xe8>
  80b9d0:	018dc83a 	sub	r6,zero,r6
  80b9d4:	003f6706 	br	80b774 <_fpadd_parts+0x80>
  80b9d8:	00bfff84 	movi	r2,-2
  80b9dc:	117faf36 	bltu	r2,r5,80b89c <_fpadd_parts+0x1a8>
  80b9e0:	003f9806 	br	80b844 <_fpadd_parts+0x150>
  80b9e4:	0005883a 	mov	r2,zero
  80b9e8:	1189c83a 	sub	r4,r2,r6
  80b9ec:	1105803a 	cmpltu	r2,r2,r4
  80b9f0:	01cbc83a 	sub	r5,zero,r7
  80b9f4:	2885c83a 	sub	r2,r5,r2
  80b9f8:	01800044 	movi	r6,1
  80b9fc:	a1800115 	stw	r6,4(r20)
  80ba00:	a5c00215 	stw	r23,8(r20)
  80ba04:	a1000315 	stw	r4,12(r20)
  80ba08:	a0800415 	stw	r2,16(r20)
  80ba0c:	003f8206 	br	80b818 <_fpadd_parts+0x124>
  80ba10:	203f7226 	beq	r4,zero,80b7dc <_fpadd_parts+0xe8>
  80ba14:	35bff804 	addi	r22,r6,-32
  80ba18:	b9af883a 	add	r23,r23,r6
  80ba1c:	b0003116 	blt	r22,zero,80bae4 <_fpadd_parts+0x3f0>
  80ba20:	959ad83a 	srl	r13,r18,r22
  80ba24:	001d883a 	mov	r14,zero
  80ba28:	000f883a 	mov	r7,zero
  80ba2c:	01000044 	movi	r4,1
  80ba30:	0011883a 	mov	r8,zero
  80ba34:	b0002516 	blt	r22,zero,80bacc <_fpadd_parts+0x3d8>
  80ba38:	2594983a 	sll	r10,r4,r22
  80ba3c:	0013883a 	mov	r9,zero
  80ba40:	00bfffc4 	movi	r2,-1
  80ba44:	4889883a 	add	r4,r9,r2
  80ba48:	508b883a 	add	r5,r10,r2
  80ba4c:	224d803a 	cmpltu	r6,r4,r9
  80ba50:	314b883a 	add	r5,r6,r5
  80ba54:	8904703a 	and	r2,r17,r4
  80ba58:	9146703a 	and	r3,r18,r5
  80ba5c:	10c4b03a 	or	r2,r2,r3
  80ba60:	10000226 	beq	r2,zero,80ba6c <_fpadd_parts+0x378>
  80ba64:	01c00044 	movi	r7,1
  80ba68:	0011883a 	mov	r8,zero
  80ba6c:	69e2b03a 	or	r17,r13,r7
  80ba70:	7224b03a 	or	r18,r14,r8
  80ba74:	003f5906 	br	80b7dc <_fpadd_parts+0xe8>
  80ba78:	8407883a 	add	r3,r16,r16
  80ba7c:	008007c4 	movi	r2,31
  80ba80:	1185c83a 	sub	r2,r2,r6
  80ba84:	1886983a 	sll	r3,r3,r2
  80ba88:	7996d83a 	srl	r11,r15,r6
  80ba8c:	8198d83a 	srl	r12,r16,r6
  80ba90:	1ad6b03a 	or	r11,r3,r11
  80ba94:	003f3e06 	br	80b790 <_fpadd_parts+0x9c>
  80ba98:	2006d07a 	srli	r3,r4,1
  80ba9c:	008007c4 	movi	r2,31
  80baa0:	1185c83a 	sub	r2,r2,r6
  80baa4:	1890d83a 	srl	r8,r3,r2
  80baa8:	218e983a 	sll	r7,r4,r6
  80baac:	003f3e06 	br	80b7a8 <_fpadd_parts+0xb4>
  80bab0:	113f821e 	bne	r2,r4,80b8bc <_fpadd_parts+0x1c8>
  80bab4:	28c00117 	ldw	r3,4(r5)
  80bab8:	98800117 	ldw	r2,4(r19)
  80babc:	10ff7f26 	beq	r2,r3,80b8bc <_fpadd_parts+0x1c8>
  80bac0:	04c020b4 	movhi	r19,130
  80bac4:	9cc6ab04 	addi	r19,r19,6828
  80bac8:	003f7c06 	br	80b8bc <_fpadd_parts+0x1c8>
  80bacc:	2006d07a 	srli	r3,r4,1
  80bad0:	008007c4 	movi	r2,31
  80bad4:	1185c83a 	sub	r2,r2,r6
  80bad8:	1894d83a 	srl	r10,r3,r2
  80badc:	2192983a 	sll	r9,r4,r6
  80bae0:	003fd706 	br	80ba40 <_fpadd_parts+0x34c>
  80bae4:	9487883a 	add	r3,r18,r18
  80bae8:	008007c4 	movi	r2,31
  80baec:	1185c83a 	sub	r2,r2,r6
  80baf0:	1886983a 	sll	r3,r3,r2
  80baf4:	899ad83a 	srl	r13,r17,r6
  80baf8:	919cd83a 	srl	r14,r18,r6
  80bafc:	1b5ab03a 	or	r13,r3,r13
  80bb00:	003fc906 	br	80ba28 <_fpadd_parts+0x334>

0080bb04 <__subdf3>:
  80bb04:	deffea04 	addi	sp,sp,-88
  80bb08:	dcc01415 	stw	r19,80(sp)
  80bb0c:	dcc00404 	addi	r19,sp,16
  80bb10:	2011883a 	mov	r8,r4
  80bb14:	2813883a 	mov	r9,r5
  80bb18:	dc401315 	stw	r17,76(sp)
  80bb1c:	d809883a 	mov	r4,sp
  80bb20:	980b883a 	mov	r5,r19
  80bb24:	dc400904 	addi	r17,sp,36
  80bb28:	dfc01515 	stw	ra,84(sp)
  80bb2c:	da400115 	stw	r9,4(sp)
  80bb30:	d9c00315 	stw	r7,12(sp)
  80bb34:	da000015 	stw	r8,0(sp)
  80bb38:	d9800215 	stw	r6,8(sp)
  80bb3c:	080cfd40 	call	80cfd4 <__unpack_d>
  80bb40:	d9000204 	addi	r4,sp,8
  80bb44:	880b883a 	mov	r5,r17
  80bb48:	080cfd40 	call	80cfd4 <__unpack_d>
  80bb4c:	d8800a17 	ldw	r2,40(sp)
  80bb50:	880b883a 	mov	r5,r17
  80bb54:	9809883a 	mov	r4,r19
  80bb58:	d9800e04 	addi	r6,sp,56
  80bb5c:	1080005c 	xori	r2,r2,1
  80bb60:	d8800a15 	stw	r2,40(sp)
  80bb64:	080b6f40 	call	80b6f4 <_fpadd_parts>
  80bb68:	1009883a 	mov	r4,r2
  80bb6c:	080ccc00 	call	80ccc0 <__pack_d>
  80bb70:	dfc01517 	ldw	ra,84(sp)
  80bb74:	dcc01417 	ldw	r19,80(sp)
  80bb78:	dc401317 	ldw	r17,76(sp)
  80bb7c:	dec01604 	addi	sp,sp,88
  80bb80:	f800283a 	ret

0080bb84 <__adddf3>:
  80bb84:	deffea04 	addi	sp,sp,-88
  80bb88:	dcc01415 	stw	r19,80(sp)
  80bb8c:	dcc00404 	addi	r19,sp,16
  80bb90:	2011883a 	mov	r8,r4
  80bb94:	2813883a 	mov	r9,r5
  80bb98:	dc401315 	stw	r17,76(sp)
  80bb9c:	d809883a 	mov	r4,sp
  80bba0:	980b883a 	mov	r5,r19
  80bba4:	dc400904 	addi	r17,sp,36
  80bba8:	dfc01515 	stw	ra,84(sp)
  80bbac:	da400115 	stw	r9,4(sp)
  80bbb0:	d9c00315 	stw	r7,12(sp)
  80bbb4:	da000015 	stw	r8,0(sp)
  80bbb8:	d9800215 	stw	r6,8(sp)
  80bbbc:	080cfd40 	call	80cfd4 <__unpack_d>
  80bbc0:	d9000204 	addi	r4,sp,8
  80bbc4:	880b883a 	mov	r5,r17
  80bbc8:	080cfd40 	call	80cfd4 <__unpack_d>
  80bbcc:	d9800e04 	addi	r6,sp,56
  80bbd0:	9809883a 	mov	r4,r19
  80bbd4:	880b883a 	mov	r5,r17
  80bbd8:	080b6f40 	call	80b6f4 <_fpadd_parts>
  80bbdc:	1009883a 	mov	r4,r2
  80bbe0:	080ccc00 	call	80ccc0 <__pack_d>
  80bbe4:	dfc01517 	ldw	ra,84(sp)
  80bbe8:	dcc01417 	ldw	r19,80(sp)
  80bbec:	dc401317 	ldw	r17,76(sp)
  80bbf0:	dec01604 	addi	sp,sp,88
  80bbf4:	f800283a 	ret

0080bbf8 <__muldf3>:
  80bbf8:	deffe004 	addi	sp,sp,-128
  80bbfc:	dc401815 	stw	r17,96(sp)
  80bc00:	dc400404 	addi	r17,sp,16
  80bc04:	2011883a 	mov	r8,r4
  80bc08:	2813883a 	mov	r9,r5
  80bc0c:	dc001715 	stw	r16,92(sp)
  80bc10:	d809883a 	mov	r4,sp
  80bc14:	880b883a 	mov	r5,r17
  80bc18:	dc000904 	addi	r16,sp,36
  80bc1c:	dfc01f15 	stw	ra,124(sp)
  80bc20:	da400115 	stw	r9,4(sp)
  80bc24:	d9c00315 	stw	r7,12(sp)
  80bc28:	da000015 	stw	r8,0(sp)
  80bc2c:	d9800215 	stw	r6,8(sp)
  80bc30:	ddc01e15 	stw	r23,120(sp)
  80bc34:	dd801d15 	stw	r22,116(sp)
  80bc38:	dd401c15 	stw	r21,112(sp)
  80bc3c:	dd001b15 	stw	r20,108(sp)
  80bc40:	dcc01a15 	stw	r19,104(sp)
  80bc44:	dc801915 	stw	r18,100(sp)
  80bc48:	080cfd40 	call	80cfd4 <__unpack_d>
  80bc4c:	d9000204 	addi	r4,sp,8
  80bc50:	800b883a 	mov	r5,r16
  80bc54:	080cfd40 	call	80cfd4 <__unpack_d>
  80bc58:	d9000417 	ldw	r4,16(sp)
  80bc5c:	00800044 	movi	r2,1
  80bc60:	1100102e 	bgeu	r2,r4,80bca4 <__muldf3+0xac>
  80bc64:	d8c00917 	ldw	r3,36(sp)
  80bc68:	10c0062e 	bgeu	r2,r3,80bc84 <__muldf3+0x8c>
  80bc6c:	00800104 	movi	r2,4
  80bc70:	20800a26 	beq	r4,r2,80bc9c <__muldf3+0xa4>
  80bc74:	1880cc26 	beq	r3,r2,80bfa8 <__muldf3+0x3b0>
  80bc78:	00800084 	movi	r2,2
  80bc7c:	20800926 	beq	r4,r2,80bca4 <__muldf3+0xac>
  80bc80:	1880191e 	bne	r3,r2,80bce8 <__muldf3+0xf0>
  80bc84:	d8c00a17 	ldw	r3,40(sp)
  80bc88:	d8800517 	ldw	r2,20(sp)
  80bc8c:	8009883a 	mov	r4,r16
  80bc90:	10c4c03a 	cmpne	r2,r2,r3
  80bc94:	d8800a15 	stw	r2,40(sp)
  80bc98:	00000706 	br	80bcb8 <__muldf3+0xc0>
  80bc9c:	00800084 	movi	r2,2
  80bca0:	1880c326 	beq	r3,r2,80bfb0 <__muldf3+0x3b8>
  80bca4:	d8800517 	ldw	r2,20(sp)
  80bca8:	d8c00a17 	ldw	r3,40(sp)
  80bcac:	8809883a 	mov	r4,r17
  80bcb0:	10c4c03a 	cmpne	r2,r2,r3
  80bcb4:	d8800515 	stw	r2,20(sp)
  80bcb8:	080ccc00 	call	80ccc0 <__pack_d>
  80bcbc:	dfc01f17 	ldw	ra,124(sp)
  80bcc0:	ddc01e17 	ldw	r23,120(sp)
  80bcc4:	dd801d17 	ldw	r22,116(sp)
  80bcc8:	dd401c17 	ldw	r21,112(sp)
  80bccc:	dd001b17 	ldw	r20,108(sp)
  80bcd0:	dcc01a17 	ldw	r19,104(sp)
  80bcd4:	dc801917 	ldw	r18,100(sp)
  80bcd8:	dc401817 	ldw	r17,96(sp)
  80bcdc:	dc001717 	ldw	r16,92(sp)
  80bce0:	dec02004 	addi	sp,sp,128
  80bce4:	f800283a 	ret
  80bce8:	dd800717 	ldw	r22,28(sp)
  80bcec:	dc800c17 	ldw	r18,48(sp)
  80bcf0:	002b883a 	mov	r21,zero
  80bcf4:	0023883a 	mov	r17,zero
  80bcf8:	a80b883a 	mov	r5,r21
  80bcfc:	b00d883a 	mov	r6,r22
  80bd00:	880f883a 	mov	r7,r17
  80bd04:	ddc00817 	ldw	r23,32(sp)
  80bd08:	dcc00d17 	ldw	r19,52(sp)
  80bd0c:	9009883a 	mov	r4,r18
  80bd10:	080adc00 	call	80adc0 <__muldi3>
  80bd14:	001b883a 	mov	r13,zero
  80bd18:	680f883a 	mov	r7,r13
  80bd1c:	b009883a 	mov	r4,r22
  80bd20:	000b883a 	mov	r5,zero
  80bd24:	980d883a 	mov	r6,r19
  80bd28:	b82d883a 	mov	r22,r23
  80bd2c:	002f883a 	mov	r23,zero
  80bd30:	db401615 	stw	r13,88(sp)
  80bd34:	d8801315 	stw	r2,76(sp)
  80bd38:	d8c01415 	stw	r3,80(sp)
  80bd3c:	dcc01515 	stw	r19,84(sp)
  80bd40:	080adc00 	call	80adc0 <__muldi3>
  80bd44:	b00d883a 	mov	r6,r22
  80bd48:	000b883a 	mov	r5,zero
  80bd4c:	9009883a 	mov	r4,r18
  80bd50:	b80f883a 	mov	r7,r23
  80bd54:	1021883a 	mov	r16,r2
  80bd58:	1823883a 	mov	r17,r3
  80bd5c:	080adc00 	call	80adc0 <__muldi3>
  80bd60:	8085883a 	add	r2,r16,r2
  80bd64:	140d803a 	cmpltu	r6,r2,r16
  80bd68:	88c7883a 	add	r3,r17,r3
  80bd6c:	30cd883a 	add	r6,r6,r3
  80bd70:	1029883a 	mov	r20,r2
  80bd74:	302b883a 	mov	r21,r6
  80bd78:	da801317 	ldw	r10,76(sp)
  80bd7c:	dac01417 	ldw	r11,80(sp)
  80bd80:	db001517 	ldw	r12,84(sp)
  80bd84:	db401617 	ldw	r13,88(sp)
  80bd88:	3440612e 	bgeu	r6,r17,80bf10 <__muldf3+0x318>
  80bd8c:	0009883a 	mov	r4,zero
  80bd90:	5105883a 	add	r2,r10,r4
  80bd94:	128d803a 	cmpltu	r6,r2,r10
  80bd98:	5d07883a 	add	r3,r11,r20
  80bd9c:	30cd883a 	add	r6,r6,r3
  80bda0:	0021883a 	mov	r16,zero
  80bda4:	04400044 	movi	r17,1
  80bda8:	1025883a 	mov	r18,r2
  80bdac:	3027883a 	mov	r19,r6
  80bdb0:	32c06236 	bltu	r6,r11,80bf3c <__muldf3+0x344>
  80bdb4:	59807a26 	beq	r11,r6,80bfa0 <__muldf3+0x3a8>
  80bdb8:	680b883a 	mov	r5,r13
  80bdbc:	b80f883a 	mov	r7,r23
  80bdc0:	6009883a 	mov	r4,r12
  80bdc4:	b00d883a 	mov	r6,r22
  80bdc8:	080adc00 	call	80adc0 <__muldi3>
  80bdcc:	1009883a 	mov	r4,r2
  80bdd0:	000f883a 	mov	r7,zero
  80bdd4:	1545883a 	add	r2,r2,r21
  80bdd8:	1111803a 	cmpltu	r8,r2,r4
  80bddc:	19c7883a 	add	r3,r3,r7
  80bde0:	40c7883a 	add	r3,r8,r3
  80bde4:	88cb883a 	add	r5,r17,r3
  80bde8:	d8c00617 	ldw	r3,24(sp)
  80bdec:	8089883a 	add	r4,r16,r2
  80bdf0:	d8800b17 	ldw	r2,44(sp)
  80bdf4:	18c00104 	addi	r3,r3,4
  80bdf8:	240d803a 	cmpltu	r6,r4,r16
  80bdfc:	10c7883a 	add	r3,r2,r3
  80be00:	2013883a 	mov	r9,r4
  80be04:	d8800a17 	ldw	r2,40(sp)
  80be08:	d9000517 	ldw	r4,20(sp)
  80be0c:	314d883a 	add	r6,r6,r5
  80be10:	3015883a 	mov	r10,r6
  80be14:	2088c03a 	cmpne	r4,r4,r2
  80be18:	00880034 	movhi	r2,8192
  80be1c:	10bfffc4 	addi	r2,r2,-1
  80be20:	d9000f15 	stw	r4,60(sp)
  80be24:	d8c01015 	stw	r3,64(sp)
  80be28:	1180162e 	bgeu	r2,r6,80be84 <__muldf3+0x28c>
  80be2c:	1811883a 	mov	r8,r3
  80be30:	101f883a 	mov	r15,r2
  80be34:	980497fa 	slli	r2,r19,31
  80be38:	9016d07a 	srli	r11,r18,1
  80be3c:	500697fa 	slli	r3,r10,31
  80be40:	480cd07a 	srli	r6,r9,1
  80be44:	500ed07a 	srli	r7,r10,1
  80be48:	12d6b03a 	or	r11,r2,r11
  80be4c:	00800044 	movi	r2,1
  80be50:	198cb03a 	or	r6,r3,r6
  80be54:	4888703a 	and	r4,r9,r2
  80be58:	9818d07a 	srli	r12,r19,1
  80be5c:	001b883a 	mov	r13,zero
  80be60:	03a00034 	movhi	r14,32768
  80be64:	3013883a 	mov	r9,r6
  80be68:	3815883a 	mov	r10,r7
  80be6c:	4091883a 	add	r8,r8,r2
  80be70:	20000226 	beq	r4,zero,80be7c <__muldf3+0x284>
  80be74:	5b64b03a 	or	r18,r11,r13
  80be78:	63a6b03a 	or	r19,r12,r14
  80be7c:	7abfed36 	bltu	r15,r10,80be34 <__muldf3+0x23c>
  80be80:	da001015 	stw	r8,64(sp)
  80be84:	00840034 	movhi	r2,4096
  80be88:	10bfffc4 	addi	r2,r2,-1
  80be8c:	12801436 	bltu	r2,r10,80bee0 <__muldf3+0x2e8>
  80be90:	da001017 	ldw	r8,64(sp)
  80be94:	101f883a 	mov	r15,r2
  80be98:	4a45883a 	add	r2,r9,r9
  80be9c:	124d803a 	cmpltu	r6,r2,r9
  80bea0:	5287883a 	add	r3,r10,r10
  80bea4:	9497883a 	add	r11,r18,r18
  80bea8:	5c8f803a 	cmpltu	r7,r11,r18
  80beac:	9cd9883a 	add	r12,r19,r19
  80beb0:	01000044 	movi	r4,1
  80beb4:	30cd883a 	add	r6,r6,r3
  80beb8:	3b0f883a 	add	r7,r7,r12
  80bebc:	423fffc4 	addi	r8,r8,-1
  80bec0:	1013883a 	mov	r9,r2
  80bec4:	3015883a 	mov	r10,r6
  80bec8:	111ab03a 	or	r13,r2,r4
  80becc:	98003016 	blt	r19,zero,80bf90 <__muldf3+0x398>
  80bed0:	5825883a 	mov	r18,r11
  80bed4:	3827883a 	mov	r19,r7
  80bed8:	7abfef2e 	bgeu	r15,r10,80be98 <__muldf3+0x2a0>
  80bedc:	da001015 	stw	r8,64(sp)
  80bee0:	00803fc4 	movi	r2,255
  80bee4:	488e703a 	and	r7,r9,r2
  80bee8:	00802004 	movi	r2,128
  80beec:	0007883a 	mov	r3,zero
  80bef0:	0011883a 	mov	r8,zero
  80bef4:	38801826 	beq	r7,r2,80bf58 <__muldf3+0x360>
  80bef8:	008000c4 	movi	r2,3
  80befc:	d9000e04 	addi	r4,sp,56
  80bf00:	da801215 	stw	r10,72(sp)
  80bf04:	d8800e15 	stw	r2,56(sp)
  80bf08:	da401115 	stw	r9,68(sp)
  80bf0c:	003f6a06 	br	80bcb8 <__muldf3+0xc0>
  80bf10:	89802126 	beq	r17,r6,80bf98 <__muldf3+0x3a0>
  80bf14:	0009883a 	mov	r4,zero
  80bf18:	5105883a 	add	r2,r10,r4
  80bf1c:	128d803a 	cmpltu	r6,r2,r10
  80bf20:	5d07883a 	add	r3,r11,r20
  80bf24:	30cd883a 	add	r6,r6,r3
  80bf28:	0021883a 	mov	r16,zero
  80bf2c:	0023883a 	mov	r17,zero
  80bf30:	1025883a 	mov	r18,r2
  80bf34:	3027883a 	mov	r19,r6
  80bf38:	32ff9e2e 	bgeu	r6,r11,80bdb4 <__muldf3+0x1bc>
  80bf3c:	00800044 	movi	r2,1
  80bf40:	8089883a 	add	r4,r16,r2
  80bf44:	240d803a 	cmpltu	r6,r4,r16
  80bf48:	344d883a 	add	r6,r6,r17
  80bf4c:	2021883a 	mov	r16,r4
  80bf50:	3023883a 	mov	r17,r6
  80bf54:	003f9806 	br	80bdb8 <__muldf3+0x1c0>
  80bf58:	403fe71e 	bne	r8,zero,80bef8 <__muldf3+0x300>
  80bf5c:	01004004 	movi	r4,256
  80bf60:	4904703a 	and	r2,r9,r4
  80bf64:	10c4b03a 	or	r2,r2,r3
  80bf68:	103fe31e 	bne	r2,zero,80bef8 <__muldf3+0x300>
  80bf6c:	94c4b03a 	or	r2,r18,r19
  80bf70:	103fe126 	beq	r2,zero,80bef8 <__muldf3+0x300>
  80bf74:	49c5883a 	add	r2,r9,r7
  80bf78:	1251803a 	cmpltu	r8,r2,r9
  80bf7c:	4291883a 	add	r8,r8,r10
  80bf80:	013fc004 	movi	r4,-256
  80bf84:	1112703a 	and	r9,r2,r4
  80bf88:	4015883a 	mov	r10,r8
  80bf8c:	003fda06 	br	80bef8 <__muldf3+0x300>
  80bf90:	6813883a 	mov	r9,r13
  80bf94:	003fce06 	br	80bed0 <__muldf3+0x2d8>
  80bf98:	143f7c36 	bltu	r2,r16,80bd8c <__muldf3+0x194>
  80bf9c:	003fdd06 	br	80bf14 <__muldf3+0x31c>
  80bfa0:	12bf852e 	bgeu	r2,r10,80bdb8 <__muldf3+0x1c0>
  80bfa4:	003fe506 	br	80bf3c <__muldf3+0x344>
  80bfa8:	00800084 	movi	r2,2
  80bfac:	20bf351e 	bne	r4,r2,80bc84 <__muldf3+0x8c>
  80bfb0:	010020b4 	movhi	r4,130
  80bfb4:	2106ab04 	addi	r4,r4,6828
  80bfb8:	003f3f06 	br	80bcb8 <__muldf3+0xc0>

0080bfbc <__divdf3>:
  80bfbc:	deffed04 	addi	sp,sp,-76
  80bfc0:	dcc01115 	stw	r19,68(sp)
  80bfc4:	dcc00404 	addi	r19,sp,16
  80bfc8:	2011883a 	mov	r8,r4
  80bfcc:	2813883a 	mov	r9,r5
  80bfd0:	dc000e15 	stw	r16,56(sp)
  80bfd4:	d809883a 	mov	r4,sp
  80bfd8:	980b883a 	mov	r5,r19
  80bfdc:	dc000904 	addi	r16,sp,36
  80bfe0:	dfc01215 	stw	ra,72(sp)
  80bfe4:	da400115 	stw	r9,4(sp)
  80bfe8:	d9c00315 	stw	r7,12(sp)
  80bfec:	da000015 	stw	r8,0(sp)
  80bff0:	d9800215 	stw	r6,8(sp)
  80bff4:	dc801015 	stw	r18,64(sp)
  80bff8:	dc400f15 	stw	r17,60(sp)
  80bffc:	080cfd40 	call	80cfd4 <__unpack_d>
  80c000:	d9000204 	addi	r4,sp,8
  80c004:	800b883a 	mov	r5,r16
  80c008:	080cfd40 	call	80cfd4 <__unpack_d>
  80c00c:	d9000417 	ldw	r4,16(sp)
  80c010:	00800044 	movi	r2,1
  80c014:	11000b2e 	bgeu	r2,r4,80c044 <__divdf3+0x88>
  80c018:	d9400917 	ldw	r5,36(sp)
  80c01c:	1140762e 	bgeu	r2,r5,80c1f8 <__divdf3+0x23c>
  80c020:	d8800517 	ldw	r2,20(sp)
  80c024:	d8c00a17 	ldw	r3,40(sp)
  80c028:	01800104 	movi	r6,4
  80c02c:	10c4f03a 	xor	r2,r2,r3
  80c030:	d8800515 	stw	r2,20(sp)
  80c034:	21800226 	beq	r4,r6,80c040 <__divdf3+0x84>
  80c038:	00800084 	movi	r2,2
  80c03c:	2080141e 	bne	r4,r2,80c090 <__divdf3+0xd4>
  80c040:	29000926 	beq	r5,r4,80c068 <__divdf3+0xac>
  80c044:	9809883a 	mov	r4,r19
  80c048:	080ccc00 	call	80ccc0 <__pack_d>
  80c04c:	dfc01217 	ldw	ra,72(sp)
  80c050:	dcc01117 	ldw	r19,68(sp)
  80c054:	dc801017 	ldw	r18,64(sp)
  80c058:	dc400f17 	ldw	r17,60(sp)
  80c05c:	dc000e17 	ldw	r16,56(sp)
  80c060:	dec01304 	addi	sp,sp,76
  80c064:	f800283a 	ret
  80c068:	010020b4 	movhi	r4,130
  80c06c:	2106ab04 	addi	r4,r4,6828
  80c070:	080ccc00 	call	80ccc0 <__pack_d>
  80c074:	dfc01217 	ldw	ra,72(sp)
  80c078:	dcc01117 	ldw	r19,68(sp)
  80c07c:	dc801017 	ldw	r18,64(sp)
  80c080:	dc400f17 	ldw	r17,60(sp)
  80c084:	dc000e17 	ldw	r16,56(sp)
  80c088:	dec01304 	addi	sp,sp,76
  80c08c:	f800283a 	ret
  80c090:	29805b26 	beq	r5,r6,80c200 <__divdf3+0x244>
  80c094:	28802d26 	beq	r5,r2,80c14c <__divdf3+0x190>
  80c098:	d8c00617 	ldw	r3,24(sp)
  80c09c:	d8800b17 	ldw	r2,44(sp)
  80c0a0:	d9c00817 	ldw	r7,32(sp)
  80c0a4:	dc400d17 	ldw	r17,52(sp)
  80c0a8:	188bc83a 	sub	r5,r3,r2
  80c0ac:	d9800717 	ldw	r6,28(sp)
  80c0b0:	dc000c17 	ldw	r16,48(sp)
  80c0b4:	d9400615 	stw	r5,24(sp)
  80c0b8:	3c403836 	bltu	r7,r17,80c19c <__divdf3+0x1e0>
  80c0bc:	89c03626 	beq	r17,r7,80c198 <__divdf3+0x1dc>
  80c0c0:	0015883a 	mov	r10,zero
  80c0c4:	001d883a 	mov	r14,zero
  80c0c8:	02c40034 	movhi	r11,4096
  80c0cc:	001f883a 	mov	r15,zero
  80c0d0:	003f883a 	mov	ra,zero
  80c0d4:	04800f44 	movi	r18,61
  80c0d8:	00000f06 	br	80c118 <__divdf3+0x15c>
  80c0dc:	601d883a 	mov	r14,r12
  80c0e0:	681f883a 	mov	r15,r13
  80c0e4:	400d883a 	mov	r6,r8
  80c0e8:	100f883a 	mov	r7,r2
  80c0ec:	3191883a 	add	r8,r6,r6
  80c0f0:	5808d07a 	srli	r4,r11,1
  80c0f4:	4185803a 	cmpltu	r2,r8,r6
  80c0f8:	39d3883a 	add	r9,r7,r7
  80c0fc:	28c6b03a 	or	r3,r5,r3
  80c100:	1245883a 	add	r2,r2,r9
  80c104:	1815883a 	mov	r10,r3
  80c108:	2017883a 	mov	r11,r4
  80c10c:	400d883a 	mov	r6,r8
  80c110:	100f883a 	mov	r7,r2
  80c114:	fc801726 	beq	ra,r18,80c174 <__divdf3+0x1b8>
  80c118:	580a97fa 	slli	r5,r11,31
  80c11c:	5006d07a 	srli	r3,r10,1
  80c120:	ffc00044 	addi	ra,ra,1
  80c124:	3c7ff136 	bltu	r7,r17,80c0ec <__divdf3+0x130>
  80c128:	3411c83a 	sub	r8,r6,r16
  80c12c:	3205803a 	cmpltu	r2,r6,r8
  80c130:	3c53c83a 	sub	r9,r7,r17
  80c134:	7298b03a 	or	r12,r14,r10
  80c138:	7adab03a 	or	r13,r15,r11
  80c13c:	4885c83a 	sub	r2,r9,r2
  80c140:	89ffe61e 	bne	r17,r7,80c0dc <__divdf3+0x120>
  80c144:	343fe936 	bltu	r6,r16,80c0ec <__divdf3+0x130>
  80c148:	003fe406 	br	80c0dc <__divdf3+0x120>
  80c14c:	9809883a 	mov	r4,r19
  80c150:	d9800415 	stw	r6,16(sp)
  80c154:	080ccc00 	call	80ccc0 <__pack_d>
  80c158:	dfc01217 	ldw	ra,72(sp)
  80c15c:	dcc01117 	ldw	r19,68(sp)
  80c160:	dc801017 	ldw	r18,64(sp)
  80c164:	dc400f17 	ldw	r17,60(sp)
  80c168:	dc000e17 	ldw	r16,56(sp)
  80c16c:	dec01304 	addi	sp,sp,76
  80c170:	f800283a 	ret
  80c174:	00803fc4 	movi	r2,255
  80c178:	7090703a 	and	r8,r14,r2
  80c17c:	00802004 	movi	r2,128
  80c180:	0007883a 	mov	r3,zero
  80c184:	0013883a 	mov	r9,zero
  80c188:	40800d26 	beq	r8,r2,80c1c0 <__divdf3+0x204>
  80c18c:	dbc00815 	stw	r15,32(sp)
  80c190:	db800715 	stw	r14,28(sp)
  80c194:	003fab06 	br	80c044 <__divdf3+0x88>
  80c198:	343fc92e 	bgeu	r6,r16,80c0c0 <__divdf3+0x104>
  80c19c:	3185883a 	add	r2,r6,r6
  80c1a0:	1189803a 	cmpltu	r4,r2,r6
  80c1a4:	39c7883a 	add	r3,r7,r7
  80c1a8:	20c9883a 	add	r4,r4,r3
  80c1ac:	297fffc4 	addi	r5,r5,-1
  80c1b0:	100d883a 	mov	r6,r2
  80c1b4:	200f883a 	mov	r7,r4
  80c1b8:	d9400615 	stw	r5,24(sp)
  80c1bc:	003fc006 	br	80c0c0 <__divdf3+0x104>
  80c1c0:	483ff21e 	bne	r9,zero,80c18c <__divdf3+0x1d0>
  80c1c4:	01004004 	movi	r4,256
  80c1c8:	7104703a 	and	r2,r14,r4
  80c1cc:	10c4b03a 	or	r2,r2,r3
  80c1d0:	103fee1e 	bne	r2,zero,80c18c <__divdf3+0x1d0>
  80c1d4:	31c4b03a 	or	r2,r6,r7
  80c1d8:	103fec26 	beq	r2,zero,80c18c <__divdf3+0x1d0>
  80c1dc:	7205883a 	add	r2,r14,r8
  80c1e0:	1391803a 	cmpltu	r8,r2,r14
  80c1e4:	43d1883a 	add	r8,r8,r15
  80c1e8:	013fc004 	movi	r4,-256
  80c1ec:	111c703a 	and	r14,r2,r4
  80c1f0:	401f883a 	mov	r15,r8
  80c1f4:	003fe506 	br	80c18c <__divdf3+0x1d0>
  80c1f8:	8009883a 	mov	r4,r16
  80c1fc:	003f9206 	br	80c048 <__divdf3+0x8c>
  80c200:	9809883a 	mov	r4,r19
  80c204:	d8000715 	stw	zero,28(sp)
  80c208:	d8000815 	stw	zero,32(sp)
  80c20c:	d8000615 	stw	zero,24(sp)
  80c210:	003f8d06 	br	80c048 <__divdf3+0x8c>

0080c214 <__eqdf2>:
  80c214:	deffef04 	addi	sp,sp,-68
  80c218:	dc400f15 	stw	r17,60(sp)
  80c21c:	dc400404 	addi	r17,sp,16
  80c220:	2005883a 	mov	r2,r4
  80c224:	2807883a 	mov	r3,r5
  80c228:	dc000e15 	stw	r16,56(sp)
  80c22c:	d809883a 	mov	r4,sp
  80c230:	880b883a 	mov	r5,r17
  80c234:	dc000904 	addi	r16,sp,36
  80c238:	d8c00115 	stw	r3,4(sp)
  80c23c:	d8800015 	stw	r2,0(sp)
  80c240:	d9800215 	stw	r6,8(sp)
  80c244:	dfc01015 	stw	ra,64(sp)
  80c248:	d9c00315 	stw	r7,12(sp)
  80c24c:	080cfd40 	call	80cfd4 <__unpack_d>
  80c250:	d9000204 	addi	r4,sp,8
  80c254:	800b883a 	mov	r5,r16
  80c258:	080cfd40 	call	80cfd4 <__unpack_d>
  80c25c:	d8800417 	ldw	r2,16(sp)
  80c260:	00c00044 	movi	r3,1
  80c264:	180d883a 	mov	r6,r3
  80c268:	1880062e 	bgeu	r3,r2,80c284 <__eqdf2+0x70>
  80c26c:	d8800917 	ldw	r2,36(sp)
  80c270:	8809883a 	mov	r4,r17
  80c274:	800b883a 	mov	r5,r16
  80c278:	1880022e 	bgeu	r3,r2,80c284 <__eqdf2+0x70>
  80c27c:	080d10c0 	call	80d10c <__fpcmp_parts_d>
  80c280:	100d883a 	mov	r6,r2
  80c284:	3005883a 	mov	r2,r6
  80c288:	dfc01017 	ldw	ra,64(sp)
  80c28c:	dc400f17 	ldw	r17,60(sp)
  80c290:	dc000e17 	ldw	r16,56(sp)
  80c294:	dec01104 	addi	sp,sp,68
  80c298:	f800283a 	ret

0080c29c <__nedf2>:
  80c29c:	deffef04 	addi	sp,sp,-68
  80c2a0:	dc400f15 	stw	r17,60(sp)
  80c2a4:	dc400404 	addi	r17,sp,16
  80c2a8:	2005883a 	mov	r2,r4
  80c2ac:	2807883a 	mov	r3,r5
  80c2b0:	dc000e15 	stw	r16,56(sp)
  80c2b4:	d809883a 	mov	r4,sp
  80c2b8:	880b883a 	mov	r5,r17
  80c2bc:	dc000904 	addi	r16,sp,36
  80c2c0:	d8c00115 	stw	r3,4(sp)
  80c2c4:	d8800015 	stw	r2,0(sp)
  80c2c8:	d9800215 	stw	r6,8(sp)
  80c2cc:	dfc01015 	stw	ra,64(sp)
  80c2d0:	d9c00315 	stw	r7,12(sp)
  80c2d4:	080cfd40 	call	80cfd4 <__unpack_d>
  80c2d8:	d9000204 	addi	r4,sp,8
  80c2dc:	800b883a 	mov	r5,r16
  80c2e0:	080cfd40 	call	80cfd4 <__unpack_d>
  80c2e4:	d8800417 	ldw	r2,16(sp)
  80c2e8:	00c00044 	movi	r3,1
  80c2ec:	180d883a 	mov	r6,r3
  80c2f0:	1880062e 	bgeu	r3,r2,80c30c <__nedf2+0x70>
  80c2f4:	d8800917 	ldw	r2,36(sp)
  80c2f8:	8809883a 	mov	r4,r17
  80c2fc:	800b883a 	mov	r5,r16
  80c300:	1880022e 	bgeu	r3,r2,80c30c <__nedf2+0x70>
  80c304:	080d10c0 	call	80d10c <__fpcmp_parts_d>
  80c308:	100d883a 	mov	r6,r2
  80c30c:	3005883a 	mov	r2,r6
  80c310:	dfc01017 	ldw	ra,64(sp)
  80c314:	dc400f17 	ldw	r17,60(sp)
  80c318:	dc000e17 	ldw	r16,56(sp)
  80c31c:	dec01104 	addi	sp,sp,68
  80c320:	f800283a 	ret

0080c324 <__gtdf2>:
  80c324:	deffef04 	addi	sp,sp,-68
  80c328:	dc400f15 	stw	r17,60(sp)
  80c32c:	dc400404 	addi	r17,sp,16
  80c330:	2005883a 	mov	r2,r4
  80c334:	2807883a 	mov	r3,r5
  80c338:	dc000e15 	stw	r16,56(sp)
  80c33c:	d809883a 	mov	r4,sp
  80c340:	880b883a 	mov	r5,r17
  80c344:	dc000904 	addi	r16,sp,36
  80c348:	d8c00115 	stw	r3,4(sp)
  80c34c:	d8800015 	stw	r2,0(sp)
  80c350:	d9800215 	stw	r6,8(sp)
  80c354:	dfc01015 	stw	ra,64(sp)
  80c358:	d9c00315 	stw	r7,12(sp)
  80c35c:	080cfd40 	call	80cfd4 <__unpack_d>
  80c360:	d9000204 	addi	r4,sp,8
  80c364:	800b883a 	mov	r5,r16
  80c368:	080cfd40 	call	80cfd4 <__unpack_d>
  80c36c:	d8800417 	ldw	r2,16(sp)
  80c370:	00c00044 	movi	r3,1
  80c374:	01bfffc4 	movi	r6,-1
  80c378:	1880062e 	bgeu	r3,r2,80c394 <__gtdf2+0x70>
  80c37c:	d8800917 	ldw	r2,36(sp)
  80c380:	8809883a 	mov	r4,r17
  80c384:	800b883a 	mov	r5,r16
  80c388:	1880022e 	bgeu	r3,r2,80c394 <__gtdf2+0x70>
  80c38c:	080d10c0 	call	80d10c <__fpcmp_parts_d>
  80c390:	100d883a 	mov	r6,r2
  80c394:	3005883a 	mov	r2,r6
  80c398:	dfc01017 	ldw	ra,64(sp)
  80c39c:	dc400f17 	ldw	r17,60(sp)
  80c3a0:	dc000e17 	ldw	r16,56(sp)
  80c3a4:	dec01104 	addi	sp,sp,68
  80c3a8:	f800283a 	ret

0080c3ac <__gedf2>:
  80c3ac:	deffef04 	addi	sp,sp,-68
  80c3b0:	dc400f15 	stw	r17,60(sp)
  80c3b4:	dc400404 	addi	r17,sp,16
  80c3b8:	2005883a 	mov	r2,r4
  80c3bc:	2807883a 	mov	r3,r5
  80c3c0:	dc000e15 	stw	r16,56(sp)
  80c3c4:	d809883a 	mov	r4,sp
  80c3c8:	880b883a 	mov	r5,r17
  80c3cc:	dc000904 	addi	r16,sp,36
  80c3d0:	d8c00115 	stw	r3,4(sp)
  80c3d4:	d8800015 	stw	r2,0(sp)
  80c3d8:	d9800215 	stw	r6,8(sp)
  80c3dc:	dfc01015 	stw	ra,64(sp)
  80c3e0:	d9c00315 	stw	r7,12(sp)
  80c3e4:	080cfd40 	call	80cfd4 <__unpack_d>
  80c3e8:	d9000204 	addi	r4,sp,8
  80c3ec:	800b883a 	mov	r5,r16
  80c3f0:	080cfd40 	call	80cfd4 <__unpack_d>
  80c3f4:	d8800417 	ldw	r2,16(sp)
  80c3f8:	00c00044 	movi	r3,1
  80c3fc:	01bfffc4 	movi	r6,-1
  80c400:	1880062e 	bgeu	r3,r2,80c41c <__gedf2+0x70>
  80c404:	d8800917 	ldw	r2,36(sp)
  80c408:	8809883a 	mov	r4,r17
  80c40c:	800b883a 	mov	r5,r16
  80c410:	1880022e 	bgeu	r3,r2,80c41c <__gedf2+0x70>
  80c414:	080d10c0 	call	80d10c <__fpcmp_parts_d>
  80c418:	100d883a 	mov	r6,r2
  80c41c:	3005883a 	mov	r2,r6
  80c420:	dfc01017 	ldw	ra,64(sp)
  80c424:	dc400f17 	ldw	r17,60(sp)
  80c428:	dc000e17 	ldw	r16,56(sp)
  80c42c:	dec01104 	addi	sp,sp,68
  80c430:	f800283a 	ret

0080c434 <__ltdf2>:
  80c434:	deffef04 	addi	sp,sp,-68
  80c438:	dc400f15 	stw	r17,60(sp)
  80c43c:	dc400404 	addi	r17,sp,16
  80c440:	2005883a 	mov	r2,r4
  80c444:	2807883a 	mov	r3,r5
  80c448:	dc000e15 	stw	r16,56(sp)
  80c44c:	d809883a 	mov	r4,sp
  80c450:	880b883a 	mov	r5,r17
  80c454:	dc000904 	addi	r16,sp,36
  80c458:	d8c00115 	stw	r3,4(sp)
  80c45c:	d8800015 	stw	r2,0(sp)
  80c460:	d9800215 	stw	r6,8(sp)
  80c464:	dfc01015 	stw	ra,64(sp)
  80c468:	d9c00315 	stw	r7,12(sp)
  80c46c:	080cfd40 	call	80cfd4 <__unpack_d>
  80c470:	d9000204 	addi	r4,sp,8
  80c474:	800b883a 	mov	r5,r16
  80c478:	080cfd40 	call	80cfd4 <__unpack_d>
  80c47c:	d8800417 	ldw	r2,16(sp)
  80c480:	00c00044 	movi	r3,1
  80c484:	180d883a 	mov	r6,r3
  80c488:	1880062e 	bgeu	r3,r2,80c4a4 <__ltdf2+0x70>
  80c48c:	d8800917 	ldw	r2,36(sp)
  80c490:	8809883a 	mov	r4,r17
  80c494:	800b883a 	mov	r5,r16
  80c498:	1880022e 	bgeu	r3,r2,80c4a4 <__ltdf2+0x70>
  80c49c:	080d10c0 	call	80d10c <__fpcmp_parts_d>
  80c4a0:	100d883a 	mov	r6,r2
  80c4a4:	3005883a 	mov	r2,r6
  80c4a8:	dfc01017 	ldw	ra,64(sp)
  80c4ac:	dc400f17 	ldw	r17,60(sp)
  80c4b0:	dc000e17 	ldw	r16,56(sp)
  80c4b4:	dec01104 	addi	sp,sp,68
  80c4b8:	f800283a 	ret

0080c4bc <__ledf2>:
  80c4bc:	deffef04 	addi	sp,sp,-68
  80c4c0:	dc400f15 	stw	r17,60(sp)
  80c4c4:	dc400404 	addi	r17,sp,16
  80c4c8:	2005883a 	mov	r2,r4
  80c4cc:	2807883a 	mov	r3,r5
  80c4d0:	dc000e15 	stw	r16,56(sp)
  80c4d4:	d809883a 	mov	r4,sp
  80c4d8:	880b883a 	mov	r5,r17
  80c4dc:	dc000904 	addi	r16,sp,36
  80c4e0:	d8c00115 	stw	r3,4(sp)
  80c4e4:	d8800015 	stw	r2,0(sp)
  80c4e8:	d9800215 	stw	r6,8(sp)
  80c4ec:	dfc01015 	stw	ra,64(sp)
  80c4f0:	d9c00315 	stw	r7,12(sp)
  80c4f4:	080cfd40 	call	80cfd4 <__unpack_d>
  80c4f8:	d9000204 	addi	r4,sp,8
  80c4fc:	800b883a 	mov	r5,r16
  80c500:	080cfd40 	call	80cfd4 <__unpack_d>
  80c504:	d8800417 	ldw	r2,16(sp)
  80c508:	00c00044 	movi	r3,1
  80c50c:	180d883a 	mov	r6,r3
  80c510:	1880062e 	bgeu	r3,r2,80c52c <__ledf2+0x70>
  80c514:	d8800917 	ldw	r2,36(sp)
  80c518:	8809883a 	mov	r4,r17
  80c51c:	800b883a 	mov	r5,r16
  80c520:	1880022e 	bgeu	r3,r2,80c52c <__ledf2+0x70>
  80c524:	080d10c0 	call	80d10c <__fpcmp_parts_d>
  80c528:	100d883a 	mov	r6,r2
  80c52c:	3005883a 	mov	r2,r6
  80c530:	dfc01017 	ldw	ra,64(sp)
  80c534:	dc400f17 	ldw	r17,60(sp)
  80c538:	dc000e17 	ldw	r16,56(sp)
  80c53c:	dec01104 	addi	sp,sp,68
  80c540:	f800283a 	ret

0080c544 <__floatsidf>:
  80c544:	2006d7fa 	srli	r3,r4,31
  80c548:	defff604 	addi	sp,sp,-40
  80c54c:	008000c4 	movi	r2,3
  80c550:	dfc00915 	stw	ra,36(sp)
  80c554:	dcc00815 	stw	r19,32(sp)
  80c558:	dc800715 	stw	r18,28(sp)
  80c55c:	dc400615 	stw	r17,24(sp)
  80c560:	dc000515 	stw	r16,20(sp)
  80c564:	d8800015 	stw	r2,0(sp)
  80c568:	d8c00115 	stw	r3,4(sp)
  80c56c:	20000f1e 	bne	r4,zero,80c5ac <__floatsidf+0x68>
  80c570:	00800084 	movi	r2,2
  80c574:	d8800015 	stw	r2,0(sp)
  80c578:	d809883a 	mov	r4,sp
  80c57c:	080ccc00 	call	80ccc0 <__pack_d>
  80c580:	1009883a 	mov	r4,r2
  80c584:	180b883a 	mov	r5,r3
  80c588:	2005883a 	mov	r2,r4
  80c58c:	2807883a 	mov	r3,r5
  80c590:	dfc00917 	ldw	ra,36(sp)
  80c594:	dcc00817 	ldw	r19,32(sp)
  80c598:	dc800717 	ldw	r18,28(sp)
  80c59c:	dc400617 	ldw	r17,24(sp)
  80c5a0:	dc000517 	ldw	r16,20(sp)
  80c5a4:	dec00a04 	addi	sp,sp,40
  80c5a8:	f800283a 	ret
  80c5ac:	00800f04 	movi	r2,60
  80c5b0:	1807003a 	cmpeq	r3,r3,zero
  80c5b4:	d8800215 	stw	r2,8(sp)
  80c5b8:	18001126 	beq	r3,zero,80c600 <__floatsidf+0xbc>
  80c5bc:	0027883a 	mov	r19,zero
  80c5c0:	2025883a 	mov	r18,r4
  80c5c4:	d9000315 	stw	r4,12(sp)
  80c5c8:	dcc00415 	stw	r19,16(sp)
  80c5cc:	080c9440 	call	80c944 <__clzsi2>
  80c5d0:	11000744 	addi	r4,r2,29
  80c5d4:	013fe80e 	bge	zero,r4,80c578 <__floatsidf+0x34>
  80c5d8:	10bfff44 	addi	r2,r2,-3
  80c5dc:	10000c16 	blt	r2,zero,80c610 <__floatsidf+0xcc>
  80c5e0:	90a2983a 	sll	r17,r18,r2
  80c5e4:	0021883a 	mov	r16,zero
  80c5e8:	d8800217 	ldw	r2,8(sp)
  80c5ec:	dc400415 	stw	r17,16(sp)
  80c5f0:	dc000315 	stw	r16,12(sp)
  80c5f4:	1105c83a 	sub	r2,r2,r4
  80c5f8:	d8800215 	stw	r2,8(sp)
  80c5fc:	003fde06 	br	80c578 <__floatsidf+0x34>
  80c600:	00a00034 	movhi	r2,32768
  80c604:	20800a26 	beq	r4,r2,80c630 <__floatsidf+0xec>
  80c608:	0109c83a 	sub	r4,zero,r4
  80c60c:	003feb06 	br	80c5bc <__floatsidf+0x78>
  80c610:	9006d07a 	srli	r3,r18,1
  80c614:	008007c4 	movi	r2,31
  80c618:	1105c83a 	sub	r2,r2,r4
  80c61c:	1886d83a 	srl	r3,r3,r2
  80c620:	9922983a 	sll	r17,r19,r4
  80c624:	9120983a 	sll	r16,r18,r4
  80c628:	1c62b03a 	or	r17,r3,r17
  80c62c:	003fee06 	br	80c5e8 <__floatsidf+0xa4>
  80c630:	0009883a 	mov	r4,zero
  80c634:	01707834 	movhi	r5,49632
  80c638:	003fd306 	br	80c588 <__floatsidf+0x44>

0080c63c <__fixdfsi>:
  80c63c:	defff804 	addi	sp,sp,-32
  80c640:	2005883a 	mov	r2,r4
  80c644:	2807883a 	mov	r3,r5
  80c648:	d809883a 	mov	r4,sp
  80c64c:	d9400204 	addi	r5,sp,8
  80c650:	d8c00115 	stw	r3,4(sp)
  80c654:	d8800015 	stw	r2,0(sp)
  80c658:	dfc00715 	stw	ra,28(sp)
  80c65c:	080cfd40 	call	80cfd4 <__unpack_d>
  80c660:	d8c00217 	ldw	r3,8(sp)
  80c664:	00800084 	movi	r2,2
  80c668:	1880051e 	bne	r3,r2,80c680 <__fixdfsi+0x44>
  80c66c:	0007883a 	mov	r3,zero
  80c670:	1805883a 	mov	r2,r3
  80c674:	dfc00717 	ldw	ra,28(sp)
  80c678:	dec00804 	addi	sp,sp,32
  80c67c:	f800283a 	ret
  80c680:	00800044 	movi	r2,1
  80c684:	10fff92e 	bgeu	r2,r3,80c66c <__fixdfsi+0x30>
  80c688:	00800104 	movi	r2,4
  80c68c:	18800426 	beq	r3,r2,80c6a0 <__fixdfsi+0x64>
  80c690:	d8c00417 	ldw	r3,16(sp)
  80c694:	183ff516 	blt	r3,zero,80c66c <__fixdfsi+0x30>
  80c698:	00800784 	movi	r2,30
  80c69c:	10c0080e 	bge	r2,r3,80c6c0 <__fixdfsi+0x84>
  80c6a0:	d8800317 	ldw	r2,12(sp)
  80c6a4:	1000121e 	bne	r2,zero,80c6f0 <__fixdfsi+0xb4>
  80c6a8:	00e00034 	movhi	r3,32768
  80c6ac:	18ffffc4 	addi	r3,r3,-1
  80c6b0:	1805883a 	mov	r2,r3
  80c6b4:	dfc00717 	ldw	ra,28(sp)
  80c6b8:	dec00804 	addi	sp,sp,32
  80c6bc:	f800283a 	ret
  80c6c0:	00800f04 	movi	r2,60
  80c6c4:	10d1c83a 	sub	r8,r2,r3
  80c6c8:	40bff804 	addi	r2,r8,-32
  80c6cc:	d9800517 	ldw	r6,20(sp)
  80c6d0:	d9c00617 	ldw	r7,24(sp)
  80c6d4:	10000816 	blt	r2,zero,80c6f8 <__fixdfsi+0xbc>
  80c6d8:	3888d83a 	srl	r4,r7,r2
  80c6dc:	d8800317 	ldw	r2,12(sp)
  80c6e0:	2007883a 	mov	r3,r4
  80c6e4:	103fe226 	beq	r2,zero,80c670 <__fixdfsi+0x34>
  80c6e8:	0107c83a 	sub	r3,zero,r4
  80c6ec:	003fe006 	br	80c670 <__fixdfsi+0x34>
  80c6f0:	00e00034 	movhi	r3,32768
  80c6f4:	003fde06 	br	80c670 <__fixdfsi+0x34>
  80c6f8:	39c7883a 	add	r3,r7,r7
  80c6fc:	008007c4 	movi	r2,31
  80c700:	1205c83a 	sub	r2,r2,r8
  80c704:	1886983a 	sll	r3,r3,r2
  80c708:	3208d83a 	srl	r4,r6,r8
  80c70c:	1908b03a 	or	r4,r3,r4
  80c710:	003ff206 	br	80c6dc <__fixdfsi+0xa0>

0080c714 <__make_dp>:
  80c714:	defff904 	addi	sp,sp,-28
  80c718:	d8c00717 	ldw	r3,28(sp)
  80c71c:	d9000015 	stw	r4,0(sp)
  80c720:	d809883a 	mov	r4,sp
  80c724:	dfc00515 	stw	ra,20(sp)
  80c728:	d9c00615 	stw	r7,24(sp)
  80c72c:	d9400115 	stw	r5,4(sp)
  80c730:	d9800215 	stw	r6,8(sp)
  80c734:	d8c00415 	stw	r3,16(sp)
  80c738:	d9c00315 	stw	r7,12(sp)
  80c73c:	080ccc00 	call	80ccc0 <__pack_d>
  80c740:	dfc00517 	ldw	ra,20(sp)
  80c744:	dec00704 	addi	sp,sp,28
  80c748:	f800283a 	ret

0080c74c <__truncdfsf2>:
  80c74c:	defff804 	addi	sp,sp,-32
  80c750:	2005883a 	mov	r2,r4
  80c754:	2807883a 	mov	r3,r5
  80c758:	d809883a 	mov	r4,sp
  80c75c:	d9400204 	addi	r5,sp,8
  80c760:	d8c00115 	stw	r3,4(sp)
  80c764:	d8800015 	stw	r2,0(sp)
  80c768:	dfc00715 	stw	ra,28(sp)
  80c76c:	080cfd40 	call	80cfd4 <__unpack_d>
  80c770:	d9c00517 	ldw	r7,20(sp)
  80c774:	da000617 	ldw	r8,24(sp)
  80c778:	02d00034 	movhi	r11,16384
  80c77c:	5affffc4 	addi	r11,r11,-1
  80c780:	3812d7ba 	srli	r9,r7,30
  80c784:	401a90ba 	slli	r13,r8,2
  80c788:	3ac4703a 	and	r2,r7,r11
  80c78c:	0007883a 	mov	r3,zero
  80c790:	6a52b03a 	or	r9,r13,r9
  80c794:	10c4b03a 	or	r2,r2,r3
  80c798:	d9000217 	ldw	r4,8(sp)
  80c79c:	d9400317 	ldw	r5,12(sp)
  80c7a0:	d9800417 	ldw	r6,16(sp)
  80c7a4:	480f883a 	mov	r7,r9
  80c7a8:	10000126 	beq	r2,zero,80c7b0 <__truncdfsf2+0x64>
  80c7ac:	49c00054 	ori	r7,r9,1
  80c7b0:	080cc940 	call	80cc94 <__make_fp>
  80c7b4:	dfc00717 	ldw	ra,28(sp)
  80c7b8:	dec00804 	addi	sp,sp,32
  80c7bc:	f800283a 	ret

0080c7c0 <udivmodsi4>:
  80c7c0:	29001b2e 	bgeu	r5,r4,80c830 <udivmodsi4+0x70>
  80c7c4:	28001a16 	blt	r5,zero,80c830 <udivmodsi4+0x70>
  80c7c8:	00800044 	movi	r2,1
  80c7cc:	0007883a 	mov	r3,zero
  80c7d0:	01c007c4 	movi	r7,31
  80c7d4:	00000306 	br	80c7e4 <udivmodsi4+0x24>
  80c7d8:	19c01326 	beq	r3,r7,80c828 <udivmodsi4+0x68>
  80c7dc:	18c00044 	addi	r3,r3,1
  80c7e0:	28000416 	blt	r5,zero,80c7f4 <udivmodsi4+0x34>
  80c7e4:	294b883a 	add	r5,r5,r5
  80c7e8:	1085883a 	add	r2,r2,r2
  80c7ec:	293ffa36 	bltu	r5,r4,80c7d8 <udivmodsi4+0x18>
  80c7f0:	10000d26 	beq	r2,zero,80c828 <udivmodsi4+0x68>
  80c7f4:	0007883a 	mov	r3,zero
  80c7f8:	21400236 	bltu	r4,r5,80c804 <udivmodsi4+0x44>
  80c7fc:	2149c83a 	sub	r4,r4,r5
  80c800:	1886b03a 	or	r3,r3,r2
  80c804:	1004d07a 	srli	r2,r2,1
  80c808:	280ad07a 	srli	r5,r5,1
  80c80c:	103ffa1e 	bne	r2,zero,80c7f8 <udivmodsi4+0x38>
  80c810:	30000226 	beq	r6,zero,80c81c <udivmodsi4+0x5c>
  80c814:	2005883a 	mov	r2,r4
  80c818:	f800283a 	ret
  80c81c:	1809883a 	mov	r4,r3
  80c820:	2005883a 	mov	r2,r4
  80c824:	f800283a 	ret
  80c828:	0007883a 	mov	r3,zero
  80c82c:	003ff806 	br	80c810 <udivmodsi4+0x50>
  80c830:	00800044 	movi	r2,1
  80c834:	0007883a 	mov	r3,zero
  80c838:	003fef06 	br	80c7f8 <udivmodsi4+0x38>

0080c83c <__divsi3>:
  80c83c:	defffe04 	addi	sp,sp,-8
  80c840:	dc000015 	stw	r16,0(sp)
  80c844:	dfc00115 	stw	ra,4(sp)
  80c848:	0021883a 	mov	r16,zero
  80c84c:	20000c16 	blt	r4,zero,80c880 <__divsi3+0x44>
  80c850:	000d883a 	mov	r6,zero
  80c854:	28000e16 	blt	r5,zero,80c890 <__divsi3+0x54>
  80c858:	080c7c00 	call	80c7c0 <udivmodsi4>
  80c85c:	1007883a 	mov	r3,r2
  80c860:	8005003a 	cmpeq	r2,r16,zero
  80c864:	1000011e 	bne	r2,zero,80c86c <__divsi3+0x30>
  80c868:	00c7c83a 	sub	r3,zero,r3
  80c86c:	1805883a 	mov	r2,r3
  80c870:	dfc00117 	ldw	ra,4(sp)
  80c874:	dc000017 	ldw	r16,0(sp)
  80c878:	dec00204 	addi	sp,sp,8
  80c87c:	f800283a 	ret
  80c880:	0109c83a 	sub	r4,zero,r4
  80c884:	04000044 	movi	r16,1
  80c888:	000d883a 	mov	r6,zero
  80c88c:	283ff20e 	bge	r5,zero,80c858 <__divsi3+0x1c>
  80c890:	014bc83a 	sub	r5,zero,r5
  80c894:	8021003a 	cmpeq	r16,r16,zero
  80c898:	003fef06 	br	80c858 <__divsi3+0x1c>

0080c89c <__modsi3>:
  80c89c:	deffff04 	addi	sp,sp,-4
  80c8a0:	dfc00015 	stw	ra,0(sp)
  80c8a4:	01800044 	movi	r6,1
  80c8a8:	2807883a 	mov	r3,r5
  80c8ac:	20000416 	blt	r4,zero,80c8c0 <__modsi3+0x24>
  80c8b0:	28000c16 	blt	r5,zero,80c8e4 <__modsi3+0x48>
  80c8b4:	dfc00017 	ldw	ra,0(sp)
  80c8b8:	dec00104 	addi	sp,sp,4
  80c8bc:	080c7c01 	jmpi	80c7c0 <udivmodsi4>
  80c8c0:	0109c83a 	sub	r4,zero,r4
  80c8c4:	28000b16 	blt	r5,zero,80c8f4 <__modsi3+0x58>
  80c8c8:	180b883a 	mov	r5,r3
  80c8cc:	01800044 	movi	r6,1
  80c8d0:	080c7c00 	call	80c7c0 <udivmodsi4>
  80c8d4:	0085c83a 	sub	r2,zero,r2
  80c8d8:	dfc00017 	ldw	ra,0(sp)
  80c8dc:	dec00104 	addi	sp,sp,4
  80c8e0:	f800283a 	ret
  80c8e4:	014bc83a 	sub	r5,zero,r5
  80c8e8:	dfc00017 	ldw	ra,0(sp)
  80c8ec:	dec00104 	addi	sp,sp,4
  80c8f0:	080c7c01 	jmpi	80c7c0 <udivmodsi4>
  80c8f4:	0147c83a 	sub	r3,zero,r5
  80c8f8:	003ff306 	br	80c8c8 <__modsi3+0x2c>

0080c8fc <__udivsi3>:
  80c8fc:	000d883a 	mov	r6,zero
  80c900:	080c7c01 	jmpi	80c7c0 <udivmodsi4>

0080c904 <__umodsi3>:
  80c904:	01800044 	movi	r6,1
  80c908:	080c7c01 	jmpi	80c7c0 <udivmodsi4>

0080c90c <__mulsi3>:
  80c90c:	20000a26 	beq	r4,zero,80c938 <__mulsi3+0x2c>
  80c910:	0007883a 	mov	r3,zero
  80c914:	2080004c 	andi	r2,r4,1
  80c918:	1005003a 	cmpeq	r2,r2,zero
  80c91c:	2008d07a 	srli	r4,r4,1
  80c920:	1000011e 	bne	r2,zero,80c928 <__mulsi3+0x1c>
  80c924:	1947883a 	add	r3,r3,r5
  80c928:	294b883a 	add	r5,r5,r5
  80c92c:	203ff91e 	bne	r4,zero,80c914 <__mulsi3+0x8>
  80c930:	1805883a 	mov	r2,r3
  80c934:	f800283a 	ret
  80c938:	0007883a 	mov	r3,zero
  80c93c:	1805883a 	mov	r2,r3
  80c940:	f800283a 	ret

0080c944 <__clzsi2>:
  80c944:	00bfffd4 	movui	r2,65535
  80c948:	11000e36 	bltu	r2,r4,80c984 <__clzsi2+0x40>
  80c94c:	00803fc4 	movi	r2,255
  80c950:	01400204 	movi	r5,8
  80c954:	0007883a 	mov	r3,zero
  80c958:	11001036 	bltu	r2,r4,80c99c <__clzsi2+0x58>
  80c95c:	000b883a 	mov	r5,zero
  80c960:	20c6d83a 	srl	r3,r4,r3
  80c964:	008020b4 	movhi	r2,130
  80c968:	1086b004 	addi	r2,r2,6848
  80c96c:	1887883a 	add	r3,r3,r2
  80c970:	18800003 	ldbu	r2,0(r3)
  80c974:	00c00804 	movi	r3,32
  80c978:	2885883a 	add	r2,r5,r2
  80c97c:	1885c83a 	sub	r2,r3,r2
  80c980:	f800283a 	ret
  80c984:	01400404 	movi	r5,16
  80c988:	00804034 	movhi	r2,256
  80c98c:	10bfffc4 	addi	r2,r2,-1
  80c990:	2807883a 	mov	r3,r5
  80c994:	113ff22e 	bgeu	r2,r4,80c960 <__clzsi2+0x1c>
  80c998:	01400604 	movi	r5,24
  80c99c:	2807883a 	mov	r3,r5
  80c9a0:	20c6d83a 	srl	r3,r4,r3
  80c9a4:	008020b4 	movhi	r2,130
  80c9a8:	1086b004 	addi	r2,r2,6848
  80c9ac:	1887883a 	add	r3,r3,r2
  80c9b0:	18800003 	ldbu	r2,0(r3)
  80c9b4:	00c00804 	movi	r3,32
  80c9b8:	2885883a 	add	r2,r5,r2
  80c9bc:	1885c83a 	sub	r2,r3,r2
  80c9c0:	f800283a 	ret

0080c9c4 <__pack_f>:
  80c9c4:	20c00017 	ldw	r3,0(r4)
  80c9c8:	01c00044 	movi	r7,1
  80c9cc:	21800317 	ldw	r6,12(r4)
  80c9d0:	21400117 	ldw	r5,4(r4)
  80c9d4:	38c02d2e 	bgeu	r7,r3,80ca8c <__pack_f+0xc8>
  80c9d8:	00800104 	movi	r2,4
  80c9dc:	18802826 	beq	r3,r2,80ca80 <__pack_f+0xbc>
  80c9e0:	00800084 	movi	r2,2
  80c9e4:	18800126 	beq	r3,r2,80c9ec <__pack_f+0x28>
  80c9e8:	3000101e 	bne	r6,zero,80ca2c <__pack_f+0x68>
  80c9ec:	000d883a 	mov	r6,zero
  80c9f0:	0007883a 	mov	r3,zero
  80c9f4:	19003fcc 	andi	r4,r3,255
  80c9f8:	200895fa 	slli	r4,r4,23
  80c9fc:	00c02034 	movhi	r3,128
  80ca00:	18ffffc4 	addi	r3,r3,-1
  80ca04:	30c6703a 	and	r3,r6,r3
  80ca08:	10a0002c 	andhi	r2,r2,32768
  80ca0c:	10c4b03a 	or	r2,r2,r3
  80ca10:	280a97fa 	slli	r5,r5,31
  80ca14:	1104b03a 	or	r2,r2,r4
  80ca18:	00e00034 	movhi	r3,32768
  80ca1c:	18ffffc4 	addi	r3,r3,-1
  80ca20:	10c4703a 	and	r2,r2,r3
  80ca24:	1144b03a 	or	r2,r2,r5
  80ca28:	f800283a 	ret
  80ca2c:	21000217 	ldw	r4,8(r4)
  80ca30:	00bfe084 	movi	r2,-126
  80ca34:	20801b16 	blt	r4,r2,80caa4 <__pack_f+0xe0>
  80ca38:	00801fc4 	movi	r2,127
  80ca3c:	11001016 	blt	r2,r4,80ca80 <__pack_f+0xbc>
  80ca40:	308e703a 	and	r7,r6,r2
  80ca44:	2087883a 	add	r3,r4,r2
  80ca48:	00801004 	movi	r2,64
  80ca4c:	38800526 	beq	r7,r2,80ca64 <__pack_f+0xa0>
  80ca50:	31800fc4 	addi	r6,r6,63
  80ca54:	30000716 	blt	r6,zero,80ca74 <__pack_f+0xb0>
  80ca58:	300490ba 	slli	r2,r6,2
  80ca5c:	100cd27a 	srli	r6,r2,9
  80ca60:	003fe406 	br	80c9f4 <__pack_f+0x30>
  80ca64:	3080200c 	andi	r2,r6,128
  80ca68:	103ffa26 	beq	r2,zero,80ca54 <__pack_f+0x90>
  80ca6c:	31cd883a 	add	r6,r6,r7
  80ca70:	003ff806 	br	80ca54 <__pack_f+0x90>
  80ca74:	300cd07a 	srli	r6,r6,1
  80ca78:	18c00044 	addi	r3,r3,1
  80ca7c:	003ff606 	br	80ca58 <__pack_f+0x94>
  80ca80:	000d883a 	mov	r6,zero
  80ca84:	00ffffc4 	movi	r3,-1
  80ca88:	003fda06 	br	80c9f4 <__pack_f+0x30>
  80ca8c:	31800434 	orhi	r6,r6,16
  80ca90:	00802034 	movhi	r2,128
  80ca94:	10bfffc4 	addi	r2,r2,-1
  80ca98:	308c703a 	and	r6,r6,r2
  80ca9c:	00ffffc4 	movi	r3,-1
  80caa0:	003fd406 	br	80c9f4 <__pack_f+0x30>
  80caa4:	1109c83a 	sub	r4,r2,r4
  80caa8:	00800644 	movi	r2,25
  80caac:	11001216 	blt	r2,r4,80caf8 <__pack_f+0x134>
  80cab0:	3904983a 	sll	r2,r7,r4
  80cab4:	3106d83a 	srl	r3,r6,r4
  80cab8:	10bfffc4 	addi	r2,r2,-1
  80cabc:	3084703a 	and	r2,r6,r2
  80cac0:	1004c03a 	cmpne	r2,r2,zero
  80cac4:	1886b03a 	or	r3,r3,r2
  80cac8:	19001fcc 	andi	r4,r3,127
  80cacc:	00801004 	movi	r2,64
  80cad0:	20800c26 	beq	r4,r2,80cb04 <__pack_f+0x140>
  80cad4:	18c00fc4 	addi	r3,r3,63
  80cad8:	00900034 	movhi	r2,16384
  80cadc:	10bfffc4 	addi	r2,r2,-1
  80cae0:	180cd1fa 	srli	r6,r3,7
  80cae4:	10c7803a 	cmpltu	r3,r2,r3
  80cae8:	00802034 	movhi	r2,128
  80caec:	10bfffc4 	addi	r2,r2,-1
  80caf0:	308c703a 	and	r6,r6,r2
  80caf4:	003fbf06 	br	80c9f4 <__pack_f+0x30>
  80caf8:	0007883a 	mov	r3,zero
  80cafc:	000d883a 	mov	r6,zero
  80cb00:	003ff906 	br	80cae8 <__pack_f+0x124>
  80cb04:	1880200c 	andi	r2,r3,128
  80cb08:	10000126 	beq	r2,zero,80cb10 <__pack_f+0x14c>
  80cb0c:	1907883a 	add	r3,r3,r4
  80cb10:	180cd1fa 	srli	r6,r3,7
  80cb14:	00900034 	movhi	r2,16384
  80cb18:	10bfffc4 	addi	r2,r2,-1
  80cb1c:	10c7803a 	cmpltu	r3,r2,r3
  80cb20:	003ff106 	br	80cae8 <__pack_f+0x124>

0080cb24 <__unpack_f>:
  80cb24:	21800017 	ldw	r6,0(r4)
  80cb28:	00c02034 	movhi	r3,128
  80cb2c:	18ffffc4 	addi	r3,r3,-1
  80cb30:	3004d5fa 	srli	r2,r6,23
  80cb34:	3008d7fa 	srli	r4,r6,31
  80cb38:	30ce703a 	and	r7,r6,r3
  80cb3c:	10c03fcc 	andi	r3,r2,255
  80cb40:	29000115 	stw	r4,4(r5)
  80cb44:	1800131e 	bne	r3,zero,80cb94 <__unpack_f+0x70>
  80cb48:	38000f26 	beq	r7,zero,80cb88 <__unpack_f+0x64>
  80cb4c:	380691fa 	slli	r3,r7,7
  80cb50:	01bfe084 	movi	r6,-126
  80cb54:	008000c4 	movi	r2,3
  80cb58:	01100034 	movhi	r4,16384
  80cb5c:	213fffc4 	addi	r4,r4,-1
  80cb60:	28800015 	stw	r2,0(r5)
  80cb64:	29800215 	stw	r6,8(r5)
  80cb68:	20c00536 	bltu	r4,r3,80cb80 <__unpack_f+0x5c>
  80cb6c:	3005883a 	mov	r2,r6
  80cb70:	18c7883a 	add	r3,r3,r3
  80cb74:	10bfffc4 	addi	r2,r2,-1
  80cb78:	20fffd2e 	bgeu	r4,r3,80cb70 <__unpack_f+0x4c>
  80cb7c:	28800215 	stw	r2,8(r5)
  80cb80:	28c00315 	stw	r3,12(r5)
  80cb84:	f800283a 	ret
  80cb88:	00800084 	movi	r2,2
  80cb8c:	28800015 	stw	r2,0(r5)
  80cb90:	f800283a 	ret
  80cb94:	00803fc4 	movi	r2,255
  80cb98:	18800826 	beq	r3,r2,80cbbc <__unpack_f+0x98>
  80cb9c:	380491fa 	slli	r2,r7,7
  80cba0:	18ffe044 	addi	r3,r3,-127
  80cba4:	28c00215 	stw	r3,8(r5)
  80cba8:	10900034 	orhi	r2,r2,16384
  80cbac:	28800315 	stw	r2,12(r5)
  80cbb0:	008000c4 	movi	r2,3
  80cbb4:	28800015 	stw	r2,0(r5)
  80cbb8:	f800283a 	ret
  80cbbc:	3800031e 	bne	r7,zero,80cbcc <__unpack_f+0xa8>
  80cbc0:	00800104 	movi	r2,4
  80cbc4:	28800015 	stw	r2,0(r5)
  80cbc8:	f800283a 	ret
  80cbcc:	3080042c 	andhi	r2,r6,16
  80cbd0:	10000426 	beq	r2,zero,80cbe4 <__unpack_f+0xc0>
  80cbd4:	00800044 	movi	r2,1
  80cbd8:	28800015 	stw	r2,0(r5)
  80cbdc:	29c00315 	stw	r7,12(r5)
  80cbe0:	f800283a 	ret
  80cbe4:	28000015 	stw	zero,0(r5)
  80cbe8:	003ffc06 	br	80cbdc <__unpack_f+0xb8>

0080cbec <__fpcmp_parts_f>:
  80cbec:	21800017 	ldw	r6,0(r4)
  80cbf0:	00c00044 	movi	r3,1
  80cbf4:	19800a2e 	bgeu	r3,r6,80cc20 <__fpcmp_parts_f+0x34>
  80cbf8:	28800017 	ldw	r2,0(r5)
  80cbfc:	1880082e 	bgeu	r3,r2,80cc20 <__fpcmp_parts_f+0x34>
  80cc00:	00c00104 	movi	r3,4
  80cc04:	30c01e26 	beq	r6,r3,80cc80 <__fpcmp_parts_f+0x94>
  80cc08:	10c01a26 	beq	r2,r3,80cc74 <__fpcmp_parts_f+0x88>
  80cc0c:	00c00084 	movi	r3,2
  80cc10:	30c00526 	beq	r6,r3,80cc28 <__fpcmp_parts_f+0x3c>
  80cc14:	10c0071e 	bne	r2,r3,80cc34 <__fpcmp_parts_f+0x48>
  80cc18:	20800117 	ldw	r2,4(r4)
  80cc1c:	1000091e 	bne	r2,zero,80cc44 <__fpcmp_parts_f+0x58>
  80cc20:	00800044 	movi	r2,1
  80cc24:	f800283a 	ret
  80cc28:	10c0121e 	bne	r2,r3,80cc74 <__fpcmp_parts_f+0x88>
  80cc2c:	0005883a 	mov	r2,zero
  80cc30:	f800283a 	ret
  80cc34:	20c00117 	ldw	r3,4(r4)
  80cc38:	28800117 	ldw	r2,4(r5)
  80cc3c:	18800326 	beq	r3,r2,80cc4c <__fpcmp_parts_f+0x60>
  80cc40:	183ff726 	beq	r3,zero,80cc20 <__fpcmp_parts_f+0x34>
  80cc44:	00bfffc4 	movi	r2,-1
  80cc48:	f800283a 	ret
  80cc4c:	21800217 	ldw	r6,8(r4)
  80cc50:	28800217 	ldw	r2,8(r5)
  80cc54:	11bffa16 	blt	r2,r6,80cc40 <__fpcmp_parts_f+0x54>
  80cc58:	30800416 	blt	r6,r2,80cc6c <__fpcmp_parts_f+0x80>
  80cc5c:	21000317 	ldw	r4,12(r4)
  80cc60:	29400317 	ldw	r5,12(r5)
  80cc64:	293ff636 	bltu	r5,r4,80cc40 <__fpcmp_parts_f+0x54>
  80cc68:	217ff02e 	bgeu	r4,r5,80cc2c <__fpcmp_parts_f+0x40>
  80cc6c:	183fec1e 	bne	r3,zero,80cc20 <__fpcmp_parts_f+0x34>
  80cc70:	003ff406 	br	80cc44 <__fpcmp_parts_f+0x58>
  80cc74:	28800117 	ldw	r2,4(r5)
  80cc78:	103fe91e 	bne	r2,zero,80cc20 <__fpcmp_parts_f+0x34>
  80cc7c:	003ff106 	br	80cc44 <__fpcmp_parts_f+0x58>
  80cc80:	11bfe51e 	bne	r2,r6,80cc18 <__fpcmp_parts_f+0x2c>
  80cc84:	28c00117 	ldw	r3,4(r5)
  80cc88:	20800117 	ldw	r2,4(r4)
  80cc8c:	1885c83a 	sub	r2,r3,r2
  80cc90:	f800283a 	ret

0080cc94 <__make_fp>:
  80cc94:	defffb04 	addi	sp,sp,-20
  80cc98:	d9000015 	stw	r4,0(sp)
  80cc9c:	d809883a 	mov	r4,sp
  80cca0:	dfc00415 	stw	ra,16(sp)
  80cca4:	d9400115 	stw	r5,4(sp)
  80cca8:	d9800215 	stw	r6,8(sp)
  80ccac:	d9c00315 	stw	r7,12(sp)
  80ccb0:	080c9c40 	call	80c9c4 <__pack_f>
  80ccb4:	dfc00417 	ldw	ra,16(sp)
  80ccb8:	dec00504 	addi	sp,sp,20
  80ccbc:	f800283a 	ret

0080ccc0 <__pack_d>:
  80ccc0:	20c00017 	ldw	r3,0(r4)
  80ccc4:	defffd04 	addi	sp,sp,-12
  80ccc8:	dc000015 	stw	r16,0(sp)
  80cccc:	dc800215 	stw	r18,8(sp)
  80ccd0:	dc400115 	stw	r17,4(sp)
  80ccd4:	00800044 	movi	r2,1
  80ccd8:	22000317 	ldw	r8,12(r4)
  80ccdc:	001f883a 	mov	r15,zero
  80cce0:	22400417 	ldw	r9,16(r4)
  80cce4:	24000117 	ldw	r16,4(r4)
  80cce8:	10c0552e 	bgeu	r2,r3,80ce40 <__pack_d+0x180>
  80ccec:	00800104 	movi	r2,4
  80ccf0:	18804f26 	beq	r3,r2,80ce30 <__pack_d+0x170>
  80ccf4:	00800084 	movi	r2,2
  80ccf8:	18800226 	beq	r3,r2,80cd04 <__pack_d+0x44>
  80ccfc:	4244b03a 	or	r2,r8,r9
  80cd00:	10001a1e 	bne	r2,zero,80cd6c <__pack_d+0xac>
  80cd04:	000d883a 	mov	r6,zero
  80cd08:	000f883a 	mov	r7,zero
  80cd0c:	0011883a 	mov	r8,zero
  80cd10:	00800434 	movhi	r2,16
  80cd14:	10bfffc4 	addi	r2,r2,-1
  80cd18:	301d883a 	mov	r14,r6
  80cd1c:	3884703a 	and	r2,r7,r2
  80cd20:	400a953a 	slli	r5,r8,20
  80cd24:	79bffc2c 	andhi	r6,r15,65520
  80cd28:	308cb03a 	or	r6,r6,r2
  80cd2c:	00e00434 	movhi	r3,32784
  80cd30:	18ffffc4 	addi	r3,r3,-1
  80cd34:	800497fa 	slli	r2,r16,31
  80cd38:	30c6703a 	and	r3,r6,r3
  80cd3c:	1946b03a 	or	r3,r3,r5
  80cd40:	01600034 	movhi	r5,32768
  80cd44:	297fffc4 	addi	r5,r5,-1
  80cd48:	194a703a 	and	r5,r3,r5
  80cd4c:	288ab03a 	or	r5,r5,r2
  80cd50:	2807883a 	mov	r3,r5
  80cd54:	7005883a 	mov	r2,r14
  80cd58:	dc800217 	ldw	r18,8(sp)
  80cd5c:	dc400117 	ldw	r17,4(sp)
  80cd60:	dc000017 	ldw	r16,0(sp)
  80cd64:	dec00304 	addi	sp,sp,12
  80cd68:	f800283a 	ret
  80cd6c:	21000217 	ldw	r4,8(r4)
  80cd70:	00bf0084 	movi	r2,-1022
  80cd74:	20803f16 	blt	r4,r2,80ce74 <__pack_d+0x1b4>
  80cd78:	0080ffc4 	movi	r2,1023
  80cd7c:	11002c16 	blt	r2,r4,80ce30 <__pack_d+0x170>
  80cd80:	00803fc4 	movi	r2,255
  80cd84:	408c703a 	and	r6,r8,r2
  80cd88:	00802004 	movi	r2,128
  80cd8c:	0007883a 	mov	r3,zero
  80cd90:	000f883a 	mov	r7,zero
  80cd94:	2280ffc4 	addi	r10,r4,1023
  80cd98:	30801e26 	beq	r6,r2,80ce14 <__pack_d+0x154>
  80cd9c:	00801fc4 	movi	r2,127
  80cda0:	4089883a 	add	r4,r8,r2
  80cda4:	220d803a 	cmpltu	r6,r4,r8
  80cda8:	324d883a 	add	r6,r6,r9
  80cdac:	2011883a 	mov	r8,r4
  80cdb0:	3013883a 	mov	r9,r6
  80cdb4:	00880034 	movhi	r2,8192
  80cdb8:	10bfffc4 	addi	r2,r2,-1
  80cdbc:	12400d36 	bltu	r2,r9,80cdf4 <__pack_d+0x134>
  80cdc0:	4804963a 	slli	r2,r9,24
  80cdc4:	400cd23a 	srli	r6,r8,8
  80cdc8:	480ed23a 	srli	r7,r9,8
  80cdcc:	013fffc4 	movi	r4,-1
  80cdd0:	118cb03a 	or	r6,r2,r6
  80cdd4:	01400434 	movhi	r5,16
  80cdd8:	297fffc4 	addi	r5,r5,-1
  80cddc:	3104703a 	and	r2,r6,r4
  80cde0:	3946703a 	and	r3,r7,r5
  80cde4:	5201ffcc 	andi	r8,r10,2047
  80cde8:	100d883a 	mov	r6,r2
  80cdec:	180f883a 	mov	r7,r3
  80cdf0:	003fc706 	br	80cd10 <__pack_d+0x50>
  80cdf4:	480897fa 	slli	r4,r9,31
  80cdf8:	4004d07a 	srli	r2,r8,1
  80cdfc:	4806d07a 	srli	r3,r9,1
  80ce00:	52800044 	addi	r10,r10,1
  80ce04:	2084b03a 	or	r2,r4,r2
  80ce08:	1011883a 	mov	r8,r2
  80ce0c:	1813883a 	mov	r9,r3
  80ce10:	003feb06 	br	80cdc0 <__pack_d+0x100>
  80ce14:	383fe11e 	bne	r7,zero,80cd9c <__pack_d+0xdc>
  80ce18:	01004004 	movi	r4,256
  80ce1c:	4104703a 	and	r2,r8,r4
  80ce20:	10c4b03a 	or	r2,r2,r3
  80ce24:	103fe326 	beq	r2,zero,80cdb4 <__pack_d+0xf4>
  80ce28:	3005883a 	mov	r2,r6
  80ce2c:	003fdc06 	br	80cda0 <__pack_d+0xe0>
  80ce30:	000d883a 	mov	r6,zero
  80ce34:	000f883a 	mov	r7,zero
  80ce38:	0201ffc4 	movi	r8,2047
  80ce3c:	003fb406 	br	80cd10 <__pack_d+0x50>
  80ce40:	0005883a 	mov	r2,zero
  80ce44:	00c00234 	movhi	r3,8
  80ce48:	408cb03a 	or	r6,r8,r2
  80ce4c:	48ceb03a 	or	r7,r9,r3
  80ce50:	013fffc4 	movi	r4,-1
  80ce54:	01400434 	movhi	r5,16
  80ce58:	297fffc4 	addi	r5,r5,-1
  80ce5c:	3104703a 	and	r2,r6,r4
  80ce60:	3946703a 	and	r3,r7,r5
  80ce64:	100d883a 	mov	r6,r2
  80ce68:	180f883a 	mov	r7,r3
  80ce6c:	0201ffc4 	movi	r8,2047
  80ce70:	003fa706 	br	80cd10 <__pack_d+0x50>
  80ce74:	1109c83a 	sub	r4,r2,r4
  80ce78:	00800e04 	movi	r2,56
  80ce7c:	11004316 	blt	r2,r4,80cf8c <__pack_d+0x2cc>
  80ce80:	21fff804 	addi	r7,r4,-32
  80ce84:	38004516 	blt	r7,zero,80cf9c <__pack_d+0x2dc>
  80ce88:	49d8d83a 	srl	r12,r9,r7
  80ce8c:	001b883a 	mov	r13,zero
  80ce90:	0023883a 	mov	r17,zero
  80ce94:	01400044 	movi	r5,1
  80ce98:	0025883a 	mov	r18,zero
  80ce9c:	38004716 	blt	r7,zero,80cfbc <__pack_d+0x2fc>
  80cea0:	29d6983a 	sll	r11,r5,r7
  80cea4:	0015883a 	mov	r10,zero
  80cea8:	00bfffc4 	movi	r2,-1
  80ceac:	5089883a 	add	r4,r10,r2
  80ceb0:	588b883a 	add	r5,r11,r2
  80ceb4:	228d803a 	cmpltu	r6,r4,r10
  80ceb8:	314b883a 	add	r5,r6,r5
  80cebc:	4104703a 	and	r2,r8,r4
  80cec0:	4946703a 	and	r3,r9,r5
  80cec4:	10c4b03a 	or	r2,r2,r3
  80cec8:	10000226 	beq	r2,zero,80ced4 <__pack_d+0x214>
  80cecc:	04400044 	movi	r17,1
  80ced0:	0025883a 	mov	r18,zero
  80ced4:	00803fc4 	movi	r2,255
  80ced8:	644eb03a 	or	r7,r12,r17
  80cedc:	3892703a 	and	r9,r7,r2
  80cee0:	00802004 	movi	r2,128
  80cee4:	6c90b03a 	or	r8,r13,r18
  80cee8:	0015883a 	mov	r10,zero
  80ceec:	48801626 	beq	r9,r2,80cf48 <__pack_d+0x288>
  80cef0:	01001fc4 	movi	r4,127
  80cef4:	3905883a 	add	r2,r7,r4
  80cef8:	11cd803a 	cmpltu	r6,r2,r7
  80cefc:	320d883a 	add	r6,r6,r8
  80cf00:	100f883a 	mov	r7,r2
  80cf04:	00840034 	movhi	r2,4096
  80cf08:	10bfffc4 	addi	r2,r2,-1
  80cf0c:	3011883a 	mov	r8,r6
  80cf10:	0007883a 	mov	r3,zero
  80cf14:	11801b36 	bltu	r2,r6,80cf84 <__pack_d+0x2c4>
  80cf18:	4004963a 	slli	r2,r8,24
  80cf1c:	3808d23a 	srli	r4,r7,8
  80cf20:	400ad23a 	srli	r5,r8,8
  80cf24:	1813883a 	mov	r9,r3
  80cf28:	1108b03a 	or	r4,r2,r4
  80cf2c:	00bfffc4 	movi	r2,-1
  80cf30:	00c00434 	movhi	r3,16
  80cf34:	18ffffc4 	addi	r3,r3,-1
  80cf38:	208c703a 	and	r6,r4,r2
  80cf3c:	28ce703a 	and	r7,r5,r3
  80cf40:	4a01ffcc 	andi	r8,r9,2047
  80cf44:	003f7206 	br	80cd10 <__pack_d+0x50>
  80cf48:	503fe91e 	bne	r10,zero,80cef0 <__pack_d+0x230>
  80cf4c:	01004004 	movi	r4,256
  80cf50:	3904703a 	and	r2,r7,r4
  80cf54:	0007883a 	mov	r3,zero
  80cf58:	10c4b03a 	or	r2,r2,r3
  80cf5c:	10000626 	beq	r2,zero,80cf78 <__pack_d+0x2b8>
  80cf60:	3a45883a 	add	r2,r7,r9
  80cf64:	11cd803a 	cmpltu	r6,r2,r7
  80cf68:	320d883a 	add	r6,r6,r8
  80cf6c:	100f883a 	mov	r7,r2
  80cf70:	3011883a 	mov	r8,r6
  80cf74:	0007883a 	mov	r3,zero
  80cf78:	00840034 	movhi	r2,4096
  80cf7c:	10bfffc4 	addi	r2,r2,-1
  80cf80:	123fe52e 	bgeu	r2,r8,80cf18 <__pack_d+0x258>
  80cf84:	00c00044 	movi	r3,1
  80cf88:	003fe306 	br	80cf18 <__pack_d+0x258>
  80cf8c:	0009883a 	mov	r4,zero
  80cf90:	0013883a 	mov	r9,zero
  80cf94:	000b883a 	mov	r5,zero
  80cf98:	003fe406 	br	80cf2c <__pack_d+0x26c>
  80cf9c:	4a47883a 	add	r3,r9,r9
  80cfa0:	008007c4 	movi	r2,31
  80cfa4:	1105c83a 	sub	r2,r2,r4
  80cfa8:	1886983a 	sll	r3,r3,r2
  80cfac:	4118d83a 	srl	r12,r8,r4
  80cfb0:	491ad83a 	srl	r13,r9,r4
  80cfb4:	1b18b03a 	or	r12,r3,r12
  80cfb8:	003fb506 	br	80ce90 <__pack_d+0x1d0>
  80cfbc:	2806d07a 	srli	r3,r5,1
  80cfc0:	008007c4 	movi	r2,31
  80cfc4:	1105c83a 	sub	r2,r2,r4
  80cfc8:	1896d83a 	srl	r11,r3,r2
  80cfcc:	2914983a 	sll	r10,r5,r4
  80cfd0:	003fb506 	br	80cea8 <__pack_d+0x1e8>

0080cfd4 <__unpack_d>:
  80cfd4:	20c00117 	ldw	r3,4(r4)
  80cfd8:	22400017 	ldw	r9,0(r4)
  80cfdc:	00800434 	movhi	r2,16
  80cfe0:	10bfffc4 	addi	r2,r2,-1
  80cfe4:	1808d53a 	srli	r4,r3,20
  80cfe8:	180cd7fa 	srli	r6,r3,31
  80cfec:	1894703a 	and	r10,r3,r2
  80cff0:	2201ffcc 	andi	r8,r4,2047
  80cff4:	281b883a 	mov	r13,r5
  80cff8:	4817883a 	mov	r11,r9
  80cffc:	29800115 	stw	r6,4(r5)
  80d000:	5019883a 	mov	r12,r10
  80d004:	40001e1e 	bne	r8,zero,80d080 <__unpack_d+0xac>
  80d008:	4a84b03a 	or	r2,r9,r10
  80d00c:	10001926 	beq	r2,zero,80d074 <__unpack_d+0xa0>
  80d010:	4804d63a 	srli	r2,r9,24
  80d014:	500c923a 	slli	r6,r10,8
  80d018:	013f0084 	movi	r4,-1022
  80d01c:	00c40034 	movhi	r3,4096
  80d020:	18ffffc4 	addi	r3,r3,-1
  80d024:	118cb03a 	or	r6,r2,r6
  80d028:	008000c4 	movi	r2,3
  80d02c:	480a923a 	slli	r5,r9,8
  80d030:	68800015 	stw	r2,0(r13)
  80d034:	69000215 	stw	r4,8(r13)
  80d038:	19800b36 	bltu	r3,r6,80d068 <__unpack_d+0x94>
  80d03c:	200f883a 	mov	r7,r4
  80d040:	1811883a 	mov	r8,r3
  80d044:	2945883a 	add	r2,r5,r5
  80d048:	1149803a 	cmpltu	r4,r2,r5
  80d04c:	3187883a 	add	r3,r6,r6
  80d050:	20c9883a 	add	r4,r4,r3
  80d054:	100b883a 	mov	r5,r2
  80d058:	200d883a 	mov	r6,r4
  80d05c:	39ffffc4 	addi	r7,r7,-1
  80d060:	413ff82e 	bgeu	r8,r4,80d044 <__unpack_d+0x70>
  80d064:	69c00215 	stw	r7,8(r13)
  80d068:	69800415 	stw	r6,16(r13)
  80d06c:	69400315 	stw	r5,12(r13)
  80d070:	f800283a 	ret
  80d074:	00800084 	movi	r2,2
  80d078:	28800015 	stw	r2,0(r5)
  80d07c:	f800283a 	ret
  80d080:	0081ffc4 	movi	r2,2047
  80d084:	40800f26 	beq	r8,r2,80d0c4 <__unpack_d+0xf0>
  80d088:	480cd63a 	srli	r6,r9,24
  80d08c:	5006923a 	slli	r3,r10,8
  80d090:	4804923a 	slli	r2,r9,8
  80d094:	0009883a 	mov	r4,zero
  80d098:	30c6b03a 	or	r3,r6,r3
  80d09c:	01440034 	movhi	r5,4096
  80d0a0:	110cb03a 	or	r6,r2,r4
  80d0a4:	423f0044 	addi	r8,r8,-1023
  80d0a8:	194eb03a 	or	r7,r3,r5
  80d0ac:	008000c4 	movi	r2,3
  80d0b0:	69c00415 	stw	r7,16(r13)
  80d0b4:	6a000215 	stw	r8,8(r13)
  80d0b8:	68800015 	stw	r2,0(r13)
  80d0bc:	69800315 	stw	r6,12(r13)
  80d0c0:	f800283a 	ret
  80d0c4:	4a84b03a 	or	r2,r9,r10
  80d0c8:	1000031e 	bne	r2,zero,80d0d8 <__unpack_d+0x104>
  80d0cc:	00800104 	movi	r2,4
  80d0d0:	28800015 	stw	r2,0(r5)
  80d0d4:	f800283a 	ret
  80d0d8:	0009883a 	mov	r4,zero
  80d0dc:	01400234 	movhi	r5,8
  80d0e0:	4904703a 	and	r2,r9,r4
  80d0e4:	5146703a 	and	r3,r10,r5
  80d0e8:	10c4b03a 	or	r2,r2,r3
  80d0ec:	10000526 	beq	r2,zero,80d104 <__unpack_d+0x130>
  80d0f0:	00800044 	movi	r2,1
  80d0f4:	68800015 	stw	r2,0(r13)
  80d0f8:	6b000415 	stw	r12,16(r13)
  80d0fc:	6ac00315 	stw	r11,12(r13)
  80d100:	f800283a 	ret
  80d104:	68000015 	stw	zero,0(r13)
  80d108:	003ffb06 	br	80d0f8 <__unpack_d+0x124>

0080d10c <__fpcmp_parts_d>:
  80d10c:	21800017 	ldw	r6,0(r4)
  80d110:	00c00044 	movi	r3,1
  80d114:	19800a2e 	bgeu	r3,r6,80d140 <__fpcmp_parts_d+0x34>
  80d118:	28800017 	ldw	r2,0(r5)
  80d11c:	1880082e 	bgeu	r3,r2,80d140 <__fpcmp_parts_d+0x34>
  80d120:	00c00104 	movi	r3,4
  80d124:	30c02626 	beq	r6,r3,80d1c0 <__fpcmp_parts_d+0xb4>
  80d128:	10c02226 	beq	r2,r3,80d1b4 <__fpcmp_parts_d+0xa8>
  80d12c:	00c00084 	movi	r3,2
  80d130:	30c00526 	beq	r6,r3,80d148 <__fpcmp_parts_d+0x3c>
  80d134:	10c0071e 	bne	r2,r3,80d154 <__fpcmp_parts_d+0x48>
  80d138:	20800117 	ldw	r2,4(r4)
  80d13c:	1000091e 	bne	r2,zero,80d164 <__fpcmp_parts_d+0x58>
  80d140:	00800044 	movi	r2,1
  80d144:	f800283a 	ret
  80d148:	10c01a1e 	bne	r2,r3,80d1b4 <__fpcmp_parts_d+0xa8>
  80d14c:	0005883a 	mov	r2,zero
  80d150:	f800283a 	ret
  80d154:	22000117 	ldw	r8,4(r4)
  80d158:	28800117 	ldw	r2,4(r5)
  80d15c:	40800326 	beq	r8,r2,80d16c <__fpcmp_parts_d+0x60>
  80d160:	403ff726 	beq	r8,zero,80d140 <__fpcmp_parts_d+0x34>
  80d164:	00bfffc4 	movi	r2,-1
  80d168:	f800283a 	ret
  80d16c:	20c00217 	ldw	r3,8(r4)
  80d170:	28800217 	ldw	r2,8(r5)
  80d174:	10fffa16 	blt	r2,r3,80d160 <__fpcmp_parts_d+0x54>
  80d178:	18800916 	blt	r3,r2,80d1a0 <__fpcmp_parts_d+0x94>
  80d17c:	21c00417 	ldw	r7,16(r4)
  80d180:	28c00417 	ldw	r3,16(r5)
  80d184:	21800317 	ldw	r6,12(r4)
  80d188:	28800317 	ldw	r2,12(r5)
  80d18c:	19fff436 	bltu	r3,r7,80d160 <__fpcmp_parts_d+0x54>
  80d190:	38c00526 	beq	r7,r3,80d1a8 <__fpcmp_parts_d+0x9c>
  80d194:	38c00236 	bltu	r7,r3,80d1a0 <__fpcmp_parts_d+0x94>
  80d198:	19ffec1e 	bne	r3,r7,80d14c <__fpcmp_parts_d+0x40>
  80d19c:	30bfeb2e 	bgeu	r6,r2,80d14c <__fpcmp_parts_d+0x40>
  80d1a0:	403fe71e 	bne	r8,zero,80d140 <__fpcmp_parts_d+0x34>
  80d1a4:	003fef06 	br	80d164 <__fpcmp_parts_d+0x58>
  80d1a8:	11bffa2e 	bgeu	r2,r6,80d194 <__fpcmp_parts_d+0x88>
  80d1ac:	403fe426 	beq	r8,zero,80d140 <__fpcmp_parts_d+0x34>
  80d1b0:	003fec06 	br	80d164 <__fpcmp_parts_d+0x58>
  80d1b4:	28800117 	ldw	r2,4(r5)
  80d1b8:	103fe11e 	bne	r2,zero,80d140 <__fpcmp_parts_d+0x34>
  80d1bc:	003fe906 	br	80d164 <__fpcmp_parts_d+0x58>
  80d1c0:	11bfdd1e 	bne	r2,r6,80d138 <__fpcmp_parts_d+0x2c>
  80d1c4:	28c00117 	ldw	r3,4(r5)
  80d1c8:	20800117 	ldw	r2,4(r4)
  80d1cc:	1885c83a 	sub	r2,r3,r2
  80d1d0:	f800283a 	ret

0080d1d4 <clock>:
  80d1d4:	008020b4 	movhi	r2,130
  80d1d8:	108e6f04 	addi	r2,r2,14780
  80d1dc:	11000017 	ldw	r4,0(r2)
  80d1e0:	defffb04 	addi	sp,sp,-20
  80d1e4:	d80b883a 	mov	r5,sp
  80d1e8:	dfc00415 	stw	ra,16(sp)
  80d1ec:	080e2600 	call	80e260 <_times_r>
  80d1f0:	1007883a 	mov	r3,r2
  80d1f4:	00bfffc4 	movi	r2,-1
  80d1f8:	18800726 	beq	r3,r2,80d218 <clock+0x44>
  80d1fc:	d8c00117 	ldw	r3,4(sp)
  80d200:	d9000017 	ldw	r4,0(sp)
  80d204:	d8800217 	ldw	r2,8(sp)
  80d208:	20c9883a 	add	r4,r4,r3
  80d20c:	d8c00317 	ldw	r3,12(sp)
  80d210:	10c5883a 	add	r2,r2,r3
  80d214:	2087883a 	add	r3,r4,r2
  80d218:	1805883a 	mov	r2,r3
  80d21c:	dfc00417 	ldw	ra,16(sp)
  80d220:	dec00504 	addi	sp,sp,20
  80d224:	f800283a 	ret

0080d228 <__errno>:
  80d228:	00c020b4 	movhi	r3,130
  80d22c:	18ce6f04 	addi	r3,r3,14780
  80d230:	18800017 	ldw	r2,0(r3)
  80d234:	f800283a 	ret

0080d238 <free>:
  80d238:	008020b4 	movhi	r2,130
  80d23c:	108e6f04 	addi	r2,r2,14780
  80d240:	200b883a 	mov	r5,r4
  80d244:	11000017 	ldw	r4,0(r2)
  80d248:	081212c1 	jmpi	81212c <_free_r>

0080d24c <malloc>:
  80d24c:	008020b4 	movhi	r2,130
  80d250:	108e6f04 	addi	r2,r2,14780
  80d254:	200b883a 	mov	r5,r4
  80d258:	11000017 	ldw	r4,0(r2)
  80d25c:	080d2601 	jmpi	80d260 <_malloc_r>

0080d260 <_malloc_r>:
  80d260:	defff604 	addi	sp,sp,-40
  80d264:	28c002c4 	addi	r3,r5,11
  80d268:	00800584 	movi	r2,22
  80d26c:	dc800215 	stw	r18,8(sp)
  80d270:	dfc00915 	stw	ra,36(sp)
  80d274:	df000815 	stw	fp,32(sp)
  80d278:	ddc00715 	stw	r23,28(sp)
  80d27c:	dd800615 	stw	r22,24(sp)
  80d280:	dd400515 	stw	r21,20(sp)
  80d284:	dd000415 	stw	r20,16(sp)
  80d288:	dcc00315 	stw	r19,12(sp)
  80d28c:	dc400115 	stw	r17,4(sp)
  80d290:	dc000015 	stw	r16,0(sp)
  80d294:	2025883a 	mov	r18,r4
  80d298:	10c01236 	bltu	r2,r3,80d2e4 <_malloc_r+0x84>
  80d29c:	04400404 	movi	r17,16
  80d2a0:	8940142e 	bgeu	r17,r5,80d2f4 <_malloc_r+0x94>
  80d2a4:	00800304 	movi	r2,12
  80d2a8:	0007883a 	mov	r3,zero
  80d2ac:	90800015 	stw	r2,0(r18)
  80d2b0:	1805883a 	mov	r2,r3
  80d2b4:	dfc00917 	ldw	ra,36(sp)
  80d2b8:	df000817 	ldw	fp,32(sp)
  80d2bc:	ddc00717 	ldw	r23,28(sp)
  80d2c0:	dd800617 	ldw	r22,24(sp)
  80d2c4:	dd400517 	ldw	r21,20(sp)
  80d2c8:	dd000417 	ldw	r20,16(sp)
  80d2cc:	dcc00317 	ldw	r19,12(sp)
  80d2d0:	dc800217 	ldw	r18,8(sp)
  80d2d4:	dc400117 	ldw	r17,4(sp)
  80d2d8:	dc000017 	ldw	r16,0(sp)
  80d2dc:	dec00a04 	addi	sp,sp,40
  80d2e0:	f800283a 	ret
  80d2e4:	00bffe04 	movi	r2,-8
  80d2e8:	18a2703a 	and	r17,r3,r2
  80d2ec:	883fed16 	blt	r17,zero,80d2a4 <_malloc_r+0x44>
  80d2f0:	897fec36 	bltu	r17,r5,80d2a4 <_malloc_r+0x44>
  80d2f4:	9009883a 	mov	r4,r18
  80d2f8:	08162140 	call	816214 <__malloc_lock>
  80d2fc:	00807dc4 	movi	r2,503
  80d300:	14402b2e 	bgeu	r2,r17,80d3b0 <_malloc_r+0x150>
  80d304:	8806d27a 	srli	r3,r17,9
  80d308:	18003f1e 	bne	r3,zero,80d408 <_malloc_r+0x1a8>
  80d30c:	880cd0fa 	srli	r6,r17,3
  80d310:	300490fa 	slli	r2,r6,3
  80d314:	02c020b4 	movhi	r11,130
  80d318:	5ac8ce04 	addi	r11,r11,9016
  80d31c:	12cb883a 	add	r5,r2,r11
  80d320:	2c000317 	ldw	r16,12(r5)
  80d324:	580f883a 	mov	r7,r11
  80d328:	2c00041e 	bne	r5,r16,80d33c <_malloc_r+0xdc>
  80d32c:	00000a06 	br	80d358 <_malloc_r+0xf8>
  80d330:	1800860e 	bge	r3,zero,80d54c <_malloc_r+0x2ec>
  80d334:	84000317 	ldw	r16,12(r16)
  80d338:	2c000726 	beq	r5,r16,80d358 <_malloc_r+0xf8>
  80d33c:	80800117 	ldw	r2,4(r16)
  80d340:	00ffff04 	movi	r3,-4
  80d344:	10c8703a 	and	r4,r2,r3
  80d348:	2447c83a 	sub	r3,r4,r17
  80d34c:	008003c4 	movi	r2,15
  80d350:	10fff70e 	bge	r2,r3,80d330 <_malloc_r+0xd0>
  80d354:	31bfffc4 	addi	r6,r6,-1
  80d358:	32400044 	addi	r9,r6,1
  80d35c:	028020b4 	movhi	r10,130
  80d360:	5288d004 	addi	r10,r10,9024
  80d364:	54000217 	ldw	r16,8(r10)
  80d368:	8280a026 	beq	r16,r10,80d5ec <_malloc_r+0x38c>
  80d36c:	80800117 	ldw	r2,4(r16)
  80d370:	00ffff04 	movi	r3,-4
  80d374:	10ca703a 	and	r5,r2,r3
  80d378:	2c4dc83a 	sub	r6,r5,r17
  80d37c:	008003c4 	movi	r2,15
  80d380:	11808316 	blt	r2,r6,80d590 <_malloc_r+0x330>
  80d384:	52800315 	stw	r10,12(r10)
  80d388:	52800215 	stw	r10,8(r10)
  80d38c:	30002916 	blt	r6,zero,80d434 <_malloc_r+0x1d4>
  80d390:	8147883a 	add	r3,r16,r5
  80d394:	18800117 	ldw	r2,4(r3)
  80d398:	9009883a 	mov	r4,r18
  80d39c:	10800054 	ori	r2,r2,1
  80d3a0:	18800115 	stw	r2,4(r3)
  80d3a4:	081631c0 	call	81631c <__malloc_unlock>
  80d3a8:	80c00204 	addi	r3,r16,8
  80d3ac:	003fc006 	br	80d2b0 <_malloc_r+0x50>
  80d3b0:	02c020b4 	movhi	r11,130
  80d3b4:	5ac8ce04 	addi	r11,r11,9016
  80d3b8:	8ac5883a 	add	r2,r17,r11
  80d3bc:	14000317 	ldw	r16,12(r2)
  80d3c0:	580f883a 	mov	r7,r11
  80d3c4:	8806d0fa 	srli	r3,r17,3
  80d3c8:	14006c26 	beq	r2,r16,80d57c <_malloc_r+0x31c>
  80d3cc:	80c00117 	ldw	r3,4(r16)
  80d3d0:	00bfff04 	movi	r2,-4
  80d3d4:	81800317 	ldw	r6,12(r16)
  80d3d8:	1886703a 	and	r3,r3,r2
  80d3dc:	80c7883a 	add	r3,r16,r3
  80d3e0:	18800117 	ldw	r2,4(r3)
  80d3e4:	81400217 	ldw	r5,8(r16)
  80d3e8:	9009883a 	mov	r4,r18
  80d3ec:	10800054 	ori	r2,r2,1
  80d3f0:	18800115 	stw	r2,4(r3)
  80d3f4:	31400215 	stw	r5,8(r6)
  80d3f8:	29800315 	stw	r6,12(r5)
  80d3fc:	081631c0 	call	81631c <__malloc_unlock>
  80d400:	80c00204 	addi	r3,r16,8
  80d404:	003faa06 	br	80d2b0 <_malloc_r+0x50>
  80d408:	00800104 	movi	r2,4
  80d40c:	10c0052e 	bgeu	r2,r3,80d424 <_malloc_r+0x1c4>
  80d410:	00800504 	movi	r2,20
  80d414:	10c07836 	bltu	r2,r3,80d5f8 <_malloc_r+0x398>
  80d418:	198016c4 	addi	r6,r3,91
  80d41c:	300490fa 	slli	r2,r6,3
  80d420:	003fbc06 	br	80d314 <_malloc_r+0xb4>
  80d424:	8804d1ba 	srli	r2,r17,6
  80d428:	11800e04 	addi	r6,r2,56
  80d42c:	300490fa 	slli	r2,r6,3
  80d430:	003fb806 	br	80d314 <_malloc_r+0xb4>
  80d434:	00807fc4 	movi	r2,511
  80d438:	1140bb36 	bltu	r2,r5,80d728 <_malloc_r+0x4c8>
  80d43c:	2806d0fa 	srli	r3,r5,3
  80d440:	573ffe04 	addi	fp,r10,-8
  80d444:	00800044 	movi	r2,1
  80d448:	180890fa 	slli	r4,r3,3
  80d44c:	1807d0ba 	srai	r3,r3,2
  80d450:	e1c00117 	ldw	r7,4(fp)
  80d454:	5909883a 	add	r4,r11,r4
  80d458:	21400217 	ldw	r5,8(r4)
  80d45c:	10c4983a 	sll	r2,r2,r3
  80d460:	81000315 	stw	r4,12(r16)
  80d464:	81400215 	stw	r5,8(r16)
  80d468:	388eb03a 	or	r7,r7,r2
  80d46c:	2c000315 	stw	r16,12(r5)
  80d470:	24000215 	stw	r16,8(r4)
  80d474:	e1c00115 	stw	r7,4(fp)
  80d478:	4807883a 	mov	r3,r9
  80d47c:	4800cd16 	blt	r9,zero,80d7b4 <_malloc_r+0x554>
  80d480:	1807d0ba 	srai	r3,r3,2
  80d484:	00800044 	movi	r2,1
  80d488:	10c8983a 	sll	r4,r2,r3
  80d48c:	39004436 	bltu	r7,r4,80d5a0 <_malloc_r+0x340>
  80d490:	21c4703a 	and	r2,r4,r7
  80d494:	10000a1e 	bne	r2,zero,80d4c0 <_malloc_r+0x260>
  80d498:	2109883a 	add	r4,r4,r4
  80d49c:	00bfff04 	movi	r2,-4
  80d4a0:	4884703a 	and	r2,r9,r2
  80d4a4:	3906703a 	and	r3,r7,r4
  80d4a8:	12400104 	addi	r9,r2,4
  80d4ac:	1800041e 	bne	r3,zero,80d4c0 <_malloc_r+0x260>
  80d4b0:	2109883a 	add	r4,r4,r4
  80d4b4:	3904703a 	and	r2,r7,r4
  80d4b8:	4a400104 	addi	r9,r9,4
  80d4bc:	103ffc26 	beq	r2,zero,80d4b0 <_malloc_r+0x250>
  80d4c0:	480490fa 	slli	r2,r9,3
  80d4c4:	4819883a 	mov	r12,r9
  80d4c8:	023fff04 	movi	r8,-4
  80d4cc:	589b883a 	add	r13,r11,r2
  80d4d0:	6807883a 	mov	r3,r13
  80d4d4:	014003c4 	movi	r5,15
  80d4d8:	1c000317 	ldw	r16,12(r3)
  80d4dc:	1c00041e 	bne	r3,r16,80d4f0 <_malloc_r+0x290>
  80d4e0:	0000a706 	br	80d780 <_malloc_r+0x520>
  80d4e4:	3000ab0e 	bge	r6,zero,80d794 <_malloc_r+0x534>
  80d4e8:	84000317 	ldw	r16,12(r16)
  80d4ec:	1c00a426 	beq	r3,r16,80d780 <_malloc_r+0x520>
  80d4f0:	80800117 	ldw	r2,4(r16)
  80d4f4:	1204703a 	and	r2,r2,r8
  80d4f8:	144dc83a 	sub	r6,r2,r17
  80d4fc:	29bff90e 	bge	r5,r6,80d4e4 <_malloc_r+0x284>
  80d500:	81000317 	ldw	r4,12(r16)
  80d504:	80c00217 	ldw	r3,8(r16)
  80d508:	89400054 	ori	r5,r17,1
  80d50c:	8445883a 	add	r2,r16,r17
  80d510:	20c00215 	stw	r3,8(r4)
  80d514:	19000315 	stw	r4,12(r3)
  80d518:	81400115 	stw	r5,4(r16)
  80d51c:	1187883a 	add	r3,r2,r6
  80d520:	31000054 	ori	r4,r6,1
  80d524:	50800315 	stw	r2,12(r10)
  80d528:	50800215 	stw	r2,8(r10)
  80d52c:	19800015 	stw	r6,0(r3)
  80d530:	11000115 	stw	r4,4(r2)
  80d534:	12800215 	stw	r10,8(r2)
  80d538:	12800315 	stw	r10,12(r2)
  80d53c:	9009883a 	mov	r4,r18
  80d540:	081631c0 	call	81631c <__malloc_unlock>
  80d544:	80c00204 	addi	r3,r16,8
  80d548:	003f5906 	br	80d2b0 <_malloc_r+0x50>
  80d54c:	8109883a 	add	r4,r16,r4
  80d550:	20800117 	ldw	r2,4(r4)
  80d554:	80c00217 	ldw	r3,8(r16)
  80d558:	81400317 	ldw	r5,12(r16)
  80d55c:	10800054 	ori	r2,r2,1
  80d560:	20800115 	stw	r2,4(r4)
  80d564:	28c00215 	stw	r3,8(r5)
  80d568:	19400315 	stw	r5,12(r3)
  80d56c:	9009883a 	mov	r4,r18
  80d570:	081631c0 	call	81631c <__malloc_unlock>
  80d574:	80c00204 	addi	r3,r16,8
  80d578:	003f4d06 	br	80d2b0 <_malloc_r+0x50>
  80d57c:	80800204 	addi	r2,r16,8
  80d580:	14000317 	ldw	r16,12(r2)
  80d584:	143f911e 	bne	r2,r16,80d3cc <_malloc_r+0x16c>
  80d588:	1a400084 	addi	r9,r3,2
  80d58c:	003f7306 	br	80d35c <_malloc_r+0xfc>
  80d590:	88c00054 	ori	r3,r17,1
  80d594:	8445883a 	add	r2,r16,r17
  80d598:	80c00115 	stw	r3,4(r16)
  80d59c:	003fdf06 	br	80d51c <_malloc_r+0x2bc>
  80d5a0:	e4000217 	ldw	r16,8(fp)
  80d5a4:	00bfff04 	movi	r2,-4
  80d5a8:	80c00117 	ldw	r3,4(r16)
  80d5ac:	802d883a 	mov	r22,r16
  80d5b0:	18aa703a 	and	r21,r3,r2
  80d5b4:	ac401636 	bltu	r21,r17,80d610 <_malloc_r+0x3b0>
  80d5b8:	ac49c83a 	sub	r4,r21,r17
  80d5bc:	008003c4 	movi	r2,15
  80d5c0:	1100130e 	bge	r2,r4,80d610 <_malloc_r+0x3b0>
  80d5c4:	88800054 	ori	r2,r17,1
  80d5c8:	8447883a 	add	r3,r16,r17
  80d5cc:	80800115 	stw	r2,4(r16)
  80d5d0:	20800054 	ori	r2,r4,1
  80d5d4:	18800115 	stw	r2,4(r3)
  80d5d8:	e0c00215 	stw	r3,8(fp)
  80d5dc:	9009883a 	mov	r4,r18
  80d5e0:	081631c0 	call	81631c <__malloc_unlock>
  80d5e4:	80c00204 	addi	r3,r16,8
  80d5e8:	003f3106 	br	80d2b0 <_malloc_r+0x50>
  80d5ec:	39c00117 	ldw	r7,4(r7)
  80d5f0:	573ffe04 	addi	fp,r10,-8
  80d5f4:	003fa006 	br	80d478 <_malloc_r+0x218>
  80d5f8:	00801504 	movi	r2,84
  80d5fc:	10c06736 	bltu	r2,r3,80d79c <_malloc_r+0x53c>
  80d600:	8804d33a 	srli	r2,r17,12
  80d604:	11801b84 	addi	r6,r2,110
  80d608:	300490fa 	slli	r2,r6,3
  80d60c:	003f4106 	br	80d314 <_malloc_r+0xb4>
  80d610:	d0a70217 	ldw	r2,-25592(gp)
  80d614:	d0e00417 	ldw	r3,-32752(gp)
  80d618:	053fffc4 	movi	r20,-1
  80d61c:	10800404 	addi	r2,r2,16
  80d620:	88a7883a 	add	r19,r17,r2
  80d624:	1d000326 	beq	r3,r20,80d634 <_malloc_r+0x3d4>
  80d628:	98c3ffc4 	addi	r3,r19,4095
  80d62c:	00bc0004 	movi	r2,-4096
  80d630:	18a6703a 	and	r19,r3,r2
  80d634:	9009883a 	mov	r4,r18
  80d638:	980b883a 	mov	r5,r19
  80d63c:	080e17c0 	call	80e17c <_sbrk_r>
  80d640:	1009883a 	mov	r4,r2
  80d644:	15000426 	beq	r2,r20,80d658 <_malloc_r+0x3f8>
  80d648:	854b883a 	add	r5,r16,r21
  80d64c:	1029883a 	mov	r20,r2
  80d650:	11405a2e 	bgeu	r2,r5,80d7bc <_malloc_r+0x55c>
  80d654:	87000c26 	beq	r16,fp,80d688 <_malloc_r+0x428>
  80d658:	e4000217 	ldw	r16,8(fp)
  80d65c:	80c00117 	ldw	r3,4(r16)
  80d660:	00bfff04 	movi	r2,-4
  80d664:	1884703a 	and	r2,r3,r2
  80d668:	14400336 	bltu	r2,r17,80d678 <_malloc_r+0x418>
  80d66c:	1449c83a 	sub	r4,r2,r17
  80d670:	008003c4 	movi	r2,15
  80d674:	113fd316 	blt	r2,r4,80d5c4 <_malloc_r+0x364>
  80d678:	9009883a 	mov	r4,r18
  80d67c:	081631c0 	call	81631c <__malloc_unlock>
  80d680:	0007883a 	mov	r3,zero
  80d684:	003f0a06 	br	80d2b0 <_malloc_r+0x50>
  80d688:	05c020b4 	movhi	r23,130
  80d68c:	bdd59604 	addi	r23,r23,22104
  80d690:	b8800017 	ldw	r2,0(r23)
  80d694:	988d883a 	add	r6,r19,r2
  80d698:	b9800015 	stw	r6,0(r23)
  80d69c:	d0e00417 	ldw	r3,-32752(gp)
  80d6a0:	00bfffc4 	movi	r2,-1
  80d6a4:	18808e26 	beq	r3,r2,80d8e0 <_malloc_r+0x680>
  80d6a8:	2145c83a 	sub	r2,r4,r5
  80d6ac:	3085883a 	add	r2,r6,r2
  80d6b0:	b8800015 	stw	r2,0(r23)
  80d6b4:	20c001cc 	andi	r3,r4,7
  80d6b8:	18005f1e 	bne	r3,zero,80d838 <_malloc_r+0x5d8>
  80d6bc:	000b883a 	mov	r5,zero
  80d6c0:	a4c5883a 	add	r2,r20,r19
  80d6c4:	1083ffcc 	andi	r2,r2,4095
  80d6c8:	00c40004 	movi	r3,4096
  80d6cc:	1887c83a 	sub	r3,r3,r2
  80d6d0:	28e7883a 	add	r19,r5,r3
  80d6d4:	9009883a 	mov	r4,r18
  80d6d8:	980b883a 	mov	r5,r19
  80d6dc:	080e17c0 	call	80e17c <_sbrk_r>
  80d6e0:	1007883a 	mov	r3,r2
  80d6e4:	00bfffc4 	movi	r2,-1
  80d6e8:	18807a26 	beq	r3,r2,80d8d4 <_malloc_r+0x674>
  80d6ec:	1d05c83a 	sub	r2,r3,r20
  80d6f0:	9885883a 	add	r2,r19,r2
  80d6f4:	10c00054 	ori	r3,r2,1
  80d6f8:	b8800017 	ldw	r2,0(r23)
  80d6fc:	a021883a 	mov	r16,r20
  80d700:	a0c00115 	stw	r3,4(r20)
  80d704:	9885883a 	add	r2,r19,r2
  80d708:	b8800015 	stw	r2,0(r23)
  80d70c:	e5000215 	stw	r20,8(fp)
  80d710:	b7003626 	beq	r22,fp,80d7ec <_malloc_r+0x58c>
  80d714:	018003c4 	movi	r6,15
  80d718:	35404b36 	bltu	r6,r21,80d848 <_malloc_r+0x5e8>
  80d71c:	00800044 	movi	r2,1
  80d720:	a0800115 	stw	r2,4(r20)
  80d724:	003fcd06 	br	80d65c <_malloc_r+0x3fc>
  80d728:	2808d27a 	srli	r4,r5,9
  80d72c:	2000371e 	bne	r4,zero,80d80c <_malloc_r+0x5ac>
  80d730:	2808d0fa 	srli	r4,r5,3
  80d734:	200690fa 	slli	r3,r4,3
  80d738:	1ad1883a 	add	r8,r3,r11
  80d73c:	41800217 	ldw	r6,8(r8)
  80d740:	41805b26 	beq	r8,r6,80d8b0 <_malloc_r+0x650>
  80d744:	30800117 	ldw	r2,4(r6)
  80d748:	00ffff04 	movi	r3,-4
  80d74c:	10c4703a 	and	r2,r2,r3
  80d750:	2880022e 	bgeu	r5,r2,80d75c <_malloc_r+0x4fc>
  80d754:	31800217 	ldw	r6,8(r6)
  80d758:	41bffa1e 	bne	r8,r6,80d744 <_malloc_r+0x4e4>
  80d75c:	32000317 	ldw	r8,12(r6)
  80d760:	39c00117 	ldw	r7,4(r7)
  80d764:	82000315 	stw	r8,12(r16)
  80d768:	81800215 	stw	r6,8(r16)
  80d76c:	070020b4 	movhi	fp,130
  80d770:	e708ce04 	addi	fp,fp,9016
  80d774:	34000315 	stw	r16,12(r6)
  80d778:	44000215 	stw	r16,8(r8)
  80d77c:	003f3e06 	br	80d478 <_malloc_r+0x218>
  80d780:	63000044 	addi	r12,r12,1
  80d784:	608000cc 	andi	r2,r12,3
  80d788:	10005d26 	beq	r2,zero,80d900 <_malloc_r+0x6a0>
  80d78c:	18c00204 	addi	r3,r3,8
  80d790:	003f5106 	br	80d4d8 <_malloc_r+0x278>
  80d794:	8089883a 	add	r4,r16,r2
  80d798:	003f6d06 	br	80d550 <_malloc_r+0x2f0>
  80d79c:	00805504 	movi	r2,340
  80d7a0:	10c02036 	bltu	r2,r3,80d824 <_malloc_r+0x5c4>
  80d7a4:	8804d3fa 	srli	r2,r17,15
  80d7a8:	11801dc4 	addi	r6,r2,119
  80d7ac:	300490fa 	slli	r2,r6,3
  80d7b0:	003ed806 	br	80d314 <_malloc_r+0xb4>
  80d7b4:	48c000c4 	addi	r3,r9,3
  80d7b8:	003f3106 	br	80d480 <_malloc_r+0x220>
  80d7bc:	05c020b4 	movhi	r23,130
  80d7c0:	bdd59604 	addi	r23,r23,22104
  80d7c4:	b8800017 	ldw	r2,0(r23)
  80d7c8:	988d883a 	add	r6,r19,r2
  80d7cc:	b9800015 	stw	r6,0(r23)
  80d7d0:	293fb21e 	bne	r5,r4,80d69c <_malloc_r+0x43c>
  80d7d4:	2083ffcc 	andi	r2,r4,4095
  80d7d8:	103fb01e 	bne	r2,zero,80d69c <_malloc_r+0x43c>
  80d7dc:	e4000217 	ldw	r16,8(fp)
  80d7e0:	9d45883a 	add	r2,r19,r21
  80d7e4:	10800054 	ori	r2,r2,1
  80d7e8:	80800115 	stw	r2,4(r16)
  80d7ec:	b8c00017 	ldw	r3,0(r23)
  80d7f0:	d0a70317 	ldw	r2,-25588(gp)
  80d7f4:	10c0012e 	bgeu	r2,r3,80d7fc <_malloc_r+0x59c>
  80d7f8:	d0e70315 	stw	r3,-25588(gp)
  80d7fc:	d0a70417 	ldw	r2,-25584(gp)
  80d800:	10ff962e 	bgeu	r2,r3,80d65c <_malloc_r+0x3fc>
  80d804:	d0e70415 	stw	r3,-25584(gp)
  80d808:	003f9406 	br	80d65c <_malloc_r+0x3fc>
  80d80c:	00800104 	movi	r2,4
  80d810:	11001e36 	bltu	r2,r4,80d88c <_malloc_r+0x62c>
  80d814:	2804d1ba 	srli	r2,r5,6
  80d818:	11000e04 	addi	r4,r2,56
  80d81c:	200690fa 	slli	r3,r4,3
  80d820:	003fc506 	br	80d738 <_malloc_r+0x4d8>
  80d824:	00815504 	movi	r2,1364
  80d828:	10c01d2e 	bgeu	r2,r3,80d8a0 <_malloc_r+0x640>
  80d82c:	01801f84 	movi	r6,126
  80d830:	0080fc04 	movi	r2,1008
  80d834:	003eb706 	br	80d314 <_malloc_r+0xb4>
  80d838:	00800204 	movi	r2,8
  80d83c:	10cbc83a 	sub	r5,r2,r3
  80d840:	2169883a 	add	r20,r4,r5
  80d844:	003f9e06 	br	80d6c0 <_malloc_r+0x460>
  80d848:	00bffe04 	movi	r2,-8
  80d84c:	a93ffd04 	addi	r4,r21,-12
  80d850:	2088703a 	and	r4,r4,r2
  80d854:	b10b883a 	add	r5,r22,r4
  80d858:	00c00144 	movi	r3,5
  80d85c:	28c00215 	stw	r3,8(r5)
  80d860:	28c00115 	stw	r3,4(r5)
  80d864:	b0800117 	ldw	r2,4(r22)
  80d868:	1080004c 	andi	r2,r2,1
  80d86c:	2084b03a 	or	r2,r4,r2
  80d870:	b0800115 	stw	r2,4(r22)
  80d874:	313fdd2e 	bgeu	r6,r4,80d7ec <_malloc_r+0x58c>
  80d878:	b1400204 	addi	r5,r22,8
  80d87c:	9009883a 	mov	r4,r18
  80d880:	081212c0 	call	81212c <_free_r>
  80d884:	e4000217 	ldw	r16,8(fp)
  80d888:	003fd806 	br	80d7ec <_malloc_r+0x58c>
  80d88c:	00800504 	movi	r2,20
  80d890:	11001536 	bltu	r2,r4,80d8e8 <_malloc_r+0x688>
  80d894:	210016c4 	addi	r4,r4,91
  80d898:	200690fa 	slli	r3,r4,3
  80d89c:	003fa606 	br	80d738 <_malloc_r+0x4d8>
  80d8a0:	8804d4ba 	srli	r2,r17,18
  80d8a4:	11801f04 	addi	r6,r2,124
  80d8a8:	300490fa 	slli	r2,r6,3
  80d8ac:	003e9906 	br	80d314 <_malloc_r+0xb4>
  80d8b0:	2009d0ba 	srai	r4,r4,2
  80d8b4:	014020b4 	movhi	r5,130
  80d8b8:	2948ce04 	addi	r5,r5,9016
  80d8bc:	00c00044 	movi	r3,1
  80d8c0:	28800117 	ldw	r2,4(r5)
  80d8c4:	1906983a 	sll	r3,r3,r4
  80d8c8:	10c4b03a 	or	r2,r2,r3
  80d8cc:	28800115 	stw	r2,4(r5)
  80d8d0:	003fa306 	br	80d760 <_malloc_r+0x500>
  80d8d4:	0027883a 	mov	r19,zero
  80d8d8:	00c00044 	movi	r3,1
  80d8dc:	003f8606 	br	80d6f8 <_malloc_r+0x498>
  80d8e0:	d1200415 	stw	r4,-32752(gp)
  80d8e4:	003f7306 	br	80d6b4 <_malloc_r+0x454>
  80d8e8:	00801504 	movi	r2,84
  80d8ec:	11001936 	bltu	r2,r4,80d954 <_malloc_r+0x6f4>
  80d8f0:	2804d33a 	srli	r2,r5,12
  80d8f4:	11001b84 	addi	r4,r2,110
  80d8f8:	200690fa 	slli	r3,r4,3
  80d8fc:	003f8e06 	br	80d738 <_malloc_r+0x4d8>
  80d900:	480b883a 	mov	r5,r9
  80d904:	6807883a 	mov	r3,r13
  80d908:	288000cc 	andi	r2,r5,3
  80d90c:	18fffe04 	addi	r3,r3,-8
  80d910:	297fffc4 	addi	r5,r5,-1
  80d914:	10001526 	beq	r2,zero,80d96c <_malloc_r+0x70c>
  80d918:	18800217 	ldw	r2,8(r3)
  80d91c:	10fffa26 	beq	r2,r3,80d908 <_malloc_r+0x6a8>
  80d920:	2109883a 	add	r4,r4,r4
  80d924:	393f1e36 	bltu	r7,r4,80d5a0 <_malloc_r+0x340>
  80d928:	203f1d26 	beq	r4,zero,80d5a0 <_malloc_r+0x340>
  80d92c:	21c4703a 	and	r2,r4,r7
  80d930:	10000226 	beq	r2,zero,80d93c <_malloc_r+0x6dc>
  80d934:	6013883a 	mov	r9,r12
  80d938:	003ee106 	br	80d4c0 <_malloc_r+0x260>
  80d93c:	2109883a 	add	r4,r4,r4
  80d940:	3904703a 	and	r2,r7,r4
  80d944:	63000104 	addi	r12,r12,4
  80d948:	103ffc26 	beq	r2,zero,80d93c <_malloc_r+0x6dc>
  80d94c:	6013883a 	mov	r9,r12
  80d950:	003edb06 	br	80d4c0 <_malloc_r+0x260>
  80d954:	00805504 	movi	r2,340
  80d958:	11000836 	bltu	r2,r4,80d97c <_malloc_r+0x71c>
  80d95c:	2804d3fa 	srli	r2,r5,15
  80d960:	11001dc4 	addi	r4,r2,119
  80d964:	200690fa 	slli	r3,r4,3
  80d968:	003f7306 	br	80d738 <_malloc_r+0x4d8>
  80d96c:	0104303a 	nor	r2,zero,r4
  80d970:	388e703a 	and	r7,r7,r2
  80d974:	e1c00115 	stw	r7,4(fp)
  80d978:	003fe906 	br	80d920 <_malloc_r+0x6c0>
  80d97c:	00815504 	movi	r2,1364
  80d980:	1100032e 	bgeu	r2,r4,80d990 <_malloc_r+0x730>
  80d984:	01001f84 	movi	r4,126
  80d988:	00c0fc04 	movi	r3,1008
  80d98c:	003f6a06 	br	80d738 <_malloc_r+0x4d8>
  80d990:	2804d4ba 	srli	r2,r5,18
  80d994:	11001f04 	addi	r4,r2,124
  80d998:	200690fa 	slli	r3,r4,3
  80d99c:	003f6606 	br	80d738 <_malloc_r+0x4d8>

0080d9a0 <memcpy>:
  80d9a0:	01c003c4 	movi	r7,15
  80d9a4:	2007883a 	mov	r3,r4
  80d9a8:	3980032e 	bgeu	r7,r6,80d9b8 <memcpy+0x18>
  80d9ac:	2904b03a 	or	r2,r5,r4
  80d9b0:	108000cc 	andi	r2,r2,3
  80d9b4:	10000926 	beq	r2,zero,80d9dc <memcpy+0x3c>
  80d9b8:	30000626 	beq	r6,zero,80d9d4 <memcpy+0x34>
  80d9bc:	30cd883a 	add	r6,r6,r3
  80d9c0:	28800003 	ldbu	r2,0(r5)
  80d9c4:	29400044 	addi	r5,r5,1
  80d9c8:	18800005 	stb	r2,0(r3)
  80d9cc:	18c00044 	addi	r3,r3,1
  80d9d0:	30fffb1e 	bne	r6,r3,80d9c0 <memcpy+0x20>
  80d9d4:	2005883a 	mov	r2,r4
  80d9d8:	f800283a 	ret
  80d9dc:	3811883a 	mov	r8,r7
  80d9e0:	200f883a 	mov	r7,r4
  80d9e4:	28c00017 	ldw	r3,0(r5)
  80d9e8:	31bffc04 	addi	r6,r6,-16
  80d9ec:	38c00015 	stw	r3,0(r7)
  80d9f0:	28800117 	ldw	r2,4(r5)
  80d9f4:	38800115 	stw	r2,4(r7)
  80d9f8:	28c00217 	ldw	r3,8(r5)
  80d9fc:	38c00215 	stw	r3,8(r7)
  80da00:	28800317 	ldw	r2,12(r5)
  80da04:	29400404 	addi	r5,r5,16
  80da08:	38800315 	stw	r2,12(r7)
  80da0c:	39c00404 	addi	r7,r7,16
  80da10:	41bff436 	bltu	r8,r6,80d9e4 <memcpy+0x44>
  80da14:	008000c4 	movi	r2,3
  80da18:	1180072e 	bgeu	r2,r6,80da38 <memcpy+0x98>
  80da1c:	1007883a 	mov	r3,r2
  80da20:	28800017 	ldw	r2,0(r5)
  80da24:	31bfff04 	addi	r6,r6,-4
  80da28:	29400104 	addi	r5,r5,4
  80da2c:	38800015 	stw	r2,0(r7)
  80da30:	39c00104 	addi	r7,r7,4
  80da34:	19bffa36 	bltu	r3,r6,80da20 <memcpy+0x80>
  80da38:	3807883a 	mov	r3,r7
  80da3c:	003fde06 	br	80d9b8 <memcpy+0x18>

0080da40 <printf>:
  80da40:	defffb04 	addi	sp,sp,-20
  80da44:	dfc00115 	stw	ra,4(sp)
  80da48:	d9400215 	stw	r5,8(sp)
  80da4c:	d9800315 	stw	r6,12(sp)
  80da50:	d9c00415 	stw	r7,16(sp)
  80da54:	008020b4 	movhi	r2,130
  80da58:	108e6f04 	addi	r2,r2,14780
  80da5c:	10c00017 	ldw	r3,0(r2)
  80da60:	200b883a 	mov	r5,r4
  80da64:	d8800204 	addi	r2,sp,8
  80da68:	19000217 	ldw	r4,8(r3)
  80da6c:	100d883a 	mov	r6,r2
  80da70:	d8800015 	stw	r2,0(sp)
  80da74:	08101840 	call	810184 <__vfprintf_internal>
  80da78:	dfc00117 	ldw	ra,4(sp)
  80da7c:	dec00504 	addi	sp,sp,20
  80da80:	f800283a 	ret

0080da84 <_printf_r>:
  80da84:	defffc04 	addi	sp,sp,-16
  80da88:	dfc00115 	stw	ra,4(sp)
  80da8c:	d9800215 	stw	r6,8(sp)
  80da90:	d9c00315 	stw	r7,12(sp)
  80da94:	280d883a 	mov	r6,r5
  80da98:	21400217 	ldw	r5,8(r4)
  80da9c:	d8c00204 	addi	r3,sp,8
  80daa0:	180f883a 	mov	r7,r3
  80daa4:	d8c00015 	stw	r3,0(sp)
  80daa8:	080e2c00 	call	80e2c0 <___vfprintf_internal_r>
  80daac:	dfc00117 	ldw	ra,4(sp)
  80dab0:	dec00404 	addi	sp,sp,16
  80dab4:	f800283a 	ret

0080dab8 <_puts_r>:
  80dab8:	defff604 	addi	sp,sp,-40
  80dabc:	dc400715 	stw	r17,28(sp)
  80dac0:	2023883a 	mov	r17,r4
  80dac4:	2809883a 	mov	r4,r5
  80dac8:	dfc00915 	stw	ra,36(sp)
  80dacc:	dcc00815 	stw	r19,32(sp)
  80dad0:	2827883a 	mov	r19,r5
  80dad4:	080e1ec0 	call	80e1ec <strlen>
  80dad8:	89400217 	ldw	r5,8(r17)
  80dadc:	00c020b4 	movhi	r3,130
  80dae0:	18c6f104 	addi	r3,r3,7108
  80dae4:	01c00044 	movi	r7,1
  80dae8:	12000044 	addi	r8,r2,1
  80daec:	d8c00515 	stw	r3,20(sp)
  80daf0:	d9c00615 	stw	r7,24(sp)
  80daf4:	d8c00304 	addi	r3,sp,12
  80daf8:	01c00084 	movi	r7,2
  80dafc:	8809883a 	mov	r4,r17
  80db00:	d80d883a 	mov	r6,sp
  80db04:	d8c00015 	stw	r3,0(sp)
  80db08:	dcc00315 	stw	r19,12(sp)
  80db0c:	da000215 	stw	r8,8(sp)
  80db10:	d9c00115 	stw	r7,4(sp)
  80db14:	d8800415 	stw	r2,16(sp)
  80db18:	08124400 	call	812440 <__sfvwrite_r>
  80db1c:	00ffffc4 	movi	r3,-1
  80db20:	10000626 	beq	r2,zero,80db3c <_puts_r+0x84>
  80db24:	1805883a 	mov	r2,r3
  80db28:	dfc00917 	ldw	ra,36(sp)
  80db2c:	dcc00817 	ldw	r19,32(sp)
  80db30:	dc400717 	ldw	r17,28(sp)
  80db34:	dec00a04 	addi	sp,sp,40
  80db38:	f800283a 	ret
  80db3c:	00c00284 	movi	r3,10
  80db40:	1805883a 	mov	r2,r3
  80db44:	dfc00917 	ldw	ra,36(sp)
  80db48:	dcc00817 	ldw	r19,32(sp)
  80db4c:	dc400717 	ldw	r17,28(sp)
  80db50:	dec00a04 	addi	sp,sp,40
  80db54:	f800283a 	ret

0080db58 <puts>:
  80db58:	008020b4 	movhi	r2,130
  80db5c:	108e6f04 	addi	r2,r2,14780
  80db60:	200b883a 	mov	r5,r4
  80db64:	11000017 	ldw	r4,0(r2)
  80db68:	080dab81 	jmpi	80dab8 <_puts_r>

0080db6c <realloc>:
  80db6c:	018020b4 	movhi	r6,130
  80db70:	318e6f04 	addi	r6,r6,14780
  80db74:	2007883a 	mov	r3,r4
  80db78:	31000017 	ldw	r4,0(r6)
  80db7c:	280d883a 	mov	r6,r5
  80db80:	180b883a 	mov	r5,r3
  80db84:	080db881 	jmpi	80db88 <_realloc_r>

0080db88 <_realloc_r>:
  80db88:	defff404 	addi	sp,sp,-48
  80db8c:	dd800815 	stw	r22,32(sp)
  80db90:	dc800415 	stw	r18,16(sp)
  80db94:	dc400315 	stw	r17,12(sp)
  80db98:	dfc00b15 	stw	ra,44(sp)
  80db9c:	df000a15 	stw	fp,40(sp)
  80dba0:	ddc00915 	stw	r23,36(sp)
  80dba4:	dd400715 	stw	r21,28(sp)
  80dba8:	dd000615 	stw	r20,24(sp)
  80dbac:	dcc00515 	stw	r19,20(sp)
  80dbb0:	dc000215 	stw	r16,8(sp)
  80dbb4:	2825883a 	mov	r18,r5
  80dbb8:	3023883a 	mov	r17,r6
  80dbbc:	202d883a 	mov	r22,r4
  80dbc0:	2800c926 	beq	r5,zero,80dee8 <_realloc_r+0x360>
  80dbc4:	08162140 	call	816214 <__malloc_lock>
  80dbc8:	943ffe04 	addi	r16,r18,-8
  80dbcc:	88c002c4 	addi	r3,r17,11
  80dbd0:	00800584 	movi	r2,22
  80dbd4:	82000117 	ldw	r8,4(r16)
  80dbd8:	10c01b2e 	bgeu	r2,r3,80dc48 <_realloc_r+0xc0>
  80dbdc:	00bffe04 	movi	r2,-8
  80dbe0:	188e703a 	and	r7,r3,r2
  80dbe4:	3839883a 	mov	fp,r7
  80dbe8:	38001a16 	blt	r7,zero,80dc54 <_realloc_r+0xcc>
  80dbec:	e4401936 	bltu	fp,r17,80dc54 <_realloc_r+0xcc>
  80dbf0:	013fff04 	movi	r4,-4
  80dbf4:	4126703a 	and	r19,r8,r4
  80dbf8:	99c02616 	blt	r19,r7,80dc94 <_realloc_r+0x10c>
  80dbfc:	802b883a 	mov	r21,r16
  80dc00:	9829883a 	mov	r20,r19
  80dc04:	84000204 	addi	r16,r16,8
  80dc08:	a80f883a 	mov	r7,r21
  80dc0c:	a70dc83a 	sub	r6,r20,fp
  80dc10:	008003c4 	movi	r2,15
  80dc14:	1180c136 	bltu	r2,r6,80df1c <_realloc_r+0x394>
  80dc18:	38800117 	ldw	r2,4(r7)
  80dc1c:	a549883a 	add	r4,r20,r21
  80dc20:	1080004c 	andi	r2,r2,1
  80dc24:	a084b03a 	or	r2,r20,r2
  80dc28:	38800115 	stw	r2,4(r7)
  80dc2c:	20c00117 	ldw	r3,4(r4)
  80dc30:	18c00054 	ori	r3,r3,1
  80dc34:	20c00115 	stw	r3,4(r4)
  80dc38:	b009883a 	mov	r4,r22
  80dc3c:	081631c0 	call	81631c <__malloc_unlock>
  80dc40:	8023883a 	mov	r17,r16
  80dc44:	00000606 	br	80dc60 <_realloc_r+0xd8>
  80dc48:	01c00404 	movi	r7,16
  80dc4c:	3839883a 	mov	fp,r7
  80dc50:	e47fe72e 	bgeu	fp,r17,80dbf0 <_realloc_r+0x68>
  80dc54:	00800304 	movi	r2,12
  80dc58:	0023883a 	mov	r17,zero
  80dc5c:	b0800015 	stw	r2,0(r22)
  80dc60:	8805883a 	mov	r2,r17
  80dc64:	dfc00b17 	ldw	ra,44(sp)
  80dc68:	df000a17 	ldw	fp,40(sp)
  80dc6c:	ddc00917 	ldw	r23,36(sp)
  80dc70:	dd800817 	ldw	r22,32(sp)
  80dc74:	dd400717 	ldw	r21,28(sp)
  80dc78:	dd000617 	ldw	r20,24(sp)
  80dc7c:	dcc00517 	ldw	r19,20(sp)
  80dc80:	dc800417 	ldw	r18,16(sp)
  80dc84:	dc400317 	ldw	r17,12(sp)
  80dc88:	dc000217 	ldw	r16,8(sp)
  80dc8c:	dec00c04 	addi	sp,sp,48
  80dc90:	f800283a 	ret
  80dc94:	008020b4 	movhi	r2,130
  80dc98:	1088ce04 	addi	r2,r2,9016
  80dc9c:	12400217 	ldw	r9,8(r2)
  80dca0:	84cd883a 	add	r6,r16,r19
  80dca4:	802b883a 	mov	r21,r16
  80dca8:	3240b926 	beq	r6,r9,80df90 <_realloc_r+0x408>
  80dcac:	31400117 	ldw	r5,4(r6)
  80dcb0:	00bfff84 	movi	r2,-2
  80dcb4:	2884703a 	and	r2,r5,r2
  80dcb8:	1185883a 	add	r2,r2,r6
  80dcbc:	10c00117 	ldw	r3,4(r2)
  80dcc0:	18c0004c 	andi	r3,r3,1
  80dcc4:	1807003a 	cmpeq	r3,r3,zero
  80dcc8:	1800a326 	beq	r3,zero,80df58 <_realloc_r+0x3d0>
  80dccc:	2908703a 	and	r4,r5,r4
  80dcd0:	9929883a 	add	r20,r19,r4
  80dcd4:	a1c0a30e 	bge	r20,r7,80df64 <_realloc_r+0x3dc>
  80dcd8:	4080004c 	andi	r2,r8,1
  80dcdc:	1000551e 	bne	r2,zero,80de34 <_realloc_r+0x2ac>
  80dce0:	80800017 	ldw	r2,0(r16)
  80dce4:	80afc83a 	sub	r23,r16,r2
  80dce8:	b8c00117 	ldw	r3,4(r23)
  80dcec:	00bfff04 	movi	r2,-4
  80dcf0:	1884703a 	and	r2,r3,r2
  80dcf4:	30002e26 	beq	r6,zero,80ddb0 <_realloc_r+0x228>
  80dcf8:	3240b926 	beq	r6,r9,80dfe0 <_realloc_r+0x458>
  80dcfc:	98a9883a 	add	r20,r19,r2
  80dd00:	2509883a 	add	r4,r4,r20
  80dd04:	d9000015 	stw	r4,0(sp)
  80dd08:	21c02a16 	blt	r4,r7,80ddb4 <_realloc_r+0x22c>
  80dd0c:	30800317 	ldw	r2,12(r6)
  80dd10:	30c00217 	ldw	r3,8(r6)
  80dd14:	01400904 	movi	r5,36
  80dd18:	99bfff04 	addi	r6,r19,-4
  80dd1c:	18800315 	stw	r2,12(r3)
  80dd20:	10c00215 	stw	r3,8(r2)
  80dd24:	b9000317 	ldw	r4,12(r23)
  80dd28:	b8800217 	ldw	r2,8(r23)
  80dd2c:	b82b883a 	mov	r21,r23
  80dd30:	bc000204 	addi	r16,r23,8
  80dd34:	20800215 	stw	r2,8(r4)
  80dd38:	11000315 	stw	r4,12(r2)
  80dd3c:	2980e436 	bltu	r5,r6,80e0d0 <_realloc_r+0x548>
  80dd40:	008004c4 	movi	r2,19
  80dd44:	9009883a 	mov	r4,r18
  80dd48:	8011883a 	mov	r8,r16
  80dd4c:	11800f2e 	bgeu	r2,r6,80dd8c <_realloc_r+0x204>
  80dd50:	90800017 	ldw	r2,0(r18)
  80dd54:	ba000404 	addi	r8,r23,16
  80dd58:	91000204 	addi	r4,r18,8
  80dd5c:	b8800215 	stw	r2,8(r23)
  80dd60:	90c00117 	ldw	r3,4(r18)
  80dd64:	008006c4 	movi	r2,27
  80dd68:	b8c00315 	stw	r3,12(r23)
  80dd6c:	1180072e 	bgeu	r2,r6,80dd8c <_realloc_r+0x204>
  80dd70:	90c00217 	ldw	r3,8(r18)
  80dd74:	ba000604 	addi	r8,r23,24
  80dd78:	91000404 	addi	r4,r18,16
  80dd7c:	b8c00415 	stw	r3,16(r23)
  80dd80:	90800317 	ldw	r2,12(r18)
  80dd84:	b8800515 	stw	r2,20(r23)
  80dd88:	3140e726 	beq	r6,r5,80e128 <_realloc_r+0x5a0>
  80dd8c:	20800017 	ldw	r2,0(r4)
  80dd90:	dd000017 	ldw	r20,0(sp)
  80dd94:	b80f883a 	mov	r7,r23
  80dd98:	40800015 	stw	r2,0(r8)
  80dd9c:	20c00117 	ldw	r3,4(r4)
  80dda0:	40c00115 	stw	r3,4(r8)
  80dda4:	20800217 	ldw	r2,8(r4)
  80dda8:	40800215 	stw	r2,8(r8)
  80ddac:	003f9706 	br	80dc0c <_realloc_r+0x84>
  80ddb0:	98a9883a 	add	r20,r19,r2
  80ddb4:	a1c01f16 	blt	r20,r7,80de34 <_realloc_r+0x2ac>
  80ddb8:	b8c00317 	ldw	r3,12(r23)
  80ddbc:	b8800217 	ldw	r2,8(r23)
  80ddc0:	99bfff04 	addi	r6,r19,-4
  80ddc4:	01400904 	movi	r5,36
  80ddc8:	b82b883a 	mov	r21,r23
  80ddcc:	18800215 	stw	r2,8(r3)
  80ddd0:	10c00315 	stw	r3,12(r2)
  80ddd4:	bc000204 	addi	r16,r23,8
  80ddd8:	2980c336 	bltu	r5,r6,80e0e8 <_realloc_r+0x560>
  80dddc:	008004c4 	movi	r2,19
  80dde0:	9009883a 	mov	r4,r18
  80dde4:	8011883a 	mov	r8,r16
  80dde8:	11800f2e 	bgeu	r2,r6,80de28 <_realloc_r+0x2a0>
  80ddec:	90800017 	ldw	r2,0(r18)
  80ddf0:	ba000404 	addi	r8,r23,16
  80ddf4:	91000204 	addi	r4,r18,8
  80ddf8:	b8800215 	stw	r2,8(r23)
  80ddfc:	90c00117 	ldw	r3,4(r18)
  80de00:	008006c4 	movi	r2,27
  80de04:	b8c00315 	stw	r3,12(r23)
  80de08:	1180072e 	bgeu	r2,r6,80de28 <_realloc_r+0x2a0>
  80de0c:	90c00217 	ldw	r3,8(r18)
  80de10:	ba000604 	addi	r8,r23,24
  80de14:	91000404 	addi	r4,r18,16
  80de18:	b8c00415 	stw	r3,16(r23)
  80de1c:	90800317 	ldw	r2,12(r18)
  80de20:	b8800515 	stw	r2,20(r23)
  80de24:	3140c726 	beq	r6,r5,80e144 <_realloc_r+0x5bc>
  80de28:	20800017 	ldw	r2,0(r4)
  80de2c:	b80f883a 	mov	r7,r23
  80de30:	003fd906 	br	80dd98 <_realloc_r+0x210>
  80de34:	880b883a 	mov	r5,r17
  80de38:	b009883a 	mov	r4,r22
  80de3c:	080d2600 	call	80d260 <_malloc_r>
  80de40:	1023883a 	mov	r17,r2
  80de44:	10002526 	beq	r2,zero,80dedc <_realloc_r+0x354>
  80de48:	80800117 	ldw	r2,4(r16)
  80de4c:	00ffff84 	movi	r3,-2
  80de50:	893ffe04 	addi	r4,r17,-8
  80de54:	10c4703a 	and	r2,r2,r3
  80de58:	8085883a 	add	r2,r16,r2
  80de5c:	20809526 	beq	r4,r2,80e0b4 <_realloc_r+0x52c>
  80de60:	99bfff04 	addi	r6,r19,-4
  80de64:	01c00904 	movi	r7,36
  80de68:	39804536 	bltu	r7,r6,80df80 <_realloc_r+0x3f8>
  80de6c:	008004c4 	movi	r2,19
  80de70:	9009883a 	mov	r4,r18
  80de74:	880b883a 	mov	r5,r17
  80de78:	11800f2e 	bgeu	r2,r6,80deb8 <_realloc_r+0x330>
  80de7c:	90800017 	ldw	r2,0(r18)
  80de80:	89400204 	addi	r5,r17,8
  80de84:	91000204 	addi	r4,r18,8
  80de88:	88800015 	stw	r2,0(r17)
  80de8c:	90c00117 	ldw	r3,4(r18)
  80de90:	008006c4 	movi	r2,27
  80de94:	88c00115 	stw	r3,4(r17)
  80de98:	1180072e 	bgeu	r2,r6,80deb8 <_realloc_r+0x330>
  80de9c:	90c00217 	ldw	r3,8(r18)
  80dea0:	89400404 	addi	r5,r17,16
  80dea4:	91000404 	addi	r4,r18,16
  80dea8:	88c00215 	stw	r3,8(r17)
  80deac:	90800317 	ldw	r2,12(r18)
  80deb0:	88800315 	stw	r2,12(r17)
  80deb4:	31c09126 	beq	r6,r7,80e0fc <_realloc_r+0x574>
  80deb8:	20800017 	ldw	r2,0(r4)
  80debc:	28800015 	stw	r2,0(r5)
  80dec0:	20c00117 	ldw	r3,4(r4)
  80dec4:	28c00115 	stw	r3,4(r5)
  80dec8:	20800217 	ldw	r2,8(r4)
  80decc:	28800215 	stw	r2,8(r5)
  80ded0:	900b883a 	mov	r5,r18
  80ded4:	b009883a 	mov	r4,r22
  80ded8:	081212c0 	call	81212c <_free_r>
  80dedc:	b009883a 	mov	r4,r22
  80dee0:	081631c0 	call	81631c <__malloc_unlock>
  80dee4:	003f5e06 	br	80dc60 <_realloc_r+0xd8>
  80dee8:	300b883a 	mov	r5,r6
  80deec:	dfc00b17 	ldw	ra,44(sp)
  80def0:	df000a17 	ldw	fp,40(sp)
  80def4:	ddc00917 	ldw	r23,36(sp)
  80def8:	dd800817 	ldw	r22,32(sp)
  80defc:	dd400717 	ldw	r21,28(sp)
  80df00:	dd000617 	ldw	r20,24(sp)
  80df04:	dcc00517 	ldw	r19,20(sp)
  80df08:	dc800417 	ldw	r18,16(sp)
  80df0c:	dc400317 	ldw	r17,12(sp)
  80df10:	dc000217 	ldw	r16,8(sp)
  80df14:	dec00c04 	addi	sp,sp,48
  80df18:	080d2601 	jmpi	80d260 <_malloc_r>
  80df1c:	38800117 	ldw	r2,4(r7)
  80df20:	e54b883a 	add	r5,fp,r21
  80df24:	31000054 	ori	r4,r6,1
  80df28:	1080004c 	andi	r2,r2,1
  80df2c:	1704b03a 	or	r2,r2,fp
  80df30:	38800115 	stw	r2,4(r7)
  80df34:	29000115 	stw	r4,4(r5)
  80df38:	2987883a 	add	r3,r5,r6
  80df3c:	18800117 	ldw	r2,4(r3)
  80df40:	29400204 	addi	r5,r5,8
  80df44:	b009883a 	mov	r4,r22
  80df48:	10800054 	ori	r2,r2,1
  80df4c:	18800115 	stw	r2,4(r3)
  80df50:	081212c0 	call	81212c <_free_r>
  80df54:	003f3806 	br	80dc38 <_realloc_r+0xb0>
  80df58:	000d883a 	mov	r6,zero
  80df5c:	0009883a 	mov	r4,zero
  80df60:	003f5d06 	br	80dcd8 <_realloc_r+0x150>
  80df64:	30c00217 	ldw	r3,8(r6)
  80df68:	30800317 	ldw	r2,12(r6)
  80df6c:	800f883a 	mov	r7,r16
  80df70:	84000204 	addi	r16,r16,8
  80df74:	10c00215 	stw	r3,8(r2)
  80df78:	18800315 	stw	r2,12(r3)
  80df7c:	003f2306 	br	80dc0c <_realloc_r+0x84>
  80df80:	8809883a 	mov	r4,r17
  80df84:	900b883a 	mov	r5,r18
  80df88:	0812d980 	call	812d98 <memmove>
  80df8c:	003fd006 	br	80ded0 <_realloc_r+0x348>
  80df90:	30800117 	ldw	r2,4(r6)
  80df94:	e0c00404 	addi	r3,fp,16
  80df98:	1108703a 	and	r4,r2,r4
  80df9c:	9905883a 	add	r2,r19,r4
  80dfa0:	10ff4d16 	blt	r2,r3,80dcd8 <_realloc_r+0x150>
  80dfa4:	1705c83a 	sub	r2,r2,fp
  80dfa8:	870b883a 	add	r5,r16,fp
  80dfac:	10800054 	ori	r2,r2,1
  80dfb0:	28800115 	stw	r2,4(r5)
  80dfb4:	80c00117 	ldw	r3,4(r16)
  80dfb8:	008020b4 	movhi	r2,130
  80dfbc:	1088ce04 	addi	r2,r2,9016
  80dfc0:	b009883a 	mov	r4,r22
  80dfc4:	18c0004c 	andi	r3,r3,1
  80dfc8:	e0c6b03a 	or	r3,fp,r3
  80dfcc:	11400215 	stw	r5,8(r2)
  80dfd0:	80c00115 	stw	r3,4(r16)
  80dfd4:	081631c0 	call	81631c <__malloc_unlock>
  80dfd8:	84400204 	addi	r17,r16,8
  80dfdc:	003f2006 	br	80dc60 <_realloc_r+0xd8>
  80dfe0:	98a9883a 	add	r20,r19,r2
  80dfe4:	2509883a 	add	r4,r4,r20
  80dfe8:	e0800404 	addi	r2,fp,16
  80dfec:	d9000115 	stw	r4,4(sp)
  80dff0:	20bf7016 	blt	r4,r2,80ddb4 <_realloc_r+0x22c>
  80dff4:	b8c00317 	ldw	r3,12(r23)
  80dff8:	b8800217 	ldw	r2,8(r23)
  80dffc:	99bfff04 	addi	r6,r19,-4
  80e000:	01400904 	movi	r5,36
  80e004:	18800215 	stw	r2,8(r3)
  80e008:	10c00315 	stw	r3,12(r2)
  80e00c:	bc400204 	addi	r17,r23,8
  80e010:	29804136 	bltu	r5,r6,80e118 <_realloc_r+0x590>
  80e014:	008004c4 	movi	r2,19
  80e018:	9009883a 	mov	r4,r18
  80e01c:	880f883a 	mov	r7,r17
  80e020:	11800f2e 	bgeu	r2,r6,80e060 <_realloc_r+0x4d8>
  80e024:	90800017 	ldw	r2,0(r18)
  80e028:	b9c00404 	addi	r7,r23,16
  80e02c:	91000204 	addi	r4,r18,8
  80e030:	b8800215 	stw	r2,8(r23)
  80e034:	90c00117 	ldw	r3,4(r18)
  80e038:	008006c4 	movi	r2,27
  80e03c:	b8c00315 	stw	r3,12(r23)
  80e040:	1180072e 	bgeu	r2,r6,80e060 <_realloc_r+0x4d8>
  80e044:	90c00217 	ldw	r3,8(r18)
  80e048:	b9c00604 	addi	r7,r23,24
  80e04c:	91000404 	addi	r4,r18,16
  80e050:	b8c00415 	stw	r3,16(r23)
  80e054:	90800317 	ldw	r2,12(r18)
  80e058:	b8800515 	stw	r2,20(r23)
  80e05c:	31404026 	beq	r6,r5,80e160 <_realloc_r+0x5d8>
  80e060:	20800017 	ldw	r2,0(r4)
  80e064:	38800015 	stw	r2,0(r7)
  80e068:	20c00117 	ldw	r3,4(r4)
  80e06c:	38c00115 	stw	r3,4(r7)
  80e070:	20800217 	ldw	r2,8(r4)
  80e074:	38800215 	stw	r2,8(r7)
  80e078:	d8c00117 	ldw	r3,4(sp)
  80e07c:	bf0b883a 	add	r5,r23,fp
  80e080:	b009883a 	mov	r4,r22
  80e084:	1f05c83a 	sub	r2,r3,fp
  80e088:	10800054 	ori	r2,r2,1
  80e08c:	28800115 	stw	r2,4(r5)
  80e090:	b8c00117 	ldw	r3,4(r23)
  80e094:	008020b4 	movhi	r2,130
  80e098:	1088ce04 	addi	r2,r2,9016
  80e09c:	11400215 	stw	r5,8(r2)
  80e0a0:	18c0004c 	andi	r3,r3,1
  80e0a4:	e0c6b03a 	or	r3,fp,r3
  80e0a8:	b8c00115 	stw	r3,4(r23)
  80e0ac:	081631c0 	call	81631c <__malloc_unlock>
  80e0b0:	003eeb06 	br	80dc60 <_realloc_r+0xd8>
  80e0b4:	20800117 	ldw	r2,4(r4)
  80e0b8:	00ffff04 	movi	r3,-4
  80e0bc:	800f883a 	mov	r7,r16
  80e0c0:	10c4703a 	and	r2,r2,r3
  80e0c4:	98a9883a 	add	r20,r19,r2
  80e0c8:	84000204 	addi	r16,r16,8
  80e0cc:	003ecf06 	br	80dc0c <_realloc_r+0x84>
  80e0d0:	900b883a 	mov	r5,r18
  80e0d4:	8009883a 	mov	r4,r16
  80e0d8:	0812d980 	call	812d98 <memmove>
  80e0dc:	dd000017 	ldw	r20,0(sp)
  80e0e0:	b80f883a 	mov	r7,r23
  80e0e4:	003ec906 	br	80dc0c <_realloc_r+0x84>
  80e0e8:	900b883a 	mov	r5,r18
  80e0ec:	8009883a 	mov	r4,r16
  80e0f0:	0812d980 	call	812d98 <memmove>
  80e0f4:	b80f883a 	mov	r7,r23
  80e0f8:	003ec406 	br	80dc0c <_realloc_r+0x84>
  80e0fc:	90c00417 	ldw	r3,16(r18)
  80e100:	89400604 	addi	r5,r17,24
  80e104:	91000604 	addi	r4,r18,24
  80e108:	88c00415 	stw	r3,16(r17)
  80e10c:	90800517 	ldw	r2,20(r18)
  80e110:	88800515 	stw	r2,20(r17)
  80e114:	003f6806 	br	80deb8 <_realloc_r+0x330>
  80e118:	900b883a 	mov	r5,r18
  80e11c:	8809883a 	mov	r4,r17
  80e120:	0812d980 	call	812d98 <memmove>
  80e124:	003fd406 	br	80e078 <_realloc_r+0x4f0>
  80e128:	90c00417 	ldw	r3,16(r18)
  80e12c:	91000604 	addi	r4,r18,24
  80e130:	ba000804 	addi	r8,r23,32
  80e134:	b8c00615 	stw	r3,24(r23)
  80e138:	90800517 	ldw	r2,20(r18)
  80e13c:	b8800715 	stw	r2,28(r23)
  80e140:	003f1206 	br	80dd8c <_realloc_r+0x204>
  80e144:	90c00417 	ldw	r3,16(r18)
  80e148:	91000604 	addi	r4,r18,24
  80e14c:	ba000804 	addi	r8,r23,32
  80e150:	b8c00615 	stw	r3,24(r23)
  80e154:	90800517 	ldw	r2,20(r18)
  80e158:	b8800715 	stw	r2,28(r23)
  80e15c:	003f3206 	br	80de28 <_realloc_r+0x2a0>
  80e160:	90c00417 	ldw	r3,16(r18)
  80e164:	91000604 	addi	r4,r18,24
  80e168:	b9c00804 	addi	r7,r23,32
  80e16c:	b8c00615 	stw	r3,24(r23)
  80e170:	90800517 	ldw	r2,20(r18)
  80e174:	b8800715 	stw	r2,28(r23)
  80e178:	003fb906 	br	80e060 <_realloc_r+0x4d8>

0080e17c <_sbrk_r>:
  80e17c:	defffd04 	addi	sp,sp,-12
  80e180:	dc000015 	stw	r16,0(sp)
  80e184:	040020b4 	movhi	r16,130
  80e188:	84157304 	addi	r16,r16,21964
  80e18c:	dc400115 	stw	r17,4(sp)
  80e190:	80000015 	stw	zero,0(r16)
  80e194:	2023883a 	mov	r17,r4
  80e198:	2809883a 	mov	r4,r5
  80e19c:	dfc00215 	stw	ra,8(sp)
  80e1a0:	0815dd80 	call	815dd8 <sbrk>
  80e1a4:	1007883a 	mov	r3,r2
  80e1a8:	00bfffc4 	movi	r2,-1
  80e1ac:	18800626 	beq	r3,r2,80e1c8 <_sbrk_r+0x4c>
  80e1b0:	1805883a 	mov	r2,r3
  80e1b4:	dfc00217 	ldw	ra,8(sp)
  80e1b8:	dc400117 	ldw	r17,4(sp)
  80e1bc:	dc000017 	ldw	r16,0(sp)
  80e1c0:	dec00304 	addi	sp,sp,12
  80e1c4:	f800283a 	ret
  80e1c8:	80800017 	ldw	r2,0(r16)
  80e1cc:	103ff826 	beq	r2,zero,80e1b0 <_sbrk_r+0x34>
  80e1d0:	88800015 	stw	r2,0(r17)
  80e1d4:	1805883a 	mov	r2,r3
  80e1d8:	dfc00217 	ldw	ra,8(sp)
  80e1dc:	dc400117 	ldw	r17,4(sp)
  80e1e0:	dc000017 	ldw	r16,0(sp)
  80e1e4:	dec00304 	addi	sp,sp,12
  80e1e8:	f800283a 	ret

0080e1ec <strlen>:
  80e1ec:	208000cc 	andi	r2,r4,3
  80e1f0:	2011883a 	mov	r8,r4
  80e1f4:	1000161e 	bne	r2,zero,80e250 <strlen+0x64>
  80e1f8:	20c00017 	ldw	r3,0(r4)
  80e1fc:	017fbff4 	movhi	r5,65279
  80e200:	297fbfc4 	addi	r5,r5,-257
  80e204:	01e02074 	movhi	r7,32897
  80e208:	39e02004 	addi	r7,r7,-32640
  80e20c:	1945883a 	add	r2,r3,r5
  80e210:	11c4703a 	and	r2,r2,r7
  80e214:	00c6303a 	nor	r3,zero,r3
  80e218:	1886703a 	and	r3,r3,r2
  80e21c:	18000c1e 	bne	r3,zero,80e250 <strlen+0x64>
  80e220:	280d883a 	mov	r6,r5
  80e224:	380b883a 	mov	r5,r7
  80e228:	21000104 	addi	r4,r4,4
  80e22c:	20800017 	ldw	r2,0(r4)
  80e230:	1187883a 	add	r3,r2,r6
  80e234:	1946703a 	and	r3,r3,r5
  80e238:	0084303a 	nor	r2,zero,r2
  80e23c:	10c4703a 	and	r2,r2,r3
  80e240:	103ff926 	beq	r2,zero,80e228 <strlen+0x3c>
  80e244:	20800007 	ldb	r2,0(r4)
  80e248:	10000326 	beq	r2,zero,80e258 <strlen+0x6c>
  80e24c:	21000044 	addi	r4,r4,1
  80e250:	20800007 	ldb	r2,0(r4)
  80e254:	103ffd1e 	bne	r2,zero,80e24c <strlen+0x60>
  80e258:	2205c83a 	sub	r2,r4,r8
  80e25c:	f800283a 	ret

0080e260 <_times_r>:
  80e260:	2809883a 	mov	r4,r5
  80e264:	0815e941 	jmpi	815e94 <times>

0080e268 <__sprint_r>:
  80e268:	30800217 	ldw	r2,8(r6)
  80e26c:	defffe04 	addi	sp,sp,-8
  80e270:	dc000015 	stw	r16,0(sp)
  80e274:	dfc00115 	stw	ra,4(sp)
  80e278:	3021883a 	mov	r16,r6
  80e27c:	0007883a 	mov	r3,zero
  80e280:	1000061e 	bne	r2,zero,80e29c <__sprint_r+0x34>
  80e284:	1805883a 	mov	r2,r3
  80e288:	30000115 	stw	zero,4(r6)
  80e28c:	dfc00117 	ldw	ra,4(sp)
  80e290:	dc000017 	ldw	r16,0(sp)
  80e294:	dec00204 	addi	sp,sp,8
  80e298:	f800283a 	ret
  80e29c:	08124400 	call	812440 <__sfvwrite_r>
  80e2a0:	1007883a 	mov	r3,r2
  80e2a4:	1805883a 	mov	r2,r3
  80e2a8:	80000115 	stw	zero,4(r16)
  80e2ac:	80000215 	stw	zero,8(r16)
  80e2b0:	dfc00117 	ldw	ra,4(sp)
  80e2b4:	dc000017 	ldw	r16,0(sp)
  80e2b8:	dec00204 	addi	sp,sp,8
  80e2bc:	f800283a 	ret

0080e2c0 <___vfprintf_internal_r>:
  80e2c0:	defea404 	addi	sp,sp,-1392
  80e2c4:	dd815815 	stw	r22,1376(sp)
  80e2c8:	dc015215 	stw	r16,1352(sp)
  80e2cc:	d9c15115 	stw	r7,1348(sp)
  80e2d0:	dfc15b15 	stw	ra,1388(sp)
  80e2d4:	df015a15 	stw	fp,1384(sp)
  80e2d8:	ddc15915 	stw	r23,1380(sp)
  80e2dc:	dd415715 	stw	r21,1372(sp)
  80e2e0:	dd015615 	stw	r20,1368(sp)
  80e2e4:	dcc15515 	stw	r19,1364(sp)
  80e2e8:	dc815415 	stw	r18,1360(sp)
  80e2ec:	dc415315 	stw	r17,1356(sp)
  80e2f0:	282d883a 	mov	r22,r5
  80e2f4:	3021883a 	mov	r16,r6
  80e2f8:	d9014f15 	stw	r4,1340(sp)
  80e2fc:	0812a640 	call	812a64 <_localeconv_r>
  80e300:	10800017 	ldw	r2,0(r2)
  80e304:	d9c15117 	ldw	r7,1348(sp)
  80e308:	d8814915 	stw	r2,1316(sp)
  80e30c:	d8814f17 	ldw	r2,1340(sp)
  80e310:	10000226 	beq	r2,zero,80e31c <___vfprintf_internal_r+0x5c>
  80e314:	10800e17 	ldw	r2,56(r2)
  80e318:	10020d26 	beq	r2,zero,80eb50 <___vfprintf_internal_r+0x890>
  80e31c:	b080030b 	ldhu	r2,12(r22)
  80e320:	1080020c 	andi	r2,r2,8
  80e324:	10020e26 	beq	r2,zero,80eb60 <___vfprintf_internal_r+0x8a0>
  80e328:	b0800417 	ldw	r2,16(r22)
  80e32c:	10020c26 	beq	r2,zero,80eb60 <___vfprintf_internal_r+0x8a0>
  80e330:	b200030b 	ldhu	r8,12(r22)
  80e334:	00800284 	movi	r2,10
  80e338:	40c0068c 	andi	r3,r8,26
  80e33c:	18802f1e 	bne	r3,r2,80e3fc <___vfprintf_internal_r+0x13c>
  80e340:	b080038f 	ldh	r2,14(r22)
  80e344:	10002d16 	blt	r2,zero,80e3fc <___vfprintf_internal_r+0x13c>
  80e348:	b240038b 	ldhu	r9,14(r22)
  80e34c:	b2800717 	ldw	r10,28(r22)
  80e350:	b2c00917 	ldw	r11,36(r22)
  80e354:	d9014f17 	ldw	r4,1340(sp)
  80e358:	dc402904 	addi	r17,sp,164
  80e35c:	d8804004 	addi	r2,sp,256
  80e360:	00c10004 	movi	r3,1024
  80e364:	423fff4c 	andi	r8,r8,65533
  80e368:	800d883a 	mov	r6,r16
  80e36c:	880b883a 	mov	r5,r17
  80e370:	da002c0d 	sth	r8,176(sp)
  80e374:	da402c8d 	sth	r9,178(sp)
  80e378:	da803015 	stw	r10,192(sp)
  80e37c:	dac03215 	stw	r11,200(sp)
  80e380:	d8802d15 	stw	r2,180(sp)
  80e384:	d8c02e15 	stw	r3,184(sp)
  80e388:	d8802915 	stw	r2,164(sp)
  80e38c:	d8c02b15 	stw	r3,172(sp)
  80e390:	d8002f15 	stw	zero,188(sp)
  80e394:	080e2c00 	call	80e2c0 <___vfprintf_internal_r>
  80e398:	d8814b15 	stw	r2,1324(sp)
  80e39c:	10000416 	blt	r2,zero,80e3b0 <___vfprintf_internal_r+0xf0>
  80e3a0:	d9014f17 	ldw	r4,1340(sp)
  80e3a4:	880b883a 	mov	r5,r17
  80e3a8:	0811adc0 	call	811adc <_fflush_r>
  80e3ac:	1002321e 	bne	r2,zero,80ec78 <___vfprintf_internal_r+0x9b8>
  80e3b0:	d8802c0b 	ldhu	r2,176(sp)
  80e3b4:	1080100c 	andi	r2,r2,64
  80e3b8:	10000326 	beq	r2,zero,80e3c8 <___vfprintf_internal_r+0x108>
  80e3bc:	b080030b 	ldhu	r2,12(r22)
  80e3c0:	10801014 	ori	r2,r2,64
  80e3c4:	b080030d 	sth	r2,12(r22)
  80e3c8:	d8814b17 	ldw	r2,1324(sp)
  80e3cc:	dfc15b17 	ldw	ra,1388(sp)
  80e3d0:	df015a17 	ldw	fp,1384(sp)
  80e3d4:	ddc15917 	ldw	r23,1380(sp)
  80e3d8:	dd815817 	ldw	r22,1376(sp)
  80e3dc:	dd415717 	ldw	r21,1372(sp)
  80e3e0:	dd015617 	ldw	r20,1368(sp)
  80e3e4:	dcc15517 	ldw	r19,1364(sp)
  80e3e8:	dc815417 	ldw	r18,1360(sp)
  80e3ec:	dc415317 	ldw	r17,1356(sp)
  80e3f0:	dc015217 	ldw	r16,1352(sp)
  80e3f4:	dec15c04 	addi	sp,sp,1392
  80e3f8:	f800283a 	ret
  80e3fc:	0005883a 	mov	r2,zero
  80e400:	0007883a 	mov	r3,zero
  80e404:	dd401904 	addi	r21,sp,100
  80e408:	d8814215 	stw	r2,1288(sp)
  80e40c:	802f883a 	mov	r23,r16
  80e410:	d8c14315 	stw	r3,1292(sp)
  80e414:	d8014b15 	stw	zero,1324(sp)
  80e418:	d8014815 	stw	zero,1312(sp)
  80e41c:	d8014415 	stw	zero,1296(sp)
  80e420:	d8014715 	stw	zero,1308(sp)
  80e424:	dd400c15 	stw	r21,48(sp)
  80e428:	d8000e15 	stw	zero,56(sp)
  80e42c:	d8000d15 	stw	zero,52(sp)
  80e430:	b8800007 	ldb	r2,0(r23)
  80e434:	10001926 	beq	r2,zero,80e49c <___vfprintf_internal_r+0x1dc>
  80e438:	00c00944 	movi	r3,37
  80e43c:	10c01726 	beq	r2,r3,80e49c <___vfprintf_internal_r+0x1dc>
  80e440:	b821883a 	mov	r16,r23
  80e444:	00000106 	br	80e44c <___vfprintf_internal_r+0x18c>
  80e448:	10c00326 	beq	r2,r3,80e458 <___vfprintf_internal_r+0x198>
  80e44c:	84000044 	addi	r16,r16,1
  80e450:	80800007 	ldb	r2,0(r16)
  80e454:	103ffc1e 	bne	r2,zero,80e448 <___vfprintf_internal_r+0x188>
  80e458:	85e7c83a 	sub	r19,r16,r23
  80e45c:	98000e26 	beq	r19,zero,80e498 <___vfprintf_internal_r+0x1d8>
  80e460:	dc800e17 	ldw	r18,56(sp)
  80e464:	dc400d17 	ldw	r17,52(sp)
  80e468:	008001c4 	movi	r2,7
  80e46c:	94e5883a 	add	r18,r18,r19
  80e470:	8c400044 	addi	r17,r17,1
  80e474:	adc00015 	stw	r23,0(r21)
  80e478:	dc800e15 	stw	r18,56(sp)
  80e47c:	acc00115 	stw	r19,4(r21)
  80e480:	dc400d15 	stw	r17,52(sp)
  80e484:	14428b16 	blt	r2,r17,80eeb4 <___vfprintf_internal_r+0xbf4>
  80e488:	ad400204 	addi	r21,r21,8
  80e48c:	d9014b17 	ldw	r4,1324(sp)
  80e490:	24c9883a 	add	r4,r4,r19
  80e494:	d9014b15 	stw	r4,1324(sp)
  80e498:	802f883a 	mov	r23,r16
  80e49c:	b8800007 	ldb	r2,0(r23)
  80e4a0:	10013c26 	beq	r2,zero,80e994 <___vfprintf_internal_r+0x6d4>
  80e4a4:	bdc00044 	addi	r23,r23,1
  80e4a8:	d8000405 	stb	zero,16(sp)
  80e4ac:	b8c00007 	ldb	r3,0(r23)
  80e4b0:	04ffffc4 	movi	r19,-1
  80e4b4:	d8014c15 	stw	zero,1328(sp)
  80e4b8:	d8014a15 	stw	zero,1320(sp)
  80e4bc:	d8c14d15 	stw	r3,1332(sp)
  80e4c0:	bdc00044 	addi	r23,r23,1
  80e4c4:	d9414d17 	ldw	r5,1332(sp)
  80e4c8:	00801604 	movi	r2,88
  80e4cc:	28fff804 	addi	r3,r5,-32
  80e4d0:	10c06036 	bltu	r2,r3,80e654 <___vfprintf_internal_r+0x394>
  80e4d4:	18c5883a 	add	r2,r3,r3
  80e4d8:	1085883a 	add	r2,r2,r2
  80e4dc:	00c02074 	movhi	r3,129
  80e4e0:	18f93c04 	addi	r3,r3,-6928
  80e4e4:	10c5883a 	add	r2,r2,r3
  80e4e8:	11000017 	ldw	r4,0(r2)
  80e4ec:	2000683a 	jmp	r4
  80e4f0:	0080f464 	muli	r2,zero,977
  80e4f4:	0080e654 	movui	r2,921
  80e4f8:	0080e654 	movui	r2,921
  80e4fc:	0080f450 	cmplti	r2,zero,977
  80e500:	0080e654 	movui	r2,921
  80e504:	0080e654 	movui	r2,921
  80e508:	0080e654 	movui	r2,921
  80e50c:	0080e654 	movui	r2,921
  80e510:	0080e654 	movui	r2,921
  80e514:	0080e654 	movui	r2,921
  80e518:	0080f230 	cmpltui	r2,zero,968
  80e51c:	0080f440 	call	80f44 <OSCtxSw_SWITCH_PC+0x80f04>
  80e520:	0080e654 	movui	r2,921
  80e524:	0080f248 	cmpgei	r2,zero,969
  80e528:	0080f4e8 	cmpgeui	r2,zero,979
  80e52c:	0080e654 	movui	r2,921
  80e530:	0080f4d4 	movui	r2,979
  80e534:	0080f490 	cmplti	r2,zero,978
  80e538:	0080f490 	cmplti	r2,zero,978
  80e53c:	0080f490 	cmplti	r2,zero,978
  80e540:	0080f490 	cmplti	r2,zero,978
  80e544:	0080f490 	cmplti	r2,zero,978
  80e548:	0080f490 	cmplti	r2,zero,978
  80e54c:	0080f490 	cmplti	r2,zero,978
  80e550:	0080f490 	cmplti	r2,zero,978
  80e554:	0080f490 	cmplti	r2,zero,978
  80e558:	0080e654 	movui	r2,921
  80e55c:	0080e654 	movui	r2,921
  80e560:	0080e654 	movui	r2,921
  80e564:	0080e654 	movui	r2,921
  80e568:	0080e654 	movui	r2,921
  80e56c:	0080e654 	movui	r2,921
  80e570:	0080e654 	movui	r2,921
  80e574:	0080e654 	movui	r2,921
  80e578:	0080e654 	movui	r2,921
  80e57c:	0080e654 	movui	r2,921
  80e580:	0080ecac 	andhi	r2,zero,946
  80e584:	0080f318 	cmpnei	r2,zero,972
  80e588:	0080e654 	movui	r2,921
  80e58c:	0080f318 	cmpnei	r2,zero,972
  80e590:	0080e654 	movui	r2,921
  80e594:	0080e654 	movui	r2,921
  80e598:	0080e654 	movui	r2,921
  80e59c:	0080e654 	movui	r2,921
  80e5a0:	0080f47c 	xorhi	r2,zero,977
  80e5a4:	0080e654 	movui	r2,921
  80e5a8:	0080e654 	movui	r2,921
  80e5ac:	0080ed60 	cmpeqi	r2,zero,949
  80e5b0:	0080e654 	movui	r2,921
  80e5b4:	0080e654 	movui	r2,921
  80e5b8:	0080e654 	movui	r2,921
  80e5bc:	0080e654 	movui	r2,921
  80e5c0:	0080e654 	movui	r2,921
  80e5c4:	0080edac 	andhi	r2,zero,950
  80e5c8:	0080e654 	movui	r2,921
  80e5cc:	0080e654 	movui	r2,921
  80e5d0:	0080f3cc 	andi	r2,zero,975
  80e5d4:	0080e654 	movui	r2,921
  80e5d8:	0080e654 	movui	r2,921
  80e5dc:	0080e654 	movui	r2,921
  80e5e0:	0080e654 	movui	r2,921
  80e5e4:	0080e654 	movui	r2,921
  80e5e8:	0080e654 	movui	r2,921
  80e5ec:	0080e654 	movui	r2,921
  80e5f0:	0080e654 	movui	r2,921
  80e5f4:	0080e654 	movui	r2,921
  80e5f8:	0080e654 	movui	r2,921
  80e5fc:	0080f3a0 	cmpeqi	r2,zero,974
  80e600:	0080ecb8 	rdprs	r2,zero,946
  80e604:	0080f318 	cmpnei	r2,zero,972
  80e608:	0080f318 	cmpnei	r2,zero,972
  80e60c:	0080f318 	cmpnei	r2,zero,972
  80e610:	0080f304 	movi	r2,972
  80e614:	0080ecb8 	rdprs	r2,zero,946
  80e618:	0080e654 	movui	r2,921
  80e61c:	0080e654 	movui	r2,921
  80e620:	0080f28c 	andi	r2,zero,970
  80e624:	0080e654 	movui	r2,921
  80e628:	0080f25c 	xori	r2,zero,969
  80e62c:	0080ed6c 	andhi	r2,zero,949
  80e630:	0080f2bc 	xorhi	r2,zero,970
  80e634:	0080f2a8 	cmpgeui	r2,zero,970
  80e638:	0080e654 	movui	r2,921
  80e63c:	0080f550 	cmplti	r2,zero,981
  80e640:	0080e654 	movui	r2,921
  80e644:	0080edb8 	rdprs	r2,zero,950
  80e648:	0080e654 	movui	r2,921
  80e64c:	0080e654 	movui	r2,921
  80e650:	0080f430 	cmpltui	r2,zero,976
  80e654:	d9014d17 	ldw	r4,1332(sp)
  80e658:	2000ce26 	beq	r4,zero,80e994 <___vfprintf_internal_r+0x6d4>
  80e65c:	01400044 	movi	r5,1
  80e660:	d9800f04 	addi	r6,sp,60
  80e664:	d9c14015 	stw	r7,1280(sp)
  80e668:	d9414515 	stw	r5,1300(sp)
  80e66c:	d9814115 	stw	r6,1284(sp)
  80e670:	280f883a 	mov	r7,r5
  80e674:	d9000f05 	stb	r4,60(sp)
  80e678:	d8000405 	stb	zero,16(sp)
  80e67c:	d8014615 	stw	zero,1304(sp)
  80e680:	d8c14c17 	ldw	r3,1328(sp)
  80e684:	1880008c 	andi	r2,r3,2
  80e688:	1005003a 	cmpeq	r2,r2,zero
  80e68c:	d8815015 	stw	r2,1344(sp)
  80e690:	1000031e 	bne	r2,zero,80e6a0 <___vfprintf_internal_r+0x3e0>
  80e694:	d9014517 	ldw	r4,1300(sp)
  80e698:	21000084 	addi	r4,r4,2
  80e69c:	d9014515 	stw	r4,1300(sp)
  80e6a0:	d9414c17 	ldw	r5,1328(sp)
  80e6a4:	2940210c 	andi	r5,r5,132
  80e6a8:	d9414e15 	stw	r5,1336(sp)
  80e6ac:	28002d1e 	bne	r5,zero,80e764 <___vfprintf_internal_r+0x4a4>
  80e6b0:	d9814a17 	ldw	r6,1320(sp)
  80e6b4:	d8814517 	ldw	r2,1300(sp)
  80e6b8:	30a1c83a 	sub	r16,r6,r2
  80e6bc:	0400290e 	bge	zero,r16,80e764 <___vfprintf_internal_r+0x4a4>
  80e6c0:	00800404 	movi	r2,16
  80e6c4:	14045e0e 	bge	r2,r16,80f840 <___vfprintf_internal_r+0x1580>
  80e6c8:	dc800e17 	ldw	r18,56(sp)
  80e6cc:	dc400d17 	ldw	r17,52(sp)
  80e6d0:	1027883a 	mov	r19,r2
  80e6d4:	070020b4 	movhi	fp,130
  80e6d8:	e7070c84 	addi	fp,fp,7218
  80e6dc:	050001c4 	movi	r20,7
  80e6e0:	00000306 	br	80e6f0 <___vfprintf_internal_r+0x430>
  80e6e4:	843ffc04 	addi	r16,r16,-16
  80e6e8:	ad400204 	addi	r21,r21,8
  80e6ec:	9c00130e 	bge	r19,r16,80e73c <___vfprintf_internal_r+0x47c>
  80e6f0:	94800404 	addi	r18,r18,16
  80e6f4:	8c400044 	addi	r17,r17,1
  80e6f8:	af000015 	stw	fp,0(r21)
  80e6fc:	acc00115 	stw	r19,4(r21)
  80e700:	dc800e15 	stw	r18,56(sp)
  80e704:	dc400d15 	stw	r17,52(sp)
  80e708:	a47ff60e 	bge	r20,r17,80e6e4 <___vfprintf_internal_r+0x424>
  80e70c:	d9014f17 	ldw	r4,1340(sp)
  80e710:	b00b883a 	mov	r5,r22
  80e714:	d9800c04 	addi	r6,sp,48
  80e718:	d9c15115 	stw	r7,1348(sp)
  80e71c:	080e2680 	call	80e268 <__sprint_r>
  80e720:	d9c15117 	ldw	r7,1348(sp)
  80e724:	10009e1e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80e728:	843ffc04 	addi	r16,r16,-16
  80e72c:	dc800e17 	ldw	r18,56(sp)
  80e730:	dc400d17 	ldw	r17,52(sp)
  80e734:	dd401904 	addi	r21,sp,100
  80e738:	9c3fed16 	blt	r19,r16,80e6f0 <___vfprintf_internal_r+0x430>
  80e73c:	9425883a 	add	r18,r18,r16
  80e740:	8c400044 	addi	r17,r17,1
  80e744:	008001c4 	movi	r2,7
  80e748:	af000015 	stw	fp,0(r21)
  80e74c:	ac000115 	stw	r16,4(r21)
  80e750:	dc800e15 	stw	r18,56(sp)
  80e754:	dc400d15 	stw	r17,52(sp)
  80e758:	1441f516 	blt	r2,r17,80ef30 <___vfprintf_internal_r+0xc70>
  80e75c:	ad400204 	addi	r21,r21,8
  80e760:	00000206 	br	80e76c <___vfprintf_internal_r+0x4ac>
  80e764:	dc800e17 	ldw	r18,56(sp)
  80e768:	dc400d17 	ldw	r17,52(sp)
  80e76c:	d8800407 	ldb	r2,16(sp)
  80e770:	10000b26 	beq	r2,zero,80e7a0 <___vfprintf_internal_r+0x4e0>
  80e774:	00800044 	movi	r2,1
  80e778:	94800044 	addi	r18,r18,1
  80e77c:	8c400044 	addi	r17,r17,1
  80e780:	a8800115 	stw	r2,4(r21)
  80e784:	d8c00404 	addi	r3,sp,16
  80e788:	008001c4 	movi	r2,7
  80e78c:	a8c00015 	stw	r3,0(r21)
  80e790:	dc800e15 	stw	r18,56(sp)
  80e794:	dc400d15 	stw	r17,52(sp)
  80e798:	1441da16 	blt	r2,r17,80ef04 <___vfprintf_internal_r+0xc44>
  80e79c:	ad400204 	addi	r21,r21,8
  80e7a0:	d9015017 	ldw	r4,1344(sp)
  80e7a4:	20000b1e 	bne	r4,zero,80e7d4 <___vfprintf_internal_r+0x514>
  80e7a8:	d8800444 	addi	r2,sp,17
  80e7ac:	94800084 	addi	r18,r18,2
  80e7b0:	8c400044 	addi	r17,r17,1
  80e7b4:	a8800015 	stw	r2,0(r21)
  80e7b8:	00c00084 	movi	r3,2
  80e7bc:	008001c4 	movi	r2,7
  80e7c0:	a8c00115 	stw	r3,4(r21)
  80e7c4:	dc800e15 	stw	r18,56(sp)
  80e7c8:	dc400d15 	stw	r17,52(sp)
  80e7cc:	1441c216 	blt	r2,r17,80eed8 <___vfprintf_internal_r+0xc18>
  80e7d0:	ad400204 	addi	r21,r21,8
  80e7d4:	d9414e17 	ldw	r5,1336(sp)
  80e7d8:	00802004 	movi	r2,128
  80e7dc:	2880b126 	beq	r5,r2,80eaa4 <___vfprintf_internal_r+0x7e4>
  80e7e0:	d8c14617 	ldw	r3,1304(sp)
  80e7e4:	19e1c83a 	sub	r16,r3,r7
  80e7e8:	0400260e 	bge	zero,r16,80e884 <___vfprintf_internal_r+0x5c4>
  80e7ec:	00800404 	movi	r2,16
  80e7f0:	1403cf0e 	bge	r2,r16,80f730 <___vfprintf_internal_r+0x1470>
  80e7f4:	1027883a 	mov	r19,r2
  80e7f8:	070020b4 	movhi	fp,130
  80e7fc:	e7070884 	addi	fp,fp,7202
  80e800:	050001c4 	movi	r20,7
  80e804:	00000306 	br	80e814 <___vfprintf_internal_r+0x554>
  80e808:	843ffc04 	addi	r16,r16,-16
  80e80c:	ad400204 	addi	r21,r21,8
  80e810:	9c00130e 	bge	r19,r16,80e860 <___vfprintf_internal_r+0x5a0>
  80e814:	94800404 	addi	r18,r18,16
  80e818:	8c400044 	addi	r17,r17,1
  80e81c:	af000015 	stw	fp,0(r21)
  80e820:	acc00115 	stw	r19,4(r21)
  80e824:	dc800e15 	stw	r18,56(sp)
  80e828:	dc400d15 	stw	r17,52(sp)
  80e82c:	a47ff60e 	bge	r20,r17,80e808 <___vfprintf_internal_r+0x548>
  80e830:	d9014f17 	ldw	r4,1340(sp)
  80e834:	b00b883a 	mov	r5,r22
  80e838:	d9800c04 	addi	r6,sp,48
  80e83c:	d9c15115 	stw	r7,1348(sp)
  80e840:	080e2680 	call	80e268 <__sprint_r>
  80e844:	d9c15117 	ldw	r7,1348(sp)
  80e848:	1000551e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80e84c:	843ffc04 	addi	r16,r16,-16
  80e850:	dc800e17 	ldw	r18,56(sp)
  80e854:	dc400d17 	ldw	r17,52(sp)
  80e858:	dd401904 	addi	r21,sp,100
  80e85c:	9c3fed16 	blt	r19,r16,80e814 <___vfprintf_internal_r+0x554>
  80e860:	9425883a 	add	r18,r18,r16
  80e864:	8c400044 	addi	r17,r17,1
  80e868:	008001c4 	movi	r2,7
  80e86c:	af000015 	stw	fp,0(r21)
  80e870:	ac000115 	stw	r16,4(r21)
  80e874:	dc800e15 	stw	r18,56(sp)
  80e878:	dc400d15 	stw	r17,52(sp)
  80e87c:	14418216 	blt	r2,r17,80ee88 <___vfprintf_internal_r+0xbc8>
  80e880:	ad400204 	addi	r21,r21,8
  80e884:	d9014c17 	ldw	r4,1328(sp)
  80e888:	2080400c 	andi	r2,r4,256
  80e88c:	10004a1e 	bne	r2,zero,80e9b8 <___vfprintf_internal_r+0x6f8>
  80e890:	d9414117 	ldw	r5,1284(sp)
  80e894:	91e5883a 	add	r18,r18,r7
  80e898:	8c400044 	addi	r17,r17,1
  80e89c:	008001c4 	movi	r2,7
  80e8a0:	a9400015 	stw	r5,0(r21)
  80e8a4:	a9c00115 	stw	r7,4(r21)
  80e8a8:	dc800e15 	stw	r18,56(sp)
  80e8ac:	dc400d15 	stw	r17,52(sp)
  80e8b0:	14416716 	blt	r2,r17,80ee50 <___vfprintf_internal_r+0xb90>
  80e8b4:	a8c00204 	addi	r3,r21,8
  80e8b8:	d9814c17 	ldw	r6,1328(sp)
  80e8bc:	3080010c 	andi	r2,r6,4
  80e8c0:	10002826 	beq	r2,zero,80e964 <___vfprintf_internal_r+0x6a4>
  80e8c4:	d8814a17 	ldw	r2,1320(sp)
  80e8c8:	d9014517 	ldw	r4,1300(sp)
  80e8cc:	1121c83a 	sub	r16,r2,r4
  80e8d0:	0400240e 	bge	zero,r16,80e964 <___vfprintf_internal_r+0x6a4>
  80e8d4:	00800404 	movi	r2,16
  80e8d8:	1404550e 	bge	r2,r16,80fa30 <___vfprintf_internal_r+0x1770>
  80e8dc:	dc400d17 	ldw	r17,52(sp)
  80e8e0:	1027883a 	mov	r19,r2
  80e8e4:	070020b4 	movhi	fp,130
  80e8e8:	e7070c84 	addi	fp,fp,7218
  80e8ec:	050001c4 	movi	r20,7
  80e8f0:	00000306 	br	80e900 <___vfprintf_internal_r+0x640>
  80e8f4:	843ffc04 	addi	r16,r16,-16
  80e8f8:	18c00204 	addi	r3,r3,8
  80e8fc:	9c00110e 	bge	r19,r16,80e944 <___vfprintf_internal_r+0x684>
  80e900:	94800404 	addi	r18,r18,16
  80e904:	8c400044 	addi	r17,r17,1
  80e908:	1f000015 	stw	fp,0(r3)
  80e90c:	1cc00115 	stw	r19,4(r3)
  80e910:	dc800e15 	stw	r18,56(sp)
  80e914:	dc400d15 	stw	r17,52(sp)
  80e918:	a47ff60e 	bge	r20,r17,80e8f4 <___vfprintf_internal_r+0x634>
  80e91c:	d9014f17 	ldw	r4,1340(sp)
  80e920:	b00b883a 	mov	r5,r22
  80e924:	d9800c04 	addi	r6,sp,48
  80e928:	080e2680 	call	80e268 <__sprint_r>
  80e92c:	10001c1e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80e930:	843ffc04 	addi	r16,r16,-16
  80e934:	dc800e17 	ldw	r18,56(sp)
  80e938:	dc400d17 	ldw	r17,52(sp)
  80e93c:	d8c01904 	addi	r3,sp,100
  80e940:	9c3fef16 	blt	r19,r16,80e900 <___vfprintf_internal_r+0x640>
  80e944:	9425883a 	add	r18,r18,r16
  80e948:	8c400044 	addi	r17,r17,1
  80e94c:	008001c4 	movi	r2,7
  80e950:	1f000015 	stw	fp,0(r3)
  80e954:	1c000115 	stw	r16,4(r3)
  80e958:	dc800e15 	stw	r18,56(sp)
  80e95c:	dc400d15 	stw	r17,52(sp)
  80e960:	1440cb16 	blt	r2,r17,80ec90 <___vfprintf_internal_r+0x9d0>
  80e964:	d8814a17 	ldw	r2,1320(sp)
  80e968:	d9414517 	ldw	r5,1300(sp)
  80e96c:	1140010e 	bge	r2,r5,80e974 <___vfprintf_internal_r+0x6b4>
  80e970:	2805883a 	mov	r2,r5
  80e974:	d9814b17 	ldw	r6,1324(sp)
  80e978:	308d883a 	add	r6,r6,r2
  80e97c:	d9814b15 	stw	r6,1324(sp)
  80e980:	90013b1e 	bne	r18,zero,80ee70 <___vfprintf_internal_r+0xbb0>
  80e984:	d9c14017 	ldw	r7,1280(sp)
  80e988:	dd401904 	addi	r21,sp,100
  80e98c:	d8000d15 	stw	zero,52(sp)
  80e990:	003ea706 	br	80e430 <___vfprintf_internal_r+0x170>
  80e994:	d8800e17 	ldw	r2,56(sp)
  80e998:	1005451e 	bne	r2,zero,80feb0 <___vfprintf_internal_r+0x1bf0>
  80e99c:	d8000d15 	stw	zero,52(sp)
  80e9a0:	b080030b 	ldhu	r2,12(r22)
  80e9a4:	1080100c 	andi	r2,r2,64
  80e9a8:	103e8726 	beq	r2,zero,80e3c8 <___vfprintf_internal_r+0x108>
  80e9ac:	00bfffc4 	movi	r2,-1
  80e9b0:	d8814b15 	stw	r2,1324(sp)
  80e9b4:	003e8406 	br	80e3c8 <___vfprintf_internal_r+0x108>
  80e9b8:	d9814d17 	ldw	r6,1332(sp)
  80e9bc:	00801944 	movi	r2,101
  80e9c0:	11806e16 	blt	r2,r6,80eb7c <___vfprintf_internal_r+0x8bc>
  80e9c4:	d9414717 	ldw	r5,1308(sp)
  80e9c8:	00c00044 	movi	r3,1
  80e9cc:	1943490e 	bge	r3,r5,80f6f4 <___vfprintf_internal_r+0x1434>
  80e9d0:	d8814117 	ldw	r2,1284(sp)
  80e9d4:	94800044 	addi	r18,r18,1
  80e9d8:	8c400044 	addi	r17,r17,1
  80e9dc:	a8800015 	stw	r2,0(r21)
  80e9e0:	008001c4 	movi	r2,7
  80e9e4:	a8c00115 	stw	r3,4(r21)
  80e9e8:	dc800e15 	stw	r18,56(sp)
  80e9ec:	dc400d15 	stw	r17,52(sp)
  80e9f0:	1441ca16 	blt	r2,r17,80f11c <___vfprintf_internal_r+0xe5c>
  80e9f4:	a8c00204 	addi	r3,r21,8
  80e9f8:	d9014917 	ldw	r4,1316(sp)
  80e9fc:	00800044 	movi	r2,1
  80ea00:	94800044 	addi	r18,r18,1
  80ea04:	8c400044 	addi	r17,r17,1
  80ea08:	18800115 	stw	r2,4(r3)
  80ea0c:	008001c4 	movi	r2,7
  80ea10:	19000015 	stw	r4,0(r3)
  80ea14:	dc800e15 	stw	r18,56(sp)
  80ea18:	dc400d15 	stw	r17,52(sp)
  80ea1c:	1441b616 	blt	r2,r17,80f0f8 <___vfprintf_internal_r+0xe38>
  80ea20:	1cc00204 	addi	r19,r3,8
  80ea24:	d9014217 	ldw	r4,1288(sp)
  80ea28:	d9414317 	ldw	r5,1292(sp)
  80ea2c:	000d883a 	mov	r6,zero
  80ea30:	000f883a 	mov	r7,zero
  80ea34:	080c29c0 	call	80c29c <__nedf2>
  80ea38:	10017426 	beq	r2,zero,80f00c <___vfprintf_internal_r+0xd4c>
  80ea3c:	d9414717 	ldw	r5,1308(sp)
  80ea40:	d9814117 	ldw	r6,1284(sp)
  80ea44:	8c400044 	addi	r17,r17,1
  80ea48:	2c85883a 	add	r2,r5,r18
  80ea4c:	14bfffc4 	addi	r18,r2,-1
  80ea50:	28bfffc4 	addi	r2,r5,-1
  80ea54:	30c00044 	addi	r3,r6,1
  80ea58:	98800115 	stw	r2,4(r19)
  80ea5c:	008001c4 	movi	r2,7
  80ea60:	98c00015 	stw	r3,0(r19)
  80ea64:	dc800e15 	stw	r18,56(sp)
  80ea68:	dc400d15 	stw	r17,52(sp)
  80ea6c:	14418e16 	blt	r2,r17,80f0a8 <___vfprintf_internal_r+0xde8>
  80ea70:	9cc00204 	addi	r19,r19,8
  80ea74:	d9414817 	ldw	r5,1312(sp)
  80ea78:	d8800804 	addi	r2,sp,32
  80ea7c:	8c400044 	addi	r17,r17,1
  80ea80:	9165883a 	add	r18,r18,r5
  80ea84:	98800015 	stw	r2,0(r19)
  80ea88:	008001c4 	movi	r2,7
  80ea8c:	99400115 	stw	r5,4(r19)
  80ea90:	dc800e15 	stw	r18,56(sp)
  80ea94:	dc400d15 	stw	r17,52(sp)
  80ea98:	1440ed16 	blt	r2,r17,80ee50 <___vfprintf_internal_r+0xb90>
  80ea9c:	98c00204 	addi	r3,r19,8
  80eaa0:	003f8506 	br	80e8b8 <___vfprintf_internal_r+0x5f8>
  80eaa4:	d9814a17 	ldw	r6,1320(sp)
  80eaa8:	d8814517 	ldw	r2,1300(sp)
  80eaac:	30a1c83a 	sub	r16,r6,r2
  80eab0:	043f4b0e 	bge	zero,r16,80e7e0 <___vfprintf_internal_r+0x520>
  80eab4:	00800404 	movi	r2,16
  80eab8:	14043a0e 	bge	r2,r16,80fba4 <___vfprintf_internal_r+0x18e4>
  80eabc:	1027883a 	mov	r19,r2
  80eac0:	070020b4 	movhi	fp,130
  80eac4:	e7070884 	addi	fp,fp,7202
  80eac8:	050001c4 	movi	r20,7
  80eacc:	00000306 	br	80eadc <___vfprintf_internal_r+0x81c>
  80ead0:	843ffc04 	addi	r16,r16,-16
  80ead4:	ad400204 	addi	r21,r21,8
  80ead8:	9c00130e 	bge	r19,r16,80eb28 <___vfprintf_internal_r+0x868>
  80eadc:	94800404 	addi	r18,r18,16
  80eae0:	8c400044 	addi	r17,r17,1
  80eae4:	af000015 	stw	fp,0(r21)
  80eae8:	acc00115 	stw	r19,4(r21)
  80eaec:	dc800e15 	stw	r18,56(sp)
  80eaf0:	dc400d15 	stw	r17,52(sp)
  80eaf4:	a47ff60e 	bge	r20,r17,80ead0 <___vfprintf_internal_r+0x810>
  80eaf8:	d9014f17 	ldw	r4,1340(sp)
  80eafc:	b00b883a 	mov	r5,r22
  80eb00:	d9800c04 	addi	r6,sp,48
  80eb04:	d9c15115 	stw	r7,1348(sp)
  80eb08:	080e2680 	call	80e268 <__sprint_r>
  80eb0c:	d9c15117 	ldw	r7,1348(sp)
  80eb10:	103fa31e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80eb14:	843ffc04 	addi	r16,r16,-16
  80eb18:	dc800e17 	ldw	r18,56(sp)
  80eb1c:	dc400d17 	ldw	r17,52(sp)
  80eb20:	dd401904 	addi	r21,sp,100
  80eb24:	9c3fed16 	blt	r19,r16,80eadc <___vfprintf_internal_r+0x81c>
  80eb28:	9425883a 	add	r18,r18,r16
  80eb2c:	8c400044 	addi	r17,r17,1
  80eb30:	008001c4 	movi	r2,7
  80eb34:	af000015 	stw	fp,0(r21)
  80eb38:	ac000115 	stw	r16,4(r21)
  80eb3c:	dc800e15 	stw	r18,56(sp)
  80eb40:	dc400d15 	stw	r17,52(sp)
  80eb44:	14416116 	blt	r2,r17,80f0cc <___vfprintf_internal_r+0xe0c>
  80eb48:	ad400204 	addi	r21,r21,8
  80eb4c:	003f2406 	br	80e7e0 <___vfprintf_internal_r+0x520>
  80eb50:	d9014f17 	ldw	r4,1340(sp)
  80eb54:	0811d740 	call	811d74 <__sinit>
  80eb58:	d9c15117 	ldw	r7,1348(sp)
  80eb5c:	003def06 	br	80e31c <___vfprintf_internal_r+0x5c>
  80eb60:	d9014f17 	ldw	r4,1340(sp)
  80eb64:	b00b883a 	mov	r5,r22
  80eb68:	d9c15115 	stw	r7,1348(sp)
  80eb6c:	08101a80 	call	8101a8 <__swsetup_r>
  80eb70:	d9c15117 	ldw	r7,1348(sp)
  80eb74:	103dee26 	beq	r2,zero,80e330 <___vfprintf_internal_r+0x70>
  80eb78:	003f8c06 	br	80e9ac <___vfprintf_internal_r+0x6ec>
  80eb7c:	d9014217 	ldw	r4,1288(sp)
  80eb80:	d9414317 	ldw	r5,1292(sp)
  80eb84:	000d883a 	mov	r6,zero
  80eb88:	000f883a 	mov	r7,zero
  80eb8c:	080c2140 	call	80c214 <__eqdf2>
  80eb90:	1000f21e 	bne	r2,zero,80ef5c <___vfprintf_internal_r+0xc9c>
  80eb94:	008020b4 	movhi	r2,130
  80eb98:	10860904 	addi	r2,r2,6180
  80eb9c:	94800044 	addi	r18,r18,1
  80eba0:	8c400044 	addi	r17,r17,1
  80eba4:	a8800015 	stw	r2,0(r21)
  80eba8:	00c00044 	movi	r3,1
  80ebac:	008001c4 	movi	r2,7
  80ebb0:	a8c00115 	stw	r3,4(r21)
  80ebb4:	dc800e15 	stw	r18,56(sp)
  80ebb8:	dc400d15 	stw	r17,52(sp)
  80ebbc:	14430016 	blt	r2,r17,80f7c0 <___vfprintf_internal_r+0x1500>
  80ebc0:	a8c00204 	addi	r3,r21,8
  80ebc4:	d8800517 	ldw	r2,20(sp)
  80ebc8:	d9014717 	ldw	r4,1308(sp)
  80ebcc:	11015c0e 	bge	r2,r4,80f140 <___vfprintf_internal_r+0xe80>
  80ebd0:	dc400d17 	ldw	r17,52(sp)
  80ebd4:	d9814917 	ldw	r6,1316(sp)
  80ebd8:	00800044 	movi	r2,1
  80ebdc:	94800044 	addi	r18,r18,1
  80ebe0:	8c400044 	addi	r17,r17,1
  80ebe4:	18800115 	stw	r2,4(r3)
  80ebe8:	008001c4 	movi	r2,7
  80ebec:	19800015 	stw	r6,0(r3)
  80ebf0:	dc800e15 	stw	r18,56(sp)
  80ebf4:	dc400d15 	stw	r17,52(sp)
  80ebf8:	14431616 	blt	r2,r17,80f854 <___vfprintf_internal_r+0x1594>
  80ebfc:	18c00204 	addi	r3,r3,8
  80ec00:	d8814717 	ldw	r2,1308(sp)
  80ec04:	143fffc4 	addi	r16,r2,-1
  80ec08:	043f2b0e 	bge	zero,r16,80e8b8 <___vfprintf_internal_r+0x5f8>
  80ec0c:	00800404 	movi	r2,16
  80ec10:	1402a80e 	bge	r2,r16,80f6b4 <___vfprintf_internal_r+0x13f4>
  80ec14:	dc400d17 	ldw	r17,52(sp)
  80ec18:	1027883a 	mov	r19,r2
  80ec1c:	070020b4 	movhi	fp,130
  80ec20:	e7070884 	addi	fp,fp,7202
  80ec24:	050001c4 	movi	r20,7
  80ec28:	00000306 	br	80ec38 <___vfprintf_internal_r+0x978>
  80ec2c:	18c00204 	addi	r3,r3,8
  80ec30:	843ffc04 	addi	r16,r16,-16
  80ec34:	9c02a20e 	bge	r19,r16,80f6c0 <___vfprintf_internal_r+0x1400>
  80ec38:	94800404 	addi	r18,r18,16
  80ec3c:	8c400044 	addi	r17,r17,1
  80ec40:	1f000015 	stw	fp,0(r3)
  80ec44:	1cc00115 	stw	r19,4(r3)
  80ec48:	dc800e15 	stw	r18,56(sp)
  80ec4c:	dc400d15 	stw	r17,52(sp)
  80ec50:	a47ff60e 	bge	r20,r17,80ec2c <___vfprintf_internal_r+0x96c>
  80ec54:	d9014f17 	ldw	r4,1340(sp)
  80ec58:	b00b883a 	mov	r5,r22
  80ec5c:	d9800c04 	addi	r6,sp,48
  80ec60:	080e2680 	call	80e268 <__sprint_r>
  80ec64:	103f4e1e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80ec68:	dc800e17 	ldw	r18,56(sp)
  80ec6c:	dc400d17 	ldw	r17,52(sp)
  80ec70:	d8c01904 	addi	r3,sp,100
  80ec74:	003fee06 	br	80ec30 <___vfprintf_internal_r+0x970>
  80ec78:	d8802c0b 	ldhu	r2,176(sp)
  80ec7c:	00ffffc4 	movi	r3,-1
  80ec80:	d8c14b15 	stw	r3,1324(sp)
  80ec84:	1080100c 	andi	r2,r2,64
  80ec88:	103dcc1e 	bne	r2,zero,80e3bc <___vfprintf_internal_r+0xfc>
  80ec8c:	003dce06 	br	80e3c8 <___vfprintf_internal_r+0x108>
  80ec90:	d9014f17 	ldw	r4,1340(sp)
  80ec94:	b00b883a 	mov	r5,r22
  80ec98:	d9800c04 	addi	r6,sp,48
  80ec9c:	080e2680 	call	80e268 <__sprint_r>
  80eca0:	103f3f1e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80eca4:	dc800e17 	ldw	r18,56(sp)
  80eca8:	003f2e06 	br	80e964 <___vfprintf_internal_r+0x6a4>
  80ecac:	d9414c17 	ldw	r5,1328(sp)
  80ecb0:	29400414 	ori	r5,r5,16
  80ecb4:	d9414c15 	stw	r5,1328(sp)
  80ecb8:	d9814c17 	ldw	r6,1328(sp)
  80ecbc:	3080080c 	andi	r2,r6,32
  80ecc0:	10014f1e 	bne	r2,zero,80f200 <___vfprintf_internal_r+0xf40>
  80ecc4:	d8c14c17 	ldw	r3,1328(sp)
  80ecc8:	1880040c 	andi	r2,r3,16
  80eccc:	1002f01e 	bne	r2,zero,80f890 <___vfprintf_internal_r+0x15d0>
  80ecd0:	d9014c17 	ldw	r4,1328(sp)
  80ecd4:	2080100c 	andi	r2,r4,64
  80ecd8:	1002ed26 	beq	r2,zero,80f890 <___vfprintf_internal_r+0x15d0>
  80ecdc:	3880000f 	ldh	r2,0(r7)
  80ece0:	39c00104 	addi	r7,r7,4
  80ece4:	d9c14015 	stw	r7,1280(sp)
  80ece8:	1023d7fa 	srai	r17,r2,31
  80ecec:	1021883a 	mov	r16,r2
  80ecf0:	88037816 	blt	r17,zero,80fad4 <___vfprintf_internal_r+0x1814>
  80ecf4:	01000044 	movi	r4,1
  80ecf8:	98000416 	blt	r19,zero,80ed0c <___vfprintf_internal_r+0xa4c>
  80ecfc:	d8c14c17 	ldw	r3,1328(sp)
  80ed00:	00bfdfc4 	movi	r2,-129
  80ed04:	1886703a 	and	r3,r3,r2
  80ed08:	d8c14c15 	stw	r3,1328(sp)
  80ed0c:	8444b03a 	or	r2,r16,r17
  80ed10:	10022c1e 	bne	r2,zero,80f5c4 <___vfprintf_internal_r+0x1304>
  80ed14:	98022b1e 	bne	r19,zero,80f5c4 <___vfprintf_internal_r+0x1304>
  80ed18:	20803fcc 	andi	r2,r4,255
  80ed1c:	1002a126 	beq	r2,zero,80f7a4 <___vfprintf_internal_r+0x14e4>
  80ed20:	d8c01904 	addi	r3,sp,100
  80ed24:	dd000f04 	addi	r20,sp,60
  80ed28:	d8c14115 	stw	r3,1284(sp)
  80ed2c:	d8c14117 	ldw	r3,1284(sp)
  80ed30:	dcc14515 	stw	r19,1300(sp)
  80ed34:	a0c5c83a 	sub	r2,r20,r3
  80ed38:	11c00a04 	addi	r7,r2,40
  80ed3c:	99c0010e 	bge	r19,r7,80ed44 <___vfprintf_internal_r+0xa84>
  80ed40:	d9c14515 	stw	r7,1300(sp)
  80ed44:	dcc14615 	stw	r19,1304(sp)
  80ed48:	d8800407 	ldb	r2,16(sp)
  80ed4c:	103e4c26 	beq	r2,zero,80e680 <___vfprintf_internal_r+0x3c0>
  80ed50:	d8814517 	ldw	r2,1300(sp)
  80ed54:	10800044 	addi	r2,r2,1
  80ed58:	d8814515 	stw	r2,1300(sp)
  80ed5c:	003e4806 	br	80e680 <___vfprintf_internal_r+0x3c0>
  80ed60:	d9814c17 	ldw	r6,1328(sp)
  80ed64:	31800414 	ori	r6,r6,16
  80ed68:	d9814c15 	stw	r6,1328(sp)
  80ed6c:	d8c14c17 	ldw	r3,1328(sp)
  80ed70:	1880080c 	andi	r2,r3,32
  80ed74:	1001271e 	bne	r2,zero,80f214 <___vfprintf_internal_r+0xf54>
  80ed78:	d9414c17 	ldw	r5,1328(sp)
  80ed7c:	2880040c 	andi	r2,r5,16
  80ed80:	1002bc1e 	bne	r2,zero,80f874 <___vfprintf_internal_r+0x15b4>
  80ed84:	d9814c17 	ldw	r6,1328(sp)
  80ed88:	3080100c 	andi	r2,r6,64
  80ed8c:	1002b926 	beq	r2,zero,80f874 <___vfprintf_internal_r+0x15b4>
  80ed90:	3c00000b 	ldhu	r16,0(r7)
  80ed94:	0009883a 	mov	r4,zero
  80ed98:	39c00104 	addi	r7,r7,4
  80ed9c:	0023883a 	mov	r17,zero
  80eda0:	d9c14015 	stw	r7,1280(sp)
  80eda4:	d8000405 	stb	zero,16(sp)
  80eda8:	003fd306 	br	80ecf8 <___vfprintf_internal_r+0xa38>
  80edac:	d9014c17 	ldw	r4,1328(sp)
  80edb0:	21000414 	ori	r4,r4,16
  80edb4:	d9014c15 	stw	r4,1328(sp)
  80edb8:	d9414c17 	ldw	r5,1328(sp)
  80edbc:	2880080c 	andi	r2,r5,32
  80edc0:	1001081e 	bne	r2,zero,80f1e4 <___vfprintf_internal_r+0xf24>
  80edc4:	d8c14c17 	ldw	r3,1328(sp)
  80edc8:	1880040c 	andi	r2,r3,16
  80edcc:	1002b61e 	bne	r2,zero,80f8a8 <___vfprintf_internal_r+0x15e8>
  80edd0:	d9014c17 	ldw	r4,1328(sp)
  80edd4:	2080100c 	andi	r2,r4,64
  80edd8:	1002b326 	beq	r2,zero,80f8a8 <___vfprintf_internal_r+0x15e8>
  80eddc:	3c00000b 	ldhu	r16,0(r7)
  80ede0:	01000044 	movi	r4,1
  80ede4:	39c00104 	addi	r7,r7,4
  80ede8:	0023883a 	mov	r17,zero
  80edec:	d9c14015 	stw	r7,1280(sp)
  80edf0:	d8000405 	stb	zero,16(sp)
  80edf4:	003fc006 	br	80ecf8 <___vfprintf_internal_r+0xa38>
  80edf8:	d9014f17 	ldw	r4,1340(sp)
  80edfc:	b00b883a 	mov	r5,r22
  80ee00:	d9800c04 	addi	r6,sp,48
  80ee04:	080e2680 	call	80e268 <__sprint_r>
  80ee08:	103ee51e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80ee0c:	dc800e17 	ldw	r18,56(sp)
  80ee10:	d8c01904 	addi	r3,sp,100
  80ee14:	d9814c17 	ldw	r6,1328(sp)
  80ee18:	3080004c 	andi	r2,r6,1
  80ee1c:	1005003a 	cmpeq	r2,r2,zero
  80ee20:	103ea51e 	bne	r2,zero,80e8b8 <___vfprintf_internal_r+0x5f8>
  80ee24:	00800044 	movi	r2,1
  80ee28:	dc400d17 	ldw	r17,52(sp)
  80ee2c:	18800115 	stw	r2,4(r3)
  80ee30:	d8814917 	ldw	r2,1316(sp)
  80ee34:	94800044 	addi	r18,r18,1
  80ee38:	8c400044 	addi	r17,r17,1
  80ee3c:	18800015 	stw	r2,0(r3)
  80ee40:	008001c4 	movi	r2,7
  80ee44:	dc800e15 	stw	r18,56(sp)
  80ee48:	dc400d15 	stw	r17,52(sp)
  80ee4c:	1442240e 	bge	r2,r17,80f6e0 <___vfprintf_internal_r+0x1420>
  80ee50:	d9014f17 	ldw	r4,1340(sp)
  80ee54:	b00b883a 	mov	r5,r22
  80ee58:	d9800c04 	addi	r6,sp,48
  80ee5c:	080e2680 	call	80e268 <__sprint_r>
  80ee60:	103ecf1e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80ee64:	dc800e17 	ldw	r18,56(sp)
  80ee68:	d8c01904 	addi	r3,sp,100
  80ee6c:	003e9206 	br	80e8b8 <___vfprintf_internal_r+0x5f8>
  80ee70:	d9014f17 	ldw	r4,1340(sp)
  80ee74:	b00b883a 	mov	r5,r22
  80ee78:	d9800c04 	addi	r6,sp,48
  80ee7c:	080e2680 	call	80e268 <__sprint_r>
  80ee80:	103ec026 	beq	r2,zero,80e984 <___vfprintf_internal_r+0x6c4>
  80ee84:	003ec606 	br	80e9a0 <___vfprintf_internal_r+0x6e0>
  80ee88:	d9014f17 	ldw	r4,1340(sp)
  80ee8c:	b00b883a 	mov	r5,r22
  80ee90:	d9800c04 	addi	r6,sp,48
  80ee94:	d9c15115 	stw	r7,1348(sp)
  80ee98:	080e2680 	call	80e268 <__sprint_r>
  80ee9c:	d9c15117 	ldw	r7,1348(sp)
  80eea0:	103ebf1e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80eea4:	dc800e17 	ldw	r18,56(sp)
  80eea8:	dc400d17 	ldw	r17,52(sp)
  80eeac:	dd401904 	addi	r21,sp,100
  80eeb0:	003e7406 	br	80e884 <___vfprintf_internal_r+0x5c4>
  80eeb4:	d9014f17 	ldw	r4,1340(sp)
  80eeb8:	b00b883a 	mov	r5,r22
  80eebc:	d9800c04 	addi	r6,sp,48
  80eec0:	d9c15115 	stw	r7,1348(sp)
  80eec4:	080e2680 	call	80e268 <__sprint_r>
  80eec8:	d9c15117 	ldw	r7,1348(sp)
  80eecc:	103eb41e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80eed0:	dd401904 	addi	r21,sp,100
  80eed4:	003d6d06 	br	80e48c <___vfprintf_internal_r+0x1cc>
  80eed8:	d9014f17 	ldw	r4,1340(sp)
  80eedc:	b00b883a 	mov	r5,r22
  80eee0:	d9800c04 	addi	r6,sp,48
  80eee4:	d9c15115 	stw	r7,1348(sp)
  80eee8:	080e2680 	call	80e268 <__sprint_r>
  80eeec:	d9c15117 	ldw	r7,1348(sp)
  80eef0:	103eab1e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80eef4:	dc800e17 	ldw	r18,56(sp)
  80eef8:	dc400d17 	ldw	r17,52(sp)
  80eefc:	dd401904 	addi	r21,sp,100
  80ef00:	003e3406 	br	80e7d4 <___vfprintf_internal_r+0x514>
  80ef04:	d9014f17 	ldw	r4,1340(sp)
  80ef08:	b00b883a 	mov	r5,r22
  80ef0c:	d9800c04 	addi	r6,sp,48
  80ef10:	d9c15115 	stw	r7,1348(sp)
  80ef14:	080e2680 	call	80e268 <__sprint_r>
  80ef18:	d9c15117 	ldw	r7,1348(sp)
  80ef1c:	103ea01e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80ef20:	dc800e17 	ldw	r18,56(sp)
  80ef24:	dc400d17 	ldw	r17,52(sp)
  80ef28:	dd401904 	addi	r21,sp,100
  80ef2c:	003e1c06 	br	80e7a0 <___vfprintf_internal_r+0x4e0>
  80ef30:	d9014f17 	ldw	r4,1340(sp)
  80ef34:	b00b883a 	mov	r5,r22
  80ef38:	d9800c04 	addi	r6,sp,48
  80ef3c:	d9c15115 	stw	r7,1348(sp)
  80ef40:	080e2680 	call	80e268 <__sprint_r>
  80ef44:	d9c15117 	ldw	r7,1348(sp)
  80ef48:	103e951e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80ef4c:	dc800e17 	ldw	r18,56(sp)
  80ef50:	dc400d17 	ldw	r17,52(sp)
  80ef54:	dd401904 	addi	r21,sp,100
  80ef58:	003e0406 	br	80e76c <___vfprintf_internal_r+0x4ac>
  80ef5c:	d9000517 	ldw	r4,20(sp)
  80ef60:	0102580e 	bge	zero,r4,80f8c4 <___vfprintf_internal_r+0x1604>
  80ef64:	d9814717 	ldw	r6,1308(sp)
  80ef68:	21807a16 	blt	r4,r6,80f154 <___vfprintf_internal_r+0xe94>
  80ef6c:	d8814117 	ldw	r2,1284(sp)
  80ef70:	91a5883a 	add	r18,r18,r6
  80ef74:	8c400044 	addi	r17,r17,1
  80ef78:	a8800015 	stw	r2,0(r21)
  80ef7c:	008001c4 	movi	r2,7
  80ef80:	a9800115 	stw	r6,4(r21)
  80ef84:	dc800e15 	stw	r18,56(sp)
  80ef88:	dc400d15 	stw	r17,52(sp)
  80ef8c:	1442fc16 	blt	r2,r17,80fb80 <___vfprintf_internal_r+0x18c0>
  80ef90:	a8c00204 	addi	r3,r21,8
  80ef94:	d9414717 	ldw	r5,1308(sp)
  80ef98:	2161c83a 	sub	r16,r4,r5
  80ef9c:	043f9d0e 	bge	zero,r16,80ee14 <___vfprintf_internal_r+0xb54>
  80efa0:	00800404 	movi	r2,16
  80efa4:	1402190e 	bge	r2,r16,80f80c <___vfprintf_internal_r+0x154c>
  80efa8:	dc400d17 	ldw	r17,52(sp)
  80efac:	1027883a 	mov	r19,r2
  80efb0:	070020b4 	movhi	fp,130
  80efb4:	e7070884 	addi	fp,fp,7202
  80efb8:	050001c4 	movi	r20,7
  80efbc:	00000306 	br	80efcc <___vfprintf_internal_r+0xd0c>
  80efc0:	18c00204 	addi	r3,r3,8
  80efc4:	843ffc04 	addi	r16,r16,-16
  80efc8:	9c02130e 	bge	r19,r16,80f818 <___vfprintf_internal_r+0x1558>
  80efcc:	94800404 	addi	r18,r18,16
  80efd0:	8c400044 	addi	r17,r17,1
  80efd4:	1f000015 	stw	fp,0(r3)
  80efd8:	1cc00115 	stw	r19,4(r3)
  80efdc:	dc800e15 	stw	r18,56(sp)
  80efe0:	dc400d15 	stw	r17,52(sp)
  80efe4:	a47ff60e 	bge	r20,r17,80efc0 <___vfprintf_internal_r+0xd00>
  80efe8:	d9014f17 	ldw	r4,1340(sp)
  80efec:	b00b883a 	mov	r5,r22
  80eff0:	d9800c04 	addi	r6,sp,48
  80eff4:	080e2680 	call	80e268 <__sprint_r>
  80eff8:	103e691e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80effc:	dc800e17 	ldw	r18,56(sp)
  80f000:	dc400d17 	ldw	r17,52(sp)
  80f004:	d8c01904 	addi	r3,sp,100
  80f008:	003fee06 	br	80efc4 <___vfprintf_internal_r+0xd04>
  80f00c:	d8814717 	ldw	r2,1308(sp)
  80f010:	143fffc4 	addi	r16,r2,-1
  80f014:	043e970e 	bge	zero,r16,80ea74 <___vfprintf_internal_r+0x7b4>
  80f018:	00800404 	movi	r2,16
  80f01c:	1400180e 	bge	r2,r16,80f080 <___vfprintf_internal_r+0xdc0>
  80f020:	1029883a 	mov	r20,r2
  80f024:	070020b4 	movhi	fp,130
  80f028:	e7070884 	addi	fp,fp,7202
  80f02c:	054001c4 	movi	r21,7
  80f030:	00000306 	br	80f040 <___vfprintf_internal_r+0xd80>
  80f034:	9cc00204 	addi	r19,r19,8
  80f038:	843ffc04 	addi	r16,r16,-16
  80f03c:	a400120e 	bge	r20,r16,80f088 <___vfprintf_internal_r+0xdc8>
  80f040:	94800404 	addi	r18,r18,16
  80f044:	8c400044 	addi	r17,r17,1
  80f048:	9f000015 	stw	fp,0(r19)
  80f04c:	9d000115 	stw	r20,4(r19)
  80f050:	dc800e15 	stw	r18,56(sp)
  80f054:	dc400d15 	stw	r17,52(sp)
  80f058:	ac7ff60e 	bge	r21,r17,80f034 <___vfprintf_internal_r+0xd74>
  80f05c:	d9014f17 	ldw	r4,1340(sp)
  80f060:	b00b883a 	mov	r5,r22
  80f064:	d9800c04 	addi	r6,sp,48
  80f068:	080e2680 	call	80e268 <__sprint_r>
  80f06c:	103e4c1e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80f070:	dc800e17 	ldw	r18,56(sp)
  80f074:	dc400d17 	ldw	r17,52(sp)
  80f078:	dcc01904 	addi	r19,sp,100
  80f07c:	003fee06 	br	80f038 <___vfprintf_internal_r+0xd78>
  80f080:	070020b4 	movhi	fp,130
  80f084:	e7070884 	addi	fp,fp,7202
  80f088:	9425883a 	add	r18,r18,r16
  80f08c:	8c400044 	addi	r17,r17,1
  80f090:	008001c4 	movi	r2,7
  80f094:	9f000015 	stw	fp,0(r19)
  80f098:	9c000115 	stw	r16,4(r19)
  80f09c:	dc800e15 	stw	r18,56(sp)
  80f0a0:	dc400d15 	stw	r17,52(sp)
  80f0a4:	147e720e 	bge	r2,r17,80ea70 <___vfprintf_internal_r+0x7b0>
  80f0a8:	d9014f17 	ldw	r4,1340(sp)
  80f0ac:	b00b883a 	mov	r5,r22
  80f0b0:	d9800c04 	addi	r6,sp,48
  80f0b4:	080e2680 	call	80e268 <__sprint_r>
  80f0b8:	103e391e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80f0bc:	dc800e17 	ldw	r18,56(sp)
  80f0c0:	dc400d17 	ldw	r17,52(sp)
  80f0c4:	dcc01904 	addi	r19,sp,100
  80f0c8:	003e6a06 	br	80ea74 <___vfprintf_internal_r+0x7b4>
  80f0cc:	d9014f17 	ldw	r4,1340(sp)
  80f0d0:	b00b883a 	mov	r5,r22
  80f0d4:	d9800c04 	addi	r6,sp,48
  80f0d8:	d9c15115 	stw	r7,1348(sp)
  80f0dc:	080e2680 	call	80e268 <__sprint_r>
  80f0e0:	d9c15117 	ldw	r7,1348(sp)
  80f0e4:	103e2e1e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80f0e8:	dc800e17 	ldw	r18,56(sp)
  80f0ec:	dc400d17 	ldw	r17,52(sp)
  80f0f0:	dd401904 	addi	r21,sp,100
  80f0f4:	003dba06 	br	80e7e0 <___vfprintf_internal_r+0x520>
  80f0f8:	d9014f17 	ldw	r4,1340(sp)
  80f0fc:	b00b883a 	mov	r5,r22
  80f100:	d9800c04 	addi	r6,sp,48
  80f104:	080e2680 	call	80e268 <__sprint_r>
  80f108:	103e251e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80f10c:	dc800e17 	ldw	r18,56(sp)
  80f110:	dc400d17 	ldw	r17,52(sp)
  80f114:	dcc01904 	addi	r19,sp,100
  80f118:	003e4206 	br	80ea24 <___vfprintf_internal_r+0x764>
  80f11c:	d9014f17 	ldw	r4,1340(sp)
  80f120:	b00b883a 	mov	r5,r22
  80f124:	d9800c04 	addi	r6,sp,48
  80f128:	080e2680 	call	80e268 <__sprint_r>
  80f12c:	103e1c1e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80f130:	dc800e17 	ldw	r18,56(sp)
  80f134:	dc400d17 	ldw	r17,52(sp)
  80f138:	d8c01904 	addi	r3,sp,100
  80f13c:	003e2e06 	br	80e9f8 <___vfprintf_internal_r+0x738>
  80f140:	d9414c17 	ldw	r5,1328(sp)
  80f144:	2880004c 	andi	r2,r5,1
  80f148:	1005003a 	cmpeq	r2,r2,zero
  80f14c:	103dda1e 	bne	r2,zero,80e8b8 <___vfprintf_internal_r+0x5f8>
  80f150:	003e9f06 	br	80ebd0 <___vfprintf_internal_r+0x910>
  80f154:	d8c14117 	ldw	r3,1284(sp)
  80f158:	9125883a 	add	r18,r18,r4
  80f15c:	8c400044 	addi	r17,r17,1
  80f160:	008001c4 	movi	r2,7
  80f164:	a8c00015 	stw	r3,0(r21)
  80f168:	a9000115 	stw	r4,4(r21)
  80f16c:	dc800e15 	stw	r18,56(sp)
  80f170:	dc400d15 	stw	r17,52(sp)
  80f174:	14426c16 	blt	r2,r17,80fb28 <___vfprintf_internal_r+0x1868>
  80f178:	a8c00204 	addi	r3,r21,8
  80f17c:	d9414917 	ldw	r5,1316(sp)
  80f180:	00800044 	movi	r2,1
  80f184:	94800044 	addi	r18,r18,1
  80f188:	8c400044 	addi	r17,r17,1
  80f18c:	18800115 	stw	r2,4(r3)
  80f190:	008001c4 	movi	r2,7
  80f194:	19400015 	stw	r5,0(r3)
  80f198:	dc800e15 	stw	r18,56(sp)
  80f19c:	dc400d15 	stw	r17,52(sp)
  80f1a0:	2021883a 	mov	r16,r4
  80f1a4:	14425616 	blt	r2,r17,80fb00 <___vfprintf_internal_r+0x1840>
  80f1a8:	19400204 	addi	r5,r3,8
  80f1ac:	d9814717 	ldw	r6,1308(sp)
  80f1b0:	8c400044 	addi	r17,r17,1
  80f1b4:	dc400d15 	stw	r17,52(sp)
  80f1b8:	3107c83a 	sub	r3,r6,r4
  80f1bc:	d9014117 	ldw	r4,1284(sp)
  80f1c0:	90e5883a 	add	r18,r18,r3
  80f1c4:	28c00115 	stw	r3,4(r5)
  80f1c8:	8105883a 	add	r2,r16,r4
  80f1cc:	28800015 	stw	r2,0(r5)
  80f1d0:	008001c4 	movi	r2,7
  80f1d4:	dc800e15 	stw	r18,56(sp)
  80f1d8:	147f1d16 	blt	r2,r17,80ee50 <___vfprintf_internal_r+0xb90>
  80f1dc:	28c00204 	addi	r3,r5,8
  80f1e0:	003db506 	br	80e8b8 <___vfprintf_internal_r+0x5f8>
  80f1e4:	3c000017 	ldw	r16,0(r7)
  80f1e8:	3c400117 	ldw	r17,4(r7)
  80f1ec:	39800204 	addi	r6,r7,8
  80f1f0:	01000044 	movi	r4,1
  80f1f4:	d9814015 	stw	r6,1280(sp)
  80f1f8:	d8000405 	stb	zero,16(sp)
  80f1fc:	003ebe06 	br	80ecf8 <___vfprintf_internal_r+0xa38>
  80f200:	3c000017 	ldw	r16,0(r7)
  80f204:	3c400117 	ldw	r17,4(r7)
  80f208:	38800204 	addi	r2,r7,8
  80f20c:	d8814015 	stw	r2,1280(sp)
  80f210:	003eb706 	br	80ecf0 <___vfprintf_internal_r+0xa30>
  80f214:	3c000017 	ldw	r16,0(r7)
  80f218:	3c400117 	ldw	r17,4(r7)
  80f21c:	39000204 	addi	r4,r7,8
  80f220:	d9014015 	stw	r4,1280(sp)
  80f224:	0009883a 	mov	r4,zero
  80f228:	d8000405 	stb	zero,16(sp)
  80f22c:	003eb206 	br	80ecf8 <___vfprintf_internal_r+0xa38>
  80f230:	38c00017 	ldw	r3,0(r7)
  80f234:	39c00104 	addi	r7,r7,4
  80f238:	d8c14a15 	stw	r3,1320(sp)
  80f23c:	1800d70e 	bge	r3,zero,80f59c <___vfprintf_internal_r+0x12dc>
  80f240:	00c7c83a 	sub	r3,zero,r3
  80f244:	d8c14a15 	stw	r3,1320(sp)
  80f248:	d9014c17 	ldw	r4,1328(sp)
  80f24c:	b8c00007 	ldb	r3,0(r23)
  80f250:	21000114 	ori	r4,r4,4
  80f254:	d9014c15 	stw	r4,1328(sp)
  80f258:	003c9806 	br	80e4bc <___vfprintf_internal_r+0x1fc>
  80f25c:	d9814c17 	ldw	r6,1328(sp)
  80f260:	3080080c 	andi	r2,r6,32
  80f264:	1001f626 	beq	r2,zero,80fa40 <___vfprintf_internal_r+0x1780>
  80f268:	d9014b17 	ldw	r4,1324(sp)
  80f26c:	38800017 	ldw	r2,0(r7)
  80f270:	39c00104 	addi	r7,r7,4
  80f274:	d9c14015 	stw	r7,1280(sp)
  80f278:	2007d7fa 	srai	r3,r4,31
  80f27c:	d9c14017 	ldw	r7,1280(sp)
  80f280:	11000015 	stw	r4,0(r2)
  80f284:	10c00115 	stw	r3,4(r2)
  80f288:	003c6906 	br	80e430 <___vfprintf_internal_r+0x170>
  80f28c:	b8c00007 	ldb	r3,0(r23)
  80f290:	00801b04 	movi	r2,108
  80f294:	18825526 	beq	r3,r2,80fbec <___vfprintf_internal_r+0x192c>
  80f298:	d9414c17 	ldw	r5,1328(sp)
  80f29c:	29400414 	ori	r5,r5,16
  80f2a0:	d9414c15 	stw	r5,1328(sp)
  80f2a4:	003c8506 	br	80e4bc <___vfprintf_internal_r+0x1fc>
  80f2a8:	d9814c17 	ldw	r6,1328(sp)
  80f2ac:	b8c00007 	ldb	r3,0(r23)
  80f2b0:	31800814 	ori	r6,r6,32
  80f2b4:	d9814c15 	stw	r6,1328(sp)
  80f2b8:	003c8006 	br	80e4bc <___vfprintf_internal_r+0x1fc>
  80f2bc:	d8814c17 	ldw	r2,1328(sp)
  80f2c0:	3c000017 	ldw	r16,0(r7)
  80f2c4:	00c01e04 	movi	r3,120
  80f2c8:	10800094 	ori	r2,r2,2
  80f2cc:	d8814c15 	stw	r2,1328(sp)
  80f2d0:	39c00104 	addi	r7,r7,4
  80f2d4:	014020b4 	movhi	r5,130
  80f2d8:	2946f204 	addi	r5,r5,7112
  80f2dc:	00800c04 	movi	r2,48
  80f2e0:	0023883a 	mov	r17,zero
  80f2e4:	01000084 	movi	r4,2
  80f2e8:	d9c14015 	stw	r7,1280(sp)
  80f2ec:	d8c14d15 	stw	r3,1332(sp)
  80f2f0:	d9414415 	stw	r5,1296(sp)
  80f2f4:	d8800445 	stb	r2,17(sp)
  80f2f8:	d8c00485 	stb	r3,18(sp)
  80f2fc:	d8000405 	stb	zero,16(sp)
  80f300:	003e7d06 	br	80ecf8 <___vfprintf_internal_r+0xa38>
  80f304:	d8814c17 	ldw	r2,1328(sp)
  80f308:	b8c00007 	ldb	r3,0(r23)
  80f30c:	10801014 	ori	r2,r2,64
  80f310:	d8814c15 	stw	r2,1328(sp)
  80f314:	003c6906 	br	80e4bc <___vfprintf_internal_r+0x1fc>
  80f318:	d9414c17 	ldw	r5,1328(sp)
  80f31c:	2880020c 	andi	r2,r5,8
  80f320:	1001e526 	beq	r2,zero,80fab8 <___vfprintf_internal_r+0x17f8>
  80f324:	39800017 	ldw	r6,0(r7)
  80f328:	38800204 	addi	r2,r7,8
  80f32c:	d8814015 	stw	r2,1280(sp)
  80f330:	d9814215 	stw	r6,1288(sp)
  80f334:	39c00117 	ldw	r7,4(r7)
  80f338:	d9c14315 	stw	r7,1292(sp)
  80f33c:	d9014217 	ldw	r4,1288(sp)
  80f340:	d9414317 	ldw	r5,1292(sp)
  80f344:	0813f9c0 	call	813f9c <__isinfd>
  80f348:	10021d26 	beq	r2,zero,80fbc0 <___vfprintf_internal_r+0x1900>
  80f34c:	d9014217 	ldw	r4,1288(sp)
  80f350:	d9414317 	ldw	r5,1292(sp)
  80f354:	000d883a 	mov	r6,zero
  80f358:	000f883a 	mov	r7,zero
  80f35c:	080c4340 	call	80c434 <__ltdf2>
  80f360:	1002d016 	blt	r2,zero,80fea4 <___vfprintf_internal_r+0x1be4>
  80f364:	d9414d17 	ldw	r5,1332(sp)
  80f368:	008011c4 	movi	r2,71
  80f36c:	11421016 	blt	r2,r5,80fbb0 <___vfprintf_internal_r+0x18f0>
  80f370:	018020b4 	movhi	r6,130
  80f374:	3186f704 	addi	r6,r6,7132
  80f378:	d9814115 	stw	r6,1284(sp)
  80f37c:	d9014c17 	ldw	r4,1328(sp)
  80f380:	00c000c4 	movi	r3,3
  80f384:	00bfdfc4 	movi	r2,-129
  80f388:	2088703a 	and	r4,r4,r2
  80f38c:	180f883a 	mov	r7,r3
  80f390:	d8c14515 	stw	r3,1300(sp)
  80f394:	d9014c15 	stw	r4,1328(sp)
  80f398:	d8014615 	stw	zero,1304(sp)
  80f39c:	003e6a06 	br	80ed48 <___vfprintf_internal_r+0xa88>
  80f3a0:	38800017 	ldw	r2,0(r7)
  80f3a4:	00c00044 	movi	r3,1
  80f3a8:	39c00104 	addi	r7,r7,4
  80f3ac:	d9c14015 	stw	r7,1280(sp)
  80f3b0:	d9000f04 	addi	r4,sp,60
  80f3b4:	180f883a 	mov	r7,r3
  80f3b8:	d8c14515 	stw	r3,1300(sp)
  80f3bc:	d9014115 	stw	r4,1284(sp)
  80f3c0:	d8800f05 	stb	r2,60(sp)
  80f3c4:	d8000405 	stb	zero,16(sp)
  80f3c8:	003cac06 	br	80e67c <___vfprintf_internal_r+0x3bc>
  80f3cc:	014020b4 	movhi	r5,130
  80f3d0:	2946fd04 	addi	r5,r5,7156
  80f3d4:	d9414415 	stw	r5,1296(sp)
  80f3d8:	d9814c17 	ldw	r6,1328(sp)
  80f3dc:	3080080c 	andi	r2,r6,32
  80f3e0:	1000ff26 	beq	r2,zero,80f7e0 <___vfprintf_internal_r+0x1520>
  80f3e4:	3c000017 	ldw	r16,0(r7)
  80f3e8:	3c400117 	ldw	r17,4(r7)
  80f3ec:	38800204 	addi	r2,r7,8
  80f3f0:	d8814015 	stw	r2,1280(sp)
  80f3f4:	d9414c17 	ldw	r5,1328(sp)
  80f3f8:	2880004c 	andi	r2,r5,1
  80f3fc:	1005003a 	cmpeq	r2,r2,zero
  80f400:	1000b91e 	bne	r2,zero,80f6e8 <___vfprintf_internal_r+0x1428>
  80f404:	8444b03a 	or	r2,r16,r17
  80f408:	1000b726 	beq	r2,zero,80f6e8 <___vfprintf_internal_r+0x1428>
  80f40c:	d9814d17 	ldw	r6,1332(sp)
  80f410:	29400094 	ori	r5,r5,2
  80f414:	00800c04 	movi	r2,48
  80f418:	01000084 	movi	r4,2
  80f41c:	d9414c15 	stw	r5,1328(sp)
  80f420:	d8800445 	stb	r2,17(sp)
  80f424:	d9800485 	stb	r6,18(sp)
  80f428:	d8000405 	stb	zero,16(sp)
  80f42c:	003e3206 	br	80ecf8 <___vfprintf_internal_r+0xa38>
  80f430:	018020b4 	movhi	r6,130
  80f434:	3186f204 	addi	r6,r6,7112
  80f438:	d9814415 	stw	r6,1296(sp)
  80f43c:	003fe606 	br	80f3d8 <___vfprintf_internal_r+0x1118>
  80f440:	00800ac4 	movi	r2,43
  80f444:	d8800405 	stb	r2,16(sp)
  80f448:	b8c00007 	ldb	r3,0(r23)
  80f44c:	003c1b06 	br	80e4bc <___vfprintf_internal_r+0x1fc>
  80f450:	d8814c17 	ldw	r2,1328(sp)
  80f454:	b8c00007 	ldb	r3,0(r23)
  80f458:	10800054 	ori	r2,r2,1
  80f45c:	d8814c15 	stw	r2,1328(sp)
  80f460:	003c1606 	br	80e4bc <___vfprintf_internal_r+0x1fc>
  80f464:	d8800407 	ldb	r2,16(sp)
  80f468:	10004c1e 	bne	r2,zero,80f59c <___vfprintf_internal_r+0x12dc>
  80f46c:	00800804 	movi	r2,32
  80f470:	d8800405 	stb	r2,16(sp)
  80f474:	b8c00007 	ldb	r3,0(r23)
  80f478:	003c1006 	br	80e4bc <___vfprintf_internal_r+0x1fc>
  80f47c:	d9814c17 	ldw	r6,1328(sp)
  80f480:	b8c00007 	ldb	r3,0(r23)
  80f484:	31800214 	ori	r6,r6,8
  80f488:	d9814c15 	stw	r6,1328(sp)
  80f48c:	003c0b06 	br	80e4bc <___vfprintf_internal_r+0x1fc>
  80f490:	0009883a 	mov	r4,zero
  80f494:	04000244 	movi	r16,9
  80f498:	01400284 	movi	r5,10
  80f49c:	d9c15115 	stw	r7,1348(sp)
  80f4a0:	080c90c0 	call	80c90c <__mulsi3>
  80f4a4:	b9000007 	ldb	r4,0(r23)
  80f4a8:	d8c14d17 	ldw	r3,1332(sp)
  80f4ac:	bdc00044 	addi	r23,r23,1
  80f4b0:	d9014d15 	stw	r4,1332(sp)
  80f4b4:	d9414d17 	ldw	r5,1332(sp)
  80f4b8:	1885883a 	add	r2,r3,r2
  80f4bc:	113ff404 	addi	r4,r2,-48
  80f4c0:	28bff404 	addi	r2,r5,-48
  80f4c4:	d9c15117 	ldw	r7,1348(sp)
  80f4c8:	80bff32e 	bgeu	r16,r2,80f498 <___vfprintf_internal_r+0x11d8>
  80f4cc:	d9014a15 	stw	r4,1320(sp)
  80f4d0:	003bfc06 	br	80e4c4 <___vfprintf_internal_r+0x204>
  80f4d4:	d8814c17 	ldw	r2,1328(sp)
  80f4d8:	b8c00007 	ldb	r3,0(r23)
  80f4dc:	10802014 	ori	r2,r2,128
  80f4e0:	d8814c15 	stw	r2,1328(sp)
  80f4e4:	003bf506 	br	80e4bc <___vfprintf_internal_r+0x1fc>
  80f4e8:	b8c00007 	ldb	r3,0(r23)
  80f4ec:	00800a84 	movi	r2,42
  80f4f0:	bdc00044 	addi	r23,r23,1
  80f4f4:	18831826 	beq	r3,r2,810158 <___vfprintf_internal_r+0x1e98>
  80f4f8:	d8c14d15 	stw	r3,1332(sp)
  80f4fc:	18bff404 	addi	r2,r3,-48
  80f500:	00c00244 	movi	r3,9
  80f504:	18827b36 	bltu	r3,r2,80fef4 <___vfprintf_internal_r+0x1c34>
  80f508:	1821883a 	mov	r16,r3
  80f50c:	0009883a 	mov	r4,zero
  80f510:	01400284 	movi	r5,10
  80f514:	d9c15115 	stw	r7,1348(sp)
  80f518:	080c90c0 	call	80c90c <__mulsi3>
  80f51c:	d9414d17 	ldw	r5,1332(sp)
  80f520:	b9800007 	ldb	r6,0(r23)
  80f524:	d9c15117 	ldw	r7,1348(sp)
  80f528:	1145883a 	add	r2,r2,r5
  80f52c:	113ff404 	addi	r4,r2,-48
  80f530:	30bff404 	addi	r2,r6,-48
  80f534:	d9814d15 	stw	r6,1332(sp)
  80f538:	bdc00044 	addi	r23,r23,1
  80f53c:	80bff42e 	bgeu	r16,r2,80f510 <___vfprintf_internal_r+0x1250>
  80f540:	2027883a 	mov	r19,r4
  80f544:	203bdf0e 	bge	r4,zero,80e4c4 <___vfprintf_internal_r+0x204>
  80f548:	04ffffc4 	movi	r19,-1
  80f54c:	003bdd06 	br	80e4c4 <___vfprintf_internal_r+0x204>
  80f550:	d8000405 	stb	zero,16(sp)
  80f554:	39800017 	ldw	r6,0(r7)
  80f558:	39c00104 	addi	r7,r7,4
  80f55c:	d9c14015 	stw	r7,1280(sp)
  80f560:	d9814115 	stw	r6,1284(sp)
  80f564:	3001c926 	beq	r6,zero,80fc8c <___vfprintf_internal_r+0x19cc>
  80f568:	98000e16 	blt	r19,zero,80f5a4 <___vfprintf_internal_r+0x12e4>
  80f56c:	d9014117 	ldw	r4,1284(sp)
  80f570:	000b883a 	mov	r5,zero
  80f574:	980d883a 	mov	r6,r19
  80f578:	0812cb40 	call	812cb4 <memchr>
  80f57c:	10025926 	beq	r2,zero,80fee4 <___vfprintf_internal_r+0x1c24>
  80f580:	d8c14117 	ldw	r3,1284(sp)
  80f584:	10cfc83a 	sub	r7,r2,r3
  80f588:	99c19e16 	blt	r19,r7,80fc04 <___vfprintf_internal_r+0x1944>
  80f58c:	d9c14515 	stw	r7,1300(sp)
  80f590:	38000916 	blt	r7,zero,80f5b8 <___vfprintf_internal_r+0x12f8>
  80f594:	d8014615 	stw	zero,1304(sp)
  80f598:	003deb06 	br	80ed48 <___vfprintf_internal_r+0xa88>
  80f59c:	b8c00007 	ldb	r3,0(r23)
  80f5a0:	003bc606 	br	80e4bc <___vfprintf_internal_r+0x1fc>
  80f5a4:	d9014117 	ldw	r4,1284(sp)
  80f5a8:	080e1ec0 	call	80e1ec <strlen>
  80f5ac:	d8814515 	stw	r2,1300(sp)
  80f5b0:	100f883a 	mov	r7,r2
  80f5b4:	103ff70e 	bge	r2,zero,80f594 <___vfprintf_internal_r+0x12d4>
  80f5b8:	d8014515 	stw	zero,1300(sp)
  80f5bc:	d8014615 	stw	zero,1304(sp)
  80f5c0:	003de106 	br	80ed48 <___vfprintf_internal_r+0xa88>
  80f5c4:	20c03fcc 	andi	r3,r4,255
  80f5c8:	00800044 	movi	r2,1
  80f5cc:	18802d26 	beq	r3,r2,80f684 <___vfprintf_internal_r+0x13c4>
  80f5d0:	18800e36 	bltu	r3,r2,80f60c <___vfprintf_internal_r+0x134c>
  80f5d4:	00800084 	movi	r2,2
  80f5d8:	1880fa26 	beq	r3,r2,80f9c4 <___vfprintf_internal_r+0x1704>
  80f5dc:	010020b4 	movhi	r4,130
  80f5e0:	21070204 	addi	r4,r4,7176
  80f5e4:	080e1ec0 	call	80e1ec <strlen>
  80f5e8:	100f883a 	mov	r7,r2
  80f5ec:	dcc14515 	stw	r19,1300(sp)
  80f5f0:	9880010e 	bge	r19,r2,80f5f8 <___vfprintf_internal_r+0x1338>
  80f5f4:	d8814515 	stw	r2,1300(sp)
  80f5f8:	008020b4 	movhi	r2,130
  80f5fc:	10870204 	addi	r2,r2,7176
  80f600:	dcc14615 	stw	r19,1304(sp)
  80f604:	d8814115 	stw	r2,1284(sp)
  80f608:	003dcf06 	br	80ed48 <___vfprintf_internal_r+0xa88>
  80f60c:	d9401904 	addi	r5,sp,100
  80f610:	dd000f04 	addi	r20,sp,60
  80f614:	d9414115 	stw	r5,1284(sp)
  80f618:	880a977a 	slli	r5,r17,29
  80f61c:	d9814117 	ldw	r6,1284(sp)
  80f620:	8004d0fa 	srli	r2,r16,3
  80f624:	8806d0fa 	srli	r3,r17,3
  80f628:	810001cc 	andi	r4,r16,7
  80f62c:	2884b03a 	or	r2,r5,r2
  80f630:	31bfffc4 	addi	r6,r6,-1
  80f634:	21000c04 	addi	r4,r4,48
  80f638:	d9814115 	stw	r6,1284(sp)
  80f63c:	10cab03a 	or	r5,r2,r3
  80f640:	31000005 	stb	r4,0(r6)
  80f644:	1021883a 	mov	r16,r2
  80f648:	1823883a 	mov	r17,r3
  80f64c:	283ff21e 	bne	r5,zero,80f618 <___vfprintf_internal_r+0x1358>
  80f650:	d8c14c17 	ldw	r3,1328(sp)
  80f654:	1880004c 	andi	r2,r3,1
  80f658:	1005003a 	cmpeq	r2,r2,zero
  80f65c:	103db31e 	bne	r2,zero,80ed2c <___vfprintf_internal_r+0xa6c>
  80f660:	20803fcc 	andi	r2,r4,255
  80f664:	1080201c 	xori	r2,r2,128
  80f668:	10bfe004 	addi	r2,r2,-128
  80f66c:	00c00c04 	movi	r3,48
  80f670:	10fdae26 	beq	r2,r3,80ed2c <___vfprintf_internal_r+0xa6c>
  80f674:	31bfffc4 	addi	r6,r6,-1
  80f678:	d9814115 	stw	r6,1284(sp)
  80f67c:	30c00005 	stb	r3,0(r6)
  80f680:	003daa06 	br	80ed2c <___vfprintf_internal_r+0xa6c>
  80f684:	88800068 	cmpgeui	r2,r17,1
  80f688:	10002c1e 	bne	r2,zero,80f73c <___vfprintf_internal_r+0x147c>
  80f68c:	8800021e 	bne	r17,zero,80f698 <___vfprintf_internal_r+0x13d8>
  80f690:	00800244 	movi	r2,9
  80f694:	14002936 	bltu	r2,r16,80f73c <___vfprintf_internal_r+0x147c>
  80f698:	d90018c4 	addi	r4,sp,99
  80f69c:	dd000f04 	addi	r20,sp,60
  80f6a0:	d9014115 	stw	r4,1284(sp)
  80f6a4:	d9014117 	ldw	r4,1284(sp)
  80f6a8:	80800c04 	addi	r2,r16,48
  80f6ac:	20800005 	stb	r2,0(r4)
  80f6b0:	003d9e06 	br	80ed2c <___vfprintf_internal_r+0xa6c>
  80f6b4:	dc400d17 	ldw	r17,52(sp)
  80f6b8:	070020b4 	movhi	fp,130
  80f6bc:	e7070884 	addi	fp,fp,7202
  80f6c0:	9425883a 	add	r18,r18,r16
  80f6c4:	8c400044 	addi	r17,r17,1
  80f6c8:	008001c4 	movi	r2,7
  80f6cc:	1f000015 	stw	fp,0(r3)
  80f6d0:	1c000115 	stw	r16,4(r3)
  80f6d4:	dc800e15 	stw	r18,56(sp)
  80f6d8:	dc400d15 	stw	r17,52(sp)
  80f6dc:	147ddc16 	blt	r2,r17,80ee50 <___vfprintf_internal_r+0xb90>
  80f6e0:	18c00204 	addi	r3,r3,8
  80f6e4:	003c7406 	br	80e8b8 <___vfprintf_internal_r+0x5f8>
  80f6e8:	01000084 	movi	r4,2
  80f6ec:	d8000405 	stb	zero,16(sp)
  80f6f0:	003d8106 	br	80ecf8 <___vfprintf_internal_r+0xa38>
  80f6f4:	d9814c17 	ldw	r6,1328(sp)
  80f6f8:	30c4703a 	and	r2,r6,r3
  80f6fc:	1005003a 	cmpeq	r2,r2,zero
  80f700:	103cb326 	beq	r2,zero,80e9d0 <___vfprintf_internal_r+0x710>
  80f704:	d9014117 	ldw	r4,1284(sp)
  80f708:	94800044 	addi	r18,r18,1
  80f70c:	8c400044 	addi	r17,r17,1
  80f710:	008001c4 	movi	r2,7
  80f714:	a9000015 	stw	r4,0(r21)
  80f718:	a8c00115 	stw	r3,4(r21)
  80f71c:	dc800e15 	stw	r18,56(sp)
  80f720:	dc400d15 	stw	r17,52(sp)
  80f724:	147e6016 	blt	r2,r17,80f0a8 <___vfprintf_internal_r+0xde8>
  80f728:	acc00204 	addi	r19,r21,8
  80f72c:	003cd106 	br	80ea74 <___vfprintf_internal_r+0x7b4>
  80f730:	070020b4 	movhi	fp,130
  80f734:	e7070884 	addi	fp,fp,7202
  80f738:	003c4906 	br	80e860 <___vfprintf_internal_r+0x5a0>
  80f73c:	dd000f04 	addi	r20,sp,60
  80f740:	dc801904 	addi	r18,sp,100
  80f744:	8009883a 	mov	r4,r16
  80f748:	880b883a 	mov	r5,r17
  80f74c:	01800284 	movi	r6,10
  80f750:	000f883a 	mov	r7,zero
  80f754:	0814cf80 	call	814cf8 <__umoddi3>
  80f758:	12000c04 	addi	r8,r2,48
  80f75c:	94bfffc4 	addi	r18,r18,-1
  80f760:	8009883a 	mov	r4,r16
  80f764:	880b883a 	mov	r5,r17
  80f768:	01800284 	movi	r6,10
  80f76c:	000f883a 	mov	r7,zero
  80f770:	92000005 	stb	r8,0(r18)
  80f774:	081468c0 	call	81468c <__udivdi3>
  80f778:	1009883a 	mov	r4,r2
  80f77c:	1021883a 	mov	r16,r2
  80f780:	18800068 	cmpgeui	r2,r3,1
  80f784:	1823883a 	mov	r17,r3
  80f788:	103fee1e 	bne	r2,zero,80f744 <___vfprintf_internal_r+0x1484>
  80f78c:	1800021e 	bne	r3,zero,80f798 <___vfprintf_internal_r+0x14d8>
  80f790:	00800244 	movi	r2,9
  80f794:	113feb36 	bltu	r2,r4,80f744 <___vfprintf_internal_r+0x1484>
  80f798:	94bfffc4 	addi	r18,r18,-1
  80f79c:	dc814115 	stw	r18,1284(sp)
  80f7a0:	003fc006 	br	80f6a4 <___vfprintf_internal_r+0x13e4>
  80f7a4:	d9014c17 	ldw	r4,1328(sp)
  80f7a8:	2080004c 	andi	r2,r4,1
  80f7ac:	10009a1e 	bne	r2,zero,80fa18 <___vfprintf_internal_r+0x1758>
  80f7b0:	d9401904 	addi	r5,sp,100
  80f7b4:	dd000f04 	addi	r20,sp,60
  80f7b8:	d9414115 	stw	r5,1284(sp)
  80f7bc:	003d5b06 	br	80ed2c <___vfprintf_internal_r+0xa6c>
  80f7c0:	d9014f17 	ldw	r4,1340(sp)
  80f7c4:	b00b883a 	mov	r5,r22
  80f7c8:	d9800c04 	addi	r6,sp,48
  80f7cc:	080e2680 	call	80e268 <__sprint_r>
  80f7d0:	103c731e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80f7d4:	dc800e17 	ldw	r18,56(sp)
  80f7d8:	d8c01904 	addi	r3,sp,100
  80f7dc:	003cf906 	br	80ebc4 <___vfprintf_internal_r+0x904>
  80f7e0:	d8c14c17 	ldw	r3,1328(sp)
  80f7e4:	1880040c 	andi	r2,r3,16
  80f7e8:	1000711e 	bne	r2,zero,80f9b0 <___vfprintf_internal_r+0x16f0>
  80f7ec:	d9014c17 	ldw	r4,1328(sp)
  80f7f0:	2080100c 	andi	r2,r4,64
  80f7f4:	10006e26 	beq	r2,zero,80f9b0 <___vfprintf_internal_r+0x16f0>
  80f7f8:	3c00000b 	ldhu	r16,0(r7)
  80f7fc:	0023883a 	mov	r17,zero
  80f800:	39c00104 	addi	r7,r7,4
  80f804:	d9c14015 	stw	r7,1280(sp)
  80f808:	003efa06 	br	80f3f4 <___vfprintf_internal_r+0x1134>
  80f80c:	dc400d17 	ldw	r17,52(sp)
  80f810:	070020b4 	movhi	fp,130
  80f814:	e7070884 	addi	fp,fp,7202
  80f818:	9425883a 	add	r18,r18,r16
  80f81c:	8c400044 	addi	r17,r17,1
  80f820:	008001c4 	movi	r2,7
  80f824:	1f000015 	stw	fp,0(r3)
  80f828:	1c000115 	stw	r16,4(r3)
  80f82c:	dc800e15 	stw	r18,56(sp)
  80f830:	dc400d15 	stw	r17,52(sp)
  80f834:	147d7016 	blt	r2,r17,80edf8 <___vfprintf_internal_r+0xb38>
  80f838:	18c00204 	addi	r3,r3,8
  80f83c:	003d7506 	br	80ee14 <___vfprintf_internal_r+0xb54>
  80f840:	dc800e17 	ldw	r18,56(sp)
  80f844:	dc400d17 	ldw	r17,52(sp)
  80f848:	070020b4 	movhi	fp,130
  80f84c:	e7070c84 	addi	fp,fp,7218
  80f850:	003bba06 	br	80e73c <___vfprintf_internal_r+0x47c>
  80f854:	d9014f17 	ldw	r4,1340(sp)
  80f858:	b00b883a 	mov	r5,r22
  80f85c:	d9800c04 	addi	r6,sp,48
  80f860:	080e2680 	call	80e268 <__sprint_r>
  80f864:	103c4e1e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80f868:	dc800e17 	ldw	r18,56(sp)
  80f86c:	d8c01904 	addi	r3,sp,100
  80f870:	003ce306 	br	80ec00 <___vfprintf_internal_r+0x940>
  80f874:	3c000017 	ldw	r16,0(r7)
  80f878:	0009883a 	mov	r4,zero
  80f87c:	39c00104 	addi	r7,r7,4
  80f880:	0023883a 	mov	r17,zero
  80f884:	d9c14015 	stw	r7,1280(sp)
  80f888:	d8000405 	stb	zero,16(sp)
  80f88c:	003d1a06 	br	80ecf8 <___vfprintf_internal_r+0xa38>
  80f890:	38800017 	ldw	r2,0(r7)
  80f894:	39c00104 	addi	r7,r7,4
  80f898:	d9c14015 	stw	r7,1280(sp)
  80f89c:	1023d7fa 	srai	r17,r2,31
  80f8a0:	1021883a 	mov	r16,r2
  80f8a4:	003d1206 	br	80ecf0 <___vfprintf_internal_r+0xa30>
  80f8a8:	3c000017 	ldw	r16,0(r7)
  80f8ac:	01000044 	movi	r4,1
  80f8b0:	39c00104 	addi	r7,r7,4
  80f8b4:	0023883a 	mov	r17,zero
  80f8b8:	d9c14015 	stw	r7,1280(sp)
  80f8bc:	d8000405 	stb	zero,16(sp)
  80f8c0:	003d0d06 	br	80ecf8 <___vfprintf_internal_r+0xa38>
  80f8c4:	008020b4 	movhi	r2,130
  80f8c8:	10860904 	addi	r2,r2,6180
  80f8cc:	94800044 	addi	r18,r18,1
  80f8d0:	8c400044 	addi	r17,r17,1
  80f8d4:	a8800015 	stw	r2,0(r21)
  80f8d8:	00c00044 	movi	r3,1
  80f8dc:	008001c4 	movi	r2,7
  80f8e0:	a8c00115 	stw	r3,4(r21)
  80f8e4:	dc800e15 	stw	r18,56(sp)
  80f8e8:	dc400d15 	stw	r17,52(sp)
  80f8ec:	1440ca16 	blt	r2,r17,80fc18 <___vfprintf_internal_r+0x1958>
  80f8f0:	a8c00204 	addi	r3,r21,8
  80f8f4:	2000061e 	bne	r4,zero,80f910 <___vfprintf_internal_r+0x1650>
  80f8f8:	d9414717 	ldw	r5,1308(sp)
  80f8fc:	2800041e 	bne	r5,zero,80f910 <___vfprintf_internal_r+0x1650>
  80f900:	d9814c17 	ldw	r6,1328(sp)
  80f904:	3080004c 	andi	r2,r6,1
  80f908:	1005003a 	cmpeq	r2,r2,zero
  80f90c:	103bea1e 	bne	r2,zero,80e8b8 <___vfprintf_internal_r+0x5f8>
  80f910:	00800044 	movi	r2,1
  80f914:	dc400d17 	ldw	r17,52(sp)
  80f918:	18800115 	stw	r2,4(r3)
  80f91c:	d8814917 	ldw	r2,1316(sp)
  80f920:	94800044 	addi	r18,r18,1
  80f924:	8c400044 	addi	r17,r17,1
  80f928:	18800015 	stw	r2,0(r3)
  80f92c:	008001c4 	movi	r2,7
  80f930:	dc800e15 	stw	r18,56(sp)
  80f934:	dc400d15 	stw	r17,52(sp)
  80f938:	1440ca16 	blt	r2,r17,80fc64 <___vfprintf_internal_r+0x19a4>
  80f93c:	18c00204 	addi	r3,r3,8
  80f940:	0121c83a 	sub	r16,zero,r4
  80f944:	0400500e 	bge	zero,r16,80fa88 <___vfprintf_internal_r+0x17c8>
  80f948:	00800404 	movi	r2,16
  80f94c:	1400800e 	bge	r2,r16,80fb50 <___vfprintf_internal_r+0x1890>
  80f950:	1027883a 	mov	r19,r2
  80f954:	070020b4 	movhi	fp,130
  80f958:	e7070884 	addi	fp,fp,7202
  80f95c:	050001c4 	movi	r20,7
  80f960:	00000306 	br	80f970 <___vfprintf_internal_r+0x16b0>
  80f964:	18c00204 	addi	r3,r3,8
  80f968:	843ffc04 	addi	r16,r16,-16
  80f96c:	9c007a0e 	bge	r19,r16,80fb58 <___vfprintf_internal_r+0x1898>
  80f970:	94800404 	addi	r18,r18,16
  80f974:	8c400044 	addi	r17,r17,1
  80f978:	1f000015 	stw	fp,0(r3)
  80f97c:	1cc00115 	stw	r19,4(r3)
  80f980:	dc800e15 	stw	r18,56(sp)
  80f984:	dc400d15 	stw	r17,52(sp)
  80f988:	a47ff60e 	bge	r20,r17,80f964 <___vfprintf_internal_r+0x16a4>
  80f98c:	d9014f17 	ldw	r4,1340(sp)
  80f990:	b00b883a 	mov	r5,r22
  80f994:	d9800c04 	addi	r6,sp,48
  80f998:	080e2680 	call	80e268 <__sprint_r>
  80f99c:	103c001e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80f9a0:	dc800e17 	ldw	r18,56(sp)
  80f9a4:	dc400d17 	ldw	r17,52(sp)
  80f9a8:	d8c01904 	addi	r3,sp,100
  80f9ac:	003fee06 	br	80f968 <___vfprintf_internal_r+0x16a8>
  80f9b0:	3c000017 	ldw	r16,0(r7)
  80f9b4:	0023883a 	mov	r17,zero
  80f9b8:	39c00104 	addi	r7,r7,4
  80f9bc:	d9c14015 	stw	r7,1280(sp)
  80f9c0:	003e8c06 	br	80f3f4 <___vfprintf_internal_r+0x1134>
  80f9c4:	d9401904 	addi	r5,sp,100
  80f9c8:	dd000f04 	addi	r20,sp,60
  80f9cc:	d9414115 	stw	r5,1284(sp)
  80f9d0:	d9814417 	ldw	r6,1296(sp)
  80f9d4:	880a973a 	slli	r5,r17,28
  80f9d8:	8004d13a 	srli	r2,r16,4
  80f9dc:	810003cc 	andi	r4,r16,15
  80f9e0:	3109883a 	add	r4,r6,r4
  80f9e4:	2884b03a 	or	r2,r5,r2
  80f9e8:	21400003 	ldbu	r5,0(r4)
  80f9ec:	d9014117 	ldw	r4,1284(sp)
  80f9f0:	8806d13a 	srli	r3,r17,4
  80f9f4:	1021883a 	mov	r16,r2
  80f9f8:	213fffc4 	addi	r4,r4,-1
  80f9fc:	d9014115 	stw	r4,1284(sp)
  80fa00:	d9814117 	ldw	r6,1284(sp)
  80fa04:	10c8b03a 	or	r4,r2,r3
  80fa08:	1823883a 	mov	r17,r3
  80fa0c:	31400005 	stb	r5,0(r6)
  80fa10:	203fef1e 	bne	r4,zero,80f9d0 <___vfprintf_internal_r+0x1710>
  80fa14:	003cc506 	br	80ed2c <___vfprintf_internal_r+0xa6c>
  80fa18:	00800c04 	movi	r2,48
  80fa1c:	d98018c4 	addi	r6,sp,99
  80fa20:	dd000f04 	addi	r20,sp,60
  80fa24:	d88018c5 	stb	r2,99(sp)
  80fa28:	d9814115 	stw	r6,1284(sp)
  80fa2c:	003cbf06 	br	80ed2c <___vfprintf_internal_r+0xa6c>
  80fa30:	dc400d17 	ldw	r17,52(sp)
  80fa34:	070020b4 	movhi	fp,130
  80fa38:	e7070c84 	addi	fp,fp,7218
  80fa3c:	003bc106 	br	80e944 <___vfprintf_internal_r+0x684>
  80fa40:	d9414c17 	ldw	r5,1328(sp)
  80fa44:	2880040c 	andi	r2,r5,16
  80fa48:	10007c26 	beq	r2,zero,80fc3c <___vfprintf_internal_r+0x197c>
  80fa4c:	38800017 	ldw	r2,0(r7)
  80fa50:	39c00104 	addi	r7,r7,4
  80fa54:	d9c14015 	stw	r7,1280(sp)
  80fa58:	d9814b17 	ldw	r6,1324(sp)
  80fa5c:	d9c14017 	ldw	r7,1280(sp)
  80fa60:	11800015 	stw	r6,0(r2)
  80fa64:	003a7206 	br	80e430 <___vfprintf_internal_r+0x170>
  80fa68:	d9014f17 	ldw	r4,1340(sp)
  80fa6c:	b00b883a 	mov	r5,r22
  80fa70:	d9800c04 	addi	r6,sp,48
  80fa74:	080e2680 	call	80e268 <__sprint_r>
  80fa78:	103bc91e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80fa7c:	dc800e17 	ldw	r18,56(sp)
  80fa80:	dc400d17 	ldw	r17,52(sp)
  80fa84:	d8c01904 	addi	r3,sp,100
  80fa88:	d9014717 	ldw	r4,1308(sp)
  80fa8c:	d9414117 	ldw	r5,1284(sp)
  80fa90:	8c400044 	addi	r17,r17,1
  80fa94:	9125883a 	add	r18,r18,r4
  80fa98:	008001c4 	movi	r2,7
  80fa9c:	19400015 	stw	r5,0(r3)
  80faa0:	19000115 	stw	r4,4(r3)
  80faa4:	dc800e15 	stw	r18,56(sp)
  80faa8:	dc400d15 	stw	r17,52(sp)
  80faac:	147ce816 	blt	r2,r17,80ee50 <___vfprintf_internal_r+0xb90>
  80fab0:	18c00204 	addi	r3,r3,8
  80fab4:	003b8006 	br	80e8b8 <___vfprintf_internal_r+0x5f8>
  80fab8:	38c00017 	ldw	r3,0(r7)
  80fabc:	39000204 	addi	r4,r7,8
  80fac0:	d9014015 	stw	r4,1280(sp)
  80fac4:	d8c14215 	stw	r3,1288(sp)
  80fac8:	39c00117 	ldw	r7,4(r7)
  80facc:	d9c14315 	stw	r7,1292(sp)
  80fad0:	003e1a06 	br	80f33c <___vfprintf_internal_r+0x107c>
  80fad4:	0005883a 	mov	r2,zero
  80fad8:	1409c83a 	sub	r4,r2,r16
  80fadc:	1105803a 	cmpltu	r2,r2,r4
  80fae0:	044bc83a 	sub	r5,zero,r17
  80fae4:	2885c83a 	sub	r2,r5,r2
  80fae8:	2021883a 	mov	r16,r4
  80faec:	1023883a 	mov	r17,r2
  80faf0:	01000044 	movi	r4,1
  80faf4:	00800b44 	movi	r2,45
  80faf8:	d8800405 	stb	r2,16(sp)
  80fafc:	003c7e06 	br	80ecf8 <___vfprintf_internal_r+0xa38>
  80fb00:	d9014f17 	ldw	r4,1340(sp)
  80fb04:	b00b883a 	mov	r5,r22
  80fb08:	d9800c04 	addi	r6,sp,48
  80fb0c:	080e2680 	call	80e268 <__sprint_r>
  80fb10:	103ba31e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80fb14:	dc800e17 	ldw	r18,56(sp)
  80fb18:	dc400d17 	ldw	r17,52(sp)
  80fb1c:	d9000517 	ldw	r4,20(sp)
  80fb20:	d9401904 	addi	r5,sp,100
  80fb24:	003da106 	br	80f1ac <___vfprintf_internal_r+0xeec>
  80fb28:	d9014f17 	ldw	r4,1340(sp)
  80fb2c:	b00b883a 	mov	r5,r22
  80fb30:	d9800c04 	addi	r6,sp,48
  80fb34:	080e2680 	call	80e268 <__sprint_r>
  80fb38:	103b991e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80fb3c:	dc800e17 	ldw	r18,56(sp)
  80fb40:	dc400d17 	ldw	r17,52(sp)
  80fb44:	d9000517 	ldw	r4,20(sp)
  80fb48:	d8c01904 	addi	r3,sp,100
  80fb4c:	003d8b06 	br	80f17c <___vfprintf_internal_r+0xebc>
  80fb50:	070020b4 	movhi	fp,130
  80fb54:	e7070884 	addi	fp,fp,7202
  80fb58:	9425883a 	add	r18,r18,r16
  80fb5c:	8c400044 	addi	r17,r17,1
  80fb60:	008001c4 	movi	r2,7
  80fb64:	1f000015 	stw	fp,0(r3)
  80fb68:	1c000115 	stw	r16,4(r3)
  80fb6c:	dc800e15 	stw	r18,56(sp)
  80fb70:	dc400d15 	stw	r17,52(sp)
  80fb74:	147fbc16 	blt	r2,r17,80fa68 <___vfprintf_internal_r+0x17a8>
  80fb78:	18c00204 	addi	r3,r3,8
  80fb7c:	003fc206 	br	80fa88 <___vfprintf_internal_r+0x17c8>
  80fb80:	d9014f17 	ldw	r4,1340(sp)
  80fb84:	b00b883a 	mov	r5,r22
  80fb88:	d9800c04 	addi	r6,sp,48
  80fb8c:	080e2680 	call	80e268 <__sprint_r>
  80fb90:	103b831e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80fb94:	dc800e17 	ldw	r18,56(sp)
  80fb98:	d9000517 	ldw	r4,20(sp)
  80fb9c:	d8c01904 	addi	r3,sp,100
  80fba0:	003cfc06 	br	80ef94 <___vfprintf_internal_r+0xcd4>
  80fba4:	070020b4 	movhi	fp,130
  80fba8:	e7070884 	addi	fp,fp,7202
  80fbac:	003bde06 	br	80eb28 <___vfprintf_internal_r+0x868>
  80fbb0:	008020b4 	movhi	r2,130
  80fbb4:	1086f804 	addi	r2,r2,7136
  80fbb8:	d8814115 	stw	r2,1284(sp)
  80fbbc:	003def06 	br	80f37c <___vfprintf_internal_r+0x10bc>
  80fbc0:	d9014217 	ldw	r4,1288(sp)
  80fbc4:	d9414317 	ldw	r5,1292(sp)
  80fbc8:	080ab500 	call	80ab50 <__isnand>
  80fbcc:	10003926 	beq	r2,zero,80fcb4 <___vfprintf_internal_r+0x19f4>
  80fbd0:	d9414d17 	ldw	r5,1332(sp)
  80fbd4:	008011c4 	movi	r2,71
  80fbd8:	1140ce16 	blt	r2,r5,80ff14 <___vfprintf_internal_r+0x1c54>
  80fbdc:	018020b4 	movhi	r6,130
  80fbe0:	3186f904 	addi	r6,r6,7140
  80fbe4:	d9814115 	stw	r6,1284(sp)
  80fbe8:	003de406 	br	80f37c <___vfprintf_internal_r+0x10bc>
  80fbec:	d9014c17 	ldw	r4,1328(sp)
  80fbf0:	bdc00044 	addi	r23,r23,1
  80fbf4:	b8c00007 	ldb	r3,0(r23)
  80fbf8:	21000814 	ori	r4,r4,32
  80fbfc:	d9014c15 	stw	r4,1328(sp)
  80fc00:	003a2e06 	br	80e4bc <___vfprintf_internal_r+0x1fc>
  80fc04:	dcc14515 	stw	r19,1300(sp)
  80fc08:	98011016 	blt	r19,zero,81004c <___vfprintf_internal_r+0x1d8c>
  80fc0c:	980f883a 	mov	r7,r19
  80fc10:	d8014615 	stw	zero,1304(sp)
  80fc14:	003c4c06 	br	80ed48 <___vfprintf_internal_r+0xa88>
  80fc18:	d9014f17 	ldw	r4,1340(sp)
  80fc1c:	b00b883a 	mov	r5,r22
  80fc20:	d9800c04 	addi	r6,sp,48
  80fc24:	080e2680 	call	80e268 <__sprint_r>
  80fc28:	103b5d1e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80fc2c:	dc800e17 	ldw	r18,56(sp)
  80fc30:	d9000517 	ldw	r4,20(sp)
  80fc34:	d8c01904 	addi	r3,sp,100
  80fc38:	003f2e06 	br	80f8f4 <___vfprintf_internal_r+0x1634>
  80fc3c:	d8c14c17 	ldw	r3,1328(sp)
  80fc40:	1880100c 	andi	r2,r3,64
  80fc44:	1000a026 	beq	r2,zero,80fec8 <___vfprintf_internal_r+0x1c08>
  80fc48:	38800017 	ldw	r2,0(r7)
  80fc4c:	39c00104 	addi	r7,r7,4
  80fc50:	d9c14015 	stw	r7,1280(sp)
  80fc54:	d9014b17 	ldw	r4,1324(sp)
  80fc58:	d9c14017 	ldw	r7,1280(sp)
  80fc5c:	1100000d 	sth	r4,0(r2)
  80fc60:	0039f306 	br	80e430 <___vfprintf_internal_r+0x170>
  80fc64:	d9014f17 	ldw	r4,1340(sp)
  80fc68:	b00b883a 	mov	r5,r22
  80fc6c:	d9800c04 	addi	r6,sp,48
  80fc70:	080e2680 	call	80e268 <__sprint_r>
  80fc74:	103b4a1e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80fc78:	dc800e17 	ldw	r18,56(sp)
  80fc7c:	dc400d17 	ldw	r17,52(sp)
  80fc80:	d9000517 	ldw	r4,20(sp)
  80fc84:	d8c01904 	addi	r3,sp,100
  80fc88:	003f2d06 	br	80f940 <___vfprintf_internal_r+0x1680>
  80fc8c:	00800184 	movi	r2,6
  80fc90:	14c09a36 	bltu	r2,r19,80fefc <___vfprintf_internal_r+0x1c3c>
  80fc94:	dcc14515 	stw	r19,1300(sp)
  80fc98:	9800010e 	bge	r19,zero,80fca0 <___vfprintf_internal_r+0x19e0>
  80fc9c:	d8014515 	stw	zero,1300(sp)
  80fca0:	008020b4 	movhi	r2,130
  80fca4:	1086fb04 	addi	r2,r2,7148
  80fca8:	980f883a 	mov	r7,r19
  80fcac:	d8814115 	stw	r2,1284(sp)
  80fcb0:	003a7206 	br	80e67c <___vfprintf_internal_r+0x3bc>
  80fcb4:	00bfffc4 	movi	r2,-1
  80fcb8:	9880e226 	beq	r19,r2,810044 <___vfprintf_internal_r+0x1d84>
  80fcbc:	d9414d17 	ldw	r5,1332(sp)
  80fcc0:	008019c4 	movi	r2,103
  80fcc4:	2880dc26 	beq	r5,r2,810038 <___vfprintf_internal_r+0x1d78>
  80fcc8:	008011c4 	movi	r2,71
  80fccc:	2880da26 	beq	r5,r2,810038 <___vfprintf_internal_r+0x1d78>
  80fcd0:	d9414c17 	ldw	r5,1328(sp)
  80fcd4:	d9014317 	ldw	r4,1292(sp)
  80fcd8:	d9814217 	ldw	r6,1288(sp)
  80fcdc:	29404014 	ori	r5,r5,256
  80fce0:	d9414c15 	stw	r5,1328(sp)
  80fce4:	2000cc16 	blt	r4,zero,810018 <___vfprintf_internal_r+0x1d58>
  80fce8:	3021883a 	mov	r16,r6
  80fcec:	2023883a 	mov	r17,r4
  80fcf0:	0039883a 	mov	fp,zero
  80fcf4:	d9414d17 	ldw	r5,1332(sp)
  80fcf8:	00801984 	movi	r2,102
  80fcfc:	2880b726 	beq	r5,r2,80ffdc <___vfprintf_internal_r+0x1d1c>
  80fd00:	00801184 	movi	r2,70
  80fd04:	2880b526 	beq	r5,r2,80ffdc <___vfprintf_internal_r+0x1d1c>
  80fd08:	00801944 	movi	r2,101
  80fd0c:	2880c826 	beq	r5,r2,810030 <___vfprintf_internal_r+0x1d70>
  80fd10:	00801144 	movi	r2,69
  80fd14:	2880c626 	beq	r5,r2,810030 <___vfprintf_internal_r+0x1d70>
  80fd18:	9829883a 	mov	r20,r19
  80fd1c:	d9014f17 	ldw	r4,1340(sp)
  80fd20:	d8800504 	addi	r2,sp,20
  80fd24:	880d883a 	mov	r6,r17
  80fd28:	d8800115 	stw	r2,4(sp)
  80fd2c:	d8c00604 	addi	r3,sp,24
  80fd30:	d8800704 	addi	r2,sp,28
  80fd34:	800b883a 	mov	r5,r16
  80fd38:	01c00084 	movi	r7,2
  80fd3c:	d8c00215 	stw	r3,8(sp)
  80fd40:	d8800315 	stw	r2,12(sp)
  80fd44:	dd000015 	stw	r20,0(sp)
  80fd48:	08105280 	call	810528 <_dtoa_r>
  80fd4c:	d9814d17 	ldw	r6,1332(sp)
  80fd50:	d8814115 	stw	r2,1284(sp)
  80fd54:	008019c4 	movi	r2,103
  80fd58:	30809526 	beq	r6,r2,80ffb0 <___vfprintf_internal_r+0x1cf0>
  80fd5c:	d8c14d17 	ldw	r3,1332(sp)
  80fd60:	008011c4 	movi	r2,71
  80fd64:	18809226 	beq	r3,r2,80ffb0 <___vfprintf_internal_r+0x1cf0>
  80fd68:	d9414117 	ldw	r5,1284(sp)
  80fd6c:	d9814d17 	ldw	r6,1332(sp)
  80fd70:	00801984 	movi	r2,102
  80fd74:	2d25883a 	add	r18,r5,r20
  80fd78:	30808626 	beq	r6,r2,80ff94 <___vfprintf_internal_r+0x1cd4>
  80fd7c:	00801184 	movi	r2,70
  80fd80:	30808426 	beq	r6,r2,80ff94 <___vfprintf_internal_r+0x1cd4>
  80fd84:	000d883a 	mov	r6,zero
  80fd88:	000f883a 	mov	r7,zero
  80fd8c:	880b883a 	mov	r5,r17
  80fd90:	8009883a 	mov	r4,r16
  80fd94:	080c2140 	call	80c214 <__eqdf2>
  80fd98:	1000751e 	bne	r2,zero,80ff70 <___vfprintf_internal_r+0x1cb0>
  80fd9c:	9005883a 	mov	r2,r18
  80fda0:	dc800715 	stw	r18,28(sp)
  80fda4:	d9014117 	ldw	r4,1284(sp)
  80fda8:	d9414d17 	ldw	r5,1332(sp)
  80fdac:	00c019c4 	movi	r3,103
  80fdb0:	1125c83a 	sub	r18,r2,r4
  80fdb4:	28c06826 	beq	r5,r3,80ff58 <___vfprintf_internal_r+0x1c98>
  80fdb8:	008011c4 	movi	r2,71
  80fdbc:	28806626 	beq	r5,r2,80ff58 <___vfprintf_internal_r+0x1c98>
  80fdc0:	d9000517 	ldw	r4,20(sp)
  80fdc4:	d8c14d17 	ldw	r3,1332(sp)
  80fdc8:	00801944 	movi	r2,101
  80fdcc:	10c05516 	blt	r2,r3,80ff24 <___vfprintf_internal_r+0x1c64>
  80fdd0:	213fffc4 	addi	r4,r4,-1
  80fdd4:	d9000515 	stw	r4,20(sp)
  80fdd8:	d8c00805 	stb	r3,32(sp)
  80fddc:	2021883a 	mov	r16,r4
  80fde0:	2000c116 	blt	r4,zero,8100e8 <___vfprintf_internal_r+0x1e28>
  80fde4:	00800ac4 	movi	r2,43
  80fde8:	d8800845 	stb	r2,33(sp)
  80fdec:	00800244 	movi	r2,9
  80fdf0:	1400af0e 	bge	r2,r16,8100b0 <___vfprintf_internal_r+0x1df0>
  80fdf4:	1027883a 	mov	r19,r2
  80fdf8:	dc400b84 	addi	r17,sp,46
  80fdfc:	8009883a 	mov	r4,r16
  80fe00:	01400284 	movi	r5,10
  80fe04:	080c89c0 	call	80c89c <__modsi3>
  80fe08:	10800c04 	addi	r2,r2,48
  80fe0c:	8c7fffc4 	addi	r17,r17,-1
  80fe10:	8009883a 	mov	r4,r16
  80fe14:	01400284 	movi	r5,10
  80fe18:	88800005 	stb	r2,0(r17)
  80fe1c:	080c83c0 	call	80c83c <__divsi3>
  80fe20:	1021883a 	mov	r16,r2
  80fe24:	98bff516 	blt	r19,r2,80fdfc <___vfprintf_internal_r+0x1b3c>
  80fe28:	10c00c04 	addi	r3,r2,48
  80fe2c:	d88009c4 	addi	r2,sp,39
  80fe30:	108001c4 	addi	r2,r2,7
  80fe34:	897fffc4 	addi	r5,r17,-1
  80fe38:	88ffffc5 	stb	r3,-1(r17)
  80fe3c:	2880a72e 	bgeu	r5,r2,8100dc <___vfprintf_internal_r+0x1e1c>
  80fe40:	1009883a 	mov	r4,r2
  80fe44:	d9800804 	addi	r6,sp,32
  80fe48:	d8c00884 	addi	r3,sp,34
  80fe4c:	28800003 	ldbu	r2,0(r5)
  80fe50:	29400044 	addi	r5,r5,1
  80fe54:	18800005 	stb	r2,0(r3)
  80fe58:	18c00044 	addi	r3,r3,1
  80fe5c:	293ffb36 	bltu	r5,r4,80fe4c <___vfprintf_internal_r+0x1b8c>
  80fe60:	1987c83a 	sub	r3,r3,r6
  80fe64:	00800044 	movi	r2,1
  80fe68:	d8c14815 	stw	r3,1312(sp)
  80fe6c:	90cf883a 	add	r7,r18,r3
  80fe70:	1480960e 	bge	r2,r18,8100cc <___vfprintf_internal_r+0x1e0c>
  80fe74:	39c00044 	addi	r7,r7,1
  80fe78:	d9c14515 	stw	r7,1300(sp)
  80fe7c:	38003416 	blt	r7,zero,80ff50 <___vfprintf_internal_r+0x1c90>
  80fe80:	e0803fcc 	andi	r2,fp,255
  80fe84:	1080201c 	xori	r2,r2,128
  80fe88:	10bfe004 	addi	r2,r2,-128
  80fe8c:	10004e26 	beq	r2,zero,80ffc8 <___vfprintf_internal_r+0x1d08>
  80fe90:	00800b44 	movi	r2,45
  80fe94:	dc814715 	stw	r18,1308(sp)
  80fe98:	d8014615 	stw	zero,1304(sp)
  80fe9c:	d8800405 	stb	r2,16(sp)
  80fea0:	003bab06 	br	80ed50 <___vfprintf_internal_r+0xa90>
  80fea4:	00800b44 	movi	r2,45
  80fea8:	d8800405 	stb	r2,16(sp)
  80feac:	003d2d06 	br	80f364 <___vfprintf_internal_r+0x10a4>
  80feb0:	d9014f17 	ldw	r4,1340(sp)
  80feb4:	b00b883a 	mov	r5,r22
  80feb8:	d9800c04 	addi	r6,sp,48
  80febc:	080e2680 	call	80e268 <__sprint_r>
  80fec0:	103ab71e 	bne	r2,zero,80e9a0 <___vfprintf_internal_r+0x6e0>
  80fec4:	003ab506 	br	80e99c <___vfprintf_internal_r+0x6dc>
  80fec8:	38800017 	ldw	r2,0(r7)
  80fecc:	39c00104 	addi	r7,r7,4
  80fed0:	d9c14015 	stw	r7,1280(sp)
  80fed4:	d9414b17 	ldw	r5,1324(sp)
  80fed8:	d9c14017 	ldw	r7,1280(sp)
  80fedc:	11400015 	stw	r5,0(r2)
  80fee0:	00395306 	br	80e430 <___vfprintf_internal_r+0x170>
  80fee4:	980f883a 	mov	r7,r19
  80fee8:	dcc14515 	stw	r19,1300(sp)
  80feec:	d8014615 	stw	zero,1304(sp)
  80fef0:	003b9506 	br	80ed48 <___vfprintf_internal_r+0xa88>
  80fef4:	0027883a 	mov	r19,zero
  80fef8:	00397206 	br	80e4c4 <___vfprintf_internal_r+0x204>
  80fefc:	00c020b4 	movhi	r3,130
  80ff00:	18c6fb04 	addi	r3,r3,7148
  80ff04:	100f883a 	mov	r7,r2
  80ff08:	d8814515 	stw	r2,1300(sp)
  80ff0c:	d8c14115 	stw	r3,1284(sp)
  80ff10:	0039da06 	br	80e67c <___vfprintf_internal_r+0x3bc>
  80ff14:	008020b4 	movhi	r2,130
  80ff18:	1086fa04 	addi	r2,r2,7144
  80ff1c:	d8814115 	stw	r2,1284(sp)
  80ff20:	003d1606 	br	80f37c <___vfprintf_internal_r+0x10bc>
  80ff24:	d9414d17 	ldw	r5,1332(sp)
  80ff28:	00801984 	movi	r2,102
  80ff2c:	28804926 	beq	r5,r2,810054 <___vfprintf_internal_r+0x1d94>
  80ff30:	200f883a 	mov	r7,r4
  80ff34:	24805716 	blt	r4,r18,810094 <___vfprintf_internal_r+0x1dd4>
  80ff38:	d9414c17 	ldw	r5,1328(sp)
  80ff3c:	2880004c 	andi	r2,r5,1
  80ff40:	10000126 	beq	r2,zero,80ff48 <___vfprintf_internal_r+0x1c88>
  80ff44:	21c00044 	addi	r7,r4,1
  80ff48:	d9c14515 	stw	r7,1300(sp)
  80ff4c:	383fcc0e 	bge	r7,zero,80fe80 <___vfprintf_internal_r+0x1bc0>
  80ff50:	d8014515 	stw	zero,1300(sp)
  80ff54:	003fca06 	br	80fe80 <___vfprintf_internal_r+0x1bc0>
  80ff58:	d9000517 	ldw	r4,20(sp)
  80ff5c:	00bfff04 	movi	r2,-4
  80ff60:	1100480e 	bge	r2,r4,810084 <___vfprintf_internal_r+0x1dc4>
  80ff64:	99004716 	blt	r19,r4,810084 <___vfprintf_internal_r+0x1dc4>
  80ff68:	d8c14d15 	stw	r3,1332(sp)
  80ff6c:	003ff006 	br	80ff30 <___vfprintf_internal_r+0x1c70>
  80ff70:	d8800717 	ldw	r2,28(sp)
  80ff74:	14bf8b2e 	bgeu	r2,r18,80fda4 <___vfprintf_internal_r+0x1ae4>
  80ff78:	9007883a 	mov	r3,r18
  80ff7c:	01000c04 	movi	r4,48
  80ff80:	11000005 	stb	r4,0(r2)
  80ff84:	10800044 	addi	r2,r2,1
  80ff88:	d8800715 	stw	r2,28(sp)
  80ff8c:	18bffc1e 	bne	r3,r2,80ff80 <___vfprintf_internal_r+0x1cc0>
  80ff90:	003f8406 	br	80fda4 <___vfprintf_internal_r+0x1ae4>
  80ff94:	d8814117 	ldw	r2,1284(sp)
  80ff98:	10c00007 	ldb	r3,0(r2)
  80ff9c:	00800c04 	movi	r2,48
  80ffa0:	18805b26 	beq	r3,r2,810110 <___vfprintf_internal_r+0x1e50>
  80ffa4:	d9000517 	ldw	r4,20(sp)
  80ffa8:	9125883a 	add	r18,r18,r4
  80ffac:	003f7506 	br	80fd84 <___vfprintf_internal_r+0x1ac4>
  80ffb0:	d9014c17 	ldw	r4,1328(sp)
  80ffb4:	2080004c 	andi	r2,r4,1
  80ffb8:	1005003a 	cmpeq	r2,r2,zero
  80ffbc:	103f6a26 	beq	r2,zero,80fd68 <___vfprintf_internal_r+0x1aa8>
  80ffc0:	d8800717 	ldw	r2,28(sp)
  80ffc4:	003f7706 	br	80fda4 <___vfprintf_internal_r+0x1ae4>
  80ffc8:	d9c14515 	stw	r7,1300(sp)
  80ffcc:	38004d16 	blt	r7,zero,810104 <___vfprintf_internal_r+0x1e44>
  80ffd0:	dc814715 	stw	r18,1308(sp)
  80ffd4:	d8014615 	stw	zero,1304(sp)
  80ffd8:	003b5b06 	br	80ed48 <___vfprintf_internal_r+0xa88>
  80ffdc:	d9014f17 	ldw	r4,1340(sp)
  80ffe0:	d8800504 	addi	r2,sp,20
  80ffe4:	d8800115 	stw	r2,4(sp)
  80ffe8:	d8c00604 	addi	r3,sp,24
  80ffec:	d8800704 	addi	r2,sp,28
  80fff0:	800b883a 	mov	r5,r16
  80fff4:	880d883a 	mov	r6,r17
  80fff8:	01c000c4 	movi	r7,3
  80fffc:	d8c00215 	stw	r3,8(sp)
  810000:	d8800315 	stw	r2,12(sp)
  810004:	dcc00015 	stw	r19,0(sp)
  810008:	9829883a 	mov	r20,r19
  81000c:	08105280 	call	810528 <_dtoa_r>
  810010:	d8814115 	stw	r2,1284(sp)
  810014:	003f5106 	br	80fd5c <___vfprintf_internal_r+0x1a9c>
  810018:	d8c14217 	ldw	r3,1288(sp)
  81001c:	d9014317 	ldw	r4,1292(sp)
  810020:	07000b44 	movi	fp,45
  810024:	1821883a 	mov	r16,r3
  810028:	2460003c 	xorhi	r17,r4,32768
  81002c:	003f3106 	br	80fcf4 <___vfprintf_internal_r+0x1a34>
  810030:	9d000044 	addi	r20,r19,1
  810034:	003f3906 	br	80fd1c <___vfprintf_internal_r+0x1a5c>
  810038:	983f251e 	bne	r19,zero,80fcd0 <___vfprintf_internal_r+0x1a10>
  81003c:	04c00044 	movi	r19,1
  810040:	003f2306 	br	80fcd0 <___vfprintf_internal_r+0x1a10>
  810044:	04c00184 	movi	r19,6
  810048:	003f2106 	br	80fcd0 <___vfprintf_internal_r+0x1a10>
  81004c:	d8014515 	stw	zero,1300(sp)
  810050:	003eee06 	br	80fc0c <___vfprintf_internal_r+0x194c>
  810054:	200f883a 	mov	r7,r4
  810058:	0100370e 	bge	zero,r4,810138 <___vfprintf_internal_r+0x1e78>
  81005c:	9800031e 	bne	r19,zero,81006c <___vfprintf_internal_r+0x1dac>
  810060:	d9814c17 	ldw	r6,1328(sp)
  810064:	3080004c 	andi	r2,r6,1
  810068:	103fb726 	beq	r2,zero,80ff48 <___vfprintf_internal_r+0x1c88>
  81006c:	20800044 	addi	r2,r4,1
  810070:	98a7883a 	add	r19,r19,r2
  810074:	dcc14515 	stw	r19,1300(sp)
  810078:	980f883a 	mov	r7,r19
  81007c:	983f800e 	bge	r19,zero,80fe80 <___vfprintf_internal_r+0x1bc0>
  810080:	003fb306 	br	80ff50 <___vfprintf_internal_r+0x1c90>
  810084:	d9814d17 	ldw	r6,1332(sp)
  810088:	31bfff84 	addi	r6,r6,-2
  81008c:	d9814d15 	stw	r6,1332(sp)
  810090:	003f4c06 	br	80fdc4 <___vfprintf_internal_r+0x1b04>
  810094:	0100180e 	bge	zero,r4,8100f8 <___vfprintf_internal_r+0x1e38>
  810098:	00800044 	movi	r2,1
  81009c:	1485883a 	add	r2,r2,r18
  8100a0:	d8814515 	stw	r2,1300(sp)
  8100a4:	100f883a 	mov	r7,r2
  8100a8:	103f750e 	bge	r2,zero,80fe80 <___vfprintf_internal_r+0x1bc0>
  8100ac:	003fa806 	br	80ff50 <___vfprintf_internal_r+0x1c90>
  8100b0:	80c00c04 	addi	r3,r16,48
  8100b4:	00800c04 	movi	r2,48
  8100b8:	d8c008c5 	stb	r3,35(sp)
  8100bc:	d9800804 	addi	r6,sp,32
  8100c0:	d8c00904 	addi	r3,sp,36
  8100c4:	d8800885 	stb	r2,34(sp)
  8100c8:	003f6506 	br	80fe60 <___vfprintf_internal_r+0x1ba0>
  8100cc:	d9014c17 	ldw	r4,1328(sp)
  8100d0:	2084703a 	and	r2,r4,r2
  8100d4:	103f9c26 	beq	r2,zero,80ff48 <___vfprintf_internal_r+0x1c88>
  8100d8:	003f6606 	br	80fe74 <___vfprintf_internal_r+0x1bb4>
  8100dc:	d9800804 	addi	r6,sp,32
  8100e0:	d8c00884 	addi	r3,sp,34
  8100e4:	003f5e06 	br	80fe60 <___vfprintf_internal_r+0x1ba0>
  8100e8:	00800b44 	movi	r2,45
  8100ec:	0121c83a 	sub	r16,zero,r4
  8100f0:	d8800845 	stb	r2,33(sp)
  8100f4:	003f3d06 	br	80fdec <___vfprintf_internal_r+0x1b2c>
  8100f8:	00800084 	movi	r2,2
  8100fc:	1105c83a 	sub	r2,r2,r4
  810100:	003fe606 	br	81009c <___vfprintf_internal_r+0x1ddc>
  810104:	d8014515 	stw	zero,1300(sp)
  810108:	dc814715 	stw	r18,1308(sp)
  81010c:	003fb106 	br	80ffd4 <___vfprintf_internal_r+0x1d14>
  810110:	000d883a 	mov	r6,zero
  810114:	000f883a 	mov	r7,zero
  810118:	8009883a 	mov	r4,r16
  81011c:	880b883a 	mov	r5,r17
  810120:	080c29c0 	call	80c29c <__nedf2>
  810124:	103f9f26 	beq	r2,zero,80ffa4 <___vfprintf_internal_r+0x1ce4>
  810128:	00800044 	movi	r2,1
  81012c:	1509c83a 	sub	r4,r2,r20
  810130:	d9000515 	stw	r4,20(sp)
  810134:	003f9b06 	br	80ffa4 <___vfprintf_internal_r+0x1ce4>
  810138:	98000d1e 	bne	r19,zero,810170 <___vfprintf_internal_r+0x1eb0>
  81013c:	d8c14c17 	ldw	r3,1328(sp)
  810140:	1880004c 	andi	r2,r3,1
  810144:	10000a1e 	bne	r2,zero,810170 <___vfprintf_internal_r+0x1eb0>
  810148:	01000044 	movi	r4,1
  81014c:	200f883a 	mov	r7,r4
  810150:	d9014515 	stw	r4,1300(sp)
  810154:	003f4a06 	br	80fe80 <___vfprintf_internal_r+0x1bc0>
  810158:	3cc00017 	ldw	r19,0(r7)
  81015c:	39c00104 	addi	r7,r7,4
  810160:	983d0e0e 	bge	r19,zero,80f59c <___vfprintf_internal_r+0x12dc>
  810164:	b8c00007 	ldb	r3,0(r23)
  810168:	04ffffc4 	movi	r19,-1
  81016c:	0038d306 	br	80e4bc <___vfprintf_internal_r+0x1fc>
  810170:	9cc00084 	addi	r19,r19,2
  810174:	dcc14515 	stw	r19,1300(sp)
  810178:	980f883a 	mov	r7,r19
  81017c:	983f400e 	bge	r19,zero,80fe80 <___vfprintf_internal_r+0x1bc0>
  810180:	003f7306 	br	80ff50 <___vfprintf_internal_r+0x1c90>

00810184 <__vfprintf_internal>:
  810184:	008020b4 	movhi	r2,130
  810188:	108e6f04 	addi	r2,r2,14780
  81018c:	2013883a 	mov	r9,r4
  810190:	11000017 	ldw	r4,0(r2)
  810194:	2805883a 	mov	r2,r5
  810198:	300f883a 	mov	r7,r6
  81019c:	480b883a 	mov	r5,r9
  8101a0:	100d883a 	mov	r6,r2
  8101a4:	080e2c01 	jmpi	80e2c0 <___vfprintf_internal_r>

008101a8 <__swsetup_r>:
  8101a8:	008020b4 	movhi	r2,130
  8101ac:	108e6f04 	addi	r2,r2,14780
  8101b0:	10c00017 	ldw	r3,0(r2)
  8101b4:	defffd04 	addi	sp,sp,-12
  8101b8:	dc400115 	stw	r17,4(sp)
  8101bc:	dc000015 	stw	r16,0(sp)
  8101c0:	dfc00215 	stw	ra,8(sp)
  8101c4:	2023883a 	mov	r17,r4
  8101c8:	2821883a 	mov	r16,r5
  8101cc:	18000226 	beq	r3,zero,8101d8 <__swsetup_r+0x30>
  8101d0:	18800e17 	ldw	r2,56(r3)
  8101d4:	10001f26 	beq	r2,zero,810254 <__swsetup_r+0xac>
  8101d8:	8100030b 	ldhu	r4,12(r16)
  8101dc:	2080020c 	andi	r2,r4,8
  8101e0:	10002826 	beq	r2,zero,810284 <__swsetup_r+0xdc>
  8101e4:	81400417 	ldw	r5,16(r16)
  8101e8:	28001d26 	beq	r5,zero,810260 <__swsetup_r+0xb8>
  8101ec:	2080004c 	andi	r2,r4,1
  8101f0:	1005003a 	cmpeq	r2,r2,zero
  8101f4:	10000b26 	beq	r2,zero,810224 <__swsetup_r+0x7c>
  8101f8:	2080008c 	andi	r2,r4,2
  8101fc:	10001226 	beq	r2,zero,810248 <__swsetup_r+0xa0>
  810200:	0005883a 	mov	r2,zero
  810204:	80800215 	stw	r2,8(r16)
  810208:	28000b26 	beq	r5,zero,810238 <__swsetup_r+0x90>
  81020c:	0005883a 	mov	r2,zero
  810210:	dfc00217 	ldw	ra,8(sp)
  810214:	dc400117 	ldw	r17,4(sp)
  810218:	dc000017 	ldw	r16,0(sp)
  81021c:	dec00304 	addi	sp,sp,12
  810220:	f800283a 	ret
  810224:	80800517 	ldw	r2,20(r16)
  810228:	80000215 	stw	zero,8(r16)
  81022c:	0085c83a 	sub	r2,zero,r2
  810230:	80800615 	stw	r2,24(r16)
  810234:	283ff51e 	bne	r5,zero,81020c <__swsetup_r+0x64>
  810238:	2080200c 	andi	r2,r4,128
  81023c:	103ff326 	beq	r2,zero,81020c <__swsetup_r+0x64>
  810240:	00bfffc4 	movi	r2,-1
  810244:	003ff206 	br	810210 <__swsetup_r+0x68>
  810248:	80800517 	ldw	r2,20(r16)
  81024c:	80800215 	stw	r2,8(r16)
  810250:	003fed06 	br	810208 <__swsetup_r+0x60>
  810254:	1809883a 	mov	r4,r3
  810258:	0811d740 	call	811d74 <__sinit>
  81025c:	003fde06 	br	8101d8 <__swsetup_r+0x30>
  810260:	20c0a00c 	andi	r3,r4,640
  810264:	00808004 	movi	r2,512
  810268:	18bfe026 	beq	r3,r2,8101ec <__swsetup_r+0x44>
  81026c:	8809883a 	mov	r4,r17
  810270:	800b883a 	mov	r5,r16
  810274:	0812b200 	call	812b20 <__smakebuf_r>
  810278:	8100030b 	ldhu	r4,12(r16)
  81027c:	81400417 	ldw	r5,16(r16)
  810280:	003fda06 	br	8101ec <__swsetup_r+0x44>
  810284:	2080040c 	andi	r2,r4,16
  810288:	103fed26 	beq	r2,zero,810240 <__swsetup_r+0x98>
  81028c:	2080010c 	andi	r2,r4,4
  810290:	10001226 	beq	r2,zero,8102dc <__swsetup_r+0x134>
  810294:	81400c17 	ldw	r5,48(r16)
  810298:	28000526 	beq	r5,zero,8102b0 <__swsetup_r+0x108>
  81029c:	80801004 	addi	r2,r16,64
  8102a0:	28800226 	beq	r5,r2,8102ac <__swsetup_r+0x104>
  8102a4:	8809883a 	mov	r4,r17
  8102a8:	081212c0 	call	81212c <_free_r>
  8102ac:	80000c15 	stw	zero,48(r16)
  8102b0:	8080030b 	ldhu	r2,12(r16)
  8102b4:	81400417 	ldw	r5,16(r16)
  8102b8:	80000115 	stw	zero,4(r16)
  8102bc:	10bff6cc 	andi	r2,r2,65499
  8102c0:	8080030d 	sth	r2,12(r16)
  8102c4:	81400015 	stw	r5,0(r16)
  8102c8:	8080030b 	ldhu	r2,12(r16)
  8102cc:	10800214 	ori	r2,r2,8
  8102d0:	113fffcc 	andi	r4,r2,65535
  8102d4:	8080030d 	sth	r2,12(r16)
  8102d8:	003fc306 	br	8101e8 <__swsetup_r+0x40>
  8102dc:	81400417 	ldw	r5,16(r16)
  8102e0:	003ff906 	br	8102c8 <__swsetup_r+0x120>

008102e4 <quorem>:
  8102e4:	28c00417 	ldw	r3,16(r5)
  8102e8:	20800417 	ldw	r2,16(r4)
  8102ec:	defff104 	addi	sp,sp,-60
  8102f0:	dfc00e15 	stw	ra,56(sp)
  8102f4:	df000d15 	stw	fp,52(sp)
  8102f8:	ddc00c15 	stw	r23,48(sp)
  8102fc:	dd800b15 	stw	r22,44(sp)
  810300:	dd400a15 	stw	r21,40(sp)
  810304:	dd000915 	stw	r20,36(sp)
  810308:	dcc00815 	stw	r19,32(sp)
  81030c:	dc800715 	stw	r18,28(sp)
  810310:	dc400615 	stw	r17,24(sp)
  810314:	dc000515 	stw	r16,20(sp)
  810318:	d9000315 	stw	r4,12(sp)
  81031c:	d9400415 	stw	r5,16(sp)
  810320:	10c07f16 	blt	r2,r3,810520 <quorem+0x23c>
  810324:	1d3fffc4 	addi	r20,r3,-1
  810328:	d8c00417 	ldw	r3,16(sp)
  81032c:	d9000317 	ldw	r4,12(sp)
  810330:	a505883a 	add	r2,r20,r20
  810334:	1085883a 	add	r2,r2,r2
  810338:	1cc00504 	addi	r19,r3,20
  81033c:	25c00504 	addi	r23,r4,20
  810340:	98ad883a 	add	r22,r19,r2
  810344:	15c7883a 	add	r3,r2,r23
  810348:	b1400017 	ldw	r5,0(r22)
  81034c:	19000017 	ldw	r4,0(r3)
  810350:	d8c00015 	stw	r3,0(sp)
  810354:	29400044 	addi	r5,r5,1
  810358:	d9000215 	stw	r4,8(sp)
  81035c:	080c8fc0 	call	80c8fc <__udivsi3>
  810360:	1039883a 	mov	fp,r2
  810364:	10003d1e 	bne	r2,zero,81045c <quorem+0x178>
  810368:	d9400417 	ldw	r5,16(sp)
  81036c:	d9000317 	ldw	r4,12(sp)
  810370:	081306c0 	call	81306c <__mcmp>
  810374:	10002c16 	blt	r2,zero,810428 <quorem+0x144>
  810378:	e7000044 	addi	fp,fp,1
  81037c:	b80f883a 	mov	r7,r23
  810380:	0011883a 	mov	r8,zero
  810384:	0009883a 	mov	r4,zero
  810388:	99400017 	ldw	r5,0(r19)
  81038c:	38c00017 	ldw	r3,0(r7)
  810390:	9cc00104 	addi	r19,r19,4
  810394:	28bfffcc 	andi	r2,r5,65535
  810398:	2085883a 	add	r2,r4,r2
  81039c:	11bfffcc 	andi	r6,r2,65535
  8103a0:	193fffcc 	andi	r4,r3,65535
  8103a4:	1004d43a 	srli	r2,r2,16
  8103a8:	280ad43a 	srli	r5,r5,16
  8103ac:	2189c83a 	sub	r4,r4,r6
  8103b0:	2209883a 	add	r4,r4,r8
  8103b4:	1806d43a 	srli	r3,r3,16
  8103b8:	288b883a 	add	r5,r5,r2
  8103bc:	200dd43a 	srai	r6,r4,16
  8103c0:	28bfffcc 	andi	r2,r5,65535
  8103c4:	1887c83a 	sub	r3,r3,r2
  8103c8:	1987883a 	add	r3,r3,r6
  8103cc:	3900000d 	sth	r4,0(r7)
  8103d0:	38c0008d 	sth	r3,2(r7)
  8103d4:	2808d43a 	srli	r4,r5,16
  8103d8:	39c00104 	addi	r7,r7,4
  8103dc:	1811d43a 	srai	r8,r3,16
  8103e0:	b4ffe92e 	bgeu	r22,r19,810388 <quorem+0xa4>
  8103e4:	a505883a 	add	r2,r20,r20
  8103e8:	1085883a 	add	r2,r2,r2
  8103ec:	b885883a 	add	r2,r23,r2
  8103f0:	10c00017 	ldw	r3,0(r2)
  8103f4:	18000c1e 	bne	r3,zero,810428 <quorem+0x144>
  8103f8:	113fff04 	addi	r4,r2,-4
  8103fc:	b900082e 	bgeu	r23,r4,810420 <quorem+0x13c>
  810400:	10bfff17 	ldw	r2,-4(r2)
  810404:	10000326 	beq	r2,zero,810414 <quorem+0x130>
  810408:	00000506 	br	810420 <quorem+0x13c>
  81040c:	20800017 	ldw	r2,0(r4)
  810410:	1000031e 	bne	r2,zero,810420 <quorem+0x13c>
  810414:	213fff04 	addi	r4,r4,-4
  810418:	a53fffc4 	addi	r20,r20,-1
  81041c:	b93ffb36 	bltu	r23,r4,81040c <quorem+0x128>
  810420:	d9000317 	ldw	r4,12(sp)
  810424:	25000415 	stw	r20,16(r4)
  810428:	e005883a 	mov	r2,fp
  81042c:	dfc00e17 	ldw	ra,56(sp)
  810430:	df000d17 	ldw	fp,52(sp)
  810434:	ddc00c17 	ldw	r23,48(sp)
  810438:	dd800b17 	ldw	r22,44(sp)
  81043c:	dd400a17 	ldw	r21,40(sp)
  810440:	dd000917 	ldw	r20,36(sp)
  810444:	dcc00817 	ldw	r19,32(sp)
  810448:	dc800717 	ldw	r18,28(sp)
  81044c:	dc400617 	ldw	r17,24(sp)
  810450:	dc000517 	ldw	r16,20(sp)
  810454:	dec00f04 	addi	sp,sp,60
  810458:	f800283a 	ret
  81045c:	b823883a 	mov	r17,r23
  810460:	9825883a 	mov	r18,r19
  810464:	d8000115 	stw	zero,4(sp)
  810468:	002b883a 	mov	r21,zero
  81046c:	94000017 	ldw	r16,0(r18)
  810470:	e009883a 	mov	r4,fp
  810474:	94800104 	addi	r18,r18,4
  810478:	817fffcc 	andi	r5,r16,65535
  81047c:	080c90c0 	call	80c90c <__mulsi3>
  810480:	800ad43a 	srli	r5,r16,16
  810484:	e009883a 	mov	r4,fp
  810488:	a8a1883a 	add	r16,r21,r2
  81048c:	080c90c0 	call	80c90c <__mulsi3>
  810490:	89000017 	ldw	r4,0(r17)
  810494:	80ffffcc 	andi	r3,r16,65535
  810498:	8020d43a 	srli	r16,r16,16
  81049c:	217fffcc 	andi	r5,r4,65535
  8104a0:	28cbc83a 	sub	r5,r5,r3
  8104a4:	d8c00117 	ldw	r3,4(sp)
  8104a8:	2008d43a 	srli	r4,r4,16
  8104ac:	1405883a 	add	r2,r2,r16
  8104b0:	28cb883a 	add	r5,r5,r3
  8104b4:	280dd43a 	srai	r6,r5,16
  8104b8:	10ffffcc 	andi	r3,r2,65535
  8104bc:	20c9c83a 	sub	r4,r4,r3
  8104c0:	2189883a 	add	r4,r4,r6
  8104c4:	8900008d 	sth	r4,2(r17)
  8104c8:	2009d43a 	srai	r4,r4,16
  8104cc:	8940000d 	sth	r5,0(r17)
  8104d0:	102ad43a 	srli	r21,r2,16
  8104d4:	8c400104 	addi	r17,r17,4
  8104d8:	d9000115 	stw	r4,4(sp)
  8104dc:	b4bfe32e 	bgeu	r22,r18,81046c <quorem+0x188>
  8104e0:	d9000217 	ldw	r4,8(sp)
  8104e4:	203fa01e 	bne	r4,zero,810368 <quorem+0x84>
  8104e8:	d8800017 	ldw	r2,0(sp)
  8104ec:	10ffff04 	addi	r3,r2,-4
  8104f0:	b8c0082e 	bgeu	r23,r3,810514 <quorem+0x230>
  8104f4:	10bfff17 	ldw	r2,-4(r2)
  8104f8:	10000326 	beq	r2,zero,810508 <quorem+0x224>
  8104fc:	00000506 	br	810514 <quorem+0x230>
  810500:	18800017 	ldw	r2,0(r3)
  810504:	1000031e 	bne	r2,zero,810514 <quorem+0x230>
  810508:	18ffff04 	addi	r3,r3,-4
  81050c:	a53fffc4 	addi	r20,r20,-1
  810510:	b8fffb36 	bltu	r23,r3,810500 <quorem+0x21c>
  810514:	d8c00317 	ldw	r3,12(sp)
  810518:	1d000415 	stw	r20,16(r3)
  81051c:	003f9206 	br	810368 <quorem+0x84>
  810520:	0005883a 	mov	r2,zero
  810524:	003fc106 	br	81042c <quorem+0x148>

00810528 <_dtoa_r>:
  810528:	22001017 	ldw	r8,64(r4)
  81052c:	deffda04 	addi	sp,sp,-152
  810530:	dd402115 	stw	r21,132(sp)
  810534:	dd002015 	stw	r20,128(sp)
  810538:	dc801e15 	stw	r18,120(sp)
  81053c:	dc401d15 	stw	r17,116(sp)
  810540:	dfc02515 	stw	ra,148(sp)
  810544:	df002415 	stw	fp,144(sp)
  810548:	ddc02315 	stw	r23,140(sp)
  81054c:	dd802215 	stw	r22,136(sp)
  810550:	dcc01f15 	stw	r19,124(sp)
  810554:	dc001c15 	stw	r16,112(sp)
  810558:	d9001615 	stw	r4,88(sp)
  81055c:	3023883a 	mov	r17,r6
  810560:	2829883a 	mov	r20,r5
  810564:	d9c01715 	stw	r7,92(sp)
  810568:	dc802817 	ldw	r18,160(sp)
  81056c:	302b883a 	mov	r21,r6
  810570:	40000a26 	beq	r8,zero,81059c <_dtoa_r+0x74>
  810574:	20801117 	ldw	r2,68(r4)
  810578:	400b883a 	mov	r5,r8
  81057c:	40800115 	stw	r2,4(r8)
  810580:	20c01117 	ldw	r3,68(r4)
  810584:	00800044 	movi	r2,1
  810588:	10c4983a 	sll	r2,r2,r3
  81058c:	40800215 	stw	r2,8(r8)
  810590:	0812f100 	call	812f10 <_Bfree>
  810594:	d8c01617 	ldw	r3,88(sp)
  810598:	18001015 	stw	zero,64(r3)
  81059c:	8800a316 	blt	r17,zero,81082c <_dtoa_r+0x304>
  8105a0:	90000015 	stw	zero,0(r18)
  8105a4:	a8dffc2c 	andhi	r3,r21,32752
  8105a8:	009ffc34 	movhi	r2,32752
  8105ac:	18809126 	beq	r3,r2,8107f4 <_dtoa_r+0x2cc>
  8105b0:	000d883a 	mov	r6,zero
  8105b4:	000f883a 	mov	r7,zero
  8105b8:	a009883a 	mov	r4,r20
  8105bc:	a80b883a 	mov	r5,r21
  8105c0:	dd001215 	stw	r20,72(sp)
  8105c4:	dd401315 	stw	r21,76(sp)
  8105c8:	080c29c0 	call	80c29c <__nedf2>
  8105cc:	1000171e 	bne	r2,zero,81062c <_dtoa_r+0x104>
  8105d0:	d9802717 	ldw	r6,156(sp)
  8105d4:	00800044 	movi	r2,1
  8105d8:	30800015 	stw	r2,0(r6)
  8105dc:	d8802917 	ldw	r2,164(sp)
  8105e0:	10029b26 	beq	r2,zero,811050 <_dtoa_r+0xb28>
  8105e4:	d9002917 	ldw	r4,164(sp)
  8105e8:	008020b4 	movhi	r2,130
  8105ec:	10860944 	addi	r2,r2,6181
  8105f0:	10ffffc4 	addi	r3,r2,-1
  8105f4:	20800015 	stw	r2,0(r4)
  8105f8:	1805883a 	mov	r2,r3
  8105fc:	dfc02517 	ldw	ra,148(sp)
  810600:	df002417 	ldw	fp,144(sp)
  810604:	ddc02317 	ldw	r23,140(sp)
  810608:	dd802217 	ldw	r22,136(sp)
  81060c:	dd402117 	ldw	r21,132(sp)
  810610:	dd002017 	ldw	r20,128(sp)
  810614:	dcc01f17 	ldw	r19,124(sp)
  810618:	dc801e17 	ldw	r18,120(sp)
  81061c:	dc401d17 	ldw	r17,116(sp)
  810620:	dc001c17 	ldw	r16,112(sp)
  810624:	dec02604 	addi	sp,sp,152
  810628:	f800283a 	ret
  81062c:	d9001617 	ldw	r4,88(sp)
  810630:	d9401217 	ldw	r5,72(sp)
  810634:	d8800104 	addi	r2,sp,4
  810638:	a80d883a 	mov	r6,r21
  81063c:	d9c00204 	addi	r7,sp,8
  810640:	d8800015 	stw	r2,0(sp)
  810644:	081354c0 	call	81354c <__d2b>
  810648:	d8800715 	stw	r2,28(sp)
  81064c:	a804d53a 	srli	r2,r21,20
  810650:	1101ffcc 	andi	r4,r2,2047
  810654:	20008626 	beq	r4,zero,810870 <_dtoa_r+0x348>
  810658:	d8c01217 	ldw	r3,72(sp)
  81065c:	00800434 	movhi	r2,16
  810660:	10bfffc4 	addi	r2,r2,-1
  810664:	ddc00117 	ldw	r23,4(sp)
  810668:	a884703a 	and	r2,r21,r2
  81066c:	1811883a 	mov	r8,r3
  810670:	124ffc34 	orhi	r9,r2,16368
  810674:	25bf0044 	addi	r22,r4,-1023
  810678:	d8000815 	stw	zero,32(sp)
  81067c:	0005883a 	mov	r2,zero
  810680:	00cffe34 	movhi	r3,16376
  810684:	480b883a 	mov	r5,r9
  810688:	4009883a 	mov	r4,r8
  81068c:	180f883a 	mov	r7,r3
  810690:	100d883a 	mov	r6,r2
  810694:	080bb040 	call	80bb04 <__subdf3>
  810698:	0218dbf4 	movhi	r8,25455
  81069c:	4210d844 	addi	r8,r8,17249
  8106a0:	024ff4f4 	movhi	r9,16339
  8106a4:	4a61e9c4 	addi	r9,r9,-30809
  8106a8:	480f883a 	mov	r7,r9
  8106ac:	400d883a 	mov	r6,r8
  8106b0:	180b883a 	mov	r5,r3
  8106b4:	1009883a 	mov	r4,r2
  8106b8:	080bbf80 	call	80bbf8 <__muldf3>
  8106bc:	0222d874 	movhi	r8,35681
  8106c0:	42322cc4 	addi	r8,r8,-14157
  8106c4:	024ff1f4 	movhi	r9,16327
  8106c8:	4a628a04 	addi	r9,r9,-30168
  8106cc:	480f883a 	mov	r7,r9
  8106d0:	400d883a 	mov	r6,r8
  8106d4:	180b883a 	mov	r5,r3
  8106d8:	1009883a 	mov	r4,r2
  8106dc:	080bb840 	call	80bb84 <__adddf3>
  8106e0:	b009883a 	mov	r4,r22
  8106e4:	1021883a 	mov	r16,r2
  8106e8:	1823883a 	mov	r17,r3
  8106ec:	080c5440 	call	80c544 <__floatsidf>
  8106f0:	021427f4 	movhi	r8,20639
  8106f4:	421e7ec4 	addi	r8,r8,31227
  8106f8:	024ff4f4 	movhi	r9,16339
  8106fc:	4a5104c4 	addi	r9,r9,17427
  810700:	480f883a 	mov	r7,r9
  810704:	400d883a 	mov	r6,r8
  810708:	180b883a 	mov	r5,r3
  81070c:	1009883a 	mov	r4,r2
  810710:	080bbf80 	call	80bbf8 <__muldf3>
  810714:	180f883a 	mov	r7,r3
  810718:	880b883a 	mov	r5,r17
  81071c:	100d883a 	mov	r6,r2
  810720:	8009883a 	mov	r4,r16
  810724:	080bb840 	call	80bb84 <__adddf3>
  810728:	1009883a 	mov	r4,r2
  81072c:	180b883a 	mov	r5,r3
  810730:	1021883a 	mov	r16,r2
  810734:	1823883a 	mov	r17,r3
  810738:	080c63c0 	call	80c63c <__fixdfsi>
  81073c:	000d883a 	mov	r6,zero
  810740:	000f883a 	mov	r7,zero
  810744:	8009883a 	mov	r4,r16
  810748:	880b883a 	mov	r5,r17
  81074c:	d8800d15 	stw	r2,52(sp)
  810750:	080c4340 	call	80c434 <__ltdf2>
  810754:	10031716 	blt	r2,zero,8113b4 <_dtoa_r+0xe8c>
  810758:	d8c00d17 	ldw	r3,52(sp)
  81075c:	00800584 	movi	r2,22
  810760:	10c1482e 	bgeu	r2,r3,810c84 <_dtoa_r+0x75c>
  810764:	01000044 	movi	r4,1
  810768:	d9000c15 	stw	r4,48(sp)
  81076c:	bd85c83a 	sub	r2,r23,r22
  810770:	11bfffc4 	addi	r6,r2,-1
  810774:	30030b16 	blt	r6,zero,8113a4 <_dtoa_r+0xe7c>
  810778:	d9800a15 	stw	r6,40(sp)
  81077c:	d8001115 	stw	zero,68(sp)
  810780:	d8c00d17 	ldw	r3,52(sp)
  810784:	1802ff16 	blt	r3,zero,811384 <_dtoa_r+0xe5c>
  810788:	d9000a17 	ldw	r4,40(sp)
  81078c:	d8c00915 	stw	r3,36(sp)
  810790:	d8001015 	stw	zero,64(sp)
  810794:	20c9883a 	add	r4,r4,r3
  810798:	d9000a15 	stw	r4,40(sp)
  81079c:	d9001717 	ldw	r4,92(sp)
  8107a0:	00800244 	movi	r2,9
  8107a4:	11004636 	bltu	r2,r4,8108c0 <_dtoa_r+0x398>
  8107a8:	00800144 	movi	r2,5
  8107ac:	11020416 	blt	r2,r4,810fc0 <_dtoa_r+0xa98>
  8107b0:	04400044 	movi	r17,1
  8107b4:	d8c01717 	ldw	r3,92(sp)
  8107b8:	00800144 	movi	r2,5
  8107bc:	10c1ed36 	bltu	r2,r3,810f74 <_dtoa_r+0xa4c>
  8107c0:	18c5883a 	add	r2,r3,r3
  8107c4:	1085883a 	add	r2,r2,r2
  8107c8:	00c02074 	movhi	r3,129
  8107cc:	18c1f704 	addi	r3,r3,2012
  8107d0:	10c5883a 	add	r2,r2,r3
  8107d4:	11000017 	ldw	r4,0(r2)
  8107d8:	2000683a 	jmp	r4
  8107dc:	008108c8 	cmpgei	r2,zero,1059
  8107e0:	008108c8 	cmpgei	r2,zero,1059
  8107e4:	008112c8 	cmpgei	r2,zero,1099
  8107e8:	008112a0 	cmpeqi	r2,zero,1098
  8107ec:	008112e4 	muli	r2,zero,1099
  8107f0:	008112f0 	cmpltui	r2,zero,1099
  8107f4:	d9002717 	ldw	r4,156(sp)
  8107f8:	0089c3c4 	movi	r2,9999
  8107fc:	20800015 	stw	r2,0(r4)
  810800:	a0001026 	beq	r20,zero,810844 <_dtoa_r+0x31c>
  810804:	00c020b4 	movhi	r3,130
  810808:	18c71404 	addi	r3,r3,7248
  81080c:	d9802917 	ldw	r6,164(sp)
  810810:	303f7926 	beq	r6,zero,8105f8 <_dtoa_r+0xd0>
  810814:	188000c7 	ldb	r2,3(r3)
  810818:	190000c4 	addi	r4,r3,3
  81081c:	1000101e 	bne	r2,zero,810860 <_dtoa_r+0x338>
  810820:	d8802917 	ldw	r2,164(sp)
  810824:	11000015 	stw	r4,0(r2)
  810828:	003f7306 	br	8105f8 <_dtoa_r+0xd0>
  81082c:	00a00034 	movhi	r2,32768
  810830:	10bfffc4 	addi	r2,r2,-1
  810834:	00c00044 	movi	r3,1
  810838:	88aa703a 	and	r21,r17,r2
  81083c:	90c00015 	stw	r3,0(r18)
  810840:	003f5806 	br	8105a4 <_dtoa_r+0x7c>
  810844:	00800434 	movhi	r2,16
  810848:	10bfffc4 	addi	r2,r2,-1
  81084c:	a884703a 	and	r2,r21,r2
  810850:	103fec1e 	bne	r2,zero,810804 <_dtoa_r+0x2dc>
  810854:	00c020b4 	movhi	r3,130
  810858:	18c71104 	addi	r3,r3,7236
  81085c:	003feb06 	br	81080c <_dtoa_r+0x2e4>
  810860:	d8802917 	ldw	r2,164(sp)
  810864:	19000204 	addi	r4,r3,8
  810868:	11000015 	stw	r4,0(r2)
  81086c:	003f6206 	br	8105f8 <_dtoa_r+0xd0>
  810870:	ddc00117 	ldw	r23,4(sp)
  810874:	d8800217 	ldw	r2,8(sp)
  810878:	01000804 	movi	r4,32
  81087c:	b8c10c84 	addi	r3,r23,1074
  810880:	18a3883a 	add	r17,r3,r2
  810884:	2441b80e 	bge	r4,r17,810f68 <_dtoa_r+0xa40>
  810888:	00c01004 	movi	r3,64
  81088c:	1c47c83a 	sub	r3,r3,r17
  810890:	88bff804 	addi	r2,r17,-32
  810894:	a8c6983a 	sll	r3,r21,r3
  810898:	a084d83a 	srl	r2,r20,r2
  81089c:	1888b03a 	or	r4,r3,r2
  8108a0:	08153580 	call	815358 <__floatunsidf>
  8108a4:	1011883a 	mov	r8,r2
  8108a8:	00bf8434 	movhi	r2,65040
  8108ac:	01000044 	movi	r4,1
  8108b0:	10d3883a 	add	r9,r2,r3
  8108b4:	8dbef344 	addi	r22,r17,-1075
  8108b8:	d9000815 	stw	r4,32(sp)
  8108bc:	003f6f06 	br	81067c <_dtoa_r+0x154>
  8108c0:	d8001715 	stw	zero,92(sp)
  8108c4:	04400044 	movi	r17,1
  8108c8:	00bfffc4 	movi	r2,-1
  8108cc:	00c00044 	movi	r3,1
  8108d0:	d8800e15 	stw	r2,56(sp)
  8108d4:	d8002615 	stw	zero,152(sp)
  8108d8:	d8800f15 	stw	r2,60(sp)
  8108dc:	d8c00b15 	stw	r3,44(sp)
  8108e0:	1021883a 	mov	r16,r2
  8108e4:	d8801617 	ldw	r2,88(sp)
  8108e8:	10001115 	stw	zero,68(r2)
  8108ec:	d8801617 	ldw	r2,88(sp)
  8108f0:	11401117 	ldw	r5,68(r2)
  8108f4:	1009883a 	mov	r4,r2
  8108f8:	08134900 	call	813490 <_Balloc>
  8108fc:	d8c01617 	ldw	r3,88(sp)
  810900:	d8800515 	stw	r2,20(sp)
  810904:	18801015 	stw	r2,64(r3)
  810908:	00800384 	movi	r2,14
  81090c:	14006836 	bltu	r2,r16,810ab0 <_dtoa_r+0x588>
  810910:	8805003a 	cmpeq	r2,r17,zero
  810914:	1000661e 	bne	r2,zero,810ab0 <_dtoa_r+0x588>
  810918:	d9000d17 	ldw	r4,52(sp)
  81091c:	0102300e 	bge	zero,r4,8111e0 <_dtoa_r+0xcb8>
  810920:	208003cc 	andi	r2,r4,15
  810924:	100490fa 	slli	r2,r2,3
  810928:	2025d13a 	srai	r18,r4,4
  81092c:	00c020b4 	movhi	r3,130
  810930:	18c72504 	addi	r3,r3,7316
  810934:	10c5883a 	add	r2,r2,r3
  810938:	90c0040c 	andi	r3,r18,16
  81093c:	14000017 	ldw	r16,0(r2)
  810940:	14400117 	ldw	r17,4(r2)
  810944:	18036a1e 	bne	r3,zero,8116f0 <_dtoa_r+0x11c8>
  810948:	05800084 	movi	r22,2
  81094c:	90001026 	beq	r18,zero,810990 <_dtoa_r+0x468>
  810950:	04c020b4 	movhi	r19,130
  810954:	9cc75704 	addi	r19,r19,7516
  810958:	9080004c 	andi	r2,r18,1
  81095c:	1005003a 	cmpeq	r2,r2,zero
  810960:	1000081e 	bne	r2,zero,810984 <_dtoa_r+0x45c>
  810964:	99800017 	ldw	r6,0(r19)
  810968:	99c00117 	ldw	r7,4(r19)
  81096c:	880b883a 	mov	r5,r17
  810970:	8009883a 	mov	r4,r16
  810974:	080bbf80 	call	80bbf8 <__muldf3>
  810978:	1021883a 	mov	r16,r2
  81097c:	b5800044 	addi	r22,r22,1
  810980:	1823883a 	mov	r17,r3
  810984:	9025d07a 	srai	r18,r18,1
  810988:	9cc00204 	addi	r19,r19,8
  81098c:	903ff21e 	bne	r18,zero,810958 <_dtoa_r+0x430>
  810990:	a80b883a 	mov	r5,r21
  810994:	a009883a 	mov	r4,r20
  810998:	880f883a 	mov	r7,r17
  81099c:	800d883a 	mov	r6,r16
  8109a0:	080bfbc0 	call	80bfbc <__divdf3>
  8109a4:	1029883a 	mov	r20,r2
  8109a8:	182b883a 	mov	r21,r3
  8109ac:	d8c00c17 	ldw	r3,48(sp)
  8109b0:	1805003a 	cmpeq	r2,r3,zero
  8109b4:	1000081e 	bne	r2,zero,8109d8 <_dtoa_r+0x4b0>
  8109b8:	0005883a 	mov	r2,zero
  8109bc:	00cffc34 	movhi	r3,16368
  8109c0:	180f883a 	mov	r7,r3
  8109c4:	a009883a 	mov	r4,r20
  8109c8:	a80b883a 	mov	r5,r21
  8109cc:	100d883a 	mov	r6,r2
  8109d0:	080c4340 	call	80c434 <__ltdf2>
  8109d4:	1003fe16 	blt	r2,zero,8119d0 <_dtoa_r+0x14a8>
  8109d8:	b009883a 	mov	r4,r22
  8109dc:	080c5440 	call	80c544 <__floatsidf>
  8109e0:	180b883a 	mov	r5,r3
  8109e4:	1009883a 	mov	r4,r2
  8109e8:	a00d883a 	mov	r6,r20
  8109ec:	a80f883a 	mov	r7,r21
  8109f0:	080bbf80 	call	80bbf8 <__muldf3>
  8109f4:	0011883a 	mov	r8,zero
  8109f8:	02500734 	movhi	r9,16412
  8109fc:	1009883a 	mov	r4,r2
  810a00:	180b883a 	mov	r5,r3
  810a04:	480f883a 	mov	r7,r9
  810a08:	400d883a 	mov	r6,r8
  810a0c:	080bb840 	call	80bb84 <__adddf3>
  810a10:	d9000f17 	ldw	r4,60(sp)
  810a14:	102d883a 	mov	r22,r2
  810a18:	00bf3034 	movhi	r2,64704
  810a1c:	18b9883a 	add	fp,r3,r2
  810a20:	e02f883a 	mov	r23,fp
  810a24:	20028f1e 	bne	r4,zero,811464 <_dtoa_r+0xf3c>
  810a28:	0005883a 	mov	r2,zero
  810a2c:	00d00534 	movhi	r3,16404
  810a30:	a009883a 	mov	r4,r20
  810a34:	a80b883a 	mov	r5,r21
  810a38:	180f883a 	mov	r7,r3
  810a3c:	100d883a 	mov	r6,r2
  810a40:	080bb040 	call	80bb04 <__subdf3>
  810a44:	1009883a 	mov	r4,r2
  810a48:	e00f883a 	mov	r7,fp
  810a4c:	180b883a 	mov	r5,r3
  810a50:	b00d883a 	mov	r6,r22
  810a54:	1025883a 	mov	r18,r2
  810a58:	1827883a 	mov	r19,r3
  810a5c:	080c3240 	call	80c324 <__gtdf2>
  810a60:	00834f16 	blt	zero,r2,8117a0 <_dtoa_r+0x1278>
  810a64:	e0e0003c 	xorhi	r3,fp,32768
  810a68:	9009883a 	mov	r4,r18
  810a6c:	980b883a 	mov	r5,r19
  810a70:	180f883a 	mov	r7,r3
  810a74:	b00d883a 	mov	r6,r22
  810a78:	080c4340 	call	80c434 <__ltdf2>
  810a7c:	1000080e 	bge	r2,zero,810aa0 <_dtoa_r+0x578>
  810a80:	0027883a 	mov	r19,zero
  810a84:	0025883a 	mov	r18,zero
  810a88:	d8802617 	ldw	r2,152(sp)
  810a8c:	df000517 	ldw	fp,20(sp)
  810a90:	d8000615 	stw	zero,24(sp)
  810a94:	0084303a 	nor	r2,zero,r2
  810a98:	d8800d15 	stw	r2,52(sp)
  810a9c:	00019b06 	br	81110c <_dtoa_r+0xbe4>
  810aa0:	d9801217 	ldw	r6,72(sp)
  810aa4:	d8801317 	ldw	r2,76(sp)
  810aa8:	3029883a 	mov	r20,r6
  810aac:	102b883a 	mov	r21,r2
  810ab0:	d8c00217 	ldw	r3,8(sp)
  810ab4:	18008516 	blt	r3,zero,810ccc <_dtoa_r+0x7a4>
  810ab8:	d9000d17 	ldw	r4,52(sp)
  810abc:	00800384 	movi	r2,14
  810ac0:	11008216 	blt	r2,r4,810ccc <_dtoa_r+0x7a4>
  810ac4:	200490fa 	slli	r2,r4,3
  810ac8:	d9802617 	ldw	r6,152(sp)
  810acc:	00c020b4 	movhi	r3,130
  810ad0:	18c72504 	addi	r3,r3,7316
  810ad4:	10c5883a 	add	r2,r2,r3
  810ad8:	14800017 	ldw	r18,0(r2)
  810adc:	14c00117 	ldw	r19,4(r2)
  810ae0:	30031e16 	blt	r6,zero,81175c <_dtoa_r+0x1234>
  810ae4:	d9000517 	ldw	r4,20(sp)
  810ae8:	d8c00f17 	ldw	r3,60(sp)
  810aec:	a823883a 	mov	r17,r21
  810af0:	a021883a 	mov	r16,r20
  810af4:	192b883a 	add	r21,r3,r4
  810af8:	2039883a 	mov	fp,r4
  810afc:	00000f06 	br	810b3c <_dtoa_r+0x614>
  810b00:	0005883a 	mov	r2,zero
  810b04:	00d00934 	movhi	r3,16420
  810b08:	5009883a 	mov	r4,r10
  810b0c:	580b883a 	mov	r5,r11
  810b10:	180f883a 	mov	r7,r3
  810b14:	100d883a 	mov	r6,r2
  810b18:	080bbf80 	call	80bbf8 <__muldf3>
  810b1c:	180b883a 	mov	r5,r3
  810b20:	000d883a 	mov	r6,zero
  810b24:	000f883a 	mov	r7,zero
  810b28:	1009883a 	mov	r4,r2
  810b2c:	1021883a 	mov	r16,r2
  810b30:	1823883a 	mov	r17,r3
  810b34:	080c29c0 	call	80c29c <__nedf2>
  810b38:	10004526 	beq	r2,zero,810c50 <_dtoa_r+0x728>
  810b3c:	900d883a 	mov	r6,r18
  810b40:	980f883a 	mov	r7,r19
  810b44:	8009883a 	mov	r4,r16
  810b48:	880b883a 	mov	r5,r17
  810b4c:	080bfbc0 	call	80bfbc <__divdf3>
  810b50:	180b883a 	mov	r5,r3
  810b54:	1009883a 	mov	r4,r2
  810b58:	080c63c0 	call	80c63c <__fixdfsi>
  810b5c:	1009883a 	mov	r4,r2
  810b60:	1029883a 	mov	r20,r2
  810b64:	080c5440 	call	80c544 <__floatsidf>
  810b68:	180f883a 	mov	r7,r3
  810b6c:	9009883a 	mov	r4,r18
  810b70:	980b883a 	mov	r5,r19
  810b74:	100d883a 	mov	r6,r2
  810b78:	080bbf80 	call	80bbf8 <__muldf3>
  810b7c:	180f883a 	mov	r7,r3
  810b80:	880b883a 	mov	r5,r17
  810b84:	8009883a 	mov	r4,r16
  810b88:	100d883a 	mov	r6,r2
  810b8c:	080bb040 	call	80bb04 <__subdf3>
  810b90:	1015883a 	mov	r10,r2
  810b94:	a0800c04 	addi	r2,r20,48
  810b98:	e0800005 	stb	r2,0(fp)
  810b9c:	e7000044 	addi	fp,fp,1
  810ba0:	1817883a 	mov	r11,r3
  810ba4:	e57fd61e 	bne	fp,r21,810b00 <_dtoa_r+0x5d8>
  810ba8:	500d883a 	mov	r6,r10
  810bac:	180f883a 	mov	r7,r3
  810bb0:	5009883a 	mov	r4,r10
  810bb4:	180b883a 	mov	r5,r3
  810bb8:	080bb840 	call	80bb84 <__adddf3>
  810bbc:	100d883a 	mov	r6,r2
  810bc0:	9009883a 	mov	r4,r18
  810bc4:	980b883a 	mov	r5,r19
  810bc8:	180f883a 	mov	r7,r3
  810bcc:	1021883a 	mov	r16,r2
  810bd0:	1823883a 	mov	r17,r3
  810bd4:	080c4340 	call	80c434 <__ltdf2>
  810bd8:	10000816 	blt	r2,zero,810bfc <_dtoa_r+0x6d4>
  810bdc:	980b883a 	mov	r5,r19
  810be0:	800d883a 	mov	r6,r16
  810be4:	880f883a 	mov	r7,r17
  810be8:	9009883a 	mov	r4,r18
  810bec:	080c2140 	call	80c214 <__eqdf2>
  810bf0:	1000171e 	bne	r2,zero,810c50 <_dtoa_r+0x728>
  810bf4:	a080004c 	andi	r2,r20,1
  810bf8:	10001526 	beq	r2,zero,810c50 <_dtoa_r+0x728>
  810bfc:	d8800d17 	ldw	r2,52(sp)
  810c00:	d8800415 	stw	r2,16(sp)
  810c04:	e009883a 	mov	r4,fp
  810c08:	213fffc4 	addi	r4,r4,-1
  810c0c:	20c00007 	ldb	r3,0(r4)
  810c10:	00800e44 	movi	r2,57
  810c14:	1880081e 	bne	r3,r2,810c38 <_dtoa_r+0x710>
  810c18:	d8800517 	ldw	r2,20(sp)
  810c1c:	113ffa1e 	bne	r2,r4,810c08 <_dtoa_r+0x6e0>
  810c20:	d8c00417 	ldw	r3,16(sp)
  810c24:	d9800517 	ldw	r6,20(sp)
  810c28:	00800c04 	movi	r2,48
  810c2c:	18c00044 	addi	r3,r3,1
  810c30:	d8c00415 	stw	r3,16(sp)
  810c34:	30800005 	stb	r2,0(r6)
  810c38:	20800003 	ldbu	r2,0(r4)
  810c3c:	d8c00417 	ldw	r3,16(sp)
  810c40:	27000044 	addi	fp,r4,1
  810c44:	10800044 	addi	r2,r2,1
  810c48:	d8c00d15 	stw	r3,52(sp)
  810c4c:	20800005 	stb	r2,0(r4)
  810c50:	d9001617 	ldw	r4,88(sp)
  810c54:	d9400717 	ldw	r5,28(sp)
  810c58:	0812f100 	call	812f10 <_Bfree>
  810c5c:	e0000005 	stb	zero,0(fp)
  810c60:	d9800d17 	ldw	r6,52(sp)
  810c64:	d8c02717 	ldw	r3,156(sp)
  810c68:	d9002917 	ldw	r4,164(sp)
  810c6c:	30800044 	addi	r2,r6,1
  810c70:	18800015 	stw	r2,0(r3)
  810c74:	20029c26 	beq	r4,zero,8116e8 <_dtoa_r+0x11c0>
  810c78:	d8c00517 	ldw	r3,20(sp)
  810c7c:	27000015 	stw	fp,0(r4)
  810c80:	003e5d06 	br	8105f8 <_dtoa_r+0xd0>
  810c84:	d9800d17 	ldw	r6,52(sp)
  810c88:	00c020b4 	movhi	r3,130
  810c8c:	18c72504 	addi	r3,r3,7316
  810c90:	d9001217 	ldw	r4,72(sp)
  810c94:	300490fa 	slli	r2,r6,3
  810c98:	d9401317 	ldw	r5,76(sp)
  810c9c:	10c5883a 	add	r2,r2,r3
  810ca0:	12000017 	ldw	r8,0(r2)
  810ca4:	12400117 	ldw	r9,4(r2)
  810ca8:	400d883a 	mov	r6,r8
  810cac:	480f883a 	mov	r7,r9
  810cb0:	080c4340 	call	80c434 <__ltdf2>
  810cb4:	1000030e 	bge	r2,zero,810cc4 <_dtoa_r+0x79c>
  810cb8:	d8800d17 	ldw	r2,52(sp)
  810cbc:	10bfffc4 	addi	r2,r2,-1
  810cc0:	d8800d15 	stw	r2,52(sp)
  810cc4:	d8000c15 	stw	zero,48(sp)
  810cc8:	003ea806 	br	81076c <_dtoa_r+0x244>
  810ccc:	d9000b17 	ldw	r4,44(sp)
  810cd0:	202cc03a 	cmpne	r22,r4,zero
  810cd4:	b000c71e 	bne	r22,zero,810ff4 <_dtoa_r+0xacc>
  810cd8:	dc001117 	ldw	r16,68(sp)
  810cdc:	dc801017 	ldw	r18,64(sp)
  810ce0:	0027883a 	mov	r19,zero
  810ce4:	04000b0e 	bge	zero,r16,810d14 <_dtoa_r+0x7ec>
  810ce8:	d8c00a17 	ldw	r3,40(sp)
  810cec:	00c0090e 	bge	zero,r3,810d14 <_dtoa_r+0x7ec>
  810cf0:	8005883a 	mov	r2,r16
  810cf4:	1c011316 	blt	r3,r16,811144 <_dtoa_r+0xc1c>
  810cf8:	d9000a17 	ldw	r4,40(sp)
  810cfc:	d9801117 	ldw	r6,68(sp)
  810d00:	80a1c83a 	sub	r16,r16,r2
  810d04:	2089c83a 	sub	r4,r4,r2
  810d08:	308dc83a 	sub	r6,r6,r2
  810d0c:	d9000a15 	stw	r4,40(sp)
  810d10:	d9801115 	stw	r6,68(sp)
  810d14:	d8801017 	ldw	r2,64(sp)
  810d18:	0080150e 	bge	zero,r2,810d70 <_dtoa_r+0x848>
  810d1c:	d8c00b17 	ldw	r3,44(sp)
  810d20:	1805003a 	cmpeq	r2,r3,zero
  810d24:	1001c91e 	bne	r2,zero,81144c <_dtoa_r+0xf24>
  810d28:	04800e0e 	bge	zero,r18,810d64 <_dtoa_r+0x83c>
  810d2c:	d9001617 	ldw	r4,88(sp)
  810d30:	980b883a 	mov	r5,r19
  810d34:	900d883a 	mov	r6,r18
  810d38:	0813d5c0 	call	813d5c <__pow5mult>
  810d3c:	d9001617 	ldw	r4,88(sp)
  810d40:	d9800717 	ldw	r6,28(sp)
  810d44:	100b883a 	mov	r5,r2
  810d48:	1027883a 	mov	r19,r2
  810d4c:	08139a00 	call	8139a0 <__multiply>
  810d50:	d9001617 	ldw	r4,88(sp)
  810d54:	d9400717 	ldw	r5,28(sp)
  810d58:	1023883a 	mov	r17,r2
  810d5c:	0812f100 	call	812f10 <_Bfree>
  810d60:	dc400715 	stw	r17,28(sp)
  810d64:	d9001017 	ldw	r4,64(sp)
  810d68:	248dc83a 	sub	r6,r4,r18
  810d6c:	30010e1e 	bne	r6,zero,8111a8 <_dtoa_r+0xc80>
  810d70:	d9001617 	ldw	r4,88(sp)
  810d74:	04400044 	movi	r17,1
  810d78:	880b883a 	mov	r5,r17
  810d7c:	0813bf40 	call	813bf4 <__i2b>
  810d80:	d9800917 	ldw	r6,36(sp)
  810d84:	1025883a 	mov	r18,r2
  810d88:	0180040e 	bge	zero,r6,810d9c <_dtoa_r+0x874>
  810d8c:	d9001617 	ldw	r4,88(sp)
  810d90:	100b883a 	mov	r5,r2
  810d94:	0813d5c0 	call	813d5c <__pow5mult>
  810d98:	1025883a 	mov	r18,r2
  810d9c:	d8801717 	ldw	r2,92(sp)
  810da0:	8880f30e 	bge	r17,r2,811170 <_dtoa_r+0xc48>
  810da4:	0023883a 	mov	r17,zero
  810da8:	d9800917 	ldw	r6,36(sp)
  810dac:	30019e1e 	bne	r6,zero,811428 <_dtoa_r+0xf00>
  810db0:	00c00044 	movi	r3,1
  810db4:	d9000a17 	ldw	r4,40(sp)
  810db8:	20c5883a 	add	r2,r4,r3
  810dbc:	10c007cc 	andi	r3,r2,31
  810dc0:	1800841e 	bne	r3,zero,810fd4 <_dtoa_r+0xaac>
  810dc4:	00800704 	movi	r2,28
  810dc8:	d9000a17 	ldw	r4,40(sp)
  810dcc:	d9801117 	ldw	r6,68(sp)
  810dd0:	80a1883a 	add	r16,r16,r2
  810dd4:	2089883a 	add	r4,r4,r2
  810dd8:	308d883a 	add	r6,r6,r2
  810ddc:	d9000a15 	stw	r4,40(sp)
  810de0:	d9801115 	stw	r6,68(sp)
  810de4:	d8801117 	ldw	r2,68(sp)
  810de8:	0080050e 	bge	zero,r2,810e00 <_dtoa_r+0x8d8>
  810dec:	d9400717 	ldw	r5,28(sp)
  810df0:	d9001617 	ldw	r4,88(sp)
  810df4:	100d883a 	mov	r6,r2
  810df8:	08138540 	call	813854 <__lshift>
  810dfc:	d8800715 	stw	r2,28(sp)
  810e00:	d8c00a17 	ldw	r3,40(sp)
  810e04:	00c0050e 	bge	zero,r3,810e1c <_dtoa_r+0x8f4>
  810e08:	d9001617 	ldw	r4,88(sp)
  810e0c:	900b883a 	mov	r5,r18
  810e10:	180d883a 	mov	r6,r3
  810e14:	08138540 	call	813854 <__lshift>
  810e18:	1025883a 	mov	r18,r2
  810e1c:	d9000c17 	ldw	r4,48(sp)
  810e20:	2005003a 	cmpeq	r2,r4,zero
  810e24:	10016f26 	beq	r2,zero,8113e4 <_dtoa_r+0xebc>
  810e28:	d9000f17 	ldw	r4,60(sp)
  810e2c:	0102170e 	bge	zero,r4,81168c <_dtoa_r+0x1164>
  810e30:	d9800b17 	ldw	r6,44(sp)
  810e34:	3005003a 	cmpeq	r2,r6,zero
  810e38:	1000881e 	bne	r2,zero,81105c <_dtoa_r+0xb34>
  810e3c:	0400050e 	bge	zero,r16,810e54 <_dtoa_r+0x92c>
  810e40:	d9001617 	ldw	r4,88(sp)
  810e44:	980b883a 	mov	r5,r19
  810e48:	800d883a 	mov	r6,r16
  810e4c:	08138540 	call	813854 <__lshift>
  810e50:	1027883a 	mov	r19,r2
  810e54:	8804c03a 	cmpne	r2,r17,zero
  810e58:	1002541e 	bne	r2,zero,8117ac <_dtoa_r+0x1284>
  810e5c:	980b883a 	mov	r5,r19
  810e60:	dd800517 	ldw	r22,20(sp)
  810e64:	dcc00615 	stw	r19,24(sp)
  810e68:	a700004c 	andi	fp,r20,1
  810e6c:	2827883a 	mov	r19,r5
  810e70:	d9000717 	ldw	r4,28(sp)
  810e74:	900b883a 	mov	r5,r18
  810e78:	08102e40 	call	8102e4 <quorem>
  810e7c:	d9000717 	ldw	r4,28(sp)
  810e80:	d9400617 	ldw	r5,24(sp)
  810e84:	1023883a 	mov	r17,r2
  810e88:	8dc00c04 	addi	r23,r17,48
  810e8c:	081306c0 	call	81306c <__mcmp>
  810e90:	d9001617 	ldw	r4,88(sp)
  810e94:	900b883a 	mov	r5,r18
  810e98:	980d883a 	mov	r6,r19
  810e9c:	1029883a 	mov	r20,r2
  810ea0:	08136c80 	call	8136c8 <__mdiff>
  810ea4:	102b883a 	mov	r21,r2
  810ea8:	10800317 	ldw	r2,12(r2)
  810eac:	1001281e 	bne	r2,zero,811350 <_dtoa_r+0xe28>
  810eb0:	d9000717 	ldw	r4,28(sp)
  810eb4:	a80b883a 	mov	r5,r21
  810eb8:	081306c0 	call	81306c <__mcmp>
  810ebc:	d9001617 	ldw	r4,88(sp)
  810ec0:	1021883a 	mov	r16,r2
  810ec4:	a80b883a 	mov	r5,r21
  810ec8:	0812f100 	call	812f10 <_Bfree>
  810ecc:	8000041e 	bne	r16,zero,810ee0 <_dtoa_r+0x9b8>
  810ed0:	d8801717 	ldw	r2,92(sp)
  810ed4:	1000021e 	bne	r2,zero,810ee0 <_dtoa_r+0x9b8>
  810ed8:	e004c03a 	cmpne	r2,fp,zero
  810edc:	10011726 	beq	r2,zero,81133c <_dtoa_r+0xe14>
  810ee0:	a0010616 	blt	r20,zero,8112fc <_dtoa_r+0xdd4>
  810ee4:	a000041e 	bne	r20,zero,810ef8 <_dtoa_r+0x9d0>
  810ee8:	d8c01717 	ldw	r3,92(sp)
  810eec:	1800021e 	bne	r3,zero,810ef8 <_dtoa_r+0x9d0>
  810ef0:	e004c03a 	cmpne	r2,fp,zero
  810ef4:	10010126 	beq	r2,zero,8112fc <_dtoa_r+0xdd4>
  810ef8:	04023d16 	blt	zero,r16,8117f0 <_dtoa_r+0x12c8>
  810efc:	b5c00005 	stb	r23,0(r22)
  810f00:	d9800517 	ldw	r6,20(sp)
  810f04:	d9000f17 	ldw	r4,60(sp)
  810f08:	b5800044 	addi	r22,r22,1
  810f0c:	3105883a 	add	r2,r6,r4
  810f10:	b0806526 	beq	r22,r2,8110a8 <_dtoa_r+0xb80>
  810f14:	d9400717 	ldw	r5,28(sp)
  810f18:	d9001617 	ldw	r4,88(sp)
  810f1c:	01800284 	movi	r6,10
  810f20:	000f883a 	mov	r7,zero
  810f24:	0813c300 	call	813c30 <__multadd>
  810f28:	d8800715 	stw	r2,28(sp)
  810f2c:	d8800617 	ldw	r2,24(sp)
  810f30:	14c10c26 	beq	r2,r19,811364 <_dtoa_r+0xe3c>
  810f34:	d9400617 	ldw	r5,24(sp)
  810f38:	d9001617 	ldw	r4,88(sp)
  810f3c:	01800284 	movi	r6,10
  810f40:	000f883a 	mov	r7,zero
  810f44:	0813c300 	call	813c30 <__multadd>
  810f48:	d9001617 	ldw	r4,88(sp)
  810f4c:	980b883a 	mov	r5,r19
  810f50:	01800284 	movi	r6,10
  810f54:	000f883a 	mov	r7,zero
  810f58:	d8800615 	stw	r2,24(sp)
  810f5c:	0813c300 	call	813c30 <__multadd>
  810f60:	1027883a 	mov	r19,r2
  810f64:	003fc206 	br	810e70 <_dtoa_r+0x948>
  810f68:	2445c83a 	sub	r2,r4,r17
  810f6c:	a088983a 	sll	r4,r20,r2
  810f70:	003e4b06 	br	8108a0 <_dtoa_r+0x378>
  810f74:	01bfffc4 	movi	r6,-1
  810f78:	00800044 	movi	r2,1
  810f7c:	d9800e15 	stw	r6,56(sp)
  810f80:	d9800f15 	stw	r6,60(sp)
  810f84:	d8800b15 	stw	r2,44(sp)
  810f88:	d8c01617 	ldw	r3,88(sp)
  810f8c:	008005c4 	movi	r2,23
  810f90:	18001115 	stw	zero,68(r3)
  810f94:	1580082e 	bgeu	r2,r22,810fb8 <_dtoa_r+0xa90>
  810f98:	00c00104 	movi	r3,4
  810f9c:	0009883a 	mov	r4,zero
  810fa0:	18c7883a 	add	r3,r3,r3
  810fa4:	18800504 	addi	r2,r3,20
  810fa8:	21000044 	addi	r4,r4,1
  810fac:	b0bffc2e 	bgeu	r22,r2,810fa0 <_dtoa_r+0xa78>
  810fb0:	d9801617 	ldw	r6,88(sp)
  810fb4:	31001115 	stw	r4,68(r6)
  810fb8:	dc000f17 	ldw	r16,60(sp)
  810fbc:	003e4b06 	br	8108ec <_dtoa_r+0x3c4>
  810fc0:	d9801717 	ldw	r6,92(sp)
  810fc4:	0023883a 	mov	r17,zero
  810fc8:	31bfff04 	addi	r6,r6,-4
  810fcc:	d9801715 	stw	r6,92(sp)
  810fd0:	003df806 	br	8107b4 <_dtoa_r+0x28c>
  810fd4:	00800804 	movi	r2,32
  810fd8:	10c9c83a 	sub	r4,r2,r3
  810fdc:	00c00104 	movi	r3,4
  810fe0:	19005a16 	blt	r3,r4,81114c <_dtoa_r+0xc24>
  810fe4:	008000c4 	movi	r2,3
  810fe8:	113f7e16 	blt	r2,r4,810de4 <_dtoa_r+0x8bc>
  810fec:	20800704 	addi	r2,r4,28
  810ff0:	003f7506 	br	810dc8 <_dtoa_r+0x8a0>
  810ff4:	d9801717 	ldw	r6,92(sp)
  810ff8:	00800044 	movi	r2,1
  810ffc:	1180a10e 	bge	r2,r6,811284 <_dtoa_r+0xd5c>
  811000:	d9800f17 	ldw	r6,60(sp)
  811004:	d8c01017 	ldw	r3,64(sp)
  811008:	30bfffc4 	addi	r2,r6,-1
  81100c:	1881c616 	blt	r3,r2,811728 <_dtoa_r+0x1200>
  811010:	18a5c83a 	sub	r18,r3,r2
  811014:	d8800f17 	ldw	r2,60(sp)
  811018:	10026216 	blt	r2,zero,8119a4 <_dtoa_r+0x147c>
  81101c:	dc001117 	ldw	r16,68(sp)
  811020:	1007883a 	mov	r3,r2
  811024:	d9800a17 	ldw	r6,40(sp)
  811028:	d8801117 	ldw	r2,68(sp)
  81102c:	d9001617 	ldw	r4,88(sp)
  811030:	30cd883a 	add	r6,r6,r3
  811034:	10c5883a 	add	r2,r2,r3
  811038:	01400044 	movi	r5,1
  81103c:	d9800a15 	stw	r6,40(sp)
  811040:	d8801115 	stw	r2,68(sp)
  811044:	0813bf40 	call	813bf4 <__i2b>
  811048:	1027883a 	mov	r19,r2
  81104c:	003f2506 	br	810ce4 <_dtoa_r+0x7bc>
  811050:	00c020b4 	movhi	r3,130
  811054:	18c60904 	addi	r3,r3,6180
  811058:	003d6706 	br	8105f8 <_dtoa_r+0xd0>
  81105c:	dd800517 	ldw	r22,20(sp)
  811060:	04000044 	movi	r16,1
  811064:	00000706 	br	811084 <_dtoa_r+0xb5c>
  811068:	d9400717 	ldw	r5,28(sp)
  81106c:	d9001617 	ldw	r4,88(sp)
  811070:	01800284 	movi	r6,10
  811074:	000f883a 	mov	r7,zero
  811078:	0813c300 	call	813c30 <__multadd>
  81107c:	d8800715 	stw	r2,28(sp)
  811080:	84000044 	addi	r16,r16,1
  811084:	d9000717 	ldw	r4,28(sp)
  811088:	900b883a 	mov	r5,r18
  81108c:	08102e40 	call	8102e4 <quorem>
  811090:	15c00c04 	addi	r23,r2,48
  811094:	b5c00005 	stb	r23,0(r22)
  811098:	d8c00f17 	ldw	r3,60(sp)
  81109c:	b5800044 	addi	r22,r22,1
  8110a0:	80fff116 	blt	r16,r3,811068 <_dtoa_r+0xb40>
  8110a4:	d8000615 	stw	zero,24(sp)
  8110a8:	d9400717 	ldw	r5,28(sp)
  8110ac:	d9001617 	ldw	r4,88(sp)
  8110b0:	01800044 	movi	r6,1
  8110b4:	08138540 	call	813854 <__lshift>
  8110b8:	1009883a 	mov	r4,r2
  8110bc:	900b883a 	mov	r5,r18
  8110c0:	d8800715 	stw	r2,28(sp)
  8110c4:	081306c0 	call	81306c <__mcmp>
  8110c8:	00803c0e 	bge	zero,r2,8111bc <_dtoa_r+0xc94>
  8110cc:	b009883a 	mov	r4,r22
  8110d0:	213fffc4 	addi	r4,r4,-1
  8110d4:	21400003 	ldbu	r5,0(r4)
  8110d8:	00800e44 	movi	r2,57
  8110dc:	28c03fcc 	andi	r3,r5,255
  8110e0:	18c0201c 	xori	r3,r3,128
  8110e4:	18ffe004 	addi	r3,r3,-128
  8110e8:	1881981e 	bne	r3,r2,81174c <_dtoa_r+0x1224>
  8110ec:	d9800517 	ldw	r6,20(sp)
  8110f0:	21bff71e 	bne	r4,r6,8110d0 <_dtoa_r+0xba8>
  8110f4:	d8800d17 	ldw	r2,52(sp)
  8110f8:	37000044 	addi	fp,r6,1
  8110fc:	10800044 	addi	r2,r2,1
  811100:	d8800d15 	stw	r2,52(sp)
  811104:	00800c44 	movi	r2,49
  811108:	30800005 	stb	r2,0(r6)
  81110c:	d9001617 	ldw	r4,88(sp)
  811110:	900b883a 	mov	r5,r18
  811114:	0812f100 	call	812f10 <_Bfree>
  811118:	983ecd26 	beq	r19,zero,810c50 <_dtoa_r+0x728>
  81111c:	d8c00617 	ldw	r3,24(sp)
  811120:	18000426 	beq	r3,zero,811134 <_dtoa_r+0xc0c>
  811124:	1cc00326 	beq	r3,r19,811134 <_dtoa_r+0xc0c>
  811128:	d9001617 	ldw	r4,88(sp)
  81112c:	180b883a 	mov	r5,r3
  811130:	0812f100 	call	812f10 <_Bfree>
  811134:	d9001617 	ldw	r4,88(sp)
  811138:	980b883a 	mov	r5,r19
  81113c:	0812f100 	call	812f10 <_Bfree>
  811140:	003ec306 	br	810c50 <_dtoa_r+0x728>
  811144:	1805883a 	mov	r2,r3
  811148:	003eeb06 	br	810cf8 <_dtoa_r+0x7d0>
  81114c:	d9800a17 	ldw	r6,40(sp)
  811150:	d8c01117 	ldw	r3,68(sp)
  811154:	20bfff04 	addi	r2,r4,-4
  811158:	308d883a 	add	r6,r6,r2
  81115c:	1887883a 	add	r3,r3,r2
  811160:	80a1883a 	add	r16,r16,r2
  811164:	d9800a15 	stw	r6,40(sp)
  811168:	d8c01115 	stw	r3,68(sp)
  81116c:	003f1d06 	br	810de4 <_dtoa_r+0x8bc>
  811170:	a03f0c1e 	bne	r20,zero,810da4 <_dtoa_r+0x87c>
  811174:	00800434 	movhi	r2,16
  811178:	10bfffc4 	addi	r2,r2,-1
  81117c:	a884703a 	and	r2,r21,r2
  811180:	103f081e 	bne	r2,zero,810da4 <_dtoa_r+0x87c>
  811184:	a89ffc2c 	andhi	r2,r21,32752
  811188:	103f0626 	beq	r2,zero,810da4 <_dtoa_r+0x87c>
  81118c:	d8c01117 	ldw	r3,68(sp)
  811190:	d9000a17 	ldw	r4,40(sp)
  811194:	18c00044 	addi	r3,r3,1
  811198:	21000044 	addi	r4,r4,1
  81119c:	d8c01115 	stw	r3,68(sp)
  8111a0:	d9000a15 	stw	r4,40(sp)
  8111a4:	003f0006 	br	810da8 <_dtoa_r+0x880>
  8111a8:	d9400717 	ldw	r5,28(sp)
  8111ac:	d9001617 	ldw	r4,88(sp)
  8111b0:	0813d5c0 	call	813d5c <__pow5mult>
  8111b4:	d8800715 	stw	r2,28(sp)
  8111b8:	003eed06 	br	810d70 <_dtoa_r+0x848>
  8111bc:	1000021e 	bne	r2,zero,8111c8 <_dtoa_r+0xca0>
  8111c0:	b880004c 	andi	r2,r23,1
  8111c4:	103fc11e 	bne	r2,zero,8110cc <_dtoa_r+0xba4>
  8111c8:	b5bfffc4 	addi	r22,r22,-1
  8111cc:	b0c00007 	ldb	r3,0(r22)
  8111d0:	00800c04 	movi	r2,48
  8111d4:	18bffc26 	beq	r3,r2,8111c8 <_dtoa_r+0xca0>
  8111d8:	b7000044 	addi	fp,r22,1
  8111dc:	003fcb06 	br	81110c <_dtoa_r+0xbe4>
  8111e0:	d9800d17 	ldw	r6,52(sp)
  8111e4:	018fc83a 	sub	r7,zero,r6
  8111e8:	3801f726 	beq	r7,zero,8119c8 <_dtoa_r+0x14a0>
  8111ec:	398003cc 	andi	r6,r7,15
  8111f0:	300c90fa 	slli	r6,r6,3
  8111f4:	014020b4 	movhi	r5,130
  8111f8:	29472504 	addi	r5,r5,7316
  8111fc:	d9001217 	ldw	r4,72(sp)
  811200:	314d883a 	add	r6,r6,r5
  811204:	30c00117 	ldw	r3,4(r6)
  811208:	30800017 	ldw	r2,0(r6)
  81120c:	d9401317 	ldw	r5,76(sp)
  811210:	3821d13a 	srai	r16,r7,4
  811214:	100d883a 	mov	r6,r2
  811218:	180f883a 	mov	r7,r3
  81121c:	080bbf80 	call	80bbf8 <__muldf3>
  811220:	1011883a 	mov	r8,r2
  811224:	1813883a 	mov	r9,r3
  811228:	1029883a 	mov	r20,r2
  81122c:	182b883a 	mov	r21,r3
  811230:	8001e526 	beq	r16,zero,8119c8 <_dtoa_r+0x14a0>
  811234:	05800084 	movi	r22,2
  811238:	044020b4 	movhi	r17,130
  81123c:	8c475704 	addi	r17,r17,7516
  811240:	8080004c 	andi	r2,r16,1
  811244:	1005003a 	cmpeq	r2,r2,zero
  811248:	1000081e 	bne	r2,zero,81126c <_dtoa_r+0xd44>
  81124c:	89800017 	ldw	r6,0(r17)
  811250:	89c00117 	ldw	r7,4(r17)
  811254:	480b883a 	mov	r5,r9
  811258:	4009883a 	mov	r4,r8
  81125c:	080bbf80 	call	80bbf8 <__muldf3>
  811260:	1011883a 	mov	r8,r2
  811264:	b5800044 	addi	r22,r22,1
  811268:	1813883a 	mov	r9,r3
  81126c:	8021d07a 	srai	r16,r16,1
  811270:	8c400204 	addi	r17,r17,8
  811274:	803ff21e 	bne	r16,zero,811240 <_dtoa_r+0xd18>
  811278:	4029883a 	mov	r20,r8
  81127c:	482b883a 	mov	r21,r9
  811280:	003dca06 	br	8109ac <_dtoa_r+0x484>
  811284:	d9000817 	ldw	r4,32(sp)
  811288:	2005003a 	cmpeq	r2,r4,zero
  81128c:	1001f61e 	bne	r2,zero,811a68 <_dtoa_r+0x1540>
  811290:	dc001117 	ldw	r16,68(sp)
  811294:	dc801017 	ldw	r18,64(sp)
  811298:	18c10cc4 	addi	r3,r3,1075
  81129c:	003f6106 	br	811024 <_dtoa_r+0xafc>
  8112a0:	d8000b15 	stw	zero,44(sp)
  8112a4:	d9802617 	ldw	r6,152(sp)
  8112a8:	d8c00d17 	ldw	r3,52(sp)
  8112ac:	30800044 	addi	r2,r6,1
  8112b0:	18ad883a 	add	r22,r3,r2
  8112b4:	b13fffc4 	addi	r4,r22,-1
  8112b8:	d9000e15 	stw	r4,56(sp)
  8112bc:	0581f60e 	bge	zero,r22,811a98 <_dtoa_r+0x1570>
  8112c0:	dd800f15 	stw	r22,60(sp)
  8112c4:	003f3006 	br	810f88 <_dtoa_r+0xa60>
  8112c8:	d8000b15 	stw	zero,44(sp)
  8112cc:	d9002617 	ldw	r4,152(sp)
  8112d0:	0101eb0e 	bge	zero,r4,811a80 <_dtoa_r+0x1558>
  8112d4:	202d883a 	mov	r22,r4
  8112d8:	d9000e15 	stw	r4,56(sp)
  8112dc:	d9000f15 	stw	r4,60(sp)
  8112e0:	003f2906 	br	810f88 <_dtoa_r+0xa60>
  8112e4:	01800044 	movi	r6,1
  8112e8:	d9800b15 	stw	r6,44(sp)
  8112ec:	003ff706 	br	8112cc <_dtoa_r+0xda4>
  8112f0:	01000044 	movi	r4,1
  8112f4:	d9000b15 	stw	r4,44(sp)
  8112f8:	003fea06 	br	8112a4 <_dtoa_r+0xd7c>
  8112fc:	04000c0e 	bge	zero,r16,811330 <_dtoa_r+0xe08>
  811300:	d9400717 	ldw	r5,28(sp)
  811304:	d9001617 	ldw	r4,88(sp)
  811308:	01800044 	movi	r6,1
  81130c:	08138540 	call	813854 <__lshift>
  811310:	1009883a 	mov	r4,r2
  811314:	900b883a 	mov	r5,r18
  811318:	d8800715 	stw	r2,28(sp)
  81131c:	081306c0 	call	81306c <__mcmp>
  811320:	0081e00e 	bge	zero,r2,811aa4 <_dtoa_r+0x157c>
  811324:	bdc00044 	addi	r23,r23,1
  811328:	00800e84 	movi	r2,58
  81132c:	b881a226 	beq	r23,r2,8119b8 <_dtoa_r+0x1490>
  811330:	b7000044 	addi	fp,r22,1
  811334:	b5c00005 	stb	r23,0(r22)
  811338:	003f7406 	br	81110c <_dtoa_r+0xbe4>
  81133c:	00800e44 	movi	r2,57
  811340:	b8819d26 	beq	r23,r2,8119b8 <_dtoa_r+0x1490>
  811344:	053ffa0e 	bge	zero,r20,811330 <_dtoa_r+0xe08>
  811348:	8dc00c44 	addi	r23,r17,49
  81134c:	003ff806 	br	811330 <_dtoa_r+0xe08>
  811350:	d9001617 	ldw	r4,88(sp)
  811354:	a80b883a 	mov	r5,r21
  811358:	04000044 	movi	r16,1
  81135c:	0812f100 	call	812f10 <_Bfree>
  811360:	003edf06 	br	810ee0 <_dtoa_r+0x9b8>
  811364:	d9001617 	ldw	r4,88(sp)
  811368:	980b883a 	mov	r5,r19
  81136c:	01800284 	movi	r6,10
  811370:	000f883a 	mov	r7,zero
  811374:	0813c300 	call	813c30 <__multadd>
  811378:	1027883a 	mov	r19,r2
  81137c:	d8800615 	stw	r2,24(sp)
  811380:	003ebb06 	br	810e70 <_dtoa_r+0x948>
  811384:	d9801117 	ldw	r6,68(sp)
  811388:	d8800d17 	ldw	r2,52(sp)
  81138c:	d8000915 	stw	zero,36(sp)
  811390:	308dc83a 	sub	r6,r6,r2
  811394:	0087c83a 	sub	r3,zero,r2
  811398:	d9801115 	stw	r6,68(sp)
  81139c:	d8c01015 	stw	r3,64(sp)
  8113a0:	003cfe06 	br	81079c <_dtoa_r+0x274>
  8113a4:	018dc83a 	sub	r6,zero,r6
  8113a8:	d9801115 	stw	r6,68(sp)
  8113ac:	d8000a15 	stw	zero,40(sp)
  8113b0:	003cf306 	br	810780 <_dtoa_r+0x258>
  8113b4:	d9000d17 	ldw	r4,52(sp)
  8113b8:	080c5440 	call	80c544 <__floatsidf>
  8113bc:	880b883a 	mov	r5,r17
  8113c0:	8009883a 	mov	r4,r16
  8113c4:	180f883a 	mov	r7,r3
  8113c8:	100d883a 	mov	r6,r2
  8113cc:	080c29c0 	call	80c29c <__nedf2>
  8113d0:	103ce126 	beq	r2,zero,810758 <_dtoa_r+0x230>
  8113d4:	d9800d17 	ldw	r6,52(sp)
  8113d8:	31bfffc4 	addi	r6,r6,-1
  8113dc:	d9800d15 	stw	r6,52(sp)
  8113e0:	003cdd06 	br	810758 <_dtoa_r+0x230>
  8113e4:	d9000717 	ldw	r4,28(sp)
  8113e8:	900b883a 	mov	r5,r18
  8113ec:	081306c0 	call	81306c <__mcmp>
  8113f0:	103e8d0e 	bge	r2,zero,810e28 <_dtoa_r+0x900>
  8113f4:	d9400717 	ldw	r5,28(sp)
  8113f8:	d9001617 	ldw	r4,88(sp)
  8113fc:	01800284 	movi	r6,10
  811400:	000f883a 	mov	r7,zero
  811404:	0813c300 	call	813c30 <__multadd>
  811408:	d9800d17 	ldw	r6,52(sp)
  81140c:	d8800715 	stw	r2,28(sp)
  811410:	31bfffc4 	addi	r6,r6,-1
  811414:	d9800d15 	stw	r6,52(sp)
  811418:	b001a71e 	bne	r22,zero,811ab8 <_dtoa_r+0x1590>
  81141c:	d8800e17 	ldw	r2,56(sp)
  811420:	d8800f15 	stw	r2,60(sp)
  811424:	003e8006 	br	810e28 <_dtoa_r+0x900>
  811428:	90800417 	ldw	r2,16(r18)
  81142c:	1085883a 	add	r2,r2,r2
  811430:	1085883a 	add	r2,r2,r2
  811434:	1485883a 	add	r2,r2,r18
  811438:	11000417 	ldw	r4,16(r2)
  81143c:	0812f380 	call	812f38 <__hi0bits>
  811440:	00c00804 	movi	r3,32
  811444:	1887c83a 	sub	r3,r3,r2
  811448:	003e5a06 	br	810db4 <_dtoa_r+0x88c>
  81144c:	d9400717 	ldw	r5,28(sp)
  811450:	d9801017 	ldw	r6,64(sp)
  811454:	d9001617 	ldw	r4,88(sp)
  811458:	0813d5c0 	call	813d5c <__pow5mult>
  81145c:	d8800715 	stw	r2,28(sp)
  811460:	003e4306 	br	810d70 <_dtoa_r+0x848>
  811464:	d9800f17 	ldw	r6,60(sp)
  811468:	d8800d17 	ldw	r2,52(sp)
  81146c:	d9800315 	stw	r6,12(sp)
  811470:	d8800415 	stw	r2,16(sp)
  811474:	d8c00b17 	ldw	r3,44(sp)
  811478:	1805003a 	cmpeq	r2,r3,zero
  81147c:	1000e21e 	bne	r2,zero,811808 <_dtoa_r+0x12e0>
  811480:	d9000317 	ldw	r4,12(sp)
  811484:	0005883a 	mov	r2,zero
  811488:	00cff834 	movhi	r3,16352
  81148c:	200c90fa 	slli	r6,r4,3
  811490:	010020b4 	movhi	r4,130
  811494:	21072504 	addi	r4,r4,7316
  811498:	180b883a 	mov	r5,r3
  81149c:	310d883a 	add	r6,r6,r4
  8114a0:	327fff17 	ldw	r9,-4(r6)
  8114a4:	323ffe17 	ldw	r8,-8(r6)
  8114a8:	1009883a 	mov	r4,r2
  8114ac:	480f883a 	mov	r7,r9
  8114b0:	400d883a 	mov	r6,r8
  8114b4:	080bfbc0 	call	80bfbc <__divdf3>
  8114b8:	180b883a 	mov	r5,r3
  8114bc:	b00d883a 	mov	r6,r22
  8114c0:	b80f883a 	mov	r7,r23
  8114c4:	1009883a 	mov	r4,r2
  8114c8:	080bb040 	call	80bb04 <__subdf3>
  8114cc:	a80b883a 	mov	r5,r21
  8114d0:	a009883a 	mov	r4,r20
  8114d4:	d8c01915 	stw	r3,100(sp)
  8114d8:	d8801815 	stw	r2,96(sp)
  8114dc:	080c63c0 	call	80c63c <__fixdfsi>
  8114e0:	1009883a 	mov	r4,r2
  8114e4:	1027883a 	mov	r19,r2
  8114e8:	080c5440 	call	80c544 <__floatsidf>
  8114ec:	a80b883a 	mov	r5,r21
  8114f0:	a009883a 	mov	r4,r20
  8114f4:	180f883a 	mov	r7,r3
  8114f8:	100d883a 	mov	r6,r2
  8114fc:	080bb040 	call	80bb04 <__subdf3>
  811500:	d9801817 	ldw	r6,96(sp)
  811504:	1823883a 	mov	r17,r3
  811508:	d8801415 	stw	r2,80(sp)
  81150c:	302d883a 	mov	r22,r6
  811510:	d9800517 	ldw	r6,20(sp)
  811514:	9cc00c04 	addi	r19,r19,48
  811518:	dc401515 	stw	r17,84(sp)
  81151c:	d8c01917 	ldw	r3,100(sp)
  811520:	34c00005 	stb	r19,0(r6)
  811524:	d8800517 	ldw	r2,20(sp)
  811528:	d9401917 	ldw	r5,100(sp)
  81152c:	d9801417 	ldw	r6,80(sp)
  811530:	b009883a 	mov	r4,r22
  811534:	880f883a 	mov	r7,r17
  811538:	182f883a 	mov	r23,r3
  81153c:	17000044 	addi	fp,r2,1
  811540:	080c3240 	call	80c324 <__gtdf2>
  811544:	00804e16 	blt	zero,r2,811680 <_dtoa_r+0x1158>
  811548:	d9801417 	ldw	r6,80(sp)
  81154c:	0005883a 	mov	r2,zero
  811550:	00cffc34 	movhi	r3,16368
  811554:	180b883a 	mov	r5,r3
  811558:	880f883a 	mov	r7,r17
  81155c:	1009883a 	mov	r4,r2
  811560:	080bb040 	call	80bb04 <__subdf3>
  811564:	d9401917 	ldw	r5,100(sp)
  811568:	180f883a 	mov	r7,r3
  81156c:	b009883a 	mov	r4,r22
  811570:	100d883a 	mov	r6,r2
  811574:	080c3240 	call	80c324 <__gtdf2>
  811578:	00bda216 	blt	zero,r2,810c04 <_dtoa_r+0x6dc>
  81157c:	d8c00317 	ldw	r3,12(sp)
  811580:	00800044 	movi	r2,1
  811584:	10c01216 	blt	r2,r3,8115d0 <_dtoa_r+0x10a8>
  811588:	003d4506 	br	810aa0 <_dtoa_r+0x578>
  81158c:	d9801417 	ldw	r6,80(sp)
  811590:	0005883a 	mov	r2,zero
  811594:	00cffc34 	movhi	r3,16368
  811598:	180b883a 	mov	r5,r3
  81159c:	880f883a 	mov	r7,r17
  8115a0:	1009883a 	mov	r4,r2
  8115a4:	080bb040 	call	80bb04 <__subdf3>
  8115a8:	d9c01b17 	ldw	r7,108(sp)
  8115ac:	180b883a 	mov	r5,r3
  8115b0:	1009883a 	mov	r4,r2
  8115b4:	b00d883a 	mov	r6,r22
  8115b8:	080c4340 	call	80c434 <__ltdf2>
  8115bc:	103d9116 	blt	r2,zero,810c04 <_dtoa_r+0x6dc>
  8115c0:	d9800517 	ldw	r6,20(sp)
  8115c4:	d9000317 	ldw	r4,12(sp)
  8115c8:	3105883a 	add	r2,r6,r4
  8115cc:	e0bd3426 	beq	fp,r2,810aa0 <_dtoa_r+0x578>
  8115d0:	04500934 	movhi	r17,16420
  8115d4:	0021883a 	mov	r16,zero
  8115d8:	b80b883a 	mov	r5,r23
  8115dc:	b009883a 	mov	r4,r22
  8115e0:	800d883a 	mov	r6,r16
  8115e4:	880f883a 	mov	r7,r17
  8115e8:	080bbf80 	call	80bbf8 <__muldf3>
  8115ec:	d9401517 	ldw	r5,84(sp)
  8115f0:	d9001417 	ldw	r4,80(sp)
  8115f4:	880f883a 	mov	r7,r17
  8115f8:	000d883a 	mov	r6,zero
  8115fc:	d8801a15 	stw	r2,104(sp)
  811600:	d8c01b15 	stw	r3,108(sp)
  811604:	080bbf80 	call	80bbf8 <__muldf3>
  811608:	180b883a 	mov	r5,r3
  81160c:	1009883a 	mov	r4,r2
  811610:	1823883a 	mov	r17,r3
  811614:	1021883a 	mov	r16,r2
  811618:	080c63c0 	call	80c63c <__fixdfsi>
  81161c:	1009883a 	mov	r4,r2
  811620:	102b883a 	mov	r21,r2
  811624:	080c5440 	call	80c544 <__floatsidf>
  811628:	880b883a 	mov	r5,r17
  81162c:	8009883a 	mov	r4,r16
  811630:	180f883a 	mov	r7,r3
  811634:	100d883a 	mov	r6,r2
  811638:	080bb040 	call	80bb04 <__subdf3>
  81163c:	1021883a 	mov	r16,r2
  811640:	d9001b17 	ldw	r4,108(sp)
  811644:	1823883a 	mov	r17,r3
  811648:	dc001415 	stw	r16,80(sp)
  81164c:	ad400c04 	addi	r21,r21,48
  811650:	dc401515 	stw	r17,84(sp)
  811654:	d8801a17 	ldw	r2,104(sp)
  811658:	e5400005 	stb	r21,0(fp)
  81165c:	202f883a 	mov	r23,r4
  811660:	d9c01b17 	ldw	r7,108(sp)
  811664:	d9001417 	ldw	r4,80(sp)
  811668:	880b883a 	mov	r5,r17
  81166c:	100d883a 	mov	r6,r2
  811670:	102d883a 	mov	r22,r2
  811674:	e7000044 	addi	fp,fp,1
  811678:	080c4340 	call	80c434 <__ltdf2>
  81167c:	103fc30e 	bge	r2,zero,81158c <_dtoa_r+0x1064>
  811680:	d9000417 	ldw	r4,16(sp)
  811684:	d9000d15 	stw	r4,52(sp)
  811688:	003d7106 	br	810c50 <_dtoa_r+0x728>
  81168c:	d9801717 	ldw	r6,92(sp)
  811690:	00800084 	movi	r2,2
  811694:	11bde60e 	bge	r2,r6,810e30 <_dtoa_r+0x908>
  811698:	203cfb1e 	bne	r4,zero,810a88 <_dtoa_r+0x560>
  81169c:	d9001617 	ldw	r4,88(sp)
  8116a0:	900b883a 	mov	r5,r18
  8116a4:	01800144 	movi	r6,5
  8116a8:	000f883a 	mov	r7,zero
  8116ac:	0813c300 	call	813c30 <__multadd>
  8116b0:	d9000717 	ldw	r4,28(sp)
  8116b4:	100b883a 	mov	r5,r2
  8116b8:	1025883a 	mov	r18,r2
  8116bc:	081306c0 	call	81306c <__mcmp>
  8116c0:	00bcf10e 	bge	zero,r2,810a88 <_dtoa_r+0x560>
  8116c4:	d8c00d17 	ldw	r3,52(sp)
  8116c8:	d9000517 	ldw	r4,20(sp)
  8116cc:	d8000615 	stw	zero,24(sp)
  8116d0:	18c00044 	addi	r3,r3,1
  8116d4:	d8c00d15 	stw	r3,52(sp)
  8116d8:	00800c44 	movi	r2,49
  8116dc:	27000044 	addi	fp,r4,1
  8116e0:	20800005 	stb	r2,0(r4)
  8116e4:	003e8906 	br	81110c <_dtoa_r+0xbe4>
  8116e8:	d8c00517 	ldw	r3,20(sp)
  8116ec:	003bc206 	br	8105f8 <_dtoa_r+0xd0>
  8116f0:	018020b4 	movhi	r6,130
  8116f4:	31875704 	addi	r6,r6,7516
  8116f8:	30c00917 	ldw	r3,36(r6)
  8116fc:	30800817 	ldw	r2,32(r6)
  811700:	d9001217 	ldw	r4,72(sp)
  811704:	d9401317 	ldw	r5,76(sp)
  811708:	180f883a 	mov	r7,r3
  81170c:	100d883a 	mov	r6,r2
  811710:	080bfbc0 	call	80bfbc <__divdf3>
  811714:	948003cc 	andi	r18,r18,15
  811718:	058000c4 	movi	r22,3
  81171c:	1029883a 	mov	r20,r2
  811720:	182b883a 	mov	r21,r3
  811724:	003c8906 	br	81094c <_dtoa_r+0x424>
  811728:	d9001017 	ldw	r4,64(sp)
  81172c:	d9800917 	ldw	r6,36(sp)
  811730:	0025883a 	mov	r18,zero
  811734:	1105c83a 	sub	r2,r2,r4
  811738:	2089883a 	add	r4,r4,r2
  81173c:	308d883a 	add	r6,r6,r2
  811740:	d9001015 	stw	r4,64(sp)
  811744:	d9800915 	stw	r6,36(sp)
  811748:	003e3206 	br	811014 <_dtoa_r+0xaec>
  81174c:	28800044 	addi	r2,r5,1
  811750:	27000044 	addi	fp,r4,1
  811754:	20800005 	stb	r2,0(r4)
  811758:	003e6c06 	br	81110c <_dtoa_r+0xbe4>
  81175c:	d8800f17 	ldw	r2,60(sp)
  811760:	00bce016 	blt	zero,r2,810ae4 <_dtoa_r+0x5bc>
  811764:	d9800f17 	ldw	r6,60(sp)
  811768:	303cc51e 	bne	r6,zero,810a80 <_dtoa_r+0x558>
  81176c:	0005883a 	mov	r2,zero
  811770:	00d00534 	movhi	r3,16404
  811774:	980b883a 	mov	r5,r19
  811778:	180f883a 	mov	r7,r3
  81177c:	9009883a 	mov	r4,r18
  811780:	100d883a 	mov	r6,r2
  811784:	080bbf80 	call	80bbf8 <__muldf3>
  811788:	180b883a 	mov	r5,r3
  81178c:	a80f883a 	mov	r7,r21
  811790:	1009883a 	mov	r4,r2
  811794:	a00d883a 	mov	r6,r20
  811798:	080c3ac0 	call	80c3ac <__gedf2>
  81179c:	103cb80e 	bge	r2,zero,810a80 <_dtoa_r+0x558>
  8117a0:	0027883a 	mov	r19,zero
  8117a4:	0025883a 	mov	r18,zero
  8117a8:	003fc606 	br	8116c4 <_dtoa_r+0x119c>
  8117ac:	99400117 	ldw	r5,4(r19)
  8117b0:	d9001617 	ldw	r4,88(sp)
  8117b4:	08134900 	call	813490 <_Balloc>
  8117b8:	99800417 	ldw	r6,16(r19)
  8117bc:	11000304 	addi	r4,r2,12
  8117c0:	99400304 	addi	r5,r19,12
  8117c4:	318d883a 	add	r6,r6,r6
  8117c8:	318d883a 	add	r6,r6,r6
  8117cc:	31800204 	addi	r6,r6,8
  8117d0:	1023883a 	mov	r17,r2
  8117d4:	080d9a00 	call	80d9a0 <memcpy>
  8117d8:	d9001617 	ldw	r4,88(sp)
  8117dc:	880b883a 	mov	r5,r17
  8117e0:	01800044 	movi	r6,1
  8117e4:	08138540 	call	813854 <__lshift>
  8117e8:	100b883a 	mov	r5,r2
  8117ec:	003d9c06 	br	810e60 <_dtoa_r+0x938>
  8117f0:	00800e44 	movi	r2,57
  8117f4:	b8807026 	beq	r23,r2,8119b8 <_dtoa_r+0x1490>
  8117f8:	b8800044 	addi	r2,r23,1
  8117fc:	b7000044 	addi	fp,r22,1
  811800:	b0800005 	stb	r2,0(r22)
  811804:	003e4106 	br	81110c <_dtoa_r+0xbe4>
  811808:	d8800317 	ldw	r2,12(sp)
  81180c:	018020b4 	movhi	r6,130
  811810:	31872504 	addi	r6,r6,7316
  811814:	b009883a 	mov	r4,r22
  811818:	100e90fa 	slli	r7,r2,3
  81181c:	b80b883a 	mov	r5,r23
  811820:	398f883a 	add	r7,r7,r6
  811824:	38bffe17 	ldw	r2,-8(r7)
  811828:	d9800517 	ldw	r6,20(sp)
  81182c:	38ffff17 	ldw	r3,-4(r7)
  811830:	37000044 	addi	fp,r6,1
  811834:	180f883a 	mov	r7,r3
  811838:	100d883a 	mov	r6,r2
  81183c:	080bbf80 	call	80bbf8 <__muldf3>
  811840:	a80b883a 	mov	r5,r21
  811844:	a009883a 	mov	r4,r20
  811848:	182f883a 	mov	r23,r3
  81184c:	102d883a 	mov	r22,r2
  811850:	080c63c0 	call	80c63c <__fixdfsi>
  811854:	1009883a 	mov	r4,r2
  811858:	1027883a 	mov	r19,r2
  81185c:	080c5440 	call	80c544 <__floatsidf>
  811860:	a80b883a 	mov	r5,r21
  811864:	a009883a 	mov	r4,r20
  811868:	180f883a 	mov	r7,r3
  81186c:	100d883a 	mov	r6,r2
  811870:	080bb040 	call	80bb04 <__subdf3>
  811874:	180b883a 	mov	r5,r3
  811878:	d8c00517 	ldw	r3,20(sp)
  81187c:	9cc00c04 	addi	r19,r19,48
  811880:	1009883a 	mov	r4,r2
  811884:	1cc00005 	stb	r19,0(r3)
  811888:	2021883a 	mov	r16,r4
  81188c:	d9000317 	ldw	r4,12(sp)
  811890:	00800044 	movi	r2,1
  811894:	2823883a 	mov	r17,r5
  811898:	20802226 	beq	r4,r2,811924 <_dtoa_r+0x13fc>
  81189c:	1029883a 	mov	r20,r2
  8118a0:	0005883a 	mov	r2,zero
  8118a4:	00d00934 	movhi	r3,16420
  8118a8:	180f883a 	mov	r7,r3
  8118ac:	100d883a 	mov	r6,r2
  8118b0:	880b883a 	mov	r5,r17
  8118b4:	8009883a 	mov	r4,r16
  8118b8:	080bbf80 	call	80bbf8 <__muldf3>
  8118bc:	180b883a 	mov	r5,r3
  8118c0:	1009883a 	mov	r4,r2
  8118c4:	1823883a 	mov	r17,r3
  8118c8:	1021883a 	mov	r16,r2
  8118cc:	080c63c0 	call	80c63c <__fixdfsi>
  8118d0:	1009883a 	mov	r4,r2
  8118d4:	102b883a 	mov	r21,r2
  8118d8:	080c5440 	call	80c544 <__floatsidf>
  8118dc:	880b883a 	mov	r5,r17
  8118e0:	8009883a 	mov	r4,r16
  8118e4:	180f883a 	mov	r7,r3
  8118e8:	100d883a 	mov	r6,r2
  8118ec:	080bb040 	call	80bb04 <__subdf3>
  8118f0:	180b883a 	mov	r5,r3
  8118f4:	d8c00517 	ldw	r3,20(sp)
  8118f8:	1009883a 	mov	r4,r2
  8118fc:	ad400c04 	addi	r21,r21,48
  811900:	1d05883a 	add	r2,r3,r20
  811904:	15400005 	stb	r21,0(r2)
  811908:	2021883a 	mov	r16,r4
  81190c:	d9000317 	ldw	r4,12(sp)
  811910:	a5000044 	addi	r20,r20,1
  811914:	2823883a 	mov	r17,r5
  811918:	a13fe11e 	bne	r20,r4,8118a0 <_dtoa_r+0x1378>
  81191c:	e505883a 	add	r2,fp,r20
  811920:	173fffc4 	addi	fp,r2,-1
  811924:	0025883a 	mov	r18,zero
  811928:	04cff834 	movhi	r19,16352
  81192c:	b009883a 	mov	r4,r22
  811930:	b80b883a 	mov	r5,r23
  811934:	900d883a 	mov	r6,r18
  811938:	980f883a 	mov	r7,r19
  81193c:	080bb840 	call	80bb84 <__adddf3>
  811940:	180b883a 	mov	r5,r3
  811944:	1009883a 	mov	r4,r2
  811948:	800d883a 	mov	r6,r16
  81194c:	880f883a 	mov	r7,r17
  811950:	080c4340 	call	80c434 <__ltdf2>
  811954:	103cab16 	blt	r2,zero,810c04 <_dtoa_r+0x6dc>
  811958:	0009883a 	mov	r4,zero
  81195c:	980b883a 	mov	r5,r19
  811960:	b80f883a 	mov	r7,r23
  811964:	b00d883a 	mov	r6,r22
  811968:	080bb040 	call	80bb04 <__subdf3>
  81196c:	180b883a 	mov	r5,r3
  811970:	880f883a 	mov	r7,r17
  811974:	1009883a 	mov	r4,r2
  811978:	800d883a 	mov	r6,r16
  81197c:	080c3240 	call	80c324 <__gtdf2>
  811980:	00bc470e 	bge	zero,r2,810aa0 <_dtoa_r+0x578>
  811984:	00c00c04 	movi	r3,48
  811988:	e73fffc4 	addi	fp,fp,-1
  81198c:	e0800007 	ldb	r2,0(fp)
  811990:	10fffd26 	beq	r2,r3,811988 <_dtoa_r+0x1460>
  811994:	d9800417 	ldw	r6,16(sp)
  811998:	e7000044 	addi	fp,fp,1
  81199c:	d9800d15 	stw	r6,52(sp)
  8119a0:	003cab06 	br	810c50 <_dtoa_r+0x728>
  8119a4:	d8c00f17 	ldw	r3,60(sp)
  8119a8:	d9001117 	ldw	r4,68(sp)
  8119ac:	20e1c83a 	sub	r16,r4,r3
  8119b0:	0007883a 	mov	r3,zero
  8119b4:	003d9b06 	br	811024 <_dtoa_r+0xafc>
  8119b8:	00800e44 	movi	r2,57
  8119bc:	b0800005 	stb	r2,0(r22)
  8119c0:	b5800044 	addi	r22,r22,1
  8119c4:	003dc106 	br	8110cc <_dtoa_r+0xba4>
  8119c8:	05800084 	movi	r22,2
  8119cc:	003bf706 	br	8109ac <_dtoa_r+0x484>
  8119d0:	d9000f17 	ldw	r4,60(sp)
  8119d4:	013c000e 	bge	zero,r4,8109d8 <_dtoa_r+0x4b0>
  8119d8:	d9800e17 	ldw	r6,56(sp)
  8119dc:	01bc300e 	bge	zero,r6,810aa0 <_dtoa_r+0x578>
  8119e0:	0005883a 	mov	r2,zero
  8119e4:	00d00934 	movhi	r3,16420
  8119e8:	a80b883a 	mov	r5,r21
  8119ec:	180f883a 	mov	r7,r3
  8119f0:	a009883a 	mov	r4,r20
  8119f4:	100d883a 	mov	r6,r2
  8119f8:	080bbf80 	call	80bbf8 <__muldf3>
  8119fc:	b1000044 	addi	r4,r22,1
  811a00:	1021883a 	mov	r16,r2
  811a04:	1823883a 	mov	r17,r3
  811a08:	080c5440 	call	80c544 <__floatsidf>
  811a0c:	880b883a 	mov	r5,r17
  811a10:	8009883a 	mov	r4,r16
  811a14:	180f883a 	mov	r7,r3
  811a18:	100d883a 	mov	r6,r2
  811a1c:	080bbf80 	call	80bbf8 <__muldf3>
  811a20:	0011883a 	mov	r8,zero
  811a24:	02500734 	movhi	r9,16412
  811a28:	180b883a 	mov	r5,r3
  811a2c:	480f883a 	mov	r7,r9
  811a30:	1009883a 	mov	r4,r2
  811a34:	400d883a 	mov	r6,r8
  811a38:	080bb840 	call	80bb84 <__adddf3>
  811a3c:	102d883a 	mov	r22,r2
  811a40:	00bf3034 	movhi	r2,64704
  811a44:	10ef883a 	add	r23,r2,r3
  811a48:	d8800d17 	ldw	r2,52(sp)
  811a4c:	d8c00e17 	ldw	r3,56(sp)
  811a50:	8029883a 	mov	r20,r16
  811a54:	10bfffc4 	addi	r2,r2,-1
  811a58:	882b883a 	mov	r21,r17
  811a5c:	d8800415 	stw	r2,16(sp)
  811a60:	d8c00315 	stw	r3,12(sp)
  811a64:	003e8306 	br	811474 <_dtoa_r+0xf4c>
  811a68:	d8800117 	ldw	r2,4(sp)
  811a6c:	dc001117 	ldw	r16,68(sp)
  811a70:	dc801017 	ldw	r18,64(sp)
  811a74:	00c00d84 	movi	r3,54
  811a78:	1887c83a 	sub	r3,r3,r2
  811a7c:	003d6906 	br	811024 <_dtoa_r+0xafc>
  811a80:	01800044 	movi	r6,1
  811a84:	3021883a 	mov	r16,r6
  811a88:	d9800f15 	stw	r6,60(sp)
  811a8c:	d9802615 	stw	r6,152(sp)
  811a90:	d9800e15 	stw	r6,56(sp)
  811a94:	003b9306 	br	8108e4 <_dtoa_r+0x3bc>
  811a98:	b021883a 	mov	r16,r22
  811a9c:	dd800f15 	stw	r22,60(sp)
  811aa0:	003b9006 	br	8108e4 <_dtoa_r+0x3bc>
  811aa4:	103e221e 	bne	r2,zero,811330 <_dtoa_r+0xe08>
  811aa8:	b880004c 	andi	r2,r23,1
  811aac:	1005003a 	cmpeq	r2,r2,zero
  811ab0:	103e1f1e 	bne	r2,zero,811330 <_dtoa_r+0xe08>
  811ab4:	003e1b06 	br	811324 <_dtoa_r+0xdfc>
  811ab8:	d9001617 	ldw	r4,88(sp)
  811abc:	980b883a 	mov	r5,r19
  811ac0:	01800284 	movi	r6,10
  811ac4:	000f883a 	mov	r7,zero
  811ac8:	0813c300 	call	813c30 <__multadd>
  811acc:	d8c00e17 	ldw	r3,56(sp)
  811ad0:	1027883a 	mov	r19,r2
  811ad4:	d8c00f15 	stw	r3,60(sp)
  811ad8:	003cd306 	br	810e28 <_dtoa_r+0x900>

00811adc <_fflush_r>:
  811adc:	defffb04 	addi	sp,sp,-20
  811ae0:	dcc00315 	stw	r19,12(sp)
  811ae4:	dc800215 	stw	r18,8(sp)
  811ae8:	dfc00415 	stw	ra,16(sp)
  811aec:	dc400115 	stw	r17,4(sp)
  811af0:	dc000015 	stw	r16,0(sp)
  811af4:	2027883a 	mov	r19,r4
  811af8:	2825883a 	mov	r18,r5
  811afc:	20000226 	beq	r4,zero,811b08 <_fflush_r+0x2c>
  811b00:	20800e17 	ldw	r2,56(r4)
  811b04:	10005626 	beq	r2,zero,811c60 <_fflush_r+0x184>
  811b08:	9100030b 	ldhu	r4,12(r18)
  811b0c:	20ffffcc 	andi	r3,r4,65535
  811b10:	18e0001c 	xori	r3,r3,32768
  811b14:	18e00004 	addi	r3,r3,-32768
  811b18:	1880020c 	andi	r2,r3,8
  811b1c:	1000261e 	bne	r2,zero,811bb8 <_fflush_r+0xdc>
  811b20:	90c00117 	ldw	r3,4(r18)
  811b24:	20820014 	ori	r2,r4,2048
  811b28:	9080030d 	sth	r2,12(r18)
  811b2c:	1009883a 	mov	r4,r2
  811b30:	00c0400e 	bge	zero,r3,811c34 <_fflush_r+0x158>
  811b34:	92000a17 	ldw	r8,40(r18)
  811b38:	40004026 	beq	r8,zero,811c3c <_fflush_r+0x160>
  811b3c:	2084000c 	andi	r2,r4,4096
  811b40:	10005326 	beq	r2,zero,811c90 <_fflush_r+0x1b4>
  811b44:	94001417 	ldw	r16,80(r18)
  811b48:	9080030b 	ldhu	r2,12(r18)
  811b4c:	1080010c 	andi	r2,r2,4
  811b50:	1000481e 	bne	r2,zero,811c74 <_fflush_r+0x198>
  811b54:	91400717 	ldw	r5,28(r18)
  811b58:	9809883a 	mov	r4,r19
  811b5c:	800d883a 	mov	r6,r16
  811b60:	000f883a 	mov	r7,zero
  811b64:	403ee83a 	callr	r8
  811b68:	8080261e 	bne	r16,r2,811c04 <_fflush_r+0x128>
  811b6c:	9080030b 	ldhu	r2,12(r18)
  811b70:	91000417 	ldw	r4,16(r18)
  811b74:	90000115 	stw	zero,4(r18)
  811b78:	10bdffcc 	andi	r2,r2,63487
  811b7c:	10ffffcc 	andi	r3,r2,65535
  811b80:	18c4000c 	andi	r3,r3,4096
  811b84:	9080030d 	sth	r2,12(r18)
  811b88:	91000015 	stw	r4,0(r18)
  811b8c:	18002b26 	beq	r3,zero,811c3c <_fflush_r+0x160>
  811b90:	0007883a 	mov	r3,zero
  811b94:	1805883a 	mov	r2,r3
  811b98:	94001415 	stw	r16,80(r18)
  811b9c:	dfc00417 	ldw	ra,16(sp)
  811ba0:	dcc00317 	ldw	r19,12(sp)
  811ba4:	dc800217 	ldw	r18,8(sp)
  811ba8:	dc400117 	ldw	r17,4(sp)
  811bac:	dc000017 	ldw	r16,0(sp)
  811bb0:	dec00504 	addi	sp,sp,20
  811bb4:	f800283a 	ret
  811bb8:	94400417 	ldw	r17,16(r18)
  811bbc:	88001f26 	beq	r17,zero,811c3c <_fflush_r+0x160>
  811bc0:	90800017 	ldw	r2,0(r18)
  811bc4:	18c000cc 	andi	r3,r3,3
  811bc8:	94400015 	stw	r17,0(r18)
  811bcc:	1461c83a 	sub	r16,r2,r17
  811bd0:	18002526 	beq	r3,zero,811c68 <_fflush_r+0x18c>
  811bd4:	0005883a 	mov	r2,zero
  811bd8:	90800215 	stw	r2,8(r18)
  811bdc:	0400170e 	bge	zero,r16,811c3c <_fflush_r+0x160>
  811be0:	90c00917 	ldw	r3,36(r18)
  811be4:	91400717 	ldw	r5,28(r18)
  811be8:	880d883a 	mov	r6,r17
  811bec:	800f883a 	mov	r7,r16
  811bf0:	9809883a 	mov	r4,r19
  811bf4:	183ee83a 	callr	r3
  811bf8:	88a3883a 	add	r17,r17,r2
  811bfc:	80a1c83a 	sub	r16,r16,r2
  811c00:	00bff616 	blt	zero,r2,811bdc <_fflush_r+0x100>
  811c04:	9080030b 	ldhu	r2,12(r18)
  811c08:	00ffffc4 	movi	r3,-1
  811c0c:	10801014 	ori	r2,r2,64
  811c10:	9080030d 	sth	r2,12(r18)
  811c14:	1805883a 	mov	r2,r3
  811c18:	dfc00417 	ldw	ra,16(sp)
  811c1c:	dcc00317 	ldw	r19,12(sp)
  811c20:	dc800217 	ldw	r18,8(sp)
  811c24:	dc400117 	ldw	r17,4(sp)
  811c28:	dc000017 	ldw	r16,0(sp)
  811c2c:	dec00504 	addi	sp,sp,20
  811c30:	f800283a 	ret
  811c34:	90800f17 	ldw	r2,60(r18)
  811c38:	00bfbe16 	blt	zero,r2,811b34 <_fflush_r+0x58>
  811c3c:	0007883a 	mov	r3,zero
  811c40:	1805883a 	mov	r2,r3
  811c44:	dfc00417 	ldw	ra,16(sp)
  811c48:	dcc00317 	ldw	r19,12(sp)
  811c4c:	dc800217 	ldw	r18,8(sp)
  811c50:	dc400117 	ldw	r17,4(sp)
  811c54:	dc000017 	ldw	r16,0(sp)
  811c58:	dec00504 	addi	sp,sp,20
  811c5c:	f800283a 	ret
  811c60:	0811d740 	call	811d74 <__sinit>
  811c64:	003fa806 	br	811b08 <_fflush_r+0x2c>
  811c68:	90800517 	ldw	r2,20(r18)
  811c6c:	90800215 	stw	r2,8(r18)
  811c70:	003fda06 	br	811bdc <_fflush_r+0x100>
  811c74:	90800117 	ldw	r2,4(r18)
  811c78:	90c00c17 	ldw	r3,48(r18)
  811c7c:	80a1c83a 	sub	r16,r16,r2
  811c80:	183fb426 	beq	r3,zero,811b54 <_fflush_r+0x78>
  811c84:	90800f17 	ldw	r2,60(r18)
  811c88:	80a1c83a 	sub	r16,r16,r2
  811c8c:	003fb106 	br	811b54 <_fflush_r+0x78>
  811c90:	91400717 	ldw	r5,28(r18)
  811c94:	9809883a 	mov	r4,r19
  811c98:	000d883a 	mov	r6,zero
  811c9c:	01c00044 	movi	r7,1
  811ca0:	403ee83a 	callr	r8
  811ca4:	1021883a 	mov	r16,r2
  811ca8:	00bfffc4 	movi	r2,-1
  811cac:	80800226 	beq	r16,r2,811cb8 <_fflush_r+0x1dc>
  811cb0:	92000a17 	ldw	r8,40(r18)
  811cb4:	003fa406 	br	811b48 <_fflush_r+0x6c>
  811cb8:	98c00017 	ldw	r3,0(r19)
  811cbc:	00800744 	movi	r2,29
  811cc0:	18bfde26 	beq	r3,r2,811c3c <_fflush_r+0x160>
  811cc4:	9080030b 	ldhu	r2,12(r18)
  811cc8:	8007883a 	mov	r3,r16
  811ccc:	10801014 	ori	r2,r2,64
  811cd0:	9080030d 	sth	r2,12(r18)
  811cd4:	003fcf06 	br	811c14 <_fflush_r+0x138>

00811cd8 <fflush>:
  811cd8:	01402074 	movhi	r5,129
  811cdc:	2946b704 	addi	r5,r5,6876
  811ce0:	2007883a 	mov	r3,r4
  811ce4:	20000526 	beq	r4,zero,811cfc <fflush+0x24>
  811ce8:	008020b4 	movhi	r2,130
  811cec:	108e6f04 	addi	r2,r2,14780
  811cf0:	11000017 	ldw	r4,0(r2)
  811cf4:	180b883a 	mov	r5,r3
  811cf8:	0811adc1 	jmpi	811adc <_fflush_r>
  811cfc:	008020b4 	movhi	r2,130
  811d00:	108e7004 	addi	r2,r2,14784
  811d04:	11000017 	ldw	r4,0(r2)
  811d08:	08128dc1 	jmpi	8128dc <_fwalk_reent>

00811d0c <std>:
  811d0c:	00802074 	movhi	r2,129
  811d10:	108ff704 	addi	r2,r2,16348
  811d14:	20800b15 	stw	r2,44(r4)
  811d18:	00802074 	movhi	r2,129
  811d1c:	10903204 	addi	r2,r2,16584
  811d20:	20800815 	stw	r2,32(r4)
  811d24:	00c02074 	movhi	r3,129
  811d28:	18d01304 	addi	r3,r3,16460
  811d2c:	00802074 	movhi	r2,129
  811d30:	108ff904 	addi	r2,r2,16356
  811d34:	2140030d 	sth	r5,12(r4)
  811d38:	2180038d 	sth	r6,14(r4)
  811d3c:	20c00915 	stw	r3,36(r4)
  811d40:	20800a15 	stw	r2,40(r4)
  811d44:	20000015 	stw	zero,0(r4)
  811d48:	20000115 	stw	zero,4(r4)
  811d4c:	20000215 	stw	zero,8(r4)
  811d50:	20000415 	stw	zero,16(r4)
  811d54:	20000515 	stw	zero,20(r4)
  811d58:	20000615 	stw	zero,24(r4)
  811d5c:	21000715 	stw	r4,28(r4)
  811d60:	f800283a 	ret

00811d64 <__sfp_lock_acquire>:
  811d64:	f800283a 	ret

00811d68 <__sfp_lock_release>:
  811d68:	f800283a 	ret

00811d6c <__sinit_lock_acquire>:
  811d6c:	f800283a 	ret

00811d70 <__sinit_lock_release>:
  811d70:	f800283a 	ret

00811d74 <__sinit>:
  811d74:	20800e17 	ldw	r2,56(r4)
  811d78:	defffd04 	addi	sp,sp,-12
  811d7c:	dc400115 	stw	r17,4(sp)
  811d80:	dc000015 	stw	r16,0(sp)
  811d84:	dfc00215 	stw	ra,8(sp)
  811d88:	04400044 	movi	r17,1
  811d8c:	01400104 	movi	r5,4
  811d90:	000d883a 	mov	r6,zero
  811d94:	2021883a 	mov	r16,r4
  811d98:	2200bb04 	addi	r8,r4,748
  811d9c:	200f883a 	mov	r7,r4
  811da0:	10000526 	beq	r2,zero,811db8 <__sinit+0x44>
  811da4:	dfc00217 	ldw	ra,8(sp)
  811da8:	dc400117 	ldw	r17,4(sp)
  811dac:	dc000017 	ldw	r16,0(sp)
  811db0:	dec00304 	addi	sp,sp,12
  811db4:	f800283a 	ret
  811db8:	21000117 	ldw	r4,4(r4)
  811dbc:	00802074 	movhi	r2,129
  811dc0:	10879604 	addi	r2,r2,7768
  811dc4:	00c000c4 	movi	r3,3
  811dc8:	80800f15 	stw	r2,60(r16)
  811dcc:	80c0b915 	stw	r3,740(r16)
  811dd0:	8200ba15 	stw	r8,744(r16)
  811dd4:	84400e15 	stw	r17,56(r16)
  811dd8:	8000b815 	stw	zero,736(r16)
  811ddc:	0811d0c0 	call	811d0c <std>
  811de0:	81000217 	ldw	r4,8(r16)
  811de4:	880d883a 	mov	r6,r17
  811de8:	800f883a 	mov	r7,r16
  811dec:	01400284 	movi	r5,10
  811df0:	0811d0c0 	call	811d0c <std>
  811df4:	81000317 	ldw	r4,12(r16)
  811df8:	800f883a 	mov	r7,r16
  811dfc:	01400484 	movi	r5,18
  811e00:	01800084 	movi	r6,2
  811e04:	dfc00217 	ldw	ra,8(sp)
  811e08:	dc400117 	ldw	r17,4(sp)
  811e0c:	dc000017 	ldw	r16,0(sp)
  811e10:	dec00304 	addi	sp,sp,12
  811e14:	0811d0c1 	jmpi	811d0c <std>

00811e18 <__fp_lock>:
  811e18:	0005883a 	mov	r2,zero
  811e1c:	f800283a 	ret

00811e20 <__fp_unlock>:
  811e20:	0005883a 	mov	r2,zero
  811e24:	f800283a 	ret

00811e28 <__fp_unlock_all>:
  811e28:	008020b4 	movhi	r2,130
  811e2c:	108e6f04 	addi	r2,r2,14780
  811e30:	11000017 	ldw	r4,0(r2)
  811e34:	01402074 	movhi	r5,129
  811e38:	29478804 	addi	r5,r5,7712
  811e3c:	08129a41 	jmpi	8129a4 <_fwalk>

00811e40 <__fp_lock_all>:
  811e40:	008020b4 	movhi	r2,130
  811e44:	108e6f04 	addi	r2,r2,14780
  811e48:	11000017 	ldw	r4,0(r2)
  811e4c:	01402074 	movhi	r5,129
  811e50:	29478604 	addi	r5,r5,7704
  811e54:	08129a41 	jmpi	8129a4 <_fwalk>

00811e58 <_cleanup_r>:
  811e58:	01402074 	movhi	r5,129
  811e5c:	29512904 	addi	r5,r5,17572
  811e60:	08129a41 	jmpi	8129a4 <_fwalk>

00811e64 <_cleanup>:
  811e64:	008020b4 	movhi	r2,130
  811e68:	108e7004 	addi	r2,r2,14784
  811e6c:	11000017 	ldw	r4,0(r2)
  811e70:	0811e581 	jmpi	811e58 <_cleanup_r>

00811e74 <__sfmoreglue>:
  811e74:	defffc04 	addi	sp,sp,-16
  811e78:	dc000015 	stw	r16,0(sp)
  811e7c:	2821883a 	mov	r16,r5
  811e80:	dc400115 	stw	r17,4(sp)
  811e84:	01401704 	movi	r5,92
  811e88:	2023883a 	mov	r17,r4
  811e8c:	8009883a 	mov	r4,r16
  811e90:	dfc00315 	stw	ra,12(sp)
  811e94:	dcc00215 	stw	r19,8(sp)
  811e98:	080c90c0 	call	80c90c <__mulsi3>
  811e9c:	11400304 	addi	r5,r2,12
  811ea0:	8809883a 	mov	r4,r17
  811ea4:	1027883a 	mov	r19,r2
  811ea8:	080d2600 	call	80d260 <_malloc_r>
  811eac:	10c00304 	addi	r3,r2,12
  811eb0:	1023883a 	mov	r17,r2
  811eb4:	1809883a 	mov	r4,r3
  811eb8:	980d883a 	mov	r6,r19
  811ebc:	000b883a 	mov	r5,zero
  811ec0:	10000b26 	beq	r2,zero,811ef0 <__sfmoreglue+0x7c>
  811ec4:	14000115 	stw	r16,4(r2)
  811ec8:	10c00215 	stw	r3,8(r2)
  811ecc:	10000015 	stw	zero,0(r2)
  811ed0:	0812e780 	call	812e78 <memset>
  811ed4:	8805883a 	mov	r2,r17
  811ed8:	dfc00317 	ldw	ra,12(sp)
  811edc:	dcc00217 	ldw	r19,8(sp)
  811ee0:	dc400117 	ldw	r17,4(sp)
  811ee4:	dc000017 	ldw	r16,0(sp)
  811ee8:	dec00404 	addi	sp,sp,16
  811eec:	f800283a 	ret
  811ef0:	0023883a 	mov	r17,zero
  811ef4:	8805883a 	mov	r2,r17
  811ef8:	dfc00317 	ldw	ra,12(sp)
  811efc:	dcc00217 	ldw	r19,8(sp)
  811f00:	dc400117 	ldw	r17,4(sp)
  811f04:	dc000017 	ldw	r16,0(sp)
  811f08:	dec00404 	addi	sp,sp,16
  811f0c:	f800283a 	ret

00811f10 <__sfp>:
  811f10:	defffd04 	addi	sp,sp,-12
  811f14:	008020b4 	movhi	r2,130
  811f18:	108e7004 	addi	r2,r2,14784
  811f1c:	dc000015 	stw	r16,0(sp)
  811f20:	14000017 	ldw	r16,0(r2)
  811f24:	dc400115 	stw	r17,4(sp)
  811f28:	dfc00215 	stw	ra,8(sp)
  811f2c:	80800e17 	ldw	r2,56(r16)
  811f30:	2023883a 	mov	r17,r4
  811f34:	10002626 	beq	r2,zero,811fd0 <__sfp+0xc0>
  811f38:	8400b804 	addi	r16,r16,736
  811f3c:	80800117 	ldw	r2,4(r16)
  811f40:	81000217 	ldw	r4,8(r16)
  811f44:	10ffffc4 	addi	r3,r2,-1
  811f48:	18000916 	blt	r3,zero,811f70 <__sfp+0x60>
  811f4c:	2080030f 	ldh	r2,12(r4)
  811f50:	10000b26 	beq	r2,zero,811f80 <__sfp+0x70>
  811f54:	017fffc4 	movi	r5,-1
  811f58:	00000206 	br	811f64 <__sfp+0x54>
  811f5c:	2080030f 	ldh	r2,12(r4)
  811f60:	10000726 	beq	r2,zero,811f80 <__sfp+0x70>
  811f64:	18ffffc4 	addi	r3,r3,-1
  811f68:	21001704 	addi	r4,r4,92
  811f6c:	197ffb1e 	bne	r3,r5,811f5c <__sfp+0x4c>
  811f70:	80800017 	ldw	r2,0(r16)
  811f74:	10001926 	beq	r2,zero,811fdc <__sfp+0xcc>
  811f78:	1021883a 	mov	r16,r2
  811f7c:	003fef06 	br	811f3c <__sfp+0x2c>
  811f80:	00bfffc4 	movi	r2,-1
  811f84:	00c00044 	movi	r3,1
  811f88:	2080038d 	sth	r2,14(r4)
  811f8c:	20c0030d 	sth	r3,12(r4)
  811f90:	20000015 	stw	zero,0(r4)
  811f94:	20000215 	stw	zero,8(r4)
  811f98:	20000115 	stw	zero,4(r4)
  811f9c:	20000415 	stw	zero,16(r4)
  811fa0:	20000515 	stw	zero,20(r4)
  811fa4:	20000615 	stw	zero,24(r4)
  811fa8:	20000c15 	stw	zero,48(r4)
  811fac:	20000d15 	stw	zero,52(r4)
  811fb0:	20001115 	stw	zero,68(r4)
  811fb4:	20001215 	stw	zero,72(r4)
  811fb8:	2005883a 	mov	r2,r4
  811fbc:	dfc00217 	ldw	ra,8(sp)
  811fc0:	dc400117 	ldw	r17,4(sp)
  811fc4:	dc000017 	ldw	r16,0(sp)
  811fc8:	dec00304 	addi	sp,sp,12
  811fcc:	f800283a 	ret
  811fd0:	8009883a 	mov	r4,r16
  811fd4:	0811d740 	call	811d74 <__sinit>
  811fd8:	003fd706 	br	811f38 <__sfp+0x28>
  811fdc:	8809883a 	mov	r4,r17
  811fe0:	01400104 	movi	r5,4
  811fe4:	0811e740 	call	811e74 <__sfmoreglue>
  811fe8:	80800015 	stw	r2,0(r16)
  811fec:	103fe21e 	bne	r2,zero,811f78 <__sfp+0x68>
  811ff0:	00800304 	movi	r2,12
  811ff4:	0009883a 	mov	r4,zero
  811ff8:	88800015 	stw	r2,0(r17)
  811ffc:	003fee06 	br	811fb8 <__sfp+0xa8>

00812000 <_malloc_trim_r>:
  812000:	defffb04 	addi	sp,sp,-20
  812004:	dcc00315 	stw	r19,12(sp)
  812008:	04c020b4 	movhi	r19,130
  81200c:	9cc8ce04 	addi	r19,r19,9016
  812010:	dc800215 	stw	r18,8(sp)
  812014:	dc400115 	stw	r17,4(sp)
  812018:	dc000015 	stw	r16,0(sp)
  81201c:	2823883a 	mov	r17,r5
  812020:	2025883a 	mov	r18,r4
  812024:	dfc00415 	stw	ra,16(sp)
  812028:	08162140 	call	816214 <__malloc_lock>
  81202c:	98800217 	ldw	r2,8(r19)
  812030:	9009883a 	mov	r4,r18
  812034:	000b883a 	mov	r5,zero
  812038:	10c00117 	ldw	r3,4(r2)
  81203c:	00bfff04 	movi	r2,-4
  812040:	18a0703a 	and	r16,r3,r2
  812044:	8463c83a 	sub	r17,r16,r17
  812048:	8c43fbc4 	addi	r17,r17,4079
  81204c:	8822d33a 	srli	r17,r17,12
  812050:	0083ffc4 	movi	r2,4095
  812054:	8c7fffc4 	addi	r17,r17,-1
  812058:	8822933a 	slli	r17,r17,12
  81205c:	1440060e 	bge	r2,r17,812078 <_malloc_trim_r+0x78>
  812060:	080e17c0 	call	80e17c <_sbrk_r>
  812064:	98c00217 	ldw	r3,8(r19)
  812068:	9009883a 	mov	r4,r18
  81206c:	044bc83a 	sub	r5,zero,r17
  812070:	80c7883a 	add	r3,r16,r3
  812074:	10c00926 	beq	r2,r3,81209c <_malloc_trim_r+0x9c>
  812078:	081631c0 	call	81631c <__malloc_unlock>
  81207c:	0005883a 	mov	r2,zero
  812080:	dfc00417 	ldw	ra,16(sp)
  812084:	dcc00317 	ldw	r19,12(sp)
  812088:	dc800217 	ldw	r18,8(sp)
  81208c:	dc400117 	ldw	r17,4(sp)
  812090:	dc000017 	ldw	r16,0(sp)
  812094:	dec00504 	addi	sp,sp,20
  812098:	f800283a 	ret
  81209c:	9009883a 	mov	r4,r18
  8120a0:	080e17c0 	call	80e17c <_sbrk_r>
  8120a4:	844dc83a 	sub	r6,r16,r17
  8120a8:	00ffffc4 	movi	r3,-1
  8120ac:	9009883a 	mov	r4,r18
  8120b0:	000b883a 	mov	r5,zero
  8120b4:	01c020b4 	movhi	r7,130
  8120b8:	39d59604 	addi	r7,r7,22104
  8120bc:	31800054 	ori	r6,r6,1
  8120c0:	10c00926 	beq	r2,r3,8120e8 <_malloc_trim_r+0xe8>
  8120c4:	38800017 	ldw	r2,0(r7)
  8120c8:	98c00217 	ldw	r3,8(r19)
  8120cc:	9009883a 	mov	r4,r18
  8120d0:	1445c83a 	sub	r2,r2,r17
  8120d4:	38800015 	stw	r2,0(r7)
  8120d8:	19800115 	stw	r6,4(r3)
  8120dc:	081631c0 	call	81631c <__malloc_unlock>
  8120e0:	00800044 	movi	r2,1
  8120e4:	003fe606 	br	812080 <_malloc_trim_r+0x80>
  8120e8:	080e17c0 	call	80e17c <_sbrk_r>
  8120ec:	99800217 	ldw	r6,8(r19)
  8120f0:	100f883a 	mov	r7,r2
  8120f4:	9009883a 	mov	r4,r18
  8120f8:	1187c83a 	sub	r3,r2,r6
  8120fc:	008003c4 	movi	r2,15
  812100:	19400054 	ori	r5,r3,1
  812104:	10ffdc0e 	bge	r2,r3,812078 <_malloc_trim_r+0x78>
  812108:	008020b4 	movhi	r2,130
  81210c:	108e7204 	addi	r2,r2,14792
  812110:	10c00017 	ldw	r3,0(r2)
  812114:	008020b4 	movhi	r2,130
  812118:	10959604 	addi	r2,r2,22104
  81211c:	31400115 	stw	r5,4(r6)
  812120:	38c7c83a 	sub	r3,r7,r3
  812124:	10c00015 	stw	r3,0(r2)
  812128:	003fd306 	br	812078 <_malloc_trim_r+0x78>

0081212c <_free_r>:
  81212c:	defffd04 	addi	sp,sp,-12
  812130:	dc400115 	stw	r17,4(sp)
  812134:	dc000015 	stw	r16,0(sp)
  812138:	dfc00215 	stw	ra,8(sp)
  81213c:	2821883a 	mov	r16,r5
  812140:	2023883a 	mov	r17,r4
  812144:	28005a26 	beq	r5,zero,8122b0 <_free_r+0x184>
  812148:	08162140 	call	816214 <__malloc_lock>
  81214c:	823ffe04 	addi	r8,r16,-8
  812150:	41400117 	ldw	r5,4(r8)
  812154:	00bfff84 	movi	r2,-2
  812158:	028020b4 	movhi	r10,130
  81215c:	5288ce04 	addi	r10,r10,9016
  812160:	288e703a 	and	r7,r5,r2
  812164:	41cd883a 	add	r6,r8,r7
  812168:	30c00117 	ldw	r3,4(r6)
  81216c:	51000217 	ldw	r4,8(r10)
  812170:	00bfff04 	movi	r2,-4
  812174:	1892703a 	and	r9,r3,r2
  812178:	5017883a 	mov	r11,r10
  81217c:	31006726 	beq	r6,r4,81231c <_free_r+0x1f0>
  812180:	2880004c 	andi	r2,r5,1
  812184:	1005003a 	cmpeq	r2,r2,zero
  812188:	32400115 	stw	r9,4(r6)
  81218c:	10001a1e 	bne	r2,zero,8121f8 <_free_r+0xcc>
  812190:	000b883a 	mov	r5,zero
  812194:	3247883a 	add	r3,r6,r9
  812198:	18800117 	ldw	r2,4(r3)
  81219c:	1080004c 	andi	r2,r2,1
  8121a0:	1000231e 	bne	r2,zero,812230 <_free_r+0x104>
  8121a4:	280ac03a 	cmpne	r5,r5,zero
  8121a8:	3a4f883a 	add	r7,r7,r9
  8121ac:	2800451e 	bne	r5,zero,8122c4 <_free_r+0x198>
  8121b0:	31000217 	ldw	r4,8(r6)
  8121b4:	008020b4 	movhi	r2,130
  8121b8:	1088d004 	addi	r2,r2,9024
  8121bc:	20807b26 	beq	r4,r2,8123ac <_free_r+0x280>
  8121c0:	30800317 	ldw	r2,12(r6)
  8121c4:	3a07883a 	add	r3,r7,r8
  8121c8:	19c00015 	stw	r7,0(r3)
  8121cc:	11000215 	stw	r4,8(r2)
  8121d0:	20800315 	stw	r2,12(r4)
  8121d4:	38800054 	ori	r2,r7,1
  8121d8:	40800115 	stw	r2,4(r8)
  8121dc:	28001a26 	beq	r5,zero,812248 <_free_r+0x11c>
  8121e0:	8809883a 	mov	r4,r17
  8121e4:	dfc00217 	ldw	ra,8(sp)
  8121e8:	dc400117 	ldw	r17,4(sp)
  8121ec:	dc000017 	ldw	r16,0(sp)
  8121f0:	dec00304 	addi	sp,sp,12
  8121f4:	081631c1 	jmpi	81631c <__malloc_unlock>
  8121f8:	80bffe17 	ldw	r2,-8(r16)
  8121fc:	50c00204 	addi	r3,r10,8
  812200:	4091c83a 	sub	r8,r8,r2
  812204:	41000217 	ldw	r4,8(r8)
  812208:	388f883a 	add	r7,r7,r2
  81220c:	20c06126 	beq	r4,r3,812394 <_free_r+0x268>
  812210:	40800317 	ldw	r2,12(r8)
  812214:	3247883a 	add	r3,r6,r9
  812218:	000b883a 	mov	r5,zero
  81221c:	11000215 	stw	r4,8(r2)
  812220:	20800315 	stw	r2,12(r4)
  812224:	18800117 	ldw	r2,4(r3)
  812228:	1080004c 	andi	r2,r2,1
  81222c:	103fdd26 	beq	r2,zero,8121a4 <_free_r+0x78>
  812230:	38800054 	ori	r2,r7,1
  812234:	3a07883a 	add	r3,r7,r8
  812238:	280ac03a 	cmpne	r5,r5,zero
  81223c:	40800115 	stw	r2,4(r8)
  812240:	19c00015 	stw	r7,0(r3)
  812244:	283fe61e 	bne	r5,zero,8121e0 <_free_r+0xb4>
  812248:	00807fc4 	movi	r2,511
  81224c:	11c01f2e 	bgeu	r2,r7,8122cc <_free_r+0x1a0>
  812250:	3806d27a 	srli	r3,r7,9
  812254:	1800481e 	bne	r3,zero,812378 <_free_r+0x24c>
  812258:	3804d0fa 	srli	r2,r7,3
  81225c:	100690fa 	slli	r3,r2,3
  812260:	1acd883a 	add	r6,r3,r11
  812264:	31400217 	ldw	r5,8(r6)
  812268:	31405926 	beq	r6,r5,8123d0 <_free_r+0x2a4>
  81226c:	28800117 	ldw	r2,4(r5)
  812270:	00ffff04 	movi	r3,-4
  812274:	10c4703a 	and	r2,r2,r3
  812278:	3880022e 	bgeu	r7,r2,812284 <_free_r+0x158>
  81227c:	29400217 	ldw	r5,8(r5)
  812280:	317ffa1e 	bne	r6,r5,81226c <_free_r+0x140>
  812284:	29800317 	ldw	r6,12(r5)
  812288:	41800315 	stw	r6,12(r8)
  81228c:	41400215 	stw	r5,8(r8)
  812290:	8809883a 	mov	r4,r17
  812294:	2a000315 	stw	r8,12(r5)
  812298:	32000215 	stw	r8,8(r6)
  81229c:	dfc00217 	ldw	ra,8(sp)
  8122a0:	dc400117 	ldw	r17,4(sp)
  8122a4:	dc000017 	ldw	r16,0(sp)
  8122a8:	dec00304 	addi	sp,sp,12
  8122ac:	081631c1 	jmpi	81631c <__malloc_unlock>
  8122b0:	dfc00217 	ldw	ra,8(sp)
  8122b4:	dc400117 	ldw	r17,4(sp)
  8122b8:	dc000017 	ldw	r16,0(sp)
  8122bc:	dec00304 	addi	sp,sp,12
  8122c0:	f800283a 	ret
  8122c4:	31000217 	ldw	r4,8(r6)
  8122c8:	003fbd06 	br	8121c0 <_free_r+0x94>
  8122cc:	3806d0fa 	srli	r3,r7,3
  8122d0:	00800044 	movi	r2,1
  8122d4:	51400117 	ldw	r5,4(r10)
  8122d8:	180890fa 	slli	r4,r3,3
  8122dc:	1807d0ba 	srai	r3,r3,2
  8122e0:	22c9883a 	add	r4,r4,r11
  8122e4:	21800217 	ldw	r6,8(r4)
  8122e8:	10c4983a 	sll	r2,r2,r3
  8122ec:	41000315 	stw	r4,12(r8)
  8122f0:	41800215 	stw	r6,8(r8)
  8122f4:	288ab03a 	or	r5,r5,r2
  8122f8:	22000215 	stw	r8,8(r4)
  8122fc:	8809883a 	mov	r4,r17
  812300:	51400115 	stw	r5,4(r10)
  812304:	32000315 	stw	r8,12(r6)
  812308:	dfc00217 	ldw	ra,8(sp)
  81230c:	dc400117 	ldw	r17,4(sp)
  812310:	dc000017 	ldw	r16,0(sp)
  812314:	dec00304 	addi	sp,sp,12
  812318:	081631c1 	jmpi	81631c <__malloc_unlock>
  81231c:	2880004c 	andi	r2,r5,1
  812320:	3a4d883a 	add	r6,r7,r9
  812324:	1000071e 	bne	r2,zero,812344 <_free_r+0x218>
  812328:	80bffe17 	ldw	r2,-8(r16)
  81232c:	4091c83a 	sub	r8,r8,r2
  812330:	41000317 	ldw	r4,12(r8)
  812334:	40c00217 	ldw	r3,8(r8)
  812338:	308d883a 	add	r6,r6,r2
  81233c:	20c00215 	stw	r3,8(r4)
  812340:	19000315 	stw	r4,12(r3)
  812344:	008020b4 	movhi	r2,130
  812348:	108e7104 	addi	r2,r2,14788
  81234c:	11000017 	ldw	r4,0(r2)
  812350:	30c00054 	ori	r3,r6,1
  812354:	52000215 	stw	r8,8(r10)
  812358:	40c00115 	stw	r3,4(r8)
  81235c:	313fa036 	bltu	r6,r4,8121e0 <_free_r+0xb4>
  812360:	008020b4 	movhi	r2,130
  812364:	10957004 	addi	r2,r2,21952
  812368:	11400017 	ldw	r5,0(r2)
  81236c:	8809883a 	mov	r4,r17
  812370:	08120000 	call	812000 <_malloc_trim_r>
  812374:	003f9a06 	br	8121e0 <_free_r+0xb4>
  812378:	00800104 	movi	r2,4
  81237c:	10c0072e 	bgeu	r2,r3,81239c <_free_r+0x270>
  812380:	00800504 	movi	r2,20
  812384:	10c01936 	bltu	r2,r3,8123ec <_free_r+0x2c0>
  812388:	188016c4 	addi	r2,r3,91
  81238c:	100690fa 	slli	r3,r2,3
  812390:	003fb306 	br	812260 <_free_r+0x134>
  812394:	01400044 	movi	r5,1
  812398:	003f7e06 	br	812194 <_free_r+0x68>
  81239c:	3804d1ba 	srli	r2,r7,6
  8123a0:	10800e04 	addi	r2,r2,56
  8123a4:	100690fa 	slli	r3,r2,3
  8123a8:	003fad06 	br	812260 <_free_r+0x134>
  8123ac:	22000315 	stw	r8,12(r4)
  8123b0:	22000215 	stw	r8,8(r4)
  8123b4:	3a05883a 	add	r2,r7,r8
  8123b8:	38c00054 	ori	r3,r7,1
  8123bc:	11c00015 	stw	r7,0(r2)
  8123c0:	41000215 	stw	r4,8(r8)
  8123c4:	40c00115 	stw	r3,4(r8)
  8123c8:	41000315 	stw	r4,12(r8)
  8123cc:	003f8406 	br	8121e0 <_free_r+0xb4>
  8123d0:	1005d0ba 	srai	r2,r2,2
  8123d4:	00c00044 	movi	r3,1
  8123d8:	51000117 	ldw	r4,4(r10)
  8123dc:	1886983a 	sll	r3,r3,r2
  8123e0:	20c8b03a 	or	r4,r4,r3
  8123e4:	51000115 	stw	r4,4(r10)
  8123e8:	003fa706 	br	812288 <_free_r+0x15c>
  8123ec:	00801504 	movi	r2,84
  8123f0:	10c00436 	bltu	r2,r3,812404 <_free_r+0x2d8>
  8123f4:	3804d33a 	srli	r2,r7,12
  8123f8:	10801b84 	addi	r2,r2,110
  8123fc:	100690fa 	slli	r3,r2,3
  812400:	003f9706 	br	812260 <_free_r+0x134>
  812404:	00805504 	movi	r2,340
  812408:	10c00436 	bltu	r2,r3,81241c <_free_r+0x2f0>
  81240c:	3804d3fa 	srli	r2,r7,15
  812410:	10801dc4 	addi	r2,r2,119
  812414:	100690fa 	slli	r3,r2,3
  812418:	003f9106 	br	812260 <_free_r+0x134>
  81241c:	00815504 	movi	r2,1364
  812420:	10c0032e 	bgeu	r2,r3,812430 <_free_r+0x304>
  812424:	00801f84 	movi	r2,126
  812428:	00c0fc04 	movi	r3,1008
  81242c:	003f8c06 	br	812260 <_free_r+0x134>
  812430:	3804d4ba 	srli	r2,r7,18
  812434:	10801f04 	addi	r2,r2,124
  812438:	100690fa 	slli	r3,r2,3
  81243c:	003f8806 	br	812260 <_free_r+0x134>

00812440 <__sfvwrite_r>:
  812440:	30800217 	ldw	r2,8(r6)
  812444:	defff504 	addi	sp,sp,-44
  812448:	df000915 	stw	fp,36(sp)
  81244c:	dd800715 	stw	r22,28(sp)
  812450:	dc800315 	stw	r18,12(sp)
  812454:	dfc00a15 	stw	ra,40(sp)
  812458:	ddc00815 	stw	r23,32(sp)
  81245c:	dd400615 	stw	r21,24(sp)
  812460:	dd000515 	stw	r20,20(sp)
  812464:	dcc00415 	stw	r19,16(sp)
  812468:	dc400215 	stw	r17,8(sp)
  81246c:	dc000115 	stw	r16,4(sp)
  812470:	302d883a 	mov	r22,r6
  812474:	2039883a 	mov	fp,r4
  812478:	2825883a 	mov	r18,r5
  81247c:	10001c26 	beq	r2,zero,8124f0 <__sfvwrite_r+0xb0>
  812480:	29c0030b 	ldhu	r7,12(r5)
  812484:	3880020c 	andi	r2,r7,8
  812488:	10002726 	beq	r2,zero,812528 <__sfvwrite_r+0xe8>
  81248c:	28800417 	ldw	r2,16(r5)
  812490:	10002526 	beq	r2,zero,812528 <__sfvwrite_r+0xe8>
  812494:	3880008c 	andi	r2,r7,2
  812498:	b5400017 	ldw	r21,0(r22)
  81249c:	10002826 	beq	r2,zero,812540 <__sfvwrite_r+0x100>
  8124a0:	0021883a 	mov	r16,zero
  8124a4:	0023883a 	mov	r17,zero
  8124a8:	880d883a 	mov	r6,r17
  8124ac:	e009883a 	mov	r4,fp
  8124b0:	00810004 	movi	r2,1024
  8124b4:	80006e26 	beq	r16,zero,812670 <__sfvwrite_r+0x230>
  8124b8:	800f883a 	mov	r7,r16
  8124bc:	91400717 	ldw	r5,28(r18)
  8124c0:	1400012e 	bgeu	r2,r16,8124c8 <__sfvwrite_r+0x88>
  8124c4:	100f883a 	mov	r7,r2
  8124c8:	90c00917 	ldw	r3,36(r18)
  8124cc:	183ee83a 	callr	r3
  8124d0:	1007883a 	mov	r3,r2
  8124d4:	80a1c83a 	sub	r16,r16,r2
  8124d8:	88a3883a 	add	r17,r17,r2
  8124dc:	00806d0e 	bge	zero,r2,812694 <__sfvwrite_r+0x254>
  8124e0:	b0800217 	ldw	r2,8(r22)
  8124e4:	10c5c83a 	sub	r2,r2,r3
  8124e8:	b0800215 	stw	r2,8(r22)
  8124ec:	103fee1e 	bne	r2,zero,8124a8 <__sfvwrite_r+0x68>
  8124f0:	0009883a 	mov	r4,zero
  8124f4:	2005883a 	mov	r2,r4
  8124f8:	dfc00a17 	ldw	ra,40(sp)
  8124fc:	df000917 	ldw	fp,36(sp)
  812500:	ddc00817 	ldw	r23,32(sp)
  812504:	dd800717 	ldw	r22,28(sp)
  812508:	dd400617 	ldw	r21,24(sp)
  81250c:	dd000517 	ldw	r20,20(sp)
  812510:	dcc00417 	ldw	r19,16(sp)
  812514:	dc800317 	ldw	r18,12(sp)
  812518:	dc400217 	ldw	r17,8(sp)
  81251c:	dc000117 	ldw	r16,4(sp)
  812520:	dec00b04 	addi	sp,sp,44
  812524:	f800283a 	ret
  812528:	08101a80 	call	8101a8 <__swsetup_r>
  81252c:	1000e41e 	bne	r2,zero,8128c0 <__sfvwrite_r+0x480>
  812530:	91c0030b 	ldhu	r7,12(r18)
  812534:	b5400017 	ldw	r21,0(r22)
  812538:	3880008c 	andi	r2,r7,2
  81253c:	103fd81e 	bne	r2,zero,8124a0 <__sfvwrite_r+0x60>
  812540:	3880004c 	andi	r2,r7,1
  812544:	1005003a 	cmpeq	r2,r2,zero
  812548:	10005726 	beq	r2,zero,8126a8 <__sfvwrite_r+0x268>
  81254c:	0029883a 	mov	r20,zero
  812550:	002f883a 	mov	r23,zero
  812554:	a0004226 	beq	r20,zero,812660 <__sfvwrite_r+0x220>
  812558:	3880800c 	andi	r2,r7,512
  81255c:	94000217 	ldw	r16,8(r18)
  812560:	10008b26 	beq	r2,zero,812790 <__sfvwrite_r+0x350>
  812564:	800d883a 	mov	r6,r16
  812568:	a400a536 	bltu	r20,r16,812800 <__sfvwrite_r+0x3c0>
  81256c:	3881200c 	andi	r2,r7,1152
  812570:	10002726 	beq	r2,zero,812610 <__sfvwrite_r+0x1d0>
  812574:	90800517 	ldw	r2,20(r18)
  812578:	92000417 	ldw	r8,16(r18)
  81257c:	91400017 	ldw	r5,0(r18)
  812580:	1087883a 	add	r3,r2,r2
  812584:	1887883a 	add	r3,r3,r2
  812588:	1808d7fa 	srli	r4,r3,31
  81258c:	2a21c83a 	sub	r16,r5,r8
  812590:	80800044 	addi	r2,r16,1
  812594:	20c9883a 	add	r4,r4,r3
  812598:	2027d07a 	srai	r19,r4,1
  81259c:	a085883a 	add	r2,r20,r2
  8125a0:	980d883a 	mov	r6,r19
  8125a4:	9880022e 	bgeu	r19,r2,8125b0 <__sfvwrite_r+0x170>
  8125a8:	1027883a 	mov	r19,r2
  8125ac:	100d883a 	mov	r6,r2
  8125b0:	3881000c 	andi	r2,r7,1024
  8125b4:	1000b826 	beq	r2,zero,812898 <__sfvwrite_r+0x458>
  8125b8:	300b883a 	mov	r5,r6
  8125bc:	e009883a 	mov	r4,fp
  8125c0:	080d2600 	call	80d260 <_malloc_r>
  8125c4:	10003126 	beq	r2,zero,81268c <__sfvwrite_r+0x24c>
  8125c8:	91400417 	ldw	r5,16(r18)
  8125cc:	1009883a 	mov	r4,r2
  8125d0:	800d883a 	mov	r6,r16
  8125d4:	1023883a 	mov	r17,r2
  8125d8:	080d9a00 	call	80d9a0 <memcpy>
  8125dc:	90c0030b 	ldhu	r3,12(r18)
  8125e0:	00beffc4 	movi	r2,-1025
  8125e4:	1886703a 	and	r3,r3,r2
  8125e8:	18c02014 	ori	r3,r3,128
  8125ec:	90c0030d 	sth	r3,12(r18)
  8125f0:	9c07c83a 	sub	r3,r19,r16
  8125f4:	8c05883a 	add	r2,r17,r16
  8125f8:	a00d883a 	mov	r6,r20
  8125fc:	a021883a 	mov	r16,r20
  812600:	90800015 	stw	r2,0(r18)
  812604:	90c00215 	stw	r3,8(r18)
  812608:	94400415 	stw	r17,16(r18)
  81260c:	94c00515 	stw	r19,20(r18)
  812610:	91000017 	ldw	r4,0(r18)
  812614:	b80b883a 	mov	r5,r23
  812618:	a023883a 	mov	r17,r20
  81261c:	0812d980 	call	812d98 <memmove>
  812620:	90c00217 	ldw	r3,8(r18)
  812624:	90800017 	ldw	r2,0(r18)
  812628:	a027883a 	mov	r19,r20
  81262c:	1c07c83a 	sub	r3,r3,r16
  812630:	1405883a 	add	r2,r2,r16
  812634:	90c00215 	stw	r3,8(r18)
  812638:	a021883a 	mov	r16,r20
  81263c:	90800015 	stw	r2,0(r18)
  812640:	b0800217 	ldw	r2,8(r22)
  812644:	1405c83a 	sub	r2,r2,r16
  812648:	b0800215 	stw	r2,8(r22)
  81264c:	103fa826 	beq	r2,zero,8124f0 <__sfvwrite_r+0xb0>
  812650:	a469c83a 	sub	r20,r20,r17
  812654:	91c0030b 	ldhu	r7,12(r18)
  812658:	bcef883a 	add	r23,r23,r19
  81265c:	a03fbe1e 	bne	r20,zero,812558 <__sfvwrite_r+0x118>
  812660:	adc00017 	ldw	r23,0(r21)
  812664:	ad000117 	ldw	r20,4(r21)
  812668:	ad400204 	addi	r21,r21,8
  81266c:	003fb906 	br	812554 <__sfvwrite_r+0x114>
  812670:	ac400017 	ldw	r17,0(r21)
  812674:	ac000117 	ldw	r16,4(r21)
  812678:	ad400204 	addi	r21,r21,8
  81267c:	003f8a06 	br	8124a8 <__sfvwrite_r+0x68>
  812680:	91400417 	ldw	r5,16(r18)
  812684:	e009883a 	mov	r4,fp
  812688:	081212c0 	call	81212c <_free_r>
  81268c:	00800304 	movi	r2,12
  812690:	e0800015 	stw	r2,0(fp)
  812694:	9080030b 	ldhu	r2,12(r18)
  812698:	013fffc4 	movi	r4,-1
  81269c:	10801014 	ori	r2,r2,64
  8126a0:	9080030d 	sth	r2,12(r18)
  8126a4:	003f9306 	br	8124f4 <__sfvwrite_r+0xb4>
  8126a8:	0027883a 	mov	r19,zero
  8126ac:	002f883a 	mov	r23,zero
  8126b0:	d8000015 	stw	zero,0(sp)
  8126b4:	0029883a 	mov	r20,zero
  8126b8:	98001e26 	beq	r19,zero,812734 <__sfvwrite_r+0x2f4>
  8126bc:	d8c00017 	ldw	r3,0(sp)
  8126c0:	1804c03a 	cmpne	r2,r3,zero
  8126c4:	10005e26 	beq	r2,zero,812840 <__sfvwrite_r+0x400>
  8126c8:	9821883a 	mov	r16,r19
  8126cc:	a4c0012e 	bgeu	r20,r19,8126d4 <__sfvwrite_r+0x294>
  8126d0:	a021883a 	mov	r16,r20
  8126d4:	91000017 	ldw	r4,0(r18)
  8126d8:	90800417 	ldw	r2,16(r18)
  8126dc:	91800217 	ldw	r6,8(r18)
  8126e0:	91c00517 	ldw	r7,20(r18)
  8126e4:	1100022e 	bgeu	r2,r4,8126f0 <__sfvwrite_r+0x2b0>
  8126e8:	31e3883a 	add	r17,r6,r7
  8126ec:	8c001616 	blt	r17,r16,812748 <__sfvwrite_r+0x308>
  8126f0:	81c03816 	blt	r16,r7,8127d4 <__sfvwrite_r+0x394>
  8126f4:	90c00917 	ldw	r3,36(r18)
  8126f8:	91400717 	ldw	r5,28(r18)
  8126fc:	e009883a 	mov	r4,fp
  812700:	b80d883a 	mov	r6,r23
  812704:	183ee83a 	callr	r3
  812708:	1023883a 	mov	r17,r2
  81270c:	00bfe10e 	bge	zero,r2,812694 <__sfvwrite_r+0x254>
  812710:	a469c83a 	sub	r20,r20,r17
  812714:	a0001826 	beq	r20,zero,812778 <__sfvwrite_r+0x338>
  812718:	b0800217 	ldw	r2,8(r22)
  81271c:	1445c83a 	sub	r2,r2,r17
  812720:	b0800215 	stw	r2,8(r22)
  812724:	103f7226 	beq	r2,zero,8124f0 <__sfvwrite_r+0xb0>
  812728:	9c67c83a 	sub	r19,r19,r17
  81272c:	bc6f883a 	add	r23,r23,r17
  812730:	983fe21e 	bne	r19,zero,8126bc <__sfvwrite_r+0x27c>
  812734:	adc00017 	ldw	r23,0(r21)
  812738:	acc00117 	ldw	r19,4(r21)
  81273c:	ad400204 	addi	r21,r21,8
  812740:	d8000015 	stw	zero,0(sp)
  812744:	003fdc06 	br	8126b8 <__sfvwrite_r+0x278>
  812748:	b80b883a 	mov	r5,r23
  81274c:	880d883a 	mov	r6,r17
  812750:	0812d980 	call	812d98 <memmove>
  812754:	90c00017 	ldw	r3,0(r18)
  812758:	e009883a 	mov	r4,fp
  81275c:	900b883a 	mov	r5,r18
  812760:	1c47883a 	add	r3,r3,r17
  812764:	90c00015 	stw	r3,0(r18)
  812768:	0811adc0 	call	811adc <_fflush_r>
  81276c:	103fc91e 	bne	r2,zero,812694 <__sfvwrite_r+0x254>
  812770:	a469c83a 	sub	r20,r20,r17
  812774:	a03fe81e 	bne	r20,zero,812718 <__sfvwrite_r+0x2d8>
  812778:	e009883a 	mov	r4,fp
  81277c:	900b883a 	mov	r5,r18
  812780:	0811adc0 	call	811adc <_fflush_r>
  812784:	103fc31e 	bne	r2,zero,812694 <__sfvwrite_r+0x254>
  812788:	d8000015 	stw	zero,0(sp)
  81278c:	003fe206 	br	812718 <__sfvwrite_r+0x2d8>
  812790:	91000017 	ldw	r4,0(r18)
  812794:	90800417 	ldw	r2,16(r18)
  812798:	1100022e 	bgeu	r2,r4,8127a4 <__sfvwrite_r+0x364>
  81279c:	8023883a 	mov	r17,r16
  8127a0:	85003136 	bltu	r16,r20,812868 <__sfvwrite_r+0x428>
  8127a4:	91c00517 	ldw	r7,20(r18)
  8127a8:	a1c01836 	bltu	r20,r7,81280c <__sfvwrite_r+0x3cc>
  8127ac:	90c00917 	ldw	r3,36(r18)
  8127b0:	91400717 	ldw	r5,28(r18)
  8127b4:	e009883a 	mov	r4,fp
  8127b8:	b80d883a 	mov	r6,r23
  8127bc:	183ee83a 	callr	r3
  8127c0:	1021883a 	mov	r16,r2
  8127c4:	00bfb30e 	bge	zero,r2,812694 <__sfvwrite_r+0x254>
  8127c8:	1023883a 	mov	r17,r2
  8127cc:	1027883a 	mov	r19,r2
  8127d0:	003f9b06 	br	812640 <__sfvwrite_r+0x200>
  8127d4:	b80b883a 	mov	r5,r23
  8127d8:	800d883a 	mov	r6,r16
  8127dc:	0812d980 	call	812d98 <memmove>
  8127e0:	90c00217 	ldw	r3,8(r18)
  8127e4:	90800017 	ldw	r2,0(r18)
  8127e8:	8023883a 	mov	r17,r16
  8127ec:	1c07c83a 	sub	r3,r3,r16
  8127f0:	1405883a 	add	r2,r2,r16
  8127f4:	90c00215 	stw	r3,8(r18)
  8127f8:	90800015 	stw	r2,0(r18)
  8127fc:	003fc406 	br	812710 <__sfvwrite_r+0x2d0>
  812800:	a00d883a 	mov	r6,r20
  812804:	a021883a 	mov	r16,r20
  812808:	003f8106 	br	812610 <__sfvwrite_r+0x1d0>
  81280c:	b80b883a 	mov	r5,r23
  812810:	a00d883a 	mov	r6,r20
  812814:	0812d980 	call	812d98 <memmove>
  812818:	90c00217 	ldw	r3,8(r18)
  81281c:	90800017 	ldw	r2,0(r18)
  812820:	a021883a 	mov	r16,r20
  812824:	1d07c83a 	sub	r3,r3,r20
  812828:	1505883a 	add	r2,r2,r20
  81282c:	a023883a 	mov	r17,r20
  812830:	a027883a 	mov	r19,r20
  812834:	90c00215 	stw	r3,8(r18)
  812838:	90800015 	stw	r2,0(r18)
  81283c:	003f8006 	br	812640 <__sfvwrite_r+0x200>
  812840:	b809883a 	mov	r4,r23
  812844:	01400284 	movi	r5,10
  812848:	980d883a 	mov	r6,r19
  81284c:	0812cb40 	call	812cb4 <memchr>
  812850:	10001726 	beq	r2,zero,8128b0 <__sfvwrite_r+0x470>
  812854:	15c5c83a 	sub	r2,r2,r23
  812858:	15000044 	addi	r20,r2,1
  81285c:	00800044 	movi	r2,1
  812860:	d8800015 	stw	r2,0(sp)
  812864:	003f9806 	br	8126c8 <__sfvwrite_r+0x288>
  812868:	b80b883a 	mov	r5,r23
  81286c:	800d883a 	mov	r6,r16
  812870:	0812d980 	call	812d98 <memmove>
  812874:	90c00017 	ldw	r3,0(r18)
  812878:	e009883a 	mov	r4,fp
  81287c:	900b883a 	mov	r5,r18
  812880:	1c07883a 	add	r3,r3,r16
  812884:	90c00015 	stw	r3,0(r18)
  812888:	8027883a 	mov	r19,r16
  81288c:	0811adc0 	call	811adc <_fflush_r>
  812890:	103f6b26 	beq	r2,zero,812640 <__sfvwrite_r+0x200>
  812894:	003f7f06 	br	812694 <__sfvwrite_r+0x254>
  812898:	400b883a 	mov	r5,r8
  81289c:	e009883a 	mov	r4,fp
  8128a0:	080db880 	call	80db88 <_realloc_r>
  8128a4:	103f7626 	beq	r2,zero,812680 <__sfvwrite_r+0x240>
  8128a8:	1023883a 	mov	r17,r2
  8128ac:	003f5006 	br	8125f0 <__sfvwrite_r+0x1b0>
  8128b0:	00c00044 	movi	r3,1
  8128b4:	9d000044 	addi	r20,r19,1
  8128b8:	d8c00015 	stw	r3,0(sp)
  8128bc:	003f8206 	br	8126c8 <__sfvwrite_r+0x288>
  8128c0:	9080030b 	ldhu	r2,12(r18)
  8128c4:	00c00244 	movi	r3,9
  8128c8:	013fffc4 	movi	r4,-1
  8128cc:	10801014 	ori	r2,r2,64
  8128d0:	9080030d 	sth	r2,12(r18)
  8128d4:	e0c00015 	stw	r3,0(fp)
  8128d8:	003f0606 	br	8124f4 <__sfvwrite_r+0xb4>

008128dc <_fwalk_reent>:
  8128dc:	defff704 	addi	sp,sp,-36
  8128e0:	dcc00315 	stw	r19,12(sp)
  8128e4:	24c0b804 	addi	r19,r4,736
  8128e8:	dd800615 	stw	r22,24(sp)
  8128ec:	dd400515 	stw	r21,20(sp)
  8128f0:	dfc00815 	stw	ra,32(sp)
  8128f4:	ddc00715 	stw	r23,28(sp)
  8128f8:	dd000415 	stw	r20,16(sp)
  8128fc:	dc800215 	stw	r18,8(sp)
  812900:	dc400115 	stw	r17,4(sp)
  812904:	dc000015 	stw	r16,0(sp)
  812908:	202b883a 	mov	r21,r4
  81290c:	282d883a 	mov	r22,r5
  812910:	0811d640 	call	811d64 <__sfp_lock_acquire>
  812914:	98002126 	beq	r19,zero,81299c <_fwalk_reent+0xc0>
  812918:	002f883a 	mov	r23,zero
  81291c:	9c800117 	ldw	r18,4(r19)
  812920:	9c000217 	ldw	r16,8(r19)
  812924:	90bfffc4 	addi	r2,r18,-1
  812928:	10000d16 	blt	r2,zero,812960 <_fwalk_reent+0x84>
  81292c:	0023883a 	mov	r17,zero
  812930:	053fffc4 	movi	r20,-1
  812934:	8080030f 	ldh	r2,12(r16)
  812938:	8c400044 	addi	r17,r17,1
  81293c:	10000626 	beq	r2,zero,812958 <_fwalk_reent+0x7c>
  812940:	8080038f 	ldh	r2,14(r16)
  812944:	800b883a 	mov	r5,r16
  812948:	a809883a 	mov	r4,r21
  81294c:	15000226 	beq	r2,r20,812958 <_fwalk_reent+0x7c>
  812950:	b03ee83a 	callr	r22
  812954:	b8aeb03a 	or	r23,r23,r2
  812958:	84001704 	addi	r16,r16,92
  81295c:	947ff51e 	bne	r18,r17,812934 <_fwalk_reent+0x58>
  812960:	9cc00017 	ldw	r19,0(r19)
  812964:	983fed1e 	bne	r19,zero,81291c <_fwalk_reent+0x40>
  812968:	0811d680 	call	811d68 <__sfp_lock_release>
  81296c:	b805883a 	mov	r2,r23
  812970:	dfc00817 	ldw	ra,32(sp)
  812974:	ddc00717 	ldw	r23,28(sp)
  812978:	dd800617 	ldw	r22,24(sp)
  81297c:	dd400517 	ldw	r21,20(sp)
  812980:	dd000417 	ldw	r20,16(sp)
  812984:	dcc00317 	ldw	r19,12(sp)
  812988:	dc800217 	ldw	r18,8(sp)
  81298c:	dc400117 	ldw	r17,4(sp)
  812990:	dc000017 	ldw	r16,0(sp)
  812994:	dec00904 	addi	sp,sp,36
  812998:	f800283a 	ret
  81299c:	002f883a 	mov	r23,zero
  8129a0:	003ff106 	br	812968 <_fwalk_reent+0x8c>

008129a4 <_fwalk>:
  8129a4:	defff804 	addi	sp,sp,-32
  8129a8:	dcc00315 	stw	r19,12(sp)
  8129ac:	24c0b804 	addi	r19,r4,736
  8129b0:	dd400515 	stw	r21,20(sp)
  8129b4:	dfc00715 	stw	ra,28(sp)
  8129b8:	dd800615 	stw	r22,24(sp)
  8129bc:	dd000415 	stw	r20,16(sp)
  8129c0:	dc800215 	stw	r18,8(sp)
  8129c4:	dc400115 	stw	r17,4(sp)
  8129c8:	dc000015 	stw	r16,0(sp)
  8129cc:	282b883a 	mov	r21,r5
  8129d0:	0811d640 	call	811d64 <__sfp_lock_acquire>
  8129d4:	98001f26 	beq	r19,zero,812a54 <_fwalk+0xb0>
  8129d8:	002d883a 	mov	r22,zero
  8129dc:	9c800117 	ldw	r18,4(r19)
  8129e0:	9c000217 	ldw	r16,8(r19)
  8129e4:	90bfffc4 	addi	r2,r18,-1
  8129e8:	10000c16 	blt	r2,zero,812a1c <_fwalk+0x78>
  8129ec:	0023883a 	mov	r17,zero
  8129f0:	053fffc4 	movi	r20,-1
  8129f4:	8080030f 	ldh	r2,12(r16)
  8129f8:	8c400044 	addi	r17,r17,1
  8129fc:	10000526 	beq	r2,zero,812a14 <_fwalk+0x70>
  812a00:	8080038f 	ldh	r2,14(r16)
  812a04:	8009883a 	mov	r4,r16
  812a08:	15000226 	beq	r2,r20,812a14 <_fwalk+0x70>
  812a0c:	a83ee83a 	callr	r21
  812a10:	b0acb03a 	or	r22,r22,r2
  812a14:	84001704 	addi	r16,r16,92
  812a18:	947ff61e 	bne	r18,r17,8129f4 <_fwalk+0x50>
  812a1c:	9cc00017 	ldw	r19,0(r19)
  812a20:	983fee1e 	bne	r19,zero,8129dc <_fwalk+0x38>
  812a24:	0811d680 	call	811d68 <__sfp_lock_release>
  812a28:	b005883a 	mov	r2,r22
  812a2c:	dfc00717 	ldw	ra,28(sp)
  812a30:	dd800617 	ldw	r22,24(sp)
  812a34:	dd400517 	ldw	r21,20(sp)
  812a38:	dd000417 	ldw	r20,16(sp)
  812a3c:	dcc00317 	ldw	r19,12(sp)
  812a40:	dc800217 	ldw	r18,8(sp)
  812a44:	dc400117 	ldw	r17,4(sp)
  812a48:	dc000017 	ldw	r16,0(sp)
  812a4c:	dec00804 	addi	sp,sp,32
  812a50:	f800283a 	ret
  812a54:	002d883a 	mov	r22,zero
  812a58:	003ff206 	br	812a24 <_fwalk+0x80>

00812a5c <__locale_charset>:
  812a5c:	d0a00617 	ldw	r2,-32744(gp)
  812a60:	f800283a 	ret

00812a64 <_localeconv_r>:
  812a64:	008020b4 	movhi	r2,130
  812a68:	10871904 	addi	r2,r2,7268
  812a6c:	f800283a 	ret

00812a70 <localeconv>:
  812a70:	008020b4 	movhi	r2,130
  812a74:	108e6f04 	addi	r2,r2,14780
  812a78:	11000017 	ldw	r4,0(r2)
  812a7c:	0812a641 	jmpi	812a64 <_localeconv_r>

00812a80 <_setlocale_r>:
  812a80:	defffc04 	addi	sp,sp,-16
  812a84:	00c020b4 	movhi	r3,130
  812a88:	18c6f004 	addi	r3,r3,7104
  812a8c:	dc800215 	stw	r18,8(sp)
  812a90:	dc400115 	stw	r17,4(sp)
  812a94:	dc000015 	stw	r16,0(sp)
  812a98:	2023883a 	mov	r17,r4
  812a9c:	2825883a 	mov	r18,r5
  812aa0:	dfc00315 	stw	ra,12(sp)
  812aa4:	3021883a 	mov	r16,r6
  812aa8:	3009883a 	mov	r4,r6
  812aac:	180b883a 	mov	r5,r3
  812ab0:	30000926 	beq	r6,zero,812ad8 <_setlocale_r+0x58>
  812ab4:	08141280 	call	814128 <strcmp>
  812ab8:	8009883a 	mov	r4,r16
  812abc:	014020b4 	movhi	r5,130
  812ac0:	29470104 	addi	r5,r5,7172
  812ac4:	10000b1e 	bne	r2,zero,812af4 <_setlocale_r+0x74>
  812ac8:	8c000d15 	stw	r16,52(r17)
  812acc:	8c800c15 	stw	r18,48(r17)
  812ad0:	00c020b4 	movhi	r3,130
  812ad4:	18c6f004 	addi	r3,r3,7104
  812ad8:	1805883a 	mov	r2,r3
  812adc:	dfc00317 	ldw	ra,12(sp)
  812ae0:	dc800217 	ldw	r18,8(sp)
  812ae4:	dc400117 	ldw	r17,4(sp)
  812ae8:	dc000017 	ldw	r16,0(sp)
  812aec:	dec00404 	addi	sp,sp,16
  812af0:	f800283a 	ret
  812af4:	08141280 	call	814128 <strcmp>
  812af8:	0007883a 	mov	r3,zero
  812afc:	103ff226 	beq	r2,zero,812ac8 <_setlocale_r+0x48>
  812b00:	003ff506 	br	812ad8 <_setlocale_r+0x58>

00812b04 <setlocale>:
  812b04:	018020b4 	movhi	r6,130
  812b08:	318e6f04 	addi	r6,r6,14780
  812b0c:	2007883a 	mov	r3,r4
  812b10:	31000017 	ldw	r4,0(r6)
  812b14:	280d883a 	mov	r6,r5
  812b18:	180b883a 	mov	r5,r3
  812b1c:	0812a801 	jmpi	812a80 <_setlocale_r>

00812b20 <__smakebuf_r>:
  812b20:	2880030b 	ldhu	r2,12(r5)
  812b24:	deffed04 	addi	sp,sp,-76
  812b28:	dc401015 	stw	r17,64(sp)
  812b2c:	1080008c 	andi	r2,r2,2
  812b30:	dc000f15 	stw	r16,60(sp)
  812b34:	dfc01215 	stw	ra,72(sp)
  812b38:	dc801115 	stw	r18,68(sp)
  812b3c:	2821883a 	mov	r16,r5
  812b40:	2023883a 	mov	r17,r4
  812b44:	10000b26 	beq	r2,zero,812b74 <__smakebuf_r+0x54>
  812b48:	28c010c4 	addi	r3,r5,67
  812b4c:	00800044 	movi	r2,1
  812b50:	28800515 	stw	r2,20(r5)
  812b54:	28c00415 	stw	r3,16(r5)
  812b58:	28c00015 	stw	r3,0(r5)
  812b5c:	dfc01217 	ldw	ra,72(sp)
  812b60:	dc801117 	ldw	r18,68(sp)
  812b64:	dc401017 	ldw	r17,64(sp)
  812b68:	dc000f17 	ldw	r16,60(sp)
  812b6c:	dec01304 	addi	sp,sp,76
  812b70:	f800283a 	ret
  812b74:	2940038f 	ldh	r5,14(r5)
  812b78:	28002116 	blt	r5,zero,812c00 <__smakebuf_r+0xe0>
  812b7c:	d80d883a 	mov	r6,sp
  812b80:	08144b80 	call	8144b8 <_fstat_r>
  812b84:	10001e16 	blt	r2,zero,812c00 <__smakebuf_r+0xe0>
  812b88:	d8800117 	ldw	r2,4(sp)
  812b8c:	00e00014 	movui	r3,32768
  812b90:	113c000c 	andi	r4,r2,61440
  812b94:	20c03126 	beq	r4,r3,812c5c <__smakebuf_r+0x13c>
  812b98:	8080030b 	ldhu	r2,12(r16)
  812b9c:	00c80004 	movi	r3,8192
  812ba0:	10820014 	ori	r2,r2,2048
  812ba4:	8080030d 	sth	r2,12(r16)
  812ba8:	20c01e26 	beq	r4,r3,812c24 <__smakebuf_r+0x104>
  812bac:	04810004 	movi	r18,1024
  812bb0:	8809883a 	mov	r4,r17
  812bb4:	900b883a 	mov	r5,r18
  812bb8:	080d2600 	call	80d260 <_malloc_r>
  812bbc:	1009883a 	mov	r4,r2
  812bc0:	10003126 	beq	r2,zero,812c88 <__smakebuf_r+0x168>
  812bc4:	80c0030b 	ldhu	r3,12(r16)
  812bc8:	00802074 	movhi	r2,129
  812bcc:	10879604 	addi	r2,r2,7768
  812bd0:	88800f15 	stw	r2,60(r17)
  812bd4:	18c02014 	ori	r3,r3,128
  812bd8:	84800515 	stw	r18,20(r16)
  812bdc:	80c0030d 	sth	r3,12(r16)
  812be0:	81000415 	stw	r4,16(r16)
  812be4:	81000015 	stw	r4,0(r16)
  812be8:	dfc01217 	ldw	ra,72(sp)
  812bec:	dc801117 	ldw	r18,68(sp)
  812bf0:	dc401017 	ldw	r17,64(sp)
  812bf4:	dc000f17 	ldw	r16,60(sp)
  812bf8:	dec01304 	addi	sp,sp,76
  812bfc:	f800283a 	ret
  812c00:	80c0030b 	ldhu	r3,12(r16)
  812c04:	1880200c 	andi	r2,r3,128
  812c08:	10000426 	beq	r2,zero,812c1c <__smakebuf_r+0xfc>
  812c0c:	04801004 	movi	r18,64
  812c10:	18820014 	ori	r2,r3,2048
  812c14:	8080030d 	sth	r2,12(r16)
  812c18:	003fe506 	br	812bb0 <__smakebuf_r+0x90>
  812c1c:	04810004 	movi	r18,1024
  812c20:	003ffb06 	br	812c10 <__smakebuf_r+0xf0>
  812c24:	8140038f 	ldh	r5,14(r16)
  812c28:	8809883a 	mov	r4,r17
  812c2c:	081452c0 	call	81452c <_isatty_r>
  812c30:	103fde26 	beq	r2,zero,812bac <__smakebuf_r+0x8c>
  812c34:	8080030b 	ldhu	r2,12(r16)
  812c38:	80c010c4 	addi	r3,r16,67
  812c3c:	04810004 	movi	r18,1024
  812c40:	10800054 	ori	r2,r2,1
  812c44:	8080030d 	sth	r2,12(r16)
  812c48:	00800044 	movi	r2,1
  812c4c:	80c00415 	stw	r3,16(r16)
  812c50:	80800515 	stw	r2,20(r16)
  812c54:	80c00015 	stw	r3,0(r16)
  812c58:	003fd506 	br	812bb0 <__smakebuf_r+0x90>
  812c5c:	80c00a17 	ldw	r3,40(r16)
  812c60:	00802074 	movhi	r2,129
  812c64:	108ff904 	addi	r2,r2,16356
  812c68:	18bfcb1e 	bne	r3,r2,812b98 <__smakebuf_r+0x78>
  812c6c:	8080030b 	ldhu	r2,12(r16)
  812c70:	00c10004 	movi	r3,1024
  812c74:	1825883a 	mov	r18,r3
  812c78:	10c4b03a 	or	r2,r2,r3
  812c7c:	8080030d 	sth	r2,12(r16)
  812c80:	80c01315 	stw	r3,76(r16)
  812c84:	003fca06 	br	812bb0 <__smakebuf_r+0x90>
  812c88:	8100030b 	ldhu	r4,12(r16)
  812c8c:	2080800c 	andi	r2,r4,512
  812c90:	103fb21e 	bne	r2,zero,812b5c <__smakebuf_r+0x3c>
  812c94:	80c010c4 	addi	r3,r16,67
  812c98:	21000094 	ori	r4,r4,2
  812c9c:	00800044 	movi	r2,1
  812ca0:	80800515 	stw	r2,20(r16)
  812ca4:	8100030d 	sth	r4,12(r16)
  812ca8:	80c00415 	stw	r3,16(r16)
  812cac:	80c00015 	stw	r3,0(r16)
  812cb0:	003faa06 	br	812b5c <__smakebuf_r+0x3c>

00812cb4 <memchr>:
  812cb4:	008000c4 	movi	r2,3
  812cb8:	29403fcc 	andi	r5,r5,255
  812cbc:	2007883a 	mov	r3,r4
  812cc0:	1180022e 	bgeu	r2,r6,812ccc <memchr+0x18>
  812cc4:	2084703a 	and	r2,r4,r2
  812cc8:	10000b26 	beq	r2,zero,812cf8 <memchr+0x44>
  812ccc:	313fffc4 	addi	r4,r6,-1
  812cd0:	3000051e 	bne	r6,zero,812ce8 <memchr+0x34>
  812cd4:	00002c06 	br	812d88 <memchr+0xd4>
  812cd8:	213fffc4 	addi	r4,r4,-1
  812cdc:	00bfffc4 	movi	r2,-1
  812ce0:	18c00044 	addi	r3,r3,1
  812ce4:	20802826 	beq	r4,r2,812d88 <memchr+0xd4>
  812ce8:	18800003 	ldbu	r2,0(r3)
  812cec:	28bffa1e 	bne	r5,r2,812cd8 <memchr+0x24>
  812cf0:	1805883a 	mov	r2,r3
  812cf4:	f800283a 	ret
  812cf8:	0011883a 	mov	r8,zero
  812cfc:	0007883a 	mov	r3,zero
  812d00:	01c00104 	movi	r7,4
  812d04:	4004923a 	slli	r2,r8,8
  812d08:	18c00044 	addi	r3,r3,1
  812d0c:	1151883a 	add	r8,r2,r5
  812d10:	19fffc1e 	bne	r3,r7,812d04 <memchr+0x50>
  812d14:	02bfbff4 	movhi	r10,65279
  812d18:	52bfbfc4 	addi	r10,r10,-257
  812d1c:	02602074 	movhi	r9,32897
  812d20:	4a602004 	addi	r9,r9,-32640
  812d24:	02c000c4 	movi	r11,3
  812d28:	20800017 	ldw	r2,0(r4)
  812d2c:	31bfff04 	addi	r6,r6,-4
  812d30:	200f883a 	mov	r7,r4
  812d34:	1204f03a 	xor	r2,r2,r8
  812d38:	1287883a 	add	r3,r2,r10
  812d3c:	1a46703a 	and	r3,r3,r9
  812d40:	0084303a 	nor	r2,zero,r2
  812d44:	10c4703a 	and	r2,r2,r3
  812d48:	10000b26 	beq	r2,zero,812d78 <memchr+0xc4>
  812d4c:	20800003 	ldbu	r2,0(r4)
  812d50:	28800f26 	beq	r5,r2,812d90 <memchr+0xdc>
  812d54:	20800043 	ldbu	r2,1(r4)
  812d58:	21c00044 	addi	r7,r4,1
  812d5c:	28800c26 	beq	r5,r2,812d90 <memchr+0xdc>
  812d60:	20800083 	ldbu	r2,2(r4)
  812d64:	21c00084 	addi	r7,r4,2
  812d68:	28800926 	beq	r5,r2,812d90 <memchr+0xdc>
  812d6c:	208000c3 	ldbu	r2,3(r4)
  812d70:	21c000c4 	addi	r7,r4,3
  812d74:	28800626 	beq	r5,r2,812d90 <memchr+0xdc>
  812d78:	21000104 	addi	r4,r4,4
  812d7c:	59bfea36 	bltu	r11,r6,812d28 <memchr+0x74>
  812d80:	2007883a 	mov	r3,r4
  812d84:	003fd106 	br	812ccc <memchr+0x18>
  812d88:	0005883a 	mov	r2,zero
  812d8c:	f800283a 	ret
  812d90:	3805883a 	mov	r2,r7
  812d94:	f800283a 	ret

00812d98 <memmove>:
  812d98:	2807883a 	mov	r3,r5
  812d9c:	2011883a 	mov	r8,r4
  812da0:	29000c2e 	bgeu	r5,r4,812dd4 <memmove+0x3c>
  812da4:	298f883a 	add	r7,r5,r6
  812da8:	21c00a2e 	bgeu	r4,r7,812dd4 <memmove+0x3c>
  812dac:	30000726 	beq	r6,zero,812dcc <memmove+0x34>
  812db0:	2187883a 	add	r3,r4,r6
  812db4:	198dc83a 	sub	r6,r3,r6
  812db8:	39ffffc4 	addi	r7,r7,-1
  812dbc:	38800003 	ldbu	r2,0(r7)
  812dc0:	18ffffc4 	addi	r3,r3,-1
  812dc4:	18800005 	stb	r2,0(r3)
  812dc8:	19bffb1e 	bne	r3,r6,812db8 <memmove+0x20>
  812dcc:	2005883a 	mov	r2,r4
  812dd0:	f800283a 	ret
  812dd4:	01c003c4 	movi	r7,15
  812dd8:	39800a36 	bltu	r7,r6,812e04 <memmove+0x6c>
  812ddc:	303ffb26 	beq	r6,zero,812dcc <memmove+0x34>
  812de0:	400f883a 	mov	r7,r8
  812de4:	320d883a 	add	r6,r6,r8
  812de8:	28800003 	ldbu	r2,0(r5)
  812dec:	29400044 	addi	r5,r5,1
  812df0:	38800005 	stb	r2,0(r7)
  812df4:	39c00044 	addi	r7,r7,1
  812df8:	39bffb1e 	bne	r7,r6,812de8 <memmove+0x50>
  812dfc:	2005883a 	mov	r2,r4
  812e00:	f800283a 	ret
  812e04:	1904b03a 	or	r2,r3,r4
  812e08:	108000cc 	andi	r2,r2,3
  812e0c:	103ff31e 	bne	r2,zero,812ddc <memmove+0x44>
  812e10:	3811883a 	mov	r8,r7
  812e14:	180b883a 	mov	r5,r3
  812e18:	200f883a 	mov	r7,r4
  812e1c:	28c00017 	ldw	r3,0(r5)
  812e20:	31bffc04 	addi	r6,r6,-16
  812e24:	38c00015 	stw	r3,0(r7)
  812e28:	28800117 	ldw	r2,4(r5)
  812e2c:	38800115 	stw	r2,4(r7)
  812e30:	28c00217 	ldw	r3,8(r5)
  812e34:	38c00215 	stw	r3,8(r7)
  812e38:	28800317 	ldw	r2,12(r5)
  812e3c:	29400404 	addi	r5,r5,16
  812e40:	38800315 	stw	r2,12(r7)
  812e44:	39c00404 	addi	r7,r7,16
  812e48:	41bff436 	bltu	r8,r6,812e1c <memmove+0x84>
  812e4c:	008000c4 	movi	r2,3
  812e50:	1180072e 	bgeu	r2,r6,812e70 <memmove+0xd8>
  812e54:	1007883a 	mov	r3,r2
  812e58:	28800017 	ldw	r2,0(r5)
  812e5c:	31bfff04 	addi	r6,r6,-4
  812e60:	29400104 	addi	r5,r5,4
  812e64:	38800015 	stw	r2,0(r7)
  812e68:	39c00104 	addi	r7,r7,4
  812e6c:	19bffa36 	bltu	r3,r6,812e58 <memmove+0xc0>
  812e70:	3811883a 	mov	r8,r7
  812e74:	003fd906 	br	812ddc <memmove+0x44>

00812e78 <memset>:
  812e78:	008000c4 	movi	r2,3
  812e7c:	29403fcc 	andi	r5,r5,255
  812e80:	2007883a 	mov	r3,r4
  812e84:	1180022e 	bgeu	r2,r6,812e90 <memset+0x18>
  812e88:	2084703a 	and	r2,r4,r2
  812e8c:	10000826 	beq	r2,zero,812eb0 <memset+0x38>
  812e90:	30000526 	beq	r6,zero,812ea8 <memset+0x30>
  812e94:	2805883a 	mov	r2,r5
  812e98:	30cd883a 	add	r6,r6,r3
  812e9c:	18800005 	stb	r2,0(r3)
  812ea0:	18c00044 	addi	r3,r3,1
  812ea4:	19bffd1e 	bne	r3,r6,812e9c <memset+0x24>
  812ea8:	2005883a 	mov	r2,r4
  812eac:	f800283a 	ret
  812eb0:	2804923a 	slli	r2,r5,8
  812eb4:	020003c4 	movi	r8,15
  812eb8:	200f883a 	mov	r7,r4
  812ebc:	2884b03a 	or	r2,r5,r2
  812ec0:	1006943a 	slli	r3,r2,16
  812ec4:	10c6b03a 	or	r3,r2,r3
  812ec8:	41800a2e 	bgeu	r8,r6,812ef4 <memset+0x7c>
  812ecc:	4005883a 	mov	r2,r8
  812ed0:	31bffc04 	addi	r6,r6,-16
  812ed4:	38c00015 	stw	r3,0(r7)
  812ed8:	38c00115 	stw	r3,4(r7)
  812edc:	38c00215 	stw	r3,8(r7)
  812ee0:	38c00315 	stw	r3,12(r7)
  812ee4:	39c00404 	addi	r7,r7,16
  812ee8:	11bff936 	bltu	r2,r6,812ed0 <memset+0x58>
  812eec:	008000c4 	movi	r2,3
  812ef0:	1180052e 	bgeu	r2,r6,812f08 <memset+0x90>
  812ef4:	31bfff04 	addi	r6,r6,-4
  812ef8:	008000c4 	movi	r2,3
  812efc:	38c00015 	stw	r3,0(r7)
  812f00:	39c00104 	addi	r7,r7,4
  812f04:	11bffb36 	bltu	r2,r6,812ef4 <memset+0x7c>
  812f08:	3807883a 	mov	r3,r7
  812f0c:	003fe006 	br	812e90 <memset+0x18>

00812f10 <_Bfree>:
  812f10:	28000826 	beq	r5,zero,812f34 <_Bfree+0x24>
  812f14:	28800117 	ldw	r2,4(r5)
  812f18:	21001317 	ldw	r4,76(r4)
  812f1c:	1085883a 	add	r2,r2,r2
  812f20:	1085883a 	add	r2,r2,r2
  812f24:	1105883a 	add	r2,r2,r4
  812f28:	10c00017 	ldw	r3,0(r2)
  812f2c:	28c00015 	stw	r3,0(r5)
  812f30:	11400015 	stw	r5,0(r2)
  812f34:	f800283a 	ret

00812f38 <__hi0bits>:
  812f38:	20bfffec 	andhi	r2,r4,65535
  812f3c:	10001426 	beq	r2,zero,812f90 <__hi0bits+0x58>
  812f40:	0007883a 	mov	r3,zero
  812f44:	20bfc02c 	andhi	r2,r4,65280
  812f48:	1000021e 	bne	r2,zero,812f54 <__hi0bits+0x1c>
  812f4c:	2008923a 	slli	r4,r4,8
  812f50:	18c00204 	addi	r3,r3,8
  812f54:	20bc002c 	andhi	r2,r4,61440
  812f58:	1000021e 	bne	r2,zero,812f64 <__hi0bits+0x2c>
  812f5c:	2008913a 	slli	r4,r4,4
  812f60:	18c00104 	addi	r3,r3,4
  812f64:	20b0002c 	andhi	r2,r4,49152
  812f68:	1000031e 	bne	r2,zero,812f78 <__hi0bits+0x40>
  812f6c:	2105883a 	add	r2,r4,r4
  812f70:	18c00084 	addi	r3,r3,2
  812f74:	1089883a 	add	r4,r2,r2
  812f78:	20000316 	blt	r4,zero,812f88 <__hi0bits+0x50>
  812f7c:	2090002c 	andhi	r2,r4,16384
  812f80:	10000626 	beq	r2,zero,812f9c <__hi0bits+0x64>
  812f84:	18c00044 	addi	r3,r3,1
  812f88:	1805883a 	mov	r2,r3
  812f8c:	f800283a 	ret
  812f90:	2008943a 	slli	r4,r4,16
  812f94:	00c00404 	movi	r3,16
  812f98:	003fea06 	br	812f44 <__hi0bits+0xc>
  812f9c:	00c00804 	movi	r3,32
  812fa0:	1805883a 	mov	r2,r3
  812fa4:	f800283a 	ret

00812fa8 <__lo0bits>:
  812fa8:	20c00017 	ldw	r3,0(r4)
  812fac:	188001cc 	andi	r2,r3,7
  812fb0:	10000a26 	beq	r2,zero,812fdc <__lo0bits+0x34>
  812fb4:	1880004c 	andi	r2,r3,1
  812fb8:	1005003a 	cmpeq	r2,r2,zero
  812fbc:	10002126 	beq	r2,zero,813044 <__lo0bits+0x9c>
  812fc0:	1880008c 	andi	r2,r3,2
  812fc4:	1000251e 	bne	r2,zero,81305c <__lo0bits+0xb4>
  812fc8:	1804d0ba 	srli	r2,r3,2
  812fcc:	01400084 	movi	r5,2
  812fd0:	20800015 	stw	r2,0(r4)
  812fd4:	2805883a 	mov	r2,r5
  812fd8:	f800283a 	ret
  812fdc:	18bfffcc 	andi	r2,r3,65535
  812fe0:	10001526 	beq	r2,zero,813038 <__lo0bits+0x90>
  812fe4:	000b883a 	mov	r5,zero
  812fe8:	18803fcc 	andi	r2,r3,255
  812fec:	1000021e 	bne	r2,zero,812ff8 <__lo0bits+0x50>
  812ff0:	1806d23a 	srli	r3,r3,8
  812ff4:	29400204 	addi	r5,r5,8
  812ff8:	188003cc 	andi	r2,r3,15
  812ffc:	1000021e 	bne	r2,zero,813008 <__lo0bits+0x60>
  813000:	1806d13a 	srli	r3,r3,4
  813004:	29400104 	addi	r5,r5,4
  813008:	188000cc 	andi	r2,r3,3
  81300c:	1000021e 	bne	r2,zero,813018 <__lo0bits+0x70>
  813010:	1806d0ba 	srli	r3,r3,2
  813014:	29400084 	addi	r5,r5,2
  813018:	1880004c 	andi	r2,r3,1
  81301c:	1000031e 	bne	r2,zero,81302c <__lo0bits+0x84>
  813020:	1806d07a 	srli	r3,r3,1
  813024:	18000a26 	beq	r3,zero,813050 <__lo0bits+0xa8>
  813028:	29400044 	addi	r5,r5,1
  81302c:	2805883a 	mov	r2,r5
  813030:	20c00015 	stw	r3,0(r4)
  813034:	f800283a 	ret
  813038:	1806d43a 	srli	r3,r3,16
  81303c:	01400404 	movi	r5,16
  813040:	003fe906 	br	812fe8 <__lo0bits+0x40>
  813044:	000b883a 	mov	r5,zero
  813048:	2805883a 	mov	r2,r5
  81304c:	f800283a 	ret
  813050:	01400804 	movi	r5,32
  813054:	2805883a 	mov	r2,r5
  813058:	f800283a 	ret
  81305c:	1804d07a 	srli	r2,r3,1
  813060:	01400044 	movi	r5,1
  813064:	20800015 	stw	r2,0(r4)
  813068:	003fda06 	br	812fd4 <__lo0bits+0x2c>

0081306c <__mcmp>:
  81306c:	20800417 	ldw	r2,16(r4)
  813070:	28c00417 	ldw	r3,16(r5)
  813074:	10cfc83a 	sub	r7,r2,r3
  813078:	38000c1e 	bne	r7,zero,8130ac <__mcmp+0x40>
  81307c:	18c5883a 	add	r2,r3,r3
  813080:	1085883a 	add	r2,r2,r2
  813084:	10c00504 	addi	r3,r2,20
  813088:	21000504 	addi	r4,r4,20
  81308c:	28cb883a 	add	r5,r5,r3
  813090:	2085883a 	add	r2,r4,r2
  813094:	10bfff04 	addi	r2,r2,-4
  813098:	297fff04 	addi	r5,r5,-4
  81309c:	11800017 	ldw	r6,0(r2)
  8130a0:	28c00017 	ldw	r3,0(r5)
  8130a4:	30c0031e 	bne	r6,r3,8130b4 <__mcmp+0x48>
  8130a8:	20bffa36 	bltu	r4,r2,813094 <__mcmp+0x28>
  8130ac:	3805883a 	mov	r2,r7
  8130b0:	f800283a 	ret
  8130b4:	30c00336 	bltu	r6,r3,8130c4 <__mcmp+0x58>
  8130b8:	01c00044 	movi	r7,1
  8130bc:	3805883a 	mov	r2,r7
  8130c0:	f800283a 	ret
  8130c4:	01ffffc4 	movi	r7,-1
  8130c8:	003ff806 	br	8130ac <__mcmp+0x40>

008130cc <__ulp>:
  8130cc:	295ffc2c 	andhi	r5,r5,32752
  8130d0:	013f3034 	movhi	r4,64704
  8130d4:	290b883a 	add	r5,r5,r4
  8130d8:	0145c83a 	sub	r2,zero,r5
  8130dc:	1007d53a 	srai	r3,r2,20
  8130e0:	000d883a 	mov	r6,zero
  8130e4:	0140040e 	bge	zero,r5,8130f8 <__ulp+0x2c>
  8130e8:	280f883a 	mov	r7,r5
  8130ec:	3807883a 	mov	r3,r7
  8130f0:	3005883a 	mov	r2,r6
  8130f4:	f800283a 	ret
  8130f8:	008004c4 	movi	r2,19
  8130fc:	193ffb04 	addi	r4,r3,-20
  813100:	10c00c0e 	bge	r2,r3,813134 <__ulp+0x68>
  813104:	008007c4 	movi	r2,31
  813108:	1107c83a 	sub	r3,r2,r4
  81310c:	00800784 	movi	r2,30
  813110:	01400044 	movi	r5,1
  813114:	11000216 	blt	r2,r4,813120 <__ulp+0x54>
  813118:	00800044 	movi	r2,1
  81311c:	10ca983a 	sll	r5,r2,r3
  813120:	000f883a 	mov	r7,zero
  813124:	280d883a 	mov	r6,r5
  813128:	3807883a 	mov	r3,r7
  81312c:	3005883a 	mov	r2,r6
  813130:	f800283a 	ret
  813134:	00800234 	movhi	r2,8
  813138:	10cfd83a 	sra	r7,r2,r3
  81313c:	000d883a 	mov	r6,zero
  813140:	3005883a 	mov	r2,r6
  813144:	3807883a 	mov	r3,r7
  813148:	f800283a 	ret

0081314c <__b2d>:
  81314c:	20800417 	ldw	r2,16(r4)
  813150:	defff904 	addi	sp,sp,-28
  813154:	dd000415 	stw	r20,16(sp)
  813158:	1085883a 	add	r2,r2,r2
  81315c:	25000504 	addi	r20,r4,20
  813160:	1085883a 	add	r2,r2,r2
  813164:	dc000015 	stw	r16,0(sp)
  813168:	a0a1883a 	add	r16,r20,r2
  81316c:	dd400515 	stw	r21,20(sp)
  813170:	857fff17 	ldw	r21,-4(r16)
  813174:	dc400115 	stw	r17,4(sp)
  813178:	dfc00615 	stw	ra,24(sp)
  81317c:	a809883a 	mov	r4,r21
  813180:	2823883a 	mov	r17,r5
  813184:	dcc00315 	stw	r19,12(sp)
  813188:	dc800215 	stw	r18,8(sp)
  81318c:	0812f380 	call	812f38 <__hi0bits>
  813190:	100b883a 	mov	r5,r2
  813194:	00800804 	movi	r2,32
  813198:	1145c83a 	sub	r2,r2,r5
  81319c:	88800015 	stw	r2,0(r17)
  8131a0:	00800284 	movi	r2,10
  8131a4:	80ffff04 	addi	r3,r16,-4
  8131a8:	11401416 	blt	r2,r5,8131fc <__b2d+0xb0>
  8131ac:	008002c4 	movi	r2,11
  8131b0:	1149c83a 	sub	r4,r2,r5
  8131b4:	a0c02736 	bltu	r20,r3,813254 <__b2d+0x108>
  8131b8:	000d883a 	mov	r6,zero
  8131bc:	28800544 	addi	r2,r5,21
  8131c0:	a906d83a 	srl	r3,r21,r4
  8131c4:	a884983a 	sll	r2,r21,r2
  8131c8:	1ccffc34 	orhi	r19,r3,16368
  8131cc:	11a4b03a 	or	r18,r2,r6
  8131d0:	9005883a 	mov	r2,r18
  8131d4:	9807883a 	mov	r3,r19
  8131d8:	dfc00617 	ldw	ra,24(sp)
  8131dc:	dd400517 	ldw	r21,20(sp)
  8131e0:	dd000417 	ldw	r20,16(sp)
  8131e4:	dcc00317 	ldw	r19,12(sp)
  8131e8:	dc800217 	ldw	r18,8(sp)
  8131ec:	dc400117 	ldw	r17,4(sp)
  8131f0:	dc000017 	ldw	r16,0(sp)
  8131f4:	dec00704 	addi	sp,sp,28
  8131f8:	f800283a 	ret
  8131fc:	a0c00e36 	bltu	r20,r3,813238 <__b2d+0xec>
  813200:	293ffd44 	addi	r4,r5,-11
  813204:	000d883a 	mov	r6,zero
  813208:	20000f26 	beq	r4,zero,813248 <__b2d+0xfc>
  81320c:	00800804 	movi	r2,32
  813210:	110bc83a 	sub	r5,r2,r4
  813214:	a0c01236 	bltu	r20,r3,813260 <__b2d+0x114>
  813218:	000f883a 	mov	r7,zero
  81321c:	a904983a 	sll	r2,r21,r4
  813220:	3146d83a 	srl	r3,r6,r5
  813224:	3108983a 	sll	r4,r6,r4
  813228:	108ffc34 	orhi	r2,r2,16368
  81322c:	18a6b03a 	or	r19,r3,r2
  813230:	3924b03a 	or	r18,r7,r4
  813234:	003fe606 	br	8131d0 <__b2d+0x84>
  813238:	293ffd44 	addi	r4,r5,-11
  81323c:	81bffe17 	ldw	r6,-8(r16)
  813240:	80fffe04 	addi	r3,r16,-8
  813244:	203ff11e 	bne	r4,zero,81320c <__b2d+0xc0>
  813248:	accffc34 	orhi	r19,r21,16368
  81324c:	3025883a 	mov	r18,r6
  813250:	003fdf06 	br	8131d0 <__b2d+0x84>
  813254:	18bfff17 	ldw	r2,-4(r3)
  813258:	110cd83a 	srl	r6,r2,r4
  81325c:	003fd706 	br	8131bc <__b2d+0x70>
  813260:	18bfff17 	ldw	r2,-4(r3)
  813264:	114ed83a 	srl	r7,r2,r5
  813268:	003fec06 	br	81321c <__b2d+0xd0>

0081326c <__ratio>:
  81326c:	defff904 	addi	sp,sp,-28
  813270:	dc400215 	stw	r17,8(sp)
  813274:	2823883a 	mov	r17,r5
  813278:	d80b883a 	mov	r5,sp
  81327c:	dfc00615 	stw	ra,24(sp)
  813280:	dd000515 	stw	r20,20(sp)
  813284:	dcc00415 	stw	r19,16(sp)
  813288:	dc800315 	stw	r18,12(sp)
  81328c:	2025883a 	mov	r18,r4
  813290:	081314c0 	call	81314c <__b2d>
  813294:	8809883a 	mov	r4,r17
  813298:	d9400104 	addi	r5,sp,4
  81329c:	1027883a 	mov	r19,r2
  8132a0:	1829883a 	mov	r20,r3
  8132a4:	081314c0 	call	81314c <__b2d>
  8132a8:	89000417 	ldw	r4,16(r17)
  8132ac:	91c00417 	ldw	r7,16(r18)
  8132b0:	d9800117 	ldw	r6,4(sp)
  8132b4:	180b883a 	mov	r5,r3
  8132b8:	390fc83a 	sub	r7,r7,r4
  8132bc:	1009883a 	mov	r4,r2
  8132c0:	d8800017 	ldw	r2,0(sp)
  8132c4:	380e917a 	slli	r7,r7,5
  8132c8:	2011883a 	mov	r8,r4
  8132cc:	1185c83a 	sub	r2,r2,r6
  8132d0:	11c5883a 	add	r2,r2,r7
  8132d4:	1006953a 	slli	r3,r2,20
  8132d8:	2813883a 	mov	r9,r5
  8132dc:	00800d0e 	bge	zero,r2,813314 <__ratio+0xa8>
  8132e0:	1d29883a 	add	r20,r3,r20
  8132e4:	a00b883a 	mov	r5,r20
  8132e8:	480f883a 	mov	r7,r9
  8132ec:	9809883a 	mov	r4,r19
  8132f0:	400d883a 	mov	r6,r8
  8132f4:	080bfbc0 	call	80bfbc <__divdf3>
  8132f8:	dfc00617 	ldw	ra,24(sp)
  8132fc:	dd000517 	ldw	r20,20(sp)
  813300:	dcc00417 	ldw	r19,16(sp)
  813304:	dc800317 	ldw	r18,12(sp)
  813308:	dc400217 	ldw	r17,8(sp)
  81330c:	dec00704 	addi	sp,sp,28
  813310:	f800283a 	ret
  813314:	28d3c83a 	sub	r9,r5,r3
  813318:	003ff206 	br	8132e4 <__ratio+0x78>

0081331c <_mprec_log10>:
  81331c:	defffe04 	addi	sp,sp,-8
  813320:	008005c4 	movi	r2,23
  813324:	dc000015 	stw	r16,0(sp)
  813328:	dfc00115 	stw	ra,4(sp)
  81332c:	2021883a 	mov	r16,r4
  813330:	11000c16 	blt	r2,r4,813364 <_mprec_log10+0x48>
  813334:	200490fa 	slli	r2,r4,3
  813338:	00c020b4 	movhi	r3,130
  81333c:	18c72504 	addi	r3,r3,7316
  813340:	10c5883a 	add	r2,r2,r3
  813344:	12400117 	ldw	r9,4(r2)
  813348:	12000017 	ldw	r8,0(r2)
  81334c:	4807883a 	mov	r3,r9
  813350:	4005883a 	mov	r2,r8
  813354:	dfc00117 	ldw	ra,4(sp)
  813358:	dc000017 	ldw	r16,0(sp)
  81335c:	dec00204 	addi	sp,sp,8
  813360:	f800283a 	ret
  813364:	0011883a 	mov	r8,zero
  813368:	024ffc34 	movhi	r9,16368
  81336c:	0005883a 	mov	r2,zero
  813370:	00d00934 	movhi	r3,16420
  813374:	480b883a 	mov	r5,r9
  813378:	4009883a 	mov	r4,r8
  81337c:	180f883a 	mov	r7,r3
  813380:	100d883a 	mov	r6,r2
  813384:	080bbf80 	call	80bbf8 <__muldf3>
  813388:	843fffc4 	addi	r16,r16,-1
  81338c:	1011883a 	mov	r8,r2
  813390:	1813883a 	mov	r9,r3
  813394:	803ff51e 	bne	r16,zero,81336c <_mprec_log10+0x50>
  813398:	4005883a 	mov	r2,r8
  81339c:	4807883a 	mov	r3,r9
  8133a0:	dfc00117 	ldw	ra,4(sp)
  8133a4:	dc000017 	ldw	r16,0(sp)
  8133a8:	dec00204 	addi	sp,sp,8
  8133ac:	f800283a 	ret

008133b0 <__copybits>:
  8133b0:	297fffc4 	addi	r5,r5,-1
  8133b4:	30800417 	ldw	r2,16(r6)
  8133b8:	280bd17a 	srai	r5,r5,5
  8133bc:	31800504 	addi	r6,r6,20
  8133c0:	1085883a 	add	r2,r2,r2
  8133c4:	294b883a 	add	r5,r5,r5
  8133c8:	294b883a 	add	r5,r5,r5
  8133cc:	1085883a 	add	r2,r2,r2
  8133d0:	290b883a 	add	r5,r5,r4
  8133d4:	3087883a 	add	r3,r6,r2
  8133d8:	29400104 	addi	r5,r5,4
  8133dc:	30c0052e 	bgeu	r6,r3,8133f4 <__copybits+0x44>
  8133e0:	30800017 	ldw	r2,0(r6)
  8133e4:	31800104 	addi	r6,r6,4
  8133e8:	20800015 	stw	r2,0(r4)
  8133ec:	21000104 	addi	r4,r4,4
  8133f0:	30fffb36 	bltu	r6,r3,8133e0 <__copybits+0x30>
  8133f4:	2140032e 	bgeu	r4,r5,813404 <__copybits+0x54>
  8133f8:	20000015 	stw	zero,0(r4)
  8133fc:	21000104 	addi	r4,r4,4
  813400:	217ffd36 	bltu	r4,r5,8133f8 <__copybits+0x48>
  813404:	f800283a 	ret

00813408 <__any_on>:
  813408:	20800417 	ldw	r2,16(r4)
  81340c:	2807d17a 	srai	r3,r5,5
  813410:	21000504 	addi	r4,r4,20
  813414:	10c00d0e 	bge	r2,r3,81344c <__any_on+0x44>
  813418:	1085883a 	add	r2,r2,r2
  81341c:	1085883a 	add	r2,r2,r2
  813420:	208d883a 	add	r6,r4,r2
  813424:	2180182e 	bgeu	r4,r6,813488 <__any_on+0x80>
  813428:	30bfff17 	ldw	r2,-4(r6)
  81342c:	30ffff04 	addi	r3,r6,-4
  813430:	1000041e 	bne	r2,zero,813444 <__any_on+0x3c>
  813434:	20c0142e 	bgeu	r4,r3,813488 <__any_on+0x80>
  813438:	18ffff04 	addi	r3,r3,-4
  81343c:	18800017 	ldw	r2,0(r3)
  813440:	103ffc26 	beq	r2,zero,813434 <__any_on+0x2c>
  813444:	00800044 	movi	r2,1
  813448:	f800283a 	ret
  81344c:	18800a0e 	bge	r3,r2,813478 <__any_on+0x70>
  813450:	294007cc 	andi	r5,r5,31
  813454:	28000826 	beq	r5,zero,813478 <__any_on+0x70>
  813458:	18c5883a 	add	r2,r3,r3
  81345c:	1085883a 	add	r2,r2,r2
  813460:	208d883a 	add	r6,r4,r2
  813464:	30c00017 	ldw	r3,0(r6)
  813468:	1944d83a 	srl	r2,r3,r5
  81346c:	1144983a 	sll	r2,r2,r5
  813470:	18bff41e 	bne	r3,r2,813444 <__any_on+0x3c>
  813474:	003feb06 	br	813424 <__any_on+0x1c>
  813478:	18c5883a 	add	r2,r3,r3
  81347c:	1085883a 	add	r2,r2,r2
  813480:	208d883a 	add	r6,r4,r2
  813484:	003fe706 	br	813424 <__any_on+0x1c>
  813488:	0005883a 	mov	r2,zero
  81348c:	f800283a 	ret

00813490 <_Balloc>:
  813490:	20c01317 	ldw	r3,76(r4)
  813494:	defffb04 	addi	sp,sp,-20
  813498:	dcc00315 	stw	r19,12(sp)
  81349c:	dc800215 	stw	r18,8(sp)
  8134a0:	dfc00415 	stw	ra,16(sp)
  8134a4:	2825883a 	mov	r18,r5
  8134a8:	dc400115 	stw	r17,4(sp)
  8134ac:	dc000015 	stw	r16,0(sp)
  8134b0:	2027883a 	mov	r19,r4
  8134b4:	01800404 	movi	r6,16
  8134b8:	01400104 	movi	r5,4
  8134bc:	18001726 	beq	r3,zero,81351c <_Balloc+0x8c>
  8134c0:	01400044 	movi	r5,1
  8134c4:	9485883a 	add	r2,r18,r18
  8134c8:	2ca2983a 	sll	r17,r5,r18
  8134cc:	1085883a 	add	r2,r2,r2
  8134d0:	10c7883a 	add	r3,r2,r3
  8134d4:	1c000017 	ldw	r16,0(r3)
  8134d8:	8c4d883a 	add	r6,r17,r17
  8134dc:	318d883a 	add	r6,r6,r6
  8134e0:	9809883a 	mov	r4,r19
  8134e4:	31800504 	addi	r6,r6,20
  8134e8:	80001226 	beq	r16,zero,813534 <_Balloc+0xa4>
  8134ec:	80800017 	ldw	r2,0(r16)
  8134f0:	18800015 	stw	r2,0(r3)
  8134f4:	80000415 	stw	zero,16(r16)
  8134f8:	80000315 	stw	zero,12(r16)
  8134fc:	8005883a 	mov	r2,r16
  813500:	dfc00417 	ldw	ra,16(sp)
  813504:	dcc00317 	ldw	r19,12(sp)
  813508:	dc800217 	ldw	r18,8(sp)
  81350c:	dc400117 	ldw	r17,4(sp)
  813510:	dc000017 	ldw	r16,0(sp)
  813514:	dec00504 	addi	sp,sp,20
  813518:	f800283a 	ret
  81351c:	081425c0 	call	81425c <_calloc_r>
  813520:	1007883a 	mov	r3,r2
  813524:	0021883a 	mov	r16,zero
  813528:	98801315 	stw	r2,76(r19)
  81352c:	103fe41e 	bne	r2,zero,8134c0 <_Balloc+0x30>
  813530:	003ff206 	br	8134fc <_Balloc+0x6c>
  813534:	081425c0 	call	81425c <_calloc_r>
  813538:	103ff026 	beq	r2,zero,8134fc <_Balloc+0x6c>
  81353c:	1021883a 	mov	r16,r2
  813540:	14800115 	stw	r18,4(r2)
  813544:	14400215 	stw	r17,8(r2)
  813548:	003fea06 	br	8134f4 <_Balloc+0x64>

0081354c <__d2b>:
  81354c:	defff504 	addi	sp,sp,-44
  813550:	dcc00515 	stw	r19,20(sp)
  813554:	04c00044 	movi	r19,1
  813558:	dc000215 	stw	r16,8(sp)
  81355c:	2821883a 	mov	r16,r5
  813560:	980b883a 	mov	r5,r19
  813564:	ddc00915 	stw	r23,36(sp)
  813568:	dd800815 	stw	r22,32(sp)
  81356c:	dd400715 	stw	r21,28(sp)
  813570:	dd000615 	stw	r20,24(sp)
  813574:	dc800415 	stw	r18,16(sp)
  813578:	dc400315 	stw	r17,12(sp)
  81357c:	dfc00a15 	stw	ra,40(sp)
  813580:	3023883a 	mov	r17,r6
  813584:	382d883a 	mov	r22,r7
  813588:	ddc00b17 	ldw	r23,44(sp)
  81358c:	08134900 	call	813490 <_Balloc>
  813590:	1025883a 	mov	r18,r2
  813594:	00a00034 	movhi	r2,32768
  813598:	10bfffc4 	addi	r2,r2,-1
  81359c:	8888703a 	and	r4,r17,r2
  8135a0:	202ad53a 	srli	r21,r4,20
  8135a4:	00800434 	movhi	r2,16
  8135a8:	10bfffc4 	addi	r2,r2,-1
  8135ac:	8886703a 	and	r3,r17,r2
  8135b0:	a829003a 	cmpeq	r20,r21,zero
  8135b4:	800b883a 	mov	r5,r16
  8135b8:	d8c00115 	stw	r3,4(sp)
  8135bc:	94000504 	addi	r16,r18,20
  8135c0:	a000021e 	bne	r20,zero,8135cc <__d2b+0x80>
  8135c4:	18c00434 	orhi	r3,r3,16
  8135c8:	d8c00115 	stw	r3,4(sp)
  8135cc:	28002726 	beq	r5,zero,81366c <__d2b+0x120>
  8135d0:	d809883a 	mov	r4,sp
  8135d4:	d9400015 	stw	r5,0(sp)
  8135d8:	0812fa80 	call	812fa8 <__lo0bits>
  8135dc:	100d883a 	mov	r6,r2
  8135e0:	10003526 	beq	r2,zero,8136b8 <__d2b+0x16c>
  8135e4:	d8c00117 	ldw	r3,4(sp)
  8135e8:	00800804 	movi	r2,32
  8135ec:	1185c83a 	sub	r2,r2,r6
  8135f0:	d9000017 	ldw	r4,0(sp)
  8135f4:	1886983a 	sll	r3,r3,r2
  8135f8:	1906b03a 	or	r3,r3,r4
  8135fc:	90c00515 	stw	r3,20(r18)
  813600:	d8c00117 	ldw	r3,4(sp)
  813604:	1986d83a 	srl	r3,r3,r6
  813608:	d8c00115 	stw	r3,4(sp)
  81360c:	180b003a 	cmpeq	r5,r3,zero
  813610:	00800084 	movi	r2,2
  813614:	114bc83a 	sub	r5,r2,r5
  813618:	80c00115 	stw	r3,4(r16)
  81361c:	91400415 	stw	r5,16(r18)
  813620:	a0001a1e 	bne	r20,zero,81368c <__d2b+0x140>
  813624:	3545883a 	add	r2,r6,r21
  813628:	10bef344 	addi	r2,r2,-1075
  81362c:	00c00d44 	movi	r3,53
  813630:	b0800015 	stw	r2,0(r22)
  813634:	1987c83a 	sub	r3,r3,r6
  813638:	b8c00015 	stw	r3,0(r23)
  81363c:	9005883a 	mov	r2,r18
  813640:	dfc00a17 	ldw	ra,40(sp)
  813644:	ddc00917 	ldw	r23,36(sp)
  813648:	dd800817 	ldw	r22,32(sp)
  81364c:	dd400717 	ldw	r21,28(sp)
  813650:	dd000617 	ldw	r20,24(sp)
  813654:	dcc00517 	ldw	r19,20(sp)
  813658:	dc800417 	ldw	r18,16(sp)
  81365c:	dc400317 	ldw	r17,12(sp)
  813660:	dc000217 	ldw	r16,8(sp)
  813664:	dec00b04 	addi	sp,sp,44
  813668:	f800283a 	ret
  81366c:	d9000104 	addi	r4,sp,4
  813670:	0812fa80 	call	812fa8 <__lo0bits>
  813674:	11800804 	addi	r6,r2,32
  813678:	d8800117 	ldw	r2,4(sp)
  81367c:	94c00415 	stw	r19,16(r18)
  813680:	980b883a 	mov	r5,r19
  813684:	90800515 	stw	r2,20(r18)
  813688:	a03fe626 	beq	r20,zero,813624 <__d2b+0xd8>
  81368c:	2945883a 	add	r2,r5,r5
  813690:	1085883a 	add	r2,r2,r2
  813694:	1405883a 	add	r2,r2,r16
  813698:	113fff17 	ldw	r4,-4(r2)
  81369c:	30fef384 	addi	r3,r6,-1074
  8136a0:	2820917a 	slli	r16,r5,5
  8136a4:	b0c00015 	stw	r3,0(r22)
  8136a8:	0812f380 	call	812f38 <__hi0bits>
  8136ac:	80a1c83a 	sub	r16,r16,r2
  8136b0:	bc000015 	stw	r16,0(r23)
  8136b4:	003fe106 	br	81363c <__d2b+0xf0>
  8136b8:	d8800017 	ldw	r2,0(sp)
  8136bc:	90800515 	stw	r2,20(r18)
  8136c0:	d8c00117 	ldw	r3,4(sp)
  8136c4:	003fd106 	br	81360c <__d2b+0xc0>

008136c8 <__mdiff>:
  8136c8:	defffb04 	addi	sp,sp,-20
  8136cc:	dc000015 	stw	r16,0(sp)
  8136d0:	2821883a 	mov	r16,r5
  8136d4:	dc800215 	stw	r18,8(sp)
  8136d8:	300b883a 	mov	r5,r6
  8136dc:	2025883a 	mov	r18,r4
  8136e0:	8009883a 	mov	r4,r16
  8136e4:	dc400115 	stw	r17,4(sp)
  8136e8:	dfc00415 	stw	ra,16(sp)
  8136ec:	dcc00315 	stw	r19,12(sp)
  8136f0:	3023883a 	mov	r17,r6
  8136f4:	081306c0 	call	81306c <__mcmp>
  8136f8:	10004226 	beq	r2,zero,813804 <__mdiff+0x13c>
  8136fc:	10005016 	blt	r2,zero,813840 <__mdiff+0x178>
  813700:	0027883a 	mov	r19,zero
  813704:	81400117 	ldw	r5,4(r16)
  813708:	9009883a 	mov	r4,r18
  81370c:	08134900 	call	813490 <_Balloc>
  813710:	1019883a 	mov	r12,r2
  813714:	82800417 	ldw	r10,16(r16)
  813718:	88800417 	ldw	r2,16(r17)
  81371c:	81800504 	addi	r6,r16,20
  813720:	5287883a 	add	r3,r10,r10
  813724:	1085883a 	add	r2,r2,r2
  813728:	18c7883a 	add	r3,r3,r3
  81372c:	1085883a 	add	r2,r2,r2
  813730:	8a000504 	addi	r8,r17,20
  813734:	64c00315 	stw	r19,12(r12)
  813738:	30db883a 	add	r13,r6,r3
  81373c:	4097883a 	add	r11,r8,r2
  813740:	61c00504 	addi	r7,r12,20
  813744:	0013883a 	mov	r9,zero
  813748:	31000017 	ldw	r4,0(r6)
  81374c:	41400017 	ldw	r5,0(r8)
  813750:	42000104 	addi	r8,r8,4
  813754:	20bfffcc 	andi	r2,r4,65535
  813758:	28ffffcc 	andi	r3,r5,65535
  81375c:	10c5c83a 	sub	r2,r2,r3
  813760:	1245883a 	add	r2,r2,r9
  813764:	2008d43a 	srli	r4,r4,16
  813768:	280ad43a 	srli	r5,r5,16
  81376c:	1007d43a 	srai	r3,r2,16
  813770:	3880000d 	sth	r2,0(r7)
  813774:	2149c83a 	sub	r4,r4,r5
  813778:	20c9883a 	add	r4,r4,r3
  81377c:	3900008d 	sth	r4,2(r7)
  813780:	31800104 	addi	r6,r6,4
  813784:	39c00104 	addi	r7,r7,4
  813788:	2013d43a 	srai	r9,r4,16
  81378c:	42ffee36 	bltu	r8,r11,813748 <__mdiff+0x80>
  813790:	33400c2e 	bgeu	r6,r13,8137c4 <__mdiff+0xfc>
  813794:	30800017 	ldw	r2,0(r6)
  813798:	31800104 	addi	r6,r6,4
  81379c:	10ffffcc 	andi	r3,r2,65535
  8137a0:	1a47883a 	add	r3,r3,r9
  8137a4:	1004d43a 	srli	r2,r2,16
  8137a8:	1809d43a 	srai	r4,r3,16
  8137ac:	38c0000d 	sth	r3,0(r7)
  8137b0:	1105883a 	add	r2,r2,r4
  8137b4:	3880008d 	sth	r2,2(r7)
  8137b8:	1013d43a 	srai	r9,r2,16
  8137bc:	39c00104 	addi	r7,r7,4
  8137c0:	337ff436 	bltu	r6,r13,813794 <__mdiff+0xcc>
  8137c4:	38bfff17 	ldw	r2,-4(r7)
  8137c8:	38ffff04 	addi	r3,r7,-4
  8137cc:	1000041e 	bne	r2,zero,8137e0 <__mdiff+0x118>
  8137d0:	18ffff04 	addi	r3,r3,-4
  8137d4:	18800017 	ldw	r2,0(r3)
  8137d8:	52bfffc4 	addi	r10,r10,-1
  8137dc:	103ffc26 	beq	r2,zero,8137d0 <__mdiff+0x108>
  8137e0:	6005883a 	mov	r2,r12
  8137e4:	62800415 	stw	r10,16(r12)
  8137e8:	dfc00417 	ldw	ra,16(sp)
  8137ec:	dcc00317 	ldw	r19,12(sp)
  8137f0:	dc800217 	ldw	r18,8(sp)
  8137f4:	dc400117 	ldw	r17,4(sp)
  8137f8:	dc000017 	ldw	r16,0(sp)
  8137fc:	dec00504 	addi	sp,sp,20
  813800:	f800283a 	ret
  813804:	9009883a 	mov	r4,r18
  813808:	000b883a 	mov	r5,zero
  81380c:	08134900 	call	813490 <_Balloc>
  813810:	1019883a 	mov	r12,r2
  813814:	00800044 	movi	r2,1
  813818:	60800415 	stw	r2,16(r12)
  81381c:	6005883a 	mov	r2,r12
  813820:	60000515 	stw	zero,20(r12)
  813824:	dfc00417 	ldw	ra,16(sp)
  813828:	dcc00317 	ldw	r19,12(sp)
  81382c:	dc800217 	ldw	r18,8(sp)
  813830:	dc400117 	ldw	r17,4(sp)
  813834:	dc000017 	ldw	r16,0(sp)
  813838:	dec00504 	addi	sp,sp,20
  81383c:	f800283a 	ret
  813840:	880d883a 	mov	r6,r17
  813844:	04c00044 	movi	r19,1
  813848:	8023883a 	mov	r17,r16
  81384c:	3021883a 	mov	r16,r6
  813850:	003fac06 	br	813704 <__mdiff+0x3c>

00813854 <__lshift>:
  813854:	defff904 	addi	sp,sp,-28
  813858:	28800417 	ldw	r2,16(r5)
  81385c:	dc000015 	stw	r16,0(sp)
  813860:	3021d17a 	srai	r16,r6,5
  813864:	28c00217 	ldw	r3,8(r5)
  813868:	10800044 	addi	r2,r2,1
  81386c:	dc400115 	stw	r17,4(sp)
  813870:	80a3883a 	add	r17,r16,r2
  813874:	dd400515 	stw	r21,20(sp)
  813878:	dd000415 	stw	r20,16(sp)
  81387c:	dc800215 	stw	r18,8(sp)
  813880:	dfc00615 	stw	ra,24(sp)
  813884:	2825883a 	mov	r18,r5
  813888:	dcc00315 	stw	r19,12(sp)
  81388c:	3029883a 	mov	r20,r6
  813890:	202b883a 	mov	r21,r4
  813894:	29400117 	ldw	r5,4(r5)
  813898:	1c40030e 	bge	r3,r17,8138a8 <__lshift+0x54>
  81389c:	18c7883a 	add	r3,r3,r3
  8138a0:	29400044 	addi	r5,r5,1
  8138a4:	1c7ffd16 	blt	r3,r17,81389c <__lshift+0x48>
  8138a8:	a809883a 	mov	r4,r21
  8138ac:	08134900 	call	813490 <_Balloc>
  8138b0:	1027883a 	mov	r19,r2
  8138b4:	11400504 	addi	r5,r2,20
  8138b8:	0400090e 	bge	zero,r16,8138e0 <__lshift+0x8c>
  8138bc:	2805883a 	mov	r2,r5
  8138c0:	0007883a 	mov	r3,zero
  8138c4:	18c00044 	addi	r3,r3,1
  8138c8:	10000015 	stw	zero,0(r2)
  8138cc:	10800104 	addi	r2,r2,4
  8138d0:	80fffc1e 	bne	r16,r3,8138c4 <__lshift+0x70>
  8138d4:	8405883a 	add	r2,r16,r16
  8138d8:	1085883a 	add	r2,r2,r2
  8138dc:	288b883a 	add	r5,r5,r2
  8138e0:	90800417 	ldw	r2,16(r18)
  8138e4:	91000504 	addi	r4,r18,20
  8138e8:	a18007cc 	andi	r6,r20,31
  8138ec:	1085883a 	add	r2,r2,r2
  8138f0:	1085883a 	add	r2,r2,r2
  8138f4:	208f883a 	add	r7,r4,r2
  8138f8:	30001e26 	beq	r6,zero,813974 <__lshift+0x120>
  8138fc:	00800804 	movi	r2,32
  813900:	1191c83a 	sub	r8,r2,r6
  813904:	0007883a 	mov	r3,zero
  813908:	20800017 	ldw	r2,0(r4)
  81390c:	1184983a 	sll	r2,r2,r6
  813910:	1884b03a 	or	r2,r3,r2
  813914:	28800015 	stw	r2,0(r5)
  813918:	20c00017 	ldw	r3,0(r4)
  81391c:	21000104 	addi	r4,r4,4
  813920:	29400104 	addi	r5,r5,4
  813924:	1a06d83a 	srl	r3,r3,r8
  813928:	21fff736 	bltu	r4,r7,813908 <__lshift+0xb4>
  81392c:	28c00015 	stw	r3,0(r5)
  813930:	18000126 	beq	r3,zero,813938 <__lshift+0xe4>
  813934:	8c400044 	addi	r17,r17,1
  813938:	88bfffc4 	addi	r2,r17,-1
  81393c:	98800415 	stw	r2,16(r19)
  813940:	a809883a 	mov	r4,r21
  813944:	900b883a 	mov	r5,r18
  813948:	0812f100 	call	812f10 <_Bfree>
  81394c:	9805883a 	mov	r2,r19
  813950:	dfc00617 	ldw	ra,24(sp)
  813954:	dd400517 	ldw	r21,20(sp)
  813958:	dd000417 	ldw	r20,16(sp)
  81395c:	dcc00317 	ldw	r19,12(sp)
  813960:	dc800217 	ldw	r18,8(sp)
  813964:	dc400117 	ldw	r17,4(sp)
  813968:	dc000017 	ldw	r16,0(sp)
  81396c:	dec00704 	addi	sp,sp,28
  813970:	f800283a 	ret
  813974:	20800017 	ldw	r2,0(r4)
  813978:	21000104 	addi	r4,r4,4
  81397c:	28800015 	stw	r2,0(r5)
  813980:	29400104 	addi	r5,r5,4
  813984:	21ffec2e 	bgeu	r4,r7,813938 <__lshift+0xe4>
  813988:	20800017 	ldw	r2,0(r4)
  81398c:	21000104 	addi	r4,r4,4
  813990:	28800015 	stw	r2,0(r5)
  813994:	29400104 	addi	r5,r5,4
  813998:	21fff636 	bltu	r4,r7,813974 <__lshift+0x120>
  81399c:	003fe606 	br	813938 <__lshift+0xe4>

008139a0 <__multiply>:
  8139a0:	defff004 	addi	sp,sp,-64
  8139a4:	dc800815 	stw	r18,32(sp)
  8139a8:	dc400715 	stw	r17,28(sp)
  8139ac:	2c800417 	ldw	r18,16(r5)
  8139b0:	34400417 	ldw	r17,16(r6)
  8139b4:	dcc00915 	stw	r19,36(sp)
  8139b8:	dc000615 	stw	r16,24(sp)
  8139bc:	dfc00f15 	stw	ra,60(sp)
  8139c0:	df000e15 	stw	fp,56(sp)
  8139c4:	ddc00d15 	stw	r23,52(sp)
  8139c8:	dd800c15 	stw	r22,48(sp)
  8139cc:	dd400b15 	stw	r21,44(sp)
  8139d0:	dd000a15 	stw	r20,40(sp)
  8139d4:	2821883a 	mov	r16,r5
  8139d8:	3027883a 	mov	r19,r6
  8139dc:	9440040e 	bge	r18,r17,8139f0 <__multiply+0x50>
  8139e0:	8825883a 	mov	r18,r17
  8139e4:	2c400417 	ldw	r17,16(r5)
  8139e8:	2827883a 	mov	r19,r5
  8139ec:	3021883a 	mov	r16,r6
  8139f0:	80800217 	ldw	r2,8(r16)
  8139f4:	9447883a 	add	r3,r18,r17
  8139f8:	d8c00415 	stw	r3,16(sp)
  8139fc:	81400117 	ldw	r5,4(r16)
  813a00:	10c0010e 	bge	r2,r3,813a08 <__multiply+0x68>
  813a04:	29400044 	addi	r5,r5,1
  813a08:	08134900 	call	813490 <_Balloc>
  813a0c:	d8800515 	stw	r2,20(sp)
  813a10:	d9000417 	ldw	r4,16(sp)
  813a14:	d8c00517 	ldw	r3,20(sp)
  813a18:	2105883a 	add	r2,r4,r4
  813a1c:	1085883a 	add	r2,r2,r2
  813a20:	19000504 	addi	r4,r3,20
  813a24:	2085883a 	add	r2,r4,r2
  813a28:	d8800315 	stw	r2,12(sp)
  813a2c:	2080052e 	bgeu	r4,r2,813a44 <__multiply+0xa4>
  813a30:	2005883a 	mov	r2,r4
  813a34:	d8c00317 	ldw	r3,12(sp)
  813a38:	10000015 	stw	zero,0(r2)
  813a3c:	10800104 	addi	r2,r2,4
  813a40:	10fffc36 	bltu	r2,r3,813a34 <__multiply+0x94>
  813a44:	8c45883a 	add	r2,r17,r17
  813a48:	9487883a 	add	r3,r18,r18
  813a4c:	9dc00504 	addi	r23,r19,20
  813a50:	1085883a 	add	r2,r2,r2
  813a54:	84000504 	addi	r16,r16,20
  813a58:	18c7883a 	add	r3,r3,r3
  813a5c:	b885883a 	add	r2,r23,r2
  813a60:	dc000015 	stw	r16,0(sp)
  813a64:	d8800215 	stw	r2,8(sp)
  813a68:	80f9883a 	add	fp,r16,r3
  813a6c:	b880432e 	bgeu	r23,r2,813b7c <__multiply+0x1dc>
  813a70:	d9000115 	stw	r4,4(sp)
  813a74:	b9000017 	ldw	r4,0(r23)
  813a78:	253fffcc 	andi	r20,r4,65535
  813a7c:	a0001a26 	beq	r20,zero,813ae8 <__multiply+0x148>
  813a80:	dcc00017 	ldw	r19,0(sp)
  813a84:	dc800117 	ldw	r18,4(sp)
  813a88:	002b883a 	mov	r21,zero
  813a8c:	9c400017 	ldw	r17,0(r19)
  813a90:	94000017 	ldw	r16,0(r18)
  813a94:	a009883a 	mov	r4,r20
  813a98:	897fffcc 	andi	r5,r17,65535
  813a9c:	080c90c0 	call	80c90c <__mulsi3>
  813aa0:	880ad43a 	srli	r5,r17,16
  813aa4:	80ffffcc 	andi	r3,r16,65535
  813aa8:	a8c7883a 	add	r3,r21,r3
  813aac:	a009883a 	mov	r4,r20
  813ab0:	10e3883a 	add	r17,r2,r3
  813ab4:	8020d43a 	srli	r16,r16,16
  813ab8:	080c90c0 	call	80c90c <__mulsi3>
  813abc:	8806d43a 	srli	r3,r17,16
  813ac0:	1405883a 	add	r2,r2,r16
  813ac4:	9cc00104 	addi	r19,r19,4
  813ac8:	1887883a 	add	r3,r3,r2
  813acc:	90c0008d 	sth	r3,2(r18)
  813ad0:	9440000d 	sth	r17,0(r18)
  813ad4:	182ad43a 	srli	r21,r3,16
  813ad8:	94800104 	addi	r18,r18,4
  813adc:	9f3feb36 	bltu	r19,fp,813a8c <__multiply+0xec>
  813ae0:	95400015 	stw	r21,0(r18)
  813ae4:	b9000017 	ldw	r4,0(r23)
  813ae8:	202ad43a 	srli	r21,r4,16
  813aec:	a8001c26 	beq	r21,zero,813b60 <__multiply+0x1c0>
  813af0:	d9000117 	ldw	r4,4(sp)
  813af4:	dd000017 	ldw	r20,0(sp)
  813af8:	002d883a 	mov	r22,zero
  813afc:	24c00017 	ldw	r19,0(r4)
  813b00:	2025883a 	mov	r18,r4
  813b04:	9823883a 	mov	r17,r19
  813b08:	a4000017 	ldw	r16,0(r20)
  813b0c:	a809883a 	mov	r4,r21
  813b10:	a5000104 	addi	r20,r20,4
  813b14:	817fffcc 	andi	r5,r16,65535
  813b18:	080c90c0 	call	80c90c <__mulsi3>
  813b1c:	8806d43a 	srli	r3,r17,16
  813b20:	800ad43a 	srli	r5,r16,16
  813b24:	94c0000d 	sth	r19,0(r18)
  813b28:	b0c7883a 	add	r3,r22,r3
  813b2c:	10e1883a 	add	r16,r2,r3
  813b30:	9400008d 	sth	r16,2(r18)
  813b34:	a809883a 	mov	r4,r21
  813b38:	94800104 	addi	r18,r18,4
  813b3c:	080c90c0 	call	80c90c <__mulsi3>
  813b40:	94400017 	ldw	r17,0(r18)
  813b44:	8020d43a 	srli	r16,r16,16
  813b48:	88ffffcc 	andi	r3,r17,65535
  813b4c:	10c5883a 	add	r2,r2,r3
  813b50:	80a7883a 	add	r19,r16,r2
  813b54:	982cd43a 	srli	r22,r19,16
  813b58:	a73feb36 	bltu	r20,fp,813b08 <__multiply+0x168>
  813b5c:	94c00015 	stw	r19,0(r18)
  813b60:	d8800217 	ldw	r2,8(sp)
  813b64:	bdc00104 	addi	r23,r23,4
  813b68:	b880042e 	bgeu	r23,r2,813b7c <__multiply+0x1dc>
  813b6c:	d8c00117 	ldw	r3,4(sp)
  813b70:	18c00104 	addi	r3,r3,4
  813b74:	d8c00115 	stw	r3,4(sp)
  813b78:	003fbe06 	br	813a74 <__multiply+0xd4>
  813b7c:	d9000417 	ldw	r4,16(sp)
  813b80:	01000c0e 	bge	zero,r4,813bb4 <__multiply+0x214>
  813b84:	d8c00317 	ldw	r3,12(sp)
  813b88:	18bfff17 	ldw	r2,-4(r3)
  813b8c:	18ffff04 	addi	r3,r3,-4
  813b90:	10000326 	beq	r2,zero,813ba0 <__multiply+0x200>
  813b94:	00000706 	br	813bb4 <__multiply+0x214>
  813b98:	18800017 	ldw	r2,0(r3)
  813b9c:	1000051e 	bne	r2,zero,813bb4 <__multiply+0x214>
  813ba0:	d9000417 	ldw	r4,16(sp)
  813ba4:	18ffff04 	addi	r3,r3,-4
  813ba8:	213fffc4 	addi	r4,r4,-1
  813bac:	d9000415 	stw	r4,16(sp)
  813bb0:	203ff91e 	bne	r4,zero,813b98 <__multiply+0x1f8>
  813bb4:	d8800417 	ldw	r2,16(sp)
  813bb8:	d8c00517 	ldw	r3,20(sp)
  813bbc:	18800415 	stw	r2,16(r3)
  813bc0:	1805883a 	mov	r2,r3
  813bc4:	dfc00f17 	ldw	ra,60(sp)
  813bc8:	df000e17 	ldw	fp,56(sp)
  813bcc:	ddc00d17 	ldw	r23,52(sp)
  813bd0:	dd800c17 	ldw	r22,48(sp)
  813bd4:	dd400b17 	ldw	r21,44(sp)
  813bd8:	dd000a17 	ldw	r20,40(sp)
  813bdc:	dcc00917 	ldw	r19,36(sp)
  813be0:	dc800817 	ldw	r18,32(sp)
  813be4:	dc400717 	ldw	r17,28(sp)
  813be8:	dc000617 	ldw	r16,24(sp)
  813bec:	dec01004 	addi	sp,sp,64
  813bf0:	f800283a 	ret

00813bf4 <__i2b>:
  813bf4:	defffd04 	addi	sp,sp,-12
  813bf8:	dc000015 	stw	r16,0(sp)
  813bfc:	04000044 	movi	r16,1
  813c00:	dc800115 	stw	r18,4(sp)
  813c04:	2825883a 	mov	r18,r5
  813c08:	800b883a 	mov	r5,r16
  813c0c:	dfc00215 	stw	ra,8(sp)
  813c10:	08134900 	call	813490 <_Balloc>
  813c14:	14000415 	stw	r16,16(r2)
  813c18:	14800515 	stw	r18,20(r2)
  813c1c:	dfc00217 	ldw	ra,8(sp)
  813c20:	dc800117 	ldw	r18,4(sp)
  813c24:	dc000017 	ldw	r16,0(sp)
  813c28:	dec00304 	addi	sp,sp,12
  813c2c:	f800283a 	ret

00813c30 <__multadd>:
  813c30:	defff604 	addi	sp,sp,-40
  813c34:	dd800615 	stw	r22,24(sp)
  813c38:	2d800417 	ldw	r22,16(r5)
  813c3c:	df000815 	stw	fp,32(sp)
  813c40:	ddc00715 	stw	r23,28(sp)
  813c44:	dd400515 	stw	r21,20(sp)
  813c48:	dd000415 	stw	r20,16(sp)
  813c4c:	dcc00315 	stw	r19,12(sp)
  813c50:	dc800215 	stw	r18,8(sp)
  813c54:	dfc00915 	stw	ra,36(sp)
  813c58:	dc400115 	stw	r17,4(sp)
  813c5c:	dc000015 	stw	r16,0(sp)
  813c60:	282f883a 	mov	r23,r5
  813c64:	2039883a 	mov	fp,r4
  813c68:	302b883a 	mov	r21,r6
  813c6c:	3829883a 	mov	r20,r7
  813c70:	2c800504 	addi	r18,r5,20
  813c74:	0027883a 	mov	r19,zero
  813c78:	94400017 	ldw	r17,0(r18)
  813c7c:	a80b883a 	mov	r5,r21
  813c80:	9cc00044 	addi	r19,r19,1
  813c84:	893fffcc 	andi	r4,r17,65535
  813c88:	080c90c0 	call	80c90c <__mulsi3>
  813c8c:	8808d43a 	srli	r4,r17,16
  813c90:	1521883a 	add	r16,r2,r20
  813c94:	a80b883a 	mov	r5,r21
  813c98:	080c90c0 	call	80c90c <__mulsi3>
  813c9c:	8008d43a 	srli	r4,r16,16
  813ca0:	843fffcc 	andi	r16,r16,65535
  813ca4:	1105883a 	add	r2,r2,r4
  813ca8:	1006943a 	slli	r3,r2,16
  813cac:	1028d43a 	srli	r20,r2,16
  813cb0:	1c07883a 	add	r3,r3,r16
  813cb4:	90c00015 	stw	r3,0(r18)
  813cb8:	94800104 	addi	r18,r18,4
  813cbc:	9dbfee16 	blt	r19,r22,813c78 <__multadd+0x48>
  813cc0:	a0000826 	beq	r20,zero,813ce4 <__multadd+0xb4>
  813cc4:	b8800217 	ldw	r2,8(r23)
  813cc8:	b080130e 	bge	r22,r2,813d18 <__multadd+0xe8>
  813ccc:	b585883a 	add	r2,r22,r22
  813cd0:	1085883a 	add	r2,r2,r2
  813cd4:	15c5883a 	add	r2,r2,r23
  813cd8:	b0c00044 	addi	r3,r22,1
  813cdc:	15000515 	stw	r20,20(r2)
  813ce0:	b8c00415 	stw	r3,16(r23)
  813ce4:	b805883a 	mov	r2,r23
  813ce8:	dfc00917 	ldw	ra,36(sp)
  813cec:	df000817 	ldw	fp,32(sp)
  813cf0:	ddc00717 	ldw	r23,28(sp)
  813cf4:	dd800617 	ldw	r22,24(sp)
  813cf8:	dd400517 	ldw	r21,20(sp)
  813cfc:	dd000417 	ldw	r20,16(sp)
  813d00:	dcc00317 	ldw	r19,12(sp)
  813d04:	dc800217 	ldw	r18,8(sp)
  813d08:	dc400117 	ldw	r17,4(sp)
  813d0c:	dc000017 	ldw	r16,0(sp)
  813d10:	dec00a04 	addi	sp,sp,40
  813d14:	f800283a 	ret
  813d18:	b9400117 	ldw	r5,4(r23)
  813d1c:	e009883a 	mov	r4,fp
  813d20:	29400044 	addi	r5,r5,1
  813d24:	08134900 	call	813490 <_Balloc>
  813d28:	b9800417 	ldw	r6,16(r23)
  813d2c:	b9400304 	addi	r5,r23,12
  813d30:	11000304 	addi	r4,r2,12
  813d34:	318d883a 	add	r6,r6,r6
  813d38:	318d883a 	add	r6,r6,r6
  813d3c:	31800204 	addi	r6,r6,8
  813d40:	1023883a 	mov	r17,r2
  813d44:	080d9a00 	call	80d9a0 <memcpy>
  813d48:	b80b883a 	mov	r5,r23
  813d4c:	e009883a 	mov	r4,fp
  813d50:	0812f100 	call	812f10 <_Bfree>
  813d54:	882f883a 	mov	r23,r17
  813d58:	003fdc06 	br	813ccc <__multadd+0x9c>

00813d5c <__pow5mult>:
  813d5c:	defffa04 	addi	sp,sp,-24
  813d60:	308000cc 	andi	r2,r6,3
  813d64:	dd000415 	stw	r20,16(sp)
  813d68:	dcc00315 	stw	r19,12(sp)
  813d6c:	dc000015 	stw	r16,0(sp)
  813d70:	dfc00515 	stw	ra,20(sp)
  813d74:	dc800215 	stw	r18,8(sp)
  813d78:	dc400115 	stw	r17,4(sp)
  813d7c:	3021883a 	mov	r16,r6
  813d80:	2027883a 	mov	r19,r4
  813d84:	2829883a 	mov	r20,r5
  813d88:	10002b1e 	bne	r2,zero,813e38 <__pow5mult+0xdc>
  813d8c:	8025d0ba 	srai	r18,r16,2
  813d90:	90001b26 	beq	r18,zero,813e00 <__pow5mult+0xa4>
  813d94:	9c001217 	ldw	r16,72(r19)
  813d98:	8000081e 	bne	r16,zero,813dbc <__pow5mult+0x60>
  813d9c:	00003006 	br	813e60 <__pow5mult+0x104>
  813da0:	800b883a 	mov	r5,r16
  813da4:	800d883a 	mov	r6,r16
  813da8:	9809883a 	mov	r4,r19
  813dac:	90001426 	beq	r18,zero,813e00 <__pow5mult+0xa4>
  813db0:	80800017 	ldw	r2,0(r16)
  813db4:	10001b26 	beq	r2,zero,813e24 <__pow5mult+0xc8>
  813db8:	1021883a 	mov	r16,r2
  813dbc:	9080004c 	andi	r2,r18,1
  813dc0:	1005003a 	cmpeq	r2,r2,zero
  813dc4:	9025d07a 	srai	r18,r18,1
  813dc8:	800d883a 	mov	r6,r16
  813dcc:	9809883a 	mov	r4,r19
  813dd0:	a00b883a 	mov	r5,r20
  813dd4:	103ff21e 	bne	r2,zero,813da0 <__pow5mult+0x44>
  813dd8:	08139a00 	call	8139a0 <__multiply>
  813ddc:	a00b883a 	mov	r5,r20
  813de0:	9809883a 	mov	r4,r19
  813de4:	1023883a 	mov	r17,r2
  813de8:	0812f100 	call	812f10 <_Bfree>
  813dec:	8829883a 	mov	r20,r17
  813df0:	800b883a 	mov	r5,r16
  813df4:	800d883a 	mov	r6,r16
  813df8:	9809883a 	mov	r4,r19
  813dfc:	903fec1e 	bne	r18,zero,813db0 <__pow5mult+0x54>
  813e00:	a005883a 	mov	r2,r20
  813e04:	dfc00517 	ldw	ra,20(sp)
  813e08:	dd000417 	ldw	r20,16(sp)
  813e0c:	dcc00317 	ldw	r19,12(sp)
  813e10:	dc800217 	ldw	r18,8(sp)
  813e14:	dc400117 	ldw	r17,4(sp)
  813e18:	dc000017 	ldw	r16,0(sp)
  813e1c:	dec00604 	addi	sp,sp,24
  813e20:	f800283a 	ret
  813e24:	08139a00 	call	8139a0 <__multiply>
  813e28:	80800015 	stw	r2,0(r16)
  813e2c:	1021883a 	mov	r16,r2
  813e30:	10000015 	stw	zero,0(r2)
  813e34:	003fe106 	br	813dbc <__pow5mult+0x60>
  813e38:	1085883a 	add	r2,r2,r2
  813e3c:	00c020b4 	movhi	r3,130
  813e40:	18c76b04 	addi	r3,r3,7596
  813e44:	1085883a 	add	r2,r2,r2
  813e48:	10c5883a 	add	r2,r2,r3
  813e4c:	11bfff17 	ldw	r6,-4(r2)
  813e50:	000f883a 	mov	r7,zero
  813e54:	0813c300 	call	813c30 <__multadd>
  813e58:	1029883a 	mov	r20,r2
  813e5c:	003fcb06 	br	813d8c <__pow5mult+0x30>
  813e60:	9809883a 	mov	r4,r19
  813e64:	01409c44 	movi	r5,625
  813e68:	0813bf40 	call	813bf4 <__i2b>
  813e6c:	98801215 	stw	r2,72(r19)
  813e70:	1021883a 	mov	r16,r2
  813e74:	10000015 	stw	zero,0(r2)
  813e78:	003fd006 	br	813dbc <__pow5mult+0x60>

00813e7c <__s2b>:
  813e7c:	defff904 	addi	sp,sp,-28
  813e80:	dcc00315 	stw	r19,12(sp)
  813e84:	dc800215 	stw	r18,8(sp)
  813e88:	2827883a 	mov	r19,r5
  813e8c:	2025883a 	mov	r18,r4
  813e90:	01400244 	movi	r5,9
  813e94:	39000204 	addi	r4,r7,8
  813e98:	dd000415 	stw	r20,16(sp)
  813e9c:	dc400115 	stw	r17,4(sp)
  813ea0:	dfc00615 	stw	ra,24(sp)
  813ea4:	dd400515 	stw	r21,20(sp)
  813ea8:	dc000015 	stw	r16,0(sp)
  813eac:	3829883a 	mov	r20,r7
  813eb0:	3023883a 	mov	r17,r6
  813eb4:	080c83c0 	call	80c83c <__divsi3>
  813eb8:	00c00044 	movi	r3,1
  813ebc:	1880350e 	bge	r3,r2,813f94 <__s2b+0x118>
  813ec0:	000b883a 	mov	r5,zero
  813ec4:	18c7883a 	add	r3,r3,r3
  813ec8:	29400044 	addi	r5,r5,1
  813ecc:	18bffd16 	blt	r3,r2,813ec4 <__s2b+0x48>
  813ed0:	9009883a 	mov	r4,r18
  813ed4:	08134900 	call	813490 <_Balloc>
  813ed8:	1011883a 	mov	r8,r2
  813edc:	d8800717 	ldw	r2,28(sp)
  813ee0:	00c00044 	movi	r3,1
  813ee4:	01800244 	movi	r6,9
  813ee8:	40800515 	stw	r2,20(r8)
  813eec:	40c00415 	stw	r3,16(r8)
  813ef0:	3440260e 	bge	r6,r17,813f8c <__s2b+0x110>
  813ef4:	3021883a 	mov	r16,r6
  813ef8:	99ab883a 	add	r21,r19,r6
  813efc:	9c05883a 	add	r2,r19,r16
  813f00:	11c00007 	ldb	r7,0(r2)
  813f04:	400b883a 	mov	r5,r8
  813f08:	9009883a 	mov	r4,r18
  813f0c:	39fff404 	addi	r7,r7,-48
  813f10:	01800284 	movi	r6,10
  813f14:	0813c300 	call	813c30 <__multadd>
  813f18:	84000044 	addi	r16,r16,1
  813f1c:	1011883a 	mov	r8,r2
  813f20:	8c3ff61e 	bne	r17,r16,813efc <__s2b+0x80>
  813f24:	ac45883a 	add	r2,r21,r17
  813f28:	117ffe04 	addi	r5,r2,-8
  813f2c:	880d883a 	mov	r6,r17
  813f30:	35000c0e 	bge	r6,r20,813f64 <__s2b+0xe8>
  813f34:	a185c83a 	sub	r2,r20,r6
  813f38:	2821883a 	mov	r16,r5
  813f3c:	28a3883a 	add	r17,r5,r2
  813f40:	81c00007 	ldb	r7,0(r16)
  813f44:	400b883a 	mov	r5,r8
  813f48:	9009883a 	mov	r4,r18
  813f4c:	39fff404 	addi	r7,r7,-48
  813f50:	01800284 	movi	r6,10
  813f54:	0813c300 	call	813c30 <__multadd>
  813f58:	84000044 	addi	r16,r16,1
  813f5c:	1011883a 	mov	r8,r2
  813f60:	847ff71e 	bne	r16,r17,813f40 <__s2b+0xc4>
  813f64:	4005883a 	mov	r2,r8
  813f68:	dfc00617 	ldw	ra,24(sp)
  813f6c:	dd400517 	ldw	r21,20(sp)
  813f70:	dd000417 	ldw	r20,16(sp)
  813f74:	dcc00317 	ldw	r19,12(sp)
  813f78:	dc800217 	ldw	r18,8(sp)
  813f7c:	dc400117 	ldw	r17,4(sp)
  813f80:	dc000017 	ldw	r16,0(sp)
  813f84:	dec00704 	addi	sp,sp,28
  813f88:	f800283a 	ret
  813f8c:	99400284 	addi	r5,r19,10
  813f90:	003fe706 	br	813f30 <__s2b+0xb4>
  813f94:	000b883a 	mov	r5,zero
  813f98:	003fcd06 	br	813ed0 <__s2b+0x54>

00813f9c <__isinfd>:
  813f9c:	200d883a 	mov	r6,r4
  813fa0:	0109c83a 	sub	r4,zero,r4
  813fa4:	2188b03a 	or	r4,r4,r6
  813fa8:	2008d7fa 	srli	r4,r4,31
  813fac:	00a00034 	movhi	r2,32768
  813fb0:	10bfffc4 	addi	r2,r2,-1
  813fb4:	1144703a 	and	r2,r2,r5
  813fb8:	2088b03a 	or	r4,r4,r2
  813fbc:	009ffc34 	movhi	r2,32752
  813fc0:	1105c83a 	sub	r2,r2,r4
  813fc4:	0087c83a 	sub	r3,zero,r2
  813fc8:	10c4b03a 	or	r2,r2,r3
  813fcc:	1004d7fa 	srli	r2,r2,31
  813fd0:	00c00044 	movi	r3,1
  813fd4:	1885c83a 	sub	r2,r3,r2
  813fd8:	f800283a 	ret

00813fdc <__sclose>:
  813fdc:	2940038f 	ldh	r5,14(r5)
  813fe0:	08143241 	jmpi	814324 <_close_r>

00813fe4 <__sseek>:
  813fe4:	defffe04 	addi	sp,sp,-8
  813fe8:	dc000015 	stw	r16,0(sp)
  813fec:	2821883a 	mov	r16,r5
  813ff0:	2940038f 	ldh	r5,14(r5)
  813ff4:	dfc00115 	stw	ra,4(sp)
  813ff8:	081459c0 	call	81459c <_lseek_r>
  813ffc:	1007883a 	mov	r3,r2
  814000:	00bfffc4 	movi	r2,-1
  814004:	18800926 	beq	r3,r2,81402c <__sseek+0x48>
  814008:	8080030b 	ldhu	r2,12(r16)
  81400c:	80c01415 	stw	r3,80(r16)
  814010:	10840014 	ori	r2,r2,4096
  814014:	8080030d 	sth	r2,12(r16)
  814018:	1805883a 	mov	r2,r3
  81401c:	dfc00117 	ldw	ra,4(sp)
  814020:	dc000017 	ldw	r16,0(sp)
  814024:	dec00204 	addi	sp,sp,8
  814028:	f800283a 	ret
  81402c:	8080030b 	ldhu	r2,12(r16)
  814030:	10bbffcc 	andi	r2,r2,61439
  814034:	8080030d 	sth	r2,12(r16)
  814038:	1805883a 	mov	r2,r3
  81403c:	dfc00117 	ldw	ra,4(sp)
  814040:	dc000017 	ldw	r16,0(sp)
  814044:	dec00204 	addi	sp,sp,8
  814048:	f800283a 	ret

0081404c <__swrite>:
  81404c:	2880030b 	ldhu	r2,12(r5)
  814050:	defffb04 	addi	sp,sp,-20
  814054:	dcc00315 	stw	r19,12(sp)
  814058:	1080400c 	andi	r2,r2,256
  81405c:	dc800215 	stw	r18,8(sp)
  814060:	dc400115 	stw	r17,4(sp)
  814064:	dc000015 	stw	r16,0(sp)
  814068:	3027883a 	mov	r19,r6
  81406c:	3825883a 	mov	r18,r7
  814070:	dfc00415 	stw	ra,16(sp)
  814074:	2821883a 	mov	r16,r5
  814078:	000d883a 	mov	r6,zero
  81407c:	01c00084 	movi	r7,2
  814080:	2023883a 	mov	r17,r4
  814084:	10000226 	beq	r2,zero,814090 <__swrite+0x44>
  814088:	2940038f 	ldh	r5,14(r5)
  81408c:	081459c0 	call	81459c <_lseek_r>
  814090:	8080030b 	ldhu	r2,12(r16)
  814094:	8140038f 	ldh	r5,14(r16)
  814098:	8809883a 	mov	r4,r17
  81409c:	10bbffcc 	andi	r2,r2,61439
  8140a0:	980d883a 	mov	r6,r19
  8140a4:	900f883a 	mov	r7,r18
  8140a8:	8080030d 	sth	r2,12(r16)
  8140ac:	dfc00417 	ldw	ra,16(sp)
  8140b0:	dcc00317 	ldw	r19,12(sp)
  8140b4:	dc800217 	ldw	r18,8(sp)
  8140b8:	dc400117 	ldw	r17,4(sp)
  8140bc:	dc000017 	ldw	r16,0(sp)
  8140c0:	dec00504 	addi	sp,sp,20
  8140c4:	08141e41 	jmpi	8141e4 <_write_r>

008140c8 <__sread>:
  8140c8:	defffe04 	addi	sp,sp,-8
  8140cc:	dc000015 	stw	r16,0(sp)
  8140d0:	2821883a 	mov	r16,r5
  8140d4:	2940038f 	ldh	r5,14(r5)
  8140d8:	dfc00115 	stw	ra,4(sp)
  8140dc:	08146140 	call	814614 <_read_r>
  8140e0:	1007883a 	mov	r3,r2
  8140e4:	10000816 	blt	r2,zero,814108 <__sread+0x40>
  8140e8:	80801417 	ldw	r2,80(r16)
  8140ec:	10c5883a 	add	r2,r2,r3
  8140f0:	80801415 	stw	r2,80(r16)
  8140f4:	1805883a 	mov	r2,r3
  8140f8:	dfc00117 	ldw	ra,4(sp)
  8140fc:	dc000017 	ldw	r16,0(sp)
  814100:	dec00204 	addi	sp,sp,8
  814104:	f800283a 	ret
  814108:	8080030b 	ldhu	r2,12(r16)
  81410c:	10bbffcc 	andi	r2,r2,61439
  814110:	8080030d 	sth	r2,12(r16)
  814114:	1805883a 	mov	r2,r3
  814118:	dfc00117 	ldw	ra,4(sp)
  81411c:	dc000017 	ldw	r16,0(sp)
  814120:	dec00204 	addi	sp,sp,8
  814124:	f800283a 	ret

00814128 <strcmp>:
  814128:	2144b03a 	or	r2,r4,r5
  81412c:	108000cc 	andi	r2,r2,3
  814130:	10001d1e 	bne	r2,zero,8141a8 <strcmp+0x80>
  814134:	200f883a 	mov	r7,r4
  814138:	28800017 	ldw	r2,0(r5)
  81413c:	21000017 	ldw	r4,0(r4)
  814140:	280d883a 	mov	r6,r5
  814144:	2080161e 	bne	r4,r2,8141a0 <strcmp+0x78>
  814148:	023fbff4 	movhi	r8,65279
  81414c:	423fbfc4 	addi	r8,r8,-257
  814150:	2207883a 	add	r3,r4,r8
  814154:	01602074 	movhi	r5,32897
  814158:	29602004 	addi	r5,r5,-32640
  81415c:	1946703a 	and	r3,r3,r5
  814160:	0104303a 	nor	r2,zero,r4
  814164:	10c4703a 	and	r2,r2,r3
  814168:	10001c1e 	bne	r2,zero,8141dc <strcmp+0xb4>
  81416c:	4013883a 	mov	r9,r8
  814170:	2811883a 	mov	r8,r5
  814174:	00000106 	br	81417c <strcmp+0x54>
  814178:	1800181e 	bne	r3,zero,8141dc <strcmp+0xb4>
  81417c:	39c00104 	addi	r7,r7,4
  814180:	39000017 	ldw	r4,0(r7)
  814184:	31800104 	addi	r6,r6,4
  814188:	31400017 	ldw	r5,0(r6)
  81418c:	2245883a 	add	r2,r4,r9
  814190:	1204703a 	and	r2,r2,r8
  814194:	0106303a 	nor	r3,zero,r4
  814198:	1886703a 	and	r3,r3,r2
  81419c:	217ff626 	beq	r4,r5,814178 <strcmp+0x50>
  8141a0:	3809883a 	mov	r4,r7
  8141a4:	300b883a 	mov	r5,r6
  8141a8:	20c00007 	ldb	r3,0(r4)
  8141ac:	1800051e 	bne	r3,zero,8141c4 <strcmp+0x9c>
  8141b0:	00000606 	br	8141cc <strcmp+0xa4>
  8141b4:	21000044 	addi	r4,r4,1
  8141b8:	20c00007 	ldb	r3,0(r4)
  8141bc:	29400044 	addi	r5,r5,1
  8141c0:	18000226 	beq	r3,zero,8141cc <strcmp+0xa4>
  8141c4:	28800007 	ldb	r2,0(r5)
  8141c8:	18bffa26 	beq	r3,r2,8141b4 <strcmp+0x8c>
  8141cc:	20c00003 	ldbu	r3,0(r4)
  8141d0:	28800003 	ldbu	r2,0(r5)
  8141d4:	1885c83a 	sub	r2,r3,r2
  8141d8:	f800283a 	ret
  8141dc:	0005883a 	mov	r2,zero
  8141e0:	f800283a 	ret

008141e4 <_write_r>:
  8141e4:	defffd04 	addi	sp,sp,-12
  8141e8:	dc000015 	stw	r16,0(sp)
  8141ec:	040020b4 	movhi	r16,130
  8141f0:	84157304 	addi	r16,r16,21964
  8141f4:	dc400115 	stw	r17,4(sp)
  8141f8:	80000015 	stw	zero,0(r16)
  8141fc:	2023883a 	mov	r17,r4
  814200:	2809883a 	mov	r4,r5
  814204:	300b883a 	mov	r5,r6
  814208:	380d883a 	mov	r6,r7
  81420c:	dfc00215 	stw	ra,8(sp)
  814210:	0815f880 	call	815f88 <write>
  814214:	1007883a 	mov	r3,r2
  814218:	00bfffc4 	movi	r2,-1
  81421c:	18800626 	beq	r3,r2,814238 <_write_r+0x54>
  814220:	1805883a 	mov	r2,r3
  814224:	dfc00217 	ldw	ra,8(sp)
  814228:	dc400117 	ldw	r17,4(sp)
  81422c:	dc000017 	ldw	r16,0(sp)
  814230:	dec00304 	addi	sp,sp,12
  814234:	f800283a 	ret
  814238:	80800017 	ldw	r2,0(r16)
  81423c:	103ff826 	beq	r2,zero,814220 <_write_r+0x3c>
  814240:	88800015 	stw	r2,0(r17)
  814244:	1805883a 	mov	r2,r3
  814248:	dfc00217 	ldw	ra,8(sp)
  81424c:	dc400117 	ldw	r17,4(sp)
  814250:	dc000017 	ldw	r16,0(sp)
  814254:	dec00304 	addi	sp,sp,12
  814258:	f800283a 	ret

0081425c <_calloc_r>:
  81425c:	defffe04 	addi	sp,sp,-8
  814260:	dc400015 	stw	r17,0(sp)
  814264:	2023883a 	mov	r17,r4
  814268:	2809883a 	mov	r4,r5
  81426c:	300b883a 	mov	r5,r6
  814270:	dfc00115 	stw	ra,4(sp)
  814274:	080c90c0 	call	80c90c <__mulsi3>
  814278:	100b883a 	mov	r5,r2
  81427c:	8809883a 	mov	r4,r17
  814280:	080d2600 	call	80d260 <_malloc_r>
  814284:	1023883a 	mov	r17,r2
  814288:	01c00904 	movi	r7,36
  81428c:	10000d26 	beq	r2,zero,8142c4 <_calloc_r+0x68>
  814290:	10ffff17 	ldw	r3,-4(r2)
  814294:	1009883a 	mov	r4,r2
  814298:	00bfff04 	movi	r2,-4
  81429c:	1886703a 	and	r3,r3,r2
  8142a0:	1887883a 	add	r3,r3,r2
  8142a4:	180d883a 	mov	r6,r3
  8142a8:	000b883a 	mov	r5,zero
  8142ac:	38c01736 	bltu	r7,r3,81430c <_calloc_r+0xb0>
  8142b0:	008004c4 	movi	r2,19
  8142b4:	10c00836 	bltu	r2,r3,8142d8 <_calloc_r+0x7c>
  8142b8:	20000215 	stw	zero,8(r4)
  8142bc:	20000015 	stw	zero,0(r4)
  8142c0:	20000115 	stw	zero,4(r4)
  8142c4:	8805883a 	mov	r2,r17
  8142c8:	dfc00117 	ldw	ra,4(sp)
  8142cc:	dc400017 	ldw	r17,0(sp)
  8142d0:	dec00204 	addi	sp,sp,8
  8142d4:	f800283a 	ret
  8142d8:	008006c4 	movi	r2,27
  8142dc:	88000015 	stw	zero,0(r17)
  8142e0:	88000115 	stw	zero,4(r17)
  8142e4:	89000204 	addi	r4,r17,8
  8142e8:	10fff32e 	bgeu	r2,r3,8142b8 <_calloc_r+0x5c>
  8142ec:	88000215 	stw	zero,8(r17)
  8142f0:	88000315 	stw	zero,12(r17)
  8142f4:	89000404 	addi	r4,r17,16
  8142f8:	19ffef1e 	bne	r3,r7,8142b8 <_calloc_r+0x5c>
  8142fc:	89000604 	addi	r4,r17,24
  814300:	88000415 	stw	zero,16(r17)
  814304:	88000515 	stw	zero,20(r17)
  814308:	003feb06 	br	8142b8 <_calloc_r+0x5c>
  81430c:	0812e780 	call	812e78 <memset>
  814310:	8805883a 	mov	r2,r17
  814314:	dfc00117 	ldw	ra,4(sp)
  814318:	dc400017 	ldw	r17,0(sp)
  81431c:	dec00204 	addi	sp,sp,8
  814320:	f800283a 	ret

00814324 <_close_r>:
  814324:	defffd04 	addi	sp,sp,-12
  814328:	dc000015 	stw	r16,0(sp)
  81432c:	040020b4 	movhi	r16,130
  814330:	84157304 	addi	r16,r16,21964
  814334:	dc400115 	stw	r17,4(sp)
  814338:	80000015 	stw	zero,0(r16)
  81433c:	2023883a 	mov	r17,r4
  814340:	2809883a 	mov	r4,r5
  814344:	dfc00215 	stw	ra,8(sp)
  814348:	08154ec0 	call	8154ec <close>
  81434c:	1007883a 	mov	r3,r2
  814350:	00bfffc4 	movi	r2,-1
  814354:	18800626 	beq	r3,r2,814370 <_close_r+0x4c>
  814358:	1805883a 	mov	r2,r3
  81435c:	dfc00217 	ldw	ra,8(sp)
  814360:	dc400117 	ldw	r17,4(sp)
  814364:	dc000017 	ldw	r16,0(sp)
  814368:	dec00304 	addi	sp,sp,12
  81436c:	f800283a 	ret
  814370:	80800017 	ldw	r2,0(r16)
  814374:	103ff826 	beq	r2,zero,814358 <_close_r+0x34>
  814378:	88800015 	stw	r2,0(r17)
  81437c:	1805883a 	mov	r2,r3
  814380:	dfc00217 	ldw	ra,8(sp)
  814384:	dc400117 	ldw	r17,4(sp)
  814388:	dc000017 	ldw	r16,0(sp)
  81438c:	dec00304 	addi	sp,sp,12
  814390:	f800283a 	ret

00814394 <_fclose_r>:
  814394:	defffc04 	addi	sp,sp,-16
  814398:	dc400115 	stw	r17,4(sp)
  81439c:	dc000015 	stw	r16,0(sp)
  8143a0:	dfc00315 	stw	ra,12(sp)
  8143a4:	dc800215 	stw	r18,8(sp)
  8143a8:	2821883a 	mov	r16,r5
  8143ac:	2023883a 	mov	r17,r4
  8143b0:	28002926 	beq	r5,zero,814458 <_fclose_r+0xc4>
  8143b4:	0811d640 	call	811d64 <__sfp_lock_acquire>
  8143b8:	88000226 	beq	r17,zero,8143c4 <_fclose_r+0x30>
  8143bc:	88800e17 	ldw	r2,56(r17)
  8143c0:	10002d26 	beq	r2,zero,814478 <_fclose_r+0xe4>
  8143c4:	8080030f 	ldh	r2,12(r16)
  8143c8:	10002226 	beq	r2,zero,814454 <_fclose_r+0xc0>
  8143cc:	8809883a 	mov	r4,r17
  8143d0:	800b883a 	mov	r5,r16
  8143d4:	0811adc0 	call	811adc <_fflush_r>
  8143d8:	1025883a 	mov	r18,r2
  8143dc:	80800b17 	ldw	r2,44(r16)
  8143e0:	10000426 	beq	r2,zero,8143f4 <_fclose_r+0x60>
  8143e4:	81400717 	ldw	r5,28(r16)
  8143e8:	8809883a 	mov	r4,r17
  8143ec:	103ee83a 	callr	r2
  8143f0:	10002a16 	blt	r2,zero,81449c <_fclose_r+0x108>
  8143f4:	8080030b 	ldhu	r2,12(r16)
  8143f8:	1080200c 	andi	r2,r2,128
  8143fc:	1000231e 	bne	r2,zero,81448c <_fclose_r+0xf8>
  814400:	81400c17 	ldw	r5,48(r16)
  814404:	28000526 	beq	r5,zero,81441c <_fclose_r+0x88>
  814408:	80801004 	addi	r2,r16,64
  81440c:	28800226 	beq	r5,r2,814418 <_fclose_r+0x84>
  814410:	8809883a 	mov	r4,r17
  814414:	081212c0 	call	81212c <_free_r>
  814418:	80000c15 	stw	zero,48(r16)
  81441c:	81401117 	ldw	r5,68(r16)
  814420:	28000326 	beq	r5,zero,814430 <_fclose_r+0x9c>
  814424:	8809883a 	mov	r4,r17
  814428:	081212c0 	call	81212c <_free_r>
  81442c:	80001115 	stw	zero,68(r16)
  814430:	8000030d 	sth	zero,12(r16)
  814434:	0811d680 	call	811d68 <__sfp_lock_release>
  814438:	9005883a 	mov	r2,r18
  81443c:	dfc00317 	ldw	ra,12(sp)
  814440:	dc800217 	ldw	r18,8(sp)
  814444:	dc400117 	ldw	r17,4(sp)
  814448:	dc000017 	ldw	r16,0(sp)
  81444c:	dec00404 	addi	sp,sp,16
  814450:	f800283a 	ret
  814454:	0811d680 	call	811d68 <__sfp_lock_release>
  814458:	0025883a 	mov	r18,zero
  81445c:	9005883a 	mov	r2,r18
  814460:	dfc00317 	ldw	ra,12(sp)
  814464:	dc800217 	ldw	r18,8(sp)
  814468:	dc400117 	ldw	r17,4(sp)
  81446c:	dc000017 	ldw	r16,0(sp)
  814470:	dec00404 	addi	sp,sp,16
  814474:	f800283a 	ret
  814478:	8809883a 	mov	r4,r17
  81447c:	0811d740 	call	811d74 <__sinit>
  814480:	8080030f 	ldh	r2,12(r16)
  814484:	103fd11e 	bne	r2,zero,8143cc <_fclose_r+0x38>
  814488:	003ff206 	br	814454 <_fclose_r+0xc0>
  81448c:	81400417 	ldw	r5,16(r16)
  814490:	8809883a 	mov	r4,r17
  814494:	081212c0 	call	81212c <_free_r>
  814498:	003fd906 	br	814400 <_fclose_r+0x6c>
  81449c:	04bfffc4 	movi	r18,-1
  8144a0:	003fd406 	br	8143f4 <_fclose_r+0x60>

008144a4 <fclose>:
  8144a4:	008020b4 	movhi	r2,130
  8144a8:	108e6f04 	addi	r2,r2,14780
  8144ac:	200b883a 	mov	r5,r4
  8144b0:	11000017 	ldw	r4,0(r2)
  8144b4:	08143941 	jmpi	814394 <_fclose_r>

008144b8 <_fstat_r>:
  8144b8:	defffd04 	addi	sp,sp,-12
  8144bc:	dc000015 	stw	r16,0(sp)
  8144c0:	040020b4 	movhi	r16,130
  8144c4:	84157304 	addi	r16,r16,21964
  8144c8:	dc400115 	stw	r17,4(sp)
  8144cc:	80000015 	stw	zero,0(r16)
  8144d0:	2023883a 	mov	r17,r4
  8144d4:	2809883a 	mov	r4,r5
  8144d8:	300b883a 	mov	r5,r6
  8144dc:	dfc00215 	stw	ra,8(sp)
  8144e0:	08156780 	call	815678 <fstat>
  8144e4:	1007883a 	mov	r3,r2
  8144e8:	00bfffc4 	movi	r2,-1
  8144ec:	18800626 	beq	r3,r2,814508 <_fstat_r+0x50>
  8144f0:	1805883a 	mov	r2,r3
  8144f4:	dfc00217 	ldw	ra,8(sp)
  8144f8:	dc400117 	ldw	r17,4(sp)
  8144fc:	dc000017 	ldw	r16,0(sp)
  814500:	dec00304 	addi	sp,sp,12
  814504:	f800283a 	ret
  814508:	80800017 	ldw	r2,0(r16)
  81450c:	103ff826 	beq	r2,zero,8144f0 <_fstat_r+0x38>
  814510:	88800015 	stw	r2,0(r17)
  814514:	1805883a 	mov	r2,r3
  814518:	dfc00217 	ldw	ra,8(sp)
  81451c:	dc400117 	ldw	r17,4(sp)
  814520:	dc000017 	ldw	r16,0(sp)
  814524:	dec00304 	addi	sp,sp,12
  814528:	f800283a 	ret

0081452c <_isatty_r>:
  81452c:	defffd04 	addi	sp,sp,-12
  814530:	dc000015 	stw	r16,0(sp)
  814534:	040020b4 	movhi	r16,130
  814538:	84157304 	addi	r16,r16,21964
  81453c:	dc400115 	stw	r17,4(sp)
  814540:	80000015 	stw	zero,0(r16)
  814544:	2023883a 	mov	r17,r4
  814548:	2809883a 	mov	r4,r5
  81454c:	dfc00215 	stw	ra,8(sp)
  814550:	08157b00 	call	8157b0 <isatty>
  814554:	1007883a 	mov	r3,r2
  814558:	00bfffc4 	movi	r2,-1
  81455c:	18800626 	beq	r3,r2,814578 <_isatty_r+0x4c>
  814560:	1805883a 	mov	r2,r3
  814564:	dfc00217 	ldw	ra,8(sp)
  814568:	dc400117 	ldw	r17,4(sp)
  81456c:	dc000017 	ldw	r16,0(sp)
  814570:	dec00304 	addi	sp,sp,12
  814574:	f800283a 	ret
  814578:	80800017 	ldw	r2,0(r16)
  81457c:	103ff826 	beq	r2,zero,814560 <_isatty_r+0x34>
  814580:	88800015 	stw	r2,0(r17)
  814584:	1805883a 	mov	r2,r3
  814588:	dfc00217 	ldw	ra,8(sp)
  81458c:	dc400117 	ldw	r17,4(sp)
  814590:	dc000017 	ldw	r16,0(sp)
  814594:	dec00304 	addi	sp,sp,12
  814598:	f800283a 	ret

0081459c <_lseek_r>:
  81459c:	defffd04 	addi	sp,sp,-12
  8145a0:	dc000015 	stw	r16,0(sp)
  8145a4:	040020b4 	movhi	r16,130
  8145a8:	84157304 	addi	r16,r16,21964
  8145ac:	dc400115 	stw	r17,4(sp)
  8145b0:	80000015 	stw	zero,0(r16)
  8145b4:	2023883a 	mov	r17,r4
  8145b8:	2809883a 	mov	r4,r5
  8145bc:	300b883a 	mov	r5,r6
  8145c0:	380d883a 	mov	r6,r7
  8145c4:	dfc00215 	stw	ra,8(sp)
  8145c8:	08159c00 	call	8159c0 <lseek>
  8145cc:	1007883a 	mov	r3,r2
  8145d0:	00bfffc4 	movi	r2,-1
  8145d4:	18800626 	beq	r3,r2,8145f0 <_lseek_r+0x54>
  8145d8:	1805883a 	mov	r2,r3
  8145dc:	dfc00217 	ldw	ra,8(sp)
  8145e0:	dc400117 	ldw	r17,4(sp)
  8145e4:	dc000017 	ldw	r16,0(sp)
  8145e8:	dec00304 	addi	sp,sp,12
  8145ec:	f800283a 	ret
  8145f0:	80800017 	ldw	r2,0(r16)
  8145f4:	103ff826 	beq	r2,zero,8145d8 <_lseek_r+0x3c>
  8145f8:	88800015 	stw	r2,0(r17)
  8145fc:	1805883a 	mov	r2,r3
  814600:	dfc00217 	ldw	ra,8(sp)
  814604:	dc400117 	ldw	r17,4(sp)
  814608:	dc000017 	ldw	r16,0(sp)
  81460c:	dec00304 	addi	sp,sp,12
  814610:	f800283a 	ret

00814614 <_read_r>:
  814614:	defffd04 	addi	sp,sp,-12
  814618:	dc000015 	stw	r16,0(sp)
  81461c:	040020b4 	movhi	r16,130
  814620:	84157304 	addi	r16,r16,21964
  814624:	dc400115 	stw	r17,4(sp)
  814628:	80000015 	stw	zero,0(r16)
  81462c:	2023883a 	mov	r17,r4
  814630:	2809883a 	mov	r4,r5
  814634:	300b883a 	mov	r5,r6
  814638:	380d883a 	mov	r6,r7
  81463c:	dfc00215 	stw	ra,8(sp)
  814640:	0815bdc0 	call	815bdc <read>
  814644:	1007883a 	mov	r3,r2
  814648:	00bfffc4 	movi	r2,-1
  81464c:	18800626 	beq	r3,r2,814668 <_read_r+0x54>
  814650:	1805883a 	mov	r2,r3
  814654:	dfc00217 	ldw	ra,8(sp)
  814658:	dc400117 	ldw	r17,4(sp)
  81465c:	dc000017 	ldw	r16,0(sp)
  814660:	dec00304 	addi	sp,sp,12
  814664:	f800283a 	ret
  814668:	80800017 	ldw	r2,0(r16)
  81466c:	103ff826 	beq	r2,zero,814650 <_read_r+0x3c>
  814670:	88800015 	stw	r2,0(r17)
  814674:	1805883a 	mov	r2,r3
  814678:	dfc00217 	ldw	ra,8(sp)
  81467c:	dc400117 	ldw	r17,4(sp)
  814680:	dc000017 	ldw	r16,0(sp)
  814684:	dec00304 	addi	sp,sp,12
  814688:	f800283a 	ret

0081468c <__udivdi3>:
  81468c:	defff104 	addi	sp,sp,-60
  814690:	0015883a 	mov	r10,zero
  814694:	2005883a 	mov	r2,r4
  814698:	3011883a 	mov	r8,r6
  81469c:	df000d15 	stw	fp,52(sp)
  8146a0:	dd400a15 	stw	r21,40(sp)
  8146a4:	dcc00815 	stw	r19,32(sp)
  8146a8:	dfc00e15 	stw	ra,56(sp)
  8146ac:	ddc00c15 	stw	r23,48(sp)
  8146b0:	dd800b15 	stw	r22,44(sp)
  8146b4:	dd000915 	stw	r20,36(sp)
  8146b8:	dc800715 	stw	r18,28(sp)
  8146bc:	dc400615 	stw	r17,24(sp)
  8146c0:	dc000515 	stw	r16,20(sp)
  8146c4:	da800315 	stw	r10,12(sp)
  8146c8:	4027883a 	mov	r19,r8
  8146cc:	1039883a 	mov	fp,r2
  8146d0:	282b883a 	mov	r21,r5
  8146d4:	da800415 	stw	r10,16(sp)
  8146d8:	3800401e 	bne	r7,zero,8147dc <__udivdi3+0x150>
  8146dc:	2a006536 	bltu	r5,r8,814874 <__udivdi3+0x1e8>
  8146e0:	4000b526 	beq	r8,zero,8149b8 <__udivdi3+0x32c>
  8146e4:	00bfffd4 	movui	r2,65535
  8146e8:	14c0ad36 	bltu	r2,r19,8149a0 <__udivdi3+0x314>
  8146ec:	00803fc4 	movi	r2,255
  8146f0:	14c15e36 	bltu	r2,r19,814c6c <__udivdi3+0x5e0>
  8146f4:	000b883a 	mov	r5,zero
  8146f8:	0005883a 	mov	r2,zero
  8146fc:	9884d83a 	srl	r2,r19,r2
  814700:	010020b4 	movhi	r4,130
  814704:	2106b004 	addi	r4,r4,6848
  814708:	01800804 	movi	r6,32
  81470c:	1105883a 	add	r2,r2,r4
  814710:	10c00003 	ldbu	r3,0(r2)
  814714:	28c7883a 	add	r3,r5,r3
  814718:	30e9c83a 	sub	r20,r6,r3
  81471c:	a0010a1e 	bne	r20,zero,814b48 <__udivdi3+0x4bc>
  814720:	982ed43a 	srli	r23,r19,16
  814724:	acebc83a 	sub	r21,r21,r19
  814728:	9dbfffcc 	andi	r22,r19,65535
  81472c:	05000044 	movi	r20,1
  814730:	a809883a 	mov	r4,r21
  814734:	b80b883a 	mov	r5,r23
  814738:	080c8fc0 	call	80c8fc <__udivsi3>
  81473c:	100b883a 	mov	r5,r2
  814740:	b009883a 	mov	r4,r22
  814744:	1021883a 	mov	r16,r2
  814748:	080c90c0 	call	80c90c <__mulsi3>
  81474c:	a809883a 	mov	r4,r21
  814750:	b80b883a 	mov	r5,r23
  814754:	1023883a 	mov	r17,r2
  814758:	080c9040 	call	80c904 <__umodsi3>
  81475c:	1004943a 	slli	r2,r2,16
  814760:	e006d43a 	srli	r3,fp,16
  814764:	10c4b03a 	or	r2,r2,r3
  814768:	1440042e 	bgeu	r2,r17,81477c <__udivdi3+0xf0>
  81476c:	14c5883a 	add	r2,r2,r19
  814770:	843fffc4 	addi	r16,r16,-1
  814774:	14c00136 	bltu	r2,r19,81477c <__udivdi3+0xf0>
  814778:	14415c36 	bltu	r2,r17,814cec <__udivdi3+0x660>
  81477c:	1463c83a 	sub	r17,r2,r17
  814780:	8809883a 	mov	r4,r17
  814784:	b80b883a 	mov	r5,r23
  814788:	080c8fc0 	call	80c8fc <__udivsi3>
  81478c:	100b883a 	mov	r5,r2
  814790:	b009883a 	mov	r4,r22
  814794:	102b883a 	mov	r21,r2
  814798:	080c90c0 	call	80c90c <__mulsi3>
  81479c:	8809883a 	mov	r4,r17
  8147a0:	b80b883a 	mov	r5,r23
  8147a4:	1025883a 	mov	r18,r2
  8147a8:	080c9040 	call	80c904 <__umodsi3>
  8147ac:	1004943a 	slli	r2,r2,16
  8147b0:	e0ffffcc 	andi	r3,fp,65535
  8147b4:	10c4b03a 	or	r2,r2,r3
  8147b8:	1480042e 	bgeu	r2,r18,8147cc <__udivdi3+0x140>
  8147bc:	9885883a 	add	r2,r19,r2
  8147c0:	ad7fffc4 	addi	r21,r21,-1
  8147c4:	14c00136 	bltu	r2,r19,8147cc <__udivdi3+0x140>
  8147c8:	14813c36 	bltu	r2,r18,814cbc <__udivdi3+0x630>
  8147cc:	8004943a 	slli	r2,r16,16
  8147d0:	a009883a 	mov	r4,r20
  8147d4:	a884b03a 	or	r2,r21,r2
  8147d8:	00001506 	br	814830 <__udivdi3+0x1a4>
  8147dc:	380d883a 	mov	r6,r7
  8147e0:	29c06c36 	bltu	r5,r7,814994 <__udivdi3+0x308>
  8147e4:	00bfffd4 	movui	r2,65535
  8147e8:	11c06436 	bltu	r2,r7,81497c <__udivdi3+0x2f0>
  8147ec:	00803fc4 	movi	r2,255
  8147f0:	11c11836 	bltu	r2,r7,814c54 <__udivdi3+0x5c8>
  8147f4:	000b883a 	mov	r5,zero
  8147f8:	0005883a 	mov	r2,zero
  8147fc:	3084d83a 	srl	r2,r6,r2
  814800:	010020b4 	movhi	r4,130
  814804:	2106b004 	addi	r4,r4,6848
  814808:	01c00804 	movi	r7,32
  81480c:	1105883a 	add	r2,r2,r4
  814810:	10c00003 	ldbu	r3,0(r2)
  814814:	28c7883a 	add	r3,r5,r3
  814818:	38edc83a 	sub	r22,r7,r3
  81481c:	b000731e 	bne	r22,zero,8149ec <__udivdi3+0x360>
  814820:	35400136 	bltu	r6,r21,814828 <__udivdi3+0x19c>
  814824:	e4c05b36 	bltu	fp,r19,814994 <__udivdi3+0x308>
  814828:	00800044 	movi	r2,1
  81482c:	0009883a 	mov	r4,zero
  814830:	d8800315 	stw	r2,12(sp)
  814834:	d9400317 	ldw	r5,12(sp)
  814838:	2007883a 	mov	r3,r4
  81483c:	d9000415 	stw	r4,16(sp)
  814840:	2805883a 	mov	r2,r5
  814844:	dfc00e17 	ldw	ra,56(sp)
  814848:	df000d17 	ldw	fp,52(sp)
  81484c:	ddc00c17 	ldw	r23,48(sp)
  814850:	dd800b17 	ldw	r22,44(sp)
  814854:	dd400a17 	ldw	r21,40(sp)
  814858:	dd000917 	ldw	r20,36(sp)
  81485c:	dcc00817 	ldw	r19,32(sp)
  814860:	dc800717 	ldw	r18,28(sp)
  814864:	dc400617 	ldw	r17,24(sp)
  814868:	dc000517 	ldw	r16,20(sp)
  81486c:	dec00f04 	addi	sp,sp,60
  814870:	f800283a 	ret
  814874:	00bfffd4 	movui	r2,65535
  814878:	12005636 	bltu	r2,r8,8149d4 <__udivdi3+0x348>
  81487c:	00803fc4 	movi	r2,255
  814880:	12010036 	bltu	r2,r8,814c84 <__udivdi3+0x5f8>
  814884:	000b883a 	mov	r5,zero
  814888:	0005883a 	mov	r2,zero
  81488c:	9884d83a 	srl	r2,r19,r2
  814890:	010020b4 	movhi	r4,130
  814894:	2106b004 	addi	r4,r4,6848
  814898:	01800804 	movi	r6,32
  81489c:	1105883a 	add	r2,r2,r4
  8148a0:	10c00003 	ldbu	r3,0(r2)
  8148a4:	28c7883a 	add	r3,r5,r3
  8148a8:	30cbc83a 	sub	r5,r6,r3
  8148ac:	28000626 	beq	r5,zero,8148c8 <__udivdi3+0x23c>
  8148b0:	3145c83a 	sub	r2,r6,r5
  8148b4:	e084d83a 	srl	r2,fp,r2
  8148b8:	a946983a 	sll	r3,r21,r5
  8148bc:	e178983a 	sll	fp,fp,r5
  8148c0:	9966983a 	sll	r19,r19,r5
  8148c4:	18aab03a 	or	r21,r3,r2
  8148c8:	982ed43a 	srli	r23,r19,16
  8148cc:	a809883a 	mov	r4,r21
  8148d0:	9cbfffcc 	andi	r18,r19,65535
  8148d4:	b80b883a 	mov	r5,r23
  8148d8:	080c8fc0 	call	80c8fc <__udivsi3>
  8148dc:	100b883a 	mov	r5,r2
  8148e0:	9009883a 	mov	r4,r18
  8148e4:	1021883a 	mov	r16,r2
  8148e8:	080c90c0 	call	80c90c <__mulsi3>
  8148ec:	a809883a 	mov	r4,r21
  8148f0:	b80b883a 	mov	r5,r23
  8148f4:	1023883a 	mov	r17,r2
  8148f8:	080c9040 	call	80c904 <__umodsi3>
  8148fc:	1004943a 	slli	r2,r2,16
  814900:	e006d43a 	srli	r3,fp,16
  814904:	10c4b03a 	or	r2,r2,r3
  814908:	1440042e 	bgeu	r2,r17,81491c <__udivdi3+0x290>
  81490c:	14c5883a 	add	r2,r2,r19
  814910:	843fffc4 	addi	r16,r16,-1
  814914:	14c00136 	bltu	r2,r19,81491c <__udivdi3+0x290>
  814918:	1440ea36 	bltu	r2,r17,814cc4 <__udivdi3+0x638>
  81491c:	1463c83a 	sub	r17,r2,r17
  814920:	8809883a 	mov	r4,r17
  814924:	b80b883a 	mov	r5,r23
  814928:	080c8fc0 	call	80c8fc <__udivsi3>
  81492c:	100b883a 	mov	r5,r2
  814930:	9009883a 	mov	r4,r18
  814934:	102b883a 	mov	r21,r2
  814938:	080c90c0 	call	80c90c <__mulsi3>
  81493c:	8809883a 	mov	r4,r17
  814940:	b80b883a 	mov	r5,r23
  814944:	1025883a 	mov	r18,r2
  814948:	080c9040 	call	80c904 <__umodsi3>
  81494c:	1004943a 	slli	r2,r2,16
  814950:	e0ffffcc 	andi	r3,fp,65535
  814954:	10c4b03a 	or	r2,r2,r3
  814958:	1480042e 	bgeu	r2,r18,81496c <__udivdi3+0x2e0>
  81495c:	9885883a 	add	r2,r19,r2
  814960:	ad7fffc4 	addi	r21,r21,-1
  814964:	14c00136 	bltu	r2,r19,81496c <__udivdi3+0x2e0>
  814968:	1480d936 	bltu	r2,r18,814cd0 <__udivdi3+0x644>
  81496c:	8004943a 	slli	r2,r16,16
  814970:	0009883a 	mov	r4,zero
  814974:	a884b03a 	or	r2,r21,r2
  814978:	003fad06 	br	814830 <__udivdi3+0x1a4>
  81497c:	00804034 	movhi	r2,256
  814980:	10bfffc4 	addi	r2,r2,-1
  814984:	11c0b636 	bltu	r2,r7,814c60 <__udivdi3+0x5d4>
  814988:	01400404 	movi	r5,16
  81498c:	2805883a 	mov	r2,r5
  814990:	003f9a06 	br	8147fc <__udivdi3+0x170>
  814994:	0005883a 	mov	r2,zero
  814998:	0009883a 	mov	r4,zero
  81499c:	003fa406 	br	814830 <__udivdi3+0x1a4>
  8149a0:	00804034 	movhi	r2,256
  8149a4:	10bfffc4 	addi	r2,r2,-1
  8149a8:	14c0b336 	bltu	r2,r19,814c78 <__udivdi3+0x5ec>
  8149ac:	01400404 	movi	r5,16
  8149b0:	2805883a 	mov	r2,r5
  8149b4:	003f5106 	br	8146fc <__udivdi3+0x70>
  8149b8:	01000044 	movi	r4,1
  8149bc:	000b883a 	mov	r5,zero
  8149c0:	080c8fc0 	call	80c8fc <__udivsi3>
  8149c4:	1027883a 	mov	r19,r2
  8149c8:	00bfffd4 	movui	r2,65535
  8149cc:	14fff436 	bltu	r2,r19,8149a0 <__udivdi3+0x314>
  8149d0:	003f4606 	br	8146ec <__udivdi3+0x60>
  8149d4:	00804034 	movhi	r2,256
  8149d8:	10bfffc4 	addi	r2,r2,-1
  8149dc:	1200ac36 	bltu	r2,r8,814c90 <__udivdi3+0x604>
  8149e0:	01400404 	movi	r5,16
  8149e4:	2805883a 	mov	r2,r5
  8149e8:	003fa806 	br	81488c <__udivdi3+0x200>
  8149ec:	3d85c83a 	sub	r2,r7,r22
  8149f0:	3588983a 	sll	r4,r6,r22
  8149f4:	9886d83a 	srl	r3,r19,r2
  8149f8:	a8a2d83a 	srl	r17,r21,r2
  8149fc:	e084d83a 	srl	r2,fp,r2
  814a00:	20eeb03a 	or	r23,r4,r3
  814a04:	b824d43a 	srli	r18,r23,16
  814a08:	ad86983a 	sll	r3,r21,r22
  814a0c:	8809883a 	mov	r4,r17
  814a10:	900b883a 	mov	r5,r18
  814a14:	1886b03a 	or	r3,r3,r2
  814a18:	d8c00115 	stw	r3,4(sp)
  814a1c:	bc3fffcc 	andi	r16,r23,65535
  814a20:	080c8fc0 	call	80c8fc <__udivsi3>
  814a24:	100b883a 	mov	r5,r2
  814a28:	8009883a 	mov	r4,r16
  814a2c:	1029883a 	mov	r20,r2
  814a30:	080c90c0 	call	80c90c <__mulsi3>
  814a34:	900b883a 	mov	r5,r18
  814a38:	8809883a 	mov	r4,r17
  814a3c:	102b883a 	mov	r21,r2
  814a40:	080c9040 	call	80c904 <__umodsi3>
  814a44:	d9400117 	ldw	r5,4(sp)
  814a48:	1004943a 	slli	r2,r2,16
  814a4c:	9da6983a 	sll	r19,r19,r22
  814a50:	2806d43a 	srli	r3,r5,16
  814a54:	10c4b03a 	or	r2,r2,r3
  814a58:	1540032e 	bgeu	r2,r21,814a68 <__udivdi3+0x3dc>
  814a5c:	15c5883a 	add	r2,r2,r23
  814a60:	a53fffc4 	addi	r20,r20,-1
  814a64:	15c0912e 	bgeu	r2,r23,814cac <__udivdi3+0x620>
  814a68:	1563c83a 	sub	r17,r2,r21
  814a6c:	8809883a 	mov	r4,r17
  814a70:	900b883a 	mov	r5,r18
  814a74:	080c8fc0 	call	80c8fc <__udivsi3>
  814a78:	100b883a 	mov	r5,r2
  814a7c:	8009883a 	mov	r4,r16
  814a80:	102b883a 	mov	r21,r2
  814a84:	080c90c0 	call	80c90c <__mulsi3>
  814a88:	8809883a 	mov	r4,r17
  814a8c:	900b883a 	mov	r5,r18
  814a90:	1021883a 	mov	r16,r2
  814a94:	080c9040 	call	80c904 <__umodsi3>
  814a98:	da800117 	ldw	r10,4(sp)
  814a9c:	1004943a 	slli	r2,r2,16
  814aa0:	50ffffcc 	andi	r3,r10,65535
  814aa4:	10c6b03a 	or	r3,r2,r3
  814aa8:	1c00032e 	bgeu	r3,r16,814ab8 <__udivdi3+0x42c>
  814aac:	1dc7883a 	add	r3,r3,r23
  814ab0:	ad7fffc4 	addi	r21,r21,-1
  814ab4:	1dc0792e 	bgeu	r3,r23,814c9c <__udivdi3+0x610>
  814ab8:	a004943a 	slli	r2,r20,16
  814abc:	982ed43a 	srli	r23,r19,16
  814ac0:	9cffffcc 	andi	r19,r19,65535
  814ac4:	a8a4b03a 	or	r18,r21,r2
  814ac8:	947fffcc 	andi	r17,r18,65535
  814acc:	902ad43a 	srli	r21,r18,16
  814ad0:	8809883a 	mov	r4,r17
  814ad4:	980b883a 	mov	r5,r19
  814ad8:	1c21c83a 	sub	r16,r3,r16
  814adc:	080c90c0 	call	80c90c <__mulsi3>
  814ae0:	8809883a 	mov	r4,r17
  814ae4:	b80b883a 	mov	r5,r23
  814ae8:	1029883a 	mov	r20,r2
  814aec:	080c90c0 	call	80c90c <__mulsi3>
  814af0:	980b883a 	mov	r5,r19
  814af4:	a809883a 	mov	r4,r21
  814af8:	1023883a 	mov	r17,r2
  814afc:	080c90c0 	call	80c90c <__mulsi3>
  814b00:	a809883a 	mov	r4,r21
  814b04:	b80b883a 	mov	r5,r23
  814b08:	1027883a 	mov	r19,r2
  814b0c:	080c90c0 	call	80c90c <__mulsi3>
  814b10:	1009883a 	mov	r4,r2
  814b14:	a004d43a 	srli	r2,r20,16
  814b18:	8ce3883a 	add	r17,r17,r19
  814b1c:	1447883a 	add	r3,r2,r17
  814b20:	1cc0022e 	bgeu	r3,r19,814b2c <__udivdi3+0x4a0>
  814b24:	00800074 	movhi	r2,1
  814b28:	2089883a 	add	r4,r4,r2
  814b2c:	1804d43a 	srli	r2,r3,16
  814b30:	2085883a 	add	r2,r4,r2
  814b34:	80804436 	bltu	r16,r2,814c48 <__udivdi3+0x5bc>
  814b38:	80803e26 	beq	r16,r2,814c34 <__udivdi3+0x5a8>
  814b3c:	9005883a 	mov	r2,r18
  814b40:	0009883a 	mov	r4,zero
  814b44:	003f3a06 	br	814830 <__udivdi3+0x1a4>
  814b48:	9d26983a 	sll	r19,r19,r20
  814b4c:	3505c83a 	sub	r2,r6,r20
  814b50:	a8a2d83a 	srl	r17,r21,r2
  814b54:	982ed43a 	srli	r23,r19,16
  814b58:	e084d83a 	srl	r2,fp,r2
  814b5c:	ad06983a 	sll	r3,r21,r20
  814b60:	8809883a 	mov	r4,r17
  814b64:	b80b883a 	mov	r5,r23
  814b68:	1886b03a 	or	r3,r3,r2
  814b6c:	d8c00015 	stw	r3,0(sp)
  814b70:	9dbfffcc 	andi	r22,r19,65535
  814b74:	080c8fc0 	call	80c8fc <__udivsi3>
  814b78:	100b883a 	mov	r5,r2
  814b7c:	b009883a 	mov	r4,r22
  814b80:	d8800215 	stw	r2,8(sp)
  814b84:	080c90c0 	call	80c90c <__mulsi3>
  814b88:	8809883a 	mov	r4,r17
  814b8c:	b80b883a 	mov	r5,r23
  814b90:	102b883a 	mov	r21,r2
  814b94:	080c9040 	call	80c904 <__umodsi3>
  814b98:	d9000017 	ldw	r4,0(sp)
  814b9c:	1004943a 	slli	r2,r2,16
  814ba0:	2006d43a 	srli	r3,r4,16
  814ba4:	10c4b03a 	or	r2,r2,r3
  814ba8:	1540052e 	bgeu	r2,r21,814bc0 <__udivdi3+0x534>
  814bac:	d9400217 	ldw	r5,8(sp)
  814bb0:	14c5883a 	add	r2,r2,r19
  814bb4:	297fffc4 	addi	r5,r5,-1
  814bb8:	d9400215 	stw	r5,8(sp)
  814bbc:	14c0462e 	bgeu	r2,r19,814cd8 <__udivdi3+0x64c>
  814bc0:	1563c83a 	sub	r17,r2,r21
  814bc4:	8809883a 	mov	r4,r17
  814bc8:	b80b883a 	mov	r5,r23
  814bcc:	080c8fc0 	call	80c8fc <__udivsi3>
  814bd0:	100b883a 	mov	r5,r2
  814bd4:	b009883a 	mov	r4,r22
  814bd8:	1025883a 	mov	r18,r2
  814bdc:	080c90c0 	call	80c90c <__mulsi3>
  814be0:	8809883a 	mov	r4,r17
  814be4:	b80b883a 	mov	r5,r23
  814be8:	1021883a 	mov	r16,r2
  814bec:	080c9040 	call	80c904 <__umodsi3>
  814bf0:	da800017 	ldw	r10,0(sp)
  814bf4:	1004943a 	slli	r2,r2,16
  814bf8:	50ffffcc 	andi	r3,r10,65535
  814bfc:	10c6b03a 	or	r3,r2,r3
  814c00:	1c00062e 	bgeu	r3,r16,814c1c <__udivdi3+0x590>
  814c04:	1cc7883a 	add	r3,r3,r19
  814c08:	94bfffc4 	addi	r18,r18,-1
  814c0c:	1cc00336 	bltu	r3,r19,814c1c <__udivdi3+0x590>
  814c10:	1c00022e 	bgeu	r3,r16,814c1c <__udivdi3+0x590>
  814c14:	94bfffc4 	addi	r18,r18,-1
  814c18:	1cc7883a 	add	r3,r3,r19
  814c1c:	d9000217 	ldw	r4,8(sp)
  814c20:	e538983a 	sll	fp,fp,r20
  814c24:	1c2bc83a 	sub	r21,r3,r16
  814c28:	2004943a 	slli	r2,r4,16
  814c2c:	90a8b03a 	or	r20,r18,r2
  814c30:	003ebf06 	br	814730 <__udivdi3+0xa4>
  814c34:	1804943a 	slli	r2,r3,16
  814c38:	e588983a 	sll	r4,fp,r22
  814c3c:	a0ffffcc 	andi	r3,r20,65535
  814c40:	10c5883a 	add	r2,r2,r3
  814c44:	20bfbd2e 	bgeu	r4,r2,814b3c <__udivdi3+0x4b0>
  814c48:	90bfffc4 	addi	r2,r18,-1
  814c4c:	0009883a 	mov	r4,zero
  814c50:	003ef706 	br	814830 <__udivdi3+0x1a4>
  814c54:	01400204 	movi	r5,8
  814c58:	2805883a 	mov	r2,r5
  814c5c:	003ee706 	br	8147fc <__udivdi3+0x170>
  814c60:	01400604 	movi	r5,24
  814c64:	2805883a 	mov	r2,r5
  814c68:	003ee406 	br	8147fc <__udivdi3+0x170>
  814c6c:	01400204 	movi	r5,8
  814c70:	2805883a 	mov	r2,r5
  814c74:	003ea106 	br	8146fc <__udivdi3+0x70>
  814c78:	01400604 	movi	r5,24
  814c7c:	2805883a 	mov	r2,r5
  814c80:	003e9e06 	br	8146fc <__udivdi3+0x70>
  814c84:	01400204 	movi	r5,8
  814c88:	2805883a 	mov	r2,r5
  814c8c:	003eff06 	br	81488c <__udivdi3+0x200>
  814c90:	01400604 	movi	r5,24
  814c94:	2805883a 	mov	r2,r5
  814c98:	003efc06 	br	81488c <__udivdi3+0x200>
  814c9c:	1c3f862e 	bgeu	r3,r16,814ab8 <__udivdi3+0x42c>
  814ca0:	1dc7883a 	add	r3,r3,r23
  814ca4:	ad7fffc4 	addi	r21,r21,-1
  814ca8:	003f8306 	br	814ab8 <__udivdi3+0x42c>
  814cac:	157f6e2e 	bgeu	r2,r21,814a68 <__udivdi3+0x3dc>
  814cb0:	a53fffc4 	addi	r20,r20,-1
  814cb4:	15c5883a 	add	r2,r2,r23
  814cb8:	003f6b06 	br	814a68 <__udivdi3+0x3dc>
  814cbc:	ad7fffc4 	addi	r21,r21,-1
  814cc0:	003ec206 	br	8147cc <__udivdi3+0x140>
  814cc4:	843fffc4 	addi	r16,r16,-1
  814cc8:	14c5883a 	add	r2,r2,r19
  814ccc:	003f1306 	br	81491c <__udivdi3+0x290>
  814cd0:	ad7fffc4 	addi	r21,r21,-1
  814cd4:	003f2506 	br	81496c <__udivdi3+0x2e0>
  814cd8:	157fb92e 	bgeu	r2,r21,814bc0 <__udivdi3+0x534>
  814cdc:	297fffc4 	addi	r5,r5,-1
  814ce0:	14c5883a 	add	r2,r2,r19
  814ce4:	d9400215 	stw	r5,8(sp)
  814ce8:	003fb506 	br	814bc0 <__udivdi3+0x534>
  814cec:	843fffc4 	addi	r16,r16,-1
  814cf0:	14c5883a 	add	r2,r2,r19
  814cf4:	003ea106 	br	81477c <__udivdi3+0xf0>

00814cf8 <__umoddi3>:
  814cf8:	defff004 	addi	sp,sp,-64
  814cfc:	3011883a 	mov	r8,r6
  814d00:	000d883a 	mov	r6,zero
  814d04:	dd400b15 	stw	r21,44(sp)
  814d08:	dcc00915 	stw	r19,36(sp)
  814d0c:	dc000615 	stw	r16,24(sp)
  814d10:	dfc00f15 	stw	ra,60(sp)
  814d14:	df000e15 	stw	fp,56(sp)
  814d18:	ddc00d15 	stw	r23,52(sp)
  814d1c:	dd800c15 	stw	r22,48(sp)
  814d20:	dd000a15 	stw	r20,40(sp)
  814d24:	dc800815 	stw	r18,32(sp)
  814d28:	dc400715 	stw	r17,28(sp)
  814d2c:	2817883a 	mov	r11,r5
  814d30:	d9800415 	stw	r6,16(sp)
  814d34:	4027883a 	mov	r19,r8
  814d38:	d9800515 	stw	r6,20(sp)
  814d3c:	2021883a 	mov	r16,r4
  814d40:	282b883a 	mov	r21,r5
  814d44:	38002c1e 	bne	r7,zero,814df8 <__umoddi3+0x100>
  814d48:	2a005636 	bltu	r5,r8,814ea4 <__umoddi3+0x1ac>
  814d4c:	40009a26 	beq	r8,zero,814fb8 <__umoddi3+0x2c0>
  814d50:	00bfffd4 	movui	r2,65535
  814d54:	14c09236 	bltu	r2,r19,814fa0 <__umoddi3+0x2a8>
  814d58:	00803fc4 	movi	r2,255
  814d5c:	14c15c36 	bltu	r2,r19,8152d0 <__umoddi3+0x5d8>
  814d60:	000b883a 	mov	r5,zero
  814d64:	0005883a 	mov	r2,zero
  814d68:	9884d83a 	srl	r2,r19,r2
  814d6c:	010020b4 	movhi	r4,130
  814d70:	2106b004 	addi	r4,r4,6848
  814d74:	01800804 	movi	r6,32
  814d78:	1105883a 	add	r2,r2,r4
  814d7c:	10c00003 	ldbu	r3,0(r2)
  814d80:	28c7883a 	add	r3,r5,r3
  814d84:	30e5c83a 	sub	r18,r6,r3
  814d88:	9000a41e 	bne	r18,zero,81501c <__umoddi3+0x324>
  814d8c:	982ed43a 	srli	r23,r19,16
  814d90:	acebc83a 	sub	r21,r21,r19
  814d94:	9d3fffcc 	andi	r20,r19,65535
  814d98:	002d883a 	mov	r22,zero
  814d9c:	a809883a 	mov	r4,r21
  814da0:	b80b883a 	mov	r5,r23
  814da4:	080c8fc0 	call	80c8fc <__udivsi3>
  814da8:	100b883a 	mov	r5,r2
  814dac:	a009883a 	mov	r4,r20
  814db0:	080c90c0 	call	80c90c <__mulsi3>
  814db4:	a809883a 	mov	r4,r21
  814db8:	b80b883a 	mov	r5,r23
  814dbc:	1023883a 	mov	r17,r2
  814dc0:	080c9040 	call	80c904 <__umodsi3>
  814dc4:	1004943a 	slli	r2,r2,16
  814dc8:	8006d43a 	srli	r3,r16,16
  814dcc:	10c4b03a 	or	r2,r2,r3
  814dd0:	1440032e 	bgeu	r2,r17,814de0 <__umoddi3+0xe8>
  814dd4:	14c5883a 	add	r2,r2,r19
  814dd8:	14c00136 	bltu	r2,r19,814de0 <__umoddi3+0xe8>
  814ddc:	14415836 	bltu	r2,r17,815340 <__umoddi3+0x648>
  814de0:	1463c83a 	sub	r17,r2,r17
  814de4:	8809883a 	mov	r4,r17
  814de8:	b80b883a 	mov	r5,r23
  814dec:	080c8fc0 	call	80c8fc <__udivsi3>
  814df0:	a009883a 	mov	r4,r20
  814df4:	00005306 	br	814f44 <__umoddi3+0x24c>
  814df8:	380d883a 	mov	r6,r7
  814dfc:	29c0132e 	bgeu	r5,r7,814e4c <__umoddi3+0x154>
  814e00:	d9000415 	stw	r4,16(sp)
  814e04:	d9400515 	stw	r5,20(sp)
  814e08:	d9400417 	ldw	r5,16(sp)
  814e0c:	5813883a 	mov	r9,r11
  814e10:	2811883a 	mov	r8,r5
  814e14:	4005883a 	mov	r2,r8
  814e18:	4807883a 	mov	r3,r9
  814e1c:	dfc00f17 	ldw	ra,60(sp)
  814e20:	df000e17 	ldw	fp,56(sp)
  814e24:	ddc00d17 	ldw	r23,52(sp)
  814e28:	dd800c17 	ldw	r22,48(sp)
  814e2c:	dd400b17 	ldw	r21,44(sp)
  814e30:	dd000a17 	ldw	r20,40(sp)
  814e34:	dcc00917 	ldw	r19,36(sp)
  814e38:	dc800817 	ldw	r18,32(sp)
  814e3c:	dc400717 	ldw	r17,28(sp)
  814e40:	dc000617 	ldw	r16,24(sp)
  814e44:	dec01004 	addi	sp,sp,64
  814e48:	f800283a 	ret
  814e4c:	00bfffd4 	movui	r2,65535
  814e50:	11c06636 	bltu	r2,r7,814fec <__umoddi3+0x2f4>
  814e54:	00803fc4 	movi	r2,255
  814e58:	11c12036 	bltu	r2,r7,8152dc <__umoddi3+0x5e4>
  814e5c:	000b883a 	mov	r5,zero
  814e60:	0005883a 	mov	r2,zero
  814e64:	3084d83a 	srl	r2,r6,r2
  814e68:	010020b4 	movhi	r4,130
  814e6c:	2106b004 	addi	r4,r4,6848
  814e70:	01c00804 	movi	r7,32
  814e74:	1105883a 	add	r2,r2,r4
  814e78:	10c00003 	ldbu	r3,0(r2)
  814e7c:	28c7883a 	add	r3,r5,r3
  814e80:	38e5c83a 	sub	r18,r7,r3
  814e84:	9000941e 	bne	r18,zero,8150d8 <__umoddi3+0x3e0>
  814e88:	35405e36 	bltu	r6,r21,815004 <__umoddi3+0x30c>
  814e8c:	84c05d2e 	bgeu	r16,r19,815004 <__umoddi3+0x30c>
  814e90:	8011883a 	mov	r8,r16
  814e94:	a813883a 	mov	r9,r21
  814e98:	dc000415 	stw	r16,16(sp)
  814e9c:	dd400515 	stw	r21,20(sp)
  814ea0:	003fdc06 	br	814e14 <__umoddi3+0x11c>
  814ea4:	00bfffd4 	movui	r2,65535
  814ea8:	12004a36 	bltu	r2,r8,814fd4 <__umoddi3+0x2dc>
  814eac:	00803fc4 	movi	r2,255
  814eb0:	12010d36 	bltu	r2,r8,8152e8 <__umoddi3+0x5f0>
  814eb4:	000b883a 	mov	r5,zero
  814eb8:	0005883a 	mov	r2,zero
  814ebc:	9884d83a 	srl	r2,r19,r2
  814ec0:	010020b4 	movhi	r4,130
  814ec4:	2106b004 	addi	r4,r4,6848
  814ec8:	01800804 	movi	r6,32
  814ecc:	1105883a 	add	r2,r2,r4
  814ed0:	10c00003 	ldbu	r3,0(r2)
  814ed4:	28c7883a 	add	r3,r5,r3
  814ed8:	30c7c83a 	sub	r3,r6,r3
  814edc:	1800dc1e 	bne	r3,zero,815250 <__umoddi3+0x558>
  814ee0:	002d883a 	mov	r22,zero
  814ee4:	982ed43a 	srli	r23,r19,16
  814ee8:	a809883a 	mov	r4,r21
  814eec:	9cbfffcc 	andi	r18,r19,65535
  814ef0:	b80b883a 	mov	r5,r23
  814ef4:	080c8fc0 	call	80c8fc <__udivsi3>
  814ef8:	100b883a 	mov	r5,r2
  814efc:	9009883a 	mov	r4,r18
  814f00:	080c90c0 	call	80c90c <__mulsi3>
  814f04:	a809883a 	mov	r4,r21
  814f08:	b80b883a 	mov	r5,r23
  814f0c:	1023883a 	mov	r17,r2
  814f10:	080c9040 	call	80c904 <__umodsi3>
  814f14:	1004943a 	slli	r2,r2,16
  814f18:	8006d43a 	srli	r3,r16,16
  814f1c:	10c4b03a 	or	r2,r2,r3
  814f20:	1440032e 	bgeu	r2,r17,814f30 <__umoddi3+0x238>
  814f24:	14c5883a 	add	r2,r2,r19
  814f28:	14c00136 	bltu	r2,r19,814f30 <__umoddi3+0x238>
  814f2c:	14410236 	bltu	r2,r17,815338 <__umoddi3+0x640>
  814f30:	1463c83a 	sub	r17,r2,r17
  814f34:	8809883a 	mov	r4,r17
  814f38:	b80b883a 	mov	r5,r23
  814f3c:	080c8fc0 	call	80c8fc <__udivsi3>
  814f40:	9009883a 	mov	r4,r18
  814f44:	100b883a 	mov	r5,r2
  814f48:	080c90c0 	call	80c90c <__mulsi3>
  814f4c:	8809883a 	mov	r4,r17
  814f50:	b80b883a 	mov	r5,r23
  814f54:	102b883a 	mov	r21,r2
  814f58:	080c9040 	call	80c904 <__umodsi3>
  814f5c:	1004943a 	slli	r2,r2,16
  814f60:	80ffffcc 	andi	r3,r16,65535
  814f64:	10c4b03a 	or	r2,r2,r3
  814f68:	1540042e 	bgeu	r2,r21,814f7c <__umoddi3+0x284>
  814f6c:	14c5883a 	add	r2,r2,r19
  814f70:	14c00236 	bltu	r2,r19,814f7c <__umoddi3+0x284>
  814f74:	1540012e 	bgeu	r2,r21,814f7c <__umoddi3+0x284>
  814f78:	14c5883a 	add	r2,r2,r19
  814f7c:	1545c83a 	sub	r2,r2,r21
  814f80:	1584d83a 	srl	r2,r2,r22
  814f84:	0013883a 	mov	r9,zero
  814f88:	d8800415 	stw	r2,16(sp)
  814f8c:	d8c00417 	ldw	r3,16(sp)
  814f90:	0005883a 	mov	r2,zero
  814f94:	d8800515 	stw	r2,20(sp)
  814f98:	1811883a 	mov	r8,r3
  814f9c:	003f9d06 	br	814e14 <__umoddi3+0x11c>
  814fa0:	00804034 	movhi	r2,256
  814fa4:	10bfffc4 	addi	r2,r2,-1
  814fa8:	14c0c636 	bltu	r2,r19,8152c4 <__umoddi3+0x5cc>
  814fac:	01400404 	movi	r5,16
  814fb0:	2805883a 	mov	r2,r5
  814fb4:	003f6c06 	br	814d68 <__umoddi3+0x70>
  814fb8:	01000044 	movi	r4,1
  814fbc:	000b883a 	mov	r5,zero
  814fc0:	080c8fc0 	call	80c8fc <__udivsi3>
  814fc4:	1027883a 	mov	r19,r2
  814fc8:	00bfffd4 	movui	r2,65535
  814fcc:	14fff436 	bltu	r2,r19,814fa0 <__umoddi3+0x2a8>
  814fd0:	003f6106 	br	814d58 <__umoddi3+0x60>
  814fd4:	00804034 	movhi	r2,256
  814fd8:	10bfffc4 	addi	r2,r2,-1
  814fdc:	1200c536 	bltu	r2,r8,8152f4 <__umoddi3+0x5fc>
  814fe0:	01400404 	movi	r5,16
  814fe4:	2805883a 	mov	r2,r5
  814fe8:	003fb406 	br	814ebc <__umoddi3+0x1c4>
  814fec:	00804034 	movhi	r2,256
  814ff0:	10bfffc4 	addi	r2,r2,-1
  814ff4:	11c0c236 	bltu	r2,r7,815300 <__umoddi3+0x608>
  814ff8:	01400404 	movi	r5,16
  814ffc:	2805883a 	mov	r2,r5
  815000:	003f9806 	br	814e64 <__umoddi3+0x16c>
  815004:	84c9c83a 	sub	r4,r16,r19
  815008:	8105803a 	cmpltu	r2,r16,r4
  81500c:	a987c83a 	sub	r3,r21,r6
  815010:	18abc83a 	sub	r21,r3,r2
  815014:	2021883a 	mov	r16,r4
  815018:	003f9d06 	br	814e90 <__umoddi3+0x198>
  81501c:	9ca6983a 	sll	r19,r19,r18
  815020:	3485c83a 	sub	r2,r6,r18
  815024:	a8a2d83a 	srl	r17,r21,r2
  815028:	982ed43a 	srli	r23,r19,16
  81502c:	ac86983a 	sll	r3,r21,r18
  815030:	8084d83a 	srl	r2,r16,r2
  815034:	8809883a 	mov	r4,r17
  815038:	b80b883a 	mov	r5,r23
  81503c:	18b8b03a 	or	fp,r3,r2
  815040:	9d3fffcc 	andi	r20,r19,65535
  815044:	080c8fc0 	call	80c8fc <__udivsi3>
  815048:	100b883a 	mov	r5,r2
  81504c:	a009883a 	mov	r4,r20
  815050:	080c90c0 	call	80c90c <__mulsi3>
  815054:	8809883a 	mov	r4,r17
  815058:	b80b883a 	mov	r5,r23
  81505c:	102b883a 	mov	r21,r2
  815060:	080c9040 	call	80c904 <__umodsi3>
  815064:	1004943a 	slli	r2,r2,16
  815068:	e006d43a 	srli	r3,fp,16
  81506c:	902d883a 	mov	r22,r18
  815070:	10c4b03a 	or	r2,r2,r3
  815074:	1540022e 	bgeu	r2,r21,815080 <__umoddi3+0x388>
  815078:	14c5883a 	add	r2,r2,r19
  81507c:	14c0ab2e 	bgeu	r2,r19,81532c <__umoddi3+0x634>
  815080:	1563c83a 	sub	r17,r2,r21
  815084:	8809883a 	mov	r4,r17
  815088:	b80b883a 	mov	r5,r23
  81508c:	080c8fc0 	call	80c8fc <__udivsi3>
  815090:	100b883a 	mov	r5,r2
  815094:	a009883a 	mov	r4,r20
  815098:	080c90c0 	call	80c90c <__mulsi3>
  81509c:	8809883a 	mov	r4,r17
  8150a0:	b80b883a 	mov	r5,r23
  8150a4:	102b883a 	mov	r21,r2
  8150a8:	080c9040 	call	80c904 <__umodsi3>
  8150ac:	1004943a 	slli	r2,r2,16
  8150b0:	e0ffffcc 	andi	r3,fp,65535
  8150b4:	10c4b03a 	or	r2,r2,r3
  8150b8:	1540042e 	bgeu	r2,r21,8150cc <__umoddi3+0x3d4>
  8150bc:	14c5883a 	add	r2,r2,r19
  8150c0:	14c00236 	bltu	r2,r19,8150cc <__umoddi3+0x3d4>
  8150c4:	1540012e 	bgeu	r2,r21,8150cc <__umoddi3+0x3d4>
  8150c8:	14c5883a 	add	r2,r2,r19
  8150cc:	84a0983a 	sll	r16,r16,r18
  8150d0:	156bc83a 	sub	r21,r2,r21
  8150d4:	003f3106 	br	814d9c <__umoddi3+0xa4>
  8150d8:	3c8fc83a 	sub	r7,r7,r18
  8150dc:	3486983a 	sll	r3,r6,r18
  8150e0:	99c4d83a 	srl	r2,r19,r7
  8150e4:	a9e2d83a 	srl	r17,r21,r7
  8150e8:	ac8c983a 	sll	r6,r21,r18
  8150ec:	18acb03a 	or	r22,r3,r2
  8150f0:	b02ed43a 	srli	r23,r22,16
  8150f4:	81c4d83a 	srl	r2,r16,r7
  8150f8:	8809883a 	mov	r4,r17
  8150fc:	b80b883a 	mov	r5,r23
  815100:	308cb03a 	or	r6,r6,r2
  815104:	d9c00315 	stw	r7,12(sp)
  815108:	d9800215 	stw	r6,8(sp)
  81510c:	b53fffcc 	andi	r20,r22,65535
  815110:	080c8fc0 	call	80c8fc <__udivsi3>
  815114:	100b883a 	mov	r5,r2
  815118:	a009883a 	mov	r4,r20
  81511c:	1039883a 	mov	fp,r2
  815120:	080c90c0 	call	80c90c <__mulsi3>
  815124:	8809883a 	mov	r4,r17
  815128:	b80b883a 	mov	r5,r23
  81512c:	102b883a 	mov	r21,r2
  815130:	080c9040 	call	80c904 <__umodsi3>
  815134:	d9000217 	ldw	r4,8(sp)
  815138:	1004943a 	slli	r2,r2,16
  81513c:	9ca6983a 	sll	r19,r19,r18
  815140:	2006d43a 	srli	r3,r4,16
  815144:	84a0983a 	sll	r16,r16,r18
  815148:	dcc00015 	stw	r19,0(sp)
  81514c:	10c4b03a 	or	r2,r2,r3
  815150:	dc000115 	stw	r16,4(sp)
  815154:	1540032e 	bgeu	r2,r21,815164 <__umoddi3+0x46c>
  815158:	1585883a 	add	r2,r2,r22
  81515c:	e73fffc4 	addi	fp,fp,-1
  815160:	15806e2e 	bgeu	r2,r22,81531c <__umoddi3+0x624>
  815164:	1563c83a 	sub	r17,r2,r21
  815168:	8809883a 	mov	r4,r17
  81516c:	b80b883a 	mov	r5,r23
  815170:	080c8fc0 	call	80c8fc <__udivsi3>
  815174:	100b883a 	mov	r5,r2
  815178:	a009883a 	mov	r4,r20
  81517c:	1021883a 	mov	r16,r2
  815180:	080c90c0 	call	80c90c <__mulsi3>
  815184:	b80b883a 	mov	r5,r23
  815188:	8809883a 	mov	r4,r17
  81518c:	1029883a 	mov	r20,r2
  815190:	080c9040 	call	80c904 <__umodsi3>
  815194:	d9400217 	ldw	r5,8(sp)
  815198:	1004943a 	slli	r2,r2,16
  81519c:	28ffffcc 	andi	r3,r5,65535
  8151a0:	10c4b03a 	or	r2,r2,r3
  8151a4:	1500032e 	bgeu	r2,r20,8151b4 <__umoddi3+0x4bc>
  8151a8:	1585883a 	add	r2,r2,r22
  8151ac:	843fffc4 	addi	r16,r16,-1
  8151b0:	1580562e 	bgeu	r2,r22,81530c <__umoddi3+0x614>
  8151b4:	d9800017 	ldw	r6,0(sp)
  8151b8:	e022943a 	slli	r17,fp,16
  8151bc:	302ed43a 	srli	r23,r6,16
  8151c0:	8462b03a 	or	r17,r16,r17
  8151c4:	34ffffcc 	andi	r19,r6,65535
  8151c8:	882ad43a 	srli	r21,r17,16
  8151cc:	8c7fffcc 	andi	r17,r17,65535
  8151d0:	8809883a 	mov	r4,r17
  8151d4:	980b883a 	mov	r5,r19
  8151d8:	1521c83a 	sub	r16,r2,r20
  8151dc:	080c90c0 	call	80c90c <__mulsi3>
  8151e0:	8809883a 	mov	r4,r17
  8151e4:	b80b883a 	mov	r5,r23
  8151e8:	1029883a 	mov	r20,r2
  8151ec:	080c90c0 	call	80c90c <__mulsi3>
  8151f0:	980b883a 	mov	r5,r19
  8151f4:	a809883a 	mov	r4,r21
  8151f8:	1023883a 	mov	r17,r2
  8151fc:	080c90c0 	call	80c90c <__mulsi3>
  815200:	a809883a 	mov	r4,r21
  815204:	b80b883a 	mov	r5,r23
  815208:	1027883a 	mov	r19,r2
  81520c:	080c90c0 	call	80c90c <__mulsi3>
  815210:	100b883a 	mov	r5,r2
  815214:	a004d43a 	srli	r2,r20,16
  815218:	8ce3883a 	add	r17,r17,r19
  81521c:	1449883a 	add	r4,r2,r17
  815220:	24c0022e 	bgeu	r4,r19,81522c <__umoddi3+0x534>
  815224:	00800074 	movhi	r2,1
  815228:	288b883a 	add	r5,r5,r2
  81522c:	2004d43a 	srli	r2,r4,16
  815230:	2008943a 	slli	r4,r4,16
  815234:	a0ffffcc 	andi	r3,r20,65535
  815238:	288d883a 	add	r6,r5,r2
  81523c:	20c9883a 	add	r4,r4,r3
  815240:	81800b36 	bltu	r16,r6,815270 <__umoddi3+0x578>
  815244:	81804026 	beq	r16,r6,815348 <__umoddi3+0x650>
  815248:	818dc83a 	sub	r6,r16,r6
  81524c:	00000f06 	br	81528c <__umoddi3+0x594>
  815250:	30c5c83a 	sub	r2,r6,r3
  815254:	182d883a 	mov	r22,r3
  815258:	8084d83a 	srl	r2,r16,r2
  81525c:	a8c6983a 	sll	r3,r21,r3
  815260:	9da6983a 	sll	r19,r19,r22
  815264:	85a0983a 	sll	r16,r16,r22
  815268:	18aab03a 	or	r21,r3,r2
  81526c:	003f1d06 	br	814ee4 <__umoddi3+0x1ec>
  815270:	d8c00017 	ldw	r3,0(sp)
  815274:	20c5c83a 	sub	r2,r4,r3
  815278:	2089803a 	cmpltu	r4,r4,r2
  81527c:	3587c83a 	sub	r3,r6,r22
  815280:	1907c83a 	sub	r3,r3,r4
  815284:	80cdc83a 	sub	r6,r16,r3
  815288:	1009883a 	mov	r4,r2
  81528c:	d9400117 	ldw	r5,4(sp)
  815290:	2905c83a 	sub	r2,r5,r4
  815294:	2887803a 	cmpltu	r3,r5,r2
  815298:	30c7c83a 	sub	r3,r6,r3
  81529c:	d9800317 	ldw	r6,12(sp)
  8152a0:	1484d83a 	srl	r2,r2,r18
  8152a4:	1988983a 	sll	r4,r3,r6
  8152a8:	1c86d83a 	srl	r3,r3,r18
  8152ac:	2088b03a 	or	r4,r4,r2
  8152b0:	2011883a 	mov	r8,r4
  8152b4:	1813883a 	mov	r9,r3
  8152b8:	d9000415 	stw	r4,16(sp)
  8152bc:	d8c00515 	stw	r3,20(sp)
  8152c0:	003ed406 	br	814e14 <__umoddi3+0x11c>
  8152c4:	01400604 	movi	r5,24
  8152c8:	2805883a 	mov	r2,r5
  8152cc:	003ea606 	br	814d68 <__umoddi3+0x70>
  8152d0:	01400204 	movi	r5,8
  8152d4:	2805883a 	mov	r2,r5
  8152d8:	003ea306 	br	814d68 <__umoddi3+0x70>
  8152dc:	01400204 	movi	r5,8
  8152e0:	2805883a 	mov	r2,r5
  8152e4:	003edf06 	br	814e64 <__umoddi3+0x16c>
  8152e8:	01400204 	movi	r5,8
  8152ec:	2805883a 	mov	r2,r5
  8152f0:	003ef206 	br	814ebc <__umoddi3+0x1c4>
  8152f4:	01400604 	movi	r5,24
  8152f8:	2805883a 	mov	r2,r5
  8152fc:	003eef06 	br	814ebc <__umoddi3+0x1c4>
  815300:	01400604 	movi	r5,24
  815304:	2805883a 	mov	r2,r5
  815308:	003ed606 	br	814e64 <__umoddi3+0x16c>
  81530c:	153fa92e 	bgeu	r2,r20,8151b4 <__umoddi3+0x4bc>
  815310:	843fffc4 	addi	r16,r16,-1
  815314:	1585883a 	add	r2,r2,r22
  815318:	003fa606 	br	8151b4 <__umoddi3+0x4bc>
  81531c:	157f912e 	bgeu	r2,r21,815164 <__umoddi3+0x46c>
  815320:	e73fffc4 	addi	fp,fp,-1
  815324:	1585883a 	add	r2,r2,r22
  815328:	003f8e06 	br	815164 <__umoddi3+0x46c>
  81532c:	157f542e 	bgeu	r2,r21,815080 <__umoddi3+0x388>
  815330:	14c5883a 	add	r2,r2,r19
  815334:	003f5206 	br	815080 <__umoddi3+0x388>
  815338:	14c5883a 	add	r2,r2,r19
  81533c:	003efc06 	br	814f30 <__umoddi3+0x238>
  815340:	14c5883a 	add	r2,r2,r19
  815344:	003ea606 	br	814de0 <__umoddi3+0xe8>
  815348:	d8800117 	ldw	r2,4(sp)
  81534c:	113fc836 	bltu	r2,r4,815270 <__umoddi3+0x578>
  815350:	000d883a 	mov	r6,zero
  815354:	003fcd06 	br	81528c <__umoddi3+0x594>

00815358 <__floatunsidf>:
  815358:	defff204 	addi	sp,sp,-56
  81535c:	dfc00d15 	stw	ra,52(sp)
  815360:	ddc00c15 	stw	r23,48(sp)
  815364:	dd800b15 	stw	r22,44(sp)
  815368:	dd400a15 	stw	r21,40(sp)
  81536c:	dd000915 	stw	r20,36(sp)
  815370:	dcc00815 	stw	r19,32(sp)
  815374:	dc800715 	stw	r18,28(sp)
  815378:	dc400615 	stw	r17,24(sp)
  81537c:	dc000515 	stw	r16,20(sp)
  815380:	d8000115 	stw	zero,4(sp)
  815384:	20000f1e 	bne	r4,zero,8153c4 <__floatunsidf+0x6c>
  815388:	00800084 	movi	r2,2
  81538c:	d8800015 	stw	r2,0(sp)
  815390:	d809883a 	mov	r4,sp
  815394:	080ccc00 	call	80ccc0 <__pack_d>
  815398:	dfc00d17 	ldw	ra,52(sp)
  81539c:	ddc00c17 	ldw	r23,48(sp)
  8153a0:	dd800b17 	ldw	r22,44(sp)
  8153a4:	dd400a17 	ldw	r21,40(sp)
  8153a8:	dd000917 	ldw	r20,36(sp)
  8153ac:	dcc00817 	ldw	r19,32(sp)
  8153b0:	dc800717 	ldw	r18,28(sp)
  8153b4:	dc400617 	ldw	r17,24(sp)
  8153b8:	dc000517 	ldw	r16,20(sp)
  8153bc:	dec00e04 	addi	sp,sp,56
  8153c0:	f800283a 	ret
  8153c4:	008000c4 	movi	r2,3
  8153c8:	00c00f04 	movi	r3,60
  8153cc:	002f883a 	mov	r23,zero
  8153d0:	202d883a 	mov	r22,r4
  8153d4:	d8800015 	stw	r2,0(sp)
  8153d8:	d8c00215 	stw	r3,8(sp)
  8153dc:	d9000315 	stw	r4,12(sp)
  8153e0:	ddc00415 	stw	r23,16(sp)
  8153e4:	080c9440 	call	80c944 <__clzsi2>
  8153e8:	12400744 	addi	r9,r2,29
  8153ec:	48000b16 	blt	r9,zero,81541c <__floatunsidf+0xc4>
  8153f0:	483fe726 	beq	r9,zero,815390 <__floatunsidf+0x38>
  8153f4:	10bfff44 	addi	r2,r2,-3
  8153f8:	10002e16 	blt	r2,zero,8154b4 <__floatunsidf+0x15c>
  8153fc:	b0a2983a 	sll	r17,r22,r2
  815400:	0021883a 	mov	r16,zero
  815404:	d8800217 	ldw	r2,8(sp)
  815408:	dc400415 	stw	r17,16(sp)
  81540c:	dc000315 	stw	r16,12(sp)
  815410:	1245c83a 	sub	r2,r2,r9
  815414:	d8800215 	stw	r2,8(sp)
  815418:	003fdd06 	br	815390 <__floatunsidf+0x38>
  81541c:	0255c83a 	sub	r10,zero,r9
  815420:	51bff804 	addi	r6,r10,-32
  815424:	30001b16 	blt	r6,zero,815494 <__floatunsidf+0x13c>
  815428:	b9a8d83a 	srl	r20,r23,r6
  81542c:	002b883a 	mov	r21,zero
  815430:	000f883a 	mov	r7,zero
  815434:	01000044 	movi	r4,1
  815438:	0011883a 	mov	r8,zero
  81543c:	30002516 	blt	r6,zero,8154d4 <__floatunsidf+0x17c>
  815440:	21a6983a 	sll	r19,r4,r6
  815444:	0025883a 	mov	r18,zero
  815448:	00bfffc4 	movi	r2,-1
  81544c:	9089883a 	add	r4,r18,r2
  815450:	988b883a 	add	r5,r19,r2
  815454:	248d803a 	cmpltu	r6,r4,r18
  815458:	314b883a 	add	r5,r6,r5
  81545c:	b104703a 	and	r2,r22,r4
  815460:	b946703a 	and	r3,r23,r5
  815464:	10c4b03a 	or	r2,r2,r3
  815468:	10000226 	beq	r2,zero,815474 <__floatunsidf+0x11c>
  81546c:	01c00044 	movi	r7,1
  815470:	0011883a 	mov	r8,zero
  815474:	d9000217 	ldw	r4,8(sp)
  815478:	a1c4b03a 	or	r2,r20,r7
  81547c:	aa06b03a 	or	r3,r21,r8
  815480:	2249c83a 	sub	r4,r4,r9
  815484:	d8c00415 	stw	r3,16(sp)
  815488:	d9000215 	stw	r4,8(sp)
  81548c:	d8800315 	stw	r2,12(sp)
  815490:	003fbf06 	br	815390 <__floatunsidf+0x38>
  815494:	bdc7883a 	add	r3,r23,r23
  815498:	008007c4 	movi	r2,31
  81549c:	1285c83a 	sub	r2,r2,r10
  8154a0:	1886983a 	sll	r3,r3,r2
  8154a4:	b2a8d83a 	srl	r20,r22,r10
  8154a8:	baaad83a 	srl	r21,r23,r10
  8154ac:	1d28b03a 	or	r20,r3,r20
  8154b0:	003fdf06 	br	815430 <__floatunsidf+0xd8>
  8154b4:	b006d07a 	srli	r3,r22,1
  8154b8:	008007c4 	movi	r2,31
  8154bc:	1245c83a 	sub	r2,r2,r9
  8154c0:	1886d83a 	srl	r3,r3,r2
  8154c4:	ba62983a 	sll	r17,r23,r9
  8154c8:	b260983a 	sll	r16,r22,r9
  8154cc:	1c62b03a 	or	r17,r3,r17
  8154d0:	003fcc06 	br	815404 <__floatunsidf+0xac>
  8154d4:	2006d07a 	srli	r3,r4,1
  8154d8:	008007c4 	movi	r2,31
  8154dc:	1285c83a 	sub	r2,r2,r10
  8154e0:	18a6d83a 	srl	r19,r3,r2
  8154e4:	22a4983a 	sll	r18,r4,r10
  8154e8:	003fd706 	br	815448 <__floatunsidf+0xf0>

008154ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8154ec:	defff804 	addi	sp,sp,-32
  8154f0:	dfc00715 	stw	ra,28(sp)
  8154f4:	df000615 	stw	fp,24(sp)
  8154f8:	df000604 	addi	fp,sp,24
  8154fc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  815500:	e0bffc17 	ldw	r2,-16(fp)
  815504:	1004803a 	cmplt	r2,r2,zero
  815508:	1000091e 	bne	r2,zero,815530 <close+0x44>
  81550c:	e13ffc17 	ldw	r4,-16(fp)
  815510:	01400304 	movi	r5,12
  815514:	080c90c0 	call	80c90c <__mulsi3>
  815518:	1007883a 	mov	r3,r2
  81551c:	008020b4 	movhi	r2,130
  815520:	1089dd04 	addi	r2,r2,10100
  815524:	1887883a 	add	r3,r3,r2
  815528:	e0ffff15 	stw	r3,-4(fp)
  81552c:	00000106 	br	815534 <close+0x48>
  815530:	e03fff15 	stw	zero,-4(fp)
  815534:	e0bfff17 	ldw	r2,-4(fp)
  815538:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  81553c:	e0bffb17 	ldw	r2,-20(fp)
  815540:	1005003a 	cmpeq	r2,r2,zero
  815544:	10001d1e 	bne	r2,zero,8155bc <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  815548:	e0bffb17 	ldw	r2,-20(fp)
  81554c:	10800017 	ldw	r2,0(r2)
  815550:	10800417 	ldw	r2,16(r2)
  815554:	1005003a 	cmpeq	r2,r2,zero
  815558:	1000071e 	bne	r2,zero,815578 <close+0x8c>
  81555c:	e0bffb17 	ldw	r2,-20(fp)
  815560:	10800017 	ldw	r2,0(r2)
  815564:	10800417 	ldw	r2,16(r2)
  815568:	e13ffb17 	ldw	r4,-20(fp)
  81556c:	103ee83a 	callr	r2
  815570:	e0bffe15 	stw	r2,-8(fp)
  815574:	00000106 	br	81557c <close+0x90>
  815578:	e03ffe15 	stw	zero,-8(fp)
  81557c:	e0bffe17 	ldw	r2,-8(fp)
  815580:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  815584:	e13ffc17 	ldw	r4,-16(fp)
  815588:	0815d600 	call	815d60 <alt_release_fd>
    if (rval < 0)
  81558c:	e0bffa17 	ldw	r2,-24(fp)
  815590:	1004403a 	cmpge	r2,r2,zero
  815594:	1000071e 	bne	r2,zero,8155b4 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  815598:	08155ec0 	call	8155ec <alt_get_errno>
  81559c:	e0fffa17 	ldw	r3,-24(fp)
  8155a0:	00c7c83a 	sub	r3,zero,r3
  8155a4:	10c00015 	stw	r3,0(r2)
      return -1;
  8155a8:	00bfffc4 	movi	r2,-1
  8155ac:	e0bffd15 	stw	r2,-12(fp)
  8155b0:	00000806 	br	8155d4 <close+0xe8>
    }
    return 0;
  8155b4:	e03ffd15 	stw	zero,-12(fp)
  8155b8:	00000606 	br	8155d4 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8155bc:	08155ec0 	call	8155ec <alt_get_errno>
  8155c0:	1007883a 	mov	r3,r2
  8155c4:	00801444 	movi	r2,81
  8155c8:	18800015 	stw	r2,0(r3)
    return -1;
  8155cc:	00bfffc4 	movi	r2,-1
  8155d0:	e0bffd15 	stw	r2,-12(fp)
  8155d4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8155d8:	e037883a 	mov	sp,fp
  8155dc:	dfc00117 	ldw	ra,4(sp)
  8155e0:	df000017 	ldw	fp,0(sp)
  8155e4:	dec00204 	addi	sp,sp,8
  8155e8:	f800283a 	ret

008155ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8155ec:	defffd04 	addi	sp,sp,-12
  8155f0:	dfc00215 	stw	ra,8(sp)
  8155f4:	df000115 	stw	fp,4(sp)
  8155f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8155fc:	008020b4 	movhi	r2,130
  815600:	108e7a04 	addi	r2,r2,14824
  815604:	10800017 	ldw	r2,0(r2)
  815608:	1005003a 	cmpeq	r2,r2,zero
  81560c:	1000061e 	bne	r2,zero,815628 <alt_get_errno+0x3c>
  815610:	008020b4 	movhi	r2,130
  815614:	108e7a04 	addi	r2,r2,14824
  815618:	10800017 	ldw	r2,0(r2)
  81561c:	103ee83a 	callr	r2
  815620:	e0bfff15 	stw	r2,-4(fp)
  815624:	00000306 	br	815634 <alt_get_errno+0x48>
  815628:	008020b4 	movhi	r2,130
  81562c:	10957304 	addi	r2,r2,21964
  815630:	e0bfff15 	stw	r2,-4(fp)
  815634:	e0bfff17 	ldw	r2,-4(fp)
}
  815638:	e037883a 	mov	sp,fp
  81563c:	dfc00117 	ldw	ra,4(sp)
  815640:	df000017 	ldw	fp,0(sp)
  815644:	dec00204 	addi	sp,sp,8
  815648:	f800283a 	ret

0081564c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  81564c:	defffc04 	addi	sp,sp,-16
  815650:	df000315 	stw	fp,12(sp)
  815654:	df000304 	addi	fp,sp,12
  815658:	e13ffd15 	stw	r4,-12(fp)
  81565c:	e17ffe15 	stw	r5,-8(fp)
  815660:	e1bfff15 	stw	r6,-4(fp)
  return len;
  815664:	e0bfff17 	ldw	r2,-4(fp)
}
  815668:	e037883a 	mov	sp,fp
  81566c:	df000017 	ldw	fp,0(sp)
  815670:	dec00104 	addi	sp,sp,4
  815674:	f800283a 	ret

00815678 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  815678:	defff904 	addi	sp,sp,-28
  81567c:	dfc00615 	stw	ra,24(sp)
  815680:	df000515 	stw	fp,20(sp)
  815684:	df000504 	addi	fp,sp,20
  815688:	e13ffc15 	stw	r4,-16(fp)
  81568c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  815690:	e0bffc17 	ldw	r2,-16(fp)
  815694:	1004803a 	cmplt	r2,r2,zero
  815698:	1000091e 	bne	r2,zero,8156c0 <fstat+0x48>
  81569c:	e13ffc17 	ldw	r4,-16(fp)
  8156a0:	01400304 	movi	r5,12
  8156a4:	080c90c0 	call	80c90c <__mulsi3>
  8156a8:	1007883a 	mov	r3,r2
  8156ac:	008020b4 	movhi	r2,130
  8156b0:	1089dd04 	addi	r2,r2,10100
  8156b4:	1887883a 	add	r3,r3,r2
  8156b8:	e0ffff15 	stw	r3,-4(fp)
  8156bc:	00000106 	br	8156c4 <fstat+0x4c>
  8156c0:	e03fff15 	stw	zero,-4(fp)
  8156c4:	e0bfff17 	ldw	r2,-4(fp)
  8156c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8156cc:	e0bffb17 	ldw	r2,-20(fp)
  8156d0:	1005003a 	cmpeq	r2,r2,zero
  8156d4:	1000121e 	bne	r2,zero,815720 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8156d8:	e0bffb17 	ldw	r2,-20(fp)
  8156dc:	10800017 	ldw	r2,0(r2)
  8156e0:	10800817 	ldw	r2,32(r2)
  8156e4:	1005003a 	cmpeq	r2,r2,zero
  8156e8:	1000081e 	bne	r2,zero,81570c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  8156ec:	e0bffb17 	ldw	r2,-20(fp)
  8156f0:	10800017 	ldw	r2,0(r2)
  8156f4:	10800817 	ldw	r2,32(r2)
  8156f8:	e13ffb17 	ldw	r4,-20(fp)
  8156fc:	e17ffd17 	ldw	r5,-12(fp)
  815700:	103ee83a 	callr	r2
  815704:	e0bffe15 	stw	r2,-8(fp)
  815708:	00000b06 	br	815738 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  81570c:	e0fffd17 	ldw	r3,-12(fp)
  815710:	00880004 	movi	r2,8192
  815714:	18800115 	stw	r2,4(r3)
      return 0;
  815718:	e03ffe15 	stw	zero,-8(fp)
  81571c:	00000606 	br	815738 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  815720:	08157500 	call	815750 <alt_get_errno>
  815724:	1007883a 	mov	r3,r2
  815728:	00801444 	movi	r2,81
  81572c:	18800015 	stw	r2,0(r3)
    return -1;
  815730:	00bfffc4 	movi	r2,-1
  815734:	e0bffe15 	stw	r2,-8(fp)
  815738:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  81573c:	e037883a 	mov	sp,fp
  815740:	dfc00117 	ldw	ra,4(sp)
  815744:	df000017 	ldw	fp,0(sp)
  815748:	dec00204 	addi	sp,sp,8
  81574c:	f800283a 	ret

00815750 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815750:	defffd04 	addi	sp,sp,-12
  815754:	dfc00215 	stw	ra,8(sp)
  815758:	df000115 	stw	fp,4(sp)
  81575c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  815760:	008020b4 	movhi	r2,130
  815764:	108e7a04 	addi	r2,r2,14824
  815768:	10800017 	ldw	r2,0(r2)
  81576c:	1005003a 	cmpeq	r2,r2,zero
  815770:	1000061e 	bne	r2,zero,81578c <alt_get_errno+0x3c>
  815774:	008020b4 	movhi	r2,130
  815778:	108e7a04 	addi	r2,r2,14824
  81577c:	10800017 	ldw	r2,0(r2)
  815780:	103ee83a 	callr	r2
  815784:	e0bfff15 	stw	r2,-4(fp)
  815788:	00000306 	br	815798 <alt_get_errno+0x48>
  81578c:	008020b4 	movhi	r2,130
  815790:	10957304 	addi	r2,r2,21964
  815794:	e0bfff15 	stw	r2,-4(fp)
  815798:	e0bfff17 	ldw	r2,-4(fp)
}
  81579c:	e037883a 	mov	sp,fp
  8157a0:	dfc00117 	ldw	ra,4(sp)
  8157a4:	df000017 	ldw	fp,0(sp)
  8157a8:	dec00204 	addi	sp,sp,8
  8157ac:	f800283a 	ret

008157b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8157b0:	deffeb04 	addi	sp,sp,-84
  8157b4:	dfc01415 	stw	ra,80(sp)
  8157b8:	df001315 	stw	fp,76(sp)
  8157bc:	df001304 	addi	fp,sp,76
  8157c0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8157c4:	e0bffd17 	ldw	r2,-12(fp)
  8157c8:	1004803a 	cmplt	r2,r2,zero
  8157cc:	1000091e 	bne	r2,zero,8157f4 <isatty+0x44>
  8157d0:	e13ffd17 	ldw	r4,-12(fp)
  8157d4:	01400304 	movi	r5,12
  8157d8:	080c90c0 	call	80c90c <__mulsi3>
  8157dc:	1007883a 	mov	r3,r2
  8157e0:	008020b4 	movhi	r2,130
  8157e4:	1089dd04 	addi	r2,r2,10100
  8157e8:	1887883a 	add	r3,r3,r2
  8157ec:	e0ffff15 	stw	r3,-4(fp)
  8157f0:	00000106 	br	8157f8 <isatty+0x48>
  8157f4:	e03fff15 	stw	zero,-4(fp)
  8157f8:	e0bfff17 	ldw	r2,-4(fp)
  8157fc:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  815800:	e0bfed17 	ldw	r2,-76(fp)
  815804:	1005003a 	cmpeq	r2,r2,zero
  815808:	10000f1e 	bne	r2,zero,815848 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  81580c:	e0bfed17 	ldw	r2,-76(fp)
  815810:	10800017 	ldw	r2,0(r2)
  815814:	10800817 	ldw	r2,32(r2)
  815818:	1004c03a 	cmpne	r2,r2,zero
  81581c:	1000031e 	bne	r2,zero,81582c <isatty+0x7c>
    {
      return 1;
  815820:	00800044 	movi	r2,1
  815824:	e0bffe15 	stw	r2,-8(fp)
  815828:	00000c06 	br	81585c <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  81582c:	e17fee04 	addi	r5,fp,-72
  815830:	e13ffd17 	ldw	r4,-12(fp)
  815834:	08156780 	call	815678 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  815838:	e0bfef17 	ldw	r2,-68(fp)
  81583c:	10880020 	cmpeqi	r2,r2,8192
  815840:	e0bffe15 	stw	r2,-8(fp)
  815844:	00000506 	br	81585c <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  815848:	08158740 	call	815874 <alt_get_errno>
  81584c:	1007883a 	mov	r3,r2
  815850:	00801444 	movi	r2,81
  815854:	18800015 	stw	r2,0(r3)
    return 0;
  815858:	e03ffe15 	stw	zero,-8(fp)
  81585c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  815860:	e037883a 	mov	sp,fp
  815864:	dfc00117 	ldw	ra,4(sp)
  815868:	df000017 	ldw	fp,0(sp)
  81586c:	dec00204 	addi	sp,sp,8
  815870:	f800283a 	ret

00815874 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815874:	defffd04 	addi	sp,sp,-12
  815878:	dfc00215 	stw	ra,8(sp)
  81587c:	df000115 	stw	fp,4(sp)
  815880:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  815884:	008020b4 	movhi	r2,130
  815888:	108e7a04 	addi	r2,r2,14824
  81588c:	10800017 	ldw	r2,0(r2)
  815890:	1005003a 	cmpeq	r2,r2,zero
  815894:	1000061e 	bne	r2,zero,8158b0 <alt_get_errno+0x3c>
  815898:	008020b4 	movhi	r2,130
  81589c:	108e7a04 	addi	r2,r2,14824
  8158a0:	10800017 	ldw	r2,0(r2)
  8158a4:	103ee83a 	callr	r2
  8158a8:	e0bfff15 	stw	r2,-4(fp)
  8158ac:	00000306 	br	8158bc <alt_get_errno+0x48>
  8158b0:	008020b4 	movhi	r2,130
  8158b4:	10957304 	addi	r2,r2,21964
  8158b8:	e0bfff15 	stw	r2,-4(fp)
  8158bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8158c0:	e037883a 	mov	sp,fp
  8158c4:	dfc00117 	ldw	ra,4(sp)
  8158c8:	df000017 	ldw	fp,0(sp)
  8158cc:	dec00204 	addi	sp,sp,8
  8158d0:	f800283a 	ret

008158d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8158d4:	defffe04 	addi	sp,sp,-8
  8158d8:	dfc00115 	stw	ra,4(sp)
  8158dc:	df000015 	stw	fp,0(sp)
  8158e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8158e4:	010020b4 	movhi	r4,130
  8158e8:	210e9e04 	addi	r4,r4,14968
  8158ec:	014020b4 	movhi	r5,130
  8158f0:	2947ce04 	addi	r5,r5,7992
  8158f4:	018020b4 	movhi	r6,130
  8158f8:	318e9e04 	addi	r6,r6,14968
  8158fc:	08159540 	call	815954 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  815900:	01002034 	movhi	r4,128
  815904:	21000004 	addi	r4,r4,0
  815908:	01406434 	movhi	r5,400
  81590c:	29500804 	addi	r5,r5,16416
  815910:	01806434 	movhi	r6,400
  815914:	31907004 	addi	r6,r6,16832
  815918:	08159540 	call	815954 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  81591c:	010020b4 	movhi	r4,130
  815920:	21056f04 	addi	r4,r4,5564
  815924:	014020b4 	movhi	r5,130
  815928:	29456f04 	addi	r5,r5,5564
  81592c:	018020b4 	movhi	r6,130
  815930:	3187ce04 	addi	r6,r6,7992
  815934:	08159540 	call	815954 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  815938:	08200340 	call	820034 <alt_dcache_flush_all>
  alt_icache_flush_all();
  81593c:	08202c00 	call	8202c0 <alt_icache_flush_all>
}
  815940:	e037883a 	mov	sp,fp
  815944:	dfc00117 	ldw	ra,4(sp)
  815948:	df000017 	ldw	fp,0(sp)
  81594c:	dec00204 	addi	sp,sp,8
  815950:	f800283a 	ret

00815954 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  815954:	defffc04 	addi	sp,sp,-16
  815958:	df000315 	stw	fp,12(sp)
  81595c:	df000304 	addi	fp,sp,12
  815960:	e13ffd15 	stw	r4,-12(fp)
  815964:	e17ffe15 	stw	r5,-8(fp)
  815968:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  81596c:	e0fffe17 	ldw	r3,-8(fp)
  815970:	e0bffd17 	ldw	r2,-12(fp)
  815974:	18800e26 	beq	r3,r2,8159b0 <alt_load_section+0x5c>
  {
    while( to != end )
  815978:	00000a06 	br	8159a4 <alt_load_section+0x50>
    {
      *to++ = *from++;
  81597c:	e0bffd17 	ldw	r2,-12(fp)
  815980:	10c00017 	ldw	r3,0(r2)
  815984:	e0bffe17 	ldw	r2,-8(fp)
  815988:	10c00015 	stw	r3,0(r2)
  81598c:	e0bffe17 	ldw	r2,-8(fp)
  815990:	10800104 	addi	r2,r2,4
  815994:	e0bffe15 	stw	r2,-8(fp)
  815998:	e0bffd17 	ldw	r2,-12(fp)
  81599c:	10800104 	addi	r2,r2,4
  8159a0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8159a4:	e0fffe17 	ldw	r3,-8(fp)
  8159a8:	e0bfff17 	ldw	r2,-4(fp)
  8159ac:	18bff31e 	bne	r3,r2,81597c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  8159b0:	e037883a 	mov	sp,fp
  8159b4:	df000017 	ldw	fp,0(sp)
  8159b8:	dec00104 	addi	sp,sp,4
  8159bc:	f800283a 	ret

008159c0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8159c0:	defff804 	addi	sp,sp,-32
  8159c4:	dfc00715 	stw	ra,28(sp)
  8159c8:	df000615 	stw	fp,24(sp)
  8159cc:	df000604 	addi	fp,sp,24
  8159d0:	e13ffc15 	stw	r4,-16(fp)
  8159d4:	e17ffd15 	stw	r5,-12(fp)
  8159d8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8159dc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8159e0:	e0bffc17 	ldw	r2,-16(fp)
  8159e4:	1004803a 	cmplt	r2,r2,zero
  8159e8:	1000091e 	bne	r2,zero,815a10 <lseek+0x50>
  8159ec:	e13ffc17 	ldw	r4,-16(fp)
  8159f0:	01400304 	movi	r5,12
  8159f4:	080c90c0 	call	80c90c <__mulsi3>
  8159f8:	1007883a 	mov	r3,r2
  8159fc:	008020b4 	movhi	r2,130
  815a00:	1089dd04 	addi	r2,r2,10100
  815a04:	1887883a 	add	r3,r3,r2
  815a08:	e0ffff15 	stw	r3,-4(fp)
  815a0c:	00000106 	br	815a14 <lseek+0x54>
  815a10:	e03fff15 	stw	zero,-4(fp)
  815a14:	e0bfff17 	ldw	r2,-4(fp)
  815a18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  815a1c:	e0bffb17 	ldw	r2,-20(fp)
  815a20:	1005003a 	cmpeq	r2,r2,zero
  815a24:	1000111e 	bne	r2,zero,815a6c <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  815a28:	e0bffb17 	ldw	r2,-20(fp)
  815a2c:	10800017 	ldw	r2,0(r2)
  815a30:	10800717 	ldw	r2,28(r2)
  815a34:	1005003a 	cmpeq	r2,r2,zero
  815a38:	1000091e 	bne	r2,zero,815a60 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  815a3c:	e0bffb17 	ldw	r2,-20(fp)
  815a40:	10800017 	ldw	r2,0(r2)
  815a44:	10800717 	ldw	r2,28(r2)
  815a48:	e13ffb17 	ldw	r4,-20(fp)
  815a4c:	e17ffd17 	ldw	r5,-12(fp)
  815a50:	e1bffe17 	ldw	r6,-8(fp)
  815a54:	103ee83a 	callr	r2
  815a58:	e0bffa15 	stw	r2,-24(fp)
  815a5c:	00000506 	br	815a74 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  815a60:	00bfde84 	movi	r2,-134
  815a64:	e0bffa15 	stw	r2,-24(fp)
  815a68:	00000206 	br	815a74 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  815a6c:	00bfebc4 	movi	r2,-81
  815a70:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  815a74:	e0bffa17 	ldw	r2,-24(fp)
  815a78:	1004403a 	cmpge	r2,r2,zero
  815a7c:	1000071e 	bne	r2,zero,815a9c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  815a80:	0815ab40 	call	815ab4 <alt_get_errno>
  815a84:	1007883a 	mov	r3,r2
  815a88:	e0bffa17 	ldw	r2,-24(fp)
  815a8c:	0085c83a 	sub	r2,zero,r2
  815a90:	18800015 	stw	r2,0(r3)
    rc = -1;
  815a94:	00bfffc4 	movi	r2,-1
  815a98:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  815a9c:	e0bffa17 	ldw	r2,-24(fp)
}
  815aa0:	e037883a 	mov	sp,fp
  815aa4:	dfc00117 	ldw	ra,4(sp)
  815aa8:	df000017 	ldw	fp,0(sp)
  815aac:	dec00204 	addi	sp,sp,8
  815ab0:	f800283a 	ret

00815ab4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815ab4:	defffd04 	addi	sp,sp,-12
  815ab8:	dfc00215 	stw	ra,8(sp)
  815abc:	df000115 	stw	fp,4(sp)
  815ac0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  815ac4:	008020b4 	movhi	r2,130
  815ac8:	108e7a04 	addi	r2,r2,14824
  815acc:	10800017 	ldw	r2,0(r2)
  815ad0:	1005003a 	cmpeq	r2,r2,zero
  815ad4:	1000061e 	bne	r2,zero,815af0 <alt_get_errno+0x3c>
  815ad8:	008020b4 	movhi	r2,130
  815adc:	108e7a04 	addi	r2,r2,14824
  815ae0:	10800017 	ldw	r2,0(r2)
  815ae4:	103ee83a 	callr	r2
  815ae8:	e0bfff15 	stw	r2,-4(fp)
  815aec:	00000306 	br	815afc <alt_get_errno+0x48>
  815af0:	008020b4 	movhi	r2,130
  815af4:	10957304 	addi	r2,r2,21964
  815af8:	e0bfff15 	stw	r2,-4(fp)
  815afc:	e0bfff17 	ldw	r2,-4(fp)
}
  815b00:	e037883a 	mov	sp,fp
  815b04:	dfc00117 	ldw	ra,4(sp)
  815b08:	df000017 	ldw	fp,0(sp)
  815b0c:	dec00204 	addi	sp,sp,8
  815b10:	f800283a 	ret

00815b14 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  815b14:	defffb04 	addi	sp,sp,-20
  815b18:	dfc00415 	stw	ra,16(sp)
  815b1c:	df000315 	stw	fp,12(sp)
  815b20:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  815b24:	0009883a 	mov	r4,zero
  815b28:	081e6d80 	call	81e6d8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  815b2c:	0816d140 	call	816d14 <OSInit>
  815b30:	01000044 	movi	r4,1
  815b34:	081bbdc0 	call	81bbdc <OSSemCreate>
  815b38:	1007883a 	mov	r3,r2
  815b3c:	008020b4 	movhi	r2,130
  815b40:	10957c04 	addi	r2,r2,22000
  815b44:	10c00015 	stw	r3,0(r2)
  815b48:	01000044 	movi	r4,1
  815b4c:	081bbdc0 	call	81bbdc <OSSemCreate>
  815b50:	1007883a 	mov	r3,r2
  815b54:	008020b4 	movhi	r2,130
  815b58:	10957e04 	addi	r2,r2,22008
  815b5c:	10c00015 	stw	r3,0(r2)
  815b60:	008020b4 	movhi	r2,130
  815b64:	10957704 	addi	r2,r2,21980
  815b68:	e0bffd15 	stw	r2,-12(fp)
  815b6c:	00800044 	movi	r2,1
  815b70:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  815b74:	e13ffe0b 	ldhu	r4,-8(fp)
  815b78:	081bbdc0 	call	81bbdc <OSSemCreate>
  815b7c:	1007883a 	mov	r3,r2
  815b80:	e0bffd17 	ldw	r2,-12(fp)
  815b84:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  815b88:	081e70c0 	call	81e70c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  815b8c:	010020b4 	movhi	r4,130
  815b90:	21077104 	addi	r4,r4,7620
  815b94:	014020b4 	movhi	r5,130
  815b98:	29477104 	addi	r5,r5,7620
  815b9c:	018020b4 	movhi	r6,130
  815ba0:	31877104 	addi	r6,r6,7620
  815ba4:	08203b40 	call	8203b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  815ba8:	08201640 	call	820164 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  815bac:	010020b4 	movhi	r4,130
  815bb0:	21007204 	addi	r4,r4,456
  815bb4:	08211a40 	call	8211a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  815bb8:	d1270a17 	ldw	r4,-25560(gp)
  815bbc:	d1670b17 	ldw	r5,-25556(gp)
  815bc0:	d1a70c17 	ldw	r6,-25552(gp)
  815bc4:	0800a040 	call	800a04 <main>
  815bc8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  815bcc:	01000044 	movi	r4,1
  815bd0:	08154ec0 	call	8154ec <close>
  exit (result);
  815bd4:	e13fff17 	ldw	r4,-4(fp)
  815bd8:	08211b80 	call	8211b8 <exit>

00815bdc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  815bdc:	defff704 	addi	sp,sp,-36
  815be0:	dfc00815 	stw	ra,32(sp)
  815be4:	df000715 	stw	fp,28(sp)
  815be8:	df000704 	addi	fp,sp,28
  815bec:	e13ffb15 	stw	r4,-20(fp)
  815bf0:	e17ffc15 	stw	r5,-16(fp)
  815bf4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  815bf8:	e0bffb17 	ldw	r2,-20(fp)
  815bfc:	1004803a 	cmplt	r2,r2,zero
  815c00:	1000091e 	bne	r2,zero,815c28 <read+0x4c>
  815c04:	e13ffb17 	ldw	r4,-20(fp)
  815c08:	01400304 	movi	r5,12
  815c0c:	080c90c0 	call	80c90c <__mulsi3>
  815c10:	1007883a 	mov	r3,r2
  815c14:	008020b4 	movhi	r2,130
  815c18:	1089dd04 	addi	r2,r2,10100
  815c1c:	1887883a 	add	r3,r3,r2
  815c20:	e0ffff15 	stw	r3,-4(fp)
  815c24:	00000106 	br	815c2c <read+0x50>
  815c28:	e03fff15 	stw	zero,-4(fp)
  815c2c:	e0bfff17 	ldw	r2,-4(fp)
  815c30:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  815c34:	e0bffa17 	ldw	r2,-24(fp)
  815c38:	1005003a 	cmpeq	r2,r2,zero
  815c3c:	1000241e 	bne	r2,zero,815cd0 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  815c40:	e0bffa17 	ldw	r2,-24(fp)
  815c44:	10800217 	ldw	r2,8(r2)
  815c48:	108000cc 	andi	r2,r2,3
  815c4c:	10800060 	cmpeqi	r2,r2,1
  815c50:	10001a1e 	bne	r2,zero,815cbc <read+0xe0>
  815c54:	e0bffa17 	ldw	r2,-24(fp)
  815c58:	10800017 	ldw	r2,0(r2)
  815c5c:	10800517 	ldw	r2,20(r2)
  815c60:	1005003a 	cmpeq	r2,r2,zero
  815c64:	1000151e 	bne	r2,zero,815cbc <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  815c68:	e0bffa17 	ldw	r2,-24(fp)
  815c6c:	10800017 	ldw	r2,0(r2)
  815c70:	10800517 	ldw	r2,20(r2)
  815c74:	e17ffc17 	ldw	r5,-16(fp)
  815c78:	e1bffd17 	ldw	r6,-12(fp)
  815c7c:	e13ffa17 	ldw	r4,-24(fp)
  815c80:	103ee83a 	callr	r2
  815c84:	e0bff915 	stw	r2,-28(fp)
  815c88:	e0bff917 	ldw	r2,-28(fp)
  815c8c:	1004403a 	cmpge	r2,r2,zero
  815c90:	1000071e 	bne	r2,zero,815cb0 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  815c94:	0815d000 	call	815d00 <alt_get_errno>
  815c98:	e0fff917 	ldw	r3,-28(fp)
  815c9c:	00c7c83a 	sub	r3,zero,r3
  815ca0:	10c00015 	stw	r3,0(r2)
          return -1;
  815ca4:	00bfffc4 	movi	r2,-1
  815ca8:	e0bffe15 	stw	r2,-8(fp)
  815cac:	00000e06 	br	815ce8 <read+0x10c>
        }
        return rval;
  815cb0:	e0bff917 	ldw	r2,-28(fp)
  815cb4:	e0bffe15 	stw	r2,-8(fp)
  815cb8:	00000b06 	br	815ce8 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  815cbc:	0815d000 	call	815d00 <alt_get_errno>
  815cc0:	1007883a 	mov	r3,r2
  815cc4:	00800344 	movi	r2,13
  815cc8:	18800015 	stw	r2,0(r3)
  815ccc:	00000406 	br	815ce0 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  815cd0:	0815d000 	call	815d00 <alt_get_errno>
  815cd4:	1007883a 	mov	r3,r2
  815cd8:	00801444 	movi	r2,81
  815cdc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  815ce0:	00bfffc4 	movi	r2,-1
  815ce4:	e0bffe15 	stw	r2,-8(fp)
  815ce8:	e0bffe17 	ldw	r2,-8(fp)
}
  815cec:	e037883a 	mov	sp,fp
  815cf0:	dfc00117 	ldw	ra,4(sp)
  815cf4:	df000017 	ldw	fp,0(sp)
  815cf8:	dec00204 	addi	sp,sp,8
  815cfc:	f800283a 	ret

00815d00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815d00:	defffd04 	addi	sp,sp,-12
  815d04:	dfc00215 	stw	ra,8(sp)
  815d08:	df000115 	stw	fp,4(sp)
  815d0c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  815d10:	008020b4 	movhi	r2,130
  815d14:	108e7a04 	addi	r2,r2,14824
  815d18:	10800017 	ldw	r2,0(r2)
  815d1c:	1005003a 	cmpeq	r2,r2,zero
  815d20:	1000061e 	bne	r2,zero,815d3c <alt_get_errno+0x3c>
  815d24:	008020b4 	movhi	r2,130
  815d28:	108e7a04 	addi	r2,r2,14824
  815d2c:	10800017 	ldw	r2,0(r2)
  815d30:	103ee83a 	callr	r2
  815d34:	e0bfff15 	stw	r2,-4(fp)
  815d38:	00000306 	br	815d48 <alt_get_errno+0x48>
  815d3c:	008020b4 	movhi	r2,130
  815d40:	10957304 	addi	r2,r2,21964
  815d44:	e0bfff15 	stw	r2,-4(fp)
  815d48:	e0bfff17 	ldw	r2,-4(fp)
}
  815d4c:	e037883a 	mov	sp,fp
  815d50:	dfc00117 	ldw	ra,4(sp)
  815d54:	df000017 	ldw	fp,0(sp)
  815d58:	dec00204 	addi	sp,sp,8
  815d5c:	f800283a 	ret

00815d60 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  815d60:	defffc04 	addi	sp,sp,-16
  815d64:	dfc00315 	stw	ra,12(sp)
  815d68:	df000215 	stw	fp,8(sp)
  815d6c:	dc000115 	stw	r16,4(sp)
  815d70:	df000104 	addi	fp,sp,4
  815d74:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  815d78:	e0bfff17 	ldw	r2,-4(fp)
  815d7c:	108000d0 	cmplti	r2,r2,3
  815d80:	10000f1e 	bne	r2,zero,815dc0 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  815d84:	e13fff17 	ldw	r4,-4(fp)
  815d88:	040020b4 	movhi	r16,130
  815d8c:	8409dd04 	addi	r16,r16,10100
  815d90:	01400304 	movi	r5,12
  815d94:	080c90c0 	call	80c90c <__mulsi3>
  815d98:	1405883a 	add	r2,r2,r16
  815d9c:	10800204 	addi	r2,r2,8
  815da0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  815da4:	e13fff17 	ldw	r4,-4(fp)
  815da8:	040020b4 	movhi	r16,130
  815dac:	8409dd04 	addi	r16,r16,10100
  815db0:	01400304 	movi	r5,12
  815db4:	080c90c0 	call	80c90c <__mulsi3>
  815db8:	1405883a 	add	r2,r2,r16
  815dbc:	10000015 	stw	zero,0(r2)
  }
}
  815dc0:	e037883a 	mov	sp,fp
  815dc4:	dfc00217 	ldw	ra,8(sp)
  815dc8:	df000117 	ldw	fp,4(sp)
  815dcc:	dc000017 	ldw	r16,0(sp)
  815dd0:	dec00304 	addi	sp,sp,12
  815dd4:	f800283a 	ret

00815dd8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  815dd8:	defff804 	addi	sp,sp,-32
  815ddc:	df000715 	stw	fp,28(sp)
  815de0:	df000704 	addi	fp,sp,28
  815de4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815de8:	0005303a 	rdctl	r2,status
  815dec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815df0:	e0fffb17 	ldw	r3,-20(fp)
  815df4:	00bfff84 	movi	r2,-2
  815df8:	1884703a 	and	r2,r3,r2
  815dfc:	1001703a 	wrctl	status,r2
  
  return context;
  815e00:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  815e04:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  815e08:	d0a00d17 	ldw	r2,-32716(gp)
  815e0c:	10c000c4 	addi	r3,r2,3
  815e10:	00bfff04 	movi	r2,-4
  815e14:	1884703a 	and	r2,r3,r2
  815e18:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  815e1c:	d0e00d17 	ldw	r3,-32716(gp)
  815e20:	e0bffe17 	ldw	r2,-8(fp)
  815e24:	1887883a 	add	r3,r3,r2
  815e28:	00804034 	movhi	r2,256
  815e2c:	10800004 	addi	r2,r2,0
  815e30:	10c0072e 	bgeu	r2,r3,815e50 <sbrk+0x78>
  815e34:	e0bffd17 	ldw	r2,-12(fp)
  815e38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815e3c:	e0bffa17 	ldw	r2,-24(fp)
  815e40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  815e44:	00bfffc4 	movi	r2,-1
  815e48:	e0bfff15 	stw	r2,-4(fp)
  815e4c:	00000c06 	br	815e80 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  815e50:	d0a00d17 	ldw	r2,-32716(gp)
  815e54:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  815e58:	d0e00d17 	ldw	r3,-32716(gp)
  815e5c:	e0bffe17 	ldw	r2,-8(fp)
  815e60:	1885883a 	add	r2,r3,r2
  815e64:	d0a00d15 	stw	r2,-32716(gp)
  815e68:	e0bffd17 	ldw	r2,-12(fp)
  815e6c:	e0bff915 	stw	r2,-28(fp)
  815e70:	e0bff917 	ldw	r2,-28(fp)
  815e74:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  815e78:	e0bffc17 	ldw	r2,-16(fp)
  815e7c:	e0bfff15 	stw	r2,-4(fp)
  815e80:	e0bfff17 	ldw	r2,-4(fp)
} 
  815e84:	e037883a 	mov	sp,fp
  815e88:	df000017 	ldw	fp,0(sp)
  815e8c:	dec00104 	addi	sp,sp,4
  815e90:	f800283a 	ret

00815e94 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  815e94:	defffb04 	addi	sp,sp,-20
  815e98:	dfc00415 	stw	ra,16(sp)
  815e9c:	df000315 	stw	fp,12(sp)
  815ea0:	df000304 	addi	fp,sp,12
  815ea4:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  815ea8:	008020b4 	movhi	r2,130
  815eac:	10959504 	addi	r2,r2,22100
  815eb0:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
  815eb4:	e0bffd15 	stw	r2,-12(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  815eb8:	008020b4 	movhi	r2,130
  815ebc:	10959404 	addi	r2,r2,22096
  815ec0:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  815ec4:	1004c03a 	cmpne	r2,r2,zero
  815ec8:	1000061e 	bne	r2,zero,815ee4 <times+0x50>
  {
    ALT_ERRNO = ENOSYS;
  815ecc:	0815f280 	call	815f28 <alt_get_errno>
  815ed0:	1007883a 	mov	r3,r2
  815ed4:	00801604 	movi	r2,88
  815ed8:	18800015 	stw	r2,0(r3)
    return 0;
  815edc:	e03fff15 	stw	zero,-4(fp)
  815ee0:	00000b06 	br	815f10 <times+0x7c>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  815ee4:	e0bffe17 	ldw	r2,-8(fp)
  815ee8:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
  815eec:	e0fffe17 	ldw	r3,-8(fp)
  815ef0:	e0bffd17 	ldw	r2,-12(fp)
  815ef4:	18800115 	stw	r2,4(r3)
  buf->tms_cutime = 0;
  815ef8:	e0bffe17 	ldw	r2,-8(fp)
  815efc:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
  815f00:	e0bffe17 	ldw	r2,-8(fp)
  815f04:	10000315 	stw	zero,12(r2)

  return ticks;
  815f08:	e0bffd17 	ldw	r2,-12(fp)
  815f0c:	e0bfff15 	stw	r2,-4(fp)
  815f10:	e0bfff17 	ldw	r2,-4(fp)
}
  815f14:	e037883a 	mov	sp,fp
  815f18:	dfc00117 	ldw	ra,4(sp)
  815f1c:	df000017 	ldw	fp,0(sp)
  815f20:	dec00204 	addi	sp,sp,8
  815f24:	f800283a 	ret

00815f28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815f28:	defffd04 	addi	sp,sp,-12
  815f2c:	dfc00215 	stw	ra,8(sp)
  815f30:	df000115 	stw	fp,4(sp)
  815f34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  815f38:	008020b4 	movhi	r2,130
  815f3c:	108e7a04 	addi	r2,r2,14824
  815f40:	10800017 	ldw	r2,0(r2)
  815f44:	1005003a 	cmpeq	r2,r2,zero
  815f48:	1000061e 	bne	r2,zero,815f64 <alt_get_errno+0x3c>
  815f4c:	008020b4 	movhi	r2,130
  815f50:	108e7a04 	addi	r2,r2,14824
  815f54:	10800017 	ldw	r2,0(r2)
  815f58:	103ee83a 	callr	r2
  815f5c:	e0bfff15 	stw	r2,-4(fp)
  815f60:	00000306 	br	815f70 <alt_get_errno+0x48>
  815f64:	008020b4 	movhi	r2,130
  815f68:	10957304 	addi	r2,r2,21964
  815f6c:	e0bfff15 	stw	r2,-4(fp)
  815f70:	e0bfff17 	ldw	r2,-4(fp)
}
  815f74:	e037883a 	mov	sp,fp
  815f78:	dfc00117 	ldw	ra,4(sp)
  815f7c:	df000017 	ldw	fp,0(sp)
  815f80:	dec00204 	addi	sp,sp,8
  815f84:	f800283a 	ret

00815f88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  815f88:	defff704 	addi	sp,sp,-36
  815f8c:	dfc00815 	stw	ra,32(sp)
  815f90:	df000715 	stw	fp,28(sp)
  815f94:	df000704 	addi	fp,sp,28
  815f98:	e13ffb15 	stw	r4,-20(fp)
  815f9c:	e17ffc15 	stw	r5,-16(fp)
  815fa0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  815fa4:	e0bffb17 	ldw	r2,-20(fp)
  815fa8:	1004803a 	cmplt	r2,r2,zero
  815fac:	1000091e 	bne	r2,zero,815fd4 <write+0x4c>
  815fb0:	e13ffb17 	ldw	r4,-20(fp)
  815fb4:	01400304 	movi	r5,12
  815fb8:	080c90c0 	call	80c90c <__mulsi3>
  815fbc:	1007883a 	mov	r3,r2
  815fc0:	008020b4 	movhi	r2,130
  815fc4:	1089dd04 	addi	r2,r2,10100
  815fc8:	1887883a 	add	r3,r3,r2
  815fcc:	e0ffff15 	stw	r3,-4(fp)
  815fd0:	00000106 	br	815fd8 <write+0x50>
  815fd4:	e03fff15 	stw	zero,-4(fp)
  815fd8:	e0bfff17 	ldw	r2,-4(fp)
  815fdc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  815fe0:	e0bffa17 	ldw	r2,-24(fp)
  815fe4:	1005003a 	cmpeq	r2,r2,zero
  815fe8:	1000241e 	bne	r2,zero,81607c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  815fec:	e0bffa17 	ldw	r2,-24(fp)
  815ff0:	10800217 	ldw	r2,8(r2)
  815ff4:	108000cc 	andi	r2,r2,3
  815ff8:	1005003a 	cmpeq	r2,r2,zero
  815ffc:	10001a1e 	bne	r2,zero,816068 <write+0xe0>
  816000:	e0bffa17 	ldw	r2,-24(fp)
  816004:	10800017 	ldw	r2,0(r2)
  816008:	10800617 	ldw	r2,24(r2)
  81600c:	1005003a 	cmpeq	r2,r2,zero
  816010:	1000151e 	bne	r2,zero,816068 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  816014:	e0bffa17 	ldw	r2,-24(fp)
  816018:	10800017 	ldw	r2,0(r2)
  81601c:	10800617 	ldw	r2,24(r2)
  816020:	e17ffc17 	ldw	r5,-16(fp)
  816024:	e1bffd17 	ldw	r6,-12(fp)
  816028:	e13ffa17 	ldw	r4,-24(fp)
  81602c:	103ee83a 	callr	r2
  816030:	e0bff915 	stw	r2,-28(fp)
  816034:	e0bff917 	ldw	r2,-28(fp)
  816038:	1004403a 	cmpge	r2,r2,zero
  81603c:	1000071e 	bne	r2,zero,81605c <write+0xd4>
      {
        ALT_ERRNO = -rval;
  816040:	08160ac0 	call	8160ac <alt_get_errno>
  816044:	e0fff917 	ldw	r3,-28(fp)
  816048:	00c7c83a 	sub	r3,zero,r3
  81604c:	10c00015 	stw	r3,0(r2)
        return -1;
  816050:	00bfffc4 	movi	r2,-1
  816054:	e0bffe15 	stw	r2,-8(fp)
  816058:	00000e06 	br	816094 <write+0x10c>
      }
      return rval;
  81605c:	e0bff917 	ldw	r2,-28(fp)
  816060:	e0bffe15 	stw	r2,-8(fp)
  816064:	00000b06 	br	816094 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  816068:	08160ac0 	call	8160ac <alt_get_errno>
  81606c:	1007883a 	mov	r3,r2
  816070:	00800344 	movi	r2,13
  816074:	18800015 	stw	r2,0(r3)
  816078:	00000406 	br	81608c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  81607c:	08160ac0 	call	8160ac <alt_get_errno>
  816080:	1007883a 	mov	r3,r2
  816084:	00801444 	movi	r2,81
  816088:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81608c:	00bfffc4 	movi	r2,-1
  816090:	e0bffe15 	stw	r2,-8(fp)
  816094:	e0bffe17 	ldw	r2,-8(fp)
}
  816098:	e037883a 	mov	sp,fp
  81609c:	dfc00117 	ldw	ra,4(sp)
  8160a0:	df000017 	ldw	fp,0(sp)
  8160a4:	dec00204 	addi	sp,sp,8
  8160a8:	f800283a 	ret

008160ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8160ac:	defffd04 	addi	sp,sp,-12
  8160b0:	dfc00215 	stw	ra,8(sp)
  8160b4:	df000115 	stw	fp,4(sp)
  8160b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8160bc:	008020b4 	movhi	r2,130
  8160c0:	108e7a04 	addi	r2,r2,14824
  8160c4:	10800017 	ldw	r2,0(r2)
  8160c8:	1005003a 	cmpeq	r2,r2,zero
  8160cc:	1000061e 	bne	r2,zero,8160e8 <alt_get_errno+0x3c>
  8160d0:	008020b4 	movhi	r2,130
  8160d4:	108e7a04 	addi	r2,r2,14824
  8160d8:	10800017 	ldw	r2,0(r2)
  8160dc:	103ee83a 	callr	r2
  8160e0:	e0bfff15 	stw	r2,-4(fp)
  8160e4:	00000306 	br	8160f4 <alt_get_errno+0x48>
  8160e8:	008020b4 	movhi	r2,130
  8160ec:	10957304 	addi	r2,r2,21964
  8160f0:	e0bfff15 	stw	r2,-4(fp)
  8160f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8160f8:	e037883a 	mov	sp,fp
  8160fc:	dfc00117 	ldw	ra,4(sp)
  816100:	df000017 	ldw	fp,0(sp)
  816104:	dec00204 	addi	sp,sp,8
  816108:	f800283a 	ret

0081610c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  81610c:	deffdf04 	addi	sp,sp,-132
  816110:	dfc02015 	stw	ra,128(sp)
  816114:	df001f15 	stw	fp,124(sp)
  816118:	df001f04 	addi	fp,sp,124
  81611c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  816120:	e17fe204 	addi	r5,fp,-120
  816124:	01003fc4 	movi	r4,255
  816128:	081df640 	call	81df64 <OSTaskQuery>
  81612c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  816130:	e0bffe83 	ldbu	r2,-6(fp)
  816134:	10803fcc 	andi	r2,r2,255
  816138:	1004c03a 	cmpne	r2,r2,zero
  81613c:	1000191e 	bne	r2,zero,8161a4 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  816140:	e0bfee83 	ldbu	r2,-70(fp)
  816144:	10803fcc 	andi	r2,r2,255
  816148:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  81614c:	d1270e17 	ldw	r4,-25544(gp)
  816150:	e17ffd04 	addi	r5,fp,-12
  816154:	081c4b00 	call	81c4b0 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  816158:	e0bffe43 	ldbu	r2,-7(fp)
  81615c:	10803fcc 	andi	r2,r2,255
  816160:	1005003a 	cmpeq	r2,r2,zero
  816164:	1000071e 	bne	r2,zero,816184 <__env_lock+0x78>
  816168:	d0e00e17 	ldw	r3,-32712(gp)
  81616c:	e0bfe117 	ldw	r2,-124(fp)
  816170:	10c0041e 	bne	r2,r3,816184 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  816174:	d0a70d17 	ldw	r2,-25548(gp)
  816178:	10800044 	addi	r2,r2,1
  81617c:	d0a70d15 	stw	r2,-25548(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  816180:	00000806 	br	8161a4 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  816184:	d1270e17 	ldw	r4,-25544(gp)
  816188:	e1bffe84 	addi	r6,fp,-6
  81618c:	000b883a 	mov	r5,zero
  816190:	081bf900 	call	81bf90 <OSSemPend>
    locks  = 1;
  816194:	00800044 	movi	r2,1
  816198:	d0a70d15 	stw	r2,-25548(gp)
    lockid = id;
  81619c:	e0bfe117 	ldw	r2,-124(fp)
  8161a0:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  8161a4:	e037883a 	mov	sp,fp
  8161a8:	dfc00117 	ldw	ra,4(sp)
  8161ac:	df000017 	ldw	fp,0(sp)
  8161b0:	dec00204 	addi	sp,sp,8
  8161b4:	f800283a 	ret

008161b8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  8161b8:	defffd04 	addi	sp,sp,-12
  8161bc:	dfc00215 	stw	ra,8(sp)
  8161c0:	df000115 	stw	fp,4(sp)
  8161c4:	df000104 	addi	fp,sp,4
  8161c8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  8161cc:	d0a70d17 	ldw	r2,-25548(gp)
  8161d0:	1005003a 	cmpeq	r2,r2,zero
  8161d4:	10000a1e 	bne	r2,zero,816200 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  8161d8:	d0a70d17 	ldw	r2,-25548(gp)
  8161dc:	10bfffc4 	addi	r2,r2,-1
  8161e0:	d0a70d15 	stw	r2,-25548(gp)
  8161e4:	d0a70d17 	ldw	r2,-25548(gp)
  8161e8:	1004c03a 	cmpne	r2,r2,zero
  8161ec:	1000041e 	bne	r2,zero,816200 <__env_unlock+0x48>
  {
    lockid = -1;
  8161f0:	00bfffc4 	movi	r2,-1
  8161f4:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
  8161f8:	d1270e17 	ldw	r4,-25544(gp)
  8161fc:	081c3880 	call	81c388 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  816200:	e037883a 	mov	sp,fp
  816204:	dfc00117 	ldw	ra,4(sp)
  816208:	df000017 	ldw	fp,0(sp)
  81620c:	dec00204 	addi	sp,sp,8
  816210:	f800283a 	ret

00816214 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  816214:	deffdb04 	addi	sp,sp,-148
  816218:	dfc02415 	stw	ra,144(sp)
  81621c:	df002315 	stw	fp,140(sp)
  816220:	df002304 	addi	fp,sp,140
  816224:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  816228:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  81622c:	008020b4 	movhi	r2,130
  816230:	10957f44 	addi	r2,r2,22013
  816234:	10800003 	ldbu	r2,0(r2)
  816238:	10803fcc 	andi	r2,r2,255
  81623c:	10800058 	cmpnei	r2,r2,1
  816240:	1000311e 	bne	r2,zero,816308 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  816244:	e17fe204 	addi	r5,fp,-120
  816248:	01003fc4 	movi	r4,255
  81624c:	081df640 	call	81df64 <OSTaskQuery>
  816250:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  816254:	e0bffe83 	ldbu	r2,-6(fp)
  816258:	10803fcc 	andi	r2,r2,255
  81625c:	1004c03a 	cmpne	r2,r2,zero
  816260:	1000291e 	bne	r2,zero,816308 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  816264:	e0bfee83 	ldbu	r2,-70(fp)
  816268:	10803fcc 	andi	r2,r2,255
  81626c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  816270:	d1271017 	ldw	r4,-25536(gp)
  816274:	e17ffd04 	addi	r5,fp,-12
  816278:	081c4b00 	call	81c4b0 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81627c:	0005303a 	rdctl	r2,status
  816280:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816284:	e0ffdf17 	ldw	r3,-132(fp)
  816288:	00bfff84 	movi	r2,-2
  81628c:	1884703a 	and	r2,r3,r2
  816290:	1001703a 	wrctl	status,r2
  
  return context;
  816294:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  816298:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  81629c:	e0bffd0b 	ldhu	r2,-12(fp)
  8162a0:	10bfffcc 	andi	r2,r2,65535
  8162a4:	1004c03a 	cmpne	r2,r2,zero
  8162a8:	10000b1e 	bne	r2,zero,8162d8 <__malloc_lock+0xc4>
  8162ac:	d0e00f17 	ldw	r3,-32708(gp)
  8162b0:	e0bfe117 	ldw	r2,-124(fp)
  8162b4:	10c0081e 	bne	r2,r3,8162d8 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  8162b8:	d0a70f17 	ldw	r2,-25540(gp)
  8162bc:	10800044 	addi	r2,r2,1
  8162c0:	d0a70f15 	stw	r2,-25540(gp)
  8162c4:	e0bfe017 	ldw	r2,-128(fp)
  8162c8:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8162cc:	e0bfde17 	ldw	r2,-136(fp)
  8162d0:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  8162d4:	00000c06 	br	816308 <__malloc_lock+0xf4>
  8162d8:	e0bfe017 	ldw	r2,-128(fp)
  8162dc:	e0bfdd15 	stw	r2,-140(fp)
  8162e0:	e0bfdd17 	ldw	r2,-140(fp)
  8162e4:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  8162e8:	d1271017 	ldw	r4,-25536(gp)
  8162ec:	e1bffe84 	addi	r6,fp,-6
  8162f0:	000b883a 	mov	r5,zero
  8162f4:	081bf900 	call	81bf90 <OSSemPend>
    locks  = 1;
  8162f8:	00800044 	movi	r2,1
  8162fc:	d0a70f15 	stw	r2,-25540(gp)
    lockid = id;
  816300:	e0bfe117 	ldw	r2,-124(fp)
  816304:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  816308:	e037883a 	mov	sp,fp
  81630c:	dfc00117 	ldw	ra,4(sp)
  816310:	df000017 	ldw	fp,0(sp)
  816314:	dec00204 	addi	sp,sp,8
  816318:	f800283a 	ret

0081631c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  81631c:	defff804 	addi	sp,sp,-32
  816320:	dfc00715 	stw	ra,28(sp)
  816324:	df000615 	stw	fp,24(sp)
  816328:	df000604 	addi	fp,sp,24
  81632c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  816330:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  816334:	008020b4 	movhi	r2,130
  816338:	10957f44 	addi	r2,r2,22013
  81633c:	10800003 	ldbu	r2,0(r2)
  816340:	10803fcc 	andi	r2,r2,255
  816344:	10800058 	cmpnei	r2,r2,1
  816348:	1000231e 	bne	r2,zero,8163d8 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81634c:	0005303a 	rdctl	r2,status
  816350:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816354:	e0fffd17 	ldw	r3,-12(fp)
  816358:	00bfff84 	movi	r2,-2
  81635c:	1884703a 	and	r2,r3,r2
  816360:	1001703a 	wrctl	status,r2
  
  return context;
  816364:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  816368:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  81636c:	d0a70f17 	ldw	r2,-25540(gp)
  816370:	1004c03a 	cmpne	r2,r2,zero
  816374:	1000051e 	bne	r2,zero,81638c <__malloc_unlock+0x70>
  816378:	e0bffe17 	ldw	r2,-8(fp)
  81637c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816380:	e0bffc17 	ldw	r2,-16(fp)
  816384:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  816388:	00001306 	br	8163d8 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  81638c:	d0a70f17 	ldw	r2,-25540(gp)
  816390:	10bfffc4 	addi	r2,r2,-1
  816394:	d0a70f15 	stw	r2,-25540(gp)
  816398:	d0a70f17 	ldw	r2,-25540(gp)
  81639c:	1004c03a 	cmpne	r2,r2,zero
  8163a0:	1000091e 	bne	r2,zero,8163c8 <__malloc_unlock+0xac>
  {
    lockid = -1;
  8163a4:	00bfffc4 	movi	r2,-1
  8163a8:	d0a00f15 	stw	r2,-32708(gp)
  8163ac:	e0bffe17 	ldw	r2,-8(fp)
  8163b0:	e0bffb15 	stw	r2,-20(fp)
  8163b4:	e0bffb17 	ldw	r2,-20(fp)
  8163b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  8163bc:	d1271017 	ldw	r4,-25536(gp)
  8163c0:	081c3880 	call	81c388 <OSSemPost>
  8163c4:	00000406 	br	8163d8 <__malloc_unlock+0xbc>
  8163c8:	e0bffe17 	ldw	r2,-8(fp)
  8163cc:	e0bffa15 	stw	r2,-24(fp)
  8163d0:	e0bffa17 	ldw	r2,-24(fp)
  8163d4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  8163d8:	e037883a 	mov	sp,fp
  8163dc:	dfc00117 	ldw	ra,4(sp)
  8163e0:	df000017 	ldw	fp,0(sp)
  8163e4:	dec00204 	addi	sp,sp,8
  8163e8:	f800283a 	ret

008163ec <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  8163ec:	defff604 	addi	sp,sp,-40
  8163f0:	dfc00915 	stw	ra,36(sp)
  8163f4:	df000815 	stw	fp,32(sp)
  8163f8:	df000804 	addi	fp,sp,32
  8163fc:	e13ffc15 	stw	r4,-16(fp)
  816400:	e17ffd15 	stw	r5,-12(fp)
  816404:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  816408:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81640c:	e0bffe17 	ldw	r2,-8(fp)
  816410:	1004c03a 	cmpne	r2,r2,zero
  816414:	1000021e 	bne	r2,zero,816420 <OSEventNameGet+0x34>
        return (0);
  816418:	e03fff15 	stw	zero,-4(fp)
  81641c:	00003906 	br	816504 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  816420:	e0bffc17 	ldw	r2,-16(fp)
  816424:	1004c03a 	cmpne	r2,r2,zero
  816428:	1000051e 	bne	r2,zero,816440 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81642c:	e0fffe17 	ldw	r3,-8(fp)
  816430:	00800104 	movi	r2,4
  816434:	18800005 	stb	r2,0(r3)
        return (0);
  816438:	e03fff15 	stw	zero,-4(fp)
  81643c:	00003106 	br	816504 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  816440:	e0bffd17 	ldw	r2,-12(fp)
  816444:	1004c03a 	cmpne	r2,r2,zero
  816448:	1000051e 	bne	r2,zero,816460 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  81644c:	e0fffe17 	ldw	r3,-8(fp)
  816450:	00800304 	movi	r2,12
  816454:	18800005 	stb	r2,0(r3)
        return (0);
  816458:	e03fff15 	stw	zero,-4(fp)
  81645c:	00002906 	br	816504 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  816460:	d0a71f03 	ldbu	r2,-25476(gp)
  816464:	10803fcc 	andi	r2,r2,255
  816468:	1005003a 	cmpeq	r2,r2,zero
  81646c:	1000051e 	bne	r2,zero,816484 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  816470:	e0fffe17 	ldw	r3,-8(fp)
  816474:	00800444 	movi	r2,17
  816478:	18800005 	stb	r2,0(r3)
        return (0);
  81647c:	e03fff15 	stw	zero,-4(fp)
  816480:	00002006 	br	816504 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  816484:	e0bffc17 	ldw	r2,-16(fp)
  816488:	10800003 	ldbu	r2,0(r2)
  81648c:	10803fcc 	andi	r2,r2,255
  816490:	10bfffc4 	addi	r2,r2,-1
  816494:	10800128 	cmpgeui	r2,r2,4
  816498:	1000161e 	bne	r2,zero,8164f4 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81649c:	0005303a 	rdctl	r2,status
  8164a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8164a4:	e0fff917 	ldw	r3,-28(fp)
  8164a8:	00bfff84 	movi	r2,-2
  8164ac:	1884703a 	and	r2,r3,r2
  8164b0:	1001703a 	wrctl	status,r2
  
  return context;
  8164b4:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  8164b8:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  8164bc:	e0bffc17 	ldw	r2,-16(fp)
  8164c0:	11400384 	addi	r5,r2,14
  8164c4:	e13ffd17 	ldw	r4,-12(fp)
  8164c8:	0817f700 	call	817f70 <OS_StrCopy>
  8164cc:	e0bffb05 	stb	r2,-20(fp)
  8164d0:	e0bffa17 	ldw	r2,-24(fp)
  8164d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8164d8:	e0bff817 	ldw	r2,-32(fp)
  8164dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8164e0:	e0bffe17 	ldw	r2,-8(fp)
  8164e4:	10000005 	stb	zero,0(r2)
    return (len);
  8164e8:	e0bffb03 	ldbu	r2,-20(fp)
  8164ec:	e0bfff15 	stw	r2,-4(fp)
  8164f0:	00000406 	br	816504 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  8164f4:	e0fffe17 	ldw	r3,-8(fp)
  8164f8:	00800044 	movi	r2,1
  8164fc:	18800005 	stb	r2,0(r3)
             return (0);
  816500:	e03fff15 	stw	zero,-4(fp)
  816504:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  816508:	e037883a 	mov	sp,fp
  81650c:	dfc00117 	ldw	ra,4(sp)
  816510:	df000017 	ldw	fp,0(sp)
  816514:	dec00204 	addi	sp,sp,8
  816518:	f800283a 	ret

0081651c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  81651c:	defff604 	addi	sp,sp,-40
  816520:	dfc00915 	stw	ra,36(sp)
  816524:	df000815 	stw	fp,32(sp)
  816528:	df000804 	addi	fp,sp,32
  81652c:	e13ffd15 	stw	r4,-12(fp)
  816530:	e17ffe15 	stw	r5,-8(fp)
  816534:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  816538:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81653c:	e0bfff17 	ldw	r2,-4(fp)
  816540:	1005003a 	cmpeq	r2,r2,zero
  816544:	1000411e 	bne	r2,zero,81664c <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  816548:	e0bffd17 	ldw	r2,-12(fp)
  81654c:	1004c03a 	cmpne	r2,r2,zero
  816550:	1000041e 	bne	r2,zero,816564 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  816554:	e0ffff17 	ldw	r3,-4(fp)
  816558:	00800104 	movi	r2,4
  81655c:	18800005 	stb	r2,0(r3)
        return;
  816560:	00003a06 	br	81664c <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  816564:	e0bffe17 	ldw	r2,-8(fp)
  816568:	1004c03a 	cmpne	r2,r2,zero
  81656c:	1000041e 	bne	r2,zero,816580 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  816570:	e0ffff17 	ldw	r3,-4(fp)
  816574:	00800304 	movi	r2,12
  816578:	18800005 	stb	r2,0(r3)
        return;
  81657c:	00003306 	br	81664c <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  816580:	d0a71f03 	ldbu	r2,-25476(gp)
  816584:	10803fcc 	andi	r2,r2,255
  816588:	1005003a 	cmpeq	r2,r2,zero
  81658c:	1000041e 	bne	r2,zero,8165a0 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  816590:	e0ffff17 	ldw	r3,-4(fp)
  816594:	00800484 	movi	r2,18
  816598:	18800005 	stb	r2,0(r3)
        return;
  81659c:	00002b06 	br	81664c <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  8165a0:	e0bffd17 	ldw	r2,-12(fp)
  8165a4:	10800003 	ldbu	r2,0(r2)
  8165a8:	10803fcc 	andi	r2,r2,255
  8165ac:	10bfffc4 	addi	r2,r2,-1
  8165b0:	10800128 	cmpgeui	r2,r2,4
  8165b4:	10000f1e 	bne	r2,zero,8165f4 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8165b8:	0005303a 	rdctl	r2,status
  8165bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8165c0:	e0fffa17 	ldw	r3,-24(fp)
  8165c4:	00bfff84 	movi	r2,-2
  8165c8:	1884703a 	and	r2,r3,r2
  8165cc:	1001703a 	wrctl	status,r2
  
  return context;
  8165d0:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  8165d4:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  8165d8:	e13ffe17 	ldw	r4,-8(fp)
  8165dc:	0817ff00 	call	817ff0 <OS_StrLen>
  8165e0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  8165e4:	e0bffc03 	ldbu	r2,-16(fp)
  8165e8:	10800828 	cmpgeui	r2,r2,32
  8165ec:	1000051e 	bne	r2,zero,816604 <OSEventNameSet+0xe8>
  8165f0:	00000c06 	br	816624 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  8165f4:	e0ffff17 	ldw	r3,-4(fp)
  8165f8:	00800044 	movi	r2,1
  8165fc:	18800005 	stb	r2,0(r3)
             return;
  816600:	00001206 	br	81664c <OSEventNameSet+0x130>
  816604:	e0bffb17 	ldw	r2,-20(fp)
  816608:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81660c:	e0bff917 	ldw	r2,-28(fp)
  816610:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  816614:	e0ffff17 	ldw	r3,-4(fp)
  816618:	008002c4 	movi	r2,11
  81661c:	18800005 	stb	r2,0(r3)
        return;
  816620:	00000a06 	br	81664c <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  816624:	e0bffd17 	ldw	r2,-12(fp)
  816628:	11000384 	addi	r4,r2,14
  81662c:	e17ffe17 	ldw	r5,-8(fp)
  816630:	0817f700 	call	817f70 <OS_StrCopy>
  816634:	e0bffb17 	ldw	r2,-20(fp)
  816638:	e0bff815 	stw	r2,-32(fp)
  81663c:	e0bff817 	ldw	r2,-32(fp)
  816640:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  816644:	e0bfff17 	ldw	r2,-4(fp)
  816648:	10000005 	stb	zero,0(r2)
}
  81664c:	e037883a 	mov	sp,fp
  816650:	dfc00117 	ldw	ra,4(sp)
  816654:	df000017 	ldw	fp,0(sp)
  816658:	dec00204 	addi	sp,sp,8
  81665c:	f800283a 	ret

00816660 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  816660:	deffe704 	addi	sp,sp,-100
  816664:	dfc01815 	stw	ra,96(sp)
  816668:	df001715 	stw	fp,92(sp)
  81666c:	df001704 	addi	fp,sp,92
  816670:	e13ff615 	stw	r4,-40(fp)
  816674:	e17ff715 	stw	r5,-36(fp)
  816678:	e1bff815 	stw	r6,-32(fp)
  81667c:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  816680:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  816684:	e0800217 	ldw	r2,8(fp)
  816688:	1004c03a 	cmpne	r2,r2,zero
  81668c:	1000021e 	bne	r2,zero,816698 <OSEventPendMulti+0x38>
        return (0);
  816690:	e03fff15 	stw	zero,-4(fp)
  816694:	00019906 	br	816cfc <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  816698:	e0bff617 	ldw	r2,-40(fp)
  81669c:	1004c03a 	cmpne	r2,r2,zero
  8166a0:	1000051e 	bne	r2,zero,8166b8 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  8166a4:	e0c00217 	ldw	r3,8(fp)
  8166a8:	00800104 	movi	r2,4
  8166ac:	18800005 	stb	r2,0(r3)
        return (0);
  8166b0:	e03fff15 	stw	zero,-4(fp)
  8166b4:	00019106 	br	816cfc <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  8166b8:	e0bff717 	ldw	r2,-36(fp)
  8166bc:	1004c03a 	cmpne	r2,r2,zero
  8166c0:	1000051e 	bne	r2,zero,8166d8 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  8166c4:	e0c00217 	ldw	r3,8(fp)
  8166c8:	00800104 	movi	r2,4
  8166cc:	18800005 	stb	r2,0(r3)
        return (0);
  8166d0:	e03fff15 	stw	zero,-4(fp)
  8166d4:	00018906 	br	816cfc <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  8166d8:	e0bff817 	ldw	r2,-32(fp)
  8166dc:	1004c03a 	cmpne	r2,r2,zero
  8166e0:	1000051e 	bne	r2,zero,8166f8 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  8166e4:	e0c00217 	ldw	r3,8(fp)
  8166e8:	00800104 	movi	r2,4
  8166ec:	18800005 	stb	r2,0(r3)
        return (0);
  8166f0:	e03fff15 	stw	zero,-4(fp)
  8166f4:	00018106 	br	816cfc <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  8166f8:	e0bff717 	ldw	r2,-36(fp)
  8166fc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  816700:	e0bff617 	ldw	r2,-40(fp)
  816704:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  816708:	e0bff517 	ldw	r2,-44(fp)
  81670c:	10800017 	ldw	r2,0(r2)
  816710:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  816714:	00001806 	br	816778 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  816718:	e0bff417 	ldw	r2,-48(fp)
  81671c:	10800003 	ldbu	r2,0(r2)
  816720:	10803fcc 	andi	r2,r2,255
  816724:	e0bffe15 	stw	r2,-8(fp)
  816728:	e0fffe17 	ldw	r3,-8(fp)
  81672c:	188000a0 	cmpeqi	r2,r3,2
  816730:	10000b1e 	bne	r2,zero,816760 <OSEventPendMulti+0x100>
  816734:	e0fffe17 	ldw	r3,-8(fp)
  816738:	188000e0 	cmpeqi	r2,r3,3
  81673c:	1000081e 	bne	r2,zero,816760 <OSEventPendMulti+0x100>
  816740:	e0fffe17 	ldw	r3,-8(fp)
  816744:	18800060 	cmpeqi	r2,r3,1
  816748:	1000051e 	bne	r2,zero,816760 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  81674c:	e0c00217 	ldw	r3,8(fp)
  816750:	00800044 	movi	r2,1
  816754:	18800005 	stb	r2,0(r3)
                 return (0);
  816758:	e03fff15 	stw	zero,-4(fp)
  81675c:	00016706 	br	816cfc <OSEventPendMulti+0x69c>
        }
        pevents++;
  816760:	e0bff517 	ldw	r2,-44(fp)
  816764:	10800104 	addi	r2,r2,4
  816768:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  81676c:	e0bff517 	ldw	r2,-44(fp)
  816770:	10800017 	ldw	r2,0(r2)
  816774:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  816778:	e0bff417 	ldw	r2,-48(fp)
  81677c:	1004c03a 	cmpne	r2,r2,zero
  816780:	103fe51e 	bne	r2,zero,816718 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  816784:	d0a71f03 	ldbu	r2,-25476(gp)
  816788:	10803fcc 	andi	r2,r2,255
  81678c:	1005003a 	cmpeq	r2,r2,zero
  816790:	1000051e 	bne	r2,zero,8167a8 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  816794:	e0c00217 	ldw	r3,8(fp)
  816798:	00800084 	movi	r2,2
  81679c:	18800005 	stb	r2,0(r3)
        return (0);
  8167a0:	e03fff15 	stw	zero,-4(fp)
  8167a4:	00015506 	br	816cfc <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  8167a8:	d0a71103 	ldbu	r2,-25532(gp)
  8167ac:	10803fcc 	andi	r2,r2,255
  8167b0:	1005003a 	cmpeq	r2,r2,zero
  8167b4:	1000051e 	bne	r2,zero,8167cc <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  8167b8:	e0c00217 	ldw	r3,8(fp)
  8167bc:	00800344 	movi	r2,13
  8167c0:	18800005 	stb	r2,0(r3)
        return (0);
  8167c4:	e03fff15 	stw	zero,-4(fp)
  8167c8:	00014c06 	br	816cfc <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8167cc:	0005303a 	rdctl	r2,status
  8167d0:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8167d4:	e0ffef17 	ldw	r3,-68(fp)
  8167d8:	00bfff84 	movi	r2,-2
  8167dc:	1884703a 	and	r2,r3,r2
  8167e0:	1001703a 	wrctl	status,r2
  
  return context;
  8167e4:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  8167e8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  8167ec:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  8167f0:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  8167f4:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  8167f8:	e0bff617 	ldw	r2,-40(fp)
  8167fc:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  816800:	e0bff517 	ldw	r2,-44(fp)
  816804:	10800017 	ldw	r2,0(r2)
  816808:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  81680c:	00008f06 	br	816a4c <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  816810:	e0bff417 	ldw	r2,-48(fp)
  816814:	10800003 	ldbu	r2,0(r2)
  816818:	10803fcc 	andi	r2,r2,255
  81681c:	e0bffd15 	stw	r2,-12(fp)
  816820:	e0fffd17 	ldw	r3,-12(fp)
  816824:	188000a0 	cmpeqi	r2,r3,2
  816828:	1000441e 	bne	r2,zero,81693c <OSEventPendMulti+0x2dc>
  81682c:	e0fffd17 	ldw	r3,-12(fp)
  816830:	188000e0 	cmpeqi	r2,r3,3
  816834:	1000041e 	bne	r2,zero,816848 <OSEventPendMulti+0x1e8>
  816838:	e0fffd17 	ldw	r3,-12(fp)
  81683c:	18800060 	cmpeqi	r2,r3,1
  816840:	1000211e 	bne	r2,zero,8168c8 <OSEventPendMulti+0x268>
  816844:	00006f06 	br	816a04 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  816848:	e0bff417 	ldw	r2,-48(fp)
  81684c:	1080020b 	ldhu	r2,8(r2)
  816850:	10bfffcc 	andi	r2,r2,65535
  816854:	1005003a 	cmpeq	r2,r2,zero
  816858:	1000171e 	bne	r2,zero,8168b8 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  81685c:	e0bff417 	ldw	r2,-48(fp)
  816860:	1080020b 	ldhu	r2,8(r2)
  816864:	10bfffc4 	addi	r2,r2,-1
  816868:	1007883a 	mov	r3,r2
  81686c:	e0bff417 	ldw	r2,-48(fp)
  816870:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  816874:	e0fff717 	ldw	r3,-36(fp)
  816878:	e0bff417 	ldw	r2,-48(fp)
  81687c:	18800015 	stw	r2,0(r3)
  816880:	e0bff717 	ldw	r2,-36(fp)
  816884:	10800104 	addi	r2,r2,4
  816888:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  81688c:	00800044 	movi	r2,1
  816890:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  816894:	e0bff817 	ldw	r2,-32(fp)
  816898:	10000015 	stw	zero,0(r2)
  81689c:	e0bff817 	ldw	r2,-32(fp)
  8168a0:	10800104 	addi	r2,r2,4
  8168a4:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  8168a8:	e0bff18b 	ldhu	r2,-58(fp)
  8168ac:	10800044 	addi	r2,r2,1
  8168b0:	e0bff18d 	sth	r2,-58(fp)
  8168b4:	00005f06 	br	816a34 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  8168b8:	e0bff103 	ldbu	r2,-60(fp)
  8168bc:	10800054 	ori	r2,r2,1
  8168c0:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  8168c4:	00005b06 	br	816a34 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  8168c8:	e0bff417 	ldw	r2,-48(fp)
  8168cc:	10800117 	ldw	r2,4(r2)
  8168d0:	1005003a 	cmpeq	r2,r2,zero
  8168d4:	1000151e 	bne	r2,zero,81692c <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  8168d8:	e0bff417 	ldw	r2,-48(fp)
  8168dc:	10c00117 	ldw	r3,4(r2)
  8168e0:	e0bff817 	ldw	r2,-32(fp)
  8168e4:	10c00015 	stw	r3,0(r2)
  8168e8:	e0bff817 	ldw	r2,-32(fp)
  8168ec:	10800104 	addi	r2,r2,4
  8168f0:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  8168f4:	e0bff417 	ldw	r2,-48(fp)
  8168f8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  8168fc:	e0fff717 	ldw	r3,-36(fp)
  816900:	e0bff417 	ldw	r2,-48(fp)
  816904:	18800015 	stw	r2,0(r3)
  816908:	e0bff717 	ldw	r2,-36(fp)
  81690c:	10800104 	addi	r2,r2,4
  816910:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  816914:	00800044 	movi	r2,1
  816918:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  81691c:	e0bff18b 	ldhu	r2,-58(fp)
  816920:	10800044 	addi	r2,r2,1
  816924:	e0bff18d 	sth	r2,-58(fp)
  816928:	00004206 	br	816a34 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  81692c:	e0bff103 	ldbu	r2,-60(fp)
  816930:	10800094 	ori	r2,r2,2
  816934:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  816938:	00003e06 	br	816a34 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  81693c:	e0bff417 	ldw	r2,-48(fp)
  816940:	10800117 	ldw	r2,4(r2)
  816944:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  816948:	e0bff317 	ldw	r2,-52(fp)
  81694c:	1080058b 	ldhu	r2,22(r2)
  816950:	10bfffcc 	andi	r2,r2,65535
  816954:	1005003a 	cmpeq	r2,r2,zero
  816958:	1000261e 	bne	r2,zero,8169f4 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  81695c:	e0bff317 	ldw	r2,-52(fp)
  816960:	11000417 	ldw	r4,16(r2)
  816964:	20c00017 	ldw	r3,0(r4)
  816968:	e0bff817 	ldw	r2,-32(fp)
  81696c:	10c00015 	stw	r3,0(r2)
  816970:	e0bff817 	ldw	r2,-32(fp)
  816974:	10800104 	addi	r2,r2,4
  816978:	e0bff815 	stw	r2,-32(fp)
  81697c:	20c00104 	addi	r3,r4,4
  816980:	e0bff317 	ldw	r2,-52(fp)
  816984:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  816988:	e0bff317 	ldw	r2,-52(fp)
  81698c:	10c00417 	ldw	r3,16(r2)
  816990:	e0bff317 	ldw	r2,-52(fp)
  816994:	10800217 	ldw	r2,8(r2)
  816998:	1880041e 	bne	r3,r2,8169ac <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  81699c:	e0bff317 	ldw	r2,-52(fp)
  8169a0:	10c00117 	ldw	r3,4(r2)
  8169a4:	e0bff317 	ldw	r2,-52(fp)
  8169a8:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  8169ac:	e0bff317 	ldw	r2,-52(fp)
  8169b0:	1080058b 	ldhu	r2,22(r2)
  8169b4:	10bfffc4 	addi	r2,r2,-1
  8169b8:	1007883a 	mov	r3,r2
  8169bc:	e0bff317 	ldw	r2,-52(fp)
  8169c0:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  8169c4:	e0fff717 	ldw	r3,-36(fp)
  8169c8:	e0bff417 	ldw	r2,-48(fp)
  8169cc:	18800015 	stw	r2,0(r3)
  8169d0:	e0bff717 	ldw	r2,-36(fp)
  8169d4:	10800104 	addi	r2,r2,4
  8169d8:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  8169dc:	00800044 	movi	r2,1
  8169e0:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  8169e4:	e0bff18b 	ldhu	r2,-58(fp)
  8169e8:	10800044 	addi	r2,r2,1
  8169ec:	e0bff18d 	sth	r2,-58(fp)
  8169f0:	00001006 	br	816a34 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  8169f4:	e0bff103 	ldbu	r2,-60(fp)
  8169f8:	10800114 	ori	r2,r2,4
  8169fc:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  816a00:	00000c06 	br	816a34 <OSEventPendMulti+0x3d4>
  816a04:	e0bff017 	ldw	r2,-64(fp)
  816a08:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816a0c:	e0bfee17 	ldw	r2,-72(fp)
  816a10:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  816a14:	e0bff717 	ldw	r2,-36(fp)
  816a18:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  816a1c:	e0c00217 	ldw	r3,8(fp)
  816a20:	00800044 	movi	r2,1
  816a24:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  816a28:	e0bff18b 	ldhu	r2,-58(fp)
  816a2c:	e0bfff15 	stw	r2,-4(fp)
  816a30:	0000b206 	br	816cfc <OSEventPendMulti+0x69c>
        }
        pevents++;
  816a34:	e0bff517 	ldw	r2,-44(fp)
  816a38:	10800104 	addi	r2,r2,4
  816a3c:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  816a40:	e0bff517 	ldw	r2,-44(fp)
  816a44:	10800017 	ldw	r2,0(r2)
  816a48:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  816a4c:	e0bff417 	ldw	r2,-48(fp)
  816a50:	1004c03a 	cmpne	r2,r2,zero
  816a54:	103f6e1e 	bne	r2,zero,816810 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  816a58:	e0bff203 	ldbu	r2,-56(fp)
  816a5c:	10800058 	cmpnei	r2,r2,1
  816a60:	10000b1e 	bne	r2,zero,816a90 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  816a64:	e0bff717 	ldw	r2,-36(fp)
  816a68:	10000015 	stw	zero,0(r2)
  816a6c:	e0bff017 	ldw	r2,-64(fp)
  816a70:	e0bfed15 	stw	r2,-76(fp)
  816a74:	e0bfed17 	ldw	r2,-76(fp)
  816a78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  816a7c:	e0800217 	ldw	r2,8(fp)
  816a80:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  816a84:	e0fff18b 	ldhu	r3,-58(fp)
  816a88:	e0ffff15 	stw	r3,-4(fp)
  816a8c:	00009b06 	br	816cfc <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  816a90:	d1272017 	ldw	r4,-25472(gp)
  816a94:	d0a72017 	ldw	r2,-25472(gp)
  816a98:	10c00c03 	ldbu	r3,48(r2)
  816a9c:	e0bff103 	ldbu	r2,-60(fp)
  816aa0:	1884b03a 	or	r2,r3,r2
  816aa4:	1007883a 	mov	r3,r2
  816aa8:	00bfe004 	movi	r2,-128
  816aac:	1884b03a 	or	r2,r3,r2
  816ab0:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  816ab4:	d0a72017 	ldw	r2,-25472(gp)
  816ab8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  816abc:	d0e72017 	ldw	r3,-25472(gp)
  816ac0:	e0bff90b 	ldhu	r2,-28(fp)
  816ac4:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  816ac8:	e13ff617 	ldw	r4,-40(fp)
  816acc:	08176900 	call	817690 <OS_EventTaskWaitMulti>
  816ad0:	e0bff017 	ldw	r2,-64(fp)
  816ad4:	e0bfec15 	stw	r2,-80(fp)
  816ad8:	e0bfec17 	ldw	r2,-80(fp)
  816adc:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  816ae0:	0817e2c0 	call	817e2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816ae4:	0005303a 	rdctl	r2,status
  816ae8:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816aec:	e0ffeb17 	ldw	r3,-84(fp)
  816af0:	00bfff84 	movi	r2,-2
  816af4:	1884703a 	and	r2,r3,r2
  816af8:	1001703a 	wrctl	status,r2
  
  return context;
  816afc:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  816b00:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  816b04:	d0a72017 	ldw	r2,-25472(gp)
  816b08:	10800c43 	ldbu	r2,49(r2)
  816b0c:	10803fcc 	andi	r2,r2,255
  816b10:	e0bffc15 	stw	r2,-16(fp)
  816b14:	e0fffc17 	ldw	r3,-16(fp)
  816b18:	1805003a 	cmpeq	r2,r3,zero
  816b1c:	1000041e 	bne	r2,zero,816b30 <OSEventPendMulti+0x4d0>
  816b20:	e0fffc17 	ldw	r3,-16(fp)
  816b24:	188000a0 	cmpeqi	r2,r3,2
  816b28:	1000011e 	bne	r2,zero,816b30 <OSEventPendMulti+0x4d0>
  816b2c:	00001906 	br	816b94 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  816b30:	d0a72017 	ldw	r2,-25472(gp)
  816b34:	10800717 	ldw	r2,28(r2)
  816b38:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  816b3c:	e0bff417 	ldw	r2,-48(fp)
  816b40:	1005003a 	cmpeq	r2,r2,zero
  816b44:	10000c1e 	bne	r2,zero,816b78 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  816b48:	e0fff717 	ldw	r3,-36(fp)
  816b4c:	e0bff417 	ldw	r2,-48(fp)
  816b50:	18800015 	stw	r2,0(r3)
  816b54:	e0bff717 	ldw	r2,-36(fp)
  816b58:	10800104 	addi	r2,r2,4
  816b5c:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  816b60:	e0bff717 	ldw	r2,-36(fp)
  816b64:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  816b68:	e0bff18b 	ldhu	r2,-58(fp)
  816b6c:	10800044 	addi	r2,r2,1
  816b70:	e0bff18d 	sth	r2,-58(fp)
  816b74:	00000a06 	br	816ba0 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  816b78:	d0a72017 	ldw	r2,-25472(gp)
  816b7c:	00c00044 	movi	r3,1
  816b80:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  816b84:	d1272017 	ldw	r4,-25472(gp)
  816b88:	e17ff617 	ldw	r5,-40(fp)
  816b8c:	081789c0 	call	81789c <OS_EventTaskRemoveMulti>
             }
			 break;
  816b90:	00000306 	br	816ba0 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  816b94:	d1272017 	ldw	r4,-25472(gp)
  816b98:	e17ff617 	ldw	r5,-40(fp)
  816b9c:	081789c0 	call	81789c <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  816ba0:	d0a72017 	ldw	r2,-25472(gp)
  816ba4:	10800c43 	ldbu	r2,49(r2)
  816ba8:	10803fcc 	andi	r2,r2,255
  816bac:	e0bffb15 	stw	r2,-20(fp)
  816bb0:	e0fffb17 	ldw	r3,-20(fp)
  816bb4:	1805003a 	cmpeq	r2,r3,zero
  816bb8:	1000041e 	bne	r2,zero,816bcc <OSEventPendMulti+0x56c>
  816bbc:	e0fffb17 	ldw	r3,-20(fp)
  816bc0:	188000a0 	cmpeqi	r2,r3,2
  816bc4:	10002c1e 	bne	r2,zero,816c78 <OSEventPendMulti+0x618>
  816bc8:	00003406 	br	816c9c <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  816bcc:	e0bff417 	ldw	r2,-48(fp)
  816bd0:	10800003 	ldbu	r2,0(r2)
  816bd4:	10803fcc 	andi	r2,r2,255
  816bd8:	e0bffa15 	stw	r2,-24(fp)
  816bdc:	e0fffa17 	ldw	r3,-24(fp)
  816be0:	18800050 	cmplti	r2,r3,1
  816be4:	1000151e 	bne	r2,zero,816c3c <OSEventPendMulti+0x5dc>
  816be8:	e0fffa17 	ldw	r3,-24(fp)
  816bec:	188000d0 	cmplti	r2,r3,3
  816bf0:	10000a1e 	bne	r2,zero,816c1c <OSEventPendMulti+0x5bc>
  816bf4:	e0fffa17 	ldw	r3,-24(fp)
  816bf8:	188000e0 	cmpeqi	r2,r3,3
  816bfc:	1000011e 	bne	r2,zero,816c04 <OSEventPendMulti+0x5a4>
  816c00:	00000e06 	br	816c3c <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  816c04:	e0bff817 	ldw	r2,-32(fp)
  816c08:	10000015 	stw	zero,0(r2)
  816c0c:	e0bff817 	ldw	r2,-32(fp)
  816c10:	10800104 	addi	r2,r2,4
  816c14:	e0bff815 	stw	r2,-32(fp)
                      break;
  816c18:	00001406 	br	816c6c <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  816c1c:	d0a72017 	ldw	r2,-25472(gp)
  816c20:	10c00917 	ldw	r3,36(r2)
  816c24:	e0bff817 	ldw	r2,-32(fp)
  816c28:	10c00015 	stw	r3,0(r2)
  816c2c:	e0bff817 	ldw	r2,-32(fp)
  816c30:	10800104 	addi	r2,r2,4
  816c34:	e0bff815 	stw	r2,-32(fp)
                      break;
  816c38:	00000c06 	br	816c6c <OSEventPendMulti+0x60c>
  816c3c:	e0bff017 	ldw	r2,-64(fp)
  816c40:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816c44:	e0bfea17 	ldw	r2,-88(fp)
  816c48:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  816c4c:	e0bff717 	ldw	r2,-36(fp)
  816c50:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  816c54:	e0c00217 	ldw	r3,8(fp)
  816c58:	00800044 	movi	r2,1
  816c5c:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  816c60:	e0bff18b 	ldhu	r2,-58(fp)
  816c64:	e0bfff15 	stw	r2,-4(fp)
  816c68:	00002406 	br	816cfc <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  816c6c:	e0800217 	ldw	r2,8(fp)
  816c70:	10000005 	stb	zero,0(r2)
             break;
  816c74:	00001106 	br	816cbc <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  816c78:	e0bff817 	ldw	r2,-32(fp)
  816c7c:	10000015 	stw	zero,0(r2)
  816c80:	e0bff817 	ldw	r2,-32(fp)
  816c84:	10800104 	addi	r2,r2,4
  816c88:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  816c8c:	e0c00217 	ldw	r3,8(fp)
  816c90:	00800384 	movi	r2,14
  816c94:	18800005 	stb	r2,0(r3)
             break;
  816c98:	00000806 	br	816cbc <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  816c9c:	e0bff817 	ldw	r2,-32(fp)
  816ca0:	10000015 	stw	zero,0(r2)
  816ca4:	e0bff817 	ldw	r2,-32(fp)
  816ca8:	10800104 	addi	r2,r2,4
  816cac:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  816cb0:	e0c00217 	ldw	r3,8(fp)
  816cb4:	00800284 	movi	r2,10
  816cb8:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  816cbc:	d0a72017 	ldw	r2,-25472(gp)
  816cc0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  816cc4:	d0a72017 	ldw	r2,-25472(gp)
  816cc8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  816ccc:	d0a72017 	ldw	r2,-25472(gp)
  816cd0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  816cd4:	d0a72017 	ldw	r2,-25472(gp)
  816cd8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  816cdc:	d0a72017 	ldw	r2,-25472(gp)
  816ce0:	10000915 	stw	zero,36(r2)
  816ce4:	e0bff017 	ldw	r2,-64(fp)
  816ce8:	e0bfe915 	stw	r2,-92(fp)
  816cec:	e0bfe917 	ldw	r2,-92(fp)
  816cf0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  816cf4:	e0fff18b 	ldhu	r3,-58(fp)
  816cf8:	e0ffff15 	stw	r3,-4(fp)
  816cfc:	e0bfff17 	ldw	r2,-4(fp)
}
  816d00:	e037883a 	mov	sp,fp
  816d04:	dfc00117 	ldw	ra,4(sp)
  816d08:	df000017 	ldw	fp,0(sp)
  816d0c:	dec00204 	addi	sp,sp,8
  816d10:	f800283a 	ret

00816d14 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  816d14:	defffe04 	addi	sp,sp,-8
  816d18:	dfc00115 	stw	ra,4(sp)
  816d1c:	df000015 	stw	fp,0(sp)
  816d20:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  816d24:	0820f0c0 	call	820f0c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  816d28:	0817ae40 	call	817ae4 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  816d2c:	0817b280 	call	817b28 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  816d30:	0817c8c0 	call	817c8c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  816d34:	0817a080 	call	817a08 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  816d38:	0819d3c0 	call	819d3c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  816d3c:	081a7140 	call	81a714 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  816d40:	081ba700 	call	81ba70 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  816d44:	0817b940 	call	817b94 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  816d48:	0817c100 	call	817c10 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  816d4c:	0820f280 	call	820f28 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  816d50:	08185140 	call	818514 <OSDebugInit>
#endif
}
  816d54:	e037883a 	mov	sp,fp
  816d58:	dfc00117 	ldw	ra,4(sp)
  816d5c:	df000017 	ldw	fp,0(sp)
  816d60:	dec00204 	addi	sp,sp,8
  816d64:	f800283a 	ret

00816d68 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  816d68:	defffc04 	addi	sp,sp,-16
  816d6c:	df000315 	stw	fp,12(sp)
  816d70:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  816d74:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  816d78:	d0a71143 	ldbu	r2,-25531(gp)
  816d7c:	10803fcc 	andi	r2,r2,255
  816d80:	10800058 	cmpnei	r2,r2,1
  816d84:	1000131e 	bne	r2,zero,816dd4 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816d88:	0005303a 	rdctl	r2,status
  816d8c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816d90:	e0fffe17 	ldw	r3,-8(fp)
  816d94:	00bfff84 	movi	r2,-2
  816d98:	1884703a 	and	r2,r3,r2
  816d9c:	1001703a 	wrctl	status,r2
  
  return context;
  816da0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  816da4:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  816da8:	d0a71f03 	ldbu	r2,-25476(gp)
  816dac:	10803fcc 	andi	r2,r2,255
  816db0:	10803fe0 	cmpeqi	r2,r2,255
  816db4:	1000031e 	bne	r2,zero,816dc4 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  816db8:	d0a71f03 	ldbu	r2,-25476(gp)
  816dbc:	10800044 	addi	r2,r2,1
  816dc0:	d0a71f05 	stb	r2,-25476(gp)
  816dc4:	e0bfff17 	ldw	r2,-4(fp)
  816dc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816dcc:	e0bffd17 	ldw	r2,-12(fp)
  816dd0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  816dd4:	e037883a 	mov	sp,fp
  816dd8:	df000017 	ldw	fp,0(sp)
  816ddc:	dec00104 	addi	sp,sp,4
  816de0:	f800283a 	ret

00816de4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  816de4:	defffb04 	addi	sp,sp,-20
  816de8:	dfc00415 	stw	ra,16(sp)
  816dec:	df000315 	stw	fp,12(sp)
  816df0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  816df4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  816df8:	d0a71143 	ldbu	r2,-25531(gp)
  816dfc:	10803fcc 	andi	r2,r2,255
  816e00:	10800058 	cmpnei	r2,r2,1
  816e04:	1000321e 	bne	r2,zero,816ed0 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816e08:	0005303a 	rdctl	r2,status
  816e0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816e10:	e0fffe17 	ldw	r3,-8(fp)
  816e14:	00bfff84 	movi	r2,-2
  816e18:	1884703a 	and	r2,r3,r2
  816e1c:	1001703a 	wrctl	status,r2
  
  return context;
  816e20:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  816e24:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  816e28:	d0a71f03 	ldbu	r2,-25476(gp)
  816e2c:	10803fcc 	andi	r2,r2,255
  816e30:	1005003a 	cmpeq	r2,r2,zero
  816e34:	1000031e 	bne	r2,zero,816e44 <OSIntExit+0x60>
            OSIntNesting--;
  816e38:	d0a71f03 	ldbu	r2,-25476(gp)
  816e3c:	10bfffc4 	addi	r2,r2,-1
  816e40:	d0a71f05 	stb	r2,-25476(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  816e44:	d0a71f03 	ldbu	r2,-25476(gp)
  816e48:	10803fcc 	andi	r2,r2,255
  816e4c:	1004c03a 	cmpne	r2,r2,zero
  816e50:	10001b1e 	bne	r2,zero,816ec0 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  816e54:	d0a71103 	ldbu	r2,-25532(gp)
  816e58:	10803fcc 	andi	r2,r2,255
  816e5c:	1004c03a 	cmpne	r2,r2,zero
  816e60:	1000171e 	bne	r2,zero,816ec0 <OSIntExit+0xdc>
                OS_SchedNew();
  816e64:	0817f000 	call	817f00 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  816e68:	d0a71303 	ldbu	r2,-25524(gp)
  816e6c:	d0e71343 	ldbu	r3,-25523(gp)
  816e70:	11003fcc 	andi	r4,r2,255
  816e74:	18803fcc 	andi	r2,r3,255
  816e78:	20801126 	beq	r4,r2,816ec0 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  816e7c:	d0a71303 	ldbu	r2,-25524(gp)
  816e80:	10803fcc 	andi	r2,r2,255
  816e84:	00c020f4 	movhi	r3,131
  816e88:	18ea1404 	addi	r3,r3,-22448
  816e8c:	1085883a 	add	r2,r2,r2
  816e90:	1085883a 	add	r2,r2,r2
  816e94:	10c5883a 	add	r2,r2,r3
  816e98:	10800017 	ldw	r2,0(r2)
  816e9c:	d0a71b15 	stw	r2,-25492(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  816ea0:	d0e71b17 	ldw	r3,-25492(gp)
  816ea4:	18800e17 	ldw	r2,56(r3)
  816ea8:	10800044 	addi	r2,r2,1
  816eac:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  816eb0:	d0a71617 	ldw	r2,-25512(gp)
  816eb4:	10800044 	addi	r2,r2,1
  816eb8:	d0a71615 	stw	r2,-25512(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  816ebc:	0820a980 	call	820a98 <OSCtxSw>
  816ec0:	e0bfff17 	ldw	r2,-4(fp)
  816ec4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816ec8:	e0bffd17 	ldw	r2,-12(fp)
  816ecc:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  816ed0:	e037883a 	mov	sp,fp
  816ed4:	dfc00117 	ldw	ra,4(sp)
  816ed8:	df000017 	ldw	fp,0(sp)
  816edc:	dec00204 	addi	sp,sp,8
  816ee0:	f800283a 	ret

00816ee4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  816ee4:	defffc04 	addi	sp,sp,-16
  816ee8:	df000315 	stw	fp,12(sp)
  816eec:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  816ef0:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  816ef4:	d0a71143 	ldbu	r2,-25531(gp)
  816ef8:	10803fcc 	andi	r2,r2,255
  816efc:	10800058 	cmpnei	r2,r2,1
  816f00:	1000171e 	bne	r2,zero,816f60 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816f04:	0005303a 	rdctl	r2,status
  816f08:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816f0c:	e0fffe17 	ldw	r3,-8(fp)
  816f10:	00bfff84 	movi	r2,-2
  816f14:	1884703a 	and	r2,r3,r2
  816f18:	1001703a 	wrctl	status,r2
  
  return context;
  816f1c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  816f20:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  816f24:	d0a71f03 	ldbu	r2,-25476(gp)
  816f28:	10803fcc 	andi	r2,r2,255
  816f2c:	1004c03a 	cmpne	r2,r2,zero
  816f30:	1000071e 	bne	r2,zero,816f50 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  816f34:	d0a71103 	ldbu	r2,-25532(gp)
  816f38:	10803fcc 	andi	r2,r2,255
  816f3c:	10803fe0 	cmpeqi	r2,r2,255
  816f40:	1000031e 	bne	r2,zero,816f50 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  816f44:	d0a71103 	ldbu	r2,-25532(gp)
  816f48:	10800044 	addi	r2,r2,1
  816f4c:	d0a71105 	stb	r2,-25532(gp)
  816f50:	e0bfff17 	ldw	r2,-4(fp)
  816f54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816f58:	e0bffd17 	ldw	r2,-12(fp)
  816f5c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  816f60:	e037883a 	mov	sp,fp
  816f64:	df000017 	ldw	fp,0(sp)
  816f68:	dec00104 	addi	sp,sp,4
  816f6c:	f800283a 	ret

00816f70 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  816f70:	defff804 	addi	sp,sp,-32
  816f74:	dfc00715 	stw	ra,28(sp)
  816f78:	df000615 	stw	fp,24(sp)
  816f7c:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  816f80:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  816f84:	d0a71143 	ldbu	r2,-25531(gp)
  816f88:	10803fcc 	andi	r2,r2,255
  816f8c:	10800058 	cmpnei	r2,r2,1
  816f90:	10002b1e 	bne	r2,zero,817040 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816f94:	0005303a 	rdctl	r2,status
  816f98:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816f9c:	e0fffe17 	ldw	r3,-8(fp)
  816fa0:	00bfff84 	movi	r2,-2
  816fa4:	1884703a 	and	r2,r3,r2
  816fa8:	1001703a 	wrctl	status,r2
  
  return context;
  816fac:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  816fb0:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  816fb4:	d0a71103 	ldbu	r2,-25532(gp)
  816fb8:	10803fcc 	andi	r2,r2,255
  816fbc:	1005003a 	cmpeq	r2,r2,zero
  816fc0:	10001b1e 	bne	r2,zero,817030 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  816fc4:	d0a71103 	ldbu	r2,-25532(gp)
  816fc8:	10bfffc4 	addi	r2,r2,-1
  816fcc:	d0a71105 	stb	r2,-25532(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  816fd0:	d0a71103 	ldbu	r2,-25532(gp)
  816fd4:	10803fcc 	andi	r2,r2,255
  816fd8:	1004c03a 	cmpne	r2,r2,zero
  816fdc:	10000f1e 	bne	r2,zero,81701c <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  816fe0:	d0a71f03 	ldbu	r2,-25476(gp)
  816fe4:	10803fcc 	andi	r2,r2,255
  816fe8:	1004c03a 	cmpne	r2,r2,zero
  816fec:	1000061e 	bne	r2,zero,817008 <OSSchedUnlock+0x98>
  816ff0:	e0bfff17 	ldw	r2,-4(fp)
  816ff4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816ff8:	e0bffd17 	ldw	r2,-12(fp)
  816ffc:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  817000:	0817e2c0 	call	817e2c <OS_Sched>
  817004:	00000e06 	br	817040 <OSSchedUnlock+0xd0>
  817008:	e0bfff17 	ldw	r2,-4(fp)
  81700c:	e0bffc15 	stw	r2,-16(fp)
  817010:	e0bffc17 	ldw	r2,-16(fp)
  817014:	1001703a 	wrctl	status,r2
  817018:	00000906 	br	817040 <OSSchedUnlock+0xd0>
  81701c:	e0bfff17 	ldw	r2,-4(fp)
  817020:	e0bffb15 	stw	r2,-20(fp)
  817024:	e0bffb17 	ldw	r2,-20(fp)
  817028:	1001703a 	wrctl	status,r2
  81702c:	00000406 	br	817040 <OSSchedUnlock+0xd0>
  817030:	e0bfff17 	ldw	r2,-4(fp)
  817034:	e0bffa15 	stw	r2,-24(fp)
  817038:	e0bffa17 	ldw	r2,-24(fp)
  81703c:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  817040:	e037883a 	mov	sp,fp
  817044:	dfc00117 	ldw	ra,4(sp)
  817048:	df000017 	ldw	fp,0(sp)
  81704c:	dec00204 	addi	sp,sp,8
  817050:	f800283a 	ret

00817054 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  817054:	defffe04 	addi	sp,sp,-8
  817058:	dfc00115 	stw	ra,4(sp)
  81705c:	df000015 	stw	fp,0(sp)
  817060:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  817064:	d0a71143 	ldbu	r2,-25531(gp)
  817068:	10803fcc 	andi	r2,r2,255
  81706c:	1004c03a 	cmpne	r2,r2,zero
  817070:	10000f1e 	bne	r2,zero,8170b0 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  817074:	0817f000 	call	817f00 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  817078:	d0a71303 	ldbu	r2,-25524(gp)
  81707c:	d0a71345 	stb	r2,-25523(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  817080:	d0a71303 	ldbu	r2,-25524(gp)
  817084:	10803fcc 	andi	r2,r2,255
  817088:	00c020f4 	movhi	r3,131
  81708c:	18ea1404 	addi	r3,r3,-22448
  817090:	1085883a 	add	r2,r2,r2
  817094:	1085883a 	add	r2,r2,r2
  817098:	10c5883a 	add	r2,r2,r3
  81709c:	10800017 	ldw	r2,0(r2)
  8170a0:	d0a71b15 	stw	r2,-25492(gp)
        OSTCBCur      = OSTCBHighRdy;
  8170a4:	d0a71b17 	ldw	r2,-25492(gp)
  8170a8:	d0a72015 	stw	r2,-25472(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  8170ac:	0820b240 	call	820b24 <OSStartHighRdy>
    }
}
  8170b0:	e037883a 	mov	sp,fp
  8170b4:	dfc00117 	ldw	ra,4(sp)
  8170b8:	df000017 	ldw	fp,0(sp)
  8170bc:	dec00204 	addi	sp,sp,8
  8170c0:	f800283a 	ret

008170c4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  8170c4:	defff904 	addi	sp,sp,-28
  8170c8:	dfc00615 	stw	ra,24(sp)
  8170cc:	df000515 	stw	fp,20(sp)
  8170d0:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8170d4:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  8170d8:	01000084 	movi	r4,2
  8170dc:	081e1240 	call	81e124 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8170e0:	0005303a 	rdctl	r2,status
  8170e4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8170e8:	e0fffe17 	ldw	r3,-8(fp)
  8170ec:	00bfff84 	movi	r2,-2
  8170f0:	1884703a 	and	r2,r3,r2
  8170f4:	1001703a 	wrctl	status,r2
  
  return context;
  8170f8:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  8170fc:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  817100:	d0271215 	stw	zero,-25528(gp)
  817104:	e0bfff17 	ldw	r2,-4(fp)
  817108:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81710c:	e0bffd17 	ldw	r2,-12(fp)
  817110:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  817114:	01001904 	movi	r4,100
  817118:	081e1240 	call	81e124 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81711c:	0005303a 	rdctl	r2,status
  817120:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817124:	e0fffc17 	ldw	r3,-16(fp)
  817128:	00bfff84 	movi	r2,-2
  81712c:	1884703a 	and	r2,r3,r2
  817130:	1001703a 	wrctl	status,r2
  
  return context;
  817134:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  817138:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  81713c:	d0a71217 	ldw	r2,-25528(gp)
  817140:	d0a71715 	stw	r2,-25508(gp)
    OSStatRdy    = OS_TRUE;
  817144:	00800044 	movi	r2,1
  817148:	d0a72305 	stb	r2,-25460(gp)
  81714c:	e0bfff17 	ldw	r2,-4(fp)
  817150:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817154:	e0bffb17 	ldw	r2,-20(fp)
  817158:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  81715c:	e037883a 	mov	sp,fp
  817160:	dfc00117 	ldw	ra,4(sp)
  817164:	df000017 	ldw	fp,0(sp)
  817168:	dec00204 	addi	sp,sp,8
  81716c:	f800283a 	ret

00817170 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  817170:	defff604 	addi	sp,sp,-40
  817174:	dfc00915 	stw	ra,36(sp)
  817178:	df000815 	stw	fp,32(sp)
  81717c:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  817180:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  817184:	0820ef00 	call	820ef0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817188:	0005303a 	rdctl	r2,status
  81718c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817190:	e0fffb17 	ldw	r3,-20(fp)
  817194:	00bfff84 	movi	r2,-2
  817198:	1884703a 	and	r2,r3,r2
  81719c:	1001703a 	wrctl	status,r2
  
  return context;
  8171a0:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  8171a4:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  8171a8:	d0a72117 	ldw	r2,-25468(gp)
  8171ac:	10800044 	addi	r2,r2,1
  8171b0:	d0a72115 	stw	r2,-25468(gp)
  8171b4:	e0bffc17 	ldw	r2,-16(fp)
  8171b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8171bc:	e0bffa17 	ldw	r2,-24(fp)
  8171c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  8171c4:	d0a71143 	ldbu	r2,-25531(gp)
  8171c8:	10803fcc 	andi	r2,r2,255
  8171cc:	10800058 	cmpnei	r2,r2,1
  8171d0:	1000721e 	bne	r2,zero,81739c <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  8171d4:	d0a71503 	ldbu	r2,-25516(gp)
  8171d8:	10803fcc 	andi	r2,r2,255
  8171dc:	e0bfff15 	stw	r2,-4(fp)
  8171e0:	e0ffff17 	ldw	r3,-4(fp)
  8171e4:	18800060 	cmpeqi	r2,r3,1
  8171e8:	10000a1e 	bne	r2,zero,817214 <OSTimeTick+0xa4>
  8171ec:	e0ffff17 	ldw	r3,-4(fp)
  8171f0:	188000a0 	cmpeqi	r2,r3,2
  8171f4:	1000091e 	bne	r2,zero,81721c <OSTimeTick+0xac>
  8171f8:	e0ffff17 	ldw	r3,-4(fp)
  8171fc:	1805003a 	cmpeq	r2,r3,zero
  817200:	1000011e 	bne	r2,zero,817208 <OSTimeTick+0x98>
  817204:	00000a06 	br	817230 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  817208:	00800044 	movi	r2,1
  81720c:	e0bffd05 	stb	r2,-12(fp)
                 break;
  817210:	00000a06 	br	81723c <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  817214:	e03ffd05 	stb	zero,-12(fp)
                 break;
  817218:	00000806 	br	81723c <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  81721c:	00800044 	movi	r2,1
  817220:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  817224:	00800044 	movi	r2,1
  817228:	d0a71505 	stb	r2,-25516(gp)
                 break;
  81722c:	00000306 	br	81723c <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  817230:	00800044 	movi	r2,1
  817234:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  817238:	d0271505 	stb	zero,-25516(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  81723c:	e0bffd03 	ldbu	r2,-12(fp)
  817240:	1005003a 	cmpeq	r2,r2,zero
  817244:	1000551e 	bne	r2,zero,81739c <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  817248:	d0a71417 	ldw	r2,-25520(gp)
  81724c:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  817250:	00004d06 	br	817388 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817254:	0005303a 	rdctl	r2,status
  817258:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81725c:	e0fff917 	ldw	r3,-28(fp)
  817260:	00bfff84 	movi	r2,-2
  817264:	1884703a 	and	r2,r3,r2
  817268:	1001703a 	wrctl	status,r2
  
  return context;
  81726c:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  817270:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  817274:	e0bffe17 	ldw	r2,-8(fp)
  817278:	10800b8b 	ldhu	r2,46(r2)
  81727c:	10bfffcc 	andi	r2,r2,65535
  817280:	1005003a 	cmpeq	r2,r2,zero
  817284:	1000391e 	bne	r2,zero,81736c <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  817288:	e0bffe17 	ldw	r2,-8(fp)
  81728c:	10800b8b 	ldhu	r2,46(r2)
  817290:	10bfffc4 	addi	r2,r2,-1
  817294:	1007883a 	mov	r3,r2
  817298:	e0bffe17 	ldw	r2,-8(fp)
  81729c:	10c00b8d 	sth	r3,46(r2)
  8172a0:	e0bffe17 	ldw	r2,-8(fp)
  8172a4:	10800b8b 	ldhu	r2,46(r2)
  8172a8:	10bfffcc 	andi	r2,r2,65535
  8172ac:	1004c03a 	cmpne	r2,r2,zero
  8172b0:	10002e1e 	bne	r2,zero,81736c <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  8172b4:	e0bffe17 	ldw	r2,-8(fp)
  8172b8:	10800c03 	ldbu	r2,48(r2)
  8172bc:	10803fcc 	andi	r2,r2,255
  8172c0:	10800dcc 	andi	r2,r2,55
  8172c4:	1005003a 	cmpeq	r2,r2,zero
  8172c8:	10000b1e 	bne	r2,zero,8172f8 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  8172cc:	e0bffe17 	ldw	r2,-8(fp)
  8172d0:	10c00c03 	ldbu	r3,48(r2)
  8172d4:	00bff204 	movi	r2,-56
  8172d8:	1884703a 	and	r2,r3,r2
  8172dc:	1007883a 	mov	r3,r2
  8172e0:	e0bffe17 	ldw	r2,-8(fp)
  8172e4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  8172e8:	e0fffe17 	ldw	r3,-8(fp)
  8172ec:	00800044 	movi	r2,1
  8172f0:	18800c45 	stb	r2,49(r3)
  8172f4:	00000206 	br	817300 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  8172f8:	e0bffe17 	ldw	r2,-8(fp)
  8172fc:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  817300:	e0bffe17 	ldw	r2,-8(fp)
  817304:	10800c03 	ldbu	r2,48(r2)
  817308:	10803fcc 	andi	r2,r2,255
  81730c:	1080020c 	andi	r2,r2,8
  817310:	1004c03a 	cmpne	r2,r2,zero
  817314:	1000151e 	bne	r2,zero,81736c <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  817318:	e0bffe17 	ldw	r2,-8(fp)
  81731c:	10c00d83 	ldbu	r3,54(r2)
  817320:	d0a71d03 	ldbu	r2,-25484(gp)
  817324:	1884b03a 	or	r2,r3,r2
  817328:	d0a71d05 	stb	r2,-25484(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81732c:	e0bffe17 	ldw	r2,-8(fp)
  817330:	10800d03 	ldbu	r2,52(r2)
  817334:	11003fcc 	andi	r4,r2,255
  817338:	e0bffe17 	ldw	r2,-8(fp)
  81733c:	10800d03 	ldbu	r2,52(r2)
  817340:	10c03fcc 	andi	r3,r2,255
  817344:	d0a71d44 	addi	r2,gp,-25483
  817348:	1885883a 	add	r2,r3,r2
  81734c:	10c00003 	ldbu	r3,0(r2)
  817350:	e0bffe17 	ldw	r2,-8(fp)
  817354:	10800d43 	ldbu	r2,53(r2)
  817358:	1884b03a 	or	r2,r3,r2
  81735c:	1007883a 	mov	r3,r2
  817360:	d0a71d44 	addi	r2,gp,-25483
  817364:	2085883a 	add	r2,r4,r2
  817368:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  81736c:	e0bffe17 	ldw	r2,-8(fp)
  817370:	10800517 	ldw	r2,20(r2)
  817374:	e0bffe15 	stw	r2,-8(fp)
  817378:	e0bffc17 	ldw	r2,-16(fp)
  81737c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817380:	e0bff817 	ldw	r2,-32(fp)
  817384:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  817388:	e0bffe17 	ldw	r2,-8(fp)
  81738c:	10800c83 	ldbu	r2,50(r2)
  817390:	10803fcc 	andi	r2,r2,255
  817394:	10800518 	cmpnei	r2,r2,20
  817398:	103fae1e 	bne	r2,zero,817254 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  81739c:	e037883a 	mov	sp,fp
  8173a0:	dfc00117 	ldw	ra,4(sp)
  8173a4:	df000017 	ldw	fp,0(sp)
  8173a8:	dec00204 	addi	sp,sp,8
  8173ac:	f800283a 	ret

008173b0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  8173b0:	deffff04 	addi	sp,sp,-4
  8173b4:	df000015 	stw	fp,0(sp)
  8173b8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  8173bc:	00804784 	movi	r2,286
}
  8173c0:	e037883a 	mov	sp,fp
  8173c4:	df000017 	ldw	fp,0(sp)
  8173c8:	dec00104 	addi	sp,sp,4
  8173cc:	f800283a 	ret

008173d0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  8173d0:	deffff04 	addi	sp,sp,-4
  8173d4:	df000015 	stw	fp,0(sp)
  8173d8:	d839883a 	mov	fp,sp
}
  8173dc:	e037883a 	mov	sp,fp
  8173e0:	df000017 	ldw	fp,0(sp)
  8173e4:	dec00104 	addi	sp,sp,4
  8173e8:	f800283a 	ret

008173ec <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  8173ec:	defff804 	addi	sp,sp,-32
  8173f0:	dfc00715 	stw	ra,28(sp)
  8173f4:	df000615 	stw	fp,24(sp)
  8173f8:	df000604 	addi	fp,sp,24
  8173fc:	e13ffc15 	stw	r4,-16(fp)
  817400:	e17ffd15 	stw	r5,-12(fp)
  817404:	e1bffe05 	stb	r6,-8(fp)
  817408:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  81740c:	e0bffc17 	ldw	r2,-16(fp)
  817410:	10800283 	ldbu	r2,10(r2)
  817414:	10c03fcc 	andi	r3,r2,255
  817418:	008020b4 	movhi	r2,130
  81741c:	10877604 	addi	r2,r2,7640
  817420:	10c5883a 	add	r2,r2,r3
  817424:	10800003 	ldbu	r2,0(r2)
  817428:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  81742c:	e0fffa83 	ldbu	r3,-22(fp)
  817430:	e0bffc17 	ldw	r2,-16(fp)
  817434:	1885883a 	add	r2,r3,r2
  817438:	10800204 	addi	r2,r2,8
  81743c:	108000c3 	ldbu	r2,3(r2)
  817440:	10c03fcc 	andi	r3,r2,255
  817444:	008020b4 	movhi	r2,130
  817448:	10877604 	addi	r2,r2,7640
  81744c:	10c5883a 	add	r2,r2,r3
  817450:	10800003 	ldbu	r2,0(r2)
  817454:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  817458:	e0bffa83 	ldbu	r2,-22(fp)
  81745c:	100490fa 	slli	r2,r2,3
  817460:	1007883a 	mov	r3,r2
  817464:	e0bffa43 	ldbu	r2,-23(fp)
  817468:	1885883a 	add	r2,r3,r2
  81746c:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  817470:	e0bffa03 	ldbu	r2,-24(fp)
  817474:	00c020f4 	movhi	r3,131
  817478:	18ea1404 	addi	r3,r3,-22448
  81747c:	1085883a 	add	r2,r2,r2
  817480:	1085883a 	add	r2,r2,r2
  817484:	10c5883a 	add	r2,r2,r3
  817488:	10800017 	ldw	r2,0(r2)
  81748c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  817490:	e0bffb17 	ldw	r2,-20(fp)
  817494:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  817498:	e0fffb17 	ldw	r3,-20(fp)
  81749c:	e0bffd17 	ldw	r2,-12(fp)
  8174a0:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  8174a4:	e0bffb17 	ldw	r2,-20(fp)
  8174a8:	10800c03 	ldbu	r2,48(r2)
  8174ac:	1007883a 	mov	r3,r2
  8174b0:	e0bffe03 	ldbu	r2,-8(fp)
  8174b4:	0084303a 	nor	r2,zero,r2
  8174b8:	1884703a 	and	r2,r3,r2
  8174bc:	1007883a 	mov	r3,r2
  8174c0:	e0bffb17 	ldw	r2,-20(fp)
  8174c4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  8174c8:	e0fffb17 	ldw	r3,-20(fp)
  8174cc:	e0bfff03 	ldbu	r2,-4(fp)
  8174d0:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  8174d4:	e0bffb17 	ldw	r2,-20(fp)
  8174d8:	10800c03 	ldbu	r2,48(r2)
  8174dc:	10803fcc 	andi	r2,r2,255
  8174e0:	1080020c 	andi	r2,r2,8
  8174e4:	1004c03a 	cmpne	r2,r2,zero
  8174e8:	1000111e 	bne	r2,zero,817530 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  8174ec:	e0bffb17 	ldw	r2,-20(fp)
  8174f0:	10c00d83 	ldbu	r3,54(r2)
  8174f4:	d0a71d03 	ldbu	r2,-25484(gp)
  8174f8:	1884b03a 	or	r2,r3,r2
  8174fc:	d0a71d05 	stb	r2,-25484(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  817500:	e13ffa83 	ldbu	r4,-22(fp)
  817504:	e0fffa83 	ldbu	r3,-22(fp)
  817508:	d0a71d44 	addi	r2,gp,-25483
  81750c:	1885883a 	add	r2,r3,r2
  817510:	10c00003 	ldbu	r3,0(r2)
  817514:	e0bffb17 	ldw	r2,-20(fp)
  817518:	10800d43 	ldbu	r2,53(r2)
  81751c:	1884b03a 	or	r2,r3,r2
  817520:	1007883a 	mov	r3,r2
  817524:	d0a71d44 	addi	r2,gp,-25483
  817528:	2085883a 	add	r2,r4,r2
  81752c:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  817530:	e13ffb17 	ldw	r4,-20(fp)
  817534:	e17ffc17 	ldw	r5,-16(fp)
  817538:	08177e40 	call	8177e4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  81753c:	e0bffb17 	ldw	r2,-20(fp)
  817540:	10800817 	ldw	r2,32(r2)
  817544:	1005003a 	cmpeq	r2,r2,zero
  817548:	1000071e 	bne	r2,zero,817568 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  81754c:	e0bffb17 	ldw	r2,-20(fp)
  817550:	11400817 	ldw	r5,32(r2)
  817554:	e13ffb17 	ldw	r4,-20(fp)
  817558:	081789c0 	call	81789c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  81755c:	e0fffb17 	ldw	r3,-20(fp)
  817560:	e0bffc17 	ldw	r2,-16(fp)
  817564:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  817568:	e0bffa03 	ldbu	r2,-24(fp)
}
  81756c:	e037883a 	mov	sp,fp
  817570:	dfc00117 	ldw	ra,4(sp)
  817574:	df000017 	ldw	fp,0(sp)
  817578:	dec00204 	addi	sp,sp,8
  81757c:	f800283a 	ret

00817580 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  817580:	defffd04 	addi	sp,sp,-12
  817584:	df000215 	stw	fp,8(sp)
  817588:	df000204 	addi	fp,sp,8
  81758c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  817590:	d0e72017 	ldw	r3,-25472(gp)
  817594:	e0bfff17 	ldw	r2,-4(fp)
  817598:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  81759c:	d0a72017 	ldw	r2,-25472(gp)
  8175a0:	10800d03 	ldbu	r2,52(r2)
  8175a4:	11003fcc 	andi	r4,r2,255
  8175a8:	d0a72017 	ldw	r2,-25472(gp)
  8175ac:	10800d03 	ldbu	r2,52(r2)
  8175b0:	10c03fcc 	andi	r3,r2,255
  8175b4:	e0bfff17 	ldw	r2,-4(fp)
  8175b8:	1885883a 	add	r2,r3,r2
  8175bc:	10800204 	addi	r2,r2,8
  8175c0:	10c000c3 	ldbu	r3,3(r2)
  8175c4:	d0a72017 	ldw	r2,-25472(gp)
  8175c8:	10800d43 	ldbu	r2,53(r2)
  8175cc:	1884b03a 	or	r2,r3,r2
  8175d0:	1007883a 	mov	r3,r2
  8175d4:	e0bfff17 	ldw	r2,-4(fp)
  8175d8:	2085883a 	add	r2,r4,r2
  8175dc:	10800204 	addi	r2,r2,8
  8175e0:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  8175e4:	e0bfff17 	ldw	r2,-4(fp)
  8175e8:	10c00283 	ldbu	r3,10(r2)
  8175ec:	d0a72017 	ldw	r2,-25472(gp)
  8175f0:	10800d83 	ldbu	r2,54(r2)
  8175f4:	1884b03a 	or	r2,r3,r2
  8175f8:	1007883a 	mov	r3,r2
  8175fc:	e0bfff17 	ldw	r2,-4(fp)
  817600:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  817604:	d0a72017 	ldw	r2,-25472(gp)
  817608:	10800d03 	ldbu	r2,52(r2)
  81760c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  817610:	e13ffe03 	ldbu	r4,-8(fp)
  817614:	e0fffe03 	ldbu	r3,-8(fp)
  817618:	d0a71d44 	addi	r2,gp,-25483
  81761c:	1885883a 	add	r2,r3,r2
  817620:	10800003 	ldbu	r2,0(r2)
  817624:	1007883a 	mov	r3,r2
  817628:	d0a72017 	ldw	r2,-25472(gp)
  81762c:	10800d43 	ldbu	r2,53(r2)
  817630:	0084303a 	nor	r2,zero,r2
  817634:	1884703a 	and	r2,r3,r2
  817638:	1007883a 	mov	r3,r2
  81763c:	d0a71d44 	addi	r2,gp,-25483
  817640:	2085883a 	add	r2,r4,r2
  817644:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  817648:	e0fffe03 	ldbu	r3,-8(fp)
  81764c:	d0a71d44 	addi	r2,gp,-25483
  817650:	1885883a 	add	r2,r3,r2
  817654:	10800003 	ldbu	r2,0(r2)
  817658:	10803fcc 	andi	r2,r2,255
  81765c:	1004c03a 	cmpne	r2,r2,zero
  817660:	1000071e 	bne	r2,zero,817680 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  817664:	d0a72017 	ldw	r2,-25472(gp)
  817668:	10800d83 	ldbu	r2,54(r2)
  81766c:	0084303a 	nor	r2,zero,r2
  817670:	1007883a 	mov	r3,r2
  817674:	d0a71d03 	ldbu	r2,-25484(gp)
  817678:	1884703a 	and	r2,r3,r2
  81767c:	d0a71d05 	stb	r2,-25484(gp)
    }
}
  817680:	e037883a 	mov	sp,fp
  817684:	df000017 	ldw	fp,0(sp)
  817688:	dec00104 	addi	sp,sp,4
  81768c:	f800283a 	ret

00817690 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  817690:	defffb04 	addi	sp,sp,-20
  817694:	df000415 	stw	fp,16(sp)
  817698:	df000404 	addi	fp,sp,16
  81769c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  8176a0:	d0a72017 	ldw	r2,-25472(gp)
  8176a4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  8176a8:	d0e72017 	ldw	r3,-25472(gp)
  8176ac:	e0bfff17 	ldw	r2,-4(fp)
  8176b0:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  8176b4:	e0bfff17 	ldw	r2,-4(fp)
  8176b8:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  8176bc:	e0bffe17 	ldw	r2,-8(fp)
  8176c0:	10800017 	ldw	r2,0(r2)
  8176c4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  8176c8:	00002006 	br	81774c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  8176cc:	d0a72017 	ldw	r2,-25472(gp)
  8176d0:	10800d03 	ldbu	r2,52(r2)
  8176d4:	11003fcc 	andi	r4,r2,255
  8176d8:	d0a72017 	ldw	r2,-25472(gp)
  8176dc:	10800d03 	ldbu	r2,52(r2)
  8176e0:	10c03fcc 	andi	r3,r2,255
  8176e4:	e0bffd17 	ldw	r2,-12(fp)
  8176e8:	1885883a 	add	r2,r3,r2
  8176ec:	10800204 	addi	r2,r2,8
  8176f0:	10c000c3 	ldbu	r3,3(r2)
  8176f4:	d0a72017 	ldw	r2,-25472(gp)
  8176f8:	10800d43 	ldbu	r2,53(r2)
  8176fc:	1884b03a 	or	r2,r3,r2
  817700:	1007883a 	mov	r3,r2
  817704:	e0bffd17 	ldw	r2,-12(fp)
  817708:	2085883a 	add	r2,r4,r2
  81770c:	10800204 	addi	r2,r2,8
  817710:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  817714:	e0bffd17 	ldw	r2,-12(fp)
  817718:	10c00283 	ldbu	r3,10(r2)
  81771c:	d0a72017 	ldw	r2,-25472(gp)
  817720:	10800d83 	ldbu	r2,54(r2)
  817724:	1884b03a 	or	r2,r3,r2
  817728:	1007883a 	mov	r3,r2
  81772c:	e0bffd17 	ldw	r2,-12(fp)
  817730:	10c00285 	stb	r3,10(r2)
        pevents++;
  817734:	e0bffe17 	ldw	r2,-8(fp)
  817738:	10800104 	addi	r2,r2,4
  81773c:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  817740:	e0bffe17 	ldw	r2,-8(fp)
  817744:	10800017 	ldw	r2,0(r2)
  817748:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  81774c:	e0bffd17 	ldw	r2,-12(fp)
  817750:	1004c03a 	cmpne	r2,r2,zero
  817754:	103fdd1e 	bne	r2,zero,8176cc <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  817758:	d0a72017 	ldw	r2,-25472(gp)
  81775c:	10800d03 	ldbu	r2,52(r2)
  817760:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  817764:	e13ffc03 	ldbu	r4,-16(fp)
  817768:	e0fffc03 	ldbu	r3,-16(fp)
  81776c:	d0a71d44 	addi	r2,gp,-25483
  817770:	1885883a 	add	r2,r3,r2
  817774:	10800003 	ldbu	r2,0(r2)
  817778:	1007883a 	mov	r3,r2
  81777c:	d0a72017 	ldw	r2,-25472(gp)
  817780:	10800d43 	ldbu	r2,53(r2)
  817784:	0084303a 	nor	r2,zero,r2
  817788:	1884703a 	and	r2,r3,r2
  81778c:	1007883a 	mov	r3,r2
  817790:	d0a71d44 	addi	r2,gp,-25483
  817794:	2085883a 	add	r2,r4,r2
  817798:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  81779c:	e0fffc03 	ldbu	r3,-16(fp)
  8177a0:	d0a71d44 	addi	r2,gp,-25483
  8177a4:	1885883a 	add	r2,r3,r2
  8177a8:	10800003 	ldbu	r2,0(r2)
  8177ac:	10803fcc 	andi	r2,r2,255
  8177b0:	1004c03a 	cmpne	r2,r2,zero
  8177b4:	1000071e 	bne	r2,zero,8177d4 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  8177b8:	d0a72017 	ldw	r2,-25472(gp)
  8177bc:	10800d83 	ldbu	r2,54(r2)
  8177c0:	0084303a 	nor	r2,zero,r2
  8177c4:	1007883a 	mov	r3,r2
  8177c8:	d0a71d03 	ldbu	r2,-25484(gp)
  8177cc:	1884703a 	and	r2,r3,r2
  8177d0:	d0a71d05 	stb	r2,-25484(gp)
    }
}
  8177d4:	e037883a 	mov	sp,fp
  8177d8:	df000017 	ldw	fp,0(sp)
  8177dc:	dec00104 	addi	sp,sp,4
  8177e0:	f800283a 	ret

008177e4 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  8177e4:	defffc04 	addi	sp,sp,-16
  8177e8:	df000315 	stw	fp,12(sp)
  8177ec:	df000304 	addi	fp,sp,12
  8177f0:	e13ffe15 	stw	r4,-8(fp)
  8177f4:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  8177f8:	e0bffe17 	ldw	r2,-8(fp)
  8177fc:	10800d03 	ldbu	r2,52(r2)
  817800:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  817804:	e13ffd03 	ldbu	r4,-12(fp)
  817808:	e0fffd03 	ldbu	r3,-12(fp)
  81780c:	e0bfff17 	ldw	r2,-4(fp)
  817810:	1885883a 	add	r2,r3,r2
  817814:	10800204 	addi	r2,r2,8
  817818:	108000c3 	ldbu	r2,3(r2)
  81781c:	1007883a 	mov	r3,r2
  817820:	e0bffe17 	ldw	r2,-8(fp)
  817824:	10800d43 	ldbu	r2,53(r2)
  817828:	0084303a 	nor	r2,zero,r2
  81782c:	1884703a 	and	r2,r3,r2
  817830:	1007883a 	mov	r3,r2
  817834:	e0bfff17 	ldw	r2,-4(fp)
  817838:	2085883a 	add	r2,r4,r2
  81783c:	10800204 	addi	r2,r2,8
  817840:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  817844:	e0fffd03 	ldbu	r3,-12(fp)
  817848:	e0bfff17 	ldw	r2,-4(fp)
  81784c:	1885883a 	add	r2,r3,r2
  817850:	10800204 	addi	r2,r2,8
  817854:	108000c3 	ldbu	r2,3(r2)
  817858:	10803fcc 	andi	r2,r2,255
  81785c:	1004c03a 	cmpne	r2,r2,zero
  817860:	10000a1e 	bne	r2,zero,81788c <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  817864:	e0bfff17 	ldw	r2,-4(fp)
  817868:	10800283 	ldbu	r2,10(r2)
  81786c:	1007883a 	mov	r3,r2
  817870:	e0bffe17 	ldw	r2,-8(fp)
  817874:	10800d83 	ldbu	r2,54(r2)
  817878:	0084303a 	nor	r2,zero,r2
  81787c:	1884703a 	and	r2,r3,r2
  817880:	1007883a 	mov	r3,r2
  817884:	e0bfff17 	ldw	r2,-4(fp)
  817888:	10c00285 	stb	r3,10(r2)
    }
}
  81788c:	e037883a 	mov	sp,fp
  817890:	df000017 	ldw	fp,0(sp)
  817894:	dec00104 	addi	sp,sp,4
  817898:	f800283a 	ret

0081789c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  81789c:	defffa04 	addi	sp,sp,-24
  8178a0:	df000515 	stw	fp,20(sp)
  8178a4:	df000504 	addi	fp,sp,20
  8178a8:	e13ffe15 	stw	r4,-8(fp)
  8178ac:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  8178b0:	e0bffe17 	ldw	r2,-8(fp)
  8178b4:	10800d03 	ldbu	r2,52(r2)
  8178b8:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  8178bc:	e0bffe17 	ldw	r2,-8(fp)
  8178c0:	10800d83 	ldbu	r2,54(r2)
  8178c4:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  8178c8:	e0bffe17 	ldw	r2,-8(fp)
  8178cc:	10800d43 	ldbu	r2,53(r2)
  8178d0:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  8178d4:	e0bfff17 	ldw	r2,-4(fp)
  8178d8:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  8178dc:	e0bffd17 	ldw	r2,-12(fp)
  8178e0:	10800017 	ldw	r2,0(r2)
  8178e4:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  8178e8:	00002606 	br	817984 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  8178ec:	e13ffb83 	ldbu	r4,-18(fp)
  8178f0:	e0fffb83 	ldbu	r3,-18(fp)
  8178f4:	e0bffc17 	ldw	r2,-16(fp)
  8178f8:	1885883a 	add	r2,r3,r2
  8178fc:	10800204 	addi	r2,r2,8
  817900:	108000c3 	ldbu	r2,3(r2)
  817904:	1007883a 	mov	r3,r2
  817908:	e0bffb03 	ldbu	r2,-20(fp)
  81790c:	0084303a 	nor	r2,zero,r2
  817910:	1884703a 	and	r2,r3,r2
  817914:	1007883a 	mov	r3,r2
  817918:	e0bffc17 	ldw	r2,-16(fp)
  81791c:	2085883a 	add	r2,r4,r2
  817920:	10800204 	addi	r2,r2,8
  817924:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  817928:	e0fffb83 	ldbu	r3,-18(fp)
  81792c:	e0bffc17 	ldw	r2,-16(fp)
  817930:	1885883a 	add	r2,r3,r2
  817934:	10800204 	addi	r2,r2,8
  817938:	108000c3 	ldbu	r2,3(r2)
  81793c:	10803fcc 	andi	r2,r2,255
  817940:	1004c03a 	cmpne	r2,r2,zero
  817944:	1000091e 	bne	r2,zero,81796c <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  817948:	e0bffc17 	ldw	r2,-16(fp)
  81794c:	10800283 	ldbu	r2,10(r2)
  817950:	1007883a 	mov	r3,r2
  817954:	e0bffb43 	ldbu	r2,-19(fp)
  817958:	0084303a 	nor	r2,zero,r2
  81795c:	1884703a 	and	r2,r3,r2
  817960:	1007883a 	mov	r3,r2
  817964:	e0bffc17 	ldw	r2,-16(fp)
  817968:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  81796c:	e0bffd17 	ldw	r2,-12(fp)
  817970:	10800104 	addi	r2,r2,4
  817974:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  817978:	e0bffd17 	ldw	r2,-12(fp)
  81797c:	10800017 	ldw	r2,0(r2)
  817980:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  817984:	e0bffc17 	ldw	r2,-16(fp)
  817988:	1004c03a 	cmpne	r2,r2,zero
  81798c:	103fd71e 	bne	r2,zero,8178ec <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  817990:	e037883a 	mov	sp,fp
  817994:	df000017 	ldw	fp,0(sp)
  817998:	dec00104 	addi	sp,sp,4
  81799c:	f800283a 	ret

008179a0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  8179a0:	defffc04 	addi	sp,sp,-16
  8179a4:	df000315 	stw	fp,12(sp)
  8179a8:	df000304 	addi	fp,sp,12
  8179ac:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  8179b0:	e0bfff17 	ldw	r2,-4(fp)
  8179b4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  8179b8:	e0bfff17 	ldw	r2,-4(fp)
  8179bc:	108002c4 	addi	r2,r2,11
  8179c0:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8179c4:	e03ffd05 	stb	zero,-12(fp)
  8179c8:	00000806 	br	8179ec <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  8179cc:	e0bffe17 	ldw	r2,-8(fp)
  8179d0:	10000005 	stb	zero,0(r2)
  8179d4:	e0bffe17 	ldw	r2,-8(fp)
  8179d8:	10800044 	addi	r2,r2,1
  8179dc:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8179e0:	e0bffd03 	ldbu	r2,-12(fp)
  8179e4:	10800044 	addi	r2,r2,1
  8179e8:	e0bffd05 	stb	r2,-12(fp)
  8179ec:	e0bffd03 	ldbu	r2,-12(fp)
  8179f0:	108000f0 	cmpltui	r2,r2,3
  8179f4:	103ff51e 	bne	r2,zero,8179cc <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  8179f8:	e037883a 	mov	sp,fp
  8179fc:	df000017 	ldw	fp,0(sp)
  817a00:	dec00104 	addi	sp,sp,4
  817a04:	f800283a 	ret

00817a08 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  817a08:	defffb04 	addi	sp,sp,-20
  817a0c:	dfc00415 	stw	ra,16(sp)
  817a10:	df000315 	stw	fp,12(sp)
  817a14:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  817a18:	010020f4 	movhi	r4,131
  817a1c:	21260004 	addi	r4,r4,-26624
  817a20:	0142d004 	movi	r5,2880
  817a24:	0817d6c0 	call	817d6c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  817a28:	008020f4 	movhi	r2,131
  817a2c:	10a60004 	addi	r2,r2,-26624
  817a30:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  817a34:	008020f4 	movhi	r2,131
  817a38:	10a60c04 	addi	r2,r2,-26576
  817a3c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  817a40:	e03fff0d 	sth	zero,-4(fp)
  817a44:	00001306 	br	817a94 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  817a48:	e0bffe17 	ldw	r2,-8(fp)
  817a4c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  817a50:	e0fffe17 	ldw	r3,-8(fp)
  817a54:	e0bffd17 	ldw	r2,-12(fp)
  817a58:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  817a5c:	e0fffe17 	ldw	r3,-8(fp)
  817a60:	00800fc4 	movi	r2,63
  817a64:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  817a68:	e0bffe17 	ldw	r2,-8(fp)
  817a6c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  817a70:	e0bffe17 	ldw	r2,-8(fp)
  817a74:	10800c04 	addi	r2,r2,48
  817a78:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  817a7c:	e0bffd17 	ldw	r2,-12(fp)
  817a80:	10800c04 	addi	r2,r2,48
  817a84:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  817a88:	e0bfff0b 	ldhu	r2,-4(fp)
  817a8c:	10800044 	addi	r2,r2,1
  817a90:	e0bfff0d 	sth	r2,-4(fp)
  817a94:	e0bfff0b 	ldhu	r2,-4(fp)
  817a98:	10800ef0 	cmpltui	r2,r2,59
  817a9c:	103fea1e 	bne	r2,zero,817a48 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  817aa0:	e0bffe17 	ldw	r2,-8(fp)
  817aa4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  817aa8:	e0bffe17 	ldw	r2,-8(fp)
  817aac:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  817ab0:	e0fffe17 	ldw	r3,-8(fp)
  817ab4:	00800fc4 	movi	r2,63
  817ab8:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  817abc:	e0bffe17 	ldw	r2,-8(fp)
  817ac0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  817ac4:	008020f4 	movhi	r2,131
  817ac8:	10a60004 	addi	r2,r2,-26624
  817acc:	d0a71e15 	stw	r2,-25480(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  817ad0:	e037883a 	mov	sp,fp
  817ad4:	dfc00117 	ldw	ra,4(sp)
  817ad8:	df000017 	ldw	fp,0(sp)
  817adc:	dec00204 	addi	sp,sp,8
  817ae0:	f800283a 	ret

00817ae4 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  817ae4:	deffff04 	addi	sp,sp,-4
  817ae8:	df000015 	stw	fp,0(sp)
  817aec:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  817af0:	d0272115 	stw	zero,-25468(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  817af4:	d0271f05 	stb	zero,-25476(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  817af8:	d0271105 	stb	zero,-25532(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  817afc:	d0271945 	stb	zero,-25499(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  817b00:	d0271145 	stb	zero,-25531(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  817b04:	d0271615 	stw	zero,-25512(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  817b08:	d0271215 	stw	zero,-25528(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  817b0c:	d0272415 	stw	zero,-25456(gp)
    OSIdleCtrMax  = 0L;
  817b10:	d0271715 	stw	zero,-25508(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  817b14:	d0272305 	stb	zero,-25460(gp)
#endif
}
  817b18:	e037883a 	mov	sp,fp
  817b1c:	df000017 	ldw	fp,0(sp)
  817b20:	dec00104 	addi	sp,sp,4
  817b24:	f800283a 	ret

00817b28 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  817b28:	defffd04 	addi	sp,sp,-12
  817b2c:	df000215 	stw	fp,8(sp)
  817b30:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  817b34:	d0271d05 	stb	zero,-25484(gp)
    prdytbl       = &OSRdyTbl[0];
  817b38:	d0a71d44 	addi	r2,gp,-25483
  817b3c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  817b40:	e03fff05 	stb	zero,-4(fp)
  817b44:	00000806 	br	817b68 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  817b48:	e0bffe17 	ldw	r2,-8(fp)
  817b4c:	10000005 	stb	zero,0(r2)
  817b50:	e0bffe17 	ldw	r2,-8(fp)
  817b54:	10800044 	addi	r2,r2,1
  817b58:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  817b5c:	e0bfff03 	ldbu	r2,-4(fp)
  817b60:	10800044 	addi	r2,r2,1
  817b64:	e0bfff05 	stb	r2,-4(fp)
  817b68:	e0bfff03 	ldbu	r2,-4(fp)
  817b6c:	108000f0 	cmpltui	r2,r2,3
  817b70:	103ff51e 	bne	r2,zero,817b48 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  817b74:	d0271345 	stb	zero,-25523(gp)
    OSPrioHighRdy = 0;
  817b78:	d0271305 	stb	zero,-25524(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  817b7c:	d0271b15 	stw	zero,-25492(gp)
    OSTCBCur      = (OS_TCB *)0;
  817b80:	d0272015 	stw	zero,-25472(gp)
}
  817b84:	e037883a 	mov	sp,fp
  817b88:	df000017 	ldw	fp,0(sp)
  817b8c:	dec00104 	addi	sp,sp,4
  817b90:	f800283a 	ret

00817b94 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  817b94:	defff804 	addi	sp,sp,-32
  817b98:	dfc00715 	stw	ra,28(sp)
  817b9c:	df000615 	stw	fp,24(sp)
  817ba0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  817ba4:	018020f4 	movhi	r6,131
  817ba8:	31a5ff04 	addi	r6,r6,-26628
  817bac:	00bfffd4 	movui	r2,65535
  817bb0:	d8800015 	stw	r2,0(sp)
  817bb4:	008020f4 	movhi	r2,131
  817bb8:	10a40004 	addi	r2,r2,-28672
  817bbc:	d8800115 	stw	r2,4(sp)
  817bc0:	00808004 	movi	r2,512
  817bc4:	d8800215 	stw	r2,8(sp)
  817bc8:	d8000315 	stw	zero,12(sp)
  817bcc:	008000c4 	movi	r2,3
  817bd0:	d8800415 	stw	r2,16(sp)
  817bd4:	010020b4 	movhi	r4,130
  817bd8:	21201204 	addi	r4,r4,-32696
  817bdc:	000b883a 	mov	r5,zero
  817be0:	01c00504 	movi	r7,20
  817be4:	081ce2c0 	call	81ce2c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  817be8:	014020b4 	movhi	r5,130
  817bec:	2947b604 	addi	r5,r5,7896
  817bf0:	01000504 	movi	r4,20
  817bf4:	e1bfff04 	addi	r6,fp,-4
  817bf8:	081d7600 	call	81d760 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  817bfc:	e037883a 	mov	sp,fp
  817c00:	dfc00117 	ldw	ra,4(sp)
  817c04:	df000017 	ldw	fp,0(sp)
  817c08:	dec00204 	addi	sp,sp,8
  817c0c:	f800283a 	ret

00817c10 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  817c10:	defff804 	addi	sp,sp,-32
  817c14:	dfc00715 	stw	ra,28(sp)
  817c18:	df000615 	stw	fp,24(sp)
  817c1c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  817c20:	018020f4 	movhi	r6,131
  817c24:	31a38704 	addi	r6,r6,-29156
  817c28:	00bfff94 	movui	r2,65534
  817c2c:	d8800015 	stw	r2,0(sp)
  817c30:	008020f4 	movhi	r2,131
  817c34:	10a18804 	addi	r2,r2,-31200
  817c38:	d8800115 	stw	r2,4(sp)
  817c3c:	00808004 	movi	r2,512
  817c40:	d8800215 	stw	r2,8(sp)
  817c44:	d8000315 	stw	zero,12(sp)
  817c48:	008000c4 	movi	r2,3
  817c4c:	d8800415 	stw	r2,16(sp)
  817c50:	010020b4 	movhi	r4,130
  817c54:	21202904 	addi	r4,r4,-32604
  817c58:	000b883a 	mov	r5,zero
  817c5c:	01c004c4 	movi	r7,19
  817c60:	081ce2c0 	call	81ce2c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  817c64:	014020b4 	movhi	r5,130
  817c68:	2947ba04 	addi	r5,r5,7912
  817c6c:	010004c4 	movi	r4,19
  817c70:	e1bfff04 	addi	r6,fp,-4
  817c74:	081d7600 	call	81d760 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  817c78:	e037883a 	mov	sp,fp
  817c7c:	dfc00117 	ldw	ra,4(sp)
  817c80:	df000017 	ldw	fp,0(sp)
  817c84:	dec00204 	addi	sp,sp,8
  817c88:	f800283a 	ret

00817c8c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  817c8c:	defffb04 	addi	sp,sp,-20
  817c90:	dfc00415 	stw	ra,16(sp)
  817c94:	df000315 	stw	fp,12(sp)
  817c98:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  817c9c:	010020f4 	movhi	r4,131
  817ca0:	2128d004 	addi	r4,r4,-23744
  817ca4:	01414404 	movi	r5,1296
  817ca8:	0817d6c0 	call	817d6c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  817cac:	010020f4 	movhi	r4,131
  817cb0:	212a1404 	addi	r4,r4,-22448
  817cb4:	01401504 	movi	r5,84
  817cb8:	0817d6c0 	call	817d6c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  817cbc:	008020f4 	movhi	r2,131
  817cc0:	10a8d004 	addi	r2,r2,-23744
  817cc4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  817cc8:	008020f4 	movhi	r2,131
  817ccc:	10a8eb04 	addi	r2,r2,-23636
  817cd0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  817cd4:	e03fff05 	stb	zero,-4(fp)
  817cd8:	00001106 	br	817d20 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  817cdc:	e0fffe17 	ldw	r3,-8(fp)
  817ce0:	e0bffd17 	ldw	r2,-12(fp)
  817ce4:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  817ce8:	e0fffe17 	ldw	r3,-8(fp)
  817cec:	00800fc4 	movi	r2,63
  817cf0:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  817cf4:	e0bffe17 	ldw	r2,-8(fp)
  817cf8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  817cfc:	e0bffe17 	ldw	r2,-8(fp)
  817d00:	10801b04 	addi	r2,r2,108
  817d04:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  817d08:	e0bffd17 	ldw	r2,-12(fp)
  817d0c:	10801b04 	addi	r2,r2,108
  817d10:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  817d14:	e0bfff03 	ldbu	r2,-4(fp)
  817d18:	10800044 	addi	r2,r2,1
  817d1c:	e0bfff05 	stb	r2,-4(fp)
  817d20:	e0bfff03 	ldbu	r2,-4(fp)
  817d24:	108002f0 	cmpltui	r2,r2,11
  817d28:	103fec1e 	bne	r2,zero,817cdc <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  817d2c:	e0bffe17 	ldw	r2,-8(fp)
  817d30:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  817d34:	e0fffe17 	ldw	r3,-8(fp)
  817d38:	00800fc4 	movi	r2,63
  817d3c:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  817d40:	e0bffe17 	ldw	r2,-8(fp)
  817d44:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  817d48:	d0271415 	stw	zero,-25520(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  817d4c:	008020f4 	movhi	r2,131
  817d50:	10a8d004 	addi	r2,r2,-23744
  817d54:	d0a71815 	stw	r2,-25504(gp)
}
  817d58:	e037883a 	mov	sp,fp
  817d5c:	dfc00117 	ldw	ra,4(sp)
  817d60:	df000017 	ldw	fp,0(sp)
  817d64:	dec00204 	addi	sp,sp,8
  817d68:	f800283a 	ret

00817d6c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  817d6c:	defffd04 	addi	sp,sp,-12
  817d70:	df000215 	stw	fp,8(sp)
  817d74:	df000204 	addi	fp,sp,8
  817d78:	e13ffe15 	stw	r4,-8(fp)
  817d7c:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  817d80:	00000806 	br	817da4 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  817d84:	e0bffe17 	ldw	r2,-8(fp)
  817d88:	10000005 	stb	zero,0(r2)
  817d8c:	e0bffe17 	ldw	r2,-8(fp)
  817d90:	10800044 	addi	r2,r2,1
  817d94:	e0bffe15 	stw	r2,-8(fp)
        size--;
  817d98:	e0bfff0b 	ldhu	r2,-4(fp)
  817d9c:	10bfffc4 	addi	r2,r2,-1
  817da0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  817da4:	e0bfff0b 	ldhu	r2,-4(fp)
  817da8:	1004c03a 	cmpne	r2,r2,zero
  817dac:	103ff51e 	bne	r2,zero,817d84 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  817db0:	e037883a 	mov	sp,fp
  817db4:	df000017 	ldw	fp,0(sp)
  817db8:	dec00104 	addi	sp,sp,4
  817dbc:	f800283a 	ret

00817dc0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  817dc0:	defffc04 	addi	sp,sp,-16
  817dc4:	df000315 	stw	fp,12(sp)
  817dc8:	df000304 	addi	fp,sp,12
  817dcc:	e13ffd15 	stw	r4,-12(fp)
  817dd0:	e17ffe15 	stw	r5,-8(fp)
  817dd4:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  817dd8:	00000d06 	br	817e10 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  817ddc:	e0bffe17 	ldw	r2,-8(fp)
  817de0:	10c00003 	ldbu	r3,0(r2)
  817de4:	e0bffd17 	ldw	r2,-12(fp)
  817de8:	10c00005 	stb	r3,0(r2)
  817dec:	e0bffd17 	ldw	r2,-12(fp)
  817df0:	10800044 	addi	r2,r2,1
  817df4:	e0bffd15 	stw	r2,-12(fp)
  817df8:	e0bffe17 	ldw	r2,-8(fp)
  817dfc:	10800044 	addi	r2,r2,1
  817e00:	e0bffe15 	stw	r2,-8(fp)
        size--;
  817e04:	e0bfff0b 	ldhu	r2,-4(fp)
  817e08:	10bfffc4 	addi	r2,r2,-1
  817e0c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  817e10:	e0bfff0b 	ldhu	r2,-4(fp)
  817e14:	1004c03a 	cmpne	r2,r2,zero
  817e18:	103ff01e 	bne	r2,zero,817ddc <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  817e1c:	e037883a 	mov	sp,fp
  817e20:	df000017 	ldw	fp,0(sp)
  817e24:	dec00104 	addi	sp,sp,4
  817e28:	f800283a 	ret

00817e2c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  817e2c:	defffb04 	addi	sp,sp,-20
  817e30:	dfc00415 	stw	ra,16(sp)
  817e34:	df000315 	stw	fp,12(sp)
  817e38:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  817e3c:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817e40:	0005303a 	rdctl	r2,status
  817e44:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817e48:	e0fffe17 	ldw	r3,-8(fp)
  817e4c:	00bfff84 	movi	r2,-2
  817e50:	1884703a 	and	r2,r3,r2
  817e54:	1001703a 	wrctl	status,r2
  
  return context;
  817e58:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  817e5c:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  817e60:	d0a71f03 	ldbu	r2,-25476(gp)
  817e64:	10803fcc 	andi	r2,r2,255
  817e68:	1004c03a 	cmpne	r2,r2,zero
  817e6c:	10001b1e 	bne	r2,zero,817edc <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  817e70:	d0a71103 	ldbu	r2,-25532(gp)
  817e74:	10803fcc 	andi	r2,r2,255
  817e78:	1004c03a 	cmpne	r2,r2,zero
  817e7c:	1000171e 	bne	r2,zero,817edc <OS_Sched+0xb0>
            OS_SchedNew();
  817e80:	0817f000 	call	817f00 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  817e84:	d0a71303 	ldbu	r2,-25524(gp)
  817e88:	d0e71343 	ldbu	r3,-25523(gp)
  817e8c:	11003fcc 	andi	r4,r2,255
  817e90:	18803fcc 	andi	r2,r3,255
  817e94:	20801126 	beq	r4,r2,817edc <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  817e98:	d0a71303 	ldbu	r2,-25524(gp)
  817e9c:	10803fcc 	andi	r2,r2,255
  817ea0:	00c020f4 	movhi	r3,131
  817ea4:	18ea1404 	addi	r3,r3,-22448
  817ea8:	1085883a 	add	r2,r2,r2
  817eac:	1085883a 	add	r2,r2,r2
  817eb0:	10c5883a 	add	r2,r2,r3
  817eb4:	10800017 	ldw	r2,0(r2)
  817eb8:	d0a71b15 	stw	r2,-25492(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  817ebc:	d0e71b17 	ldw	r3,-25492(gp)
  817ec0:	18800e17 	ldw	r2,56(r3)
  817ec4:	10800044 	addi	r2,r2,1
  817ec8:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  817ecc:	d0a71617 	ldw	r2,-25512(gp)
  817ed0:	10800044 	addi	r2,r2,1
  817ed4:	d0a71615 	stw	r2,-25512(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  817ed8:	0820a980 	call	820a98 <OSCtxSw>
  817edc:	e0bfff17 	ldw	r2,-4(fp)
  817ee0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817ee4:	e0bffd17 	ldw	r2,-12(fp)
  817ee8:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  817eec:	e037883a 	mov	sp,fp
  817ef0:	dfc00117 	ldw	ra,4(sp)
  817ef4:	df000017 	ldw	fp,0(sp)
  817ef8:	dec00204 	addi	sp,sp,8
  817efc:	f800283a 	ret

00817f00 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  817f00:	defffe04 	addi	sp,sp,-8
  817f04:	df000115 	stw	fp,4(sp)
  817f08:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  817f0c:	d0a71d03 	ldbu	r2,-25484(gp)
  817f10:	10c03fcc 	andi	r3,r2,255
  817f14:	008020b4 	movhi	r2,130
  817f18:	10877604 	addi	r2,r2,7640
  817f1c:	10c5883a 	add	r2,r2,r3
  817f20:	10800003 	ldbu	r2,0(r2)
  817f24:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  817f28:	e0bfff03 	ldbu	r2,-4(fp)
  817f2c:	100490fa 	slli	r2,r2,3
  817f30:	1009883a 	mov	r4,r2
  817f34:	e0ffff03 	ldbu	r3,-4(fp)
  817f38:	d0a71d44 	addi	r2,gp,-25483
  817f3c:	1885883a 	add	r2,r3,r2
  817f40:	10800003 	ldbu	r2,0(r2)
  817f44:	10c03fcc 	andi	r3,r2,255
  817f48:	008020b4 	movhi	r2,130
  817f4c:	10877604 	addi	r2,r2,7640
  817f50:	10c5883a 	add	r2,r2,r3
  817f54:	10800003 	ldbu	r2,0(r2)
  817f58:	2085883a 	add	r2,r4,r2
  817f5c:	d0a71305 	stb	r2,-25524(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  817f60:	e037883a 	mov	sp,fp
  817f64:	df000017 	ldw	fp,0(sp)
  817f68:	dec00104 	addi	sp,sp,4
  817f6c:	f800283a 	ret

00817f70 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  817f70:	defffc04 	addi	sp,sp,-16
  817f74:	df000315 	stw	fp,12(sp)
  817f78:	df000304 	addi	fp,sp,12
  817f7c:	e13ffe15 	stw	r4,-8(fp)
  817f80:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  817f84:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  817f88:	00000d06 	br	817fc0 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  817f8c:	e0bfff17 	ldw	r2,-4(fp)
  817f90:	10c00003 	ldbu	r3,0(r2)
  817f94:	e0bffe17 	ldw	r2,-8(fp)
  817f98:	10c00005 	stb	r3,0(r2)
  817f9c:	e0bffe17 	ldw	r2,-8(fp)
  817fa0:	10800044 	addi	r2,r2,1
  817fa4:	e0bffe15 	stw	r2,-8(fp)
  817fa8:	e0bfff17 	ldw	r2,-4(fp)
  817fac:	10800044 	addi	r2,r2,1
  817fb0:	e0bfff15 	stw	r2,-4(fp)
        len++;
  817fb4:	e0bffd03 	ldbu	r2,-12(fp)
  817fb8:	10800044 	addi	r2,r2,1
  817fbc:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  817fc0:	e0bfff17 	ldw	r2,-4(fp)
  817fc4:	10800003 	ldbu	r2,0(r2)
  817fc8:	10803fcc 	andi	r2,r2,255
  817fcc:	1004c03a 	cmpne	r2,r2,zero
  817fd0:	103fee1e 	bne	r2,zero,817f8c <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  817fd4:	e0bffe17 	ldw	r2,-8(fp)
  817fd8:	10000005 	stb	zero,0(r2)
    return (len);
  817fdc:	e0bffd03 	ldbu	r2,-12(fp)
}
  817fe0:	e037883a 	mov	sp,fp
  817fe4:	df000017 	ldw	fp,0(sp)
  817fe8:	dec00104 	addi	sp,sp,4
  817fec:	f800283a 	ret

00817ff0 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  817ff0:	defffd04 	addi	sp,sp,-12
  817ff4:	df000215 	stw	fp,8(sp)
  817ff8:	df000204 	addi	fp,sp,8
  817ffc:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  818000:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  818004:	00000606 	br	818020 <OS_StrLen+0x30>
        psrc++;
  818008:	e0bfff17 	ldw	r2,-4(fp)
  81800c:	10800044 	addi	r2,r2,1
  818010:	e0bfff15 	stw	r2,-4(fp)
        len++;
  818014:	e0bffe03 	ldbu	r2,-8(fp)
  818018:	10800044 	addi	r2,r2,1
  81801c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  818020:	e0bfff17 	ldw	r2,-4(fp)
  818024:	10800003 	ldbu	r2,0(r2)
  818028:	10803fcc 	andi	r2,r2,255
  81802c:	1004c03a 	cmpne	r2,r2,zero
  818030:	103ff51e 	bne	r2,zero,818008 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  818034:	e0bffe03 	ldbu	r2,-8(fp)
}
  818038:	e037883a 	mov	sp,fp
  81803c:	df000017 	ldw	fp,0(sp)
  818040:	dec00104 	addi	sp,sp,4
  818044:	f800283a 	ret

00818048 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  818048:	defffa04 	addi	sp,sp,-24
  81804c:	dfc00515 	stw	ra,20(sp)
  818050:	df000415 	stw	fp,16(sp)
  818054:	df000404 	addi	fp,sp,16
  818058:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81805c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818060:	0005303a 	rdctl	r2,status
  818064:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818068:	e0fffd17 	ldw	r3,-12(fp)
  81806c:	00bfff84 	movi	r2,-2
  818070:	1884703a 	and	r2,r3,r2
  818074:	1001703a 	wrctl	status,r2
  
  return context;
  818078:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  81807c:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  818080:	d0a71217 	ldw	r2,-25528(gp)
  818084:	10800044 	addi	r2,r2,1
  818088:	d0a71215 	stw	r2,-25528(gp)
  81808c:	e0bffe17 	ldw	r2,-8(fp)
  818090:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818094:	e0bffc17 	ldw	r2,-16(fp)
  818098:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  81809c:	0820f440 	call	820f44 <OSTaskIdleHook>
    }
  8180a0:	003fef06 	br	818060 <OS_TaskIdle+0x18>

008180a4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  8180a4:	defffa04 	addi	sp,sp,-24
  8180a8:	dfc00515 	stw	ra,20(sp)
  8180ac:	df000415 	stw	fp,16(sp)
  8180b0:	df000404 	addi	fp,sp,16
  8180b4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8180b8:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  8180bc:	00000206 	br	8180c8 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  8180c0:	01003204 	movi	r4,200
  8180c4:	081e1240 	call	81e124 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  8180c8:	d0a72303 	ldbu	r2,-25460(gp)
  8180cc:	10803fcc 	andi	r2,r2,255
  8180d0:	1005003a 	cmpeq	r2,r2,zero
  8180d4:	103ffa1e 	bne	r2,zero,8180c0 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  8180d8:	d1271717 	ldw	r4,-25508(gp)
  8180dc:	01401904 	movi	r5,100
  8180e0:	080c8fc0 	call	80c8fc <__udivsi3>
  8180e4:	d0a71715 	stw	r2,-25508(gp)
    if (OSIdleCtrMax == 0L) {
  8180e8:	d0a71717 	ldw	r2,-25508(gp)
  8180ec:	1004c03a 	cmpne	r2,r2,zero
  8180f0:	1000031e 	bne	r2,zero,818100 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  8180f4:	d0271905 	stb	zero,-25500(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  8180f8:	01003fc4 	movi	r4,255
  8180fc:	081dd380 	call	81dd38 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818100:	0005303a 	rdctl	r2,status
  818104:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818108:	e0fffd17 	ldw	r3,-12(fp)
  81810c:	00bfff84 	movi	r2,-2
  818110:	1884703a 	and	r2,r3,r2
  818114:	1001703a 	wrctl	status,r2
  
  return context;
  818118:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  81811c:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  818120:	d0a71217 	ldw	r2,-25528(gp)
  818124:	d0a72415 	stw	r2,-25456(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  818128:	d0271215 	stw	zero,-25528(gp)
  81812c:	e0bffe17 	ldw	r2,-8(fp)
  818130:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818134:	e0bffc17 	ldw	r2,-16(fp)
  818138:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  81813c:	d1272417 	ldw	r4,-25456(gp)
  818140:	d1671717 	ldw	r5,-25508(gp)
  818144:	080c8fc0 	call	80c8fc <__udivsi3>
  818148:	1007883a 	mov	r3,r2
  81814c:	00801904 	movi	r2,100
  818150:	10c5c83a 	sub	r2,r2,r3
  818154:	d0a71905 	stb	r2,-25500(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  818158:	0820ed40 	call	820ed4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  81815c:	081816c0 	call	81816c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  818160:	01001904 	movi	r4,100
  818164:	081e1240 	call	81e124 <OSTimeDly>
    }
  818168:	003fe506 	br	818100 <OS_TaskStat+0x5c>

0081816c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  81816c:	defffa04 	addi	sp,sp,-24
  818170:	dfc00515 	stw	ra,20(sp)
  818174:	df000415 	stw	fp,16(sp)
  818178:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  81817c:	e03ffc05 	stb	zero,-16(fp)
  818180:	00002406 	br	818214 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  818184:	e13ffc03 	ldbu	r4,-16(fp)
  818188:	e17ffe04 	addi	r5,fp,-8
  81818c:	081db3c0 	call	81db3c <OSTaskStkChk>
  818190:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  818194:	e0bffc43 	ldbu	r2,-15(fp)
  818198:	1004c03a 	cmpne	r2,r2,zero
  81819c:	10001a1e 	bne	r2,zero,818208 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  8181a0:	e0bffc03 	ldbu	r2,-16(fp)
  8181a4:	00c020f4 	movhi	r3,131
  8181a8:	18ea1404 	addi	r3,r3,-22448
  8181ac:	1085883a 	add	r2,r2,r2
  8181b0:	1085883a 	add	r2,r2,r2
  8181b4:	10c5883a 	add	r2,r2,r3
  8181b8:	10800017 	ldw	r2,0(r2)
  8181bc:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  8181c0:	e0bffd17 	ldw	r2,-12(fp)
  8181c4:	1005003a 	cmpeq	r2,r2,zero
  8181c8:	10000f1e 	bne	r2,zero,818208 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  8181cc:	e0bffd17 	ldw	r2,-12(fp)
  8181d0:	10800060 	cmpeqi	r2,r2,1
  8181d4:	10000c1e 	bne	r2,zero,818208 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  8181d8:	e0bffd17 	ldw	r2,-12(fp)
  8181dc:	10c00217 	ldw	r3,8(r2)
  8181e0:	e0bffd17 	ldw	r2,-12(fp)
  8181e4:	10800317 	ldw	r2,12(r2)
  8181e8:	1085883a 	add	r2,r2,r2
  8181ec:	1085883a 	add	r2,r2,r2
  8181f0:	1887883a 	add	r3,r3,r2
  8181f4:	e0bffd17 	ldw	r2,-12(fp)
  8181f8:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  8181fc:	e0ffff17 	ldw	r3,-4(fp)
  818200:	e0bffd17 	ldw	r2,-12(fp)
  818204:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  818208:	e0bffc03 	ldbu	r2,-16(fp)
  81820c:	10800044 	addi	r2,r2,1
  818210:	e0bffc05 	stb	r2,-16(fp)
  818214:	e0bffc03 	ldbu	r2,-16(fp)
  818218:	10800570 	cmpltui	r2,r2,21
  81821c:	103fd91e 	bne	r2,zero,818184 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  818220:	e037883a 	mov	sp,fp
  818224:	dfc00117 	ldw	ra,4(sp)
  818228:	df000017 	ldw	fp,0(sp)
  81822c:	dec00204 	addi	sp,sp,8
  818230:	f800283a 	ret

00818234 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  818234:	defff104 	addi	sp,sp,-60
  818238:	dfc00e15 	stw	ra,56(sp)
  81823c:	df000d15 	stw	fp,52(sp)
  818240:	df000d04 	addi	fp,sp,52
  818244:	e17ffb15 	stw	r5,-20(fp)
  818248:	e1bffc15 	stw	r6,-16(fp)
  81824c:	e0800417 	ldw	r2,16(fp)
  818250:	e13ffa05 	stb	r4,-24(fp)
  818254:	e1fffd0d 	sth	r7,-12(fp)
  818258:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81825c:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818260:	0005303a 	rdctl	r2,status
  818264:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818268:	e0fff717 	ldw	r3,-36(fp)
  81826c:	00bfff84 	movi	r2,-2
  818270:	1884703a 	and	r2,r3,r2
  818274:	1001703a 	wrctl	status,r2
  
  return context;
  818278:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  81827c:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  818280:	d0a71817 	ldw	r2,-25504(gp)
  818284:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  818288:	e0bff917 	ldw	r2,-28(fp)
  81828c:	1005003a 	cmpeq	r2,r2,zero
  818290:	1000941e 	bne	r2,zero,8184e4 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  818294:	e0bff917 	ldw	r2,-28(fp)
  818298:	10800517 	ldw	r2,20(r2)
  81829c:	d0a71815 	stw	r2,-25504(gp)
  8182a0:	e0bff817 	ldw	r2,-32(fp)
  8182a4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8182a8:	e0bff617 	ldw	r2,-40(fp)
  8182ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  8182b0:	e0fff917 	ldw	r3,-28(fp)
  8182b4:	e0bffb17 	ldw	r2,-20(fp)
  8182b8:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  8182bc:	e0fff917 	ldw	r3,-28(fp)
  8182c0:	e0bffa03 	ldbu	r2,-24(fp)
  8182c4:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  8182c8:	e0bff917 	ldw	r2,-28(fp)
  8182cc:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  8182d0:	e0bff917 	ldw	r2,-28(fp)
  8182d4:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  8182d8:	e0bff917 	ldw	r2,-28(fp)
  8182dc:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  8182e0:	e0fff917 	ldw	r3,-28(fp)
  8182e4:	e0800317 	ldw	r2,12(fp)
  8182e8:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  8182ec:	e0fff917 	ldw	r3,-28(fp)
  8182f0:	e0800217 	ldw	r2,8(fp)
  8182f4:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  8182f8:	e0fff917 	ldw	r3,-28(fp)
  8182fc:	e0bffc17 	ldw	r2,-16(fp)
  818300:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  818304:	e0fff917 	ldw	r3,-28(fp)
  818308:	e0bffe0b 	ldhu	r2,-8(fp)
  81830c:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  818310:	e0fff917 	ldw	r3,-28(fp)
  818314:	e0bffd0b 	ldhu	r2,-12(fp)
  818318:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  81831c:	e0bff917 	ldw	r2,-28(fp)
  818320:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  818324:	e0bffa03 	ldbu	r2,-24(fp)
  818328:	1004d0fa 	srli	r2,r2,3
  81832c:	1007883a 	mov	r3,r2
  818330:	e0bff917 	ldw	r2,-28(fp)
  818334:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  818338:	e0bffa03 	ldbu	r2,-24(fp)
  81833c:	108001cc 	andi	r2,r2,7
  818340:	1007883a 	mov	r3,r2
  818344:	e0bff917 	ldw	r2,-28(fp)
  818348:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  81834c:	e0bff917 	ldw	r2,-28(fp)
  818350:	10800d03 	ldbu	r2,52(r2)
  818354:	10c03fcc 	andi	r3,r2,255
  818358:	00800044 	movi	r2,1
  81835c:	10c4983a 	sll	r2,r2,r3
  818360:	1007883a 	mov	r3,r2
  818364:	e0bff917 	ldw	r2,-28(fp)
  818368:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  81836c:	e0bff917 	ldw	r2,-28(fp)
  818370:	10800cc3 	ldbu	r2,51(r2)
  818374:	10c03fcc 	andi	r3,r2,255
  818378:	00800044 	movi	r2,1
  81837c:	10c4983a 	sll	r2,r2,r3
  818380:	1007883a 	mov	r3,r2
  818384:	e0bff917 	ldw	r2,-28(fp)
  818388:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  81838c:	e0bff917 	ldw	r2,-28(fp)
  818390:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  818394:	e0bff917 	ldw	r2,-28(fp)
  818398:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  81839c:	e0bff917 	ldw	r2,-28(fp)
  8183a0:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  8183a4:	e0bff917 	ldw	r2,-28(fp)
  8183a8:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  8183ac:	e0bff917 	ldw	r2,-28(fp)
  8183b0:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  8183b4:	e0bff917 	ldw	r2,-28(fp)
  8183b8:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  8183bc:	e0bff917 	ldw	r2,-28(fp)
  8183c0:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  8183c4:	e0bff917 	ldw	r2,-28(fp)
  8183c8:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  8183cc:	e0bff917 	ldw	r2,-28(fp)
  8183d0:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  8183d4:	e0fff917 	ldw	r3,-28(fp)
  8183d8:	00800fc4 	movi	r2,63
  8183dc:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  8183e0:	e0bff917 	ldw	r2,-28(fp)
  8183e4:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  8183e8:	e13ff917 	ldw	r4,-28(fp)
  8183ec:	0820f600 	call	820f60 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  8183f0:	e13ff917 	ldw	r4,-28(fp)
  8183f4:	0820e780 	call	820e78 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8183f8:	0005303a 	rdctl	r2,status
  8183fc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818400:	e0fff517 	ldw	r3,-44(fp)
  818404:	00bfff84 	movi	r2,-2
  818408:	1884703a 	and	r2,r3,r2
  81840c:	1001703a 	wrctl	status,r2
  
  return context;
  818410:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  818414:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  818418:	e0bffa03 	ldbu	r2,-24(fp)
  81841c:	00c020f4 	movhi	r3,131
  818420:	18ea1404 	addi	r3,r3,-22448
  818424:	1085883a 	add	r2,r2,r2
  818428:	1085883a 	add	r2,r2,r2
  81842c:	10c7883a 	add	r3,r2,r3
  818430:	e0bff917 	ldw	r2,-28(fp)
  818434:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  818438:	d0e71417 	ldw	r3,-25520(gp)
  81843c:	e0bff917 	ldw	r2,-28(fp)
  818440:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  818444:	e0bff917 	ldw	r2,-28(fp)
  818448:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  81844c:	d0a71417 	ldw	r2,-25520(gp)
  818450:	1005003a 	cmpeq	r2,r2,zero
  818454:	1000031e 	bne	r2,zero,818464 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  818458:	d0e71417 	ldw	r3,-25520(gp)
  81845c:	e0bff917 	ldw	r2,-28(fp)
  818460:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  818464:	e0bff917 	ldw	r2,-28(fp)
  818468:	d0a71415 	stw	r2,-25520(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  81846c:	e0bff917 	ldw	r2,-28(fp)
  818470:	10c00d83 	ldbu	r3,54(r2)
  818474:	d0a71d03 	ldbu	r2,-25484(gp)
  818478:	1884b03a 	or	r2,r3,r2
  81847c:	d0a71d05 	stb	r2,-25484(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  818480:	e0bff917 	ldw	r2,-28(fp)
  818484:	10800d03 	ldbu	r2,52(r2)
  818488:	11003fcc 	andi	r4,r2,255
  81848c:	e0bff917 	ldw	r2,-28(fp)
  818490:	10800d03 	ldbu	r2,52(r2)
  818494:	10c03fcc 	andi	r3,r2,255
  818498:	d0a71d44 	addi	r2,gp,-25483
  81849c:	1885883a 	add	r2,r3,r2
  8184a0:	10c00003 	ldbu	r3,0(r2)
  8184a4:	e0bff917 	ldw	r2,-28(fp)
  8184a8:	10800d43 	ldbu	r2,53(r2)
  8184ac:	1884b03a 	or	r2,r3,r2
  8184b0:	1007883a 	mov	r3,r2
  8184b4:	d0a71d44 	addi	r2,gp,-25483
  8184b8:	2085883a 	add	r2,r4,r2
  8184bc:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  8184c0:	d0a71943 	ldbu	r2,-25499(gp)
  8184c4:	10800044 	addi	r2,r2,1
  8184c8:	d0a71945 	stb	r2,-25499(gp)
  8184cc:	e0bff817 	ldw	r2,-32(fp)
  8184d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8184d4:	e0bff417 	ldw	r2,-48(fp)
  8184d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  8184dc:	e03fff15 	stw	zero,-4(fp)
  8184e0:	00000606 	br	8184fc <OS_TCBInit+0x2c8>
  8184e4:	e0bff817 	ldw	r2,-32(fp)
  8184e8:	e0bff315 	stw	r2,-52(fp)
  8184ec:	e0bff317 	ldw	r2,-52(fp)
  8184f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  8184f4:	00801084 	movi	r2,66
  8184f8:	e0bfff15 	stw	r2,-4(fp)
  8184fc:	e0bfff17 	ldw	r2,-4(fp)
}
  818500:	e037883a 	mov	sp,fp
  818504:	dfc00117 	ldw	ra,4(sp)
  818508:	df000017 	ldw	fp,0(sp)
  81850c:	dec00204 	addi	sp,sp,8
  818510:	f800283a 	ret

00818514 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  818514:	defffe04 	addi	sp,sp,-8
  818518:	df000115 	stw	fp,4(sp)
  81851c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  818520:	d0a01004 	addi	r2,gp,-32704
  818524:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  818528:	d0a01104 	addi	r2,gp,-32700
  81852c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  818530:	d0a01284 	addi	r2,gp,-32694
  818534:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  818538:	d0a01304 	addi	r2,gp,-32692
  81853c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  818540:	d0a01204 	addi	r2,gp,-32696
  818544:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  818548:	d0a01384 	addi	r2,gp,-32690
  81854c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  818550:	d0a01404 	addi	r2,gp,-32688
  818554:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  818558:	d0a01484 	addi	r2,gp,-32686
  81855c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  818560:	d0a01504 	addi	r2,gp,-32684
  818564:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  818568:	d0a01584 	addi	r2,gp,-32682
  81856c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  818570:	d0a01604 	addi	r2,gp,-32680
  818574:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  818578:	d0a01684 	addi	r2,gp,-32678
  81857c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  818580:	d0a01704 	addi	r2,gp,-32676
  818584:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  818588:	d0a01784 	addi	r2,gp,-32674
  81858c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  818590:	d0a01804 	addi	r2,gp,-32672
  818594:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  818598:	d0a01884 	addi	r2,gp,-32670
  81859c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  8185a0:	d0a01904 	addi	r2,gp,-32668
  8185a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  8185a8:	d0a01984 	addi	r2,gp,-32666
  8185ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  8185b0:	d0a01a04 	addi	r2,gp,-32664
  8185b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  8185b8:	d0a01a84 	addi	r2,gp,-32662
  8185bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  8185c0:	d0a01b04 	addi	r2,gp,-32660
  8185c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  8185c8:	d0a01b84 	addi	r2,gp,-32658
  8185cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  8185d0:	d0a01c04 	addi	r2,gp,-32656
  8185d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  8185d8:	d0a01c84 	addi	r2,gp,-32654
  8185dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  8185e0:	d0a01d04 	addi	r2,gp,-32652
  8185e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  8185e8:	d0a01d84 	addi	r2,gp,-32650
  8185ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  8185f0:	d0a01e04 	addi	r2,gp,-32648
  8185f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  8185f8:	d0a01e84 	addi	r2,gp,-32646
  8185fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  818600:	d0a01f04 	addi	r2,gp,-32644
  818604:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  818608:	d0a01f84 	addi	r2,gp,-32642
  81860c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  818610:	d0a02004 	addi	r2,gp,-32640
  818614:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  818618:	d0a02084 	addi	r2,gp,-32638
  81861c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  818620:	d0a02104 	addi	r2,gp,-32636
  818624:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  818628:	d0a02184 	addi	r2,gp,-32634
  81862c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  818630:	d0a02204 	addi	r2,gp,-32632
  818634:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  818638:	d0a02284 	addi	r2,gp,-32630
  81863c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  818640:	d0a02304 	addi	r2,gp,-32628
  818644:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  818648:	d0a02384 	addi	r2,gp,-32626
  81864c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  818650:	d0a02404 	addi	r2,gp,-32624
  818654:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  818658:	d0a02484 	addi	r2,gp,-32622
  81865c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  818660:	d0a02504 	addi	r2,gp,-32620
  818664:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  818668:	d0a02584 	addi	r2,gp,-32618
  81866c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  818670:	d0a02604 	addi	r2,gp,-32616
  818674:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  818678:	d0a02684 	addi	r2,gp,-32614
  81867c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  818680:	d0a02704 	addi	r2,gp,-32612
  818684:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  818688:	d0a02c04 	addi	r2,gp,-32592
  81868c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  818690:	e037883a 	mov	sp,fp
  818694:	df000017 	ldw	fp,0(sp)
  818698:	dec00104 	addi	sp,sp,4
  81869c:	f800283a 	ret

008186a0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  8186a0:	defff104 	addi	sp,sp,-60
  8186a4:	df000e15 	stw	fp,56(sp)
  8186a8:	df000e04 	addi	fp,sp,56
  8186ac:	e13ffa15 	stw	r4,-24(fp)
  8186b0:	e1fffd15 	stw	r7,-12(fp)
  8186b4:	e17ffb0d 	sth	r5,-20(fp)
  8186b8:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8186bc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8186c0:	e0bffd17 	ldw	r2,-12(fp)
  8186c4:	1004c03a 	cmpne	r2,r2,zero
  8186c8:	1000021e 	bne	r2,zero,8186d4 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  8186cc:	e03fff15 	stw	zero,-4(fp)
  8186d0:	0000bb06 	br	8189c0 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  8186d4:	e0bffa17 	ldw	r2,-24(fp)
  8186d8:	1004c03a 	cmpne	r2,r2,zero
  8186dc:	1000051e 	bne	r2,zero,8186f4 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8186e0:	e0fffd17 	ldw	r3,-12(fp)
  8186e4:	00801b84 	movi	r2,110
  8186e8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8186ec:	e03fff15 	stw	zero,-4(fp)
  8186f0:	0000b306 	br	8189c0 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  8186f4:	e0bffa17 	ldw	r2,-24(fp)
  8186f8:	10800003 	ldbu	r2,0(r2)
  8186fc:	10803fcc 	andi	r2,r2,255
  818700:	10800160 	cmpeqi	r2,r2,5
  818704:	1000051e 	bne	r2,zero,81871c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  818708:	e0fffd17 	ldw	r3,-12(fp)
  81870c:	00800044 	movi	r2,1
  818710:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  818714:	e03fff15 	stw	zero,-4(fp)
  818718:	0000a906 	br	8189c0 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  81871c:	e0fffc03 	ldbu	r3,-16(fp)
  818720:	00bfe004 	movi	r2,-128
  818724:	1884703a 	and	r2,r3,r2
  818728:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  81872c:	e0bff943 	ldbu	r2,-27(fp)
  818730:	1005003a 	cmpeq	r2,r2,zero
  818734:	1000061e 	bne	r2,zero,818750 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  818738:	e0bffc03 	ldbu	r2,-16(fp)
  81873c:	10801fcc 	andi	r2,r2,127
  818740:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  818744:	00800044 	movi	r2,1
  818748:	e0bff905 	stb	r2,-28(fp)
  81874c:	00000106 	br	818754 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  818750:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  818754:	e0bffd17 	ldw	r2,-12(fp)
  818758:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81875c:	0005303a 	rdctl	r2,status
  818760:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818764:	e0fff717 	ldw	r3,-36(fp)
  818768:	00bfff84 	movi	r2,-2
  81876c:	1884703a 	and	r2,r3,r2
  818770:	1001703a 	wrctl	status,r2
  
  return context;
  818774:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  818778:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  81877c:	e0bffc03 	ldbu	r2,-16(fp)
  818780:	e0bffe15 	stw	r2,-8(fp)
  818784:	e0fffe17 	ldw	r3,-8(fp)
  818788:	18800060 	cmpeqi	r2,r3,1
  81878c:	1000651e 	bne	r2,zero,818924 <OSFlagAccept+0x284>
  818790:	e0fffe17 	ldw	r3,-8(fp)
  818794:	18800088 	cmpgei	r2,r3,2
  818798:	1000041e 	bne	r2,zero,8187ac <OSFlagAccept+0x10c>
  81879c:	e0fffe17 	ldw	r3,-8(fp)
  8187a0:	1805003a 	cmpeq	r2,r3,zero
  8187a4:	1000421e 	bne	r2,zero,8188b0 <OSFlagAccept+0x210>
  8187a8:	00007b06 	br	818998 <OSFlagAccept+0x2f8>
  8187ac:	e0fffe17 	ldw	r3,-8(fp)
  8187b0:	188000a0 	cmpeqi	r2,r3,2
  8187b4:	1000041e 	bne	r2,zero,8187c8 <OSFlagAccept+0x128>
  8187b8:	e0fffe17 	ldw	r3,-8(fp)
  8187bc:	188000e0 	cmpeqi	r2,r3,3
  8187c0:	10001e1e 	bne	r2,zero,81883c <OSFlagAccept+0x19c>
  8187c4:	00007406 	br	818998 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  8187c8:	e0bffa17 	ldw	r2,-24(fp)
  8187cc:	10c0020b 	ldhu	r3,8(r2)
  8187d0:	e0bffb0b 	ldhu	r2,-20(fp)
  8187d4:	1884703a 	and	r2,r3,r2
  8187d8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8187dc:	e0fff98b 	ldhu	r3,-26(fp)
  8187e0:	e0bffb0b 	ldhu	r2,-20(fp)
  8187e4:	18800d1e 	bne	r3,r2,81881c <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8187e8:	e0bff903 	ldbu	r2,-28(fp)
  8187ec:	10800058 	cmpnei	r2,r2,1
  8187f0:	10000d1e 	bne	r2,zero,818828 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  8187f4:	e0bffa17 	ldw	r2,-24(fp)
  8187f8:	1080020b 	ldhu	r2,8(r2)
  8187fc:	1007883a 	mov	r3,r2
  818800:	e0bff98b 	ldhu	r2,-26(fp)
  818804:	0084303a 	nor	r2,zero,r2
  818808:	1884703a 	and	r2,r3,r2
  81880c:	1007883a 	mov	r3,r2
  818810:	e0bffa17 	ldw	r2,-24(fp)
  818814:	10c0020d 	sth	r3,8(r2)
  818818:	00000306 	br	818828 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  81881c:	e0fffd17 	ldw	r3,-12(fp)
  818820:	00801c04 	movi	r2,112
  818824:	18800005 	stb	r2,0(r3)
  818828:	e0bff817 	ldw	r2,-32(fp)
  81882c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818830:	e0bff617 	ldw	r2,-40(fp)
  818834:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  818838:	00005f06 	br	8189b8 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  81883c:	e0bffa17 	ldw	r2,-24(fp)
  818840:	10c0020b 	ldhu	r3,8(r2)
  818844:	e0bffb0b 	ldhu	r2,-20(fp)
  818848:	1884703a 	and	r2,r3,r2
  81884c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  818850:	e0bff98b 	ldhu	r2,-26(fp)
  818854:	1005003a 	cmpeq	r2,r2,zero
  818858:	10000d1e 	bne	r2,zero,818890 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81885c:	e0bff903 	ldbu	r2,-28(fp)
  818860:	10800058 	cmpnei	r2,r2,1
  818864:	10000d1e 	bne	r2,zero,81889c <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  818868:	e0bffa17 	ldw	r2,-24(fp)
  81886c:	1080020b 	ldhu	r2,8(r2)
  818870:	1007883a 	mov	r3,r2
  818874:	e0bff98b 	ldhu	r2,-26(fp)
  818878:	0084303a 	nor	r2,zero,r2
  81887c:	1884703a 	and	r2,r3,r2
  818880:	1007883a 	mov	r3,r2
  818884:	e0bffa17 	ldw	r2,-24(fp)
  818888:	10c0020d 	sth	r3,8(r2)
  81888c:	00000306 	br	81889c <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  818890:	e0fffd17 	ldw	r3,-12(fp)
  818894:	00801c04 	movi	r2,112
  818898:	18800005 	stb	r2,0(r3)
  81889c:	e0bff817 	ldw	r2,-32(fp)
  8188a0:	e0bff515 	stw	r2,-44(fp)
  8188a4:	e0bff517 	ldw	r2,-44(fp)
  8188a8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8188ac:	00004206 	br	8189b8 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  8188b0:	e0bffa17 	ldw	r2,-24(fp)
  8188b4:	1080020b 	ldhu	r2,8(r2)
  8188b8:	0084303a 	nor	r2,zero,r2
  8188bc:	1007883a 	mov	r3,r2
  8188c0:	e0bffb0b 	ldhu	r2,-20(fp)
  8188c4:	1884703a 	and	r2,r3,r2
  8188c8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8188cc:	e0fff98b 	ldhu	r3,-26(fp)
  8188d0:	e0bffb0b 	ldhu	r2,-20(fp)
  8188d4:	18800b1e 	bne	r3,r2,818904 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8188d8:	e0bff903 	ldbu	r2,-28(fp)
  8188dc:	10800058 	cmpnei	r2,r2,1
  8188e0:	10000b1e 	bne	r2,zero,818910 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  8188e4:	e0bffa17 	ldw	r2,-24(fp)
  8188e8:	10c0020b 	ldhu	r3,8(r2)
  8188ec:	e0bff98b 	ldhu	r2,-26(fp)
  8188f0:	1884b03a 	or	r2,r3,r2
  8188f4:	1007883a 	mov	r3,r2
  8188f8:	e0bffa17 	ldw	r2,-24(fp)
  8188fc:	10c0020d 	sth	r3,8(r2)
  818900:	00000306 	br	818910 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  818904:	e0fffd17 	ldw	r3,-12(fp)
  818908:	00801c04 	movi	r2,112
  81890c:	18800005 	stb	r2,0(r3)
  818910:	e0bff817 	ldw	r2,-32(fp)
  818914:	e0bff415 	stw	r2,-48(fp)
  818918:	e0bff417 	ldw	r2,-48(fp)
  81891c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  818920:	00002506 	br	8189b8 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  818924:	e0bffa17 	ldw	r2,-24(fp)
  818928:	1080020b 	ldhu	r2,8(r2)
  81892c:	0084303a 	nor	r2,zero,r2
  818930:	1007883a 	mov	r3,r2
  818934:	e0bffb0b 	ldhu	r2,-20(fp)
  818938:	1884703a 	and	r2,r3,r2
  81893c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  818940:	e0bff98b 	ldhu	r2,-26(fp)
  818944:	1005003a 	cmpeq	r2,r2,zero
  818948:	10000b1e 	bne	r2,zero,818978 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81894c:	e0bff903 	ldbu	r2,-28(fp)
  818950:	10800058 	cmpnei	r2,r2,1
  818954:	10000b1e 	bne	r2,zero,818984 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  818958:	e0bffa17 	ldw	r2,-24(fp)
  81895c:	10c0020b 	ldhu	r3,8(r2)
  818960:	e0bff98b 	ldhu	r2,-26(fp)
  818964:	1884b03a 	or	r2,r3,r2
  818968:	1007883a 	mov	r3,r2
  81896c:	e0bffa17 	ldw	r2,-24(fp)
  818970:	10c0020d 	sth	r3,8(r2)
  818974:	00000306 	br	818984 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  818978:	e0fffd17 	ldw	r3,-12(fp)
  81897c:	00801c04 	movi	r2,112
  818980:	18800005 	stb	r2,0(r3)
  818984:	e0bff817 	ldw	r2,-32(fp)
  818988:	e0bff315 	stw	r2,-52(fp)
  81898c:	e0bff317 	ldw	r2,-52(fp)
  818990:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  818994:	00000806 	br	8189b8 <OSFlagAccept+0x318>
  818998:	e0bff817 	ldw	r2,-32(fp)
  81899c:	e0bff215 	stw	r2,-56(fp)
  8189a0:	e0bff217 	ldw	r2,-56(fp)
  8189a4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  8189a8:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  8189ac:	e0fffd17 	ldw	r3,-12(fp)
  8189b0:	00801bc4 	movi	r2,111
  8189b4:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  8189b8:	e0bff98b 	ldhu	r2,-26(fp)
  8189bc:	e0bfff15 	stw	r2,-4(fp)
  8189c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8189c4:	e037883a 	mov	sp,fp
  8189c8:	df000017 	ldw	fp,0(sp)
  8189cc:	dec00104 	addi	sp,sp,4
  8189d0:	f800283a 	ret

008189d4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  8189d4:	defff704 	addi	sp,sp,-36
  8189d8:	df000815 	stw	fp,32(sp)
  8189dc:	df000804 	addi	fp,sp,32
  8189e0:	e17ffe15 	stw	r5,-8(fp)
  8189e4:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  8189e8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  8189ec:	e0bffe17 	ldw	r2,-8(fp)
  8189f0:	1004c03a 	cmpne	r2,r2,zero
  8189f4:	1000021e 	bne	r2,zero,818a00 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  8189f8:	e03fff15 	stw	zero,-4(fp)
  8189fc:	00003f06 	br	818afc <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  818a00:	008020b4 	movhi	r2,130
  818a04:	10958d04 	addi	r2,r2,22068
  818a08:	10800003 	ldbu	r2,0(r2)
  818a0c:	10803fcc 	andi	r2,r2,255
  818a10:	1005003a 	cmpeq	r2,r2,zero
  818a14:	1000051e 	bne	r2,zero,818a2c <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  818a18:	e0fffe17 	ldw	r3,-8(fp)
  818a1c:	00800404 	movi	r2,16
  818a20:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  818a24:	e03fff15 	stw	zero,-4(fp)
  818a28:	00003406 	br	818afc <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818a2c:	0005303a 	rdctl	r2,status
  818a30:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818a34:	e0fffa17 	ldw	r3,-24(fp)
  818a38:	00bfff84 	movi	r2,-2
  818a3c:	1884703a 	and	r2,r3,r2
  818a40:	1001703a 	wrctl	status,r2
  
  return context;
  818a44:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  818a48:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  818a4c:	008020b4 	movhi	r2,130
  818a50:	10959004 	addi	r2,r2,22080
  818a54:	10800017 	ldw	r2,0(r2)
  818a58:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  818a5c:	e0bffc17 	ldw	r2,-16(fp)
  818a60:	1005003a 	cmpeq	r2,r2,zero
  818a64:	10001c1e 	bne	r2,zero,818ad8 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  818a68:	008020b4 	movhi	r2,130
  818a6c:	10959004 	addi	r2,r2,22080
  818a70:	10800017 	ldw	r2,0(r2)
  818a74:	10800117 	ldw	r2,4(r2)
  818a78:	1007883a 	mov	r3,r2
  818a7c:	008020b4 	movhi	r2,130
  818a80:	10959004 	addi	r2,r2,22080
  818a84:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  818a88:	e0fffc17 	ldw	r3,-16(fp)
  818a8c:	00800144 	movi	r2,5
  818a90:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  818a94:	e0fffc17 	ldw	r3,-16(fp)
  818a98:	e0bffd0b 	ldhu	r2,-12(fp)
  818a9c:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  818aa0:	e0bffc17 	ldw	r2,-16(fp)
  818aa4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  818aa8:	e0fffc17 	ldw	r3,-16(fp)
  818aac:	00800fc4 	movi	r2,63
  818ab0:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  818ab4:	e0bffc17 	ldw	r2,-16(fp)
  818ab8:	100002c5 	stb	zero,11(r2)
  818abc:	e0bffb17 	ldw	r2,-20(fp)
  818ac0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818ac4:	e0bff917 	ldw	r2,-28(fp)
  818ac8:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  818acc:	e0bffe17 	ldw	r2,-8(fp)
  818ad0:	10000005 	stb	zero,0(r2)
  818ad4:	00000706 	br	818af4 <OSFlagCreate+0x120>
  818ad8:	e0bffb17 	ldw	r2,-20(fp)
  818adc:	e0bff815 	stw	r2,-32(fp)
  818ae0:	e0bff817 	ldw	r2,-32(fp)
  818ae4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  818ae8:	e0fffe17 	ldw	r3,-8(fp)
  818aec:	00801c84 	movi	r2,114
  818af0:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  818af4:	e0bffc17 	ldw	r2,-16(fp)
  818af8:	e0bfff15 	stw	r2,-4(fp)
  818afc:	e0bfff17 	ldw	r2,-4(fp)
}
  818b00:	e037883a 	mov	sp,fp
  818b04:	df000017 	ldw	fp,0(sp)
  818b08:	dec00104 	addi	sp,sp,4
  818b0c:	f800283a 	ret

00818b10 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  818b10:	defff004 	addi	sp,sp,-64
  818b14:	dfc00f15 	stw	ra,60(sp)
  818b18:	df000e15 	stw	fp,56(sp)
  818b1c:	df000e04 	addi	fp,sp,56
  818b20:	e13ffb15 	stw	r4,-20(fp)
  818b24:	e1bffd15 	stw	r6,-12(fp)
  818b28:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  818b2c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  818b30:	e0bffd17 	ldw	r2,-12(fp)
  818b34:	1004c03a 	cmpne	r2,r2,zero
  818b38:	1000031e 	bne	r2,zero,818b48 <OSFlagDel+0x38>
        return (pgrp);
  818b3c:	e0bffb17 	ldw	r2,-20(fp)
  818b40:	e0bfff15 	stw	r2,-4(fp)
  818b44:	00009606 	br	818da0 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  818b48:	e0bffb17 	ldw	r2,-20(fp)
  818b4c:	1004c03a 	cmpne	r2,r2,zero
  818b50:	1000061e 	bne	r2,zero,818b6c <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  818b54:	e0fffd17 	ldw	r3,-12(fp)
  818b58:	00801b84 	movi	r2,110
  818b5c:	18800005 	stb	r2,0(r3)
        return (pgrp);
  818b60:	e0fffb17 	ldw	r3,-20(fp)
  818b64:	e0ffff15 	stw	r3,-4(fp)
  818b68:	00008d06 	br	818da0 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  818b6c:	008020b4 	movhi	r2,130
  818b70:	10958d04 	addi	r2,r2,22068
  818b74:	10800003 	ldbu	r2,0(r2)
  818b78:	10803fcc 	andi	r2,r2,255
  818b7c:	1005003a 	cmpeq	r2,r2,zero
  818b80:	1000061e 	bne	r2,zero,818b9c <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  818b84:	e0fffd17 	ldw	r3,-12(fp)
  818b88:	008003c4 	movi	r2,15
  818b8c:	18800005 	stb	r2,0(r3)
        return (pgrp);
  818b90:	e0bffb17 	ldw	r2,-20(fp)
  818b94:	e0bfff15 	stw	r2,-4(fp)
  818b98:	00008106 	br	818da0 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  818b9c:	e0bffb17 	ldw	r2,-20(fp)
  818ba0:	10800003 	ldbu	r2,0(r2)
  818ba4:	10803fcc 	andi	r2,r2,255
  818ba8:	10800160 	cmpeqi	r2,r2,5
  818bac:	1000061e 	bne	r2,zero,818bc8 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  818bb0:	e0fffd17 	ldw	r3,-12(fp)
  818bb4:	00800044 	movi	r2,1
  818bb8:	18800005 	stb	r2,0(r3)
        return (pgrp);
  818bbc:	e0fffb17 	ldw	r3,-20(fp)
  818bc0:	e0ffff15 	stw	r3,-4(fp)
  818bc4:	00007606 	br	818da0 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818bc8:	0005303a 	rdctl	r2,status
  818bcc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818bd0:	e0fff617 	ldw	r3,-40(fp)
  818bd4:	00bfff84 	movi	r2,-2
  818bd8:	1884703a 	and	r2,r3,r2
  818bdc:	1001703a 	wrctl	status,r2
  
  return context;
  818be0:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  818be4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  818be8:	e0bffb17 	ldw	r2,-20(fp)
  818bec:	10800117 	ldw	r2,4(r2)
  818bf0:	1005003a 	cmpeq	r2,r2,zero
  818bf4:	1000031e 	bne	r2,zero,818c04 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  818bf8:	00800044 	movi	r2,1
  818bfc:	e0bffa05 	stb	r2,-24(fp)
  818c00:	00000106 	br	818c08 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  818c04:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  818c08:	e0bffc03 	ldbu	r2,-16(fp)
  818c0c:	e0bffe15 	stw	r2,-8(fp)
  818c10:	e0fffe17 	ldw	r3,-8(fp)
  818c14:	1805003a 	cmpeq	r2,r3,zero
  818c18:	1000041e 	bne	r2,zero,818c2c <OSFlagDel+0x11c>
  818c1c:	e0fffe17 	ldw	r3,-8(fp)
  818c20:	18800060 	cmpeqi	r2,r3,1
  818c24:	1000281e 	bne	r2,zero,818cc8 <OSFlagDel+0x1b8>
  818c28:	00005206 	br	818d74 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  818c2c:	e0bffa03 	ldbu	r2,-24(fp)
  818c30:	1004c03a 	cmpne	r2,r2,zero
  818c34:	10001a1e 	bne	r2,zero,818ca0 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  818c38:	e0fffb17 	ldw	r3,-20(fp)
  818c3c:	00800fc4 	movi	r2,63
  818c40:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  818c44:	e0bffb17 	ldw	r2,-20(fp)
  818c48:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  818c4c:	e0bffb17 	ldw	r2,-20(fp)
  818c50:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  818c54:	008020b4 	movhi	r2,130
  818c58:	10959004 	addi	r2,r2,22080
  818c5c:	10c00017 	ldw	r3,0(r2)
  818c60:	e0bffb17 	ldw	r2,-20(fp)
  818c64:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  818c68:	e0bffb17 	ldw	r2,-20(fp)
  818c6c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  818c70:	00c020b4 	movhi	r3,130
  818c74:	18d59004 	addi	r3,r3,22080
  818c78:	e0bffb17 	ldw	r2,-20(fp)
  818c7c:	18800015 	stw	r2,0(r3)
  818c80:	e0bff717 	ldw	r2,-36(fp)
  818c84:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818c88:	e0bff517 	ldw	r2,-44(fp)
  818c8c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  818c90:	e0bffd17 	ldw	r2,-12(fp)
  818c94:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  818c98:	e03ff815 	stw	zero,-32(fp)
  818c9c:	00003e06 	br	818d98 <OSFlagDel+0x288>
  818ca0:	e0bff717 	ldw	r2,-36(fp)
  818ca4:	e0bff415 	stw	r2,-48(fp)
  818ca8:	e0bff417 	ldw	r2,-48(fp)
  818cac:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  818cb0:	e0fffd17 	ldw	r3,-12(fp)
  818cb4:	00801244 	movi	r2,73
  818cb8:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  818cbc:	e0bffb17 	ldw	r2,-20(fp)
  818cc0:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  818cc4:	00003406 	br	818d98 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  818cc8:	e0bffb17 	ldw	r2,-20(fp)
  818ccc:	10800117 	ldw	r2,4(r2)
  818cd0:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  818cd4:	00000606 	br	818cf0 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  818cd8:	e13ff917 	ldw	r4,-28(fp)
  818cdc:	000b883a 	mov	r5,zero
  818ce0:	0819e200 	call	819e20 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  818ce4:	e0bff917 	ldw	r2,-28(fp)
  818ce8:	10800017 	ldw	r2,0(r2)
  818cec:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  818cf0:	e0bff917 	ldw	r2,-28(fp)
  818cf4:	1004c03a 	cmpne	r2,r2,zero
  818cf8:	103ff71e 	bne	r2,zero,818cd8 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  818cfc:	e0fffb17 	ldw	r3,-20(fp)
  818d00:	00800fc4 	movi	r2,63
  818d04:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  818d08:	e0bffb17 	ldw	r2,-20(fp)
  818d0c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  818d10:	e0bffb17 	ldw	r2,-20(fp)
  818d14:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  818d18:	008020b4 	movhi	r2,130
  818d1c:	10959004 	addi	r2,r2,22080
  818d20:	10c00017 	ldw	r3,0(r2)
  818d24:	e0bffb17 	ldw	r2,-20(fp)
  818d28:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  818d2c:	e0bffb17 	ldw	r2,-20(fp)
  818d30:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  818d34:	00c020b4 	movhi	r3,130
  818d38:	18d59004 	addi	r3,r3,22080
  818d3c:	e0bffb17 	ldw	r2,-20(fp)
  818d40:	18800015 	stw	r2,0(r3)
  818d44:	e0bff717 	ldw	r2,-36(fp)
  818d48:	e0bff315 	stw	r2,-52(fp)
  818d4c:	e0bff317 	ldw	r2,-52(fp)
  818d50:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  818d54:	e0bffa03 	ldbu	r2,-24(fp)
  818d58:	10800058 	cmpnei	r2,r2,1
  818d5c:	1000011e 	bne	r2,zero,818d64 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  818d60:	0817e2c0 	call	817e2c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  818d64:	e0bffd17 	ldw	r2,-12(fp)
  818d68:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  818d6c:	e03ff815 	stw	zero,-32(fp)
             break;
  818d70:	00000906 	br	818d98 <OSFlagDel+0x288>
  818d74:	e0bff717 	ldw	r2,-36(fp)
  818d78:	e0bff215 	stw	r2,-56(fp)
  818d7c:	e0bff217 	ldw	r2,-56(fp)
  818d80:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  818d84:	e0fffd17 	ldw	r3,-12(fp)
  818d88:	008001c4 	movi	r2,7
  818d8c:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  818d90:	e0bffb17 	ldw	r2,-20(fp)
  818d94:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  818d98:	e0bff817 	ldw	r2,-32(fp)
  818d9c:	e0bfff15 	stw	r2,-4(fp)
  818da0:	e0bfff17 	ldw	r2,-4(fp)
}
  818da4:	e037883a 	mov	sp,fp
  818da8:	dfc00117 	ldw	ra,4(sp)
  818dac:	df000017 	ldw	fp,0(sp)
  818db0:	dec00204 	addi	sp,sp,8
  818db4:	f800283a 	ret

00818db8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  818db8:	defff504 	addi	sp,sp,-44
  818dbc:	dfc00a15 	stw	ra,40(sp)
  818dc0:	df000915 	stw	fp,36(sp)
  818dc4:	df000904 	addi	fp,sp,36
  818dc8:	e13ffc15 	stw	r4,-16(fp)
  818dcc:	e17ffd15 	stw	r5,-12(fp)
  818dd0:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  818dd4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  818dd8:	e0bffe17 	ldw	r2,-8(fp)
  818ddc:	1004c03a 	cmpne	r2,r2,zero
  818de0:	1000021e 	bne	r2,zero,818dec <OSFlagNameGet+0x34>
        return (0);
  818de4:	e03fff15 	stw	zero,-4(fp)
  818de8:	00003e06 	br	818ee4 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  818dec:	e0bffc17 	ldw	r2,-16(fp)
  818df0:	1004c03a 	cmpne	r2,r2,zero
  818df4:	1000051e 	bne	r2,zero,818e0c <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  818df8:	e0fffe17 	ldw	r3,-8(fp)
  818dfc:	00801b84 	movi	r2,110
  818e00:	18800005 	stb	r2,0(r3)
        return (0);
  818e04:	e03fff15 	stw	zero,-4(fp)
  818e08:	00003606 	br	818ee4 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  818e0c:	e0bffd17 	ldw	r2,-12(fp)
  818e10:	1004c03a 	cmpne	r2,r2,zero
  818e14:	1000051e 	bne	r2,zero,818e2c <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  818e18:	e0fffe17 	ldw	r3,-8(fp)
  818e1c:	00800304 	movi	r2,12
  818e20:	18800005 	stb	r2,0(r3)
        return (0);
  818e24:	e03fff15 	stw	zero,-4(fp)
  818e28:	00002e06 	br	818ee4 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  818e2c:	008020b4 	movhi	r2,130
  818e30:	10958d04 	addi	r2,r2,22068
  818e34:	10800003 	ldbu	r2,0(r2)
  818e38:	10803fcc 	andi	r2,r2,255
  818e3c:	1005003a 	cmpeq	r2,r2,zero
  818e40:	1000051e 	bne	r2,zero,818e58 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  818e44:	e0fffe17 	ldw	r3,-8(fp)
  818e48:	00800444 	movi	r2,17
  818e4c:	18800005 	stb	r2,0(r3)
        return (0);
  818e50:	e03fff15 	stw	zero,-4(fp)
  818e54:	00002306 	br	818ee4 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818e58:	0005303a 	rdctl	r2,status
  818e5c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818e60:	e0fff917 	ldw	r3,-28(fp)
  818e64:	00bfff84 	movi	r2,-2
  818e68:	1884703a 	and	r2,r3,r2
  818e6c:	1001703a 	wrctl	status,r2
  
  return context;
  818e70:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  818e74:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  818e78:	e0bffc17 	ldw	r2,-16(fp)
  818e7c:	10800003 	ldbu	r2,0(r2)
  818e80:	10803fcc 	andi	r2,r2,255
  818e84:	10800160 	cmpeqi	r2,r2,5
  818e88:	1000091e 	bne	r2,zero,818eb0 <OSFlagNameGet+0xf8>
  818e8c:	e0bffa17 	ldw	r2,-24(fp)
  818e90:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818e94:	e0bff817 	ldw	r2,-32(fp)
  818e98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  818e9c:	e0fffe17 	ldw	r3,-8(fp)
  818ea0:	00800044 	movi	r2,1
  818ea4:	18800005 	stb	r2,0(r3)
        return (0);
  818ea8:	e03fff15 	stw	zero,-4(fp)
  818eac:	00000d06 	br	818ee4 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  818eb0:	e0bffc17 	ldw	r2,-16(fp)
  818eb4:	11400284 	addi	r5,r2,10
  818eb8:	e13ffd17 	ldw	r4,-12(fp)
  818ebc:	0817f700 	call	817f70 <OS_StrCopy>
  818ec0:	e0bffb05 	stb	r2,-20(fp)
  818ec4:	e0bffa17 	ldw	r2,-24(fp)
  818ec8:	e0bff715 	stw	r2,-36(fp)
  818ecc:	e0bff717 	ldw	r2,-36(fp)
  818ed0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  818ed4:	e0bffe17 	ldw	r2,-8(fp)
  818ed8:	10000005 	stb	zero,0(r2)
    return (len);
  818edc:	e0bffb03 	ldbu	r2,-20(fp)
  818ee0:	e0bfff15 	stw	r2,-4(fp)
  818ee4:	e0bfff17 	ldw	r2,-4(fp)
}
  818ee8:	e037883a 	mov	sp,fp
  818eec:	dfc00117 	ldw	ra,4(sp)
  818ef0:	df000017 	ldw	fp,0(sp)
  818ef4:	dec00204 	addi	sp,sp,8
  818ef8:	f800283a 	ret

00818efc <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  818efc:	defff504 	addi	sp,sp,-44
  818f00:	dfc00a15 	stw	ra,40(sp)
  818f04:	df000915 	stw	fp,36(sp)
  818f08:	df000904 	addi	fp,sp,36
  818f0c:	e13ffd15 	stw	r4,-12(fp)
  818f10:	e17ffe15 	stw	r5,-8(fp)
  818f14:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  818f18:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  818f1c:	e0bfff17 	ldw	r2,-4(fp)
  818f20:	1005003a 	cmpeq	r2,r2,zero
  818f24:	1000451e 	bne	r2,zero,81903c <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  818f28:	e0bffd17 	ldw	r2,-12(fp)
  818f2c:	1004c03a 	cmpne	r2,r2,zero
  818f30:	1000041e 	bne	r2,zero,818f44 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  818f34:	e0ffff17 	ldw	r3,-4(fp)
  818f38:	00801b84 	movi	r2,110
  818f3c:	18800005 	stb	r2,0(r3)
        return;
  818f40:	00003e06 	br	81903c <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  818f44:	e0bffe17 	ldw	r2,-8(fp)
  818f48:	1004c03a 	cmpne	r2,r2,zero
  818f4c:	1000041e 	bne	r2,zero,818f60 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  818f50:	e0ffff17 	ldw	r3,-4(fp)
  818f54:	00800304 	movi	r2,12
  818f58:	18800005 	stb	r2,0(r3)
        return;
  818f5c:	00003706 	br	81903c <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  818f60:	008020b4 	movhi	r2,130
  818f64:	10958d04 	addi	r2,r2,22068
  818f68:	10800003 	ldbu	r2,0(r2)
  818f6c:	10803fcc 	andi	r2,r2,255
  818f70:	1005003a 	cmpeq	r2,r2,zero
  818f74:	1000041e 	bne	r2,zero,818f88 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  818f78:	e0ffff17 	ldw	r3,-4(fp)
  818f7c:	00800484 	movi	r2,18
  818f80:	18800005 	stb	r2,0(r3)
        return;
  818f84:	00002d06 	br	81903c <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818f88:	0005303a 	rdctl	r2,status
  818f8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818f90:	e0fffa17 	ldw	r3,-24(fp)
  818f94:	00bfff84 	movi	r2,-2
  818f98:	1884703a 	and	r2,r3,r2
  818f9c:	1001703a 	wrctl	status,r2
  
  return context;
  818fa0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  818fa4:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  818fa8:	e0bffd17 	ldw	r2,-12(fp)
  818fac:	10800003 	ldbu	r2,0(r2)
  818fb0:	10803fcc 	andi	r2,r2,255
  818fb4:	10800160 	cmpeqi	r2,r2,5
  818fb8:	1000081e 	bne	r2,zero,818fdc <OSFlagNameSet+0xe0>
  818fbc:	e0bffb17 	ldw	r2,-20(fp)
  818fc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818fc4:	e0bff917 	ldw	r2,-28(fp)
  818fc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  818fcc:	e0ffff17 	ldw	r3,-4(fp)
  818fd0:	00800044 	movi	r2,1
  818fd4:	18800005 	stb	r2,0(r3)
        return;
  818fd8:	00001806 	br	81903c <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  818fdc:	e13ffe17 	ldw	r4,-8(fp)
  818fe0:	0817ff00 	call	817ff0 <OS_StrLen>
  818fe4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  818fe8:	e0bffc03 	ldbu	r2,-16(fp)
  818fec:	10800830 	cmpltui	r2,r2,32
  818ff0:	1000081e 	bne	r2,zero,819014 <OSFlagNameSet+0x118>
  818ff4:	e0bffb17 	ldw	r2,-20(fp)
  818ff8:	e0bff815 	stw	r2,-32(fp)
  818ffc:	e0bff817 	ldw	r2,-32(fp)
  819000:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  819004:	e0ffff17 	ldw	r3,-4(fp)
  819008:	00801cc4 	movi	r2,115
  81900c:	18800005 	stb	r2,0(r3)
        return;
  819010:	00000a06 	br	81903c <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  819014:	e0bffd17 	ldw	r2,-12(fp)
  819018:	11000284 	addi	r4,r2,10
  81901c:	e17ffe17 	ldw	r5,-8(fp)
  819020:	0817f700 	call	817f70 <OS_StrCopy>
  819024:	e0bffb17 	ldw	r2,-20(fp)
  819028:	e0bff715 	stw	r2,-36(fp)
  81902c:	e0bff717 	ldw	r2,-36(fp)
  819030:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  819034:	e0bfff17 	ldw	r2,-4(fp)
  819038:	10000005 	stb	zero,0(r2)
    return;
}
  81903c:	e037883a 	mov	sp,fp
  819040:	dfc00117 	ldw	ra,4(sp)
  819044:	df000017 	ldw	fp,0(sp)
  819048:	dec00204 	addi	sp,sp,8
  81904c:	f800283a 	ret

00819050 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  819050:	deffe004 	addi	sp,sp,-128
  819054:	dfc01f15 	stw	ra,124(sp)
  819058:	df001e15 	stw	fp,120(sp)
  81905c:	df001e04 	addi	fp,sp,120
  819060:	e13ff915 	stw	r4,-28(fp)
  819064:	e17ffa0d 	sth	r5,-24(fp)
  819068:	e1bffb05 	stb	r6,-20(fp)
  81906c:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  819070:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  819074:	e0800217 	ldw	r2,8(fp)
  819078:	1004c03a 	cmpne	r2,r2,zero
  81907c:	1000021e 	bne	r2,zero,819088 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  819080:	e03fff15 	stw	zero,-4(fp)
  819084:	00017d06 	br	81967c <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  819088:	e0bff917 	ldw	r2,-28(fp)
  81908c:	1004c03a 	cmpne	r2,r2,zero
  819090:	1000051e 	bne	r2,zero,8190a8 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  819094:	e0c00217 	ldw	r3,8(fp)
  819098:	00801b84 	movi	r2,110
  81909c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8190a0:	e03fff15 	stw	zero,-4(fp)
  8190a4:	00017506 	br	81967c <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8190a8:	008020b4 	movhi	r2,130
  8190ac:	10958d04 	addi	r2,r2,22068
  8190b0:	10800003 	ldbu	r2,0(r2)
  8190b4:	10803fcc 	andi	r2,r2,255
  8190b8:	1005003a 	cmpeq	r2,r2,zero
  8190bc:	1000051e 	bne	r2,zero,8190d4 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  8190c0:	e0c00217 	ldw	r3,8(fp)
  8190c4:	00800084 	movi	r2,2
  8190c8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8190cc:	e03fff15 	stw	zero,-4(fp)
  8190d0:	00016a06 	br	81967c <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  8190d4:	008020b4 	movhi	r2,130
  8190d8:	10957f04 	addi	r2,r2,22012
  8190dc:	10800003 	ldbu	r2,0(r2)
  8190e0:	10803fcc 	andi	r2,r2,255
  8190e4:	1005003a 	cmpeq	r2,r2,zero
  8190e8:	1000051e 	bne	r2,zero,819100 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  8190ec:	e0c00217 	ldw	r3,8(fp)
  8190f0:	00800344 	movi	r2,13
  8190f4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8190f8:	e03fff15 	stw	zero,-4(fp)
  8190fc:	00015f06 	br	81967c <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  819100:	e0bff917 	ldw	r2,-28(fp)
  819104:	10800003 	ldbu	r2,0(r2)
  819108:	10803fcc 	andi	r2,r2,255
  81910c:	10800160 	cmpeqi	r2,r2,5
  819110:	1000051e 	bne	r2,zero,819128 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  819114:	e0c00217 	ldw	r3,8(fp)
  819118:	00800044 	movi	r2,1
  81911c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  819120:	e03fff15 	stw	zero,-4(fp)
  819124:	00015506 	br	81967c <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  819128:	e0fffb03 	ldbu	r3,-20(fp)
  81912c:	00bfe004 	movi	r2,-128
  819130:	1884703a 	and	r2,r3,r2
  819134:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  819138:	e0bff283 	ldbu	r2,-54(fp)
  81913c:	1005003a 	cmpeq	r2,r2,zero
  819140:	1000071e 	bne	r2,zero,819160 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  819144:	00c01fc4 	movi	r3,127
  819148:	e0bffb03 	ldbu	r2,-20(fp)
  81914c:	10c4703a 	and	r2,r2,r3
  819150:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  819154:	00800044 	movi	r2,1
  819158:	e0bff205 	stb	r2,-56(fp)
  81915c:	00000106 	br	819164 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  819160:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819164:	0005303a 	rdctl	r2,status
  819168:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81916c:	e0fff017 	ldw	r3,-64(fp)
  819170:	00bfff84 	movi	r2,-2
  819174:	1884703a 	and	r2,r3,r2
  819178:	1001703a 	wrctl	status,r2
  
  return context;
  81917c:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  819180:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  819184:	e0bffb03 	ldbu	r2,-20(fp)
  819188:	e0bffe15 	stw	r2,-8(fp)
  81918c:	e0fffe17 	ldw	r3,-8(fp)
  819190:	18800060 	cmpeqi	r2,r3,1
  819194:	1000981e 	bne	r2,zero,8193f8 <OSFlagPend+0x3a8>
  819198:	e0fffe17 	ldw	r3,-8(fp)
  81919c:	18800088 	cmpgei	r2,r3,2
  8191a0:	1000041e 	bne	r2,zero,8191b4 <OSFlagPend+0x164>
  8191a4:	e0fffe17 	ldw	r3,-8(fp)
  8191a8:	1805003a 	cmpeq	r2,r3,zero
  8191ac:	1000641e 	bne	r2,zero,819340 <OSFlagPend+0x2f0>
  8191b0:	0000bf06 	br	8194b0 <OSFlagPend+0x460>
  8191b4:	e0fffe17 	ldw	r3,-8(fp)
  8191b8:	188000a0 	cmpeqi	r2,r3,2
  8191bc:	1000041e 	bne	r2,zero,8191d0 <OSFlagPend+0x180>
  8191c0:	e0fffe17 	ldw	r3,-8(fp)
  8191c4:	188000e0 	cmpeqi	r2,r3,3
  8191c8:	10002f1e 	bne	r2,zero,819288 <OSFlagPend+0x238>
  8191cc:	0000b806 	br	8194b0 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  8191d0:	e0bff917 	ldw	r2,-28(fp)
  8191d4:	10c0020b 	ldhu	r3,8(r2)
  8191d8:	e0bffa0b 	ldhu	r2,-24(fp)
  8191dc:	1884703a 	and	r2,r3,r2
  8191e0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8191e4:	e0fff30b 	ldhu	r3,-52(fp)
  8191e8:	e0bffa0b 	ldhu	r2,-24(fp)
  8191ec:	18801a1e 	bne	r3,r2,819258 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8191f0:	e0bff203 	ldbu	r2,-56(fp)
  8191f4:	10800058 	cmpnei	r2,r2,1
  8191f8:	1000091e 	bne	r2,zero,819220 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  8191fc:	e0bff917 	ldw	r2,-28(fp)
  819200:	1080020b 	ldhu	r2,8(r2)
  819204:	1007883a 	mov	r3,r2
  819208:	e0bff30b 	ldhu	r2,-52(fp)
  81920c:	0084303a 	nor	r2,zero,r2
  819210:	1884703a 	and	r2,r3,r2
  819214:	1007883a 	mov	r3,r2
  819218:	e0bff917 	ldw	r2,-28(fp)
  81921c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  819220:	008020b4 	movhi	r2,130
  819224:	10958e04 	addi	r2,r2,22072
  819228:	10c00017 	ldw	r3,0(r2)
  81922c:	e0bff30b 	ldhu	r2,-52(fp)
  819230:	18800b0d 	sth	r2,44(r3)
  819234:	e0bff117 	ldw	r2,-60(fp)
  819238:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81923c:	e0bfef17 	ldw	r2,-68(fp)
  819240:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  819244:	e0800217 	ldw	r2,8(fp)
  819248:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  81924c:	e0bff30b 	ldhu	r2,-52(fp)
  819250:	e0bfff15 	stw	r2,-4(fp)
  819254:	00010906 	br	81967c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  819258:	e1bffa0b 	ldhu	r6,-24(fp)
  81925c:	e1fffb03 	ldbu	r7,-20(fp)
  819260:	e0bffc0b 	ldhu	r2,-16(fp)
  819264:	e17ff404 	addi	r5,fp,-48
  819268:	d8800015 	stw	r2,0(sp)
  81926c:	e13ff917 	ldw	r4,-28(fp)
  819270:	0819b780 	call	819b78 <OS_FlagBlock>
  819274:	e0bff117 	ldw	r2,-60(fp)
  819278:	e0bfee15 	stw	r2,-72(fp)
  81927c:	e0bfee17 	ldw	r2,-72(fp)
  819280:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  819284:	00009506 	br	8194dc <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  819288:	e0bff917 	ldw	r2,-28(fp)
  81928c:	10c0020b 	ldhu	r3,8(r2)
  819290:	e0bffa0b 	ldhu	r2,-24(fp)
  819294:	1884703a 	and	r2,r3,r2
  819298:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  81929c:	e0bff30b 	ldhu	r2,-52(fp)
  8192a0:	1005003a 	cmpeq	r2,r2,zero
  8192a4:	10001a1e 	bne	r2,zero,819310 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8192a8:	e0bff203 	ldbu	r2,-56(fp)
  8192ac:	10800058 	cmpnei	r2,r2,1
  8192b0:	1000091e 	bne	r2,zero,8192d8 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  8192b4:	e0bff917 	ldw	r2,-28(fp)
  8192b8:	1080020b 	ldhu	r2,8(r2)
  8192bc:	1007883a 	mov	r3,r2
  8192c0:	e0bff30b 	ldhu	r2,-52(fp)
  8192c4:	0084303a 	nor	r2,zero,r2
  8192c8:	1884703a 	and	r2,r3,r2
  8192cc:	1007883a 	mov	r3,r2
  8192d0:	e0bff917 	ldw	r2,-28(fp)
  8192d4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8192d8:	008020b4 	movhi	r2,130
  8192dc:	10958e04 	addi	r2,r2,22072
  8192e0:	10c00017 	ldw	r3,0(r2)
  8192e4:	e0bff30b 	ldhu	r2,-52(fp)
  8192e8:	18800b0d 	sth	r2,44(r3)
  8192ec:	e0bff117 	ldw	r2,-60(fp)
  8192f0:	e0bfed15 	stw	r2,-76(fp)
  8192f4:	e0bfed17 	ldw	r2,-76(fp)
  8192f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8192fc:	e0800217 	ldw	r2,8(fp)
  819300:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  819304:	e0fff30b 	ldhu	r3,-52(fp)
  819308:	e0ffff15 	stw	r3,-4(fp)
  81930c:	0000db06 	br	81967c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  819310:	e1bffa0b 	ldhu	r6,-24(fp)
  819314:	e1fffb03 	ldbu	r7,-20(fp)
  819318:	e0bffc0b 	ldhu	r2,-16(fp)
  81931c:	e17ff404 	addi	r5,fp,-48
  819320:	d8800015 	stw	r2,0(sp)
  819324:	e13ff917 	ldw	r4,-28(fp)
  819328:	0819b780 	call	819b78 <OS_FlagBlock>
  81932c:	e0bff117 	ldw	r2,-60(fp)
  819330:	e0bfec15 	stw	r2,-80(fp)
  819334:	e0bfec17 	ldw	r2,-80(fp)
  819338:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  81933c:	00006706 	br	8194dc <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  819340:	e0bff917 	ldw	r2,-28(fp)
  819344:	1080020b 	ldhu	r2,8(r2)
  819348:	0084303a 	nor	r2,zero,r2
  81934c:	1007883a 	mov	r3,r2
  819350:	e0bffa0b 	ldhu	r2,-24(fp)
  819354:	1884703a 	and	r2,r3,r2
  819358:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  81935c:	e0fff30b 	ldhu	r3,-52(fp)
  819360:	e0bffa0b 	ldhu	r2,-24(fp)
  819364:	1880181e 	bne	r3,r2,8193c8 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  819368:	e0bff203 	ldbu	r2,-56(fp)
  81936c:	10800058 	cmpnei	r2,r2,1
  819370:	1000071e 	bne	r2,zero,819390 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  819374:	e0bff917 	ldw	r2,-28(fp)
  819378:	10c0020b 	ldhu	r3,8(r2)
  81937c:	e0bff30b 	ldhu	r2,-52(fp)
  819380:	1884b03a 	or	r2,r3,r2
  819384:	1007883a 	mov	r3,r2
  819388:	e0bff917 	ldw	r2,-28(fp)
  81938c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  819390:	008020b4 	movhi	r2,130
  819394:	10958e04 	addi	r2,r2,22072
  819398:	10c00017 	ldw	r3,0(r2)
  81939c:	e0bff30b 	ldhu	r2,-52(fp)
  8193a0:	18800b0d 	sth	r2,44(r3)
  8193a4:	e0bff117 	ldw	r2,-60(fp)
  8193a8:	e0bfeb15 	stw	r2,-84(fp)
  8193ac:	e0bfeb17 	ldw	r2,-84(fp)
  8193b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8193b4:	e0800217 	ldw	r2,8(fp)
  8193b8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8193bc:	e0bff30b 	ldhu	r2,-52(fp)
  8193c0:	e0bfff15 	stw	r2,-4(fp)
  8193c4:	0000ad06 	br	81967c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8193c8:	e1bffa0b 	ldhu	r6,-24(fp)
  8193cc:	e1fffb03 	ldbu	r7,-20(fp)
  8193d0:	e0bffc0b 	ldhu	r2,-16(fp)
  8193d4:	e17ff404 	addi	r5,fp,-48
  8193d8:	d8800015 	stw	r2,0(sp)
  8193dc:	e13ff917 	ldw	r4,-28(fp)
  8193e0:	0819b780 	call	819b78 <OS_FlagBlock>
  8193e4:	e0bff117 	ldw	r2,-60(fp)
  8193e8:	e0bfea15 	stw	r2,-88(fp)
  8193ec:	e0bfea17 	ldw	r2,-88(fp)
  8193f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8193f4:	00003906 	br	8194dc <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  8193f8:	e0bff917 	ldw	r2,-28(fp)
  8193fc:	1080020b 	ldhu	r2,8(r2)
  819400:	0084303a 	nor	r2,zero,r2
  819404:	1007883a 	mov	r3,r2
  819408:	e0bffa0b 	ldhu	r2,-24(fp)
  81940c:	1884703a 	and	r2,r3,r2
  819410:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  819414:	e0bff30b 	ldhu	r2,-52(fp)
  819418:	1005003a 	cmpeq	r2,r2,zero
  81941c:	1000181e 	bne	r2,zero,819480 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  819420:	e0bff203 	ldbu	r2,-56(fp)
  819424:	10800058 	cmpnei	r2,r2,1
  819428:	1000071e 	bne	r2,zero,819448 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  81942c:	e0bff917 	ldw	r2,-28(fp)
  819430:	10c0020b 	ldhu	r3,8(r2)
  819434:	e0bff30b 	ldhu	r2,-52(fp)
  819438:	1884b03a 	or	r2,r3,r2
  81943c:	1007883a 	mov	r3,r2
  819440:	e0bff917 	ldw	r2,-28(fp)
  819444:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  819448:	008020b4 	movhi	r2,130
  81944c:	10958e04 	addi	r2,r2,22072
  819450:	10c00017 	ldw	r3,0(r2)
  819454:	e0bff30b 	ldhu	r2,-52(fp)
  819458:	18800b0d 	sth	r2,44(r3)
  81945c:	e0bff117 	ldw	r2,-60(fp)
  819460:	e0bfe915 	stw	r2,-92(fp)
  819464:	e0bfe917 	ldw	r2,-92(fp)
  819468:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  81946c:	e0800217 	ldw	r2,8(fp)
  819470:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  819474:	e0fff30b 	ldhu	r3,-52(fp)
  819478:	e0ffff15 	stw	r3,-4(fp)
  81947c:	00007f06 	br	81967c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  819480:	e1bffa0b 	ldhu	r6,-24(fp)
  819484:	e1fffb03 	ldbu	r7,-20(fp)
  819488:	e0bffc0b 	ldhu	r2,-16(fp)
  81948c:	e17ff404 	addi	r5,fp,-48
  819490:	d8800015 	stw	r2,0(sp)
  819494:	e13ff917 	ldw	r4,-28(fp)
  819498:	0819b780 	call	819b78 <OS_FlagBlock>
  81949c:	e0bff117 	ldw	r2,-60(fp)
  8194a0:	e0bfe815 	stw	r2,-96(fp)
  8194a4:	e0bfe817 	ldw	r2,-96(fp)
  8194a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8194ac:	00000b06 	br	8194dc <OSFlagPend+0x48c>
  8194b0:	e0bff117 	ldw	r2,-60(fp)
  8194b4:	e0bfe715 	stw	r2,-100(fp)
  8194b8:	e0bfe717 	ldw	r2,-100(fp)
  8194bc:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  8194c0:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  8194c4:	e0c00217 	ldw	r3,8(fp)
  8194c8:	00801bc4 	movi	r2,111
  8194cc:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  8194d0:	e0bff30b 	ldhu	r2,-52(fp)
  8194d4:	e0bfff15 	stw	r2,-4(fp)
  8194d8:	00006806 	br	81967c <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  8194dc:	0817e2c0 	call	817e2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8194e0:	0005303a 	rdctl	r2,status
  8194e4:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8194e8:	e0ffe617 	ldw	r3,-104(fp)
  8194ec:	00bfff84 	movi	r2,-2
  8194f0:	1884703a 	and	r2,r3,r2
  8194f4:	1001703a 	wrctl	status,r2
  
  return context;
  8194f8:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  8194fc:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  819500:	008020b4 	movhi	r2,130
  819504:	10958e04 	addi	r2,r2,22072
  819508:	10800017 	ldw	r2,0(r2)
  81950c:	10800c43 	ldbu	r2,49(r2)
  819510:	10803fcc 	andi	r2,r2,255
  819514:	1005003a 	cmpeq	r2,r2,zero
  819518:	1000221e 	bne	r2,zero,8195a4 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  81951c:	008020b4 	movhi	r2,130
  819520:	10958e04 	addi	r2,r2,22072
  819524:	10800017 	ldw	r2,0(r2)
  819528:	10800c43 	ldbu	r2,49(r2)
  81952c:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  819530:	008020b4 	movhi	r2,130
  819534:	10958e04 	addi	r2,r2,22072
  819538:	10800017 	ldw	r2,0(r2)
  81953c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  819540:	e13ff404 	addi	r4,fp,-48
  819544:	0819f300 	call	819f30 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  819548:	008020b4 	movhi	r2,130
  81954c:	10958e04 	addi	r2,r2,22072
  819550:	10800017 	ldw	r2,0(r2)
  819554:	10000c05 	stb	zero,48(r2)
  819558:	e0bff117 	ldw	r2,-60(fp)
  81955c:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819560:	e0bfe517 	ldw	r2,-108(fp)
  819564:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  819568:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  81956c:	e0bff243 	ldbu	r2,-55(fp)
  819570:	108000a0 	cmpeqi	r2,r2,2
  819574:	1000011e 	bne	r2,zero,81957c <OSFlagPend+0x52c>
  819578:	00000406 	br	81958c <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  81957c:	e0c00217 	ldw	r3,8(fp)
  819580:	00800384 	movi	r2,14
  819584:	18800005 	stb	r2,0(r3)
                 break;
  819588:	00000306 	br	819598 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  81958c:	e0c00217 	ldw	r3,8(fp)
  819590:	00800284 	movi	r2,10
  819594:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  819598:	e0fff30b 	ldhu	r3,-52(fp)
  81959c:	e0ffff15 	stw	r3,-4(fp)
  8195a0:	00003606 	br	81967c <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  8195a4:	008020b4 	movhi	r2,130
  8195a8:	10958e04 	addi	r2,r2,22072
  8195ac:	10800017 	ldw	r2,0(r2)
  8195b0:	10800b0b 	ldhu	r2,44(r2)
  8195b4:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  8195b8:	e0bff203 	ldbu	r2,-56(fp)
  8195bc:	10800058 	cmpnei	r2,r2,1
  8195c0:	1000261e 	bne	r2,zero,81965c <OSFlagPend+0x60c>
        switch (wait_type) {
  8195c4:	e0bffb03 	ldbu	r2,-20(fp)
  8195c8:	e0bffd15 	stw	r2,-12(fp)
  8195cc:	e0fffd17 	ldw	r3,-12(fp)
  8195d0:	1804803a 	cmplt	r2,r3,zero
  8195d4:	1000181e 	bne	r2,zero,819638 <OSFlagPend+0x5e8>
  8195d8:	e0fffd17 	ldw	r3,-12(fp)
  8195dc:	18800090 	cmplti	r2,r3,2
  8195e0:	10000d1e 	bne	r2,zero,819618 <OSFlagPend+0x5c8>
  8195e4:	e0fffd17 	ldw	r3,-12(fp)
  8195e8:	18800108 	cmpgei	r2,r3,4
  8195ec:	1000121e 	bne	r2,zero,819638 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  8195f0:	e0bff917 	ldw	r2,-28(fp)
  8195f4:	1080020b 	ldhu	r2,8(r2)
  8195f8:	1007883a 	mov	r3,r2
  8195fc:	e0bff30b 	ldhu	r2,-52(fp)
  819600:	0084303a 	nor	r2,zero,r2
  819604:	1884703a 	and	r2,r3,r2
  819608:	1007883a 	mov	r3,r2
  81960c:	e0bff917 	ldw	r2,-28(fp)
  819610:	10c0020d 	sth	r3,8(r2)
                 break;
  819614:	00001106 	br	81965c <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  819618:	e0bff917 	ldw	r2,-28(fp)
  81961c:	10c0020b 	ldhu	r3,8(r2)
  819620:	e0bff30b 	ldhu	r2,-52(fp)
  819624:	1884b03a 	or	r2,r3,r2
  819628:	1007883a 	mov	r3,r2
  81962c:	e0bff917 	ldw	r2,-28(fp)
  819630:	10c0020d 	sth	r3,8(r2)
                 break;
  819634:	00000906 	br	81965c <OSFlagPend+0x60c>
  819638:	e0bff117 	ldw	r2,-60(fp)
  81963c:	e0bfe415 	stw	r2,-112(fp)
  819640:	e0bfe417 	ldw	r2,-112(fp)
  819644:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  819648:	e0c00217 	ldw	r3,8(fp)
  81964c:	00801bc4 	movi	r2,111
  819650:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  819654:	e03fff15 	stw	zero,-4(fp)
  819658:	00000806 	br	81967c <OSFlagPend+0x62c>
  81965c:	e0bff117 	ldw	r2,-60(fp)
  819660:	e0bfe315 	stw	r2,-116(fp)
  819664:	e0bfe317 	ldw	r2,-116(fp)
  819668:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  81966c:	e0800217 	ldw	r2,8(fp)
  819670:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  819674:	e0bff30b 	ldhu	r2,-52(fp)
  819678:	e0bfff15 	stw	r2,-4(fp)
  81967c:	e0bfff17 	ldw	r2,-4(fp)
}
  819680:	e037883a 	mov	sp,fp
  819684:	dfc00117 	ldw	ra,4(sp)
  819688:	df000017 	ldw	fp,0(sp)
  81968c:	dec00204 	addi	sp,sp,8
  819690:	f800283a 	ret

00819694 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  819694:	defffb04 	addi	sp,sp,-20
  819698:	df000415 	stw	fp,16(sp)
  81969c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8196a0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8196a4:	0005303a 	rdctl	r2,status
  8196a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8196ac:	e0fffd17 	ldw	r3,-12(fp)
  8196b0:	00bfff84 	movi	r2,-2
  8196b4:	1884703a 	and	r2,r3,r2
  8196b8:	1001703a 	wrctl	status,r2
  
  return context;
  8196bc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  8196c0:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  8196c4:	008020b4 	movhi	r2,130
  8196c8:	10958e04 	addi	r2,r2,22072
  8196cc:	10800017 	ldw	r2,0(r2)
  8196d0:	10800b0b 	ldhu	r2,44(r2)
  8196d4:	e0bfff0d 	sth	r2,-4(fp)
  8196d8:	e0bffe17 	ldw	r2,-8(fp)
  8196dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8196e0:	e0bffc17 	ldw	r2,-16(fp)
  8196e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  8196e8:	e0bfff0b 	ldhu	r2,-4(fp)
}
  8196ec:	e037883a 	mov	sp,fp
  8196f0:	df000017 	ldw	fp,0(sp)
  8196f4:	dec00104 	addi	sp,sp,4
  8196f8:	f800283a 	ret

008196fc <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  8196fc:	deffed04 	addi	sp,sp,-76
  819700:	dfc01215 	stw	ra,72(sp)
  819704:	df001115 	stw	fp,68(sp)
  819708:	df001104 	addi	fp,sp,68
  81970c:	e13ff915 	stw	r4,-28(fp)
  819710:	e1fffc15 	stw	r7,-16(fp)
  819714:	e17ffa0d 	sth	r5,-24(fp)
  819718:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  81971c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  819720:	e0bffc17 	ldw	r2,-16(fp)
  819724:	1004c03a 	cmpne	r2,r2,zero
  819728:	1000021e 	bne	r2,zero,819734 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  81972c:	e03fff15 	stw	zero,-4(fp)
  819730:	0000d606 	br	819a8c <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  819734:	e0bff917 	ldw	r2,-28(fp)
  819738:	1004c03a 	cmpne	r2,r2,zero
  81973c:	1000051e 	bne	r2,zero,819754 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  819740:	e0fffc17 	ldw	r3,-16(fp)
  819744:	00801b84 	movi	r2,110
  819748:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81974c:	e03fff15 	stw	zero,-4(fp)
  819750:	0000ce06 	br	819a8c <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  819754:	e0bff917 	ldw	r2,-28(fp)
  819758:	10800003 	ldbu	r2,0(r2)
  81975c:	10803fcc 	andi	r2,r2,255
  819760:	10800160 	cmpeqi	r2,r2,5
  819764:	1000051e 	bne	r2,zero,81977c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  819768:	e0fffc17 	ldw	r3,-16(fp)
  81976c:	00800044 	movi	r2,1
  819770:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  819774:	e03fff15 	stw	zero,-4(fp)
  819778:	0000c406 	br	819a8c <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81977c:	0005303a 	rdctl	r2,status
  819780:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819784:	e0fff417 	ldw	r3,-48(fp)
  819788:	00bfff84 	movi	r2,-2
  81978c:	1884703a 	and	r2,r3,r2
  819790:	1001703a 	wrctl	status,r2
  
  return context;
  819794:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  819798:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  81979c:	e0bffb03 	ldbu	r2,-20(fp)
  8197a0:	e0bffe15 	stw	r2,-8(fp)
  8197a4:	e0fffe17 	ldw	r3,-8(fp)
  8197a8:	1805003a 	cmpeq	r2,r3,zero
  8197ac:	1000041e 	bne	r2,zero,8197c0 <OSFlagPost+0xc4>
  8197b0:	e0fffe17 	ldw	r3,-8(fp)
  8197b4:	18800060 	cmpeqi	r2,r3,1
  8197b8:	10000b1e 	bne	r2,zero,8197e8 <OSFlagPost+0xec>
  8197bc:	00001206 	br	819808 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  8197c0:	e0bff917 	ldw	r2,-28(fp)
  8197c4:	1080020b 	ldhu	r2,8(r2)
  8197c8:	1007883a 	mov	r3,r2
  8197cc:	e0bffa0b 	ldhu	r2,-24(fp)
  8197d0:	0084303a 	nor	r2,zero,r2
  8197d4:	1884703a 	and	r2,r3,r2
  8197d8:	1007883a 	mov	r3,r2
  8197dc:	e0bff917 	ldw	r2,-28(fp)
  8197e0:	10c0020d 	sth	r3,8(r2)
             break;
  8197e4:	00001106 	br	81982c <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  8197e8:	e0bff917 	ldw	r2,-28(fp)
  8197ec:	10c0020b 	ldhu	r3,8(r2)
  8197f0:	e0bffa0b 	ldhu	r2,-24(fp)
  8197f4:	1884b03a 	or	r2,r3,r2
  8197f8:	1007883a 	mov	r3,r2
  8197fc:	e0bff917 	ldw	r2,-28(fp)
  819800:	10c0020d 	sth	r3,8(r2)
             break;
  819804:	00000906 	br	81982c <OSFlagPost+0x130>
  819808:	e0bff517 	ldw	r2,-44(fp)
  81980c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819810:	e0bff317 	ldw	r2,-52(fp)
  819814:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  819818:	e0fffc17 	ldw	r3,-16(fp)
  81981c:	00801c44 	movi	r2,113
  819820:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  819824:	e03fff15 	stw	zero,-4(fp)
  819828:	00009806 	br	819a8c <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  81982c:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  819830:	e0bff917 	ldw	r2,-28(fp)
  819834:	10800117 	ldw	r2,4(r2)
  819838:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  81983c:	00007506 	br	819a14 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  819840:	e0bff817 	ldw	r2,-32(fp)
  819844:	10800483 	ldbu	r2,18(r2)
  819848:	10803fcc 	andi	r2,r2,255
  81984c:	e0bffd15 	stw	r2,-12(fp)
  819850:	e0fffd17 	ldw	r3,-12(fp)
  819854:	18800060 	cmpeqi	r2,r3,1
  819858:	10004d1e 	bne	r2,zero,819990 <OSFlagPost+0x294>
  81985c:	e0fffd17 	ldw	r3,-12(fp)
  819860:	18800088 	cmpgei	r2,r3,2
  819864:	1000041e 	bne	r2,zero,819878 <OSFlagPost+0x17c>
  819868:	e0fffd17 	ldw	r3,-12(fp)
  81986c:	1805003a 	cmpeq	r2,r3,zero
  819870:	1000301e 	bne	r2,zero,819934 <OSFlagPost+0x238>
  819874:	00005b06 	br	8199e4 <OSFlagPost+0x2e8>
  819878:	e0fffd17 	ldw	r3,-12(fp)
  81987c:	188000a0 	cmpeqi	r2,r3,2
  819880:	1000041e 	bne	r2,zero,819894 <OSFlagPost+0x198>
  819884:	e0fffd17 	ldw	r3,-12(fp)
  819888:	188000e0 	cmpeqi	r2,r3,3
  81988c:	1000161e 	bne	r2,zero,8198e8 <OSFlagPost+0x1ec>
  819890:	00005406 	br	8199e4 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  819894:	e0bff917 	ldw	r2,-28(fp)
  819898:	10c0020b 	ldhu	r3,8(r2)
  81989c:	e0bff817 	ldw	r2,-32(fp)
  8198a0:	1080040b 	ldhu	r2,16(r2)
  8198a4:	1884703a 	and	r2,r3,r2
  8198a8:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  8198ac:	e0bff817 	ldw	r2,-32(fp)
  8198b0:	1080040b 	ldhu	r2,16(r2)
  8198b4:	10ffffcc 	andi	r3,r2,65535
  8198b8:	e0bff68b 	ldhu	r2,-38(fp)
  8198bc:	1880521e 	bne	r3,r2,819a08 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8198c0:	e17ff68b 	ldhu	r5,-38(fp)
  8198c4:	e13ff817 	ldw	r4,-32(fp)
  8198c8:	0819e200 	call	819e20 <OS_FlagTaskRdy>
  8198cc:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  8198d0:	e0bff603 	ldbu	r2,-40(fp)
  8198d4:	10800058 	cmpnei	r2,r2,1
  8198d8:	10004b1e 	bne	r2,zero,819a08 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8198dc:	00800044 	movi	r2,1
  8198e0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  8198e4:	00004806 	br	819a08 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8198e8:	e0bff917 	ldw	r2,-28(fp)
  8198ec:	10c0020b 	ldhu	r3,8(r2)
  8198f0:	e0bff817 	ldw	r2,-32(fp)
  8198f4:	1080040b 	ldhu	r2,16(r2)
  8198f8:	1884703a 	and	r2,r3,r2
  8198fc:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  819900:	e0bff68b 	ldhu	r2,-38(fp)
  819904:	1005003a 	cmpeq	r2,r2,zero
  819908:	10003f1e 	bne	r2,zero,819a08 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  81990c:	e17ff68b 	ldhu	r5,-38(fp)
  819910:	e13ff817 	ldw	r4,-32(fp)
  819914:	0819e200 	call	819e20 <OS_FlagTaskRdy>
  819918:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  81991c:	e0bff603 	ldbu	r2,-40(fp)
  819920:	10800058 	cmpnei	r2,r2,1
  819924:	1000381e 	bne	r2,zero,819a08 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  819928:	00800044 	movi	r2,1
  81992c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  819930:	00003506 	br	819a08 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  819934:	e0bff917 	ldw	r2,-28(fp)
  819938:	1080020b 	ldhu	r2,8(r2)
  81993c:	0084303a 	nor	r2,zero,r2
  819940:	1007883a 	mov	r3,r2
  819944:	e0bff817 	ldw	r2,-32(fp)
  819948:	1080040b 	ldhu	r2,16(r2)
  81994c:	1884703a 	and	r2,r3,r2
  819950:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  819954:	e0bff817 	ldw	r2,-32(fp)
  819958:	1080040b 	ldhu	r2,16(r2)
  81995c:	10ffffcc 	andi	r3,r2,65535
  819960:	e0bff68b 	ldhu	r2,-38(fp)
  819964:	1880281e 	bne	r3,r2,819a08 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  819968:	e17ff68b 	ldhu	r5,-38(fp)
  81996c:	e13ff817 	ldw	r4,-32(fp)
  819970:	0819e200 	call	819e20 <OS_FlagTaskRdy>
  819974:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  819978:	e0bff603 	ldbu	r2,-40(fp)
  81997c:	10800058 	cmpnei	r2,r2,1
  819980:	1000211e 	bne	r2,zero,819a08 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  819984:	00800044 	movi	r2,1
  819988:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  81998c:	00001e06 	br	819a08 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  819990:	e0bff917 	ldw	r2,-28(fp)
  819994:	1080020b 	ldhu	r2,8(r2)
  819998:	0084303a 	nor	r2,zero,r2
  81999c:	1007883a 	mov	r3,r2
  8199a0:	e0bff817 	ldw	r2,-32(fp)
  8199a4:	1080040b 	ldhu	r2,16(r2)
  8199a8:	1884703a 	and	r2,r3,r2
  8199ac:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  8199b0:	e0bff68b 	ldhu	r2,-38(fp)
  8199b4:	1005003a 	cmpeq	r2,r2,zero
  8199b8:	1000131e 	bne	r2,zero,819a08 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8199bc:	e17ff68b 	ldhu	r5,-38(fp)
  8199c0:	e13ff817 	ldw	r4,-32(fp)
  8199c4:	0819e200 	call	819e20 <OS_FlagTaskRdy>
  8199c8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  8199cc:	e0bff603 	ldbu	r2,-40(fp)
  8199d0:	10800058 	cmpnei	r2,r2,1
  8199d4:	10000c1e 	bne	r2,zero,819a08 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8199d8:	00800044 	movi	r2,1
  8199dc:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  8199e0:	00000906 	br	819a08 <OSFlagPost+0x30c>
  8199e4:	e0bff517 	ldw	r2,-44(fp)
  8199e8:	e0bff215 	stw	r2,-56(fp)
  8199ec:	e0bff217 	ldw	r2,-56(fp)
  8199f0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  8199f4:	e0fffc17 	ldw	r3,-16(fp)
  8199f8:	00801bc4 	movi	r2,111
  8199fc:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  819a00:	e03fff15 	stw	zero,-4(fp)
  819a04:	00002106 	br	819a8c <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  819a08:	e0bff817 	ldw	r2,-32(fp)
  819a0c:	10800017 	ldw	r2,0(r2)
  819a10:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  819a14:	e0bff817 	ldw	r2,-32(fp)
  819a18:	1004c03a 	cmpne	r2,r2,zero
  819a1c:	103f881e 	bne	r2,zero,819840 <OSFlagPost+0x144>
  819a20:	e0bff517 	ldw	r2,-44(fp)
  819a24:	e0bff115 	stw	r2,-60(fp)
  819a28:	e0bff117 	ldw	r2,-60(fp)
  819a2c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  819a30:	e0bff783 	ldbu	r2,-34(fp)
  819a34:	10800058 	cmpnei	r2,r2,1
  819a38:	1000011e 	bne	r2,zero,819a40 <OSFlagPost+0x344>
        OS_Sched();
  819a3c:	0817e2c0 	call	817e2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819a40:	0005303a 	rdctl	r2,status
  819a44:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819a48:	e0fff017 	ldw	r3,-64(fp)
  819a4c:	00bfff84 	movi	r2,-2
  819a50:	1884703a 	and	r2,r3,r2
  819a54:	1001703a 	wrctl	status,r2
  
  return context;
  819a58:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  819a5c:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  819a60:	e0bff917 	ldw	r2,-28(fp)
  819a64:	1080020b 	ldhu	r2,8(r2)
  819a68:	e0bff70d 	sth	r2,-36(fp)
  819a6c:	e0bff517 	ldw	r2,-44(fp)
  819a70:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819a74:	e0bfef17 	ldw	r2,-68(fp)
  819a78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  819a7c:	e0bffc17 	ldw	r2,-16(fp)
  819a80:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  819a84:	e0bff70b 	ldhu	r2,-36(fp)
  819a88:	e0bfff15 	stw	r2,-4(fp)
  819a8c:	e0bfff17 	ldw	r2,-4(fp)
}
  819a90:	e037883a 	mov	sp,fp
  819a94:	dfc00117 	ldw	ra,4(sp)
  819a98:	df000017 	ldw	fp,0(sp)
  819a9c:	dec00204 	addi	sp,sp,8
  819aa0:	f800283a 	ret

00819aa4 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  819aa4:	defff804 	addi	sp,sp,-32
  819aa8:	df000715 	stw	fp,28(sp)
  819aac:	df000704 	addi	fp,sp,28
  819ab0:	e13ffd15 	stw	r4,-12(fp)
  819ab4:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  819ab8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  819abc:	e0bffe17 	ldw	r2,-8(fp)
  819ac0:	1004c03a 	cmpne	r2,r2,zero
  819ac4:	1000021e 	bne	r2,zero,819ad0 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  819ac8:	e03fff15 	stw	zero,-4(fp)
  819acc:	00002506 	br	819b64 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  819ad0:	e0bffd17 	ldw	r2,-12(fp)
  819ad4:	1004c03a 	cmpne	r2,r2,zero
  819ad8:	1000051e 	bne	r2,zero,819af0 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  819adc:	e0fffe17 	ldw	r3,-8(fp)
  819ae0:	00801b84 	movi	r2,110
  819ae4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  819ae8:	e03fff15 	stw	zero,-4(fp)
  819aec:	00001d06 	br	819b64 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  819af0:	e0bffd17 	ldw	r2,-12(fp)
  819af4:	10800003 	ldbu	r2,0(r2)
  819af8:	10803fcc 	andi	r2,r2,255
  819afc:	10800160 	cmpeqi	r2,r2,5
  819b00:	1000051e 	bne	r2,zero,819b18 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  819b04:	e0fffe17 	ldw	r3,-8(fp)
  819b08:	00800044 	movi	r2,1
  819b0c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  819b10:	e03fff15 	stw	zero,-4(fp)
  819b14:	00001306 	br	819b64 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  819b18:	0005303a 	rdctl	r2,status
  819b1c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819b20:	e0fffa17 	ldw	r3,-24(fp)
  819b24:	00bfff84 	movi	r2,-2
  819b28:	1884703a 	and	r2,r3,r2
  819b2c:	1001703a 	wrctl	status,r2
  
  return context;
  819b30:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  819b34:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  819b38:	e0bffd17 	ldw	r2,-12(fp)
  819b3c:	1080020b 	ldhu	r2,8(r2)
  819b40:	e0bffc0d 	sth	r2,-16(fp)
  819b44:	e0bffb17 	ldw	r2,-20(fp)
  819b48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819b4c:	e0bff917 	ldw	r2,-28(fp)
  819b50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  819b54:	e0bffe17 	ldw	r2,-8(fp)
  819b58:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  819b5c:	e0bffc0b 	ldhu	r2,-16(fp)
  819b60:	e0bfff15 	stw	r2,-4(fp)
  819b64:	e0bfff17 	ldw	r2,-4(fp)
}
  819b68:	e037883a 	mov	sp,fp
  819b6c:	df000017 	ldw	fp,0(sp)
  819b70:	dec00104 	addi	sp,sp,4
  819b74:	f800283a 	ret

00819b78 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  819b78:	defff804 	addi	sp,sp,-32
  819b7c:	df000715 	stw	fp,28(sp)
  819b80:	df000704 	addi	fp,sp,28
  819b84:	e13ffb15 	stw	r4,-20(fp)
  819b88:	e17ffc15 	stw	r5,-16(fp)
  819b8c:	e0800117 	ldw	r2,4(fp)
  819b90:	e1bffd0d 	sth	r6,-12(fp)
  819b94:	e1fffe05 	stb	r7,-8(fp)
  819b98:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  819b9c:	008020b4 	movhi	r2,130
  819ba0:	10958e04 	addi	r2,r2,22072
  819ba4:	10c00017 	ldw	r3,0(r2)
  819ba8:	008020b4 	movhi	r2,130
  819bac:	10958e04 	addi	r2,r2,22072
  819bb0:	10800017 	ldw	r2,0(r2)
  819bb4:	10800c03 	ldbu	r2,48(r2)
  819bb8:	10800814 	ori	r2,r2,32
  819bbc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  819bc0:	008020b4 	movhi	r2,130
  819bc4:	10958e04 	addi	r2,r2,22072
  819bc8:	10800017 	ldw	r2,0(r2)
  819bcc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  819bd0:	008020b4 	movhi	r2,130
  819bd4:	10958e04 	addi	r2,r2,22072
  819bd8:	10c00017 	ldw	r3,0(r2)
  819bdc:	e0bfff0b 	ldhu	r2,-4(fp)
  819be0:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  819be4:	008020b4 	movhi	r2,130
  819be8:	10958e04 	addi	r2,r2,22072
  819bec:	10c00017 	ldw	r3,0(r2)
  819bf0:	e0bffc17 	ldw	r2,-16(fp)
  819bf4:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  819bf8:	e0fffc17 	ldw	r3,-16(fp)
  819bfc:	e0bffd0b 	ldhu	r2,-12(fp)
  819c00:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  819c04:	e0fffc17 	ldw	r3,-16(fp)
  819c08:	e0bffe03 	ldbu	r2,-8(fp)
  819c0c:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  819c10:	008020b4 	movhi	r2,130
  819c14:	10958e04 	addi	r2,r2,22072
  819c18:	10c00017 	ldw	r3,0(r2)
  819c1c:	e0bffc17 	ldw	r2,-16(fp)
  819c20:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  819c24:	e0bffb17 	ldw	r2,-20(fp)
  819c28:	10c00117 	ldw	r3,4(r2)
  819c2c:	e0bffc17 	ldw	r2,-16(fp)
  819c30:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  819c34:	e0bffc17 	ldw	r2,-16(fp)
  819c38:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  819c3c:	e0fffc17 	ldw	r3,-16(fp)
  819c40:	e0bffb17 	ldw	r2,-20(fp)
  819c44:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  819c48:	e0bffb17 	ldw	r2,-20(fp)
  819c4c:	10800117 	ldw	r2,4(r2)
  819c50:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  819c54:	e0bffa17 	ldw	r2,-24(fp)
  819c58:	1005003a 	cmpeq	r2,r2,zero
  819c5c:	1000031e 	bne	r2,zero,819c6c <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  819c60:	e0fffa17 	ldw	r3,-24(fp)
  819c64:	e0bffc17 	ldw	r2,-16(fp)
  819c68:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  819c6c:	e0fffb17 	ldw	r3,-20(fp)
  819c70:	e0bffc17 	ldw	r2,-16(fp)
  819c74:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  819c78:	008020b4 	movhi	r2,130
  819c7c:	10958e04 	addi	r2,r2,22072
  819c80:	10800017 	ldw	r2,0(r2)
  819c84:	10800d03 	ldbu	r2,52(r2)
  819c88:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  819c8c:	e13ff903 	ldbu	r4,-28(fp)
  819c90:	e0fff903 	ldbu	r3,-28(fp)
  819c94:	008020b4 	movhi	r2,130
  819c98:	10958b44 	addi	r2,r2,22061
  819c9c:	10c5883a 	add	r2,r2,r3
  819ca0:	10800003 	ldbu	r2,0(r2)
  819ca4:	1007883a 	mov	r3,r2
  819ca8:	008020b4 	movhi	r2,130
  819cac:	10958e04 	addi	r2,r2,22072
  819cb0:	10800017 	ldw	r2,0(r2)
  819cb4:	10800d43 	ldbu	r2,53(r2)
  819cb8:	0084303a 	nor	r2,zero,r2
  819cbc:	1884703a 	and	r2,r3,r2
  819cc0:	1007883a 	mov	r3,r2
  819cc4:	008020b4 	movhi	r2,130
  819cc8:	10958b44 	addi	r2,r2,22061
  819ccc:	1105883a 	add	r2,r2,r4
  819cd0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  819cd4:	e0fff903 	ldbu	r3,-28(fp)
  819cd8:	008020b4 	movhi	r2,130
  819cdc:	10958b44 	addi	r2,r2,22061
  819ce0:	10c5883a 	add	r2,r2,r3
  819ce4:	10800003 	ldbu	r2,0(r2)
  819ce8:	10803fcc 	andi	r2,r2,255
  819cec:	1004c03a 	cmpne	r2,r2,zero
  819cf0:	10000e1e 	bne	r2,zero,819d2c <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  819cf4:	008020b4 	movhi	r2,130
  819cf8:	10958e04 	addi	r2,r2,22072
  819cfc:	10800017 	ldw	r2,0(r2)
  819d00:	10800d83 	ldbu	r2,54(r2)
  819d04:	0084303a 	nor	r2,zero,r2
  819d08:	1007883a 	mov	r3,r2
  819d0c:	008020b4 	movhi	r2,130
  819d10:	10958b04 	addi	r2,r2,22060
  819d14:	10800003 	ldbu	r2,0(r2)
  819d18:	1884703a 	and	r2,r3,r2
  819d1c:	1007883a 	mov	r3,r2
  819d20:	008020b4 	movhi	r2,130
  819d24:	10958b04 	addi	r2,r2,22060
  819d28:	10c00005 	stb	r3,0(r2)
    }
}
  819d2c:	e037883a 	mov	sp,fp
  819d30:	df000017 	ldw	fp,0(sp)
  819d34:	dec00104 	addi	sp,sp,4
  819d38:	f800283a 	ret

00819d3c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  819d3c:	defffb04 	addi	sp,sp,-20
  819d40:	dfc00415 	stw	ra,16(sp)
  819d44:	df000315 	stw	fp,12(sp)
  819d48:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  819d4c:	010020b4 	movhi	r4,130
  819d50:	211da004 	addi	r4,r4,30336
  819d54:	0140dc04 	movi	r5,880
  819d58:	0817d6c0 	call	817d6c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  819d5c:	008020b4 	movhi	r2,130
  819d60:	109da004 	addi	r2,r2,30336
  819d64:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  819d68:	008020b4 	movhi	r2,130
  819d6c:	109dab04 	addi	r2,r2,30380
  819d70:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  819d74:	e03fff0d 	sth	zero,-4(fp)
  819d78:	00001306 	br	819dc8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  819d7c:	e0bffe17 	ldw	r2,-8(fp)
  819d80:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  819d84:	e0fffe17 	ldw	r3,-8(fp)
  819d88:	e0bffd17 	ldw	r2,-12(fp)
  819d8c:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  819d90:	e0fffe17 	ldw	r3,-8(fp)
  819d94:	00800fc4 	movi	r2,63
  819d98:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  819d9c:	e0bffe17 	ldw	r2,-8(fp)
  819da0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  819da4:	e0bffe17 	ldw	r2,-8(fp)
  819da8:	10800b04 	addi	r2,r2,44
  819dac:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  819db0:	e0bffd17 	ldw	r2,-12(fp)
  819db4:	10800b04 	addi	r2,r2,44
  819db8:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  819dbc:	e0bfff0b 	ldhu	r2,-4(fp)
  819dc0:	10800044 	addi	r2,r2,1
  819dc4:	e0bfff0d 	sth	r2,-4(fp)
  819dc8:	e0bfff0b 	ldhu	r2,-4(fp)
  819dcc:	108004f0 	cmpltui	r2,r2,19
  819dd0:	103fea1e 	bne	r2,zero,819d7c <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  819dd4:	e0bffe17 	ldw	r2,-8(fp)
  819dd8:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  819ddc:	e0bffe17 	ldw	r2,-8(fp)
  819de0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  819de4:	e0fffe17 	ldw	r3,-8(fp)
  819de8:	00800fc4 	movi	r2,63
  819dec:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  819df0:	e0bffe17 	ldw	r2,-8(fp)
  819df4:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  819df8:	00c020b4 	movhi	r3,130
  819dfc:	18d59004 	addi	r3,r3,22080
  819e00:	008020b4 	movhi	r2,130
  819e04:	109da004 	addi	r2,r2,30336
  819e08:	18800015 	stw	r2,0(r3)
#endif
}
  819e0c:	e037883a 	mov	sp,fp
  819e10:	dfc00117 	ldw	ra,4(sp)
  819e14:	df000017 	ldw	fp,0(sp)
  819e18:	dec00204 	addi	sp,sp,8
  819e1c:	f800283a 	ret

00819e20 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  819e20:	defffa04 	addi	sp,sp,-24
  819e24:	dfc00515 	stw	ra,20(sp)
  819e28:	df000415 	stw	fp,16(sp)
  819e2c:	df000404 	addi	fp,sp,16
  819e30:	e13ffe15 	stw	r4,-8(fp)
  819e34:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  819e38:	e0bffe17 	ldw	r2,-8(fp)
  819e3c:	10800217 	ldw	r2,8(r2)
  819e40:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  819e44:	e0bffd17 	ldw	r2,-12(fp)
  819e48:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  819e4c:	e0fffd17 	ldw	r3,-12(fp)
  819e50:	e0bfff0b 	ldhu	r2,-4(fp)
  819e54:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  819e58:	e0bffd17 	ldw	r2,-12(fp)
  819e5c:	10c00c03 	ldbu	r3,48(r2)
  819e60:	00bff7c4 	movi	r2,-33
  819e64:	1884703a 	and	r2,r3,r2
  819e68:	1007883a 	mov	r3,r2
  819e6c:	e0bffd17 	ldw	r2,-12(fp)
  819e70:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  819e74:	e0bffd17 	ldw	r2,-12(fp)
  819e78:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  819e7c:	e0bffd17 	ldw	r2,-12(fp)
  819e80:	10800c03 	ldbu	r2,48(r2)
  819e84:	10803fcc 	andi	r2,r2,255
  819e88:	1004c03a 	cmpne	r2,r2,zero
  819e8c:	10001f1e 	bne	r2,zero,819f0c <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  819e90:	e0bffd17 	ldw	r2,-12(fp)
  819e94:	10c00d83 	ldbu	r3,54(r2)
  819e98:	008020b4 	movhi	r2,130
  819e9c:	10958b04 	addi	r2,r2,22060
  819ea0:	10800003 	ldbu	r2,0(r2)
  819ea4:	1884b03a 	or	r2,r3,r2
  819ea8:	1007883a 	mov	r3,r2
  819eac:	008020b4 	movhi	r2,130
  819eb0:	10958b04 	addi	r2,r2,22060
  819eb4:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  819eb8:	e0bffd17 	ldw	r2,-12(fp)
  819ebc:	10800d03 	ldbu	r2,52(r2)
  819ec0:	11003fcc 	andi	r4,r2,255
  819ec4:	e0bffd17 	ldw	r2,-12(fp)
  819ec8:	10800d03 	ldbu	r2,52(r2)
  819ecc:	10c03fcc 	andi	r3,r2,255
  819ed0:	008020b4 	movhi	r2,130
  819ed4:	10958b44 	addi	r2,r2,22061
  819ed8:	10c5883a 	add	r2,r2,r3
  819edc:	10c00003 	ldbu	r3,0(r2)
  819ee0:	e0bffd17 	ldw	r2,-12(fp)
  819ee4:	10800d43 	ldbu	r2,53(r2)
  819ee8:	1884b03a 	or	r2,r3,r2
  819eec:	1007883a 	mov	r3,r2
  819ef0:	008020b4 	movhi	r2,130
  819ef4:	10958b44 	addi	r2,r2,22061
  819ef8:	1105883a 	add	r2,r2,r4
  819efc:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  819f00:	00800044 	movi	r2,1
  819f04:	e0bffc05 	stb	r2,-16(fp)
  819f08:	00000106 	br	819f10 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  819f0c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  819f10:	e13ffe17 	ldw	r4,-8(fp)
  819f14:	0819f300 	call	819f30 <OS_FlagUnlink>
    return (sched);
  819f18:	e0bffc03 	ldbu	r2,-16(fp)
}
  819f1c:	e037883a 	mov	sp,fp
  819f20:	dfc00117 	ldw	ra,4(sp)
  819f24:	df000017 	ldw	fp,0(sp)
  819f28:	dec00204 	addi	sp,sp,8
  819f2c:	f800283a 	ret

00819f30 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  819f30:	defffa04 	addi	sp,sp,-24
  819f34:	df000515 	stw	fp,20(sp)
  819f38:	df000504 	addi	fp,sp,20
  819f3c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  819f40:	e0bfff17 	ldw	r2,-4(fp)
  819f44:	10800117 	ldw	r2,4(r2)
  819f48:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  819f4c:	e0bfff17 	ldw	r2,-4(fp)
  819f50:	10800017 	ldw	r2,0(r2)
  819f54:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  819f58:	e0bffc17 	ldw	r2,-16(fp)
  819f5c:	1004c03a 	cmpne	r2,r2,zero
  819f60:	10000c1e 	bne	r2,zero,819f94 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  819f64:	e0bfff17 	ldw	r2,-4(fp)
  819f68:	10800317 	ldw	r2,12(r2)
  819f6c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  819f70:	e0fffd17 	ldw	r3,-12(fp)
  819f74:	e0bffb17 	ldw	r2,-20(fp)
  819f78:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  819f7c:	e0bffb17 	ldw	r2,-20(fp)
  819f80:	1005003a 	cmpeq	r2,r2,zero
  819f84:	10000c1e 	bne	r2,zero,819fb8 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  819f88:	e0bffb17 	ldw	r2,-20(fp)
  819f8c:	10000115 	stw	zero,4(r2)
  819f90:	00000906 	br	819fb8 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  819f94:	e0fffc17 	ldw	r3,-16(fp)
  819f98:	e0bffb17 	ldw	r2,-20(fp)
  819f9c:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  819fa0:	e0bffb17 	ldw	r2,-20(fp)
  819fa4:	1005003a 	cmpeq	r2,r2,zero
  819fa8:	1000031e 	bne	r2,zero,819fb8 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  819fac:	e0fffb17 	ldw	r3,-20(fp)
  819fb0:	e0bffc17 	ldw	r2,-16(fp)
  819fb4:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  819fb8:	e0bfff17 	ldw	r2,-4(fp)
  819fbc:	10800217 	ldw	r2,8(r2)
  819fc0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  819fc4:	e0bffe17 	ldw	r2,-8(fp)
  819fc8:	10000a15 	stw	zero,40(r2)
#endif
}
  819fcc:	e037883a 	mov	sp,fp
  819fd0:	df000017 	ldw	fp,0(sp)
  819fd4:	dec00104 	addi	sp,sp,4
  819fd8:	f800283a 	ret

00819fdc <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  819fdc:	defff304 	addi	sp,sp,-52
  819fe0:	df000c15 	stw	fp,48(sp)
  819fe4:	df000c04 	addi	fp,sp,48
  819fe8:	e13ffb15 	stw	r4,-20(fp)
  819fec:	e17ffc15 	stw	r5,-16(fp)
  819ff0:	e1bffd15 	stw	r6,-12(fp)
  819ff4:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  819ff8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  819ffc:	e0bffe17 	ldw	r2,-8(fp)
  81a000:	1004c03a 	cmpne	r2,r2,zero
  81a004:	1000021e 	bne	r2,zero,81a010 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  81a008:	e03fff15 	stw	zero,-4(fp)
  81a00c:	00007506 	br	81a1e4 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  81a010:	e0bffb17 	ldw	r2,-20(fp)
  81a014:	1004c03a 	cmpne	r2,r2,zero
  81a018:	1000051e 	bne	r2,zero,81a030 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  81a01c:	e0fffe17 	ldw	r3,-8(fp)
  81a020:	00801884 	movi	r2,98
  81a024:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81a028:	e03fff15 	stw	zero,-4(fp)
  81a02c:	00006d06 	br	81a1e4 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  81a030:	e0bffb17 	ldw	r2,-20(fp)
  81a034:	108000cc 	andi	r2,r2,3
  81a038:	1005003a 	cmpeq	r2,r2,zero
  81a03c:	1000051e 	bne	r2,zero,81a054 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  81a040:	e0fffe17 	ldw	r3,-8(fp)
  81a044:	00801884 	movi	r2,98
  81a048:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81a04c:	e03fff15 	stw	zero,-4(fp)
  81a050:	00006406 	br	81a1e4 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  81a054:	e0bffc17 	ldw	r2,-16(fp)
  81a058:	108000a8 	cmpgeui	r2,r2,2
  81a05c:	1000051e 	bne	r2,zero,81a074 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  81a060:	e0fffe17 	ldw	r3,-8(fp)
  81a064:	008016c4 	movi	r2,91
  81a068:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81a06c:	e03fff15 	stw	zero,-4(fp)
  81a070:	00005c06 	br	81a1e4 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  81a074:	e0bffd17 	ldw	r2,-12(fp)
  81a078:	10800128 	cmpgeui	r2,r2,4
  81a07c:	1000051e 	bne	r2,zero,81a094 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  81a080:	e0fffe17 	ldw	r3,-8(fp)
  81a084:	00801704 	movi	r2,92
  81a088:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81a08c:	e03fff15 	stw	zero,-4(fp)
  81a090:	00005406 	br	81a1e4 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a094:	0005303a 	rdctl	r2,status
  81a098:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a09c:	e0fff517 	ldw	r3,-44(fp)
  81a0a0:	00bfff84 	movi	r2,-2
  81a0a4:	1884703a 	and	r2,r3,r2
  81a0a8:	1001703a 	wrctl	status,r2
  
  return context;
  81a0ac:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81a0b0:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  81a0b4:	008020b4 	movhi	r2,130
  81a0b8:	10958804 	addi	r2,r2,22048
  81a0bc:	10800017 	ldw	r2,0(r2)
  81a0c0:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  81a0c4:	008020b4 	movhi	r2,130
  81a0c8:	10958804 	addi	r2,r2,22048
  81a0cc:	10800017 	ldw	r2,0(r2)
  81a0d0:	1005003a 	cmpeq	r2,r2,zero
  81a0d4:	1000081e 	bne	r2,zero,81a0f8 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  81a0d8:	008020b4 	movhi	r2,130
  81a0dc:	10958804 	addi	r2,r2,22048
  81a0e0:	10800017 	ldw	r2,0(r2)
  81a0e4:	10800117 	ldw	r2,4(r2)
  81a0e8:	1007883a 	mov	r3,r2
  81a0ec:	008020b4 	movhi	r2,130
  81a0f0:	10958804 	addi	r2,r2,22048
  81a0f4:	10c00015 	stw	r3,0(r2)
  81a0f8:	e0bff617 	ldw	r2,-40(fp)
  81a0fc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a100:	e0bff417 	ldw	r2,-48(fp)
  81a104:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  81a108:	e0bffa17 	ldw	r2,-24(fp)
  81a10c:	1004c03a 	cmpne	r2,r2,zero
  81a110:	1000051e 	bne	r2,zero,81a128 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  81a114:	e0fffe17 	ldw	r3,-8(fp)
  81a118:	00801684 	movi	r2,90
  81a11c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81a120:	e03fff15 	stw	zero,-4(fp)
  81a124:	00002f06 	br	81a1e4 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  81a128:	e0bffb17 	ldw	r2,-20(fp)
  81a12c:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  81a130:	e0bffb17 	ldw	r2,-20(fp)
  81a134:	1007883a 	mov	r3,r2
  81a138:	e0bffd17 	ldw	r2,-12(fp)
  81a13c:	1885883a 	add	r2,r3,r2
  81a140:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  81a144:	e03ff715 	stw	zero,-36(fp)
  81a148:	00000d06 	br	81a180 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  81a14c:	e0fff817 	ldw	r3,-32(fp)
  81a150:	e0bff917 	ldw	r2,-28(fp)
  81a154:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  81a158:	e0bff917 	ldw	r2,-28(fp)
  81a15c:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  81a160:	e0bff917 	ldw	r2,-28(fp)
  81a164:	1007883a 	mov	r3,r2
  81a168:	e0bffd17 	ldw	r2,-12(fp)
  81a16c:	1885883a 	add	r2,r3,r2
  81a170:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  81a174:	e0bff717 	ldw	r2,-36(fp)
  81a178:	10800044 	addi	r2,r2,1
  81a17c:	e0bff715 	stw	r2,-36(fp)
  81a180:	e0bffc17 	ldw	r2,-16(fp)
  81a184:	10ffffc4 	addi	r3,r2,-1
  81a188:	e0bff717 	ldw	r2,-36(fp)
  81a18c:	10ffef36 	bltu	r2,r3,81a14c <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  81a190:	e0bff817 	ldw	r2,-32(fp)
  81a194:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  81a198:	e0fffa17 	ldw	r3,-24(fp)
  81a19c:	e0bffb17 	ldw	r2,-20(fp)
  81a1a0:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  81a1a4:	e0fffa17 	ldw	r3,-24(fp)
  81a1a8:	e0bffb17 	ldw	r2,-20(fp)
  81a1ac:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  81a1b0:	e0fffa17 	ldw	r3,-24(fp)
  81a1b4:	e0bffc17 	ldw	r2,-16(fp)
  81a1b8:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  81a1bc:	e0fffa17 	ldw	r3,-24(fp)
  81a1c0:	e0bffc17 	ldw	r2,-16(fp)
  81a1c4:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  81a1c8:	e0fffa17 	ldw	r3,-24(fp)
  81a1cc:	e0bffd17 	ldw	r2,-12(fp)
  81a1d0:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  81a1d4:	e0bffe17 	ldw	r2,-8(fp)
  81a1d8:	10000005 	stb	zero,0(r2)
    return (pmem);
  81a1dc:	e0bffa17 	ldw	r2,-24(fp)
  81a1e0:	e0bfff15 	stw	r2,-4(fp)
  81a1e4:	e0bfff17 	ldw	r2,-4(fp)
}
  81a1e8:	e037883a 	mov	sp,fp
  81a1ec:	df000017 	ldw	fp,0(sp)
  81a1f0:	dec00104 	addi	sp,sp,4
  81a1f4:	f800283a 	ret

0081a1f8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  81a1f8:	defff704 	addi	sp,sp,-36
  81a1fc:	df000815 	stw	fp,32(sp)
  81a200:	df000804 	addi	fp,sp,32
  81a204:	e13ffd15 	stw	r4,-12(fp)
  81a208:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81a20c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81a210:	e0bffe17 	ldw	r2,-8(fp)
  81a214:	1004c03a 	cmpne	r2,r2,zero
  81a218:	1000021e 	bne	r2,zero,81a224 <OSMemGet+0x2c>
        return ((void *)0);
  81a21c:	e03fff15 	stw	zero,-4(fp)
  81a220:	00003106 	br	81a2e8 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  81a224:	e0bffd17 	ldw	r2,-12(fp)
  81a228:	1004c03a 	cmpne	r2,r2,zero
  81a22c:	1000051e 	bne	r2,zero,81a244 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81a230:	e0fffe17 	ldw	r3,-8(fp)
  81a234:	00801804 	movi	r2,96
  81a238:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81a23c:	e03fff15 	stw	zero,-4(fp)
  81a240:	00002906 	br	81a2e8 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a244:	0005303a 	rdctl	r2,status
  81a248:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a24c:	e0fffa17 	ldw	r3,-24(fp)
  81a250:	00bfff84 	movi	r2,-2
  81a254:	1884703a 	and	r2,r3,r2
  81a258:	1001703a 	wrctl	status,r2
  
  return context;
  81a25c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81a260:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  81a264:	e0bffd17 	ldw	r2,-12(fp)
  81a268:	10800417 	ldw	r2,16(r2)
  81a26c:	1005003a 	cmpeq	r2,r2,zero
  81a270:	1000151e 	bne	r2,zero,81a2c8 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  81a274:	e0bffd17 	ldw	r2,-12(fp)
  81a278:	10800117 	ldw	r2,4(r2)
  81a27c:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  81a280:	e0bffc17 	ldw	r2,-16(fp)
  81a284:	10c00017 	ldw	r3,0(r2)
  81a288:	e0bffd17 	ldw	r2,-12(fp)
  81a28c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  81a290:	e0bffd17 	ldw	r2,-12(fp)
  81a294:	10800417 	ldw	r2,16(r2)
  81a298:	10ffffc4 	addi	r3,r2,-1
  81a29c:	e0bffd17 	ldw	r2,-12(fp)
  81a2a0:	10c00415 	stw	r3,16(r2)
  81a2a4:	e0bffb17 	ldw	r2,-20(fp)
  81a2a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a2ac:	e0bff917 	ldw	r2,-28(fp)
  81a2b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  81a2b4:	e0bffe17 	ldw	r2,-8(fp)
  81a2b8:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  81a2bc:	e0bffc17 	ldw	r2,-16(fp)
  81a2c0:	e0bfff15 	stw	r2,-4(fp)
  81a2c4:	00000806 	br	81a2e8 <OSMemGet+0xf0>
  81a2c8:	e0bffb17 	ldw	r2,-20(fp)
  81a2cc:	e0bff815 	stw	r2,-32(fp)
  81a2d0:	e0bff817 	ldw	r2,-32(fp)
  81a2d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  81a2d8:	e0fffe17 	ldw	r3,-8(fp)
  81a2dc:	00801744 	movi	r2,93
  81a2e0:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  81a2e4:	e03fff15 	stw	zero,-4(fp)
  81a2e8:	e0bfff17 	ldw	r2,-4(fp)
}
  81a2ec:	e037883a 	mov	sp,fp
  81a2f0:	df000017 	ldw	fp,0(sp)
  81a2f4:	dec00104 	addi	sp,sp,4
  81a2f8:	f800283a 	ret

0081a2fc <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  81a2fc:	defff604 	addi	sp,sp,-40
  81a300:	dfc00915 	stw	ra,36(sp)
  81a304:	df000815 	stw	fp,32(sp)
  81a308:	df000804 	addi	fp,sp,32
  81a30c:	e13ffc15 	stw	r4,-16(fp)
  81a310:	e17ffd15 	stw	r5,-12(fp)
  81a314:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81a318:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81a31c:	e0bffe17 	ldw	r2,-8(fp)
  81a320:	1004c03a 	cmpne	r2,r2,zero
  81a324:	1000021e 	bne	r2,zero,81a330 <OSMemNameGet+0x34>
        return (0);
  81a328:	e03fff15 	stw	zero,-4(fp)
  81a32c:	00003006 	br	81a3f0 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  81a330:	e0bffc17 	ldw	r2,-16(fp)
  81a334:	1004c03a 	cmpne	r2,r2,zero
  81a338:	1000051e 	bne	r2,zero,81a350 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81a33c:	e0fffe17 	ldw	r3,-8(fp)
  81a340:	00801804 	movi	r2,96
  81a344:	18800005 	stb	r2,0(r3)
        return (0);
  81a348:	e03fff15 	stw	zero,-4(fp)
  81a34c:	00002806 	br	81a3f0 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  81a350:	e0bffd17 	ldw	r2,-12(fp)
  81a354:	1004c03a 	cmpne	r2,r2,zero
  81a358:	1000051e 	bne	r2,zero,81a370 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  81a35c:	e0fffe17 	ldw	r3,-8(fp)
  81a360:	00800304 	movi	r2,12
  81a364:	18800005 	stb	r2,0(r3)
        return (0);
  81a368:	e03fff15 	stw	zero,-4(fp)
  81a36c:	00002006 	br	81a3f0 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81a370:	008020b4 	movhi	r2,130
  81a374:	10958d04 	addi	r2,r2,22068
  81a378:	10800003 	ldbu	r2,0(r2)
  81a37c:	10803fcc 	andi	r2,r2,255
  81a380:	1005003a 	cmpeq	r2,r2,zero
  81a384:	1000051e 	bne	r2,zero,81a39c <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  81a388:	e0fffe17 	ldw	r3,-8(fp)
  81a38c:	00800444 	movi	r2,17
  81a390:	18800005 	stb	r2,0(r3)
        return (0);
  81a394:	e03fff15 	stw	zero,-4(fp)
  81a398:	00001506 	br	81a3f0 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a39c:	0005303a 	rdctl	r2,status
  81a3a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a3a4:	e0fff917 	ldw	r3,-28(fp)
  81a3a8:	00bfff84 	movi	r2,-2
  81a3ac:	1884703a 	and	r2,r3,r2
  81a3b0:	1001703a 	wrctl	status,r2
  
  return context;
  81a3b4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81a3b8:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  81a3bc:	e0bffc17 	ldw	r2,-16(fp)
  81a3c0:	11400504 	addi	r5,r2,20
  81a3c4:	e13ffd17 	ldw	r4,-12(fp)
  81a3c8:	0817f700 	call	817f70 <OS_StrCopy>
  81a3cc:	e0bffb05 	stb	r2,-20(fp)
  81a3d0:	e0bffa17 	ldw	r2,-24(fp)
  81a3d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a3d8:	e0bff817 	ldw	r2,-32(fp)
  81a3dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81a3e0:	e0bffe17 	ldw	r2,-8(fp)
  81a3e4:	10000005 	stb	zero,0(r2)
    return (len);
  81a3e8:	e0bffb03 	ldbu	r2,-20(fp)
  81a3ec:	e0bfff15 	stw	r2,-4(fp)
  81a3f0:	e0bfff17 	ldw	r2,-4(fp)
}
  81a3f4:	e037883a 	mov	sp,fp
  81a3f8:	dfc00117 	ldw	ra,4(sp)
  81a3fc:	df000017 	ldw	fp,0(sp)
  81a400:	dec00204 	addi	sp,sp,8
  81a404:	f800283a 	ret

0081a408 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  81a408:	defff604 	addi	sp,sp,-40
  81a40c:	dfc00915 	stw	ra,36(sp)
  81a410:	df000815 	stw	fp,32(sp)
  81a414:	df000804 	addi	fp,sp,32
  81a418:	e13ffd15 	stw	r4,-12(fp)
  81a41c:	e17ffe15 	stw	r5,-8(fp)
  81a420:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81a424:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81a428:	e0bfff17 	ldw	r2,-4(fp)
  81a42c:	1005003a 	cmpeq	r2,r2,zero
  81a430:	1000381e 	bne	r2,zero,81a514 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  81a434:	e0bffd17 	ldw	r2,-12(fp)
  81a438:	1004c03a 	cmpne	r2,r2,zero
  81a43c:	1000041e 	bne	r2,zero,81a450 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  81a440:	e0ffff17 	ldw	r3,-4(fp)
  81a444:	00801804 	movi	r2,96
  81a448:	18800005 	stb	r2,0(r3)
        return;
  81a44c:	00003106 	br	81a514 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  81a450:	e0bffe17 	ldw	r2,-8(fp)
  81a454:	1004c03a 	cmpne	r2,r2,zero
  81a458:	1000041e 	bne	r2,zero,81a46c <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  81a45c:	e0ffff17 	ldw	r3,-4(fp)
  81a460:	00800304 	movi	r2,12
  81a464:	18800005 	stb	r2,0(r3)
        return;
  81a468:	00002a06 	br	81a514 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81a46c:	008020b4 	movhi	r2,130
  81a470:	10958d04 	addi	r2,r2,22068
  81a474:	10800003 	ldbu	r2,0(r2)
  81a478:	10803fcc 	andi	r2,r2,255
  81a47c:	1005003a 	cmpeq	r2,r2,zero
  81a480:	1000041e 	bne	r2,zero,81a494 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  81a484:	e0ffff17 	ldw	r3,-4(fp)
  81a488:	00800484 	movi	r2,18
  81a48c:	18800005 	stb	r2,0(r3)
        return;
  81a490:	00002006 	br	81a514 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a494:	0005303a 	rdctl	r2,status
  81a498:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a49c:	e0fffa17 	ldw	r3,-24(fp)
  81a4a0:	00bfff84 	movi	r2,-2
  81a4a4:	1884703a 	and	r2,r3,r2
  81a4a8:	1001703a 	wrctl	status,r2
  
  return context;
  81a4ac:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81a4b0:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  81a4b4:	e13ffe17 	ldw	r4,-8(fp)
  81a4b8:	0817ff00 	call	817ff0 <OS_StrLen>
  81a4bc:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  81a4c0:	e0bffc03 	ldbu	r2,-16(fp)
  81a4c4:	10800830 	cmpltui	r2,r2,32
  81a4c8:	1000081e 	bne	r2,zero,81a4ec <OSMemNameSet+0xe4>
  81a4cc:	e0bffb17 	ldw	r2,-20(fp)
  81a4d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a4d4:	e0bff917 	ldw	r2,-28(fp)
  81a4d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  81a4dc:	e0ffff17 	ldw	r3,-4(fp)
  81a4e0:	008018c4 	movi	r2,99
  81a4e4:	18800005 	stb	r2,0(r3)
        return;
  81a4e8:	00000a06 	br	81a514 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  81a4ec:	e0bffd17 	ldw	r2,-12(fp)
  81a4f0:	11000504 	addi	r4,r2,20
  81a4f4:	e17ffe17 	ldw	r5,-8(fp)
  81a4f8:	0817f700 	call	817f70 <OS_StrCopy>
  81a4fc:	e0bffb17 	ldw	r2,-20(fp)
  81a500:	e0bff815 	stw	r2,-32(fp)
  81a504:	e0bff817 	ldw	r2,-32(fp)
  81a508:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81a50c:	e0bfff17 	ldw	r2,-4(fp)
  81a510:	10000005 	stb	zero,0(r2)
}
  81a514:	e037883a 	mov	sp,fp
  81a518:	dfc00117 	ldw	ra,4(sp)
  81a51c:	df000017 	ldw	fp,0(sp)
  81a520:	dec00204 	addi	sp,sp,8
  81a524:	f800283a 	ret

0081a528 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  81a528:	defff804 	addi	sp,sp,-32
  81a52c:	df000715 	stw	fp,28(sp)
  81a530:	df000704 	addi	fp,sp,28
  81a534:	e13ffd15 	stw	r4,-12(fp)
  81a538:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81a53c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  81a540:	e0bffd17 	ldw	r2,-12(fp)
  81a544:	1004c03a 	cmpne	r2,r2,zero
  81a548:	1000031e 	bne	r2,zero,81a558 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  81a54c:	00801804 	movi	r2,96
  81a550:	e0bfff15 	stw	r2,-4(fp)
  81a554:	00002b06 	br	81a604 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  81a558:	e0bffe17 	ldw	r2,-8(fp)
  81a55c:	1004c03a 	cmpne	r2,r2,zero
  81a560:	1000031e 	bne	r2,zero,81a570 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  81a564:	008017c4 	movi	r2,95
  81a568:	e0bfff15 	stw	r2,-4(fp)
  81a56c:	00002506 	br	81a604 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a570:	0005303a 	rdctl	r2,status
  81a574:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a578:	e0fffb17 	ldw	r3,-20(fp)
  81a57c:	00bfff84 	movi	r2,-2
  81a580:	1884703a 	and	r2,r3,r2
  81a584:	1001703a 	wrctl	status,r2
  
  return context;
  81a588:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81a58c:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  81a590:	e0bffd17 	ldw	r2,-12(fp)
  81a594:	10c00417 	ldw	r3,16(r2)
  81a598:	e0bffd17 	ldw	r2,-12(fp)
  81a59c:	10800317 	ldw	r2,12(r2)
  81a5a0:	18800736 	bltu	r3,r2,81a5c0 <OSMemPut+0x98>
  81a5a4:	e0bffc17 	ldw	r2,-16(fp)
  81a5a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a5ac:	e0bffa17 	ldw	r2,-24(fp)
  81a5b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  81a5b4:	00801784 	movi	r2,94
  81a5b8:	e0bfff15 	stw	r2,-4(fp)
  81a5bc:	00001106 	br	81a604 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  81a5c0:	e0fffe17 	ldw	r3,-8(fp)
  81a5c4:	e0bffd17 	ldw	r2,-12(fp)
  81a5c8:	10800117 	ldw	r2,4(r2)
  81a5cc:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  81a5d0:	e0fffd17 	ldw	r3,-12(fp)
  81a5d4:	e0bffe17 	ldw	r2,-8(fp)
  81a5d8:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  81a5dc:	e0bffd17 	ldw	r2,-12(fp)
  81a5e0:	10800417 	ldw	r2,16(r2)
  81a5e4:	10c00044 	addi	r3,r2,1
  81a5e8:	e0bffd17 	ldw	r2,-12(fp)
  81a5ec:	10c00415 	stw	r3,16(r2)
  81a5f0:	e0bffc17 	ldw	r2,-16(fp)
  81a5f4:	e0bff915 	stw	r2,-28(fp)
  81a5f8:	e0bff917 	ldw	r2,-28(fp)
  81a5fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  81a600:	e03fff15 	stw	zero,-4(fp)
  81a604:	e0bfff17 	ldw	r2,-4(fp)
}
  81a608:	e037883a 	mov	sp,fp
  81a60c:	df000017 	ldw	fp,0(sp)
  81a610:	dec00104 	addi	sp,sp,4
  81a614:	f800283a 	ret

0081a618 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  81a618:	defff904 	addi	sp,sp,-28
  81a61c:	df000615 	stw	fp,24(sp)
  81a620:	df000604 	addi	fp,sp,24
  81a624:	e13ffd15 	stw	r4,-12(fp)
  81a628:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81a62c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  81a630:	e0bffd17 	ldw	r2,-12(fp)
  81a634:	1004c03a 	cmpne	r2,r2,zero
  81a638:	1000031e 	bne	r2,zero,81a648 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  81a63c:	00801804 	movi	r2,96
  81a640:	e0bfff15 	stw	r2,-4(fp)
  81a644:	00002e06 	br	81a700 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  81a648:	e0bffe17 	ldw	r2,-8(fp)
  81a64c:	1004c03a 	cmpne	r2,r2,zero
  81a650:	1000031e 	bne	r2,zero,81a660 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  81a654:	00801844 	movi	r2,97
  81a658:	e0bfff15 	stw	r2,-4(fp)
  81a65c:	00002806 	br	81a700 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a660:	0005303a 	rdctl	r2,status
  81a664:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a668:	e0fffb17 	ldw	r3,-20(fp)
  81a66c:	00bfff84 	movi	r2,-2
  81a670:	1884703a 	and	r2,r3,r2
  81a674:	1001703a 	wrctl	status,r2
  
  return context;
  81a678:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81a67c:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  81a680:	e0bffd17 	ldw	r2,-12(fp)
  81a684:	10c00017 	ldw	r3,0(r2)
  81a688:	e0bffe17 	ldw	r2,-8(fp)
  81a68c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  81a690:	e0bffd17 	ldw	r2,-12(fp)
  81a694:	10c00117 	ldw	r3,4(r2)
  81a698:	e0bffe17 	ldw	r2,-8(fp)
  81a69c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  81a6a0:	e0bffd17 	ldw	r2,-12(fp)
  81a6a4:	10c00217 	ldw	r3,8(r2)
  81a6a8:	e0bffe17 	ldw	r2,-8(fp)
  81a6ac:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  81a6b0:	e0bffd17 	ldw	r2,-12(fp)
  81a6b4:	10c00317 	ldw	r3,12(r2)
  81a6b8:	e0bffe17 	ldw	r2,-8(fp)
  81a6bc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  81a6c0:	e0bffd17 	ldw	r2,-12(fp)
  81a6c4:	10c00417 	ldw	r3,16(r2)
  81a6c8:	e0bffe17 	ldw	r2,-8(fp)
  81a6cc:	10c00415 	stw	r3,16(r2)
  81a6d0:	e0bffc17 	ldw	r2,-16(fp)
  81a6d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a6d8:	e0bffa17 	ldw	r2,-24(fp)
  81a6dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  81a6e0:	e0bffe17 	ldw	r2,-8(fp)
  81a6e4:	10c00317 	ldw	r3,12(r2)
  81a6e8:	e0bffe17 	ldw	r2,-8(fp)
  81a6ec:	10800417 	ldw	r2,16(r2)
  81a6f0:	1887c83a 	sub	r3,r3,r2
  81a6f4:	e0bffe17 	ldw	r2,-8(fp)
  81a6f8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  81a6fc:	e03fff15 	stw	zero,-4(fp)
  81a700:	e0bfff17 	ldw	r2,-4(fp)
}
  81a704:	e037883a 	mov	sp,fp
  81a708:	df000017 	ldw	fp,0(sp)
  81a70c:	dec00104 	addi	sp,sp,4
  81a710:	f800283a 	ret

0081a714 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  81a714:	defffc04 	addi	sp,sp,-16
  81a718:	dfc00315 	stw	ra,12(sp)
  81a71c:	df000215 	stw	fp,8(sp)
  81a720:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  81a724:	010020b4 	movhi	r4,130
  81a728:	211e7c04 	addi	r4,r4,31216
  81a72c:	01430c04 	movi	r5,3120
  81a730:	0817d6c0 	call	817d6c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  81a734:	008020b4 	movhi	r2,130
  81a738:	109e7c04 	addi	r2,r2,31216
  81a73c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  81a740:	e03ffe0d 	sth	zero,-8(fp)
  81a744:	00001406 	br	81a798 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  81a748:	e13ffe0b 	ldhu	r4,-8(fp)
  81a74c:	01400d04 	movi	r5,52
  81a750:	080c90c0 	call	80c90c <__mulsi3>
  81a754:	1007883a 	mov	r3,r2
  81a758:	008020b4 	movhi	r2,130
  81a75c:	109e8904 	addi	r2,r2,31268
  81a760:	1887883a 	add	r3,r3,r2
  81a764:	e0bfff17 	ldw	r2,-4(fp)
  81a768:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  81a76c:	e0ffff17 	ldw	r3,-4(fp)
  81a770:	00800fc4 	movi	r2,63
  81a774:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  81a778:	e0bfff17 	ldw	r2,-4(fp)
  81a77c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  81a780:	e0bfff17 	ldw	r2,-4(fp)
  81a784:	10800d04 	addi	r2,r2,52
  81a788:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  81a78c:	e0bffe0b 	ldhu	r2,-8(fp)
  81a790:	10800044 	addi	r2,r2,1
  81a794:	e0bffe0d 	sth	r2,-8(fp)
  81a798:	e0bffe0b 	ldhu	r2,-8(fp)
  81a79c:	10800ef0 	cmpltui	r2,r2,59
  81a7a0:	103fe91e 	bne	r2,zero,81a748 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  81a7a4:	e0bfff17 	ldw	r2,-4(fp)
  81a7a8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  81a7ac:	e0ffff17 	ldw	r3,-4(fp)
  81a7b0:	00800fc4 	movi	r2,63
  81a7b4:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  81a7b8:	e0bfff17 	ldw	r2,-4(fp)
  81a7bc:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  81a7c0:	00c020b4 	movhi	r3,130
  81a7c4:	18d58804 	addi	r3,r3,22048
  81a7c8:	008020b4 	movhi	r2,130
  81a7cc:	109e7c04 	addi	r2,r2,31216
  81a7d0:	18800015 	stw	r2,0(r3)
#endif
}
  81a7d4:	e037883a 	mov	sp,fp
  81a7d8:	dfc00117 	ldw	ra,4(sp)
  81a7dc:	df000017 	ldw	fp,0(sp)
  81a7e0:	dec00204 	addi	sp,sp,8
  81a7e4:	f800283a 	ret

0081a7e8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  81a7e8:	defff704 	addi	sp,sp,-36
  81a7ec:	df000815 	stw	fp,32(sp)
  81a7f0:	df000804 	addi	fp,sp,32
  81a7f4:	e13ffd15 	stw	r4,-12(fp)
  81a7f8:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81a7fc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81a800:	e0bffe17 	ldw	r2,-8(fp)
  81a804:	1004c03a 	cmpne	r2,r2,zero
  81a808:	1000021e 	bne	r2,zero,81a814 <OSQAccept+0x2c>
        return ((void *)0);
  81a80c:	e03fff15 	stw	zero,-4(fp)
  81a810:	00004506 	br	81a928 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  81a814:	e0bffd17 	ldw	r2,-12(fp)
  81a818:	1004c03a 	cmpne	r2,r2,zero
  81a81c:	1000051e 	bne	r2,zero,81a834 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  81a820:	e0fffe17 	ldw	r3,-8(fp)
  81a824:	00800104 	movi	r2,4
  81a828:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81a82c:	e03fff15 	stw	zero,-4(fp)
  81a830:	00003d06 	br	81a928 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  81a834:	e0bffd17 	ldw	r2,-12(fp)
  81a838:	10800003 	ldbu	r2,0(r2)
  81a83c:	10803fcc 	andi	r2,r2,255
  81a840:	108000a0 	cmpeqi	r2,r2,2
  81a844:	1000051e 	bne	r2,zero,81a85c <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  81a848:	e0fffe17 	ldw	r3,-8(fp)
  81a84c:	00800044 	movi	r2,1
  81a850:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81a854:	e03fff15 	stw	zero,-4(fp)
  81a858:	00003306 	br	81a928 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a85c:	0005303a 	rdctl	r2,status
  81a860:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a864:	e0fff917 	ldw	r3,-28(fp)
  81a868:	00bfff84 	movi	r2,-2
  81a86c:	1884703a 	and	r2,r3,r2
  81a870:	1001703a 	wrctl	status,r2
  
  return context;
  81a874:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81a878:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  81a87c:	e0bffd17 	ldw	r2,-12(fp)
  81a880:	10800117 	ldw	r2,4(r2)
  81a884:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  81a888:	e0bffb17 	ldw	r2,-20(fp)
  81a88c:	1080058b 	ldhu	r2,22(r2)
  81a890:	10bfffcc 	andi	r2,r2,65535
  81a894:	1005003a 	cmpeq	r2,r2,zero
  81a898:	1000191e 	bne	r2,zero,81a900 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  81a89c:	e0bffb17 	ldw	r2,-20(fp)
  81a8a0:	10c00417 	ldw	r3,16(r2)
  81a8a4:	18800017 	ldw	r2,0(r3)
  81a8a8:	e0bffc15 	stw	r2,-16(fp)
  81a8ac:	18c00104 	addi	r3,r3,4
  81a8b0:	e0bffb17 	ldw	r2,-20(fp)
  81a8b4:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  81a8b8:	e0bffb17 	ldw	r2,-20(fp)
  81a8bc:	1080058b 	ldhu	r2,22(r2)
  81a8c0:	10bfffc4 	addi	r2,r2,-1
  81a8c4:	1007883a 	mov	r3,r2
  81a8c8:	e0bffb17 	ldw	r2,-20(fp)
  81a8cc:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  81a8d0:	e0bffb17 	ldw	r2,-20(fp)
  81a8d4:	10c00417 	ldw	r3,16(r2)
  81a8d8:	e0bffb17 	ldw	r2,-20(fp)
  81a8dc:	10800217 	ldw	r2,8(r2)
  81a8e0:	1880041e 	bne	r3,r2,81a8f4 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  81a8e4:	e0bffb17 	ldw	r2,-20(fp)
  81a8e8:	10c00117 	ldw	r3,4(r2)
  81a8ec:	e0bffb17 	ldw	r2,-20(fp)
  81a8f0:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  81a8f4:	e0bffe17 	ldw	r2,-8(fp)
  81a8f8:	10000005 	stb	zero,0(r2)
  81a8fc:	00000406 	br	81a910 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  81a900:	e0fffe17 	ldw	r3,-8(fp)
  81a904:	008007c4 	movi	r2,31
  81a908:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  81a90c:	e03ffc15 	stw	zero,-16(fp)
  81a910:	e0bffa17 	ldw	r2,-24(fp)
  81a914:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a918:	e0bff817 	ldw	r2,-32(fp)
  81a91c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  81a920:	e0bffc17 	ldw	r2,-16(fp)
  81a924:	e0bfff15 	stw	r2,-4(fp)
  81a928:	e0bfff17 	ldw	r2,-4(fp)
}
  81a92c:	e037883a 	mov	sp,fp
  81a930:	df000017 	ldw	fp,0(sp)
  81a934:	dec00104 	addi	sp,sp,4
  81a938:	f800283a 	ret

0081a93c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  81a93c:	defff304 	addi	sp,sp,-52
  81a940:	dfc00c15 	stw	ra,48(sp)
  81a944:	df000b15 	stw	fp,44(sp)
  81a948:	df000b04 	addi	fp,sp,44
  81a94c:	e13ffd15 	stw	r4,-12(fp)
  81a950:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81a954:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  81a958:	008020b4 	movhi	r2,130
  81a95c:	10958d04 	addi	r2,r2,22068
  81a960:	10800003 	ldbu	r2,0(r2)
  81a964:	10803fcc 	andi	r2,r2,255
  81a968:	1005003a 	cmpeq	r2,r2,zero
  81a96c:	1000021e 	bne	r2,zero,81a978 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  81a970:	e03fff15 	stw	zero,-4(fp)
  81a974:	00007006 	br	81ab38 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a978:	0005303a 	rdctl	r2,status
  81a97c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a980:	e0fff917 	ldw	r3,-28(fp)
  81a984:	00bfff84 	movi	r2,-2
  81a988:	1884703a 	and	r2,r3,r2
  81a98c:	1001703a 	wrctl	status,r2
  
  return context;
  81a990:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81a994:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  81a998:	008020b4 	movhi	r2,130
  81a99c:	10958c04 	addi	r2,r2,22064
  81a9a0:	10800017 	ldw	r2,0(r2)
  81a9a4:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  81a9a8:	008020b4 	movhi	r2,130
  81a9ac:	10958c04 	addi	r2,r2,22064
  81a9b0:	10800017 	ldw	r2,0(r2)
  81a9b4:	1005003a 	cmpeq	r2,r2,zero
  81a9b8:	1000081e 	bne	r2,zero,81a9dc <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  81a9bc:	008020b4 	movhi	r2,130
  81a9c0:	10958c04 	addi	r2,r2,22064
  81a9c4:	10800017 	ldw	r2,0(r2)
  81a9c8:	10800117 	ldw	r2,4(r2)
  81a9cc:	1007883a 	mov	r3,r2
  81a9d0:	008020b4 	movhi	r2,130
  81a9d4:	10958c04 	addi	r2,r2,22064
  81a9d8:	10c00015 	stw	r3,0(r2)
  81a9dc:	e0bffa17 	ldw	r2,-24(fp)
  81a9e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a9e4:	e0bff817 	ldw	r2,-32(fp)
  81a9e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  81a9ec:	e0bffc17 	ldw	r2,-16(fp)
  81a9f0:	1005003a 	cmpeq	r2,r2,zero
  81a9f4:	10004e1e 	bne	r2,zero,81ab30 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a9f8:	0005303a 	rdctl	r2,status
  81a9fc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81aa00:	e0fff717 	ldw	r3,-36(fp)
  81aa04:	00bfff84 	movi	r2,-2
  81aa08:	1884703a 	and	r2,r3,r2
  81aa0c:	1001703a 	wrctl	status,r2
  
  return context;
  81aa10:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  81aa14:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  81aa18:	008020b4 	movhi	r2,130
  81aa1c:	10958a04 	addi	r2,r2,22056
  81aa20:	10800017 	ldw	r2,0(r2)
  81aa24:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  81aa28:	e0bffb17 	ldw	r2,-20(fp)
  81aa2c:	1005003a 	cmpeq	r2,r2,zero
  81aa30:	1000311e 	bne	r2,zero,81aaf8 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  81aa34:	008020b4 	movhi	r2,130
  81aa38:	10958a04 	addi	r2,r2,22056
  81aa3c:	10800017 	ldw	r2,0(r2)
  81aa40:	10c00017 	ldw	r3,0(r2)
  81aa44:	008020b4 	movhi	r2,130
  81aa48:	10958a04 	addi	r2,r2,22056
  81aa4c:	10c00015 	stw	r3,0(r2)
  81aa50:	e0bffa17 	ldw	r2,-24(fp)
  81aa54:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81aa58:	e0bff617 	ldw	r2,-40(fp)
  81aa5c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  81aa60:	e0fffb17 	ldw	r3,-20(fp)
  81aa64:	e0bffd17 	ldw	r2,-12(fp)
  81aa68:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  81aa6c:	e0bffe0b 	ldhu	r2,-8(fp)
  81aa70:	1085883a 	add	r2,r2,r2
  81aa74:	1085883a 	add	r2,r2,r2
  81aa78:	1007883a 	mov	r3,r2
  81aa7c:	e0bffd17 	ldw	r2,-12(fp)
  81aa80:	1887883a 	add	r3,r3,r2
  81aa84:	e0bffb17 	ldw	r2,-20(fp)
  81aa88:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  81aa8c:	e0fffb17 	ldw	r3,-20(fp)
  81aa90:	e0bffd17 	ldw	r2,-12(fp)
  81aa94:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  81aa98:	e0fffb17 	ldw	r3,-20(fp)
  81aa9c:	e0bffd17 	ldw	r2,-12(fp)
  81aaa0:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  81aaa4:	e0fffb17 	ldw	r3,-20(fp)
  81aaa8:	e0bffe0b 	ldhu	r2,-8(fp)
  81aaac:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  81aab0:	e0bffb17 	ldw	r2,-20(fp)
  81aab4:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  81aab8:	e0fffc17 	ldw	r3,-16(fp)
  81aabc:	00800084 	movi	r2,2
  81aac0:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  81aac4:	e0bffc17 	ldw	r2,-16(fp)
  81aac8:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  81aacc:	e0fffc17 	ldw	r3,-16(fp)
  81aad0:	e0bffb17 	ldw	r2,-20(fp)
  81aad4:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  81aad8:	e0fffc17 	ldw	r3,-16(fp)
  81aadc:	00800fc4 	movi	r2,63
  81aae0:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  81aae4:	e0bffc17 	ldw	r2,-16(fp)
  81aae8:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  81aaec:	e13ffc17 	ldw	r4,-16(fp)
  81aaf0:	08179a00 	call	8179a0 <OS_EventWaitListInit>
  81aaf4:	00000e06 	br	81ab30 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  81aaf8:	008020b4 	movhi	r2,130
  81aafc:	10958c04 	addi	r2,r2,22064
  81ab00:	10c00017 	ldw	r3,0(r2)
  81ab04:	e0bffc17 	ldw	r2,-16(fp)
  81ab08:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  81ab0c:	00c020b4 	movhi	r3,130
  81ab10:	18d58c04 	addi	r3,r3,22064
  81ab14:	e0bffc17 	ldw	r2,-16(fp)
  81ab18:	18800015 	stw	r2,0(r3)
  81ab1c:	e0bffa17 	ldw	r2,-24(fp)
  81ab20:	e0bff515 	stw	r2,-44(fp)
  81ab24:	e0bff517 	ldw	r2,-44(fp)
  81ab28:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  81ab2c:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  81ab30:	e0bffc17 	ldw	r2,-16(fp)
  81ab34:	e0bfff15 	stw	r2,-4(fp)
  81ab38:	e0bfff17 	ldw	r2,-4(fp)
}
  81ab3c:	e037883a 	mov	sp,fp
  81ab40:	dfc00117 	ldw	ra,4(sp)
  81ab44:	df000017 	ldw	fp,0(sp)
  81ab48:	dec00204 	addi	sp,sp,8
  81ab4c:	f800283a 	ret

0081ab50 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81ab50:	defff004 	addi	sp,sp,-64
  81ab54:	dfc00f15 	stw	ra,60(sp)
  81ab58:	df000e15 	stw	fp,56(sp)
  81ab5c:	df000e04 	addi	fp,sp,56
  81ab60:	e13ffb15 	stw	r4,-20(fp)
  81ab64:	e1bffd15 	stw	r6,-12(fp)
  81ab68:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81ab6c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81ab70:	e0bffd17 	ldw	r2,-12(fp)
  81ab74:	1004c03a 	cmpne	r2,r2,zero
  81ab78:	1000031e 	bne	r2,zero,81ab88 <OSQDel+0x38>
        return (pevent);
  81ab7c:	e0bffb17 	ldw	r2,-20(fp)
  81ab80:	e0bfff15 	stw	r2,-4(fp)
  81ab84:	0000ac06 	br	81ae38 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81ab88:	e0bffb17 	ldw	r2,-20(fp)
  81ab8c:	1004c03a 	cmpne	r2,r2,zero
  81ab90:	1000061e 	bne	r2,zero,81abac <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  81ab94:	e0fffd17 	ldw	r3,-12(fp)
  81ab98:	00800104 	movi	r2,4
  81ab9c:	18800005 	stb	r2,0(r3)
        return (pevent);
  81aba0:	e0fffb17 	ldw	r3,-20(fp)
  81aba4:	e0ffff15 	stw	r3,-4(fp)
  81aba8:	0000a306 	br	81ae38 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  81abac:	e0bffb17 	ldw	r2,-20(fp)
  81abb0:	10800003 	ldbu	r2,0(r2)
  81abb4:	10803fcc 	andi	r2,r2,255
  81abb8:	108000a0 	cmpeqi	r2,r2,2
  81abbc:	1000061e 	bne	r2,zero,81abd8 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  81abc0:	e0fffd17 	ldw	r3,-12(fp)
  81abc4:	00800044 	movi	r2,1
  81abc8:	18800005 	stb	r2,0(r3)
        return (pevent);
  81abcc:	e0bffb17 	ldw	r2,-20(fp)
  81abd0:	e0bfff15 	stw	r2,-4(fp)
  81abd4:	00009806 	br	81ae38 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81abd8:	008020b4 	movhi	r2,130
  81abdc:	10958d04 	addi	r2,r2,22068
  81abe0:	10800003 	ldbu	r2,0(r2)
  81abe4:	10803fcc 	andi	r2,r2,255
  81abe8:	1005003a 	cmpeq	r2,r2,zero
  81abec:	1000061e 	bne	r2,zero,81ac08 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  81abf0:	e0fffd17 	ldw	r3,-12(fp)
  81abf4:	008003c4 	movi	r2,15
  81abf8:	18800005 	stb	r2,0(r3)
        return (pevent);
  81abfc:	e0fffb17 	ldw	r3,-20(fp)
  81ac00:	e0ffff15 	stw	r3,-4(fp)
  81ac04:	00008c06 	br	81ae38 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ac08:	0005303a 	rdctl	r2,status
  81ac0c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ac10:	e0fff617 	ldw	r3,-40(fp)
  81ac14:	00bfff84 	movi	r2,-2
  81ac18:	1884703a 	and	r2,r3,r2
  81ac1c:	1001703a 	wrctl	status,r2
  
  return context;
  81ac20:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  81ac24:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  81ac28:	e0bffb17 	ldw	r2,-20(fp)
  81ac2c:	10800283 	ldbu	r2,10(r2)
  81ac30:	10803fcc 	andi	r2,r2,255
  81ac34:	1005003a 	cmpeq	r2,r2,zero
  81ac38:	1000031e 	bne	r2,zero,81ac48 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  81ac3c:	00800044 	movi	r2,1
  81ac40:	e0bffa05 	stb	r2,-24(fp)
  81ac44:	00000106 	br	81ac4c <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  81ac48:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  81ac4c:	e0bffc03 	ldbu	r2,-16(fp)
  81ac50:	e0bffe15 	stw	r2,-8(fp)
  81ac54:	e0fffe17 	ldw	r3,-8(fp)
  81ac58:	1805003a 	cmpeq	r2,r3,zero
  81ac5c:	1000041e 	bne	r2,zero,81ac70 <OSQDel+0x120>
  81ac60:	e0fffe17 	ldw	r3,-8(fp)
  81ac64:	18800060 	cmpeqi	r2,r3,1
  81ac68:	1000391e 	bne	r2,zero,81ad50 <OSQDel+0x200>
  81ac6c:	00006706 	br	81ae0c <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  81ac70:	e0bffa03 	ldbu	r2,-24(fp)
  81ac74:	1004c03a 	cmpne	r2,r2,zero
  81ac78:	1000261e 	bne	r2,zero,81ad14 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  81ac7c:	e0fffb17 	ldw	r3,-20(fp)
  81ac80:	00800fc4 	movi	r2,63
  81ac84:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  81ac88:	e0bffb17 	ldw	r2,-20(fp)
  81ac8c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  81ac90:	e0bffb17 	ldw	r2,-20(fp)
  81ac94:	10800117 	ldw	r2,4(r2)
  81ac98:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  81ac9c:	008020b4 	movhi	r2,130
  81aca0:	10958a04 	addi	r2,r2,22056
  81aca4:	10c00017 	ldw	r3,0(r2)
  81aca8:	e0bff817 	ldw	r2,-32(fp)
  81acac:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  81acb0:	00c020b4 	movhi	r3,130
  81acb4:	18d58a04 	addi	r3,r3,22056
  81acb8:	e0bff817 	ldw	r2,-32(fp)
  81acbc:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81acc0:	e0bffb17 	ldw	r2,-20(fp)
  81acc4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  81acc8:	008020b4 	movhi	r2,130
  81accc:	10958c04 	addi	r2,r2,22064
  81acd0:	10c00017 	ldw	r3,0(r2)
  81acd4:	e0bffb17 	ldw	r2,-20(fp)
  81acd8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  81acdc:	e0bffb17 	ldw	r2,-20(fp)
  81ace0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  81ace4:	00c020b4 	movhi	r3,130
  81ace8:	18d58c04 	addi	r3,r3,22064
  81acec:	e0bffb17 	ldw	r2,-20(fp)
  81acf0:	18800015 	stw	r2,0(r3)
  81acf4:	e0bff717 	ldw	r2,-36(fp)
  81acf8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81acfc:	e0bff517 	ldw	r2,-44(fp)
  81ad00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  81ad04:	e0bffd17 	ldw	r2,-12(fp)
  81ad08:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  81ad0c:	e03ff915 	stw	zero,-28(fp)
  81ad10:	00004706 	br	81ae30 <OSQDel+0x2e0>
  81ad14:	e0bff717 	ldw	r2,-36(fp)
  81ad18:	e0bff415 	stw	r2,-48(fp)
  81ad1c:	e0bff417 	ldw	r2,-48(fp)
  81ad20:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  81ad24:	e0fffd17 	ldw	r3,-12(fp)
  81ad28:	00801244 	movi	r2,73
  81ad2c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  81ad30:	e0bffb17 	ldw	r2,-20(fp)
  81ad34:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  81ad38:	00003d06 	br	81ae30 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  81ad3c:	e13ffb17 	ldw	r4,-20(fp)
  81ad40:	000b883a 	mov	r5,zero
  81ad44:	01800104 	movi	r6,4
  81ad48:	000f883a 	mov	r7,zero
  81ad4c:	08173ec0 	call	8173ec <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  81ad50:	e0bffb17 	ldw	r2,-20(fp)
  81ad54:	10800283 	ldbu	r2,10(r2)
  81ad58:	10803fcc 	andi	r2,r2,255
  81ad5c:	1004c03a 	cmpne	r2,r2,zero
  81ad60:	103ff61e 	bne	r2,zero,81ad3c <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  81ad64:	e0fffb17 	ldw	r3,-20(fp)
  81ad68:	00800fc4 	movi	r2,63
  81ad6c:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  81ad70:	e0bffb17 	ldw	r2,-20(fp)
  81ad74:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  81ad78:	e0bffb17 	ldw	r2,-20(fp)
  81ad7c:	10800117 	ldw	r2,4(r2)
  81ad80:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  81ad84:	008020b4 	movhi	r2,130
  81ad88:	10958a04 	addi	r2,r2,22056
  81ad8c:	10c00017 	ldw	r3,0(r2)
  81ad90:	e0bff817 	ldw	r2,-32(fp)
  81ad94:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  81ad98:	00c020b4 	movhi	r3,130
  81ad9c:	18d58a04 	addi	r3,r3,22056
  81ada0:	e0bff817 	ldw	r2,-32(fp)
  81ada4:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81ada8:	e0bffb17 	ldw	r2,-20(fp)
  81adac:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  81adb0:	008020b4 	movhi	r2,130
  81adb4:	10958c04 	addi	r2,r2,22064
  81adb8:	10c00017 	ldw	r3,0(r2)
  81adbc:	e0bffb17 	ldw	r2,-20(fp)
  81adc0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  81adc4:	e0bffb17 	ldw	r2,-20(fp)
  81adc8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  81adcc:	00c020b4 	movhi	r3,130
  81add0:	18d58c04 	addi	r3,r3,22064
  81add4:	e0bffb17 	ldw	r2,-20(fp)
  81add8:	18800015 	stw	r2,0(r3)
  81addc:	e0bff717 	ldw	r2,-36(fp)
  81ade0:	e0bff315 	stw	r2,-52(fp)
  81ade4:	e0bff317 	ldw	r2,-52(fp)
  81ade8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  81adec:	e0bffa03 	ldbu	r2,-24(fp)
  81adf0:	10800058 	cmpnei	r2,r2,1
  81adf4:	1000011e 	bne	r2,zero,81adfc <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  81adf8:	0817e2c0 	call	817e2c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  81adfc:	e0bffd17 	ldw	r2,-12(fp)
  81ae00:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  81ae04:	e03ff915 	stw	zero,-28(fp)
             break;
  81ae08:	00000906 	br	81ae30 <OSQDel+0x2e0>
  81ae0c:	e0bff717 	ldw	r2,-36(fp)
  81ae10:	e0bff215 	stw	r2,-56(fp)
  81ae14:	e0bff217 	ldw	r2,-56(fp)
  81ae18:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  81ae1c:	e0fffd17 	ldw	r3,-12(fp)
  81ae20:	008001c4 	movi	r2,7
  81ae24:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  81ae28:	e0bffb17 	ldw	r2,-20(fp)
  81ae2c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  81ae30:	e0bff917 	ldw	r2,-28(fp)
  81ae34:	e0bfff15 	stw	r2,-4(fp)
  81ae38:	e0bfff17 	ldw	r2,-4(fp)
}
  81ae3c:	e037883a 	mov	sp,fp
  81ae40:	dfc00117 	ldw	ra,4(sp)
  81ae44:	df000017 	ldw	fp,0(sp)
  81ae48:	dec00204 	addi	sp,sp,8
  81ae4c:	f800283a 	ret

0081ae50 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  81ae50:	defff904 	addi	sp,sp,-28
  81ae54:	df000615 	stw	fp,24(sp)
  81ae58:	df000604 	addi	fp,sp,24
  81ae5c:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81ae60:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81ae64:	e0bffe17 	ldw	r2,-8(fp)
  81ae68:	1004c03a 	cmpne	r2,r2,zero
  81ae6c:	1000031e 	bne	r2,zero,81ae7c <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  81ae70:	00800104 	movi	r2,4
  81ae74:	e0bfff15 	stw	r2,-4(fp)
  81ae78:	00002206 	br	81af04 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  81ae7c:	e0bffe17 	ldw	r2,-8(fp)
  81ae80:	10800003 	ldbu	r2,0(r2)
  81ae84:	10803fcc 	andi	r2,r2,255
  81ae88:	108000a0 	cmpeqi	r2,r2,2
  81ae8c:	1000031e 	bne	r2,zero,81ae9c <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  81ae90:	00800044 	movi	r2,1
  81ae94:	e0bfff15 	stw	r2,-4(fp)
  81ae98:	00001a06 	br	81af04 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ae9c:	0005303a 	rdctl	r2,status
  81aea0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81aea4:	e0fffb17 	ldw	r3,-20(fp)
  81aea8:	00bfff84 	movi	r2,-2
  81aeac:	1884703a 	and	r2,r3,r2
  81aeb0:	1001703a 	wrctl	status,r2
  
  return context;
  81aeb4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81aeb8:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  81aebc:	e0bffe17 	ldw	r2,-8(fp)
  81aec0:	10800117 	ldw	r2,4(r2)
  81aec4:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  81aec8:	e0bffd17 	ldw	r2,-12(fp)
  81aecc:	10c00117 	ldw	r3,4(r2)
  81aed0:	e0bffd17 	ldw	r2,-12(fp)
  81aed4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  81aed8:	e0bffd17 	ldw	r2,-12(fp)
  81aedc:	10c00117 	ldw	r3,4(r2)
  81aee0:	e0bffd17 	ldw	r2,-12(fp)
  81aee4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  81aee8:	e0bffd17 	ldw	r2,-12(fp)
  81aeec:	1000058d 	sth	zero,22(r2)
  81aef0:	e0bffc17 	ldw	r2,-16(fp)
  81aef4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81aef8:	e0bffa17 	ldw	r2,-24(fp)
  81aefc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81af00:	e03fff15 	stw	zero,-4(fp)
  81af04:	e0bfff17 	ldw	r2,-4(fp)
}
  81af08:	e037883a 	mov	sp,fp
  81af0c:	df000017 	ldw	fp,0(sp)
  81af10:	dec00104 	addi	sp,sp,4
  81af14:	f800283a 	ret

0081af18 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  81af18:	defff104 	addi	sp,sp,-60
  81af1c:	dfc00e15 	stw	ra,56(sp)
  81af20:	df000d15 	stw	fp,52(sp)
  81af24:	df000d04 	addi	fp,sp,52
  81af28:	e13ffb15 	stw	r4,-20(fp)
  81af2c:	e1bffd15 	stw	r6,-12(fp)
  81af30:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81af34:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81af38:	e0bffd17 	ldw	r2,-12(fp)
  81af3c:	1004c03a 	cmpne	r2,r2,zero
  81af40:	1000021e 	bne	r2,zero,81af4c <OSQPend+0x34>
        return ((void *)0);
  81af44:	e03fff15 	stw	zero,-4(fp)
  81af48:	0000b506 	br	81b220 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  81af4c:	e0bffb17 	ldw	r2,-20(fp)
  81af50:	1004c03a 	cmpne	r2,r2,zero
  81af54:	1000051e 	bne	r2,zero,81af6c <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81af58:	e0fffd17 	ldw	r3,-12(fp)
  81af5c:	00800104 	movi	r2,4
  81af60:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81af64:	e03fff15 	stw	zero,-4(fp)
  81af68:	0000ad06 	br	81b220 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  81af6c:	e0bffb17 	ldw	r2,-20(fp)
  81af70:	10800003 	ldbu	r2,0(r2)
  81af74:	10803fcc 	andi	r2,r2,255
  81af78:	108000a0 	cmpeqi	r2,r2,2
  81af7c:	1000051e 	bne	r2,zero,81af94 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  81af80:	e0fffd17 	ldw	r3,-12(fp)
  81af84:	00800044 	movi	r2,1
  81af88:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81af8c:	e03fff15 	stw	zero,-4(fp)
  81af90:	0000a306 	br	81b220 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  81af94:	008020b4 	movhi	r2,130
  81af98:	10958d04 	addi	r2,r2,22068
  81af9c:	10800003 	ldbu	r2,0(r2)
  81afa0:	10803fcc 	andi	r2,r2,255
  81afa4:	1005003a 	cmpeq	r2,r2,zero
  81afa8:	1000051e 	bne	r2,zero,81afc0 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  81afac:	e0fffd17 	ldw	r3,-12(fp)
  81afb0:	00800084 	movi	r2,2
  81afb4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81afb8:	e03fff15 	stw	zero,-4(fp)
  81afbc:	00009806 	br	81b220 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  81afc0:	008020b4 	movhi	r2,130
  81afc4:	10957f04 	addi	r2,r2,22012
  81afc8:	10800003 	ldbu	r2,0(r2)
  81afcc:	10803fcc 	andi	r2,r2,255
  81afd0:	1005003a 	cmpeq	r2,r2,zero
  81afd4:	1000051e 	bne	r2,zero,81afec <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  81afd8:	e0fffd17 	ldw	r3,-12(fp)
  81afdc:	00800344 	movi	r2,13
  81afe0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81afe4:	e03fff15 	stw	zero,-4(fp)
  81afe8:	00008d06 	br	81b220 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81afec:	0005303a 	rdctl	r2,status
  81aff0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81aff4:	e0fff717 	ldw	r3,-36(fp)
  81aff8:	00bfff84 	movi	r2,-2
  81affc:	1884703a 	and	r2,r3,r2
  81b000:	1001703a 	wrctl	status,r2
  
  return context;
  81b004:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81b008:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  81b00c:	e0bffb17 	ldw	r2,-20(fp)
  81b010:	10800117 	ldw	r2,4(r2)
  81b014:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  81b018:	e0bff917 	ldw	r2,-28(fp)
  81b01c:	1080058b 	ldhu	r2,22(r2)
  81b020:	10bfffcc 	andi	r2,r2,65535
  81b024:	1005003a 	cmpeq	r2,r2,zero
  81b028:	10001f1e 	bne	r2,zero,81b0a8 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  81b02c:	e0bff917 	ldw	r2,-28(fp)
  81b030:	10c00417 	ldw	r3,16(r2)
  81b034:	18800017 	ldw	r2,0(r3)
  81b038:	e0bffa15 	stw	r2,-24(fp)
  81b03c:	18c00104 	addi	r3,r3,4
  81b040:	e0bff917 	ldw	r2,-28(fp)
  81b044:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  81b048:	e0bff917 	ldw	r2,-28(fp)
  81b04c:	1080058b 	ldhu	r2,22(r2)
  81b050:	10bfffc4 	addi	r2,r2,-1
  81b054:	1007883a 	mov	r3,r2
  81b058:	e0bff917 	ldw	r2,-28(fp)
  81b05c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  81b060:	e0bff917 	ldw	r2,-28(fp)
  81b064:	10c00417 	ldw	r3,16(r2)
  81b068:	e0bff917 	ldw	r2,-28(fp)
  81b06c:	10800217 	ldw	r2,8(r2)
  81b070:	1880041e 	bne	r3,r2,81b084 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  81b074:	e0bff917 	ldw	r2,-28(fp)
  81b078:	10c00117 	ldw	r3,4(r2)
  81b07c:	e0bff917 	ldw	r2,-28(fp)
  81b080:	10c00415 	stw	r3,16(r2)
  81b084:	e0bff817 	ldw	r2,-32(fp)
  81b088:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b08c:	e0bff617 	ldw	r2,-40(fp)
  81b090:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  81b094:	e0bffd17 	ldw	r2,-12(fp)
  81b098:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  81b09c:	e0bffa17 	ldw	r2,-24(fp)
  81b0a0:	e0bfff15 	stw	r2,-4(fp)
  81b0a4:	00005e06 	br	81b220 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  81b0a8:	008020b4 	movhi	r2,130
  81b0ac:	10958e04 	addi	r2,r2,22072
  81b0b0:	10c00017 	ldw	r3,0(r2)
  81b0b4:	008020b4 	movhi	r2,130
  81b0b8:	10958e04 	addi	r2,r2,22072
  81b0bc:	10800017 	ldw	r2,0(r2)
  81b0c0:	10800c03 	ldbu	r2,48(r2)
  81b0c4:	10800114 	ori	r2,r2,4
  81b0c8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  81b0cc:	008020b4 	movhi	r2,130
  81b0d0:	10958e04 	addi	r2,r2,22072
  81b0d4:	10800017 	ldw	r2,0(r2)
  81b0d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  81b0dc:	008020b4 	movhi	r2,130
  81b0e0:	10958e04 	addi	r2,r2,22072
  81b0e4:	10c00017 	ldw	r3,0(r2)
  81b0e8:	e0bffc0b 	ldhu	r2,-16(fp)
  81b0ec:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  81b0f0:	e13ffb17 	ldw	r4,-20(fp)
  81b0f4:	08175800 	call	817580 <OS_EventTaskWait>
  81b0f8:	e0bff817 	ldw	r2,-32(fp)
  81b0fc:	e0bff515 	stw	r2,-44(fp)
  81b100:	e0bff517 	ldw	r2,-44(fp)
  81b104:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  81b108:	0817e2c0 	call	817e2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b10c:	0005303a 	rdctl	r2,status
  81b110:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b114:	e0fff417 	ldw	r3,-48(fp)
  81b118:	00bfff84 	movi	r2,-2
  81b11c:	1884703a 	and	r2,r3,r2
  81b120:	1001703a 	wrctl	status,r2
  
  return context;
  81b124:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  81b128:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  81b12c:	008020b4 	movhi	r2,130
  81b130:	10958e04 	addi	r2,r2,22072
  81b134:	10800017 	ldw	r2,0(r2)
  81b138:	10800c43 	ldbu	r2,49(r2)
  81b13c:	10803fcc 	andi	r2,r2,255
  81b140:	e0bffe15 	stw	r2,-8(fp)
  81b144:	e0fffe17 	ldw	r3,-8(fp)
  81b148:	1805003a 	cmpeq	r2,r3,zero
  81b14c:	1000041e 	bne	r2,zero,81b160 <OSQPend+0x248>
  81b150:	e0fffe17 	ldw	r3,-8(fp)
  81b154:	188000a0 	cmpeqi	r2,r3,2
  81b158:	1000091e 	bne	r2,zero,81b180 <OSQPend+0x268>
  81b15c:	00000d06 	br	81b194 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  81b160:	008020b4 	movhi	r2,130
  81b164:	10958e04 	addi	r2,r2,22072
  81b168:	10800017 	ldw	r2,0(r2)
  81b16c:	10800917 	ldw	r2,36(r2)
  81b170:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  81b174:	e0bffd17 	ldw	r2,-12(fp)
  81b178:	10000005 	stb	zero,0(r2)
             break;
  81b17c:	00000e06 	br	81b1b8 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  81b180:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  81b184:	e0fffd17 	ldw	r3,-12(fp)
  81b188:	00800384 	movi	r2,14
  81b18c:	18800005 	stb	r2,0(r3)
             break;
  81b190:	00000906 	br	81b1b8 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  81b194:	008020b4 	movhi	r2,130
  81b198:	10958e04 	addi	r2,r2,22072
  81b19c:	11000017 	ldw	r4,0(r2)
  81b1a0:	e17ffb17 	ldw	r5,-20(fp)
  81b1a4:	08177e40 	call	8177e4 <OS_EventTaskRemove>
             pmsg = (void *)0;
  81b1a8:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  81b1ac:	e0fffd17 	ldw	r3,-12(fp)
  81b1b0:	00800284 	movi	r2,10
  81b1b4:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  81b1b8:	008020b4 	movhi	r2,130
  81b1bc:	10958e04 	addi	r2,r2,22072
  81b1c0:	10800017 	ldw	r2,0(r2)
  81b1c4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  81b1c8:	008020b4 	movhi	r2,130
  81b1cc:	10958e04 	addi	r2,r2,22072
  81b1d0:	10800017 	ldw	r2,0(r2)
  81b1d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  81b1d8:	008020b4 	movhi	r2,130
  81b1dc:	10958e04 	addi	r2,r2,22072
  81b1e0:	10800017 	ldw	r2,0(r2)
  81b1e4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  81b1e8:	008020b4 	movhi	r2,130
  81b1ec:	10958e04 	addi	r2,r2,22072
  81b1f0:	10800017 	ldw	r2,0(r2)
  81b1f4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  81b1f8:	008020b4 	movhi	r2,130
  81b1fc:	10958e04 	addi	r2,r2,22072
  81b200:	10800017 	ldw	r2,0(r2)
  81b204:	10000915 	stw	zero,36(r2)
  81b208:	e0bff817 	ldw	r2,-32(fp)
  81b20c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b210:	e0bff317 	ldw	r2,-52(fp)
  81b214:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  81b218:	e0bffa17 	ldw	r2,-24(fp)
  81b21c:	e0bfff15 	stw	r2,-4(fp)
  81b220:	e0bfff17 	ldw	r2,-4(fp)
}
  81b224:	e037883a 	mov	sp,fp
  81b228:	dfc00117 	ldw	ra,4(sp)
  81b22c:	df000017 	ldw	fp,0(sp)
  81b230:	dec00204 	addi	sp,sp,8
  81b234:	f800283a 	ret

0081b238 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81b238:	defff504 	addi	sp,sp,-44
  81b23c:	dfc00a15 	stw	ra,40(sp)
  81b240:	df000915 	stw	fp,36(sp)
  81b244:	df000904 	addi	fp,sp,36
  81b248:	e13ffc15 	stw	r4,-16(fp)
  81b24c:	e1bffe15 	stw	r6,-8(fp)
  81b250:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81b254:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81b258:	e0bffe17 	ldw	r2,-8(fp)
  81b25c:	1004c03a 	cmpne	r2,r2,zero
  81b260:	1000021e 	bne	r2,zero,81b26c <OSQPendAbort+0x34>
        return (0);
  81b264:	e03fff15 	stw	zero,-4(fp)
  81b268:	00004c06 	br	81b39c <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81b26c:	e0bffc17 	ldw	r2,-16(fp)
  81b270:	1004c03a 	cmpne	r2,r2,zero
  81b274:	1000051e 	bne	r2,zero,81b28c <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81b278:	e0fffe17 	ldw	r3,-8(fp)
  81b27c:	00800104 	movi	r2,4
  81b280:	18800005 	stb	r2,0(r3)
        return (0);
  81b284:	e03fff15 	stw	zero,-4(fp)
  81b288:	00004406 	br	81b39c <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  81b28c:	e0bffc17 	ldw	r2,-16(fp)
  81b290:	10800003 	ldbu	r2,0(r2)
  81b294:	10803fcc 	andi	r2,r2,255
  81b298:	108000a0 	cmpeqi	r2,r2,2
  81b29c:	1000051e 	bne	r2,zero,81b2b4 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  81b2a0:	e0fffe17 	ldw	r3,-8(fp)
  81b2a4:	00800044 	movi	r2,1
  81b2a8:	18800005 	stb	r2,0(r3)
        return (0);
  81b2ac:	e03fff15 	stw	zero,-4(fp)
  81b2b0:	00003a06 	br	81b39c <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b2b4:	0005303a 	rdctl	r2,status
  81b2b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b2bc:	e0fff917 	ldw	r3,-28(fp)
  81b2c0:	00bfff84 	movi	r2,-2
  81b2c4:	1884703a 	and	r2,r3,r2
  81b2c8:	1001703a 	wrctl	status,r2
  
  return context;
  81b2cc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81b2d0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  81b2d4:	e0bffc17 	ldw	r2,-16(fp)
  81b2d8:	10800283 	ldbu	r2,10(r2)
  81b2dc:	10803fcc 	andi	r2,r2,255
  81b2e0:	1005003a 	cmpeq	r2,r2,zero
  81b2e4:	1000261e 	bne	r2,zero,81b380 <OSQPendAbort+0x148>
        nbr_tasks = 0;
  81b2e8:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  81b2ec:	e0bffd03 	ldbu	r2,-12(fp)
  81b2f0:	10800060 	cmpeqi	r2,r2,1
  81b2f4:	1000091e 	bne	r2,zero,81b31c <OSQPendAbort+0xe4>
  81b2f8:	00000e06 	br	81b334 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  81b2fc:	e13ffc17 	ldw	r4,-16(fp)
  81b300:	000b883a 	mov	r5,zero
  81b304:	01800104 	movi	r6,4
  81b308:	01c00084 	movi	r7,2
  81b30c:	08173ec0 	call	8173ec <OS_EventTaskRdy>
                     nbr_tasks++;
  81b310:	e0bffb03 	ldbu	r2,-20(fp)
  81b314:	10800044 	addi	r2,r2,1
  81b318:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  81b31c:	e0bffc17 	ldw	r2,-16(fp)
  81b320:	10800283 	ldbu	r2,10(r2)
  81b324:	10803fcc 	andi	r2,r2,255
  81b328:	1004c03a 	cmpne	r2,r2,zero
  81b32c:	103ff31e 	bne	r2,zero,81b2fc <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  81b330:	00000806 	br	81b354 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  81b334:	e13ffc17 	ldw	r4,-16(fp)
  81b338:	000b883a 	mov	r5,zero
  81b33c:	01800104 	movi	r6,4
  81b340:	01c00084 	movi	r7,2
  81b344:	08173ec0 	call	8173ec <OS_EventTaskRdy>
                 nbr_tasks++;
  81b348:	e0bffb03 	ldbu	r2,-20(fp)
  81b34c:	10800044 	addi	r2,r2,1
  81b350:	e0bffb05 	stb	r2,-20(fp)
  81b354:	e0bffa17 	ldw	r2,-24(fp)
  81b358:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b35c:	e0bff817 	ldw	r2,-32(fp)
  81b360:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  81b364:	0817e2c0 	call	817e2c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  81b368:	e0fffe17 	ldw	r3,-8(fp)
  81b36c:	00800384 	movi	r2,14
  81b370:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  81b374:	e0bffb03 	ldbu	r2,-20(fp)
  81b378:	e0bfff15 	stw	r2,-4(fp)
  81b37c:	00000706 	br	81b39c <OSQPendAbort+0x164>
  81b380:	e0bffa17 	ldw	r2,-24(fp)
  81b384:	e0bff715 	stw	r2,-36(fp)
  81b388:	e0bff717 	ldw	r2,-36(fp)
  81b38c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81b390:	e0bffe17 	ldw	r2,-8(fp)
  81b394:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  81b398:	e03fff15 	stw	zero,-4(fp)
  81b39c:	e0bfff17 	ldw	r2,-4(fp)
}
  81b3a0:	e037883a 	mov	sp,fp
  81b3a4:	dfc00117 	ldw	ra,4(sp)
  81b3a8:	df000017 	ldw	fp,0(sp)
  81b3ac:	dec00204 	addi	sp,sp,8
  81b3b0:	f800283a 	ret

0081b3b4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  81b3b4:	defff504 	addi	sp,sp,-44
  81b3b8:	dfc00a15 	stw	ra,40(sp)
  81b3bc:	df000915 	stw	fp,36(sp)
  81b3c0:	df000904 	addi	fp,sp,36
  81b3c4:	e13ffd15 	stw	r4,-12(fp)
  81b3c8:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  81b3cc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  81b3d0:	e0bffd17 	ldw	r2,-12(fp)
  81b3d4:	1004c03a 	cmpne	r2,r2,zero
  81b3d8:	1000031e 	bne	r2,zero,81b3e8 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  81b3dc:	00800104 	movi	r2,4
  81b3e0:	e0bfff15 	stw	r2,-4(fp)
  81b3e4:	00004d06 	br	81b51c <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  81b3e8:	e0bffd17 	ldw	r2,-12(fp)
  81b3ec:	10800003 	ldbu	r2,0(r2)
  81b3f0:	10803fcc 	andi	r2,r2,255
  81b3f4:	108000a0 	cmpeqi	r2,r2,2
  81b3f8:	1000031e 	bne	r2,zero,81b408 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  81b3fc:	00800044 	movi	r2,1
  81b400:	e0bfff15 	stw	r2,-4(fp)
  81b404:	00004506 	br	81b51c <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b408:	0005303a 	rdctl	r2,status
  81b40c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b410:	e0fffa17 	ldw	r3,-24(fp)
  81b414:	00bfff84 	movi	r2,-2
  81b418:	1884703a 	and	r2,r3,r2
  81b41c:	1001703a 	wrctl	status,r2
  
  return context;
  81b420:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81b424:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  81b428:	e0bffd17 	ldw	r2,-12(fp)
  81b42c:	10800283 	ldbu	r2,10(r2)
  81b430:	10803fcc 	andi	r2,r2,255
  81b434:	1005003a 	cmpeq	r2,r2,zero
  81b438:	10000c1e 	bne	r2,zero,81b46c <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81b43c:	e13ffd17 	ldw	r4,-12(fp)
  81b440:	e17ffe17 	ldw	r5,-8(fp)
  81b444:	01800104 	movi	r6,4
  81b448:	000f883a 	mov	r7,zero
  81b44c:	08173ec0 	call	8173ec <OS_EventTaskRdy>
  81b450:	e0bffb17 	ldw	r2,-20(fp)
  81b454:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b458:	e0bff917 	ldw	r2,-28(fp)
  81b45c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  81b460:	0817e2c0 	call	817e2c <OS_Sched>
        return (OS_ERR_NONE);
  81b464:	e03fff15 	stw	zero,-4(fp)
  81b468:	00002c06 	br	81b51c <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  81b46c:	e0bffd17 	ldw	r2,-12(fp)
  81b470:	10800117 	ldw	r2,4(r2)
  81b474:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  81b478:	e0bffc17 	ldw	r2,-16(fp)
  81b47c:	10c0058b 	ldhu	r3,22(r2)
  81b480:	e0bffc17 	ldw	r2,-16(fp)
  81b484:	1080050b 	ldhu	r2,20(r2)
  81b488:	18ffffcc 	andi	r3,r3,65535
  81b48c:	10bfffcc 	andi	r2,r2,65535
  81b490:	18800736 	bltu	r3,r2,81b4b0 <OSQPost+0xfc>
  81b494:	e0bffb17 	ldw	r2,-20(fp)
  81b498:	e0bff815 	stw	r2,-32(fp)
  81b49c:	e0bff817 	ldw	r2,-32(fp)
  81b4a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  81b4a4:	00800784 	movi	r2,30
  81b4a8:	e0bfff15 	stw	r2,-4(fp)
  81b4ac:	00001b06 	br	81b51c <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  81b4b0:	e0bffc17 	ldw	r2,-16(fp)
  81b4b4:	10c00317 	ldw	r3,12(r2)
  81b4b8:	e0bffe17 	ldw	r2,-8(fp)
  81b4bc:	18800015 	stw	r2,0(r3)
  81b4c0:	18c00104 	addi	r3,r3,4
  81b4c4:	e0bffc17 	ldw	r2,-16(fp)
  81b4c8:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  81b4cc:	e0bffc17 	ldw	r2,-16(fp)
  81b4d0:	1080058b 	ldhu	r2,22(r2)
  81b4d4:	10800044 	addi	r2,r2,1
  81b4d8:	1007883a 	mov	r3,r2
  81b4dc:	e0bffc17 	ldw	r2,-16(fp)
  81b4e0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  81b4e4:	e0bffc17 	ldw	r2,-16(fp)
  81b4e8:	10c00317 	ldw	r3,12(r2)
  81b4ec:	e0bffc17 	ldw	r2,-16(fp)
  81b4f0:	10800217 	ldw	r2,8(r2)
  81b4f4:	1880041e 	bne	r3,r2,81b508 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  81b4f8:	e0bffc17 	ldw	r2,-16(fp)
  81b4fc:	10c00117 	ldw	r3,4(r2)
  81b500:	e0bffc17 	ldw	r2,-16(fp)
  81b504:	10c00315 	stw	r3,12(r2)
  81b508:	e0bffb17 	ldw	r2,-20(fp)
  81b50c:	e0bff715 	stw	r2,-36(fp)
  81b510:	e0bff717 	ldw	r2,-36(fp)
  81b514:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81b518:	e03fff15 	stw	zero,-4(fp)
  81b51c:	e0bfff17 	ldw	r2,-4(fp)
}
  81b520:	e037883a 	mov	sp,fp
  81b524:	dfc00117 	ldw	ra,4(sp)
  81b528:	df000017 	ldw	fp,0(sp)
  81b52c:	dec00204 	addi	sp,sp,8
  81b530:	f800283a 	ret

0081b534 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  81b534:	defff504 	addi	sp,sp,-44
  81b538:	dfc00a15 	stw	ra,40(sp)
  81b53c:	df000915 	stw	fp,36(sp)
  81b540:	df000904 	addi	fp,sp,36
  81b544:	e13ffd15 	stw	r4,-12(fp)
  81b548:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81b54c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81b550:	e0bffd17 	ldw	r2,-12(fp)
  81b554:	1004c03a 	cmpne	r2,r2,zero
  81b558:	1000031e 	bne	r2,zero,81b568 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  81b55c:	00800104 	movi	r2,4
  81b560:	e0bfff15 	stw	r2,-4(fp)
  81b564:	00004f06 	br	81b6a4 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  81b568:	e0bffd17 	ldw	r2,-12(fp)
  81b56c:	10800003 	ldbu	r2,0(r2)
  81b570:	10803fcc 	andi	r2,r2,255
  81b574:	108000a0 	cmpeqi	r2,r2,2
  81b578:	1000031e 	bne	r2,zero,81b588 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  81b57c:	00800044 	movi	r2,1
  81b580:	e0bfff15 	stw	r2,-4(fp)
  81b584:	00004706 	br	81b6a4 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b588:	0005303a 	rdctl	r2,status
  81b58c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b590:	e0fffa17 	ldw	r3,-24(fp)
  81b594:	00bfff84 	movi	r2,-2
  81b598:	1884703a 	and	r2,r3,r2
  81b59c:	1001703a 	wrctl	status,r2
  
  return context;
  81b5a0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81b5a4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  81b5a8:	e0bffd17 	ldw	r2,-12(fp)
  81b5ac:	10800283 	ldbu	r2,10(r2)
  81b5b0:	10803fcc 	andi	r2,r2,255
  81b5b4:	1005003a 	cmpeq	r2,r2,zero
  81b5b8:	10000c1e 	bne	r2,zero,81b5ec <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81b5bc:	e13ffd17 	ldw	r4,-12(fp)
  81b5c0:	e17ffe17 	ldw	r5,-8(fp)
  81b5c4:	01800104 	movi	r6,4
  81b5c8:	000f883a 	mov	r7,zero
  81b5cc:	08173ec0 	call	8173ec <OS_EventTaskRdy>
  81b5d0:	e0bffb17 	ldw	r2,-20(fp)
  81b5d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b5d8:	e0bff917 	ldw	r2,-28(fp)
  81b5dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  81b5e0:	0817e2c0 	call	817e2c <OS_Sched>
        return (OS_ERR_NONE);
  81b5e4:	e03fff15 	stw	zero,-4(fp)
  81b5e8:	00002e06 	br	81b6a4 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  81b5ec:	e0bffd17 	ldw	r2,-12(fp)
  81b5f0:	10800117 	ldw	r2,4(r2)
  81b5f4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  81b5f8:	e0bffc17 	ldw	r2,-16(fp)
  81b5fc:	10c0058b 	ldhu	r3,22(r2)
  81b600:	e0bffc17 	ldw	r2,-16(fp)
  81b604:	1080050b 	ldhu	r2,20(r2)
  81b608:	18ffffcc 	andi	r3,r3,65535
  81b60c:	10bfffcc 	andi	r2,r2,65535
  81b610:	18800736 	bltu	r3,r2,81b630 <OSQPostFront+0xfc>
  81b614:	e0bffb17 	ldw	r2,-20(fp)
  81b618:	e0bff815 	stw	r2,-32(fp)
  81b61c:	e0bff817 	ldw	r2,-32(fp)
  81b620:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  81b624:	00800784 	movi	r2,30
  81b628:	e0bfff15 	stw	r2,-4(fp)
  81b62c:	00001d06 	br	81b6a4 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  81b630:	e0bffc17 	ldw	r2,-16(fp)
  81b634:	10c00417 	ldw	r3,16(r2)
  81b638:	e0bffc17 	ldw	r2,-16(fp)
  81b63c:	10800117 	ldw	r2,4(r2)
  81b640:	1880041e 	bne	r3,r2,81b654 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  81b644:	e0bffc17 	ldw	r2,-16(fp)
  81b648:	10c00217 	ldw	r3,8(r2)
  81b64c:	e0bffc17 	ldw	r2,-16(fp)
  81b650:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  81b654:	e0bffc17 	ldw	r2,-16(fp)
  81b658:	10800417 	ldw	r2,16(r2)
  81b65c:	10ffff04 	addi	r3,r2,-4
  81b660:	e0bffc17 	ldw	r2,-16(fp)
  81b664:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  81b668:	e0bffc17 	ldw	r2,-16(fp)
  81b66c:	10c00417 	ldw	r3,16(r2)
  81b670:	e0bffe17 	ldw	r2,-8(fp)
  81b674:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  81b678:	e0bffc17 	ldw	r2,-16(fp)
  81b67c:	1080058b 	ldhu	r2,22(r2)
  81b680:	10800044 	addi	r2,r2,1
  81b684:	1007883a 	mov	r3,r2
  81b688:	e0bffc17 	ldw	r2,-16(fp)
  81b68c:	10c0058d 	sth	r3,22(r2)
  81b690:	e0bffb17 	ldw	r2,-20(fp)
  81b694:	e0bff715 	stw	r2,-36(fp)
  81b698:	e0bff717 	ldw	r2,-36(fp)
  81b69c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81b6a0:	e03fff15 	stw	zero,-4(fp)
  81b6a4:	e0bfff17 	ldw	r2,-4(fp)
}
  81b6a8:	e037883a 	mov	sp,fp
  81b6ac:	dfc00117 	ldw	ra,4(sp)
  81b6b0:	df000017 	ldw	fp,0(sp)
  81b6b4:	dec00204 	addi	sp,sp,8
  81b6b8:	f800283a 	ret

0081b6bc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  81b6bc:	defff404 	addi	sp,sp,-48
  81b6c0:	dfc00b15 	stw	ra,44(sp)
  81b6c4:	df000a15 	stw	fp,40(sp)
  81b6c8:	df000a04 	addi	fp,sp,40
  81b6cc:	e13ffc15 	stw	r4,-16(fp)
  81b6d0:	e17ffd15 	stw	r5,-12(fp)
  81b6d4:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81b6d8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81b6dc:	e0bffc17 	ldw	r2,-16(fp)
  81b6e0:	1004c03a 	cmpne	r2,r2,zero
  81b6e4:	1000031e 	bne	r2,zero,81b6f4 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  81b6e8:	00800104 	movi	r2,4
  81b6ec:	e0bfff15 	stw	r2,-4(fp)
  81b6f0:	00007906 	br	81b8d8 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  81b6f4:	e0bffc17 	ldw	r2,-16(fp)
  81b6f8:	10800003 	ldbu	r2,0(r2)
  81b6fc:	10803fcc 	andi	r2,r2,255
  81b700:	108000a0 	cmpeqi	r2,r2,2
  81b704:	1000031e 	bne	r2,zero,81b714 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  81b708:	00800044 	movi	r2,1
  81b70c:	e0bfff15 	stw	r2,-4(fp)
  81b710:	00007106 	br	81b8d8 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b714:	0005303a 	rdctl	r2,status
  81b718:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b71c:	e0fff917 	ldw	r3,-28(fp)
  81b720:	00bfff84 	movi	r2,-2
  81b724:	1884703a 	and	r2,r3,r2
  81b728:	1001703a 	wrctl	status,r2
  
  return context;
  81b72c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81b730:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  81b734:	e0bffc17 	ldw	r2,-16(fp)
  81b738:	10800283 	ldbu	r2,10(r2)
  81b73c:	10803fcc 	andi	r2,r2,255
  81b740:	1005003a 	cmpeq	r2,r2,zero
  81b744:	1000211e 	bne	r2,zero,81b7cc <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  81b748:	e0bffe03 	ldbu	r2,-8(fp)
  81b74c:	1080004c 	andi	r2,r2,1
  81b750:	10803fcc 	andi	r2,r2,255
  81b754:	1005003a 	cmpeq	r2,r2,zero
  81b758:	10000c1e 	bne	r2,zero,81b78c <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  81b75c:	00000506 	br	81b774 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81b760:	e13ffc17 	ldw	r4,-16(fp)
  81b764:	e17ffd17 	ldw	r5,-12(fp)
  81b768:	01800104 	movi	r6,4
  81b76c:	000f883a 	mov	r7,zero
  81b770:	08173ec0 	call	8173ec <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  81b774:	e0bffc17 	ldw	r2,-16(fp)
  81b778:	10800283 	ldbu	r2,10(r2)
  81b77c:	10803fcc 	andi	r2,r2,255
  81b780:	1004c03a 	cmpne	r2,r2,zero
  81b784:	103ff61e 	bne	r2,zero,81b760 <OSQPostOpt+0xa4>
  81b788:	00000506 	br	81b7a0 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81b78c:	e13ffc17 	ldw	r4,-16(fp)
  81b790:	e17ffd17 	ldw	r5,-12(fp)
  81b794:	01800104 	movi	r6,4
  81b798:	000f883a 	mov	r7,zero
  81b79c:	08173ec0 	call	8173ec <OS_EventTaskRdy>
  81b7a0:	e0bffa17 	ldw	r2,-24(fp)
  81b7a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b7a8:	e0bff817 	ldw	r2,-32(fp)
  81b7ac:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  81b7b0:	e0bffe03 	ldbu	r2,-8(fp)
  81b7b4:	1080010c 	andi	r2,r2,4
  81b7b8:	1004c03a 	cmpne	r2,r2,zero
  81b7bc:	1000011e 	bne	r2,zero,81b7c4 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  81b7c0:	0817e2c0 	call	817e2c <OS_Sched>
        }
        return (OS_ERR_NONE);
  81b7c4:	e03fff15 	stw	zero,-4(fp)
  81b7c8:	00004306 	br	81b8d8 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  81b7cc:	e0bffc17 	ldw	r2,-16(fp)
  81b7d0:	10800117 	ldw	r2,4(r2)
  81b7d4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  81b7d8:	e0bffb17 	ldw	r2,-20(fp)
  81b7dc:	10c0058b 	ldhu	r3,22(r2)
  81b7e0:	e0bffb17 	ldw	r2,-20(fp)
  81b7e4:	1080050b 	ldhu	r2,20(r2)
  81b7e8:	18ffffcc 	andi	r3,r3,65535
  81b7ec:	10bfffcc 	andi	r2,r2,65535
  81b7f0:	18800736 	bltu	r3,r2,81b810 <OSQPostOpt+0x154>
  81b7f4:	e0bffa17 	ldw	r2,-24(fp)
  81b7f8:	e0bff715 	stw	r2,-36(fp)
  81b7fc:	e0bff717 	ldw	r2,-36(fp)
  81b800:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  81b804:	00800784 	movi	r2,30
  81b808:	e0bfff15 	stw	r2,-4(fp)
  81b80c:	00003206 	br	81b8d8 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  81b810:	e0bffe03 	ldbu	r2,-8(fp)
  81b814:	1080008c 	andi	r2,r2,2
  81b818:	1005003a 	cmpeq	r2,r2,zero
  81b81c:	1000131e 	bne	r2,zero,81b86c <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  81b820:	e0bffb17 	ldw	r2,-20(fp)
  81b824:	10c00417 	ldw	r3,16(r2)
  81b828:	e0bffb17 	ldw	r2,-20(fp)
  81b82c:	10800117 	ldw	r2,4(r2)
  81b830:	1880041e 	bne	r3,r2,81b844 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  81b834:	e0bffb17 	ldw	r2,-20(fp)
  81b838:	10c00217 	ldw	r3,8(r2)
  81b83c:	e0bffb17 	ldw	r2,-20(fp)
  81b840:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  81b844:	e0bffb17 	ldw	r2,-20(fp)
  81b848:	10800417 	ldw	r2,16(r2)
  81b84c:	10ffff04 	addi	r3,r2,-4
  81b850:	e0bffb17 	ldw	r2,-20(fp)
  81b854:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  81b858:	e0bffb17 	ldw	r2,-20(fp)
  81b85c:	10c00417 	ldw	r3,16(r2)
  81b860:	e0bffd17 	ldw	r2,-12(fp)
  81b864:	18800015 	stw	r2,0(r3)
  81b868:	00001006 	br	81b8ac <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  81b86c:	e0bffb17 	ldw	r2,-20(fp)
  81b870:	10c00317 	ldw	r3,12(r2)
  81b874:	e0bffd17 	ldw	r2,-12(fp)
  81b878:	18800015 	stw	r2,0(r3)
  81b87c:	18c00104 	addi	r3,r3,4
  81b880:	e0bffb17 	ldw	r2,-20(fp)
  81b884:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  81b888:	e0bffb17 	ldw	r2,-20(fp)
  81b88c:	10c00317 	ldw	r3,12(r2)
  81b890:	e0bffb17 	ldw	r2,-20(fp)
  81b894:	10800217 	ldw	r2,8(r2)
  81b898:	1880041e 	bne	r3,r2,81b8ac <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  81b89c:	e0bffb17 	ldw	r2,-20(fp)
  81b8a0:	10c00117 	ldw	r3,4(r2)
  81b8a4:	e0bffb17 	ldw	r2,-20(fp)
  81b8a8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  81b8ac:	e0bffb17 	ldw	r2,-20(fp)
  81b8b0:	1080058b 	ldhu	r2,22(r2)
  81b8b4:	10800044 	addi	r2,r2,1
  81b8b8:	1007883a 	mov	r3,r2
  81b8bc:	e0bffb17 	ldw	r2,-20(fp)
  81b8c0:	10c0058d 	sth	r3,22(r2)
  81b8c4:	e0bffa17 	ldw	r2,-24(fp)
  81b8c8:	e0bff615 	stw	r2,-40(fp)
  81b8cc:	e0bff617 	ldw	r2,-40(fp)
  81b8d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81b8d4:	e03fff15 	stw	zero,-4(fp)
  81b8d8:	e0bfff17 	ldw	r2,-4(fp)
}
  81b8dc:	e037883a 	mov	sp,fp
  81b8e0:	dfc00117 	ldw	ra,4(sp)
  81b8e4:	df000017 	ldw	fp,0(sp)
  81b8e8:	dec00204 	addi	sp,sp,8
  81b8ec:	f800283a 	ret

0081b8f0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  81b8f0:	defff504 	addi	sp,sp,-44
  81b8f4:	df000a15 	stw	fp,40(sp)
  81b8f8:	df000a04 	addi	fp,sp,40
  81b8fc:	e13ffd15 	stw	r4,-12(fp)
  81b900:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  81b904:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  81b908:	e0bffd17 	ldw	r2,-12(fp)
  81b90c:	1004c03a 	cmpne	r2,r2,zero
  81b910:	1000031e 	bne	r2,zero,81b920 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  81b914:	00800104 	movi	r2,4
  81b918:	e0bfff15 	stw	r2,-4(fp)
  81b91c:	00004f06 	br	81ba5c <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  81b920:	e0bffe17 	ldw	r2,-8(fp)
  81b924:	1004c03a 	cmpne	r2,r2,zero
  81b928:	1000031e 	bne	r2,zero,81b938 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  81b92c:	00800244 	movi	r2,9
  81b930:	e0bfff15 	stw	r2,-4(fp)
  81b934:	00004906 	br	81ba5c <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  81b938:	e0bffd17 	ldw	r2,-12(fp)
  81b93c:	10800003 	ldbu	r2,0(r2)
  81b940:	10803fcc 	andi	r2,r2,255
  81b944:	108000a0 	cmpeqi	r2,r2,2
  81b948:	1000031e 	bne	r2,zero,81b958 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  81b94c:	00800044 	movi	r2,1
  81b950:	e0bfff15 	stw	r2,-4(fp)
  81b954:	00004106 	br	81ba5c <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b958:	0005303a 	rdctl	r2,status
  81b95c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b960:	e0fff717 	ldw	r3,-36(fp)
  81b964:	00bfff84 	movi	r2,-2
  81b968:	1884703a 	and	r2,r3,r2
  81b96c:	1001703a 	wrctl	status,r2
  
  return context;
  81b970:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81b974:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  81b978:	e0bffd17 	ldw	r2,-12(fp)
  81b97c:	10c00283 	ldbu	r3,10(r2)
  81b980:	e0bffe17 	ldw	r2,-8(fp)
  81b984:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  81b988:	e0bffd17 	ldw	r2,-12(fp)
  81b98c:	108002c4 	addi	r2,r2,11
  81b990:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  81b994:	e0bffe17 	ldw	r2,-8(fp)
  81b998:	10800204 	addi	r2,r2,8
  81b99c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81b9a0:	e03ffb05 	stb	zero,-20(fp)
  81b9a4:	00000d06 	br	81b9dc <OSQQuery+0xec>
        *pdest++ = *psrc++;
  81b9a8:	e0bffa17 	ldw	r2,-24(fp)
  81b9ac:	10c00003 	ldbu	r3,0(r2)
  81b9b0:	e0bff917 	ldw	r2,-28(fp)
  81b9b4:	10c00005 	stb	r3,0(r2)
  81b9b8:	e0bff917 	ldw	r2,-28(fp)
  81b9bc:	10800044 	addi	r2,r2,1
  81b9c0:	e0bff915 	stw	r2,-28(fp)
  81b9c4:	e0bffa17 	ldw	r2,-24(fp)
  81b9c8:	10800044 	addi	r2,r2,1
  81b9cc:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81b9d0:	e0bffb03 	ldbu	r2,-20(fp)
  81b9d4:	10800044 	addi	r2,r2,1
  81b9d8:	e0bffb05 	stb	r2,-20(fp)
  81b9dc:	e0bffb03 	ldbu	r2,-20(fp)
  81b9e0:	108000f0 	cmpltui	r2,r2,3
  81b9e4:	103ff01e 	bne	r2,zero,81b9a8 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  81b9e8:	e0bffd17 	ldw	r2,-12(fp)
  81b9ec:	10800117 	ldw	r2,4(r2)
  81b9f0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  81b9f4:	e0bffc17 	ldw	r2,-16(fp)
  81b9f8:	1080058b 	ldhu	r2,22(r2)
  81b9fc:	10bfffcc 	andi	r2,r2,65535
  81ba00:	1005003a 	cmpeq	r2,r2,zero
  81ba04:	1000061e 	bne	r2,zero,81ba20 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  81ba08:	e0bffc17 	ldw	r2,-16(fp)
  81ba0c:	10800417 	ldw	r2,16(r2)
  81ba10:	10c00017 	ldw	r3,0(r2)
  81ba14:	e0bffe17 	ldw	r2,-8(fp)
  81ba18:	10c00015 	stw	r3,0(r2)
  81ba1c:	00000206 	br	81ba28 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  81ba20:	e0bffe17 	ldw	r2,-8(fp)
  81ba24:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  81ba28:	e0bffc17 	ldw	r2,-16(fp)
  81ba2c:	10c0058b 	ldhu	r3,22(r2)
  81ba30:	e0bffe17 	ldw	r2,-8(fp)
  81ba34:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  81ba38:	e0bffc17 	ldw	r2,-16(fp)
  81ba3c:	10c0050b 	ldhu	r3,20(r2)
  81ba40:	e0bffe17 	ldw	r2,-8(fp)
  81ba44:	10c0018d 	sth	r3,6(r2)
  81ba48:	e0bff817 	ldw	r2,-32(fp)
  81ba4c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ba50:	e0bff617 	ldw	r2,-40(fp)
  81ba54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81ba58:	e03fff15 	stw	zero,-4(fp)
  81ba5c:	e0bfff17 	ldw	r2,-4(fp)
}
  81ba60:	e037883a 	mov	sp,fp
  81ba64:	df000017 	ldw	fp,0(sp)
  81ba68:	dec00104 	addi	sp,sp,4
  81ba6c:	f800283a 	ret

0081ba70 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  81ba70:	defffb04 	addi	sp,sp,-20
  81ba74:	dfc00415 	stw	ra,16(sp)
  81ba78:	df000315 	stw	fp,12(sp)
  81ba7c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  81ba80:	010020f4 	movhi	r4,131
  81ba84:	21238804 	addi	r4,r4,-29152
  81ba88:	01407804 	movi	r5,480
  81ba8c:	0817d6c0 	call	817d6c <OS_MemClr>
    pq1 = &OSQTbl[0];
  81ba90:	008020f4 	movhi	r2,131
  81ba94:	10a38804 	addi	r2,r2,-29152
  81ba98:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  81ba9c:	008020f4 	movhi	r2,131
  81baa0:	10a38e04 	addi	r2,r2,-29128
  81baa4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  81baa8:	e03fff0d 	sth	zero,-4(fp)
  81baac:	00000c06 	br	81bae0 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  81bab0:	e0fffe17 	ldw	r3,-8(fp)
  81bab4:	e0bffd17 	ldw	r2,-12(fp)
  81bab8:	18800015 	stw	r2,0(r3)
        pq1++;
  81babc:	e0bffe17 	ldw	r2,-8(fp)
  81bac0:	10800604 	addi	r2,r2,24
  81bac4:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  81bac8:	e0bffd17 	ldw	r2,-12(fp)
  81bacc:	10800604 	addi	r2,r2,24
  81bad0:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  81bad4:	e0bfff0b 	ldhu	r2,-4(fp)
  81bad8:	10800044 	addi	r2,r2,1
  81badc:	e0bfff0d 	sth	r2,-4(fp)
  81bae0:	e0bfff0b 	ldhu	r2,-4(fp)
  81bae4:	108004f0 	cmpltui	r2,r2,19
  81bae8:	103ff11e 	bne	r2,zero,81bab0 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  81baec:	e0bffe17 	ldw	r2,-8(fp)
  81baf0:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  81baf4:	00c020b4 	movhi	r3,130
  81baf8:	18d58a04 	addi	r3,r3,22056
  81bafc:	008020f4 	movhi	r2,131
  81bb00:	10a38804 	addi	r2,r2,-29152
  81bb04:	18800015 	stw	r2,0(r3)
#endif
}
  81bb08:	e037883a 	mov	sp,fp
  81bb0c:	dfc00117 	ldw	ra,4(sp)
  81bb10:	df000017 	ldw	fp,0(sp)
  81bb14:	dec00204 	addi	sp,sp,8
  81bb18:	f800283a 	ret

0081bb1c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  81bb1c:	defff904 	addi	sp,sp,-28
  81bb20:	df000615 	stw	fp,24(sp)
  81bb24:	df000604 	addi	fp,sp,24
  81bb28:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81bb2c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81bb30:	e0bffe17 	ldw	r2,-8(fp)
  81bb34:	1004c03a 	cmpne	r2,r2,zero
  81bb38:	1000021e 	bne	r2,zero,81bb44 <OSSemAccept+0x28>
        return (0);
  81bb3c:	e03fff15 	stw	zero,-4(fp)
  81bb40:	00002106 	br	81bbc8 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81bb44:	e0bffe17 	ldw	r2,-8(fp)
  81bb48:	10800003 	ldbu	r2,0(r2)
  81bb4c:	10803fcc 	andi	r2,r2,255
  81bb50:	108000e0 	cmpeqi	r2,r2,3
  81bb54:	1000021e 	bne	r2,zero,81bb60 <OSSemAccept+0x44>
        return (0);
  81bb58:	e03fff15 	stw	zero,-4(fp)
  81bb5c:	00001a06 	br	81bbc8 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81bb60:	0005303a 	rdctl	r2,status
  81bb64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81bb68:	e0fffb17 	ldw	r3,-20(fp)
  81bb6c:	00bfff84 	movi	r2,-2
  81bb70:	1884703a 	and	r2,r3,r2
  81bb74:	1001703a 	wrctl	status,r2
  
  return context;
  81bb78:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81bb7c:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  81bb80:	e0bffe17 	ldw	r2,-8(fp)
  81bb84:	1080020b 	ldhu	r2,8(r2)
  81bb88:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  81bb8c:	e0bffd0b 	ldhu	r2,-12(fp)
  81bb90:	1005003a 	cmpeq	r2,r2,zero
  81bb94:	1000061e 	bne	r2,zero,81bbb0 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  81bb98:	e0bffe17 	ldw	r2,-8(fp)
  81bb9c:	1080020b 	ldhu	r2,8(r2)
  81bba0:	10bfffc4 	addi	r2,r2,-1
  81bba4:	1007883a 	mov	r3,r2
  81bba8:	e0bffe17 	ldw	r2,-8(fp)
  81bbac:	10c0020d 	sth	r3,8(r2)
  81bbb0:	e0bffc17 	ldw	r2,-16(fp)
  81bbb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81bbb8:	e0bffa17 	ldw	r2,-24(fp)
  81bbbc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  81bbc0:	e0bffd0b 	ldhu	r2,-12(fp)
  81bbc4:	e0bfff15 	stw	r2,-4(fp)
  81bbc8:	e0bfff17 	ldw	r2,-4(fp)
}
  81bbcc:	e037883a 	mov	sp,fp
  81bbd0:	df000017 	ldw	fp,0(sp)
  81bbd4:	dec00104 	addi	sp,sp,4
  81bbd8:	f800283a 	ret

0081bbdc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  81bbdc:	defff804 	addi	sp,sp,-32
  81bbe0:	dfc00715 	stw	ra,28(sp)
  81bbe4:	df000615 	stw	fp,24(sp)
  81bbe8:	df000604 	addi	fp,sp,24
  81bbec:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81bbf0:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81bbf4:	008020b4 	movhi	r2,130
  81bbf8:	10958d04 	addi	r2,r2,22068
  81bbfc:	10800003 	ldbu	r2,0(r2)
  81bc00:	10803fcc 	andi	r2,r2,255
  81bc04:	1005003a 	cmpeq	r2,r2,zero
  81bc08:	1000021e 	bne	r2,zero,81bc14 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  81bc0c:	e03fff15 	stw	zero,-4(fp)
  81bc10:	00003106 	br	81bcd8 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81bc14:	0005303a 	rdctl	r2,status
  81bc18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81bc1c:	e0fffb17 	ldw	r3,-20(fp)
  81bc20:	00bfff84 	movi	r2,-2
  81bc24:	1884703a 	and	r2,r3,r2
  81bc28:	1001703a 	wrctl	status,r2
  
  return context;
  81bc2c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81bc30:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  81bc34:	008020b4 	movhi	r2,130
  81bc38:	10958c04 	addi	r2,r2,22064
  81bc3c:	10800017 	ldw	r2,0(r2)
  81bc40:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  81bc44:	008020b4 	movhi	r2,130
  81bc48:	10958c04 	addi	r2,r2,22064
  81bc4c:	10800017 	ldw	r2,0(r2)
  81bc50:	1005003a 	cmpeq	r2,r2,zero
  81bc54:	1000081e 	bne	r2,zero,81bc78 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  81bc58:	008020b4 	movhi	r2,130
  81bc5c:	10958c04 	addi	r2,r2,22064
  81bc60:	10800017 	ldw	r2,0(r2)
  81bc64:	10800117 	ldw	r2,4(r2)
  81bc68:	1007883a 	mov	r3,r2
  81bc6c:	008020b4 	movhi	r2,130
  81bc70:	10958c04 	addi	r2,r2,22064
  81bc74:	10c00015 	stw	r3,0(r2)
  81bc78:	e0bffc17 	ldw	r2,-16(fp)
  81bc7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81bc80:	e0bffa17 	ldw	r2,-24(fp)
  81bc84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  81bc88:	e0bffd17 	ldw	r2,-12(fp)
  81bc8c:	1005003a 	cmpeq	r2,r2,zero
  81bc90:	10000f1e 	bne	r2,zero,81bcd0 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  81bc94:	e0fffd17 	ldw	r3,-12(fp)
  81bc98:	008000c4 	movi	r2,3
  81bc9c:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  81bca0:	e0fffd17 	ldw	r3,-12(fp)
  81bca4:	e0bffe0b 	ldhu	r2,-8(fp)
  81bca8:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  81bcac:	e0bffd17 	ldw	r2,-12(fp)
  81bcb0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  81bcb4:	e0fffd17 	ldw	r3,-12(fp)
  81bcb8:	00800fc4 	movi	r2,63
  81bcbc:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  81bcc0:	e0bffd17 	ldw	r2,-12(fp)
  81bcc4:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  81bcc8:	e13ffd17 	ldw	r4,-12(fp)
  81bccc:	08179a00 	call	8179a0 <OS_EventWaitListInit>
    }
    return (pevent);
  81bcd0:	e0bffd17 	ldw	r2,-12(fp)
  81bcd4:	e0bfff15 	stw	r2,-4(fp)
  81bcd8:	e0bfff17 	ldw	r2,-4(fp)
}
  81bcdc:	e037883a 	mov	sp,fp
  81bce0:	dfc00117 	ldw	ra,4(sp)
  81bce4:	df000017 	ldw	fp,0(sp)
  81bce8:	dec00204 	addi	sp,sp,8
  81bcec:	f800283a 	ret

0081bcf0 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81bcf0:	defff104 	addi	sp,sp,-60
  81bcf4:	dfc00e15 	stw	ra,56(sp)
  81bcf8:	df000d15 	stw	fp,52(sp)
  81bcfc:	df000d04 	addi	fp,sp,52
  81bd00:	e13ffb15 	stw	r4,-20(fp)
  81bd04:	e1bffd15 	stw	r6,-12(fp)
  81bd08:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81bd0c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81bd10:	e0bffd17 	ldw	r2,-12(fp)
  81bd14:	1004c03a 	cmpne	r2,r2,zero
  81bd18:	1000031e 	bne	r2,zero,81bd28 <OSSemDel+0x38>
        return (pevent);
  81bd1c:	e0bffb17 	ldw	r2,-20(fp)
  81bd20:	e0bfff15 	stw	r2,-4(fp)
  81bd24:	00009406 	br	81bf78 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81bd28:	e0bffb17 	ldw	r2,-20(fp)
  81bd2c:	1004c03a 	cmpne	r2,r2,zero
  81bd30:	1000061e 	bne	r2,zero,81bd4c <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  81bd34:	e0fffd17 	ldw	r3,-12(fp)
  81bd38:	00800104 	movi	r2,4
  81bd3c:	18800005 	stb	r2,0(r3)
        return (pevent);
  81bd40:	e0fffb17 	ldw	r3,-20(fp)
  81bd44:	e0ffff15 	stw	r3,-4(fp)
  81bd48:	00008b06 	br	81bf78 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  81bd4c:	e0bffb17 	ldw	r2,-20(fp)
  81bd50:	10800003 	ldbu	r2,0(r2)
  81bd54:	10803fcc 	andi	r2,r2,255
  81bd58:	108000e0 	cmpeqi	r2,r2,3
  81bd5c:	1000061e 	bne	r2,zero,81bd78 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  81bd60:	e0fffd17 	ldw	r3,-12(fp)
  81bd64:	00800044 	movi	r2,1
  81bd68:	18800005 	stb	r2,0(r3)
        return (pevent);
  81bd6c:	e0bffb17 	ldw	r2,-20(fp)
  81bd70:	e0bfff15 	stw	r2,-4(fp)
  81bd74:	00008006 	br	81bf78 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  81bd78:	008020b4 	movhi	r2,130
  81bd7c:	10958d04 	addi	r2,r2,22068
  81bd80:	10800003 	ldbu	r2,0(r2)
  81bd84:	10803fcc 	andi	r2,r2,255
  81bd88:	1005003a 	cmpeq	r2,r2,zero
  81bd8c:	1000061e 	bne	r2,zero,81bda8 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  81bd90:	e0fffd17 	ldw	r3,-12(fp)
  81bd94:	008003c4 	movi	r2,15
  81bd98:	18800005 	stb	r2,0(r3)
        return (pevent);
  81bd9c:	e0fffb17 	ldw	r3,-20(fp)
  81bda0:	e0ffff15 	stw	r3,-4(fp)
  81bda4:	00007406 	br	81bf78 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81bda8:	0005303a 	rdctl	r2,status
  81bdac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81bdb0:	e0fff717 	ldw	r3,-36(fp)
  81bdb4:	00bfff84 	movi	r2,-2
  81bdb8:	1884703a 	and	r2,r3,r2
  81bdbc:	1001703a 	wrctl	status,r2
  
  return context;
  81bdc0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81bdc4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  81bdc8:	e0bffb17 	ldw	r2,-20(fp)
  81bdcc:	10800283 	ldbu	r2,10(r2)
  81bdd0:	10803fcc 	andi	r2,r2,255
  81bdd4:	1005003a 	cmpeq	r2,r2,zero
  81bdd8:	1000031e 	bne	r2,zero,81bde8 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  81bddc:	00800044 	movi	r2,1
  81bde0:	e0bffa05 	stb	r2,-24(fp)
  81bde4:	00000106 	br	81bdec <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  81bde8:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  81bdec:	e0bffc03 	ldbu	r2,-16(fp)
  81bdf0:	e0bffe15 	stw	r2,-8(fp)
  81bdf4:	e0fffe17 	ldw	r3,-8(fp)
  81bdf8:	1805003a 	cmpeq	r2,r3,zero
  81bdfc:	1000041e 	bne	r2,zero,81be10 <OSSemDel+0x120>
  81be00:	e0fffe17 	ldw	r3,-8(fp)
  81be04:	18800060 	cmpeqi	r2,r3,1
  81be08:	10002d1e 	bne	r2,zero,81bec0 <OSSemDel+0x1d0>
  81be0c:	00004f06 	br	81bf4c <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  81be10:	e0bffa03 	ldbu	r2,-24(fp)
  81be14:	1004c03a 	cmpne	r2,r2,zero
  81be18:	10001a1e 	bne	r2,zero,81be84 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  81be1c:	e0fffb17 	ldw	r3,-20(fp)
  81be20:	00800fc4 	movi	r2,63
  81be24:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  81be28:	e0bffb17 	ldw	r2,-20(fp)
  81be2c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81be30:	e0bffb17 	ldw	r2,-20(fp)
  81be34:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  81be38:	008020b4 	movhi	r2,130
  81be3c:	10958c04 	addi	r2,r2,22064
  81be40:	10c00017 	ldw	r3,0(r2)
  81be44:	e0bffb17 	ldw	r2,-20(fp)
  81be48:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  81be4c:	e0bffb17 	ldw	r2,-20(fp)
  81be50:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  81be54:	00c020b4 	movhi	r3,130
  81be58:	18d58c04 	addi	r3,r3,22064
  81be5c:	e0bffb17 	ldw	r2,-20(fp)
  81be60:	18800015 	stw	r2,0(r3)
  81be64:	e0bff817 	ldw	r2,-32(fp)
  81be68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81be6c:	e0bff617 	ldw	r2,-40(fp)
  81be70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  81be74:	e0bffd17 	ldw	r2,-12(fp)
  81be78:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  81be7c:	e03ff915 	stw	zero,-28(fp)
  81be80:	00003b06 	br	81bf70 <OSSemDel+0x280>
  81be84:	e0bff817 	ldw	r2,-32(fp)
  81be88:	e0bff515 	stw	r2,-44(fp)
  81be8c:	e0bff517 	ldw	r2,-44(fp)
  81be90:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  81be94:	e0fffd17 	ldw	r3,-12(fp)
  81be98:	00801244 	movi	r2,73
  81be9c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  81bea0:	e0bffb17 	ldw	r2,-20(fp)
  81bea4:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  81bea8:	00003106 	br	81bf70 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  81beac:	e13ffb17 	ldw	r4,-20(fp)
  81beb0:	000b883a 	mov	r5,zero
  81beb4:	01800044 	movi	r6,1
  81beb8:	000f883a 	mov	r7,zero
  81bebc:	08173ec0 	call	8173ec <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  81bec0:	e0bffb17 	ldw	r2,-20(fp)
  81bec4:	10800283 	ldbu	r2,10(r2)
  81bec8:	10803fcc 	andi	r2,r2,255
  81becc:	1004c03a 	cmpne	r2,r2,zero
  81bed0:	103ff61e 	bne	r2,zero,81beac <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  81bed4:	e0fffb17 	ldw	r3,-20(fp)
  81bed8:	00800fc4 	movi	r2,63
  81bedc:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  81bee0:	e0bffb17 	ldw	r2,-20(fp)
  81bee4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81bee8:	e0bffb17 	ldw	r2,-20(fp)
  81beec:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  81bef0:	008020b4 	movhi	r2,130
  81bef4:	10958c04 	addi	r2,r2,22064
  81bef8:	10c00017 	ldw	r3,0(r2)
  81befc:	e0bffb17 	ldw	r2,-20(fp)
  81bf00:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  81bf04:	e0bffb17 	ldw	r2,-20(fp)
  81bf08:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  81bf0c:	00c020b4 	movhi	r3,130
  81bf10:	18d58c04 	addi	r3,r3,22064
  81bf14:	e0bffb17 	ldw	r2,-20(fp)
  81bf18:	18800015 	stw	r2,0(r3)
  81bf1c:	e0bff817 	ldw	r2,-32(fp)
  81bf20:	e0bff415 	stw	r2,-48(fp)
  81bf24:	e0bff417 	ldw	r2,-48(fp)
  81bf28:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  81bf2c:	e0bffa03 	ldbu	r2,-24(fp)
  81bf30:	10800058 	cmpnei	r2,r2,1
  81bf34:	1000011e 	bne	r2,zero,81bf3c <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  81bf38:	0817e2c0 	call	817e2c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  81bf3c:	e0bffd17 	ldw	r2,-12(fp)
  81bf40:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  81bf44:	e03ff915 	stw	zero,-28(fp)
             break;
  81bf48:	00000906 	br	81bf70 <OSSemDel+0x280>
  81bf4c:	e0bff817 	ldw	r2,-32(fp)
  81bf50:	e0bff315 	stw	r2,-52(fp)
  81bf54:	e0bff317 	ldw	r2,-52(fp)
  81bf58:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  81bf5c:	e0fffd17 	ldw	r3,-12(fp)
  81bf60:	008001c4 	movi	r2,7
  81bf64:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  81bf68:	e0bffb17 	ldw	r2,-20(fp)
  81bf6c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  81bf70:	e0bff917 	ldw	r2,-28(fp)
  81bf74:	e0bfff15 	stw	r2,-4(fp)
  81bf78:	e0bfff17 	ldw	r2,-4(fp)
}
  81bf7c:	e037883a 	mov	sp,fp
  81bf80:	dfc00117 	ldw	ra,4(sp)
  81bf84:	df000017 	ldw	fp,0(sp)
  81bf88:	dec00204 	addi	sp,sp,8
  81bf8c:	f800283a 	ret

0081bf90 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  81bf90:	defff404 	addi	sp,sp,-48
  81bf94:	dfc00b15 	stw	ra,44(sp)
  81bf98:	df000a15 	stw	fp,40(sp)
  81bf9c:	df000a04 	addi	fp,sp,40
  81bfa0:	e13ffc15 	stw	r4,-16(fp)
  81bfa4:	e1bffe15 	stw	r6,-8(fp)
  81bfa8:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81bfac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81bfb0:	e0bffe17 	ldw	r2,-8(fp)
  81bfb4:	1005003a 	cmpeq	r2,r2,zero
  81bfb8:	10008f1e 	bne	r2,zero,81c1f8 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81bfbc:	e0bffc17 	ldw	r2,-16(fp)
  81bfc0:	1004c03a 	cmpne	r2,r2,zero
  81bfc4:	1000041e 	bne	r2,zero,81bfd8 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  81bfc8:	e0fffe17 	ldw	r3,-8(fp)
  81bfcc:	00800104 	movi	r2,4
  81bfd0:	18800005 	stb	r2,0(r3)
        return;
  81bfd4:	00008806 	br	81c1f8 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81bfd8:	e0bffc17 	ldw	r2,-16(fp)
  81bfdc:	10800003 	ldbu	r2,0(r2)
  81bfe0:	10803fcc 	andi	r2,r2,255
  81bfe4:	108000e0 	cmpeqi	r2,r2,3
  81bfe8:	1000041e 	bne	r2,zero,81bffc <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  81bfec:	e0fffe17 	ldw	r3,-8(fp)
  81bff0:	00800044 	movi	r2,1
  81bff4:	18800005 	stb	r2,0(r3)
        return;
  81bff8:	00007f06 	br	81c1f8 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  81bffc:	008020b4 	movhi	r2,130
  81c000:	10958d04 	addi	r2,r2,22068
  81c004:	10800003 	ldbu	r2,0(r2)
  81c008:	10803fcc 	andi	r2,r2,255
  81c00c:	1005003a 	cmpeq	r2,r2,zero
  81c010:	1000041e 	bne	r2,zero,81c024 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  81c014:	e0fffe17 	ldw	r3,-8(fp)
  81c018:	00800084 	movi	r2,2
  81c01c:	18800005 	stb	r2,0(r3)
        return;
  81c020:	00007506 	br	81c1f8 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  81c024:	008020b4 	movhi	r2,130
  81c028:	10957f04 	addi	r2,r2,22012
  81c02c:	10800003 	ldbu	r2,0(r2)
  81c030:	10803fcc 	andi	r2,r2,255
  81c034:	1005003a 	cmpeq	r2,r2,zero
  81c038:	1000041e 	bne	r2,zero,81c04c <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  81c03c:	e0fffe17 	ldw	r3,-8(fp)
  81c040:	00800344 	movi	r2,13
  81c044:	18800005 	stb	r2,0(r3)
        return;
  81c048:	00006b06 	br	81c1f8 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c04c:	0005303a 	rdctl	r2,status
  81c050:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c054:	e0fffa17 	ldw	r3,-24(fp)
  81c058:	00bfff84 	movi	r2,-2
  81c05c:	1884703a 	and	r2,r3,r2
  81c060:	1001703a 	wrctl	status,r2
  
  return context;
  81c064:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81c068:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  81c06c:	e0bffc17 	ldw	r2,-16(fp)
  81c070:	1080020b 	ldhu	r2,8(r2)
  81c074:	10bfffcc 	andi	r2,r2,65535
  81c078:	1005003a 	cmpeq	r2,r2,zero
  81c07c:	10000d1e 	bne	r2,zero,81c0b4 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  81c080:	e0bffc17 	ldw	r2,-16(fp)
  81c084:	1080020b 	ldhu	r2,8(r2)
  81c088:	10bfffc4 	addi	r2,r2,-1
  81c08c:	1007883a 	mov	r3,r2
  81c090:	e0bffc17 	ldw	r2,-16(fp)
  81c094:	10c0020d 	sth	r3,8(r2)
  81c098:	e0bffb17 	ldw	r2,-20(fp)
  81c09c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c0a0:	e0bff917 	ldw	r2,-28(fp)
  81c0a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  81c0a8:	e0bffe17 	ldw	r2,-8(fp)
  81c0ac:	10000005 	stb	zero,0(r2)
        return;
  81c0b0:	00005106 	br	81c1f8 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  81c0b4:	008020b4 	movhi	r2,130
  81c0b8:	10958e04 	addi	r2,r2,22072
  81c0bc:	10c00017 	ldw	r3,0(r2)
  81c0c0:	008020b4 	movhi	r2,130
  81c0c4:	10958e04 	addi	r2,r2,22072
  81c0c8:	10800017 	ldw	r2,0(r2)
  81c0cc:	10800c03 	ldbu	r2,48(r2)
  81c0d0:	10800054 	ori	r2,r2,1
  81c0d4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  81c0d8:	008020b4 	movhi	r2,130
  81c0dc:	10958e04 	addi	r2,r2,22072
  81c0e0:	10800017 	ldw	r2,0(r2)
  81c0e4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  81c0e8:	008020b4 	movhi	r2,130
  81c0ec:	10958e04 	addi	r2,r2,22072
  81c0f0:	10c00017 	ldw	r3,0(r2)
  81c0f4:	e0bffd0b 	ldhu	r2,-12(fp)
  81c0f8:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  81c0fc:	e13ffc17 	ldw	r4,-16(fp)
  81c100:	08175800 	call	817580 <OS_EventTaskWait>
  81c104:	e0bffb17 	ldw	r2,-20(fp)
  81c108:	e0bff815 	stw	r2,-32(fp)
  81c10c:	e0bff817 	ldw	r2,-32(fp)
  81c110:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  81c114:	0817e2c0 	call	817e2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c118:	0005303a 	rdctl	r2,status
  81c11c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c120:	e0fff717 	ldw	r3,-36(fp)
  81c124:	00bfff84 	movi	r2,-2
  81c128:	1884703a 	and	r2,r3,r2
  81c12c:	1001703a 	wrctl	status,r2
  
  return context;
  81c130:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  81c134:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  81c138:	008020b4 	movhi	r2,130
  81c13c:	10958e04 	addi	r2,r2,22072
  81c140:	10800017 	ldw	r2,0(r2)
  81c144:	10800c43 	ldbu	r2,49(r2)
  81c148:	10803fcc 	andi	r2,r2,255
  81c14c:	e0bfff15 	stw	r2,-4(fp)
  81c150:	e0ffff17 	ldw	r3,-4(fp)
  81c154:	1805003a 	cmpeq	r2,r3,zero
  81c158:	1000041e 	bne	r2,zero,81c16c <OSSemPend+0x1dc>
  81c15c:	e0ffff17 	ldw	r3,-4(fp)
  81c160:	188000a0 	cmpeqi	r2,r3,2
  81c164:	1000041e 	bne	r2,zero,81c178 <OSSemPend+0x1e8>
  81c168:	00000706 	br	81c188 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  81c16c:	e0bffe17 	ldw	r2,-8(fp)
  81c170:	10000005 	stb	zero,0(r2)
             break;
  81c174:	00000c06 	br	81c1a8 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  81c178:	e0fffe17 	ldw	r3,-8(fp)
  81c17c:	00800384 	movi	r2,14
  81c180:	18800005 	stb	r2,0(r3)
             break;
  81c184:	00000806 	br	81c1a8 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  81c188:	008020b4 	movhi	r2,130
  81c18c:	10958e04 	addi	r2,r2,22072
  81c190:	11000017 	ldw	r4,0(r2)
  81c194:	e17ffc17 	ldw	r5,-16(fp)
  81c198:	08177e40 	call	8177e4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  81c19c:	e0fffe17 	ldw	r3,-8(fp)
  81c1a0:	00800284 	movi	r2,10
  81c1a4:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  81c1a8:	008020b4 	movhi	r2,130
  81c1ac:	10958e04 	addi	r2,r2,22072
  81c1b0:	10800017 	ldw	r2,0(r2)
  81c1b4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  81c1b8:	008020b4 	movhi	r2,130
  81c1bc:	10958e04 	addi	r2,r2,22072
  81c1c0:	10800017 	ldw	r2,0(r2)
  81c1c4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  81c1c8:	008020b4 	movhi	r2,130
  81c1cc:	10958e04 	addi	r2,r2,22072
  81c1d0:	10800017 	ldw	r2,0(r2)
  81c1d4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  81c1d8:	008020b4 	movhi	r2,130
  81c1dc:	10958e04 	addi	r2,r2,22072
  81c1e0:	10800017 	ldw	r2,0(r2)
  81c1e4:	10000815 	stw	zero,32(r2)
  81c1e8:	e0bffb17 	ldw	r2,-20(fp)
  81c1ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c1f0:	e0bff617 	ldw	r2,-40(fp)
  81c1f4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  81c1f8:	e037883a 	mov	sp,fp
  81c1fc:	dfc00117 	ldw	ra,4(sp)
  81c200:	df000017 	ldw	fp,0(sp)
  81c204:	dec00204 	addi	sp,sp,8
  81c208:	f800283a 	ret

0081c20c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81c20c:	defff504 	addi	sp,sp,-44
  81c210:	dfc00a15 	stw	ra,40(sp)
  81c214:	df000915 	stw	fp,36(sp)
  81c218:	df000904 	addi	fp,sp,36
  81c21c:	e13ffc15 	stw	r4,-16(fp)
  81c220:	e1bffe15 	stw	r6,-8(fp)
  81c224:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81c228:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81c22c:	e0bffe17 	ldw	r2,-8(fp)
  81c230:	1004c03a 	cmpne	r2,r2,zero
  81c234:	1000021e 	bne	r2,zero,81c240 <OSSemPendAbort+0x34>
        return (0);
  81c238:	e03fff15 	stw	zero,-4(fp)
  81c23c:	00004c06 	br	81c370 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81c240:	e0bffc17 	ldw	r2,-16(fp)
  81c244:	1004c03a 	cmpne	r2,r2,zero
  81c248:	1000051e 	bne	r2,zero,81c260 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81c24c:	e0fffe17 	ldw	r3,-8(fp)
  81c250:	00800104 	movi	r2,4
  81c254:	18800005 	stb	r2,0(r3)
        return (0);
  81c258:	e03fff15 	stw	zero,-4(fp)
  81c25c:	00004406 	br	81c370 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81c260:	e0bffc17 	ldw	r2,-16(fp)
  81c264:	10800003 	ldbu	r2,0(r2)
  81c268:	10803fcc 	andi	r2,r2,255
  81c26c:	108000e0 	cmpeqi	r2,r2,3
  81c270:	1000051e 	bne	r2,zero,81c288 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  81c274:	e0fffe17 	ldw	r3,-8(fp)
  81c278:	00800044 	movi	r2,1
  81c27c:	18800005 	stb	r2,0(r3)
        return (0);
  81c280:	e03fff15 	stw	zero,-4(fp)
  81c284:	00003a06 	br	81c370 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c288:	0005303a 	rdctl	r2,status
  81c28c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c290:	e0fff917 	ldw	r3,-28(fp)
  81c294:	00bfff84 	movi	r2,-2
  81c298:	1884703a 	and	r2,r3,r2
  81c29c:	1001703a 	wrctl	status,r2
  
  return context;
  81c2a0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81c2a4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  81c2a8:	e0bffc17 	ldw	r2,-16(fp)
  81c2ac:	10800283 	ldbu	r2,10(r2)
  81c2b0:	10803fcc 	andi	r2,r2,255
  81c2b4:	1005003a 	cmpeq	r2,r2,zero
  81c2b8:	1000261e 	bne	r2,zero,81c354 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  81c2bc:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  81c2c0:	e0bffd03 	ldbu	r2,-12(fp)
  81c2c4:	10800060 	cmpeqi	r2,r2,1
  81c2c8:	1000091e 	bne	r2,zero,81c2f0 <OSSemPendAbort+0xe4>
  81c2cc:	00000e06 	br	81c308 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  81c2d0:	e13ffc17 	ldw	r4,-16(fp)
  81c2d4:	000b883a 	mov	r5,zero
  81c2d8:	01800044 	movi	r6,1
  81c2dc:	01c00084 	movi	r7,2
  81c2e0:	08173ec0 	call	8173ec <OS_EventTaskRdy>
                     nbr_tasks++;
  81c2e4:	e0bffb03 	ldbu	r2,-20(fp)
  81c2e8:	10800044 	addi	r2,r2,1
  81c2ec:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  81c2f0:	e0bffc17 	ldw	r2,-16(fp)
  81c2f4:	10800283 	ldbu	r2,10(r2)
  81c2f8:	10803fcc 	andi	r2,r2,255
  81c2fc:	1004c03a 	cmpne	r2,r2,zero
  81c300:	103ff31e 	bne	r2,zero,81c2d0 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  81c304:	00000806 	br	81c328 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  81c308:	e13ffc17 	ldw	r4,-16(fp)
  81c30c:	000b883a 	mov	r5,zero
  81c310:	01800044 	movi	r6,1
  81c314:	01c00084 	movi	r7,2
  81c318:	08173ec0 	call	8173ec <OS_EventTaskRdy>
                 nbr_tasks++;
  81c31c:	e0bffb03 	ldbu	r2,-20(fp)
  81c320:	10800044 	addi	r2,r2,1
  81c324:	e0bffb05 	stb	r2,-20(fp)
  81c328:	e0bffa17 	ldw	r2,-24(fp)
  81c32c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c330:	e0bff817 	ldw	r2,-32(fp)
  81c334:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  81c338:	0817e2c0 	call	817e2c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  81c33c:	e0fffe17 	ldw	r3,-8(fp)
  81c340:	00800384 	movi	r2,14
  81c344:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  81c348:	e0bffb03 	ldbu	r2,-20(fp)
  81c34c:	e0bfff15 	stw	r2,-4(fp)
  81c350:	00000706 	br	81c370 <OSSemPendAbort+0x164>
  81c354:	e0bffa17 	ldw	r2,-24(fp)
  81c358:	e0bff715 	stw	r2,-36(fp)
  81c35c:	e0bff717 	ldw	r2,-36(fp)
  81c360:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81c364:	e0bffe17 	ldw	r2,-8(fp)
  81c368:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  81c36c:	e03fff15 	stw	zero,-4(fp)
  81c370:	e0bfff17 	ldw	r2,-4(fp)
}
  81c374:	e037883a 	mov	sp,fp
  81c378:	dfc00117 	ldw	ra,4(sp)
  81c37c:	df000017 	ldw	fp,0(sp)
  81c380:	dec00204 	addi	sp,sp,8
  81c384:	f800283a 	ret

0081c388 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  81c388:	defff704 	addi	sp,sp,-36
  81c38c:	dfc00815 	stw	ra,32(sp)
  81c390:	df000715 	stw	fp,28(sp)
  81c394:	df000704 	addi	fp,sp,28
  81c398:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81c39c:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81c3a0:	e0bffe17 	ldw	r2,-8(fp)
  81c3a4:	1004c03a 	cmpne	r2,r2,zero
  81c3a8:	1000031e 	bne	r2,zero,81c3b8 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  81c3ac:	00800104 	movi	r2,4
  81c3b0:	e0bfff15 	stw	r2,-4(fp)
  81c3b4:	00003806 	br	81c498 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81c3b8:	e0bffe17 	ldw	r2,-8(fp)
  81c3bc:	10800003 	ldbu	r2,0(r2)
  81c3c0:	10803fcc 	andi	r2,r2,255
  81c3c4:	108000e0 	cmpeqi	r2,r2,3
  81c3c8:	1000031e 	bne	r2,zero,81c3d8 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  81c3cc:	00800044 	movi	r2,1
  81c3d0:	e0bfff15 	stw	r2,-4(fp)
  81c3d4:	00003006 	br	81c498 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c3d8:	0005303a 	rdctl	r2,status
  81c3dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c3e0:	e0fffc17 	ldw	r3,-16(fp)
  81c3e4:	00bfff84 	movi	r2,-2
  81c3e8:	1884703a 	and	r2,r3,r2
  81c3ec:	1001703a 	wrctl	status,r2
  
  return context;
  81c3f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  81c3f4:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  81c3f8:	e0bffe17 	ldw	r2,-8(fp)
  81c3fc:	10800283 	ldbu	r2,10(r2)
  81c400:	10803fcc 	andi	r2,r2,255
  81c404:	1005003a 	cmpeq	r2,r2,zero
  81c408:	10000c1e 	bne	r2,zero,81c43c <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  81c40c:	e13ffe17 	ldw	r4,-8(fp)
  81c410:	000b883a 	mov	r5,zero
  81c414:	01800044 	movi	r6,1
  81c418:	000f883a 	mov	r7,zero
  81c41c:	08173ec0 	call	8173ec <OS_EventTaskRdy>
  81c420:	e0bffd17 	ldw	r2,-12(fp)
  81c424:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c428:	e0bffb17 	ldw	r2,-20(fp)
  81c42c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  81c430:	0817e2c0 	call	817e2c <OS_Sched>
        return (OS_ERR_NONE);
  81c434:	e03fff15 	stw	zero,-4(fp)
  81c438:	00001706 	br	81c498 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  81c43c:	e0bffe17 	ldw	r2,-8(fp)
  81c440:	1080020b 	ldhu	r2,8(r2)
  81c444:	10ffffcc 	andi	r3,r2,65535
  81c448:	00bfffd4 	movui	r2,65535
  81c44c:	18800c26 	beq	r3,r2,81c480 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  81c450:	e0bffe17 	ldw	r2,-8(fp)
  81c454:	1080020b 	ldhu	r2,8(r2)
  81c458:	10800044 	addi	r2,r2,1
  81c45c:	1007883a 	mov	r3,r2
  81c460:	e0bffe17 	ldw	r2,-8(fp)
  81c464:	10c0020d 	sth	r3,8(r2)
  81c468:	e0bffd17 	ldw	r2,-12(fp)
  81c46c:	e0bffa15 	stw	r2,-24(fp)
  81c470:	e0bffa17 	ldw	r2,-24(fp)
  81c474:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  81c478:	e03fff15 	stw	zero,-4(fp)
  81c47c:	00000606 	br	81c498 <OSSemPost+0x110>
  81c480:	e0bffd17 	ldw	r2,-12(fp)
  81c484:	e0bff915 	stw	r2,-28(fp)
  81c488:	e0bff917 	ldw	r2,-28(fp)
  81c48c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  81c490:	00800c84 	movi	r2,50
  81c494:	e0bfff15 	stw	r2,-4(fp)
  81c498:	e0bfff17 	ldw	r2,-4(fp)
}
  81c49c:	e037883a 	mov	sp,fp
  81c4a0:	dfc00117 	ldw	ra,4(sp)
  81c4a4:	df000017 	ldw	fp,0(sp)
  81c4a8:	dec00204 	addi	sp,sp,8
  81c4ac:	f800283a 	ret

0081c4b0 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  81c4b0:	defff604 	addi	sp,sp,-40
  81c4b4:	df000915 	stw	fp,36(sp)
  81c4b8:	df000904 	addi	fp,sp,36
  81c4bc:	e13ffd15 	stw	r4,-12(fp)
  81c4c0:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81c4c4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81c4c8:	e0bffd17 	ldw	r2,-12(fp)
  81c4cc:	1004c03a 	cmpne	r2,r2,zero
  81c4d0:	1000031e 	bne	r2,zero,81c4e0 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  81c4d4:	00800104 	movi	r2,4
  81c4d8:	e0bfff15 	stw	r2,-4(fp)
  81c4dc:	00003b06 	br	81c5cc <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  81c4e0:	e0bffe17 	ldw	r2,-8(fp)
  81c4e4:	1004c03a 	cmpne	r2,r2,zero
  81c4e8:	1000031e 	bne	r2,zero,81c4f8 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  81c4ec:	00800244 	movi	r2,9
  81c4f0:	e0bfff15 	stw	r2,-4(fp)
  81c4f4:	00003506 	br	81c5cc <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  81c4f8:	e0bffd17 	ldw	r2,-12(fp)
  81c4fc:	10800003 	ldbu	r2,0(r2)
  81c500:	10803fcc 	andi	r2,r2,255
  81c504:	108000e0 	cmpeqi	r2,r2,3
  81c508:	1000031e 	bne	r2,zero,81c518 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  81c50c:	00800044 	movi	r2,1
  81c510:	e0bfff15 	stw	r2,-4(fp)
  81c514:	00002d06 	br	81c5cc <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c518:	0005303a 	rdctl	r2,status
  81c51c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c520:	e0fff817 	ldw	r3,-32(fp)
  81c524:	00bfff84 	movi	r2,-2
  81c528:	1884703a 	and	r2,r3,r2
  81c52c:	1001703a 	wrctl	status,r2
  
  return context;
  81c530:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  81c534:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  81c538:	e0bffd17 	ldw	r2,-12(fp)
  81c53c:	10c00283 	ldbu	r3,10(r2)
  81c540:	e0bffe17 	ldw	r2,-8(fp)
  81c544:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  81c548:	e0bffd17 	ldw	r2,-12(fp)
  81c54c:	108002c4 	addi	r2,r2,11
  81c550:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  81c554:	e0bffe17 	ldw	r2,-8(fp)
  81c558:	10800084 	addi	r2,r2,2
  81c55c:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81c560:	e03ffa05 	stb	zero,-24(fp)
  81c564:	00000d06 	br	81c59c <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  81c568:	e0bffc17 	ldw	r2,-16(fp)
  81c56c:	10c00003 	ldbu	r3,0(r2)
  81c570:	e0bffb17 	ldw	r2,-20(fp)
  81c574:	10c00005 	stb	r3,0(r2)
  81c578:	e0bffb17 	ldw	r2,-20(fp)
  81c57c:	10800044 	addi	r2,r2,1
  81c580:	e0bffb15 	stw	r2,-20(fp)
  81c584:	e0bffc17 	ldw	r2,-16(fp)
  81c588:	10800044 	addi	r2,r2,1
  81c58c:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  81c590:	e0bffa03 	ldbu	r2,-24(fp)
  81c594:	10800044 	addi	r2,r2,1
  81c598:	e0bffa05 	stb	r2,-24(fp)
  81c59c:	e0bffa03 	ldbu	r2,-24(fp)
  81c5a0:	108000f0 	cmpltui	r2,r2,3
  81c5a4:	103ff01e 	bne	r2,zero,81c568 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  81c5a8:	e0bffd17 	ldw	r2,-12(fp)
  81c5ac:	10c0020b 	ldhu	r3,8(r2)
  81c5b0:	e0bffe17 	ldw	r2,-8(fp)
  81c5b4:	10c0000d 	sth	r3,0(r2)
  81c5b8:	e0bff917 	ldw	r2,-28(fp)
  81c5bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c5c0:	e0bff717 	ldw	r2,-36(fp)
  81c5c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81c5c8:	e03fff15 	stw	zero,-4(fp)
  81c5cc:	e0bfff17 	ldw	r2,-4(fp)
}
  81c5d0:	e037883a 	mov	sp,fp
  81c5d4:	df000017 	ldw	fp,0(sp)
  81c5d8:	dec00104 	addi	sp,sp,4
  81c5dc:	f800283a 	ret

0081c5e0 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  81c5e0:	defff904 	addi	sp,sp,-28
  81c5e4:	df000615 	stw	fp,24(sp)
  81c5e8:	df000604 	addi	fp,sp,24
  81c5ec:	e13ffd15 	stw	r4,-12(fp)
  81c5f0:	e1bfff15 	stw	r6,-4(fp)
  81c5f4:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81c5f8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81c5fc:	e0bfff17 	ldw	r2,-4(fp)
  81c600:	1005003a 	cmpeq	r2,r2,zero
  81c604:	1000331e 	bne	r2,zero,81c6d4 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81c608:	e0bffd17 	ldw	r2,-12(fp)
  81c60c:	1004c03a 	cmpne	r2,r2,zero
  81c610:	1000041e 	bne	r2,zero,81c624 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  81c614:	e0ffff17 	ldw	r3,-4(fp)
  81c618:	00800104 	movi	r2,4
  81c61c:	18800005 	stb	r2,0(r3)
        return;
  81c620:	00002c06 	br	81c6d4 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81c624:	e0bffd17 	ldw	r2,-12(fp)
  81c628:	10800003 	ldbu	r2,0(r2)
  81c62c:	10803fcc 	andi	r2,r2,255
  81c630:	108000e0 	cmpeqi	r2,r2,3
  81c634:	1000041e 	bne	r2,zero,81c648 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  81c638:	e0ffff17 	ldw	r3,-4(fp)
  81c63c:	00800044 	movi	r2,1
  81c640:	18800005 	stb	r2,0(r3)
        return;
  81c644:	00002306 	br	81c6d4 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c648:	0005303a 	rdctl	r2,status
  81c64c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c650:	e0fffb17 	ldw	r3,-20(fp)
  81c654:	00bfff84 	movi	r2,-2
  81c658:	1884703a 	and	r2,r3,r2
  81c65c:	1001703a 	wrctl	status,r2
  
  return context;
  81c660:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81c664:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  81c668:	e0bfff17 	ldw	r2,-4(fp)
  81c66c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  81c670:	e0bffd17 	ldw	r2,-12(fp)
  81c674:	1080020b 	ldhu	r2,8(r2)
  81c678:	10bfffcc 	andi	r2,r2,65535
  81c67c:	1005003a 	cmpeq	r2,r2,zero
  81c680:	1000041e 	bne	r2,zero,81c694 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  81c684:	e0fffd17 	ldw	r3,-12(fp)
  81c688:	e0bffe0b 	ldhu	r2,-8(fp)
  81c68c:	1880020d 	sth	r2,8(r3)
  81c690:	00000c06 	br	81c6c4 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  81c694:	e0bffd17 	ldw	r2,-12(fp)
  81c698:	10800283 	ldbu	r2,10(r2)
  81c69c:	10803fcc 	andi	r2,r2,255
  81c6a0:	1004c03a 	cmpne	r2,r2,zero
  81c6a4:	1000041e 	bne	r2,zero,81c6b8 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  81c6a8:	e0fffd17 	ldw	r3,-12(fp)
  81c6ac:	e0bffe0b 	ldhu	r2,-8(fp)
  81c6b0:	1880020d 	sth	r2,8(r3)
  81c6b4:	00000306 	br	81c6c4 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  81c6b8:	e0ffff17 	ldw	r3,-4(fp)
  81c6bc:	00801244 	movi	r2,73
  81c6c0:	18800005 	stb	r2,0(r3)
  81c6c4:	e0bffc17 	ldw	r2,-16(fp)
  81c6c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c6cc:	e0bffa17 	ldw	r2,-24(fp)
  81c6d0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  81c6d4:	e037883a 	mov	sp,fp
  81c6d8:	df000017 	ldw	fp,0(sp)
  81c6dc:	dec00104 	addi	sp,sp,4
  81c6e0:	f800283a 	ret

0081c6e4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  81c6e4:	defff004 	addi	sp,sp,-64
  81c6e8:	dfc00f15 	stw	ra,60(sp)
  81c6ec:	df000e15 	stw	fp,56(sp)
  81c6f0:	df000e04 	addi	fp,sp,56
  81c6f4:	e13ffd05 	stb	r4,-12(fp)
  81c6f8:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  81c6fc:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  81c700:	e0bffd03 	ldbu	r2,-12(fp)
  81c704:	10800530 	cmpltui	r2,r2,20
  81c708:	1000061e 	bne	r2,zero,81c724 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  81c70c:	e0bffd03 	ldbu	r2,-12(fp)
  81c710:	10803fe0 	cmpeqi	r2,r2,255
  81c714:	1000031e 	bne	r2,zero,81c724 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  81c718:	00800a84 	movi	r2,42
  81c71c:	e0bfff15 	stw	r2,-4(fp)
  81c720:	00014706 	br	81cc40 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  81c724:	e0bffe03 	ldbu	r2,-8(fp)
  81c728:	10800530 	cmpltui	r2,r2,20
  81c72c:	1000031e 	bne	r2,zero,81c73c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  81c730:	00800a84 	movi	r2,42
  81c734:	e0bfff15 	stw	r2,-4(fp)
  81c738:	00014106 	br	81cc40 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81c73c:	0005303a 	rdctl	r2,status
  81c740:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81c744:	e0fff617 	ldw	r3,-40(fp)
  81c748:	00bfff84 	movi	r2,-2
  81c74c:	1884703a 	and	r2,r3,r2
  81c750:	1001703a 	wrctl	status,r2
  
  return context;
  81c754:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81c758:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  81c75c:	e0bffe03 	ldbu	r2,-8(fp)
  81c760:	00c020f4 	movhi	r3,131
  81c764:	18ea1404 	addi	r3,r3,-22448
  81c768:	1085883a 	add	r2,r2,r2
  81c76c:	1085883a 	add	r2,r2,r2
  81c770:	10c5883a 	add	r2,r2,r3
  81c774:	10800017 	ldw	r2,0(r2)
  81c778:	1005003a 	cmpeq	r2,r2,zero
  81c77c:	1000071e 	bne	r2,zero,81c79c <OSTaskChangePrio+0xb8>
  81c780:	e0bff717 	ldw	r2,-36(fp)
  81c784:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81c788:	e0bff517 	ldw	r2,-44(fp)
  81c78c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  81c790:	00800a04 	movi	r2,40
  81c794:	e0bfff15 	stw	r2,-4(fp)
  81c798:	00012906 	br	81cc40 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  81c79c:	e0bffd03 	ldbu	r2,-12(fp)
  81c7a0:	10803fd8 	cmpnei	r2,r2,255
  81c7a4:	1000051e 	bne	r2,zero,81c7bc <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  81c7a8:	008020b4 	movhi	r2,130
  81c7ac:	10958e04 	addi	r2,r2,22072
  81c7b0:	10800017 	ldw	r2,0(r2)
  81c7b4:	10800c83 	ldbu	r2,50(r2)
  81c7b8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  81c7bc:	e0bffd03 	ldbu	r2,-12(fp)
  81c7c0:	00c020f4 	movhi	r3,131
  81c7c4:	18ea1404 	addi	r3,r3,-22448
  81c7c8:	1085883a 	add	r2,r2,r2
  81c7cc:	1085883a 	add	r2,r2,r2
  81c7d0:	10c5883a 	add	r2,r2,r3
  81c7d4:	10800017 	ldw	r2,0(r2)
  81c7d8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  81c7dc:	e0bffa17 	ldw	r2,-24(fp)
  81c7e0:	1004c03a 	cmpne	r2,r2,zero
  81c7e4:	1000071e 	bne	r2,zero,81c804 <OSTaskChangePrio+0x120>
  81c7e8:	e0bff717 	ldw	r2,-36(fp)
  81c7ec:	e0bff415 	stw	r2,-48(fp)
  81c7f0:	e0bff417 	ldw	r2,-48(fp)
  81c7f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  81c7f8:	00800a44 	movi	r2,41
  81c7fc:	e0bfff15 	stw	r2,-4(fp)
  81c800:	00010f06 	br	81cc40 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  81c804:	e0bffa17 	ldw	r2,-24(fp)
  81c808:	10800058 	cmpnei	r2,r2,1
  81c80c:	1000071e 	bne	r2,zero,81c82c <OSTaskChangePrio+0x148>
  81c810:	e0bff717 	ldw	r2,-36(fp)
  81c814:	e0bff315 	stw	r2,-52(fp)
  81c818:	e0bff317 	ldw	r2,-52(fp)
  81c81c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  81c820:	008010c4 	movi	r2,67
  81c824:	e0bfff15 	stw	r2,-4(fp)
  81c828:	00010506 	br	81cc40 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  81c82c:	e0bffe03 	ldbu	r2,-8(fp)
  81c830:	1004d0fa 	srli	r2,r2,3
  81c834:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  81c838:	e0bffe03 	ldbu	r2,-8(fp)
  81c83c:	108001cc 	andi	r2,r2,7
  81c840:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  81c844:	e0fff983 	ldbu	r3,-26(fp)
  81c848:	00800044 	movi	r2,1
  81c84c:	10c4983a 	sll	r2,r2,r3
  81c850:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  81c854:	e0fff943 	ldbu	r3,-27(fp)
  81c858:	00800044 	movi	r2,1
  81c85c:	10c4983a 	sll	r2,r2,r3
  81c860:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  81c864:	e0bffd03 	ldbu	r2,-12(fp)
  81c868:	00c020f4 	movhi	r3,131
  81c86c:	18ea1404 	addi	r3,r3,-22448
  81c870:	1085883a 	add	r2,r2,r2
  81c874:	1085883a 	add	r2,r2,r2
  81c878:	10c5883a 	add	r2,r2,r3
  81c87c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  81c880:	e0bffe03 	ldbu	r2,-8(fp)
  81c884:	00c020f4 	movhi	r3,131
  81c888:	18ea1404 	addi	r3,r3,-22448
  81c88c:	1085883a 	add	r2,r2,r2
  81c890:	1085883a 	add	r2,r2,r2
  81c894:	10c7883a 	add	r3,r2,r3
  81c898:	e0bffa17 	ldw	r2,-24(fp)
  81c89c:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  81c8a0:	e0bffa17 	ldw	r2,-24(fp)
  81c8a4:	10800d03 	ldbu	r2,52(r2)
  81c8a8:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  81c8ac:	e0bffa17 	ldw	r2,-24(fp)
  81c8b0:	10800d83 	ldbu	r2,54(r2)
  81c8b4:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  81c8b8:	e0bffa17 	ldw	r2,-24(fp)
  81c8bc:	10800d43 	ldbu	r2,53(r2)
  81c8c0:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  81c8c4:	e0fff903 	ldbu	r3,-28(fp)
  81c8c8:	008020b4 	movhi	r2,130
  81c8cc:	10958b44 	addi	r2,r2,22061
  81c8d0:	10c5883a 	add	r2,r2,r3
  81c8d4:	10c00003 	ldbu	r3,0(r2)
  81c8d8:	e0bff803 	ldbu	r2,-32(fp)
  81c8dc:	1884703a 	and	r2,r3,r2
  81c8e0:	10803fcc 	andi	r2,r2,255
  81c8e4:	1005003a 	cmpeq	r2,r2,zero
  81c8e8:	1000381e 	bne	r2,zero,81c9cc <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  81c8ec:	e13ff903 	ldbu	r4,-28(fp)
  81c8f0:	e0fff903 	ldbu	r3,-28(fp)
  81c8f4:	008020b4 	movhi	r2,130
  81c8f8:	10958b44 	addi	r2,r2,22061
  81c8fc:	10c5883a 	add	r2,r2,r3
  81c900:	10800003 	ldbu	r2,0(r2)
  81c904:	1007883a 	mov	r3,r2
  81c908:	e0bff803 	ldbu	r2,-32(fp)
  81c90c:	0084303a 	nor	r2,zero,r2
  81c910:	1884703a 	and	r2,r3,r2
  81c914:	1007883a 	mov	r3,r2
  81c918:	008020b4 	movhi	r2,130
  81c91c:	10958b44 	addi	r2,r2,22061
  81c920:	1105883a 	add	r2,r2,r4
  81c924:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  81c928:	e0fff903 	ldbu	r3,-28(fp)
  81c92c:	008020b4 	movhi	r2,130
  81c930:	10958b44 	addi	r2,r2,22061
  81c934:	10c5883a 	add	r2,r2,r3
  81c938:	10800003 	ldbu	r2,0(r2)
  81c93c:	10803fcc 	andi	r2,r2,255
  81c940:	1004c03a 	cmpne	r2,r2,zero
  81c944:	10000b1e 	bne	r2,zero,81c974 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  81c948:	e0bff843 	ldbu	r2,-31(fp)
  81c94c:	0084303a 	nor	r2,zero,r2
  81c950:	1007883a 	mov	r3,r2
  81c954:	008020b4 	movhi	r2,130
  81c958:	10958b04 	addi	r2,r2,22060
  81c95c:	10800003 	ldbu	r2,0(r2)
  81c960:	1884703a 	and	r2,r3,r2
  81c964:	1007883a 	mov	r3,r2
  81c968:	008020b4 	movhi	r2,130
  81c96c:	10958b04 	addi	r2,r2,22060
  81c970:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  81c974:	008020b4 	movhi	r2,130
  81c978:	10958b04 	addi	r2,r2,22060
  81c97c:	10c00003 	ldbu	r3,0(r2)
  81c980:	e0bff8c3 	ldbu	r2,-29(fp)
  81c984:	1884b03a 	or	r2,r3,r2
  81c988:	1007883a 	mov	r3,r2
  81c98c:	008020b4 	movhi	r2,130
  81c990:	10958b04 	addi	r2,r2,22060
  81c994:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  81c998:	e13ff983 	ldbu	r4,-26(fp)
  81c99c:	e0fff983 	ldbu	r3,-26(fp)
  81c9a0:	008020b4 	movhi	r2,130
  81c9a4:	10958b44 	addi	r2,r2,22061
  81c9a8:	10c5883a 	add	r2,r2,r3
  81c9ac:	10c00003 	ldbu	r3,0(r2)
  81c9b0:	e0bff883 	ldbu	r2,-30(fp)
  81c9b4:	1884b03a 	or	r2,r3,r2
  81c9b8:	1007883a 	mov	r3,r2
  81c9bc:	008020b4 	movhi	r2,130
  81c9c0:	10958b44 	addi	r2,r2,22061
  81c9c4:	1105883a 	add	r2,r2,r4
  81c9c8:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  81c9cc:	e0bffa17 	ldw	r2,-24(fp)
  81c9d0:	10800717 	ldw	r2,28(r2)
  81c9d4:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  81c9d8:	e0bffc17 	ldw	r2,-16(fp)
  81c9dc:	1005003a 	cmpeq	r2,r2,zero
  81c9e0:	1000341e 	bne	r2,zero,81cab4 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  81c9e4:	e13ff903 	ldbu	r4,-28(fp)
  81c9e8:	e0fff903 	ldbu	r3,-28(fp)
  81c9ec:	e0bffc17 	ldw	r2,-16(fp)
  81c9f0:	1885883a 	add	r2,r3,r2
  81c9f4:	10800204 	addi	r2,r2,8
  81c9f8:	108000c3 	ldbu	r2,3(r2)
  81c9fc:	1007883a 	mov	r3,r2
  81ca00:	e0bff803 	ldbu	r2,-32(fp)
  81ca04:	0084303a 	nor	r2,zero,r2
  81ca08:	1884703a 	and	r2,r3,r2
  81ca0c:	1007883a 	mov	r3,r2
  81ca10:	e0bffc17 	ldw	r2,-16(fp)
  81ca14:	2085883a 	add	r2,r4,r2
  81ca18:	10800204 	addi	r2,r2,8
  81ca1c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  81ca20:	e0fff903 	ldbu	r3,-28(fp)
  81ca24:	e0bffc17 	ldw	r2,-16(fp)
  81ca28:	1885883a 	add	r2,r3,r2
  81ca2c:	10800204 	addi	r2,r2,8
  81ca30:	108000c3 	ldbu	r2,3(r2)
  81ca34:	10803fcc 	andi	r2,r2,255
  81ca38:	1004c03a 	cmpne	r2,r2,zero
  81ca3c:	1000091e 	bne	r2,zero,81ca64 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  81ca40:	e0bffc17 	ldw	r2,-16(fp)
  81ca44:	10800283 	ldbu	r2,10(r2)
  81ca48:	1007883a 	mov	r3,r2
  81ca4c:	e0bff843 	ldbu	r2,-31(fp)
  81ca50:	0084303a 	nor	r2,zero,r2
  81ca54:	1884703a 	and	r2,r3,r2
  81ca58:	1007883a 	mov	r3,r2
  81ca5c:	e0bffc17 	ldw	r2,-16(fp)
  81ca60:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  81ca64:	e0bffc17 	ldw	r2,-16(fp)
  81ca68:	10c00283 	ldbu	r3,10(r2)
  81ca6c:	e0bff8c3 	ldbu	r2,-29(fp)
  81ca70:	1884b03a 	or	r2,r3,r2
  81ca74:	1007883a 	mov	r3,r2
  81ca78:	e0bffc17 	ldw	r2,-16(fp)
  81ca7c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  81ca80:	e13ff983 	ldbu	r4,-26(fp)
  81ca84:	e0fff983 	ldbu	r3,-26(fp)
  81ca88:	e0bffc17 	ldw	r2,-16(fp)
  81ca8c:	1885883a 	add	r2,r3,r2
  81ca90:	10800204 	addi	r2,r2,8
  81ca94:	10c000c3 	ldbu	r3,3(r2)
  81ca98:	e0bff883 	ldbu	r2,-30(fp)
  81ca9c:	1884b03a 	or	r2,r3,r2
  81caa0:	1007883a 	mov	r3,r2
  81caa4:	e0bffc17 	ldw	r2,-16(fp)
  81caa8:	2085883a 	add	r2,r4,r2
  81caac:	10800204 	addi	r2,r2,8
  81cab0:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  81cab4:	e0bffa17 	ldw	r2,-24(fp)
  81cab8:	10800817 	ldw	r2,32(r2)
  81cabc:	1005003a 	cmpeq	r2,r2,zero
  81cac0:	1000441e 	bne	r2,zero,81cbd4 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  81cac4:	e0bffa17 	ldw	r2,-24(fp)
  81cac8:	10800817 	ldw	r2,32(r2)
  81cacc:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  81cad0:	e0bffb17 	ldw	r2,-20(fp)
  81cad4:	10800017 	ldw	r2,0(r2)
  81cad8:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  81cadc:	00003a06 	br	81cbc8 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  81cae0:	e13ff903 	ldbu	r4,-28(fp)
  81cae4:	e0fff903 	ldbu	r3,-28(fp)
  81cae8:	e0bffc17 	ldw	r2,-16(fp)
  81caec:	1885883a 	add	r2,r3,r2
  81caf0:	10800204 	addi	r2,r2,8
  81caf4:	108000c3 	ldbu	r2,3(r2)
  81caf8:	1007883a 	mov	r3,r2
  81cafc:	e0bff803 	ldbu	r2,-32(fp)
  81cb00:	0084303a 	nor	r2,zero,r2
  81cb04:	1884703a 	and	r2,r3,r2
  81cb08:	1007883a 	mov	r3,r2
  81cb0c:	e0bffc17 	ldw	r2,-16(fp)
  81cb10:	2085883a 	add	r2,r4,r2
  81cb14:	10800204 	addi	r2,r2,8
  81cb18:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  81cb1c:	e0fff903 	ldbu	r3,-28(fp)
  81cb20:	e0bffc17 	ldw	r2,-16(fp)
  81cb24:	1885883a 	add	r2,r3,r2
  81cb28:	10800204 	addi	r2,r2,8
  81cb2c:	108000c3 	ldbu	r2,3(r2)
  81cb30:	10803fcc 	andi	r2,r2,255
  81cb34:	1004c03a 	cmpne	r2,r2,zero
  81cb38:	1000091e 	bne	r2,zero,81cb60 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  81cb3c:	e0bffc17 	ldw	r2,-16(fp)
  81cb40:	10800283 	ldbu	r2,10(r2)
  81cb44:	1007883a 	mov	r3,r2
  81cb48:	e0bff843 	ldbu	r2,-31(fp)
  81cb4c:	0084303a 	nor	r2,zero,r2
  81cb50:	1884703a 	and	r2,r3,r2
  81cb54:	1007883a 	mov	r3,r2
  81cb58:	e0bffc17 	ldw	r2,-16(fp)
  81cb5c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  81cb60:	e0bffc17 	ldw	r2,-16(fp)
  81cb64:	10c00283 	ldbu	r3,10(r2)
  81cb68:	e0bff8c3 	ldbu	r2,-29(fp)
  81cb6c:	1884b03a 	or	r2,r3,r2
  81cb70:	1007883a 	mov	r3,r2
  81cb74:	e0bffc17 	ldw	r2,-16(fp)
  81cb78:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  81cb7c:	e13ff983 	ldbu	r4,-26(fp)
  81cb80:	e0fff983 	ldbu	r3,-26(fp)
  81cb84:	e0bffc17 	ldw	r2,-16(fp)
  81cb88:	1885883a 	add	r2,r3,r2
  81cb8c:	10800204 	addi	r2,r2,8
  81cb90:	10c000c3 	ldbu	r3,3(r2)
  81cb94:	e0bff883 	ldbu	r2,-30(fp)
  81cb98:	1884b03a 	or	r2,r3,r2
  81cb9c:	1007883a 	mov	r3,r2
  81cba0:	e0bffc17 	ldw	r2,-16(fp)
  81cba4:	2085883a 	add	r2,r4,r2
  81cba8:	10800204 	addi	r2,r2,8
  81cbac:	10c000c5 	stb	r3,3(r2)
            pevents++;
  81cbb0:	e0bffb17 	ldw	r2,-20(fp)
  81cbb4:	10800104 	addi	r2,r2,4
  81cbb8:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  81cbbc:	e0bffb17 	ldw	r2,-20(fp)
  81cbc0:	10800017 	ldw	r2,0(r2)
  81cbc4:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  81cbc8:	e0bffc17 	ldw	r2,-16(fp)
  81cbcc:	1004c03a 	cmpne	r2,r2,zero
  81cbd0:	103fc31e 	bne	r2,zero,81cae0 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  81cbd4:	e0fffa17 	ldw	r3,-24(fp)
  81cbd8:	e0bffe03 	ldbu	r2,-8(fp)
  81cbdc:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  81cbe0:	e0fffa17 	ldw	r3,-24(fp)
  81cbe4:	e0bff983 	ldbu	r2,-26(fp)
  81cbe8:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  81cbec:	e0fffa17 	ldw	r3,-24(fp)
  81cbf0:	e0bff943 	ldbu	r2,-27(fp)
  81cbf4:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  81cbf8:	e0fffa17 	ldw	r3,-24(fp)
  81cbfc:	e0bff8c3 	ldbu	r2,-29(fp)
  81cc00:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  81cc04:	e0fffa17 	ldw	r3,-24(fp)
  81cc08:	e0bff883 	ldbu	r2,-30(fp)
  81cc0c:	18800d45 	stb	r2,53(r3)
  81cc10:	e0bff717 	ldw	r2,-36(fp)
  81cc14:	e0bff215 	stw	r2,-56(fp)
  81cc18:	e0bff217 	ldw	r2,-56(fp)
  81cc1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  81cc20:	008020b4 	movhi	r2,130
  81cc24:	10957f44 	addi	r2,r2,22013
  81cc28:	10800003 	ldbu	r2,0(r2)
  81cc2c:	10803fcc 	andi	r2,r2,255
  81cc30:	10800058 	cmpnei	r2,r2,1
  81cc34:	1000011e 	bne	r2,zero,81cc3c <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  81cc38:	0817e2c0 	call	817e2c <OS_Sched>
    }
    return (OS_ERR_NONE);
  81cc3c:	e03fff15 	stw	zero,-4(fp)
  81cc40:	e0bfff17 	ldw	r2,-4(fp)
}
  81cc44:	e037883a 	mov	sp,fp
  81cc48:	dfc00117 	ldw	ra,4(sp)
  81cc4c:	df000017 	ldw	fp,0(sp)
  81cc50:	dec00204 	addi	sp,sp,8
  81cc54:	f800283a 	ret

0081cc58 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  81cc58:	deffed04 	addi	sp,sp,-76
  81cc5c:	dfc01215 	stw	ra,72(sp)
  81cc60:	df001115 	stw	fp,68(sp)
  81cc64:	df001104 	addi	fp,sp,68
  81cc68:	e13ffb15 	stw	r4,-20(fp)
  81cc6c:	e17ffc15 	stw	r5,-16(fp)
  81cc70:	e1bffd15 	stw	r6,-12(fp)
  81cc74:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  81cc78:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  81cc7c:	e0bffe03 	ldbu	r2,-8(fp)
  81cc80:	10800570 	cmpltui	r2,r2,21
  81cc84:	1000031e 	bne	r2,zero,81cc94 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  81cc88:	00800a84 	movi	r2,42
  81cc8c:	e0bfff15 	stw	r2,-4(fp)
  81cc90:	00006006 	br	81ce14 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81cc94:	0005303a 	rdctl	r2,status
  81cc98:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81cc9c:	e0fff717 	ldw	r3,-36(fp)
  81cca0:	00bfff84 	movi	r2,-2
  81cca4:	1884703a 	and	r2,r3,r2
  81cca8:	1001703a 	wrctl	status,r2
  
  return context;
  81ccac:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81ccb0:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  81ccb4:	008020b4 	movhi	r2,130
  81ccb8:	10958d04 	addi	r2,r2,22068
  81ccbc:	10800003 	ldbu	r2,0(r2)
  81ccc0:	10803fcc 	andi	r2,r2,255
  81ccc4:	1005003a 	cmpeq	r2,r2,zero
  81ccc8:	1000071e 	bne	r2,zero,81cce8 <OSTaskCreate+0x90>
  81cccc:	e0bff817 	ldw	r2,-32(fp)
  81ccd0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ccd4:	e0bff617 	ldw	r2,-40(fp)
  81ccd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  81ccdc:	00800f04 	movi	r2,60
  81cce0:	e0bfff15 	stw	r2,-4(fp)
  81cce4:	00004b06 	br	81ce14 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  81cce8:	e0bffe03 	ldbu	r2,-8(fp)
  81ccec:	00c020f4 	movhi	r3,131
  81ccf0:	18ea1404 	addi	r3,r3,-22448
  81ccf4:	1085883a 	add	r2,r2,r2
  81ccf8:	1085883a 	add	r2,r2,r2
  81ccfc:	10c5883a 	add	r2,r2,r3
  81cd00:	10800017 	ldw	r2,0(r2)
  81cd04:	1004c03a 	cmpne	r2,r2,zero
  81cd08:	10003c1e 	bne	r2,zero,81cdfc <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  81cd0c:	e0bffe03 	ldbu	r2,-8(fp)
  81cd10:	00c020f4 	movhi	r3,131
  81cd14:	18ea1404 	addi	r3,r3,-22448
  81cd18:	1085883a 	add	r2,r2,r2
  81cd1c:	1085883a 	add	r2,r2,r2
  81cd20:	10c7883a 	add	r3,r2,r3
  81cd24:	00800044 	movi	r2,1
  81cd28:	18800015 	stw	r2,0(r3)
  81cd2c:	e0bff817 	ldw	r2,-32(fp)
  81cd30:	e0bff515 	stw	r2,-44(fp)
  81cd34:	e0bff517 	ldw	r2,-44(fp)
  81cd38:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  81cd3c:	e13ffb17 	ldw	r4,-20(fp)
  81cd40:	e17ffc17 	ldw	r5,-16(fp)
  81cd44:	e1bffd17 	ldw	r6,-12(fp)
  81cd48:	000f883a 	mov	r7,zero
  81cd4c:	0820b680 	call	820b68 <OSTaskStkInit>
  81cd50:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  81cd54:	e13ffe03 	ldbu	r4,-8(fp)
  81cd58:	d8000015 	stw	zero,0(sp)
  81cd5c:	d8000115 	stw	zero,4(sp)
  81cd60:	d8000215 	stw	zero,8(sp)
  81cd64:	e17ffa17 	ldw	r5,-24(fp)
  81cd68:	000d883a 	mov	r6,zero
  81cd6c:	000f883a 	mov	r7,zero
  81cd70:	08182340 	call	818234 <OS_TCBInit>
  81cd74:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  81cd78:	e0bff903 	ldbu	r2,-28(fp)
  81cd7c:	1004c03a 	cmpne	r2,r2,zero
  81cd80:	1000081e 	bne	r2,zero,81cda4 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  81cd84:	008020b4 	movhi	r2,130
  81cd88:	10957f44 	addi	r2,r2,22013
  81cd8c:	10800003 	ldbu	r2,0(r2)
  81cd90:	10803fcc 	andi	r2,r2,255
  81cd94:	10800058 	cmpnei	r2,r2,1
  81cd98:	1000151e 	bne	r2,zero,81cdf0 <OSTaskCreate+0x198>
                OS_Sched();
  81cd9c:	0817e2c0 	call	817e2c <OS_Sched>
  81cda0:	00001306 	br	81cdf0 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81cda4:	0005303a 	rdctl	r2,status
  81cda8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81cdac:	e0fff417 	ldw	r3,-48(fp)
  81cdb0:	00bfff84 	movi	r2,-2
  81cdb4:	1884703a 	and	r2,r3,r2
  81cdb8:	1001703a 	wrctl	status,r2
  
  return context;
  81cdbc:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  81cdc0:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  81cdc4:	e0bffe03 	ldbu	r2,-8(fp)
  81cdc8:	00c020f4 	movhi	r3,131
  81cdcc:	18ea1404 	addi	r3,r3,-22448
  81cdd0:	1085883a 	add	r2,r2,r2
  81cdd4:	1085883a 	add	r2,r2,r2
  81cdd8:	10c5883a 	add	r2,r2,r3
  81cddc:	10000015 	stw	zero,0(r2)
  81cde0:	e0bff817 	ldw	r2,-32(fp)
  81cde4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81cde8:	e0bff317 	ldw	r2,-52(fp)
  81cdec:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  81cdf0:	e0bff903 	ldbu	r2,-28(fp)
  81cdf4:	e0bfff15 	stw	r2,-4(fp)
  81cdf8:	00000606 	br	81ce14 <OSTaskCreate+0x1bc>
  81cdfc:	e0bff817 	ldw	r2,-32(fp)
  81ce00:	e0bff215 	stw	r2,-56(fp)
  81ce04:	e0bff217 	ldw	r2,-56(fp)
  81ce08:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  81ce0c:	00800a04 	movi	r2,40
  81ce10:	e0bfff15 	stw	r2,-4(fp)
  81ce14:	e0bfff17 	ldw	r2,-4(fp)
}
  81ce18:	e037883a 	mov	sp,fp
  81ce1c:	dfc00117 	ldw	ra,4(sp)
  81ce20:	df000017 	ldw	fp,0(sp)
  81ce24:	dec00204 	addi	sp,sp,8
  81ce28:	f800283a 	ret

0081ce2c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  81ce2c:	deffeb04 	addi	sp,sp,-84
  81ce30:	dfc01415 	stw	ra,80(sp)
  81ce34:	df001315 	stw	fp,76(sp)
  81ce38:	df001304 	addi	fp,sp,76
  81ce3c:	e13ff915 	stw	r4,-28(fp)
  81ce40:	e17ffa15 	stw	r5,-24(fp)
  81ce44:	e1bffb15 	stw	r6,-20(fp)
  81ce48:	e0800217 	ldw	r2,8(fp)
  81ce4c:	e0c00617 	ldw	r3,24(fp)
  81ce50:	e1fffc05 	stb	r7,-16(fp)
  81ce54:	e0bffd0d 	sth	r2,-12(fp)
  81ce58:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  81ce5c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  81ce60:	e0bffc03 	ldbu	r2,-16(fp)
  81ce64:	10800570 	cmpltui	r2,r2,21
  81ce68:	1000031e 	bne	r2,zero,81ce78 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  81ce6c:	00800a84 	movi	r2,42
  81ce70:	e0bfff15 	stw	r2,-4(fp)
  81ce74:	00006706 	br	81d014 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ce78:	0005303a 	rdctl	r2,status
  81ce7c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ce80:	e0fff517 	ldw	r3,-44(fp)
  81ce84:	00bfff84 	movi	r2,-2
  81ce88:	1884703a 	and	r2,r3,r2
  81ce8c:	1001703a 	wrctl	status,r2
  
  return context;
  81ce90:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81ce94:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  81ce98:	008020b4 	movhi	r2,130
  81ce9c:	10958d04 	addi	r2,r2,22068
  81cea0:	10800003 	ldbu	r2,0(r2)
  81cea4:	10803fcc 	andi	r2,r2,255
  81cea8:	1005003a 	cmpeq	r2,r2,zero
  81ceac:	1000071e 	bne	r2,zero,81cecc <OSTaskCreateExt+0xa0>
  81ceb0:	e0bff617 	ldw	r2,-40(fp)
  81ceb4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ceb8:	e0bff417 	ldw	r2,-48(fp)
  81cebc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  81cec0:	00800f04 	movi	r2,60
  81cec4:	e0bfff15 	stw	r2,-4(fp)
  81cec8:	00005206 	br	81d014 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  81cecc:	e0bffc03 	ldbu	r2,-16(fp)
  81ced0:	00c020f4 	movhi	r3,131
  81ced4:	18ea1404 	addi	r3,r3,-22448
  81ced8:	1085883a 	add	r2,r2,r2
  81cedc:	1085883a 	add	r2,r2,r2
  81cee0:	10c5883a 	add	r2,r2,r3
  81cee4:	10800017 	ldw	r2,0(r2)
  81cee8:	1004c03a 	cmpne	r2,r2,zero
  81ceec:	1000431e 	bne	r2,zero,81cffc <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  81cef0:	e0bffc03 	ldbu	r2,-16(fp)
  81cef4:	00c020f4 	movhi	r3,131
  81cef8:	18ea1404 	addi	r3,r3,-22448
  81cefc:	1085883a 	add	r2,r2,r2
  81cf00:	1085883a 	add	r2,r2,r2
  81cf04:	10c7883a 	add	r3,r2,r3
  81cf08:	00800044 	movi	r2,1
  81cf0c:	18800015 	stw	r2,0(r3)
  81cf10:	e0bff617 	ldw	r2,-40(fp)
  81cf14:	e0bff315 	stw	r2,-52(fp)
  81cf18:	e0bff317 	ldw	r2,-52(fp)
  81cf1c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  81cf20:	e1bffe0b 	ldhu	r6,-8(fp)
  81cf24:	e1000317 	ldw	r4,12(fp)
  81cf28:	e1400417 	ldw	r5,16(fp)
  81cf2c:	081e0a80 	call	81e0a8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  81cf30:	e1fffe0b 	ldhu	r7,-8(fp)
  81cf34:	e13ff917 	ldw	r4,-28(fp)
  81cf38:	e17ffa17 	ldw	r5,-24(fp)
  81cf3c:	e1bffb17 	ldw	r6,-20(fp)
  81cf40:	0820b680 	call	820b68 <OSTaskStkInit>
  81cf44:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  81cf48:	e13ffc03 	ldbu	r4,-16(fp)
  81cf4c:	e1fffd0b 	ldhu	r7,-12(fp)
  81cf50:	e0fffe0b 	ldhu	r3,-8(fp)
  81cf54:	e0800417 	ldw	r2,16(fp)
  81cf58:	d8800015 	stw	r2,0(sp)
  81cf5c:	e0800517 	ldw	r2,20(fp)
  81cf60:	d8800115 	stw	r2,4(sp)
  81cf64:	d8c00215 	stw	r3,8(sp)
  81cf68:	e17ff817 	ldw	r5,-32(fp)
  81cf6c:	e1800317 	ldw	r6,12(fp)
  81cf70:	08182340 	call	818234 <OS_TCBInit>
  81cf74:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  81cf78:	e0bff703 	ldbu	r2,-36(fp)
  81cf7c:	1004c03a 	cmpne	r2,r2,zero
  81cf80:	1000081e 	bne	r2,zero,81cfa4 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  81cf84:	008020b4 	movhi	r2,130
  81cf88:	10957f44 	addi	r2,r2,22013
  81cf8c:	10800003 	ldbu	r2,0(r2)
  81cf90:	10803fcc 	andi	r2,r2,255
  81cf94:	10800058 	cmpnei	r2,r2,1
  81cf98:	1000151e 	bne	r2,zero,81cff0 <OSTaskCreateExt+0x1c4>
                OS_Sched();
  81cf9c:	0817e2c0 	call	817e2c <OS_Sched>
  81cfa0:	00001306 	br	81cff0 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81cfa4:	0005303a 	rdctl	r2,status
  81cfa8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81cfac:	e0fff217 	ldw	r3,-56(fp)
  81cfb0:	00bfff84 	movi	r2,-2
  81cfb4:	1884703a 	and	r2,r3,r2
  81cfb8:	1001703a 	wrctl	status,r2
  
  return context;
  81cfbc:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  81cfc0:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  81cfc4:	e0bffc03 	ldbu	r2,-16(fp)
  81cfc8:	00c020f4 	movhi	r3,131
  81cfcc:	18ea1404 	addi	r3,r3,-22448
  81cfd0:	1085883a 	add	r2,r2,r2
  81cfd4:	1085883a 	add	r2,r2,r2
  81cfd8:	10c5883a 	add	r2,r2,r3
  81cfdc:	10000015 	stw	zero,0(r2)
  81cfe0:	e0bff617 	ldw	r2,-40(fp)
  81cfe4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81cfe8:	e0bff117 	ldw	r2,-60(fp)
  81cfec:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  81cff0:	e0bff703 	ldbu	r2,-36(fp)
  81cff4:	e0bfff15 	stw	r2,-4(fp)
  81cff8:	00000606 	br	81d014 <OSTaskCreateExt+0x1e8>
  81cffc:	e0bff617 	ldw	r2,-40(fp)
  81d000:	e0bff015 	stw	r2,-64(fp)
  81d004:	e0bff017 	ldw	r2,-64(fp)
  81d008:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  81d00c:	00800a04 	movi	r2,40
  81d010:	e0bfff15 	stw	r2,-4(fp)
  81d014:	e0bfff17 	ldw	r2,-4(fp)
}
  81d018:	e037883a 	mov	sp,fp
  81d01c:	dfc00117 	ldw	ra,4(sp)
  81d020:	df000017 	ldw	fp,0(sp)
  81d024:	dec00204 	addi	sp,sp,8
  81d028:	f800283a 	ret

0081d02c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  81d02c:	defff304 	addi	sp,sp,-52
  81d030:	dfc00c15 	stw	ra,48(sp)
  81d034:	df000b15 	stw	fp,44(sp)
  81d038:	df000b04 	addi	fp,sp,44
  81d03c:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  81d040:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  81d044:	008020b4 	movhi	r2,130
  81d048:	10958d04 	addi	r2,r2,22068
  81d04c:	10800003 	ldbu	r2,0(r2)
  81d050:	10803fcc 	andi	r2,r2,255
  81d054:	1005003a 	cmpeq	r2,r2,zero
  81d058:	1000031e 	bne	r2,zero,81d068 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  81d05c:	00801004 	movi	r2,64
  81d060:	e0bfff15 	stw	r2,-4(fp)
  81d064:	0000ee06 	br	81d420 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  81d068:	e0bffe03 	ldbu	r2,-8(fp)
  81d06c:	10800518 	cmpnei	r2,r2,20
  81d070:	1000031e 	bne	r2,zero,81d080 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  81d074:	00800f84 	movi	r2,62
  81d078:	e0bfff15 	stw	r2,-4(fp)
  81d07c:	0000e806 	br	81d420 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  81d080:	e0bffe03 	ldbu	r2,-8(fp)
  81d084:	10800530 	cmpltui	r2,r2,20
  81d088:	1000061e 	bne	r2,zero,81d0a4 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  81d08c:	e0bffe03 	ldbu	r2,-8(fp)
  81d090:	10803fe0 	cmpeqi	r2,r2,255
  81d094:	1000031e 	bne	r2,zero,81d0a4 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  81d098:	00800a84 	movi	r2,42
  81d09c:	e0bfff15 	stw	r2,-4(fp)
  81d0a0:	0000df06 	br	81d420 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d0a4:	0005303a 	rdctl	r2,status
  81d0a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d0ac:	e0fffa17 	ldw	r3,-24(fp)
  81d0b0:	00bfff84 	movi	r2,-2
  81d0b4:	1884703a 	and	r2,r3,r2
  81d0b8:	1001703a 	wrctl	status,r2
  
  return context;
  81d0bc:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  81d0c0:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  81d0c4:	e0bffe03 	ldbu	r2,-8(fp)
  81d0c8:	10803fd8 	cmpnei	r2,r2,255
  81d0cc:	1000051e 	bne	r2,zero,81d0e4 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  81d0d0:	008020b4 	movhi	r2,130
  81d0d4:	10958e04 	addi	r2,r2,22072
  81d0d8:	10800017 	ldw	r2,0(r2)
  81d0dc:	10800c83 	ldbu	r2,50(r2)
  81d0e0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81d0e4:	e0bffe03 	ldbu	r2,-8(fp)
  81d0e8:	00c020f4 	movhi	r3,131
  81d0ec:	18ea1404 	addi	r3,r3,-22448
  81d0f0:	1085883a 	add	r2,r2,r2
  81d0f4:	1085883a 	add	r2,r2,r2
  81d0f8:	10c5883a 	add	r2,r2,r3
  81d0fc:	10800017 	ldw	r2,0(r2)
  81d100:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  81d104:	e0bffc17 	ldw	r2,-16(fp)
  81d108:	1004c03a 	cmpne	r2,r2,zero
  81d10c:	1000071e 	bne	r2,zero,81d12c <OSTaskDel+0x100>
  81d110:	e0bffb17 	ldw	r2,-20(fp)
  81d114:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d118:	e0bff917 	ldw	r2,-28(fp)
  81d11c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81d120:	008010c4 	movi	r2,67
  81d124:	e0bfff15 	stw	r2,-4(fp)
  81d128:	0000bd06 	br	81d420 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  81d12c:	e0bffc17 	ldw	r2,-16(fp)
  81d130:	10800058 	cmpnei	r2,r2,1
  81d134:	1000071e 	bne	r2,zero,81d154 <OSTaskDel+0x128>
  81d138:	e0bffb17 	ldw	r2,-20(fp)
  81d13c:	e0bff815 	stw	r2,-32(fp)
  81d140:	e0bff817 	ldw	r2,-32(fp)
  81d144:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  81d148:	00800f44 	movi	r2,61
  81d14c:	e0bfff15 	stw	r2,-4(fp)
  81d150:	0000b306 	br	81d420 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  81d154:	e0bffc17 	ldw	r2,-16(fp)
  81d158:	10800d03 	ldbu	r2,52(r2)
  81d15c:	11003fcc 	andi	r4,r2,255
  81d160:	e0bffc17 	ldw	r2,-16(fp)
  81d164:	10800d03 	ldbu	r2,52(r2)
  81d168:	10c03fcc 	andi	r3,r2,255
  81d16c:	008020b4 	movhi	r2,130
  81d170:	10958b44 	addi	r2,r2,22061
  81d174:	10c5883a 	add	r2,r2,r3
  81d178:	10800003 	ldbu	r2,0(r2)
  81d17c:	1007883a 	mov	r3,r2
  81d180:	e0bffc17 	ldw	r2,-16(fp)
  81d184:	10800d43 	ldbu	r2,53(r2)
  81d188:	0084303a 	nor	r2,zero,r2
  81d18c:	1884703a 	and	r2,r3,r2
  81d190:	1007883a 	mov	r3,r2
  81d194:	008020b4 	movhi	r2,130
  81d198:	10958b44 	addi	r2,r2,22061
  81d19c:	1105883a 	add	r2,r2,r4
  81d1a0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  81d1a4:	e0bffc17 	ldw	r2,-16(fp)
  81d1a8:	10800d03 	ldbu	r2,52(r2)
  81d1ac:	10c03fcc 	andi	r3,r2,255
  81d1b0:	008020b4 	movhi	r2,130
  81d1b4:	10958b44 	addi	r2,r2,22061
  81d1b8:	10c5883a 	add	r2,r2,r3
  81d1bc:	10800003 	ldbu	r2,0(r2)
  81d1c0:	10803fcc 	andi	r2,r2,255
  81d1c4:	1004c03a 	cmpne	r2,r2,zero
  81d1c8:	10000c1e 	bne	r2,zero,81d1fc <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  81d1cc:	e0bffc17 	ldw	r2,-16(fp)
  81d1d0:	10800d83 	ldbu	r2,54(r2)
  81d1d4:	0084303a 	nor	r2,zero,r2
  81d1d8:	1007883a 	mov	r3,r2
  81d1dc:	008020b4 	movhi	r2,130
  81d1e0:	10958b04 	addi	r2,r2,22060
  81d1e4:	10800003 	ldbu	r2,0(r2)
  81d1e8:	1884703a 	and	r2,r3,r2
  81d1ec:	1007883a 	mov	r3,r2
  81d1f0:	008020b4 	movhi	r2,130
  81d1f4:	10958b04 	addi	r2,r2,22060
  81d1f8:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  81d1fc:	e0bffc17 	ldw	r2,-16(fp)
  81d200:	10800717 	ldw	r2,28(r2)
  81d204:	1005003a 	cmpeq	r2,r2,zero
  81d208:	1000041e 	bne	r2,zero,81d21c <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  81d20c:	e0bffc17 	ldw	r2,-16(fp)
  81d210:	11400717 	ldw	r5,28(r2)
  81d214:	e13ffc17 	ldw	r4,-16(fp)
  81d218:	08177e40 	call	8177e4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  81d21c:	e0bffc17 	ldw	r2,-16(fp)
  81d220:	10800817 	ldw	r2,32(r2)
  81d224:	1005003a 	cmpeq	r2,r2,zero
  81d228:	1000041e 	bne	r2,zero,81d23c <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  81d22c:	e0bffc17 	ldw	r2,-16(fp)
  81d230:	11400817 	ldw	r5,32(r2)
  81d234:	e13ffc17 	ldw	r4,-16(fp)
  81d238:	081789c0 	call	81789c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  81d23c:	e0bffc17 	ldw	r2,-16(fp)
  81d240:	10800a17 	ldw	r2,40(r2)
  81d244:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  81d248:	e0bffd17 	ldw	r2,-12(fp)
  81d24c:	1005003a 	cmpeq	r2,r2,zero
  81d250:	1000021e 	bne	r2,zero,81d25c <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  81d254:	e13ffd17 	ldw	r4,-12(fp)
  81d258:	0819f300 	call	819f30 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  81d25c:	e0bffc17 	ldw	r2,-16(fp)
  81d260:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  81d264:	e0bffc17 	ldw	r2,-16(fp)
  81d268:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  81d26c:	e0bffc17 	ldw	r2,-16(fp)
  81d270:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  81d274:	008020b4 	movhi	r2,130
  81d278:	10957f04 	addi	r2,r2,22012
  81d27c:	10800003 	ldbu	r2,0(r2)
  81d280:	10803fcc 	andi	r2,r2,255
  81d284:	10803fe0 	cmpeqi	r2,r2,255
  81d288:	1000081e 	bne	r2,zero,81d2ac <OSTaskDel+0x280>
        OSLockNesting++;
  81d28c:	008020b4 	movhi	r2,130
  81d290:	10957f04 	addi	r2,r2,22012
  81d294:	10800003 	ldbu	r2,0(r2)
  81d298:	10800044 	addi	r2,r2,1
  81d29c:	1007883a 	mov	r3,r2
  81d2a0:	008020b4 	movhi	r2,130
  81d2a4:	10957f04 	addi	r2,r2,22012
  81d2a8:	10c00005 	stb	r3,0(r2)
  81d2ac:	e0bffb17 	ldw	r2,-20(fp)
  81d2b0:	e0bff715 	stw	r2,-36(fp)
  81d2b4:	e0bff717 	ldw	r2,-36(fp)
  81d2b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  81d2bc:	08173d00 	call	8173d0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d2c0:	0005303a 	rdctl	r2,status
  81d2c4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d2c8:	e0fff617 	ldw	r3,-40(fp)
  81d2cc:	00bfff84 	movi	r2,-2
  81d2d0:	1884703a 	and	r2,r3,r2
  81d2d4:	1001703a 	wrctl	status,r2
  
  return context;
  81d2d8:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  81d2dc:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  81d2e0:	008020b4 	movhi	r2,130
  81d2e4:	10957f04 	addi	r2,r2,22012
  81d2e8:	10800003 	ldbu	r2,0(r2)
  81d2ec:	10803fcc 	andi	r2,r2,255
  81d2f0:	1005003a 	cmpeq	r2,r2,zero
  81d2f4:	1000081e 	bne	r2,zero,81d318 <OSTaskDel+0x2ec>
        OSLockNesting--;
  81d2f8:	008020b4 	movhi	r2,130
  81d2fc:	10957f04 	addi	r2,r2,22012
  81d300:	10800003 	ldbu	r2,0(r2)
  81d304:	10bfffc4 	addi	r2,r2,-1
  81d308:	1007883a 	mov	r3,r2
  81d30c:	008020b4 	movhi	r2,130
  81d310:	10957f04 	addi	r2,r2,22012
  81d314:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  81d318:	e13ffc17 	ldw	r4,-16(fp)
  81d31c:	0820e980 	call	820e98 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  81d320:	008020b4 	movhi	r2,130
  81d324:	10958744 	addi	r2,r2,22045
  81d328:	10800003 	ldbu	r2,0(r2)
  81d32c:	10bfffc4 	addi	r2,r2,-1
  81d330:	1007883a 	mov	r3,r2
  81d334:	008020b4 	movhi	r2,130
  81d338:	10958744 	addi	r2,r2,22045
  81d33c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  81d340:	e0bffe03 	ldbu	r2,-8(fp)
  81d344:	00c020f4 	movhi	r3,131
  81d348:	18ea1404 	addi	r3,r3,-22448
  81d34c:	1085883a 	add	r2,r2,r2
  81d350:	1085883a 	add	r2,r2,r2
  81d354:	10c5883a 	add	r2,r2,r3
  81d358:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  81d35c:	e0bffc17 	ldw	r2,-16(fp)
  81d360:	10800617 	ldw	r2,24(r2)
  81d364:	1004c03a 	cmpne	r2,r2,zero
  81d368:	1000091e 	bne	r2,zero,81d390 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  81d36c:	e0bffc17 	ldw	r2,-16(fp)
  81d370:	10800517 	ldw	r2,20(r2)
  81d374:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  81d378:	e0bffc17 	ldw	r2,-16(fp)
  81d37c:	10c00517 	ldw	r3,20(r2)
  81d380:	008020b4 	movhi	r2,130
  81d384:	10958204 	addi	r2,r2,22024
  81d388:	10c00015 	stw	r3,0(r2)
  81d38c:	00000a06 	br	81d3b8 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  81d390:	e0bffc17 	ldw	r2,-16(fp)
  81d394:	10c00617 	ldw	r3,24(r2)
  81d398:	e0bffc17 	ldw	r2,-16(fp)
  81d39c:	10800517 	ldw	r2,20(r2)
  81d3a0:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  81d3a4:	e0bffc17 	ldw	r2,-16(fp)
  81d3a8:	10c00517 	ldw	r3,20(r2)
  81d3ac:	e0bffc17 	ldw	r2,-16(fp)
  81d3b0:	10800617 	ldw	r2,24(r2)
  81d3b4:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  81d3b8:	008020b4 	movhi	r2,130
  81d3bc:	10958604 	addi	r2,r2,22040
  81d3c0:	10c00017 	ldw	r3,0(r2)
  81d3c4:	e0bffc17 	ldw	r2,-16(fp)
  81d3c8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  81d3cc:	00c020b4 	movhi	r3,130
  81d3d0:	18d58604 	addi	r3,r3,22040
  81d3d4:	e0bffc17 	ldw	r2,-16(fp)
  81d3d8:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  81d3dc:	e0fffc17 	ldw	r3,-16(fp)
  81d3e0:	00800fc4 	movi	r2,63
  81d3e4:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  81d3e8:	e0bffc17 	ldw	r2,-16(fp)
  81d3ec:	10001345 	stb	zero,77(r2)
  81d3f0:	e0bffb17 	ldw	r2,-20(fp)
  81d3f4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d3f8:	e0bff517 	ldw	r2,-44(fp)
  81d3fc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  81d400:	008020b4 	movhi	r2,130
  81d404:	10957f44 	addi	r2,r2,22013
  81d408:	10800003 	ldbu	r2,0(r2)
  81d40c:	10803fcc 	andi	r2,r2,255
  81d410:	10800058 	cmpnei	r2,r2,1
  81d414:	1000011e 	bne	r2,zero,81d41c <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  81d418:	0817e2c0 	call	817e2c <OS_Sched>
    }
    return (OS_ERR_NONE);
  81d41c:	e03fff15 	stw	zero,-4(fp)
  81d420:	e0bfff17 	ldw	r2,-4(fp)
}
  81d424:	e037883a 	mov	sp,fp
  81d428:	dfc00117 	ldw	ra,4(sp)
  81d42c:	df000017 	ldw	fp,0(sp)
  81d430:	dec00204 	addi	sp,sp,8
  81d434:	f800283a 	ret

0081d438 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  81d438:	defff404 	addi	sp,sp,-48
  81d43c:	df000b15 	stw	fp,44(sp)
  81d440:	df000b04 	addi	fp,sp,44
  81d444:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81d448:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  81d44c:	e0bffe03 	ldbu	r2,-8(fp)
  81d450:	10800518 	cmpnei	r2,r2,20
  81d454:	1000031e 	bne	r2,zero,81d464 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  81d458:	00800f84 	movi	r2,62
  81d45c:	e0bfff15 	stw	r2,-4(fp)
  81d460:	00004c06 	br	81d594 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  81d464:	e0bffe03 	ldbu	r2,-8(fp)
  81d468:	10800530 	cmpltui	r2,r2,20
  81d46c:	1000061e 	bne	r2,zero,81d488 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  81d470:	e0bffe03 	ldbu	r2,-8(fp)
  81d474:	10803fe0 	cmpeqi	r2,r2,255
  81d478:	1000031e 	bne	r2,zero,81d488 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  81d47c:	00800a84 	movi	r2,42
  81d480:	e0bfff15 	stw	r2,-4(fp)
  81d484:	00004306 	br	81d594 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  81d488:	e0bffe03 	ldbu	r2,-8(fp)
  81d48c:	10803fd8 	cmpnei	r2,r2,255
  81d490:	1000141e 	bne	r2,zero,81d4e4 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d494:	0005303a 	rdctl	r2,status
  81d498:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d49c:	e0fffa17 	ldw	r3,-24(fp)
  81d4a0:	00bfff84 	movi	r2,-2
  81d4a4:	1884703a 	and	r2,r3,r2
  81d4a8:	1001703a 	wrctl	status,r2
  
  return context;
  81d4ac:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  81d4b0:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  81d4b4:	008020b4 	movhi	r2,130
  81d4b8:	10958e04 	addi	r2,r2,22072
  81d4bc:	10800017 	ldw	r2,0(r2)
  81d4c0:	10800dc3 	ldbu	r2,55(r2)
  81d4c4:	e0bffd05 	stb	r2,-12(fp)
  81d4c8:	e0bffb17 	ldw	r2,-20(fp)
  81d4cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d4d0:	e0bff917 	ldw	r2,-28(fp)
  81d4d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  81d4d8:	e0bffd03 	ldbu	r2,-12(fp)
  81d4dc:	e0bfff15 	stw	r2,-4(fp)
  81d4e0:	00002c06 	br	81d594 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d4e4:	0005303a 	rdctl	r2,status
  81d4e8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d4ec:	e0fff817 	ldw	r3,-32(fp)
  81d4f0:	00bfff84 	movi	r2,-2
  81d4f4:	1884703a 	and	r2,r3,r2
  81d4f8:	1001703a 	wrctl	status,r2
  
  return context;
  81d4fc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  81d500:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  81d504:	e0bffe03 	ldbu	r2,-8(fp)
  81d508:	00c020f4 	movhi	r3,131
  81d50c:	18ea1404 	addi	r3,r3,-22448
  81d510:	1085883a 	add	r2,r2,r2
  81d514:	1085883a 	add	r2,r2,r2
  81d518:	10c5883a 	add	r2,r2,r3
  81d51c:	10800017 	ldw	r2,0(r2)
  81d520:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  81d524:	e0bffc17 	ldw	r2,-16(fp)
  81d528:	1004c03a 	cmpne	r2,r2,zero
  81d52c:	1000071e 	bne	r2,zero,81d54c <OSTaskDelReq+0x114>
  81d530:	e0bffb17 	ldw	r2,-20(fp)
  81d534:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d538:	e0bff717 	ldw	r2,-36(fp)
  81d53c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  81d540:	008010c4 	movi	r2,67
  81d544:	e0bfff15 	stw	r2,-4(fp)
  81d548:	00001206 	br	81d594 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  81d54c:	e0bffc17 	ldw	r2,-16(fp)
  81d550:	10800058 	cmpnei	r2,r2,1
  81d554:	1000071e 	bne	r2,zero,81d574 <OSTaskDelReq+0x13c>
  81d558:	e0bffb17 	ldw	r2,-20(fp)
  81d55c:	e0bff615 	stw	r2,-40(fp)
  81d560:	e0bff617 	ldw	r2,-40(fp)
  81d564:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  81d568:	00800f44 	movi	r2,61
  81d56c:	e0bfff15 	stw	r2,-4(fp)
  81d570:	00000806 	br	81d594 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  81d574:	e0fffc17 	ldw	r3,-16(fp)
  81d578:	00800fc4 	movi	r2,63
  81d57c:	18800dc5 	stb	r2,55(r3)
  81d580:	e0bffb17 	ldw	r2,-20(fp)
  81d584:	e0bff515 	stw	r2,-44(fp)
  81d588:	e0bff517 	ldw	r2,-44(fp)
  81d58c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81d590:	e03fff15 	stw	zero,-4(fp)
  81d594:	e0bfff17 	ldw	r2,-4(fp)
}
  81d598:	e037883a 	mov	sp,fp
  81d59c:	df000017 	ldw	fp,0(sp)
  81d5a0:	dec00104 	addi	sp,sp,4
  81d5a4:	f800283a 	ret

0081d5a8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  81d5a8:	defff304 	addi	sp,sp,-52
  81d5ac:	dfc00c15 	stw	ra,48(sp)
  81d5b0:	df000b15 	stw	fp,44(sp)
  81d5b4:	df000b04 	addi	fp,sp,44
  81d5b8:	e17ffd15 	stw	r5,-12(fp)
  81d5bc:	e1bffe15 	stw	r6,-8(fp)
  81d5c0:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  81d5c4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  81d5c8:	e0bffe17 	ldw	r2,-8(fp)
  81d5cc:	1004c03a 	cmpne	r2,r2,zero
  81d5d0:	1000021e 	bne	r2,zero,81d5dc <OSTaskNameGet+0x34>
        return (0);
  81d5d4:	e03fff15 	stw	zero,-4(fp)
  81d5d8:	00005b06 	br	81d748 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  81d5dc:	e0bffc03 	ldbu	r2,-16(fp)
  81d5e0:	10800570 	cmpltui	r2,r2,21
  81d5e4:	1000081e 	bne	r2,zero,81d608 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  81d5e8:	e0bffc03 	ldbu	r2,-16(fp)
  81d5ec:	10803fe0 	cmpeqi	r2,r2,255
  81d5f0:	1000051e 	bne	r2,zero,81d608 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  81d5f4:	e0fffe17 	ldw	r3,-8(fp)
  81d5f8:	00800a84 	movi	r2,42
  81d5fc:	18800005 	stb	r2,0(r3)
            return (0);
  81d600:	e03fff15 	stw	zero,-4(fp)
  81d604:	00005006 	br	81d748 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  81d608:	e0bffd17 	ldw	r2,-12(fp)
  81d60c:	1004c03a 	cmpne	r2,r2,zero
  81d610:	1000051e 	bne	r2,zero,81d628 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  81d614:	e0fffe17 	ldw	r3,-8(fp)
  81d618:	00800304 	movi	r2,12
  81d61c:	18800005 	stb	r2,0(r3)
        return (0);
  81d620:	e03fff15 	stw	zero,-4(fp)
  81d624:	00004806 	br	81d748 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  81d628:	008020b4 	movhi	r2,130
  81d62c:	10958d04 	addi	r2,r2,22068
  81d630:	10800003 	ldbu	r2,0(r2)
  81d634:	10803fcc 	andi	r2,r2,255
  81d638:	1005003a 	cmpeq	r2,r2,zero
  81d63c:	1000051e 	bne	r2,zero,81d654 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  81d640:	e0fffe17 	ldw	r3,-8(fp)
  81d644:	00800444 	movi	r2,17
  81d648:	18800005 	stb	r2,0(r3)
        return (0);
  81d64c:	e03fff15 	stw	zero,-4(fp)
  81d650:	00003d06 	br	81d748 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d654:	0005303a 	rdctl	r2,status
  81d658:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d65c:	e0fff817 	ldw	r3,-32(fp)
  81d660:	00bfff84 	movi	r2,-2
  81d664:	1884703a 	and	r2,r3,r2
  81d668:	1001703a 	wrctl	status,r2
  
  return context;
  81d66c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  81d670:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  81d674:	e0bffc03 	ldbu	r2,-16(fp)
  81d678:	10803fd8 	cmpnei	r2,r2,255
  81d67c:	1000051e 	bne	r2,zero,81d694 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  81d680:	008020b4 	movhi	r2,130
  81d684:	10958e04 	addi	r2,r2,22072
  81d688:	10800017 	ldw	r2,0(r2)
  81d68c:	10800c83 	ldbu	r2,50(r2)
  81d690:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81d694:	e0bffc03 	ldbu	r2,-16(fp)
  81d698:	00c020f4 	movhi	r3,131
  81d69c:	18ea1404 	addi	r3,r3,-22448
  81d6a0:	1085883a 	add	r2,r2,r2
  81d6a4:	1085883a 	add	r2,r2,r2
  81d6a8:	10c5883a 	add	r2,r2,r3
  81d6ac:	10800017 	ldw	r2,0(r2)
  81d6b0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  81d6b4:	e0bffb17 	ldw	r2,-20(fp)
  81d6b8:	1004c03a 	cmpne	r2,r2,zero
  81d6bc:	1000091e 	bne	r2,zero,81d6e4 <OSTaskNameGet+0x13c>
  81d6c0:	e0bff917 	ldw	r2,-28(fp)
  81d6c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d6c8:	e0bff717 	ldw	r2,-36(fp)
  81d6cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81d6d0:	e0fffe17 	ldw	r3,-8(fp)
  81d6d4:	008010c4 	movi	r2,67
  81d6d8:	18800005 	stb	r2,0(r3)
        return (0);
  81d6dc:	e03fff15 	stw	zero,-4(fp)
  81d6e0:	00001906 	br	81d748 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  81d6e4:	e0bffb17 	ldw	r2,-20(fp)
  81d6e8:	10800058 	cmpnei	r2,r2,1
  81d6ec:	1000091e 	bne	r2,zero,81d714 <OSTaskNameGet+0x16c>
  81d6f0:	e0bff917 	ldw	r2,-28(fp)
  81d6f4:	e0bff615 	stw	r2,-40(fp)
  81d6f8:	e0bff617 	ldw	r2,-40(fp)
  81d6fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81d700:	e0fffe17 	ldw	r3,-8(fp)
  81d704:	008010c4 	movi	r2,67
  81d708:	18800005 	stb	r2,0(r3)
        return (0);
  81d70c:	e03fff15 	stw	zero,-4(fp)
  81d710:	00000d06 	br	81d748 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  81d714:	e0bffb17 	ldw	r2,-20(fp)
  81d718:	11401304 	addi	r5,r2,76
  81d71c:	e13ffd17 	ldw	r4,-12(fp)
  81d720:	0817f700 	call	817f70 <OS_StrCopy>
  81d724:	e0bffa05 	stb	r2,-24(fp)
  81d728:	e0bff917 	ldw	r2,-28(fp)
  81d72c:	e0bff515 	stw	r2,-44(fp)
  81d730:	e0bff517 	ldw	r2,-44(fp)
  81d734:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81d738:	e0bffe17 	ldw	r2,-8(fp)
  81d73c:	10000005 	stb	zero,0(r2)
    return (len);
  81d740:	e0bffa03 	ldbu	r2,-24(fp)
  81d744:	e0bfff15 	stw	r2,-4(fp)
  81d748:	e0bfff17 	ldw	r2,-4(fp)
}
  81d74c:	e037883a 	mov	sp,fp
  81d750:	dfc00117 	ldw	ra,4(sp)
  81d754:	df000017 	ldw	fp,0(sp)
  81d758:	dec00204 	addi	sp,sp,8
  81d75c:	f800283a 	ret

0081d760 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  81d760:	defff304 	addi	sp,sp,-52
  81d764:	dfc00c15 	stw	ra,48(sp)
  81d768:	df000b15 	stw	fp,44(sp)
  81d76c:	df000b04 	addi	fp,sp,44
  81d770:	e17ffe15 	stw	r5,-8(fp)
  81d774:	e1bfff15 	stw	r6,-4(fp)
  81d778:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  81d77c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  81d780:	e0bfff17 	ldw	r2,-4(fp)
  81d784:	1005003a 	cmpeq	r2,r2,zero
  81d788:	1000611e 	bne	r2,zero,81d910 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  81d78c:	e0bffd03 	ldbu	r2,-12(fp)
  81d790:	10800570 	cmpltui	r2,r2,21
  81d794:	1000071e 	bne	r2,zero,81d7b4 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  81d798:	e0bffd03 	ldbu	r2,-12(fp)
  81d79c:	10803fe0 	cmpeqi	r2,r2,255
  81d7a0:	1000041e 	bne	r2,zero,81d7b4 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  81d7a4:	e0ffff17 	ldw	r3,-4(fp)
  81d7a8:	00800a84 	movi	r2,42
  81d7ac:	18800005 	stb	r2,0(r3)
            return;
  81d7b0:	00005706 	br	81d910 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  81d7b4:	e0bffe17 	ldw	r2,-8(fp)
  81d7b8:	1004c03a 	cmpne	r2,r2,zero
  81d7bc:	1000041e 	bne	r2,zero,81d7d0 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  81d7c0:	e0ffff17 	ldw	r3,-4(fp)
  81d7c4:	00800304 	movi	r2,12
  81d7c8:	18800005 	stb	r2,0(r3)
        return;
  81d7cc:	00005006 	br	81d910 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  81d7d0:	008020b4 	movhi	r2,130
  81d7d4:	10958d04 	addi	r2,r2,22068
  81d7d8:	10800003 	ldbu	r2,0(r2)
  81d7dc:	10803fcc 	andi	r2,r2,255
  81d7e0:	1005003a 	cmpeq	r2,r2,zero
  81d7e4:	1000041e 	bne	r2,zero,81d7f8 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  81d7e8:	e0ffff17 	ldw	r3,-4(fp)
  81d7ec:	00800484 	movi	r2,18
  81d7f0:	18800005 	stb	r2,0(r3)
        return;
  81d7f4:	00004606 	br	81d910 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d7f8:	0005303a 	rdctl	r2,status
  81d7fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d800:	e0fff917 	ldw	r3,-28(fp)
  81d804:	00bfff84 	movi	r2,-2
  81d808:	1884703a 	and	r2,r3,r2
  81d80c:	1001703a 	wrctl	status,r2
  
  return context;
  81d810:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81d814:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  81d818:	e0bffd03 	ldbu	r2,-12(fp)
  81d81c:	10803fd8 	cmpnei	r2,r2,255
  81d820:	1000051e 	bne	r2,zero,81d838 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  81d824:	008020b4 	movhi	r2,130
  81d828:	10958e04 	addi	r2,r2,22072
  81d82c:	10800017 	ldw	r2,0(r2)
  81d830:	10800c83 	ldbu	r2,50(r2)
  81d834:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81d838:	e0bffd03 	ldbu	r2,-12(fp)
  81d83c:	00c020f4 	movhi	r3,131
  81d840:	18ea1404 	addi	r3,r3,-22448
  81d844:	1085883a 	add	r2,r2,r2
  81d848:	1085883a 	add	r2,r2,r2
  81d84c:	10c5883a 	add	r2,r2,r3
  81d850:	10800017 	ldw	r2,0(r2)
  81d854:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  81d858:	e0bffb17 	ldw	r2,-20(fp)
  81d85c:	1004c03a 	cmpne	r2,r2,zero
  81d860:	1000081e 	bne	r2,zero,81d884 <OSTaskNameSet+0x124>
  81d864:	e0bffa17 	ldw	r2,-24(fp)
  81d868:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d86c:	e0bff817 	ldw	r2,-32(fp)
  81d870:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81d874:	e0ffff17 	ldw	r3,-4(fp)
  81d878:	008010c4 	movi	r2,67
  81d87c:	18800005 	stb	r2,0(r3)
        return;
  81d880:	00002306 	br	81d910 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  81d884:	e0bffb17 	ldw	r2,-20(fp)
  81d888:	10800058 	cmpnei	r2,r2,1
  81d88c:	1000081e 	bne	r2,zero,81d8b0 <OSTaskNameSet+0x150>
  81d890:	e0bffa17 	ldw	r2,-24(fp)
  81d894:	e0bff715 	stw	r2,-36(fp)
  81d898:	e0bff717 	ldw	r2,-36(fp)
  81d89c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81d8a0:	e0ffff17 	ldw	r3,-4(fp)
  81d8a4:	008010c4 	movi	r2,67
  81d8a8:	18800005 	stb	r2,0(r3)
        return;
  81d8ac:	00001806 	br	81d910 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  81d8b0:	e13ffe17 	ldw	r4,-8(fp)
  81d8b4:	0817ff00 	call	817ff0 <OS_StrLen>
  81d8b8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  81d8bc:	e0bffc03 	ldbu	r2,-16(fp)
  81d8c0:	10800830 	cmpltui	r2,r2,32
  81d8c4:	1000081e 	bne	r2,zero,81d8e8 <OSTaskNameSet+0x188>
  81d8c8:	e0bffa17 	ldw	r2,-24(fp)
  81d8cc:	e0bff615 	stw	r2,-40(fp)
  81d8d0:	e0bff617 	ldw	r2,-40(fp)
  81d8d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  81d8d8:	e0ffff17 	ldw	r3,-4(fp)
  81d8dc:	00801044 	movi	r2,65
  81d8e0:	18800005 	stb	r2,0(r3)
        return;
  81d8e4:	00000a06 	br	81d910 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  81d8e8:	e0bffb17 	ldw	r2,-20(fp)
  81d8ec:	11001304 	addi	r4,r2,76
  81d8f0:	e17ffe17 	ldw	r5,-8(fp)
  81d8f4:	0817f700 	call	817f70 <OS_StrCopy>
  81d8f8:	e0bffa17 	ldw	r2,-24(fp)
  81d8fc:	e0bff515 	stw	r2,-44(fp)
  81d900:	e0bff517 	ldw	r2,-44(fp)
  81d904:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81d908:	e0bfff17 	ldw	r2,-4(fp)
  81d90c:	10000005 	stb	zero,0(r2)
}
  81d910:	e037883a 	mov	sp,fp
  81d914:	dfc00117 	ldw	ra,4(sp)
  81d918:	df000017 	ldw	fp,0(sp)
  81d91c:	dec00204 	addi	sp,sp,8
  81d920:	f800283a 	ret

0081d924 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  81d924:	defff304 	addi	sp,sp,-52
  81d928:	dfc00c15 	stw	ra,48(sp)
  81d92c:	df000b15 	stw	fp,44(sp)
  81d930:	df000b04 	addi	fp,sp,44
  81d934:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  81d938:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  81d93c:	e0bffe03 	ldbu	r2,-8(fp)
  81d940:	10800530 	cmpltui	r2,r2,20
  81d944:	1000031e 	bne	r2,zero,81d954 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  81d948:	00800a84 	movi	r2,42
  81d94c:	e0bfff15 	stw	r2,-4(fp)
  81d950:	00007406 	br	81db24 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d954:	0005303a 	rdctl	r2,status
  81d958:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d95c:	e0fffb17 	ldw	r3,-20(fp)
  81d960:	00bfff84 	movi	r2,-2
  81d964:	1884703a 	and	r2,r3,r2
  81d968:	1001703a 	wrctl	status,r2
  
  return context;
  81d96c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81d970:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  81d974:	e0bffe03 	ldbu	r2,-8(fp)
  81d978:	00c020f4 	movhi	r3,131
  81d97c:	18ea1404 	addi	r3,r3,-22448
  81d980:	1085883a 	add	r2,r2,r2
  81d984:	1085883a 	add	r2,r2,r2
  81d988:	10c5883a 	add	r2,r2,r3
  81d98c:	10800017 	ldw	r2,0(r2)
  81d990:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  81d994:	e0bffd17 	ldw	r2,-12(fp)
  81d998:	1004c03a 	cmpne	r2,r2,zero
  81d99c:	1000071e 	bne	r2,zero,81d9bc <OSTaskResume+0x98>
  81d9a0:	e0bffc17 	ldw	r2,-16(fp)
  81d9a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d9a8:	e0bffa17 	ldw	r2,-24(fp)
  81d9ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  81d9b0:	00801184 	movi	r2,70
  81d9b4:	e0bfff15 	stw	r2,-4(fp)
  81d9b8:	00005a06 	br	81db24 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  81d9bc:	e0bffd17 	ldw	r2,-12(fp)
  81d9c0:	10800058 	cmpnei	r2,r2,1
  81d9c4:	1000071e 	bne	r2,zero,81d9e4 <OSTaskResume+0xc0>
  81d9c8:	e0bffc17 	ldw	r2,-16(fp)
  81d9cc:	e0bff915 	stw	r2,-28(fp)
  81d9d0:	e0bff917 	ldw	r2,-28(fp)
  81d9d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81d9d8:	008010c4 	movi	r2,67
  81d9dc:	e0bfff15 	stw	r2,-4(fp)
  81d9e0:	00005006 	br	81db24 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  81d9e4:	e0bffd17 	ldw	r2,-12(fp)
  81d9e8:	10800c03 	ldbu	r2,48(r2)
  81d9ec:	10803fcc 	andi	r2,r2,255
  81d9f0:	1080020c 	andi	r2,r2,8
  81d9f4:	1005003a 	cmpeq	r2,r2,zero
  81d9f8:	1000441e 	bne	r2,zero,81db0c <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  81d9fc:	e0bffd17 	ldw	r2,-12(fp)
  81da00:	10c00c03 	ldbu	r3,48(r2)
  81da04:	00bffdc4 	movi	r2,-9
  81da08:	1884703a 	and	r2,r3,r2
  81da0c:	1007883a 	mov	r3,r2
  81da10:	e0bffd17 	ldw	r2,-12(fp)
  81da14:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  81da18:	e0bffd17 	ldw	r2,-12(fp)
  81da1c:	10800c03 	ldbu	r2,48(r2)
  81da20:	10803fcc 	andi	r2,r2,255
  81da24:	1004c03a 	cmpne	r2,r2,zero
  81da28:	1000321e 	bne	r2,zero,81daf4 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  81da2c:	e0bffd17 	ldw	r2,-12(fp)
  81da30:	10800b8b 	ldhu	r2,46(r2)
  81da34:	10bfffcc 	andi	r2,r2,65535
  81da38:	1004c03a 	cmpne	r2,r2,zero
  81da3c:	1000281e 	bne	r2,zero,81dae0 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  81da40:	e0bffd17 	ldw	r2,-12(fp)
  81da44:	10c00d83 	ldbu	r3,54(r2)
  81da48:	008020b4 	movhi	r2,130
  81da4c:	10958b04 	addi	r2,r2,22060
  81da50:	10800003 	ldbu	r2,0(r2)
  81da54:	1884b03a 	or	r2,r3,r2
  81da58:	1007883a 	mov	r3,r2
  81da5c:	008020b4 	movhi	r2,130
  81da60:	10958b04 	addi	r2,r2,22060
  81da64:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81da68:	e0bffd17 	ldw	r2,-12(fp)
  81da6c:	10800d03 	ldbu	r2,52(r2)
  81da70:	11003fcc 	andi	r4,r2,255
  81da74:	e0bffd17 	ldw	r2,-12(fp)
  81da78:	10800d03 	ldbu	r2,52(r2)
  81da7c:	10c03fcc 	andi	r3,r2,255
  81da80:	008020b4 	movhi	r2,130
  81da84:	10958b44 	addi	r2,r2,22061
  81da88:	10c5883a 	add	r2,r2,r3
  81da8c:	10c00003 	ldbu	r3,0(r2)
  81da90:	e0bffd17 	ldw	r2,-12(fp)
  81da94:	10800d43 	ldbu	r2,53(r2)
  81da98:	1884b03a 	or	r2,r3,r2
  81da9c:	1007883a 	mov	r3,r2
  81daa0:	008020b4 	movhi	r2,130
  81daa4:	10958b44 	addi	r2,r2,22061
  81daa8:	1105883a 	add	r2,r2,r4
  81daac:	10c00005 	stb	r3,0(r2)
  81dab0:	e0bffc17 	ldw	r2,-16(fp)
  81dab4:	e0bff815 	stw	r2,-32(fp)
  81dab8:	e0bff817 	ldw	r2,-32(fp)
  81dabc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  81dac0:	008020b4 	movhi	r2,130
  81dac4:	10957f44 	addi	r2,r2,22013
  81dac8:	10800003 	ldbu	r2,0(r2)
  81dacc:	10803fcc 	andi	r2,r2,255
  81dad0:	10800058 	cmpnei	r2,r2,1
  81dad4:	10000b1e 	bne	r2,zero,81db04 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  81dad8:	0817e2c0 	call	817e2c <OS_Sched>
  81dadc:	00000906 	br	81db04 <OSTaskResume+0x1e0>
  81dae0:	e0bffc17 	ldw	r2,-16(fp)
  81dae4:	e0bff715 	stw	r2,-36(fp)
  81dae8:	e0bff717 	ldw	r2,-36(fp)
  81daec:	1001703a 	wrctl	status,r2
  81daf0:	00000406 	br	81db04 <OSTaskResume+0x1e0>
  81daf4:	e0bffc17 	ldw	r2,-16(fp)
  81daf8:	e0bff615 	stw	r2,-40(fp)
  81dafc:	e0bff617 	ldw	r2,-40(fp)
  81db00:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  81db04:	e03fff15 	stw	zero,-4(fp)
  81db08:	00000606 	br	81db24 <OSTaskResume+0x200>
  81db0c:	e0bffc17 	ldw	r2,-16(fp)
  81db10:	e0bff515 	stw	r2,-44(fp)
  81db14:	e0bff517 	ldw	r2,-44(fp)
  81db18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  81db1c:	00801104 	movi	r2,68
  81db20:	e0bfff15 	stw	r2,-4(fp)
  81db24:	e0bfff17 	ldw	r2,-4(fp)
}
  81db28:	e037883a 	mov	sp,fp
  81db2c:	dfc00117 	ldw	ra,4(sp)
  81db30:	df000017 	ldw	fp,0(sp)
  81db34:	dec00204 	addi	sp,sp,8
  81db38:	f800283a 	ret

0081db3c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  81db3c:	defff204 	addi	sp,sp,-56
  81db40:	df000d15 	stw	fp,52(sp)
  81db44:	df000d04 	addi	fp,sp,52
  81db48:	e17ffe15 	stw	r5,-8(fp)
  81db4c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  81db50:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  81db54:	e0bffd03 	ldbu	r2,-12(fp)
  81db58:	10800570 	cmpltui	r2,r2,21
  81db5c:	1000061e 	bne	r2,zero,81db78 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  81db60:	e0bffd03 	ldbu	r2,-12(fp)
  81db64:	10803fe0 	cmpeqi	r2,r2,255
  81db68:	1000031e 	bne	r2,zero,81db78 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  81db6c:	00800a84 	movi	r2,42
  81db70:	e0bfff15 	stw	r2,-4(fp)
  81db74:	00006b06 	br	81dd24 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  81db78:	e0bffe17 	ldw	r2,-8(fp)
  81db7c:	1004c03a 	cmpne	r2,r2,zero
  81db80:	1000031e 	bne	r2,zero,81db90 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  81db84:	00800244 	movi	r2,9
  81db88:	e0bfff15 	stw	r2,-4(fp)
  81db8c:	00006506 	br	81dd24 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  81db90:	e0bffe17 	ldw	r2,-8(fp)
  81db94:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  81db98:	e0bffe17 	ldw	r2,-8(fp)
  81db9c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81dba0:	0005303a 	rdctl	r2,status
  81dba4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81dba8:	e0fff717 	ldw	r3,-36(fp)
  81dbac:	00bfff84 	movi	r2,-2
  81dbb0:	1884703a 	and	r2,r3,r2
  81dbb4:	1001703a 	wrctl	status,r2
  
  return context;
  81dbb8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  81dbbc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  81dbc0:	e0bffd03 	ldbu	r2,-12(fp)
  81dbc4:	10803fd8 	cmpnei	r2,r2,255
  81dbc8:	1000051e 	bne	r2,zero,81dbe0 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  81dbcc:	008020b4 	movhi	r2,130
  81dbd0:	10958e04 	addi	r2,r2,22072
  81dbd4:	10800017 	ldw	r2,0(r2)
  81dbd8:	10800c83 	ldbu	r2,50(r2)
  81dbdc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81dbe0:	e0bffd03 	ldbu	r2,-12(fp)
  81dbe4:	00c020f4 	movhi	r3,131
  81dbe8:	18ea1404 	addi	r3,r3,-22448
  81dbec:	1085883a 	add	r2,r2,r2
  81dbf0:	1085883a 	add	r2,r2,r2
  81dbf4:	10c5883a 	add	r2,r2,r3
  81dbf8:	10800017 	ldw	r2,0(r2)
  81dbfc:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  81dc00:	e0bffc17 	ldw	r2,-16(fp)
  81dc04:	1004c03a 	cmpne	r2,r2,zero
  81dc08:	1000071e 	bne	r2,zero,81dc28 <OSTaskStkChk+0xec>
  81dc0c:	e0bff817 	ldw	r2,-32(fp)
  81dc10:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81dc14:	e0bff617 	ldw	r2,-40(fp)
  81dc18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81dc1c:	008010c4 	movi	r2,67
  81dc20:	e0bfff15 	stw	r2,-4(fp)
  81dc24:	00003f06 	br	81dd24 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  81dc28:	e0bffc17 	ldw	r2,-16(fp)
  81dc2c:	10800058 	cmpnei	r2,r2,1
  81dc30:	1000071e 	bne	r2,zero,81dc50 <OSTaskStkChk+0x114>
  81dc34:	e0bff817 	ldw	r2,-32(fp)
  81dc38:	e0bff515 	stw	r2,-44(fp)
  81dc3c:	e0bff517 	ldw	r2,-44(fp)
  81dc40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81dc44:	008010c4 	movi	r2,67
  81dc48:	e0bfff15 	stw	r2,-4(fp)
  81dc4c:	00003506 	br	81dd24 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  81dc50:	e0bffc17 	ldw	r2,-16(fp)
  81dc54:	1080040b 	ldhu	r2,16(r2)
  81dc58:	10bfffcc 	andi	r2,r2,65535
  81dc5c:	1080004c 	andi	r2,r2,1
  81dc60:	1004c03a 	cmpne	r2,r2,zero
  81dc64:	1000071e 	bne	r2,zero,81dc84 <OSTaskStkChk+0x148>
  81dc68:	e0bff817 	ldw	r2,-32(fp)
  81dc6c:	e0bff415 	stw	r2,-48(fp)
  81dc70:	e0bff417 	ldw	r2,-48(fp)
  81dc74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  81dc78:	00801144 	movi	r2,69
  81dc7c:	e0bfff15 	stw	r2,-4(fp)
  81dc80:	00002806 	br	81dd24 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  81dc84:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  81dc88:	e0bffc17 	ldw	r2,-16(fp)
  81dc8c:	10800317 	ldw	r2,12(r2)
  81dc90:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  81dc94:	e0bffc17 	ldw	r2,-16(fp)
  81dc98:	10800217 	ldw	r2,8(r2)
  81dc9c:	e0bffb15 	stw	r2,-20(fp)
  81dca0:	e0bff817 	ldw	r2,-32(fp)
  81dca4:	e0bff315 	stw	r2,-52(fp)
  81dca8:	e0bff317 	ldw	r2,-52(fp)
  81dcac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  81dcb0:	00000306 	br	81dcc0 <OSTaskStkChk+0x184>
        nfree++;
  81dcb4:	e0bffa17 	ldw	r2,-24(fp)
  81dcb8:	10800044 	addi	r2,r2,1
  81dcbc:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  81dcc0:	e0bffb17 	ldw	r2,-20(fp)
  81dcc4:	10800017 	ldw	r2,0(r2)
  81dcc8:	1005003a 	cmpeq	r2,r2,zero
  81dccc:	1007883a 	mov	r3,r2
  81dcd0:	e0bffb17 	ldw	r2,-20(fp)
  81dcd4:	10800104 	addi	r2,r2,4
  81dcd8:	e0bffb15 	stw	r2,-20(fp)
  81dcdc:	18803fcc 	andi	r2,r3,255
  81dce0:	1004c03a 	cmpne	r2,r2,zero
  81dce4:	103ff31e 	bne	r2,zero,81dcb4 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  81dce8:	e0bffa17 	ldw	r2,-24(fp)
  81dcec:	1085883a 	add	r2,r2,r2
  81dcf0:	1085883a 	add	r2,r2,r2
  81dcf4:	1007883a 	mov	r3,r2
  81dcf8:	e0bffe17 	ldw	r2,-8(fp)
  81dcfc:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  81dd00:	e0fff917 	ldw	r3,-28(fp)
  81dd04:	e0bffa17 	ldw	r2,-24(fp)
  81dd08:	1885c83a 	sub	r2,r3,r2
  81dd0c:	1085883a 	add	r2,r2,r2
  81dd10:	1085883a 	add	r2,r2,r2
  81dd14:	1007883a 	mov	r3,r2
  81dd18:	e0bffe17 	ldw	r2,-8(fp)
  81dd1c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  81dd20:	e03fff15 	stw	zero,-4(fp)
  81dd24:	e0bfff17 	ldw	r2,-4(fp)
}
  81dd28:	e037883a 	mov	sp,fp
  81dd2c:	df000017 	ldw	fp,0(sp)
  81dd30:	dec00104 	addi	sp,sp,4
  81dd34:	f800283a 	ret

0081dd38 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  81dd38:	defff404 	addi	sp,sp,-48
  81dd3c:	dfc00b15 	stw	ra,44(sp)
  81dd40:	df000a15 	stw	fp,40(sp)
  81dd44:	df000a04 	addi	fp,sp,40
  81dd48:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81dd4c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  81dd50:	e0bffe03 	ldbu	r2,-8(fp)
  81dd54:	10800518 	cmpnei	r2,r2,20
  81dd58:	1000031e 	bne	r2,zero,81dd68 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  81dd5c:	008011c4 	movi	r2,71
  81dd60:	e0bfff15 	stw	r2,-4(fp)
  81dd64:	00007906 	br	81df4c <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  81dd68:	e0bffe03 	ldbu	r2,-8(fp)
  81dd6c:	10800530 	cmpltui	r2,r2,20
  81dd70:	1000061e 	bne	r2,zero,81dd8c <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  81dd74:	e0bffe03 	ldbu	r2,-8(fp)
  81dd78:	10803fe0 	cmpeqi	r2,r2,255
  81dd7c:	1000031e 	bne	r2,zero,81dd8c <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  81dd80:	00800a84 	movi	r2,42
  81dd84:	e0bfff15 	stw	r2,-4(fp)
  81dd88:	00007006 	br	81df4c <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81dd8c:	0005303a 	rdctl	r2,status
  81dd90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81dd94:	e0fff917 	ldw	r3,-28(fp)
  81dd98:	00bfff84 	movi	r2,-2
  81dd9c:	1884703a 	and	r2,r3,r2
  81dda0:	1001703a 	wrctl	status,r2
  
  return context;
  81dda4:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  81dda8:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  81ddac:	e0bffe03 	ldbu	r2,-8(fp)
  81ddb0:	10803fd8 	cmpnei	r2,r2,255
  81ddb4:	1000081e 	bne	r2,zero,81ddd8 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  81ddb8:	008020b4 	movhi	r2,130
  81ddbc:	10958e04 	addi	r2,r2,22072
  81ddc0:	10800017 	ldw	r2,0(r2)
  81ddc4:	10800c83 	ldbu	r2,50(r2)
  81ddc8:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  81ddcc:	00800044 	movi	r2,1
  81ddd0:	e0bffd05 	stb	r2,-12(fp)
  81ddd4:	00000b06 	br	81de04 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  81ddd8:	008020b4 	movhi	r2,130
  81dddc:	10958e04 	addi	r2,r2,22072
  81dde0:	10800017 	ldw	r2,0(r2)
  81dde4:	10800c83 	ldbu	r2,50(r2)
  81dde8:	10c03fcc 	andi	r3,r2,255
  81ddec:	e0bffe03 	ldbu	r2,-8(fp)
  81ddf0:	1880031e 	bne	r3,r2,81de00 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  81ddf4:	00800044 	movi	r2,1
  81ddf8:	e0bffd05 	stb	r2,-12(fp)
  81ddfc:	00000106 	br	81de04 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  81de00:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81de04:	e0bffe03 	ldbu	r2,-8(fp)
  81de08:	00c020f4 	movhi	r3,131
  81de0c:	18ea1404 	addi	r3,r3,-22448
  81de10:	1085883a 	add	r2,r2,r2
  81de14:	1085883a 	add	r2,r2,r2
  81de18:	10c5883a 	add	r2,r2,r3
  81de1c:	10800017 	ldw	r2,0(r2)
  81de20:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  81de24:	e0bffc17 	ldw	r2,-16(fp)
  81de28:	1004c03a 	cmpne	r2,r2,zero
  81de2c:	1000071e 	bne	r2,zero,81de4c <OSTaskSuspend+0x114>
  81de30:	e0bffa17 	ldw	r2,-24(fp)
  81de34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81de38:	e0bff817 	ldw	r2,-32(fp)
  81de3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  81de40:	00801204 	movi	r2,72
  81de44:	e0bfff15 	stw	r2,-4(fp)
  81de48:	00004006 	br	81df4c <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  81de4c:	e0bffc17 	ldw	r2,-16(fp)
  81de50:	10800058 	cmpnei	r2,r2,1
  81de54:	1000071e 	bne	r2,zero,81de74 <OSTaskSuspend+0x13c>
  81de58:	e0bffa17 	ldw	r2,-24(fp)
  81de5c:	e0bff715 	stw	r2,-36(fp)
  81de60:	e0bff717 	ldw	r2,-36(fp)
  81de64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81de68:	008010c4 	movi	r2,67
  81de6c:	e0bfff15 	stw	r2,-4(fp)
  81de70:	00003606 	br	81df4c <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  81de74:	e0bffc17 	ldw	r2,-16(fp)
  81de78:	10800d03 	ldbu	r2,52(r2)
  81de7c:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  81de80:	e13ffb03 	ldbu	r4,-20(fp)
  81de84:	e0fffb03 	ldbu	r3,-20(fp)
  81de88:	008020b4 	movhi	r2,130
  81de8c:	10958b44 	addi	r2,r2,22061
  81de90:	10c5883a 	add	r2,r2,r3
  81de94:	10800003 	ldbu	r2,0(r2)
  81de98:	1007883a 	mov	r3,r2
  81de9c:	e0bffc17 	ldw	r2,-16(fp)
  81dea0:	10800d43 	ldbu	r2,53(r2)
  81dea4:	0084303a 	nor	r2,zero,r2
  81dea8:	1884703a 	and	r2,r3,r2
  81deac:	1007883a 	mov	r3,r2
  81deb0:	008020b4 	movhi	r2,130
  81deb4:	10958b44 	addi	r2,r2,22061
  81deb8:	1105883a 	add	r2,r2,r4
  81debc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  81dec0:	e0fffb03 	ldbu	r3,-20(fp)
  81dec4:	008020b4 	movhi	r2,130
  81dec8:	10958b44 	addi	r2,r2,22061
  81decc:	10c5883a 	add	r2,r2,r3
  81ded0:	10800003 	ldbu	r2,0(r2)
  81ded4:	10803fcc 	andi	r2,r2,255
  81ded8:	1004c03a 	cmpne	r2,r2,zero
  81dedc:	10000c1e 	bne	r2,zero,81df10 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  81dee0:	e0bffc17 	ldw	r2,-16(fp)
  81dee4:	10800d83 	ldbu	r2,54(r2)
  81dee8:	0084303a 	nor	r2,zero,r2
  81deec:	1007883a 	mov	r3,r2
  81def0:	008020b4 	movhi	r2,130
  81def4:	10958b04 	addi	r2,r2,22060
  81def8:	10800003 	ldbu	r2,0(r2)
  81defc:	1884703a 	and	r2,r3,r2
  81df00:	1007883a 	mov	r3,r2
  81df04:	008020b4 	movhi	r2,130
  81df08:	10958b04 	addi	r2,r2,22060
  81df0c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  81df10:	e0bffc17 	ldw	r2,-16(fp)
  81df14:	10800c03 	ldbu	r2,48(r2)
  81df18:	10800214 	ori	r2,r2,8
  81df1c:	1007883a 	mov	r3,r2
  81df20:	e0bffc17 	ldw	r2,-16(fp)
  81df24:	10c00c05 	stb	r3,48(r2)
  81df28:	e0bffa17 	ldw	r2,-24(fp)
  81df2c:	e0bff615 	stw	r2,-40(fp)
  81df30:	e0bff617 	ldw	r2,-40(fp)
  81df34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  81df38:	e0bffd03 	ldbu	r2,-12(fp)
  81df3c:	10800058 	cmpnei	r2,r2,1
  81df40:	1000011e 	bne	r2,zero,81df48 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  81df44:	0817e2c0 	call	817e2c <OS_Sched>
    }
    return (OS_ERR_NONE);
  81df48:	e03fff15 	stw	zero,-4(fp)
  81df4c:	e0bfff17 	ldw	r2,-4(fp)
}
  81df50:	e037883a 	mov	sp,fp
  81df54:	dfc00117 	ldw	ra,4(sp)
  81df58:	df000017 	ldw	fp,0(sp)
  81df5c:	dec00204 	addi	sp,sp,8
  81df60:	f800283a 	ret

0081df64 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  81df64:	defff504 	addi	sp,sp,-44
  81df68:	dfc00a15 	stw	ra,40(sp)
  81df6c:	df000915 	stw	fp,36(sp)
  81df70:	df000904 	addi	fp,sp,36
  81df74:	e17ffe15 	stw	r5,-8(fp)
  81df78:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81df7c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  81df80:	e0bffd03 	ldbu	r2,-12(fp)
  81df84:	10800570 	cmpltui	r2,r2,21
  81df88:	1000061e 	bne	r2,zero,81dfa4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  81df8c:	e0bffd03 	ldbu	r2,-12(fp)
  81df90:	10803fe0 	cmpeqi	r2,r2,255
  81df94:	1000031e 	bne	r2,zero,81dfa4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  81df98:	00800a84 	movi	r2,42
  81df9c:	e0bfff15 	stw	r2,-4(fp)
  81dfa0:	00003b06 	br	81e090 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  81dfa4:	e0bffe17 	ldw	r2,-8(fp)
  81dfa8:	1004c03a 	cmpne	r2,r2,zero
  81dfac:	1000031e 	bne	r2,zero,81dfbc <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  81dfb0:	00800244 	movi	r2,9
  81dfb4:	e0bfff15 	stw	r2,-4(fp)
  81dfb8:	00003506 	br	81e090 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81dfbc:	0005303a 	rdctl	r2,status
  81dfc0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81dfc4:	e0fffa17 	ldw	r3,-24(fp)
  81dfc8:	00bfff84 	movi	r2,-2
  81dfcc:	1884703a 	and	r2,r3,r2
  81dfd0:	1001703a 	wrctl	status,r2
  
  return context;
  81dfd4:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81dfd8:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  81dfdc:	e0bffd03 	ldbu	r2,-12(fp)
  81dfe0:	10803fd8 	cmpnei	r2,r2,255
  81dfe4:	1000051e 	bne	r2,zero,81dffc <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  81dfe8:	008020b4 	movhi	r2,130
  81dfec:	10958e04 	addi	r2,r2,22072
  81dff0:	10800017 	ldw	r2,0(r2)
  81dff4:	10800c83 	ldbu	r2,50(r2)
  81dff8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81dffc:	e0bffd03 	ldbu	r2,-12(fp)
  81e000:	00c020f4 	movhi	r3,131
  81e004:	18ea1404 	addi	r3,r3,-22448
  81e008:	1085883a 	add	r2,r2,r2
  81e00c:	1085883a 	add	r2,r2,r2
  81e010:	10c5883a 	add	r2,r2,r3
  81e014:	10800017 	ldw	r2,0(r2)
  81e018:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  81e01c:	e0bffc17 	ldw	r2,-16(fp)
  81e020:	1004c03a 	cmpne	r2,r2,zero
  81e024:	1000071e 	bne	r2,zero,81e044 <OSTaskQuery+0xe0>
  81e028:	e0bffb17 	ldw	r2,-20(fp)
  81e02c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e030:	e0bff917 	ldw	r2,-28(fp)
  81e034:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  81e038:	00800a44 	movi	r2,41
  81e03c:	e0bfff15 	stw	r2,-4(fp)
  81e040:	00001306 	br	81e090 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  81e044:	e0bffc17 	ldw	r2,-16(fp)
  81e048:	10800058 	cmpnei	r2,r2,1
  81e04c:	1000071e 	bne	r2,zero,81e06c <OSTaskQuery+0x108>
  81e050:	e0bffb17 	ldw	r2,-20(fp)
  81e054:	e0bff815 	stw	r2,-32(fp)
  81e058:	e0bff817 	ldw	r2,-32(fp)
  81e05c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81e060:	008010c4 	movi	r2,67
  81e064:	e0bfff15 	stw	r2,-4(fp)
  81e068:	00000906 	br	81e090 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  81e06c:	e13ffe17 	ldw	r4,-8(fp)
  81e070:	e17ffc17 	ldw	r5,-16(fp)
  81e074:	01801b04 	movi	r6,108
  81e078:	0817dc00 	call	817dc0 <OS_MemCopy>
  81e07c:	e0bffb17 	ldw	r2,-20(fp)
  81e080:	e0bff715 	stw	r2,-36(fp)
  81e084:	e0bff717 	ldw	r2,-36(fp)
  81e088:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81e08c:	e03fff15 	stw	zero,-4(fp)
  81e090:	e0bfff17 	ldw	r2,-4(fp)
}
  81e094:	e037883a 	mov	sp,fp
  81e098:	dfc00117 	ldw	ra,4(sp)
  81e09c:	df000017 	ldw	fp,0(sp)
  81e0a0:	dec00204 	addi	sp,sp,8
  81e0a4:	f800283a 	ret

0081e0a8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  81e0a8:	defffc04 	addi	sp,sp,-16
  81e0ac:	df000315 	stw	fp,12(sp)
  81e0b0:	df000304 	addi	fp,sp,12
  81e0b4:	e13ffd15 	stw	r4,-12(fp)
  81e0b8:	e17ffe15 	stw	r5,-8(fp)
  81e0bc:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  81e0c0:	e0bfff0b 	ldhu	r2,-4(fp)
  81e0c4:	1080004c 	andi	r2,r2,1
  81e0c8:	10803fcc 	andi	r2,r2,255
  81e0cc:	1005003a 	cmpeq	r2,r2,zero
  81e0d0:	1000101e 	bne	r2,zero,81e114 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  81e0d4:	e0bfff0b 	ldhu	r2,-4(fp)
  81e0d8:	1080008c 	andi	r2,r2,2
  81e0dc:	1005003a 	cmpeq	r2,r2,zero
  81e0e0:	10000c1e 	bne	r2,zero,81e114 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  81e0e4:	00000806 	br	81e108 <OS_TaskStkClr+0x60>
                size--;
  81e0e8:	e0bffe17 	ldw	r2,-8(fp)
  81e0ec:	10bfffc4 	addi	r2,r2,-1
  81e0f0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  81e0f4:	e0bffd17 	ldw	r2,-12(fp)
  81e0f8:	10000015 	stw	zero,0(r2)
  81e0fc:	e0bffd17 	ldw	r2,-12(fp)
  81e100:	10800104 	addi	r2,r2,4
  81e104:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  81e108:	e0bffe17 	ldw	r2,-8(fp)
  81e10c:	1004c03a 	cmpne	r2,r2,zero
  81e110:	103ff51e 	bne	r2,zero,81e0e8 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  81e114:	e037883a 	mov	sp,fp
  81e118:	df000017 	ldw	fp,0(sp)
  81e11c:	dec00104 	addi	sp,sp,4
  81e120:	f800283a 	ret

0081e124 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  81e124:	defff904 	addi	sp,sp,-28
  81e128:	dfc00615 	stw	ra,24(sp)
  81e12c:	df000515 	stw	fp,20(sp)
  81e130:	df000504 	addi	fp,sp,20
  81e134:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81e138:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81e13c:	008020b4 	movhi	r2,130
  81e140:	10958d04 	addi	r2,r2,22068
  81e144:	10800003 	ldbu	r2,0(r2)
  81e148:	10803fcc 	andi	r2,r2,255
  81e14c:	1004c03a 	cmpne	r2,r2,zero
  81e150:	1000421e 	bne	r2,zero,81e25c <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  81e154:	e0bfff0b 	ldhu	r2,-4(fp)
  81e158:	1005003a 	cmpeq	r2,r2,zero
  81e15c:	10003f1e 	bne	r2,zero,81e25c <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e160:	0005303a 	rdctl	r2,status
  81e164:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e168:	e0fffc17 	ldw	r3,-16(fp)
  81e16c:	00bfff84 	movi	r2,-2
  81e170:	1884703a 	and	r2,r3,r2
  81e174:	1001703a 	wrctl	status,r2
  
  return context;
  81e178:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  81e17c:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  81e180:	008020b4 	movhi	r2,130
  81e184:	10958e04 	addi	r2,r2,22072
  81e188:	10800017 	ldw	r2,0(r2)
  81e18c:	10800d03 	ldbu	r2,52(r2)
  81e190:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  81e194:	e13ffe03 	ldbu	r4,-8(fp)
  81e198:	e0fffe03 	ldbu	r3,-8(fp)
  81e19c:	008020b4 	movhi	r2,130
  81e1a0:	10958b44 	addi	r2,r2,22061
  81e1a4:	10c5883a 	add	r2,r2,r3
  81e1a8:	10800003 	ldbu	r2,0(r2)
  81e1ac:	1007883a 	mov	r3,r2
  81e1b0:	008020b4 	movhi	r2,130
  81e1b4:	10958e04 	addi	r2,r2,22072
  81e1b8:	10800017 	ldw	r2,0(r2)
  81e1bc:	10800d43 	ldbu	r2,53(r2)
  81e1c0:	0084303a 	nor	r2,zero,r2
  81e1c4:	1884703a 	and	r2,r3,r2
  81e1c8:	1007883a 	mov	r3,r2
  81e1cc:	008020b4 	movhi	r2,130
  81e1d0:	10958b44 	addi	r2,r2,22061
  81e1d4:	1105883a 	add	r2,r2,r4
  81e1d8:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  81e1dc:	e0fffe03 	ldbu	r3,-8(fp)
  81e1e0:	008020b4 	movhi	r2,130
  81e1e4:	10958b44 	addi	r2,r2,22061
  81e1e8:	10c5883a 	add	r2,r2,r3
  81e1ec:	10800003 	ldbu	r2,0(r2)
  81e1f0:	10803fcc 	andi	r2,r2,255
  81e1f4:	1004c03a 	cmpne	r2,r2,zero
  81e1f8:	10000e1e 	bne	r2,zero,81e234 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  81e1fc:	008020b4 	movhi	r2,130
  81e200:	10958e04 	addi	r2,r2,22072
  81e204:	10800017 	ldw	r2,0(r2)
  81e208:	10800d83 	ldbu	r2,54(r2)
  81e20c:	0084303a 	nor	r2,zero,r2
  81e210:	1007883a 	mov	r3,r2
  81e214:	008020b4 	movhi	r2,130
  81e218:	10958b04 	addi	r2,r2,22060
  81e21c:	10800003 	ldbu	r2,0(r2)
  81e220:	1884703a 	and	r2,r3,r2
  81e224:	1007883a 	mov	r3,r2
  81e228:	008020b4 	movhi	r2,130
  81e22c:	10958b04 	addi	r2,r2,22060
  81e230:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  81e234:	008020b4 	movhi	r2,130
  81e238:	10958e04 	addi	r2,r2,22072
  81e23c:	10c00017 	ldw	r3,0(r2)
  81e240:	e0bfff0b 	ldhu	r2,-4(fp)
  81e244:	18800b8d 	sth	r2,46(r3)
  81e248:	e0bffd17 	ldw	r2,-12(fp)
  81e24c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e250:	e0bffb17 	ldw	r2,-20(fp)
  81e254:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  81e258:	0817e2c0 	call	817e2c <OS_Sched>
    }
}
  81e25c:	e037883a 	mov	sp,fp
  81e260:	dfc00117 	ldw	ra,4(sp)
  81e264:	df000017 	ldw	fp,0(sp)
  81e268:	dec00204 	addi	sp,sp,8
  81e26c:	f800283a 	ret

0081e270 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  81e270:	defff604 	addi	sp,sp,-40
  81e274:	dfc00915 	stw	ra,36(sp)
  81e278:	df000815 	stw	fp,32(sp)
  81e27c:	dc000715 	stw	r16,28(sp)
  81e280:	df000704 	addi	fp,sp,28
  81e284:	e13ffb05 	stb	r4,-20(fp)
  81e288:	e17ffc05 	stb	r5,-16(fp)
  81e28c:	e1bffd05 	stb	r6,-12(fp)
  81e290:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81e294:	008020b4 	movhi	r2,130
  81e298:	10958d04 	addi	r2,r2,22068
  81e29c:	10800003 	ldbu	r2,0(r2)
  81e2a0:	10803fcc 	andi	r2,r2,255
  81e2a4:	1005003a 	cmpeq	r2,r2,zero
  81e2a8:	1000031e 	bne	r2,zero,81e2b8 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  81e2ac:	00801544 	movi	r2,85
  81e2b0:	e0bfff15 	stw	r2,-4(fp)
  81e2b4:	00004b06 	br	81e3e4 <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  81e2b8:	e0bffb03 	ldbu	r2,-20(fp)
  81e2bc:	1004c03a 	cmpne	r2,r2,zero
  81e2c0:	10000c1e 	bne	r2,zero,81e2f4 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  81e2c4:	e0bffc03 	ldbu	r2,-16(fp)
  81e2c8:	1004c03a 	cmpne	r2,r2,zero
  81e2cc:	1000091e 	bne	r2,zero,81e2f4 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  81e2d0:	e0bffd03 	ldbu	r2,-12(fp)
  81e2d4:	1004c03a 	cmpne	r2,r2,zero
  81e2d8:	1000061e 	bne	r2,zero,81e2f4 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  81e2dc:	e0bffe0b 	ldhu	r2,-8(fp)
  81e2e0:	1004c03a 	cmpne	r2,r2,zero
  81e2e4:	1000031e 	bne	r2,zero,81e2f4 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  81e2e8:	00801504 	movi	r2,84
  81e2ec:	e0bfff15 	stw	r2,-4(fp)
  81e2f0:	00003c06 	br	81e3e4 <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
  81e2f4:	e0bffc03 	ldbu	r2,-16(fp)
  81e2f8:	10800f30 	cmpltui	r2,r2,60
  81e2fc:	1000031e 	bne	r2,zero,81e30c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  81e300:	00801444 	movi	r2,81
  81e304:	e0bfff15 	stw	r2,-4(fp)
  81e308:	00003606 	br	81e3e4 <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
  81e30c:	e0bffd03 	ldbu	r2,-12(fp)
  81e310:	10800f30 	cmpltui	r2,r2,60
  81e314:	1000031e 	bne	r2,zero,81e324 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  81e318:	00801484 	movi	r2,82
  81e31c:	e0bfff15 	stw	r2,-4(fp)
  81e320:	00003006 	br	81e3e4 <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
  81e324:	e0bffe0b 	ldhu	r2,-8(fp)
  81e328:	1080fa30 	cmpltui	r2,r2,1000
  81e32c:	1000031e 	bne	r2,zero,81e33c <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  81e330:	008014c4 	movi	r2,83
  81e334:	e0bfff15 	stw	r2,-4(fp)
  81e338:	00002a06 	br	81e3e4 <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  81e33c:	e13ffb03 	ldbu	r4,-20(fp)
  81e340:	01438404 	movi	r5,3600
  81e344:	080c90c0 	call	80c90c <__mulsi3>
  81e348:	1021883a 	mov	r16,r2
  81e34c:	e13ffc03 	ldbu	r4,-16(fp)
  81e350:	01400f04 	movi	r5,60
  81e354:	080c90c0 	call	80c90c <__mulsi3>
  81e358:	8087883a 	add	r3,r16,r2
  81e35c:	e0bffd03 	ldbu	r2,-12(fp)
  81e360:	1889883a 	add	r4,r3,r2
  81e364:	0140fa04 	movi	r5,1000
  81e368:	080c90c0 	call	80c90c <__mulsi3>
  81e36c:	1021883a 	mov	r16,r2
  81e370:	e13ffe0b 	ldhu	r4,-8(fp)
  81e374:	0140fa04 	movi	r5,1000
  81e378:	080c90c0 	call	80c90c <__mulsi3>
  81e37c:	1009883a 	mov	r4,r2
  81e380:	0140fa04 	movi	r5,1000
  81e384:	080c8fc0 	call	80c8fc <__udivsi3>
  81e388:	8085883a 	add	r2,r16,r2
  81e38c:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  81e390:	e0bffa17 	ldw	r2,-24(fp)
  81e394:	1004d43a 	srli	r2,r2,16
  81e398:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  81e39c:	e0bffa17 	ldw	r2,-24(fp)
  81e3a0:	10bfffcc 	andi	r2,r2,65535
  81e3a4:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  81e3a8:	e0bffa17 	ldw	r2,-24(fp)
  81e3ac:	113fffcc 	andi	r4,r2,65535
  81e3b0:	081e1240 	call	81e124 <OSTimeDly>
    while (loops > 0) {
  81e3b4:	00000706 	br	81e3d4 <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
  81e3b8:	01200014 	movui	r4,32768
  81e3bc:	081e1240 	call	81e124 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  81e3c0:	01200014 	movui	r4,32768
  81e3c4:	081e1240 	call	81e124 <OSTimeDly>
        loops--;
  81e3c8:	e0bff90b 	ldhu	r2,-28(fp)
  81e3cc:	10bfffc4 	addi	r2,r2,-1
  81e3d0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  81e3d4:	e0bff90b 	ldhu	r2,-28(fp)
  81e3d8:	1004c03a 	cmpne	r2,r2,zero
  81e3dc:	103ff61e 	bne	r2,zero,81e3b8 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  81e3e0:	e03fff15 	stw	zero,-4(fp)
  81e3e4:	e0bfff17 	ldw	r2,-4(fp)
}
  81e3e8:	e037883a 	mov	sp,fp
  81e3ec:	dfc00217 	ldw	ra,8(sp)
  81e3f0:	df000117 	ldw	fp,4(sp)
  81e3f4:	dc000017 	ldw	r16,0(sp)
  81e3f8:	dec00304 	addi	sp,sp,12
  81e3fc:	f800283a 	ret

0081e400 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  81e400:	defff404 	addi	sp,sp,-48
  81e404:	dfc00b15 	stw	ra,44(sp)
  81e408:	df000a15 	stw	fp,40(sp)
  81e40c:	df000a04 	addi	fp,sp,40
  81e410:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81e414:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  81e418:	e0bffe03 	ldbu	r2,-8(fp)
  81e41c:	10800530 	cmpltui	r2,r2,20
  81e420:	1000031e 	bne	r2,zero,81e430 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  81e424:	00800a84 	movi	r2,42
  81e428:	e0bfff15 	stw	r2,-4(fp)
  81e42c:	00007206 	br	81e5f8 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e430:	0005303a 	rdctl	r2,status
  81e434:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e438:	e0fffb17 	ldw	r3,-20(fp)
  81e43c:	00bfff84 	movi	r2,-2
  81e440:	1884703a 	and	r2,r3,r2
  81e444:	1001703a 	wrctl	status,r2
  
  return context;
  81e448:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81e44c:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  81e450:	e0bffe03 	ldbu	r2,-8(fp)
  81e454:	00c020f4 	movhi	r3,131
  81e458:	18ea1404 	addi	r3,r3,-22448
  81e45c:	1085883a 	add	r2,r2,r2
  81e460:	1085883a 	add	r2,r2,r2
  81e464:	10c5883a 	add	r2,r2,r3
  81e468:	10800017 	ldw	r2,0(r2)
  81e46c:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  81e470:	e0bffd17 	ldw	r2,-12(fp)
  81e474:	1004c03a 	cmpne	r2,r2,zero
  81e478:	1000071e 	bne	r2,zero,81e498 <OSTimeDlyResume+0x98>
  81e47c:	e0bffc17 	ldw	r2,-16(fp)
  81e480:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e484:	e0bffa17 	ldw	r2,-24(fp)
  81e488:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  81e48c:	008010c4 	movi	r2,67
  81e490:	e0bfff15 	stw	r2,-4(fp)
  81e494:	00005806 	br	81e5f8 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  81e498:	e0bffd17 	ldw	r2,-12(fp)
  81e49c:	10800058 	cmpnei	r2,r2,1
  81e4a0:	1000071e 	bne	r2,zero,81e4c0 <OSTimeDlyResume+0xc0>
  81e4a4:	e0bffc17 	ldw	r2,-16(fp)
  81e4a8:	e0bff915 	stw	r2,-28(fp)
  81e4ac:	e0bff917 	ldw	r2,-28(fp)
  81e4b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  81e4b4:	008010c4 	movi	r2,67
  81e4b8:	e0bfff15 	stw	r2,-4(fp)
  81e4bc:	00004e06 	br	81e5f8 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  81e4c0:	e0bffd17 	ldw	r2,-12(fp)
  81e4c4:	10800b8b 	ldhu	r2,46(r2)
  81e4c8:	10bfffcc 	andi	r2,r2,65535
  81e4cc:	1004c03a 	cmpne	r2,r2,zero
  81e4d0:	1000071e 	bne	r2,zero,81e4f0 <OSTimeDlyResume+0xf0>
  81e4d4:	e0bffc17 	ldw	r2,-16(fp)
  81e4d8:	e0bff815 	stw	r2,-32(fp)
  81e4dc:	e0bff817 	ldw	r2,-32(fp)
  81e4e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  81e4e4:	00801404 	movi	r2,80
  81e4e8:	e0bfff15 	stw	r2,-4(fp)
  81e4ec:	00004206 	br	81e5f8 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  81e4f0:	e0bffd17 	ldw	r2,-12(fp)
  81e4f4:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  81e4f8:	e0bffd17 	ldw	r2,-12(fp)
  81e4fc:	10800c03 	ldbu	r2,48(r2)
  81e500:	10803fcc 	andi	r2,r2,255
  81e504:	10800dcc 	andi	r2,r2,55
  81e508:	1005003a 	cmpeq	r2,r2,zero
  81e50c:	10000b1e 	bne	r2,zero,81e53c <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  81e510:	e0bffd17 	ldw	r2,-12(fp)
  81e514:	10c00c03 	ldbu	r3,48(r2)
  81e518:	00bff204 	movi	r2,-56
  81e51c:	1884703a 	and	r2,r3,r2
  81e520:	1007883a 	mov	r3,r2
  81e524:	e0bffd17 	ldw	r2,-12(fp)
  81e528:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  81e52c:	e0fffd17 	ldw	r3,-12(fp)
  81e530:	00800044 	movi	r2,1
  81e534:	18800c45 	stb	r2,49(r3)
  81e538:	00000206 	br	81e544 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  81e53c:	e0bffd17 	ldw	r2,-12(fp)
  81e540:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  81e544:	e0bffd17 	ldw	r2,-12(fp)
  81e548:	10800c03 	ldbu	r2,48(r2)
  81e54c:	10803fcc 	andi	r2,r2,255
  81e550:	1080020c 	andi	r2,r2,8
  81e554:	1004c03a 	cmpne	r2,r2,zero
  81e558:	1000221e 	bne	r2,zero,81e5e4 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  81e55c:	e0bffd17 	ldw	r2,-12(fp)
  81e560:	10c00d83 	ldbu	r3,54(r2)
  81e564:	008020b4 	movhi	r2,130
  81e568:	10958b04 	addi	r2,r2,22060
  81e56c:	10800003 	ldbu	r2,0(r2)
  81e570:	1884b03a 	or	r2,r3,r2
  81e574:	1007883a 	mov	r3,r2
  81e578:	008020b4 	movhi	r2,130
  81e57c:	10958b04 	addi	r2,r2,22060
  81e580:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81e584:	e0bffd17 	ldw	r2,-12(fp)
  81e588:	10800d03 	ldbu	r2,52(r2)
  81e58c:	11003fcc 	andi	r4,r2,255
  81e590:	e0bffd17 	ldw	r2,-12(fp)
  81e594:	10800d03 	ldbu	r2,52(r2)
  81e598:	10c03fcc 	andi	r3,r2,255
  81e59c:	008020b4 	movhi	r2,130
  81e5a0:	10958b44 	addi	r2,r2,22061
  81e5a4:	10c5883a 	add	r2,r2,r3
  81e5a8:	10c00003 	ldbu	r3,0(r2)
  81e5ac:	e0bffd17 	ldw	r2,-12(fp)
  81e5b0:	10800d43 	ldbu	r2,53(r2)
  81e5b4:	1884b03a 	or	r2,r3,r2
  81e5b8:	1007883a 	mov	r3,r2
  81e5bc:	008020b4 	movhi	r2,130
  81e5c0:	10958b44 	addi	r2,r2,22061
  81e5c4:	1105883a 	add	r2,r2,r4
  81e5c8:	10c00005 	stb	r3,0(r2)
  81e5cc:	e0bffc17 	ldw	r2,-16(fp)
  81e5d0:	e0bff715 	stw	r2,-36(fp)
  81e5d4:	e0bff717 	ldw	r2,-36(fp)
  81e5d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  81e5dc:	0817e2c0 	call	817e2c <OS_Sched>
  81e5e0:	00000406 	br	81e5f4 <OSTimeDlyResume+0x1f4>
  81e5e4:	e0bffc17 	ldw	r2,-16(fp)
  81e5e8:	e0bff615 	stw	r2,-40(fp)
  81e5ec:	e0bff617 	ldw	r2,-40(fp)
  81e5f0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  81e5f4:	e03fff15 	stw	zero,-4(fp)
  81e5f8:	e0bfff17 	ldw	r2,-4(fp)
}
  81e5fc:	e037883a 	mov	sp,fp
  81e600:	dfc00117 	ldw	ra,4(sp)
  81e604:	df000017 	ldw	fp,0(sp)
  81e608:	dec00204 	addi	sp,sp,8
  81e60c:	f800283a 	ret

0081e610 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  81e610:	defffb04 	addi	sp,sp,-20
  81e614:	df000415 	stw	fp,16(sp)
  81e618:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81e61c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e620:	0005303a 	rdctl	r2,status
  81e624:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e628:	e0fffd17 	ldw	r3,-12(fp)
  81e62c:	00bfff84 	movi	r2,-2
  81e630:	1884703a 	and	r2,r3,r2
  81e634:	1001703a 	wrctl	status,r2
  
  return context;
  81e638:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  81e63c:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  81e640:	008020b4 	movhi	r2,130
  81e644:	10958f04 	addi	r2,r2,22076
  81e648:	10800017 	ldw	r2,0(r2)
  81e64c:	e0bfff15 	stw	r2,-4(fp)
  81e650:	e0bffe17 	ldw	r2,-8(fp)
  81e654:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e658:	e0bffc17 	ldw	r2,-16(fp)
  81e65c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  81e660:	e0bfff17 	ldw	r2,-4(fp)
}
  81e664:	e037883a 	mov	sp,fp
  81e668:	df000017 	ldw	fp,0(sp)
  81e66c:	dec00104 	addi	sp,sp,4
  81e670:	f800283a 	ret

0081e674 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  81e674:	defffb04 	addi	sp,sp,-20
  81e678:	df000415 	stw	fp,16(sp)
  81e67c:	df000404 	addi	fp,sp,16
  81e680:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81e684:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e688:	0005303a 	rdctl	r2,status
  81e68c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e690:	e0fffd17 	ldw	r3,-12(fp)
  81e694:	00bfff84 	movi	r2,-2
  81e698:	1884703a 	and	r2,r3,r2
  81e69c:	1001703a 	wrctl	status,r2
  
  return context;
  81e6a0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  81e6a4:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  81e6a8:	00c020b4 	movhi	r3,130
  81e6ac:	18d58f04 	addi	r3,r3,22076
  81e6b0:	e0bfff17 	ldw	r2,-4(fp)
  81e6b4:	18800015 	stw	r2,0(r3)
  81e6b8:	e0bffe17 	ldw	r2,-8(fp)
  81e6bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e6c0:	e0bffc17 	ldw	r2,-16(fp)
  81e6c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  81e6c8:	e037883a 	mov	sp,fp
  81e6cc:	df000017 	ldw	fp,0(sp)
  81e6d0:	dec00104 	addi	sp,sp,4
  81e6d4:	f800283a 	ret

0081e6d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  81e6d8:	defffd04 	addi	sp,sp,-12
  81e6dc:	dfc00215 	stw	ra,8(sp)
  81e6e0:	df000115 	stw	fp,4(sp)
  81e6e4:	df000104 	addi	fp,sp,4
  81e6e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  81e6ec:	0820a780 	call	820a78 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  81e6f0:	00800044 	movi	r2,1
  81e6f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  81e6f8:	e037883a 	mov	sp,fp
  81e6fc:	dfc00117 	ldw	ra,4(sp)
  81e700:	df000017 	ldw	fp,0(sp)
  81e704:	dec00204 	addi	sp,sp,8
  81e708:	f800283a 	ret

0081e70c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  81e70c:	defffe04 	addi	sp,sp,-8
  81e710:	dfc00115 	stw	ra,4(sp)
  81e714:	df000015 	stw	fp,0(sp)
  81e718:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  81e71c:	01006474 	movhi	r4,401
  81e720:	21240004 	addi	r4,r4,-28672
  81e724:	000b883a 	mov	r5,zero
  81e728:	000d883a 	mov	r6,zero
  81e72c:	01c0fa04 	movi	r7,1000
  81e730:	081f5900 	call	81f590 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  81e734:	010020b4 	movhi	r4,130
  81e738:	210a4704 	addi	r4,r4,10524
  81e73c:	000b883a 	mov	r5,zero
  81e740:	01800044 	movi	r6,1
  81e744:	081e90c0 	call	81e90c <altera_avalon_jtag_uart_init>
  81e748:	010020b4 	movhi	r4,130
  81e74c:	210a3d04 	addi	r4,r4,10484
  81e750:	081e78c0 	call	81e78c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  81e754:	010020b4 	movhi	r4,130
  81e758:	210e5804 	addi	r4,r4,14688
  81e75c:	081f6c80 	call	81f6c8 <alt_up_character_lcd_init>
  81e760:	010020b4 	movhi	r4,130
  81e764:	210e5804 	addi	r4,r4,14688
  81e768:	081e78c0 	call	81e78c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
  81e76c:	010020b4 	movhi	r4,130
  81e770:	210e6304 	addi	r4,r4,14732
  81e774:	081e78c0 	call	81e78c <alt_dev_reg>
}
  81e778:	e037883a 	mov	sp,fp
  81e77c:	dfc00117 	ldw	ra,4(sp)
  81e780:	df000017 	ldw	fp,0(sp)
  81e784:	dec00204 	addi	sp,sp,8
  81e788:	f800283a 	ret

0081e78c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  81e78c:	defffd04 	addi	sp,sp,-12
  81e790:	dfc00215 	stw	ra,8(sp)
  81e794:	df000115 	stw	fp,4(sp)
  81e798:	df000104 	addi	fp,sp,4
  81e79c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  81e7a0:	e13fff17 	ldw	r4,-4(fp)
  81e7a4:	014020b4 	movhi	r5,130
  81e7a8:	294e7704 	addi	r5,r5,14812
  81e7ac:	08200500 	call	820050 <alt_dev_llist_insert>
}
  81e7b0:	e037883a 	mov	sp,fp
  81e7b4:	dfc00117 	ldw	ra,4(sp)
  81e7b8:	df000017 	ldw	fp,0(sp)
  81e7bc:	dec00204 	addi	sp,sp,8
  81e7c0:	f800283a 	ret

0081e7c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  81e7c4:	defffa04 	addi	sp,sp,-24
  81e7c8:	dfc00515 	stw	ra,20(sp)
  81e7cc:	df000415 	stw	fp,16(sp)
  81e7d0:	df000404 	addi	fp,sp,16
  81e7d4:	e13ffd15 	stw	r4,-12(fp)
  81e7d8:	e17ffe15 	stw	r5,-8(fp)
  81e7dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81e7e0:	e0bffd17 	ldw	r2,-12(fp)
  81e7e4:	10800017 	ldw	r2,0(r2)
  81e7e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  81e7ec:	e0bffc17 	ldw	r2,-16(fp)
  81e7f0:	11000a04 	addi	r4,r2,40
  81e7f4:	e0bffd17 	ldw	r2,-12(fp)
  81e7f8:	11c00217 	ldw	r7,8(r2)
  81e7fc:	e17ffe17 	ldw	r5,-8(fp)
  81e800:	e1bfff17 	ldw	r6,-4(fp)
  81e804:	081ef800 	call	81ef80 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  81e808:	e037883a 	mov	sp,fp
  81e80c:	dfc00117 	ldw	ra,4(sp)
  81e810:	df000017 	ldw	fp,0(sp)
  81e814:	dec00204 	addi	sp,sp,8
  81e818:	f800283a 	ret

0081e81c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81e81c:	defffa04 	addi	sp,sp,-24
  81e820:	dfc00515 	stw	ra,20(sp)
  81e824:	df000415 	stw	fp,16(sp)
  81e828:	df000404 	addi	fp,sp,16
  81e82c:	e13ffd15 	stw	r4,-12(fp)
  81e830:	e17ffe15 	stw	r5,-8(fp)
  81e834:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81e838:	e0bffd17 	ldw	r2,-12(fp)
  81e83c:	10800017 	ldw	r2,0(r2)
  81e840:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  81e844:	e0bffc17 	ldw	r2,-16(fp)
  81e848:	11000a04 	addi	r4,r2,40
  81e84c:	e0bffd17 	ldw	r2,-12(fp)
  81e850:	11c00217 	ldw	r7,8(r2)
  81e854:	e17ffe17 	ldw	r5,-8(fp)
  81e858:	e1bfff17 	ldw	r6,-4(fp)
  81e85c:	081f2400 	call	81f240 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  81e860:	e037883a 	mov	sp,fp
  81e864:	dfc00117 	ldw	ra,4(sp)
  81e868:	df000017 	ldw	fp,0(sp)
  81e86c:	dec00204 	addi	sp,sp,8
  81e870:	f800283a 	ret

0081e874 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  81e874:	defffc04 	addi	sp,sp,-16
  81e878:	dfc00315 	stw	ra,12(sp)
  81e87c:	df000215 	stw	fp,8(sp)
  81e880:	df000204 	addi	fp,sp,8
  81e884:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81e888:	e0bfff17 	ldw	r2,-4(fp)
  81e88c:	10800017 	ldw	r2,0(r2)
  81e890:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  81e894:	e0bffe17 	ldw	r2,-8(fp)
  81e898:	11000a04 	addi	r4,r2,40
  81e89c:	e0bfff17 	ldw	r2,-4(fp)
  81e8a0:	11400217 	ldw	r5,8(r2)
  81e8a4:	081ee180 	call	81ee18 <altera_avalon_jtag_uart_close>
}
  81e8a8:	e037883a 	mov	sp,fp
  81e8ac:	dfc00117 	ldw	ra,4(sp)
  81e8b0:	df000017 	ldw	fp,0(sp)
  81e8b4:	dec00204 	addi	sp,sp,8
  81e8b8:	f800283a 	ret

0081e8bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  81e8bc:	defffa04 	addi	sp,sp,-24
  81e8c0:	dfc00515 	stw	ra,20(sp)
  81e8c4:	df000415 	stw	fp,16(sp)
  81e8c8:	df000404 	addi	fp,sp,16
  81e8cc:	e13ffd15 	stw	r4,-12(fp)
  81e8d0:	e17ffe15 	stw	r5,-8(fp)
  81e8d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  81e8d8:	e0bffd17 	ldw	r2,-12(fp)
  81e8dc:	10800017 	ldw	r2,0(r2)
  81e8e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  81e8e4:	e0bffc17 	ldw	r2,-16(fp)
  81e8e8:	11000a04 	addi	r4,r2,40
  81e8ec:	e17ffe17 	ldw	r5,-8(fp)
  81e8f0:	e1bfff17 	ldw	r6,-4(fp)
  81e8f4:	081ee8c0 	call	81ee8c <altera_avalon_jtag_uart_ioctl>
}
  81e8f8:	e037883a 	mov	sp,fp
  81e8fc:	dfc00117 	ldw	ra,4(sp)
  81e900:	df000017 	ldw	fp,0(sp)
  81e904:	dec00204 	addi	sp,sp,8
  81e908:	f800283a 	ret

0081e90c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  81e90c:	defff504 	addi	sp,sp,-44
  81e910:	dfc00a15 	stw	ra,40(sp)
  81e914:	df000915 	stw	fp,36(sp)
  81e918:	df000904 	addi	fp,sp,36
  81e91c:	e13ffd15 	stw	r4,-12(fp)
  81e920:	e17ffe15 	stw	r5,-8(fp)
  81e924:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  81e928:	e0bffd17 	ldw	r2,-12(fp)
  81e92c:	10800c04 	addi	r2,r2,48
  81e930:	e0bffb15 	stw	r2,-20(fp)
  81e934:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  81e938:	e13ffc0b 	ldhu	r4,-16(fp)
  81e93c:	e17ffc84 	addi	r5,fp,-14
  81e940:	08189d40 	call	8189d4 <OSFlagCreate>
  81e944:	1007883a 	mov	r3,r2
  81e948:	e0bffb17 	ldw	r2,-20(fp)
  81e94c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  81e950:	e0bffd17 	ldw	r2,-12(fp)
  81e954:	10800a04 	addi	r2,r2,40
  81e958:	e0bff915 	stw	r2,-28(fp)
  81e95c:	00800044 	movi	r2,1
  81e960:	e0bffa0d 	sth	r2,-24(fp)
  81e964:	e13ffa0b 	ldhu	r4,-24(fp)
  81e968:	081bbdc0 	call	81bbdc <OSSemCreate>
  81e96c:	1007883a 	mov	r3,r2
  81e970:	e0bff917 	ldw	r2,-28(fp)
  81e974:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  81e978:	e0bffd17 	ldw	r2,-12(fp)
  81e97c:	10800b04 	addi	r2,r2,44
  81e980:	e0bff715 	stw	r2,-36(fp)
  81e984:	00800044 	movi	r2,1
  81e988:	e0bff80d 	sth	r2,-32(fp)
  81e98c:	e13ff80b 	ldhu	r4,-32(fp)
  81e990:	081bbdc0 	call	81bbdc <OSSemCreate>
  81e994:	1007883a 	mov	r3,r2
  81e998:	e0bff717 	ldw	r2,-36(fp)
  81e99c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81e9a0:	e0fffd17 	ldw	r3,-12(fp)
  81e9a4:	00800044 	movi	r2,1
  81e9a8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  81e9ac:	e0bffd17 	ldw	r2,-12(fp)
  81e9b0:	10800017 	ldw	r2,0(r2)
  81e9b4:	11000104 	addi	r4,r2,4
  81e9b8:	e0bffd17 	ldw	r2,-12(fp)
  81e9bc:	10800817 	ldw	r2,32(r2)
  81e9c0:	1007883a 	mov	r3,r2
  81e9c4:	2005883a 	mov	r2,r4
  81e9c8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  81e9cc:	e13fff17 	ldw	r4,-4(fp)
  81e9d0:	e17ffd17 	ldw	r5,-12(fp)
  81e9d4:	018020b4 	movhi	r6,130
  81e9d8:	31ba8f04 	addi	r6,r6,-5572
  81e9dc:	082042c0 	call	82042c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  81e9e0:	e0bffd17 	ldw	r2,-12(fp)
  81e9e4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  81e9e8:	e0bffd17 	ldw	r2,-12(fp)
  81e9ec:	11000204 	addi	r4,r2,8
  81e9f0:	008020b4 	movhi	r2,130
  81e9f4:	10959404 	addi	r2,r2,22096
  81e9f8:	10800017 	ldw	r2,0(r2)
  81e9fc:	100b883a 	mov	r5,r2
  81ea00:	018020b4 	movhi	r6,130
  81ea04:	31bb4104 	addi	r6,r6,-4860
  81ea08:	e1fffd17 	ldw	r7,-12(fp)
  81ea0c:	081fee00 	call	81fee0 <alt_alarm_start>
  81ea10:	1004403a 	cmpge	r2,r2,zero
  81ea14:	1000041e 	bne	r2,zero,81ea28 <altera_avalon_jtag_uart_init+0x11c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  81ea18:	e0fffd17 	ldw	r3,-12(fp)
  81ea1c:	00a00034 	movhi	r2,32768
  81ea20:	10bfffc4 	addi	r2,r2,-1
  81ea24:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  81ea28:	e037883a 	mov	sp,fp
  81ea2c:	dfc00117 	ldw	ra,4(sp)
  81ea30:	df000017 	ldw	fp,0(sp)
  81ea34:	dec00204 	addi	sp,sp,8
  81ea38:	f800283a 	ret

0081ea3c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  81ea3c:	defff104 	addi	sp,sp,-60
  81ea40:	dfc00e15 	stw	ra,56(sp)
  81ea44:	df000d15 	stw	fp,52(sp)
  81ea48:	df000d04 	addi	fp,sp,52
  81ea4c:	e13ffe15 	stw	r4,-8(fp)
  81ea50:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  81ea54:	e0bffe17 	ldw	r2,-8(fp)
  81ea58:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
  81ea5c:	e0bffc17 	ldw	r2,-16(fp)
  81ea60:	10800017 	ldw	r2,0(r2)
  81ea64:	e0bffb15 	stw	r2,-20(fp)
  81ea68:	00000006 	br	81ea6c <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  81ea6c:	e0bffb17 	ldw	r2,-20(fp)
  81ea70:	10800104 	addi	r2,r2,4
  81ea74:	10800037 	ldwio	r2,0(r2)
  81ea78:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  81ea7c:	e0bffa17 	ldw	r2,-24(fp)
  81ea80:	1080c00c 	andi	r2,r2,768
  81ea84:	1005003a 	cmpeq	r2,r2,zero
  81ea88:	1000991e 	bne	r2,zero,81ecf0 <altera_avalon_jtag_uart_irq+0x2b4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  81ea8c:	e0bffa17 	ldw	r2,-24(fp)
  81ea90:	1080400c 	andi	r2,r2,256
  81ea94:	1005003a 	cmpeq	r2,r2,zero
  81ea98:	1000481e 	bne	r2,zero,81ebbc <altera_avalon_jtag_uart_irq+0x180>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  81ea9c:	00800074 	movhi	r2,1
  81eaa0:	e0bff915 	stw	r2,-28(fp)
  81eaa4:	00000006 	br	81eaa8 <altera_avalon_jtag_uart_irq+0x6c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81eaa8:	e0bffc17 	ldw	r2,-16(fp)
  81eaac:	10800d17 	ldw	r2,52(r2)
  81eab0:	10800044 	addi	r2,r2,1
  81eab4:	1081ffcc 	andi	r2,r2,2047
  81eab8:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
  81eabc:	e0bffc17 	ldw	r2,-16(fp)
  81eac0:	10c00e17 	ldw	r3,56(r2)
  81eac4:	e0bff817 	ldw	r2,-32(fp)
  81eac8:	18802826 	beq	r3,r2,81eb6c <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  81eacc:	e0bffb17 	ldw	r2,-20(fp)
  81ead0:	10800037 	ldwio	r2,0(r2)
  81ead4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  81ead8:	e0bff917 	ldw	r2,-28(fp)
  81eadc:	10a0000c 	andi	r2,r2,32768
  81eae0:	1005003a 	cmpeq	r2,r2,zero
  81eae4:	1000211e 	bne	r2,zero,81eb6c <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  81eae8:	e0bffc17 	ldw	r2,-16(fp)
  81eaec:	10c00d17 	ldw	r3,52(r2)
  81eaf0:	e0bff917 	ldw	r2,-28(fp)
  81eaf4:	1009883a 	mov	r4,r2
  81eaf8:	e0bffc17 	ldw	r2,-16(fp)
  81eafc:	1885883a 	add	r2,r3,r2
  81eb00:	10801104 	addi	r2,r2,68
  81eb04:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81eb08:	e0bffc17 	ldw	r2,-16(fp)
  81eb0c:	10800d17 	ldw	r2,52(r2)
  81eb10:	10800044 	addi	r2,r2,1
  81eb14:	10c1ffcc 	andi	r3,r2,2047
  81eb18:	e0bffc17 	ldw	r2,-16(fp)
  81eb1c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  81eb20:	e0bffc17 	ldw	r2,-16(fp)
  81eb24:	10800c17 	ldw	r2,48(r2)
  81eb28:	e0bff515 	stw	r2,-44(fp)
  81eb2c:	00800044 	movi	r2,1
  81eb30:	e0bff60d 	sth	r2,-40(fp)
  81eb34:	00800044 	movi	r2,1
  81eb38:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  81eb3c:	008020b4 	movhi	r2,130
  81eb40:	10957f44 	addi	r2,r2,22013
  81eb44:	10800003 	ldbu	r2,0(r2)
  81eb48:	10803fcc 	andi	r2,r2,255
  81eb4c:	1005003a 	cmpeq	r2,r2,zero
  81eb50:	103fd51e 	bne	r2,zero,81eaa8 <altera_avalon_jtag_uart_irq+0x6c>
  {
    OSFlagPost (group, flags, opt, &err);
  81eb54:	e17ff60b 	ldhu	r5,-40(fp)
  81eb58:	e1bff683 	ldbu	r6,-38(fp)
  81eb5c:	e1fffd04 	addi	r7,fp,-12
  81eb60:	e13ff517 	ldw	r4,-44(fp)
  81eb64:	08196fc0 	call	8196fc <OSFlagPost>
    return err;
  81eb68:	003fcf06 	br	81eaa8 <altera_avalon_jtag_uart_irq+0x6c>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  81eb6c:	e0bff917 	ldw	r2,-28(fp)
  81eb70:	10bfffec 	andhi	r2,r2,65535
  81eb74:	1005003a 	cmpeq	r2,r2,zero
  81eb78:	1000101e 	bne	r2,zero,81ebbc <altera_avalon_jtag_uart_irq+0x180>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81eb7c:	e0bffc17 	ldw	r2,-16(fp)
  81eb80:	10c00817 	ldw	r3,32(r2)
  81eb84:	00bfff84 	movi	r2,-2
  81eb88:	1886703a 	and	r3,r3,r2
  81eb8c:	e0bffc17 	ldw	r2,-16(fp)
  81eb90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  81eb94:	e0bffb17 	ldw	r2,-20(fp)
  81eb98:	11000104 	addi	r4,r2,4
  81eb9c:	e0bffc17 	ldw	r2,-16(fp)
  81eba0:	10800817 	ldw	r2,32(r2)
  81eba4:	1007883a 	mov	r3,r2
  81eba8:	2005883a 	mov	r2,r4
  81ebac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  81ebb0:	e0bffb17 	ldw	r2,-20(fp)
  81ebb4:	10800104 	addi	r2,r2,4
  81ebb8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  81ebbc:	e0bffa17 	ldw	r2,-24(fp)
  81ebc0:	1080800c 	andi	r2,r2,512
  81ebc4:	1005003a 	cmpeq	r2,r2,zero
  81ebc8:	103fa81e 	bne	r2,zero,81ea6c <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  81ebcc:	e0bffa17 	ldw	r2,-24(fp)
  81ebd0:	10bfffec 	andhi	r2,r2,65535
  81ebd4:	1004d43a 	srli	r2,r2,16
  81ebd8:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  81ebdc:	00002706 	br	81ec7c <altera_avalon_jtag_uart_irq+0x240>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  81ebe0:	e13ffb17 	ldw	r4,-20(fp)
  81ebe4:	e0bffc17 	ldw	r2,-16(fp)
  81ebe8:	10c01017 	ldw	r3,64(r2)
  81ebec:	e0bffc17 	ldw	r2,-16(fp)
  81ebf0:	1885883a 	add	r2,r3,r2
  81ebf4:	10821104 	addi	r2,r2,2116
  81ebf8:	10800003 	ldbu	r2,0(r2)
  81ebfc:	10c03fcc 	andi	r3,r2,255
  81ec00:	18c0201c 	xori	r3,r3,128
  81ec04:	18ffe004 	addi	r3,r3,-128
  81ec08:	2005883a 	mov	r2,r4
  81ec0c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81ec10:	e0bffc17 	ldw	r2,-16(fp)
  81ec14:	10801017 	ldw	r2,64(r2)
  81ec18:	10800044 	addi	r2,r2,1
  81ec1c:	10c1ffcc 	andi	r3,r2,2047
  81ec20:	e0bffc17 	ldw	r2,-16(fp)
  81ec24:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  81ec28:	e0bffc17 	ldw	r2,-16(fp)
  81ec2c:	10800c17 	ldw	r2,48(r2)
  81ec30:	e0bff315 	stw	r2,-52(fp)
  81ec34:	00800084 	movi	r2,2
  81ec38:	e0bff40d 	sth	r2,-48(fp)
  81ec3c:	00800044 	movi	r2,1
  81ec40:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  81ec44:	008020b4 	movhi	r2,130
  81ec48:	10957f44 	addi	r2,r2,22013
  81ec4c:	10800003 	ldbu	r2,0(r2)
  81ec50:	10803fcc 	andi	r2,r2,255
  81ec54:	1005003a 	cmpeq	r2,r2,zero
  81ec58:	1000051e 	bne	r2,zero,81ec70 <altera_avalon_jtag_uart_irq+0x234>
  {
    OSFlagPost (group, flags, opt, &err);
  81ec5c:	e17ff40b 	ldhu	r5,-48(fp)
  81ec60:	e1bff483 	ldbu	r6,-46(fp)
  81ec64:	e1fffd44 	addi	r7,fp,-11
  81ec68:	e13ff317 	ldw	r4,-52(fp)
  81ec6c:	08196fc0 	call	8196fc <OSFlagPost>

        space--;
  81ec70:	e0bff717 	ldw	r2,-36(fp)
  81ec74:	10bfffc4 	addi	r2,r2,-1
  81ec78:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  81ec7c:	e0bff717 	ldw	r2,-36(fp)
  81ec80:	1005003a 	cmpeq	r2,r2,zero
  81ec84:	1000051e 	bne	r2,zero,81ec9c <altera_avalon_jtag_uart_irq+0x260>
  81ec88:	e0bffc17 	ldw	r2,-16(fp)
  81ec8c:	10c01017 	ldw	r3,64(r2)
  81ec90:	e0bffc17 	ldw	r2,-16(fp)
  81ec94:	10800f17 	ldw	r2,60(r2)
  81ec98:	18bfd11e 	bne	r3,r2,81ebe0 <altera_avalon_jtag_uart_irq+0x1a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  81ec9c:	e0bff717 	ldw	r2,-36(fp)
  81eca0:	1005003a 	cmpeq	r2,r2,zero
  81eca4:	103f711e 	bne	r2,zero,81ea6c <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81eca8:	e0bffc17 	ldw	r2,-16(fp)
  81ecac:	10c00817 	ldw	r3,32(r2)
  81ecb0:	00bfff44 	movi	r2,-3
  81ecb4:	1886703a 	and	r3,r3,r2
  81ecb8:	e0bffc17 	ldw	r2,-16(fp)
  81ecbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81ecc0:	e0bffc17 	ldw	r2,-16(fp)
  81ecc4:	10800017 	ldw	r2,0(r2)
  81ecc8:	11000104 	addi	r4,r2,4
  81eccc:	e0bffc17 	ldw	r2,-16(fp)
  81ecd0:	10800817 	ldw	r2,32(r2)
  81ecd4:	1007883a 	mov	r3,r2
  81ecd8:	2005883a 	mov	r2,r4
  81ecdc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  81ece0:	e0bffb17 	ldw	r2,-20(fp)
  81ece4:	10800104 	addi	r2,r2,4
  81ece8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  81ecec:	003f5f06 	br	81ea6c <altera_avalon_jtag_uart_irq+0x30>
}
  81ecf0:	e037883a 	mov	sp,fp
  81ecf4:	dfc00117 	ldw	ra,4(sp)
  81ecf8:	df000017 	ldw	fp,0(sp)
  81ecfc:	dec00204 	addi	sp,sp,8
  81ed00:	f800283a 	ret

0081ed04 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  81ed04:	defff804 	addi	sp,sp,-32
  81ed08:	dfc00715 	stw	ra,28(sp)
  81ed0c:	df000615 	stw	fp,24(sp)
  81ed10:	df000604 	addi	fp,sp,24
  81ed14:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  81ed18:	e0bfff17 	ldw	r2,-4(fp)
  81ed1c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  81ed20:	e0bffd17 	ldw	r2,-12(fp)
  81ed24:	10800017 	ldw	r2,0(r2)
  81ed28:	10800104 	addi	r2,r2,4
  81ed2c:	10800037 	ldwio	r2,0(r2)
  81ed30:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  81ed34:	e0bffc17 	ldw	r2,-16(fp)
  81ed38:	1081000c 	andi	r2,r2,1024
  81ed3c:	1005003a 	cmpeq	r2,r2,zero
  81ed40:	10000c1e 	bne	r2,zero,81ed74 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  81ed44:	e0bffd17 	ldw	r2,-12(fp)
  81ed48:	10800017 	ldw	r2,0(r2)
  81ed4c:	11000104 	addi	r4,r2,4
  81ed50:	e0bffd17 	ldw	r2,-12(fp)
  81ed54:	10800817 	ldw	r2,32(r2)
  81ed58:	10810014 	ori	r2,r2,1024
  81ed5c:	1007883a 	mov	r3,r2
  81ed60:	2005883a 	mov	r2,r4
  81ed64:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  81ed68:	e0bffd17 	ldw	r2,-12(fp)
  81ed6c:	10000915 	stw	zero,36(r2)
  81ed70:	00002106 	br	81edf8 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  81ed74:	e0bffd17 	ldw	r2,-12(fp)
  81ed78:	10c00917 	ldw	r3,36(r2)
  81ed7c:	00a00034 	movhi	r2,32768
  81ed80:	10bfff04 	addi	r2,r2,-4
  81ed84:	10c01c36 	bltu	r2,r3,81edf8 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  81ed88:	e0bffd17 	ldw	r2,-12(fp)
  81ed8c:	10800917 	ldw	r2,36(r2)
  81ed90:	10c00044 	addi	r3,r2,1
  81ed94:	e0bffd17 	ldw	r2,-12(fp)
  81ed98:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  81ed9c:	e0bffd17 	ldw	r2,-12(fp)
  81eda0:	10c00917 	ldw	r3,36(r2)
  81eda4:	e0bffd17 	ldw	r2,-12(fp)
  81eda8:	10800117 	ldw	r2,4(r2)
  81edac:	18801236 	bltu	r3,r2,81edf8 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  81edb0:	e0bffd17 	ldw	r2,-12(fp)
  81edb4:	10800c17 	ldw	r2,48(r2)
  81edb8:	e0bffa15 	stw	r2,-24(fp)
  81edbc:	00800104 	movi	r2,4
  81edc0:	e0bffb0d 	sth	r2,-20(fp)
  81edc4:	00800044 	movi	r2,1
  81edc8:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  81edcc:	008020b4 	movhi	r2,130
  81edd0:	10957f44 	addi	r2,r2,22013
  81edd4:	10800003 	ldbu	r2,0(r2)
  81edd8:	10803fcc 	andi	r2,r2,255
  81eddc:	1005003a 	cmpeq	r2,r2,zero
  81ede0:	1000051e 	bne	r2,zero,81edf8 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  81ede4:	e17ffb0b 	ldhu	r5,-20(fp)
  81ede8:	e1bffb83 	ldbu	r6,-18(fp)
  81edec:	e1fffe04 	addi	r7,fp,-8
  81edf0:	e13ffa17 	ldw	r4,-24(fp)
  81edf4:	08196fc0 	call	8196fc <OSFlagPost>
  81edf8:	008020b4 	movhi	r2,130
  81edfc:	10959404 	addi	r2,r2,22096
  81ee00:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  81ee04:	e037883a 	mov	sp,fp
  81ee08:	dfc00117 	ldw	ra,4(sp)
  81ee0c:	df000017 	ldw	fp,0(sp)
  81ee10:	dec00204 	addi	sp,sp,8
  81ee14:	f800283a 	ret

0081ee18 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  81ee18:	defffc04 	addi	sp,sp,-16
  81ee1c:	df000315 	stw	fp,12(sp)
  81ee20:	df000304 	addi	fp,sp,12
  81ee24:	e13ffd15 	stw	r4,-12(fp)
  81ee28:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81ee2c:	00000706 	br	81ee4c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  81ee30:	e0bffe17 	ldw	r2,-8(fp)
  81ee34:	1090000c 	andi	r2,r2,16384
  81ee38:	1005003a 	cmpeq	r2,r2,zero
  81ee3c:	1000031e 	bne	r2,zero,81ee4c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  81ee40:	00bffd44 	movi	r2,-11
  81ee44:	e0bfff15 	stw	r2,-4(fp)
  81ee48:	00000b06 	br	81ee78 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81ee4c:	e0bffd17 	ldw	r2,-12(fp)
  81ee50:	10c01017 	ldw	r3,64(r2)
  81ee54:	e0bffd17 	ldw	r2,-12(fp)
  81ee58:	10800f17 	ldw	r2,60(r2)
  81ee5c:	18800526 	beq	r3,r2,81ee74 <altera_avalon_jtag_uart_close+0x5c>
  81ee60:	e0bffd17 	ldw	r2,-12(fp)
  81ee64:	10c00917 	ldw	r3,36(r2)
  81ee68:	e0bffd17 	ldw	r2,-12(fp)
  81ee6c:	10800117 	ldw	r2,4(r2)
  81ee70:	18bfef36 	bltu	r3,r2,81ee30 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  81ee74:	e03fff15 	stw	zero,-4(fp)
  81ee78:	e0bfff17 	ldw	r2,-4(fp)
}
  81ee7c:	e037883a 	mov	sp,fp
  81ee80:	df000017 	ldw	fp,0(sp)
  81ee84:	dec00104 	addi	sp,sp,4
  81ee88:	f800283a 	ret

0081ee8c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  81ee8c:	defff804 	addi	sp,sp,-32
  81ee90:	df000715 	stw	fp,28(sp)
  81ee94:	df000704 	addi	fp,sp,28
  81ee98:	e13ffb15 	stw	r4,-20(fp)
  81ee9c:	e17ffc15 	stw	r5,-16(fp)
  81eea0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  81eea4:	00bff9c4 	movi	r2,-25
  81eea8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  81eeac:	e0bffc17 	ldw	r2,-16(fp)
  81eeb0:	e0bfff15 	stw	r2,-4(fp)
  81eeb4:	e0ffff17 	ldw	r3,-4(fp)
  81eeb8:	189a8060 	cmpeqi	r2,r3,27137
  81eebc:	1000041e 	bne	r2,zero,81eed0 <altera_avalon_jtag_uart_ioctl+0x44>
  81eec0:	e0ffff17 	ldw	r3,-4(fp)
  81eec4:	189a80a0 	cmpeqi	r2,r3,27138
  81eec8:	10001b1e 	bne	r2,zero,81ef38 <altera_avalon_jtag_uart_ioctl+0xac>
  81eecc:	00002706 	br	81ef6c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  81eed0:	e0bffb17 	ldw	r2,-20(fp)
  81eed4:	10c00117 	ldw	r3,4(r2)
  81eed8:	00a00034 	movhi	r2,32768
  81eedc:	10bfffc4 	addi	r2,r2,-1
  81eee0:	18802226 	beq	r3,r2,81ef6c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  81eee4:	e0bffd17 	ldw	r2,-12(fp)
  81eee8:	10800017 	ldw	r2,0(r2)
  81eeec:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  81eef0:	e0bff917 	ldw	r2,-28(fp)
  81eef4:	10800090 	cmplti	r2,r2,2
  81eef8:	1000071e 	bne	r2,zero,81ef18 <altera_avalon_jtag_uart_ioctl+0x8c>
  81eefc:	e0fff917 	ldw	r3,-28(fp)
  81ef00:	00a00034 	movhi	r2,32768
  81ef04:	10bfffc4 	addi	r2,r2,-1
  81ef08:	18800326 	beq	r3,r2,81ef18 <altera_avalon_jtag_uart_ioctl+0x8c>
  81ef0c:	e0bff917 	ldw	r2,-28(fp)
  81ef10:	e0bffe15 	stw	r2,-8(fp)
  81ef14:	00000306 	br	81ef24 <altera_avalon_jtag_uart_ioctl+0x98>
  81ef18:	00e00034 	movhi	r3,32768
  81ef1c:	18ffff84 	addi	r3,r3,-2
  81ef20:	e0fffe15 	stw	r3,-8(fp)
  81ef24:	e0bffb17 	ldw	r2,-20(fp)
  81ef28:	e0fffe17 	ldw	r3,-8(fp)
  81ef2c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  81ef30:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  81ef34:	00000d06 	br	81ef6c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  81ef38:	e0bffb17 	ldw	r2,-20(fp)
  81ef3c:	10c00117 	ldw	r3,4(r2)
  81ef40:	00a00034 	movhi	r2,32768
  81ef44:	10bfffc4 	addi	r2,r2,-1
  81ef48:	18800826 	beq	r3,r2,81ef6c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  81ef4c:	e13ffd17 	ldw	r4,-12(fp)
  81ef50:	e0bffb17 	ldw	r2,-20(fp)
  81ef54:	10c00917 	ldw	r3,36(r2)
  81ef58:	e0bffb17 	ldw	r2,-20(fp)
  81ef5c:	10800117 	ldw	r2,4(r2)
  81ef60:	1885803a 	cmpltu	r2,r3,r2
  81ef64:	20800015 	stw	r2,0(r4)
      rc = 0;
  81ef68:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  81ef6c:	e0bffa17 	ldw	r2,-24(fp)
}
  81ef70:	e037883a 	mov	sp,fp
  81ef74:	df000017 	ldw	fp,0(sp)
  81ef78:	dec00104 	addi	sp,sp,4
  81ef7c:	f800283a 	ret

0081ef80 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  81ef80:	deffeb04 	addi	sp,sp,-84
  81ef84:	dfc01415 	stw	ra,80(sp)
  81ef88:	df001315 	stw	fp,76(sp)
  81ef8c:	df001304 	addi	fp,sp,76
  81ef90:	e13ffb15 	stw	r4,-20(fp)
  81ef94:	e17ffc15 	stw	r5,-16(fp)
  81ef98:	e1bffd15 	stw	r6,-12(fp)
  81ef9c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  81efa0:	e0bffc17 	ldw	r2,-16(fp)
  81efa4:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  81efa8:	e0bffb17 	ldw	r2,-20(fp)
  81efac:	10800a17 	ldw	r2,40(r2)
  81efb0:	e0bff315 	stw	r2,-52(fp)
  81efb4:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  81efb8:	e17ff40b 	ldhu	r5,-48(fp)
  81efbc:	e1bffa44 	addi	r6,fp,-23
  81efc0:	e13ff317 	ldw	r4,-52(fp)
  81efc4:	081bf900 	call	81bf90 <OSSemPend>

  while (space > 0)
  81efc8:	00006406 	br	81f15c <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  81efcc:	e0bffb17 	ldw	r2,-20(fp)
  81efd0:	10800d17 	ldw	r2,52(r2)
  81efd4:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  81efd8:	e0bffb17 	ldw	r2,-20(fp)
  81efdc:	10800e17 	ldw	r2,56(r2)
  81efe0:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  81efe4:	e0fff617 	ldw	r3,-40(fp)
  81efe8:	e0bff517 	ldw	r2,-44(fp)
  81efec:	18800536 	bltu	r3,r2,81f004 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  81eff0:	e0bff617 	ldw	r2,-40(fp)
  81eff4:	e0fff517 	ldw	r3,-44(fp)
  81eff8:	10c5c83a 	sub	r2,r2,r3
  81effc:	e0bff715 	stw	r2,-36(fp)
  81f000:	00000406 	br	81f014 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  81f004:	00820004 	movi	r2,2048
  81f008:	e0fff517 	ldw	r3,-44(fp)
  81f00c:	10c5c83a 	sub	r2,r2,r3
  81f010:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  81f014:	e0bff717 	ldw	r2,-36(fp)
  81f018:	1005003a 	cmpeq	r2,r2,zero
  81f01c:	10001f1e 	bne	r2,zero,81f09c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  81f020:	e0fffd17 	ldw	r3,-12(fp)
  81f024:	e0bff717 	ldw	r2,-36(fp)
  81f028:	1880022e 	bgeu	r3,r2,81f034 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  81f02c:	e0bffd17 	ldw	r2,-12(fp)
  81f030:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  81f034:	e0bffb17 	ldw	r2,-20(fp)
  81f038:	10c01104 	addi	r3,r2,68
  81f03c:	e0bff517 	ldw	r2,-44(fp)
  81f040:	1887883a 	add	r3,r3,r2
  81f044:	e0bff917 	ldw	r2,-28(fp)
  81f048:	1009883a 	mov	r4,r2
  81f04c:	180b883a 	mov	r5,r3
  81f050:	e1bff717 	ldw	r6,-36(fp)
  81f054:	080d9a00 	call	80d9a0 <memcpy>
      ptr   += n;
  81f058:	e0fff717 	ldw	r3,-36(fp)
  81f05c:	e0bff917 	ldw	r2,-28(fp)
  81f060:	10c5883a 	add	r2,r2,r3
  81f064:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  81f068:	e0fffd17 	ldw	r3,-12(fp)
  81f06c:	e0bff717 	ldw	r2,-36(fp)
  81f070:	1885c83a 	sub	r2,r3,r2
  81f074:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81f078:	e0fff517 	ldw	r3,-44(fp)
  81f07c:	e0bff717 	ldw	r2,-36(fp)
  81f080:	1885883a 	add	r2,r3,r2
  81f084:	10c1ffcc 	andi	r3,r2,2047
  81f088:	e0bffb17 	ldw	r2,-20(fp)
  81f08c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  81f090:	e0bffd17 	ldw	r2,-12(fp)
  81f094:	10800048 	cmpgei	r2,r2,1
  81f098:	103fcc1e 	bne	r2,zero,81efcc <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  81f09c:	e0fff917 	ldw	r3,-28(fp)
  81f0a0:	e0bffc17 	ldw	r2,-16(fp)
  81f0a4:	1880301e 	bne	r3,r2,81f168 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  81f0a8:	e0bffe17 	ldw	r2,-8(fp)
  81f0ac:	1090000c 	andi	r2,r2,16384
  81f0b0:	1004c03a 	cmpne	r2,r2,zero
  81f0b4:	10002c1e 	bne	r2,zero,81f168 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  81f0b8:	008020b4 	movhi	r2,130
  81f0bc:	10957f44 	addi	r2,r2,22013
  81f0c0:	10800003 	ldbu	r2,0(r2)
  81f0c4:	10803fcc 	andi	r2,r2,255
  81f0c8:	10800058 	cmpnei	r2,r2,1
  81f0cc:	1000161e 	bne	r2,zero,81f128 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  81f0d0:	e0bffb17 	ldw	r2,-20(fp)
  81f0d4:	10800c17 	ldw	r2,48(r2)
  81f0d8:	e0bff015 	stw	r2,-64(fp)
  81f0dc:	00800144 	movi	r2,5
  81f0e0:	e0bff10d 	sth	r2,-60(fp)
  81f0e4:	00bfe0c4 	movi	r2,-125
  81f0e8:	e0bff185 	stb	r2,-58(fp)
  81f0ec:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  81f0f0:	008020b4 	movhi	r2,130
  81f0f4:	10957f44 	addi	r2,r2,22013
  81f0f8:	10800003 	ldbu	r2,0(r2)
  81f0fc:	10803fcc 	andi	r2,r2,255
  81f100:	1005003a 	cmpeq	r2,r2,zero
  81f104:	1000111e 	bne	r2,zero,81f14c <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  81f108:	e17ff10b 	ldhu	r5,-60(fp)
  81f10c:	e1bff183 	ldbu	r6,-58(fp)
  81f110:	e1fff20b 	ldhu	r7,-56(fp)
  81f114:	e0bffa04 	addi	r2,fp,-24
  81f118:	d8800015 	stw	r2,0(sp)
  81f11c:	e13ff017 	ldw	r4,-64(fp)
  81f120:	08190500 	call	819050 <OSFlagPend>
    return err;
  81f124:	00000906 	br	81f14c <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  81f128:	e0bffb17 	ldw	r2,-20(fp)
  81f12c:	10c00d17 	ldw	r3,52(r2)
  81f130:	e0bff617 	ldw	r2,-40(fp)
  81f134:	1880051e 	bne	r3,r2,81f14c <altera_avalon_jtag_uart_read+0x1cc>
  81f138:	e0bffb17 	ldw	r2,-20(fp)
  81f13c:	10c00917 	ldw	r3,36(r2)
  81f140:	e0bffb17 	ldw	r2,-20(fp)
  81f144:	10800117 	ldw	r2,4(r2)
  81f148:	18bff736 	bltu	r3,r2,81f128 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  81f14c:	e0bffb17 	ldw	r2,-20(fp)
  81f150:	10c00d17 	ldw	r3,52(r2)
  81f154:	e0bff617 	ldw	r2,-40(fp)
  81f158:	18800326 	beq	r3,r2,81f168 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81f15c:	e0bffd17 	ldw	r2,-12(fp)
  81f160:	10800048 	cmpgei	r2,r2,1
  81f164:	103f991e 	bne	r2,zero,81efcc <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  81f168:	e0bffb17 	ldw	r2,-20(fp)
  81f16c:	11000a17 	ldw	r4,40(r2)
  81f170:	081c3880 	call	81c388 <OSSemPost>

  if (ptr != buffer)
  81f174:	e0fff917 	ldw	r3,-28(fp)
  81f178:	e0bffc17 	ldw	r2,-16(fp)
  81f17c:	18801926 	beq	r3,r2,81f1e4 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f180:	0005303a 	rdctl	r2,status
  81f184:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f188:	e0ffef17 	ldw	r3,-68(fp)
  81f18c:	00bfff84 	movi	r2,-2
  81f190:	1884703a 	and	r2,r3,r2
  81f194:	1001703a 	wrctl	status,r2
  
  return context;
  81f198:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  81f19c:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81f1a0:	e0bffb17 	ldw	r2,-20(fp)
  81f1a4:	10800817 	ldw	r2,32(r2)
  81f1a8:	10c00054 	ori	r3,r2,1
  81f1ac:	e0bffb17 	ldw	r2,-20(fp)
  81f1b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81f1b4:	e0bffb17 	ldw	r2,-20(fp)
  81f1b8:	10800017 	ldw	r2,0(r2)
  81f1bc:	11000104 	addi	r4,r2,4
  81f1c0:	e0bffb17 	ldw	r2,-20(fp)
  81f1c4:	10800817 	ldw	r2,32(r2)
  81f1c8:	1007883a 	mov	r3,r2
  81f1cc:	2005883a 	mov	r2,r4
  81f1d0:	10c00035 	stwio	r3,0(r2)
  81f1d4:	e0bff817 	ldw	r2,-32(fp)
  81f1d8:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f1dc:	e0bfee17 	ldw	r2,-72(fp)
  81f1e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  81f1e4:	e0fff917 	ldw	r3,-28(fp)
  81f1e8:	e0bffc17 	ldw	r2,-16(fp)
  81f1ec:	18800526 	beq	r3,r2,81f204 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  81f1f0:	e0fff917 	ldw	r3,-28(fp)
  81f1f4:	e0bffc17 	ldw	r2,-16(fp)
  81f1f8:	1887c83a 	sub	r3,r3,r2
  81f1fc:	e0ffff15 	stw	r3,-4(fp)
  81f200:	00000906 	br	81f228 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  81f204:	e0bffe17 	ldw	r2,-8(fp)
  81f208:	1090000c 	andi	r2,r2,16384
  81f20c:	1005003a 	cmpeq	r2,r2,zero
  81f210:	1000031e 	bne	r2,zero,81f220 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  81f214:	00bffd44 	movi	r2,-11
  81f218:	e0bfff15 	stw	r2,-4(fp)
  81f21c:	00000206 	br	81f228 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  81f220:	00bffec4 	movi	r2,-5
  81f224:	e0bfff15 	stw	r2,-4(fp)
  81f228:	e0bfff17 	ldw	r2,-4(fp)
}
  81f22c:	e037883a 	mov	sp,fp
  81f230:	dfc00117 	ldw	ra,4(sp)
  81f234:	df000017 	ldw	fp,0(sp)
  81f238:	dec00204 	addi	sp,sp,8
  81f23c:	f800283a 	ret

0081f240 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  81f240:	deffeb04 	addi	sp,sp,-84
  81f244:	dfc01415 	stw	ra,80(sp)
  81f248:	df001315 	stw	fp,76(sp)
  81f24c:	df001304 	addi	fp,sp,76
  81f250:	e13ffb15 	stw	r4,-20(fp)
  81f254:	e17ffc15 	stw	r5,-16(fp)
  81f258:	e1bffd15 	stw	r6,-12(fp)
  81f25c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  81f260:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  81f264:	e0bffc17 	ldw	r2,-16(fp)
  81f268:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  81f26c:	e0bffb17 	ldw	r2,-20(fp)
  81f270:	10800b17 	ldw	r2,44(r2)
  81f274:	e0bff315 	stw	r2,-52(fp)
  81f278:	e03ff40d 	sth	zero,-48(fp)
  81f27c:	e17ff40b 	ldhu	r5,-48(fp)
  81f280:	e1bffa04 	addi	r6,fp,-24
  81f284:	e13ff317 	ldw	r4,-52(fp)
  81f288:	081bf900 	call	81bf90 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81f28c:	00003a06 	br	81f378 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  81f290:	e0bffb17 	ldw	r2,-20(fp)
  81f294:	10800f17 	ldw	r2,60(r2)
  81f298:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  81f29c:	e0bffb17 	ldw	r2,-20(fp)
  81f2a0:	10801017 	ldw	r2,64(r2)
  81f2a4:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  81f2a8:	e0fff917 	ldw	r3,-28(fp)
  81f2ac:	e0bff817 	ldw	r2,-32(fp)
  81f2b0:	1880062e 	bgeu	r3,r2,81f2cc <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  81f2b4:	e0fff817 	ldw	r3,-32(fp)
  81f2b8:	e0bff917 	ldw	r2,-28(fp)
  81f2bc:	1885c83a 	sub	r2,r3,r2
  81f2c0:	10bfffc4 	addi	r2,r2,-1
  81f2c4:	e0bff715 	stw	r2,-36(fp)
  81f2c8:	00000c06 	br	81f2fc <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  81f2cc:	e0bff817 	ldw	r2,-32(fp)
  81f2d0:	1005003a 	cmpeq	r2,r2,zero
  81f2d4:	1000051e 	bne	r2,zero,81f2ec <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  81f2d8:	00820004 	movi	r2,2048
  81f2dc:	e0fff917 	ldw	r3,-28(fp)
  81f2e0:	10c5c83a 	sub	r2,r2,r3
  81f2e4:	e0bff715 	stw	r2,-36(fp)
  81f2e8:	00000406 	br	81f2fc <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81f2ec:	0081ffc4 	movi	r2,2047
  81f2f0:	e0fff917 	ldw	r3,-28(fp)
  81f2f4:	10c5c83a 	sub	r2,r2,r3
  81f2f8:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  81f2fc:	e0bff717 	ldw	r2,-36(fp)
  81f300:	1005003a 	cmpeq	r2,r2,zero
  81f304:	10001f1e 	bne	r2,zero,81f384 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  81f308:	e0fffd17 	ldw	r3,-12(fp)
  81f30c:	e0bff717 	ldw	r2,-36(fp)
  81f310:	1880022e 	bgeu	r3,r2,81f31c <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  81f314:	e0bffd17 	ldw	r2,-12(fp)
  81f318:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  81f31c:	e0bffb17 	ldw	r2,-20(fp)
  81f320:	10c21104 	addi	r3,r2,2116
  81f324:	e0bff917 	ldw	r2,-28(fp)
  81f328:	1885883a 	add	r2,r3,r2
  81f32c:	e0fffc17 	ldw	r3,-16(fp)
  81f330:	1009883a 	mov	r4,r2
  81f334:	180b883a 	mov	r5,r3
  81f338:	e1bff717 	ldw	r6,-36(fp)
  81f33c:	080d9a00 	call	80d9a0 <memcpy>
      ptr   += n;
  81f340:	e0fff717 	ldw	r3,-36(fp)
  81f344:	e0bffc17 	ldw	r2,-16(fp)
  81f348:	10c5883a 	add	r2,r2,r3
  81f34c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  81f350:	e0fffd17 	ldw	r3,-12(fp)
  81f354:	e0bff717 	ldw	r2,-36(fp)
  81f358:	1885c83a 	sub	r2,r3,r2
  81f35c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81f360:	e0fff917 	ldw	r3,-28(fp)
  81f364:	e0bff717 	ldw	r2,-36(fp)
  81f368:	1885883a 	add	r2,r3,r2
  81f36c:	10c1ffcc 	andi	r3,r2,2047
  81f370:	e0bffb17 	ldw	r2,-20(fp)
  81f374:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81f378:	e0bffd17 	ldw	r2,-12(fp)
  81f37c:	10800048 	cmpgei	r2,r2,1
  81f380:	103fc31e 	bne	r2,zero,81f290 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f384:	0005303a 	rdctl	r2,status
  81f388:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f38c:	e0fff217 	ldw	r3,-56(fp)
  81f390:	00bfff84 	movi	r2,-2
  81f394:	1884703a 	and	r2,r3,r2
  81f398:	1001703a 	wrctl	status,r2
  
  return context;
  81f39c:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  81f3a0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81f3a4:	e0bffb17 	ldw	r2,-20(fp)
  81f3a8:	10800817 	ldw	r2,32(r2)
  81f3ac:	10c00094 	ori	r3,r2,2
  81f3b0:	e0bffb17 	ldw	r2,-20(fp)
  81f3b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81f3b8:	e0bffb17 	ldw	r2,-20(fp)
  81f3bc:	10800017 	ldw	r2,0(r2)
  81f3c0:	11000104 	addi	r4,r2,4
  81f3c4:	e0bffb17 	ldw	r2,-20(fp)
  81f3c8:	10800817 	ldw	r2,32(r2)
  81f3cc:	1007883a 	mov	r3,r2
  81f3d0:	2005883a 	mov	r2,r4
  81f3d4:	10c00035 	stwio	r3,0(r2)
  81f3d8:	e0bff617 	ldw	r2,-40(fp)
  81f3dc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f3e0:	e0bff117 	ldw	r2,-60(fp)
  81f3e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81f3e8:	e0bffd17 	ldw	r2,-12(fp)
  81f3ec:	10800050 	cmplti	r2,r2,1
  81f3f0:	10002d1e 	bne	r2,zero,81f4a8 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  81f3f4:	e0bffe17 	ldw	r2,-8(fp)
  81f3f8:	1090000c 	andi	r2,r2,16384
  81f3fc:	1004c03a 	cmpne	r2,r2,zero
  81f400:	10002c1e 	bne	r2,zero,81f4b4 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  81f404:	008020b4 	movhi	r2,130
  81f408:	10957f44 	addi	r2,r2,22013
  81f40c:	10800003 	ldbu	r2,0(r2)
  81f410:	10803fcc 	andi	r2,r2,255
  81f414:	10800058 	cmpnei	r2,r2,1
  81f418:	1000161e 	bne	r2,zero,81f474 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  81f41c:	e0bffb17 	ldw	r2,-20(fp)
  81f420:	10800c17 	ldw	r2,48(r2)
  81f424:	e0bfee15 	stw	r2,-72(fp)
  81f428:	00800184 	movi	r2,6
  81f42c:	e0bfef0d 	sth	r2,-68(fp)
  81f430:	00bfe0c4 	movi	r2,-125
  81f434:	e0bfef85 	stb	r2,-66(fp)
  81f438:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  81f43c:	008020b4 	movhi	r2,130
  81f440:	10957f44 	addi	r2,r2,22013
  81f444:	10800003 	ldbu	r2,0(r2)
  81f448:	10803fcc 	andi	r2,r2,255
  81f44c:	1005003a 	cmpeq	r2,r2,zero
  81f450:	1000111e 	bne	r2,zero,81f498 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  81f454:	e17fef0b 	ldhu	r5,-68(fp)
  81f458:	e1bfef83 	ldbu	r6,-66(fp)
  81f45c:	e1fff00b 	ldhu	r7,-64(fp)
  81f460:	e0bffa44 	addi	r2,fp,-23
  81f464:	d8800015 	stw	r2,0(sp)
  81f468:	e13fee17 	ldw	r4,-72(fp)
  81f46c:	08190500 	call	819050 <OSFlagPend>
    return err;
  81f470:	00000906 	br	81f498 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  81f474:	e0bffb17 	ldw	r2,-20(fp)
  81f478:	10c01017 	ldw	r3,64(r2)
  81f47c:	e0bff817 	ldw	r2,-32(fp)
  81f480:	1880051e 	bne	r3,r2,81f498 <altera_avalon_jtag_uart_write+0x258>
  81f484:	e0bffb17 	ldw	r2,-20(fp)
  81f488:	10c00917 	ldw	r3,36(r2)
  81f48c:	e0bffb17 	ldw	r2,-20(fp)
  81f490:	10800117 	ldw	r2,4(r2)
  81f494:	18bff736 	bltu	r3,r2,81f474 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  81f498:	e0bffb17 	ldw	r2,-20(fp)
  81f49c:	10c01017 	ldw	r3,64(r2)
  81f4a0:	e0bff817 	ldw	r2,-32(fp)
  81f4a4:	18800326 	beq	r3,r2,81f4b4 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  81f4a8:	e0bffd17 	ldw	r2,-12(fp)
  81f4ac:	10800048 	cmpgei	r2,r2,1
  81f4b0:	103fb11e 	bne	r2,zero,81f378 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  81f4b4:	e0bffb17 	ldw	r2,-20(fp)
  81f4b8:	11000b17 	ldw	r4,44(r2)
  81f4bc:	081c3880 	call	81c388 <OSSemPost>

  if (ptr != start)
  81f4c0:	e0fffc17 	ldw	r3,-16(fp)
  81f4c4:	e0bff517 	ldw	r2,-44(fp)
  81f4c8:	18800526 	beq	r3,r2,81f4e0 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  81f4cc:	e0fffc17 	ldw	r3,-16(fp)
  81f4d0:	e0bff517 	ldw	r2,-44(fp)
  81f4d4:	1887c83a 	sub	r3,r3,r2
  81f4d8:	e0ffff15 	stw	r3,-4(fp)
  81f4dc:	00000906 	br	81f504 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  81f4e0:	e0bffe17 	ldw	r2,-8(fp)
  81f4e4:	1090000c 	andi	r2,r2,16384
  81f4e8:	1005003a 	cmpeq	r2,r2,zero
  81f4ec:	1000031e 	bne	r2,zero,81f4fc <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  81f4f0:	00bffd44 	movi	r2,-11
  81f4f4:	e0bfff15 	stw	r2,-4(fp)
  81f4f8:	00000206 	br	81f504 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  81f4fc:	00bffec4 	movi	r2,-5
  81f500:	e0bfff15 	stw	r2,-4(fp)
  81f504:	e0bfff17 	ldw	r2,-4(fp)
}
  81f508:	e037883a 	mov	sp,fp
  81f50c:	dfc00117 	ldw	ra,4(sp)
  81f510:	df000017 	ldw	fp,0(sp)
  81f514:	dec00204 	addi	sp,sp,8
  81f518:	f800283a 	ret

0081f51c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  81f51c:	defff904 	addi	sp,sp,-28
  81f520:	dfc00615 	stw	ra,24(sp)
  81f524:	df000515 	stw	fp,20(sp)
  81f528:	df000504 	addi	fp,sp,20
  81f52c:	e13ffe15 	stw	r4,-8(fp)
  81f530:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  81f534:	e0bffe17 	ldw	r2,-8(fp)
  81f538:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  81f53c:	e0bffe17 	ldw	r2,-8(fp)
  81f540:	10800104 	addi	r2,r2,4
  81f544:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f548:	0005303a 	rdctl	r2,status
  81f54c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f550:	e0fffc17 	ldw	r3,-16(fp)
  81f554:	00bfff84 	movi	r2,-2
  81f558:	1884703a 	and	r2,r3,r2
  81f55c:	1001703a 	wrctl	status,r2
  
  return context;
  81f560:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81f564:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  81f568:	08209680 	call	820968 <alt_tick>
  81f56c:	e0bffd17 	ldw	r2,-12(fp)
  81f570:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f574:	e0bffb17 	ldw	r2,-20(fp)
  81f578:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  81f57c:	e037883a 	mov	sp,fp
  81f580:	dfc00117 	ldw	ra,4(sp)
  81f584:	df000017 	ldw	fp,0(sp)
  81f588:	dec00204 	addi	sp,sp,8
  81f58c:	f800283a 	ret

0081f590 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81f590:	defff904 	addi	sp,sp,-28
  81f594:	dfc00615 	stw	ra,24(sp)
  81f598:	df000515 	stw	fp,20(sp)
  81f59c:	df000504 	addi	fp,sp,20
  81f5a0:	e13ffc15 	stw	r4,-16(fp)
  81f5a4:	e17ffd15 	stw	r5,-12(fp)
  81f5a8:	e1bffe15 	stw	r6,-8(fp)
  81f5ac:	e1ffff15 	stw	r7,-4(fp)
  81f5b0:	e0bfff17 	ldw	r2,-4(fp)
  81f5b4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  81f5b8:	008020b4 	movhi	r2,130
  81f5bc:	10959404 	addi	r2,r2,22096
  81f5c0:	10800017 	ldw	r2,0(r2)
  81f5c4:	1004c03a 	cmpne	r2,r2,zero
  81f5c8:	1000041e 	bne	r2,zero,81f5dc <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  81f5cc:	00c020b4 	movhi	r3,130
  81f5d0:	18d59404 	addi	r3,r3,22096
  81f5d4:	e0bffb17 	ldw	r2,-20(fp)
  81f5d8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  81f5dc:	e0bffc17 	ldw	r2,-16(fp)
  81f5e0:	10800104 	addi	r2,r2,4
  81f5e4:	1007883a 	mov	r3,r2
  81f5e8:	008001c4 	movi	r2,7
  81f5ec:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  81f5f0:	e13ffe17 	ldw	r4,-8(fp)
  81f5f4:	e17ffc17 	ldw	r5,-16(fp)
  81f5f8:	018020b4 	movhi	r6,130
  81f5fc:	31bd4704 	addi	r6,r6,-2788
  81f600:	082042c0 	call	82042c <alt_irq_register>
#endif  
}
  81f604:	e037883a 	mov	sp,fp
  81f608:	dfc00117 	ldw	ra,4(sp)
  81f60c:	df000017 	ldw	fp,0(sp)
  81f610:	dec00204 	addi	sp,sp,8
  81f614:	f800283a 	ret

0081f618 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  81f618:	defffc04 	addi	sp,sp,-16
  81f61c:	df000315 	stw	fp,12(sp)
  81f620:	df000304 	addi	fp,sp,12
  81f624:	e13ffe15 	stw	r4,-8(fp)
  81f628:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  81f62c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  81f630:	e0bfff17 	ldw	r2,-4(fp)
  81f634:	1004c03a 	cmpne	r2,r2,zero
  81f638:	1000061e 	bne	r2,zero,81f654 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  81f63c:	e0bffe17 	ldw	r2,-8(fp)
  81f640:	1007883a 	mov	r3,r2
  81f644:	e0bffd03 	ldbu	r2,-12(fp)
  81f648:	10c4b03a 	or	r2,r2,r3
  81f64c:	e0bffd05 	stb	r2,-12(fp)
  81f650:	00000806 	br	81f674 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  81f654:	e0bffe17 	ldw	r2,-8(fp)
  81f658:	1007883a 	mov	r3,r2
  81f65c:	e0bffd03 	ldbu	r2,-12(fp)
  81f660:	10c4b03a 	or	r2,r2,r3
  81f664:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  81f668:	e0bffd03 	ldbu	r2,-12(fp)
  81f66c:	10801014 	ori	r2,r2,64
  81f670:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  81f674:	e0fffd03 	ldbu	r3,-12(fp)
  81f678:	00bfe004 	movi	r2,-128
  81f67c:	1884b03a 	or	r2,r3,r2
  81f680:	10803fcc 	andi	r2,r2,255
}
  81f684:	e037883a 	mov	sp,fp
  81f688:	df000017 	ldw	fp,0(sp)
  81f68c:	dec00104 	addi	sp,sp,4
  81f690:	f800283a 	ret

0081f694 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  81f694:	defffd04 	addi	sp,sp,-12
  81f698:	df000215 	stw	fp,8(sp)
  81f69c:	df000204 	addi	fp,sp,8
  81f6a0:	e13ffe15 	stw	r4,-8(fp)
  81f6a4:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  81f6a8:	e0bffe17 	ldw	r2,-8(fp)
  81f6ac:	10800a17 	ldw	r2,40(r2)
  81f6b0:	e0ffff03 	ldbu	r3,-4(fp)
  81f6b4:	10c00025 	stbio	r3,0(r2)
}
  81f6b8:	e037883a 	mov	sp,fp
  81f6bc:	df000017 	ldw	fp,0(sp)
  81f6c0:	dec00104 	addi	sp,sp,4
  81f6c4:	f800283a 	ret

0081f6c8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  81f6c8:	defffe04 	addi	sp,sp,-8
  81f6cc:	df000115 	stw	fp,4(sp)
  81f6d0:	df000104 	addi	fp,sp,4
  81f6d4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  81f6d8:	e0bfff17 	ldw	r2,-4(fp)
  81f6dc:	10800a17 	ldw	r2,40(r2)
  81f6e0:	1007883a 	mov	r3,r2
  81f6e4:	00800044 	movi	r2,1
  81f6e8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  81f6ec:	e037883a 	mov	sp,fp
  81f6f0:	df000017 	ldw	fp,0(sp)
  81f6f4:	dec00104 	addi	sp,sp,4
  81f6f8:	f800283a 	ret

0081f6fc <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  81f6fc:	defffc04 	addi	sp,sp,-16
  81f700:	dfc00315 	stw	ra,12(sp)
  81f704:	df000215 	stw	fp,8(sp)
  81f708:	df000204 	addi	fp,sp,8
  81f70c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  81f710:	e13fff17 	ldw	r4,-4(fp)
  81f714:	014020b4 	movhi	r5,130
  81f718:	294e7704 	addi	r5,r5,14812
  81f71c:	082022c0 	call	82022c <alt_find_dev>
  81f720:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  81f724:	e0bffe17 	ldw	r2,-8(fp)
}
  81f728:	e037883a 	mov	sp,fp
  81f72c:	dfc00117 	ldw	ra,4(sp)
  81f730:	df000017 	ldw	fp,0(sp)
  81f734:	dec00204 	addi	sp,sp,8
  81f738:	f800283a 	ret

0081f73c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  81f73c:	defffb04 	addi	sp,sp,-20
  81f740:	df000415 	stw	fp,16(sp)
  81f744:	df000404 	addi	fp,sp,16
  81f748:	e13ffd15 	stw	r4,-12(fp)
  81f74c:	e17ffe15 	stw	r5,-8(fp)
  81f750:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  81f754:	e03ffc15 	stw	zero,-16(fp)
  81f758:	00000f06 	br	81f798 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  81f75c:	e0bffd17 	ldw	r2,-12(fp)
  81f760:	10800a17 	ldw	r2,40(r2)
  81f764:	11000044 	addi	r4,r2,1
  81f768:	e0fffc17 	ldw	r3,-16(fp)
  81f76c:	e0bffe17 	ldw	r2,-8(fp)
  81f770:	1885883a 	add	r2,r3,r2
  81f774:	10800003 	ldbu	r2,0(r2)
  81f778:	10c03fcc 	andi	r3,r2,255
  81f77c:	18c0201c 	xori	r3,r3,128
  81f780:	18ffe004 	addi	r3,r3,-128
  81f784:	2005883a 	mov	r2,r4
  81f788:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  81f78c:	e0bffc17 	ldw	r2,-16(fp)
  81f790:	10800044 	addi	r2,r2,1
  81f794:	e0bffc15 	stw	r2,-16(fp)
  81f798:	e0fffc17 	ldw	r3,-16(fp)
  81f79c:	e0bfff17 	ldw	r2,-4(fp)
  81f7a0:	18bfee36 	bltu	r3,r2,81f75c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  81f7a4:	e037883a 	mov	sp,fp
  81f7a8:	df000017 	ldw	fp,0(sp)
  81f7ac:	dec00104 	addi	sp,sp,4
  81f7b0:	f800283a 	ret

0081f7b4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  81f7b4:	defffd04 	addi	sp,sp,-12
  81f7b8:	df000215 	stw	fp,8(sp)
  81f7bc:	df000204 	addi	fp,sp,8
  81f7c0:	e13ffe15 	stw	r4,-8(fp)
  81f7c4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  81f7c8:	00000d06 	br	81f800 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  81f7cc:	e0bffe17 	ldw	r2,-8(fp)
  81f7d0:	10800a17 	ldw	r2,40(r2)
  81f7d4:	11000044 	addi	r4,r2,1
  81f7d8:	e0bfff17 	ldw	r2,-4(fp)
  81f7dc:	10800003 	ldbu	r2,0(r2)
  81f7e0:	10c03fcc 	andi	r3,r2,255
  81f7e4:	18c0201c 	xori	r3,r3,128
  81f7e8:	18ffe004 	addi	r3,r3,-128
  81f7ec:	2005883a 	mov	r2,r4
  81f7f0:	10c00025 	stbio	r3,0(r2)
		++ptr;
  81f7f4:	e0bfff17 	ldw	r2,-4(fp)
  81f7f8:	10800044 	addi	r2,r2,1
  81f7fc:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  81f800:	e0bfff17 	ldw	r2,-4(fp)
  81f804:	10800003 	ldbu	r2,0(r2)
  81f808:	10803fcc 	andi	r2,r2,255
  81f80c:	1080201c 	xori	r2,r2,128
  81f810:	10bfe004 	addi	r2,r2,-128
  81f814:	1004c03a 	cmpne	r2,r2,zero
  81f818:	103fec1e 	bne	r2,zero,81f7cc <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  81f81c:	e037883a 	mov	sp,fp
  81f820:	df000017 	ldw	fp,0(sp)
  81f824:	dec00104 	addi	sp,sp,4
  81f828:	f800283a 	ret

0081f82c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  81f82c:	defffb04 	addi	sp,sp,-20
  81f830:	dfc00415 	stw	ra,16(sp)
  81f834:	df000315 	stw	fp,12(sp)
  81f838:	df000304 	addi	fp,sp,12
  81f83c:	e13ffd15 	stw	r4,-12(fp)
  81f840:	e17ffe15 	stw	r5,-8(fp)
  81f844:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  81f848:	e0bffd17 	ldw	r2,-12(fp)
  81f84c:	10800017 	ldw	r2,0(r2)
  81f850:	1009883a 	mov	r4,r2
  81f854:	e1bfff17 	ldw	r6,-4(fp)
  81f858:	e17ffe17 	ldw	r5,-8(fp)
  81f85c:	081f73c0 	call	81f73c <alt_up_character_lcd_write>
	return 0;
  81f860:	0005883a 	mov	r2,zero
}
  81f864:	e037883a 	mov	sp,fp
  81f868:	dfc00117 	ldw	ra,4(sp)
  81f86c:	df000017 	ldw	fp,0(sp)
  81f870:	dec00204 	addi	sp,sp,8
  81f874:	f800283a 	ret

0081f878 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  81f878:	defff904 	addi	sp,sp,-28
  81f87c:	dfc00615 	stw	ra,24(sp)
  81f880:	df000515 	stw	fp,20(sp)
  81f884:	df000504 	addi	fp,sp,20
  81f888:	e13ffc15 	stw	r4,-16(fp)
  81f88c:	e17ffd15 	stw	r5,-12(fp)
  81f890:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  81f894:	e0bffd17 	ldw	r2,-12(fp)
  81f898:	10800a28 	cmpgeui	r2,r2,40
  81f89c:	1000031e 	bne	r2,zero,81f8ac <alt_up_character_lcd_set_cursor_pos+0x34>
  81f8a0:	e0bffe17 	ldw	r2,-8(fp)
  81f8a4:	108000b0 	cmpltui	r2,r2,2
  81f8a8:	1000031e 	bne	r2,zero,81f8b8 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  81f8ac:	00bfffc4 	movi	r2,-1
  81f8b0:	e0bfff15 	stw	r2,-4(fp)
  81f8b4:	00000806 	br	81f8d8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  81f8b8:	e13ffd17 	ldw	r4,-12(fp)
  81f8bc:	e17ffe17 	ldw	r5,-8(fp)
  81f8c0:	081f6180 	call	81f618 <get_DDRAM_addr>
  81f8c4:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  81f8c8:	e17ffb03 	ldbu	r5,-20(fp)
  81f8cc:	e13ffc17 	ldw	r4,-16(fp)
  81f8d0:	081f6940 	call	81f694 <alt_up_character_lcd_send_cmd>
	return 0;
  81f8d4:	e03fff15 	stw	zero,-4(fp)
  81f8d8:	e0bfff17 	ldw	r2,-4(fp)
}
  81f8dc:	e037883a 	mov	sp,fp
  81f8e0:	dfc00117 	ldw	ra,4(sp)
  81f8e4:	df000017 	ldw	fp,0(sp)
  81f8e8:	dec00204 	addi	sp,sp,8
  81f8ec:	f800283a 	ret

0081f8f0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  81f8f0:	defff904 	addi	sp,sp,-28
  81f8f4:	dfc00615 	stw	ra,24(sp)
  81f8f8:	df000515 	stw	fp,20(sp)
  81f8fc:	df000504 	addi	fp,sp,20
  81f900:	e13ffc15 	stw	r4,-16(fp)
  81f904:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  81f908:	e0bffd17 	ldw	r2,-12(fp)
  81f90c:	1005003a 	cmpeq	r2,r2,zero
  81f910:	10001e1e 	bne	r2,zero,81f98c <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  81f914:	e0bffd17 	ldw	r2,-12(fp)
  81f918:	10800050 	cmplti	r2,r2,1
  81f91c:	1000031e 	bne	r2,zero,81f92c <alt_up_character_lcd_shift_cursor+0x3c>
  81f920:	00800504 	movi	r2,20
  81f924:	e0bfff05 	stb	r2,-4(fp)
  81f928:	00000206 	br	81f934 <alt_up_character_lcd_shift_cursor+0x44>
  81f92c:	00c00404 	movi	r3,16
  81f930:	e0ffff05 	stb	r3,-4(fp)
  81f934:	e0bfff03 	ldbu	r2,-4(fp)
  81f938:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  81f93c:	e0fffd17 	ldw	r3,-12(fp)
  81f940:	e0fffe15 	stw	r3,-8(fp)
  81f944:	e0fffe17 	ldw	r3,-8(fp)
  81f948:	1804403a 	cmpge	r2,r3,zero
  81f94c:	1000031e 	bne	r2,zero,81f95c <alt_up_character_lcd_shift_cursor+0x6c>
  81f950:	e0bffe17 	ldw	r2,-8(fp)
  81f954:	0085c83a 	sub	r2,zero,r2
  81f958:	e0bffe15 	stw	r2,-8(fp)
  81f95c:	e0fffe17 	ldw	r3,-8(fp)
  81f960:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  81f964:	00000306 	br	81f974 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  81f968:	e17ffb43 	ldbu	r5,-19(fp)
  81f96c:	e13ffc17 	ldw	r4,-16(fp)
  81f970:	081f6940 	call	81f694 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  81f974:	e0bffb03 	ldbu	r2,-20(fp)
  81f978:	10bfffc4 	addi	r2,r2,-1
  81f97c:	e0bffb05 	stb	r2,-20(fp)
  81f980:	e0bffb03 	ldbu	r2,-20(fp)
  81f984:	10803fd8 	cmpnei	r2,r2,255
  81f988:	103ff71e 	bne	r2,zero,81f968 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  81f98c:	e037883a 	mov	sp,fp
  81f990:	dfc00117 	ldw	ra,4(sp)
  81f994:	df000017 	ldw	fp,0(sp)
  81f998:	dec00204 	addi	sp,sp,8
  81f99c:	f800283a 	ret

0081f9a0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  81f9a0:	defff904 	addi	sp,sp,-28
  81f9a4:	dfc00615 	stw	ra,24(sp)
  81f9a8:	df000515 	stw	fp,20(sp)
  81f9ac:	df000504 	addi	fp,sp,20
  81f9b0:	e13ffc15 	stw	r4,-16(fp)
  81f9b4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  81f9b8:	e0bffd17 	ldw	r2,-12(fp)
  81f9bc:	1005003a 	cmpeq	r2,r2,zero
  81f9c0:	10001e1e 	bne	r2,zero,81fa3c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  81f9c4:	e0bffd17 	ldw	r2,-12(fp)
  81f9c8:	10800050 	cmplti	r2,r2,1
  81f9cc:	1000031e 	bne	r2,zero,81f9dc <alt_up_character_lcd_shift_display+0x3c>
  81f9d0:	00800704 	movi	r2,28
  81f9d4:	e0bfff05 	stb	r2,-4(fp)
  81f9d8:	00000206 	br	81f9e4 <alt_up_character_lcd_shift_display+0x44>
  81f9dc:	00c00604 	movi	r3,24
  81f9e0:	e0ffff05 	stb	r3,-4(fp)
  81f9e4:	e0bfff03 	ldbu	r2,-4(fp)
  81f9e8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  81f9ec:	e0fffd17 	ldw	r3,-12(fp)
  81f9f0:	e0fffe15 	stw	r3,-8(fp)
  81f9f4:	e0fffe17 	ldw	r3,-8(fp)
  81f9f8:	1804403a 	cmpge	r2,r3,zero
  81f9fc:	1000031e 	bne	r2,zero,81fa0c <alt_up_character_lcd_shift_display+0x6c>
  81fa00:	e0bffe17 	ldw	r2,-8(fp)
  81fa04:	0085c83a 	sub	r2,zero,r2
  81fa08:	e0bffe15 	stw	r2,-8(fp)
  81fa0c:	e0fffe17 	ldw	r3,-8(fp)
  81fa10:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  81fa14:	00000306 	br	81fa24 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  81fa18:	e17ffb43 	ldbu	r5,-19(fp)
  81fa1c:	e13ffc17 	ldw	r4,-16(fp)
  81fa20:	081f6940 	call	81f694 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  81fa24:	e0bffb03 	ldbu	r2,-20(fp)
  81fa28:	10bfffc4 	addi	r2,r2,-1
  81fa2c:	e0bffb05 	stb	r2,-20(fp)
  81fa30:	e0bffb03 	ldbu	r2,-20(fp)
  81fa34:	10803fd8 	cmpnei	r2,r2,255
  81fa38:	103ff71e 	bne	r2,zero,81fa18 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  81fa3c:	e037883a 	mov	sp,fp
  81fa40:	dfc00117 	ldw	ra,4(sp)
  81fa44:	df000017 	ldw	fp,0(sp)
  81fa48:	dec00204 	addi	sp,sp,8
  81fa4c:	f800283a 	ret

0081fa50 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  81fa50:	defff904 	addi	sp,sp,-28
  81fa54:	dfc00615 	stw	ra,24(sp)
  81fa58:	df000515 	stw	fp,20(sp)
  81fa5c:	df000504 	addi	fp,sp,20
  81fa60:	e13ffc15 	stw	r4,-16(fp)
  81fa64:	e17ffd15 	stw	r5,-12(fp)
  81fa68:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  81fa6c:	e0bffd17 	ldw	r2,-12(fp)
  81fa70:	10800a28 	cmpgeui	r2,r2,40
  81fa74:	1000031e 	bne	r2,zero,81fa84 <alt_up_character_lcd_erase_pos+0x34>
  81fa78:	e0bffe17 	ldw	r2,-8(fp)
  81fa7c:	108000b0 	cmpltui	r2,r2,2
  81fa80:	1000031e 	bne	r2,zero,81fa90 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  81fa84:	00bfffc4 	movi	r2,-1
  81fa88:	e0bfff15 	stw	r2,-4(fp)
  81fa8c:	00000e06 	br	81fac8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  81fa90:	e13ffd17 	ldw	r4,-12(fp)
  81fa94:	e17ffe17 	ldw	r5,-8(fp)
  81fa98:	081f6180 	call	81f618 <get_DDRAM_addr>
  81fa9c:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  81faa0:	e17ffb03 	ldbu	r5,-20(fp)
  81faa4:	e13ffc17 	ldw	r4,-16(fp)
  81faa8:	081f6940 	call	81f694 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	// NEM Bug Fix. Next loc sends | to the LCD instead of erase
	// Changed to send a simple space. Not really erase but good enough
	//IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, ' ');
  81faac:	e0bffc17 	ldw	r2,-16(fp)
  81fab0:	10800a17 	ldw	r2,40(r2)
  81fab4:	10800044 	addi	r2,r2,1
  81fab8:	1007883a 	mov	r3,r2
  81fabc:	00800804 	movi	r2,32
  81fac0:	18800025 	stbio	r2,0(r3)
	// END NEM Bug Fixs
	return 0;
  81fac4:	e03fff15 	stw	zero,-4(fp)
  81fac8:	e0bfff17 	ldw	r2,-4(fp)
}
  81facc:	e037883a 	mov	sp,fp
  81fad0:	dfc00117 	ldw	ra,4(sp)
  81fad4:	df000017 	ldw	fp,0(sp)
  81fad8:	dec00204 	addi	sp,sp,8
  81fadc:	f800283a 	ret

0081fae0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  81fae0:	defffd04 	addi	sp,sp,-12
  81fae4:	dfc00215 	stw	ra,8(sp)
  81fae8:	df000115 	stw	fp,4(sp)
  81faec:	df000104 	addi	fp,sp,4
  81faf0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  81faf4:	e13fff17 	ldw	r4,-4(fp)
  81faf8:	01400304 	movi	r5,12
  81fafc:	081f6940 	call	81f694 <alt_up_character_lcd_send_cmd>
}
  81fb00:	e037883a 	mov	sp,fp
  81fb04:	dfc00117 	ldw	ra,4(sp)
  81fb08:	df000017 	ldw	fp,0(sp)
  81fb0c:	dec00204 	addi	sp,sp,8
  81fb10:	f800283a 	ret

0081fb14 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  81fb14:	defffd04 	addi	sp,sp,-12
  81fb18:	dfc00215 	stw	ra,8(sp)
  81fb1c:	df000115 	stw	fp,4(sp)
  81fb20:	df000104 	addi	fp,sp,4
  81fb24:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  81fb28:	e13fff17 	ldw	r4,-4(fp)
  81fb2c:	014003c4 	movi	r5,15
  81fb30:	081f6940 	call	81f694 <alt_up_character_lcd_send_cmd>
}
  81fb34:	e037883a 	mov	sp,fp
  81fb38:	dfc00117 	ldw	ra,4(sp)
  81fb3c:	df000017 	ldw	fp,0(sp)
  81fb40:	dec00204 	addi	sp,sp,8
  81fb44:	f800283a 	ret

0081fb48 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
  81fb48:	defffd04 	addi	sp,sp,-12
  81fb4c:	df000215 	stw	fp,8(sp)
  81fb50:	df000204 	addi	fp,sp,8
  81fb54:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  81fb58:	e0bfff17 	ldw	r2,-4(fp)
  81fb5c:	10800a17 	ldw	r2,40(r2)
  81fb60:	10800104 	addi	r2,r2,4
  81fb64:	10800037 	ldwio	r2,0(r2)
  81fb68:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
  81fb6c:	e0bffe17 	ldw	r2,-8(fp)
  81fb70:	10800054 	ori	r2,r2,1
  81fb74:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  81fb78:	e0bfff17 	ldw	r2,-4(fp)
  81fb7c:	10800a17 	ldw	r2,40(r2)
  81fb80:	10800104 	addi	r2,r2,4
  81fb84:	e0fffe17 	ldw	r3,-8(fp)
  81fb88:	10c00035 	stwio	r3,0(r2)
}
  81fb8c:	e037883a 	mov	sp,fp
  81fb90:	df000017 	ldw	fp,0(sp)
  81fb94:	dec00104 	addi	sp,sp,4
  81fb98:	f800283a 	ret

0081fb9c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
  81fb9c:	defffd04 	addi	sp,sp,-12
  81fba0:	df000215 	stw	fp,8(sp)
  81fba4:	df000204 	addi	fp,sp,8
  81fba8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  81fbac:	e0bfff17 	ldw	r2,-4(fp)
  81fbb0:	10800a17 	ldw	r2,40(r2)
  81fbb4:	10800104 	addi	r2,r2,4
  81fbb8:	10800037 	ldwio	r2,0(r2)
  81fbbc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
  81fbc0:	e0fffe17 	ldw	r3,-8(fp)
  81fbc4:	00bfff84 	movi	r2,-2
  81fbc8:	1884703a 	and	r2,r3,r2
  81fbcc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  81fbd0:	e0bfff17 	ldw	r2,-4(fp)
  81fbd4:	10800a17 	ldw	r2,40(r2)
  81fbd8:	10800104 	addi	r2,r2,4
  81fbdc:	e0fffe17 	ldw	r3,-8(fp)
  81fbe0:	10c00035 	stwio	r3,0(r2)
}
  81fbe4:	e037883a 	mov	sp,fp
  81fbe8:	df000017 	ldw	fp,0(sp)
  81fbec:	dec00104 	addi	sp,sp,4
  81fbf0:	f800283a 	ret

0081fbf4 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
  81fbf4:	defffd04 	addi	sp,sp,-12
  81fbf8:	df000215 	stw	fp,8(sp)
  81fbfc:	df000204 	addi	fp,sp,8
  81fc00:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
  81fc04:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
  81fc08:	e0bfff17 	ldw	r2,-4(fp)
  81fc0c:	10800a17 	ldw	r2,40(r2)
  81fc10:	10800084 	addi	r2,r2,2
  81fc14:	1080002b 	ldhuio	r2,0(r2)
  81fc18:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
  81fc1c:	e0bffe0b 	ldhu	r2,-8(fp)
}
  81fc20:	e037883a 	mov	sp,fp
  81fc24:	df000017 	ldw	fp,0(sp)
  81fc28:	dec00104 	addi	sp,sp,4
  81fc2c:	f800283a 	ret

0081fc30 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
  81fc30:	defffd04 	addi	sp,sp,-12
  81fc34:	df000215 	stw	fp,8(sp)
  81fc38:	df000204 	addi	fp,sp,8
  81fc3c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  81fc40:	e0bfff17 	ldw	r2,-4(fp)
  81fc44:	10800a17 	ldw	r2,40(r2)
  81fc48:	10800104 	addi	r2,r2,4
  81fc4c:	10800037 	ldwio	r2,0(r2)
  81fc50:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
  81fc54:	e0bffe17 	ldw	r2,-8(fp)
  81fc58:	10bfffec 	andhi	r2,r2,65535
  81fc5c:	1004d43a 	srli	r2,r2,16
}
  81fc60:	e037883a 	mov	sp,fp
  81fc64:	df000017 	ldw	fp,0(sp)
  81fc68:	dec00104 	addi	sp,sp,4
  81fc6c:	f800283a 	ret

0081fc70 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
  81fc70:	defffc04 	addi	sp,sp,-16
  81fc74:	df000315 	stw	fp,12(sp)
  81fc78:	df000304 	addi	fp,sp,12
  81fc7c:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
  81fc80:	e0bffe17 	ldw	r2,-8(fp)
  81fc84:	1080800c 	andi	r2,r2,512
  81fc88:	1004d27a 	srli	r2,r2,9
  81fc8c:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
  81fc90:	e0bffd17 	ldw	r2,-12(fp)
  81fc94:	1005003a 	cmpeq	r2,r2,zero
  81fc98:	1000031e 	bne	r2,zero,81fca8 <alt_up_rs232_check_parity+0x38>
  81fc9c:	00bfffc4 	movi	r2,-1
  81fca0:	e0bfff15 	stw	r2,-4(fp)
  81fca4:	00000106 	br	81fcac <alt_up_rs232_check_parity+0x3c>
  81fca8:	e03fff15 	stw	zero,-4(fp)
  81fcac:	e0bfff17 	ldw	r2,-4(fp)
}
  81fcb0:	e037883a 	mov	sp,fp
  81fcb4:	df000017 	ldw	fp,0(sp)
  81fcb8:	dec00104 	addi	sp,sp,4
  81fcbc:	f800283a 	ret

0081fcc0 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
  81fcc0:	defffc04 	addi	sp,sp,-16
  81fcc4:	df000315 	stw	fp,12(sp)
  81fcc8:	df000304 	addi	fp,sp,12
  81fccc:	e13ffe15 	stw	r4,-8(fp)
  81fcd0:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  81fcd4:	e0bffe17 	ldw	r2,-8(fp)
  81fcd8:	10800a17 	ldw	r2,40(r2)
  81fcdc:	10800037 	ldwio	r2,0(r2)
  81fce0:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
  81fce4:	e0bffe17 	ldw	r2,-8(fp)
  81fce8:	10800a17 	ldw	r2,40(r2)
  81fcec:	e0ffff03 	ldbu	r3,-4(fp)
  81fcf0:	10c00035 	stwio	r3,0(r2)
	return 0;
  81fcf4:	0005883a 	mov	r2,zero
}
  81fcf8:	e037883a 	mov	sp,fp
  81fcfc:	df000017 	ldw	fp,0(sp)
  81fd00:	dec00104 	addi	sp,sp,4
  81fd04:	f800283a 	ret

0081fd08 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
  81fd08:	defffa04 	addi	sp,sp,-24
  81fd0c:	dfc00515 	stw	ra,20(sp)
  81fd10:	df000415 	stw	fp,16(sp)
  81fd14:	df000404 	addi	fp,sp,16
  81fd18:	e13ffd15 	stw	r4,-12(fp)
  81fd1c:	e17ffe15 	stw	r5,-8(fp)
  81fd20:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  81fd24:	e0bffd17 	ldw	r2,-12(fp)
  81fd28:	10800a17 	ldw	r2,40(r2)
  81fd2c:	10800037 	ldwio	r2,0(r2)
  81fd30:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
  81fd34:	e0bffc17 	ldw	r2,-16(fp)
  81fd38:	1007883a 	mov	r3,r2
  81fd3c:	e0bffe17 	ldw	r2,-8(fp)
  81fd40:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
  81fd44:	e13ffc17 	ldw	r4,-16(fp)
  81fd48:	081fc700 	call	81fc70 <alt_up_rs232_check_parity>
  81fd4c:	1007883a 	mov	r3,r2
  81fd50:	e0bfff17 	ldw	r2,-4(fp)
  81fd54:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
  81fd58:	e0bffc17 	ldw	r2,-16(fp)
  81fd5c:	10a0000c 	andi	r2,r2,32768
  81fd60:	1004d3fa 	srli	r2,r2,15
  81fd64:	10bfffc4 	addi	r2,r2,-1
}
  81fd68:	e037883a 	mov	sp,fp
  81fd6c:	dfc00117 	ldw	ra,4(sp)
  81fd70:	df000017 	ldw	fp,0(sp)
  81fd74:	dec00204 	addi	sp,sp,8
  81fd78:	f800283a 	ret

0081fd7c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
  81fd7c:	defff804 	addi	sp,sp,-32
  81fd80:	dfc00715 	stw	ra,28(sp)
  81fd84:	df000615 	stw	fp,24(sp)
  81fd88:	df000604 	addi	fp,sp,24
  81fd8c:	e13ffd15 	stw	r4,-12(fp)
  81fd90:	e17ffe15 	stw	r5,-8(fp)
  81fd94:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  81fd98:	e0bffd17 	ldw	r2,-12(fp)
  81fd9c:	10800017 	ldw	r2,0(r2)
  81fda0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
  81fda4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
  81fda8:	00000c06 	br	81fddc <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
  81fdac:	e17ffe17 	ldw	r5,-8(fp)
  81fdb0:	e0bffe17 	ldw	r2,-8(fp)
  81fdb4:	10800044 	addi	r2,r2,1
  81fdb8:	e0bffe15 	stw	r2,-8(fp)
  81fdbc:	e1bffc04 	addi	r6,fp,-16
  81fdc0:	e13ffb17 	ldw	r4,-20(fp)
  81fdc4:	081fd080 	call	81fd08 <alt_up_rs232_read_data>
  81fdc8:	1004c03a 	cmpne	r2,r2,zero
  81fdcc:	1000091e 	bne	r2,zero,81fdf4 <alt_up_rs232_read_fd+0x78>
			count++;
  81fdd0:	e0bffa17 	ldw	r2,-24(fp)
  81fdd4:	10800044 	addi	r2,r2,1
  81fdd8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
  81fddc:	e0bfff17 	ldw	r2,-4(fp)
  81fde0:	10bfffc4 	addi	r2,r2,-1
  81fde4:	e0bfff15 	stw	r2,-4(fp)
  81fde8:	e0bfff17 	ldw	r2,-4(fp)
  81fdec:	10bfffd8 	cmpnei	r2,r2,-1
  81fdf0:	103fee1e 	bne	r2,zero,81fdac <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
  81fdf4:	e0bffa17 	ldw	r2,-24(fp)
}
  81fdf8:	e037883a 	mov	sp,fp
  81fdfc:	dfc00117 	ldw	ra,4(sp)
  81fe00:	df000017 	ldw	fp,0(sp)
  81fe04:	dec00204 	addi	sp,sp,8
  81fe08:	f800283a 	ret

0081fe0c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
  81fe0c:	defff904 	addi	sp,sp,-28
  81fe10:	dfc00615 	stw	ra,24(sp)
  81fe14:	df000515 	stw	fp,20(sp)
  81fe18:	df000504 	addi	fp,sp,20
  81fe1c:	e13ffd15 	stw	r4,-12(fp)
  81fe20:	e17ffe15 	stw	r5,-8(fp)
  81fe24:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  81fe28:	e0bffd17 	ldw	r2,-12(fp)
  81fe2c:	10800017 	ldw	r2,0(r2)
  81fe30:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
  81fe34:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
  81fe38:	00000d06 	br	81fe70 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
  81fe3c:	e0bffe17 	ldw	r2,-8(fp)
  81fe40:	10800003 	ldbu	r2,0(r2)
  81fe44:	11403fcc 	andi	r5,r2,255
  81fe48:	e13ffc17 	ldw	r4,-16(fp)
  81fe4c:	081fcc00 	call	81fcc0 <alt_up_rs232_write_data>
  81fe50:	1004c03a 	cmpne	r2,r2,zero
  81fe54:	10000c1e 	bne	r2,zero,81fe88 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
  81fe58:	e0bffb17 	ldw	r2,-20(fp)
  81fe5c:	10800044 	addi	r2,r2,1
  81fe60:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
  81fe64:	e0bffe17 	ldw	r2,-8(fp)
  81fe68:	10800044 	addi	r2,r2,1
  81fe6c:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
  81fe70:	e0bfff17 	ldw	r2,-4(fp)
  81fe74:	10bfffc4 	addi	r2,r2,-1
  81fe78:	e0bfff15 	stw	r2,-4(fp)
  81fe7c:	e0bfff17 	ldw	r2,-4(fp)
  81fe80:	10bfffd8 	cmpnei	r2,r2,-1
  81fe84:	103fed1e 	bne	r2,zero,81fe3c <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
  81fe88:	e0bffb17 	ldw	r2,-20(fp)
}
  81fe8c:	e037883a 	mov	sp,fp
  81fe90:	dfc00117 	ldw	ra,4(sp)
  81fe94:	df000017 	ldw	fp,0(sp)
  81fe98:	dec00204 	addi	sp,sp,8
  81fe9c:	f800283a 	ret

0081fea0 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
  81fea0:	defffc04 	addi	sp,sp,-16
  81fea4:	dfc00315 	stw	ra,12(sp)
  81fea8:	df000215 	stw	fp,8(sp)
  81feac:	df000204 	addi	fp,sp,8
  81feb0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
  81feb4:	e13fff17 	ldw	r4,-4(fp)
  81feb8:	014020b4 	movhi	r5,130
  81febc:	294e7704 	addi	r5,r5,14812
  81fec0:	082022c0 	call	82022c <alt_find_dev>
  81fec4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  81fec8:	e0bffe17 	ldw	r2,-8(fp)
}
  81fecc:	e037883a 	mov	sp,fp
  81fed0:	dfc00117 	ldw	ra,4(sp)
  81fed4:	df000017 	ldw	fp,0(sp)
  81fed8:	dec00204 	addi	sp,sp,8
  81fedc:	f800283a 	ret

0081fee0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  81fee0:	defff404 	addi	sp,sp,-48
  81fee4:	df000b15 	stw	fp,44(sp)
  81fee8:	df000b04 	addi	fp,sp,44
  81feec:	e13ffb15 	stw	r4,-20(fp)
  81fef0:	e17ffc15 	stw	r5,-16(fp)
  81fef4:	e1bffd15 	stw	r6,-12(fp)
  81fef8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81fefc:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81ff00:	008020b4 	movhi	r2,130
  81ff04:	10959404 	addi	r2,r2,22096
  81ff08:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  81ff0c:	1005003a 	cmpeq	r2,r2,zero
  81ff10:	1000411e 	bne	r2,zero,820018 <alt_alarm_start+0x138>
  {
    if (alarm)
  81ff14:	e0bffb17 	ldw	r2,-20(fp)
  81ff18:	1005003a 	cmpeq	r2,r2,zero
  81ff1c:	10003b1e 	bne	r2,zero,82000c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  81ff20:	e0fffb17 	ldw	r3,-20(fp)
  81ff24:	e0bffd17 	ldw	r2,-12(fp)
  81ff28:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  81ff2c:	e0fffb17 	ldw	r3,-20(fp)
  81ff30:	e0bffe17 	ldw	r2,-8(fp)
  81ff34:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ff38:	0005303a 	rdctl	r2,status
  81ff3c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ff40:	e0fff817 	ldw	r3,-32(fp)
  81ff44:	00bfff84 	movi	r2,-2
  81ff48:	1884703a 	and	r2,r3,r2
  81ff4c:	1001703a 	wrctl	status,r2
  
  return context;
  81ff50:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81ff54:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81ff58:	008020b4 	movhi	r2,130
  81ff5c:	10959504 	addi	r2,r2,22100
  81ff60:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81ff64:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81ff68:	e0fffc17 	ldw	r3,-16(fp)
  81ff6c:	e0bff917 	ldw	r2,-28(fp)
  81ff70:	1885883a 	add	r2,r3,r2
  81ff74:	10c00044 	addi	r3,r2,1
  81ff78:	e0bffb17 	ldw	r2,-20(fp)
  81ff7c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81ff80:	e0bffb17 	ldw	r2,-20(fp)
  81ff84:	10c00217 	ldw	r3,8(r2)
  81ff88:	e0bff917 	ldw	r2,-28(fp)
  81ff8c:	1880042e 	bgeu	r3,r2,81ffa0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  81ff90:	e0fffb17 	ldw	r3,-20(fp)
  81ff94:	00800044 	movi	r2,1
  81ff98:	18800405 	stb	r2,16(r3)
  81ff9c:	00000206 	br	81ffa8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  81ffa0:	e0bffb17 	ldw	r2,-20(fp)
  81ffa4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81ffa8:	e0fffb17 	ldw	r3,-20(fp)
  81ffac:	008020b4 	movhi	r2,130
  81ffb0:	108e9c04 	addi	r2,r2,14960
  81ffb4:	e0bff615 	stw	r2,-40(fp)
  81ffb8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81ffbc:	e0fff717 	ldw	r3,-36(fp)
  81ffc0:	e0bff617 	ldw	r2,-40(fp)
  81ffc4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81ffc8:	e0bff617 	ldw	r2,-40(fp)
  81ffcc:	10c00017 	ldw	r3,0(r2)
  81ffd0:	e0bff717 	ldw	r2,-36(fp)
  81ffd4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81ffd8:	e0bff617 	ldw	r2,-40(fp)
  81ffdc:	10c00017 	ldw	r3,0(r2)
  81ffe0:	e0bff717 	ldw	r2,-36(fp)
  81ffe4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81ffe8:	e0fff617 	ldw	r3,-40(fp)
  81ffec:	e0bff717 	ldw	r2,-36(fp)
  81fff0:	18800015 	stw	r2,0(r3)
  81fff4:	e0bffa17 	ldw	r2,-24(fp)
  81fff8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81fffc:	e0bff517 	ldw	r2,-44(fp)
  820000:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  820004:	e03fff15 	stw	zero,-4(fp)
  820008:	00000506 	br	820020 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  82000c:	00bffa84 	movi	r2,-22
  820010:	e0bfff15 	stw	r2,-4(fp)
  820014:	00000206 	br	820020 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  820018:	00bfde84 	movi	r2,-134
  82001c:	e0bfff15 	stw	r2,-4(fp)
  820020:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  820024:	e037883a 	mov	sp,fp
  820028:	df000017 	ldw	fp,0(sp)
  82002c:	dec00104 	addi	sp,sp,4
  820030:	f800283a 	ret

00820034 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  820034:	deffff04 	addi	sp,sp,-4
  820038:	df000015 	stw	fp,0(sp)
  82003c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  820040:	e037883a 	mov	sp,fp
  820044:	df000017 	ldw	fp,0(sp)
  820048:	dec00104 	addi	sp,sp,4
  82004c:	f800283a 	ret

00820050 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  820050:	defff904 	addi	sp,sp,-28
  820054:	dfc00615 	stw	ra,24(sp)
  820058:	df000515 	stw	fp,20(sp)
  82005c:	df000504 	addi	fp,sp,20
  820060:	e13ffd15 	stw	r4,-12(fp)
  820064:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  820068:	e0bffd17 	ldw	r2,-12(fp)
  82006c:	1005003a 	cmpeq	r2,r2,zero
  820070:	1000041e 	bne	r2,zero,820084 <alt_dev_llist_insert+0x34>
  820074:	e0bffd17 	ldw	r2,-12(fp)
  820078:	10800217 	ldw	r2,8(r2)
  82007c:	1004c03a 	cmpne	r2,r2,zero
  820080:	1000071e 	bne	r2,zero,8200a0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  820084:	08201040 	call	820104 <alt_get_errno>
  820088:	1007883a 	mov	r3,r2
  82008c:	00800584 	movi	r2,22
  820090:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  820094:	00bffa84 	movi	r2,-22
  820098:	e0bfff15 	stw	r2,-4(fp)
  82009c:	00001306 	br	8200ec <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8200a0:	e0fffd17 	ldw	r3,-12(fp)
  8200a4:	e0bffe17 	ldw	r2,-8(fp)
  8200a8:	e0bffb15 	stw	r2,-20(fp)
  8200ac:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8200b0:	e0fffc17 	ldw	r3,-16(fp)
  8200b4:	e0bffb17 	ldw	r2,-20(fp)
  8200b8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8200bc:	e0bffb17 	ldw	r2,-20(fp)
  8200c0:	10c00017 	ldw	r3,0(r2)
  8200c4:	e0bffc17 	ldw	r2,-16(fp)
  8200c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8200cc:	e0bffb17 	ldw	r2,-20(fp)
  8200d0:	10c00017 	ldw	r3,0(r2)
  8200d4:	e0bffc17 	ldw	r2,-16(fp)
  8200d8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8200dc:	e0fffb17 	ldw	r3,-20(fp)
  8200e0:	e0bffc17 	ldw	r2,-16(fp)
  8200e4:	18800015 	stw	r2,0(r3)

  return 0;  
  8200e8:	e03fff15 	stw	zero,-4(fp)
  8200ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8200f0:	e037883a 	mov	sp,fp
  8200f4:	dfc00117 	ldw	ra,4(sp)
  8200f8:	df000017 	ldw	fp,0(sp)
  8200fc:	dec00204 	addi	sp,sp,8
  820100:	f800283a 	ret

00820104 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  820104:	defffd04 	addi	sp,sp,-12
  820108:	dfc00215 	stw	ra,8(sp)
  82010c:	df000115 	stw	fp,4(sp)
  820110:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  820114:	008020b4 	movhi	r2,130
  820118:	108e7a04 	addi	r2,r2,14824
  82011c:	10800017 	ldw	r2,0(r2)
  820120:	1005003a 	cmpeq	r2,r2,zero
  820124:	1000061e 	bne	r2,zero,820140 <alt_get_errno+0x3c>
  820128:	008020b4 	movhi	r2,130
  82012c:	108e7a04 	addi	r2,r2,14824
  820130:	10800017 	ldw	r2,0(r2)
  820134:	103ee83a 	callr	r2
  820138:	e0bfff15 	stw	r2,-4(fp)
  82013c:	00000306 	br	82014c <alt_get_errno+0x48>
  820140:	008020b4 	movhi	r2,130
  820144:	10957304 	addi	r2,r2,21964
  820148:	e0bfff15 	stw	r2,-4(fp)
  82014c:	e0bfff17 	ldw	r2,-4(fp)
}
  820150:	e037883a 	mov	sp,fp
  820154:	dfc00117 	ldw	ra,4(sp)
  820158:	df000017 	ldw	fp,0(sp)
  82015c:	dec00204 	addi	sp,sp,8
  820160:	f800283a 	ret

00820164 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  820164:	defffd04 	addi	sp,sp,-12
  820168:	dfc00215 	stw	ra,8(sp)
  82016c:	df000115 	stw	fp,4(sp)
  820170:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  820174:	00bfff04 	movi	r2,-4
  820178:	00c020b4 	movhi	r3,130
  82017c:	18c56f04 	addi	r3,r3,5564
  820180:	1885883a 	add	r2,r3,r2
  820184:	e0bfff15 	stw	r2,-4(fp)
  820188:	00000606 	br	8201a4 <_do_ctors+0x40>
        (*ctor) (); 
  82018c:	e0bfff17 	ldw	r2,-4(fp)
  820190:	10800017 	ldw	r2,0(r2)
  820194:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  820198:	e0bfff17 	ldw	r2,-4(fp)
  82019c:	10bfff04 	addi	r2,r2,-4
  8201a0:	e0bfff15 	stw	r2,-4(fp)
  8201a4:	e0ffff17 	ldw	r3,-4(fp)
  8201a8:	008020b4 	movhi	r2,130
  8201ac:	10856e04 	addi	r2,r2,5560
  8201b0:	18bff62e 	bgeu	r3,r2,82018c <_do_ctors+0x28>
        (*ctor) (); 
}
  8201b4:	e037883a 	mov	sp,fp
  8201b8:	dfc00117 	ldw	ra,4(sp)
  8201bc:	df000017 	ldw	fp,0(sp)
  8201c0:	dec00204 	addi	sp,sp,8
  8201c4:	f800283a 	ret

008201c8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8201c8:	defffd04 	addi	sp,sp,-12
  8201cc:	dfc00215 	stw	ra,8(sp)
  8201d0:	df000115 	stw	fp,4(sp)
  8201d4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8201d8:	00bfff04 	movi	r2,-4
  8201dc:	00c020b4 	movhi	r3,130
  8201e0:	18c56f04 	addi	r3,r3,5564
  8201e4:	1885883a 	add	r2,r3,r2
  8201e8:	e0bfff15 	stw	r2,-4(fp)
  8201ec:	00000606 	br	820208 <_do_dtors+0x40>
        (*dtor) (); 
  8201f0:	e0bfff17 	ldw	r2,-4(fp)
  8201f4:	10800017 	ldw	r2,0(r2)
  8201f8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8201fc:	e0bfff17 	ldw	r2,-4(fp)
  820200:	10bfff04 	addi	r2,r2,-4
  820204:	e0bfff15 	stw	r2,-4(fp)
  820208:	e0ffff17 	ldw	r3,-4(fp)
  82020c:	008020b4 	movhi	r2,130
  820210:	10856f04 	addi	r2,r2,5564
  820214:	18bff62e 	bgeu	r3,r2,8201f0 <_do_dtors+0x28>
        (*dtor) (); 
}
  820218:	e037883a 	mov	sp,fp
  82021c:	dfc00117 	ldw	ra,4(sp)
  820220:	df000017 	ldw	fp,0(sp)
  820224:	dec00204 	addi	sp,sp,8
  820228:	f800283a 	ret

0082022c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  82022c:	defff904 	addi	sp,sp,-28
  820230:	dfc00615 	stw	ra,24(sp)
  820234:	df000515 	stw	fp,20(sp)
  820238:	df000504 	addi	fp,sp,20
  82023c:	e13ffd15 	stw	r4,-12(fp)
  820240:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  820244:	e0bffe17 	ldw	r2,-8(fp)
  820248:	10800017 	ldw	r2,0(r2)
  82024c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  820250:	e13ffd17 	ldw	r4,-12(fp)
  820254:	080e1ec0 	call	80e1ec <strlen>
  820258:	10800044 	addi	r2,r2,1
  82025c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  820260:	00000d06 	br	820298 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  820264:	e0bffc17 	ldw	r2,-16(fp)
  820268:	11000217 	ldw	r4,8(r2)
  82026c:	e1bffb17 	ldw	r6,-20(fp)
  820270:	e17ffd17 	ldw	r5,-12(fp)
  820274:	08211f00 	call	8211f0 <memcmp>
  820278:	1004c03a 	cmpne	r2,r2,zero
  82027c:	1000031e 	bne	r2,zero,82028c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  820280:	e0bffc17 	ldw	r2,-16(fp)
  820284:	e0bfff15 	stw	r2,-4(fp)
  820288:	00000706 	br	8202a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  82028c:	e0bffc17 	ldw	r2,-16(fp)
  820290:	10800017 	ldw	r2,0(r2)
  820294:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  820298:	e0fffe17 	ldw	r3,-8(fp)
  82029c:	e0bffc17 	ldw	r2,-16(fp)
  8202a0:	10fff01e 	bne	r2,r3,820264 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8202a4:	e03fff15 	stw	zero,-4(fp)
  8202a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8202ac:	e037883a 	mov	sp,fp
  8202b0:	dfc00117 	ldw	ra,4(sp)
  8202b4:	df000017 	ldw	fp,0(sp)
  8202b8:	dec00204 	addi	sp,sp,8
  8202bc:	f800283a 	ret

008202c0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8202c0:	deffff04 	addi	sp,sp,-4
  8202c4:	df000015 	stw	fp,0(sp)
  8202c8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  8202cc:	e037883a 	mov	sp,fp
  8202d0:	df000017 	ldw	fp,0(sp)
  8202d4:	dec00104 	addi	sp,sp,4
  8202d8:	f800283a 	ret

008202dc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8202dc:	defff804 	addi	sp,sp,-32
  8202e0:	dfc00715 	stw	ra,28(sp)
  8202e4:	df000615 	stw	fp,24(sp)
  8202e8:	dc000515 	stw	r16,20(sp)
  8202ec:	df000504 	addi	fp,sp,20
  8202f0:	e13ffc15 	stw	r4,-16(fp)
  8202f4:	e17ffd15 	stw	r5,-12(fp)
  8202f8:	e1bffe15 	stw	r6,-8(fp)
  8202fc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  820300:	e13ffd17 	ldw	r4,-12(fp)
  820304:	e17ffe17 	ldw	r5,-8(fp)
  820308:	e1bfff17 	ldw	r6,-4(fp)
  82030c:	08206e40 	call	8206e4 <open>
  820310:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  820314:	e0bffb17 	ldw	r2,-20(fp)
  820318:	1004803a 	cmplt	r2,r2,zero
  82031c:	10001f1e 	bne	r2,zero,82039c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  820320:	e13ffb17 	ldw	r4,-20(fp)
  820324:	040020b4 	movhi	r16,130
  820328:	8409dd04 	addi	r16,r16,10100
  82032c:	01400304 	movi	r5,12
  820330:	080c90c0 	call	80c90c <__mulsi3>
  820334:	1405883a 	add	r2,r2,r16
  820338:	10c00017 	ldw	r3,0(r2)
  82033c:	e0bffc17 	ldw	r2,-16(fp)
  820340:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  820344:	e13ffb17 	ldw	r4,-20(fp)
  820348:	040020b4 	movhi	r16,130
  82034c:	8409dd04 	addi	r16,r16,10100
  820350:	01400304 	movi	r5,12
  820354:	080c90c0 	call	80c90c <__mulsi3>
  820358:	1405883a 	add	r2,r2,r16
  82035c:	10800104 	addi	r2,r2,4
  820360:	10c00017 	ldw	r3,0(r2)
  820364:	e0bffc17 	ldw	r2,-16(fp)
  820368:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  82036c:	e13ffb17 	ldw	r4,-20(fp)
  820370:	040020b4 	movhi	r16,130
  820374:	8409dd04 	addi	r16,r16,10100
  820378:	01400304 	movi	r5,12
  82037c:	080c90c0 	call	80c90c <__mulsi3>
  820380:	1405883a 	add	r2,r2,r16
  820384:	10800204 	addi	r2,r2,8
  820388:	10c00017 	ldw	r3,0(r2)
  82038c:	e0bffc17 	ldw	r2,-16(fp)
  820390:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  820394:	e13ffb17 	ldw	r4,-20(fp)
  820398:	0815d600 	call	815d60 <alt_release_fd>
  }
} 
  82039c:	e037883a 	mov	sp,fp
  8203a0:	dfc00217 	ldw	ra,8(sp)
  8203a4:	df000117 	ldw	fp,4(sp)
  8203a8:	dc000017 	ldw	r16,0(sp)
  8203ac:	dec00304 	addi	sp,sp,12
  8203b0:	f800283a 	ret

008203b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8203b4:	defffb04 	addi	sp,sp,-20
  8203b8:	dfc00415 	stw	ra,16(sp)
  8203bc:	df000315 	stw	fp,12(sp)
  8203c0:	df000304 	addi	fp,sp,12
  8203c4:	e13ffd15 	stw	r4,-12(fp)
  8203c8:	e17ffe15 	stw	r5,-8(fp)
  8203cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8203d0:	010020b4 	movhi	r4,130
  8203d4:	2109e004 	addi	r4,r4,10112
  8203d8:	e17ffd17 	ldw	r5,-12(fp)
  8203dc:	01800044 	movi	r6,1
  8203e0:	01c07fc4 	movi	r7,511
  8203e4:	08202dc0 	call	8202dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8203e8:	010020b4 	movhi	r4,130
  8203ec:	2109dd04 	addi	r4,r4,10100
  8203f0:	e17ffe17 	ldw	r5,-8(fp)
  8203f4:	000d883a 	mov	r6,zero
  8203f8:	01c07fc4 	movi	r7,511
  8203fc:	08202dc0 	call	8202dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  820400:	010020b4 	movhi	r4,130
  820404:	2109e304 	addi	r4,r4,10124
  820408:	e17fff17 	ldw	r5,-4(fp)
  82040c:	01800044 	movi	r6,1
  820410:	01c07fc4 	movi	r7,511
  820414:	08202dc0 	call	8202dc <alt_open_fd>
}  
  820418:	e037883a 	mov	sp,fp
  82041c:	dfc00117 	ldw	ra,4(sp)
  820420:	df000017 	ldw	fp,0(sp)
  820424:	dec00204 	addi	sp,sp,8
  820428:	f800283a 	ret

0082042c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  82042c:	deffef04 	addi	sp,sp,-68
  820430:	df001015 	stw	fp,64(sp)
  820434:	df001004 	addi	fp,sp,64
  820438:	e13ffc15 	stw	r4,-16(fp)
  82043c:	e17ffd15 	stw	r5,-12(fp)
  820440:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  820444:	00bffa84 	movi	r2,-22
  820448:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  82044c:	e0bffc17 	ldw	r2,-16(fp)
  820450:	10800828 	cmpgeui	r2,r2,32
  820454:	1000601e 	bne	r2,zero,8205d8 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  820458:	0005303a 	rdctl	r2,status
  82045c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  820460:	e0fff917 	ldw	r3,-28(fp)
  820464:	00bfff84 	movi	r2,-2
  820468:	1884703a 	and	r2,r3,r2
  82046c:	1001703a 	wrctl	status,r2
  
  return context;
  820470:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  820474:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  820478:	e0bffc17 	ldw	r2,-16(fp)
  82047c:	00c020f4 	movhi	r3,131
  820480:	18ea2904 	addi	r3,r3,-22364
  820484:	100490fa 	slli	r2,r2,3
  820488:	10c7883a 	add	r3,r2,r3
  82048c:	e0bffe17 	ldw	r2,-8(fp)
  820490:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  820494:	e0bffc17 	ldw	r2,-16(fp)
  820498:	00c020f4 	movhi	r3,131
  82049c:	18ea2904 	addi	r3,r3,-22364
  8204a0:	100490fa 	slli	r2,r2,3
  8204a4:	10c5883a 	add	r2,r2,r3
  8204a8:	10c00104 	addi	r3,r2,4
  8204ac:	e0bffd17 	ldw	r2,-12(fp)
  8204b0:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  8204b4:	e0bffe17 	ldw	r2,-8(fp)
  8204b8:	1005003a 	cmpeq	r2,r2,zero
  8204bc:	1000201e 	bne	r2,zero,820540 <alt_irq_register+0x114>
  8204c0:	e0bffc17 	ldw	r2,-16(fp)
  8204c4:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8204c8:	0005303a 	rdctl	r2,status
  8204cc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8204d0:	e0fff617 	ldw	r3,-40(fp)
  8204d4:	00bfff84 	movi	r2,-2
  8204d8:	1884703a 	and	r2,r3,r2
  8204dc:	1001703a 	wrctl	status,r2
  
  return context;
  8204e0:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8204e4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  8204e8:	e0fff717 	ldw	r3,-36(fp)
  8204ec:	00800044 	movi	r2,1
  8204f0:	10c4983a 	sll	r2,r2,r3
  8204f4:	1007883a 	mov	r3,r2
  8204f8:	008020b4 	movhi	r2,130
  8204fc:	10959304 	addi	r2,r2,22092
  820500:	10800017 	ldw	r2,0(r2)
  820504:	1886b03a 	or	r3,r3,r2
  820508:	008020b4 	movhi	r2,130
  82050c:	10959304 	addi	r2,r2,22092
  820510:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  820514:	008020b4 	movhi	r2,130
  820518:	10959304 	addi	r2,r2,22092
  82051c:	10800017 	ldw	r2,0(r2)
  820520:	100170fa 	wrctl	ienable,r2
  820524:	e0bff817 	ldw	r2,-32(fp)
  820528:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  82052c:	e0bff517 	ldw	r2,-44(fp)
  820530:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  820534:	0005883a 	mov	r2,zero
  820538:	e0bfff15 	stw	r2,-4(fp)
  82053c:	00002006 	br	8205c0 <alt_irq_register+0x194>
  820540:	e0bffc17 	ldw	r2,-16(fp)
  820544:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  820548:	0005303a 	rdctl	r2,status
  82054c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  820550:	e0fff217 	ldw	r3,-56(fp)
  820554:	00bfff84 	movi	r2,-2
  820558:	1884703a 	and	r2,r3,r2
  82055c:	1001703a 	wrctl	status,r2
  
  return context;
  820560:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  820564:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  820568:	e0fff317 	ldw	r3,-52(fp)
  82056c:	00800044 	movi	r2,1
  820570:	10c4983a 	sll	r2,r2,r3
  820574:	0084303a 	nor	r2,zero,r2
  820578:	1007883a 	mov	r3,r2
  82057c:	008020b4 	movhi	r2,130
  820580:	10959304 	addi	r2,r2,22092
  820584:	10800017 	ldw	r2,0(r2)
  820588:	1886703a 	and	r3,r3,r2
  82058c:	008020b4 	movhi	r2,130
  820590:	10959304 	addi	r2,r2,22092
  820594:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  820598:	008020b4 	movhi	r2,130
  82059c:	10959304 	addi	r2,r2,22092
  8205a0:	10800017 	ldw	r2,0(r2)
  8205a4:	100170fa 	wrctl	ienable,r2
  8205a8:	e0bff417 	ldw	r2,-48(fp)
  8205ac:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8205b0:	e0bff117 	ldw	r2,-60(fp)
  8205b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8205b8:	0005883a 	mov	r2,zero
  8205bc:	e0bfff15 	stw	r2,-4(fp)
  8205c0:	e0bfff17 	ldw	r2,-4(fp)
  8205c4:	e0bffb15 	stw	r2,-20(fp)
  8205c8:	e0bffa17 	ldw	r2,-24(fp)
  8205cc:	e0bff015 	stw	r2,-64(fp)
  8205d0:	e0bff017 	ldw	r2,-64(fp)
  8205d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  8205d8:	e0bffb17 	ldw	r2,-20(fp)
}
  8205dc:	e037883a 	mov	sp,fp
  8205e0:	df000017 	ldw	fp,0(sp)
  8205e4:	dec00104 	addi	sp,sp,4
  8205e8:	f800283a 	ret

008205ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8205ec:	defffa04 	addi	sp,sp,-24
  8205f0:	dfc00515 	stw	ra,20(sp)
  8205f4:	df000415 	stw	fp,16(sp)
  8205f8:	dc000315 	stw	r16,12(sp)
  8205fc:	df000304 	addi	fp,sp,12
  820600:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  820604:	e0bffe17 	ldw	r2,-8(fp)
  820608:	10800217 	ldw	r2,8(r2)
  82060c:	10d00034 	orhi	r3,r2,16384
  820610:	e0bffe17 	ldw	r2,-8(fp)
  820614:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  820618:	e03ffd15 	stw	zero,-12(fp)
  82061c:	00002306 	br	8206ac <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  820620:	e13ffd17 	ldw	r4,-12(fp)
  820624:	040020b4 	movhi	r16,130
  820628:	8409dd04 	addi	r16,r16,10100
  82062c:	01400304 	movi	r5,12
  820630:	080c90c0 	call	80c90c <__mulsi3>
  820634:	1405883a 	add	r2,r2,r16
  820638:	10c00017 	ldw	r3,0(r2)
  82063c:	e0bffe17 	ldw	r2,-8(fp)
  820640:	10800017 	ldw	r2,0(r2)
  820644:	1880161e 	bne	r3,r2,8206a0 <alt_file_locked+0xb4>
  820648:	e13ffd17 	ldw	r4,-12(fp)
  82064c:	040020b4 	movhi	r16,130
  820650:	8409dd04 	addi	r16,r16,10100
  820654:	01400304 	movi	r5,12
  820658:	080c90c0 	call	80c90c <__mulsi3>
  82065c:	1405883a 	add	r2,r2,r16
  820660:	10800204 	addi	r2,r2,8
  820664:	10800017 	ldw	r2,0(r2)
  820668:	1004403a 	cmpge	r2,r2,zero
  82066c:	10000c1e 	bne	r2,zero,8206a0 <alt_file_locked+0xb4>
  820670:	e13ffd17 	ldw	r4,-12(fp)
  820674:	01400304 	movi	r5,12
  820678:	080c90c0 	call	80c90c <__mulsi3>
  82067c:	1007883a 	mov	r3,r2
  820680:	008020b4 	movhi	r2,130
  820684:	1089dd04 	addi	r2,r2,10100
  820688:	1887883a 	add	r3,r3,r2
  82068c:	e0bffe17 	ldw	r2,-8(fp)
  820690:	18800326 	beq	r3,r2,8206a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  820694:	00bffcc4 	movi	r2,-13
  820698:	e0bfff15 	stw	r2,-4(fp)
  82069c:	00000a06 	br	8206c8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8206a0:	e0bffd17 	ldw	r2,-12(fp)
  8206a4:	10800044 	addi	r2,r2,1
  8206a8:	e0bffd15 	stw	r2,-12(fp)
  8206ac:	008020b4 	movhi	r2,130
  8206b0:	108e7904 	addi	r2,r2,14820
  8206b4:	10800017 	ldw	r2,0(r2)
  8206b8:	1007883a 	mov	r3,r2
  8206bc:	e0bffd17 	ldw	r2,-12(fp)
  8206c0:	18bfd72e 	bgeu	r3,r2,820620 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8206c4:	e03fff15 	stw	zero,-4(fp)
  8206c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8206cc:	e037883a 	mov	sp,fp
  8206d0:	dfc00217 	ldw	ra,8(sp)
  8206d4:	df000117 	ldw	fp,4(sp)
  8206d8:	dc000017 	ldw	r16,0(sp)
  8206dc:	dec00304 	addi	sp,sp,12
  8206e0:	f800283a 	ret

008206e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8206e4:	defff404 	addi	sp,sp,-48
  8206e8:	dfc00b15 	stw	ra,44(sp)
  8206ec:	df000a15 	stw	fp,40(sp)
  8206f0:	df000a04 	addi	fp,sp,40
  8206f4:	e13ffb15 	stw	r4,-20(fp)
  8206f8:	e17ffc15 	stw	r5,-16(fp)
  8206fc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  820700:	00bfffc4 	movi	r2,-1
  820704:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  820708:	00bffb44 	movi	r2,-19
  82070c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  820710:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  820714:	e13ffb17 	ldw	r4,-20(fp)
  820718:	014020b4 	movhi	r5,130
  82071c:	294e7704 	addi	r5,r5,14812
  820720:	082022c0 	call	82022c <alt_find_dev>
  820724:	e0bffa15 	stw	r2,-24(fp)
  820728:	e0bffa17 	ldw	r2,-24(fp)
  82072c:	1004c03a 	cmpne	r2,r2,zero
  820730:	1000051e 	bne	r2,zero,820748 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  820734:	e13ffb17 	ldw	r4,-20(fp)
  820738:	0820f800 	call	820f80 <alt_find_file>
  82073c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  820740:	00800044 	movi	r2,1
  820744:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  820748:	e0bffa17 	ldw	r2,-24(fp)
  82074c:	1005003a 	cmpeq	r2,r2,zero
  820750:	1000311e 	bne	r2,zero,820818 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  820754:	e13ffa17 	ldw	r4,-24(fp)
  820758:	08210a00 	call	8210a0 <alt_get_fd>
  82075c:	e0bff815 	stw	r2,-32(fp)
  820760:	e0bff817 	ldw	r2,-32(fp)
  820764:	1004403a 	cmpge	r2,r2,zero
  820768:	1000031e 	bne	r2,zero,820778 <open+0x94>
    {
      status = index;
  82076c:	e0bff817 	ldw	r2,-32(fp)
  820770:	e0bff715 	stw	r2,-36(fp)
  820774:	00002a06 	br	820820 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  820778:	e13ff817 	ldw	r4,-32(fp)
  82077c:	01400304 	movi	r5,12
  820780:	080c90c0 	call	80c90c <__mulsi3>
  820784:	1007883a 	mov	r3,r2
  820788:	008020b4 	movhi	r2,130
  82078c:	1089dd04 	addi	r2,r2,10100
  820790:	1885883a 	add	r2,r3,r2
  820794:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  820798:	e0fffc17 	ldw	r3,-16(fp)
  82079c:	00900034 	movhi	r2,16384
  8207a0:	10bfffc4 	addi	r2,r2,-1
  8207a4:	1886703a 	and	r3,r3,r2
  8207a8:	e0bff917 	ldw	r2,-28(fp)
  8207ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8207b0:	e0bff617 	ldw	r2,-40(fp)
  8207b4:	1004c03a 	cmpne	r2,r2,zero
  8207b8:	1000061e 	bne	r2,zero,8207d4 <open+0xf0>
  8207bc:	e13ff917 	ldw	r4,-28(fp)
  8207c0:	08205ec0 	call	8205ec <alt_file_locked>
  8207c4:	e0bff715 	stw	r2,-36(fp)
  8207c8:	e0bff717 	ldw	r2,-36(fp)
  8207cc:	1004803a 	cmplt	r2,r2,zero
  8207d0:	1000131e 	bne	r2,zero,820820 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8207d4:	e0bffa17 	ldw	r2,-24(fp)
  8207d8:	10800317 	ldw	r2,12(r2)
  8207dc:	1005003a 	cmpeq	r2,r2,zero
  8207e0:	1000091e 	bne	r2,zero,820808 <open+0x124>
  8207e4:	e0bffa17 	ldw	r2,-24(fp)
  8207e8:	10800317 	ldw	r2,12(r2)
  8207ec:	e13ff917 	ldw	r4,-28(fp)
  8207f0:	e17ffb17 	ldw	r5,-20(fp)
  8207f4:	e1bffc17 	ldw	r6,-16(fp)
  8207f8:	e1fffd17 	ldw	r7,-12(fp)
  8207fc:	103ee83a 	callr	r2
  820800:	e0bfff15 	stw	r2,-4(fp)
  820804:	00000106 	br	82080c <open+0x128>
  820808:	e03fff15 	stw	zero,-4(fp)
  82080c:	e0bfff17 	ldw	r2,-4(fp)
  820810:	e0bff715 	stw	r2,-36(fp)
  820814:	00000206 	br	820820 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  820818:	00bffb44 	movi	r2,-19
  82081c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  820820:	e0bff717 	ldw	r2,-36(fp)
  820824:	1004403a 	cmpge	r2,r2,zero
  820828:	1000091e 	bne	r2,zero,820850 <open+0x16c>
  {
    alt_release_fd (index);  
  82082c:	e13ff817 	ldw	r4,-32(fp)
  820830:	0815d600 	call	815d60 <alt_release_fd>
    ALT_ERRNO = -status;
  820834:	08208700 	call	820870 <alt_get_errno>
  820838:	e0fff717 	ldw	r3,-36(fp)
  82083c:	00c7c83a 	sub	r3,zero,r3
  820840:	10c00015 	stw	r3,0(r2)
    return -1;
  820844:	00bfffc4 	movi	r2,-1
  820848:	e0bffe15 	stw	r2,-8(fp)
  82084c:	00000206 	br	820858 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  820850:	e0bff817 	ldw	r2,-32(fp)
  820854:	e0bffe15 	stw	r2,-8(fp)
  820858:	e0bffe17 	ldw	r2,-8(fp)
}
  82085c:	e037883a 	mov	sp,fp
  820860:	dfc00117 	ldw	ra,4(sp)
  820864:	df000017 	ldw	fp,0(sp)
  820868:	dec00204 	addi	sp,sp,8
  82086c:	f800283a 	ret

00820870 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  820870:	defffd04 	addi	sp,sp,-12
  820874:	dfc00215 	stw	ra,8(sp)
  820878:	df000115 	stw	fp,4(sp)
  82087c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  820880:	008020b4 	movhi	r2,130
  820884:	108e7a04 	addi	r2,r2,14824
  820888:	10800017 	ldw	r2,0(r2)
  82088c:	1005003a 	cmpeq	r2,r2,zero
  820890:	1000061e 	bne	r2,zero,8208ac <alt_get_errno+0x3c>
  820894:	008020b4 	movhi	r2,130
  820898:	108e7a04 	addi	r2,r2,14824
  82089c:	10800017 	ldw	r2,0(r2)
  8208a0:	103ee83a 	callr	r2
  8208a4:	e0bfff15 	stw	r2,-4(fp)
  8208a8:	00000306 	br	8208b8 <alt_get_errno+0x48>
  8208ac:	008020b4 	movhi	r2,130
  8208b0:	10957304 	addi	r2,r2,21964
  8208b4:	e0bfff15 	stw	r2,-4(fp)
  8208b8:	e0bfff17 	ldw	r2,-4(fp)
}
  8208bc:	e037883a 	mov	sp,fp
  8208c0:	dfc00117 	ldw	ra,4(sp)
  8208c4:	df000017 	ldw	fp,0(sp)
  8208c8:	dec00204 	addi	sp,sp,8
  8208cc:	f800283a 	ret

008208d0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8208d0:	defffa04 	addi	sp,sp,-24
  8208d4:	df000515 	stw	fp,20(sp)
  8208d8:	df000504 	addi	fp,sp,20
  8208dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8208e0:	0005303a 	rdctl	r2,status
  8208e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8208e8:	e0fffd17 	ldw	r3,-12(fp)
  8208ec:	00bfff84 	movi	r2,-2
  8208f0:	1884703a 	and	r2,r3,r2
  8208f4:	1001703a 	wrctl	status,r2
  
  return context;
  8208f8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8208fc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  820900:	e0bfff17 	ldw	r2,-4(fp)
  820904:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  820908:	e0bffc17 	ldw	r2,-16(fp)
  82090c:	10c00017 	ldw	r3,0(r2)
  820910:	e0bffc17 	ldw	r2,-16(fp)
  820914:	10800117 	ldw	r2,4(r2)
  820918:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  82091c:	e0bffc17 	ldw	r2,-16(fp)
  820920:	10c00117 	ldw	r3,4(r2)
  820924:	e0bffc17 	ldw	r2,-16(fp)
  820928:	10800017 	ldw	r2,0(r2)
  82092c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  820930:	e0fffc17 	ldw	r3,-16(fp)
  820934:	e0bffc17 	ldw	r2,-16(fp)
  820938:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  82093c:	e0fffc17 	ldw	r3,-16(fp)
  820940:	e0bffc17 	ldw	r2,-16(fp)
  820944:	18800015 	stw	r2,0(r3)
  820948:	e0bffe17 	ldw	r2,-8(fp)
  82094c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  820950:	e0bffb17 	ldw	r2,-20(fp)
  820954:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  820958:	e037883a 	mov	sp,fp
  82095c:	df000017 	ldw	fp,0(sp)
  820960:	dec00104 	addi	sp,sp,4
  820964:	f800283a 	ret

00820968 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  820968:	defffb04 	addi	sp,sp,-20
  82096c:	dfc00415 	stw	ra,16(sp)
  820970:	df000315 	stw	fp,12(sp)
  820974:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  820978:	d0a02e17 	ldw	r2,-32584(gp)
  82097c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  820980:	d0a72717 	ldw	r2,-25444(gp)
  820984:	10800044 	addi	r2,r2,1
  820988:	d0a72715 	stw	r2,-25444(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  82098c:	00003106 	br	820a54 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  820990:	e0bffe17 	ldw	r2,-8(fp)
  820994:	10800017 	ldw	r2,0(r2)
  820998:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  82099c:	e0bffe17 	ldw	r2,-8(fp)
  8209a0:	10800403 	ldbu	r2,16(r2)
  8209a4:	10803fcc 	andi	r2,r2,255
  8209a8:	1005003a 	cmpeq	r2,r2,zero
  8209ac:	1000051e 	bne	r2,zero,8209c4 <alt_tick+0x5c>
  8209b0:	d0a72717 	ldw	r2,-25444(gp)
  8209b4:	1004c03a 	cmpne	r2,r2,zero
  8209b8:	1000021e 	bne	r2,zero,8209c4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  8209bc:	e0bffe17 	ldw	r2,-8(fp)
  8209c0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8209c4:	e0bffe17 	ldw	r2,-8(fp)
  8209c8:	10c00217 	ldw	r3,8(r2)
  8209cc:	d0a72717 	ldw	r2,-25444(gp)
  8209d0:	10c01e36 	bltu	r2,r3,820a4c <alt_tick+0xe4>
  8209d4:	e0bffe17 	ldw	r2,-8(fp)
  8209d8:	10800403 	ldbu	r2,16(r2)
  8209dc:	10803fcc 	andi	r2,r2,255
  8209e0:	1004c03a 	cmpne	r2,r2,zero
  8209e4:	1000191e 	bne	r2,zero,820a4c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  8209e8:	e0bffe17 	ldw	r2,-8(fp)
  8209ec:	10c00317 	ldw	r3,12(r2)
  8209f0:	e0bffe17 	ldw	r2,-8(fp)
  8209f4:	11000517 	ldw	r4,20(r2)
  8209f8:	183ee83a 	callr	r3
  8209fc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  820a00:	e0bffd17 	ldw	r2,-12(fp)
  820a04:	1004c03a 	cmpne	r2,r2,zero
  820a08:	1000031e 	bne	r2,zero,820a18 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  820a0c:	e13ffe17 	ldw	r4,-8(fp)
  820a10:	08208d00 	call	8208d0 <alt_alarm_stop>
  820a14:	00000d06 	br	820a4c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  820a18:	e0bffe17 	ldw	r2,-8(fp)
  820a1c:	10c00217 	ldw	r3,8(r2)
  820a20:	e0bffd17 	ldw	r2,-12(fp)
  820a24:	1887883a 	add	r3,r3,r2
  820a28:	e0bffe17 	ldw	r2,-8(fp)
  820a2c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  820a30:	e0bffe17 	ldw	r2,-8(fp)
  820a34:	10c00217 	ldw	r3,8(r2)
  820a38:	d0a72717 	ldw	r2,-25444(gp)
  820a3c:	1880032e 	bgeu	r3,r2,820a4c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  820a40:	e0fffe17 	ldw	r3,-8(fp)
  820a44:	00800044 	movi	r2,1
  820a48:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  820a4c:	e0bfff17 	ldw	r2,-4(fp)
  820a50:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  820a54:	d0e02e04 	addi	r3,gp,-32584
  820a58:	e0bffe17 	ldw	r2,-8(fp)
  820a5c:	10ffcc1e 	bne	r2,r3,820990 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  820a60:	08171700 	call	817170 <OSTimeTick>
}
  820a64:	e037883a 	mov	sp,fp
  820a68:	dfc00117 	ldw	ra,4(sp)
  820a6c:	df000017 	ldw	fp,0(sp)
  820a70:	dec00204 	addi	sp,sp,8
  820a74:	f800283a 	ret

00820a78 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  820a78:	deffff04 	addi	sp,sp,-4
  820a7c:	df000015 	stw	fp,0(sp)
  820a80:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  820a84:	000170fa 	wrctl	ienable,zero
}
  820a88:	e037883a 	mov	sp,fp
  820a8c:	df000017 	ldw	fp,0(sp)
  820a90:	dec00104 	addi	sp,sp,4
  820a94:	f800283a 	ret

00820a98 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  820a98:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  820a9c:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  820aa0:	d1272017 	ldw	r4,-25472(gp)

      stw ra,  0(sp)
  820aa4:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  820aa8:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  820aac:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  820ab0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  820ab4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  820ab8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  820abc:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  820ac0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  820ac4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  820ac8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  820acc:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  820ad0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  820ad4:	0820eb80 	call	820eb8 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  820ad8:	d1271b17 	ldw	r4,-25492(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  820adc:	d1671307 	ldb	r5,-25524(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  820ae0:	d1272015 	stw	r4,-25472(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  820ae4:	d1671345 	stb	r5,-25523(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  820ae8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  820aec:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  820af0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  820af4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  820af8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  820afc:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  820b00:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  820b04:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  820b08:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  820b0c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  820b10:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  820b14:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  820b18:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  820b1c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  820b20:	f800283a 	ret

00820b24 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  820b24:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  820b28:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  820b2c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  820b30:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  820b34:	0820eb80 	call	820eb8 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  820b38:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  820b3c:	d4a71145 	stb	r18,-25531(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  820b40:	003fe506 	br	820ad8 <OSCtxSw+0x40>

00820b44 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  820b44:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  820b48:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  820b4c:	10800054 	ori	r2,r2,1
      wrctl status, r2
  820b50:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  820b54:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  820b58:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  820b5c:	dec00204 	addi	sp,sp,8

      callr r2
  820b60:	103ee83a 	callr	r2

      nop
  820b64:	0001883a 	nop

00820b68 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  820b68:	defff704 	addi	sp,sp,-36
  820b6c:	dfc00815 	stw	ra,32(sp)
  820b70:	df000715 	stw	fp,28(sp)
  820b74:	df000704 	addi	fp,sp,28
  820b78:	e13ffc15 	stw	r4,-16(fp)
  820b7c:	e17ffd15 	stw	r5,-12(fp)
  820b80:	e1bffe15 	stw	r6,-8(fp)
  820b84:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  820b88:	e0bffe17 	ldw	r2,-8(fp)
  820b8c:	1007883a 	mov	r3,r2
  820b90:	00bfff04 	movi	r2,-4
  820b94:	1884703a 	and	r2,r3,r2
  820b98:	10bf0004 	addi	r2,r2,-1024
  820b9c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  820ba0:	e0bff917 	ldw	r2,-28(fp)
  820ba4:	10000015 	stw	zero,0(r2)
  820ba8:	e0bff917 	ldw	r2,-28(fp)
  820bac:	10c0bb04 	addi	r3,r2,748
  820bb0:	e0bff917 	ldw	r2,-28(fp)
  820bb4:	10c00115 	stw	r3,4(r2)
  820bb8:	e0bff917 	ldw	r2,-28(fp)
  820bbc:	1080bb04 	addi	r2,r2,748
  820bc0:	10c01704 	addi	r3,r2,92
  820bc4:	e0bff917 	ldw	r2,-28(fp)
  820bc8:	10c00215 	stw	r3,8(r2)
  820bcc:	e0bff917 	ldw	r2,-28(fp)
  820bd0:	1080bb04 	addi	r2,r2,748
  820bd4:	10c02e04 	addi	r3,r2,184
  820bd8:	e0bff917 	ldw	r2,-28(fp)
  820bdc:	10c00315 	stw	r3,12(r2)
  820be0:	e0bff917 	ldw	r2,-28(fp)
  820be4:	10000415 	stw	zero,16(r2)
  820be8:	e0bff917 	ldw	r2,-28(fp)
  820bec:	10800504 	addi	r2,r2,20
  820bf0:	1009883a 	mov	r4,r2
  820bf4:	01800644 	movi	r6,25
  820bf8:	000b883a 	mov	r5,zero
  820bfc:	0812e780 	call	812e78 <memset>
  820c00:	e0bff917 	ldw	r2,-28(fp)
  820c04:	10000c15 	stw	zero,48(r2)
  820c08:	e0fff917 	ldw	r3,-28(fp)
  820c0c:	008020b4 	movhi	r2,130
  820c10:	1087cd04 	addi	r2,r2,7988
  820c14:	18800d15 	stw	r2,52(r3)
  820c18:	e0bff917 	ldw	r2,-28(fp)
  820c1c:	10000e15 	stw	zero,56(r2)
  820c20:	e0bff917 	ldw	r2,-28(fp)
  820c24:	10000f15 	stw	zero,60(r2)
  820c28:	e0bff917 	ldw	r2,-28(fp)
  820c2c:	10001015 	stw	zero,64(r2)
  820c30:	e0bff917 	ldw	r2,-28(fp)
  820c34:	10001115 	stw	zero,68(r2)
  820c38:	e0bff917 	ldw	r2,-28(fp)
  820c3c:	10001215 	stw	zero,72(r2)
  820c40:	e0bff917 	ldw	r2,-28(fp)
  820c44:	10001315 	stw	zero,76(r2)
  820c48:	e0bff917 	ldw	r2,-28(fp)
  820c4c:	10001415 	stw	zero,80(r2)
  820c50:	e0bff917 	ldw	r2,-28(fp)
  820c54:	10001515 	stw	zero,84(r2)
  820c58:	e0bff917 	ldw	r2,-28(fp)
  820c5c:	10001615 	stw	zero,88(r2)
  820c60:	e0bff917 	ldw	r2,-28(fp)
  820c64:	10001715 	stw	zero,92(r2)
  820c68:	e0bff917 	ldw	r2,-28(fp)
  820c6c:	10001805 	stb	zero,96(r2)
  820c70:	e0bff917 	ldw	r2,-28(fp)
  820c74:	10801f04 	addi	r2,r2,124
  820c78:	10000015 	stw	zero,0(r2)
  820c7c:	10000115 	stw	zero,4(r2)
  820c80:	10000215 	stw	zero,8(r2)
  820c84:	10000315 	stw	zero,12(r2)
  820c88:	10000415 	stw	zero,16(r2)
  820c8c:	10000515 	stw	zero,20(r2)
  820c90:	10000615 	stw	zero,24(r2)
  820c94:	10000715 	stw	zero,28(r2)
  820c98:	10000815 	stw	zero,32(r2)
  820c9c:	e0bff917 	ldw	r2,-28(fp)
  820ca0:	10002815 	stw	zero,160(r2)
  820ca4:	e0fff917 	ldw	r3,-28(fp)
  820ca8:	00800044 	movi	r2,1
  820cac:	18802915 	stw	r2,164(r3)
  820cb0:	18002a15 	stw	zero,168(r3)
  820cb4:	e0fff917 	ldw	r3,-28(fp)
  820cb8:	008cc384 	movi	r2,13070
  820cbc:	18802b0d 	sth	r2,172(r3)
  820cc0:	e0fff917 	ldw	r3,-28(fp)
  820cc4:	00aaf344 	movi	r2,-21555
  820cc8:	18802b8d 	sth	r2,174(r3)
  820ccc:	e0fff917 	ldw	r3,-28(fp)
  820cd0:	00848d04 	movi	r2,4660
  820cd4:	18802c0d 	sth	r2,176(r3)
  820cd8:	e0fff917 	ldw	r3,-28(fp)
  820cdc:	00b99b44 	movi	r2,-6547
  820ce0:	18802c8d 	sth	r2,178(r3)
  820ce4:	e0fff917 	ldw	r3,-28(fp)
  820ce8:	00b7bb04 	movi	r2,-8468
  820cec:	18802d0d 	sth	r2,180(r3)
  820cf0:	e0fff917 	ldw	r3,-28(fp)
  820cf4:	00800144 	movi	r2,5
  820cf8:	18802d8d 	sth	r2,182(r3)
  820cfc:	e0fff917 	ldw	r3,-28(fp)
  820d00:	008002c4 	movi	r2,11
  820d04:	18802e0d 	sth	r2,184(r3)
  820d08:	e0bff917 	ldw	r2,-28(fp)
  820d0c:	10002f15 	stw	zero,188(r2)
  820d10:	e0bff917 	ldw	r2,-28(fp)
  820d14:	10003015 	stw	zero,192(r2)
  820d18:	e0bff917 	ldw	r2,-28(fp)
  820d1c:	10003115 	stw	zero,196(r2)
  820d20:	e0bff917 	ldw	r2,-28(fp)
  820d24:	10003215 	stw	zero,200(r2)
  820d28:	e0bff917 	ldw	r2,-28(fp)
  820d2c:	10003315 	stw	zero,204(r2)
  820d30:	e0bff917 	ldw	r2,-28(fp)
  820d34:	10003415 	stw	zero,208(r2)
  820d38:	e0bff917 	ldw	r2,-28(fp)
  820d3c:	10003e15 	stw	zero,248(r2)
  820d40:	e0bff917 	ldw	r2,-28(fp)
  820d44:	10003f15 	stw	zero,252(r2)
  820d48:	e0bff917 	ldw	r2,-28(fp)
  820d4c:	10004015 	stw	zero,256(r2)
  820d50:	e0bff917 	ldw	r2,-28(fp)
  820d54:	10004115 	stw	zero,260(r2)
  820d58:	e0bff917 	ldw	r2,-28(fp)
  820d5c:	10004215 	stw	zero,264(r2)
  820d60:	e0bff917 	ldw	r2,-28(fp)
  820d64:	10004315 	stw	zero,268(r2)
  820d68:	e0bff917 	ldw	r2,-28(fp)
  820d6c:	10004415 	stw	zero,272(r2)
  820d70:	e0bff917 	ldw	r2,-28(fp)
  820d74:	10004515 	stw	zero,276(r2)
  820d78:	e0bff917 	ldw	r2,-28(fp)
  820d7c:	10004615 	stw	zero,280(r2)
  820d80:	e0bff917 	ldw	r2,-28(fp)
  820d84:	10004715 	stw	zero,284(r2)
  820d88:	e0bff917 	ldw	r2,-28(fp)
  820d8c:	10003505 	stb	zero,212(r2)
  820d90:	e0bff917 	ldw	r2,-28(fp)
  820d94:	10003705 	stb	zero,220(r2)
  820d98:	e0bff917 	ldw	r2,-28(fp)
  820d9c:	10003d15 	stw	zero,244(r2)
  820da0:	e0bff917 	ldw	r2,-28(fp)
  820da4:	10005215 	stw	zero,328(r2)
  820da8:	e0bff917 	ldw	r2,-28(fp)
  820dac:	10005315 	stw	zero,332(r2)
  820db0:	e0bff917 	ldw	r2,-28(fp)
  820db4:	10005415 	stw	zero,336(r2)
  820db8:	e0bff917 	ldw	r2,-28(fp)
  820dbc:	10005515 	stw	zero,340(r2)
  820dc0:	e0bff917 	ldw	r2,-28(fp)
  820dc4:	1000b515 	stw	zero,724(r2)
  820dc8:	e0bff917 	ldw	r2,-28(fp)
  820dcc:	10007515 	stw	zero,468(r2)
  820dd0:	e0bff917 	ldw	r2,-28(fp)
  820dd4:	1000b715 	stw	zero,732(r2)
  820dd8:	e0bff917 	ldw	r2,-28(fp)
  820ddc:	1000b815 	stw	zero,736(r2)
  820de0:	e0bff917 	ldw	r2,-28(fp)
  820de4:	1000b915 	stw	zero,740(r2)
  820de8:	e0bff917 	ldw	r2,-28(fp)
  820dec:	1000ba15 	stw	zero,744(r2)
  820df0:	e0bff917 	ldw	r2,-28(fp)
  820df4:	1080bb04 	addi	r2,r2,748
  820df8:	1009883a 	mov	r4,r2
  820dfc:	01804504 	movi	r6,276
  820e00:	000b883a 	mov	r5,zero
  820e04:	0812e780 	call	812e78 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  820e08:	e0bff917 	ldw	r2,-28(fp)
  820e0c:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  820e10:	e0bffb17 	ldw	r2,-20(fp)
  820e14:	10bff304 	addi	r2,r2,-52
  820e18:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  820e1c:	e0bffa17 	ldw	r2,-24(fp)
  820e20:	10c00c04 	addi	r3,r2,48
  820e24:	e0bffc17 	ldw	r2,-16(fp)
  820e28:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  820e2c:	e0bffa17 	ldw	r2,-24(fp)
  820e30:	10c00b04 	addi	r3,r2,44
  820e34:	e0bffd17 	ldw	r2,-12(fp)
  820e38:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  820e3c:	e0bffa17 	ldw	r2,-24(fp)
  820e40:	10c00a04 	addi	r3,r2,40
  820e44:	e0bff917 	ldw	r2,-28(fp)
  820e48:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  820e4c:	008020b4 	movhi	r2,130
  820e50:	1082d104 	addi	r2,r2,2884
  820e54:	10c00104 	addi	r3,r2,4
  820e58:	e0bffa17 	ldw	r2,-24(fp)
  820e5c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  820e60:	e0bffa17 	ldw	r2,-24(fp)
}
  820e64:	e037883a 	mov	sp,fp
  820e68:	dfc00117 	ldw	ra,4(sp)
  820e6c:	df000017 	ldw	fp,0(sp)
  820e70:	dec00204 	addi	sp,sp,8
  820e74:	f800283a 	ret

00820e78 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  820e78:	defffe04 	addi	sp,sp,-8
  820e7c:	df000115 	stw	fp,4(sp)
  820e80:	df000104 	addi	fp,sp,4
  820e84:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  820e88:	e037883a 	mov	sp,fp
  820e8c:	df000017 	ldw	fp,0(sp)
  820e90:	dec00104 	addi	sp,sp,4
  820e94:	f800283a 	ret

00820e98 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  820e98:	defffe04 	addi	sp,sp,-8
  820e9c:	df000115 	stw	fp,4(sp)
  820ea0:	df000104 	addi	fp,sp,4
  820ea4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  820ea8:	e037883a 	mov	sp,fp
  820eac:	df000017 	ldw	fp,0(sp)
  820eb0:	dec00104 	addi	sp,sp,4
  820eb4:	f800283a 	ret

00820eb8 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  820eb8:	deffff04 	addi	sp,sp,-4
  820ebc:	df000015 	stw	fp,0(sp)
  820ec0:	d839883a 	mov	fp,sp
}
  820ec4:	e037883a 	mov	sp,fp
  820ec8:	df000017 	ldw	fp,0(sp)
  820ecc:	dec00104 	addi	sp,sp,4
  820ed0:	f800283a 	ret

00820ed4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  820ed4:	deffff04 	addi	sp,sp,-4
  820ed8:	df000015 	stw	fp,0(sp)
  820edc:	d839883a 	mov	fp,sp
}
  820ee0:	e037883a 	mov	sp,fp
  820ee4:	df000017 	ldw	fp,0(sp)
  820ee8:	dec00104 	addi	sp,sp,4
  820eec:	f800283a 	ret

00820ef0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  820ef0:	deffff04 	addi	sp,sp,-4
  820ef4:	df000015 	stw	fp,0(sp)
  820ef8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  820efc:	e037883a 	mov	sp,fp
  820f00:	df000017 	ldw	fp,0(sp)
  820f04:	dec00104 	addi	sp,sp,4
  820f08:	f800283a 	ret

00820f0c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  820f0c:	deffff04 	addi	sp,sp,-4
  820f10:	df000015 	stw	fp,0(sp)
  820f14:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  820f18:	e037883a 	mov	sp,fp
  820f1c:	df000017 	ldw	fp,0(sp)
  820f20:	dec00104 	addi	sp,sp,4
  820f24:	f800283a 	ret

00820f28 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  820f28:	deffff04 	addi	sp,sp,-4
  820f2c:	df000015 	stw	fp,0(sp)
  820f30:	d839883a 	mov	fp,sp
}
  820f34:	e037883a 	mov	sp,fp
  820f38:	df000017 	ldw	fp,0(sp)
  820f3c:	dec00104 	addi	sp,sp,4
  820f40:	f800283a 	ret

00820f44 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  820f44:	deffff04 	addi	sp,sp,-4
  820f48:	df000015 	stw	fp,0(sp)
  820f4c:	d839883a 	mov	fp,sp
}
  820f50:	e037883a 	mov	sp,fp
  820f54:	df000017 	ldw	fp,0(sp)
  820f58:	dec00104 	addi	sp,sp,4
  820f5c:	f800283a 	ret

00820f60 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  820f60:	defffe04 	addi	sp,sp,-8
  820f64:	df000115 	stw	fp,4(sp)
  820f68:	df000104 	addi	fp,sp,4
  820f6c:	e13fff15 	stw	r4,-4(fp)
}
  820f70:	e037883a 	mov	sp,fp
  820f74:	df000017 	ldw	fp,0(sp)
  820f78:	dec00104 	addi	sp,sp,4
  820f7c:	f800283a 	ret

00820f80 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  820f80:	defffa04 	addi	sp,sp,-24
  820f84:	dfc00515 	stw	ra,20(sp)
  820f88:	df000415 	stw	fp,16(sp)
  820f8c:	df000404 	addi	fp,sp,16
  820f90:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  820f94:	008020b4 	movhi	r2,130
  820f98:	108e7504 	addi	r2,r2,14804
  820f9c:	10800017 	ldw	r2,0(r2)
  820fa0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  820fa4:	00003306 	br	821074 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  820fa8:	e0bffd17 	ldw	r2,-12(fp)
  820fac:	11000217 	ldw	r4,8(r2)
  820fb0:	080e1ec0 	call	80e1ec <strlen>
  820fb4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  820fb8:	e0bffd17 	ldw	r2,-12(fp)
  820fbc:	10c00217 	ldw	r3,8(r2)
  820fc0:	e0bffc17 	ldw	r2,-16(fp)
  820fc4:	1885883a 	add	r2,r3,r2
  820fc8:	10bfffc4 	addi	r2,r2,-1
  820fcc:	10800003 	ldbu	r2,0(r2)
  820fd0:	10803fcc 	andi	r2,r2,255
  820fd4:	1080201c 	xori	r2,r2,128
  820fd8:	10bfe004 	addi	r2,r2,-128
  820fdc:	10800bd8 	cmpnei	r2,r2,47
  820fe0:	1000031e 	bne	r2,zero,820ff0 <alt_find_file+0x70>
    {
      len -= 1;
  820fe4:	e0bffc17 	ldw	r2,-16(fp)
  820fe8:	10bfffc4 	addi	r2,r2,-1
  820fec:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  820ff0:	e0bffc17 	ldw	r2,-16(fp)
  820ff4:	1007883a 	mov	r3,r2
  820ff8:	e0bffe17 	ldw	r2,-8(fp)
  820ffc:	1885883a 	add	r2,r3,r2
  821000:	10800003 	ldbu	r2,0(r2)
  821004:	10803fcc 	andi	r2,r2,255
  821008:	1080201c 	xori	r2,r2,128
  82100c:	10bfe004 	addi	r2,r2,-128
  821010:	10800be0 	cmpeqi	r2,r2,47
  821014:	10000a1e 	bne	r2,zero,821040 <alt_find_file+0xc0>
  821018:	e0bffc17 	ldw	r2,-16(fp)
  82101c:	1007883a 	mov	r3,r2
  821020:	e0bffe17 	ldw	r2,-8(fp)
  821024:	1885883a 	add	r2,r3,r2
  821028:	10800003 	ldbu	r2,0(r2)
  82102c:	10803fcc 	andi	r2,r2,255
  821030:	1080201c 	xori	r2,r2,128
  821034:	10bfe004 	addi	r2,r2,-128
  821038:	1004c03a 	cmpne	r2,r2,zero
  82103c:	10000a1e 	bne	r2,zero,821068 <alt_find_file+0xe8>
  821040:	e0bffd17 	ldw	r2,-12(fp)
  821044:	11000217 	ldw	r4,8(r2)
  821048:	e1bffc17 	ldw	r6,-16(fp)
  82104c:	e17ffe17 	ldw	r5,-8(fp)
  821050:	08211f00 	call	8211f0 <memcmp>
  821054:	1004c03a 	cmpne	r2,r2,zero
  821058:	1000031e 	bne	r2,zero,821068 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  82105c:	e0bffd17 	ldw	r2,-12(fp)
  821060:	e0bfff15 	stw	r2,-4(fp)
  821064:	00000806 	br	821088 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  821068:	e0bffd17 	ldw	r2,-12(fp)
  82106c:	10800017 	ldw	r2,0(r2)
  821070:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  821074:	00c020b4 	movhi	r3,130
  821078:	18ce7504 	addi	r3,r3,14804
  82107c:	e0bffd17 	ldw	r2,-12(fp)
  821080:	10ffc91e 	bne	r2,r3,820fa8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  821084:	e03fff15 	stw	zero,-4(fp)
  821088:	e0bfff17 	ldw	r2,-4(fp)
}
  82108c:	e037883a 	mov	sp,fp
  821090:	dfc00117 	ldw	ra,4(sp)
  821094:	df000017 	ldw	fp,0(sp)
  821098:	dec00204 	addi	sp,sp,8
  82109c:	f800283a 	ret

008210a0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8210a0:	defff704 	addi	sp,sp,-36
  8210a4:	dfc00815 	stw	ra,32(sp)
  8210a8:	df000715 	stw	fp,28(sp)
  8210ac:	dc000615 	stw	r16,24(sp)
  8210b0:	df000604 	addi	fp,sp,24
  8210b4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8210b8:	00bffa04 	movi	r2,-24
  8210bc:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  8210c0:	008020b4 	movhi	r2,130
  8210c4:	10957704 	addi	r2,r2,21980
  8210c8:	10800017 	ldw	r2,0(r2)
  8210cc:	e0bffa15 	stw	r2,-24(fp)
  8210d0:	e03ffb0d 	sth	zero,-20(fp)
  8210d4:	e17ffb0b 	ldhu	r5,-20(fp)
  8210d8:	e1bffe04 	addi	r6,fp,-8
  8210dc:	e13ffa17 	ldw	r4,-24(fp)
  8210e0:	081bf900 	call	81bf90 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8210e4:	e03ffd15 	stw	zero,-12(fp)
  8210e8:	00002006 	br	82116c <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
  8210ec:	e13ffd17 	ldw	r4,-12(fp)
  8210f0:	040020b4 	movhi	r16,130
  8210f4:	8409dd04 	addi	r16,r16,10100
  8210f8:	01400304 	movi	r5,12
  8210fc:	080c90c0 	call	80c90c <__mulsi3>
  821100:	1405883a 	add	r2,r2,r16
  821104:	10800017 	ldw	r2,0(r2)
  821108:	1004c03a 	cmpne	r2,r2,zero
  82110c:	1000141e 	bne	r2,zero,821160 <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
  821110:	e13ffd17 	ldw	r4,-12(fp)
  821114:	040020b4 	movhi	r16,130
  821118:	8409dd04 	addi	r16,r16,10100
  82111c:	01400304 	movi	r5,12
  821120:	080c90c0 	call	80c90c <__mulsi3>
  821124:	1407883a 	add	r3,r2,r16
  821128:	e0bfff17 	ldw	r2,-4(fp)
  82112c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  821130:	008020b4 	movhi	r2,130
  821134:	108e7904 	addi	r2,r2,14820
  821138:	10c00017 	ldw	r3,0(r2)
  82113c:	e0bffd17 	ldw	r2,-12(fp)
  821140:	1880040e 	bge	r3,r2,821154 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
  821144:	00c020b4 	movhi	r3,130
  821148:	18ce7904 	addi	r3,r3,14820
  82114c:	e0bffd17 	ldw	r2,-12(fp)
  821150:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  821154:	e0bffd17 	ldw	r2,-12(fp)
  821158:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  82115c:	00000606 	br	821178 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  821160:	e0bffd17 	ldw	r2,-12(fp)
  821164:	10800044 	addi	r2,r2,1
  821168:	e0bffd15 	stw	r2,-12(fp)
  82116c:	e0bffd17 	ldw	r2,-12(fp)
  821170:	10800810 	cmplti	r2,r2,32
  821174:	103fdd1e 	bne	r2,zero,8210ec <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  821178:	008020b4 	movhi	r2,130
  82117c:	10957704 	addi	r2,r2,21980
  821180:	11000017 	ldw	r4,0(r2)
  821184:	081c3880 	call	81c388 <OSSemPost>

  return rc;
  821188:	e0bffc17 	ldw	r2,-16(fp)
}
  82118c:	e037883a 	mov	sp,fp
  821190:	dfc00217 	ldw	ra,8(sp)
  821194:	df000117 	ldw	fp,4(sp)
  821198:	dc000017 	ldw	r16,0(sp)
  82119c:	dec00304 	addi	sp,sp,12
  8211a0:	f800283a 	ret

008211a4 <atexit>:
  8211a4:	200b883a 	mov	r5,r4
  8211a8:	000d883a 	mov	r6,zero
  8211ac:	0009883a 	mov	r4,zero
  8211b0:	000f883a 	mov	r7,zero
  8211b4:	08212641 	jmpi	821264 <__register_exitproc>

008211b8 <exit>:
  8211b8:	defffe04 	addi	sp,sp,-8
  8211bc:	000b883a 	mov	r5,zero
  8211c0:	dc000015 	stw	r16,0(sp)
  8211c4:	dfc00115 	stw	ra,4(sp)
  8211c8:	2021883a 	mov	r16,r4
  8211cc:	082139c0 	call	82139c <__call_exitprocs>
  8211d0:	008020b4 	movhi	r2,130
  8211d4:	108e7004 	addi	r2,r2,14784
  8211d8:	11000017 	ldw	r4,0(r2)
  8211dc:	20800f17 	ldw	r2,60(r4)
  8211e0:	10000126 	beq	r2,zero,8211e8 <exit+0x30>
  8211e4:	103ee83a 	callr	r2
  8211e8:	8009883a 	mov	r4,r16
  8211ec:	082158c0 	call	82158c <_exit>

008211f0 <memcmp>:
  8211f0:	00c000c4 	movi	r3,3
  8211f4:	1980032e 	bgeu	r3,r6,821204 <memcmp+0x14>
  8211f8:	2144b03a 	or	r2,r4,r5
  8211fc:	10c4703a 	and	r2,r2,r3
  821200:	10000f26 	beq	r2,zero,821240 <memcmp+0x50>
  821204:	31ffffc4 	addi	r7,r6,-1
  821208:	3000061e 	bne	r6,zero,821224 <memcmp+0x34>
  82120c:	00000a06 	br	821238 <memcmp+0x48>
  821210:	39ffffc4 	addi	r7,r7,-1
  821214:	00bfffc4 	movi	r2,-1
  821218:	21000044 	addi	r4,r4,1
  82121c:	29400044 	addi	r5,r5,1
  821220:	38800526 	beq	r7,r2,821238 <memcmp+0x48>
  821224:	20c00003 	ldbu	r3,0(r4)
  821228:	28800003 	ldbu	r2,0(r5)
  82122c:	18bff826 	beq	r3,r2,821210 <memcmp+0x20>
  821230:	1885c83a 	sub	r2,r3,r2
  821234:	f800283a 	ret
  821238:	0005883a 	mov	r2,zero
  82123c:	f800283a 	ret
  821240:	180f883a 	mov	r7,r3
  821244:	20c00017 	ldw	r3,0(r4)
  821248:	28800017 	ldw	r2,0(r5)
  82124c:	18bfed1e 	bne	r3,r2,821204 <memcmp+0x14>
  821250:	31bfff04 	addi	r6,r6,-4
  821254:	21000104 	addi	r4,r4,4
  821258:	29400104 	addi	r5,r5,4
  82125c:	39bff936 	bltu	r7,r6,821244 <memcmp+0x54>
  821260:	003fe806 	br	821204 <memcmp+0x14>

00821264 <__register_exitproc>:
  821264:	defffa04 	addi	sp,sp,-24
  821268:	008020b4 	movhi	r2,130
  82126c:	108e7004 	addi	r2,r2,14784
  821270:	dc000015 	stw	r16,0(sp)
  821274:	14000017 	ldw	r16,0(r2)
  821278:	dd000415 	stw	r20,16(sp)
  82127c:	2829883a 	mov	r20,r5
  821280:	81405217 	ldw	r5,328(r16)
  821284:	dcc00315 	stw	r19,12(sp)
  821288:	dc800215 	stw	r18,8(sp)
  82128c:	dc400115 	stw	r17,4(sp)
  821290:	dfc00515 	stw	ra,20(sp)
  821294:	2023883a 	mov	r17,r4
  821298:	3027883a 	mov	r19,r6
  82129c:	3825883a 	mov	r18,r7
  8212a0:	28002526 	beq	r5,zero,821338 <__register_exitproc+0xd4>
  8212a4:	29000117 	ldw	r4,4(r5)
  8212a8:	008007c4 	movi	r2,31
  8212ac:	11002716 	blt	r2,r4,82134c <__register_exitproc+0xe8>
  8212b0:	8800101e 	bne	r17,zero,8212f4 <__register_exitproc+0x90>
  8212b4:	2105883a 	add	r2,r4,r4
  8212b8:	1085883a 	add	r2,r2,r2
  8212bc:	20c00044 	addi	r3,r4,1
  8212c0:	1145883a 	add	r2,r2,r5
  8212c4:	0009883a 	mov	r4,zero
  8212c8:	15000215 	stw	r20,8(r2)
  8212cc:	28c00115 	stw	r3,4(r5)
  8212d0:	2005883a 	mov	r2,r4
  8212d4:	dfc00517 	ldw	ra,20(sp)
  8212d8:	dd000417 	ldw	r20,16(sp)
  8212dc:	dcc00317 	ldw	r19,12(sp)
  8212e0:	dc800217 	ldw	r18,8(sp)
  8212e4:	dc400117 	ldw	r17,4(sp)
  8212e8:	dc000017 	ldw	r16,0(sp)
  8212ec:	dec00604 	addi	sp,sp,24
  8212f0:	f800283a 	ret
  8212f4:	29802204 	addi	r6,r5,136
  8212f8:	00800044 	movi	r2,1
  8212fc:	110e983a 	sll	r7,r2,r4
  821300:	30c04017 	ldw	r3,256(r6)
  821304:	2105883a 	add	r2,r4,r4
  821308:	1085883a 	add	r2,r2,r2
  82130c:	1185883a 	add	r2,r2,r6
  821310:	19c6b03a 	or	r3,r3,r7
  821314:	14802015 	stw	r18,128(r2)
  821318:	14c00015 	stw	r19,0(r2)
  82131c:	00800084 	movi	r2,2
  821320:	30c04015 	stw	r3,256(r6)
  821324:	88bfe31e 	bne	r17,r2,8212b4 <__register_exitproc+0x50>
  821328:	30804117 	ldw	r2,260(r6)
  82132c:	11c4b03a 	or	r2,r2,r7
  821330:	30804115 	stw	r2,260(r6)
  821334:	003fdf06 	br	8212b4 <__register_exitproc+0x50>
  821338:	008020f4 	movhi	r2,131
  82133c:	10aa6904 	addi	r2,r2,-22108
  821340:	100b883a 	mov	r5,r2
  821344:	80805215 	stw	r2,328(r16)
  821348:	003fd606 	br	8212a4 <__register_exitproc+0x40>
  82134c:	00802074 	movhi	r2,129
  821350:	10b49304 	addi	r2,r2,-11700
  821354:	1000021e 	bne	r2,zero,821360 <__register_exitproc+0xfc>
  821358:	013fffc4 	movi	r4,-1
  82135c:	003fdc06 	br	8212d0 <__register_exitproc+0x6c>
  821360:	01006404 	movi	r4,400
  821364:	103ee83a 	callr	r2
  821368:	1007883a 	mov	r3,r2
  82136c:	103ffa26 	beq	r2,zero,821358 <__register_exitproc+0xf4>
  821370:	80805217 	ldw	r2,328(r16)
  821374:	180b883a 	mov	r5,r3
  821378:	18000115 	stw	zero,4(r3)
  82137c:	18800015 	stw	r2,0(r3)
  821380:	80c05215 	stw	r3,328(r16)
  821384:	18006215 	stw	zero,392(r3)
  821388:	18006315 	stw	zero,396(r3)
  82138c:	0009883a 	mov	r4,zero
  821390:	883fc826 	beq	r17,zero,8212b4 <__register_exitproc+0x50>
  821394:	003fd706 	br	8212f4 <__register_exitproc+0x90>

00821398 <register_fini>:
  821398:	f800283a 	ret

0082139c <__call_exitprocs>:
  82139c:	008020b4 	movhi	r2,130
  8213a0:	108e7004 	addi	r2,r2,14784
  8213a4:	10800017 	ldw	r2,0(r2)
  8213a8:	defff304 	addi	sp,sp,-52
  8213ac:	df000b15 	stw	fp,44(sp)
  8213b0:	d8800115 	stw	r2,4(sp)
  8213b4:	00802074 	movhi	r2,129
  8213b8:	10b48e04 	addi	r2,r2,-11720
  8213bc:	1005003a 	cmpeq	r2,r2,zero
  8213c0:	d8800215 	stw	r2,8(sp)
  8213c4:	d8800117 	ldw	r2,4(sp)
  8213c8:	dd400815 	stw	r21,32(sp)
  8213cc:	dd000715 	stw	r20,28(sp)
  8213d0:	10805204 	addi	r2,r2,328
  8213d4:	dfc00c15 	stw	ra,48(sp)
  8213d8:	ddc00a15 	stw	r23,40(sp)
  8213dc:	dd800915 	stw	r22,36(sp)
  8213e0:	dcc00615 	stw	r19,24(sp)
  8213e4:	dc800515 	stw	r18,20(sp)
  8213e8:	dc400415 	stw	r17,16(sp)
  8213ec:	dc000315 	stw	r16,12(sp)
  8213f0:	282b883a 	mov	r21,r5
  8213f4:	2039883a 	mov	fp,r4
  8213f8:	d8800015 	stw	r2,0(sp)
  8213fc:	2829003a 	cmpeq	r20,r5,zero
  821400:	d8800117 	ldw	r2,4(sp)
  821404:	14405217 	ldw	r17,328(r2)
  821408:	88001026 	beq	r17,zero,82144c <__call_exitprocs+0xb0>
  82140c:	ddc00017 	ldw	r23,0(sp)
  821410:	88800117 	ldw	r2,4(r17)
  821414:	8c802204 	addi	r18,r17,136
  821418:	143fffc4 	addi	r16,r2,-1
  82141c:	80000916 	blt	r16,zero,821444 <__call_exitprocs+0xa8>
  821420:	05bfffc4 	movi	r22,-1
  821424:	a000151e 	bne	r20,zero,82147c <__call_exitprocs+0xe0>
  821428:	8409883a 	add	r4,r16,r16
  82142c:	2105883a 	add	r2,r4,r4
  821430:	1485883a 	add	r2,r2,r18
  821434:	10c02017 	ldw	r3,128(r2)
  821438:	a8c01126 	beq	r21,r3,821480 <__call_exitprocs+0xe4>
  82143c:	843fffc4 	addi	r16,r16,-1
  821440:	85bff81e 	bne	r16,r22,821424 <__call_exitprocs+0x88>
  821444:	d8800217 	ldw	r2,8(sp)
  821448:	10003126 	beq	r2,zero,821510 <__call_exitprocs+0x174>
  82144c:	dfc00c17 	ldw	ra,48(sp)
  821450:	df000b17 	ldw	fp,44(sp)
  821454:	ddc00a17 	ldw	r23,40(sp)
  821458:	dd800917 	ldw	r22,36(sp)
  82145c:	dd400817 	ldw	r21,32(sp)
  821460:	dd000717 	ldw	r20,28(sp)
  821464:	dcc00617 	ldw	r19,24(sp)
  821468:	dc800517 	ldw	r18,20(sp)
  82146c:	dc400417 	ldw	r17,16(sp)
  821470:	dc000317 	ldw	r16,12(sp)
  821474:	dec00d04 	addi	sp,sp,52
  821478:	f800283a 	ret
  82147c:	8409883a 	add	r4,r16,r16
  821480:	88c00117 	ldw	r3,4(r17)
  821484:	2105883a 	add	r2,r4,r4
  821488:	1445883a 	add	r2,r2,r17
  82148c:	18ffffc4 	addi	r3,r3,-1
  821490:	11800217 	ldw	r6,8(r2)
  821494:	1c001526 	beq	r3,r16,8214ec <__call_exitprocs+0x150>
  821498:	10000215 	stw	zero,8(r2)
  82149c:	303fe726 	beq	r6,zero,82143c <__call_exitprocs+0xa0>
  8214a0:	00c00044 	movi	r3,1
  8214a4:	1c06983a 	sll	r3,r3,r16
  8214a8:	90804017 	ldw	r2,256(r18)
  8214ac:	8cc00117 	ldw	r19,4(r17)
  8214b0:	1884703a 	and	r2,r3,r2
  8214b4:	10001426 	beq	r2,zero,821508 <__call_exitprocs+0x16c>
  8214b8:	90804117 	ldw	r2,260(r18)
  8214bc:	1884703a 	and	r2,r3,r2
  8214c0:	10000c1e 	bne	r2,zero,8214f4 <__call_exitprocs+0x158>
  8214c4:	2105883a 	add	r2,r4,r4
  8214c8:	1485883a 	add	r2,r2,r18
  8214cc:	11400017 	ldw	r5,0(r2)
  8214d0:	e009883a 	mov	r4,fp
  8214d4:	303ee83a 	callr	r6
  8214d8:	88800117 	ldw	r2,4(r17)
  8214dc:	98bfc81e 	bne	r19,r2,821400 <__call_exitprocs+0x64>
  8214e0:	b8800017 	ldw	r2,0(r23)
  8214e4:	147fd526 	beq	r2,r17,82143c <__call_exitprocs+0xa0>
  8214e8:	003fc506 	br	821400 <__call_exitprocs+0x64>
  8214ec:	8c000115 	stw	r16,4(r17)
  8214f0:	003fea06 	br	82149c <__call_exitprocs+0x100>
  8214f4:	2105883a 	add	r2,r4,r4
  8214f8:	1485883a 	add	r2,r2,r18
  8214fc:	11000017 	ldw	r4,0(r2)
  821500:	303ee83a 	callr	r6
  821504:	003ff406 	br	8214d8 <__call_exitprocs+0x13c>
  821508:	303ee83a 	callr	r6
  82150c:	003ff206 	br	8214d8 <__call_exitprocs+0x13c>
  821510:	88800117 	ldw	r2,4(r17)
  821514:	1000081e 	bne	r2,zero,821538 <__call_exitprocs+0x19c>
  821518:	89000017 	ldw	r4,0(r17)
  82151c:	20000726 	beq	r4,zero,82153c <__call_exitprocs+0x1a0>
  821520:	b9000015 	stw	r4,0(r23)
  821524:	8809883a 	mov	r4,r17
  821528:	080d2380 	call	80d238 <free>
  82152c:	bc400017 	ldw	r17,0(r23)
  821530:	883fb71e 	bne	r17,zero,821410 <__call_exitprocs+0x74>
  821534:	003fc506 	br	82144c <__call_exitprocs+0xb0>
  821538:	89000017 	ldw	r4,0(r17)
  82153c:	882f883a 	mov	r23,r17
  821540:	2023883a 	mov	r17,r4
  821544:	883fb21e 	bne	r17,zero,821410 <__call_exitprocs+0x74>
  821548:	003fc006 	br	82144c <__call_exitprocs+0xb0>

0082154c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  82154c:	defffd04 	addi	sp,sp,-12
  821550:	df000215 	stw	fp,8(sp)
  821554:	df000204 	addi	fp,sp,8
  821558:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  82155c:	e0bfff17 	ldw	r2,-4(fp)
  821560:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  821564:	e0bffe17 	ldw	r2,-8(fp)
  821568:	1005003a 	cmpeq	r2,r2,zero
  82156c:	1000021e 	bne	r2,zero,821578 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  821570:	002af070 	cmpltui	zero,zero,43969
  821574:	00000106 	br	82157c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  821578:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  82157c:	e037883a 	mov	sp,fp
  821580:	df000017 	ldw	fp,0(sp)
  821584:	dec00104 	addi	sp,sp,4
  821588:	f800283a 	ret

0082158c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  82158c:	defffd04 	addi	sp,sp,-12
  821590:	dfc00215 	stw	ra,8(sp)
  821594:	df000115 	stw	fp,4(sp)
  821598:	df000104 	addi	fp,sp,4
  82159c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8215a0:	008020b4 	movhi	r2,130
  8215a4:	10957f44 	addi	r2,r2,22013
  8215a8:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  8215ac:	e13fff17 	ldw	r4,-4(fp)
  8215b0:	082154c0 	call	82154c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8215b4:	003fff06 	br	8215b4 <_exit+0x28>
  8215b8:	00821398 	cmpnei	r2,zero,2126
