//============================================================================
// Name        : dtw.c
// Author      : Group 2
// Project     : ECE492 - Group 2 accelerometer pen
// Description : DTW testing package using Sakoe-Chiba band boundaries for C
//============================================================================

#include "dtw.h"
#include <math.h>
#include <stdlib.h>
#include "includes.h"
#define INFIN 1000000000

int min_three(int a, int b, int c);
int min(int a, int b);
int max(int a, int b);
int dist(int x, int y);

/* Returns minimum of three numbers */
int min_three(int a, int b, int c){
	int min = a;
	if (min > b) min = b;
	if (min > c) min = c;
	return min;
}

/* Returns minimum of two numbers */
int min(int a, int b){
	int m = a;
	if (m > b) m = b;
	return m;
}

/* Returns maximum of two numbers */
int max(int a, int b){
	int m = a;
	if (m < b) m = b;
	return m;
}

// Euclidean distance
int dist(int x, int y) {
	return sqrtl((long)pow((x - y), 2));
}

int dtw(int * t1, int * t2, int n, int m) {
	int i;
	int j;
	int window = (int)(0.1*(max(m, n))+0.5); //band size of 10% max of m or n
	int constraint = abs(n-m);
	window = max(window, constraint);

	// create cost matrix
	//int cost[m][n];
	volatile alt_u32 * pCost = ((alt_u32*) SRAM_0_BASE) + sizeof(int)*800;
	int index = 0;
	// setup initial state of matrix
	for (i = 0; i < m; i++){
		for (j = 0; j < n; j++){
			*(pCost +i*n+j) = INFIN;
			//cost[i][j]
			//printf("%d\n", index++);
		}
	}
	//cost[0][0] = 0;
	*pCost = 0;
	// fill matrix
	for (i = 1; i < m; i++) {
		for (j = max(1, i - window); j < min(n, i + window); j++) {
			*(pCost +i*n+j) = min_three(*(pCost +(i-1)*n+j), *(pCost +i*n+(j-1)),
					*(pCost +(i-1)*n+(j-1))) + dist(t1[i], t2[j]);
		}
	}
	return pCost[m - 1][n - 1];

}

