/*************************************************************************
 * Copyright (c) 2004 Altera Corporation, San Jose, California, USA.      *
 * All rights reserved. All use of this software and documentation is     *
 * subject to the License Agreement located at the end of this file below.*
 **************************************************************************
 * Description:                                                           *
 * The following is a simple hello world program running MicroC/OS-II.The *
 * purpose of the design is to be a very simple application that just     *
 * demonstrates MicroC/OS-II running on NIOS II.The design doesn't account*
 * for issues such as checking system call return codes. etc.             *
 *                                                                        *
 * Requirements:                                                          *
 *   -Supported Example Hardware Platforms                                *
 *     Standard                                                           *
 *     Full Featured                                                      *
 *     Low Cost                                                           *
 *   -Supported Development Boards                                        *
 *     Nios II Development Board, Stratix II Edition                      *
 *     Nios Development Board, Stratix Professional Edition               *
 *     Nios Development Board, Stratix Edition                            *
 *     Nios Development Board, Cyclone Edition                            *
 *   -System Library Settings                                             *
 *     RTOS Type - MicroC/OS-II                                           *
 *     Periodic System Timer                                              *
 *   -Know Issues                                                         *
 *     If this design is run on the ISS, terminal output will take several*
 *     minutes per iteration.                                             *
 **************************************************************************/
/**************************************************************************
 * Name        : test_niosII_uart_sdcard.c
 * Author      : Group 2
 * Project     : ECE492 - Group 2 accelerometer pen
 * Description : Testing reading from UART and writing and reading from SDCard
 * Date		   : Mar 17, 2014
**************************************************************************/

#include <stdio.h>
#include "includes.h"
#include <stdio.h>
#include <system.h>
#include "altera_up_avalon_character_lcd.h"
#include "altera_avalon_pio_regs.h"
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"
#include <altera_up_sd_card_avalon_interface.h>
#include <time.h>
#include "dtw.h"
#include <stdlib.h>

/* Definition of Task Stacks */
#define   TASK_STACKSIZE       2048
OS_STK taskUartRead_stk[TASK_STACKSIZE];
OS_STK taskWriteSDCard_stk[TASK_STACKSIZE];
OS_STK taskReadSDCard_stk[TASK_STACKSIZE];
OS_STK SWQ_stk[TASK_STACKSIZE];


/* Definition of Task Priorities */
#define TASKUARTREAD_PRIORITY 		1
#define TASKWRITESDCARD_PRIORITY      2
#define TASKREADSDCARD_PRIORITY      3

#define SD_BUFFER_SIZE 512
#define MSG_QUEUE_SIZE 512
#define SW_READ 1
#define SW_WRITE 2
#define WRITE_FIFO_EMPTY 0x80
#define READ_FIFO_EMPTY 0x0

#define START '.'
#define END   ','
#define INPUT_SIZE 100
#define CHAR_ARRAY_BUFF_SIZE 10
#define DTW_BASE 10000
#define X_COORD_BASE 2000

/*Semaphore Declaration*/
OS_EVENT *uartsem;
OS_EVENT *writesem;
OS_EVENT *readsem;
OS_EVENT *message;
void *messageArray[MSG_QUEUE_SIZE];

OS_EVENT *SWQ;

INT8U err;

/* SRAM memory Addresses */
typedef struct{
	volatile alt_u32 * pX;
	volatile alt_u32 * pY;
	int size;
}character;

//volatile alt_u32 * pSRAM3 = ((alt_u32*) SRAM_0_BASE) + 2*sizeof(int)*INPUT_SIZE;
//volatile alt_u32 * pSRAM4 = ((alt_u32*) SRAM_0_BASE) + 3*sizeof(int)*INPUT_SIZE;


/* UART task: read*/
void taskUartRead(void* pdata) {
	alt_u16 read_FIFO_used;
	alt_u8 data_R8;
	unsigned p_error;
	alt_up_rs232_dev* rs232_dev;
	int buffer[SD_BUFFER_SIZE];
	char * pbuffer = buffer;
	int index = 0;
	int i;
	int start = 0;
	int sram_ready = 1;
	int coord = 0;
	int current_address = 0;

	character array[10];
	for(i=0; i < 10; i++){
		array[0].pX = ((alt_u32*) SRAM_0_BASE) + sizeof(int)*DTW_BASE;
		array[0].pY = ((alt_u32*) SRAM_0_BASE) + sizeof(int)*(DTW_BASE+X_COORD_BASE);
	}
//	volatile alt_u32 * pSRAM = (alt_u32*) SRAM_0_BASE;
//	volatile alt_u32 * pSRAM2 = ((alt_u32*) SRAM_0_BASE) + sizeof(int)*INPUT_SIZE;
//	volatile alt_u32 * pSRAM3 = ((alt_u32*) SRAM_0_BASE) + 2*sizeof(int)*INPUT_SIZE;
//	volatile alt_u32 * pSRAM4 = ((alt_u32*) SRAM_0_BASE) + 3*sizeof(int)*INPUT_SIZE;



	// open the RS232 UART port
	rs232_dev = alt_up_rs232_open_dev("/dev/rs232_0");
	if (rs232_dev == NULL)
		printf("Error: could not open RS232 UART\n");
	else
		printf("Opened RS232 UART device\n");

	alt_up_rs232_enable_read_interrupt(rs232_dev);

	printf("UART Read Test\n");
	while (1) {

		// Max message size
//		if(index == SD_BUFFER_SIZE-2){
//			printf("Buffer is full, writing current data\n");
//			pbuffer += sizeof(char);
//			*pbuffer = '\0';
//			OSQPost(message, (void*)&buffer);
//			OSSemPend(uartsem, 0, &err);
//			pbuffer = buffer;
//			index = 0;
//			start = 0;
//		}

		//TODO use OSSemAccept(sem) == 0

		// Read from UART
		read_FIFO_used = alt_up_rs232_get_used_space_in_read_FIFO(rs232_dev);
		if (read_FIFO_used > READ_FIFO_EMPTY) {
			alt_printf("char stored in read_FIFO: %x\n", read_FIFO_used);
			alt_up_rs232_read_data(rs232_dev, &data_R8, &p_error);
			alt_printf("read %c from RS232 UART\n", data_R8);

			if(sram_ready){
				if(coord == 0) {
					array[current_address].pX = (int)(data_R8*100);
					//*(pSRAM2 + index) = (int)(data_R8*100);
					coord = 1;
					//index++;
				}
				else {
					array[current_address].pY = (int)(data_R8*100);
					*(pSRAM4 + index) = (int)(data_R8*100);
					index++;
					coord = 0;
				}
			}
			if (IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE) == 1){
				buffer[0] = index;
				err = OSQPost(message, (void*)&buffer);
			}
//			// Start byte
//			if((data_R8 == START) && (start == 0)){
//				pbuffer = buffer;
//				index = 0;
//				start = 1;
//			}
//			// End byte
//			else if((data_R8 == END) && (start == 1)){
//				*pbuffer = '\0';
//				err = OSQPost(message, (void*)&buffer);
//				OSSemPend(uartsem, 0, &err);
//				pbuffer = buffer;
//				index = 0;
//				start = 0;
//			}
//			else if(start == 1){
//				*pbuffer = data_R8;
//				index++;
//				pbuffer =  buffer + index*sizeof(char);
//			}
//			else{
//				printf("Error, start code not detected, enter 1 to start and 2 to finish.\n\n");
//			}

		}
		else{
			start++;
			if(start==2){
				start = 0;
			}
		}
		OSTimeDlyHMSM(0, 0, 0, 10);
	}
}

/* Checks for an SDCard, and Writes to the card if it is FAT16. Receives data from UART task */
void taskWriteSDCard(void* pdata) {
	clock_t t;
	//short int sd_fileh;
	int index;
	char* msg;
	volatile alt_u32 * pSRAM = (alt_u32*) SRAM_0_BASE;
	volatile alt_u32 * pSRAM2 = ((alt_u32*) SRAM_0_BASE) + sizeof(int)*INPUT_SIZE;

	//char buffer[SD_BUFFER_SIZE];// = "SD CARD test message\r\n\0";
	while (1) {
		msg = OSQPend(message, 0, &err);
		//buffer = msg;
		printf("DTW test\n");


		t = clock();

		int answer = dtw(pSRAM, pSRAM2, msg[0], msg[0]);


		t = clock() - t;
		float time = ((float) t) / CLOCKS_PER_SEC;
		printf("%d   time = %f", answer, time);


//		alt_up_sd_card_dev *sd_card_dev = alt_up_sd_card_open_dev(
//				ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
//
//		if (sd_card_dev != 0) {
//			if (alt_up_sd_card_is_Present()) {
//				if (alt_up_sd_card_is_FAT16())
//					printf("Card is FAT16\n");
//				else
//					printf("Card is not FAT16\n");
//
//				sd_fileh = alt_up_sd_card_fopen("file.txt", false);
//
//				if (sd_fileh < 0)
//					printf("Problem creating file. Error %i", sd_fileh);
//				else {
//					printf("SD Accessed Successfully, writing data...");
//
//					//int index = 0;
//					while (*msg != '\0') {
//						alt_up_sd_card_write(sd_fileh, *msg);
//						//index++;
//						msg += sizeof(char);
//					}
//					alt_up_sd_card_write(sd_fileh, '\0');
//
//					printf("Done!\n");
//					printf("Closing File...");
//					alt_up_sd_card_fclose(sd_fileh);
//					printf("Done!\n\n");

					//OSSemPost(readsem);
//				}
//			}
//		}
	}
}

/* Checks for an SDCard, and Reads from the card if it is FAT16 from the file written to by taskWriteSDCard  */
void taskReadSDCard(void* pdata) {
	short int sd_fileh;
	char * read_buffer[SD_BUFFER_SIZE];
	int index;

	while (1) {

		OSSemPend(readsem, 0, &err);
		printf("SD Card Read Test\n");

		alt_up_sd_card_dev *sd_card_dev = alt_up_sd_card_open_dev(
				ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);

		if (sd_card_dev != 0) {
			if (alt_up_sd_card_is_Present()) {
				if (alt_up_sd_card_is_FAT16())
					printf("Card is FAT16\n");
				else
					printf("Card is not FAT16\n");

				sd_fileh = alt_up_sd_card_fopen("file.txt", false);

				if (sd_fileh < 0)
					printf("Problem accessing file. Error %i", sd_fileh);
				else {
					printf("SD Accessed Successfully, reading data...");

					char * pbuffer = read_buffer;
					char data = 1;
					for (index = 0; data != '\0'; index++) {
						data = alt_up_sd_card_read(sd_fileh);
						*pbuffer = data;
						pbuffer = pbuffer + (sizeof(char));
					}

					printf("Done!\n");
					printf("Closing File...");
					alt_up_sd_card_fclose(sd_fileh);
					printf("Done!\n");
					printf("read buffer contains: ");
					printf("%s\n", read_buffer);
					OSSemPost(uartsem);
				}
			}
		}
	}
}

/* The main function creates two tasks. The SD read task pends on the SD write task */
int main(void) {
	uartsem = OSSemCreate(0);
	message = OSQCreate(&messageArray, MSG_QUEUE_SIZE);
	//writesem = OSSemCreate(1);
	readsem = OSSemCreate(0);
	//SWQ = OSQCreate(SWQ_stk, TASK_STACKSIZE);

	OSTaskCreateExt(taskUartRead, NULL, (void *) &taskUartRead_stk[TASK_STACKSIZE - 1],
			TASKUARTREAD_PRIORITY, TASKUARTREAD_PRIORITY, taskUartRead_stk, TASK_STACKSIZE, NULL, 0);


	OSTaskCreateExt(taskWriteSDCard, NULL, (void *) &taskWriteSDCard_stk[TASK_STACKSIZE - 1],
			TASKWRITESDCARD_PRIORITY, TASKWRITESDCARD_PRIORITY, taskWriteSDCard_stk, TASK_STACKSIZE, NULL, 0);



	OSTaskCreateExt(taskReadSDCard, NULL, (void *) &taskReadSDCard_stk[TASK_STACKSIZE - 1],
			TASKREADSDCARD_PRIORITY, TASKREADSDCARD_PRIORITY, taskReadSDCard_stk, TASK_STACKSIZE, NULL, 0);
	OSStart();
	return 0;
}

/******************************************************************************
 *                                                                             *
 * License Agreement                                                           *
 *                                                                             *
 * Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *
 * All rights reserved.                                                        *
 *                                                                             *
 * Permission is hereby granted, free of charge, to any person obtaining a     *
 * copy of this software and associated documentation files (the "Software"),  *
 * to deal in the Software without restriction, including without limitation   *
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,    *
 * and/or sell copies of the Software, and to permit persons to whom the       *
 * Software is furnished to do so, subject to the following conditions:        *
 *                                                                             *
 * The above copyright notice and this permission notice shall be included in  *
 * all copies or substantial portions of the Software.                         *
 *                                                                             *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         *
 * DEALINGS IN THE SOFTWARE.                                                   *
 *                                                                             *
 * This agreement shall be governed in all respects by the laws of the State   *
 * of California and by the laws of the United States of America.              *
 * Altera does not recommend, suggest or require that this reference design    *
 * file be used in conjunction or combination with any other product.          *
 ******************************************************************************/
