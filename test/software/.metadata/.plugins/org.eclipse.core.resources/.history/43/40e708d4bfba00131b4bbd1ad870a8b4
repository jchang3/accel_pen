/*************************************************************************
 * Copyright (c) 2004 Altera Corporation, San Jose, California, USA.      *
 * All rights reserved. All use of this software and documentation is     *
 * subject to the License Agreement located at the end of this file below.*
 **************************************************************************
 * Description:                                                           *
 * The following is a simple hello world program running MicroC/OS-II.The *
 * purpose of the design is to be a very simple application that just     *
 * demonstrates MicroC/OS-II running on NIOS II.The design doesn't account*
 * for issues such as checking system call return codes. etc.             *
 *                                                                        *
 * Requirements:                                                          *
 *   -Supported Example Hardware Platforms                                *
 *     Standard                                                           *
 *     Full Featured                                                      *
 *     Low Cost                                                           *
 *   -Supported Development Boards                                        *
 *     Nios II Development Board, Stratix II Edition                      *
 *     Nios Development Board, Stratix Professional Edition               *
 *     Nios Development Board, Stratix Edition                            *
 *     Nios Development Board, Cyclone Edition                            *
 *   -System Library Settings                                             *
 *     RTOS Type - MicroC/OS-II                                           *
 *     Periodic System Timer                                              *
 *   -Know Issues                                                         *
 *     If this design is run on the ISS, terminal output will take several*
 *     minutes per iteration.                                             *
 **************************************************************************/
/**************************************************************************
 * Name        : test_niosII_uart_sdcard.c
 * Author      : Group 2
 * Project     : ECE492 - Group 2 accelerometer pen
 * Description : Testing reading from UART and writing and reading from SDCard
 * Date		   : Mar 17, 2014
**************************************************************************/

#include <stdio.h>
#include "includes.h"
#include <stdio.h>
#include <system.h>
#include "altera_up_avalon_character_lcd.h"
#include "altera_avalon_pio_regs.h"
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"
#include <altera_up_sd_card_avalon_interface.h>
#include <time.h>
#include "dtw.h"
#include <stdlib.h>
#include <math.h>

/* Definition of Task Stacks */
#define   TASK_STACKSIZE       2048
OS_STK taskModeSelect_stk[TASK_STACKSIZE];
OS_STK taskCalibrate_stk[TASK_STACKSIZE];
OS_STK taskCharacterRead_stk[TASK_STACKSIZE];
OS_STK taskTemplateMatch_stk[TASK_STACKSIZE];
OS_STK taskDTWX_stk[TASK_STACKSIZE];
OS_STK taskDTWY_stk[TASK_STACKSIZE];
OS_STK taskWriteSDCard_stk[TASK_STACKSIZE];
OS_STK SWQ_stk[TASK_STACKSIZE];


/* Definition of Task Priorities */
#define TASKMODESELECT_PRIORITY 		1
#define TASKCALIBRATE_PRIORITY 			2
#define TASKWRITESDCARD_PRIORITY     	3
#define TASKDTWX_PRIORITY    	  		4
#define TASKDTWY_PRIORITY      			5
#define TASKTEMPLATEMATCH_PRIORITY      6
#define TASKCHARACTERREAD_PRIORITY 		7

#define BUFFER_SIZE 10
#define MSG_QUEUE_SIZE 512
#define SW_READ 1
#define SW_WRITE 2
#define WRITE_FIFO_EMPTY 0x80
#define READ_FIFO_EMPTY 0x0
#define SEVEN_SEG	(int *)SEVEN_SEG_8_0_BASE

//#define START '.'
//#define END   ','
#define INPUT_SIZE 200
#define CHAR_ARRAY_BUFF_SIZE 3

//sram memory allocations. values multiplied by sizeof(long).
#define DTW_BASE 80000 //200x200 x 2 for X and Y
//#define DTW_BASE_Y 40000 //200x200
#define X_COORD_BASE 2000 // 200 x 10
#define Y_COORD_BASE 2000
#define INFIN 2147483647
//#define MESSAGE

/*Semaphore Declaration*/
OS_EVENT *uartsem;
OS_EVENT *configuresem;
OS_EVENT *writesem;
OS_EVENT *readsem;
OS_EVENT *message;
//OS_EVENT *messageX;
//OS_EVENT *messageY;
OS_EVENT *dtw_sem;
OS_EVENT *dtw_semx;
OS_EVENT *dtw_semy;
OS_EVENT *semx;
OS_EVENT *semy;
OS_EVENT *modeselectsem;
void *messageArray[MSG_QUEUE_SIZE];
//void *messageArrayX[MSG_QUEUE_SIZE];
//void *messageArrayY[MSG_QUEUE_SIZE];

OS_EVENT *SWQ;

INT8U err;

/* SRAM memory Addresses */
typedef struct{
	volatile alt_u32 * pX;
	volatile alt_u32 * pY;
	int size;
}character;

typedef struct{
	volatile alt_8 * pX;
	volatile alt_8 * pY;
	int size;
}character_8;

character array[10];    //array for input data. Can hold a queue of up to 10 characters
character array_8[10];  //array for calibration data 0-9.
character template[10]; //array for template values 0-9

character *pCharacter; //pointer to character being matched

typedef struct{
	int * t;
	int size;
}template_groups;

template_groups templates[4];

unsigned long dtwx; //used to compute dtw for x coordinates
unsigned long dtwy; //used to compute dtw for y coordinates
//int group;
int template_number; //the current template being matched in dtw

void loadSDCard(int val);
clock_t t;

//int t1[2] = { 1, 7 };
//
//int t2[2] = { 2, 3 };
//
//int t3[3] = { 6, 0, 9 };
//
//int t4[3] = { 4, 5, 8 };

//*SEVEN_SEG = i;
//i++;
//// I only want to display the least significant nibble
//printf("SEVEN_SEG: %x\n", i & 0x0000000f);


void taskModeSelect(void* pdata){
	//int i;
	OSSemPend(modeselectsem, 0, &err);
	printf("Starting ModeSelect\n");

	while(1){
		//printf("Starting ModeSelect\n");
		if (IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE) == 1) {
			//printf("Starting ModeSelect2\n");
			loadSDCard(1);

			//template groups and sizes
			//int t1[2] = { 1, 7 };
			int t1[3] = { 0, 1, 2 };
//			int t2[2] = { 2, 3 };
//			int t3[3] = { 6, 0, 9 };
//			int t4[3] = { 4, 5, 8 };

			templates[0].t = t1;
//			templates[1].t = t2;
//			templates[2].t = t3;
//			templates[3].t = t4;
			templates[0].size = 3;
//			templates[1].size = 2;
//			templates[2].size = 3;
//			templates[3].size = 3;
//
//			for(i = 0; i < 4; i++){
//
//			}
			err = OSSemPost(uartsem);
		} else {
			err = OSSemPost(configuresem);
		}
		//OSTimeDlyHMSM(0, 0, 0, 50);
		//break;
		OSSemPend(modeselectsem, 0, &err);
	}
	return;
}

/* Helper function that loads the character templates from the SDCard and deposits them in SRAM */
//todo loadSDCARD
void loadSDCard(int val) {
	short int sd_fileh;
	//char * read_buffer[SD_BUFFER_SIZE];
	//int index;
	int i;
	int j;
	int temp;
	short int a;

	//OSSemPend(readsem, 0, &err);

	for(i=0; i < CHAR_ARRAY_BUFF_SIZE; i++){
		template[i].pX = ((alt_u32*) SRAM_0_BASE) + sizeof(long)*(DTW_BASE + X_COORD_BASE + Y_COORD_BASE + INPUT_SIZE*i);
		template[i].pY = ((alt_u32*) SRAM_0_BASE) + sizeof(long)*(DTW_BASE + X_COORD_BASE + X_COORD_BASE + Y_COORD_BASE + INPUT_SIZE*i);
	}

	printf("SD Card Read Startup\n");

	alt_up_sd_card_dev *sd_card_dev = alt_up_sd_card_open_dev(
			ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);

	if (sd_card_dev != 0) {
		if (alt_up_sd_card_is_Present()) {
			if (alt_up_sd_card_is_FAT16())
				printf("Card is FAT16\n");
			else
				printf("Card is not FAT16\n");

			sd_fileh = alt_up_sd_card_fopen("file.txt", false);

			if (sd_fileh < 0)
				printf("Problem accessing file. Error %i", sd_fileh);
			else {
				printf("SD Accessed Successfully, reading data...\n");

				//char * pbuffer = read_buffer;


				for(i = 0; i < CHAR_ARRAY_BUFF_SIZE; i++){
					template[i].size = (int) alt_up_sd_card_read(sd_fileh); //reads first byte of data which indicates the size of a template array
					//printf("%d\n", template[i].size);
					if (i == 0) {
						printf(
								"X VALUES for 0 -----------------------------------------------\n");
					}
					for( j = 0;  j < template[i].size; j++){
						//printf("")
						a = alt_up_sd_card_read(sd_fileh);

						*(template[i].pX + sizeof(long)*j) = (long)(a*10);
						//*(template[i].pX + sizeof(long)*j) = (long)(alt_up_sd_card_read(sd_fileh)*10);
						temp = *(template[i].pX + sizeof(long)*j);
						if(i == 0){
							//printf("%ld\n", temp);
							printf("short int =%d\n", a);
						}
						//printf("%d\n", temp);
					}

					if(i == 0){
						printf("Y VALUES for 0 -----------------------------------------------\n");
					}
					for( j = 0;  j < template[i].size; j++){
						a = alt_up_sd_card_read(sd_fileh);

						*(template[i].pY + sizeof(long)*j) = (long)(a*10);
						//*(template[i].pY + sizeof(long)*j) = (long)(alt_up_sd_card_read(sd_fileh)*10);
						temp = *(template[i].pY + sizeof(long)*j);
						if(i == 0){
							//printf("%ld\n", temp);
							printf("short int =%d\n", a);
						}
					}
				}

//				char data = 1;
//				for (index = 0; data != '\0'; index++) {
//					data = alt_up_sd_card_read(sd_fileh);
//					*pbuffer = data;
//					pbuffer = pbuffer + (sizeof(char));
//				}
//				*pbuffer = '\0';

				printf("Done!\n");
				printf("Closing File...");
				alt_up_sd_card_fclose(sd_fileh);
				printf("Done!\n");
				//printf("read buffer contains: ");
				//printf("%s\n", read_buffer);
				//OSQPost(message, (void*) &read_buffer);
			}
		}
	}
	return;
}

//todo taskCalibrate
/* Calibrates the pen, stores the calibrations in SRAM. Posts to the SDCard write task to save the data.*/
void taskCalibrate(void* pdata) {
	OSSemPend(configuresem, 0, &err);
	alt_u16 read_FIFO_used;
	alt_8 data_R8;
	unsigned p_error;
	alt_up_rs232_dev* rs232_dev;
	int index = 0;
	int i;
	int start = 0;
	int coord = 0;
	int current_address = -1;

	int reading = 0;

	for(i=0; i < CHAR_ARRAY_BUFF_SIZE; i++){
		array_8[i].pX = (alt_8*)((alt_u32*) SRAM_0_BASE) + sizeof(signed char)*(DTW_BASE + INPUT_SIZE*i);
		array_8[i].pY = (alt_8*)((alt_u32*) SRAM_0_BASE) + sizeof(signed char)*(DTW_BASE + X_COORD_BASE + INPUT_SIZE*i);
	}

	// open the RS232 UART port
	rs232_dev = alt_up_rs232_open_dev("/dev/rs232_0");
	if (rs232_dev == NULL)
		printf("Error: could not open RS232 UART\n");
	else
		printf("Opened RS232 UART device\n");

	alt_up_rs232_enable_read_interrupt(rs232_dev);

	printf("UART Read For Configuration\n");
	printf("Starting Calibration. Write character 0...\n\n");
	*SEVEN_SEG = 0xC;
	OSTimeDlyHMSM(0, 0, 3, 0);
	*SEVEN_SEG = 0;
	while (1) {

		// Read from UART
		read_FIFO_used = alt_up_rs232_get_used_space_in_read_FIFO(rs232_dev);
		if (read_FIFO_used > READ_FIFO_EMPTY) {
			//alt_printf("char stored in read_FIFO: %x\n", read_FIFO_used);
			alt_up_rs232_read_data(rs232_dev, &data_R8, &p_error);
			//alt_printf("read %c from RS232 UART\n", data_R8);

			if (reading == 0) {
				reading = 1;
				if (current_address == CHAR_ARRAY_BUFF_SIZE - 1) {
					current_address = 0;
				}
				else {
					current_address++;
				}
			 }

			if(coord == 0) {
				//alt_printf("read %c from RS232 UART\n", data_R8);
				*(array_8[current_address].pX + sizeof(unsigned char)*index) = (unsigned char)data_R8;
				printf("%c\n", *(array_8[current_address].pX + sizeof(unsigned char)*index));
				coord = 1;
				//index++;
			}
			else if(coord == 1){
				*(array_8[current_address].pY +  sizeof(unsigned char)*index) = (unsigned char)data_R8;
				index++;
				coord = 0;
			}
			else{
				printf("sync issue\n");
			}

		}
			else {
			//detect end of character values
			if (reading) {
				start++;
				//finished character value
				if (start == 2) {
					array_8[current_address].size = index + 1;
					if(current_address != CHAR_ARRAY_BUFF_SIZE - 1 ){
						printf("Finished reading character %d, write character %d...\n", current_address, current_address + 1);
						*SEVEN_SEG = current_address + 1;
						//printf("Finished reading character %d, write character %d...\n", current_address, current_address + 1);

					}
					else{
						printf("Finished reading character %d, Starting SDCard Write Task\n", current_address);
						OSSemPost(writesem);
						OSSemPend(configuresem, 0, &err);
					}

					index = 0;
					start = 0;
					reading = 0;
				}
			}
		}
		OSTimeDlyHMSM(0, 0, 0, 15);
	}
}

//todo WriteSDCARD
/* Checks for an SDCard, and writes the configuration data to the card. Pends on the calibration task.  */
void taskWriteSDCard(void* pdata) {
	short int sd_fileh;
	//char * read_buffer[SD_BUFFER_SIZE];
	int i;
	int j;
	alt_8 temp;
	bool b;
	while (1) {

		OSSemPend(writesem, 0, &err);
		printf("SD Card Write for configuration\n");

		alt_up_sd_card_dev *sd_card_dev = alt_up_sd_card_open_dev(
				ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);

		if (sd_card_dev != 0) {
			if (alt_up_sd_card_is_Present()) {
				if (alt_up_sd_card_is_FAT16())
					printf("Card is FAT16\n");
				else
					printf("Card is not FAT16\n");

				sd_fileh = alt_up_sd_card_fopen("file.txt", false);

				if (sd_fileh < 0)
					printf("Problem creating file. Error %i", sd_fileh);
				else {
					printf("SD Accessed Successfully, writing data...\n");

					for(i = 0; i < CHAR_ARRAY_BUFF_SIZE; i++){
						temp = (unsigned char) array_8[i].size;
						//temp = 1;
						alt_up_sd_card_write(sd_fileh, temp);
						//printf("%d\n", array_8[i].size);
						for(j = 0; j < array_8[i].size; j++){
							temp = (unsigned char)(*(array_8[i].pX + j*sizeof(signed char)));
							//temp = 1;
							//printf("%c\n", (unsigned char)(*(array_8[i].pX + j*sizeof(signed char))));
							printf("%c\n", temp);
							b = alt_up_sd_card_write(sd_fileh, temp);
							if(!b){
								printf("error\n");
							}
						}
						for(j = 0; j < array_8[i].size; j++){
							temp = (unsigned char)(*(array_8[i].pY + j*sizeof(signed char)));
							//temp = 1;
							//printf("%c\n", temp);
							alt_up_sd_card_write(sd_fileh, temp);
						}
					}
					alt_up_sd_card_write(sd_fileh, '\0');

					printf("Done!\n");
					printf("Closing File...");
					alt_up_sd_card_fclose(sd_fileh);
					printf("Done!\n\n");

					//OSSemPost(readsem);
				}
			}
		}
	}
}

//todo CharacterRead
/* Task to read a character from the UART */
void taskCharacterRead(void* pdata) {
	OSSemPend(uartsem, 0, &err);
	alt_u16 read_FIFO_used;
	alt_8 data_R8;
	unsigned p_error;
	alt_up_rs232_dev* rs232_dev;
	int buffer[BUFFER_SIZE];
//	char * pbuffer = buffer;
	int index = 0;
	int i;
	int start = 0;
	//int sram_ready = 0;
	int coord = 0;
	int current_address = -1;
	int reading = 0;
//	int msg[BUFFER_SIZE];
//	int val;
	int k;
	short int a;

	buffer[0] = -1;
	buffer[1] = -1;

	for(i=0; i < CHAR_ARRAY_BUFF_SIZE; i++){
		array[i].pX = ((alt_u32*) SRAM_0_BASE) + sizeof(long)*(DTW_BASE + INPUT_SIZE*i);
		array[i].pY = ((alt_u32*) SRAM_0_BASE) + sizeof(long)*(DTW_BASE + X_COORD_BASE + INPUT_SIZE*i);
	}

	// open the RS232 UART port
	rs232_dev = alt_up_rs232_open_dev("/dev/rs232_0");
	if (rs232_dev == NULL)
		printf("Error: could not open RS232 UART\n");
	else
		printf("Opened RS232 UART device\n");

	alt_up_rs232_enable_read_interrupt(rs232_dev);

	printf("UART Ready for input\n");
	while (1) {

		//character values read
		if((buffer[0] != -1)){

			//resource available
			//printf("\n*********************FINISHED READING A CHARACTER******************\n");
			if (OSSemAccept(dtw_sem) == 1) {

				pCharacter = &array[buffer[0]];
				printf("X VALUES for current char -----------------------------------------------\n");
				for(k=0; k<pCharacter->size ;k++){
					printf("%ld\n",*(((long*)pCharacter->pX)+k*sizeof(long)));
				}
				printf("Y VALUES for current char -----------------------------------------------\n");
				for(k=0; k < pCharacter->size ;k++){
					printf("%ld\n",*(((long*)pCharacter->pY)+k*sizeof(long)));
				}
				printf("\n*********************POSTED TO DTW******************\n");

				err = OSQPost(message, (void*) &buffer);

				//shift to next in queue
				if(buffer[1] != -1){
					buffer[0] = buffer[1];
					//
					if(buffer[1] != current_address){
						if(buffer[1]==CHAR_ARRAY_BUFF_SIZE - 1){
							buffer[1] = 0;
						}
						else{
							buffer[1]++;
						}
					}
					else{
						buffer[1] = -1;
					}
				}
				//nothing left in queue
				else{
					buffer[0] = -1;
				}
				//if(buffer[])
			}
		}

		// Read from UART
		read_FIFO_used = alt_up_rs232_get_used_space_in_read_FIFO(rs232_dev);
		if (read_FIFO_used > READ_FIFO_EMPTY) {
			//alt_printf("char stored in read_FIFO: %x\n", read_FIFO_used);
			alt_up_rs232_read_data(rs232_dev, &data_R8, &p_error);
			//alt_printf("read %c from RS232 UART\n", data_R8);

			if (reading == 0) {
				reading = 1;
				if (current_address == CHAR_ARRAY_BUFF_SIZE - 1) {
					current_address = 0;
				}
				else {
					current_address++;
				}
			 }

			if(coord == 0) {
				a = (signed char)data_R8;
				*(array[current_address].pX + sizeof(long)*index) = (long)(a*10);
				//*(array[current_address].pX + sizeof(long)*index) = (long)(((signed char)data_R8)*10);
				alt_printf("char stored in read_FIFO: %x\n", read_FIFO_used);
				printf("read x = %ld from RS232 UART\n", (long)a);
				coord = 1;
				//index++;
			}
			else
			if(coord == 1){
				a = (signed char)data_R8;
				*(array[current_address].pY + sizeof(long)*index) = (long)(a*10);
				//*(array[current_address].pY +  sizeof(long)*index) = (long)(((signed char)data_R8)*10);
				alt_printf("char stored in read_FIFO: %x\n", read_FIFO_used);
				printf("read y = %ld from RS232 UART\n", (long)a);
				index++;
				coord = 0;
			}
			else{
				printf("sync issue\n");
			}

		}
		else {
			//detect end of character values
			if (reading) {
				start++;
				//finished character value
				if (start == 2) {

					printf("\n*********************FINISHED READING A CHARACTER******************\n");
					array[current_address].size = index+1;

					//Check to see if there is a queue for dtw
					//no queue
					if(buffer[0] == -1 && buffer[1] == -1){
						buffer[0] = current_address;
					}
					//queue
					else if (buffer[0] != -1 && buffer[1] == -1){
						buffer[1] = buffer[0] + 1;
					}

					index = 0;
					start = 0;
					reading = 0;
					coord = 0;
				}
			}
		}
		OSTimeDlyHMSM(0, 0, 0, 15);
	}
}

//int er

//todo Template Match
/* Task matches templates. Synchronized with the character input task. Spawns two threads which run dtw on the x and y axis. Computes final score.
 * Algorithm ignores tasks based on groups with similar profiles if the score is too high.*/
void taskTemplateMatch(void* pdata) {
	char* msg;
	unsigned long best_match = INFIN;
	int match_group;
	int match = 0;
//	int x;
//	int y;
	int i;
	int j;
	unsigned long score;
//	int error_margin = 20000;
//	int bufferx[BUFFER_SIZE];
//	int buffery[BUFFER_SIZE];


	while (1) {
		msg = OSQPend(message, 0, &err);



		for(i=0; i < 1; i++){
			for(j=0; j < templates[i].size;j++){
				template_number = templates[i].t[j];
				OSSemPost(dtw_semx);
				OSSemPost(dtw_semy);
				//post dtwy
				OSSemPend(semx, 0, &err);
				OSSemPend(semy, 0, &err);
//				if(dtwx==0){
//					printf("dtw failed at %d x\n", template_number );
//				}
//				if(dtwy==0){
//					printf("dtw failed at %d y\n", template_number );
//				}
				score = (0.2*sqrt(((unsigned long)(dtwx * dtwx) + (unsigned long)(dtwy * dtwy)))) + (0.4*dtwx) + (0.4*dtwy);

				if(score == 0){
					printf("dtwx=%ld    dtwy=%ld\n", dtwx, dtwy);
				}
				printf("dtwx = %ld   dtwy= %ld\n", dtwx, dtwy);
				printf("template %d score= %ld\n\n",template_number, score);
				if(best_match > score){
					best_match = score;
					match = template_number;
				}
			}
		}
		*SEVEN_SEG = match;
		printf("best match is \'%d\' with score a of %ld\n", match, best_match);
		best_match = INFIN;
		score = INFIN;
		match=0;
		OSSemPost(dtw_sem);
//
//		//test template group
//		for (i = 0; i < 4; i++) {
//			template_number = templates[i].t[0];
//			//for (j = 0; j < templates[i].size; j++) {
//				//bufferx[0] =
//				//post dtwx
//				OSSemPost(dtw_semx);
//				OSSemPost(dtw_semy);
//				//post dtwy
//				OSSemPend(semx, 0, &err);
//				OSSemPend(semy, 0, &err);
//				if(dtwx==0){
//					printf("dtw failed at %d x\n", template_number );
//				}
//				if(dtwy==0){
//					printf("dtw failed at %d y\n", template_number );
//				}
//				score = sqrt(((unsigned long)(dtwx * dtwx) + (unsigned long)(dtwy * dtwy)));
//				if(score == 0){
//					printf("dtwx=%d    dtwy=%d\n", dtwx, dtwy);
//				}
//				printf("template %d score= %ld\n",template_number, score);
//				//try matching to 1
//				if (i == 0) {
//					best_match = score;
//					match_group = i;
//				}
//
////				//skip template group if it is greater than the margin of error
////				if(best_match >= error_margin) {
////					break;
////				}
//
//				//update score
//				if (best_match > score) {
//					best_match = score;
//					match_group = i;
//				}
//			//}
//		}
//		match = templates[match_group].t[0];
//		//look in the rest of the group
//		for(i = 1; i < templates[match_group].size; i++){
//			template_number = templates[match_group].t[i];
//
//			//post dtwx
//			//
//			//post dtwy
//			//pendx
//			//pendy
//			OSSemPost(dtw_semx);
//			OSSemPost(dtw_semy);
//			//post dtwy
//			OSSemPend(semx, 0, &err);
//			OSSemPend(semy, 0, &err);
//			if (dtwx == 0) {
//				printf("dtw failed at %d x\n", template_number);
//			}
//			if (dtwy == 0) {
//				printf("dtw failed at %d y\n", template_number);
//			}
//			//score = sqrt((dtwx * dtwx) + (dtwy * dtwy));
//			score = sqrt(((unsigned long)(dtwx * dtwx) + (unsigned long)(dtwy * dtwy)));
//			if(score == 0){
//				printf("dtwx=%d    dtwy=%d\n", dtwx, dtwy);
//			}
//			printf("template %d score= %ld\n",template_number, score);
//			if (best_match > score) {
//				best_match = score;
//				match = templates[match_group].t[i];
//			}
//		}
//		*SEVEN_SEG = match;
//		printf("best match is \'%d\' with score a of %ld\n", match, best_match);
//		OSSemPost(dtw_sem);

	}
}

/* Performs DTW on X coordinates */
void taskDTWX(void* pdata) {
	//clock_t t;
	//short int sd_fileh;
//	int index;
	//char* msg;
	//int * t1;
	//volatile alt_u32 * pSRAM = (alt_u32*) SRAM_0_BASE;
	//volatile alt_u32 * pSRAM2 = ((alt_u32*) SRAM_0_BASE) + sizeof(int)*INPUT_SIZE;

	//char buffer[SD_BUFFER_SIZE];// = "SD CARD test message\r\n\0";
	while (1) {
		//msg = OSQPend(message, 0, &err);
		OSSemPend(dtw_semx, 0, &err);
		//buffer = msg;
		//printf("DTW test x\n");

//		t1 = calloc(INPUT_SIZE, sizeof(int));
//		if (t1 == NULL) {
//			printf("1Error allocating memory\n"); //print an error message
//			return;
//		}

		//t = clock();
		//template[template_number].
		//pCharacter->s
		//pCharacter->
		//int answer = dtw((int*)pCharacter->pX, t1 , pCharacter->size, INPUT_SIZE);
		dtwx = dtw( (long*)template[template_number].pX, (long*)(pCharacter->pX), template[template_number].size,  pCharacter->size, 0);

		//t = clock() - t;
		//float time = ((float) t) / CLOCKS_PER_SEC;
		//printf("%d   time = %f", answer, time);

		OSSemPost(semx);
	}
}

/* Performs DTW on X coordinates */
void taskDTWY(void* pdata) {
	//clock_t t;
	//short int sd_fileh;
//	int index;
	//char* msg;
	//int * t1;
	//volatile alt_u32 * pSRAM = (alt_u32*) SRAM_0_BASE;
	//volatile alt_u32 * pSRAM2 = ((alt_u32*) SRAM_0_BASE) + sizeof(int)*INPUT_SIZE;

	//char buffer[SD_BUFFER_SIZE];// = "SD CARD test message\r\n\0";
	while (1) {
		//msg = OSQPend(message, 0, &err);
		OSSemPend(dtw_semy, 0, &err);
		//buffer = msg;
		//printf("DTW test y\n");

//		t1 = calloc(INPUT_SIZE, sizeof(int));
//		if (t1 == NULL) {
//			printf("1Error allocating memory\n"); //print an error message
//			return;
//		}

//		t = clock();
//		int answer = dtw((int*)pCharacter->pY, t1 , pCharacter->size, INPUT_SIZE);
		dtwy = dtw( (long*)template[template_number].pY, (long*)(pCharacter->pY), template[template_number].size,  pCharacter->size, 1);

//		t = clock() - t;
//		float time = ((float) t) / CLOCKS_PER_SEC;
//		printf("%d   time = %f", answer, time);

		OSSemPost(semy);
	}
}



/* The main function runs the accelerometer character recognition and calibration tests. */
int main(void) {
	modeselectsem = OSSemCreate(1);
	uartsem = OSSemCreate(0);
	configuresem = OSSemCreate(0);
	dtw_sem = OSSemCreate(1);

	message = OSQCreate(&messageArray, MSG_QUEUE_SIZE);
//	messageX = OSQCreate(&messageArrayX, MSG_QUEUE_SIZE);
//	messageY = OSQCreate(&messageArrayY, MSG_QUEUE_SIZE);
	dtw_semx = OSSemCreate(0);
	dtw_semy = OSSemCreate(0);
	semx = OSSemCreate(0);
	semy = OSSemCreate(0);

	writesem = OSSemCreate(0);
	readsem = OSSemCreate(0);
	//SWQ = OSQCreate(SWQ_stk, TASK_STACKSIZE);

	OSTaskCreateExt(taskModeSelect, NULL, (void *) &taskModeSelect_stk[TASK_STACKSIZE - 1],
			TASKMODESELECT_PRIORITY, TASKMODESELECT_PRIORITY, taskModeSelect_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskCalibrate, NULL, (void *) &taskCalibrate_stk[TASK_STACKSIZE - 1],
			TASKCALIBRATE_PRIORITY, TASKCALIBRATE_PRIORITY, taskCalibrate_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskCharacterRead, NULL, (void *) &taskCharacterRead_stk[TASK_STACKSIZE - 1],
			TASKCHARACTERREAD_PRIORITY, TASKCHARACTERREAD_PRIORITY, taskCharacterRead_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskTemplateMatch, NULL, (void *) &taskTemplateMatch_stk[TASK_STACKSIZE - 1],
			TASKTEMPLATEMATCH_PRIORITY, TASKTEMPLATEMATCH_PRIORITY, taskTemplateMatch_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskDTWX, NULL, (void *) &taskDTWX_stk[TASK_STACKSIZE - 1],
			TASKDTWX_PRIORITY, TASKDTWX_PRIORITY, taskDTWX_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskDTWY, NULL, (void *) &taskDTWY_stk[TASK_STACKSIZE - 1],
			TASKDTWY_PRIORITY, TASKDTWY_PRIORITY, taskDTWY_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskWriteSDCard, NULL, (void *) &taskWriteSDCard_stk[TASK_STACKSIZE - 1],
			TASKWRITESDCARD_PRIORITY, TASKWRITESDCARD_PRIORITY, taskWriteSDCard_stk, TASK_STACKSIZE, NULL, 0);
	OSStart();
	return 0;
}

/******************************************************************************
 *                                                                             *
 * License Agreement                                                           *
 *                                                                             *
 * Copyright (c) 2004 Altera Corporation, San Jose, California, USA.           *
 * All rights reserved.                                                        *
 *                                                                             *
 * Permission is hereby granted, free of charge, to any person obtaining a     *
 * copy of this software and associated documentation files (the "Software"),  *
 * to deal in the Software without restriction, including without limitation   *
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,    *
 * and/or sell copies of the Software, and to permit persons to whom the       *
 * Software is furnished to do so, subject to the following conditions:        *
 *                                                                             *
 * The above copyright notice and this permission notice shall be included in  *
 * all copies or substantial portions of the Software.                         *
 *                                                                             *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         *
 * DEALINGS IN THE SOFTWARE.                                                   *
 *                                                                             *
 * This agreement shall be governed in all respects by the laws of the State   *
 * of California and by the laws of the United States of America.              *
 * Altera does not recommend, suggest or require that this reference design    *
 * file be used in conjunction or combination with any other product.          *
 ******************************************************************************/
