
accelerometer_pen50sflash.elf:     file format elf32-littlenios2
accelerometer_pen50sflash.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x0001f25c memsz 0x000372b0 flags rwx
    LOAD off    0x00021000 vaddr 0x01400000 paddr 0x01400000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00021020 vaddr 0x01904020 paddr 0x01904020 align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01400000  01400000  00021000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  01904020  01904020  00021020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001cc98  00800000  00800000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a58  0081cc98  0081cc98  0001dc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b6c  0081d6f0  0081d6f0  0001e6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00018054  0081f25c  0081f25c  0002025c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000211c0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f30  00000000  00000000  000211e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002c67  00000000  00000000  00022118  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00036cce  00000000  00000000  00024d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a072  00000000  00000000  0005ba4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001f5e8  00000000  00000000  00065abf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002d40  00000000  00000000  000850a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002a48  00000000  00000000  00087de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e3ba  00000000  00000000  0008a830  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00098bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009b0  00000000  00000000  00098c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0009eeec  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0009eef2  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009eefe  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009eeff  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009ef00  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009ef04  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0009ef08  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0009ef0c  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0009ef17  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0009ef22  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0009ef2d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000053  00000000  00000000  0009ef3a  2**0
                  CONTENTS, READONLY
 29 .jdi          00005269  00000000  00000000  0009ef8d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007637e  00000000  00000000  000a41f6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01400000 l    d  .entry	00000000 .entry
01904020 l    d  .exceptions	00000000 .exceptions
00800000 l    d  .text	00000000 .text
0081cc98 l    d  .rodata	00000000 .rodata
0081d6f0 l    d  .rwdata	00000000 .rwdata
0081f25c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800034 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 dtw.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00802d38 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0081d6f0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
008044b4 l     F .text	00000058 __sprint_r
0081d3be l     O .rodata	00000010 blanks.3452
0081d3ae l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00806518 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00807f14 l     F .text	00000058 std
00808020 l     F .text	00000008 __fp_lock
00808028 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0081f1ac l     O .rwdata	00000004 charset
0081d3f0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0081d538 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080c31c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
0080c564 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080c5c4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080c6c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080c7e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0080c934 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0080ce14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081f1d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080d0b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0081f1d4 l     O .rwdata	00000004 lockid
0081f2dc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0081f1d8 l     O .rwdata	00000004 lockid
0081f2e4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0080eae8 l     F .text	00000044 OS_InitMisc
0080eb2c l     F .text	0000006c OS_InitRdyList
0080ec90 l     F .text	000000e0 OS_InitTCBList
0080ea0c l     F .text	000000dc OS_InitEventList
0080eb98 l     F .text	0000007c OS_InitTaskIdle
0080ec14 l     F .text	0000007c OS_InitTaskStat
0080ef04 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00810e24 l     F .text	00000110 OS_FlagTaskRdy
00810b7c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081e0ac l     O .rwdata	0000106c jtag_uart_0
0081f118 l     O .rwdata	0000002c character_lcd_0
0081f144 l     O .rwdata	0000002c rs232_0
0081f170 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
0081577c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00815a2c l     F .text	000002c8 altera_avalon_jtag_uart_irq
00815cf4 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0081650c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081b508 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081b6c4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0081b9c0 l     F .text	000000dc alt_file_locked
0081bc24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0081ca74 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0081cc28 l     F .text	00000040 alt_sim_halt
0081f25c g     O .bss	00000004 lcdmessage
0081f344 g     O .bss	00000004 aux_status_register
00809cd0 g     F .text	00000094 _mprec_log10
0081f226 g     O .rwdata	00000002 OSTaskNameSize
00809dbc g     F .text	00000088 __any_on
0080b498 g     F .text	00000070 _isatty_r
0081d510 g     O .rodata	00000028 __mprec_tinytens
0080c994 g     F .text	000000c8 alt_main
0080438c g     F .text	000000a0 _puts_r
0081f260 g     O .bss	00000004 t
00837020 g     O .bss	00000100 alt_irq
0081f264 g     O .bss	00000004 template_number
0080b508 g     F .text	00000078 _lseek_r
00811718 g     F .text	000000d0 OS_MemInit
008026b0 g     F .text	00000130 sqrt
00815658 g     F .text	00000064 OSTimeSet
00816684 g     F .text	00000034 alt_up_character_lcd_send_cmd
0080c184 g     F .text	00000088 __eqdf2
0081f268 g     O .bss	00000004 pCharacter
00817280 g     F .text	000001b0 Check_for_Master_Boot_Record
0080d664 g     F .text	000006b4 OSEventPendMulti
008372b0 g       *ABS*	00000000 __alt_heap_start
0081c22c g     F .text	00000020 OSTaskCreateHook
00802cb0 g     F .text	00000088 __floatdidf
0081b134 g     F .text	000001cc alt_up_sd_card_fclose
00804314 g     F .text	00000044 printf
0081f1fe g     O .rwdata	00000002 OSMboxEn
0080dd6c g     F .text	0000007c OSIntEnter
0080af64 g     F .text	00000068 __sseek
00807f7c g     F .text	000000a4 __sinit
0081c7f4 g     F .text	00000130 __swbuf_r
0081f3a4 g     O .bss	00002000 taskCalibrate_stk
0081f20e g     O .rwdata	00000002 OSQEn
00808c54 g     F .text	00000084 _setlocale_r
0080807c g     F .text	00000068 __sfmoreglue
0080d320 g     F .text	000000d0 __malloc_unlock
0081c288 g     F .text	0000001c OSTaskStatHook
00816d6c g     F .text	00000090 alt_up_rs232_read_fd
0081f2ec g     O .bss	00000001 OSLockNesting
0081f368 g     O .bss	00000004 current_sector_modified
0081f24c g     O .rwdata	00000002 OSDataSize
0081f2ed g     O .bss	00000001 OSRunning
0081f26c g     O .bss	00000004 dtw_semy
0080974c g     F .text	000000e0 memmove
0081c2c0 g     F .text	0000001c OSInitHookBegin
008001d0 g     F .text	00000354 dtw
0081f270 g     O .bss	00000004 dtwy
0081f244 g     O .rwdata	00000002 OSTmrSize
0080806c g     F .text	00000010 _cleanup
00809e44 g     F .text	000000bc _Balloc
00819cf0 g     F .text	000000c8 alt_up_sd_card_is_Present
00816f98 g     F .text	00000050 Save_Modified_Sector
0081f2f0 g     O .bss	00000004 OSIdleCtr
0081f274 g     O .bss	00000004 semy
0080c294 g     F .text	00000088 __gtdf2
0081bef8 g       .text	00000000 OSStartTsk
00804304 g     F .text	00000010 __errno
00816608 g     F .text	0000007c get_DDRAM_addr
0080f238 g     F .text	000002e0 OS_TCBInit
01400000 g     F .entry	00000000 __reset
0081f360 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
0081f24a g     O .rwdata	00000002 OSTmrWheelTblSize
0081f1ea g     O .rwdata	00000002 OSEventSize
0081f2f4 g     O .bss	00000001 OSPrioHighRdy
0080b424 g     F .text	00000074 _fstat_r
0081c24c g     F .text	00000020 OSTaskDelHook
0081f2c8 g     O .bss	00000004 errno
0081bed8 g       .text	00000000 OSStartHighRdy
00813e2c g     F .text	00000200 OSTaskCreateExt
00810698 g     F .text	00000068 OSFlagPendGetFlagsRdy
0081f22a g     O .rwdata	00000002 OSTaskStatStkSize
0080f6a4 g     F .text	00000334 OSFlagAccept
00811e50 g     F .text	000000c8 OSQFlush
008117e8 g     F .text	00000154 OSQAccept
0081f2d4 g     O .bss	00000004 alt_argv
0082719c g       *ABS*	00000000 _gp
0081a2b0 g     F .text	000003a8 alt_up_sd_card_fopen
00819e2c g     F .text	000000d4 alt_up_sd_card_find_first
0080160c g     F .text	000004ec taskCharacterRead
00813c58 g     F .text	000001d4 OSTaskCreate
0081f354 g     O .bss	00000004 command_argument_register
008136e4 g     F .text	00000574 OSTaskChangePrio
0081f2e8 g     O .bss	00000004 alt_heapsem
0080f518 g     F .text	0000018c OSDebugInit
0081402c g     F .text	0000040c OSTaskDel
0081df2c g     O .rwdata	00000180 alt_fd_list
0081f278 g     O .bss	00000004 readsem
00833894 g     O .bss	00000370 OSFlagTbl
00800b10 g     F .text	00000500 AverageTemplatePattern
0080e7e8 g     F .text	000000b8 OS_EventTaskRemove
00819520 g     F .text	0000012c find_first_empty_record_in_root_directory
0081b630 g     F .text	00000094 alt_find_dev
008096ac g     F .text	000000a0 memcpy
0081f214 g     O .rwdata	00000002 OSRdyTblSize
0081681c g     F .text	0000004c alt_up_character_lcd_write_fd
00808060 g     F .text	0000000c _cleanup_r
008038e0 g     F .text	000000f8 __floatsidf
0081b788 g     F .text	00000078 alt_io_redirect
00803858 g     F .text	00000088 __ltdf2
00801398 g     F .text	00000274 taskWriteSDCard
0081cc98 g       *ABS*	00000000 __DTOR_END__
00816cf8 g     F .text	00000074 alt_up_rs232_read_data
0080442c g     F .text	00000014 puts
0080d3f0 g     F .text	00000130 OSEventNameGet
0081f1f8 g     O .rwdata	00000002 OSFlagMax
00819130 g     F .text	000001a4 find_first_empty_cluster
00809c20 g     F .text	000000b0 __ratio
00819c2c g     F .text	000000c4 alt_up_sd_card_open_dev
0080dde8 g     F .text	00000100 OSIntExit
0081f232 g     O .rwdata	00000002 OSTCBSize
0081f2f5 g     O .bss	00000001 OSPrioCur
00815f70 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00804358 g     F .text	00000034 _printf_r
01904000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0080c458 g     F .text	00000008 __udivsi3
0081f27c g     O .bss	00000004 loadsdcardsem
0080c724 g     F .text	000000c0 isatty
0081f218 g     O .rwdata	00000002 OSStkWidth
0081f280 g     O .bss	00000004 writesem
0081d420 g     O .rodata	000000c8 __mprec_tens
0081f20c g     O .rwdata	00000002 OSPtrSize
00808c30 g     F .text	00000008 __locale_charset
0081f1ec g     O .rwdata	00000002 OSEventTblSize
00803cc4 g     F .text	000000a4 __fixunsdfsi
0081be4c g       .text	00000000 OSCtxSw
0081f2bc g     O .bss	00000004 __malloc_top_pad
0081f2f8 g     O .bss	00000004 OSTCBList
0081f2cc g     O .bss	00000004 alt_fd_list_lock
0081f1a8 g     O .rwdata	00000004 __mb_cur_max
00808c38 g     F .text	0000000c _localeconv_r
0080a53c g     F .text	0000003c __i2b
00808614 g     F .text	0000049c __sfvwrite_r
0081840c g     F .text	000000c0 get_dir_divider_location
00833c04 g     O .bss	00000c30 OSMemTbl
0081f2fc g     O .bss	00000001 OSTickStepState
0080aeec g     F .text	00000070 _sbrk_r
008180ac g     F .text	000000d0 filename_to_upper_case
0081f210 g     O .rwdata	00000002 OSQMax
0081a658 g     F .text	00000090 alt_up_sd_card_set_attributes
00834834 g     O .bss	00000800 OSTaskStatStk
0081f284 g     O .bss	00000004 configuresem
00811300 g     F .text	0000010c OSMemNameGet
00817430 g     F .text	00000284 Read_File_Record_At_Offset
0081f1f0 g     O .rwdata	00000002 OSFlagEn
0080b580 g     F .text	00000078 _read_r
0081f236 g     O .rwdata	00000002 OSTimeTickHookEn
00810f34 g     F .text	000000ac OS_FlagUnlink
008123b4 g     F .text	00000180 OSQPost
0081daf0 g     O .rwdata	0000000c __lc_ctype
0081f1c8 g     O .rwdata	00000004 alt_max_fd
00816c60 g     F .text	00000050 alt_up_rs232_check_parity
0080edc4 g     F .text	0000006c OS_MemCopy
0080ee30 g     F .text	000000d4 OS_Sched
0080407c g     F .text	00000138 __unpack_d
00818ccc g     F .text	00000464 find_file_in_directory
0080b300 g     F .text	00000110 _fclose_r
008111fc g     F .text	00000104 OSMemGet
00814760 g     F .text	000001c4 OSTaskNameSet
00807ee0 g     F .text	00000034 fflush
0081f2c0 g     O .bss	00000004 __malloc_max_sbrked_mem
0081f300 g     O .bss	00000004 OSCtxSwCtr
0081c2a4 g     F .text	0000001c OSTimeTickHook
0081b800 g     F .text	000001c0 alt_irq_register
0081f1fa g     O .rwdata	00000002 OSFlagNameSize
0081f288 g     O .bss	00000004 uartsem
0080e8a0 g     F .text	00000104 OS_EventTaskRemoveMulti
00819db8 g     F .text	00000074 alt_up_sd_card_is_FAT16
008031c8 g     F .text	00000074 __adddf3
0080e694 g     F .text	00000154 OS_EventTaskWaitMulti
00809b00 g     F .text	00000120 __b2d
0081f212 g     O .rwdata	00000002 OSQSize
0080bbd4 g     F .text	000005b0 __umoddi3
0080c844 g     F .text	000000f0 lseek
00812f90 g     F .text	0000027c OSSemPend
0081f19c g     O .rwdata	00000004 __fdlib_version
0081f1a4 g     O .rwdata	00000004 _global_impure_ptr
008187b8 g     F .text	00000514 get_home_directory_cluster_for_file
0080a8b8 g     F .text	000005f4 _realloc_r
0081f1fc g     O .rwdata	00000002 OSLowestPrio
008213a4 g     O .bss	00002000 taskCharacterRead_stk
008372b0 g       *ABS*	00000000 __bss_end
0081c314 g     F .text	00000020 OSTCBInitHook
0081f242 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0081bd1c g     F .text	00000110 alt_tick
0080b5f8 g     F .text	000005dc __udivdi3
0081f1e4 g     O .rwdata	00000002 OSEventEn
0081d4e8 g     O .rodata	00000028 __mprec_bigtens
0080a798 g     F .text	00000120 __s2b
0081f23e g     O .rwdata	00000002 OSTmrCfgNameSize
00803ab0 g     F .text	00000194 __floatunsidf
00809a20 g     F .text	00000060 __mcmp
0081f36c g     O .bss	00000004 current_sector_index
0081f28c g     O .bss	00000004 message
00808048 g     F .text	00000018 __fp_lock_all
00800038 g     F .text	0000005c min_three
00810d40 g     F .text	000000e4 OS_FlagInit
0080011c g     F .text	000000b4 dist
008233a4 g     O .bss	00002000 taskModeSelect_stk
0081bc84 g     F .text	00000098 alt_alarm_stop
008253a4 g     O .bss	00002000 taskTemplateMatch_stk
0081719c g     F .text	000000e4 mark_cluster
0081f220 g     O .rwdata	00000002 OSTaskIdleStkSize
0081f370 g     O .bss	00000004 alt_irq_active
00812b1c g     F .text	000000c0 OSSemAccept
0081152c g     F .text	000000f0 OSMemPut
00810fe0 g     F .text	0000021c OSMemCreate
0081f304 g     O .bss	00000004 OSIdleCtrMax
019040ec g     F .exceptions	000000d4 alt_irq_handler
0081df04 g     O .rwdata	00000028 alt_dev_null
0081f234 g     O .rwdata	00000002 OSTicksPerSec
0081964c g     F .text	000001b8 convert_filename_to_name_extension
00816b04 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0081be4c g       .text	00000000 OSIntCtxSw
0081f290 g     O .bss	00000004 dtwx
008098ec g     F .text	00000070 __hi0bits
0081f340 g     O .bss	00000004 is_sd_card_formated_as_FAT16
008039d8 g     F .text	000000d8 __fixdfsi
00800744 g     F .text	000003cc taskLoadSDCard
008192d4 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0081f308 g     O .bss	00000004 OSTCBFreeList
0081320c g     F .text	0000017c OSSemPendAbort
0081f294 g     O .bss	00000004 dtw_sem
0081f1c0 g     O .rwdata	00000008 alt_dev_list
0080cf90 g     F .text	00000120 write
0081c70c g     F .text	000000e8 _putc_r
0081f364 g     O .bss	00000004 device_pointer
0081f238 g     O .rwdata	00000002 OSVersionNbr
0080c5f0 g     F .text	000000d4 fstat
00816dfc g     F .text	00000094 alt_up_rs232_write_fd
0081f1e0 g     O .rwdata	00000004 OSEndiannessTest
0080a678 g     F .text	00000120 __pow5mult
0081f2b0 g     O .bss	00000004 __nlocale_changed
0080c460 g     F .text	00000008 __umodsi3
0081f1f2 g     O .rwdata	00000002 OSFlagGrpSize
008372b0 g       *ABS*	00000000 end
008158fc g     F .text	00000130 altera_avalon_jtag_uart_init
0080f0a8 g     F .text	000000c8 OS_TaskStat
0081cc94 g       *ABS*	00000000 __CTOR_LIST__
0081f298 g     O .bss	00000004 dtw_semx
01000000 g       *ABS*	00000000 __alt_stack_pointer
008273a4 g     O .bss	00000190 lcdArray
00816580 g     F .text	00000088 alt_avalon_timer_sc_init
00803c44 g     F .text	00000080 __clzsi2
0081f29c g     O .bss	00000004 loadsem
00816230 g     F .text	000002dc altera_avalon_jtag_uart_write
00827534 g     O .bss	00002000 taskDTWX_stk
00807f6c g     F .text	00000004 __sfp_lock_acquire
008095c8 g     F .text	000000e4 memchr
0080ed70 g     F .text	00000054 OS_MemClr
0081672c g     F .text	00000078 alt_up_character_lcd_write
0080450c g     F .text	00001eac ___vfprintf_internal_r
0081bf1c g     F .text	00000310 OSTaskStkInit
00808300 g     F .text	00000314 _free_r
0080ca5c g     F .text	00000258 alt_printf
0080e3f0 g     F .text	00000194 OS_EventTaskRdy
0081ca78 g     F .text	000001b0 __call_exitprocs
0081f30c g     O .bss	00000001 OSCPUUsage
0081f2b4 g     O .bss	00000004 __mlocale_changed
0081f1b4 g     O .rwdata	00000004 __malloc_sbrk_base
00800000 g     F .text	00000038 _start
0081f374 g     O .bss	00000004 _alt_tick_rate
00811f18 g     F .text	00000320 OSQPend
00815124 g     F .text	0000014c OSTimeDly
0080a208 g     F .text	0000014c __lshift
0081f378 g     O .bss	00000004 _alt_nticks
0080ccf4 g     F .text	00000120 read
008156f0 g     F .text	0000008c alt_sys_init
00816990 g     F .text	000000b0 alt_up_character_lcd_shift_display
0081c940 g     F .text	00000134 __register_exitproc
0081f30d g     O .bss	00000001 OSTaskCtr
00829534 g     O .bss	00002000 taskLcdPrint_stk
00816c20 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
00815270 g     F .text	00000174 OSTimeDlyHMSM
0080a354 g     F .text	000001e8 __multiply
00816a40 g     F .text	00000090 alt_up_character_lcd_erase_pos
00815e08 g     F .text	00000074 altera_avalon_jtag_uart_close
0081f37c g     O .bss	00000028 __malloc_current_mallinfo
0081f1e6 g     O .rwdata	00000002 OSEventMax
00809f00 g     F .text	0000017c __d2b
00813388 g     F .text	00000128 OSSemPost
0081f33c g     O .bss	00000004 initialized
0080df74 g     F .text	000000e4 OSSchedUnlock
008157b4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0081c454 g     F .text	000000f4 alt_get_fd
0081f310 g     O .bss	00000004 OSMemFreeList
0080e0c8 g     F .text	000000ac OSStatInit
00836ab8 g     O .bss	00000014 search_data
00810aa8 g     F .text	000000d4 OSFlagQuery
008041b4 g     F .text	000000c8 __fpcmp_parts_d
0081f21c g     O .rwdata	00000002 OSTaskCreateExtEn
0080b290 g     F .text	00000070 _close_r
008000d8 g     F .text	00000044 max
0082b534 g     O .bss	00002000 taskWriteSDCard_stk
0081c594 g     F .text	00000074 memcmp
0080e3d4 g     F .text	0000001c OS_Dummy
00815864 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008372b0 g       *ABS*	00000000 __alt_stack_base
008158ac g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008063dc g     F .text	0000013c __swsetup_r
00835034 g     O .bss	000001e0 OSQTbl
00803600 g     F .text	00000258 __divdf3
008080e4 g     F .text	000000f0 __sfp
00836acc g     O .bss	00000054 boot_sector_data
008006b0 g     F .text	00000094 taskLcdPrint
00809d64 g     F .text	00000058 __copybits
0081dafc g     O .rwdata	00000408 __malloc_av_
00807f78 g     F .text	00000004 __sinit_lock_release
0081f314 g     O .bss	00000004 OSTCBHighRdy
0080323c g     F .text	000003c4 __muldf3
0080b048 g     F .text	00000060 __sread
0081f318 g     O .bss	00000004 OSQFreeList
00816b8c g     F .text	00000058 alt_up_rs232_disable_read_interrupt
0081c334 g     F .text	00000120 alt_find_file
0081b454 g     F .text	000000b4 alt_dev_llist_insert
0080d218 g     F .text	00000108 __malloc_lock
0080ced4 g     F .text	000000bc sbrk
0082d534 g     O .bss	00002000 taskLoadSDCard_stk
0080d520 g     F .text	00000144 OSEventNameSet
00807ce4 g     F .text	000001fc _fflush_r
0080b1dc g     F .text	000000b4 _calloc_r
0081f31c g     O .bss	00000001 OSRdyGrp
0081f25c g       *ABS*	00000000 __bss_start
0080982c g     F .text	00000098 memset
0081f2a0 g     O .bss	00000001 err
0080238c g     F .text	00000324 main
0081f2d8 g     O .bss	00000004 alt_envp
0081f2c4 g     O .bss	00000004 __malloc_max_total_mem
0081580c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0081c924 g     F .text	0000001c __swbuf
0082f534 g     O .bss	00000020 templates
0081d564 g     O .rodata	00000100 OSUnMapTbl
0081a6e8 g     F .text	0000008c alt_up_sd_card_get_attributes
0081f216 g     O .rwdata	00000002 OSSemEn
00816ed0 g     F .text	000000c8 Write_Sector_Data
0081ab10 g     F .text	00000624 alt_up_sd_card_write
008168e0 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00810700 g     F .text	000003a8 OSFlagPost
0080af5c g     F .text	00000008 __sclose
00802ad8 g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
0080b410 g     F .text	00000014 fclose
0080e584 g     F .text	00000110 OS_EventTaskWait
0080f170 g     F .text	000000c8 OS_TaskStatStkChk
00837120 g     O .bss	00000190 _atexit0
00814438 g     F .text	00000170 OSTaskDelReq
00806730 g     F .text	000015b4 _dtoa_r
00808e88 g     F .text	00000740 _malloc_r
0081f1cc g     O .rwdata	00000004 alt_errno
0080e058 g     F .text	00000070 OSStart
0080d1bc g     F .text	0000005c __env_unlock
00808b78 g     F .text	000000b8 _fwalk
00814924 g     F .text	00000218 OSTaskResume
0081161c g     F .text	000000fc OSMemQuery
0081f228 g     O .rwdata	00000002 OSTaskStatEn
0081f202 g     O .rwdata	00000002 OSMemMax
00812534 g     F .text	00000188 OSQPostFront
0081c608 g     F .text	00000104 putc
0080c398 g     F .text	00000060 __divsi3
0081f31d g     O .bss	00000003 OSRdyTbl
0081f1dc g     O .rwdata	00000002 OSDebugEn
0081d234 g     O .rodata	00000014 __thenan_df
008166ec g     F .text	00000040 alt_up_character_lcd_open_dev
008081d4 g     F .text	0000012c _malloc_trim_r
0081cc98 g       *ABS*	00000000 __CTOR_END__
0081f1f4 g     O .rwdata	00000002 OSFlagNodeSize
0081f348 g     O .bss	00000004 status_register
0081f23c g     O .rwdata	00000002 OSTmrCfgMax
008166b8 g     F .text	00000034 alt_up_character_lcd_init
0080b0a8 g     F .text	000000bc strcmp
0081f350 g     O .bss	00000004 command_register
0081193c g     F .text	00000214 OSQCreate
008145a8 g     F .text	000001b8 OSTaskNameGet
008126bc g     F .text	00000234 OSQPostOpt
0080e174 g     F .text	00000240 OSTimeTick
0081f224 g     O .rwdata	00000002 OSTaskMax
0081cc98 g       *ABS*	00000000 __DTOR_LIST__
00812bdc g     F .text	00000114 OSSemCreate
0081f248 g     O .rwdata	00000002 OSTmrWheelSize
00800094 g     F .text	00000044 min
00816e90 g     F .text	00000040 alt_up_rs232_open_dev
0080c20c g     F .text	00000088 __nedf2
00802bf4 g     F .text	000000bc __fixunsdfdi
0081f21e g     O .rwdata	00000002 OSTaskDelEn
01880000 g       *ABS*	00000000 __alt_mem_sram_0
008134b0 g     F .text	00000130 OSSemQuery
00811b50 g     F .text	00000300 OSQDel
00812238 g     F .text	0000017c OSQPendAbort
008156bc g     F .text	00000034 alt_irq_init
0080ce74 g     F .text	00000060 alt_release_fd
008170e4 g     F .text	000000b8 get_cluster_flag
00816ad0 g     F .text	00000034 alt_up_character_lcd_cursor_off
0081d248 g     O .rodata	00000100 __clz_tab
0082f554 g     O .bss	000000c0 template
008176b4 g     F .text	000002b8 Write_File_Record_At_Offset
0081f2b8 g     O .bss	00000004 _PathLocale
00802b78 g     F .text	0000007c __fixdfdi
01400000 g       *ABS*	00000000 __alt_mem_generic_tristate_controller_0
0081c548 g     F .text	00000014 atexit
0080b164 g     F .text	00000078 _write_r
0081f2a4 g     O .bss	00000004 semx
0080dee8 g     F .text	0000008c OSSchedLock
00808cd8 g     F .text	0000001c setlocale
0080f9d8 g     F .text	0000013c OSFlagCreate
0081796c g     F .text	00000648 Check_for_DOS_FAT
00819804 g     F .text	000002d4 create_file
0081f1a0 g     O .rwdata	00000004 _impure_ptr
0081f34c g     O .bss	00000004 CSD_register_w0
0081f2d0 g     O .bss	00000004 alt_argc
0081b5cc g     F .text	00000064 _do_dtors
0081f1ee g     O .rwdata	00000002 OSEventMultiEn
0082f614 g     O .bss	00000030 array
0080fb14 g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
0081f320 g     O .bss	00000004 OSEventFreeList
01904020 g       .exceptions	00000000 alt_irq_entry
00809a80 g     F .text	00000080 __ulp
0080aeac g     F .text	00000040 __isinfd
00810054 g     F .text	00000644 OSFlagPend
0081f23a g     O .rwdata	00000002 OSTmrEn
00808030 g     F .text	00000018 __fp_unlock_all
00802274 g     F .text	00000088 taskDTWX
0081f1b8 g     O .rwdata	00000008 alt_fs_list
0081817c g     F .text	00000290 check_file_name_for_FAT16_compliance
0080ef74 g     F .text	00000080 OS_StrCopy
0081f358 g     O .bss	00000004 buffer_memory
00816b38 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0082f644 g     O .bss	00002000 SWQ_stk
00816cb0 g     F .text	00000048 alt_up_rs232_write_data
0081f204 g     O .rwdata	00000002 OSMemNameSize
0081f2a8 g     O .bss	00000004 modeselectsem
0081c2dc g     F .text	0000001c OSInitHookEnd
0081f230 g     O .rwdata	00000002 OSTCBPrioTblMax
00808c44 g     F .text	00000010 localeconv
008027e0 g     F .text	000002c8 __ieee754_sqrt
0081f22c g     O .rwdata	00000002 OSTaskStatStkChkEn
0081f200 g     O .rwdata	00000002 OSMemEn
0081f35c g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
0081f20a g     O .rwdata	00000002 OSMutexEn
0081f25c g       *ABS*	00000000 _edata
00801010 g     F .text	00000388 taskCalibrate
008372b0 g       *ABS*	00000000 _end
00836b20 g     O .bss	00000500 active_files
0081f324 g     O .bss	00000001 OSIntNesting
00819ad8 g     F .text	00000154 copy_file_record_name_to_string
00815e7c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
008153e4 g     F .text	00000210 OSTimeDlyResume
00817fb4 g     F .text	000000f8 Look_for_FAT16
0080ff00 g     F .text	00000154 OSFlagNameSet
00831644 g     O .bss	00002000 taskDTWY_stk
00814b3c g     F .text	000001fc OSTaskStkChk
0081f206 g     O .rwdata	00000002 OSMemSize
0080afcc g     F .text	0000007c __swrite
0081f1b0 g     O .rwdata	00000004 __malloc_trim_threshold
0081be2c g     F .text	00000020 altera_nios2_qsys_irq_init
0081f328 g     O .bss	00000004 OSTCBCur
0081c55c g     F .text	00000038 exit
00819f00 g     F .text	000003b0 alt_up_sd_card_find_next
0081f208 g     O .rwdata	00000002 OSMemTblSize
00808ab0 g     F .text	000000c8 _fwalk_reent
0081f2ac g     O .bss	00000004 SWQ
0080a07c g     F .text	0000018c __mdiff
0080c3f8 g     F .text	00000060 __modsi3
00800524 g     F .text	0000018c taskModeSelect
00816fe8 g     F .text	000000fc Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
01904020 g     F .exceptions	00000000 alt_exception
00807f70 g     F .text	00000004 __sfp_lock_release
0080dd18 g     F .text	00000054 OSInit
00801f0c g     F .text	00000368 AverageCharReadPattern
00814f64 g     F .text	00000144 OSTaskQuery
008167a4 g     F .text	00000078 alt_up_character_lcd_string
00812a70 g     F .text	000000ac OS_QInit
0080eff4 g     F .text	00000058 OS_StrLen
0081140c g     F .text	00000120 OSMemNameSet
0081f222 g     O .rwdata	00000002 OSTaskProfileEn
0081f32c g     O .bss	00000004 OSTime
00835214 g     O .bss	00000800 OSTaskIdleStk
0081cc68 g     F .text	0000002c _exit
00802aa8 g     F .text	00000030 __isnand
0081b300 g     F .text	00000154 alt_alarm_start
0080fdbc g     F .text	00000144 OSFlagNameGet
008155f4 g     F .text	00000064 OSTimeGet
00802ae0 g     F .text	00000098 __muldi3
0081a774 g     F .text	0000039c alt_up_sd_card_read
00808cf4 g     F .text	00000194 __smakebuf_r
00801af8 g     F .text	00000414 taskTemplateMatch
00804440 g     F .text	00000074 strlen
0081c26c g     F .text	0000001c OSTaskSwHook
0081ba9c g     F .text	00000188 open
00835a14 g     O .bss	00000b40 OSEventTbl
0080427c g     F .text	00000088 __gedf2
0080ccb4 g     F .text	00000040 alt_putchar
00833644 g     O .bss	00000190 messageArray
00836554 g     O .bss	00000510 OSTCBTbl
008135e0 g     F .text	00000104 OSSemSet
00816868 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0081f250 g     O .rwdata	00000004 alt_priority_mask
00812cf0 g     F .text	000002a0 OSSemDel
0081f330 g     O .bss	00000004 OSFlagFreeList
0081f1e8 g     O .rwdata	00000002 OSEventNameSize
008063b8 g     F .text	00000024 __vfprintf_internal
0081f334 g     O .bss	00000001 OSStatRdy
00836a64 g     O .bss	00000054 OSTCBPrioTbl
0080d110 g     F .text	000000ac __env_lock
0081f22e g     O .rwdata	00000002 OSTaskSwHookEn
008022fc g     F .text	00000090 taskDTWY
00803148 g     F .text	00000080 __subdf3
0080995c g     F .text	000000c4 __lo0bits
008337d4 g     O .bss	000000c0 array_8
0081f254 g     O .rwdata	00000008 alt_alarm_list
0081f1f6 g     O .rwdata	00000002 OSFlagWidth
0081b568 g     F .text	00000064 _do_ctors
00816be4 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0080c468 g     F .text	000000fc close
0081f2e0 g     O .bss	00000004 alt_envsem
0081f338 g     O .bss	00000004 OSIdleCtrRun
0080e3b4 g     F .text	00000020 OSVersion
0081f240 g     O .rwdata	00000002 OSTmrCfgWheelSize
008150a8 g     F .text	0000007c OS_TaskStkClr
00803d68 g     F .text	00000314 __pack_d
0081f21a g     O .rwdata	00000002 OSTaskCreateEn
008184cc g     F .text	000002ec match_file_record_to_name_ext
0080e9a4 g     F .text	00000068 OS_EventWaitListInit
0081c2f8 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00807f74 g     F .text	00000004 __sinit_lock_acquire
0080a578 g     F .text	00000100 __multadd
00814d38 g     F .text	0000022c OSTaskSuspend
008098c4 g     F .text	00000028 _Bfree
0080f04c g     F .text	0000005c OS_TaskIdle
0081f246 g     O .rwdata	00000002 OSTmrTblSize
008128f0 g     F .text	00000180 OSQQuery



Disassembly of section .exceptions:

01904020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1904020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1904024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1904028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 190402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1904030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1904034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1904038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 190403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1904040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1904044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1904048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 190404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1904050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1904054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1904058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 190405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1904060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1904064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1904068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 190406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1904070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1904074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1904078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 190407c:	10000326 	beq	r2,zero,190408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1904080:	20000226 	beq	r4,zero,190408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1904084:	19040ec0 	call	19040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1904088:	00000306 	br	1904098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 190408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1904090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1904094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1904098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 190409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 19040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 19040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 19040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 19040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 19040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 19040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 19040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 19040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 19040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 19040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 19040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 19040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 19040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 19040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 19040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 19040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 19040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 19040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 19040e8:	ef80083a 	eret

019040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 19040ec:	defff904 	addi	sp,sp,-28
 19040f0:	dfc00615 	stw	ra,24(sp)
 19040f4:	df000515 	stw	fp,20(sp)
 19040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 19040fc:	080dd6c0 	call	80dd6c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1904100:	0005313a 	rdctl	r2,ipending
 1904104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1904108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 190410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1904110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1904114:	00800044 	movi	r2,1
 1904118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 190411c:	e0ffff17 	ldw	r3,-4(fp)
 1904120:	e0bffe17 	ldw	r2,-8(fp)
 1904124:	1884703a 	and	r2,r3,r2
 1904128:	1005003a 	cmpeq	r2,r2,zero
 190412c:	1000171e 	bne	r2,zero,190418c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1904130:	e0bffd17 	ldw	r2,-12(fp)
 1904134:	00c020f4 	movhi	r3,131
 1904138:	18dc0804 	addi	r3,r3,28704
 190413c:	100490fa 	slli	r2,r2,3
 1904140:	10c5883a 	add	r2,r2,r3
 1904144:	11800017 	ldw	r6,0(r2)
 1904148:	e0bffd17 	ldw	r2,-12(fp)
 190414c:	00c020f4 	movhi	r3,131
 1904150:	18dc0804 	addi	r3,r3,28704
 1904154:	100490fa 	slli	r2,r2,3
 1904158:	10c5883a 	add	r2,r2,r3
 190415c:	10800104 	addi	r2,r2,4
 1904160:	11000017 	ldw	r4,0(r2)
 1904164:	e17ffd17 	ldw	r5,-12(fp)
 1904168:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 190416c:	0005313a 	rdctl	r2,ipending
 1904170:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1904174:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1904178:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 190417c:	e0bfff17 	ldw	r2,-4(fp)
 1904180:	1004c03a 	cmpne	r2,r2,zero
 1904184:	103fe21e 	bne	r2,zero,1904110 <alt_irq_handler+0x24>
 1904188:	00000706 	br	19041a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 190418c:	e0bffe17 	ldw	r2,-8(fp)
 1904190:	1085883a 	add	r2,r2,r2
 1904194:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1904198:	e0bffd17 	ldw	r2,-12(fp)
 190419c:	10800044 	addi	r2,r2,1
 19041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19041a4:	003fdd06 	br	190411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 19041a8:	080dde80 	call	80dde8 <OSIntExit>
}
 19041ac:	e037883a 	mov	sp,fp
 19041b0:	dfc00117 	ldw	ra,4(sp)
 19041b4:	df000017 	ldw	fp,0(sp)
 19041b8:	dec00204 	addi	sp,sp,8
 19041bc:	f800283a 	ret

Disassembly of section .text:

00800000 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800000:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800004:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  800008:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  80000c:	d69c6714 	ori	gp,gp,29084
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800010:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800014:	10bc9714 	ori	r2,r2,62044

    movhi r3, %hi(__bss_end)
  800018:	00c020f4 	movhi	r3,131
    ori r3, r3, %lo(__bss_end)
  80001c:	18dcac14 	ori	r3,r3,29360

    beq r2, r3, 1f
  800020:	10c00326 	beq	r2,r3,800030 <_start+0x30>

0:
    stw zero, (r2)
  800024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80002c:	10fffd36 	bltu	r2,r3,800024 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800030:	080c9940 	call	80c994 <alt_main>

00800034 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800034:	003fff06 	br	800034 <alt_after_alt_main>

00800038 <min_three>:
int min(int a, int b);
int max(int a, int b);
long dist(signed long x, signed long y);

/* Returns minimum of three numbers */
long min_three(long a, long b, long c){
  800038:	defffb04 	addi	sp,sp,-20
  80003c:	df000415 	stw	fp,16(sp)
  800040:	df000404 	addi	fp,sp,16
  800044:	e13ffd15 	stw	r4,-12(fp)
  800048:	e17ffe15 	stw	r5,-8(fp)
  80004c:	e1bfff15 	stw	r6,-4(fp)
	long min = a;
  800050:	e0bffd17 	ldw	r2,-12(fp)
  800054:	e0bffc15 	stw	r2,-16(fp)
	if (min > b) min = b;
  800058:	e0fffc17 	ldw	r3,-16(fp)
  80005c:	e0bffe17 	ldw	r2,-8(fp)
  800060:	10c0020e 	bge	r2,r3,80006c <min_three+0x34>
  800064:	e0bffe17 	ldw	r2,-8(fp)
  800068:	e0bffc15 	stw	r2,-16(fp)
	if (min > c) min = c;
  80006c:	e0fffc17 	ldw	r3,-16(fp)
  800070:	e0bfff17 	ldw	r2,-4(fp)
  800074:	10c0020e 	bge	r2,r3,800080 <min_three+0x48>
  800078:	e0bfff17 	ldw	r2,-4(fp)
  80007c:	e0bffc15 	stw	r2,-16(fp)
	return min;
  800080:	e0bffc17 	ldw	r2,-16(fp)
}
  800084:	e037883a 	mov	sp,fp
  800088:	df000017 	ldw	fp,0(sp)
  80008c:	dec00104 	addi	sp,sp,4
  800090:	f800283a 	ret

00800094 <min>:

/* Returns minimum of two numbers */
int min(int a, int b){
  800094:	defffc04 	addi	sp,sp,-16
  800098:	df000315 	stw	fp,12(sp)
  80009c:	df000304 	addi	fp,sp,12
  8000a0:	e13ffe15 	stw	r4,-8(fp)
  8000a4:	e17fff15 	stw	r5,-4(fp)
	int m = a;
  8000a8:	e0bffe17 	ldw	r2,-8(fp)
  8000ac:	e0bffd15 	stw	r2,-12(fp)
	if (m > b) m = b;
  8000b0:	e0fffd17 	ldw	r3,-12(fp)
  8000b4:	e0bfff17 	ldw	r2,-4(fp)
  8000b8:	10c0020e 	bge	r2,r3,8000c4 <min+0x30>
  8000bc:	e0bfff17 	ldw	r2,-4(fp)
  8000c0:	e0bffd15 	stw	r2,-12(fp)
	return m;
  8000c4:	e0bffd17 	ldw	r2,-12(fp)
}
  8000c8:	e037883a 	mov	sp,fp
  8000cc:	df000017 	ldw	fp,0(sp)
  8000d0:	dec00104 	addi	sp,sp,4
  8000d4:	f800283a 	ret

008000d8 <max>:

/* Returns maximum of two numbers */
int max(int a, int b){
  8000d8:	defffc04 	addi	sp,sp,-16
  8000dc:	df000315 	stw	fp,12(sp)
  8000e0:	df000304 	addi	fp,sp,12
  8000e4:	e13ffe15 	stw	r4,-8(fp)
  8000e8:	e17fff15 	stw	r5,-4(fp)
	int m = a;
  8000ec:	e0bffe17 	ldw	r2,-8(fp)
  8000f0:	e0bffd15 	stw	r2,-12(fp)
	if (m < b) m = b;
  8000f4:	e0fffd17 	ldw	r3,-12(fp)
  8000f8:	e0bfff17 	ldw	r2,-4(fp)
  8000fc:	1880020e 	bge	r3,r2,800108 <max+0x30>
  800100:	e0bfff17 	ldw	r2,-4(fp)
  800104:	e0bffd15 	stw	r2,-12(fp)
	return m;
  800108:	e0bffd17 	ldw	r2,-12(fp)
}
  80010c:	e037883a 	mov	sp,fp
  800110:	df000017 	ldw	fp,0(sp)
  800114:	dec00104 	addi	sp,sp,4
  800118:	f800283a 	ret

0080011c <dist>:

// Euclidean distance
long dist(signed long x, signed long y) {
  80011c:	defffc04 	addi	sp,sp,-16
  800120:	dfc00315 	stw	ra,12(sp)
  800124:	df000215 	stw	fp,8(sp)
  800128:	df000204 	addi	fp,sp,8
  80012c:	e13ffe15 	stw	r4,-8(fp)
  800130:	e17fff15 	stw	r5,-4(fp)
	return (long) sqrt(((signed long long)(x-y))*((signed long long)(x-y)));
  800134:	e0fffe17 	ldw	r3,-8(fp)
  800138:	e0bfff17 	ldw	r2,-4(fp)
  80013c:	1885c83a 	sub	r2,r3,r2
  800140:	1007d7fa 	srai	r3,r2,31
  800144:	100b883a 	mov	r5,r2
  800148:	180d883a 	mov	r6,r3
  80014c:	e0fffe17 	ldw	r3,-8(fp)
  800150:	e0bfff17 	ldw	r2,-4(fp)
  800154:	1889c83a 	sub	r4,r3,r2
  800158:	200fd7fa 	srai	r7,r4,31
  80015c:	2005883a 	mov	r2,r4
  800160:	3807883a 	mov	r3,r7
  800164:	2809883a 	mov	r4,r5
  800168:	300b883a 	mov	r5,r6
  80016c:	100d883a 	mov	r6,r2
  800170:	180f883a 	mov	r7,r3
  800174:	0802ae00 	call	802ae0 <__muldi3>
  800178:	1009883a 	mov	r4,r2
  80017c:	180b883a 	mov	r5,r3
  800180:	2005883a 	mov	r2,r4
  800184:	2807883a 	mov	r3,r5
  800188:	1009883a 	mov	r4,r2
  80018c:	180b883a 	mov	r5,r3
  800190:	0802cb00 	call	802cb0 <__floatdidf>
  800194:	100b883a 	mov	r5,r2
  800198:	180d883a 	mov	r6,r3
  80019c:	2809883a 	mov	r4,r5
  8001a0:	300b883a 	mov	r5,r6
  8001a4:	08026b00 	call	8026b0 <sqrt>
  8001a8:	100b883a 	mov	r5,r2
  8001ac:	180d883a 	mov	r6,r3
  8001b0:	2809883a 	mov	r4,r5
  8001b4:	300b883a 	mov	r5,r6
  8001b8:	08039d80 	call	8039d8 <__fixdfsi>
	//return (x-y)*(x-y);
}
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <dtw>:

long dtw(long * t1, long * t2, int m, int n, int coord) {
  8001d0:	defff204 	addi	sp,sp,-56
  8001d4:	dfc00d15 	stw	ra,52(sp)
  8001d8:	df000c15 	stw	fp,48(sp)
  8001dc:	dc400b15 	stw	r17,44(sp)
  8001e0:	dc000a15 	stw	r16,40(sp)
  8001e4:	df000a04 	addi	fp,sp,40
  8001e8:	e13ffc15 	stw	r4,-16(fp)
  8001ec:	e17ffd15 	stw	r5,-12(fp)
  8001f0:	e1bffe15 	stw	r6,-8(fp)
  8001f4:	e1ffff15 	stw	r7,-4(fp)
	int i;
	int j;
	long zero = 0;
  8001f8:	e03ff915 	stw	zero,-28(fp)
	volatile alt_u32 * pCost;
	int window = (int)(0.1*(max(m, n))+0.5); //band size of 10% max of m or n
  8001fc:	e13ffe17 	ldw	r4,-8(fp)
  800200:	e17fff17 	ldw	r5,-4(fp)
  800204:	08000d80 	call	8000d8 <max>
  800208:	1009883a 	mov	r4,r2
  80020c:	08038e00 	call	8038e0 <__floatsidf>
  800210:	100b883a 	mov	r5,r2
  800214:	180d883a 	mov	r6,r3
  800218:	2809883a 	mov	r4,r5
  80021c:	300b883a 	mov	r5,r6
  800220:	01a666b4 	movhi	r6,39322
  800224:	31a66684 	addi	r6,r6,-26214
  800228:	01cfeeb4 	movhi	r7,16314
  80022c:	39e66644 	addi	r7,r7,-26215
  800230:	080323c0 	call	80323c <__muldf3>
  800234:	1009883a 	mov	r4,r2
  800238:	180b883a 	mov	r5,r3
  80023c:	2005883a 	mov	r2,r4
  800240:	2807883a 	mov	r3,r5
  800244:	1009883a 	mov	r4,r2
  800248:	180b883a 	mov	r5,r3
  80024c:	000d883a 	mov	r6,zero
  800250:	01cff834 	movhi	r7,16352
  800254:	08031c80 	call	8031c8 <__adddf3>
  800258:	1009883a 	mov	r4,r2
  80025c:	180b883a 	mov	r5,r3
  800260:	2005883a 	mov	r2,r4
  800264:	2807883a 	mov	r3,r5
  800268:	1009883a 	mov	r4,r2
  80026c:	180b883a 	mov	r5,r3
  800270:	08039d80 	call	8039d8 <__fixdfsi>
  800274:	e0bff715 	stw	r2,-36(fp)
	int constraint = abs(n-m);
  800278:	e0ffff17 	ldw	r3,-4(fp)
  80027c:	e0bffe17 	ldw	r2,-8(fp)
  800280:	1885c83a 	sub	r2,r3,r2
  800284:	e0bff615 	stw	r2,-40(fp)
  800288:	e0bff617 	ldw	r2,-40(fp)
  80028c:	1004403a 	cmpge	r2,r2,zero
  800290:	1000031e 	bne	r2,zero,8002a0 <dtw+0xd0>
  800294:	e0bff617 	ldw	r2,-40(fp)
  800298:	0085c83a 	sub	r2,zero,r2
  80029c:	e0bff615 	stw	r2,-40(fp)
	window = max(window, constraint);
  8002a0:	e13ff717 	ldw	r4,-36(fp)
  8002a4:	e17ff617 	ldw	r5,-40(fp)
  8002a8:	08000d80 	call	8000d8 <max>
  8002ac:	e0bff715 	stw	r2,-36(fp)

	// create cost matrix
	//int cost[m][n];
	if(coord == 0){
  8002b0:	e0800417 	ldw	r2,16(fp)
  8002b4:	1004c03a 	cmpne	r2,r2,zero
  8002b8:	1000031e 	bne	r2,zero,8002c8 <dtw+0xf8>
		pCost = ((alt_u32*) SRAM_0_BASE);// + sizeof(int)*800;
  8002bc:	00806234 	movhi	r2,392
  8002c0:	e0bff815 	stw	r2,-32(fp)
  8002c4:	00000306 	br	8002d4 <dtw+0x104>
	}
	else{
		pCost = ((alt_u32*) SRAM_0_BASE) + DTW_BASE_Y;
  8002c8:	008062b4 	movhi	r2,394
  8002cc:	109c4004 	addi	r2,r2,28928
  8002d0:	e0bff815 	stw	r2,-32(fp)
	}
	//long index = 0;
	// setup initial state of matrix
	for (i = 0; i < m; i++){
  8002d4:	e03ffb15 	stw	zero,-20(fp)
  8002d8:	00001806 	br	80033c <dtw+0x16c>
		for (j = 0; j < n; j++){
  8002dc:	e03ffa15 	stw	zero,-24(fp)
  8002e0:	00001006 	br	800324 <dtw+0x154>
			*(pCost +(i*n+j)) = (signed long)INFIN;
  8002e4:	e0fffb17 	ldw	r3,-20(fp)
  8002e8:	e0bfff17 	ldw	r2,-4(fp)
  8002ec:	1887383a 	mul	r3,r3,r2
  8002f0:	e0bffa17 	ldw	r2,-24(fp)
  8002f4:	1885883a 	add	r2,r3,r2
  8002f8:	1085883a 	add	r2,r2,r2
  8002fc:	1085883a 	add	r2,r2,r2
  800300:	1007883a 	mov	r3,r2
  800304:	e0bff817 	ldw	r2,-32(fp)
  800308:	1887883a 	add	r3,r3,r2
  80030c:	00a00034 	movhi	r2,32768
  800310:	10bfff84 	addi	r2,r2,-2
  800314:	18800015 	stw	r2,0(r3)
		pCost = ((alt_u32*) SRAM_0_BASE) + DTW_BASE_Y;
	}
	//long index = 0;
	// setup initial state of matrix
	for (i = 0; i < m; i++){
		for (j = 0; j < n; j++){
  800318:	e0bffa17 	ldw	r2,-24(fp)
  80031c:	10800044 	addi	r2,r2,1
  800320:	e0bffa15 	stw	r2,-24(fp)
  800324:	e0fffa17 	ldw	r3,-24(fp)
  800328:	e0bfff17 	ldw	r2,-4(fp)
  80032c:	18bfed16 	blt	r3,r2,8002e4 <dtw+0x114>
	else{
		pCost = ((alt_u32*) SRAM_0_BASE) + DTW_BASE_Y;
	}
	//long index = 0;
	// setup initial state of matrix
	for (i = 0; i < m; i++){
  800330:	e0bffb17 	ldw	r2,-20(fp)
  800334:	10800044 	addi	r2,r2,1
  800338:	e0bffb15 	stw	r2,-20(fp)
  80033c:	e0fffb17 	ldw	r3,-20(fp)
  800340:	e0bffe17 	ldw	r2,-8(fp)
  800344:	18bfe516 	blt	r3,r2,8002dc <dtw+0x10c>
			//cost[i][j]
			//printf("%d\n", index++);
		}
	}
	//cost[0][0] = 0;
	*pCost = zero;
  800348:	e0bff917 	ldw	r2,-28(fp)
  80034c:	e0fff817 	ldw	r3,-32(fp)
  800350:	18800015 	stw	r2,0(r3)
	// fill matrix
	for (i = 1; i < m; i++) {
  800354:	00800044 	movi	r2,1
  800358:	e0bffb15 	stw	r2,-20(fp)
  80035c:	00005a06 	br	8004c8 <dtw+0x2f8>
		for (j = max(1, i - window); j < min(n, i + window)+1; j++) {
  800360:	e0fffb17 	ldw	r3,-20(fp)
  800364:	e0bff717 	ldw	r2,-36(fp)
  800368:	188bc83a 	sub	r5,r3,r2
  80036c:	01000044 	movi	r4,1
  800370:	08000d80 	call	8000d8 <max>
  800374:	e0bffa15 	stw	r2,-24(fp)
  800378:	00004806 	br	80049c <dtw+0x2cc>
			*(pCost +(i*n+j)) = min_three(
  80037c:	e0fffb17 	ldw	r3,-20(fp)
  800380:	e0bfff17 	ldw	r2,-4(fp)
  800384:	1887383a 	mul	r3,r3,r2
  800388:	e0bffa17 	ldw	r2,-24(fp)
  80038c:	1885883a 	add	r2,r3,r2
  800390:	1085883a 	add	r2,r2,r2
  800394:	1085883a 	add	r2,r2,r2
  800398:	1007883a 	mov	r3,r2
  80039c:	e0bff817 	ldw	r2,-32(fp)
  8003a0:	18a1883a 	add	r16,r3,r2
  8003a4:	e0bffb17 	ldw	r2,-20(fp)
  8003a8:	10ffffc4 	addi	r3,r2,-1
  8003ac:	e0bfff17 	ldw	r2,-4(fp)
  8003b0:	1887383a 	mul	r3,r3,r2
  8003b4:	e0bffa17 	ldw	r2,-24(fp)
  8003b8:	1885883a 	add	r2,r3,r2
  8003bc:	1085883a 	add	r2,r2,r2
  8003c0:	1085883a 	add	r2,r2,r2
  8003c4:	1007883a 	mov	r3,r2
  8003c8:	e0bff817 	ldw	r2,-32(fp)
  8003cc:	1885883a 	add	r2,r3,r2
  8003d0:	10800017 	ldw	r2,0(r2)
  8003d4:	1009883a 	mov	r4,r2
  8003d8:	e0fffb17 	ldw	r3,-20(fp)
  8003dc:	e0bfff17 	ldw	r2,-4(fp)
  8003e0:	1887383a 	mul	r3,r3,r2
  8003e4:	e0bffa17 	ldw	r2,-24(fp)
  8003e8:	1885883a 	add	r2,r3,r2
  8003ec:	1085883a 	add	r2,r2,r2
  8003f0:	1085883a 	add	r2,r2,r2
  8003f4:	1007883a 	mov	r3,r2
  8003f8:	e0bff817 	ldw	r2,-32(fp)
  8003fc:	1885883a 	add	r2,r3,r2
  800400:	10bfff04 	addi	r2,r2,-4
  800404:	10800017 	ldw	r2,0(r2)
  800408:	100b883a 	mov	r5,r2
  80040c:	e0bffb17 	ldw	r2,-20(fp)
  800410:	10ffffc4 	addi	r3,r2,-1
  800414:	e0bfff17 	ldw	r2,-4(fp)
  800418:	1887383a 	mul	r3,r3,r2
  80041c:	e0bffa17 	ldw	r2,-24(fp)
  800420:	1885883a 	add	r2,r3,r2
  800424:	1085883a 	add	r2,r2,r2
  800428:	1085883a 	add	r2,r2,r2
  80042c:	1007883a 	mov	r3,r2
  800430:	e0bff817 	ldw	r2,-32(fp)
  800434:	1885883a 	add	r2,r3,r2
  800438:	10bfff04 	addi	r2,r2,-4
  80043c:	10800017 	ldw	r2,0(r2)
  800440:	100d883a 	mov	r6,r2
  800444:	08000380 	call	800038 <min_three>
  800448:	1023883a 	mov	r17,r2
  80044c:	e0bffb17 	ldw	r2,-20(fp)
  800450:	1085883a 	add	r2,r2,r2
  800454:	1085883a 	add	r2,r2,r2
  800458:	1007883a 	mov	r3,r2
  80045c:	e0bffc17 	ldw	r2,-16(fp)
  800460:	1885883a 	add	r2,r3,r2
  800464:	11000017 	ldw	r4,0(r2)
  800468:	e0bffa17 	ldw	r2,-24(fp)
  80046c:	1085883a 	add	r2,r2,r2
  800470:	1085883a 	add	r2,r2,r2
  800474:	1007883a 	mov	r3,r2
  800478:	e0bffd17 	ldw	r2,-12(fp)
  80047c:	1885883a 	add	r2,r3,r2
  800480:	11400017 	ldw	r5,0(r2)
  800484:	080011c0 	call	80011c <dist>
  800488:	8885883a 	add	r2,r17,r2
  80048c:	80800015 	stw	r2,0(r16)
	}
	//cost[0][0] = 0;
	*pCost = zero;
	// fill matrix
	for (i = 1; i < m; i++) {
		for (j = max(1, i - window); j < min(n, i + window)+1; j++) {
  800490:	e0bffa17 	ldw	r2,-24(fp)
  800494:	10800044 	addi	r2,r2,1
  800498:	e0bffa15 	stw	r2,-24(fp)
  80049c:	e0fffb17 	ldw	r3,-20(fp)
  8004a0:	e0bff717 	ldw	r2,-36(fp)
  8004a4:	188b883a 	add	r5,r3,r2
  8004a8:	e13fff17 	ldw	r4,-4(fp)
  8004ac:	08000940 	call	800094 <min>
  8004b0:	10c00044 	addi	r3,r2,1
  8004b4:	e0bffa17 	ldw	r2,-24(fp)
  8004b8:	10ffb016 	blt	r2,r3,80037c <dtw+0x1ac>
		}
	}
	//cost[0][0] = 0;
	*pCost = zero;
	// fill matrix
	for (i = 1; i < m; i++) {
  8004bc:	e0bffb17 	ldw	r2,-20(fp)
  8004c0:	10800044 	addi	r2,r2,1
  8004c4:	e0bffb15 	stw	r2,-20(fp)
  8004c8:	e0fffb17 	ldw	r3,-20(fp)
  8004cc:	e0bffe17 	ldw	r2,-8(fp)
  8004d0:	18bfa316 	blt	r3,r2,800360 <dtw+0x190>
					(long)(*(pCost +((i-1)*n+(j-1)))))
					+ dist(t1[i], t2[j]);

		}
	}
	return (long)*(pCost + ((m-1)*n+(n-1)));
  8004d4:	e0bffe17 	ldw	r2,-8(fp)
  8004d8:	10ffffc4 	addi	r3,r2,-1
  8004dc:	e0bfff17 	ldw	r2,-4(fp)
  8004e0:	1887383a 	mul	r3,r3,r2
  8004e4:	e0bfff17 	ldw	r2,-4(fp)
  8004e8:	1885883a 	add	r2,r3,r2
  8004ec:	1085883a 	add	r2,r2,r2
  8004f0:	1085883a 	add	r2,r2,r2
  8004f4:	1007883a 	mov	r3,r2
  8004f8:	e0bff817 	ldw	r2,-32(fp)
  8004fc:	1885883a 	add	r2,r3,r2
  800500:	10bfff04 	addi	r2,r2,-4
  800504:	10800017 	ldw	r2,0(r2)
	//return pCost[m - 1][n - 1];

}
  800508:	e037883a 	mov	sp,fp
  80050c:	dfc00317 	ldw	ra,12(sp)
  800510:	df000217 	ldw	fp,8(sp)
  800514:	dc400117 	ldw	r17,4(sp)
  800518:	dc000017 	ldw	r16,0(sp)
  80051c:	dec00404 	addi	sp,sp,16
  800520:	f800283a 	ret

00800524 <taskModeSelect>:
//i++;
//// I only want to display the least significant nibble
//printf("SEVEN_SEG: %x\n", i & 0x0000000f);

//todo ModeSelect
void taskModeSelect(void* pdata){
  800524:	deffed04 	addi	sp,sp,-76
  800528:	dfc01215 	stw	ra,72(sp)
  80052c:	df001115 	stw	fp,68(sp)
  800530:	df001104 	addi	fp,sp,68
  800534:	e13fff15 	stw	r4,-4(fp)
	//int i;
	OSSemPend(modeselectsem, 0, &err);
  800538:	d1204317 	ldw	r4,-32500(gp)
  80053c:	000b883a 	mov	r5,zero
  800540:	d1a04104 	addi	r6,gp,-32508
  800544:	0812f900 	call	812f90 <OSSemPend>
	printf("Starting ModeSelect\n");
  800548:	010020b4 	movhi	r4,130
  80054c:	21332604 	addi	r4,r4,-13160
  800550:	080442c0 	call	80442c <puts>

	while(1){
		//alt_dcache_flush_all();
		//printf("Starting ModeSelect\n");
		if (IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE) == 1) {
  800554:	00806474 	movhi	r2,401
  800558:	10a50c04 	addi	r2,r2,-27600
  80055c:	10800037 	ldwio	r2,0(r2)
  800560:	10800058 	cmpnei	r2,r2,1
  800564:	10004a1e 	bne	r2,zero,800690 <taskModeSelect+0x16c>
			//printf("Starting ModeSelect2\n");
			//loadSDCard(1);
			err = OSSemPost(loadsdcardsem);
  800568:	d1203817 	ldw	r4,-32544(gp)
  80056c:	08133880 	call	813388 <OSSemPost>
  800570:	d0a04105 	stb	r2,-32508(gp)
			OSSemPend(loadsem, 0, &err);
  800574:	d1204017 	ldw	r4,-32512(gp)
  800578:	000b883a 	mov	r5,zero
  80057c:	d1a04104 	addi	r6,gp,-32508
  800580:	0812f900 	call	812f90 <OSSemPend>
			//int t1[3] = { 0, 1, 2 };
//			int t2[2] = { 2, 3 };
//			int t3[3] = { 6, 0, 9 };
//			int t4[3] = { 4, 5, 8 };

			int t1[4] = {0, 1, 2, 3};
  800584:	e03fef15 	stw	zero,-68(fp)
  800588:	00800044 	movi	r2,1
  80058c:	e0bff015 	stw	r2,-64(fp)
  800590:	00800084 	movi	r2,2
  800594:	e0bff115 	stw	r2,-60(fp)
  800598:	008000c4 	movi	r2,3
  80059c:	e0bff215 	stw	r2,-56(fp)
			int t2[4] = {4, 5, 6, 7};
  8005a0:	00800104 	movi	r2,4
  8005a4:	e0bff315 	stw	r2,-52(fp)
  8005a8:	00800144 	movi	r2,5
  8005ac:	e0bff415 	stw	r2,-48(fp)
  8005b0:	00800184 	movi	r2,6
  8005b4:	e0bff515 	stw	r2,-44(fp)
  8005b8:	008001c4 	movi	r2,7
  8005bc:	e0bff615 	stw	r2,-40(fp)
			int t3[4] = {8, 9, 10, 11};
  8005c0:	00800204 	movi	r2,8
  8005c4:	e0bff715 	stw	r2,-36(fp)
  8005c8:	00800244 	movi	r2,9
  8005cc:	e0bff815 	stw	r2,-32(fp)
  8005d0:	00800284 	movi	r2,10
  8005d4:	e0bff915 	stw	r2,-28(fp)
  8005d8:	008002c4 	movi	r2,11
  8005dc:	e0bffa15 	stw	r2,-24(fp)
			int t4[4] = {12, 13, 14, 15};
  8005e0:	00800304 	movi	r2,12
  8005e4:	e0bffb15 	stw	r2,-20(fp)
  8005e8:	00800344 	movi	r2,13
  8005ec:	e0bffc15 	stw	r2,-16(fp)
  8005f0:	00800384 	movi	r2,14
  8005f4:	e0bffd15 	stw	r2,-12(fp)
  8005f8:	008003c4 	movi	r2,15
  8005fc:	e0bffe15 	stw	r2,-8(fp)

			templates[0].t = t1;
  800600:	008020f4 	movhi	r2,131
  800604:	10bd4d04 	addi	r2,r2,-2764
  800608:	e0ffef04 	addi	r3,fp,-68
  80060c:	10c00015 	stw	r3,0(r2)
			templates[1].t = t2;
  800610:	00c020f4 	movhi	r3,131
  800614:	18fd4d04 	addi	r3,r3,-2764
  800618:	e0bff304 	addi	r2,fp,-52
  80061c:	18800215 	stw	r2,8(r3)
			templates[2].t = t3;
  800620:	00c020f4 	movhi	r3,131
  800624:	18fd4d04 	addi	r3,r3,-2764
  800628:	e0bff704 	addi	r2,fp,-36
  80062c:	18800415 	stw	r2,16(r3)
			templates[3].t = t4;
  800630:	00c020f4 	movhi	r3,131
  800634:	18fd4d04 	addi	r3,r3,-2764
  800638:	e0bffb04 	addi	r2,fp,-20
  80063c:	18800615 	stw	r2,24(r3)
			templates[0].size = 4;
  800640:	00c020f4 	movhi	r3,131
  800644:	18fd4d04 	addi	r3,r3,-2764
  800648:	00800104 	movi	r2,4
  80064c:	18800115 	stw	r2,4(r3)
			templates[1].size = 4;
  800650:	00c020f4 	movhi	r3,131
  800654:	18fd4d04 	addi	r3,r3,-2764
  800658:	00800104 	movi	r2,4
  80065c:	18800315 	stw	r2,12(r3)
			templates[2].size = 4;
  800660:	00c020f4 	movhi	r3,131
  800664:	18fd4d04 	addi	r3,r3,-2764
  800668:	00800104 	movi	r2,4
  80066c:	18800515 	stw	r2,20(r3)
			templates[3].size = 4;
  800670:	00c020f4 	movhi	r3,131
  800674:	18fd4d04 	addi	r3,r3,-2764
  800678:	00800104 	movi	r2,4
  80067c:	18800715 	stw	r2,28(r3)
//
//			for(i = 0; i < 4; i++){
//
//			}
			err = OSSemPost(uartsem);
  800680:	d1203b17 	ldw	r4,-32532(gp)
  800684:	08133880 	call	813388 <OSSemPost>
  800688:	d0a04105 	stb	r2,-32508(gp)
  80068c:	00000306 	br	80069c <taskModeSelect+0x178>
		} else {
			err = OSSemPost(configuresem);
  800690:	d1203a17 	ldw	r4,-32536(gp)
  800694:	08133880 	call	813388 <OSSemPost>
  800698:	d0a04105 	stb	r2,-32508(gp)
		}
		//OSTimeDlyHMSM(0, 0, 0, 50);
		//break;
		OSSemPend(modeselectsem, 0, &err);
  80069c:	d1204317 	ldw	r4,-32500(gp)
  8006a0:	000b883a 	mov	r5,zero
  8006a4:	d1a04104 	addi	r6,gp,-32508
  8006a8:	0812f900 	call	812f90 <OSSemPend>
	}
  8006ac:	003fa906 	br	800554 <taskModeSelect+0x30>

008006b0 <taskLcdPrint>:
	return;
}

/*prints to lcd*/
void taskLcdPrint(void* pdata) {
  8006b0:	defffb04 	addi	sp,sp,-20
  8006b4:	dfc00415 	stw	ra,16(sp)
  8006b8:	df000315 	stw	fp,12(sp)
  8006bc:	df000304 	addi	fp,sp,12
  8006c0:	e13fff15 	stw	r4,-4(fp)
	//char str[16];
	//char end = '\0';
	alt_up_character_lcd_dev * char_lcd_dev;
	char* msg;
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev("/dev/character_lcd_0");
  8006c4:	010020b4 	movhi	r4,130
  8006c8:	21332b04 	addi	r4,r4,-13140
  8006cc:	08166ec0 	call	8166ec <alt_up_character_lcd_open_dev>
  8006d0:	e0bffe15 	stw	r2,-8(fp)
	if (char_lcd_dev == NULL)
  8006d4:	e0bffe17 	ldw	r2,-8(fp)
  8006d8:	1004c03a 	cmpne	r2,r2,zero
  8006dc:	1000041e 	bne	r2,zero,8006f0 <taskLcdPrint+0x40>
		alt_printf("Error: could not open character LCD device\n");
  8006e0:	010020b4 	movhi	r4,130
  8006e4:	21333104 	addi	r4,r4,-13116
  8006e8:	080ca5c0 	call	80ca5c <alt_printf>
  8006ec:	00000306 	br	8006fc <taskLcdPrint+0x4c>
	else
		alt_printf("Opened character LCD device\n");
  8006f0:	010020b4 	movhi	r4,130
  8006f4:	21333c04 	addi	r4,r4,-13072
  8006f8:	080ca5c0 	call	80ca5c <alt_printf>

	alt_up_character_lcd_init(char_lcd_dev);
  8006fc:	e13ffe17 	ldw	r4,-8(fp)
  800700:	08166b80 	call	8166b8 <alt_up_character_lcd_init>

	while (1) {
	msg = OSQPend(lcdmessage, 0, &err);
  800704:	d1203017 	ldw	r4,-32576(gp)
  800708:	000b883a 	mov	r5,zero
  80070c:	d1a04104 	addi	r6,gp,-32508
  800710:	0811f180 	call	811f18 <OSQPend>
  800714:	e0bffd15 	stw	r2,-12(fp)
	//printf("%s", msg);
	//strcpy(str, msg);
	//strcat(str, end);
	alt_up_character_lcd_init(char_lcd_dev);
  800718:	e13ffe17 	ldw	r4,-8(fp)
  80071c:	08166b80 	call	8166b8 <alt_up_character_lcd_init>
	alt_up_character_lcd_string(char_lcd_dev, msg);
  800720:	e13ffe17 	ldw	r4,-8(fp)
  800724:	e17ffd17 	ldw	r5,-12(fp)
  800728:	08167a40 	call	8167a4 <alt_up_character_lcd_string>
	OSTimeDlyHMSM(0, 0, 0, 500);
  80072c:	0009883a 	mov	r4,zero
  800730:	000b883a 	mov	r5,zero
  800734:	000d883a 	mov	r6,zero
  800738:	01c07d04 	movi	r7,500
  80073c:	08152700 	call	815270 <OSTimeDlyHMSM>
	}
  800740:	003ff006 	br	800704 <taskLcdPrint+0x54>

00800744 <taskLoadSDCard>:
}

/* Helper function that loads the character templates from the SDCard and deposits them in SRAM */
//todo loadSDCARD
void taskLoadSDCard(void* pdata) {
  800744:	defff404 	addi	sp,sp,-48
  800748:	dfc00b15 	stw	ra,44(sp)
  80074c:	df000a15 	stw	fp,40(sp)
  800750:	dc000915 	stw	r16,36(sp)
  800754:	df000904 	addi	fp,sp,36
  800758:	e13fff15 	stw	r4,-4(fp)
	OSSemPend(loadsdcardsem, 0, &err);
  80075c:	d1203817 	ldw	r4,-32544(gp)
  800760:	000b883a 	mov	r5,zero
  800764:	d1a04104 	addi	r6,gp,-32508
  800768:	0812f900 	call	812f90 <OSSemPend>
	//int index;
	int i;
	int j;
	int temp;
	short int a;
	int debug = 0;
  80076c:	e03ff915 	stw	zero,-28(fp)
	signed long test;
	//OSSemPend(readsem, 0, &err);

	for(i=0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  800770:	e03ffd15 	stw	zero,-12(fp)
  800774:	00001e06 	br	8007f0 <taskLoadSDCard+0xac>

		template[i].pX = (alt_u8*)((alt_u8*) SRAM_0_BASE) + sizeof(long)*(DTW_BASE + X_COORD_BASE + Y_COORD_BASE + INPUT_SIZE*i);
  800778:	e17ffd17 	ldw	r5,-12(fp)
  80077c:	e0bffd17 	ldw	r2,-12(fp)
  800780:	1080c824 	muli	r2,r2,800
  800784:	1007883a 	mov	r3,r2
  800788:	00806374 	movhi	r2,397
  80078c:	10882004 	addi	r2,r2,8320
  800790:	1885883a 	add	r2,r3,r2
  800794:	1009883a 	mov	r4,r2
  800798:	00c020f4 	movhi	r3,131
  80079c:	18fd5504 	addi	r3,r3,-2732
  8007a0:	28800324 	muli	r2,r5,12
  8007a4:	10c5883a 	add	r2,r2,r3
  8007a8:	11000015 	stw	r4,0(r2)
		//template[i].pX = (alt_u8*)alt_remap_uncached( template[i].pX, 200 );
		template[i].pY = (alt_u8*)((alt_u8*) SRAM_0_BASE) + sizeof(long)*(DTW_BASE + X_COORD_BASE + X_COORD_BASE + OFFSET + Y_COORD_BASE + INPUT_SIZE*i);//1200 for 16
  8007ac:	e17ffd17 	ldw	r5,-12(fp)
  8007b0:	e0bffd17 	ldw	r2,-12(fp)
  8007b4:	1080c824 	muli	r2,r2,800
  8007b8:	1007883a 	mov	r3,r2
  8007bc:	00806374 	movhi	r2,397
  8007c0:	1094a004 	addi	r2,r2,21120
  8007c4:	1885883a 	add	r2,r3,r2
  8007c8:	1009883a 	mov	r4,r2
  8007cc:	00c020f4 	movhi	r3,131
  8007d0:	18fd5504 	addi	r3,r3,-2732
  8007d4:	28800324 	muli	r2,r5,12
  8007d8:	10c5883a 	add	r2,r2,r3
  8007dc:	10800104 	addi	r2,r2,4
  8007e0:	11000015 	stw	r4,0(r2)
	short int a;
	int debug = 0;
	signed long test;
	//OSSemPend(readsem, 0, &err);

	for(i=0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  8007e4:	e0bffd17 	ldw	r2,-12(fp)
  8007e8:	10800044 	addi	r2,r2,1
  8007ec:	e0bffd15 	stw	r2,-12(fp)
  8007f0:	e0bffd17 	ldw	r2,-12(fp)
  8007f4:	10800410 	cmplti	r2,r2,16
  8007f8:	103fdf1e 	bne	r2,zero,800778 <taskLoadSDCard+0x34>
  8007fc:	00000006 	br	800800 <taskLoadSDCard+0xbc>
//		template[i].pX = ((alt_u32*) SRAM_0_BASE) + sizeof(long)*(DTW_BASE + X_COORD_BASE + Y_COORD_BASE + INPUT_SIZE*i);
//		template[i].pY = ((alt_u32*) SRAM_0_BASE) + sizeof(long)*(DTW_BASE + X_COORD_BASE + X_COORD_BASE + Y_COORD_BASE + INPUT_SIZE*i);
//	}

	while(1){
	printf("SD Card Read Startup\n");
  800800:	010020b4 	movhi	r4,130
  800804:	21334404 	addi	r4,r4,-13040
  800808:	080442c0 	call	80442c <puts>

	alt_up_sd_card_dev *sd_card_dev = alt_up_sd_card_open_dev(
			ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
  80080c:	010020b4 	movhi	r4,130
  800810:	21334a04 	addi	r4,r4,-13016
  800814:	0819c2c0 	call	819c2c <alt_up_sd_card_open_dev>
  800818:	e0bff715 	stw	r2,-36(fp)

	if (sd_card_dev != 0) {
  80081c:	e0bff717 	ldw	r2,-36(fp)
  800820:	1005003a 	cmpeq	r2,r2,zero
  800824:	103ff61e 	bne	r2,zero,800800 <taskLoadSDCard+0xbc>
		if (alt_up_sd_card_is_Present()) {
  800828:	0819cf00 	call	819cf0 <alt_up_sd_card_is_Present>
  80082c:	1005003a 	cmpeq	r2,r2,zero
  800830:	103ff31e 	bne	r2,zero,800800 <taskLoadSDCard+0xbc>
			if (alt_up_sd_card_is_FAT16())
  800834:	0819db80 	call	819db8 <alt_up_sd_card_is_FAT16>
  800838:	1005003a 	cmpeq	r2,r2,zero
  80083c:	1000041e 	bne	r2,zero,800850 <taskLoadSDCard+0x10c>
				printf("Card is FAT16\n");
  800840:	010020b4 	movhi	r4,130
  800844:	21335504 	addi	r4,r4,-12972
  800848:	080442c0 	call	80442c <puts>
  80084c:	00000306 	br	80085c <taskLoadSDCard+0x118>
			else
				printf("Card is not FAT16\n");
  800850:	010020b4 	movhi	r4,130
  800854:	21335904 	addi	r4,r4,-12956
  800858:	080442c0 	call	80442c <puts>

			sd_fileh = alt_up_sd_card_fopen("file.txt", false);
  80085c:	010020b4 	movhi	r4,130
  800860:	21335e04 	addi	r4,r4,-12936
  800864:	000b883a 	mov	r5,zero
  800868:	081a2b00 	call	81a2b0 <alt_up_sd_card_fopen>
  80086c:	e0bffe0d 	sth	r2,-8(fp)

			if (sd_fileh < 0)
  800870:	e0bffe0f 	ldh	r2,-8(fp)
  800874:	1004403a 	cmpge	r2,r2,zero
  800878:	1000051e 	bne	r2,zero,800890 <taskLoadSDCard+0x14c>
				printf("Problem accessing file. Error %i", sd_fileh);
  80087c:	e17ffe0f 	ldh	r5,-8(fp)
  800880:	010020b4 	movhi	r4,130
  800884:	21336104 	addi	r4,r4,-12924
  800888:	08043140 	call	804314 <printf>
  80088c:	003fdc06 	br	800800 <taskLoadSDCard+0xbc>
			else {
				printf("SD Accessed Successfully, reading data...\n");
  800890:	010020b4 	movhi	r4,130
  800894:	21336a04 	addi	r4,r4,-12888
  800898:	080442c0 	call	80442c <puts>

				//char * pbuffer = read_buffer;


				for(i = 0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  80089c:	e03ffd15 	stw	zero,-12(fp)
  8008a0:	00008506 	br	800ab8 <taskLoadSDCard+0x374>
					template[i].size = (int) alt_up_sd_card_read(sd_fileh); //reads first byte of data which indicates the size of a template array
  8008a4:	e43ffd17 	ldw	r16,-12(fp)
  8008a8:	e13ffe0f 	ldh	r4,-8(fp)
  8008ac:	081a7740 	call	81a774 <alt_up_sd_card_read>
  8008b0:	113fffcc 	andi	r4,r2,65535
  8008b4:	2120001c 	xori	r4,r4,32768
  8008b8:	21200004 	addi	r4,r4,-32768
  8008bc:	00c020f4 	movhi	r3,131
  8008c0:	18fd5504 	addi	r3,r3,-2732
  8008c4:	80800324 	muli	r2,r16,12
  8008c8:	10c5883a 	add	r2,r2,r3
  8008cc:	10800204 	addi	r2,r2,8
  8008d0:	11000015 	stw	r4,0(r2)
					//printf("%d\n", template[i].size);
					if (i == debug) {
  8008d4:	e0fffd17 	ldw	r3,-12(fp)
  8008d8:	e0bff917 	ldw	r2,-28(fp)
  8008dc:	1880041e 	bne	r3,r2,8008f0 <taskLoadSDCard+0x1ac>
						printf(
  8008e0:	010020b4 	movhi	r4,130
  8008e4:	21337504 	addi	r4,r4,-12844
  8008e8:	e17ff917 	ldw	r5,-28(fp)
  8008ec:	08043140 	call	804314 <printf>
								"X VALUES for %d -----------------------------------------------\n", debug);
					}
					for( j = 0;  j < template[i].size; j++){
  8008f0:	e03ffc15 	stw	zero,-16(fp)
  8008f4:	00002706 	br	800994 <taskLoadSDCard+0x250>
						//printf("")
						a = alt_up_sd_card_read(sd_fileh);
  8008f8:	e13ffe0f 	ldh	r4,-8(fp)
  8008fc:	081a7740 	call	81a774 <alt_up_sd_card_read>
  800900:	e0bffa0d 	sth	r2,-24(fp)
						//*(template[i].pX + sizeof(long)*j) = (long)(a);
						//*(template[i].pX + sizeof(long)*j) = (long)(a*10);
						*(((signed long*)template[i].pX) + j) = (signed long)(a);
  800904:	e0bffd17 	ldw	r2,-12(fp)
  800908:	00c020f4 	movhi	r3,131
  80090c:	18fd5504 	addi	r3,r3,-2732
  800910:	10800324 	muli	r2,r2,12
  800914:	10c5883a 	add	r2,r2,r3
  800918:	10800017 	ldw	r2,0(r2)
  80091c:	1007883a 	mov	r3,r2
  800920:	e0bffc17 	ldw	r2,-16(fp)
  800924:	1085883a 	add	r2,r2,r2
  800928:	1085883a 	add	r2,r2,r2
  80092c:	1887883a 	add	r3,r3,r2
  800930:	e0bffa0f 	ldh	r2,-24(fp)
  800934:	18800015 	stw	r2,0(r3)
						//IOWR_32DIRECT(template[i].pX, j*4, (long)(a*10));
						//*(template[i].pX + sizeof(long)*j) = (long)(alt_up_sd_card_read(sd_fileh)*10);
						//temp = *(template[i].pX + sizeof(long)*j);
						if(i == debug){
  800938:	e0fffd17 	ldw	r3,-12(fp)
  80093c:	e0bff917 	ldw	r2,-28(fp)
  800940:	1880111e 	bne	r3,r2,800988 <taskLoadSDCard+0x244>
							test = *(((signed long*)template[i].pX) + j);
  800944:	e0bffd17 	ldw	r2,-12(fp)
  800948:	00c020f4 	movhi	r3,131
  80094c:	18fd5504 	addi	r3,r3,-2732
  800950:	10800324 	muli	r2,r2,12
  800954:	10c5883a 	add	r2,r2,r3
  800958:	10800017 	ldw	r2,0(r2)
  80095c:	1007883a 	mov	r3,r2
  800960:	e0bffc17 	ldw	r2,-16(fp)
  800964:	1085883a 	add	r2,r2,r2
  800968:	1085883a 	add	r2,r2,r2
  80096c:	1885883a 	add	r2,r3,r2
  800970:	10800017 	ldw	r2,0(r2)
  800974:	e0bff815 	stw	r2,-32(fp)
							printf("%ld\n", test);
  800978:	010020b4 	movhi	r4,130
  80097c:	21338604 	addi	r4,r4,-12776
  800980:	e17ff817 	ldw	r5,-32(fp)
  800984:	08043140 	call	804314 <printf>
					//printf("%d\n", template[i].size);
					if (i == debug) {
						printf(
								"X VALUES for %d -----------------------------------------------\n", debug);
					}
					for( j = 0;  j < template[i].size; j++){
  800988:	e0bffc17 	ldw	r2,-16(fp)
  80098c:	10800044 	addi	r2,r2,1
  800990:	e0bffc15 	stw	r2,-16(fp)
  800994:	e0bffd17 	ldw	r2,-12(fp)
  800998:	00c020f4 	movhi	r3,131
  80099c:	18fd5504 	addi	r3,r3,-2732
  8009a0:	10800324 	muli	r2,r2,12
  8009a4:	10c5883a 	add	r2,r2,r3
  8009a8:	10800204 	addi	r2,r2,8
  8009ac:	10c00017 	ldw	r3,0(r2)
  8009b0:	e0bffc17 	ldw	r2,-16(fp)
  8009b4:	10ffd016 	blt	r2,r3,8008f8 <taskLoadSDCard+0x1b4>
							//printf("0x%08x   0x%08x \n",((long*)template[i].pX + j),((long*)template[i].pX + (j-1)));
						}
						//printf("%d\n", temp);
					}

					if(i == debug){
  8009b8:	e0fffd17 	ldw	r3,-12(fp)
  8009bc:	e0bff917 	ldw	r2,-28(fp)
  8009c0:	1880041e 	bne	r3,r2,8009d4 <taskLoadSDCard+0x290>
						printf("Y VALUES for %d -----------------------------------------------\n", debug);
  8009c4:	010020b4 	movhi	r4,130
  8009c8:	21338804 	addi	r4,r4,-12768
  8009cc:	e17ff917 	ldw	r5,-28(fp)
  8009d0:	08043140 	call	804314 <printf>
					}
					for( j = 0;  j < template[i].size; j++){
  8009d4:	e03ffc15 	stw	zero,-16(fp)
  8009d8:	00002906 	br	800a80 <taskLoadSDCard+0x33c>
						a = alt_up_sd_card_read(sd_fileh);
  8009dc:	e13ffe0f 	ldh	r4,-8(fp)
  8009e0:	081a7740 	call	81a774 <alt_up_sd_card_read>
  8009e4:	e0bffa0d 	sth	r2,-24(fp)
						//*(template[i].pY + sizeof(long)*j) = (long)(a);
						*(((signed long*)template[i].pY) + j) = (signed long)(a);
  8009e8:	e0bffd17 	ldw	r2,-12(fp)
  8009ec:	00c020f4 	movhi	r3,131
  8009f0:	18fd5504 	addi	r3,r3,-2732
  8009f4:	10800324 	muli	r2,r2,12
  8009f8:	10c5883a 	add	r2,r2,r3
  8009fc:	10800104 	addi	r2,r2,4
  800a00:	10800017 	ldw	r2,0(r2)
  800a04:	1007883a 	mov	r3,r2
  800a08:	e0bffc17 	ldw	r2,-16(fp)
  800a0c:	1085883a 	add	r2,r2,r2
  800a10:	1085883a 	add	r2,r2,r2
  800a14:	1887883a 	add	r3,r3,r2
  800a18:	e0bffa0f 	ldh	r2,-24(fp)
  800a1c:	18800015 	stw	r2,0(r3)
						//*(template[i].pY + sizeof(long)*j) = (long)(a*10);
						//*(template[i].pY + sizeof(long)*j) = (long)(alt_up_sd_card_read(sd_fileh)*10);
						//temp = *(template[i].pY + sizeof(long)*j);
						if(i == debug){
  800a20:	e0fffd17 	ldw	r3,-12(fp)
  800a24:	e0bff917 	ldw	r2,-28(fp)
  800a28:	1880121e 	bne	r3,r2,800a74 <taskLoadSDCard+0x330>
							//printf("%d\n", a);
//							printf("%ld\n", *((long*)template[i].pX + j));
							//printf("%ld\n", temp);
							//printf("short int =%d\n", a);

							test = *(((signed long*)template[i].pY) + j);
  800a2c:	e0bffd17 	ldw	r2,-12(fp)
  800a30:	00c020f4 	movhi	r3,131
  800a34:	18fd5504 	addi	r3,r3,-2732
  800a38:	10800324 	muli	r2,r2,12
  800a3c:	10c5883a 	add	r2,r2,r3
  800a40:	10800104 	addi	r2,r2,4
  800a44:	10800017 	ldw	r2,0(r2)
  800a48:	1007883a 	mov	r3,r2
  800a4c:	e0bffc17 	ldw	r2,-16(fp)
  800a50:	1085883a 	add	r2,r2,r2
  800a54:	1085883a 	add	r2,r2,r2
  800a58:	1885883a 	add	r2,r3,r2
  800a5c:	10800017 	ldw	r2,0(r2)
  800a60:	e0bff815 	stw	r2,-32(fp)
							printf("%ld\n", test);
  800a64:	010020b4 	movhi	r4,130
  800a68:	21338604 	addi	r4,r4,-12776
  800a6c:	e17ff817 	ldw	r5,-32(fp)
  800a70:	08043140 	call	804314 <printf>
					}

					if(i == debug){
						printf("Y VALUES for %d -----------------------------------------------\n", debug);
					}
					for( j = 0;  j < template[i].size; j++){
  800a74:	e0bffc17 	ldw	r2,-16(fp)
  800a78:	10800044 	addi	r2,r2,1
  800a7c:	e0bffc15 	stw	r2,-16(fp)
  800a80:	e0bffd17 	ldw	r2,-12(fp)
  800a84:	00c020f4 	movhi	r3,131
  800a88:	18fd5504 	addi	r3,r3,-2732
  800a8c:	10800324 	muli	r2,r2,12
  800a90:	10c5883a 	add	r2,r2,r3
  800a94:	10800204 	addi	r2,r2,8
  800a98:	10c00017 	ldw	r3,0(r2)
  800a9c:	e0bffc17 	ldw	r2,-16(fp)
  800aa0:	10ffce16 	blt	r2,r3,8009dc <taskLoadSDCard+0x298>
//														printf("%ld\n", test);
//														test = *((signed long*)template[i].pX + j);
//														printf("%ld\n", test);
						}
					}
					AverageTemplatePattern(i);
  800aa4:	e13ffd17 	ldw	r4,-12(fp)
  800aa8:	0800b100 	call	800b10 <AverageTemplatePattern>
				printf("SD Accessed Successfully, reading data...\n");

				//char * pbuffer = read_buffer;


				for(i = 0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  800aac:	e0bffd17 	ldw	r2,-12(fp)
  800ab0:	10800044 	addi	r2,r2,1
  800ab4:	e0bffd15 	stw	r2,-12(fp)
  800ab8:	e0bffd17 	ldw	r2,-12(fp)
  800abc:	10800410 	cmplti	r2,r2,16
  800ac0:	103f781e 	bne	r2,zero,8008a4 <taskLoadSDCard+0x160>
//					*pbuffer = data;
//					pbuffer = pbuffer + (sizeof(char));
//				}
//				*pbuffer = '\0';

				printf("Done!\n");
  800ac4:	010020b4 	movhi	r4,130
  800ac8:	21339904 	addi	r4,r4,-12700
  800acc:	080442c0 	call	80442c <puts>
				printf("Closing File...");
  800ad0:	010020b4 	movhi	r4,130
  800ad4:	21339b04 	addi	r4,r4,-12692
  800ad8:	08043140 	call	804314 <printf>
				alt_up_sd_card_fclose(sd_fileh);
  800adc:	e13ffe0f 	ldh	r4,-8(fp)
  800ae0:	081b1340 	call	81b134 <alt_up_sd_card_fclose>
				printf("Done!\n");
  800ae4:	010020b4 	movhi	r4,130
  800ae8:	21339904 	addi	r4,r4,-12700
  800aec:	080442c0 	call	80442c <puts>
				err = OSSemPost(loadsem);
  800af0:	d1204017 	ldw	r4,-32512(gp)
  800af4:	08133880 	call	813388 <OSSemPost>
  800af8:	d0a04105 	stb	r2,-32508(gp)
				OSSemPend(loadsdcardsem, 0, &err);
  800afc:	d1203817 	ldw	r4,-32544(gp)
  800b00:	000b883a 	mov	r5,zero
  800b04:	d1a04104 	addi	r6,gp,-32508
  800b08:	0812f900 	call	812f90 <OSSemPend>
				//printf("%s\n", read_buffer);
				//OSQPost(message, (void*) &read_buffer);
			}
		}
	}
}
  800b0c:	003f3c06 	br	800800 <taskLoadSDCard+0xbc>

00800b10 <AverageTemplatePattern>:
	return;
}

//todo AveragePattern
void AverageTemplatePattern(int i)
{
  800b10:	defff704 	addi	sp,sp,-36
  800b14:	df000815 	stw	fp,32(sp)
  800b18:	df000804 	addi	fp,sp,32
  800b1c:	e13fff15 	stw	r4,-4(fp)
	int j;
	long prev_val_X[2] = {*(template[i].pX), *(template[i].pX+1)};
  800b20:	e0bfff17 	ldw	r2,-4(fp)
  800b24:	00c020f4 	movhi	r3,131
  800b28:	18fd5504 	addi	r3,r3,-2732
  800b2c:	10800324 	muli	r2,r2,12
  800b30:	10c5883a 	add	r2,r2,r3
  800b34:	10800017 	ldw	r2,0(r2)
  800b38:	10800017 	ldw	r2,0(r2)
  800b3c:	1009883a 	mov	r4,r2
  800b40:	e0bfff17 	ldw	r2,-4(fp)
  800b44:	00c020f4 	movhi	r3,131
  800b48:	18fd5504 	addi	r3,r3,-2732
  800b4c:	10800324 	muli	r2,r2,12
  800b50:	10c5883a 	add	r2,r2,r3
  800b54:	10800017 	ldw	r2,0(r2)
  800b58:	10800104 	addi	r2,r2,4
  800b5c:	10800017 	ldw	r2,0(r2)
  800b60:	e13ffb15 	stw	r4,-20(fp)
  800b64:	e0bffc15 	stw	r2,-16(fp)
	long prev_val_Y[2] = {*(template[i].pY), *(template[i].pY+1)};
  800b68:	e0bfff17 	ldw	r2,-4(fp)
  800b6c:	00c020f4 	movhi	r3,131
  800b70:	18fd5504 	addi	r3,r3,-2732
  800b74:	10800324 	muli	r2,r2,12
  800b78:	10c5883a 	add	r2,r2,r3
  800b7c:	10800104 	addi	r2,r2,4
  800b80:	10800017 	ldw	r2,0(r2)
  800b84:	10800017 	ldw	r2,0(r2)
  800b88:	1009883a 	mov	r4,r2
  800b8c:	e0bfff17 	ldw	r2,-4(fp)
  800b90:	00c020f4 	movhi	r3,131
  800b94:	18fd5504 	addi	r3,r3,-2732
  800b98:	10800324 	muli	r2,r2,12
  800b9c:	10c5883a 	add	r2,r2,r3
  800ba0:	10800104 	addi	r2,r2,4
  800ba4:	10800017 	ldw	r2,0(r2)
  800ba8:	10800104 	addi	r2,r2,4
  800bac:	10800017 	ldw	r2,0(r2)
  800bb0:	e13ffd15 	stw	r4,-12(fp)
  800bb4:	e0bffe15 	stw	r2,-8(fp)
	for (j = 0; j < template[i].size; j++)
  800bb8:	e03ffa15 	stw	zero,-24(fp)
  800bbc:	00010706 	br	800fdc <AverageTemplatePattern+0x4cc>
	{
		long tempX = 0;
  800bc0:	e03ff915 	stw	zero,-28(fp)
		long tempY = 0;
  800bc4:	e03ff815 	stw	zero,-32(fp)
		if (j < template[i].size-2)
  800bc8:	e0bfff17 	ldw	r2,-4(fp)
  800bcc:	00c020f4 	movhi	r3,131
  800bd0:	18fd5504 	addi	r3,r3,-2732
  800bd4:	10800324 	muli	r2,r2,12
  800bd8:	10c5883a 	add	r2,r2,r3
  800bdc:	10800204 	addi	r2,r2,8
  800be0:	10800017 	ldw	r2,0(r2)
  800be4:	10ffff84 	addi	r3,r2,-2
  800be8:	e0bffa17 	ldw	r2,-24(fp)
  800bec:	10c09a0e 	bge	r2,r3,800e58 <AverageTemplatePattern+0x348>
		{
			tempX = *((long*)template[i].pX + j);
  800bf0:	e0bfff17 	ldw	r2,-4(fp)
  800bf4:	00c020f4 	movhi	r3,131
  800bf8:	18fd5504 	addi	r3,r3,-2732
  800bfc:	10800324 	muli	r2,r2,12
  800c00:	10c5883a 	add	r2,r2,r3
  800c04:	10800017 	ldw	r2,0(r2)
  800c08:	1007883a 	mov	r3,r2
  800c0c:	e0bffa17 	ldw	r2,-24(fp)
  800c10:	1085883a 	add	r2,r2,r2
  800c14:	1085883a 	add	r2,r2,r2
  800c18:	1885883a 	add	r2,r3,r2
  800c1c:	10800017 	ldw	r2,0(r2)
  800c20:	e0bff915 	stw	r2,-28(fp)
			tempY = *((long*)template[i].pY + j);
  800c24:	e0bfff17 	ldw	r2,-4(fp)
  800c28:	00c020f4 	movhi	r3,131
  800c2c:	18fd5504 	addi	r3,r3,-2732
  800c30:	10800324 	muli	r2,r2,12
  800c34:	10c5883a 	add	r2,r2,r3
  800c38:	10800104 	addi	r2,r2,4
  800c3c:	10800017 	ldw	r2,0(r2)
  800c40:	1007883a 	mov	r3,r2
  800c44:	e0bffa17 	ldw	r2,-24(fp)
  800c48:	1085883a 	add	r2,r2,r2
  800c4c:	1085883a 	add	r2,r2,r2
  800c50:	1885883a 	add	r2,r3,r2
  800c54:	10800017 	ldw	r2,0(r2)
  800c58:	e0bff815 	stw	r2,-32(fp)
			*((long*)template[i].pX + j) = (prev_val_X[1] + prev_val_X[0] + *((long*)template[i].pX + j)
  800c5c:	e0bfff17 	ldw	r2,-4(fp)
  800c60:	00c020f4 	movhi	r3,131
  800c64:	18fd5504 	addi	r3,r3,-2732
  800c68:	10800324 	muli	r2,r2,12
  800c6c:	10c5883a 	add	r2,r2,r3
  800c70:	10800017 	ldw	r2,0(r2)
  800c74:	1007883a 	mov	r3,r2
  800c78:	e0bffa17 	ldw	r2,-24(fp)
  800c7c:	1085883a 	add	r2,r2,r2
  800c80:	1085883a 	add	r2,r2,r2
  800c84:	1889883a 	add	r4,r3,r2
  800c88:	e0fffc17 	ldw	r3,-16(fp)
  800c8c:	e0bffb17 	ldw	r2,-20(fp)
  800c90:	188b883a 	add	r5,r3,r2
  800c94:	e0bfff17 	ldw	r2,-4(fp)
  800c98:	00c020f4 	movhi	r3,131
  800c9c:	18fd5504 	addi	r3,r3,-2732
  800ca0:	10800324 	muli	r2,r2,12
  800ca4:	10c5883a 	add	r2,r2,r3
  800ca8:	10800017 	ldw	r2,0(r2)
  800cac:	1007883a 	mov	r3,r2
  800cb0:	e0bffa17 	ldw	r2,-24(fp)
  800cb4:	1085883a 	add	r2,r2,r2
  800cb8:	1085883a 	add	r2,r2,r2
  800cbc:	1885883a 	add	r2,r3,r2
  800cc0:	10800017 	ldw	r2,0(r2)
  800cc4:	288b883a 	add	r5,r5,r2
  800cc8:	e0bfff17 	ldw	r2,-4(fp)
  800ccc:	00c020f4 	movhi	r3,131
  800cd0:	18fd5504 	addi	r3,r3,-2732
  800cd4:	10800324 	muli	r2,r2,12
  800cd8:	10c5883a 	add	r2,r2,r3
  800cdc:	10800017 	ldw	r2,0(r2)
  800ce0:	1007883a 	mov	r3,r2
  800ce4:	e0bffa17 	ldw	r2,-24(fp)
  800ce8:	1085883a 	add	r2,r2,r2
  800cec:	1085883a 	add	r2,r2,r2
  800cf0:	1885883a 	add	r2,r3,r2
  800cf4:	10800104 	addi	r2,r2,4
  800cf8:	10800017 	ldw	r2,0(r2)
  800cfc:	288b883a 	add	r5,r5,r2
  800d00:	e0bfff17 	ldw	r2,-4(fp)
  800d04:	00c020f4 	movhi	r3,131
  800d08:	18fd5504 	addi	r3,r3,-2732
  800d0c:	10800324 	muli	r2,r2,12
  800d10:	10c5883a 	add	r2,r2,r3
  800d14:	10800017 	ldw	r2,0(r2)
  800d18:	1007883a 	mov	r3,r2
  800d1c:	e0bffa17 	ldw	r2,-24(fp)
  800d20:	1085883a 	add	r2,r2,r2
  800d24:	1085883a 	add	r2,r2,r2
  800d28:	1885883a 	add	r2,r3,r2
  800d2c:	10800204 	addi	r2,r2,8
  800d30:	10800017 	ldw	r2,0(r2)
  800d34:	2885883a 	add	r2,r5,r2
  800d38:	1085883a 	add	r2,r2,r2
  800d3c:	20800015 	stw	r2,0(r4)
									+ *((long*)template[i].pX + (j+1)) + *((long*)template[i].pX + (j+2)))*2;
			*((long*)template[i].pY + j) = (prev_val_Y[1] + prev_val_Y[0] + *((long*)template[i].pY + j)
  800d40:	e0bfff17 	ldw	r2,-4(fp)
  800d44:	00c020f4 	movhi	r3,131
  800d48:	18fd5504 	addi	r3,r3,-2732
  800d4c:	10800324 	muli	r2,r2,12
  800d50:	10c5883a 	add	r2,r2,r3
  800d54:	10800104 	addi	r2,r2,4
  800d58:	10800017 	ldw	r2,0(r2)
  800d5c:	1007883a 	mov	r3,r2
  800d60:	e0bffa17 	ldw	r2,-24(fp)
  800d64:	1085883a 	add	r2,r2,r2
  800d68:	1085883a 	add	r2,r2,r2
  800d6c:	1889883a 	add	r4,r3,r2
  800d70:	e0fffe17 	ldw	r3,-8(fp)
  800d74:	e0bffd17 	ldw	r2,-12(fp)
  800d78:	188b883a 	add	r5,r3,r2
  800d7c:	e0bfff17 	ldw	r2,-4(fp)
  800d80:	00c020f4 	movhi	r3,131
  800d84:	18fd5504 	addi	r3,r3,-2732
  800d88:	10800324 	muli	r2,r2,12
  800d8c:	10c5883a 	add	r2,r2,r3
  800d90:	10800104 	addi	r2,r2,4
  800d94:	10800017 	ldw	r2,0(r2)
  800d98:	1007883a 	mov	r3,r2
  800d9c:	e0bffa17 	ldw	r2,-24(fp)
  800da0:	1085883a 	add	r2,r2,r2
  800da4:	1085883a 	add	r2,r2,r2
  800da8:	1885883a 	add	r2,r3,r2
  800dac:	10800017 	ldw	r2,0(r2)
  800db0:	288b883a 	add	r5,r5,r2
  800db4:	e0bfff17 	ldw	r2,-4(fp)
  800db8:	00c020f4 	movhi	r3,131
  800dbc:	18fd5504 	addi	r3,r3,-2732
  800dc0:	10800324 	muli	r2,r2,12
  800dc4:	10c5883a 	add	r2,r2,r3
  800dc8:	10800104 	addi	r2,r2,4
  800dcc:	10800017 	ldw	r2,0(r2)
  800dd0:	1007883a 	mov	r3,r2
  800dd4:	e0bffa17 	ldw	r2,-24(fp)
  800dd8:	1085883a 	add	r2,r2,r2
  800ddc:	1085883a 	add	r2,r2,r2
  800de0:	1885883a 	add	r2,r3,r2
  800de4:	10800104 	addi	r2,r2,4
  800de8:	10800017 	ldw	r2,0(r2)
  800dec:	288b883a 	add	r5,r5,r2
  800df0:	e0bfff17 	ldw	r2,-4(fp)
  800df4:	00c020f4 	movhi	r3,131
  800df8:	18fd5504 	addi	r3,r3,-2732
  800dfc:	10800324 	muli	r2,r2,12
  800e00:	10c5883a 	add	r2,r2,r3
  800e04:	10800104 	addi	r2,r2,4
  800e08:	10800017 	ldw	r2,0(r2)
  800e0c:	1007883a 	mov	r3,r2
  800e10:	e0bffa17 	ldw	r2,-24(fp)
  800e14:	1085883a 	add	r2,r2,r2
  800e18:	1085883a 	add	r2,r2,r2
  800e1c:	1885883a 	add	r2,r3,r2
  800e20:	10800204 	addi	r2,r2,8
  800e24:	10800017 	ldw	r2,0(r2)
  800e28:	2885883a 	add	r2,r5,r2
  800e2c:	1085883a 	add	r2,r2,r2
  800e30:	20800015 	stw	r2,0(r4)
									+ *((long*)template[i].pY + (j+1)) + *((long*)template[i].pY + (j+2)))*2;
			prev_val_X[1] = prev_val_X[0];
  800e34:	e0bffb17 	ldw	r2,-20(fp)
  800e38:	e0bffc15 	stw	r2,-16(fp)
			prev_val_X[0] = tempX;
  800e3c:	e0bff917 	ldw	r2,-28(fp)
  800e40:	e0bffb15 	stw	r2,-20(fp)
			prev_val_Y[1] = prev_val_Y[0];
  800e44:	e0bffd17 	ldw	r2,-12(fp)
  800e48:	e0bffe15 	stw	r2,-8(fp)
			prev_val_Y[0] = tempY;
  800e4c:	e0bff817 	ldw	r2,-32(fp)
  800e50:	e0bffd15 	stw	r2,-12(fp)
  800e54:	00005e06 	br	800fd0 <AverageTemplatePattern+0x4c0>
		}
		else
		{
			tempX = *((long*)template[i].pX + j);
  800e58:	e0bfff17 	ldw	r2,-4(fp)
  800e5c:	00c020f4 	movhi	r3,131
  800e60:	18fd5504 	addi	r3,r3,-2732
  800e64:	10800324 	muli	r2,r2,12
  800e68:	10c5883a 	add	r2,r2,r3
  800e6c:	10800017 	ldw	r2,0(r2)
  800e70:	1007883a 	mov	r3,r2
  800e74:	e0bffa17 	ldw	r2,-24(fp)
  800e78:	1085883a 	add	r2,r2,r2
  800e7c:	1085883a 	add	r2,r2,r2
  800e80:	1885883a 	add	r2,r3,r2
  800e84:	10800017 	ldw	r2,0(r2)
  800e88:	e0bff915 	stw	r2,-28(fp)
			tempY = *((long*)template[i].pX + j);
  800e8c:	e0bfff17 	ldw	r2,-4(fp)
  800e90:	00c020f4 	movhi	r3,131
  800e94:	18fd5504 	addi	r3,r3,-2732
  800e98:	10800324 	muli	r2,r2,12
  800e9c:	10c5883a 	add	r2,r2,r3
  800ea0:	10800017 	ldw	r2,0(r2)
  800ea4:	1007883a 	mov	r3,r2
  800ea8:	e0bffa17 	ldw	r2,-24(fp)
  800eac:	1085883a 	add	r2,r2,r2
  800eb0:	1085883a 	add	r2,r2,r2
  800eb4:	1885883a 	add	r2,r3,r2
  800eb8:	10800017 	ldw	r2,0(r2)
  800ebc:	e0bff815 	stw	r2,-32(fp)
			*((long*)template[i].pX + j) = (prev_val_X[1] + prev_val_X[0] + *((long*)template[i].pX + j))*2;
  800ec0:	e0bfff17 	ldw	r2,-4(fp)
  800ec4:	00c020f4 	movhi	r3,131
  800ec8:	18fd5504 	addi	r3,r3,-2732
  800ecc:	10800324 	muli	r2,r2,12
  800ed0:	10c5883a 	add	r2,r2,r3
  800ed4:	10800017 	ldw	r2,0(r2)
  800ed8:	1007883a 	mov	r3,r2
  800edc:	e0bffa17 	ldw	r2,-24(fp)
  800ee0:	1085883a 	add	r2,r2,r2
  800ee4:	1085883a 	add	r2,r2,r2
  800ee8:	1889883a 	add	r4,r3,r2
  800eec:	e0fffc17 	ldw	r3,-16(fp)
  800ef0:	e0bffb17 	ldw	r2,-20(fp)
  800ef4:	188b883a 	add	r5,r3,r2
  800ef8:	e0bfff17 	ldw	r2,-4(fp)
  800efc:	00c020f4 	movhi	r3,131
  800f00:	18fd5504 	addi	r3,r3,-2732
  800f04:	10800324 	muli	r2,r2,12
  800f08:	10c5883a 	add	r2,r2,r3
  800f0c:	10800017 	ldw	r2,0(r2)
  800f10:	1007883a 	mov	r3,r2
  800f14:	e0bffa17 	ldw	r2,-24(fp)
  800f18:	1085883a 	add	r2,r2,r2
  800f1c:	1085883a 	add	r2,r2,r2
  800f20:	1885883a 	add	r2,r3,r2
  800f24:	10800017 	ldw	r2,0(r2)
  800f28:	2885883a 	add	r2,r5,r2
  800f2c:	1085883a 	add	r2,r2,r2
  800f30:	20800015 	stw	r2,0(r4)
			*((long*)template[i].pY + j) = (prev_val_Y[1] + prev_val_Y[0] + *((long*)template[i].pY + j))*2;
  800f34:	e0bfff17 	ldw	r2,-4(fp)
  800f38:	00c020f4 	movhi	r3,131
  800f3c:	18fd5504 	addi	r3,r3,-2732
  800f40:	10800324 	muli	r2,r2,12
  800f44:	10c5883a 	add	r2,r2,r3
  800f48:	10800104 	addi	r2,r2,4
  800f4c:	10800017 	ldw	r2,0(r2)
  800f50:	1007883a 	mov	r3,r2
  800f54:	e0bffa17 	ldw	r2,-24(fp)
  800f58:	1085883a 	add	r2,r2,r2
  800f5c:	1085883a 	add	r2,r2,r2
  800f60:	1889883a 	add	r4,r3,r2
  800f64:	e0fffe17 	ldw	r3,-8(fp)
  800f68:	e0bffd17 	ldw	r2,-12(fp)
  800f6c:	188b883a 	add	r5,r3,r2
  800f70:	e0bfff17 	ldw	r2,-4(fp)
  800f74:	00c020f4 	movhi	r3,131
  800f78:	18fd5504 	addi	r3,r3,-2732
  800f7c:	10800324 	muli	r2,r2,12
  800f80:	10c5883a 	add	r2,r2,r3
  800f84:	10800104 	addi	r2,r2,4
  800f88:	10800017 	ldw	r2,0(r2)
  800f8c:	1007883a 	mov	r3,r2
  800f90:	e0bffa17 	ldw	r2,-24(fp)
  800f94:	1085883a 	add	r2,r2,r2
  800f98:	1085883a 	add	r2,r2,r2
  800f9c:	1885883a 	add	r2,r3,r2
  800fa0:	10800017 	ldw	r2,0(r2)
  800fa4:	2885883a 	add	r2,r5,r2
  800fa8:	1085883a 	add	r2,r2,r2
  800fac:	20800015 	stw	r2,0(r4)
			prev_val_X[1] = prev_val_X[0];
  800fb0:	e0bffb17 	ldw	r2,-20(fp)
  800fb4:	e0bffc15 	stw	r2,-16(fp)
			prev_val_X[0] = tempX;
  800fb8:	e0bff917 	ldw	r2,-28(fp)
  800fbc:	e0bffb15 	stw	r2,-20(fp)
			prev_val_Y[1] = prev_val_Y[0];
  800fc0:	e0bffd17 	ldw	r2,-12(fp)
  800fc4:	e0bffe15 	stw	r2,-8(fp)
			prev_val_Y[0] = tempY;
  800fc8:	e0bff817 	ldw	r2,-32(fp)
  800fcc:	e0bffd15 	stw	r2,-12(fp)
void AverageTemplatePattern(int i)
{
	int j;
	long prev_val_X[2] = {*(template[i].pX), *(template[i].pX+1)};
	long prev_val_Y[2] = {*(template[i].pY), *(template[i].pY+1)};
	for (j = 0; j < template[i].size; j++)
  800fd0:	e0bffa17 	ldw	r2,-24(fp)
  800fd4:	10800044 	addi	r2,r2,1
  800fd8:	e0bffa15 	stw	r2,-24(fp)
  800fdc:	e0bfff17 	ldw	r2,-4(fp)
  800fe0:	00c020f4 	movhi	r3,131
  800fe4:	18fd5504 	addi	r3,r3,-2732
  800fe8:	10800324 	muli	r2,r2,12
  800fec:	10c5883a 	add	r2,r2,r3
  800ff0:	10800204 	addi	r2,r2,8
  800ff4:	10c00017 	ldw	r3,0(r2)
  800ff8:	e0bffa17 	ldw	r2,-24(fp)
  800ffc:	10fef016 	blt	r2,r3,800bc0 <AverageTemplatePattern+0xb0>
			prev_val_X[0] = tempX;
			prev_val_Y[1] = prev_val_Y[0];
			prev_val_Y[0] = tempY;
		}
	}
}
  801000:	e037883a 	mov	sp,fp
  801004:	df000017 	ldw	fp,0(sp)
  801008:	dec00104 	addi	sp,sp,4
  80100c:	f800283a 	ret

00801010 <taskCalibrate>:

//todo taskCalibrate
/* Calibrates the pen, stores the calibrations in SRAM. Posts to the SDCard write task to save the data.*/
void taskCalibrate(void* pdata) {
  801010:	defff304 	addi	sp,sp,-52
  801014:	dfc00c15 	stw	ra,48(sp)
  801018:	df000b15 	stw	fp,44(sp)
  80101c:	df000b04 	addi	fp,sp,44
  801020:	e13fff15 	stw	r4,-4(fp)
	OSSemPend(configuresem, 0, &err);
  801024:	d1203a17 	ldw	r4,-32536(gp)
  801028:	000b883a 	mov	r5,zero
  80102c:	d1a04104 	addi	r6,gp,-32508
  801030:	0812f900 	call	812f90 <OSSemPend>
	alt_u16 read_FIFO_used;
	alt_8 data_R8;
	unsigned p_error;
	alt_up_rs232_dev* rs232_dev;
	int index = 0;
  801034:	e03ffb15 	stw	zero,-20(fp)
	int i;
	int start = 0;
  801038:	e03ff915 	stw	zero,-28(fp)
	int coord = 0;
  80103c:	e03ff815 	stw	zero,-32(fp)
	int current_address = -1;
  801040:	00bfffc4 	movi	r2,-1
  801044:	e0bff715 	stw	r2,-36(fp)
	char* lcdbuffer = "Calibrating\0";
  801048:	008020b4 	movhi	r2,130
  80104c:	10b39f04 	addi	r2,r2,-12676
  801050:	e0bff615 	stw	r2,-40(fp)

	int reading = 0;
  801054:	e03ff515 	stw	zero,-44(fp)

	for(i=0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  801058:	e03ffa15 	stw	zero,-24(fp)
  80105c:	00001c06 	br	8010d0 <taskCalibrate+0xc0>
		array_8[i].pX = (alt_8*)((alt_u8*) SRAM_0_BASE) + sizeof(signed char)*(DTW_BASE + INPUT_SIZE*i);
  801060:	e17ffa17 	ldw	r5,-24(fp)
  801064:	e0bffa17 	ldw	r2,-24(fp)
  801068:	10803224 	muli	r2,r2,200
  80106c:	1007883a 	mov	r3,r2
  801070:	00806274 	movhi	r2,393
  801074:	108e2004 	addi	r2,r2,14464
  801078:	1889883a 	add	r4,r3,r2
  80107c:	00c020f4 	movhi	r3,131
  801080:	18cdf504 	addi	r3,r3,14292
  801084:	28800324 	muli	r2,r5,12
  801088:	10c5883a 	add	r2,r2,r3
  80108c:	11000015 	stw	r4,0(r2)
		array_8[i].pY = (alt_8*)((alt_u8*) SRAM_0_BASE) + sizeof(signed char)*(DTW_BASE + X_COORD_BASE + OFFSET + INPUT_SIZE*i);//1200 for 16 templates
  801090:	e17ffa17 	ldw	r5,-24(fp)
  801094:	e0bffa17 	ldw	r2,-24(fp)
  801098:	10803224 	muli	r2,r2,200
  80109c:	1007883a 	mov	r3,r2
  8010a0:	00806274 	movhi	r2,393
  8010a4:	10914004 	addi	r2,r2,17664
  8010a8:	1889883a 	add	r4,r3,r2
  8010ac:	00c020f4 	movhi	r3,131
  8010b0:	18cdf504 	addi	r3,r3,14292
  8010b4:	28800324 	muli	r2,r5,12
  8010b8:	10c5883a 	add	r2,r2,r3
  8010bc:	10800104 	addi	r2,r2,4
  8010c0:	11000015 	stw	r4,0(r2)
	int current_address = -1;
	char* lcdbuffer = "Calibrating\0";

	int reading = 0;

	for(i=0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  8010c4:	e0bffa17 	ldw	r2,-24(fp)
  8010c8:	10800044 	addi	r2,r2,1
  8010cc:	e0bffa15 	stw	r2,-24(fp)
  8010d0:	e0bffa17 	ldw	r2,-24(fp)
  8010d4:	10800410 	cmplti	r2,r2,16
  8010d8:	103fe11e 	bne	r2,zero,801060 <taskCalibrate+0x50>
//		array_8[i].pX = (alt_8*)((alt_u32*) SRAM_0_BASE) + sizeof(signed char)*(DTW_BASE + INPUT_SIZE*i);
//		array_8[i].pY = (alt_8*)((alt_u32*) SRAM_0_BASE) + sizeof(signed char)*(DTW_BASE + X_COORD_BASE + OFFSET + INPUT_SIZE*i);//1200 for 16 templates
//	}

	// open the RS232 UART port
	rs232_dev = alt_up_rs232_open_dev("/dev/rs232_0");
  8010dc:	010020b4 	movhi	r4,130
  8010e0:	2133a304 	addi	r4,r4,-12660
  8010e4:	0816e900 	call	816e90 <alt_up_rs232_open_dev>
  8010e8:	e0bffc15 	stw	r2,-16(fp)
	if (rs232_dev == NULL)
  8010ec:	e0bffc17 	ldw	r2,-16(fp)
  8010f0:	1004c03a 	cmpne	r2,r2,zero
  8010f4:	1000041e 	bne	r2,zero,801108 <taskCalibrate+0xf8>
		printf("Error: could not open RS232 UART\n");
  8010f8:	010020b4 	movhi	r4,130
  8010fc:	2133a704 	addi	r4,r4,-12644
  801100:	080442c0 	call	80442c <puts>
  801104:	00000306 	br	801114 <taskCalibrate+0x104>
	else
		printf("Opened RS232 UART device\n");
  801108:	010020b4 	movhi	r4,130
  80110c:	2133b004 	addi	r4,r4,-12608
  801110:	080442c0 	call	80442c <puts>

	alt_up_rs232_enable_read_interrupt(rs232_dev);
  801114:	e13ffc17 	ldw	r4,-16(fp)
  801118:	0816b380 	call	816b38 <alt_up_rs232_enable_read_interrupt>

	printf("UART Read For Configuration\n");
  80111c:	010020b4 	movhi	r4,130
  801120:	2133b704 	addi	r4,r4,-12580
  801124:	080442c0 	call	80442c <puts>
	printf("Starting Calibration. Write character 0...\n\n");
  801128:	010020b4 	movhi	r4,130
  80112c:	2133be04 	addi	r4,r4,-12552
  801130:	080442c0 	call	80442c <puts>

	OSQPost(lcdmessage, lcdbuffer);
  801134:	d1203017 	ldw	r4,-32576(gp)
  801138:	e17ff617 	ldw	r5,-40(fp)
  80113c:	08123b40 	call	8123b4 <OSQPost>
	//IOWR_32DIRECT(SEVEN_SEG_8_0_BASE, 0 , 0xffff);
	//IOWR_8DIRECT(SEVEN_SEG, 2, 0xDF);
	//DE2Set7SegDigit(0,0xc);
	//*SEVEN_SEG = 0xC;
	OSTimeDlyHMSM(0, 0, 3, 0);
  801140:	0009883a 	mov	r4,zero
  801144:	000b883a 	mov	r5,zero
  801148:	018000c4 	movi	r6,3
  80114c:	000f883a 	mov	r7,zero
  801150:	08152700 	call	815270 <OSTimeDlyHMSM>
	//IOWR_8DIRECT(SEVEN_SEG, 0, 0xf);
	//*SEVEN_SEG = 0;
	while (1) {

		// Read from UART
		read_FIFO_used = alt_up_rs232_get_used_space_in_read_FIFO(rs232_dev);
  801154:	e13ffc17 	ldw	r4,-16(fp)
  801158:	0816be40 	call	816be4 <alt_up_rs232_get_used_space_in_read_FIFO>
  80115c:	e0bffd0d 	sth	r2,-12(fp)
		if (read_FIFO_used > READ_FIFO_EMPTY) {
  801160:	e0bffd0b 	ldhu	r2,-12(fp)
  801164:	1005003a 	cmpeq	r2,r2,zero
  801168:	10005d1e 	bne	r2,zero,8012e0 <taskCalibrate+0x2d0>
			//alt_printf("char stored in read_FIFO: %x\n", read_FIFO_used);
			alt_up_rs232_read_data(rs232_dev, &data_R8, &p_error);
  80116c:	e17ffd84 	addi	r5,fp,-10
  801170:	e1bffe04 	addi	r6,fp,-8
  801174:	e13ffc17 	ldw	r4,-16(fp)
  801178:	0816cf80 	call	816cf8 <alt_up_rs232_read_data>
			//alt_printf("read %c from RS232 UART\n", data_R8);

			if (reading == 0) {
  80117c:	e0bff517 	ldw	r2,-44(fp)
  801180:	1004c03a 	cmpne	r2,r2,zero
  801184:	10000a1e 	bne	r2,zero,8011b0 <taskCalibrate+0x1a0>
				reading = 1;
  801188:	00800044 	movi	r2,1
  80118c:	e0bff515 	stw	r2,-44(fp)
				if (current_address == TEMP_ARRAY_BUFF_SIZE - 1) {
  801190:	e0bff717 	ldw	r2,-36(fp)
  801194:	108003d8 	cmpnei	r2,r2,15
  801198:	1000021e 	bne	r2,zero,8011a4 <taskCalibrate+0x194>
					current_address = 0;
  80119c:	e03ff715 	stw	zero,-36(fp)
  8011a0:	00000306 	br	8011b0 <taskCalibrate+0x1a0>
				}
				else {
					current_address++;
  8011a4:	e0bff717 	ldw	r2,-36(fp)
  8011a8:	10800044 	addi	r2,r2,1
  8011ac:	e0bff715 	stw	r2,-36(fp)
				}
			 }

			if(coord == 0 && index <= INPUT_SIZE) {
  8011b0:	e0bff817 	ldw	r2,-32(fp)
  8011b4:	1004c03a 	cmpne	r2,r2,zero
  8011b8:	10001f1e 	bne	r2,zero,801238 <taskCalibrate+0x228>
  8011bc:	e0bffb17 	ldw	r2,-20(fp)
  8011c0:	10803248 	cmpgei	r2,r2,201
  8011c4:	10001c1e 	bne	r2,zero,801238 <taskCalibrate+0x228>
				//alt_printf("read %c from RS232 UART\n", data_R8);
				//*(array_8[current_address].pX + sizeof(unsigned char)*index) = (unsigned char)data_R8;
				//*(array_8[current_address].pX + sizeof(unsigned char)*index) = data_R8;
				*((unsigned char*)array_8[current_address].pX + index) = data_R8;
  8011c8:	e0bff717 	ldw	r2,-36(fp)
  8011cc:	00c020f4 	movhi	r3,131
  8011d0:	18cdf504 	addi	r3,r3,14292
  8011d4:	10800324 	muli	r2,r2,12
  8011d8:	10c5883a 	add	r2,r2,r3
  8011dc:	10800017 	ldw	r2,0(r2)
  8011e0:	1007883a 	mov	r3,r2
  8011e4:	e0bffb17 	ldw	r2,-20(fp)
  8011e8:	1887883a 	add	r3,r3,r2
  8011ec:	e0bffd83 	ldbu	r2,-10(fp)
  8011f0:	18800005 	stb	r2,0(r3)
				printf("x =%d\n", (short int)*((unsigned char*)array_8[current_address].pX + index));
  8011f4:	e0bff717 	ldw	r2,-36(fp)
  8011f8:	00c020f4 	movhi	r3,131
  8011fc:	18cdf504 	addi	r3,r3,14292
  801200:	10800324 	muli	r2,r2,12
  801204:	10c5883a 	add	r2,r2,r3
  801208:	10800017 	ldw	r2,0(r2)
  80120c:	1007883a 	mov	r3,r2
  801210:	e0bffb17 	ldw	r2,-20(fp)
  801214:	1885883a 	add	r2,r3,r2
  801218:	10800003 	ldbu	r2,0(r2)
  80121c:	11403fcc 	andi	r5,r2,255
  801220:	010020b4 	movhi	r4,130
  801224:	2133c904 	addi	r4,r4,-12508
  801228:	08043140 	call	804314 <printf>
				coord = 1;
  80122c:	00800044 	movi	r2,1
  801230:	e0bff815 	stw	r2,-32(fp)
				else {
					current_address++;
				}
			 }

			if(coord == 0 && index <= INPUT_SIZE) {
  801234:	00005206 	br	801380 <taskCalibrate+0x370>
				*((unsigned char*)array_8[current_address].pX + index) = data_R8;
				printf("x =%d\n", (short int)*((unsigned char*)array_8[current_address].pX + index));
				coord = 1;
				//index++;
			}
			else if(coord == 1){
  801238:	e0bff817 	ldw	r2,-32(fp)
  80123c:	10800058 	cmpnei	r2,r2,1
  801240:	1000231e 	bne	r2,zero,8012d0 <taskCalibrate+0x2c0>
				*((unsigned char*)array_8[current_address].pY + index) = (unsigned char)data_R8;
  801244:	e0bff717 	ldw	r2,-36(fp)
  801248:	00c020f4 	movhi	r3,131
  80124c:	18cdf504 	addi	r3,r3,14292
  801250:	10800324 	muli	r2,r2,12
  801254:	10c5883a 	add	r2,r2,r3
  801258:	10800104 	addi	r2,r2,4
  80125c:	10800017 	ldw	r2,0(r2)
  801260:	1007883a 	mov	r3,r2
  801264:	e0bffb17 	ldw	r2,-20(fp)
  801268:	1887883a 	add	r3,r3,r2
  80126c:	e0bffd83 	ldbu	r2,-10(fp)
  801270:	18800005 	stb	r2,0(r3)
				printf("y =%d\n", (short int)*((unsigned char*)array_8[current_address].pY + index));
  801274:	e0bff717 	ldw	r2,-36(fp)
  801278:	00c020f4 	movhi	r3,131
  80127c:	18cdf504 	addi	r3,r3,14292
  801280:	10800324 	muli	r2,r2,12
  801284:	10c5883a 	add	r2,r2,r3
  801288:	10800104 	addi	r2,r2,4
  80128c:	10800017 	ldw	r2,0(r2)
  801290:	1007883a 	mov	r3,r2
  801294:	e0bffb17 	ldw	r2,-20(fp)
  801298:	1885883a 	add	r2,r3,r2
  80129c:	10800003 	ldbu	r2,0(r2)
  8012a0:	11403fcc 	andi	r5,r2,255
  8012a4:	010020b4 	movhi	r4,130
  8012a8:	2133cb04 	addi	r4,r4,-12500
  8012ac:	08043140 	call	804314 <printf>

				if(index < INPUT_SIZE){
  8012b0:	e0bffb17 	ldw	r2,-20(fp)
  8012b4:	10803208 	cmpgei	r2,r2,200
  8012b8:	1000031e 	bne	r2,zero,8012c8 <taskCalibrate+0x2b8>
					index++;
  8012bc:	e0bffb17 	ldw	r2,-20(fp)
  8012c0:	10800044 	addi	r2,r2,1
  8012c4:	e0bffb15 	stw	r2,-20(fp)
				}
				coord = 0;
  8012c8:	e03ff815 	stw	zero,-32(fp)
  8012cc:	00002c06 	br	801380 <taskCalibrate+0x370>
			}
			else{
				printf("sync issue\n");
  8012d0:	010020b4 	movhi	r4,130
  8012d4:	2133cd04 	addi	r4,r4,-12492
  8012d8:	080442c0 	call	80442c <puts>
  8012dc:	00002806 	br	801380 <taskCalibrate+0x370>
			}

		}
			else {
			//detect end of character values
			if (reading) {
  8012e0:	e0bff517 	ldw	r2,-44(fp)
  8012e4:	1005003a 	cmpeq	r2,r2,zero
  8012e8:	1000251e 	bne	r2,zero,801380 <taskCalibrate+0x370>
				start++;
  8012ec:	e0bff917 	ldw	r2,-28(fp)
  8012f0:	10800044 	addi	r2,r2,1
  8012f4:	e0bff915 	stw	r2,-28(fp)
				//finished character value
				if (start == 2) {
  8012f8:	e0bff917 	ldw	r2,-28(fp)
  8012fc:	10800098 	cmpnei	r2,r2,2
  801300:	10001f1e 	bne	r2,zero,801380 <taskCalibrate+0x370>
					array_8[current_address].size = index;
  801304:	e0bff717 	ldw	r2,-36(fp)
  801308:	00c020f4 	movhi	r3,131
  80130c:	18cdf504 	addi	r3,r3,14292
  801310:	10800324 	muli	r2,r2,12
  801314:	10c5883a 	add	r2,r2,r3
  801318:	10c00204 	addi	r3,r2,8
  80131c:	e0bffb17 	ldw	r2,-20(fp)
  801320:	18800015 	stw	r2,0(r3)
					if(current_address != TEMP_ARRAY_BUFF_SIZE - 1 ){
  801324:	e0bff717 	ldw	r2,-36(fp)
  801328:	108003e0 	cmpeqi	r2,r2,15
  80132c:	1000071e 	bne	r2,zero,80134c <taskCalibrate+0x33c>
						printf("Finished reading character %d, write character %d...\n", current_address, current_address + 1);
  801330:	e0bff717 	ldw	r2,-36(fp)
  801334:	11800044 	addi	r6,r2,1
  801338:	010020b4 	movhi	r4,130
  80133c:	2133d004 	addi	r4,r4,-12480
  801340:	e17ff717 	ldw	r5,-36(fp)
  801344:	08043140 	call	804314 <printf>
  801348:	00000a06 	br	801374 <taskCalibrate+0x364>
						//*SEVEN_SEG = current_address + 1;
						//printf("Finished reading character %d, write character %d...\n", current_address, current_address + 1);

					}
					else{
						printf("Finished reading character %d, Starting SDCard Write Task\n", current_address);
  80134c:	010020b4 	movhi	r4,130
  801350:	2133de04 	addi	r4,r4,-12424
  801354:	e17ff717 	ldw	r5,-36(fp)
  801358:	08043140 	call	804314 <printf>
//						for(i=0; i < TEMP_ARRAY_BUFF_SIZE; i++){
//							printf("%ld\n", array_8[i].pX
//						}
						OSSemPost(writesem);
  80135c:	d1203917 	ldw	r4,-32540(gp)
  801360:	08133880 	call	813388 <OSSemPost>
						OSSemPend(configuresem, 0, &err);
  801364:	d1203a17 	ldw	r4,-32536(gp)
  801368:	000b883a 	mov	r5,zero
  80136c:	d1a04104 	addi	r6,gp,-32508
  801370:	0812f900 	call	812f90 <OSSemPend>
					}

					index = 0;
  801374:	e03ffb15 	stw	zero,-20(fp)
					start = 0;
  801378:	e03ff915 	stw	zero,-28(fp)
					reading = 0;
  80137c:	e03ff515 	stw	zero,-44(fp)
				}
			}
		}
		OSTimeDlyHMSM(0, 0, 0, 5);
  801380:	0009883a 	mov	r4,zero
  801384:	000b883a 	mov	r5,zero
  801388:	000d883a 	mov	r6,zero
  80138c:	01c00144 	movi	r7,5
  801390:	08152700 	call	815270 <OSTimeDlyHMSM>
	}
  801394:	003f6f06 	br	801154 <taskCalibrate+0x144>

00801398 <taskWriteSDCard>:
}

//todo WriteSDCARD
/* Checks for an SDCard, and writes the configuration data to the card. Pends on the calibration task.  */
void taskWriteSDCard(void* pdata) {
  801398:	defff504 	addi	sp,sp,-44
  80139c:	dfc00a15 	stw	ra,40(sp)
  8013a0:	df000915 	stw	fp,36(sp)
  8013a4:	df000904 	addi	fp,sp,36
  8013a8:	e13fff15 	stw	r4,-4(fp)
	//char * read_buffer[SD_BUFFER_SIZE];
	int i;
	int j;
	alt_8 temp;
	bool b;
	char * lcdbuffer = "Finished Saving\0";
  8013ac:	008020b4 	movhi	r2,130
  8013b0:	10b3ed04 	addi	r2,r2,-12364
  8013b4:	e0bff915 	stw	r2,-28(fp)
  8013b8:	00000006 	br	8013bc <taskWriteSDCard+0x24>
	short int a;
	while (1) {

		OSSemPend(writesem, 0, &err);
  8013bc:	d1203917 	ldw	r4,-32540(gp)
  8013c0:	000b883a 	mov	r5,zero
  8013c4:	d1a04104 	addi	r6,gp,-32508
  8013c8:	0812f900 	call	812f90 <OSSemPend>
		printf("SD Card Write for configuration\n");
  8013cc:	010020b4 	movhi	r4,130
  8013d0:	2133f204 	addi	r4,r4,-12344
  8013d4:	080442c0 	call	80442c <puts>

		alt_up_sd_card_dev *sd_card_dev = alt_up_sd_card_open_dev(
				ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
  8013d8:	010020b4 	movhi	r4,130
  8013dc:	21334a04 	addi	r4,r4,-13016
  8013e0:	0819c2c0 	call	819c2c <alt_up_sd_card_open_dev>
  8013e4:	e0bff715 	stw	r2,-36(fp)

		if (sd_card_dev != 0) {
  8013e8:	e0bff717 	ldw	r2,-36(fp)
  8013ec:	1005003a 	cmpeq	r2,r2,zero
  8013f0:	103ff21e 	bne	r2,zero,8013bc <taskWriteSDCard+0x24>
			if (alt_up_sd_card_is_Present()) {
  8013f4:	0819cf00 	call	819cf0 <alt_up_sd_card_is_Present>
  8013f8:	1005003a 	cmpeq	r2,r2,zero
  8013fc:	103fef1e 	bne	r2,zero,8013bc <taskWriteSDCard+0x24>
				if (alt_up_sd_card_is_FAT16())
  801400:	0819db80 	call	819db8 <alt_up_sd_card_is_FAT16>
  801404:	1005003a 	cmpeq	r2,r2,zero
  801408:	1000041e 	bne	r2,zero,80141c <taskWriteSDCard+0x84>
					printf("Card is FAT16\n");
  80140c:	010020b4 	movhi	r4,130
  801410:	21335504 	addi	r4,r4,-12972
  801414:	080442c0 	call	80442c <puts>
  801418:	00000306 	br	801428 <taskWriteSDCard+0x90>
				else
					printf("Card is not FAT16\n");
  80141c:	010020b4 	movhi	r4,130
  801420:	21335904 	addi	r4,r4,-12956
  801424:	080442c0 	call	80442c <puts>

				sd_fileh = alt_up_sd_card_fopen("file.txt", false);
  801428:	010020b4 	movhi	r4,130
  80142c:	21335e04 	addi	r4,r4,-12936
  801430:	000b883a 	mov	r5,zero
  801434:	081a2b00 	call	81a2b0 <alt_up_sd_card_fopen>
  801438:	e0bffe0d 	sth	r2,-8(fp)

				if (sd_fileh < 0)
  80143c:	e0bffe0f 	ldh	r2,-8(fp)
  801440:	1004403a 	cmpge	r2,r2,zero
  801444:	1000051e 	bne	r2,zero,80145c <taskWriteSDCard+0xc4>
					printf("Problem creating file. Error %i", sd_fileh);
  801448:	e17ffe0f 	ldh	r5,-8(fp)
  80144c:	010020b4 	movhi	r4,130
  801450:	2133fa04 	addi	r4,r4,-12312
  801454:	08043140 	call	804314 <printf>
  801458:	003fd806 	br	8013bc <taskWriteSDCard+0x24>
				else {
					printf("SD Accessed Successfully, writing data...\n");
  80145c:	010020b4 	movhi	r4,130
  801460:	21340204 	addi	r4,r4,-12280
  801464:	080442c0 	call	80442c <puts>

					for(i = 0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  801468:	e03ffd15 	stw	zero,-12(fp)
  80146c:	00004e06 	br	8015a8 <taskWriteSDCard+0x210>
						temp = (unsigned char) array_8[i].size;
  801470:	e0bffd17 	ldw	r2,-12(fp)
  801474:	00c020f4 	movhi	r3,131
  801478:	18cdf504 	addi	r3,r3,14292
  80147c:	10800324 	muli	r2,r2,12
  801480:	10c5883a 	add	r2,r2,r3
  801484:	10800204 	addi	r2,r2,8
  801488:	10800017 	ldw	r2,0(r2)
  80148c:	e0bffb05 	stb	r2,-20(fp)
						//temp = 1;
						alt_up_sd_card_write(sd_fileh, temp);
  801490:	e13ffe0f 	ldh	r4,-8(fp)
  801494:	e17ffb07 	ldb	r5,-20(fp)
  801498:	081ab100 	call	81ab10 <alt_up_sd_card_write>
						//printf("%d\n", array_8[i].size);
						//for x values
						for(j = 0; j < array_8[i].size; j++){
  80149c:	e03ffc15 	stw	zero,-16(fp)
  8014a0:	00001806 	br	801504 <taskWriteSDCard+0x16c>
							temp = (*((unsigned char*)array_8[i].pX + j));
  8014a4:	e0bffd17 	ldw	r2,-12(fp)
  8014a8:	00c020f4 	movhi	r3,131
  8014ac:	18cdf504 	addi	r3,r3,14292
  8014b0:	10800324 	muli	r2,r2,12
  8014b4:	10c5883a 	add	r2,r2,r3
  8014b8:	10800017 	ldw	r2,0(r2)
  8014bc:	1007883a 	mov	r3,r2
  8014c0:	e0bffc17 	ldw	r2,-16(fp)
  8014c4:	1885883a 	add	r2,r3,r2
  8014c8:	10800003 	ldbu	r2,0(r2)
  8014cc:	e0bffb05 	stb	r2,-20(fp)
							//temp = 1;
							//printf("%c\n", (unsigned char)(*(array_8[i].pX + j*sizeof(signed char))));
							//a = temp;
							//printf("%i\n", a);
							b = alt_up_sd_card_write(sd_fileh, temp);
  8014d0:	e13ffe0f 	ldh	r4,-8(fp)
  8014d4:	e17ffb07 	ldb	r5,-20(fp)
  8014d8:	081ab100 	call	81ab10 <alt_up_sd_card_write>
  8014dc:	e0bffa15 	stw	r2,-24(fp)
							if(!b){
  8014e0:	e0bffa17 	ldw	r2,-24(fp)
  8014e4:	1004c03a 	cmpne	r2,r2,zero
  8014e8:	1000031e 	bne	r2,zero,8014f8 <taskWriteSDCard+0x160>
								printf("error\n");
  8014ec:	010020b4 	movhi	r4,130
  8014f0:	21340d04 	addi	r4,r4,-12236
  8014f4:	080442c0 	call	80442c <puts>
						temp = (unsigned char) array_8[i].size;
						//temp = 1;
						alt_up_sd_card_write(sd_fileh, temp);
						//printf("%d\n", array_8[i].size);
						//for x values
						for(j = 0; j < array_8[i].size; j++){
  8014f8:	e0bffc17 	ldw	r2,-16(fp)
  8014fc:	10800044 	addi	r2,r2,1
  801500:	e0bffc15 	stw	r2,-16(fp)
  801504:	e0bffd17 	ldw	r2,-12(fp)
  801508:	00c020f4 	movhi	r3,131
  80150c:	18cdf504 	addi	r3,r3,14292
  801510:	10800324 	muli	r2,r2,12
  801514:	10c5883a 	add	r2,r2,r3
  801518:	10800204 	addi	r2,r2,8
  80151c:	10c00017 	ldw	r3,0(r2)
  801520:	e0bffc17 	ldw	r2,-16(fp)
  801524:	10ffdf16 	blt	r2,r3,8014a4 <taskWriteSDCard+0x10c>
							if(!b){
								printf("error\n");
							}
						}
						//for y values
						for(j = 0; j < array_8[i].size; j++){
  801528:	e03ffc15 	stw	zero,-16(fp)
  80152c:	00001206 	br	801578 <taskWriteSDCard+0x1e0>
							temp = (*((unsigned char*)array_8[i].pY + j));
  801530:	e0bffd17 	ldw	r2,-12(fp)
  801534:	00c020f4 	movhi	r3,131
  801538:	18cdf504 	addi	r3,r3,14292
  80153c:	10800324 	muli	r2,r2,12
  801540:	10c5883a 	add	r2,r2,r3
  801544:	10800104 	addi	r2,r2,4
  801548:	10800017 	ldw	r2,0(r2)
  80154c:	1007883a 	mov	r3,r2
  801550:	e0bffc17 	ldw	r2,-16(fp)
  801554:	1885883a 	add	r2,r3,r2
  801558:	10800003 	ldbu	r2,0(r2)
  80155c:	e0bffb05 	stb	r2,-20(fp)
							//temp = (unsigned char)(*(array_8[i].pY + j*sizeof(signed char)));
							//temp = 1;
							//printf("%c\n", temp);
							alt_up_sd_card_write(sd_fileh, temp);
  801560:	e13ffe0f 	ldh	r4,-8(fp)
  801564:	e17ffb07 	ldb	r5,-20(fp)
  801568:	081ab100 	call	81ab10 <alt_up_sd_card_write>
							if(!b){
								printf("error\n");
							}
						}
						//for y values
						for(j = 0; j < array_8[i].size; j++){
  80156c:	e0bffc17 	ldw	r2,-16(fp)
  801570:	10800044 	addi	r2,r2,1
  801574:	e0bffc15 	stw	r2,-16(fp)
  801578:	e0bffd17 	ldw	r2,-12(fp)
  80157c:	00c020f4 	movhi	r3,131
  801580:	18cdf504 	addi	r3,r3,14292
  801584:	10800324 	muli	r2,r2,12
  801588:	10c5883a 	add	r2,r2,r3
  80158c:	10800204 	addi	r2,r2,8
  801590:	10c00017 	ldw	r3,0(r2)
  801594:	e0bffc17 	ldw	r2,-16(fp)
  801598:	10ffe516 	blt	r2,r3,801530 <taskWriteSDCard+0x198>
				if (sd_fileh < 0)
					printf("Problem creating file. Error %i", sd_fileh);
				else {
					printf("SD Accessed Successfully, writing data...\n");

					for(i = 0; i < TEMP_ARRAY_BUFF_SIZE; i++){
  80159c:	e0bffd17 	ldw	r2,-12(fp)
  8015a0:	10800044 	addi	r2,r2,1
  8015a4:	e0bffd15 	stw	r2,-12(fp)
  8015a8:	e0bffd17 	ldw	r2,-12(fp)
  8015ac:	10800410 	cmplti	r2,r2,16
  8015b0:	103faf1e 	bne	r2,zero,801470 <taskWriteSDCard+0xd8>
							//temp = 1;
							//printf("%c\n", temp);
							alt_up_sd_card_write(sd_fileh, temp);
						}
					}
					alt_up_sd_card_write(sd_fileh, '\0');
  8015b4:	e13ffe0f 	ldh	r4,-8(fp)
  8015b8:	000b883a 	mov	r5,zero
  8015bc:	081ab100 	call	81ab10 <alt_up_sd_card_write>

					printf("Done!\n");
  8015c0:	010020b4 	movhi	r4,130
  8015c4:	21339904 	addi	r4,r4,-12700
  8015c8:	080442c0 	call	80442c <puts>
					printf("Closing File...");
  8015cc:	010020b4 	movhi	r4,130
  8015d0:	21339b04 	addi	r4,r4,-12692
  8015d4:	08043140 	call	804314 <printf>
					alt_up_sd_card_fclose(sd_fileh);
  8015d8:	e13ffe0f 	ldh	r4,-8(fp)
  8015dc:	081b1340 	call	81b134 <alt_up_sd_card_fclose>
					printf("Done!\n\n");
  8015e0:	010020b4 	movhi	r4,130
  8015e4:	21340f04 	addi	r4,r4,-12228
  8015e8:	080442c0 	call	80442c <puts>
					OSQPost(lcdmessage, lcdbuffer);
  8015ec:	d1203017 	ldw	r4,-32576(gp)
  8015f0:	e17ff917 	ldw	r5,-28(fp)
  8015f4:	08123b40 	call	8123b4 <OSQPost>
					OSSemPend(writesem, 0, &err);
  8015f8:	d1203917 	ldw	r4,-32540(gp)
  8015fc:	000b883a 	mov	r5,zero
  801600:	d1a04104 	addi	r6,gp,-32508
  801604:	0812f900 	call	812f90 <OSSemPend>
					//OSSemPost(readsem);
				}
			}
		}
	}
  801608:	003f6c06 	br	8013bc <taskWriteSDCard+0x24>

0080160c <taskCharacterRead>:
}

//todo CharacterRead
/* Task to read a character from the UART */
void taskCharacterRead(void* pdata) {
  80160c:	deffe604 	addi	sp,sp,-104
  801610:	dfc01915 	stw	ra,100(sp)
  801614:	df001815 	stw	fp,96(sp)
  801618:	df001804 	addi	fp,sp,96
  80161c:	e13fff15 	stw	r4,-4(fp)
	OSSemPend(uartsem, 0, &err);
  801620:	d1203b17 	ldw	r4,-32532(gp)
  801624:	000b883a 	mov	r5,zero
  801628:	d1a04104 	addi	r6,gp,-32508
  80162c:	0812f900 	call	812f90 <OSSemPend>
	alt_8 data_R8;
	unsigned p_error;
	alt_up_rs232_dev* rs232_dev;
	int buffer[BUFFER_SIZE];
//	char * pbuffer = buffer;
	int index = 0;
  801630:	e03ff115 	stw	zero,-60(fp)
	int i;
	int start = 0;
  801634:	e03fef15 	stw	zero,-68(fp)
	//int sram_ready = 0;
	int coord = 0;
  801638:	e03fee15 	stw	zero,-72(fp)
	int current_address = -1;
  80163c:	00bfffc4 	movi	r2,-1
  801640:	e0bfed15 	stw	r2,-76(fp)
	int reading = 0;
  801644:	e03fec15 	stw	zero,-80(fp)
//	int msg[BUFFER_SIZE];
//	int val;
	int k;
	short int a;
	signed long test;
	char * lcdbuffer = "Ready to read\0";
  801648:	008020b4 	movhi	r2,130
  80164c:	10b41104 	addi	r2,r2,-12220
  801650:	e0bfe815 	stw	r2,-96(fp)

	buffer[0] = -1;
  801654:	00bfffc4 	movi	r2,-1
  801658:	e0bff515 	stw	r2,-44(fp)
	buffer[1] = -1;
  80165c:	00bfffc4 	movi	r2,-1
  801660:	e0bff615 	stw	r2,-40(fp)

	//todo replace 10 with define
	for(i=0; i < 10; i++){
  801664:	e03ff015 	stw	zero,-64(fp)
  801668:	00001e06 	br	8016e4 <taskCharacterRead+0xd8>
		array[i].pX = ((alt_u32*) SRAM_0_BASE) + (DTW_BASE + INPUT_SIZE*i);
  80166c:	e17ff017 	ldw	r5,-64(fp)
  801670:	e0bff017 	ldw	r2,-64(fp)
  801674:	1080c824 	muli	r2,r2,800
  801678:	1007883a 	mov	r3,r2
  80167c:	00806374 	movhi	r2,397
  801680:	10b88004 	addi	r2,r2,-7680
  801684:	1885883a 	add	r2,r3,r2
  801688:	1009883a 	mov	r4,r2
  80168c:	00c020f4 	movhi	r3,131
  801690:	18fd8504 	addi	r3,r3,-2540
  801694:	28800324 	muli	r2,r5,12
  801698:	10c5883a 	add	r2,r2,r3
  80169c:	11000015 	stw	r4,0(r2)
		array[i].pY = ((alt_u32*) SRAM_0_BASE) + (DTW_BASE + X_COORD_BASE + INPUT_SIZE*i);
  8016a0:	e17ff017 	ldw	r5,-64(fp)
  8016a4:	e0bff017 	ldw	r2,-64(fp)
  8016a8:	1080c824 	muli	r2,r2,800
  8016ac:	1007883a 	mov	r3,r2
  8016b0:	00806374 	movhi	r2,397
  8016b4:	10805004 	addi	r2,r2,320
  8016b8:	1885883a 	add	r2,r3,r2
  8016bc:	1009883a 	mov	r4,r2
  8016c0:	00c020f4 	movhi	r3,131
  8016c4:	18fd8504 	addi	r3,r3,-2540
  8016c8:	28800324 	muli	r2,r5,12
  8016cc:	10c5883a 	add	r2,r2,r3
  8016d0:	10800104 	addi	r2,r2,4
  8016d4:	11000015 	stw	r4,0(r2)

	buffer[0] = -1;
	buffer[1] = -1;

	//todo replace 10 with define
	for(i=0; i < 10; i++){
  8016d8:	e0bff017 	ldw	r2,-64(fp)
  8016dc:	10800044 	addi	r2,r2,1
  8016e0:	e0bff015 	stw	r2,-64(fp)
  8016e4:	e0bff017 	ldw	r2,-64(fp)
  8016e8:	10800290 	cmplti	r2,r2,10
  8016ec:	103fdf1e 	bne	r2,zero,80166c <taskCharacterRead+0x60>
//
//		printf("address 0x%08x\n", ptr1 );
//		ptr1 += sizeof(long);
//	}
	// open the RS232 UART port
	rs232_dev = alt_up_rs232_open_dev("/dev/rs232_0");
  8016f0:	010020b4 	movhi	r4,130
  8016f4:	2133a304 	addi	r4,r4,-12660
  8016f8:	0816e900 	call	816e90 <alt_up_rs232_open_dev>
  8016fc:	e0bff215 	stw	r2,-56(fp)
	if (rs232_dev == NULL)
  801700:	e0bff217 	ldw	r2,-56(fp)
  801704:	1004c03a 	cmpne	r2,r2,zero
  801708:	1000041e 	bne	r2,zero,80171c <taskCharacterRead+0x110>
		printf("Error: could not open RS232 UART\n");
  80170c:	010020b4 	movhi	r4,130
  801710:	2133a704 	addi	r4,r4,-12644
  801714:	080442c0 	call	80442c <puts>
  801718:	00000306 	br	801728 <taskCharacterRead+0x11c>
	else
		printf("Opened RS232 UART device\n");
  80171c:	010020b4 	movhi	r4,130
  801720:	2133b004 	addi	r4,r4,-12608
  801724:	080442c0 	call	80442c <puts>

	alt_up_rs232_enable_read_interrupt(rs232_dev);
  801728:	e13ff217 	ldw	r4,-56(fp)
  80172c:	0816b380 	call	816b38 <alt_up_rs232_enable_read_interrupt>

	printf("UART Ready for input\n");
  801730:	010020b4 	movhi	r4,130
  801734:	21341504 	addi	r4,r4,-12204
  801738:	080442c0 	call	80442c <puts>
	OSQPost(lcdmessage, lcdbuffer);
  80173c:	d1203017 	ldw	r4,-32576(gp)
  801740:	e17fe817 	ldw	r5,-96(fp)
  801744:	08123b40 	call	8123b4 <OSQPost>
	while (1) {

		//character values read
		if((buffer[0] != -1)){
  801748:	e0bff517 	ldw	r2,-44(fp)
  80174c:	10bfffe0 	cmpeqi	r2,r2,-1
  801750:	10005b1e 	bne	r2,zero,8018c0 <taskCharacterRead+0x2b4>

			//resource available
			//printf("\n*********************FINISHED READING A CHARACTER******************\n");
			if (OSSemAccept(dtw_sem) == 1) {
  801754:	d1203e17 	ldw	r4,-32520(gp)
  801758:	0812b1c0 	call	812b1c <OSSemAccept>
  80175c:	10bfffcc 	andi	r2,r2,65535
  801760:	10800058 	cmpnei	r2,r2,1
  801764:	1000561e 	bne	r2,zero,8018c0 <taskCharacterRead+0x2b4>

				pCharacter = &array[buffer[0]];
  801768:	e0bff517 	ldw	r2,-44(fp)
  80176c:	10800324 	muli	r2,r2,12
  801770:	1007883a 	mov	r3,r2
  801774:	008020f4 	movhi	r2,131
  801778:	10bd8504 	addi	r2,r2,-2540
  80177c:	1885883a 	add	r2,r3,r2
  801780:	d0a03315 	stw	r2,-32564(gp)
				printf("X VALUES for current char -----------------------------------------------\n");
  801784:	010020b4 	movhi	r4,130
  801788:	21341b04 	addi	r4,r4,-12180
  80178c:	080442c0 	call	80442c <puts>
				for(k=0; k<pCharacter->size ;k++){
  801790:	e03feb15 	stw	zero,-84(fp)
  801794:	00001006 	br	8017d8 <taskCharacterRead+0x1cc>
					test = *(((long*)pCharacter->pX)+k);
  801798:	d0a03317 	ldw	r2,-32564(gp)
  80179c:	10800017 	ldw	r2,0(r2)
  8017a0:	1007883a 	mov	r3,r2
  8017a4:	e0bfeb17 	ldw	r2,-84(fp)
  8017a8:	1085883a 	add	r2,r2,r2
  8017ac:	1085883a 	add	r2,r2,r2
  8017b0:	1885883a 	add	r2,r3,r2
  8017b4:	10800017 	ldw	r2,0(r2)
  8017b8:	e0bfe915 	stw	r2,-92(fp)
					//printf("%ld\n",*(((long*)pCharacter->pX)+k));
					printf("%ld\n",test);
  8017bc:	010020b4 	movhi	r4,130
  8017c0:	21338604 	addi	r4,r4,-12776
  8017c4:	e17fe917 	ldw	r5,-92(fp)
  8017c8:	08043140 	call	804314 <printf>
			//printf("\n*********************FINISHED READING A CHARACTER******************\n");
			if (OSSemAccept(dtw_sem) == 1) {

				pCharacter = &array[buffer[0]];
				printf("X VALUES for current char -----------------------------------------------\n");
				for(k=0; k<pCharacter->size ;k++){
  8017cc:	e0bfeb17 	ldw	r2,-84(fp)
  8017d0:	10800044 	addi	r2,r2,1
  8017d4:	e0bfeb15 	stw	r2,-84(fp)
  8017d8:	d0a03317 	ldw	r2,-32564(gp)
  8017dc:	10c00217 	ldw	r3,8(r2)
  8017e0:	e0bfeb17 	ldw	r2,-84(fp)
  8017e4:	10ffec16 	blt	r2,r3,801798 <taskCharacterRead+0x18c>
					test = *(((long*)pCharacter->pX)+k);
					//printf("%ld\n",*(((long*)pCharacter->pX)+k));
					printf("%ld\n",test);
				}
				printf("Y VALUES for current char -----------------------------------------------\n");
  8017e8:	010020b4 	movhi	r4,130
  8017ec:	21342e04 	addi	r4,r4,-12104
  8017f0:	080442c0 	call	80442c <puts>
				for(k=0; k < pCharacter->size ;k++){
  8017f4:	e03feb15 	stw	zero,-84(fp)
  8017f8:	00001006 	br	80183c <taskCharacterRead+0x230>
					//printf("%ld\n",*(((long*)pCharacter->pY)+k));
					test = *(((long*)pCharacter->pY)+k);
  8017fc:	d0a03317 	ldw	r2,-32564(gp)
  801800:	10800117 	ldw	r2,4(r2)
  801804:	1007883a 	mov	r3,r2
  801808:	e0bfeb17 	ldw	r2,-84(fp)
  80180c:	1085883a 	add	r2,r2,r2
  801810:	1085883a 	add	r2,r2,r2
  801814:	1885883a 	add	r2,r3,r2
  801818:	10800017 	ldw	r2,0(r2)
  80181c:	e0bfe915 	stw	r2,-92(fp)
					printf("%ld\n",test);
  801820:	010020b4 	movhi	r4,130
  801824:	21338604 	addi	r4,r4,-12776
  801828:	e17fe917 	ldw	r5,-92(fp)
  80182c:	08043140 	call	804314 <printf>
					test = *(((long*)pCharacter->pX)+k);
					//printf("%ld\n",*(((long*)pCharacter->pX)+k));
					printf("%ld\n",test);
				}
				printf("Y VALUES for current char -----------------------------------------------\n");
				for(k=0; k < pCharacter->size ;k++){
  801830:	e0bfeb17 	ldw	r2,-84(fp)
  801834:	10800044 	addi	r2,r2,1
  801838:	e0bfeb15 	stw	r2,-84(fp)
  80183c:	d0a03317 	ldw	r2,-32564(gp)
  801840:	10c00217 	ldw	r3,8(r2)
  801844:	e0bfeb17 	ldw	r2,-84(fp)
  801848:	10ffec16 	blt	r2,r3,8017fc <taskCharacterRead+0x1f0>
//				for(k=0; k < pCharacter->size ;k++){
//					printf("%ld\n",*(((long*)pCharacter->pY)+k*sizeof(long)));
//
//				}
				//printf("size %i\n", pCharacter->size);
				printf("\n*********************POSTED TO DTW******************\n");
  80184c:	010020b4 	movhi	r4,130
  801850:	21344104 	addi	r4,r4,-12028
  801854:	080442c0 	call	80442c <puts>

				err = OSQPost(message, (void*) &buffer);
  801858:	d1203c17 	ldw	r4,-32528(gp)
  80185c:	e17ff504 	addi	r5,fp,-44
  801860:	08123b40 	call	8123b4 <OSQPost>
  801864:	d0a04105 	stb	r2,-32508(gp)

				//shift to next in queue
				if(buffer[1] != -1){
  801868:	e0bff617 	ldw	r2,-40(fp)
  80186c:	10bfffe0 	cmpeqi	r2,r2,-1
  801870:	1000111e 	bne	r2,zero,8018b8 <taskCharacterRead+0x2ac>
					buffer[0] = buffer[1];
  801874:	e0bff617 	ldw	r2,-40(fp)
  801878:	e0bff515 	stw	r2,-44(fp)
					//
					if(buffer[1] != current_address){
  80187c:	e0fff617 	ldw	r3,-40(fp)
  801880:	e0bfed17 	ldw	r2,-76(fp)
  801884:	18800926 	beq	r3,r2,8018ac <taskCharacterRead+0x2a0>
						if(buffer[1]==CHAR_ARRAY_BUFF_SIZE - 1){
  801888:	e0bff617 	ldw	r2,-40(fp)
  80188c:	108000d8 	cmpnei	r2,r2,3
  801890:	1000021e 	bne	r2,zero,80189c <taskCharacterRead+0x290>
							buffer[1] = 0;
  801894:	e03ff615 	stw	zero,-40(fp)
  801898:	00000906 	br	8018c0 <taskCharacterRead+0x2b4>
						}
						else{
							buffer[1]++;
  80189c:	e0bff617 	ldw	r2,-40(fp)
  8018a0:	10800044 	addi	r2,r2,1
  8018a4:	e0bff615 	stw	r2,-40(fp)
  8018a8:	00000506 	br	8018c0 <taskCharacterRead+0x2b4>
						}
					}
					else{
						buffer[1] = -1;
  8018ac:	00bfffc4 	movi	r2,-1
  8018b0:	e0bff615 	stw	r2,-40(fp)
  8018b4:	00000206 	br	8018c0 <taskCharacterRead+0x2b4>
					}
				}
				//nothing left in queue
				else{
					buffer[0] = -1;
  8018b8:	00bfffc4 	movi	r2,-1
  8018bc:	e0bff515 	stw	r2,-44(fp)
				//if(buffer[])
			}
		}

		// Read from UART
		read_FIFO_used = alt_up_rs232_get_used_space_in_read_FIFO(rs232_dev);
  8018c0:	e13ff217 	ldw	r4,-56(fp)
  8018c4:	0816be40 	call	816be4 <alt_up_rs232_get_used_space_in_read_FIFO>
  8018c8:	e0bff30d 	sth	r2,-52(fp)
		if (read_FIFO_used > READ_FIFO_EMPTY) {
  8018cc:	e0bff30b 	ldhu	r2,-52(fp)
  8018d0:	1005003a 	cmpeq	r2,r2,zero
  8018d4:	10004c1e 	bne	r2,zero,801a08 <taskCharacterRead+0x3fc>
			//alt_printf("char stored in read_FIFO: %x\n", read_FIFO_used);
			alt_up_rs232_read_data(rs232_dev, &data_R8, &p_error);
  8018d8:	e17ff384 	addi	r5,fp,-50
  8018dc:	e1bff404 	addi	r6,fp,-48
  8018e0:	e13ff217 	ldw	r4,-56(fp)
  8018e4:	0816cf80 	call	816cf8 <alt_up_rs232_read_data>
			//alt_printf("read %c from RS232 UART\n", data_R8);

			if (reading == 0) {
  8018e8:	e0bfec17 	ldw	r2,-80(fp)
  8018ec:	1004c03a 	cmpne	r2,r2,zero
  8018f0:	10000a1e 	bne	r2,zero,80191c <taskCharacterRead+0x310>
				reading = 1;
  8018f4:	00800044 	movi	r2,1
  8018f8:	e0bfec15 	stw	r2,-80(fp)
				if (current_address == CHAR_ARRAY_BUFF_SIZE - 1) {
  8018fc:	e0bfed17 	ldw	r2,-76(fp)
  801900:	108000d8 	cmpnei	r2,r2,3
  801904:	1000021e 	bne	r2,zero,801910 <taskCharacterRead+0x304>
					current_address = 0;
  801908:	e03fed15 	stw	zero,-76(fp)
  80190c:	00000306 	br	80191c <taskCharacterRead+0x310>
				}
				else {
					current_address++;
  801910:	e0bfed17 	ldw	r2,-76(fp)
  801914:	10800044 	addi	r2,r2,1
  801918:	e0bfed15 	stw	r2,-76(fp)
				}
			 }

			if(coord == 0 && index <= INPUT_SIZE) {
  80191c:	e0bfee17 	ldw	r2,-72(fp)
  801920:	1004c03a 	cmpne	r2,r2,zero
  801924:	1000171e 	bne	r2,zero,801984 <taskCharacterRead+0x378>
  801928:	e0bff117 	ldw	r2,-60(fp)
  80192c:	10803248 	cmpgei	r2,r2,201
  801930:	1000141e 	bne	r2,zero,801984 <taskCharacterRead+0x378>
				a = (short int)(data_R8);
  801934:	e0bff383 	ldbu	r2,-50(fp)
  801938:	10803fcc 	andi	r2,r2,255
  80193c:	1080201c 	xori	r2,r2,128
  801940:	10bfe004 	addi	r2,r2,-128
  801944:	e0bfea0d 	sth	r2,-88(fp)


				//*(array[current_address].pX + sizeof(long)*index) = (long)(a);
				//*(array[current_address].pX + sizeof(long)*index) = (long)(a*10);
				*(array[current_address].pX + index) = (signed long)(a);
  801948:	e0bfed17 	ldw	r2,-76(fp)
  80194c:	00c020f4 	movhi	r3,131
  801950:	18fd8504 	addi	r3,r3,-2540
  801954:	10800324 	muli	r2,r2,12
  801958:	10c5883a 	add	r2,r2,r3
  80195c:	10c00017 	ldw	r3,0(r2)
  801960:	e0bff117 	ldw	r2,-60(fp)
  801964:	1085883a 	add	r2,r2,r2
  801968:	1085883a 	add	r2,r2,r2
  80196c:	1887883a 	add	r3,r3,r2
  801970:	e0bfea0f 	ldh	r2,-88(fp)
  801974:	18800015 	stw	r2,0(r3)
				//IOWR_16DIRECT(SRAM_0_BASE, DTW_BASE + index, (long)(data_R8*10));
				//printf("x address =  0x%08x  val = %ld\n", (array[current_address].pX + index*sizeof(long)), *((long*)array[current_address].pX + index) );
				//*(array[current_address].pX + sizeof(long)*index) = (long)(((signed char)data_R8)*10);
				//alt_printf("char stored in read_FIFO: %x\n", read_FIFO_used);
				//printf("read x = %ld from RS232 UART\n", (long)a);
				coord = 1;
  801978:	00800044 	movi	r2,1
  80197c:	e0bfee15 	stw	r2,-72(fp)
				else {
					current_address++;
				}
			 }

			if(coord == 0 && index <= INPUT_SIZE) {
  801980:	00005706 	br	801ae0 <taskCharacterRead+0x4d4>
				//printf("read x = %ld from RS232 UART\n", (long)a);
				coord = 1;
				//index++;
			}
			else
			if(coord == 1){
  801984:	e0bfee17 	ldw	r2,-72(fp)
  801988:	10800058 	cmpnei	r2,r2,1
  80198c:	10001a1e 	bne	r2,zero,8019f8 <taskCharacterRead+0x3ec>
				a = (short int)(data_R8);
  801990:	e0bff383 	ldbu	r2,-50(fp)
  801994:	10803fcc 	andi	r2,r2,255
  801998:	1080201c 	xori	r2,r2,128
  80199c:	10bfe004 	addi	r2,r2,-128
  8019a0:	e0bfea0d 	sth	r2,-88(fp)
				*(array[current_address].pY + index) = (signed long)(a);
  8019a4:	e0bfed17 	ldw	r2,-76(fp)
  8019a8:	00c020f4 	movhi	r3,131
  8019ac:	18fd8504 	addi	r3,r3,-2540
  8019b0:	10800324 	muli	r2,r2,12
  8019b4:	10c5883a 	add	r2,r2,r3
  8019b8:	10800104 	addi	r2,r2,4
  8019bc:	10c00017 	ldw	r3,0(r2)
  8019c0:	e0bff117 	ldw	r2,-60(fp)
  8019c4:	1085883a 	add	r2,r2,r2
  8019c8:	1085883a 	add	r2,r2,r2
  8019cc:	1887883a 	add	r3,r3,r2
  8019d0:	e0bfea0f 	ldh	r2,-88(fp)
  8019d4:	18800015 	stw	r2,0(r3)
				//printf("y address =  0x%08x  val = %ld\n", array[current_address].pY + index*sizeof(long), *((long*)array[current_address].pY + index) );
				//*(array[current_address].pY +  sizeof(long)*index) = (long)(((signed char)data_R8)*10);
				//alt_printf("char stored in read_FIFO: %x\n", read_FIFO_used);
				//printf("read y = %ld from RS232 UART\n", (long)a);
				//index++;
				if(index < INPUT_SIZE){
  8019d8:	e0bff117 	ldw	r2,-60(fp)
  8019dc:	10803208 	cmpgei	r2,r2,200
  8019e0:	1000031e 	bne	r2,zero,8019f0 <taskCharacterRead+0x3e4>
					index++;
  8019e4:	e0bff117 	ldw	r2,-60(fp)
  8019e8:	10800044 	addi	r2,r2,1
  8019ec:	e0bff115 	stw	r2,-60(fp)
				}
				coord = 0;
  8019f0:	e03fee15 	stw	zero,-72(fp)
  8019f4:	00003a06 	br	801ae0 <taskCharacterRead+0x4d4>
			}
			else{
				printf("sync issue\n");
  8019f8:	010020b4 	movhi	r4,130
  8019fc:	2133cd04 	addi	r4,r4,-12492
  801a00:	080442c0 	call	80442c <puts>
  801a04:	00003606 	br	801ae0 <taskCharacterRead+0x4d4>
			}

		}
		else {
			//detect end of character values
			if (reading) {
  801a08:	e0bfec17 	ldw	r2,-80(fp)
  801a0c:	1005003a 	cmpeq	r2,r2,zero
  801a10:	1000331e 	bne	r2,zero,801ae0 <taskCharacterRead+0x4d4>
				start++;
  801a14:	e0bfef17 	ldw	r2,-68(fp)
  801a18:	10800044 	addi	r2,r2,1
  801a1c:	e0bfef15 	stw	r2,-68(fp)
				//finished character value
				if (start == 2) {
  801a20:	e0bfef17 	ldw	r2,-68(fp)
  801a24:	10800098 	cmpnei	r2,r2,2
  801a28:	10002d1e 	bne	r2,zero,801ae0 <taskCharacterRead+0x4d4>

					printf("\n*********************FINISHED READING A CHARACTER******************\n");
  801a2c:	010020b4 	movhi	r4,130
  801a30:	21344f04 	addi	r4,r4,-11972
  801a34:	080442c0 	call	80442c <puts>
					if(index <= INPUT_SIZE){
  801a38:	e0bff117 	ldw	r2,-60(fp)
  801a3c:	10803248 	cmpgei	r2,r2,201
  801a40:	1000091e 	bne	r2,zero,801a68 <taskCharacterRead+0x45c>
						array[current_address].size = index;
  801a44:	e0bfed17 	ldw	r2,-76(fp)
  801a48:	00c020f4 	movhi	r3,131
  801a4c:	18fd8504 	addi	r3,r3,-2540
  801a50:	10800324 	muli	r2,r2,12
  801a54:	10c5883a 	add	r2,r2,r3
  801a58:	10c00204 	addi	r3,r2,8
  801a5c:	e0bff117 	ldw	r2,-60(fp)
  801a60:	18800015 	stw	r2,0(r3)
  801a64:	00000806 	br	801a88 <taskCharacterRead+0x47c>
					}
					else{
						array[current_address].size = INPUT_SIZE;
  801a68:	e0bfed17 	ldw	r2,-76(fp)
  801a6c:	00c020f4 	movhi	r3,131
  801a70:	18fd8504 	addi	r3,r3,-2540
  801a74:	10800324 	muli	r2,r2,12
  801a78:	10c5883a 	add	r2,r2,r3
  801a7c:	10c00204 	addi	r3,r2,8
  801a80:	00803204 	movi	r2,200
  801a84:	18800015 	stw	r2,0(r3)
					}
					//Check to see if there is a queue for dtw
					//no queue
					if(buffer[0] == -1 && buffer[1] == -1){
  801a88:	e0bff517 	ldw	r2,-44(fp)
  801a8c:	10bfffd8 	cmpnei	r2,r2,-1
  801a90:	1000061e 	bne	r2,zero,801aac <taskCharacterRead+0x4a0>
  801a94:	e0bff617 	ldw	r2,-40(fp)
  801a98:	10bfffd8 	cmpnei	r2,r2,-1
  801a9c:	1000031e 	bne	r2,zero,801aac <taskCharacterRead+0x4a0>
						buffer[0] = current_address;
  801aa0:	e0bfed17 	ldw	r2,-76(fp)
  801aa4:	e0bff515 	stw	r2,-44(fp)
					else{
						array[current_address].size = INPUT_SIZE;
					}
					//Check to see if there is a queue for dtw
					//no queue
					if(buffer[0] == -1 && buffer[1] == -1){
  801aa8:	00000906 	br	801ad0 <taskCharacterRead+0x4c4>
						buffer[0] = current_address;
					}
					//queue
					else if (buffer[0] != -1 && buffer[1] == -1){
  801aac:	e0bff517 	ldw	r2,-44(fp)
  801ab0:	10bfffe0 	cmpeqi	r2,r2,-1
  801ab4:	1000061e 	bne	r2,zero,801ad0 <taskCharacterRead+0x4c4>
  801ab8:	e0bff617 	ldw	r2,-40(fp)
  801abc:	10bfffd8 	cmpnei	r2,r2,-1
  801ac0:	1000031e 	bne	r2,zero,801ad0 <taskCharacterRead+0x4c4>
						buffer[1] = buffer[0] + 1;
  801ac4:	e0bff517 	ldw	r2,-44(fp)
  801ac8:	10800044 	addi	r2,r2,1
  801acc:	e0bff615 	stw	r2,-40(fp)
					}

					index = 0;
  801ad0:	e03ff115 	stw	zero,-60(fp)
					start = 0;
  801ad4:	e03fef15 	stw	zero,-68(fp)
					reading = 0;
  801ad8:	e03fec15 	stw	zero,-80(fp)
					coord = 0;
  801adc:	e03fee15 	stw	zero,-72(fp)
				}
			}
		}
		OSTimeDlyHMSM(0, 0, 0, 5);
  801ae0:	0009883a 	mov	r4,zero
  801ae4:	000b883a 	mov	r5,zero
  801ae8:	000d883a 	mov	r6,zero
  801aec:	01c00144 	movi	r7,5
  801af0:	08152700 	call	815270 <OSTimeDlyHMSM>
	}
  801af4:	003f1406 	br	801748 <taskCharacterRead+0x13c>

00801af8 <taskTemplateMatch>:
//int er

//todo Template Match
/* Task matches templates. Synchronized with the character input task. Spawns two threads which run dtw on the x and y axis. Computes final score.
 * Algorithm ignores tasks based on groups with similar profiles if the score is too high.*/
void taskTemplateMatch(void* pdata) {
  801af8:	deffeb04 	addi	sp,sp,-84
  801afc:	dfc01415 	stw	ra,80(sp)
  801b00:	df001315 	stw	fp,76(sp)
  801b04:	dcc01215 	stw	r19,72(sp)
  801b08:	dc801115 	stw	r18,68(sp)
  801b0c:	dc401015 	stw	r17,64(sp)
  801b10:	dc000f15 	stw	r16,60(sp)
  801b14:	df000f04 	addi	fp,sp,60
  801b18:	e13fff15 	stw	r4,-4(fp)
	char* msg;
	long long best_match = INFIN;
  801b1c:	00a00034 	movhi	r2,32768
  801b20:	10bfffc4 	addi	r2,r2,-1
  801b24:	e0bffc15 	stw	r2,-16(fp)
  801b28:	e03ffd15 	stw	zero,-12(fp)
	long long sec_best_match = INFIN;
  801b2c:	00a00034 	movhi	r2,32768
  801b30:	10bfffc4 	addi	r2,r2,-1
  801b34:	e0bffa15 	stw	r2,-24(fp)
  801b38:	e03ffb15 	stw	zero,-20(fp)
	int match_group;
	int match = 0;
  801b3c:	e03ff815 	stw	zero,-32(fp)
//	int x;
//	int y;
	int i;
	int j;
	long long score =0;
  801b40:	e03ff415 	stw	zero,-48(fp)
  801b44:	e03ff515 	stw	zero,-44(fp)
//	int bufferx[BUFFER_SIZE];
//	int buffery[BUFFER_SIZE];


	while (1) {
		msg = OSQPend(message, 0, &err);
  801b48:	d1203c17 	ldw	r4,-32528(gp)
  801b4c:	000b883a 	mov	r5,zero
  801b50:	d1a04104 	addi	r6,gp,-32508
  801b54:	0811f180 	call	811f18 <OSQPend>
  801b58:	e0bffe15 	stw	r2,-8(fp)
//					best_match = score;
//					match = template_number;
//				}
//			}
//		}
		lcdbuffer = "Processing...\0";
  801b5c:	008020b4 	movhi	r2,130
  801b60:	10b46104 	addi	r2,r2,-11900
  801b64:	e0bff115 	stw	r2,-60(fp)
		OSQPost(lcdmessage, lcdbuffer);
  801b68:	d1203017 	ldw	r4,-32576(gp)
  801b6c:	e17ff117 	ldw	r5,-60(fp)
  801b70:	08123b40 	call	8123b4 <OSQPost>
		AverageCharReadPattern();
  801b74:	0801f0c0 	call	801f0c <AverageCharReadPattern>

		printf("X VALUES for current char -----------------------------------------------\n");
  801b78:	010020b4 	movhi	r4,130
  801b7c:	21341b04 	addi	r4,r4,-12180
  801b80:	080442c0 	call	80442c <puts>
		for(k=0; k<pCharacter->size ;k++){
  801b84:	e03ff215 	stw	zero,-56(fp)
  801b88:	00001006 	br	801bcc <taskTemplateMatch+0xd4>
			test = *(((long*)pCharacter->pX)+k);
  801b8c:	d0a03317 	ldw	r2,-32564(gp)
  801b90:	10800017 	ldw	r2,0(r2)
  801b94:	1007883a 	mov	r3,r2
  801b98:	e0bff217 	ldw	r2,-56(fp)
  801b9c:	1085883a 	add	r2,r2,r2
  801ba0:	1085883a 	add	r2,r2,r2
  801ba4:	1885883a 	add	r2,r3,r2
  801ba8:	10800017 	ldw	r2,0(r2)
  801bac:	e0bff315 	stw	r2,-52(fp)
			//printf("%ld\n",*(((long*)pCharacter->pX)+k));
			printf("%ld\n",test);
  801bb0:	010020b4 	movhi	r4,130
  801bb4:	21338604 	addi	r4,r4,-12776
  801bb8:	e17ff317 	ldw	r5,-52(fp)
  801bbc:	08043140 	call	804314 <printf>
		lcdbuffer = "Processing...\0";
		OSQPost(lcdmessage, lcdbuffer);
		AverageCharReadPattern();

		printf("X VALUES for current char -----------------------------------------------\n");
		for(k=0; k<pCharacter->size ;k++){
  801bc0:	e0bff217 	ldw	r2,-56(fp)
  801bc4:	10800044 	addi	r2,r2,1
  801bc8:	e0bff215 	stw	r2,-56(fp)
  801bcc:	d0a03317 	ldw	r2,-32564(gp)
  801bd0:	10c00217 	ldw	r3,8(r2)
  801bd4:	e0bff217 	ldw	r2,-56(fp)
  801bd8:	10ffec16 	blt	r2,r3,801b8c <taskTemplateMatch+0x94>
			test = *(((long*)pCharacter->pX)+k);
			//printf("%ld\n",*(((long*)pCharacter->pX)+k));
			printf("%ld\n",test);
		}
		printf("Y VALUES for current char -----------------------------------------------\n");
  801bdc:	010020b4 	movhi	r4,130
  801be0:	21342e04 	addi	r4,r4,-12104
  801be4:	080442c0 	call	80442c <puts>
		for(k=0; k < pCharacter->size ;k++){
  801be8:	e03ff215 	stw	zero,-56(fp)
  801bec:	00001006 	br	801c30 <taskTemplateMatch+0x138>
			//printf("%ld\n",*(((long*)pCharacter->pY)+k));
			test = *(((long*)pCharacter->pY)+k);
  801bf0:	d0a03317 	ldw	r2,-32564(gp)
  801bf4:	10800117 	ldw	r2,4(r2)
  801bf8:	1007883a 	mov	r3,r2
  801bfc:	e0bff217 	ldw	r2,-56(fp)
  801c00:	1085883a 	add	r2,r2,r2
  801c04:	1085883a 	add	r2,r2,r2
  801c08:	1885883a 	add	r2,r3,r2
  801c0c:	10800017 	ldw	r2,0(r2)
  801c10:	e0bff315 	stw	r2,-52(fp)
			printf("%ld\n",test);
  801c14:	010020b4 	movhi	r4,130
  801c18:	21338604 	addi	r4,r4,-12776
  801c1c:	e17ff317 	ldw	r5,-52(fp)
  801c20:	08043140 	call	804314 <printf>
			test = *(((long*)pCharacter->pX)+k);
			//printf("%ld\n",*(((long*)pCharacter->pX)+k));
			printf("%ld\n",test);
		}
		printf("Y VALUES for current char -----------------------------------------------\n");
		for(k=0; k < pCharacter->size ;k++){
  801c24:	e0bff217 	ldw	r2,-56(fp)
  801c28:	10800044 	addi	r2,r2,1
  801c2c:	e0bff215 	stw	r2,-56(fp)
  801c30:	d0a03317 	ldw	r2,-32564(gp)
  801c34:	10c00217 	ldw	r3,8(r2)
  801c38:	e0bff217 	ldw	r2,-56(fp)
  801c3c:	10ffec16 	blt	r2,r3,801bf0 <taskTemplateMatch+0xf8>
			test = *(((long*)pCharacter->pY)+k);
			printf("%ld\n",test);

		}

		for(i=0; i < 4; i++){
  801c40:	e03ff715 	stw	zero,-36(fp)
  801c44:	00008306 	br	801e54 <taskTemplateMatch+0x35c>
			for(j=0; j < 4;j++){
  801c48:	e03ff615 	stw	zero,-40(fp)
  801c4c:	00006906 	br	801df4 <taskTemplateMatch+0x2fc>
				template_number = templates[i].t[j];
  801c50:	e0bff717 	ldw	r2,-36(fp)
  801c54:	00c020f4 	movhi	r3,131
  801c58:	18fd4d04 	addi	r3,r3,-2764
  801c5c:	100490fa 	slli	r2,r2,3
  801c60:	10c5883a 	add	r2,r2,r3
  801c64:	10c00017 	ldw	r3,0(r2)
  801c68:	e0bff617 	ldw	r2,-40(fp)
  801c6c:	1085883a 	add	r2,r2,r2
  801c70:	1085883a 	add	r2,r2,r2
  801c74:	1885883a 	add	r2,r3,r2
  801c78:	10800017 	ldw	r2,0(r2)
  801c7c:	d0a03215 	stw	r2,-32568(gp)
				OSSemPost(dtw_semx);
  801c80:	d1203f17 	ldw	r4,-32516(gp)
  801c84:	08133880 	call	813388 <OSSemPost>
				OSSemPost(dtw_semy);
  801c88:	d1203417 	ldw	r4,-32560(gp)
  801c8c:	08133880 	call	813388 <OSSemPost>
				//post dtwy
				OSSemPend(semx, 0, &err);
  801c90:	d1204217 	ldw	r4,-32504(gp)
  801c94:	000b883a 	mov	r5,zero
  801c98:	d1a04104 	addi	r6,gp,-32508
  801c9c:	0812f900 	call	812f90 <OSSemPend>
				OSSemPend(semy, 0, &err);
  801ca0:	d1203617 	ldw	r4,-32552(gp)
  801ca4:	000b883a 	mov	r5,zero
  801ca8:	d1a04104 	addi	r6,gp,-32508
  801cac:	0812f900 	call	812f90 <OSSemPend>
//					printf("dtw failed at %d x\n", template_number );
//				}
//				if(dtwy==0){
//					printf("dtw failed at %d y\n", template_number );
//				}
				score += (sqrt(((unsigned long)(dtwx * dtwx) + (unsigned long)(dtwy * dtwy)))) + (2*dtwx) + (2*dtwy);
  801cb0:	e13ff417 	ldw	r4,-48(fp)
  801cb4:	e17ff517 	ldw	r5,-44(fp)
  801cb8:	0802cb00 	call	802cb0 <__floatdidf>
  801cbc:	1025883a 	mov	r18,r2
  801cc0:	1827883a 	mov	r19,r3
  801cc4:	d0e03d17 	ldw	r3,-32524(gp)
  801cc8:	d0a03d17 	ldw	r2,-32524(gp)
  801ccc:	1885383a 	mul	r2,r3,r2
  801cd0:	1009883a 	mov	r4,r2
  801cd4:	d0e03517 	ldw	r3,-32556(gp)
  801cd8:	d0a03517 	ldw	r2,-32556(gp)
  801cdc:	1885383a 	mul	r2,r3,r2
  801ce0:	2089883a 	add	r4,r4,r2
  801ce4:	0803ab00 	call	803ab0 <__floatunsidf>
  801ce8:	100b883a 	mov	r5,r2
  801cec:	180d883a 	mov	r6,r3
  801cf0:	2809883a 	mov	r4,r5
  801cf4:	300b883a 	mov	r5,r6
  801cf8:	08026b00 	call	8026b0 <sqrt>
  801cfc:	1021883a 	mov	r16,r2
  801d00:	1823883a 	mov	r17,r3
  801d04:	d0a03d17 	ldw	r2,-32524(gp)
  801d08:	1085883a 	add	r2,r2,r2
  801d0c:	1009883a 	mov	r4,r2
  801d10:	08038e00 	call	8038e0 <__floatsidf>
  801d14:	100f883a 	mov	r7,r2
  801d18:	1811883a 	mov	r8,r3
  801d1c:	8009883a 	mov	r4,r16
  801d20:	880b883a 	mov	r5,r17
  801d24:	380d883a 	mov	r6,r7
  801d28:	400f883a 	mov	r7,r8
  801d2c:	08031c80 	call	8031c8 <__adddf3>
  801d30:	1009883a 	mov	r4,r2
  801d34:	180b883a 	mov	r5,r3
  801d38:	2021883a 	mov	r16,r4
  801d3c:	2823883a 	mov	r17,r5
  801d40:	d0a03517 	ldw	r2,-32556(gp)
  801d44:	1085883a 	add	r2,r2,r2
  801d48:	1009883a 	mov	r4,r2
  801d4c:	08038e00 	call	8038e0 <__floatsidf>
  801d50:	100f883a 	mov	r7,r2
  801d54:	1811883a 	mov	r8,r3
  801d58:	8009883a 	mov	r4,r16
  801d5c:	880b883a 	mov	r5,r17
  801d60:	380d883a 	mov	r6,r7
  801d64:	400f883a 	mov	r7,r8
  801d68:	08031c80 	call	8031c8 <__adddf3>
  801d6c:	1009883a 	mov	r4,r2
  801d70:	180b883a 	mov	r5,r3
  801d74:	2005883a 	mov	r2,r4
  801d78:	2807883a 	mov	r3,r5
  801d7c:	9009883a 	mov	r4,r18
  801d80:	980b883a 	mov	r5,r19
  801d84:	100d883a 	mov	r6,r2
  801d88:	180f883a 	mov	r7,r3
  801d8c:	08031c80 	call	8031c8 <__adddf3>
  801d90:	1009883a 	mov	r4,r2
  801d94:	180b883a 	mov	r5,r3
  801d98:	2005883a 	mov	r2,r4
  801d9c:	2807883a 	mov	r3,r5
  801da0:	1009883a 	mov	r4,r2
  801da4:	180b883a 	mov	r5,r3
  801da8:	0802b780 	call	802b78 <__fixdfdi>
  801dac:	1009883a 	mov	r4,r2
  801db0:	180b883a 	mov	r5,r3
  801db4:	e13ff415 	stw	r4,-48(fp)
  801db8:	e17ff515 	stw	r5,-44(fp)

//				if(score == 0){
//					printf("dtwx=%ld    dtwy=%ld\n", dtwx, dtwy);
//				}
				printf("dtwx = %ld   dtwy = %ld\n", dtwx, dtwy);
  801dbc:	d1603d17 	ldw	r5,-32524(gp)
  801dc0:	d1a03517 	ldw	r6,-32556(gp)
  801dc4:	010020b4 	movhi	r4,130
  801dc8:	21346504 	addi	r4,r4,-11884
  801dcc:	08043140 	call	804314 <printf>
				printf("template %d score= %ld\n\n",template_number, score);
  801dd0:	d1603217 	ldw	r5,-32568(gp)
  801dd4:	010020b4 	movhi	r4,130
  801dd8:	21346c04 	addi	r4,r4,-11856
  801ddc:	e1bff417 	ldw	r6,-48(fp)
  801de0:	e1fff517 	ldw	r7,-44(fp)
  801de4:	08043140 	call	804314 <printf>
			printf("%ld\n",test);

		}

		for(i=0; i < 4; i++){
			for(j=0; j < 4;j++){
  801de8:	e0bff617 	ldw	r2,-40(fp)
  801dec:	10800044 	addi	r2,r2,1
  801df0:	e0bff615 	stw	r2,-40(fp)
  801df4:	e0bff617 	ldw	r2,-40(fp)
  801df8:	10800110 	cmplti	r2,r2,4
  801dfc:	103f941e 	bne	r2,zero,801c50 <taskTemplateMatch+0x158>
//				}
				printf("dtwx = %ld   dtwy = %ld\n", dtwx, dtwy);
				printf("template %d score= %ld\n\n",template_number, score);

			}
			if(best_match > score){
  801e00:	e0fffd17 	ldw	r3,-12(fp)
  801e04:	e0bff517 	ldw	r2,-44(fp)
  801e08:	10c00716 	blt	r2,r3,801e28 <taskTemplateMatch+0x330>
  801e0c:	e0fffd17 	ldw	r3,-12(fp)
  801e10:	e0bff517 	ldw	r2,-44(fp)
  801e14:	18800a1e 	bne	r3,r2,801e40 <taskTemplateMatch+0x348>
  801e18:	e0fffc17 	ldw	r3,-16(fp)
  801e1c:	e0bff417 	ldw	r2,-48(fp)
  801e20:	10c00136 	bltu	r2,r3,801e28 <taskTemplateMatch+0x330>
  801e24:	00000606 	br	801e40 <taskTemplateMatch+0x348>
						//sec_best_match = match;
						best_match = score;
  801e28:	e0bff417 	ldw	r2,-48(fp)
  801e2c:	e0bffc15 	stw	r2,-16(fp)
  801e30:	e0bff517 	ldw	r2,-44(fp)
  801e34:	e0bffd15 	stw	r2,-12(fp)
						match = i;
  801e38:	e0bff717 	ldw	r2,-36(fp)
  801e3c:	e0bff815 	stw	r2,-32(fp)

					}
			score =0;
  801e40:	e03ff415 	stw	zero,-48(fp)
  801e44:	e03ff515 	stw	zero,-44(fp)
			test = *(((long*)pCharacter->pY)+k);
			printf("%ld\n",test);

		}

		for(i=0; i < 4; i++){
  801e48:	e0bff717 	ldw	r2,-36(fp)
  801e4c:	10800044 	addi	r2,r2,1
  801e50:	e0bff715 	stw	r2,-36(fp)
  801e54:	e0bff717 	ldw	r2,-36(fp)
  801e58:	10800110 	cmplti	r2,r2,4
  801e5c:	103f7a1e 	bne	r2,zero,801c48 <taskTemplateMatch+0x150>
					}
			score =0;
		}

		//*SEVEN_SEG = match;
		printf("best match is \'%d\' with score a of %ld\n", match, best_match);
  801e60:	010020b4 	movhi	r4,130
  801e64:	21347304 	addi	r4,r4,-11828
  801e68:	e17ff817 	ldw	r5,-32(fp)
  801e6c:	e1bffc17 	ldw	r6,-16(fp)
  801e70:	e1fffd17 	ldw	r7,-12(fp)
  801e74:	08043140 	call	804314 <printf>
		if(match == 0){
  801e78:	e0bff817 	ldw	r2,-32(fp)
  801e7c:	1004c03a 	cmpne	r2,r2,zero
  801e80:	1000031e 	bne	r2,zero,801e90 <taskTemplateMatch+0x398>
			lcdbuffer = "match CIRCLE";
  801e84:	008020b4 	movhi	r2,130
  801e88:	10b47d04 	addi	r2,r2,-11788
  801e8c:	e0bff115 	stw	r2,-60(fp)
		}
		if(match == 1){
  801e90:	e0bff817 	ldw	r2,-32(fp)
  801e94:	10800058 	cmpnei	r2,r2,1
  801e98:	1000031e 	bne	r2,zero,801ea8 <taskTemplateMatch+0x3b0>
			lcdbuffer = "match TRIANGLE";
  801e9c:	008020b4 	movhi	r2,130
  801ea0:	10b48104 	addi	r2,r2,-11772
  801ea4:	e0bff115 	stw	r2,-60(fp)
		}
		if(match == 2){
  801ea8:	e0bff817 	ldw	r2,-32(fp)
  801eac:	10800098 	cmpnei	r2,r2,2
  801eb0:	1000031e 	bne	r2,zero,801ec0 <taskTemplateMatch+0x3c8>
			lcdbuffer = "match CHECK";
  801eb4:	008020b4 	movhi	r2,130
  801eb8:	10b48504 	addi	r2,r2,-11756
  801ebc:	e0bff115 	stw	r2,-60(fp)
		}
		if(match == 3){
  801ec0:	e0bff817 	ldw	r2,-32(fp)
  801ec4:	108000d8 	cmpnei	r2,r2,3
  801ec8:	1000031e 	bne	r2,zero,801ed8 <taskTemplateMatch+0x3e0>
			lcdbuffer = "match LINE";
  801ecc:	008020b4 	movhi	r2,130
  801ed0:	10b48804 	addi	r2,r2,-11744
  801ed4:	e0bff115 	stw	r2,-60(fp)
		}
		//lcdbuffer = "match ";
		//strcat(lcdbuffer)
		OSQPost(lcdmessage, lcdbuffer);
  801ed8:	d1203017 	ldw	r4,-32576(gp)
  801edc:	e17ff117 	ldw	r5,-60(fp)
  801ee0:	08123b40 	call	8123b4 <OSQPost>
		best_match = INFIN;
  801ee4:	00a00034 	movhi	r2,32768
  801ee8:	10bfffc4 	addi	r2,r2,-1
  801eec:	e0bffc15 	stw	r2,-16(fp)
  801ef0:	e03ffd15 	stw	zero,-12(fp)
		score = 0;
  801ef4:	e03ff415 	stw	zero,-48(fp)
  801ef8:	e03ff515 	stw	zero,-44(fp)
		match=0;
  801efc:	e03ff815 	stw	zero,-32(fp)
		OSSemPost(dtw_sem);
  801f00:	d1203e17 	ldw	r4,-32520(gp)
  801f04:	08133880 	call	813388 <OSSemPost>
//		}
//		*SEVEN_SEG = match;
//		printf("best match is \'%d\' with score a of %ld\n", match, best_match);
//		OSSemPost(dtw_sem);

	}
  801f08:	003f0f06 	br	801b48 <taskTemplateMatch+0x50>

00801f0c <AverageCharReadPattern>:
}


//todo AveragePattern
void AverageCharReadPattern()
{
  801f0c:	defff804 	addi	sp,sp,-32
  801f10:	df000715 	stw	fp,28(sp)
  801f14:	df000704 	addi	fp,sp,28
	int j;
	long prev_val_X[2] = {*((long*)pCharacter->pX), *((long*)pCharacter->pX+1)};
  801f18:	d0a03317 	ldw	r2,-32564(gp)
  801f1c:	10800017 	ldw	r2,0(r2)
  801f20:	10c00017 	ldw	r3,0(r2)
  801f24:	d0a03317 	ldw	r2,-32564(gp)
  801f28:	10800017 	ldw	r2,0(r2)
  801f2c:	10800104 	addi	r2,r2,4
  801f30:	10800017 	ldw	r2,0(r2)
  801f34:	e0fffc15 	stw	r3,-16(fp)
  801f38:	e0bffd15 	stw	r2,-12(fp)
	long prev_val_Y[2] = {*((long*)pCharacter->pY), *((long*)pCharacter->pY+1)};
  801f3c:	d0a03317 	ldw	r2,-32564(gp)
  801f40:	10800117 	ldw	r2,4(r2)
  801f44:	10c00017 	ldw	r3,0(r2)
  801f48:	d0a03317 	ldw	r2,-32564(gp)
  801f4c:	10800117 	ldw	r2,4(r2)
  801f50:	10800104 	addi	r2,r2,4
  801f54:	10800017 	ldw	r2,0(r2)
  801f58:	e0fffe15 	stw	r3,-8(fp)
  801f5c:	e0bfff15 	stw	r2,-4(fp)
	for (j = 0; j < pCharacter->size; j++)
  801f60:	e03ffb15 	stw	zero,-20(fp)
  801f64:	0000bb06 	br	802254 <AverageCharReadPattern+0x348>
	{
		long tempX = 0;
  801f68:	e03ffa15 	stw	zero,-24(fp)
		long tempY = 0;
  801f6c:	e03ff915 	stw	zero,-28(fp)
		if (j < pCharacter->size-2)
  801f70:	d0a03317 	ldw	r2,-32564(gp)
  801f74:	10800217 	ldw	r2,8(r2)
  801f78:	10ffff84 	addi	r3,r2,-2
  801f7c:	e0bffb17 	ldw	r2,-20(fp)
  801f80:	10c06d0e 	bge	r2,r3,802138 <AverageCharReadPattern+0x22c>
		{
			tempX = *((long*)pCharacter->pX + j);
  801f84:	d0a03317 	ldw	r2,-32564(gp)
  801f88:	10800017 	ldw	r2,0(r2)
  801f8c:	1007883a 	mov	r3,r2
  801f90:	e0bffb17 	ldw	r2,-20(fp)
  801f94:	1085883a 	add	r2,r2,r2
  801f98:	1085883a 	add	r2,r2,r2
  801f9c:	1885883a 	add	r2,r3,r2
  801fa0:	10800017 	ldw	r2,0(r2)
  801fa4:	e0bffa15 	stw	r2,-24(fp)
			tempY = *((long*)pCharacter->pY + j);
  801fa8:	d0a03317 	ldw	r2,-32564(gp)
  801fac:	10800117 	ldw	r2,4(r2)
  801fb0:	1007883a 	mov	r3,r2
  801fb4:	e0bffb17 	ldw	r2,-20(fp)
  801fb8:	1085883a 	add	r2,r2,r2
  801fbc:	1085883a 	add	r2,r2,r2
  801fc0:	1885883a 	add	r2,r3,r2
  801fc4:	10800017 	ldw	r2,0(r2)
  801fc8:	e0bff915 	stw	r2,-28(fp)
			*((long*)pCharacter->pX + j) = (prev_val_X[1] + prev_val_X[0] + *((long*)pCharacter->pX + j)
  801fcc:	d0a03317 	ldw	r2,-32564(gp)
  801fd0:	10800017 	ldw	r2,0(r2)
  801fd4:	1007883a 	mov	r3,r2
  801fd8:	e0bffb17 	ldw	r2,-20(fp)
  801fdc:	1085883a 	add	r2,r2,r2
  801fe0:	1085883a 	add	r2,r2,r2
  801fe4:	1889883a 	add	r4,r3,r2
  801fe8:	e0fffd17 	ldw	r3,-12(fp)
  801fec:	e0bffc17 	ldw	r2,-16(fp)
  801ff0:	188b883a 	add	r5,r3,r2
  801ff4:	d0a03317 	ldw	r2,-32564(gp)
  801ff8:	10800017 	ldw	r2,0(r2)
  801ffc:	1007883a 	mov	r3,r2
  802000:	e0bffb17 	ldw	r2,-20(fp)
  802004:	1085883a 	add	r2,r2,r2
  802008:	1085883a 	add	r2,r2,r2
  80200c:	1885883a 	add	r2,r3,r2
  802010:	10800017 	ldw	r2,0(r2)
  802014:	288b883a 	add	r5,r5,r2
  802018:	d0a03317 	ldw	r2,-32564(gp)
  80201c:	10800017 	ldw	r2,0(r2)
  802020:	1007883a 	mov	r3,r2
  802024:	e0bffb17 	ldw	r2,-20(fp)
  802028:	1085883a 	add	r2,r2,r2
  80202c:	1085883a 	add	r2,r2,r2
  802030:	1885883a 	add	r2,r3,r2
  802034:	10800104 	addi	r2,r2,4
  802038:	10800017 	ldw	r2,0(r2)
  80203c:	288b883a 	add	r5,r5,r2
  802040:	d0a03317 	ldw	r2,-32564(gp)
  802044:	10800017 	ldw	r2,0(r2)
  802048:	1007883a 	mov	r3,r2
  80204c:	e0bffb17 	ldw	r2,-20(fp)
  802050:	1085883a 	add	r2,r2,r2
  802054:	1085883a 	add	r2,r2,r2
  802058:	1885883a 	add	r2,r3,r2
  80205c:	10800204 	addi	r2,r2,8
  802060:	10800017 	ldw	r2,0(r2)
  802064:	2885883a 	add	r2,r5,r2
  802068:	1085883a 	add	r2,r2,r2
  80206c:	20800015 	stw	r2,0(r4)
									+ *((long*)pCharacter->pX + (j+1)) + *((long*)pCharacter->pX + (j+2)))*2;
			*((long*)pCharacter->pY + j) = (prev_val_Y[1] + prev_val_Y[0] + *((long*)pCharacter->pY + j)
  802070:	d0a03317 	ldw	r2,-32564(gp)
  802074:	10800117 	ldw	r2,4(r2)
  802078:	1007883a 	mov	r3,r2
  80207c:	e0bffb17 	ldw	r2,-20(fp)
  802080:	1085883a 	add	r2,r2,r2
  802084:	1085883a 	add	r2,r2,r2
  802088:	1889883a 	add	r4,r3,r2
  80208c:	e0ffff17 	ldw	r3,-4(fp)
  802090:	e0bffe17 	ldw	r2,-8(fp)
  802094:	188b883a 	add	r5,r3,r2
  802098:	d0a03317 	ldw	r2,-32564(gp)
  80209c:	10800117 	ldw	r2,4(r2)
  8020a0:	1007883a 	mov	r3,r2
  8020a4:	e0bffb17 	ldw	r2,-20(fp)
  8020a8:	1085883a 	add	r2,r2,r2
  8020ac:	1085883a 	add	r2,r2,r2
  8020b0:	1885883a 	add	r2,r3,r2
  8020b4:	10800017 	ldw	r2,0(r2)
  8020b8:	288b883a 	add	r5,r5,r2
  8020bc:	d0a03317 	ldw	r2,-32564(gp)
  8020c0:	10800117 	ldw	r2,4(r2)
  8020c4:	1007883a 	mov	r3,r2
  8020c8:	e0bffb17 	ldw	r2,-20(fp)
  8020cc:	1085883a 	add	r2,r2,r2
  8020d0:	1085883a 	add	r2,r2,r2
  8020d4:	1885883a 	add	r2,r3,r2
  8020d8:	10800104 	addi	r2,r2,4
  8020dc:	10800017 	ldw	r2,0(r2)
  8020e0:	288b883a 	add	r5,r5,r2
  8020e4:	d0a03317 	ldw	r2,-32564(gp)
  8020e8:	10800117 	ldw	r2,4(r2)
  8020ec:	1007883a 	mov	r3,r2
  8020f0:	e0bffb17 	ldw	r2,-20(fp)
  8020f4:	1085883a 	add	r2,r2,r2
  8020f8:	1085883a 	add	r2,r2,r2
  8020fc:	1885883a 	add	r2,r3,r2
  802100:	10800204 	addi	r2,r2,8
  802104:	10800017 	ldw	r2,0(r2)
  802108:	2885883a 	add	r2,r5,r2
  80210c:	1085883a 	add	r2,r2,r2
  802110:	20800015 	stw	r2,0(r4)
									+ *((long*)pCharacter->pY + (j+1)) + *((long*)pCharacter->pY + (j+2)))*2;
			prev_val_X[1] = prev_val_X[0];
  802114:	e0bffc17 	ldw	r2,-16(fp)
  802118:	e0bffd15 	stw	r2,-12(fp)
			prev_val_X[0] = tempX;
  80211c:	e0bffa17 	ldw	r2,-24(fp)
  802120:	e0bffc15 	stw	r2,-16(fp)
			prev_val_Y[1] = prev_val_Y[0];
  802124:	e0bffe17 	ldw	r2,-8(fp)
  802128:	e0bfff15 	stw	r2,-4(fp)
			prev_val_Y[0] = tempY;
  80212c:	e0bff917 	ldw	r2,-28(fp)
  802130:	e0bffe15 	stw	r2,-8(fp)
  802134:	00004406 	br	802248 <AverageCharReadPattern+0x33c>
		}
		else
		{
			tempX = *((long*)pCharacter->pX + j);
  802138:	d0a03317 	ldw	r2,-32564(gp)
  80213c:	10800017 	ldw	r2,0(r2)
  802140:	1007883a 	mov	r3,r2
  802144:	e0bffb17 	ldw	r2,-20(fp)
  802148:	1085883a 	add	r2,r2,r2
  80214c:	1085883a 	add	r2,r2,r2
  802150:	1885883a 	add	r2,r3,r2
  802154:	10800017 	ldw	r2,0(r2)
  802158:	e0bffa15 	stw	r2,-24(fp)
			tempY = *((long*)pCharacter->pX + j);
  80215c:	d0a03317 	ldw	r2,-32564(gp)
  802160:	10800017 	ldw	r2,0(r2)
  802164:	1007883a 	mov	r3,r2
  802168:	e0bffb17 	ldw	r2,-20(fp)
  80216c:	1085883a 	add	r2,r2,r2
  802170:	1085883a 	add	r2,r2,r2
  802174:	1885883a 	add	r2,r3,r2
  802178:	10800017 	ldw	r2,0(r2)
  80217c:	e0bff915 	stw	r2,-28(fp)
			*((long*)pCharacter->pX + j) = (prev_val_X[1] + prev_val_X[0] + *((long*)pCharacter->pX + j))*2;
  802180:	d0a03317 	ldw	r2,-32564(gp)
  802184:	10800017 	ldw	r2,0(r2)
  802188:	1007883a 	mov	r3,r2
  80218c:	e0bffb17 	ldw	r2,-20(fp)
  802190:	1085883a 	add	r2,r2,r2
  802194:	1085883a 	add	r2,r2,r2
  802198:	1889883a 	add	r4,r3,r2
  80219c:	e0fffd17 	ldw	r3,-12(fp)
  8021a0:	e0bffc17 	ldw	r2,-16(fp)
  8021a4:	188b883a 	add	r5,r3,r2
  8021a8:	d0a03317 	ldw	r2,-32564(gp)
  8021ac:	10800017 	ldw	r2,0(r2)
  8021b0:	1007883a 	mov	r3,r2
  8021b4:	e0bffb17 	ldw	r2,-20(fp)
  8021b8:	1085883a 	add	r2,r2,r2
  8021bc:	1085883a 	add	r2,r2,r2
  8021c0:	1885883a 	add	r2,r3,r2
  8021c4:	10800017 	ldw	r2,0(r2)
  8021c8:	2885883a 	add	r2,r5,r2
  8021cc:	1085883a 	add	r2,r2,r2
  8021d0:	20800015 	stw	r2,0(r4)
			*((long*)pCharacter->pY + j) = (prev_val_Y[1] + prev_val_Y[0] + *((long*)pCharacter->pY + j))*2;
  8021d4:	d0a03317 	ldw	r2,-32564(gp)
  8021d8:	10800117 	ldw	r2,4(r2)
  8021dc:	1007883a 	mov	r3,r2
  8021e0:	e0bffb17 	ldw	r2,-20(fp)
  8021e4:	1085883a 	add	r2,r2,r2
  8021e8:	1085883a 	add	r2,r2,r2
  8021ec:	1889883a 	add	r4,r3,r2
  8021f0:	e0ffff17 	ldw	r3,-4(fp)
  8021f4:	e0bffe17 	ldw	r2,-8(fp)
  8021f8:	188b883a 	add	r5,r3,r2
  8021fc:	d0a03317 	ldw	r2,-32564(gp)
  802200:	10800117 	ldw	r2,4(r2)
  802204:	1007883a 	mov	r3,r2
  802208:	e0bffb17 	ldw	r2,-20(fp)
  80220c:	1085883a 	add	r2,r2,r2
  802210:	1085883a 	add	r2,r2,r2
  802214:	1885883a 	add	r2,r3,r2
  802218:	10800017 	ldw	r2,0(r2)
  80221c:	2885883a 	add	r2,r5,r2
  802220:	1085883a 	add	r2,r2,r2
  802224:	20800015 	stw	r2,0(r4)
			prev_val_X[1] = prev_val_X[0];
  802228:	e0bffc17 	ldw	r2,-16(fp)
  80222c:	e0bffd15 	stw	r2,-12(fp)
			prev_val_X[0] = tempX;
  802230:	e0bffa17 	ldw	r2,-24(fp)
  802234:	e0bffc15 	stw	r2,-16(fp)
			prev_val_Y[1] = prev_val_Y[0];
  802238:	e0bffe17 	ldw	r2,-8(fp)
  80223c:	e0bfff15 	stw	r2,-4(fp)
			prev_val_Y[0] = tempY;
  802240:	e0bff917 	ldw	r2,-28(fp)
  802244:	e0bffe15 	stw	r2,-8(fp)
void AverageCharReadPattern()
{
	int j;
	long prev_val_X[2] = {*((long*)pCharacter->pX), *((long*)pCharacter->pX+1)};
	long prev_val_Y[2] = {*((long*)pCharacter->pY), *((long*)pCharacter->pY+1)};
	for (j = 0; j < pCharacter->size; j++)
  802248:	e0bffb17 	ldw	r2,-20(fp)
  80224c:	10800044 	addi	r2,r2,1
  802250:	e0bffb15 	stw	r2,-20(fp)
  802254:	d0a03317 	ldw	r2,-32564(gp)
  802258:	10c00217 	ldw	r3,8(r2)
  80225c:	e0bffb17 	ldw	r2,-20(fp)
  802260:	10ff4116 	blt	r2,r3,801f68 <AverageCharReadPattern+0x5c>
			prev_val_X[0] = tempX;
			prev_val_Y[1] = prev_val_Y[0];
			prev_val_Y[0] = tempY;
		}
	}
}
  802264:	e037883a 	mov	sp,fp
  802268:	df000017 	ldw	fp,0(sp)
  80226c:	dec00104 	addi	sp,sp,4
  802270:	f800283a 	ret

00802274 <taskDTWX>:


/* Performs DTW on X coordinates */
void taskDTWX(void* pdata) {
  802274:	defffc04 	addi	sp,sp,-16
  802278:	dfc00315 	stw	ra,12(sp)
  80227c:	df000215 	stw	fp,8(sp)
  802280:	df000204 	addi	fp,sp,8
  802284:	e13fff15 	stw	r4,-4(fp)
	//volatile alt_u32 * pSRAM2 = ((alt_u32*) SRAM_0_BASE) + sizeof(int)*INPUT_SIZE;

	//char buffer[SD_BUFFER_SIZE];// = "SD CARD test message\r\n\0";
	while (1) {
		//msg = OSQPend(message, 0, &err);
		OSSemPend(dtw_semx, 0, &err);
  802288:	d1203f17 	ldw	r4,-32516(gp)
  80228c:	000b883a 	mov	r5,zero
  802290:	d1a04104 	addi	r6,gp,-32508
  802294:	0812f900 	call	812f90 <OSSemPend>
		//t = clock();
		//template[template_number].
		//pCharacter->s
		//pCharacter->
		//int answer = dtw((int*)pCharacter->pX, t1 , pCharacter->size, INPUT_SIZE);
		dtwx = dtw( (long*)template[template_number].pX, (long*)(pCharacter->pX), template[template_number].size,  pCharacter->size, 0);
  802298:	d0a03217 	ldw	r2,-32568(gp)
  80229c:	00c020f4 	movhi	r3,131
  8022a0:	18fd5504 	addi	r3,r3,-2732
  8022a4:	10800324 	muli	r2,r2,12
  8022a8:	10c5883a 	add	r2,r2,r3
  8022ac:	10800017 	ldw	r2,0(r2)
  8022b0:	1009883a 	mov	r4,r2
  8022b4:	d0a03317 	ldw	r2,-32564(gp)
  8022b8:	10800017 	ldw	r2,0(r2)
  8022bc:	100b883a 	mov	r5,r2
  8022c0:	d0a03217 	ldw	r2,-32568(gp)
  8022c4:	00c020f4 	movhi	r3,131
  8022c8:	18fd5504 	addi	r3,r3,-2732
  8022cc:	10800324 	muli	r2,r2,12
  8022d0:	10c5883a 	add	r2,r2,r3
  8022d4:	10800204 	addi	r2,r2,8
  8022d8:	11800017 	ldw	r6,0(r2)
  8022dc:	d0a03317 	ldw	r2,-32564(gp)
  8022e0:	11c00217 	ldw	r7,8(r2)
  8022e4:	d8000015 	stw	zero,0(sp)
  8022e8:	08001d00 	call	8001d0 <dtw>
  8022ec:	d0a03d15 	stw	r2,-32524(gp)

		//t = clock() - t;
		//float time = ((float) t) / CLOCKS_PER_SEC;
		//printf("%d   time = %f", answer, time);

		OSSemPost(semx);
  8022f0:	d1204217 	ldw	r4,-32504(gp)
  8022f4:	08133880 	call	813388 <OSSemPost>
	}
  8022f8:	003fe306 	br	802288 <taskDTWX+0x14>

008022fc <taskDTWY>:
}

/* Performs DTW on X coordinates */
void taskDTWY(void* pdata) {
  8022fc:	defffc04 	addi	sp,sp,-16
  802300:	dfc00315 	stw	ra,12(sp)
  802304:	df000215 	stw	fp,8(sp)
  802308:	df000204 	addi	fp,sp,8
  80230c:	e13fff15 	stw	r4,-4(fp)
	//volatile alt_u32 * pSRAM2 = ((alt_u32*) SRAM_0_BASE) + sizeof(int)*INPUT_SIZE;

	//char buffer[SD_BUFFER_SIZE];// = "SD CARD test message\r\n\0";
	while (1) {
		//msg = OSQPend(message, 0, &err);
		OSSemPend(dtw_semy, 0, &err);
  802310:	d1203417 	ldw	r4,-32560(gp)
  802314:	000b883a 	mov	r5,zero
  802318:	d1a04104 	addi	r6,gp,-32508
  80231c:	0812f900 	call	812f90 <OSSemPend>
//			return;
//		}

//		t = clock();
//		int answer = dtw((int*)pCharacter->pY, t1 , pCharacter->size, INPUT_SIZE);
		dtwy = dtw( (long*)template[template_number].pY, (long*)(pCharacter->pY), template[template_number].size,  pCharacter->size, 1);
  802320:	d0a03217 	ldw	r2,-32568(gp)
  802324:	00c020f4 	movhi	r3,131
  802328:	18fd5504 	addi	r3,r3,-2732
  80232c:	10800324 	muli	r2,r2,12
  802330:	10c5883a 	add	r2,r2,r3
  802334:	10800104 	addi	r2,r2,4
  802338:	10800017 	ldw	r2,0(r2)
  80233c:	1009883a 	mov	r4,r2
  802340:	d0a03317 	ldw	r2,-32564(gp)
  802344:	10800117 	ldw	r2,4(r2)
  802348:	100b883a 	mov	r5,r2
  80234c:	d0a03217 	ldw	r2,-32568(gp)
  802350:	00c020f4 	movhi	r3,131
  802354:	18fd5504 	addi	r3,r3,-2732
  802358:	10800324 	muli	r2,r2,12
  80235c:	10c5883a 	add	r2,r2,r3
  802360:	10800204 	addi	r2,r2,8
  802364:	11800017 	ldw	r6,0(r2)
  802368:	d0a03317 	ldw	r2,-32564(gp)
  80236c:	11c00217 	ldw	r7,8(r2)
  802370:	00800044 	movi	r2,1
  802374:	d8800015 	stw	r2,0(sp)
  802378:	08001d00 	call	8001d0 <dtw>
  80237c:	d0a03515 	stw	r2,-32556(gp)

//		t = clock() - t;
//		float time = ((float) t) / CLOCKS_PER_SEC;
//		printf("%d   time = %f", answer, time);

		OSSemPost(semy);
  802380:	d1203617 	ldw	r4,-32552(gp)
  802384:	08133880 	call	813388 <OSSemPost>
	}
  802388:	003fe106 	br	802310 <taskDTWY+0x14>

0080238c <main>:
}



/* The main function runs the accelerometer character recognition and calibration tests. */
int main(void) {
  80238c:	defff904 	addi	sp,sp,-28
  802390:	dfc00615 	stw	ra,24(sp)
  802394:	df000515 	stw	fp,20(sp)
  802398:	df000504 	addi	fp,sp,20
	modeselectsem = OSSemCreate(1);
  80239c:	01000044 	movi	r4,1
  8023a0:	0812bdc0 	call	812bdc <OSSemCreate>
  8023a4:	d0a04315 	stw	r2,-32500(gp)
	uartsem = OSSemCreate(0);
  8023a8:	0009883a 	mov	r4,zero
  8023ac:	0812bdc0 	call	812bdc <OSSemCreate>
  8023b0:	d0a03b15 	stw	r2,-32532(gp)
	configuresem = OSSemCreate(0);
  8023b4:	0009883a 	mov	r4,zero
  8023b8:	0812bdc0 	call	812bdc <OSSemCreate>
  8023bc:	d0a03a15 	stw	r2,-32536(gp)
	dtw_sem = OSSemCreate(1);
  8023c0:	01000044 	movi	r4,1
  8023c4:	0812bdc0 	call	812bdc <OSSemCreate>
  8023c8:	d0a03e15 	stw	r2,-32520(gp)
	loadsem = OSSemCreate(0);
  8023cc:	0009883a 	mov	r4,zero
  8023d0:	0812bdc0 	call	812bdc <OSSemCreate>
  8023d4:	d0a04015 	stw	r2,-32512(gp)

	message = OSQCreate(&messageArray, MSG_QUEUE_SIZE);
  8023d8:	010020f4 	movhi	r4,131
  8023dc:	210d9104 	addi	r4,r4,13892
  8023e0:	01401904 	movi	r5,100
  8023e4:	081193c0 	call	81193c <OSQCreate>
  8023e8:	d0a03c15 	stw	r2,-32528(gp)
	lcdmessage = OSQCreate(&lcdArray, MSG_QUEUE_SIZE);
  8023ec:	010020b4 	movhi	r4,130
  8023f0:	211ce904 	addi	r4,r4,29604
  8023f4:	01401904 	movi	r5,100
  8023f8:	081193c0 	call	81193c <OSQCreate>
  8023fc:	d0a03015 	stw	r2,-32576(gp)
//	messageX = OSQCreate(&messageArrayX, MSG_QUEUE_SIZE);
//	messageY = OSQCreate(&messageArrayY, MSG_QUEUE_SIZE);
	dtw_semx = OSSemCreate(0);
  802400:	0009883a 	mov	r4,zero
  802404:	0812bdc0 	call	812bdc <OSSemCreate>
  802408:	d0a03f15 	stw	r2,-32516(gp)
	dtw_semy = OSSemCreate(0);
  80240c:	0009883a 	mov	r4,zero
  802410:	0812bdc0 	call	812bdc <OSSemCreate>
  802414:	d0a03415 	stw	r2,-32560(gp)
	semx = OSSemCreate(0);
  802418:	0009883a 	mov	r4,zero
  80241c:	0812bdc0 	call	812bdc <OSSemCreate>
  802420:	d0a04215 	stw	r2,-32504(gp)
	semy = OSSemCreate(0);
  802424:	0009883a 	mov	r4,zero
  802428:	0812bdc0 	call	812bdc <OSSemCreate>
  80242c:	d0a03615 	stw	r2,-32552(gp)

	writesem = OSSemCreate(0);
  802430:	0009883a 	mov	r4,zero
  802434:	0812bdc0 	call	812bdc <OSSemCreate>
  802438:	d0a03915 	stw	r2,-32540(gp)
	readsem = OSSemCreate(0);
  80243c:	0009883a 	mov	r4,zero
  802440:	0812bdc0 	call	812bdc <OSSemCreate>
  802444:	d0a03715 	stw	r2,-32548(gp)
	loadsdcardsem = OSSemCreate(0);
  802448:	0009883a 	mov	r4,zero
  80244c:	0812bdc0 	call	812bdc <OSSemCreate>
  802450:	d0a03815 	stw	r2,-32544(gp)
	//SWQ = OSQCreate(SWQ_stk, TASK_STACKSIZE);

	OSTaskCreateExt(taskModeSelect, NULL, (void *) &taskModeSelect_stk[TASK_STACKSIZE - 1],
  802454:	018020b4 	movhi	r6,130
  802458:	3194e804 	addi	r6,r6,21408
  80245c:	00800044 	movi	r2,1
  802460:	d8800015 	stw	r2,0(sp)
  802464:	008020b4 	movhi	r2,130
  802468:	108ce904 	addi	r2,r2,13220
  80246c:	d8800115 	stw	r2,4(sp)
  802470:	00820004 	movi	r2,2048
  802474:	d8800215 	stw	r2,8(sp)
  802478:	d8000315 	stw	zero,12(sp)
  80247c:	d8000415 	stw	zero,16(sp)
  802480:	01002034 	movhi	r4,128
  802484:	21014904 	addi	r4,r4,1316
  802488:	000b883a 	mov	r5,zero
  80248c:	01c00044 	movi	r7,1
  802490:	0813e2c0 	call	813e2c <OSTaskCreateExt>
			TASKMODESELECT_PRIORITY, TASKMODESELECT_PRIORITY, taskModeSelect_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskLcdPrint, NULL, (void *) &taskLcdPrint_stk[TASK_STACKSIZE - 1],
  802494:	018020f4 	movhi	r6,131
  802498:	31ad4c04 	addi	r6,r6,-19152
  80249c:	00800084 	movi	r2,2
  8024a0:	d8800015 	stw	r2,0(sp)
  8024a4:	008020f4 	movhi	r2,131
  8024a8:	10a54d04 	addi	r2,r2,-27340
  8024ac:	d8800115 	stw	r2,4(sp)
  8024b0:	00820004 	movi	r2,2048
  8024b4:	d8800215 	stw	r2,8(sp)
  8024b8:	d8000315 	stw	zero,12(sp)
  8024bc:	d8000415 	stw	zero,16(sp)
  8024c0:	01002034 	movhi	r4,128
  8024c4:	2101ac04 	addi	r4,r4,1712
  8024c8:	000b883a 	mov	r5,zero
  8024cc:	01c00084 	movi	r7,2
  8024d0:	0813e2c0 	call	813e2c <OSTaskCreateExt>
			TASKLCDPRINT_PRIORITY, TASKLCDPRINT_PRIORITY, taskLcdPrint_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskLoadSDCard, NULL, (void *) &taskLoadSDCard_stk[TASK_STACKSIZE - 1],
  8024d4:	018020f4 	movhi	r6,131
  8024d8:	31bd4c04 	addi	r6,r6,-2768
  8024dc:	008000c4 	movi	r2,3
  8024e0:	d8800015 	stw	r2,0(sp)
  8024e4:	008020f4 	movhi	r2,131
  8024e8:	10b54d04 	addi	r2,r2,-10956
  8024ec:	d8800115 	stw	r2,4(sp)
  8024f0:	00820004 	movi	r2,2048
  8024f4:	d8800215 	stw	r2,8(sp)
  8024f8:	d8000315 	stw	zero,12(sp)
  8024fc:	d8000415 	stw	zero,16(sp)
  802500:	01002034 	movhi	r4,128
  802504:	2101d104 	addi	r4,r4,1860
  802508:	000b883a 	mov	r5,zero
  80250c:	01c000c4 	movi	r7,3
  802510:	0813e2c0 	call	813e2c <OSTaskCreateExt>
			TASKLOADSDCARD_PRIORITY, TASKLOADSDCARD_PRIORITY, taskLoadSDCard_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskCalibrate, NULL, (void *) &taskCalibrate_stk[TASK_STACKSIZE - 1],
  802514:	018020b4 	movhi	r6,130
  802518:	3184e804 	addi	r6,r6,5024
  80251c:	00800104 	movi	r2,4
  802520:	d8800015 	stw	r2,0(sp)
  802524:	008020b4 	movhi	r2,130
  802528:	10bce904 	addi	r2,r2,-3164
  80252c:	d8800115 	stw	r2,4(sp)
  802530:	00820004 	movi	r2,2048
  802534:	d8800215 	stw	r2,8(sp)
  802538:	d8000315 	stw	zero,12(sp)
  80253c:	d8000415 	stw	zero,16(sp)
  802540:	01002034 	movhi	r4,128
  802544:	21040404 	addi	r4,r4,4112
  802548:	000b883a 	mov	r5,zero
  80254c:	01c00104 	movi	r7,4
  802550:	0813e2c0 	call	813e2c <OSTaskCreateExt>
			TASKCALIBRATE_PRIORITY, TASKCALIBRATE_PRIORITY, taskCalibrate_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskCharacterRead, NULL, (void *) &taskCharacterRead_stk[TASK_STACKSIZE - 1],
  802554:	018020b4 	movhi	r6,130
  802558:	318ce804 	addi	r6,r6,13216
  80255c:	00800244 	movi	r2,9
  802560:	d8800015 	stw	r2,0(sp)
  802564:	008020b4 	movhi	r2,130
  802568:	1084e904 	addi	r2,r2,5028
  80256c:	d8800115 	stw	r2,4(sp)
  802570:	00820004 	movi	r2,2048
  802574:	d8800215 	stw	r2,8(sp)
  802578:	d8000315 	stw	zero,12(sp)
  80257c:	d8000415 	stw	zero,16(sp)
  802580:	01002034 	movhi	r4,128
  802584:	21058304 	addi	r4,r4,5644
  802588:	000b883a 	mov	r5,zero
  80258c:	01c00244 	movi	r7,9
  802590:	0813e2c0 	call	813e2c <OSTaskCreateExt>
			TASKCHARACTERREAD_PRIORITY, TASKCHARACTERREAD_PRIORITY, taskCharacterRead_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskTemplateMatch, NULL, (void *) &taskTemplateMatch_stk[TASK_STACKSIZE - 1],
  802594:	018020b4 	movhi	r6,130
  802598:	319ce804 	addi	r6,r6,29600
  80259c:	00800204 	movi	r2,8
  8025a0:	d8800015 	stw	r2,0(sp)
  8025a4:	008020b4 	movhi	r2,130
  8025a8:	1094e904 	addi	r2,r2,21412
  8025ac:	d8800115 	stw	r2,4(sp)
  8025b0:	00820004 	movi	r2,2048
  8025b4:	d8800215 	stw	r2,8(sp)
  8025b8:	d8000315 	stw	zero,12(sp)
  8025bc:	d8000415 	stw	zero,16(sp)
  8025c0:	01002034 	movhi	r4,128
  8025c4:	2106be04 	addi	r4,r4,6904
  8025c8:	000b883a 	mov	r5,zero
  8025cc:	01c00204 	movi	r7,8
  8025d0:	0813e2c0 	call	813e2c <OSTaskCreateExt>
			TASKTEMPLATEMATCH_PRIORITY, TASKTEMPLATEMATCH_PRIORITY, taskTemplateMatch_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskDTWX, NULL, (void *) &taskDTWX_stk[TASK_STACKSIZE - 1],
  8025d4:	018020f4 	movhi	r6,131
  8025d8:	31a54c04 	addi	r6,r6,-27344
  8025dc:	00800184 	movi	r2,6
  8025e0:	d8800015 	stw	r2,0(sp)
  8025e4:	008020b4 	movhi	r2,130
  8025e8:	109d4d04 	addi	r2,r2,30004
  8025ec:	d8800115 	stw	r2,4(sp)
  8025f0:	00820004 	movi	r2,2048
  8025f4:	d8800215 	stw	r2,8(sp)
  8025f8:	d8000315 	stw	zero,12(sp)
  8025fc:	d8000415 	stw	zero,16(sp)
  802600:	01002034 	movhi	r4,128
  802604:	21089d04 	addi	r4,r4,8820
  802608:	000b883a 	mov	r5,zero
  80260c:	01c00184 	movi	r7,6
  802610:	0813e2c0 	call	813e2c <OSTaskCreateExt>
			TASKDTWX_PRIORITY, TASKDTWX_PRIORITY, taskDTWX_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskDTWY, NULL, (void *) &taskDTWY_stk[TASK_STACKSIZE - 1],
  802614:	018020f4 	movhi	r6,131
  802618:	318d9004 	addi	r6,r6,13888
  80261c:	008001c4 	movi	r2,7
  802620:	d8800015 	stw	r2,0(sp)
  802624:	008020f4 	movhi	r2,131
  802628:	10859104 	addi	r2,r2,5700
  80262c:	d8800115 	stw	r2,4(sp)
  802630:	00820004 	movi	r2,2048
  802634:	d8800215 	stw	r2,8(sp)
  802638:	d8000315 	stw	zero,12(sp)
  80263c:	d8000415 	stw	zero,16(sp)
  802640:	01002034 	movhi	r4,128
  802644:	2108bf04 	addi	r4,r4,8956
  802648:	000b883a 	mov	r5,zero
  80264c:	01c001c4 	movi	r7,7
  802650:	0813e2c0 	call	813e2c <OSTaskCreateExt>
			TASKDTWY_PRIORITY, TASKDTWY_PRIORITY, taskDTWY_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(taskWriteSDCard, NULL, (void *) &taskWriteSDCard_stk[TASK_STACKSIZE - 1],
  802654:	018020f4 	movhi	r6,131
  802658:	31b54c04 	addi	r6,r6,-10960
  80265c:	00800144 	movi	r2,5
  802660:	d8800015 	stw	r2,0(sp)
  802664:	008020f4 	movhi	r2,131
  802668:	10ad4d04 	addi	r2,r2,-19148
  80266c:	d8800115 	stw	r2,4(sp)
  802670:	00820004 	movi	r2,2048
  802674:	d8800215 	stw	r2,8(sp)
  802678:	d8000315 	stw	zero,12(sp)
  80267c:	d8000415 	stw	zero,16(sp)
  802680:	01002034 	movhi	r4,128
  802684:	2104e604 	addi	r4,r4,5016
  802688:	000b883a 	mov	r5,zero
  80268c:	01c00144 	movi	r7,5
  802690:	0813e2c0 	call	813e2c <OSTaskCreateExt>
			TASKWRITESDCARD_PRIORITY, TASKWRITESDCARD_PRIORITY, taskWriteSDCard_stk, TASK_STACKSIZE, NULL, 0);
	OSStart();
  802694:	080e0580 	call	80e058 <OSStart>
	return 0;
  802698:	0005883a 	mov	r2,zero
}
  80269c:	e037883a 	mov	sp,fp
  8026a0:	dfc00117 	ldw	ra,4(sp)
  8026a4:	df000017 	ldw	fp,0(sp)
  8026a8:	dec00204 	addi	sp,sp,8
  8026ac:	f800283a 	ret

008026b0 <sqrt>:
  8026b0:	defff104 	addi	sp,sp,-60
  8026b4:	dd000d15 	stw	r20,52(sp)
  8026b8:	050020b4 	movhi	r20,130
  8026bc:	a53c6704 	addi	r20,r20,-3684
  8026c0:	dcc00c15 	stw	r19,48(sp)
  8026c4:	dc800b15 	stw	r18,44(sp)
  8026c8:	dc400a15 	stw	r17,40(sp)
  8026cc:	dc000915 	stw	r16,36(sp)
  8026d0:	2025883a 	mov	r18,r4
  8026d4:	dfc00e15 	stw	ra,56(sp)
  8026d8:	2827883a 	mov	r19,r5
  8026dc:	08027e00 	call	8027e0 <__ieee754_sqrt>
  8026e0:	a1000017 	ldw	r4,0(r20)
  8026e4:	1021883a 	mov	r16,r2
  8026e8:	00bfffc4 	movi	r2,-1
  8026ec:	1823883a 	mov	r17,r3
  8026f0:	20800a26 	beq	r4,r2,80271c <sqrt+0x6c>
  8026f4:	9009883a 	mov	r4,r18
  8026f8:	980b883a 	mov	r5,r19
  8026fc:	0802aa80 	call	802aa8 <__isnand>
  802700:	1000061e 	bne	r2,zero,80271c <sqrt+0x6c>
  802704:	000d883a 	mov	r6,zero
  802708:	000f883a 	mov	r7,zero
  80270c:	9009883a 	mov	r4,r18
  802710:	980b883a 	mov	r5,r19
  802714:	08038580 	call	803858 <__ltdf2>
  802718:	10000a16 	blt	r2,zero,802744 <sqrt+0x94>
  80271c:	8005883a 	mov	r2,r16
  802720:	8807883a 	mov	r3,r17
  802724:	dfc00e17 	ldw	ra,56(sp)
  802728:	dd000d17 	ldw	r20,52(sp)
  80272c:	dcc00c17 	ldw	r19,48(sp)
  802730:	dc800b17 	ldw	r18,44(sp)
  802734:	dc400a17 	ldw	r17,40(sp)
  802738:	dc000917 	ldw	r16,36(sp)
  80273c:	dec00f04 	addi	sp,sp,60
  802740:	f800283a 	ret
  802744:	a4000017 	ldw	r16,0(r20)
  802748:	00800044 	movi	r2,1
  80274c:	00c020b4 	movhi	r3,130
  802750:	18f48b04 	addi	r3,r3,-11732
  802754:	d8800015 	stw	r2,0(sp)
  802758:	d8c00115 	stw	r3,4(sp)
  80275c:	dcc00315 	stw	r19,12(sp)
  802760:	d8000815 	stw	zero,32(sp)
  802764:	dc800415 	stw	r18,16(sp)
  802768:	dcc00515 	stw	r19,20(sp)
  80276c:	dc800215 	stw	r18,8(sp)
  802770:	80000a1e 	bne	r16,zero,80279c <sqrt+0xec>
  802774:	d8000615 	stw	zero,24(sp)
  802778:	d8000715 	stw	zero,28(sp)
  80277c:	d809883a 	mov	r4,sp
  802780:	0802ad80 	call	802ad8 <matherr>
  802784:	10000e26 	beq	r2,zero,8027c0 <sqrt+0x110>
  802788:	d8800817 	ldw	r2,32(sp)
  80278c:	1000101e 	bne	r2,zero,8027d0 <sqrt+0x120>
  802790:	dc000617 	ldw	r16,24(sp)
  802794:	dc400717 	ldw	r17,28(sp)
  802798:	003fe006 	br	80271c <sqrt+0x6c>
  80279c:	0009883a 	mov	r4,zero
  8027a0:	000d883a 	mov	r6,zero
  8027a4:	000b883a 	mov	r5,zero
  8027a8:	000f883a 	mov	r7,zero
  8027ac:	08036000 	call	803600 <__divdf3>
  8027b0:	d8800615 	stw	r2,24(sp)
  8027b4:	00800084 	movi	r2,2
  8027b8:	d8c00715 	stw	r3,28(sp)
  8027bc:	80bfef1e 	bne	r16,r2,80277c <sqrt+0xcc>
  8027c0:	08043040 	call	804304 <__errno>
  8027c4:	00c00844 	movi	r3,33
  8027c8:	10c00015 	stw	r3,0(r2)
  8027cc:	003fee06 	br	802788 <sqrt+0xd8>
  8027d0:	08043040 	call	804304 <__errno>
  8027d4:	d8c00817 	ldw	r3,32(sp)
  8027d8:	10c00015 	stw	r3,0(r2)
  8027dc:	003fec06 	br	802790 <sqrt+0xe0>

008027e0 <__ieee754_sqrt>:
  8027e0:	defffd04 	addi	sp,sp,-12
  8027e4:	dc000015 	stw	r16,0(sp)
  8027e8:	009ffc34 	movhi	r2,32752
  8027ec:	2021883a 	mov	r16,r4
  8027f0:	291ffc2c 	andhi	r4,r5,32752
  8027f4:	dc400115 	stw	r17,4(sp)
  8027f8:	dfc00215 	stw	ra,8(sp)
  8027fc:	2823883a 	mov	r17,r5
  802800:	280f883a 	mov	r7,r5
  802804:	2807883a 	mov	r3,r5
  802808:	8011883a 	mov	r8,r16
  80280c:	20807d26 	beq	r4,r2,802a04 <__ieee754_sqrt+0x224>
  802810:	01408d0e 	bge	zero,r5,802a48 <__ieee754_sqrt+0x268>
  802814:	380dd53a 	srai	r6,r7,20
  802818:	3000131e 	bne	r6,zero,802868 <__ieee754_sqrt+0x88>
  80281c:	1800041e 	bne	r3,zero,802830 <__ieee754_sqrt+0x50>
  802820:	400ed2fa 	srli	r7,r8,11
  802824:	31bffac4 	addi	r6,r6,-21
  802828:	4010957a 	slli	r8,r8,21
  80282c:	383ffc26 	beq	r7,zero,802820 <__ieee754_sqrt+0x40>
  802830:	3880042c 	andhi	r2,r7,16
  802834:	1000991e 	bne	r2,zero,802a9c <__ieee754_sqrt+0x2bc>
  802838:	0009883a 	mov	r4,zero
  80283c:	39cf883a 	add	r7,r7,r7
  802840:	3880042c 	andhi	r2,r7,16
  802844:	21000044 	addi	r4,r4,1
  802848:	103ffc26 	beq	r2,zero,80283c <__ieee754_sqrt+0x5c>
  80284c:	00800804 	movi	r2,32
  802850:	1105c83a 	sub	r2,r2,r4
  802854:	4086d83a 	srl	r3,r8,r2
  802858:	4110983a 	sll	r8,r8,r4
  80285c:	3105c83a 	sub	r2,r6,r4
  802860:	38ceb03a 	or	r7,r7,r3
  802864:	11800044 	addi	r6,r2,1
  802868:	31bf0044 	addi	r6,r6,-1023
  80286c:	30c0004c 	andi	r3,r6,1
  802870:	00800434 	movhi	r2,16
  802874:	10bfffc4 	addi	r2,r2,-1
  802878:	3884703a 	and	r2,r7,r2
  80287c:	1807003a 	cmpeq	r3,r3,zero
  802880:	11000434 	orhi	r4,r2,16
  802884:	18005426 	beq	r3,zero,8029d8 <__ieee754_sqrt+0x1f8>
  802888:	4004d7fa 	srli	r2,r8,31
  80288c:	4207883a 	add	r3,r8,r8
  802890:	02800834 	movhi	r10,32
  802894:	1105883a 	add	r2,r2,r4
  802898:	2089883a 	add	r4,r4,r2
  80289c:	0011883a 	mov	r8,zero
  8028a0:	000b883a 	mov	r5,zero
  8028a4:	0013883a 	mov	r9,zero
  8028a8:	02c00584 	movi	r11,22
  8028ac:	520f883a 	add	r7,r10,r8
  8028b0:	1804d7fa 	srli	r2,r3,31
  8028b4:	4a400044 	addi	r9,r9,1
  8028b8:	18c7883a 	add	r3,r3,r3
  8028bc:	21c00316 	blt	r4,r7,8028cc <__ieee754_sqrt+0xec>
  8028c0:	21c9c83a 	sub	r4,r4,r7
  8028c4:	2a8b883a 	add	r5,r5,r10
  8028c8:	51d1883a 	add	r8,r10,r7
  8028cc:	1105883a 	add	r2,r2,r4
  8028d0:	5014d07a 	srli	r10,r10,1
  8028d4:	2089883a 	add	r4,r4,r2
  8028d8:	4afff41e 	bne	r9,r11,8028ac <__ieee754_sqrt+0xcc>
  8028dc:	02600034 	movhi	r9,32768
  8028e0:	0017883a 	mov	r11,zero
  8028e4:	0019883a 	mov	r12,zero
  8028e8:	0015883a 	mov	r10,zero
  8028ec:	4821883a 	mov	r16,r9
  8028f0:	03c00804 	movi	r15,32
  8028f4:	00000806 	br	802918 <__ieee754_sqrt+0x138>
  8028f8:	22003426 	beq	r4,r8,8029cc <__ieee754_sqrt+0x1ec>
  8028fc:	1804d7fa 	srli	r2,r3,31
  802900:	52800044 	addi	r10,r10,1
  802904:	18c7883a 	add	r3,r3,r3
  802908:	1105883a 	add	r2,r2,r4
  80290c:	2089883a 	add	r4,r4,r2
  802910:	4812d07a 	srli	r9,r9,1
  802914:	53c01326 	beq	r10,r15,802964 <__ieee754_sqrt+0x184>
  802918:	4acf883a 	add	r7,r9,r11
  80291c:	413ff60e 	bge	r8,r4,8028f8 <__ieee754_sqrt+0x118>
  802920:	38a0002c 	andhi	r2,r7,32768
  802924:	3a57883a 	add	r11,r7,r9
  802928:	14002426 	beq	r2,r16,8029bc <__ieee754_sqrt+0x1dc>
  80292c:	4005883a 	mov	r2,r8
  802930:	2209c83a 	sub	r4,r4,r8
  802934:	19c0012e 	bgeu	r3,r7,80293c <__ieee754_sqrt+0x15c>
  802938:	213fffc4 	addi	r4,r4,-1
  80293c:	19c7c83a 	sub	r3,r3,r7
  802940:	1011883a 	mov	r8,r2
  802944:	1804d7fa 	srli	r2,r3,31
  802948:	52800044 	addi	r10,r10,1
  80294c:	6259883a 	add	r12,r12,r9
  802950:	1105883a 	add	r2,r2,r4
  802954:	18c7883a 	add	r3,r3,r3
  802958:	2089883a 	add	r4,r4,r2
  80295c:	4812d07a 	srli	r9,r9,1
  802960:	53ffed1e 	bne	r10,r15,802918 <__ieee754_sqrt+0x138>
  802964:	20c4b03a 	or	r2,r4,r3
  802968:	1000201e 	bne	r2,zero,8029ec <__ieee754_sqrt+0x20c>
  80296c:	600ed07a 	srli	r7,r12,1
  802970:	2880004c 	andi	r2,r5,1
  802974:	1005003a 	cmpeq	r2,r2,zero
  802978:	1000011e 	bne	r2,zero,802980 <__ieee754_sqrt+0x1a0>
  80297c:	39e00034 	orhi	r7,r7,32768
  802980:	300dd07a 	srai	r6,r6,1
  802984:	280bd07a 	srai	r5,r5,1
  802988:	010ff834 	movhi	r4,16352
  80298c:	300c953a 	slli	r6,r6,20
  802990:	290b883a 	add	r5,r5,r4
  802994:	3821883a 	mov	r16,r7
  802998:	299d883a 	add	r14,r5,r6
  80299c:	7023883a 	mov	r17,r14
  8029a0:	8005883a 	mov	r2,r16
  8029a4:	8807883a 	mov	r3,r17
  8029a8:	dfc00217 	ldw	ra,8(sp)
  8029ac:	dc400117 	ldw	r17,4(sp)
  8029b0:	dc000017 	ldw	r16,0(sp)
  8029b4:	dec00304 	addi	sp,sp,12
  8029b8:	f800283a 	ret
  8029bc:	5884703a 	and	r2,r11,r2
  8029c0:	103fda1e 	bne	r2,zero,80292c <__ieee754_sqrt+0x14c>
  8029c4:	40800044 	addi	r2,r8,1
  8029c8:	003fd906 	br	802930 <__ieee754_sqrt+0x150>
  8029cc:	19ffd42e 	bgeu	r3,r7,802920 <__ieee754_sqrt+0x140>
  8029d0:	2011883a 	mov	r8,r4
  8029d4:	003fc906 	br	8028fc <__ieee754_sqrt+0x11c>
  8029d8:	4004d7fa 	srli	r2,r8,31
  8029dc:	4211883a 	add	r8,r8,r8
  8029e0:	1105883a 	add	r2,r2,r4
  8029e4:	2089883a 	add	r4,r4,r2
  8029e8:	003fa706 	br	802888 <__ieee754_sqrt+0xa8>
  8029ec:	00bfffc4 	movi	r2,-1
  8029f0:	60802726 	beq	r12,r2,802a90 <__ieee754_sqrt+0x2b0>
  8029f4:	6080004c 	andi	r2,r12,1
  8029f8:	6085883a 	add	r2,r12,r2
  8029fc:	100ed07a 	srli	r7,r2,1
  802a00:	003fdb06 	br	802970 <__ieee754_sqrt+0x190>
  802a04:	8009883a 	mov	r4,r16
  802a08:	800d883a 	mov	r6,r16
  802a0c:	080323c0 	call	80323c <__muldf3>
  802a10:	180f883a 	mov	r7,r3
  802a14:	880b883a 	mov	r5,r17
  802a18:	8009883a 	mov	r4,r16
  802a1c:	100d883a 	mov	r6,r2
  802a20:	08031c80 	call	8031c8 <__adddf3>
  802a24:	1021883a 	mov	r16,r2
  802a28:	1823883a 	mov	r17,r3
  802a2c:	8005883a 	mov	r2,r16
  802a30:	8807883a 	mov	r3,r17
  802a34:	dfc00217 	ldw	ra,8(sp)
  802a38:	dc400117 	ldw	r17,4(sp)
  802a3c:	dc000017 	ldw	r16,0(sp)
  802a40:	dec00304 	addi	sp,sp,12
  802a44:	f800283a 	ret
  802a48:	00a00034 	movhi	r2,32768
  802a4c:	10bfffc4 	addi	r2,r2,-1
  802a50:	2884703a 	and	r2,r5,r2
  802a54:	8084b03a 	or	r2,r16,r2
  802a58:	103fd126 	beq	r2,zero,8029a0 <__ieee754_sqrt+0x1c0>
  802a5c:	283f6d26 	beq	r5,zero,802814 <__ieee754_sqrt+0x34>
  802a60:	280f883a 	mov	r7,r5
  802a64:	8009883a 	mov	r4,r16
  802a68:	800d883a 	mov	r6,r16
  802a6c:	08031480 	call	803148 <__subdf3>
  802a70:	1009883a 	mov	r4,r2
  802a74:	180b883a 	mov	r5,r3
  802a78:	100d883a 	mov	r6,r2
  802a7c:	180f883a 	mov	r7,r3
  802a80:	08036000 	call	803600 <__divdf3>
  802a84:	1021883a 	mov	r16,r2
  802a88:	1823883a 	mov	r17,r3
  802a8c:	003fc406 	br	8029a0 <__ieee754_sqrt+0x1c0>
  802a90:	29400044 	addi	r5,r5,1
  802a94:	000f883a 	mov	r7,zero
  802a98:	003fb506 	br	802970 <__ieee754_sqrt+0x190>
  802a9c:	0009883a 	mov	r4,zero
  802aa0:	00800804 	movi	r2,32
  802aa4:	003f6b06 	br	802854 <__ieee754_sqrt+0x74>

00802aa8 <__isnand>:
  802aa8:	200d883a 	mov	r6,r4
  802aac:	0109c83a 	sub	r4,zero,r4
  802ab0:	2188b03a 	or	r4,r4,r6
  802ab4:	2008d7fa 	srli	r4,r4,31
  802ab8:	00a00034 	movhi	r2,32768
  802abc:	10bfffc4 	addi	r2,r2,-1
  802ac0:	1144703a 	and	r2,r2,r5
  802ac4:	2088b03a 	or	r4,r4,r2
  802ac8:	009ffc34 	movhi	r2,32752
  802acc:	1105c83a 	sub	r2,r2,r4
  802ad0:	1004d7fa 	srli	r2,r2,31
  802ad4:	f800283a 	ret

00802ad8 <matherr>:
  802ad8:	0005883a 	mov	r2,zero
  802adc:	f800283a 	ret

00802ae0 <__muldi3>:
  802ae0:	2011883a 	mov	r8,r4
  802ae4:	427fffcc 	andi	r9,r8,65535
  802ae8:	4018d43a 	srli	r12,r8,16
  802aec:	32bfffcc 	andi	r10,r6,65535
  802af0:	3016d43a 	srli	r11,r6,16
  802af4:	4a85383a 	mul	r2,r9,r10
  802af8:	6295383a 	mul	r10,r12,r10
  802afc:	4ad3383a 	mul	r9,r9,r11
  802b00:	113fffcc 	andi	r4,r2,65535
  802b04:	1004d43a 	srli	r2,r2,16
  802b08:	4a93883a 	add	r9,r9,r10
  802b0c:	3807883a 	mov	r3,r7
  802b10:	1245883a 	add	r2,r2,r9
  802b14:	280f883a 	mov	r7,r5
  802b18:	180b883a 	mov	r5,r3
  802b1c:	1006943a 	slli	r3,r2,16
  802b20:	defffd04 	addi	sp,sp,-12
  802b24:	dc800215 	stw	r18,8(sp)
  802b28:	1907883a 	add	r3,r3,r4
  802b2c:	dc400115 	stw	r17,4(sp)
  802b30:	dc000015 	stw	r16,0(sp)
  802b34:	4165383a 	mul	r18,r8,r5
  802b38:	31e3383a 	mul	r17,r6,r7
  802b3c:	1012d43a 	srli	r9,r2,16
  802b40:	62d9383a 	mul	r12,r12,r11
  802b44:	181f883a 	mov	r15,r3
  802b48:	1280022e 	bgeu	r2,r10,802b54 <__muldi3+0x74>
  802b4c:	00800074 	movhi	r2,1
  802b50:	6099883a 	add	r12,r12,r2
  802b54:	624d883a 	add	r6,r12,r9
  802b58:	9187883a 	add	r3,r18,r6
  802b5c:	88c7883a 	add	r3,r17,r3
  802b60:	7805883a 	mov	r2,r15
  802b64:	dc800217 	ldw	r18,8(sp)
  802b68:	dc400117 	ldw	r17,4(sp)
  802b6c:	dc000017 	ldw	r16,0(sp)
  802b70:	dec00304 	addi	sp,sp,12
  802b74:	f800283a 	ret

00802b78 <__fixdfdi>:
  802b78:	defffd04 	addi	sp,sp,-12
  802b7c:	dc400115 	stw	r17,4(sp)
  802b80:	000f883a 	mov	r7,zero
  802b84:	2823883a 	mov	r17,r5
  802b88:	000d883a 	mov	r6,zero
  802b8c:	dc000015 	stw	r16,0(sp)
  802b90:	dfc00215 	stw	ra,8(sp)
  802b94:	2021883a 	mov	r16,r4
  802b98:	08038580 	call	803858 <__ltdf2>
  802b9c:	89e0003c 	xorhi	r7,r17,32768
  802ba0:	380b883a 	mov	r5,r7
  802ba4:	8009883a 	mov	r4,r16
  802ba8:	10000616 	blt	r2,zero,802bc4 <__fixdfdi+0x4c>
  802bac:	880b883a 	mov	r5,r17
  802bb0:	dfc00217 	ldw	ra,8(sp)
  802bb4:	dc400117 	ldw	r17,4(sp)
  802bb8:	dc000017 	ldw	r16,0(sp)
  802bbc:	dec00304 	addi	sp,sp,12
  802bc0:	0802bf41 	jmpi	802bf4 <__fixunsdfdi>
  802bc4:	0802bf40 	call	802bf4 <__fixunsdfdi>
  802bc8:	0011883a 	mov	r8,zero
  802bcc:	4085c83a 	sub	r2,r8,r2
  802bd0:	4091803a 	cmpltu	r8,r8,r2
  802bd4:	00c7c83a 	sub	r3,zero,r3
  802bd8:	1a11c83a 	sub	r8,r3,r8
  802bdc:	4007883a 	mov	r3,r8
  802be0:	dfc00217 	ldw	ra,8(sp)
  802be4:	dc400117 	ldw	r17,4(sp)
  802be8:	dc000017 	ldw	r16,0(sp)
  802bec:	dec00304 	addi	sp,sp,12
  802bf0:	f800283a 	ret

00802bf4 <__fixunsdfdi>:
  802bf4:	0005883a 	mov	r2,zero
  802bf8:	00cf7c34 	movhi	r3,15856
  802bfc:	defffb04 	addi	sp,sp,-20
  802c00:	180f883a 	mov	r7,r3
  802c04:	100d883a 	mov	r6,r2
  802c08:	dfc00415 	stw	ra,16(sp)
  802c0c:	dcc00315 	stw	r19,12(sp)
  802c10:	dc800215 	stw	r18,8(sp)
  802c14:	dc400115 	stw	r17,4(sp)
  802c18:	dc000015 	stw	r16,0(sp)
  802c1c:	2823883a 	mov	r17,r5
  802c20:	2021883a 	mov	r16,r4
  802c24:	080323c0 	call	80323c <__muldf3>
  802c28:	180b883a 	mov	r5,r3
  802c2c:	1009883a 	mov	r4,r2
  802c30:	0803cc40 	call	803cc4 <__fixunsdfsi>
  802c34:	1009883a 	mov	r4,r2
  802c38:	1027883a 	mov	r19,r2
  802c3c:	0803ab00 	call	803ab0 <__floatunsidf>
  802c40:	0011883a 	mov	r8,zero
  802c44:	02707c34 	movhi	r9,49648
  802c48:	480f883a 	mov	r7,r9
  802c4c:	400d883a 	mov	r6,r8
  802c50:	180b883a 	mov	r5,r3
  802c54:	1009883a 	mov	r4,r2
  802c58:	080323c0 	call	80323c <__muldf3>
  802c5c:	180f883a 	mov	r7,r3
  802c60:	880b883a 	mov	r5,r17
  802c64:	8009883a 	mov	r4,r16
  802c68:	100d883a 	mov	r6,r2
  802c6c:	08031c80 	call	8031c8 <__adddf3>
  802c70:	180b883a 	mov	r5,r3
  802c74:	1009883a 	mov	r4,r2
  802c78:	0803cc40 	call	803cc4 <__fixunsdfsi>
  802c7c:	0025883a 	mov	r18,zero
  802c80:	000f883a 	mov	r7,zero
  802c84:	9088b03a 	or	r4,r18,r2
  802c88:	99cab03a 	or	r5,r19,r7
  802c8c:	2005883a 	mov	r2,r4
  802c90:	2807883a 	mov	r3,r5
  802c94:	dfc00417 	ldw	ra,16(sp)
  802c98:	dcc00317 	ldw	r19,12(sp)
  802c9c:	dc800217 	ldw	r18,8(sp)
  802ca0:	dc400117 	ldw	r17,4(sp)
  802ca4:	dc000017 	ldw	r16,0(sp)
  802ca8:	dec00504 	addi	sp,sp,20
  802cac:	f800283a 	ret

00802cb0 <__floatdidf>:
  802cb0:	defffb04 	addi	sp,sp,-20
  802cb4:	dc800215 	stw	r18,8(sp)
  802cb8:	2025883a 	mov	r18,r4
  802cbc:	2809883a 	mov	r4,r5
  802cc0:	dfc00415 	stw	ra,16(sp)
  802cc4:	dc400115 	stw	r17,4(sp)
  802cc8:	dc000015 	stw	r16,0(sp)
  802ccc:	dcc00315 	stw	r19,12(sp)
  802cd0:	08038e00 	call	8038e0 <__floatsidf>
  802cd4:	100d883a 	mov	r6,r2
  802cd8:	180f883a 	mov	r7,r3
  802cdc:	0005883a 	mov	r2,zero
  802ce0:	00d07c34 	movhi	r3,16880
  802ce4:	380b883a 	mov	r5,r7
  802ce8:	3009883a 	mov	r4,r6
  802cec:	180f883a 	mov	r7,r3
  802cf0:	100d883a 	mov	r6,r2
  802cf4:	080323c0 	call	80323c <__muldf3>
  802cf8:	9009883a 	mov	r4,r18
  802cfc:	1021883a 	mov	r16,r2
  802d00:	1823883a 	mov	r17,r3
  802d04:	0803ab00 	call	803ab0 <__floatunsidf>
  802d08:	880b883a 	mov	r5,r17
  802d0c:	8009883a 	mov	r4,r16
  802d10:	180f883a 	mov	r7,r3
  802d14:	100d883a 	mov	r6,r2
  802d18:	08031c80 	call	8031c8 <__adddf3>
  802d1c:	dfc00417 	ldw	ra,16(sp)
  802d20:	dcc00317 	ldw	r19,12(sp)
  802d24:	dc800217 	ldw	r18,8(sp)
  802d28:	dc400117 	ldw	r17,4(sp)
  802d2c:	dc000017 	ldw	r16,0(sp)
  802d30:	dec00504 	addi	sp,sp,20
  802d34:	f800283a 	ret

00802d38 <_fpadd_parts>:
  802d38:	defff804 	addi	sp,sp,-32
  802d3c:	dcc00315 	stw	r19,12(sp)
  802d40:	2027883a 	mov	r19,r4
  802d44:	21000017 	ldw	r4,0(r4)
  802d48:	00c00044 	movi	r3,1
  802d4c:	dd400515 	stw	r21,20(sp)
  802d50:	dd000415 	stw	r20,16(sp)
  802d54:	ddc00715 	stw	r23,28(sp)
  802d58:	dd800615 	stw	r22,24(sp)
  802d5c:	dc800215 	stw	r18,8(sp)
  802d60:	dc400115 	stw	r17,4(sp)
  802d64:	dc000015 	stw	r16,0(sp)
  802d68:	282b883a 	mov	r21,r5
  802d6c:	3029883a 	mov	r20,r6
  802d70:	1900632e 	bgeu	r3,r4,802f00 <_fpadd_parts+0x1c8>
  802d74:	28800017 	ldw	r2,0(r5)
  802d78:	1880812e 	bgeu	r3,r2,802f80 <_fpadd_parts+0x248>
  802d7c:	00c00104 	movi	r3,4
  802d80:	20c0dc26 	beq	r4,r3,8030f4 <_fpadd_parts+0x3bc>
  802d84:	10c07e26 	beq	r2,r3,802f80 <_fpadd_parts+0x248>
  802d88:	00c00084 	movi	r3,2
  802d8c:	10c06726 	beq	r2,r3,802f2c <_fpadd_parts+0x1f4>
  802d90:	20c07b26 	beq	r4,r3,802f80 <_fpadd_parts+0x248>
  802d94:	9dc00217 	ldw	r23,8(r19)
  802d98:	28c00217 	ldw	r3,8(r5)
  802d9c:	9c400317 	ldw	r17,12(r19)
  802da0:	2bc00317 	ldw	r15,12(r5)
  802da4:	b8cdc83a 	sub	r6,r23,r3
  802da8:	9c800417 	ldw	r18,16(r19)
  802dac:	2c000417 	ldw	r16,16(r5)
  802db0:	3009883a 	mov	r4,r6
  802db4:	30009716 	blt	r6,zero,803014 <_fpadd_parts+0x2dc>
  802db8:	00800fc4 	movi	r2,63
  802dbc:	11806b16 	blt	r2,r6,802f6c <_fpadd_parts+0x234>
  802dc0:	0100a40e 	bge	zero,r4,803054 <_fpadd_parts+0x31c>
  802dc4:	35bff804 	addi	r22,r6,-32
  802dc8:	b000bc16 	blt	r22,zero,8030bc <_fpadd_parts+0x384>
  802dcc:	8596d83a 	srl	r11,r16,r22
  802dd0:	0019883a 	mov	r12,zero
  802dd4:	0013883a 	mov	r9,zero
  802dd8:	01000044 	movi	r4,1
  802ddc:	0015883a 	mov	r10,zero
  802de0:	b000be16 	blt	r22,zero,8030dc <_fpadd_parts+0x3a4>
  802de4:	2590983a 	sll	r8,r4,r22
  802de8:	000f883a 	mov	r7,zero
  802dec:	00bfffc4 	movi	r2,-1
  802df0:	3889883a 	add	r4,r7,r2
  802df4:	408b883a 	add	r5,r8,r2
  802df8:	21cd803a 	cmpltu	r6,r4,r7
  802dfc:	314b883a 	add	r5,r6,r5
  802e00:	7904703a 	and	r2,r15,r4
  802e04:	8146703a 	and	r3,r16,r5
  802e08:	10c4b03a 	or	r2,r2,r3
  802e0c:	10000226 	beq	r2,zero,802e18 <_fpadd_parts+0xe0>
  802e10:	02400044 	movi	r9,1
  802e14:	0015883a 	mov	r10,zero
  802e18:	5a5eb03a 	or	r15,r11,r9
  802e1c:	62a0b03a 	or	r16,r12,r10
  802e20:	99400117 	ldw	r5,4(r19)
  802e24:	a8800117 	ldw	r2,4(r21)
  802e28:	28806e26 	beq	r5,r2,802fe4 <_fpadd_parts+0x2ac>
  802e2c:	28006626 	beq	r5,zero,802fc8 <_fpadd_parts+0x290>
  802e30:	7c45c83a 	sub	r2,r15,r17
  802e34:	7889803a 	cmpltu	r4,r15,r2
  802e38:	8487c83a 	sub	r3,r16,r18
  802e3c:	1909c83a 	sub	r4,r3,r4
  802e40:	100d883a 	mov	r6,r2
  802e44:	200f883a 	mov	r7,r4
  802e48:	38007716 	blt	r7,zero,803028 <_fpadd_parts+0x2f0>
  802e4c:	a5c00215 	stw	r23,8(r20)
  802e50:	a1c00415 	stw	r7,16(r20)
  802e54:	a0000115 	stw	zero,4(r20)
  802e58:	a1800315 	stw	r6,12(r20)
  802e5c:	a2000317 	ldw	r8,12(r20)
  802e60:	a2400417 	ldw	r9,16(r20)
  802e64:	00bfffc4 	movi	r2,-1
  802e68:	408b883a 	add	r5,r8,r2
  802e6c:	2a09803a 	cmpltu	r4,r5,r8
  802e70:	488d883a 	add	r6,r9,r2
  802e74:	01c40034 	movhi	r7,4096
  802e78:	39ffffc4 	addi	r7,r7,-1
  802e7c:	218d883a 	add	r6,r4,r6
  802e80:	39801736 	bltu	r7,r6,802ee0 <_fpadd_parts+0x1a8>
  802e84:	31c06526 	beq	r6,r7,80301c <_fpadd_parts+0x2e4>
  802e88:	a3000217 	ldw	r12,8(r20)
  802e8c:	4209883a 	add	r4,r8,r8
  802e90:	00bfffc4 	movi	r2,-1
  802e94:	220f803a 	cmpltu	r7,r4,r8
  802e98:	4a4b883a 	add	r5,r9,r9
  802e9c:	394f883a 	add	r7,r7,r5
  802ea0:	2095883a 	add	r10,r4,r2
  802ea4:	3897883a 	add	r11,r7,r2
  802ea8:	510d803a 	cmpltu	r6,r10,r4
  802eac:	6099883a 	add	r12,r12,r2
  802eb0:	32d7883a 	add	r11,r6,r11
  802eb4:	00840034 	movhi	r2,4096
  802eb8:	10bfffc4 	addi	r2,r2,-1
  802ebc:	2011883a 	mov	r8,r4
  802ec0:	3813883a 	mov	r9,r7
  802ec4:	a1000315 	stw	r4,12(r20)
  802ec8:	a1c00415 	stw	r7,16(r20)
  802ecc:	a3000215 	stw	r12,8(r20)
  802ed0:	12c00336 	bltu	r2,r11,802ee0 <_fpadd_parts+0x1a8>
  802ed4:	58bfed1e 	bne	r11,r2,802e8c <_fpadd_parts+0x154>
  802ed8:	00bfff84 	movi	r2,-2
  802edc:	12bfeb2e 	bgeu	r2,r10,802e8c <_fpadd_parts+0x154>
  802ee0:	a2800417 	ldw	r10,16(r20)
  802ee4:	008000c4 	movi	r2,3
  802ee8:	00c80034 	movhi	r3,8192
  802eec:	18ffffc4 	addi	r3,r3,-1
  802ef0:	a2400317 	ldw	r9,12(r20)
  802ef4:	a0800015 	stw	r2,0(r20)
  802ef8:	1a802336 	bltu	r3,r10,802f88 <_fpadd_parts+0x250>
  802efc:	a027883a 	mov	r19,r20
  802f00:	9805883a 	mov	r2,r19
  802f04:	ddc00717 	ldw	r23,28(sp)
  802f08:	dd800617 	ldw	r22,24(sp)
  802f0c:	dd400517 	ldw	r21,20(sp)
  802f10:	dd000417 	ldw	r20,16(sp)
  802f14:	dcc00317 	ldw	r19,12(sp)
  802f18:	dc800217 	ldw	r18,8(sp)
  802f1c:	dc400117 	ldw	r17,4(sp)
  802f20:	dc000017 	ldw	r16,0(sp)
  802f24:	dec00804 	addi	sp,sp,32
  802f28:	f800283a 	ret
  802f2c:	20fff41e 	bne	r4,r3,802f00 <_fpadd_parts+0x1c8>
  802f30:	31000015 	stw	r4,0(r6)
  802f34:	98800117 	ldw	r2,4(r19)
  802f38:	30800115 	stw	r2,4(r6)
  802f3c:	98c00217 	ldw	r3,8(r19)
  802f40:	30c00215 	stw	r3,8(r6)
  802f44:	98800317 	ldw	r2,12(r19)
  802f48:	30800315 	stw	r2,12(r6)
  802f4c:	98c00417 	ldw	r3,16(r19)
  802f50:	30c00415 	stw	r3,16(r6)
  802f54:	98800117 	ldw	r2,4(r19)
  802f58:	28c00117 	ldw	r3,4(r5)
  802f5c:	3027883a 	mov	r19,r6
  802f60:	10c4703a 	and	r2,r2,r3
  802f64:	30800115 	stw	r2,4(r6)
  802f68:	003fe506 	br	802f00 <_fpadd_parts+0x1c8>
  802f6c:	1dc02616 	blt	r3,r23,803008 <_fpadd_parts+0x2d0>
  802f70:	0023883a 	mov	r17,zero
  802f74:	182f883a 	mov	r23,r3
  802f78:	0025883a 	mov	r18,zero
  802f7c:	003fa806 	br	802e20 <_fpadd_parts+0xe8>
  802f80:	a827883a 	mov	r19,r21
  802f84:	003fde06 	br	802f00 <_fpadd_parts+0x1c8>
  802f88:	01800044 	movi	r6,1
  802f8c:	500497fa 	slli	r2,r10,31
  802f90:	4808d07a 	srli	r4,r9,1
  802f94:	518ad83a 	srl	r5,r10,r6
  802f98:	a2000217 	ldw	r8,8(r20)
  802f9c:	1108b03a 	or	r4,r2,r4
  802fa0:	0007883a 	mov	r3,zero
  802fa4:	4984703a 	and	r2,r9,r6
  802fa8:	208cb03a 	or	r6,r4,r2
  802fac:	28ceb03a 	or	r7,r5,r3
  802fb0:	42000044 	addi	r8,r8,1
  802fb4:	a027883a 	mov	r19,r20
  802fb8:	a1c00415 	stw	r7,16(r20)
  802fbc:	a2000215 	stw	r8,8(r20)
  802fc0:	a1800315 	stw	r6,12(r20)
  802fc4:	003fce06 	br	802f00 <_fpadd_parts+0x1c8>
  802fc8:	8bc5c83a 	sub	r2,r17,r15
  802fcc:	8889803a 	cmpltu	r4,r17,r2
  802fd0:	9407c83a 	sub	r3,r18,r16
  802fd4:	1909c83a 	sub	r4,r3,r4
  802fd8:	100d883a 	mov	r6,r2
  802fdc:	200f883a 	mov	r7,r4
  802fe0:	003f9906 	br	802e48 <_fpadd_parts+0x110>
  802fe4:	7c45883a 	add	r2,r15,r17
  802fe8:	13c9803a 	cmpltu	r4,r2,r15
  802fec:	8487883a 	add	r3,r16,r18
  802ff0:	20c9883a 	add	r4,r4,r3
  802ff4:	a1400115 	stw	r5,4(r20)
  802ff8:	a5c00215 	stw	r23,8(r20)
  802ffc:	a0800315 	stw	r2,12(r20)
  803000:	a1000415 	stw	r4,16(r20)
  803004:	003fb606 	br	802ee0 <_fpadd_parts+0x1a8>
  803008:	001f883a 	mov	r15,zero
  80300c:	0021883a 	mov	r16,zero
  803010:	003f8306 	br	802e20 <_fpadd_parts+0xe8>
  803014:	018dc83a 	sub	r6,zero,r6
  803018:	003f6706 	br	802db8 <_fpadd_parts+0x80>
  80301c:	00bfff84 	movi	r2,-2
  803020:	117faf36 	bltu	r2,r5,802ee0 <_fpadd_parts+0x1a8>
  803024:	003f9806 	br	802e88 <_fpadd_parts+0x150>
  803028:	0005883a 	mov	r2,zero
  80302c:	1189c83a 	sub	r4,r2,r6
  803030:	1105803a 	cmpltu	r2,r2,r4
  803034:	01cbc83a 	sub	r5,zero,r7
  803038:	2885c83a 	sub	r2,r5,r2
  80303c:	01800044 	movi	r6,1
  803040:	a1800115 	stw	r6,4(r20)
  803044:	a5c00215 	stw	r23,8(r20)
  803048:	a1000315 	stw	r4,12(r20)
  80304c:	a0800415 	stw	r2,16(r20)
  803050:	003f8206 	br	802e5c <_fpadd_parts+0x124>
  803054:	203f7226 	beq	r4,zero,802e20 <_fpadd_parts+0xe8>
  803058:	35bff804 	addi	r22,r6,-32
  80305c:	b9af883a 	add	r23,r23,r6
  803060:	b0003116 	blt	r22,zero,803128 <_fpadd_parts+0x3f0>
  803064:	959ad83a 	srl	r13,r18,r22
  803068:	001d883a 	mov	r14,zero
  80306c:	000f883a 	mov	r7,zero
  803070:	01000044 	movi	r4,1
  803074:	0011883a 	mov	r8,zero
  803078:	b0002516 	blt	r22,zero,803110 <_fpadd_parts+0x3d8>
  80307c:	2594983a 	sll	r10,r4,r22
  803080:	0013883a 	mov	r9,zero
  803084:	00bfffc4 	movi	r2,-1
  803088:	4889883a 	add	r4,r9,r2
  80308c:	508b883a 	add	r5,r10,r2
  803090:	224d803a 	cmpltu	r6,r4,r9
  803094:	314b883a 	add	r5,r6,r5
  803098:	8904703a 	and	r2,r17,r4
  80309c:	9146703a 	and	r3,r18,r5
  8030a0:	10c4b03a 	or	r2,r2,r3
  8030a4:	10000226 	beq	r2,zero,8030b0 <_fpadd_parts+0x378>
  8030a8:	01c00044 	movi	r7,1
  8030ac:	0011883a 	mov	r8,zero
  8030b0:	69e2b03a 	or	r17,r13,r7
  8030b4:	7224b03a 	or	r18,r14,r8
  8030b8:	003f5906 	br	802e20 <_fpadd_parts+0xe8>
  8030bc:	8407883a 	add	r3,r16,r16
  8030c0:	008007c4 	movi	r2,31
  8030c4:	1185c83a 	sub	r2,r2,r6
  8030c8:	1886983a 	sll	r3,r3,r2
  8030cc:	7996d83a 	srl	r11,r15,r6
  8030d0:	8198d83a 	srl	r12,r16,r6
  8030d4:	1ad6b03a 	or	r11,r3,r11
  8030d8:	003f3e06 	br	802dd4 <_fpadd_parts+0x9c>
  8030dc:	2006d07a 	srli	r3,r4,1
  8030e0:	008007c4 	movi	r2,31
  8030e4:	1185c83a 	sub	r2,r2,r6
  8030e8:	1890d83a 	srl	r8,r3,r2
  8030ec:	218e983a 	sll	r7,r4,r6
  8030f0:	003f3e06 	br	802dec <_fpadd_parts+0xb4>
  8030f4:	113f821e 	bne	r2,r4,802f00 <_fpadd_parts+0x1c8>
  8030f8:	28c00117 	ldw	r3,4(r5)
  8030fc:	98800117 	ldw	r2,4(r19)
  803100:	10ff7f26 	beq	r2,r3,802f00 <_fpadd_parts+0x1c8>
  803104:	04c020b4 	movhi	r19,130
  803108:	9cf48d04 	addi	r19,r19,-11724
  80310c:	003f7c06 	br	802f00 <_fpadd_parts+0x1c8>
  803110:	2006d07a 	srli	r3,r4,1
  803114:	008007c4 	movi	r2,31
  803118:	1185c83a 	sub	r2,r2,r6
  80311c:	1894d83a 	srl	r10,r3,r2
  803120:	2192983a 	sll	r9,r4,r6
  803124:	003fd706 	br	803084 <_fpadd_parts+0x34c>
  803128:	9487883a 	add	r3,r18,r18
  80312c:	008007c4 	movi	r2,31
  803130:	1185c83a 	sub	r2,r2,r6
  803134:	1886983a 	sll	r3,r3,r2
  803138:	899ad83a 	srl	r13,r17,r6
  80313c:	919cd83a 	srl	r14,r18,r6
  803140:	1b5ab03a 	or	r13,r3,r13
  803144:	003fc906 	br	80306c <_fpadd_parts+0x334>

00803148 <__subdf3>:
  803148:	deffea04 	addi	sp,sp,-88
  80314c:	dcc01415 	stw	r19,80(sp)
  803150:	dcc00404 	addi	r19,sp,16
  803154:	2011883a 	mov	r8,r4
  803158:	2813883a 	mov	r9,r5
  80315c:	dc401315 	stw	r17,76(sp)
  803160:	d809883a 	mov	r4,sp
  803164:	980b883a 	mov	r5,r19
  803168:	dc400904 	addi	r17,sp,36
  80316c:	dfc01515 	stw	ra,84(sp)
  803170:	da400115 	stw	r9,4(sp)
  803174:	d9c00315 	stw	r7,12(sp)
  803178:	da000015 	stw	r8,0(sp)
  80317c:	d9800215 	stw	r6,8(sp)
  803180:	080407c0 	call	80407c <__unpack_d>
  803184:	d9000204 	addi	r4,sp,8
  803188:	880b883a 	mov	r5,r17
  80318c:	080407c0 	call	80407c <__unpack_d>
  803190:	d8800a17 	ldw	r2,40(sp)
  803194:	880b883a 	mov	r5,r17
  803198:	9809883a 	mov	r4,r19
  80319c:	d9800e04 	addi	r6,sp,56
  8031a0:	1080005c 	xori	r2,r2,1
  8031a4:	d8800a15 	stw	r2,40(sp)
  8031a8:	0802d380 	call	802d38 <_fpadd_parts>
  8031ac:	1009883a 	mov	r4,r2
  8031b0:	0803d680 	call	803d68 <__pack_d>
  8031b4:	dfc01517 	ldw	ra,84(sp)
  8031b8:	dcc01417 	ldw	r19,80(sp)
  8031bc:	dc401317 	ldw	r17,76(sp)
  8031c0:	dec01604 	addi	sp,sp,88
  8031c4:	f800283a 	ret

008031c8 <__adddf3>:
  8031c8:	deffea04 	addi	sp,sp,-88
  8031cc:	dcc01415 	stw	r19,80(sp)
  8031d0:	dcc00404 	addi	r19,sp,16
  8031d4:	2011883a 	mov	r8,r4
  8031d8:	2813883a 	mov	r9,r5
  8031dc:	dc401315 	stw	r17,76(sp)
  8031e0:	d809883a 	mov	r4,sp
  8031e4:	980b883a 	mov	r5,r19
  8031e8:	dc400904 	addi	r17,sp,36
  8031ec:	dfc01515 	stw	ra,84(sp)
  8031f0:	da400115 	stw	r9,4(sp)
  8031f4:	d9c00315 	stw	r7,12(sp)
  8031f8:	da000015 	stw	r8,0(sp)
  8031fc:	d9800215 	stw	r6,8(sp)
  803200:	080407c0 	call	80407c <__unpack_d>
  803204:	d9000204 	addi	r4,sp,8
  803208:	880b883a 	mov	r5,r17
  80320c:	080407c0 	call	80407c <__unpack_d>
  803210:	d9800e04 	addi	r6,sp,56
  803214:	9809883a 	mov	r4,r19
  803218:	880b883a 	mov	r5,r17
  80321c:	0802d380 	call	802d38 <_fpadd_parts>
  803220:	1009883a 	mov	r4,r2
  803224:	0803d680 	call	803d68 <__pack_d>
  803228:	dfc01517 	ldw	ra,84(sp)
  80322c:	dcc01417 	ldw	r19,80(sp)
  803230:	dc401317 	ldw	r17,76(sp)
  803234:	dec01604 	addi	sp,sp,88
  803238:	f800283a 	ret

0080323c <__muldf3>:
  80323c:	deffe004 	addi	sp,sp,-128
  803240:	dc401815 	stw	r17,96(sp)
  803244:	dc400404 	addi	r17,sp,16
  803248:	2011883a 	mov	r8,r4
  80324c:	2813883a 	mov	r9,r5
  803250:	dc001715 	stw	r16,92(sp)
  803254:	d809883a 	mov	r4,sp
  803258:	880b883a 	mov	r5,r17
  80325c:	dc000904 	addi	r16,sp,36
  803260:	dfc01f15 	stw	ra,124(sp)
  803264:	da400115 	stw	r9,4(sp)
  803268:	d9c00315 	stw	r7,12(sp)
  80326c:	da000015 	stw	r8,0(sp)
  803270:	d9800215 	stw	r6,8(sp)
  803274:	ddc01e15 	stw	r23,120(sp)
  803278:	dd801d15 	stw	r22,116(sp)
  80327c:	dd401c15 	stw	r21,112(sp)
  803280:	dd001b15 	stw	r20,108(sp)
  803284:	dcc01a15 	stw	r19,104(sp)
  803288:	dc801915 	stw	r18,100(sp)
  80328c:	080407c0 	call	80407c <__unpack_d>
  803290:	d9000204 	addi	r4,sp,8
  803294:	800b883a 	mov	r5,r16
  803298:	080407c0 	call	80407c <__unpack_d>
  80329c:	d9000417 	ldw	r4,16(sp)
  8032a0:	00800044 	movi	r2,1
  8032a4:	1100102e 	bgeu	r2,r4,8032e8 <__muldf3+0xac>
  8032a8:	d8c00917 	ldw	r3,36(sp)
  8032ac:	10c0062e 	bgeu	r2,r3,8032c8 <__muldf3+0x8c>
  8032b0:	00800104 	movi	r2,4
  8032b4:	20800a26 	beq	r4,r2,8032e0 <__muldf3+0xa4>
  8032b8:	1880cc26 	beq	r3,r2,8035ec <__muldf3+0x3b0>
  8032bc:	00800084 	movi	r2,2
  8032c0:	20800926 	beq	r4,r2,8032e8 <__muldf3+0xac>
  8032c4:	1880191e 	bne	r3,r2,80332c <__muldf3+0xf0>
  8032c8:	d8c00a17 	ldw	r3,40(sp)
  8032cc:	d8800517 	ldw	r2,20(sp)
  8032d0:	8009883a 	mov	r4,r16
  8032d4:	10c4c03a 	cmpne	r2,r2,r3
  8032d8:	d8800a15 	stw	r2,40(sp)
  8032dc:	00000706 	br	8032fc <__muldf3+0xc0>
  8032e0:	00800084 	movi	r2,2
  8032e4:	1880c326 	beq	r3,r2,8035f4 <__muldf3+0x3b8>
  8032e8:	d8800517 	ldw	r2,20(sp)
  8032ec:	d8c00a17 	ldw	r3,40(sp)
  8032f0:	8809883a 	mov	r4,r17
  8032f4:	10c4c03a 	cmpne	r2,r2,r3
  8032f8:	d8800515 	stw	r2,20(sp)
  8032fc:	0803d680 	call	803d68 <__pack_d>
  803300:	dfc01f17 	ldw	ra,124(sp)
  803304:	ddc01e17 	ldw	r23,120(sp)
  803308:	dd801d17 	ldw	r22,116(sp)
  80330c:	dd401c17 	ldw	r21,112(sp)
  803310:	dd001b17 	ldw	r20,108(sp)
  803314:	dcc01a17 	ldw	r19,104(sp)
  803318:	dc801917 	ldw	r18,100(sp)
  80331c:	dc401817 	ldw	r17,96(sp)
  803320:	dc001717 	ldw	r16,92(sp)
  803324:	dec02004 	addi	sp,sp,128
  803328:	f800283a 	ret
  80332c:	dd800717 	ldw	r22,28(sp)
  803330:	dc800c17 	ldw	r18,48(sp)
  803334:	002b883a 	mov	r21,zero
  803338:	0023883a 	mov	r17,zero
  80333c:	a80b883a 	mov	r5,r21
  803340:	b00d883a 	mov	r6,r22
  803344:	880f883a 	mov	r7,r17
  803348:	ddc00817 	ldw	r23,32(sp)
  80334c:	dcc00d17 	ldw	r19,52(sp)
  803350:	9009883a 	mov	r4,r18
  803354:	0802ae00 	call	802ae0 <__muldi3>
  803358:	001b883a 	mov	r13,zero
  80335c:	680f883a 	mov	r7,r13
  803360:	b009883a 	mov	r4,r22
  803364:	000b883a 	mov	r5,zero
  803368:	980d883a 	mov	r6,r19
  80336c:	b82d883a 	mov	r22,r23
  803370:	002f883a 	mov	r23,zero
  803374:	db401615 	stw	r13,88(sp)
  803378:	d8801315 	stw	r2,76(sp)
  80337c:	d8c01415 	stw	r3,80(sp)
  803380:	dcc01515 	stw	r19,84(sp)
  803384:	0802ae00 	call	802ae0 <__muldi3>
  803388:	b00d883a 	mov	r6,r22
  80338c:	000b883a 	mov	r5,zero
  803390:	9009883a 	mov	r4,r18
  803394:	b80f883a 	mov	r7,r23
  803398:	1021883a 	mov	r16,r2
  80339c:	1823883a 	mov	r17,r3
  8033a0:	0802ae00 	call	802ae0 <__muldi3>
  8033a4:	8085883a 	add	r2,r16,r2
  8033a8:	140d803a 	cmpltu	r6,r2,r16
  8033ac:	88c7883a 	add	r3,r17,r3
  8033b0:	30cd883a 	add	r6,r6,r3
  8033b4:	1029883a 	mov	r20,r2
  8033b8:	302b883a 	mov	r21,r6
  8033bc:	da801317 	ldw	r10,76(sp)
  8033c0:	dac01417 	ldw	r11,80(sp)
  8033c4:	db001517 	ldw	r12,84(sp)
  8033c8:	db401617 	ldw	r13,88(sp)
  8033cc:	3440612e 	bgeu	r6,r17,803554 <__muldf3+0x318>
  8033d0:	0009883a 	mov	r4,zero
  8033d4:	5105883a 	add	r2,r10,r4
  8033d8:	128d803a 	cmpltu	r6,r2,r10
  8033dc:	5d07883a 	add	r3,r11,r20
  8033e0:	30cd883a 	add	r6,r6,r3
  8033e4:	0021883a 	mov	r16,zero
  8033e8:	04400044 	movi	r17,1
  8033ec:	1025883a 	mov	r18,r2
  8033f0:	3027883a 	mov	r19,r6
  8033f4:	32c06236 	bltu	r6,r11,803580 <__muldf3+0x344>
  8033f8:	59807a26 	beq	r11,r6,8035e4 <__muldf3+0x3a8>
  8033fc:	680b883a 	mov	r5,r13
  803400:	b80f883a 	mov	r7,r23
  803404:	6009883a 	mov	r4,r12
  803408:	b00d883a 	mov	r6,r22
  80340c:	0802ae00 	call	802ae0 <__muldi3>
  803410:	1009883a 	mov	r4,r2
  803414:	000f883a 	mov	r7,zero
  803418:	1545883a 	add	r2,r2,r21
  80341c:	1111803a 	cmpltu	r8,r2,r4
  803420:	19c7883a 	add	r3,r3,r7
  803424:	40c7883a 	add	r3,r8,r3
  803428:	88cb883a 	add	r5,r17,r3
  80342c:	d8c00617 	ldw	r3,24(sp)
  803430:	8089883a 	add	r4,r16,r2
  803434:	d8800b17 	ldw	r2,44(sp)
  803438:	18c00104 	addi	r3,r3,4
  80343c:	240d803a 	cmpltu	r6,r4,r16
  803440:	10c7883a 	add	r3,r2,r3
  803444:	2013883a 	mov	r9,r4
  803448:	d8800a17 	ldw	r2,40(sp)
  80344c:	d9000517 	ldw	r4,20(sp)
  803450:	314d883a 	add	r6,r6,r5
  803454:	3015883a 	mov	r10,r6
  803458:	2088c03a 	cmpne	r4,r4,r2
  80345c:	00880034 	movhi	r2,8192
  803460:	10bfffc4 	addi	r2,r2,-1
  803464:	d9000f15 	stw	r4,60(sp)
  803468:	d8c01015 	stw	r3,64(sp)
  80346c:	1180162e 	bgeu	r2,r6,8034c8 <__muldf3+0x28c>
  803470:	1811883a 	mov	r8,r3
  803474:	101f883a 	mov	r15,r2
  803478:	980497fa 	slli	r2,r19,31
  80347c:	9016d07a 	srli	r11,r18,1
  803480:	500697fa 	slli	r3,r10,31
  803484:	480cd07a 	srli	r6,r9,1
  803488:	500ed07a 	srli	r7,r10,1
  80348c:	12d6b03a 	or	r11,r2,r11
  803490:	00800044 	movi	r2,1
  803494:	198cb03a 	or	r6,r3,r6
  803498:	4888703a 	and	r4,r9,r2
  80349c:	9818d07a 	srli	r12,r19,1
  8034a0:	001b883a 	mov	r13,zero
  8034a4:	03a00034 	movhi	r14,32768
  8034a8:	3013883a 	mov	r9,r6
  8034ac:	3815883a 	mov	r10,r7
  8034b0:	4091883a 	add	r8,r8,r2
  8034b4:	20000226 	beq	r4,zero,8034c0 <__muldf3+0x284>
  8034b8:	5b64b03a 	or	r18,r11,r13
  8034bc:	63a6b03a 	or	r19,r12,r14
  8034c0:	7abfed36 	bltu	r15,r10,803478 <__muldf3+0x23c>
  8034c4:	da001015 	stw	r8,64(sp)
  8034c8:	00840034 	movhi	r2,4096
  8034cc:	10bfffc4 	addi	r2,r2,-1
  8034d0:	12801436 	bltu	r2,r10,803524 <__muldf3+0x2e8>
  8034d4:	da001017 	ldw	r8,64(sp)
  8034d8:	101f883a 	mov	r15,r2
  8034dc:	4a45883a 	add	r2,r9,r9
  8034e0:	124d803a 	cmpltu	r6,r2,r9
  8034e4:	5287883a 	add	r3,r10,r10
  8034e8:	9497883a 	add	r11,r18,r18
  8034ec:	5c8f803a 	cmpltu	r7,r11,r18
  8034f0:	9cd9883a 	add	r12,r19,r19
  8034f4:	01000044 	movi	r4,1
  8034f8:	30cd883a 	add	r6,r6,r3
  8034fc:	3b0f883a 	add	r7,r7,r12
  803500:	423fffc4 	addi	r8,r8,-1
  803504:	1013883a 	mov	r9,r2
  803508:	3015883a 	mov	r10,r6
  80350c:	111ab03a 	or	r13,r2,r4
  803510:	98003016 	blt	r19,zero,8035d4 <__muldf3+0x398>
  803514:	5825883a 	mov	r18,r11
  803518:	3827883a 	mov	r19,r7
  80351c:	7abfef2e 	bgeu	r15,r10,8034dc <__muldf3+0x2a0>
  803520:	da001015 	stw	r8,64(sp)
  803524:	00803fc4 	movi	r2,255
  803528:	488e703a 	and	r7,r9,r2
  80352c:	00802004 	movi	r2,128
  803530:	0007883a 	mov	r3,zero
  803534:	0011883a 	mov	r8,zero
  803538:	38801826 	beq	r7,r2,80359c <__muldf3+0x360>
  80353c:	008000c4 	movi	r2,3
  803540:	d9000e04 	addi	r4,sp,56
  803544:	da801215 	stw	r10,72(sp)
  803548:	d8800e15 	stw	r2,56(sp)
  80354c:	da401115 	stw	r9,68(sp)
  803550:	003f6a06 	br	8032fc <__muldf3+0xc0>
  803554:	89802126 	beq	r17,r6,8035dc <__muldf3+0x3a0>
  803558:	0009883a 	mov	r4,zero
  80355c:	5105883a 	add	r2,r10,r4
  803560:	128d803a 	cmpltu	r6,r2,r10
  803564:	5d07883a 	add	r3,r11,r20
  803568:	30cd883a 	add	r6,r6,r3
  80356c:	0021883a 	mov	r16,zero
  803570:	0023883a 	mov	r17,zero
  803574:	1025883a 	mov	r18,r2
  803578:	3027883a 	mov	r19,r6
  80357c:	32ff9e2e 	bgeu	r6,r11,8033f8 <__muldf3+0x1bc>
  803580:	00800044 	movi	r2,1
  803584:	8089883a 	add	r4,r16,r2
  803588:	240d803a 	cmpltu	r6,r4,r16
  80358c:	344d883a 	add	r6,r6,r17
  803590:	2021883a 	mov	r16,r4
  803594:	3023883a 	mov	r17,r6
  803598:	003f9806 	br	8033fc <__muldf3+0x1c0>
  80359c:	403fe71e 	bne	r8,zero,80353c <__muldf3+0x300>
  8035a0:	01004004 	movi	r4,256
  8035a4:	4904703a 	and	r2,r9,r4
  8035a8:	10c4b03a 	or	r2,r2,r3
  8035ac:	103fe31e 	bne	r2,zero,80353c <__muldf3+0x300>
  8035b0:	94c4b03a 	or	r2,r18,r19
  8035b4:	103fe126 	beq	r2,zero,80353c <__muldf3+0x300>
  8035b8:	49c5883a 	add	r2,r9,r7
  8035bc:	1251803a 	cmpltu	r8,r2,r9
  8035c0:	4291883a 	add	r8,r8,r10
  8035c4:	013fc004 	movi	r4,-256
  8035c8:	1112703a 	and	r9,r2,r4
  8035cc:	4015883a 	mov	r10,r8
  8035d0:	003fda06 	br	80353c <__muldf3+0x300>
  8035d4:	6813883a 	mov	r9,r13
  8035d8:	003fce06 	br	803514 <__muldf3+0x2d8>
  8035dc:	143f7c36 	bltu	r2,r16,8033d0 <__muldf3+0x194>
  8035e0:	003fdd06 	br	803558 <__muldf3+0x31c>
  8035e4:	12bf852e 	bgeu	r2,r10,8033fc <__muldf3+0x1c0>
  8035e8:	003fe506 	br	803580 <__muldf3+0x344>
  8035ec:	00800084 	movi	r2,2
  8035f0:	20bf351e 	bne	r4,r2,8032c8 <__muldf3+0x8c>
  8035f4:	010020b4 	movhi	r4,130
  8035f8:	21348d04 	addi	r4,r4,-11724
  8035fc:	003f3f06 	br	8032fc <__muldf3+0xc0>

00803600 <__divdf3>:
  803600:	deffed04 	addi	sp,sp,-76
  803604:	dcc01115 	stw	r19,68(sp)
  803608:	dcc00404 	addi	r19,sp,16
  80360c:	2011883a 	mov	r8,r4
  803610:	2813883a 	mov	r9,r5
  803614:	dc000e15 	stw	r16,56(sp)
  803618:	d809883a 	mov	r4,sp
  80361c:	980b883a 	mov	r5,r19
  803620:	dc000904 	addi	r16,sp,36
  803624:	dfc01215 	stw	ra,72(sp)
  803628:	da400115 	stw	r9,4(sp)
  80362c:	d9c00315 	stw	r7,12(sp)
  803630:	da000015 	stw	r8,0(sp)
  803634:	d9800215 	stw	r6,8(sp)
  803638:	dc801015 	stw	r18,64(sp)
  80363c:	dc400f15 	stw	r17,60(sp)
  803640:	080407c0 	call	80407c <__unpack_d>
  803644:	d9000204 	addi	r4,sp,8
  803648:	800b883a 	mov	r5,r16
  80364c:	080407c0 	call	80407c <__unpack_d>
  803650:	d9000417 	ldw	r4,16(sp)
  803654:	00800044 	movi	r2,1
  803658:	11000b2e 	bgeu	r2,r4,803688 <__divdf3+0x88>
  80365c:	d9400917 	ldw	r5,36(sp)
  803660:	1140762e 	bgeu	r2,r5,80383c <__divdf3+0x23c>
  803664:	d8800517 	ldw	r2,20(sp)
  803668:	d8c00a17 	ldw	r3,40(sp)
  80366c:	01800104 	movi	r6,4
  803670:	10c4f03a 	xor	r2,r2,r3
  803674:	d8800515 	stw	r2,20(sp)
  803678:	21800226 	beq	r4,r6,803684 <__divdf3+0x84>
  80367c:	00800084 	movi	r2,2
  803680:	2080141e 	bne	r4,r2,8036d4 <__divdf3+0xd4>
  803684:	29000926 	beq	r5,r4,8036ac <__divdf3+0xac>
  803688:	9809883a 	mov	r4,r19
  80368c:	0803d680 	call	803d68 <__pack_d>
  803690:	dfc01217 	ldw	ra,72(sp)
  803694:	dcc01117 	ldw	r19,68(sp)
  803698:	dc801017 	ldw	r18,64(sp)
  80369c:	dc400f17 	ldw	r17,60(sp)
  8036a0:	dc000e17 	ldw	r16,56(sp)
  8036a4:	dec01304 	addi	sp,sp,76
  8036a8:	f800283a 	ret
  8036ac:	010020b4 	movhi	r4,130
  8036b0:	21348d04 	addi	r4,r4,-11724
  8036b4:	0803d680 	call	803d68 <__pack_d>
  8036b8:	dfc01217 	ldw	ra,72(sp)
  8036bc:	dcc01117 	ldw	r19,68(sp)
  8036c0:	dc801017 	ldw	r18,64(sp)
  8036c4:	dc400f17 	ldw	r17,60(sp)
  8036c8:	dc000e17 	ldw	r16,56(sp)
  8036cc:	dec01304 	addi	sp,sp,76
  8036d0:	f800283a 	ret
  8036d4:	29805b26 	beq	r5,r6,803844 <__divdf3+0x244>
  8036d8:	28802d26 	beq	r5,r2,803790 <__divdf3+0x190>
  8036dc:	d8c00617 	ldw	r3,24(sp)
  8036e0:	d8800b17 	ldw	r2,44(sp)
  8036e4:	d9c00817 	ldw	r7,32(sp)
  8036e8:	dc400d17 	ldw	r17,52(sp)
  8036ec:	188bc83a 	sub	r5,r3,r2
  8036f0:	d9800717 	ldw	r6,28(sp)
  8036f4:	dc000c17 	ldw	r16,48(sp)
  8036f8:	d9400615 	stw	r5,24(sp)
  8036fc:	3c403836 	bltu	r7,r17,8037e0 <__divdf3+0x1e0>
  803700:	89c03626 	beq	r17,r7,8037dc <__divdf3+0x1dc>
  803704:	0015883a 	mov	r10,zero
  803708:	001d883a 	mov	r14,zero
  80370c:	02c40034 	movhi	r11,4096
  803710:	001f883a 	mov	r15,zero
  803714:	003f883a 	mov	ra,zero
  803718:	04800f44 	movi	r18,61
  80371c:	00000f06 	br	80375c <__divdf3+0x15c>
  803720:	601d883a 	mov	r14,r12
  803724:	681f883a 	mov	r15,r13
  803728:	400d883a 	mov	r6,r8
  80372c:	100f883a 	mov	r7,r2
  803730:	3191883a 	add	r8,r6,r6
  803734:	5808d07a 	srli	r4,r11,1
  803738:	4185803a 	cmpltu	r2,r8,r6
  80373c:	39d3883a 	add	r9,r7,r7
  803740:	28c6b03a 	or	r3,r5,r3
  803744:	1245883a 	add	r2,r2,r9
  803748:	1815883a 	mov	r10,r3
  80374c:	2017883a 	mov	r11,r4
  803750:	400d883a 	mov	r6,r8
  803754:	100f883a 	mov	r7,r2
  803758:	fc801726 	beq	ra,r18,8037b8 <__divdf3+0x1b8>
  80375c:	580a97fa 	slli	r5,r11,31
  803760:	5006d07a 	srli	r3,r10,1
  803764:	ffc00044 	addi	ra,ra,1
  803768:	3c7ff136 	bltu	r7,r17,803730 <__divdf3+0x130>
  80376c:	3411c83a 	sub	r8,r6,r16
  803770:	3205803a 	cmpltu	r2,r6,r8
  803774:	3c53c83a 	sub	r9,r7,r17
  803778:	7298b03a 	or	r12,r14,r10
  80377c:	7adab03a 	or	r13,r15,r11
  803780:	4885c83a 	sub	r2,r9,r2
  803784:	89ffe61e 	bne	r17,r7,803720 <__divdf3+0x120>
  803788:	343fe936 	bltu	r6,r16,803730 <__divdf3+0x130>
  80378c:	003fe406 	br	803720 <__divdf3+0x120>
  803790:	9809883a 	mov	r4,r19
  803794:	d9800415 	stw	r6,16(sp)
  803798:	0803d680 	call	803d68 <__pack_d>
  80379c:	dfc01217 	ldw	ra,72(sp)
  8037a0:	dcc01117 	ldw	r19,68(sp)
  8037a4:	dc801017 	ldw	r18,64(sp)
  8037a8:	dc400f17 	ldw	r17,60(sp)
  8037ac:	dc000e17 	ldw	r16,56(sp)
  8037b0:	dec01304 	addi	sp,sp,76
  8037b4:	f800283a 	ret
  8037b8:	00803fc4 	movi	r2,255
  8037bc:	7090703a 	and	r8,r14,r2
  8037c0:	00802004 	movi	r2,128
  8037c4:	0007883a 	mov	r3,zero
  8037c8:	0013883a 	mov	r9,zero
  8037cc:	40800d26 	beq	r8,r2,803804 <__divdf3+0x204>
  8037d0:	dbc00815 	stw	r15,32(sp)
  8037d4:	db800715 	stw	r14,28(sp)
  8037d8:	003fab06 	br	803688 <__divdf3+0x88>
  8037dc:	343fc92e 	bgeu	r6,r16,803704 <__divdf3+0x104>
  8037e0:	3185883a 	add	r2,r6,r6
  8037e4:	1189803a 	cmpltu	r4,r2,r6
  8037e8:	39c7883a 	add	r3,r7,r7
  8037ec:	20c9883a 	add	r4,r4,r3
  8037f0:	297fffc4 	addi	r5,r5,-1
  8037f4:	100d883a 	mov	r6,r2
  8037f8:	200f883a 	mov	r7,r4
  8037fc:	d9400615 	stw	r5,24(sp)
  803800:	003fc006 	br	803704 <__divdf3+0x104>
  803804:	483ff21e 	bne	r9,zero,8037d0 <__divdf3+0x1d0>
  803808:	01004004 	movi	r4,256
  80380c:	7104703a 	and	r2,r14,r4
  803810:	10c4b03a 	or	r2,r2,r3
  803814:	103fee1e 	bne	r2,zero,8037d0 <__divdf3+0x1d0>
  803818:	31c4b03a 	or	r2,r6,r7
  80381c:	103fec26 	beq	r2,zero,8037d0 <__divdf3+0x1d0>
  803820:	7205883a 	add	r2,r14,r8
  803824:	1391803a 	cmpltu	r8,r2,r14
  803828:	43d1883a 	add	r8,r8,r15
  80382c:	013fc004 	movi	r4,-256
  803830:	111c703a 	and	r14,r2,r4
  803834:	401f883a 	mov	r15,r8
  803838:	003fe506 	br	8037d0 <__divdf3+0x1d0>
  80383c:	8009883a 	mov	r4,r16
  803840:	003f9206 	br	80368c <__divdf3+0x8c>
  803844:	9809883a 	mov	r4,r19
  803848:	d8000715 	stw	zero,28(sp)
  80384c:	d8000815 	stw	zero,32(sp)
  803850:	d8000615 	stw	zero,24(sp)
  803854:	003f8d06 	br	80368c <__divdf3+0x8c>

00803858 <__ltdf2>:
  803858:	deffef04 	addi	sp,sp,-68
  80385c:	dc400f15 	stw	r17,60(sp)
  803860:	dc400404 	addi	r17,sp,16
  803864:	2005883a 	mov	r2,r4
  803868:	2807883a 	mov	r3,r5
  80386c:	dc000e15 	stw	r16,56(sp)
  803870:	d809883a 	mov	r4,sp
  803874:	880b883a 	mov	r5,r17
  803878:	dc000904 	addi	r16,sp,36
  80387c:	d8c00115 	stw	r3,4(sp)
  803880:	d8800015 	stw	r2,0(sp)
  803884:	d9800215 	stw	r6,8(sp)
  803888:	dfc01015 	stw	ra,64(sp)
  80388c:	d9c00315 	stw	r7,12(sp)
  803890:	080407c0 	call	80407c <__unpack_d>
  803894:	d9000204 	addi	r4,sp,8
  803898:	800b883a 	mov	r5,r16
  80389c:	080407c0 	call	80407c <__unpack_d>
  8038a0:	d8800417 	ldw	r2,16(sp)
  8038a4:	00c00044 	movi	r3,1
  8038a8:	180d883a 	mov	r6,r3
  8038ac:	1880062e 	bgeu	r3,r2,8038c8 <__ltdf2+0x70>
  8038b0:	d8800917 	ldw	r2,36(sp)
  8038b4:	8809883a 	mov	r4,r17
  8038b8:	800b883a 	mov	r5,r16
  8038bc:	1880022e 	bgeu	r3,r2,8038c8 <__ltdf2+0x70>
  8038c0:	08041b40 	call	8041b4 <__fpcmp_parts_d>
  8038c4:	100d883a 	mov	r6,r2
  8038c8:	3005883a 	mov	r2,r6
  8038cc:	dfc01017 	ldw	ra,64(sp)
  8038d0:	dc400f17 	ldw	r17,60(sp)
  8038d4:	dc000e17 	ldw	r16,56(sp)
  8038d8:	dec01104 	addi	sp,sp,68
  8038dc:	f800283a 	ret

008038e0 <__floatsidf>:
  8038e0:	2006d7fa 	srli	r3,r4,31
  8038e4:	defff604 	addi	sp,sp,-40
  8038e8:	008000c4 	movi	r2,3
  8038ec:	dfc00915 	stw	ra,36(sp)
  8038f0:	dcc00815 	stw	r19,32(sp)
  8038f4:	dc800715 	stw	r18,28(sp)
  8038f8:	dc400615 	stw	r17,24(sp)
  8038fc:	dc000515 	stw	r16,20(sp)
  803900:	d8800015 	stw	r2,0(sp)
  803904:	d8c00115 	stw	r3,4(sp)
  803908:	20000f1e 	bne	r4,zero,803948 <__floatsidf+0x68>
  80390c:	00800084 	movi	r2,2
  803910:	d8800015 	stw	r2,0(sp)
  803914:	d809883a 	mov	r4,sp
  803918:	0803d680 	call	803d68 <__pack_d>
  80391c:	1009883a 	mov	r4,r2
  803920:	180b883a 	mov	r5,r3
  803924:	2005883a 	mov	r2,r4
  803928:	2807883a 	mov	r3,r5
  80392c:	dfc00917 	ldw	ra,36(sp)
  803930:	dcc00817 	ldw	r19,32(sp)
  803934:	dc800717 	ldw	r18,28(sp)
  803938:	dc400617 	ldw	r17,24(sp)
  80393c:	dc000517 	ldw	r16,20(sp)
  803940:	dec00a04 	addi	sp,sp,40
  803944:	f800283a 	ret
  803948:	00800f04 	movi	r2,60
  80394c:	1807003a 	cmpeq	r3,r3,zero
  803950:	d8800215 	stw	r2,8(sp)
  803954:	18001126 	beq	r3,zero,80399c <__floatsidf+0xbc>
  803958:	0027883a 	mov	r19,zero
  80395c:	2025883a 	mov	r18,r4
  803960:	d9000315 	stw	r4,12(sp)
  803964:	dcc00415 	stw	r19,16(sp)
  803968:	0803c440 	call	803c44 <__clzsi2>
  80396c:	11000744 	addi	r4,r2,29
  803970:	013fe80e 	bge	zero,r4,803914 <__floatsidf+0x34>
  803974:	10bfff44 	addi	r2,r2,-3
  803978:	10000c16 	blt	r2,zero,8039ac <__floatsidf+0xcc>
  80397c:	90a2983a 	sll	r17,r18,r2
  803980:	0021883a 	mov	r16,zero
  803984:	d8800217 	ldw	r2,8(sp)
  803988:	dc400415 	stw	r17,16(sp)
  80398c:	dc000315 	stw	r16,12(sp)
  803990:	1105c83a 	sub	r2,r2,r4
  803994:	d8800215 	stw	r2,8(sp)
  803998:	003fde06 	br	803914 <__floatsidf+0x34>
  80399c:	00a00034 	movhi	r2,32768
  8039a0:	20800a26 	beq	r4,r2,8039cc <__floatsidf+0xec>
  8039a4:	0109c83a 	sub	r4,zero,r4
  8039a8:	003feb06 	br	803958 <__floatsidf+0x78>
  8039ac:	9006d07a 	srli	r3,r18,1
  8039b0:	008007c4 	movi	r2,31
  8039b4:	1105c83a 	sub	r2,r2,r4
  8039b8:	1886d83a 	srl	r3,r3,r2
  8039bc:	9922983a 	sll	r17,r19,r4
  8039c0:	9120983a 	sll	r16,r18,r4
  8039c4:	1c62b03a 	or	r17,r3,r17
  8039c8:	003fee06 	br	803984 <__floatsidf+0xa4>
  8039cc:	0009883a 	mov	r4,zero
  8039d0:	01707834 	movhi	r5,49632
  8039d4:	003fd306 	br	803924 <__floatsidf+0x44>

008039d8 <__fixdfsi>:
  8039d8:	defff804 	addi	sp,sp,-32
  8039dc:	2005883a 	mov	r2,r4
  8039e0:	2807883a 	mov	r3,r5
  8039e4:	d809883a 	mov	r4,sp
  8039e8:	d9400204 	addi	r5,sp,8
  8039ec:	d8c00115 	stw	r3,4(sp)
  8039f0:	d8800015 	stw	r2,0(sp)
  8039f4:	dfc00715 	stw	ra,28(sp)
  8039f8:	080407c0 	call	80407c <__unpack_d>
  8039fc:	d8c00217 	ldw	r3,8(sp)
  803a00:	00800084 	movi	r2,2
  803a04:	1880051e 	bne	r3,r2,803a1c <__fixdfsi+0x44>
  803a08:	0007883a 	mov	r3,zero
  803a0c:	1805883a 	mov	r2,r3
  803a10:	dfc00717 	ldw	ra,28(sp)
  803a14:	dec00804 	addi	sp,sp,32
  803a18:	f800283a 	ret
  803a1c:	00800044 	movi	r2,1
  803a20:	10fff92e 	bgeu	r2,r3,803a08 <__fixdfsi+0x30>
  803a24:	00800104 	movi	r2,4
  803a28:	18800426 	beq	r3,r2,803a3c <__fixdfsi+0x64>
  803a2c:	d8c00417 	ldw	r3,16(sp)
  803a30:	183ff516 	blt	r3,zero,803a08 <__fixdfsi+0x30>
  803a34:	00800784 	movi	r2,30
  803a38:	10c0080e 	bge	r2,r3,803a5c <__fixdfsi+0x84>
  803a3c:	d8800317 	ldw	r2,12(sp)
  803a40:	1000121e 	bne	r2,zero,803a8c <__fixdfsi+0xb4>
  803a44:	00e00034 	movhi	r3,32768
  803a48:	18ffffc4 	addi	r3,r3,-1
  803a4c:	1805883a 	mov	r2,r3
  803a50:	dfc00717 	ldw	ra,28(sp)
  803a54:	dec00804 	addi	sp,sp,32
  803a58:	f800283a 	ret
  803a5c:	00800f04 	movi	r2,60
  803a60:	10d1c83a 	sub	r8,r2,r3
  803a64:	40bff804 	addi	r2,r8,-32
  803a68:	d9800517 	ldw	r6,20(sp)
  803a6c:	d9c00617 	ldw	r7,24(sp)
  803a70:	10000816 	blt	r2,zero,803a94 <__fixdfsi+0xbc>
  803a74:	3888d83a 	srl	r4,r7,r2
  803a78:	d8800317 	ldw	r2,12(sp)
  803a7c:	2007883a 	mov	r3,r4
  803a80:	103fe226 	beq	r2,zero,803a0c <__fixdfsi+0x34>
  803a84:	0107c83a 	sub	r3,zero,r4
  803a88:	003fe006 	br	803a0c <__fixdfsi+0x34>
  803a8c:	00e00034 	movhi	r3,32768
  803a90:	003fde06 	br	803a0c <__fixdfsi+0x34>
  803a94:	39c7883a 	add	r3,r7,r7
  803a98:	008007c4 	movi	r2,31
  803a9c:	1205c83a 	sub	r2,r2,r8
  803aa0:	1886983a 	sll	r3,r3,r2
  803aa4:	3208d83a 	srl	r4,r6,r8
  803aa8:	1908b03a 	or	r4,r3,r4
  803aac:	003ff206 	br	803a78 <__fixdfsi+0xa0>

00803ab0 <__floatunsidf>:
  803ab0:	defff204 	addi	sp,sp,-56
  803ab4:	dfc00d15 	stw	ra,52(sp)
  803ab8:	ddc00c15 	stw	r23,48(sp)
  803abc:	dd800b15 	stw	r22,44(sp)
  803ac0:	dd400a15 	stw	r21,40(sp)
  803ac4:	dd000915 	stw	r20,36(sp)
  803ac8:	dcc00815 	stw	r19,32(sp)
  803acc:	dc800715 	stw	r18,28(sp)
  803ad0:	dc400615 	stw	r17,24(sp)
  803ad4:	dc000515 	stw	r16,20(sp)
  803ad8:	d8000115 	stw	zero,4(sp)
  803adc:	20000f1e 	bne	r4,zero,803b1c <__floatunsidf+0x6c>
  803ae0:	00800084 	movi	r2,2
  803ae4:	d8800015 	stw	r2,0(sp)
  803ae8:	d809883a 	mov	r4,sp
  803aec:	0803d680 	call	803d68 <__pack_d>
  803af0:	dfc00d17 	ldw	ra,52(sp)
  803af4:	ddc00c17 	ldw	r23,48(sp)
  803af8:	dd800b17 	ldw	r22,44(sp)
  803afc:	dd400a17 	ldw	r21,40(sp)
  803b00:	dd000917 	ldw	r20,36(sp)
  803b04:	dcc00817 	ldw	r19,32(sp)
  803b08:	dc800717 	ldw	r18,28(sp)
  803b0c:	dc400617 	ldw	r17,24(sp)
  803b10:	dc000517 	ldw	r16,20(sp)
  803b14:	dec00e04 	addi	sp,sp,56
  803b18:	f800283a 	ret
  803b1c:	008000c4 	movi	r2,3
  803b20:	00c00f04 	movi	r3,60
  803b24:	002f883a 	mov	r23,zero
  803b28:	202d883a 	mov	r22,r4
  803b2c:	d8800015 	stw	r2,0(sp)
  803b30:	d8c00215 	stw	r3,8(sp)
  803b34:	d9000315 	stw	r4,12(sp)
  803b38:	ddc00415 	stw	r23,16(sp)
  803b3c:	0803c440 	call	803c44 <__clzsi2>
  803b40:	12400744 	addi	r9,r2,29
  803b44:	48000b16 	blt	r9,zero,803b74 <__floatunsidf+0xc4>
  803b48:	483fe726 	beq	r9,zero,803ae8 <__floatunsidf+0x38>
  803b4c:	10bfff44 	addi	r2,r2,-3
  803b50:	10002e16 	blt	r2,zero,803c0c <__floatunsidf+0x15c>
  803b54:	b0a2983a 	sll	r17,r22,r2
  803b58:	0021883a 	mov	r16,zero
  803b5c:	d8800217 	ldw	r2,8(sp)
  803b60:	dc400415 	stw	r17,16(sp)
  803b64:	dc000315 	stw	r16,12(sp)
  803b68:	1245c83a 	sub	r2,r2,r9
  803b6c:	d8800215 	stw	r2,8(sp)
  803b70:	003fdd06 	br	803ae8 <__floatunsidf+0x38>
  803b74:	0255c83a 	sub	r10,zero,r9
  803b78:	51bff804 	addi	r6,r10,-32
  803b7c:	30001b16 	blt	r6,zero,803bec <__floatunsidf+0x13c>
  803b80:	b9a8d83a 	srl	r20,r23,r6
  803b84:	002b883a 	mov	r21,zero
  803b88:	000f883a 	mov	r7,zero
  803b8c:	01000044 	movi	r4,1
  803b90:	0011883a 	mov	r8,zero
  803b94:	30002516 	blt	r6,zero,803c2c <__floatunsidf+0x17c>
  803b98:	21a6983a 	sll	r19,r4,r6
  803b9c:	0025883a 	mov	r18,zero
  803ba0:	00bfffc4 	movi	r2,-1
  803ba4:	9089883a 	add	r4,r18,r2
  803ba8:	988b883a 	add	r5,r19,r2
  803bac:	248d803a 	cmpltu	r6,r4,r18
  803bb0:	314b883a 	add	r5,r6,r5
  803bb4:	b104703a 	and	r2,r22,r4
  803bb8:	b946703a 	and	r3,r23,r5
  803bbc:	10c4b03a 	or	r2,r2,r3
  803bc0:	10000226 	beq	r2,zero,803bcc <__floatunsidf+0x11c>
  803bc4:	01c00044 	movi	r7,1
  803bc8:	0011883a 	mov	r8,zero
  803bcc:	d9000217 	ldw	r4,8(sp)
  803bd0:	a1c4b03a 	or	r2,r20,r7
  803bd4:	aa06b03a 	or	r3,r21,r8
  803bd8:	2249c83a 	sub	r4,r4,r9
  803bdc:	d8c00415 	stw	r3,16(sp)
  803be0:	d9000215 	stw	r4,8(sp)
  803be4:	d8800315 	stw	r2,12(sp)
  803be8:	003fbf06 	br	803ae8 <__floatunsidf+0x38>
  803bec:	bdc7883a 	add	r3,r23,r23
  803bf0:	008007c4 	movi	r2,31
  803bf4:	1285c83a 	sub	r2,r2,r10
  803bf8:	1886983a 	sll	r3,r3,r2
  803bfc:	b2a8d83a 	srl	r20,r22,r10
  803c00:	baaad83a 	srl	r21,r23,r10
  803c04:	1d28b03a 	or	r20,r3,r20
  803c08:	003fdf06 	br	803b88 <__floatunsidf+0xd8>
  803c0c:	b006d07a 	srli	r3,r22,1
  803c10:	008007c4 	movi	r2,31
  803c14:	1245c83a 	sub	r2,r2,r9
  803c18:	1886d83a 	srl	r3,r3,r2
  803c1c:	ba62983a 	sll	r17,r23,r9
  803c20:	b260983a 	sll	r16,r22,r9
  803c24:	1c62b03a 	or	r17,r3,r17
  803c28:	003fcc06 	br	803b5c <__floatunsidf+0xac>
  803c2c:	2006d07a 	srli	r3,r4,1
  803c30:	008007c4 	movi	r2,31
  803c34:	1285c83a 	sub	r2,r2,r10
  803c38:	18a6d83a 	srl	r19,r3,r2
  803c3c:	22a4983a 	sll	r18,r4,r10
  803c40:	003fd706 	br	803ba0 <__floatunsidf+0xf0>

00803c44 <__clzsi2>:
  803c44:	00bfffd4 	movui	r2,65535
  803c48:	11000e36 	bltu	r2,r4,803c84 <__clzsi2+0x40>
  803c4c:	00803fc4 	movi	r2,255
  803c50:	01400204 	movi	r5,8
  803c54:	0007883a 	mov	r3,zero
  803c58:	11001036 	bltu	r2,r4,803c9c <__clzsi2+0x58>
  803c5c:	000b883a 	mov	r5,zero
  803c60:	20c6d83a 	srl	r3,r4,r3
  803c64:	008020b4 	movhi	r2,130
  803c68:	10b49204 	addi	r2,r2,-11704
  803c6c:	1887883a 	add	r3,r3,r2
  803c70:	18800003 	ldbu	r2,0(r3)
  803c74:	00c00804 	movi	r3,32
  803c78:	2885883a 	add	r2,r5,r2
  803c7c:	1885c83a 	sub	r2,r3,r2
  803c80:	f800283a 	ret
  803c84:	01400404 	movi	r5,16
  803c88:	00804034 	movhi	r2,256
  803c8c:	10bfffc4 	addi	r2,r2,-1
  803c90:	2807883a 	mov	r3,r5
  803c94:	113ff22e 	bgeu	r2,r4,803c60 <__clzsi2+0x1c>
  803c98:	01400604 	movi	r5,24
  803c9c:	2807883a 	mov	r3,r5
  803ca0:	20c6d83a 	srl	r3,r4,r3
  803ca4:	008020b4 	movhi	r2,130
  803ca8:	10b49204 	addi	r2,r2,-11704
  803cac:	1887883a 	add	r3,r3,r2
  803cb0:	18800003 	ldbu	r2,0(r3)
  803cb4:	00c00804 	movi	r3,32
  803cb8:	2885883a 	add	r2,r5,r2
  803cbc:	1885c83a 	sub	r2,r3,r2
  803cc0:	f800283a 	ret

00803cc4 <__fixunsdfsi>:
  803cc4:	defffb04 	addi	sp,sp,-20
  803cc8:	dc400115 	stw	r17,4(sp)
  803ccc:	dc000015 	stw	r16,0(sp)
  803cd0:	04507834 	movhi	r17,16864
  803cd4:	0021883a 	mov	r16,zero
  803cd8:	800d883a 	mov	r6,r16
  803cdc:	880f883a 	mov	r7,r17
  803ce0:	dcc00315 	stw	r19,12(sp)
  803ce4:	dc800215 	stw	r18,8(sp)
  803ce8:	2827883a 	mov	r19,r5
  803cec:	2025883a 	mov	r18,r4
  803cf0:	dfc00415 	stw	ra,16(sp)
  803cf4:	080427c0 	call	80427c <__gedf2>
  803cf8:	000d883a 	mov	r6,zero
  803cfc:	880f883a 	mov	r7,r17
  803d00:	980b883a 	mov	r5,r19
  803d04:	9009883a 	mov	r4,r18
  803d08:	10000d16 	blt	r2,zero,803d40 <__fixunsdfsi+0x7c>
  803d0c:	08031480 	call	803148 <__subdf3>
  803d10:	180b883a 	mov	r5,r3
  803d14:	1009883a 	mov	r4,r2
  803d18:	08039d80 	call	8039d8 <__fixdfsi>
  803d1c:	00e00034 	movhi	r3,32768
  803d20:	10c5883a 	add	r2,r2,r3
  803d24:	dfc00417 	ldw	ra,16(sp)
  803d28:	dcc00317 	ldw	r19,12(sp)
  803d2c:	dc800217 	ldw	r18,8(sp)
  803d30:	dc400117 	ldw	r17,4(sp)
  803d34:	dc000017 	ldw	r16,0(sp)
  803d38:	dec00504 	addi	sp,sp,20
  803d3c:	f800283a 	ret
  803d40:	980b883a 	mov	r5,r19
  803d44:	9009883a 	mov	r4,r18
  803d48:	08039d80 	call	8039d8 <__fixdfsi>
  803d4c:	dfc00417 	ldw	ra,16(sp)
  803d50:	dcc00317 	ldw	r19,12(sp)
  803d54:	dc800217 	ldw	r18,8(sp)
  803d58:	dc400117 	ldw	r17,4(sp)
  803d5c:	dc000017 	ldw	r16,0(sp)
  803d60:	dec00504 	addi	sp,sp,20
  803d64:	f800283a 	ret

00803d68 <__pack_d>:
  803d68:	20c00017 	ldw	r3,0(r4)
  803d6c:	defffd04 	addi	sp,sp,-12
  803d70:	dc000015 	stw	r16,0(sp)
  803d74:	dc800215 	stw	r18,8(sp)
  803d78:	dc400115 	stw	r17,4(sp)
  803d7c:	00800044 	movi	r2,1
  803d80:	22000317 	ldw	r8,12(r4)
  803d84:	001f883a 	mov	r15,zero
  803d88:	22400417 	ldw	r9,16(r4)
  803d8c:	24000117 	ldw	r16,4(r4)
  803d90:	10c0552e 	bgeu	r2,r3,803ee8 <__pack_d+0x180>
  803d94:	00800104 	movi	r2,4
  803d98:	18804f26 	beq	r3,r2,803ed8 <__pack_d+0x170>
  803d9c:	00800084 	movi	r2,2
  803da0:	18800226 	beq	r3,r2,803dac <__pack_d+0x44>
  803da4:	4244b03a 	or	r2,r8,r9
  803da8:	10001a1e 	bne	r2,zero,803e14 <__pack_d+0xac>
  803dac:	000d883a 	mov	r6,zero
  803db0:	000f883a 	mov	r7,zero
  803db4:	0011883a 	mov	r8,zero
  803db8:	00800434 	movhi	r2,16
  803dbc:	10bfffc4 	addi	r2,r2,-1
  803dc0:	301d883a 	mov	r14,r6
  803dc4:	3884703a 	and	r2,r7,r2
  803dc8:	400a953a 	slli	r5,r8,20
  803dcc:	79bffc2c 	andhi	r6,r15,65520
  803dd0:	308cb03a 	or	r6,r6,r2
  803dd4:	00e00434 	movhi	r3,32784
  803dd8:	18ffffc4 	addi	r3,r3,-1
  803ddc:	800497fa 	slli	r2,r16,31
  803de0:	30c6703a 	and	r3,r6,r3
  803de4:	1946b03a 	or	r3,r3,r5
  803de8:	01600034 	movhi	r5,32768
  803dec:	297fffc4 	addi	r5,r5,-1
  803df0:	194a703a 	and	r5,r3,r5
  803df4:	288ab03a 	or	r5,r5,r2
  803df8:	2807883a 	mov	r3,r5
  803dfc:	7005883a 	mov	r2,r14
  803e00:	dc800217 	ldw	r18,8(sp)
  803e04:	dc400117 	ldw	r17,4(sp)
  803e08:	dc000017 	ldw	r16,0(sp)
  803e0c:	dec00304 	addi	sp,sp,12
  803e10:	f800283a 	ret
  803e14:	21000217 	ldw	r4,8(r4)
  803e18:	00bf0084 	movi	r2,-1022
  803e1c:	20803f16 	blt	r4,r2,803f1c <__pack_d+0x1b4>
  803e20:	0080ffc4 	movi	r2,1023
  803e24:	11002c16 	blt	r2,r4,803ed8 <__pack_d+0x170>
  803e28:	00803fc4 	movi	r2,255
  803e2c:	408c703a 	and	r6,r8,r2
  803e30:	00802004 	movi	r2,128
  803e34:	0007883a 	mov	r3,zero
  803e38:	000f883a 	mov	r7,zero
  803e3c:	2280ffc4 	addi	r10,r4,1023
  803e40:	30801e26 	beq	r6,r2,803ebc <__pack_d+0x154>
  803e44:	00801fc4 	movi	r2,127
  803e48:	4089883a 	add	r4,r8,r2
  803e4c:	220d803a 	cmpltu	r6,r4,r8
  803e50:	324d883a 	add	r6,r6,r9
  803e54:	2011883a 	mov	r8,r4
  803e58:	3013883a 	mov	r9,r6
  803e5c:	00880034 	movhi	r2,8192
  803e60:	10bfffc4 	addi	r2,r2,-1
  803e64:	12400d36 	bltu	r2,r9,803e9c <__pack_d+0x134>
  803e68:	4804963a 	slli	r2,r9,24
  803e6c:	400cd23a 	srli	r6,r8,8
  803e70:	480ed23a 	srli	r7,r9,8
  803e74:	013fffc4 	movi	r4,-1
  803e78:	118cb03a 	or	r6,r2,r6
  803e7c:	01400434 	movhi	r5,16
  803e80:	297fffc4 	addi	r5,r5,-1
  803e84:	3104703a 	and	r2,r6,r4
  803e88:	3946703a 	and	r3,r7,r5
  803e8c:	5201ffcc 	andi	r8,r10,2047
  803e90:	100d883a 	mov	r6,r2
  803e94:	180f883a 	mov	r7,r3
  803e98:	003fc706 	br	803db8 <__pack_d+0x50>
  803e9c:	480897fa 	slli	r4,r9,31
  803ea0:	4004d07a 	srli	r2,r8,1
  803ea4:	4806d07a 	srli	r3,r9,1
  803ea8:	52800044 	addi	r10,r10,1
  803eac:	2084b03a 	or	r2,r4,r2
  803eb0:	1011883a 	mov	r8,r2
  803eb4:	1813883a 	mov	r9,r3
  803eb8:	003feb06 	br	803e68 <__pack_d+0x100>
  803ebc:	383fe11e 	bne	r7,zero,803e44 <__pack_d+0xdc>
  803ec0:	01004004 	movi	r4,256
  803ec4:	4104703a 	and	r2,r8,r4
  803ec8:	10c4b03a 	or	r2,r2,r3
  803ecc:	103fe326 	beq	r2,zero,803e5c <__pack_d+0xf4>
  803ed0:	3005883a 	mov	r2,r6
  803ed4:	003fdc06 	br	803e48 <__pack_d+0xe0>
  803ed8:	000d883a 	mov	r6,zero
  803edc:	000f883a 	mov	r7,zero
  803ee0:	0201ffc4 	movi	r8,2047
  803ee4:	003fb406 	br	803db8 <__pack_d+0x50>
  803ee8:	0005883a 	mov	r2,zero
  803eec:	00c00234 	movhi	r3,8
  803ef0:	408cb03a 	or	r6,r8,r2
  803ef4:	48ceb03a 	or	r7,r9,r3
  803ef8:	013fffc4 	movi	r4,-1
  803efc:	01400434 	movhi	r5,16
  803f00:	297fffc4 	addi	r5,r5,-1
  803f04:	3104703a 	and	r2,r6,r4
  803f08:	3946703a 	and	r3,r7,r5
  803f0c:	100d883a 	mov	r6,r2
  803f10:	180f883a 	mov	r7,r3
  803f14:	0201ffc4 	movi	r8,2047
  803f18:	003fa706 	br	803db8 <__pack_d+0x50>
  803f1c:	1109c83a 	sub	r4,r2,r4
  803f20:	00800e04 	movi	r2,56
  803f24:	11004316 	blt	r2,r4,804034 <__pack_d+0x2cc>
  803f28:	21fff804 	addi	r7,r4,-32
  803f2c:	38004516 	blt	r7,zero,804044 <__pack_d+0x2dc>
  803f30:	49d8d83a 	srl	r12,r9,r7
  803f34:	001b883a 	mov	r13,zero
  803f38:	0023883a 	mov	r17,zero
  803f3c:	01400044 	movi	r5,1
  803f40:	0025883a 	mov	r18,zero
  803f44:	38004716 	blt	r7,zero,804064 <__pack_d+0x2fc>
  803f48:	29d6983a 	sll	r11,r5,r7
  803f4c:	0015883a 	mov	r10,zero
  803f50:	00bfffc4 	movi	r2,-1
  803f54:	5089883a 	add	r4,r10,r2
  803f58:	588b883a 	add	r5,r11,r2
  803f5c:	228d803a 	cmpltu	r6,r4,r10
  803f60:	314b883a 	add	r5,r6,r5
  803f64:	4104703a 	and	r2,r8,r4
  803f68:	4946703a 	and	r3,r9,r5
  803f6c:	10c4b03a 	or	r2,r2,r3
  803f70:	10000226 	beq	r2,zero,803f7c <__pack_d+0x214>
  803f74:	04400044 	movi	r17,1
  803f78:	0025883a 	mov	r18,zero
  803f7c:	00803fc4 	movi	r2,255
  803f80:	644eb03a 	or	r7,r12,r17
  803f84:	3892703a 	and	r9,r7,r2
  803f88:	00802004 	movi	r2,128
  803f8c:	6c90b03a 	or	r8,r13,r18
  803f90:	0015883a 	mov	r10,zero
  803f94:	48801626 	beq	r9,r2,803ff0 <__pack_d+0x288>
  803f98:	01001fc4 	movi	r4,127
  803f9c:	3905883a 	add	r2,r7,r4
  803fa0:	11cd803a 	cmpltu	r6,r2,r7
  803fa4:	320d883a 	add	r6,r6,r8
  803fa8:	100f883a 	mov	r7,r2
  803fac:	00840034 	movhi	r2,4096
  803fb0:	10bfffc4 	addi	r2,r2,-1
  803fb4:	3011883a 	mov	r8,r6
  803fb8:	0007883a 	mov	r3,zero
  803fbc:	11801b36 	bltu	r2,r6,80402c <__pack_d+0x2c4>
  803fc0:	4004963a 	slli	r2,r8,24
  803fc4:	3808d23a 	srli	r4,r7,8
  803fc8:	400ad23a 	srli	r5,r8,8
  803fcc:	1813883a 	mov	r9,r3
  803fd0:	1108b03a 	or	r4,r2,r4
  803fd4:	00bfffc4 	movi	r2,-1
  803fd8:	00c00434 	movhi	r3,16
  803fdc:	18ffffc4 	addi	r3,r3,-1
  803fe0:	208c703a 	and	r6,r4,r2
  803fe4:	28ce703a 	and	r7,r5,r3
  803fe8:	4a01ffcc 	andi	r8,r9,2047
  803fec:	003f7206 	br	803db8 <__pack_d+0x50>
  803ff0:	503fe91e 	bne	r10,zero,803f98 <__pack_d+0x230>
  803ff4:	01004004 	movi	r4,256
  803ff8:	3904703a 	and	r2,r7,r4
  803ffc:	0007883a 	mov	r3,zero
  804000:	10c4b03a 	or	r2,r2,r3
  804004:	10000626 	beq	r2,zero,804020 <__pack_d+0x2b8>
  804008:	3a45883a 	add	r2,r7,r9
  80400c:	11cd803a 	cmpltu	r6,r2,r7
  804010:	320d883a 	add	r6,r6,r8
  804014:	100f883a 	mov	r7,r2
  804018:	3011883a 	mov	r8,r6
  80401c:	0007883a 	mov	r3,zero
  804020:	00840034 	movhi	r2,4096
  804024:	10bfffc4 	addi	r2,r2,-1
  804028:	123fe52e 	bgeu	r2,r8,803fc0 <__pack_d+0x258>
  80402c:	00c00044 	movi	r3,1
  804030:	003fe306 	br	803fc0 <__pack_d+0x258>
  804034:	0009883a 	mov	r4,zero
  804038:	0013883a 	mov	r9,zero
  80403c:	000b883a 	mov	r5,zero
  804040:	003fe406 	br	803fd4 <__pack_d+0x26c>
  804044:	4a47883a 	add	r3,r9,r9
  804048:	008007c4 	movi	r2,31
  80404c:	1105c83a 	sub	r2,r2,r4
  804050:	1886983a 	sll	r3,r3,r2
  804054:	4118d83a 	srl	r12,r8,r4
  804058:	491ad83a 	srl	r13,r9,r4
  80405c:	1b18b03a 	or	r12,r3,r12
  804060:	003fb506 	br	803f38 <__pack_d+0x1d0>
  804064:	2806d07a 	srli	r3,r5,1
  804068:	008007c4 	movi	r2,31
  80406c:	1105c83a 	sub	r2,r2,r4
  804070:	1896d83a 	srl	r11,r3,r2
  804074:	2914983a 	sll	r10,r5,r4
  804078:	003fb506 	br	803f50 <__pack_d+0x1e8>

0080407c <__unpack_d>:
  80407c:	20c00117 	ldw	r3,4(r4)
  804080:	22400017 	ldw	r9,0(r4)
  804084:	00800434 	movhi	r2,16
  804088:	10bfffc4 	addi	r2,r2,-1
  80408c:	1808d53a 	srli	r4,r3,20
  804090:	180cd7fa 	srli	r6,r3,31
  804094:	1894703a 	and	r10,r3,r2
  804098:	2201ffcc 	andi	r8,r4,2047
  80409c:	281b883a 	mov	r13,r5
  8040a0:	4817883a 	mov	r11,r9
  8040a4:	29800115 	stw	r6,4(r5)
  8040a8:	5019883a 	mov	r12,r10
  8040ac:	40001e1e 	bne	r8,zero,804128 <__unpack_d+0xac>
  8040b0:	4a84b03a 	or	r2,r9,r10
  8040b4:	10001926 	beq	r2,zero,80411c <__unpack_d+0xa0>
  8040b8:	4804d63a 	srli	r2,r9,24
  8040bc:	500c923a 	slli	r6,r10,8
  8040c0:	013f0084 	movi	r4,-1022
  8040c4:	00c40034 	movhi	r3,4096
  8040c8:	18ffffc4 	addi	r3,r3,-1
  8040cc:	118cb03a 	or	r6,r2,r6
  8040d0:	008000c4 	movi	r2,3
  8040d4:	480a923a 	slli	r5,r9,8
  8040d8:	68800015 	stw	r2,0(r13)
  8040dc:	69000215 	stw	r4,8(r13)
  8040e0:	19800b36 	bltu	r3,r6,804110 <__unpack_d+0x94>
  8040e4:	200f883a 	mov	r7,r4
  8040e8:	1811883a 	mov	r8,r3
  8040ec:	2945883a 	add	r2,r5,r5
  8040f0:	1149803a 	cmpltu	r4,r2,r5
  8040f4:	3187883a 	add	r3,r6,r6
  8040f8:	20c9883a 	add	r4,r4,r3
  8040fc:	100b883a 	mov	r5,r2
  804100:	200d883a 	mov	r6,r4
  804104:	39ffffc4 	addi	r7,r7,-1
  804108:	413ff82e 	bgeu	r8,r4,8040ec <__unpack_d+0x70>
  80410c:	69c00215 	stw	r7,8(r13)
  804110:	69800415 	stw	r6,16(r13)
  804114:	69400315 	stw	r5,12(r13)
  804118:	f800283a 	ret
  80411c:	00800084 	movi	r2,2
  804120:	28800015 	stw	r2,0(r5)
  804124:	f800283a 	ret
  804128:	0081ffc4 	movi	r2,2047
  80412c:	40800f26 	beq	r8,r2,80416c <__unpack_d+0xf0>
  804130:	480cd63a 	srli	r6,r9,24
  804134:	5006923a 	slli	r3,r10,8
  804138:	4804923a 	slli	r2,r9,8
  80413c:	0009883a 	mov	r4,zero
  804140:	30c6b03a 	or	r3,r6,r3
  804144:	01440034 	movhi	r5,4096
  804148:	110cb03a 	or	r6,r2,r4
  80414c:	423f0044 	addi	r8,r8,-1023
  804150:	194eb03a 	or	r7,r3,r5
  804154:	008000c4 	movi	r2,3
  804158:	69c00415 	stw	r7,16(r13)
  80415c:	6a000215 	stw	r8,8(r13)
  804160:	68800015 	stw	r2,0(r13)
  804164:	69800315 	stw	r6,12(r13)
  804168:	f800283a 	ret
  80416c:	4a84b03a 	or	r2,r9,r10
  804170:	1000031e 	bne	r2,zero,804180 <__unpack_d+0x104>
  804174:	00800104 	movi	r2,4
  804178:	28800015 	stw	r2,0(r5)
  80417c:	f800283a 	ret
  804180:	0009883a 	mov	r4,zero
  804184:	01400234 	movhi	r5,8
  804188:	4904703a 	and	r2,r9,r4
  80418c:	5146703a 	and	r3,r10,r5
  804190:	10c4b03a 	or	r2,r2,r3
  804194:	10000526 	beq	r2,zero,8041ac <__unpack_d+0x130>
  804198:	00800044 	movi	r2,1
  80419c:	68800015 	stw	r2,0(r13)
  8041a0:	6b000415 	stw	r12,16(r13)
  8041a4:	6ac00315 	stw	r11,12(r13)
  8041a8:	f800283a 	ret
  8041ac:	68000015 	stw	zero,0(r13)
  8041b0:	003ffb06 	br	8041a0 <__unpack_d+0x124>

008041b4 <__fpcmp_parts_d>:
  8041b4:	21800017 	ldw	r6,0(r4)
  8041b8:	00c00044 	movi	r3,1
  8041bc:	19800a2e 	bgeu	r3,r6,8041e8 <__fpcmp_parts_d+0x34>
  8041c0:	28800017 	ldw	r2,0(r5)
  8041c4:	1880082e 	bgeu	r3,r2,8041e8 <__fpcmp_parts_d+0x34>
  8041c8:	00c00104 	movi	r3,4
  8041cc:	30c02626 	beq	r6,r3,804268 <__fpcmp_parts_d+0xb4>
  8041d0:	10c02226 	beq	r2,r3,80425c <__fpcmp_parts_d+0xa8>
  8041d4:	00c00084 	movi	r3,2
  8041d8:	30c00526 	beq	r6,r3,8041f0 <__fpcmp_parts_d+0x3c>
  8041dc:	10c0071e 	bne	r2,r3,8041fc <__fpcmp_parts_d+0x48>
  8041e0:	20800117 	ldw	r2,4(r4)
  8041e4:	1000091e 	bne	r2,zero,80420c <__fpcmp_parts_d+0x58>
  8041e8:	00800044 	movi	r2,1
  8041ec:	f800283a 	ret
  8041f0:	10c01a1e 	bne	r2,r3,80425c <__fpcmp_parts_d+0xa8>
  8041f4:	0005883a 	mov	r2,zero
  8041f8:	f800283a 	ret
  8041fc:	22000117 	ldw	r8,4(r4)
  804200:	28800117 	ldw	r2,4(r5)
  804204:	40800326 	beq	r8,r2,804214 <__fpcmp_parts_d+0x60>
  804208:	403ff726 	beq	r8,zero,8041e8 <__fpcmp_parts_d+0x34>
  80420c:	00bfffc4 	movi	r2,-1
  804210:	f800283a 	ret
  804214:	20c00217 	ldw	r3,8(r4)
  804218:	28800217 	ldw	r2,8(r5)
  80421c:	10fffa16 	blt	r2,r3,804208 <__fpcmp_parts_d+0x54>
  804220:	18800916 	blt	r3,r2,804248 <__fpcmp_parts_d+0x94>
  804224:	21c00417 	ldw	r7,16(r4)
  804228:	28c00417 	ldw	r3,16(r5)
  80422c:	21800317 	ldw	r6,12(r4)
  804230:	28800317 	ldw	r2,12(r5)
  804234:	19fff436 	bltu	r3,r7,804208 <__fpcmp_parts_d+0x54>
  804238:	38c00526 	beq	r7,r3,804250 <__fpcmp_parts_d+0x9c>
  80423c:	38c00236 	bltu	r7,r3,804248 <__fpcmp_parts_d+0x94>
  804240:	19ffec1e 	bne	r3,r7,8041f4 <__fpcmp_parts_d+0x40>
  804244:	30bfeb2e 	bgeu	r6,r2,8041f4 <__fpcmp_parts_d+0x40>
  804248:	403fe71e 	bne	r8,zero,8041e8 <__fpcmp_parts_d+0x34>
  80424c:	003fef06 	br	80420c <__fpcmp_parts_d+0x58>
  804250:	11bffa2e 	bgeu	r2,r6,80423c <__fpcmp_parts_d+0x88>
  804254:	403fe426 	beq	r8,zero,8041e8 <__fpcmp_parts_d+0x34>
  804258:	003fec06 	br	80420c <__fpcmp_parts_d+0x58>
  80425c:	28800117 	ldw	r2,4(r5)
  804260:	103fe11e 	bne	r2,zero,8041e8 <__fpcmp_parts_d+0x34>
  804264:	003fe906 	br	80420c <__fpcmp_parts_d+0x58>
  804268:	11bfdd1e 	bne	r2,r6,8041e0 <__fpcmp_parts_d+0x2c>
  80426c:	28c00117 	ldw	r3,4(r5)
  804270:	20800117 	ldw	r2,4(r4)
  804274:	1885c83a 	sub	r2,r3,r2
  804278:	f800283a 	ret

0080427c <__gedf2>:
  80427c:	deffef04 	addi	sp,sp,-68
  804280:	dc400f15 	stw	r17,60(sp)
  804284:	dc400404 	addi	r17,sp,16
  804288:	2005883a 	mov	r2,r4
  80428c:	2807883a 	mov	r3,r5
  804290:	dc000e15 	stw	r16,56(sp)
  804294:	d809883a 	mov	r4,sp
  804298:	880b883a 	mov	r5,r17
  80429c:	dc000904 	addi	r16,sp,36
  8042a0:	d8c00115 	stw	r3,4(sp)
  8042a4:	d8800015 	stw	r2,0(sp)
  8042a8:	d9800215 	stw	r6,8(sp)
  8042ac:	dfc01015 	stw	ra,64(sp)
  8042b0:	d9c00315 	stw	r7,12(sp)
  8042b4:	080407c0 	call	80407c <__unpack_d>
  8042b8:	d9000204 	addi	r4,sp,8
  8042bc:	800b883a 	mov	r5,r16
  8042c0:	080407c0 	call	80407c <__unpack_d>
  8042c4:	d8800417 	ldw	r2,16(sp)
  8042c8:	00c00044 	movi	r3,1
  8042cc:	01bfffc4 	movi	r6,-1
  8042d0:	1880062e 	bgeu	r3,r2,8042ec <__gedf2+0x70>
  8042d4:	d8800917 	ldw	r2,36(sp)
  8042d8:	8809883a 	mov	r4,r17
  8042dc:	800b883a 	mov	r5,r16
  8042e0:	1880022e 	bgeu	r3,r2,8042ec <__gedf2+0x70>
  8042e4:	08041b40 	call	8041b4 <__fpcmp_parts_d>
  8042e8:	100d883a 	mov	r6,r2
  8042ec:	3005883a 	mov	r2,r6
  8042f0:	dfc01017 	ldw	ra,64(sp)
  8042f4:	dc400f17 	ldw	r17,60(sp)
  8042f8:	dc000e17 	ldw	r16,56(sp)
  8042fc:	dec01104 	addi	sp,sp,68
  804300:	f800283a 	ret

00804304 <__errno>:
  804304:	00c020b4 	movhi	r3,130
  804308:	18fc6804 	addi	r3,r3,-3680
  80430c:	18800017 	ldw	r2,0(r3)
  804310:	f800283a 	ret

00804314 <printf>:
  804314:	defffb04 	addi	sp,sp,-20
  804318:	dfc00115 	stw	ra,4(sp)
  80431c:	d9400215 	stw	r5,8(sp)
  804320:	d9800315 	stw	r6,12(sp)
  804324:	d9c00415 	stw	r7,16(sp)
  804328:	008020b4 	movhi	r2,130
  80432c:	10bc6804 	addi	r2,r2,-3680
  804330:	10c00017 	ldw	r3,0(r2)
  804334:	200b883a 	mov	r5,r4
  804338:	d8800204 	addi	r2,sp,8
  80433c:	19000217 	ldw	r4,8(r3)
  804340:	100d883a 	mov	r6,r2
  804344:	d8800015 	stw	r2,0(sp)
  804348:	08063b80 	call	8063b8 <__vfprintf_internal>
  80434c:	dfc00117 	ldw	ra,4(sp)
  804350:	dec00504 	addi	sp,sp,20
  804354:	f800283a 	ret

00804358 <_printf_r>:
  804358:	defffc04 	addi	sp,sp,-16
  80435c:	dfc00115 	stw	ra,4(sp)
  804360:	d9800215 	stw	r6,8(sp)
  804364:	d9c00315 	stw	r7,12(sp)
  804368:	280d883a 	mov	r6,r5
  80436c:	21400217 	ldw	r5,8(r4)
  804370:	d8c00204 	addi	r3,sp,8
  804374:	180f883a 	mov	r7,r3
  804378:	d8c00015 	stw	r3,0(sp)
  80437c:	080450c0 	call	80450c <___vfprintf_internal_r>
  804380:	dfc00117 	ldw	ra,4(sp)
  804384:	dec00404 	addi	sp,sp,16
  804388:	f800283a 	ret

0080438c <_puts_r>:
  80438c:	defff604 	addi	sp,sp,-40
  804390:	dc400715 	stw	r17,28(sp)
  804394:	2023883a 	mov	r17,r4
  804398:	2809883a 	mov	r4,r5
  80439c:	dfc00915 	stw	ra,36(sp)
  8043a0:	dcc00815 	stw	r19,32(sp)
  8043a4:	2827883a 	mov	r19,r5
  8043a8:	08044400 	call	804440 <strlen>
  8043ac:	89400217 	ldw	r5,8(r17)
  8043b0:	00c020b4 	movhi	r3,130
  8043b4:	18f4d304 	addi	r3,r3,-11444
  8043b8:	01c00044 	movi	r7,1
  8043bc:	12000044 	addi	r8,r2,1
  8043c0:	d8c00515 	stw	r3,20(sp)
  8043c4:	d9c00615 	stw	r7,24(sp)
  8043c8:	d8c00304 	addi	r3,sp,12
  8043cc:	01c00084 	movi	r7,2
  8043d0:	8809883a 	mov	r4,r17
  8043d4:	d80d883a 	mov	r6,sp
  8043d8:	d8c00015 	stw	r3,0(sp)
  8043dc:	dcc00315 	stw	r19,12(sp)
  8043e0:	da000215 	stw	r8,8(sp)
  8043e4:	d9c00115 	stw	r7,4(sp)
  8043e8:	d8800415 	stw	r2,16(sp)
  8043ec:	08086140 	call	808614 <__sfvwrite_r>
  8043f0:	00ffffc4 	movi	r3,-1
  8043f4:	10000626 	beq	r2,zero,804410 <_puts_r+0x84>
  8043f8:	1805883a 	mov	r2,r3
  8043fc:	dfc00917 	ldw	ra,36(sp)
  804400:	dcc00817 	ldw	r19,32(sp)
  804404:	dc400717 	ldw	r17,28(sp)
  804408:	dec00a04 	addi	sp,sp,40
  80440c:	f800283a 	ret
  804410:	00c00284 	movi	r3,10
  804414:	1805883a 	mov	r2,r3
  804418:	dfc00917 	ldw	ra,36(sp)
  80441c:	dcc00817 	ldw	r19,32(sp)
  804420:	dc400717 	ldw	r17,28(sp)
  804424:	dec00a04 	addi	sp,sp,40
  804428:	f800283a 	ret

0080442c <puts>:
  80442c:	008020b4 	movhi	r2,130
  804430:	10bc6804 	addi	r2,r2,-3680
  804434:	200b883a 	mov	r5,r4
  804438:	11000017 	ldw	r4,0(r2)
  80443c:	080438c1 	jmpi	80438c <_puts_r>

00804440 <strlen>:
  804440:	208000cc 	andi	r2,r4,3
  804444:	2011883a 	mov	r8,r4
  804448:	1000161e 	bne	r2,zero,8044a4 <strlen+0x64>
  80444c:	20c00017 	ldw	r3,0(r4)
  804450:	017fbff4 	movhi	r5,65279
  804454:	297fbfc4 	addi	r5,r5,-257
  804458:	01e02074 	movhi	r7,32897
  80445c:	39e02004 	addi	r7,r7,-32640
  804460:	1945883a 	add	r2,r3,r5
  804464:	11c4703a 	and	r2,r2,r7
  804468:	00c6303a 	nor	r3,zero,r3
  80446c:	1886703a 	and	r3,r3,r2
  804470:	18000c1e 	bne	r3,zero,8044a4 <strlen+0x64>
  804474:	280d883a 	mov	r6,r5
  804478:	380b883a 	mov	r5,r7
  80447c:	21000104 	addi	r4,r4,4
  804480:	20800017 	ldw	r2,0(r4)
  804484:	1187883a 	add	r3,r2,r6
  804488:	1946703a 	and	r3,r3,r5
  80448c:	0084303a 	nor	r2,zero,r2
  804490:	10c4703a 	and	r2,r2,r3
  804494:	103ff926 	beq	r2,zero,80447c <strlen+0x3c>
  804498:	20800007 	ldb	r2,0(r4)
  80449c:	10000326 	beq	r2,zero,8044ac <strlen+0x6c>
  8044a0:	21000044 	addi	r4,r4,1
  8044a4:	20800007 	ldb	r2,0(r4)
  8044a8:	103ffd1e 	bne	r2,zero,8044a0 <strlen+0x60>
  8044ac:	2205c83a 	sub	r2,r4,r8
  8044b0:	f800283a 	ret

008044b4 <__sprint_r>:
  8044b4:	30800217 	ldw	r2,8(r6)
  8044b8:	defffe04 	addi	sp,sp,-8
  8044bc:	dc000015 	stw	r16,0(sp)
  8044c0:	dfc00115 	stw	ra,4(sp)
  8044c4:	3021883a 	mov	r16,r6
  8044c8:	0007883a 	mov	r3,zero
  8044cc:	1000061e 	bne	r2,zero,8044e8 <__sprint_r+0x34>
  8044d0:	1805883a 	mov	r2,r3
  8044d4:	30000115 	stw	zero,4(r6)
  8044d8:	dfc00117 	ldw	ra,4(sp)
  8044dc:	dc000017 	ldw	r16,0(sp)
  8044e0:	dec00204 	addi	sp,sp,8
  8044e4:	f800283a 	ret
  8044e8:	08086140 	call	808614 <__sfvwrite_r>
  8044ec:	1007883a 	mov	r3,r2
  8044f0:	1805883a 	mov	r2,r3
  8044f4:	80000115 	stw	zero,4(r16)
  8044f8:	80000215 	stw	zero,8(r16)
  8044fc:	dfc00117 	ldw	ra,4(sp)
  804500:	dc000017 	ldw	r16,0(sp)
  804504:	dec00204 	addi	sp,sp,8
  804508:	f800283a 	ret

0080450c <___vfprintf_internal_r>:
  80450c:	defea404 	addi	sp,sp,-1392
  804510:	dd815815 	stw	r22,1376(sp)
  804514:	dc015215 	stw	r16,1352(sp)
  804518:	d9c15115 	stw	r7,1348(sp)
  80451c:	dfc15b15 	stw	ra,1388(sp)
  804520:	df015a15 	stw	fp,1384(sp)
  804524:	ddc15915 	stw	r23,1380(sp)
  804528:	dd415715 	stw	r21,1372(sp)
  80452c:	dd015615 	stw	r20,1368(sp)
  804530:	dcc15515 	stw	r19,1364(sp)
  804534:	dc815415 	stw	r18,1360(sp)
  804538:	dc415315 	stw	r17,1356(sp)
  80453c:	282d883a 	mov	r22,r5
  804540:	3021883a 	mov	r16,r6
  804544:	d9014f15 	stw	r4,1340(sp)
  804548:	0808c380 	call	808c38 <_localeconv_r>
  80454c:	10800017 	ldw	r2,0(r2)
  804550:	d9c15117 	ldw	r7,1348(sp)
  804554:	d8814915 	stw	r2,1316(sp)
  804558:	d8814f17 	ldw	r2,1340(sp)
  80455c:	10000226 	beq	r2,zero,804568 <___vfprintf_internal_r+0x5c>
  804560:	10800e17 	ldw	r2,56(r2)
  804564:	10020d26 	beq	r2,zero,804d9c <___vfprintf_internal_r+0x890>
  804568:	b080030b 	ldhu	r2,12(r22)
  80456c:	1080020c 	andi	r2,r2,8
  804570:	10020e26 	beq	r2,zero,804dac <___vfprintf_internal_r+0x8a0>
  804574:	b0800417 	ldw	r2,16(r22)
  804578:	10020c26 	beq	r2,zero,804dac <___vfprintf_internal_r+0x8a0>
  80457c:	b200030b 	ldhu	r8,12(r22)
  804580:	00800284 	movi	r2,10
  804584:	40c0068c 	andi	r3,r8,26
  804588:	18802f1e 	bne	r3,r2,804648 <___vfprintf_internal_r+0x13c>
  80458c:	b080038f 	ldh	r2,14(r22)
  804590:	10002d16 	blt	r2,zero,804648 <___vfprintf_internal_r+0x13c>
  804594:	b240038b 	ldhu	r9,14(r22)
  804598:	b2800717 	ldw	r10,28(r22)
  80459c:	b2c00917 	ldw	r11,36(r22)
  8045a0:	d9014f17 	ldw	r4,1340(sp)
  8045a4:	dc402904 	addi	r17,sp,164
  8045a8:	d8804004 	addi	r2,sp,256
  8045ac:	00c10004 	movi	r3,1024
  8045b0:	423fff4c 	andi	r8,r8,65533
  8045b4:	800d883a 	mov	r6,r16
  8045b8:	880b883a 	mov	r5,r17
  8045bc:	da002c0d 	sth	r8,176(sp)
  8045c0:	da402c8d 	sth	r9,178(sp)
  8045c4:	da803015 	stw	r10,192(sp)
  8045c8:	dac03215 	stw	r11,200(sp)
  8045cc:	d8802d15 	stw	r2,180(sp)
  8045d0:	d8c02e15 	stw	r3,184(sp)
  8045d4:	d8802915 	stw	r2,164(sp)
  8045d8:	d8c02b15 	stw	r3,172(sp)
  8045dc:	d8002f15 	stw	zero,188(sp)
  8045e0:	080450c0 	call	80450c <___vfprintf_internal_r>
  8045e4:	d8814b15 	stw	r2,1324(sp)
  8045e8:	10000416 	blt	r2,zero,8045fc <___vfprintf_internal_r+0xf0>
  8045ec:	d9014f17 	ldw	r4,1340(sp)
  8045f0:	880b883a 	mov	r5,r17
  8045f4:	0807ce40 	call	807ce4 <_fflush_r>
  8045f8:	1002321e 	bne	r2,zero,804ec4 <___vfprintf_internal_r+0x9b8>
  8045fc:	d8802c0b 	ldhu	r2,176(sp)
  804600:	1080100c 	andi	r2,r2,64
  804604:	10000326 	beq	r2,zero,804614 <___vfprintf_internal_r+0x108>
  804608:	b080030b 	ldhu	r2,12(r22)
  80460c:	10801014 	ori	r2,r2,64
  804610:	b080030d 	sth	r2,12(r22)
  804614:	d8814b17 	ldw	r2,1324(sp)
  804618:	dfc15b17 	ldw	ra,1388(sp)
  80461c:	df015a17 	ldw	fp,1384(sp)
  804620:	ddc15917 	ldw	r23,1380(sp)
  804624:	dd815817 	ldw	r22,1376(sp)
  804628:	dd415717 	ldw	r21,1372(sp)
  80462c:	dd015617 	ldw	r20,1368(sp)
  804630:	dcc15517 	ldw	r19,1364(sp)
  804634:	dc815417 	ldw	r18,1360(sp)
  804638:	dc415317 	ldw	r17,1356(sp)
  80463c:	dc015217 	ldw	r16,1352(sp)
  804640:	dec15c04 	addi	sp,sp,1392
  804644:	f800283a 	ret
  804648:	0005883a 	mov	r2,zero
  80464c:	0007883a 	mov	r3,zero
  804650:	dd401904 	addi	r21,sp,100
  804654:	d8814215 	stw	r2,1288(sp)
  804658:	802f883a 	mov	r23,r16
  80465c:	d8c14315 	stw	r3,1292(sp)
  804660:	d8014b15 	stw	zero,1324(sp)
  804664:	d8014815 	stw	zero,1312(sp)
  804668:	d8014415 	stw	zero,1296(sp)
  80466c:	d8014715 	stw	zero,1308(sp)
  804670:	dd400c15 	stw	r21,48(sp)
  804674:	d8000e15 	stw	zero,56(sp)
  804678:	d8000d15 	stw	zero,52(sp)
  80467c:	b8800007 	ldb	r2,0(r23)
  804680:	10001926 	beq	r2,zero,8046e8 <___vfprintf_internal_r+0x1dc>
  804684:	00c00944 	movi	r3,37
  804688:	10c01726 	beq	r2,r3,8046e8 <___vfprintf_internal_r+0x1dc>
  80468c:	b821883a 	mov	r16,r23
  804690:	00000106 	br	804698 <___vfprintf_internal_r+0x18c>
  804694:	10c00326 	beq	r2,r3,8046a4 <___vfprintf_internal_r+0x198>
  804698:	84000044 	addi	r16,r16,1
  80469c:	80800007 	ldb	r2,0(r16)
  8046a0:	103ffc1e 	bne	r2,zero,804694 <___vfprintf_internal_r+0x188>
  8046a4:	85e7c83a 	sub	r19,r16,r23
  8046a8:	98000e26 	beq	r19,zero,8046e4 <___vfprintf_internal_r+0x1d8>
  8046ac:	dc800e17 	ldw	r18,56(sp)
  8046b0:	dc400d17 	ldw	r17,52(sp)
  8046b4:	008001c4 	movi	r2,7
  8046b8:	94e5883a 	add	r18,r18,r19
  8046bc:	8c400044 	addi	r17,r17,1
  8046c0:	adc00015 	stw	r23,0(r21)
  8046c4:	dc800e15 	stw	r18,56(sp)
  8046c8:	acc00115 	stw	r19,4(r21)
  8046cc:	dc400d15 	stw	r17,52(sp)
  8046d0:	14428b16 	blt	r2,r17,805100 <___vfprintf_internal_r+0xbf4>
  8046d4:	ad400204 	addi	r21,r21,8
  8046d8:	d9014b17 	ldw	r4,1324(sp)
  8046dc:	24c9883a 	add	r4,r4,r19
  8046e0:	d9014b15 	stw	r4,1324(sp)
  8046e4:	802f883a 	mov	r23,r16
  8046e8:	b8800007 	ldb	r2,0(r23)
  8046ec:	10013c26 	beq	r2,zero,804be0 <___vfprintf_internal_r+0x6d4>
  8046f0:	bdc00044 	addi	r23,r23,1
  8046f4:	d8000405 	stb	zero,16(sp)
  8046f8:	b8c00007 	ldb	r3,0(r23)
  8046fc:	04ffffc4 	movi	r19,-1
  804700:	d8014c15 	stw	zero,1328(sp)
  804704:	d8014a15 	stw	zero,1320(sp)
  804708:	d8c14d15 	stw	r3,1332(sp)
  80470c:	bdc00044 	addi	r23,r23,1
  804710:	d9414d17 	ldw	r5,1332(sp)
  804714:	00801604 	movi	r2,88
  804718:	28fff804 	addi	r3,r5,-32
  80471c:	10c06036 	bltu	r2,r3,8048a0 <___vfprintf_internal_r+0x394>
  804720:	18c5883a 	add	r2,r3,r3
  804724:	1085883a 	add	r2,r2,r2
  804728:	00c02034 	movhi	r3,128
  80472c:	18d1cf04 	addi	r3,r3,18236
  804730:	10c5883a 	add	r2,r2,r3
  804734:	11000017 	ldw	r4,0(r2)
  804738:	2000683a 	jmp	r4
  80473c:	008056b0 	cmpltui	r2,zero,346
  804740:	008048a0 	cmpeqi	r2,zero,290
  804744:	008048a0 	cmpeqi	r2,zero,290
  804748:	0080569c 	xori	r2,zero,346
  80474c:	008048a0 	cmpeqi	r2,zero,290
  804750:	008048a0 	cmpeqi	r2,zero,290
  804754:	008048a0 	cmpeqi	r2,zero,290
  804758:	008048a0 	cmpeqi	r2,zero,290
  80475c:	008048a0 	cmpeqi	r2,zero,290
  804760:	008048a0 	cmpeqi	r2,zero,290
  804764:	0080547c 	xorhi	r2,zero,337
  804768:	0080568c 	andi	r2,zero,346
  80476c:	008048a0 	cmpeqi	r2,zero,290
  804770:	00805494 	movui	r2,338
  804774:	00805728 	cmpgeui	r2,zero,348
  804778:	008048a0 	cmpeqi	r2,zero,290
  80477c:	00805714 	movui	r2,348
  804780:	008056dc 	xori	r2,zero,347
  804784:	008056dc 	xori	r2,zero,347
  804788:	008056dc 	xori	r2,zero,347
  80478c:	008056dc 	xori	r2,zero,347
  804790:	008056dc 	xori	r2,zero,347
  804794:	008056dc 	xori	r2,zero,347
  804798:	008056dc 	xori	r2,zero,347
  80479c:	008056dc 	xori	r2,zero,347
  8047a0:	008056dc 	xori	r2,zero,347
  8047a4:	008048a0 	cmpeqi	r2,zero,290
  8047a8:	008048a0 	cmpeqi	r2,zero,290
  8047ac:	008048a0 	cmpeqi	r2,zero,290
  8047b0:	008048a0 	cmpeqi	r2,zero,290
  8047b4:	008048a0 	cmpeqi	r2,zero,290
  8047b8:	008048a0 	cmpeqi	r2,zero,290
  8047bc:	008048a0 	cmpeqi	r2,zero,290
  8047c0:	008048a0 	cmpeqi	r2,zero,290
  8047c4:	008048a0 	cmpeqi	r2,zero,290
  8047c8:	008048a0 	cmpeqi	r2,zero,290
  8047cc:	00804ef8 	rdprs	r2,zero,315
  8047d0:	00805564 	muli	r2,zero,341
  8047d4:	008048a0 	cmpeqi	r2,zero,290
  8047d8:	00805564 	muli	r2,zero,341
  8047dc:	008048a0 	cmpeqi	r2,zero,290
  8047e0:	008048a0 	cmpeqi	r2,zero,290
  8047e4:	008048a0 	cmpeqi	r2,zero,290
  8047e8:	008048a0 	cmpeqi	r2,zero,290
  8047ec:	008056c8 	cmpgei	r2,zero,347
  8047f0:	008048a0 	cmpeqi	r2,zero,290
  8047f4:	008048a0 	cmpeqi	r2,zero,290
  8047f8:	00804fac 	andhi	r2,zero,318
  8047fc:	008048a0 	cmpeqi	r2,zero,290
  804800:	008048a0 	cmpeqi	r2,zero,290
  804804:	008048a0 	cmpeqi	r2,zero,290
  804808:	008048a0 	cmpeqi	r2,zero,290
  80480c:	008048a0 	cmpeqi	r2,zero,290
  804810:	00804ff8 	rdprs	r2,zero,319
  804814:	008048a0 	cmpeqi	r2,zero,290
  804818:	008048a0 	cmpeqi	r2,zero,290
  80481c:	00805618 	cmpnei	r2,zero,344
  804820:	008048a0 	cmpeqi	r2,zero,290
  804824:	008048a0 	cmpeqi	r2,zero,290
  804828:	008048a0 	cmpeqi	r2,zero,290
  80482c:	008048a0 	cmpeqi	r2,zero,290
  804830:	008048a0 	cmpeqi	r2,zero,290
  804834:	008048a0 	cmpeqi	r2,zero,290
  804838:	008048a0 	cmpeqi	r2,zero,290
  80483c:	008048a0 	cmpeqi	r2,zero,290
  804840:	008048a0 	cmpeqi	r2,zero,290
  804844:	008048a0 	cmpeqi	r2,zero,290
  804848:	008055ec 	andhi	r2,zero,343
  80484c:	00804f04 	movi	r2,316
  804850:	00805564 	muli	r2,zero,341
  804854:	00805564 	muli	r2,zero,341
  804858:	00805564 	muli	r2,zero,341
  80485c:	00805550 	cmplti	r2,zero,341
  804860:	00804f04 	movi	r2,316
  804864:	008048a0 	cmpeqi	r2,zero,290
  804868:	008048a0 	cmpeqi	r2,zero,290
  80486c:	008054d8 	cmpnei	r2,zero,339
  804870:	008048a0 	cmpeqi	r2,zero,290
  804874:	008054a8 	cmpgeui	r2,zero,338
  804878:	00804fb8 	rdprs	r2,zero,318
  80487c:	00805508 	cmpgei	r2,zero,340
  804880:	008054f4 	movhi	r2,339
  804884:	008048a0 	cmpeqi	r2,zero,290
  804888:	00805784 	movi	r2,350
  80488c:	008048a0 	cmpeqi	r2,zero,290
  804890:	00805004 	movi	r2,320
  804894:	008048a0 	cmpeqi	r2,zero,290
  804898:	008048a0 	cmpeqi	r2,zero,290
  80489c:	0080567c 	xorhi	r2,zero,345
  8048a0:	d9014d17 	ldw	r4,1332(sp)
  8048a4:	2000ce26 	beq	r4,zero,804be0 <___vfprintf_internal_r+0x6d4>
  8048a8:	01400044 	movi	r5,1
  8048ac:	d9800f04 	addi	r6,sp,60
  8048b0:	d9c14015 	stw	r7,1280(sp)
  8048b4:	d9414515 	stw	r5,1300(sp)
  8048b8:	d9814115 	stw	r6,1284(sp)
  8048bc:	280f883a 	mov	r7,r5
  8048c0:	d9000f05 	stb	r4,60(sp)
  8048c4:	d8000405 	stb	zero,16(sp)
  8048c8:	d8014615 	stw	zero,1304(sp)
  8048cc:	d8c14c17 	ldw	r3,1328(sp)
  8048d0:	1880008c 	andi	r2,r3,2
  8048d4:	1005003a 	cmpeq	r2,r2,zero
  8048d8:	d8815015 	stw	r2,1344(sp)
  8048dc:	1000031e 	bne	r2,zero,8048ec <___vfprintf_internal_r+0x3e0>
  8048e0:	d9014517 	ldw	r4,1300(sp)
  8048e4:	21000084 	addi	r4,r4,2
  8048e8:	d9014515 	stw	r4,1300(sp)
  8048ec:	d9414c17 	ldw	r5,1328(sp)
  8048f0:	2940210c 	andi	r5,r5,132
  8048f4:	d9414e15 	stw	r5,1336(sp)
  8048f8:	28002d1e 	bne	r5,zero,8049b0 <___vfprintf_internal_r+0x4a4>
  8048fc:	d9814a17 	ldw	r6,1320(sp)
  804900:	d8814517 	ldw	r2,1300(sp)
  804904:	30a1c83a 	sub	r16,r6,r2
  804908:	0400290e 	bge	zero,r16,8049b0 <___vfprintf_internal_r+0x4a4>
  80490c:	00800404 	movi	r2,16
  804910:	1404580e 	bge	r2,r16,805a74 <___vfprintf_internal_r+0x1568>
  804914:	dc800e17 	ldw	r18,56(sp)
  804918:	dc400d17 	ldw	r17,52(sp)
  80491c:	1027883a 	mov	r19,r2
  804920:	070020b4 	movhi	fp,130
  804924:	e734ef84 	addi	fp,fp,-11330
  804928:	050001c4 	movi	r20,7
  80492c:	00000306 	br	80493c <___vfprintf_internal_r+0x430>
  804930:	843ffc04 	addi	r16,r16,-16
  804934:	ad400204 	addi	r21,r21,8
  804938:	9c00130e 	bge	r19,r16,804988 <___vfprintf_internal_r+0x47c>
  80493c:	94800404 	addi	r18,r18,16
  804940:	8c400044 	addi	r17,r17,1
  804944:	af000015 	stw	fp,0(r21)
  804948:	acc00115 	stw	r19,4(r21)
  80494c:	dc800e15 	stw	r18,56(sp)
  804950:	dc400d15 	stw	r17,52(sp)
  804954:	a47ff60e 	bge	r20,r17,804930 <___vfprintf_internal_r+0x424>
  804958:	d9014f17 	ldw	r4,1340(sp)
  80495c:	b00b883a 	mov	r5,r22
  804960:	d9800c04 	addi	r6,sp,48
  804964:	d9c15115 	stw	r7,1348(sp)
  804968:	08044b40 	call	8044b4 <__sprint_r>
  80496c:	d9c15117 	ldw	r7,1348(sp)
  804970:	10009e1e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  804974:	843ffc04 	addi	r16,r16,-16
  804978:	dc800e17 	ldw	r18,56(sp)
  80497c:	dc400d17 	ldw	r17,52(sp)
  804980:	dd401904 	addi	r21,sp,100
  804984:	9c3fed16 	blt	r19,r16,80493c <___vfprintf_internal_r+0x430>
  804988:	9425883a 	add	r18,r18,r16
  80498c:	8c400044 	addi	r17,r17,1
  804990:	008001c4 	movi	r2,7
  804994:	af000015 	stw	fp,0(r21)
  804998:	ac000115 	stw	r16,4(r21)
  80499c:	dc800e15 	stw	r18,56(sp)
  8049a0:	dc400d15 	stw	r17,52(sp)
  8049a4:	1441f516 	blt	r2,r17,80517c <___vfprintf_internal_r+0xc70>
  8049a8:	ad400204 	addi	r21,r21,8
  8049ac:	00000206 	br	8049b8 <___vfprintf_internal_r+0x4ac>
  8049b0:	dc800e17 	ldw	r18,56(sp)
  8049b4:	dc400d17 	ldw	r17,52(sp)
  8049b8:	d8800407 	ldb	r2,16(sp)
  8049bc:	10000b26 	beq	r2,zero,8049ec <___vfprintf_internal_r+0x4e0>
  8049c0:	00800044 	movi	r2,1
  8049c4:	94800044 	addi	r18,r18,1
  8049c8:	8c400044 	addi	r17,r17,1
  8049cc:	a8800115 	stw	r2,4(r21)
  8049d0:	d8c00404 	addi	r3,sp,16
  8049d4:	008001c4 	movi	r2,7
  8049d8:	a8c00015 	stw	r3,0(r21)
  8049dc:	dc800e15 	stw	r18,56(sp)
  8049e0:	dc400d15 	stw	r17,52(sp)
  8049e4:	1441da16 	blt	r2,r17,805150 <___vfprintf_internal_r+0xc44>
  8049e8:	ad400204 	addi	r21,r21,8
  8049ec:	d9015017 	ldw	r4,1344(sp)
  8049f0:	20000b1e 	bne	r4,zero,804a20 <___vfprintf_internal_r+0x514>
  8049f4:	d8800444 	addi	r2,sp,17
  8049f8:	94800084 	addi	r18,r18,2
  8049fc:	8c400044 	addi	r17,r17,1
  804a00:	a8800015 	stw	r2,0(r21)
  804a04:	00c00084 	movi	r3,2
  804a08:	008001c4 	movi	r2,7
  804a0c:	a8c00115 	stw	r3,4(r21)
  804a10:	dc800e15 	stw	r18,56(sp)
  804a14:	dc400d15 	stw	r17,52(sp)
  804a18:	1441c216 	blt	r2,r17,805124 <___vfprintf_internal_r+0xc18>
  804a1c:	ad400204 	addi	r21,r21,8
  804a20:	d9414e17 	ldw	r5,1336(sp)
  804a24:	00802004 	movi	r2,128
  804a28:	2880b126 	beq	r5,r2,804cf0 <___vfprintf_internal_r+0x7e4>
  804a2c:	d8c14617 	ldw	r3,1304(sp)
  804a30:	19e1c83a 	sub	r16,r3,r7
  804a34:	0400260e 	bge	zero,r16,804ad0 <___vfprintf_internal_r+0x5c4>
  804a38:	00800404 	movi	r2,16
  804a3c:	1403c90e 	bge	r2,r16,805964 <___vfprintf_internal_r+0x1458>
  804a40:	1027883a 	mov	r19,r2
  804a44:	070020b4 	movhi	fp,130
  804a48:	e734eb84 	addi	fp,fp,-11346
  804a4c:	050001c4 	movi	r20,7
  804a50:	00000306 	br	804a60 <___vfprintf_internal_r+0x554>
  804a54:	843ffc04 	addi	r16,r16,-16
  804a58:	ad400204 	addi	r21,r21,8
  804a5c:	9c00130e 	bge	r19,r16,804aac <___vfprintf_internal_r+0x5a0>
  804a60:	94800404 	addi	r18,r18,16
  804a64:	8c400044 	addi	r17,r17,1
  804a68:	af000015 	stw	fp,0(r21)
  804a6c:	acc00115 	stw	r19,4(r21)
  804a70:	dc800e15 	stw	r18,56(sp)
  804a74:	dc400d15 	stw	r17,52(sp)
  804a78:	a47ff60e 	bge	r20,r17,804a54 <___vfprintf_internal_r+0x548>
  804a7c:	d9014f17 	ldw	r4,1340(sp)
  804a80:	b00b883a 	mov	r5,r22
  804a84:	d9800c04 	addi	r6,sp,48
  804a88:	d9c15115 	stw	r7,1348(sp)
  804a8c:	08044b40 	call	8044b4 <__sprint_r>
  804a90:	d9c15117 	ldw	r7,1348(sp)
  804a94:	1000551e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  804a98:	843ffc04 	addi	r16,r16,-16
  804a9c:	dc800e17 	ldw	r18,56(sp)
  804aa0:	dc400d17 	ldw	r17,52(sp)
  804aa4:	dd401904 	addi	r21,sp,100
  804aa8:	9c3fed16 	blt	r19,r16,804a60 <___vfprintf_internal_r+0x554>
  804aac:	9425883a 	add	r18,r18,r16
  804ab0:	8c400044 	addi	r17,r17,1
  804ab4:	008001c4 	movi	r2,7
  804ab8:	af000015 	stw	fp,0(r21)
  804abc:	ac000115 	stw	r16,4(r21)
  804ac0:	dc800e15 	stw	r18,56(sp)
  804ac4:	dc400d15 	stw	r17,52(sp)
  804ac8:	14418216 	blt	r2,r17,8050d4 <___vfprintf_internal_r+0xbc8>
  804acc:	ad400204 	addi	r21,r21,8
  804ad0:	d9014c17 	ldw	r4,1328(sp)
  804ad4:	2080400c 	andi	r2,r4,256
  804ad8:	10004a1e 	bne	r2,zero,804c04 <___vfprintf_internal_r+0x6f8>
  804adc:	d9414117 	ldw	r5,1284(sp)
  804ae0:	91e5883a 	add	r18,r18,r7
  804ae4:	8c400044 	addi	r17,r17,1
  804ae8:	008001c4 	movi	r2,7
  804aec:	a9400015 	stw	r5,0(r21)
  804af0:	a9c00115 	stw	r7,4(r21)
  804af4:	dc800e15 	stw	r18,56(sp)
  804af8:	dc400d15 	stw	r17,52(sp)
  804afc:	14416716 	blt	r2,r17,80509c <___vfprintf_internal_r+0xb90>
  804b00:	a8c00204 	addi	r3,r21,8
  804b04:	d9814c17 	ldw	r6,1328(sp)
  804b08:	3080010c 	andi	r2,r6,4
  804b0c:	10002826 	beq	r2,zero,804bb0 <___vfprintf_internal_r+0x6a4>
  804b10:	d8814a17 	ldw	r2,1320(sp)
  804b14:	d9014517 	ldw	r4,1300(sp)
  804b18:	1121c83a 	sub	r16,r2,r4
  804b1c:	0400240e 	bge	zero,r16,804bb0 <___vfprintf_internal_r+0x6a4>
  804b20:	00800404 	movi	r2,16
  804b24:	14044f0e 	bge	r2,r16,805c64 <___vfprintf_internal_r+0x1758>
  804b28:	dc400d17 	ldw	r17,52(sp)
  804b2c:	1027883a 	mov	r19,r2
  804b30:	070020b4 	movhi	fp,130
  804b34:	e734ef84 	addi	fp,fp,-11330
  804b38:	050001c4 	movi	r20,7
  804b3c:	00000306 	br	804b4c <___vfprintf_internal_r+0x640>
  804b40:	843ffc04 	addi	r16,r16,-16
  804b44:	18c00204 	addi	r3,r3,8
  804b48:	9c00110e 	bge	r19,r16,804b90 <___vfprintf_internal_r+0x684>
  804b4c:	94800404 	addi	r18,r18,16
  804b50:	8c400044 	addi	r17,r17,1
  804b54:	1f000015 	stw	fp,0(r3)
  804b58:	1cc00115 	stw	r19,4(r3)
  804b5c:	dc800e15 	stw	r18,56(sp)
  804b60:	dc400d15 	stw	r17,52(sp)
  804b64:	a47ff60e 	bge	r20,r17,804b40 <___vfprintf_internal_r+0x634>
  804b68:	d9014f17 	ldw	r4,1340(sp)
  804b6c:	b00b883a 	mov	r5,r22
  804b70:	d9800c04 	addi	r6,sp,48
  804b74:	08044b40 	call	8044b4 <__sprint_r>
  804b78:	10001c1e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  804b7c:	843ffc04 	addi	r16,r16,-16
  804b80:	dc800e17 	ldw	r18,56(sp)
  804b84:	dc400d17 	ldw	r17,52(sp)
  804b88:	d8c01904 	addi	r3,sp,100
  804b8c:	9c3fef16 	blt	r19,r16,804b4c <___vfprintf_internal_r+0x640>
  804b90:	9425883a 	add	r18,r18,r16
  804b94:	8c400044 	addi	r17,r17,1
  804b98:	008001c4 	movi	r2,7
  804b9c:	1f000015 	stw	fp,0(r3)
  804ba0:	1c000115 	stw	r16,4(r3)
  804ba4:	dc800e15 	stw	r18,56(sp)
  804ba8:	dc400d15 	stw	r17,52(sp)
  804bac:	1440cb16 	blt	r2,r17,804edc <___vfprintf_internal_r+0x9d0>
  804bb0:	d8814a17 	ldw	r2,1320(sp)
  804bb4:	d9414517 	ldw	r5,1300(sp)
  804bb8:	1140010e 	bge	r2,r5,804bc0 <___vfprintf_internal_r+0x6b4>
  804bbc:	2805883a 	mov	r2,r5
  804bc0:	d9814b17 	ldw	r6,1324(sp)
  804bc4:	308d883a 	add	r6,r6,r2
  804bc8:	d9814b15 	stw	r6,1324(sp)
  804bcc:	90013b1e 	bne	r18,zero,8050bc <___vfprintf_internal_r+0xbb0>
  804bd0:	d9c14017 	ldw	r7,1280(sp)
  804bd4:	dd401904 	addi	r21,sp,100
  804bd8:	d8000d15 	stw	zero,52(sp)
  804bdc:	003ea706 	br	80467c <___vfprintf_internal_r+0x170>
  804be0:	d8800e17 	ldw	r2,56(sp)
  804be4:	10053f1e 	bne	r2,zero,8060e4 <___vfprintf_internal_r+0x1bd8>
  804be8:	d8000d15 	stw	zero,52(sp)
  804bec:	b080030b 	ldhu	r2,12(r22)
  804bf0:	1080100c 	andi	r2,r2,64
  804bf4:	103e8726 	beq	r2,zero,804614 <___vfprintf_internal_r+0x108>
  804bf8:	00bfffc4 	movi	r2,-1
  804bfc:	d8814b15 	stw	r2,1324(sp)
  804c00:	003e8406 	br	804614 <___vfprintf_internal_r+0x108>
  804c04:	d9814d17 	ldw	r6,1332(sp)
  804c08:	00801944 	movi	r2,101
  804c0c:	11806e16 	blt	r2,r6,804dc8 <___vfprintf_internal_r+0x8bc>
  804c10:	d9414717 	ldw	r5,1308(sp)
  804c14:	00c00044 	movi	r3,1
  804c18:	1943430e 	bge	r3,r5,805928 <___vfprintf_internal_r+0x141c>
  804c1c:	d8814117 	ldw	r2,1284(sp)
  804c20:	94800044 	addi	r18,r18,1
  804c24:	8c400044 	addi	r17,r17,1
  804c28:	a8800015 	stw	r2,0(r21)
  804c2c:	008001c4 	movi	r2,7
  804c30:	a8c00115 	stw	r3,4(r21)
  804c34:	dc800e15 	stw	r18,56(sp)
  804c38:	dc400d15 	stw	r17,52(sp)
  804c3c:	1441ca16 	blt	r2,r17,805368 <___vfprintf_internal_r+0xe5c>
  804c40:	a8c00204 	addi	r3,r21,8
  804c44:	d9014917 	ldw	r4,1316(sp)
  804c48:	00800044 	movi	r2,1
  804c4c:	94800044 	addi	r18,r18,1
  804c50:	8c400044 	addi	r17,r17,1
  804c54:	18800115 	stw	r2,4(r3)
  804c58:	008001c4 	movi	r2,7
  804c5c:	19000015 	stw	r4,0(r3)
  804c60:	dc800e15 	stw	r18,56(sp)
  804c64:	dc400d15 	stw	r17,52(sp)
  804c68:	1441b616 	blt	r2,r17,805344 <___vfprintf_internal_r+0xe38>
  804c6c:	1cc00204 	addi	r19,r3,8
  804c70:	d9014217 	ldw	r4,1288(sp)
  804c74:	d9414317 	ldw	r5,1292(sp)
  804c78:	000d883a 	mov	r6,zero
  804c7c:	000f883a 	mov	r7,zero
  804c80:	080c20c0 	call	80c20c <__nedf2>
  804c84:	10017426 	beq	r2,zero,805258 <___vfprintf_internal_r+0xd4c>
  804c88:	d9414717 	ldw	r5,1308(sp)
  804c8c:	d9814117 	ldw	r6,1284(sp)
  804c90:	8c400044 	addi	r17,r17,1
  804c94:	2c85883a 	add	r2,r5,r18
  804c98:	14bfffc4 	addi	r18,r2,-1
  804c9c:	28bfffc4 	addi	r2,r5,-1
  804ca0:	30c00044 	addi	r3,r6,1
  804ca4:	98800115 	stw	r2,4(r19)
  804ca8:	008001c4 	movi	r2,7
  804cac:	98c00015 	stw	r3,0(r19)
  804cb0:	dc800e15 	stw	r18,56(sp)
  804cb4:	dc400d15 	stw	r17,52(sp)
  804cb8:	14418e16 	blt	r2,r17,8052f4 <___vfprintf_internal_r+0xde8>
  804cbc:	9cc00204 	addi	r19,r19,8
  804cc0:	d9414817 	ldw	r5,1312(sp)
  804cc4:	d8800804 	addi	r2,sp,32
  804cc8:	8c400044 	addi	r17,r17,1
  804ccc:	9165883a 	add	r18,r18,r5
  804cd0:	98800015 	stw	r2,0(r19)
  804cd4:	008001c4 	movi	r2,7
  804cd8:	99400115 	stw	r5,4(r19)
  804cdc:	dc800e15 	stw	r18,56(sp)
  804ce0:	dc400d15 	stw	r17,52(sp)
  804ce4:	1440ed16 	blt	r2,r17,80509c <___vfprintf_internal_r+0xb90>
  804ce8:	98c00204 	addi	r3,r19,8
  804cec:	003f8506 	br	804b04 <___vfprintf_internal_r+0x5f8>
  804cf0:	d9814a17 	ldw	r6,1320(sp)
  804cf4:	d8814517 	ldw	r2,1300(sp)
  804cf8:	30a1c83a 	sub	r16,r6,r2
  804cfc:	043f4b0e 	bge	zero,r16,804a2c <___vfprintf_internal_r+0x520>
  804d00:	00800404 	movi	r2,16
  804d04:	1404340e 	bge	r2,r16,805dd8 <___vfprintf_internal_r+0x18cc>
  804d08:	1027883a 	mov	r19,r2
  804d0c:	070020b4 	movhi	fp,130
  804d10:	e734eb84 	addi	fp,fp,-11346
  804d14:	050001c4 	movi	r20,7
  804d18:	00000306 	br	804d28 <___vfprintf_internal_r+0x81c>
  804d1c:	843ffc04 	addi	r16,r16,-16
  804d20:	ad400204 	addi	r21,r21,8
  804d24:	9c00130e 	bge	r19,r16,804d74 <___vfprintf_internal_r+0x868>
  804d28:	94800404 	addi	r18,r18,16
  804d2c:	8c400044 	addi	r17,r17,1
  804d30:	af000015 	stw	fp,0(r21)
  804d34:	acc00115 	stw	r19,4(r21)
  804d38:	dc800e15 	stw	r18,56(sp)
  804d3c:	dc400d15 	stw	r17,52(sp)
  804d40:	a47ff60e 	bge	r20,r17,804d1c <___vfprintf_internal_r+0x810>
  804d44:	d9014f17 	ldw	r4,1340(sp)
  804d48:	b00b883a 	mov	r5,r22
  804d4c:	d9800c04 	addi	r6,sp,48
  804d50:	d9c15115 	stw	r7,1348(sp)
  804d54:	08044b40 	call	8044b4 <__sprint_r>
  804d58:	d9c15117 	ldw	r7,1348(sp)
  804d5c:	103fa31e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  804d60:	843ffc04 	addi	r16,r16,-16
  804d64:	dc800e17 	ldw	r18,56(sp)
  804d68:	dc400d17 	ldw	r17,52(sp)
  804d6c:	dd401904 	addi	r21,sp,100
  804d70:	9c3fed16 	blt	r19,r16,804d28 <___vfprintf_internal_r+0x81c>
  804d74:	9425883a 	add	r18,r18,r16
  804d78:	8c400044 	addi	r17,r17,1
  804d7c:	008001c4 	movi	r2,7
  804d80:	af000015 	stw	fp,0(r21)
  804d84:	ac000115 	stw	r16,4(r21)
  804d88:	dc800e15 	stw	r18,56(sp)
  804d8c:	dc400d15 	stw	r17,52(sp)
  804d90:	14416116 	blt	r2,r17,805318 <___vfprintf_internal_r+0xe0c>
  804d94:	ad400204 	addi	r21,r21,8
  804d98:	003f2406 	br	804a2c <___vfprintf_internal_r+0x520>
  804d9c:	d9014f17 	ldw	r4,1340(sp)
  804da0:	0807f7c0 	call	807f7c <__sinit>
  804da4:	d9c15117 	ldw	r7,1348(sp)
  804da8:	003def06 	br	804568 <___vfprintf_internal_r+0x5c>
  804dac:	d9014f17 	ldw	r4,1340(sp)
  804db0:	b00b883a 	mov	r5,r22
  804db4:	d9c15115 	stw	r7,1348(sp)
  804db8:	08063dc0 	call	8063dc <__swsetup_r>
  804dbc:	d9c15117 	ldw	r7,1348(sp)
  804dc0:	103dee26 	beq	r2,zero,80457c <___vfprintf_internal_r+0x70>
  804dc4:	003f8c06 	br	804bf8 <___vfprintf_internal_r+0x6ec>
  804dc8:	d9014217 	ldw	r4,1288(sp)
  804dcc:	d9414317 	ldw	r5,1292(sp)
  804dd0:	000d883a 	mov	r6,zero
  804dd4:	000f883a 	mov	r7,zero
  804dd8:	080c1840 	call	80c184 <__eqdf2>
  804ddc:	1000f21e 	bne	r2,zero,8051a8 <___vfprintf_internal_r+0xc9c>
  804de0:	008020b4 	movhi	r2,130
  804de4:	10b4eb04 	addi	r2,r2,-11348
  804de8:	94800044 	addi	r18,r18,1
  804dec:	8c400044 	addi	r17,r17,1
  804df0:	a8800015 	stw	r2,0(r21)
  804df4:	00c00044 	movi	r3,1
  804df8:	008001c4 	movi	r2,7
  804dfc:	a8c00115 	stw	r3,4(r21)
  804e00:	dc800e15 	stw	r18,56(sp)
  804e04:	dc400d15 	stw	r17,52(sp)
  804e08:	1442fa16 	blt	r2,r17,8059f4 <___vfprintf_internal_r+0x14e8>
  804e0c:	a8c00204 	addi	r3,r21,8
  804e10:	d8800517 	ldw	r2,20(sp)
  804e14:	d9014717 	ldw	r4,1308(sp)
  804e18:	11015c0e 	bge	r2,r4,80538c <___vfprintf_internal_r+0xe80>
  804e1c:	dc400d17 	ldw	r17,52(sp)
  804e20:	d9814917 	ldw	r6,1316(sp)
  804e24:	00800044 	movi	r2,1
  804e28:	94800044 	addi	r18,r18,1
  804e2c:	8c400044 	addi	r17,r17,1
  804e30:	18800115 	stw	r2,4(r3)
  804e34:	008001c4 	movi	r2,7
  804e38:	19800015 	stw	r6,0(r3)
  804e3c:	dc800e15 	stw	r18,56(sp)
  804e40:	dc400d15 	stw	r17,52(sp)
  804e44:	14431016 	blt	r2,r17,805a88 <___vfprintf_internal_r+0x157c>
  804e48:	18c00204 	addi	r3,r3,8
  804e4c:	d8814717 	ldw	r2,1308(sp)
  804e50:	143fffc4 	addi	r16,r2,-1
  804e54:	043f2b0e 	bge	zero,r16,804b04 <___vfprintf_internal_r+0x5f8>
  804e58:	00800404 	movi	r2,16
  804e5c:	1402a20e 	bge	r2,r16,8058e8 <___vfprintf_internal_r+0x13dc>
  804e60:	dc400d17 	ldw	r17,52(sp)
  804e64:	1027883a 	mov	r19,r2
  804e68:	070020b4 	movhi	fp,130
  804e6c:	e734eb84 	addi	fp,fp,-11346
  804e70:	050001c4 	movi	r20,7
  804e74:	00000306 	br	804e84 <___vfprintf_internal_r+0x978>
  804e78:	18c00204 	addi	r3,r3,8
  804e7c:	843ffc04 	addi	r16,r16,-16
  804e80:	9c029c0e 	bge	r19,r16,8058f4 <___vfprintf_internal_r+0x13e8>
  804e84:	94800404 	addi	r18,r18,16
  804e88:	8c400044 	addi	r17,r17,1
  804e8c:	1f000015 	stw	fp,0(r3)
  804e90:	1cc00115 	stw	r19,4(r3)
  804e94:	dc800e15 	stw	r18,56(sp)
  804e98:	dc400d15 	stw	r17,52(sp)
  804e9c:	a47ff60e 	bge	r20,r17,804e78 <___vfprintf_internal_r+0x96c>
  804ea0:	d9014f17 	ldw	r4,1340(sp)
  804ea4:	b00b883a 	mov	r5,r22
  804ea8:	d9800c04 	addi	r6,sp,48
  804eac:	08044b40 	call	8044b4 <__sprint_r>
  804eb0:	103f4e1e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  804eb4:	dc800e17 	ldw	r18,56(sp)
  804eb8:	dc400d17 	ldw	r17,52(sp)
  804ebc:	d8c01904 	addi	r3,sp,100
  804ec0:	003fee06 	br	804e7c <___vfprintf_internal_r+0x970>
  804ec4:	d8802c0b 	ldhu	r2,176(sp)
  804ec8:	00ffffc4 	movi	r3,-1
  804ecc:	d8c14b15 	stw	r3,1324(sp)
  804ed0:	1080100c 	andi	r2,r2,64
  804ed4:	103dcc1e 	bne	r2,zero,804608 <___vfprintf_internal_r+0xfc>
  804ed8:	003dce06 	br	804614 <___vfprintf_internal_r+0x108>
  804edc:	d9014f17 	ldw	r4,1340(sp)
  804ee0:	b00b883a 	mov	r5,r22
  804ee4:	d9800c04 	addi	r6,sp,48
  804ee8:	08044b40 	call	8044b4 <__sprint_r>
  804eec:	103f3f1e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  804ef0:	dc800e17 	ldw	r18,56(sp)
  804ef4:	003f2e06 	br	804bb0 <___vfprintf_internal_r+0x6a4>
  804ef8:	d9414c17 	ldw	r5,1328(sp)
  804efc:	29400414 	ori	r5,r5,16
  804f00:	d9414c15 	stw	r5,1328(sp)
  804f04:	d9814c17 	ldw	r6,1328(sp)
  804f08:	3080080c 	andi	r2,r6,32
  804f0c:	10014f1e 	bne	r2,zero,80544c <___vfprintf_internal_r+0xf40>
  804f10:	d8c14c17 	ldw	r3,1328(sp)
  804f14:	1880040c 	andi	r2,r3,16
  804f18:	1002ea1e 	bne	r2,zero,805ac4 <___vfprintf_internal_r+0x15b8>
  804f1c:	d9014c17 	ldw	r4,1328(sp)
  804f20:	2080100c 	andi	r2,r4,64
  804f24:	1002e726 	beq	r2,zero,805ac4 <___vfprintf_internal_r+0x15b8>
  804f28:	3880000f 	ldh	r2,0(r7)
  804f2c:	39c00104 	addi	r7,r7,4
  804f30:	d9c14015 	stw	r7,1280(sp)
  804f34:	1023d7fa 	srai	r17,r2,31
  804f38:	1021883a 	mov	r16,r2
  804f3c:	88037216 	blt	r17,zero,805d08 <___vfprintf_internal_r+0x17fc>
  804f40:	01000044 	movi	r4,1
  804f44:	98000416 	blt	r19,zero,804f58 <___vfprintf_internal_r+0xa4c>
  804f48:	d8c14c17 	ldw	r3,1328(sp)
  804f4c:	00bfdfc4 	movi	r2,-129
  804f50:	1886703a 	and	r3,r3,r2
  804f54:	d8c14c15 	stw	r3,1328(sp)
  804f58:	8444b03a 	or	r2,r16,r17
  804f5c:	1002261e 	bne	r2,zero,8057f8 <___vfprintf_internal_r+0x12ec>
  804f60:	9802251e 	bne	r19,zero,8057f8 <___vfprintf_internal_r+0x12ec>
  804f64:	20803fcc 	andi	r2,r4,255
  804f68:	10029b26 	beq	r2,zero,8059d8 <___vfprintf_internal_r+0x14cc>
  804f6c:	d8c01904 	addi	r3,sp,100
  804f70:	dd000f04 	addi	r20,sp,60
  804f74:	d8c14115 	stw	r3,1284(sp)
  804f78:	d8c14117 	ldw	r3,1284(sp)
  804f7c:	dcc14515 	stw	r19,1300(sp)
  804f80:	a0c5c83a 	sub	r2,r20,r3
  804f84:	11c00a04 	addi	r7,r2,40
  804f88:	99c0010e 	bge	r19,r7,804f90 <___vfprintf_internal_r+0xa84>
  804f8c:	d9c14515 	stw	r7,1300(sp)
  804f90:	dcc14615 	stw	r19,1304(sp)
  804f94:	d8800407 	ldb	r2,16(sp)
  804f98:	103e4c26 	beq	r2,zero,8048cc <___vfprintf_internal_r+0x3c0>
  804f9c:	d8814517 	ldw	r2,1300(sp)
  804fa0:	10800044 	addi	r2,r2,1
  804fa4:	d8814515 	stw	r2,1300(sp)
  804fa8:	003e4806 	br	8048cc <___vfprintf_internal_r+0x3c0>
  804fac:	d9814c17 	ldw	r6,1328(sp)
  804fb0:	31800414 	ori	r6,r6,16
  804fb4:	d9814c15 	stw	r6,1328(sp)
  804fb8:	d8c14c17 	ldw	r3,1328(sp)
  804fbc:	1880080c 	andi	r2,r3,32
  804fc0:	1001271e 	bne	r2,zero,805460 <___vfprintf_internal_r+0xf54>
  804fc4:	d9414c17 	ldw	r5,1328(sp)
  804fc8:	2880040c 	andi	r2,r5,16
  804fcc:	1002b61e 	bne	r2,zero,805aa8 <___vfprintf_internal_r+0x159c>
  804fd0:	d9814c17 	ldw	r6,1328(sp)
  804fd4:	3080100c 	andi	r2,r6,64
  804fd8:	1002b326 	beq	r2,zero,805aa8 <___vfprintf_internal_r+0x159c>
  804fdc:	3c00000b 	ldhu	r16,0(r7)
  804fe0:	0009883a 	mov	r4,zero
  804fe4:	39c00104 	addi	r7,r7,4
  804fe8:	0023883a 	mov	r17,zero
  804fec:	d9c14015 	stw	r7,1280(sp)
  804ff0:	d8000405 	stb	zero,16(sp)
  804ff4:	003fd306 	br	804f44 <___vfprintf_internal_r+0xa38>
  804ff8:	d9014c17 	ldw	r4,1328(sp)
  804ffc:	21000414 	ori	r4,r4,16
  805000:	d9014c15 	stw	r4,1328(sp)
  805004:	d9414c17 	ldw	r5,1328(sp)
  805008:	2880080c 	andi	r2,r5,32
  80500c:	1001081e 	bne	r2,zero,805430 <___vfprintf_internal_r+0xf24>
  805010:	d8c14c17 	ldw	r3,1328(sp)
  805014:	1880040c 	andi	r2,r3,16
  805018:	1002b01e 	bne	r2,zero,805adc <___vfprintf_internal_r+0x15d0>
  80501c:	d9014c17 	ldw	r4,1328(sp)
  805020:	2080100c 	andi	r2,r4,64
  805024:	1002ad26 	beq	r2,zero,805adc <___vfprintf_internal_r+0x15d0>
  805028:	3c00000b 	ldhu	r16,0(r7)
  80502c:	01000044 	movi	r4,1
  805030:	39c00104 	addi	r7,r7,4
  805034:	0023883a 	mov	r17,zero
  805038:	d9c14015 	stw	r7,1280(sp)
  80503c:	d8000405 	stb	zero,16(sp)
  805040:	003fc006 	br	804f44 <___vfprintf_internal_r+0xa38>
  805044:	d9014f17 	ldw	r4,1340(sp)
  805048:	b00b883a 	mov	r5,r22
  80504c:	d9800c04 	addi	r6,sp,48
  805050:	08044b40 	call	8044b4 <__sprint_r>
  805054:	103ee51e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805058:	dc800e17 	ldw	r18,56(sp)
  80505c:	d8c01904 	addi	r3,sp,100
  805060:	d9814c17 	ldw	r6,1328(sp)
  805064:	3080004c 	andi	r2,r6,1
  805068:	1005003a 	cmpeq	r2,r2,zero
  80506c:	103ea51e 	bne	r2,zero,804b04 <___vfprintf_internal_r+0x5f8>
  805070:	00800044 	movi	r2,1
  805074:	dc400d17 	ldw	r17,52(sp)
  805078:	18800115 	stw	r2,4(r3)
  80507c:	d8814917 	ldw	r2,1316(sp)
  805080:	94800044 	addi	r18,r18,1
  805084:	8c400044 	addi	r17,r17,1
  805088:	18800015 	stw	r2,0(r3)
  80508c:	008001c4 	movi	r2,7
  805090:	dc800e15 	stw	r18,56(sp)
  805094:	dc400d15 	stw	r17,52(sp)
  805098:	14421e0e 	bge	r2,r17,805914 <___vfprintf_internal_r+0x1408>
  80509c:	d9014f17 	ldw	r4,1340(sp)
  8050a0:	b00b883a 	mov	r5,r22
  8050a4:	d9800c04 	addi	r6,sp,48
  8050a8:	08044b40 	call	8044b4 <__sprint_r>
  8050ac:	103ecf1e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  8050b0:	dc800e17 	ldw	r18,56(sp)
  8050b4:	d8c01904 	addi	r3,sp,100
  8050b8:	003e9206 	br	804b04 <___vfprintf_internal_r+0x5f8>
  8050bc:	d9014f17 	ldw	r4,1340(sp)
  8050c0:	b00b883a 	mov	r5,r22
  8050c4:	d9800c04 	addi	r6,sp,48
  8050c8:	08044b40 	call	8044b4 <__sprint_r>
  8050cc:	103ec026 	beq	r2,zero,804bd0 <___vfprintf_internal_r+0x6c4>
  8050d0:	003ec606 	br	804bec <___vfprintf_internal_r+0x6e0>
  8050d4:	d9014f17 	ldw	r4,1340(sp)
  8050d8:	b00b883a 	mov	r5,r22
  8050dc:	d9800c04 	addi	r6,sp,48
  8050e0:	d9c15115 	stw	r7,1348(sp)
  8050e4:	08044b40 	call	8044b4 <__sprint_r>
  8050e8:	d9c15117 	ldw	r7,1348(sp)
  8050ec:	103ebf1e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  8050f0:	dc800e17 	ldw	r18,56(sp)
  8050f4:	dc400d17 	ldw	r17,52(sp)
  8050f8:	dd401904 	addi	r21,sp,100
  8050fc:	003e7406 	br	804ad0 <___vfprintf_internal_r+0x5c4>
  805100:	d9014f17 	ldw	r4,1340(sp)
  805104:	b00b883a 	mov	r5,r22
  805108:	d9800c04 	addi	r6,sp,48
  80510c:	d9c15115 	stw	r7,1348(sp)
  805110:	08044b40 	call	8044b4 <__sprint_r>
  805114:	d9c15117 	ldw	r7,1348(sp)
  805118:	103eb41e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  80511c:	dd401904 	addi	r21,sp,100
  805120:	003d6d06 	br	8046d8 <___vfprintf_internal_r+0x1cc>
  805124:	d9014f17 	ldw	r4,1340(sp)
  805128:	b00b883a 	mov	r5,r22
  80512c:	d9800c04 	addi	r6,sp,48
  805130:	d9c15115 	stw	r7,1348(sp)
  805134:	08044b40 	call	8044b4 <__sprint_r>
  805138:	d9c15117 	ldw	r7,1348(sp)
  80513c:	103eab1e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805140:	dc800e17 	ldw	r18,56(sp)
  805144:	dc400d17 	ldw	r17,52(sp)
  805148:	dd401904 	addi	r21,sp,100
  80514c:	003e3406 	br	804a20 <___vfprintf_internal_r+0x514>
  805150:	d9014f17 	ldw	r4,1340(sp)
  805154:	b00b883a 	mov	r5,r22
  805158:	d9800c04 	addi	r6,sp,48
  80515c:	d9c15115 	stw	r7,1348(sp)
  805160:	08044b40 	call	8044b4 <__sprint_r>
  805164:	d9c15117 	ldw	r7,1348(sp)
  805168:	103ea01e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  80516c:	dc800e17 	ldw	r18,56(sp)
  805170:	dc400d17 	ldw	r17,52(sp)
  805174:	dd401904 	addi	r21,sp,100
  805178:	003e1c06 	br	8049ec <___vfprintf_internal_r+0x4e0>
  80517c:	d9014f17 	ldw	r4,1340(sp)
  805180:	b00b883a 	mov	r5,r22
  805184:	d9800c04 	addi	r6,sp,48
  805188:	d9c15115 	stw	r7,1348(sp)
  80518c:	08044b40 	call	8044b4 <__sprint_r>
  805190:	d9c15117 	ldw	r7,1348(sp)
  805194:	103e951e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805198:	dc800e17 	ldw	r18,56(sp)
  80519c:	dc400d17 	ldw	r17,52(sp)
  8051a0:	dd401904 	addi	r21,sp,100
  8051a4:	003e0406 	br	8049b8 <___vfprintf_internal_r+0x4ac>
  8051a8:	d9000517 	ldw	r4,20(sp)
  8051ac:	0102520e 	bge	zero,r4,805af8 <___vfprintf_internal_r+0x15ec>
  8051b0:	d9814717 	ldw	r6,1308(sp)
  8051b4:	21807a16 	blt	r4,r6,8053a0 <___vfprintf_internal_r+0xe94>
  8051b8:	d8814117 	ldw	r2,1284(sp)
  8051bc:	91a5883a 	add	r18,r18,r6
  8051c0:	8c400044 	addi	r17,r17,1
  8051c4:	a8800015 	stw	r2,0(r21)
  8051c8:	008001c4 	movi	r2,7
  8051cc:	a9800115 	stw	r6,4(r21)
  8051d0:	dc800e15 	stw	r18,56(sp)
  8051d4:	dc400d15 	stw	r17,52(sp)
  8051d8:	1442f616 	blt	r2,r17,805db4 <___vfprintf_internal_r+0x18a8>
  8051dc:	a8c00204 	addi	r3,r21,8
  8051e0:	d9414717 	ldw	r5,1308(sp)
  8051e4:	2161c83a 	sub	r16,r4,r5
  8051e8:	043f9d0e 	bge	zero,r16,805060 <___vfprintf_internal_r+0xb54>
  8051ec:	00800404 	movi	r2,16
  8051f0:	1402130e 	bge	r2,r16,805a40 <___vfprintf_internal_r+0x1534>
  8051f4:	dc400d17 	ldw	r17,52(sp)
  8051f8:	1027883a 	mov	r19,r2
  8051fc:	070020b4 	movhi	fp,130
  805200:	e734eb84 	addi	fp,fp,-11346
  805204:	050001c4 	movi	r20,7
  805208:	00000306 	br	805218 <___vfprintf_internal_r+0xd0c>
  80520c:	18c00204 	addi	r3,r3,8
  805210:	843ffc04 	addi	r16,r16,-16
  805214:	9c020d0e 	bge	r19,r16,805a4c <___vfprintf_internal_r+0x1540>
  805218:	94800404 	addi	r18,r18,16
  80521c:	8c400044 	addi	r17,r17,1
  805220:	1f000015 	stw	fp,0(r3)
  805224:	1cc00115 	stw	r19,4(r3)
  805228:	dc800e15 	stw	r18,56(sp)
  80522c:	dc400d15 	stw	r17,52(sp)
  805230:	a47ff60e 	bge	r20,r17,80520c <___vfprintf_internal_r+0xd00>
  805234:	d9014f17 	ldw	r4,1340(sp)
  805238:	b00b883a 	mov	r5,r22
  80523c:	d9800c04 	addi	r6,sp,48
  805240:	08044b40 	call	8044b4 <__sprint_r>
  805244:	103e691e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805248:	dc800e17 	ldw	r18,56(sp)
  80524c:	dc400d17 	ldw	r17,52(sp)
  805250:	d8c01904 	addi	r3,sp,100
  805254:	003fee06 	br	805210 <___vfprintf_internal_r+0xd04>
  805258:	d8814717 	ldw	r2,1308(sp)
  80525c:	143fffc4 	addi	r16,r2,-1
  805260:	043e970e 	bge	zero,r16,804cc0 <___vfprintf_internal_r+0x7b4>
  805264:	00800404 	movi	r2,16
  805268:	1400180e 	bge	r2,r16,8052cc <___vfprintf_internal_r+0xdc0>
  80526c:	1029883a 	mov	r20,r2
  805270:	070020b4 	movhi	fp,130
  805274:	e734eb84 	addi	fp,fp,-11346
  805278:	054001c4 	movi	r21,7
  80527c:	00000306 	br	80528c <___vfprintf_internal_r+0xd80>
  805280:	9cc00204 	addi	r19,r19,8
  805284:	843ffc04 	addi	r16,r16,-16
  805288:	a400120e 	bge	r20,r16,8052d4 <___vfprintf_internal_r+0xdc8>
  80528c:	94800404 	addi	r18,r18,16
  805290:	8c400044 	addi	r17,r17,1
  805294:	9f000015 	stw	fp,0(r19)
  805298:	9d000115 	stw	r20,4(r19)
  80529c:	dc800e15 	stw	r18,56(sp)
  8052a0:	dc400d15 	stw	r17,52(sp)
  8052a4:	ac7ff60e 	bge	r21,r17,805280 <___vfprintf_internal_r+0xd74>
  8052a8:	d9014f17 	ldw	r4,1340(sp)
  8052ac:	b00b883a 	mov	r5,r22
  8052b0:	d9800c04 	addi	r6,sp,48
  8052b4:	08044b40 	call	8044b4 <__sprint_r>
  8052b8:	103e4c1e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  8052bc:	dc800e17 	ldw	r18,56(sp)
  8052c0:	dc400d17 	ldw	r17,52(sp)
  8052c4:	dcc01904 	addi	r19,sp,100
  8052c8:	003fee06 	br	805284 <___vfprintf_internal_r+0xd78>
  8052cc:	070020b4 	movhi	fp,130
  8052d0:	e734eb84 	addi	fp,fp,-11346
  8052d4:	9425883a 	add	r18,r18,r16
  8052d8:	8c400044 	addi	r17,r17,1
  8052dc:	008001c4 	movi	r2,7
  8052e0:	9f000015 	stw	fp,0(r19)
  8052e4:	9c000115 	stw	r16,4(r19)
  8052e8:	dc800e15 	stw	r18,56(sp)
  8052ec:	dc400d15 	stw	r17,52(sp)
  8052f0:	147e720e 	bge	r2,r17,804cbc <___vfprintf_internal_r+0x7b0>
  8052f4:	d9014f17 	ldw	r4,1340(sp)
  8052f8:	b00b883a 	mov	r5,r22
  8052fc:	d9800c04 	addi	r6,sp,48
  805300:	08044b40 	call	8044b4 <__sprint_r>
  805304:	103e391e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805308:	dc800e17 	ldw	r18,56(sp)
  80530c:	dc400d17 	ldw	r17,52(sp)
  805310:	dcc01904 	addi	r19,sp,100
  805314:	003e6a06 	br	804cc0 <___vfprintf_internal_r+0x7b4>
  805318:	d9014f17 	ldw	r4,1340(sp)
  80531c:	b00b883a 	mov	r5,r22
  805320:	d9800c04 	addi	r6,sp,48
  805324:	d9c15115 	stw	r7,1348(sp)
  805328:	08044b40 	call	8044b4 <__sprint_r>
  80532c:	d9c15117 	ldw	r7,1348(sp)
  805330:	103e2e1e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805334:	dc800e17 	ldw	r18,56(sp)
  805338:	dc400d17 	ldw	r17,52(sp)
  80533c:	dd401904 	addi	r21,sp,100
  805340:	003dba06 	br	804a2c <___vfprintf_internal_r+0x520>
  805344:	d9014f17 	ldw	r4,1340(sp)
  805348:	b00b883a 	mov	r5,r22
  80534c:	d9800c04 	addi	r6,sp,48
  805350:	08044b40 	call	8044b4 <__sprint_r>
  805354:	103e251e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805358:	dc800e17 	ldw	r18,56(sp)
  80535c:	dc400d17 	ldw	r17,52(sp)
  805360:	dcc01904 	addi	r19,sp,100
  805364:	003e4206 	br	804c70 <___vfprintf_internal_r+0x764>
  805368:	d9014f17 	ldw	r4,1340(sp)
  80536c:	b00b883a 	mov	r5,r22
  805370:	d9800c04 	addi	r6,sp,48
  805374:	08044b40 	call	8044b4 <__sprint_r>
  805378:	103e1c1e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  80537c:	dc800e17 	ldw	r18,56(sp)
  805380:	dc400d17 	ldw	r17,52(sp)
  805384:	d8c01904 	addi	r3,sp,100
  805388:	003e2e06 	br	804c44 <___vfprintf_internal_r+0x738>
  80538c:	d9414c17 	ldw	r5,1328(sp)
  805390:	2880004c 	andi	r2,r5,1
  805394:	1005003a 	cmpeq	r2,r2,zero
  805398:	103dda1e 	bne	r2,zero,804b04 <___vfprintf_internal_r+0x5f8>
  80539c:	003e9f06 	br	804e1c <___vfprintf_internal_r+0x910>
  8053a0:	d8c14117 	ldw	r3,1284(sp)
  8053a4:	9125883a 	add	r18,r18,r4
  8053a8:	8c400044 	addi	r17,r17,1
  8053ac:	008001c4 	movi	r2,7
  8053b0:	a8c00015 	stw	r3,0(r21)
  8053b4:	a9000115 	stw	r4,4(r21)
  8053b8:	dc800e15 	stw	r18,56(sp)
  8053bc:	dc400d15 	stw	r17,52(sp)
  8053c0:	14426616 	blt	r2,r17,805d5c <___vfprintf_internal_r+0x1850>
  8053c4:	a8c00204 	addi	r3,r21,8
  8053c8:	d9414917 	ldw	r5,1316(sp)
  8053cc:	00800044 	movi	r2,1
  8053d0:	94800044 	addi	r18,r18,1
  8053d4:	8c400044 	addi	r17,r17,1
  8053d8:	18800115 	stw	r2,4(r3)
  8053dc:	008001c4 	movi	r2,7
  8053e0:	19400015 	stw	r5,0(r3)
  8053e4:	dc800e15 	stw	r18,56(sp)
  8053e8:	dc400d15 	stw	r17,52(sp)
  8053ec:	2021883a 	mov	r16,r4
  8053f0:	14425016 	blt	r2,r17,805d34 <___vfprintf_internal_r+0x1828>
  8053f4:	19400204 	addi	r5,r3,8
  8053f8:	d9814717 	ldw	r6,1308(sp)
  8053fc:	8c400044 	addi	r17,r17,1
  805400:	dc400d15 	stw	r17,52(sp)
  805404:	3107c83a 	sub	r3,r6,r4
  805408:	d9014117 	ldw	r4,1284(sp)
  80540c:	90e5883a 	add	r18,r18,r3
  805410:	28c00115 	stw	r3,4(r5)
  805414:	8105883a 	add	r2,r16,r4
  805418:	28800015 	stw	r2,0(r5)
  80541c:	008001c4 	movi	r2,7
  805420:	dc800e15 	stw	r18,56(sp)
  805424:	147f1d16 	blt	r2,r17,80509c <___vfprintf_internal_r+0xb90>
  805428:	28c00204 	addi	r3,r5,8
  80542c:	003db506 	br	804b04 <___vfprintf_internal_r+0x5f8>
  805430:	3c000017 	ldw	r16,0(r7)
  805434:	3c400117 	ldw	r17,4(r7)
  805438:	39800204 	addi	r6,r7,8
  80543c:	01000044 	movi	r4,1
  805440:	d9814015 	stw	r6,1280(sp)
  805444:	d8000405 	stb	zero,16(sp)
  805448:	003ebe06 	br	804f44 <___vfprintf_internal_r+0xa38>
  80544c:	3c000017 	ldw	r16,0(r7)
  805450:	3c400117 	ldw	r17,4(r7)
  805454:	38800204 	addi	r2,r7,8
  805458:	d8814015 	stw	r2,1280(sp)
  80545c:	003eb706 	br	804f3c <___vfprintf_internal_r+0xa30>
  805460:	3c000017 	ldw	r16,0(r7)
  805464:	3c400117 	ldw	r17,4(r7)
  805468:	39000204 	addi	r4,r7,8
  80546c:	d9014015 	stw	r4,1280(sp)
  805470:	0009883a 	mov	r4,zero
  805474:	d8000405 	stb	zero,16(sp)
  805478:	003eb206 	br	804f44 <___vfprintf_internal_r+0xa38>
  80547c:	38c00017 	ldw	r3,0(r7)
  805480:	39c00104 	addi	r7,r7,4
  805484:	d8c14a15 	stw	r3,1320(sp)
  805488:	1800d10e 	bge	r3,zero,8057d0 <___vfprintf_internal_r+0x12c4>
  80548c:	00c7c83a 	sub	r3,zero,r3
  805490:	d8c14a15 	stw	r3,1320(sp)
  805494:	d9014c17 	ldw	r4,1328(sp)
  805498:	b8c00007 	ldb	r3,0(r23)
  80549c:	21000114 	ori	r4,r4,4
  8054a0:	d9014c15 	stw	r4,1328(sp)
  8054a4:	003c9806 	br	804708 <___vfprintf_internal_r+0x1fc>
  8054a8:	d9814c17 	ldw	r6,1328(sp)
  8054ac:	3080080c 	andi	r2,r6,32
  8054b0:	1001f026 	beq	r2,zero,805c74 <___vfprintf_internal_r+0x1768>
  8054b4:	d9014b17 	ldw	r4,1324(sp)
  8054b8:	38800017 	ldw	r2,0(r7)
  8054bc:	39c00104 	addi	r7,r7,4
  8054c0:	d9c14015 	stw	r7,1280(sp)
  8054c4:	2007d7fa 	srai	r3,r4,31
  8054c8:	d9c14017 	ldw	r7,1280(sp)
  8054cc:	11000015 	stw	r4,0(r2)
  8054d0:	10c00115 	stw	r3,4(r2)
  8054d4:	003c6906 	br	80467c <___vfprintf_internal_r+0x170>
  8054d8:	b8c00007 	ldb	r3,0(r23)
  8054dc:	00801b04 	movi	r2,108
  8054e0:	18824f26 	beq	r3,r2,805e20 <___vfprintf_internal_r+0x1914>
  8054e4:	d9414c17 	ldw	r5,1328(sp)
  8054e8:	29400414 	ori	r5,r5,16
  8054ec:	d9414c15 	stw	r5,1328(sp)
  8054f0:	003c8506 	br	804708 <___vfprintf_internal_r+0x1fc>
  8054f4:	d9814c17 	ldw	r6,1328(sp)
  8054f8:	b8c00007 	ldb	r3,0(r23)
  8054fc:	31800814 	ori	r6,r6,32
  805500:	d9814c15 	stw	r6,1328(sp)
  805504:	003c8006 	br	804708 <___vfprintf_internal_r+0x1fc>
  805508:	d8814c17 	ldw	r2,1328(sp)
  80550c:	3c000017 	ldw	r16,0(r7)
  805510:	00c01e04 	movi	r3,120
  805514:	10800094 	ori	r2,r2,2
  805518:	d8814c15 	stw	r2,1328(sp)
  80551c:	39c00104 	addi	r7,r7,4
  805520:	014020b4 	movhi	r5,130
  805524:	2974d404 	addi	r5,r5,-11440
  805528:	00800c04 	movi	r2,48
  80552c:	0023883a 	mov	r17,zero
  805530:	01000084 	movi	r4,2
  805534:	d9c14015 	stw	r7,1280(sp)
  805538:	d8c14d15 	stw	r3,1332(sp)
  80553c:	d9414415 	stw	r5,1296(sp)
  805540:	d8800445 	stb	r2,17(sp)
  805544:	d8c00485 	stb	r3,18(sp)
  805548:	d8000405 	stb	zero,16(sp)
  80554c:	003e7d06 	br	804f44 <___vfprintf_internal_r+0xa38>
  805550:	d8814c17 	ldw	r2,1328(sp)
  805554:	b8c00007 	ldb	r3,0(r23)
  805558:	10801014 	ori	r2,r2,64
  80555c:	d8814c15 	stw	r2,1328(sp)
  805560:	003c6906 	br	804708 <___vfprintf_internal_r+0x1fc>
  805564:	d9414c17 	ldw	r5,1328(sp)
  805568:	2880020c 	andi	r2,r5,8
  80556c:	1001df26 	beq	r2,zero,805cec <___vfprintf_internal_r+0x17e0>
  805570:	39800017 	ldw	r6,0(r7)
  805574:	38800204 	addi	r2,r7,8
  805578:	d8814015 	stw	r2,1280(sp)
  80557c:	d9814215 	stw	r6,1288(sp)
  805580:	39c00117 	ldw	r7,4(r7)
  805584:	d9c14315 	stw	r7,1292(sp)
  805588:	d9014217 	ldw	r4,1288(sp)
  80558c:	d9414317 	ldw	r5,1292(sp)
  805590:	080aeac0 	call	80aeac <__isinfd>
  805594:	10021726 	beq	r2,zero,805df4 <___vfprintf_internal_r+0x18e8>
  805598:	d9014217 	ldw	r4,1288(sp)
  80559c:	d9414317 	ldw	r5,1292(sp)
  8055a0:	000d883a 	mov	r6,zero
  8055a4:	000f883a 	mov	r7,zero
  8055a8:	08038580 	call	803858 <__ltdf2>
  8055ac:	1002ca16 	blt	r2,zero,8060d8 <___vfprintf_internal_r+0x1bcc>
  8055b0:	d9414d17 	ldw	r5,1332(sp)
  8055b4:	008011c4 	movi	r2,71
  8055b8:	11420a16 	blt	r2,r5,805de4 <___vfprintf_internal_r+0x18d8>
  8055bc:	018020b4 	movhi	r6,130
  8055c0:	31b4d904 	addi	r6,r6,-11420
  8055c4:	d9814115 	stw	r6,1284(sp)
  8055c8:	d9014c17 	ldw	r4,1328(sp)
  8055cc:	00c000c4 	movi	r3,3
  8055d0:	00bfdfc4 	movi	r2,-129
  8055d4:	2088703a 	and	r4,r4,r2
  8055d8:	180f883a 	mov	r7,r3
  8055dc:	d8c14515 	stw	r3,1300(sp)
  8055e0:	d9014c15 	stw	r4,1328(sp)
  8055e4:	d8014615 	stw	zero,1304(sp)
  8055e8:	003e6a06 	br	804f94 <___vfprintf_internal_r+0xa88>
  8055ec:	38800017 	ldw	r2,0(r7)
  8055f0:	00c00044 	movi	r3,1
  8055f4:	39c00104 	addi	r7,r7,4
  8055f8:	d9c14015 	stw	r7,1280(sp)
  8055fc:	d9000f04 	addi	r4,sp,60
  805600:	180f883a 	mov	r7,r3
  805604:	d8c14515 	stw	r3,1300(sp)
  805608:	d9014115 	stw	r4,1284(sp)
  80560c:	d8800f05 	stb	r2,60(sp)
  805610:	d8000405 	stb	zero,16(sp)
  805614:	003cac06 	br	8048c8 <___vfprintf_internal_r+0x3bc>
  805618:	014020b4 	movhi	r5,130
  80561c:	2974df04 	addi	r5,r5,-11396
  805620:	d9414415 	stw	r5,1296(sp)
  805624:	d9814c17 	ldw	r6,1328(sp)
  805628:	3080080c 	andi	r2,r6,32
  80562c:	1000f926 	beq	r2,zero,805a14 <___vfprintf_internal_r+0x1508>
  805630:	3c000017 	ldw	r16,0(r7)
  805634:	3c400117 	ldw	r17,4(r7)
  805638:	38800204 	addi	r2,r7,8
  80563c:	d8814015 	stw	r2,1280(sp)
  805640:	d9414c17 	ldw	r5,1328(sp)
  805644:	2880004c 	andi	r2,r5,1
  805648:	1005003a 	cmpeq	r2,r2,zero
  80564c:	1000b31e 	bne	r2,zero,80591c <___vfprintf_internal_r+0x1410>
  805650:	8444b03a 	or	r2,r16,r17
  805654:	1000b126 	beq	r2,zero,80591c <___vfprintf_internal_r+0x1410>
  805658:	d9814d17 	ldw	r6,1332(sp)
  80565c:	29400094 	ori	r5,r5,2
  805660:	00800c04 	movi	r2,48
  805664:	01000084 	movi	r4,2
  805668:	d9414c15 	stw	r5,1328(sp)
  80566c:	d8800445 	stb	r2,17(sp)
  805670:	d9800485 	stb	r6,18(sp)
  805674:	d8000405 	stb	zero,16(sp)
  805678:	003e3206 	br	804f44 <___vfprintf_internal_r+0xa38>
  80567c:	018020b4 	movhi	r6,130
  805680:	31b4d404 	addi	r6,r6,-11440
  805684:	d9814415 	stw	r6,1296(sp)
  805688:	003fe606 	br	805624 <___vfprintf_internal_r+0x1118>
  80568c:	00800ac4 	movi	r2,43
  805690:	d8800405 	stb	r2,16(sp)
  805694:	b8c00007 	ldb	r3,0(r23)
  805698:	003c1b06 	br	804708 <___vfprintf_internal_r+0x1fc>
  80569c:	d8814c17 	ldw	r2,1328(sp)
  8056a0:	b8c00007 	ldb	r3,0(r23)
  8056a4:	10800054 	ori	r2,r2,1
  8056a8:	d8814c15 	stw	r2,1328(sp)
  8056ac:	003c1606 	br	804708 <___vfprintf_internal_r+0x1fc>
  8056b0:	d8800407 	ldb	r2,16(sp)
  8056b4:	1000461e 	bne	r2,zero,8057d0 <___vfprintf_internal_r+0x12c4>
  8056b8:	00800804 	movi	r2,32
  8056bc:	d8800405 	stb	r2,16(sp)
  8056c0:	b8c00007 	ldb	r3,0(r23)
  8056c4:	003c1006 	br	804708 <___vfprintf_internal_r+0x1fc>
  8056c8:	d9814c17 	ldw	r6,1328(sp)
  8056cc:	b8c00007 	ldb	r3,0(r23)
  8056d0:	31800214 	ori	r6,r6,8
  8056d4:	d9814c15 	stw	r6,1328(sp)
  8056d8:	003c0b06 	br	804708 <___vfprintf_internal_r+0x1fc>
  8056dc:	0007883a 	mov	r3,zero
  8056e0:	01000244 	movi	r4,9
  8056e4:	188002a4 	muli	r2,r3,10
  8056e8:	b8c00007 	ldb	r3,0(r23)
  8056ec:	d9814d17 	ldw	r6,1332(sp)
  8056f0:	bdc00044 	addi	r23,r23,1
  8056f4:	d8c14d15 	stw	r3,1332(sp)
  8056f8:	d9414d17 	ldw	r5,1332(sp)
  8056fc:	3085883a 	add	r2,r6,r2
  805700:	10fff404 	addi	r3,r2,-48
  805704:	28bff404 	addi	r2,r5,-48
  805708:	20bff62e 	bgeu	r4,r2,8056e4 <___vfprintf_internal_r+0x11d8>
  80570c:	d8c14a15 	stw	r3,1320(sp)
  805710:	003bff06 	br	804710 <___vfprintf_internal_r+0x204>
  805714:	d9414c17 	ldw	r5,1328(sp)
  805718:	b8c00007 	ldb	r3,0(r23)
  80571c:	29402014 	ori	r5,r5,128
  805720:	d9414c15 	stw	r5,1328(sp)
  805724:	003bf806 	br	804708 <___vfprintf_internal_r+0x1fc>
  805728:	b8c00007 	ldb	r3,0(r23)
  80572c:	00800a84 	movi	r2,42
  805730:	bdc00044 	addi	r23,r23,1
  805734:	18831526 	beq	r3,r2,80638c <___vfprintf_internal_r+0x1e80>
  805738:	d8c14d15 	stw	r3,1332(sp)
  80573c:	18bff404 	addi	r2,r3,-48
  805740:	00c00244 	movi	r3,9
  805744:	18827836 	bltu	r3,r2,806128 <___vfprintf_internal_r+0x1c1c>
  805748:	000d883a 	mov	r6,zero
  80574c:	308002a4 	muli	r2,r6,10
  805750:	b9800007 	ldb	r6,0(r23)
  805754:	d9414d17 	ldw	r5,1332(sp)
  805758:	bdc00044 	addi	r23,r23,1
  80575c:	d9814d15 	stw	r6,1332(sp)
  805760:	d9014d17 	ldw	r4,1332(sp)
  805764:	1145883a 	add	r2,r2,r5
  805768:	11bff404 	addi	r6,r2,-48
  80576c:	20bff404 	addi	r2,r4,-48
  805770:	18bff62e 	bgeu	r3,r2,80574c <___vfprintf_internal_r+0x1240>
  805774:	3027883a 	mov	r19,r6
  805778:	303be50e 	bge	r6,zero,804710 <___vfprintf_internal_r+0x204>
  80577c:	04ffffc4 	movi	r19,-1
  805780:	003be306 	br	804710 <___vfprintf_internal_r+0x204>
  805784:	d8000405 	stb	zero,16(sp)
  805788:	39800017 	ldw	r6,0(r7)
  80578c:	39c00104 	addi	r7,r7,4
  805790:	d9c14015 	stw	r7,1280(sp)
  805794:	d9814115 	stw	r6,1284(sp)
  805798:	3001c926 	beq	r6,zero,805ec0 <___vfprintf_internal_r+0x19b4>
  80579c:	98000e16 	blt	r19,zero,8057d8 <___vfprintf_internal_r+0x12cc>
  8057a0:	d9014117 	ldw	r4,1284(sp)
  8057a4:	000b883a 	mov	r5,zero
  8057a8:	980d883a 	mov	r6,r19
  8057ac:	08095c80 	call	8095c8 <memchr>
  8057b0:	10025926 	beq	r2,zero,806118 <___vfprintf_internal_r+0x1c0c>
  8057b4:	d8c14117 	ldw	r3,1284(sp)
  8057b8:	10cfc83a 	sub	r7,r2,r3
  8057bc:	99c19e16 	blt	r19,r7,805e38 <___vfprintf_internal_r+0x192c>
  8057c0:	d9c14515 	stw	r7,1300(sp)
  8057c4:	38000916 	blt	r7,zero,8057ec <___vfprintf_internal_r+0x12e0>
  8057c8:	d8014615 	stw	zero,1304(sp)
  8057cc:	003df106 	br	804f94 <___vfprintf_internal_r+0xa88>
  8057d0:	b8c00007 	ldb	r3,0(r23)
  8057d4:	003bcc06 	br	804708 <___vfprintf_internal_r+0x1fc>
  8057d8:	d9014117 	ldw	r4,1284(sp)
  8057dc:	08044400 	call	804440 <strlen>
  8057e0:	d8814515 	stw	r2,1300(sp)
  8057e4:	100f883a 	mov	r7,r2
  8057e8:	103ff70e 	bge	r2,zero,8057c8 <___vfprintf_internal_r+0x12bc>
  8057ec:	d8014515 	stw	zero,1300(sp)
  8057f0:	d8014615 	stw	zero,1304(sp)
  8057f4:	003de706 	br	804f94 <___vfprintf_internal_r+0xa88>
  8057f8:	20c03fcc 	andi	r3,r4,255
  8057fc:	00800044 	movi	r2,1
  805800:	18802d26 	beq	r3,r2,8058b8 <___vfprintf_internal_r+0x13ac>
  805804:	18800e36 	bltu	r3,r2,805840 <___vfprintf_internal_r+0x1334>
  805808:	00800084 	movi	r2,2
  80580c:	1880fa26 	beq	r3,r2,805bf8 <___vfprintf_internal_r+0x16ec>
  805810:	010020b4 	movhi	r4,130
  805814:	2134e404 	addi	r4,r4,-11376
  805818:	08044400 	call	804440 <strlen>
  80581c:	100f883a 	mov	r7,r2
  805820:	dcc14515 	stw	r19,1300(sp)
  805824:	9880010e 	bge	r19,r2,80582c <___vfprintf_internal_r+0x1320>
  805828:	d8814515 	stw	r2,1300(sp)
  80582c:	008020b4 	movhi	r2,130
  805830:	10b4e404 	addi	r2,r2,-11376
  805834:	dcc14615 	stw	r19,1304(sp)
  805838:	d8814115 	stw	r2,1284(sp)
  80583c:	003dd506 	br	804f94 <___vfprintf_internal_r+0xa88>
  805840:	d9401904 	addi	r5,sp,100
  805844:	dd000f04 	addi	r20,sp,60
  805848:	d9414115 	stw	r5,1284(sp)
  80584c:	880a977a 	slli	r5,r17,29
  805850:	d9814117 	ldw	r6,1284(sp)
  805854:	8004d0fa 	srli	r2,r16,3
  805858:	8806d0fa 	srli	r3,r17,3
  80585c:	810001cc 	andi	r4,r16,7
  805860:	2884b03a 	or	r2,r5,r2
  805864:	31bfffc4 	addi	r6,r6,-1
  805868:	21000c04 	addi	r4,r4,48
  80586c:	d9814115 	stw	r6,1284(sp)
  805870:	10cab03a 	or	r5,r2,r3
  805874:	31000005 	stb	r4,0(r6)
  805878:	1021883a 	mov	r16,r2
  80587c:	1823883a 	mov	r17,r3
  805880:	283ff21e 	bne	r5,zero,80584c <___vfprintf_internal_r+0x1340>
  805884:	d8c14c17 	ldw	r3,1328(sp)
  805888:	1880004c 	andi	r2,r3,1
  80588c:	1005003a 	cmpeq	r2,r2,zero
  805890:	103db91e 	bne	r2,zero,804f78 <___vfprintf_internal_r+0xa6c>
  805894:	20803fcc 	andi	r2,r4,255
  805898:	1080201c 	xori	r2,r2,128
  80589c:	10bfe004 	addi	r2,r2,-128
  8058a0:	00c00c04 	movi	r3,48
  8058a4:	10fdb426 	beq	r2,r3,804f78 <___vfprintf_internal_r+0xa6c>
  8058a8:	31bfffc4 	addi	r6,r6,-1
  8058ac:	d9814115 	stw	r6,1284(sp)
  8058b0:	30c00005 	stb	r3,0(r6)
  8058b4:	003db006 	br	804f78 <___vfprintf_internal_r+0xa6c>
  8058b8:	88800068 	cmpgeui	r2,r17,1
  8058bc:	10002c1e 	bne	r2,zero,805970 <___vfprintf_internal_r+0x1464>
  8058c0:	8800021e 	bne	r17,zero,8058cc <___vfprintf_internal_r+0x13c0>
  8058c4:	00800244 	movi	r2,9
  8058c8:	14002936 	bltu	r2,r16,805970 <___vfprintf_internal_r+0x1464>
  8058cc:	d90018c4 	addi	r4,sp,99
  8058d0:	dd000f04 	addi	r20,sp,60
  8058d4:	d9014115 	stw	r4,1284(sp)
  8058d8:	d9014117 	ldw	r4,1284(sp)
  8058dc:	80800c04 	addi	r2,r16,48
  8058e0:	20800005 	stb	r2,0(r4)
  8058e4:	003da406 	br	804f78 <___vfprintf_internal_r+0xa6c>
  8058e8:	dc400d17 	ldw	r17,52(sp)
  8058ec:	070020b4 	movhi	fp,130
  8058f0:	e734eb84 	addi	fp,fp,-11346
  8058f4:	9425883a 	add	r18,r18,r16
  8058f8:	8c400044 	addi	r17,r17,1
  8058fc:	008001c4 	movi	r2,7
  805900:	1f000015 	stw	fp,0(r3)
  805904:	1c000115 	stw	r16,4(r3)
  805908:	dc800e15 	stw	r18,56(sp)
  80590c:	dc400d15 	stw	r17,52(sp)
  805910:	147de216 	blt	r2,r17,80509c <___vfprintf_internal_r+0xb90>
  805914:	18c00204 	addi	r3,r3,8
  805918:	003c7a06 	br	804b04 <___vfprintf_internal_r+0x5f8>
  80591c:	01000084 	movi	r4,2
  805920:	d8000405 	stb	zero,16(sp)
  805924:	003d8706 	br	804f44 <___vfprintf_internal_r+0xa38>
  805928:	d9814c17 	ldw	r6,1328(sp)
  80592c:	30c4703a 	and	r2,r6,r3
  805930:	1005003a 	cmpeq	r2,r2,zero
  805934:	103cb926 	beq	r2,zero,804c1c <___vfprintf_internal_r+0x710>
  805938:	d9014117 	ldw	r4,1284(sp)
  80593c:	94800044 	addi	r18,r18,1
  805940:	8c400044 	addi	r17,r17,1
  805944:	008001c4 	movi	r2,7
  805948:	a9000015 	stw	r4,0(r21)
  80594c:	a8c00115 	stw	r3,4(r21)
  805950:	dc800e15 	stw	r18,56(sp)
  805954:	dc400d15 	stw	r17,52(sp)
  805958:	147e6616 	blt	r2,r17,8052f4 <___vfprintf_internal_r+0xde8>
  80595c:	acc00204 	addi	r19,r21,8
  805960:	003cd706 	br	804cc0 <___vfprintf_internal_r+0x7b4>
  805964:	070020b4 	movhi	fp,130
  805968:	e734eb84 	addi	fp,fp,-11346
  80596c:	003c4f06 	br	804aac <___vfprintf_internal_r+0x5a0>
  805970:	dd000f04 	addi	r20,sp,60
  805974:	dc801904 	addi	r18,sp,100
  805978:	8009883a 	mov	r4,r16
  80597c:	880b883a 	mov	r5,r17
  805980:	01800284 	movi	r6,10
  805984:	000f883a 	mov	r7,zero
  805988:	080bbd40 	call	80bbd4 <__umoddi3>
  80598c:	12000c04 	addi	r8,r2,48
  805990:	94bfffc4 	addi	r18,r18,-1
  805994:	8009883a 	mov	r4,r16
  805998:	880b883a 	mov	r5,r17
  80599c:	01800284 	movi	r6,10
  8059a0:	000f883a 	mov	r7,zero
  8059a4:	92000005 	stb	r8,0(r18)
  8059a8:	080b5f80 	call	80b5f8 <__udivdi3>
  8059ac:	1009883a 	mov	r4,r2
  8059b0:	1021883a 	mov	r16,r2
  8059b4:	18800068 	cmpgeui	r2,r3,1
  8059b8:	1823883a 	mov	r17,r3
  8059bc:	103fee1e 	bne	r2,zero,805978 <___vfprintf_internal_r+0x146c>
  8059c0:	1800021e 	bne	r3,zero,8059cc <___vfprintf_internal_r+0x14c0>
  8059c4:	00800244 	movi	r2,9
  8059c8:	113feb36 	bltu	r2,r4,805978 <___vfprintf_internal_r+0x146c>
  8059cc:	94bfffc4 	addi	r18,r18,-1
  8059d0:	dc814115 	stw	r18,1284(sp)
  8059d4:	003fc006 	br	8058d8 <___vfprintf_internal_r+0x13cc>
  8059d8:	d9014c17 	ldw	r4,1328(sp)
  8059dc:	2080004c 	andi	r2,r4,1
  8059e0:	10009a1e 	bne	r2,zero,805c4c <___vfprintf_internal_r+0x1740>
  8059e4:	d9401904 	addi	r5,sp,100
  8059e8:	dd000f04 	addi	r20,sp,60
  8059ec:	d9414115 	stw	r5,1284(sp)
  8059f0:	003d6106 	br	804f78 <___vfprintf_internal_r+0xa6c>
  8059f4:	d9014f17 	ldw	r4,1340(sp)
  8059f8:	b00b883a 	mov	r5,r22
  8059fc:	d9800c04 	addi	r6,sp,48
  805a00:	08044b40 	call	8044b4 <__sprint_r>
  805a04:	103c791e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805a08:	dc800e17 	ldw	r18,56(sp)
  805a0c:	d8c01904 	addi	r3,sp,100
  805a10:	003cff06 	br	804e10 <___vfprintf_internal_r+0x904>
  805a14:	d8c14c17 	ldw	r3,1328(sp)
  805a18:	1880040c 	andi	r2,r3,16
  805a1c:	1000711e 	bne	r2,zero,805be4 <___vfprintf_internal_r+0x16d8>
  805a20:	d9014c17 	ldw	r4,1328(sp)
  805a24:	2080100c 	andi	r2,r4,64
  805a28:	10006e26 	beq	r2,zero,805be4 <___vfprintf_internal_r+0x16d8>
  805a2c:	3c00000b 	ldhu	r16,0(r7)
  805a30:	0023883a 	mov	r17,zero
  805a34:	39c00104 	addi	r7,r7,4
  805a38:	d9c14015 	stw	r7,1280(sp)
  805a3c:	003f0006 	br	805640 <___vfprintf_internal_r+0x1134>
  805a40:	dc400d17 	ldw	r17,52(sp)
  805a44:	070020b4 	movhi	fp,130
  805a48:	e734eb84 	addi	fp,fp,-11346
  805a4c:	9425883a 	add	r18,r18,r16
  805a50:	8c400044 	addi	r17,r17,1
  805a54:	008001c4 	movi	r2,7
  805a58:	1f000015 	stw	fp,0(r3)
  805a5c:	1c000115 	stw	r16,4(r3)
  805a60:	dc800e15 	stw	r18,56(sp)
  805a64:	dc400d15 	stw	r17,52(sp)
  805a68:	147d7616 	blt	r2,r17,805044 <___vfprintf_internal_r+0xb38>
  805a6c:	18c00204 	addi	r3,r3,8
  805a70:	003d7b06 	br	805060 <___vfprintf_internal_r+0xb54>
  805a74:	dc800e17 	ldw	r18,56(sp)
  805a78:	dc400d17 	ldw	r17,52(sp)
  805a7c:	070020b4 	movhi	fp,130
  805a80:	e734ef84 	addi	fp,fp,-11330
  805a84:	003bc006 	br	804988 <___vfprintf_internal_r+0x47c>
  805a88:	d9014f17 	ldw	r4,1340(sp)
  805a8c:	b00b883a 	mov	r5,r22
  805a90:	d9800c04 	addi	r6,sp,48
  805a94:	08044b40 	call	8044b4 <__sprint_r>
  805a98:	103c541e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805a9c:	dc800e17 	ldw	r18,56(sp)
  805aa0:	d8c01904 	addi	r3,sp,100
  805aa4:	003ce906 	br	804e4c <___vfprintf_internal_r+0x940>
  805aa8:	3c000017 	ldw	r16,0(r7)
  805aac:	0009883a 	mov	r4,zero
  805ab0:	39c00104 	addi	r7,r7,4
  805ab4:	0023883a 	mov	r17,zero
  805ab8:	d9c14015 	stw	r7,1280(sp)
  805abc:	d8000405 	stb	zero,16(sp)
  805ac0:	003d2006 	br	804f44 <___vfprintf_internal_r+0xa38>
  805ac4:	38800017 	ldw	r2,0(r7)
  805ac8:	39c00104 	addi	r7,r7,4
  805acc:	d9c14015 	stw	r7,1280(sp)
  805ad0:	1023d7fa 	srai	r17,r2,31
  805ad4:	1021883a 	mov	r16,r2
  805ad8:	003d1806 	br	804f3c <___vfprintf_internal_r+0xa30>
  805adc:	3c000017 	ldw	r16,0(r7)
  805ae0:	01000044 	movi	r4,1
  805ae4:	39c00104 	addi	r7,r7,4
  805ae8:	0023883a 	mov	r17,zero
  805aec:	d9c14015 	stw	r7,1280(sp)
  805af0:	d8000405 	stb	zero,16(sp)
  805af4:	003d1306 	br	804f44 <___vfprintf_internal_r+0xa38>
  805af8:	008020b4 	movhi	r2,130
  805afc:	10b4eb04 	addi	r2,r2,-11348
  805b00:	94800044 	addi	r18,r18,1
  805b04:	8c400044 	addi	r17,r17,1
  805b08:	a8800015 	stw	r2,0(r21)
  805b0c:	00c00044 	movi	r3,1
  805b10:	008001c4 	movi	r2,7
  805b14:	a8c00115 	stw	r3,4(r21)
  805b18:	dc800e15 	stw	r18,56(sp)
  805b1c:	dc400d15 	stw	r17,52(sp)
  805b20:	1440ca16 	blt	r2,r17,805e4c <___vfprintf_internal_r+0x1940>
  805b24:	a8c00204 	addi	r3,r21,8
  805b28:	2000061e 	bne	r4,zero,805b44 <___vfprintf_internal_r+0x1638>
  805b2c:	d9414717 	ldw	r5,1308(sp)
  805b30:	2800041e 	bne	r5,zero,805b44 <___vfprintf_internal_r+0x1638>
  805b34:	d9814c17 	ldw	r6,1328(sp)
  805b38:	3080004c 	andi	r2,r6,1
  805b3c:	1005003a 	cmpeq	r2,r2,zero
  805b40:	103bf01e 	bne	r2,zero,804b04 <___vfprintf_internal_r+0x5f8>
  805b44:	00800044 	movi	r2,1
  805b48:	dc400d17 	ldw	r17,52(sp)
  805b4c:	18800115 	stw	r2,4(r3)
  805b50:	d8814917 	ldw	r2,1316(sp)
  805b54:	94800044 	addi	r18,r18,1
  805b58:	8c400044 	addi	r17,r17,1
  805b5c:	18800015 	stw	r2,0(r3)
  805b60:	008001c4 	movi	r2,7
  805b64:	dc800e15 	stw	r18,56(sp)
  805b68:	dc400d15 	stw	r17,52(sp)
  805b6c:	1440ca16 	blt	r2,r17,805e98 <___vfprintf_internal_r+0x198c>
  805b70:	18c00204 	addi	r3,r3,8
  805b74:	0121c83a 	sub	r16,zero,r4
  805b78:	0400500e 	bge	zero,r16,805cbc <___vfprintf_internal_r+0x17b0>
  805b7c:	00800404 	movi	r2,16
  805b80:	1400800e 	bge	r2,r16,805d84 <___vfprintf_internal_r+0x1878>
  805b84:	1027883a 	mov	r19,r2
  805b88:	070020b4 	movhi	fp,130
  805b8c:	e734eb84 	addi	fp,fp,-11346
  805b90:	050001c4 	movi	r20,7
  805b94:	00000306 	br	805ba4 <___vfprintf_internal_r+0x1698>
  805b98:	18c00204 	addi	r3,r3,8
  805b9c:	843ffc04 	addi	r16,r16,-16
  805ba0:	9c007a0e 	bge	r19,r16,805d8c <___vfprintf_internal_r+0x1880>
  805ba4:	94800404 	addi	r18,r18,16
  805ba8:	8c400044 	addi	r17,r17,1
  805bac:	1f000015 	stw	fp,0(r3)
  805bb0:	1cc00115 	stw	r19,4(r3)
  805bb4:	dc800e15 	stw	r18,56(sp)
  805bb8:	dc400d15 	stw	r17,52(sp)
  805bbc:	a47ff60e 	bge	r20,r17,805b98 <___vfprintf_internal_r+0x168c>
  805bc0:	d9014f17 	ldw	r4,1340(sp)
  805bc4:	b00b883a 	mov	r5,r22
  805bc8:	d9800c04 	addi	r6,sp,48
  805bcc:	08044b40 	call	8044b4 <__sprint_r>
  805bd0:	103c061e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805bd4:	dc800e17 	ldw	r18,56(sp)
  805bd8:	dc400d17 	ldw	r17,52(sp)
  805bdc:	d8c01904 	addi	r3,sp,100
  805be0:	003fee06 	br	805b9c <___vfprintf_internal_r+0x1690>
  805be4:	3c000017 	ldw	r16,0(r7)
  805be8:	0023883a 	mov	r17,zero
  805bec:	39c00104 	addi	r7,r7,4
  805bf0:	d9c14015 	stw	r7,1280(sp)
  805bf4:	003e9206 	br	805640 <___vfprintf_internal_r+0x1134>
  805bf8:	d9401904 	addi	r5,sp,100
  805bfc:	dd000f04 	addi	r20,sp,60
  805c00:	d9414115 	stw	r5,1284(sp)
  805c04:	d9814417 	ldw	r6,1296(sp)
  805c08:	880a973a 	slli	r5,r17,28
  805c0c:	8004d13a 	srli	r2,r16,4
  805c10:	810003cc 	andi	r4,r16,15
  805c14:	3109883a 	add	r4,r6,r4
  805c18:	2884b03a 	or	r2,r5,r2
  805c1c:	21400003 	ldbu	r5,0(r4)
  805c20:	d9014117 	ldw	r4,1284(sp)
  805c24:	8806d13a 	srli	r3,r17,4
  805c28:	1021883a 	mov	r16,r2
  805c2c:	213fffc4 	addi	r4,r4,-1
  805c30:	d9014115 	stw	r4,1284(sp)
  805c34:	d9814117 	ldw	r6,1284(sp)
  805c38:	10c8b03a 	or	r4,r2,r3
  805c3c:	1823883a 	mov	r17,r3
  805c40:	31400005 	stb	r5,0(r6)
  805c44:	203fef1e 	bne	r4,zero,805c04 <___vfprintf_internal_r+0x16f8>
  805c48:	003ccb06 	br	804f78 <___vfprintf_internal_r+0xa6c>
  805c4c:	00800c04 	movi	r2,48
  805c50:	d98018c4 	addi	r6,sp,99
  805c54:	dd000f04 	addi	r20,sp,60
  805c58:	d88018c5 	stb	r2,99(sp)
  805c5c:	d9814115 	stw	r6,1284(sp)
  805c60:	003cc506 	br	804f78 <___vfprintf_internal_r+0xa6c>
  805c64:	dc400d17 	ldw	r17,52(sp)
  805c68:	070020b4 	movhi	fp,130
  805c6c:	e734ef84 	addi	fp,fp,-11330
  805c70:	003bc706 	br	804b90 <___vfprintf_internal_r+0x684>
  805c74:	d9414c17 	ldw	r5,1328(sp)
  805c78:	2880040c 	andi	r2,r5,16
  805c7c:	10007c26 	beq	r2,zero,805e70 <___vfprintf_internal_r+0x1964>
  805c80:	38800017 	ldw	r2,0(r7)
  805c84:	39c00104 	addi	r7,r7,4
  805c88:	d9c14015 	stw	r7,1280(sp)
  805c8c:	d9814b17 	ldw	r6,1324(sp)
  805c90:	d9c14017 	ldw	r7,1280(sp)
  805c94:	11800015 	stw	r6,0(r2)
  805c98:	003a7806 	br	80467c <___vfprintf_internal_r+0x170>
  805c9c:	d9014f17 	ldw	r4,1340(sp)
  805ca0:	b00b883a 	mov	r5,r22
  805ca4:	d9800c04 	addi	r6,sp,48
  805ca8:	08044b40 	call	8044b4 <__sprint_r>
  805cac:	103bcf1e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805cb0:	dc800e17 	ldw	r18,56(sp)
  805cb4:	dc400d17 	ldw	r17,52(sp)
  805cb8:	d8c01904 	addi	r3,sp,100
  805cbc:	d9014717 	ldw	r4,1308(sp)
  805cc0:	d9414117 	ldw	r5,1284(sp)
  805cc4:	8c400044 	addi	r17,r17,1
  805cc8:	9125883a 	add	r18,r18,r4
  805ccc:	008001c4 	movi	r2,7
  805cd0:	19400015 	stw	r5,0(r3)
  805cd4:	19000115 	stw	r4,4(r3)
  805cd8:	dc800e15 	stw	r18,56(sp)
  805cdc:	dc400d15 	stw	r17,52(sp)
  805ce0:	147cee16 	blt	r2,r17,80509c <___vfprintf_internal_r+0xb90>
  805ce4:	18c00204 	addi	r3,r3,8
  805ce8:	003b8606 	br	804b04 <___vfprintf_internal_r+0x5f8>
  805cec:	38c00017 	ldw	r3,0(r7)
  805cf0:	39000204 	addi	r4,r7,8
  805cf4:	d9014015 	stw	r4,1280(sp)
  805cf8:	d8c14215 	stw	r3,1288(sp)
  805cfc:	39c00117 	ldw	r7,4(r7)
  805d00:	d9c14315 	stw	r7,1292(sp)
  805d04:	003e2006 	br	805588 <___vfprintf_internal_r+0x107c>
  805d08:	0005883a 	mov	r2,zero
  805d0c:	1409c83a 	sub	r4,r2,r16
  805d10:	1105803a 	cmpltu	r2,r2,r4
  805d14:	044bc83a 	sub	r5,zero,r17
  805d18:	2885c83a 	sub	r2,r5,r2
  805d1c:	2021883a 	mov	r16,r4
  805d20:	1023883a 	mov	r17,r2
  805d24:	01000044 	movi	r4,1
  805d28:	00800b44 	movi	r2,45
  805d2c:	d8800405 	stb	r2,16(sp)
  805d30:	003c8406 	br	804f44 <___vfprintf_internal_r+0xa38>
  805d34:	d9014f17 	ldw	r4,1340(sp)
  805d38:	b00b883a 	mov	r5,r22
  805d3c:	d9800c04 	addi	r6,sp,48
  805d40:	08044b40 	call	8044b4 <__sprint_r>
  805d44:	103ba91e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805d48:	dc800e17 	ldw	r18,56(sp)
  805d4c:	dc400d17 	ldw	r17,52(sp)
  805d50:	d9000517 	ldw	r4,20(sp)
  805d54:	d9401904 	addi	r5,sp,100
  805d58:	003da706 	br	8053f8 <___vfprintf_internal_r+0xeec>
  805d5c:	d9014f17 	ldw	r4,1340(sp)
  805d60:	b00b883a 	mov	r5,r22
  805d64:	d9800c04 	addi	r6,sp,48
  805d68:	08044b40 	call	8044b4 <__sprint_r>
  805d6c:	103b9f1e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805d70:	dc800e17 	ldw	r18,56(sp)
  805d74:	dc400d17 	ldw	r17,52(sp)
  805d78:	d9000517 	ldw	r4,20(sp)
  805d7c:	d8c01904 	addi	r3,sp,100
  805d80:	003d9106 	br	8053c8 <___vfprintf_internal_r+0xebc>
  805d84:	070020b4 	movhi	fp,130
  805d88:	e734eb84 	addi	fp,fp,-11346
  805d8c:	9425883a 	add	r18,r18,r16
  805d90:	8c400044 	addi	r17,r17,1
  805d94:	008001c4 	movi	r2,7
  805d98:	1f000015 	stw	fp,0(r3)
  805d9c:	1c000115 	stw	r16,4(r3)
  805da0:	dc800e15 	stw	r18,56(sp)
  805da4:	dc400d15 	stw	r17,52(sp)
  805da8:	147fbc16 	blt	r2,r17,805c9c <___vfprintf_internal_r+0x1790>
  805dac:	18c00204 	addi	r3,r3,8
  805db0:	003fc206 	br	805cbc <___vfprintf_internal_r+0x17b0>
  805db4:	d9014f17 	ldw	r4,1340(sp)
  805db8:	b00b883a 	mov	r5,r22
  805dbc:	d9800c04 	addi	r6,sp,48
  805dc0:	08044b40 	call	8044b4 <__sprint_r>
  805dc4:	103b891e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805dc8:	dc800e17 	ldw	r18,56(sp)
  805dcc:	d9000517 	ldw	r4,20(sp)
  805dd0:	d8c01904 	addi	r3,sp,100
  805dd4:	003d0206 	br	8051e0 <___vfprintf_internal_r+0xcd4>
  805dd8:	070020b4 	movhi	fp,130
  805ddc:	e734eb84 	addi	fp,fp,-11346
  805de0:	003be406 	br	804d74 <___vfprintf_internal_r+0x868>
  805de4:	008020b4 	movhi	r2,130
  805de8:	10b4da04 	addi	r2,r2,-11416
  805dec:	d8814115 	stw	r2,1284(sp)
  805df0:	003df506 	br	8055c8 <___vfprintf_internal_r+0x10bc>
  805df4:	d9014217 	ldw	r4,1288(sp)
  805df8:	d9414317 	ldw	r5,1292(sp)
  805dfc:	0802aa80 	call	802aa8 <__isnand>
  805e00:	10003926 	beq	r2,zero,805ee8 <___vfprintf_internal_r+0x19dc>
  805e04:	d9414d17 	ldw	r5,1332(sp)
  805e08:	008011c4 	movi	r2,71
  805e0c:	1140ce16 	blt	r2,r5,806148 <___vfprintf_internal_r+0x1c3c>
  805e10:	018020b4 	movhi	r6,130
  805e14:	31b4db04 	addi	r6,r6,-11412
  805e18:	d9814115 	stw	r6,1284(sp)
  805e1c:	003dea06 	br	8055c8 <___vfprintf_internal_r+0x10bc>
  805e20:	d9014c17 	ldw	r4,1328(sp)
  805e24:	bdc00044 	addi	r23,r23,1
  805e28:	b8c00007 	ldb	r3,0(r23)
  805e2c:	21000814 	ori	r4,r4,32
  805e30:	d9014c15 	stw	r4,1328(sp)
  805e34:	003a3406 	br	804708 <___vfprintf_internal_r+0x1fc>
  805e38:	dcc14515 	stw	r19,1300(sp)
  805e3c:	98011016 	blt	r19,zero,806280 <___vfprintf_internal_r+0x1d74>
  805e40:	980f883a 	mov	r7,r19
  805e44:	d8014615 	stw	zero,1304(sp)
  805e48:	003c5206 	br	804f94 <___vfprintf_internal_r+0xa88>
  805e4c:	d9014f17 	ldw	r4,1340(sp)
  805e50:	b00b883a 	mov	r5,r22
  805e54:	d9800c04 	addi	r6,sp,48
  805e58:	08044b40 	call	8044b4 <__sprint_r>
  805e5c:	103b631e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805e60:	dc800e17 	ldw	r18,56(sp)
  805e64:	d9000517 	ldw	r4,20(sp)
  805e68:	d8c01904 	addi	r3,sp,100
  805e6c:	003f2e06 	br	805b28 <___vfprintf_internal_r+0x161c>
  805e70:	d8c14c17 	ldw	r3,1328(sp)
  805e74:	1880100c 	andi	r2,r3,64
  805e78:	1000a026 	beq	r2,zero,8060fc <___vfprintf_internal_r+0x1bf0>
  805e7c:	38800017 	ldw	r2,0(r7)
  805e80:	39c00104 	addi	r7,r7,4
  805e84:	d9c14015 	stw	r7,1280(sp)
  805e88:	d9014b17 	ldw	r4,1324(sp)
  805e8c:	d9c14017 	ldw	r7,1280(sp)
  805e90:	1100000d 	sth	r4,0(r2)
  805e94:	0039f906 	br	80467c <___vfprintf_internal_r+0x170>
  805e98:	d9014f17 	ldw	r4,1340(sp)
  805e9c:	b00b883a 	mov	r5,r22
  805ea0:	d9800c04 	addi	r6,sp,48
  805ea4:	08044b40 	call	8044b4 <__sprint_r>
  805ea8:	103b501e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  805eac:	dc800e17 	ldw	r18,56(sp)
  805eb0:	dc400d17 	ldw	r17,52(sp)
  805eb4:	d9000517 	ldw	r4,20(sp)
  805eb8:	d8c01904 	addi	r3,sp,100
  805ebc:	003f2d06 	br	805b74 <___vfprintf_internal_r+0x1668>
  805ec0:	00800184 	movi	r2,6
  805ec4:	14c09a36 	bltu	r2,r19,806130 <___vfprintf_internal_r+0x1c24>
  805ec8:	dcc14515 	stw	r19,1300(sp)
  805ecc:	9800010e 	bge	r19,zero,805ed4 <___vfprintf_internal_r+0x19c8>
  805ed0:	d8014515 	stw	zero,1300(sp)
  805ed4:	008020b4 	movhi	r2,130
  805ed8:	10b4dd04 	addi	r2,r2,-11404
  805edc:	980f883a 	mov	r7,r19
  805ee0:	d8814115 	stw	r2,1284(sp)
  805ee4:	003a7806 	br	8048c8 <___vfprintf_internal_r+0x3bc>
  805ee8:	00bfffc4 	movi	r2,-1
  805eec:	9880e226 	beq	r19,r2,806278 <___vfprintf_internal_r+0x1d6c>
  805ef0:	d9414d17 	ldw	r5,1332(sp)
  805ef4:	008019c4 	movi	r2,103
  805ef8:	2880dc26 	beq	r5,r2,80626c <___vfprintf_internal_r+0x1d60>
  805efc:	008011c4 	movi	r2,71
  805f00:	2880da26 	beq	r5,r2,80626c <___vfprintf_internal_r+0x1d60>
  805f04:	d9414c17 	ldw	r5,1328(sp)
  805f08:	d9014317 	ldw	r4,1292(sp)
  805f0c:	d9814217 	ldw	r6,1288(sp)
  805f10:	29404014 	ori	r5,r5,256
  805f14:	d9414c15 	stw	r5,1328(sp)
  805f18:	2000cc16 	blt	r4,zero,80624c <___vfprintf_internal_r+0x1d40>
  805f1c:	3021883a 	mov	r16,r6
  805f20:	2023883a 	mov	r17,r4
  805f24:	0039883a 	mov	fp,zero
  805f28:	d9414d17 	ldw	r5,1332(sp)
  805f2c:	00801984 	movi	r2,102
  805f30:	2880b726 	beq	r5,r2,806210 <___vfprintf_internal_r+0x1d04>
  805f34:	00801184 	movi	r2,70
  805f38:	2880b526 	beq	r5,r2,806210 <___vfprintf_internal_r+0x1d04>
  805f3c:	00801944 	movi	r2,101
  805f40:	2880c826 	beq	r5,r2,806264 <___vfprintf_internal_r+0x1d58>
  805f44:	00801144 	movi	r2,69
  805f48:	2880c626 	beq	r5,r2,806264 <___vfprintf_internal_r+0x1d58>
  805f4c:	9829883a 	mov	r20,r19
  805f50:	d9014f17 	ldw	r4,1340(sp)
  805f54:	d8800504 	addi	r2,sp,20
  805f58:	880d883a 	mov	r6,r17
  805f5c:	d8800115 	stw	r2,4(sp)
  805f60:	d8c00604 	addi	r3,sp,24
  805f64:	d8800704 	addi	r2,sp,28
  805f68:	800b883a 	mov	r5,r16
  805f6c:	01c00084 	movi	r7,2
  805f70:	d8c00215 	stw	r3,8(sp)
  805f74:	d8800315 	stw	r2,12(sp)
  805f78:	dd000015 	stw	r20,0(sp)
  805f7c:	08067300 	call	806730 <_dtoa_r>
  805f80:	d9814d17 	ldw	r6,1332(sp)
  805f84:	d8814115 	stw	r2,1284(sp)
  805f88:	008019c4 	movi	r2,103
  805f8c:	30809526 	beq	r6,r2,8061e4 <___vfprintf_internal_r+0x1cd8>
  805f90:	d8c14d17 	ldw	r3,1332(sp)
  805f94:	008011c4 	movi	r2,71
  805f98:	18809226 	beq	r3,r2,8061e4 <___vfprintf_internal_r+0x1cd8>
  805f9c:	d9414117 	ldw	r5,1284(sp)
  805fa0:	d9814d17 	ldw	r6,1332(sp)
  805fa4:	00801984 	movi	r2,102
  805fa8:	2d25883a 	add	r18,r5,r20
  805fac:	30808626 	beq	r6,r2,8061c8 <___vfprintf_internal_r+0x1cbc>
  805fb0:	00801184 	movi	r2,70
  805fb4:	30808426 	beq	r6,r2,8061c8 <___vfprintf_internal_r+0x1cbc>
  805fb8:	000d883a 	mov	r6,zero
  805fbc:	000f883a 	mov	r7,zero
  805fc0:	880b883a 	mov	r5,r17
  805fc4:	8009883a 	mov	r4,r16
  805fc8:	080c1840 	call	80c184 <__eqdf2>
  805fcc:	1000751e 	bne	r2,zero,8061a4 <___vfprintf_internal_r+0x1c98>
  805fd0:	9005883a 	mov	r2,r18
  805fd4:	dc800715 	stw	r18,28(sp)
  805fd8:	d9014117 	ldw	r4,1284(sp)
  805fdc:	d9414d17 	ldw	r5,1332(sp)
  805fe0:	00c019c4 	movi	r3,103
  805fe4:	1125c83a 	sub	r18,r2,r4
  805fe8:	28c06826 	beq	r5,r3,80618c <___vfprintf_internal_r+0x1c80>
  805fec:	008011c4 	movi	r2,71
  805ff0:	28806626 	beq	r5,r2,80618c <___vfprintf_internal_r+0x1c80>
  805ff4:	d9000517 	ldw	r4,20(sp)
  805ff8:	d8c14d17 	ldw	r3,1332(sp)
  805ffc:	00801944 	movi	r2,101
  806000:	10c05516 	blt	r2,r3,806158 <___vfprintf_internal_r+0x1c4c>
  806004:	213fffc4 	addi	r4,r4,-1
  806008:	d9000515 	stw	r4,20(sp)
  80600c:	d8c00805 	stb	r3,32(sp)
  806010:	2021883a 	mov	r16,r4
  806014:	2000c116 	blt	r4,zero,80631c <___vfprintf_internal_r+0x1e10>
  806018:	00800ac4 	movi	r2,43
  80601c:	d8800845 	stb	r2,33(sp)
  806020:	00800244 	movi	r2,9
  806024:	1400af0e 	bge	r2,r16,8062e4 <___vfprintf_internal_r+0x1dd8>
  806028:	1027883a 	mov	r19,r2
  80602c:	dc400b84 	addi	r17,sp,46
  806030:	8009883a 	mov	r4,r16
  806034:	01400284 	movi	r5,10
  806038:	080c3f80 	call	80c3f8 <__modsi3>
  80603c:	10800c04 	addi	r2,r2,48
  806040:	8c7fffc4 	addi	r17,r17,-1
  806044:	8009883a 	mov	r4,r16
  806048:	01400284 	movi	r5,10
  80604c:	88800005 	stb	r2,0(r17)
  806050:	080c3980 	call	80c398 <__divsi3>
  806054:	1021883a 	mov	r16,r2
  806058:	98bff516 	blt	r19,r2,806030 <___vfprintf_internal_r+0x1b24>
  80605c:	10c00c04 	addi	r3,r2,48
  806060:	d88009c4 	addi	r2,sp,39
  806064:	108001c4 	addi	r2,r2,7
  806068:	897fffc4 	addi	r5,r17,-1
  80606c:	88ffffc5 	stb	r3,-1(r17)
  806070:	2880a72e 	bgeu	r5,r2,806310 <___vfprintf_internal_r+0x1e04>
  806074:	1009883a 	mov	r4,r2
  806078:	d9800804 	addi	r6,sp,32
  80607c:	d8c00884 	addi	r3,sp,34
  806080:	28800003 	ldbu	r2,0(r5)
  806084:	29400044 	addi	r5,r5,1
  806088:	18800005 	stb	r2,0(r3)
  80608c:	18c00044 	addi	r3,r3,1
  806090:	293ffb36 	bltu	r5,r4,806080 <___vfprintf_internal_r+0x1b74>
  806094:	1987c83a 	sub	r3,r3,r6
  806098:	00800044 	movi	r2,1
  80609c:	d8c14815 	stw	r3,1312(sp)
  8060a0:	90cf883a 	add	r7,r18,r3
  8060a4:	1480960e 	bge	r2,r18,806300 <___vfprintf_internal_r+0x1df4>
  8060a8:	39c00044 	addi	r7,r7,1
  8060ac:	d9c14515 	stw	r7,1300(sp)
  8060b0:	38003416 	blt	r7,zero,806184 <___vfprintf_internal_r+0x1c78>
  8060b4:	e0803fcc 	andi	r2,fp,255
  8060b8:	1080201c 	xori	r2,r2,128
  8060bc:	10bfe004 	addi	r2,r2,-128
  8060c0:	10004e26 	beq	r2,zero,8061fc <___vfprintf_internal_r+0x1cf0>
  8060c4:	00800b44 	movi	r2,45
  8060c8:	dc814715 	stw	r18,1308(sp)
  8060cc:	d8014615 	stw	zero,1304(sp)
  8060d0:	d8800405 	stb	r2,16(sp)
  8060d4:	003bb106 	br	804f9c <___vfprintf_internal_r+0xa90>
  8060d8:	00800b44 	movi	r2,45
  8060dc:	d8800405 	stb	r2,16(sp)
  8060e0:	003d3306 	br	8055b0 <___vfprintf_internal_r+0x10a4>
  8060e4:	d9014f17 	ldw	r4,1340(sp)
  8060e8:	b00b883a 	mov	r5,r22
  8060ec:	d9800c04 	addi	r6,sp,48
  8060f0:	08044b40 	call	8044b4 <__sprint_r>
  8060f4:	103abd1e 	bne	r2,zero,804bec <___vfprintf_internal_r+0x6e0>
  8060f8:	003abb06 	br	804be8 <___vfprintf_internal_r+0x6dc>
  8060fc:	38800017 	ldw	r2,0(r7)
  806100:	39c00104 	addi	r7,r7,4
  806104:	d9c14015 	stw	r7,1280(sp)
  806108:	d9414b17 	ldw	r5,1324(sp)
  80610c:	d9c14017 	ldw	r7,1280(sp)
  806110:	11400015 	stw	r5,0(r2)
  806114:	00395906 	br	80467c <___vfprintf_internal_r+0x170>
  806118:	980f883a 	mov	r7,r19
  80611c:	dcc14515 	stw	r19,1300(sp)
  806120:	d8014615 	stw	zero,1304(sp)
  806124:	003b9b06 	br	804f94 <___vfprintf_internal_r+0xa88>
  806128:	0027883a 	mov	r19,zero
  80612c:	00397806 	br	804710 <___vfprintf_internal_r+0x204>
  806130:	00c020b4 	movhi	r3,130
  806134:	18f4dd04 	addi	r3,r3,-11404
  806138:	100f883a 	mov	r7,r2
  80613c:	d8814515 	stw	r2,1300(sp)
  806140:	d8c14115 	stw	r3,1284(sp)
  806144:	0039e006 	br	8048c8 <___vfprintf_internal_r+0x3bc>
  806148:	008020b4 	movhi	r2,130
  80614c:	10b4dc04 	addi	r2,r2,-11408
  806150:	d8814115 	stw	r2,1284(sp)
  806154:	003d1c06 	br	8055c8 <___vfprintf_internal_r+0x10bc>
  806158:	d9414d17 	ldw	r5,1332(sp)
  80615c:	00801984 	movi	r2,102
  806160:	28804926 	beq	r5,r2,806288 <___vfprintf_internal_r+0x1d7c>
  806164:	200f883a 	mov	r7,r4
  806168:	24805716 	blt	r4,r18,8062c8 <___vfprintf_internal_r+0x1dbc>
  80616c:	d9414c17 	ldw	r5,1328(sp)
  806170:	2880004c 	andi	r2,r5,1
  806174:	10000126 	beq	r2,zero,80617c <___vfprintf_internal_r+0x1c70>
  806178:	21c00044 	addi	r7,r4,1
  80617c:	d9c14515 	stw	r7,1300(sp)
  806180:	383fcc0e 	bge	r7,zero,8060b4 <___vfprintf_internal_r+0x1ba8>
  806184:	d8014515 	stw	zero,1300(sp)
  806188:	003fca06 	br	8060b4 <___vfprintf_internal_r+0x1ba8>
  80618c:	d9000517 	ldw	r4,20(sp)
  806190:	00bfff04 	movi	r2,-4
  806194:	1100480e 	bge	r2,r4,8062b8 <___vfprintf_internal_r+0x1dac>
  806198:	99004716 	blt	r19,r4,8062b8 <___vfprintf_internal_r+0x1dac>
  80619c:	d8c14d15 	stw	r3,1332(sp)
  8061a0:	003ff006 	br	806164 <___vfprintf_internal_r+0x1c58>
  8061a4:	d8800717 	ldw	r2,28(sp)
  8061a8:	14bf8b2e 	bgeu	r2,r18,805fd8 <___vfprintf_internal_r+0x1acc>
  8061ac:	9007883a 	mov	r3,r18
  8061b0:	01000c04 	movi	r4,48
  8061b4:	11000005 	stb	r4,0(r2)
  8061b8:	10800044 	addi	r2,r2,1
  8061bc:	d8800715 	stw	r2,28(sp)
  8061c0:	18bffc1e 	bne	r3,r2,8061b4 <___vfprintf_internal_r+0x1ca8>
  8061c4:	003f8406 	br	805fd8 <___vfprintf_internal_r+0x1acc>
  8061c8:	d8814117 	ldw	r2,1284(sp)
  8061cc:	10c00007 	ldb	r3,0(r2)
  8061d0:	00800c04 	movi	r2,48
  8061d4:	18805b26 	beq	r3,r2,806344 <___vfprintf_internal_r+0x1e38>
  8061d8:	d9000517 	ldw	r4,20(sp)
  8061dc:	9125883a 	add	r18,r18,r4
  8061e0:	003f7506 	br	805fb8 <___vfprintf_internal_r+0x1aac>
  8061e4:	d9014c17 	ldw	r4,1328(sp)
  8061e8:	2080004c 	andi	r2,r4,1
  8061ec:	1005003a 	cmpeq	r2,r2,zero
  8061f0:	103f6a26 	beq	r2,zero,805f9c <___vfprintf_internal_r+0x1a90>
  8061f4:	d8800717 	ldw	r2,28(sp)
  8061f8:	003f7706 	br	805fd8 <___vfprintf_internal_r+0x1acc>
  8061fc:	d9c14515 	stw	r7,1300(sp)
  806200:	38004d16 	blt	r7,zero,806338 <___vfprintf_internal_r+0x1e2c>
  806204:	dc814715 	stw	r18,1308(sp)
  806208:	d8014615 	stw	zero,1304(sp)
  80620c:	003b6106 	br	804f94 <___vfprintf_internal_r+0xa88>
  806210:	d9014f17 	ldw	r4,1340(sp)
  806214:	d8800504 	addi	r2,sp,20
  806218:	d8800115 	stw	r2,4(sp)
  80621c:	d8c00604 	addi	r3,sp,24
  806220:	d8800704 	addi	r2,sp,28
  806224:	800b883a 	mov	r5,r16
  806228:	880d883a 	mov	r6,r17
  80622c:	01c000c4 	movi	r7,3
  806230:	d8c00215 	stw	r3,8(sp)
  806234:	d8800315 	stw	r2,12(sp)
  806238:	dcc00015 	stw	r19,0(sp)
  80623c:	9829883a 	mov	r20,r19
  806240:	08067300 	call	806730 <_dtoa_r>
  806244:	d8814115 	stw	r2,1284(sp)
  806248:	003f5106 	br	805f90 <___vfprintf_internal_r+0x1a84>
  80624c:	d8c14217 	ldw	r3,1288(sp)
  806250:	d9014317 	ldw	r4,1292(sp)
  806254:	07000b44 	movi	fp,45
  806258:	1821883a 	mov	r16,r3
  80625c:	2460003c 	xorhi	r17,r4,32768
  806260:	003f3106 	br	805f28 <___vfprintf_internal_r+0x1a1c>
  806264:	9d000044 	addi	r20,r19,1
  806268:	003f3906 	br	805f50 <___vfprintf_internal_r+0x1a44>
  80626c:	983f251e 	bne	r19,zero,805f04 <___vfprintf_internal_r+0x19f8>
  806270:	04c00044 	movi	r19,1
  806274:	003f2306 	br	805f04 <___vfprintf_internal_r+0x19f8>
  806278:	04c00184 	movi	r19,6
  80627c:	003f2106 	br	805f04 <___vfprintf_internal_r+0x19f8>
  806280:	d8014515 	stw	zero,1300(sp)
  806284:	003eee06 	br	805e40 <___vfprintf_internal_r+0x1934>
  806288:	200f883a 	mov	r7,r4
  80628c:	0100370e 	bge	zero,r4,80636c <___vfprintf_internal_r+0x1e60>
  806290:	9800031e 	bne	r19,zero,8062a0 <___vfprintf_internal_r+0x1d94>
  806294:	d9814c17 	ldw	r6,1328(sp)
  806298:	3080004c 	andi	r2,r6,1
  80629c:	103fb726 	beq	r2,zero,80617c <___vfprintf_internal_r+0x1c70>
  8062a0:	20800044 	addi	r2,r4,1
  8062a4:	98a7883a 	add	r19,r19,r2
  8062a8:	dcc14515 	stw	r19,1300(sp)
  8062ac:	980f883a 	mov	r7,r19
  8062b0:	983f800e 	bge	r19,zero,8060b4 <___vfprintf_internal_r+0x1ba8>
  8062b4:	003fb306 	br	806184 <___vfprintf_internal_r+0x1c78>
  8062b8:	d9814d17 	ldw	r6,1332(sp)
  8062bc:	31bfff84 	addi	r6,r6,-2
  8062c0:	d9814d15 	stw	r6,1332(sp)
  8062c4:	003f4c06 	br	805ff8 <___vfprintf_internal_r+0x1aec>
  8062c8:	0100180e 	bge	zero,r4,80632c <___vfprintf_internal_r+0x1e20>
  8062cc:	00800044 	movi	r2,1
  8062d0:	1485883a 	add	r2,r2,r18
  8062d4:	d8814515 	stw	r2,1300(sp)
  8062d8:	100f883a 	mov	r7,r2
  8062dc:	103f750e 	bge	r2,zero,8060b4 <___vfprintf_internal_r+0x1ba8>
  8062e0:	003fa806 	br	806184 <___vfprintf_internal_r+0x1c78>
  8062e4:	80c00c04 	addi	r3,r16,48
  8062e8:	00800c04 	movi	r2,48
  8062ec:	d8c008c5 	stb	r3,35(sp)
  8062f0:	d9800804 	addi	r6,sp,32
  8062f4:	d8c00904 	addi	r3,sp,36
  8062f8:	d8800885 	stb	r2,34(sp)
  8062fc:	003f6506 	br	806094 <___vfprintf_internal_r+0x1b88>
  806300:	d9014c17 	ldw	r4,1328(sp)
  806304:	2084703a 	and	r2,r4,r2
  806308:	103f9c26 	beq	r2,zero,80617c <___vfprintf_internal_r+0x1c70>
  80630c:	003f6606 	br	8060a8 <___vfprintf_internal_r+0x1b9c>
  806310:	d9800804 	addi	r6,sp,32
  806314:	d8c00884 	addi	r3,sp,34
  806318:	003f5e06 	br	806094 <___vfprintf_internal_r+0x1b88>
  80631c:	00800b44 	movi	r2,45
  806320:	0121c83a 	sub	r16,zero,r4
  806324:	d8800845 	stb	r2,33(sp)
  806328:	003f3d06 	br	806020 <___vfprintf_internal_r+0x1b14>
  80632c:	00800084 	movi	r2,2
  806330:	1105c83a 	sub	r2,r2,r4
  806334:	003fe606 	br	8062d0 <___vfprintf_internal_r+0x1dc4>
  806338:	d8014515 	stw	zero,1300(sp)
  80633c:	dc814715 	stw	r18,1308(sp)
  806340:	003fb106 	br	806208 <___vfprintf_internal_r+0x1cfc>
  806344:	000d883a 	mov	r6,zero
  806348:	000f883a 	mov	r7,zero
  80634c:	8009883a 	mov	r4,r16
  806350:	880b883a 	mov	r5,r17
  806354:	080c20c0 	call	80c20c <__nedf2>
  806358:	103f9f26 	beq	r2,zero,8061d8 <___vfprintf_internal_r+0x1ccc>
  80635c:	00800044 	movi	r2,1
  806360:	1509c83a 	sub	r4,r2,r20
  806364:	d9000515 	stw	r4,20(sp)
  806368:	003f9b06 	br	8061d8 <___vfprintf_internal_r+0x1ccc>
  80636c:	98000d1e 	bne	r19,zero,8063a4 <___vfprintf_internal_r+0x1e98>
  806370:	d8c14c17 	ldw	r3,1328(sp)
  806374:	1880004c 	andi	r2,r3,1
  806378:	10000a1e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0x1e98>
  80637c:	01000044 	movi	r4,1
  806380:	200f883a 	mov	r7,r4
  806384:	d9014515 	stw	r4,1300(sp)
  806388:	003f4a06 	br	8060b4 <___vfprintf_internal_r+0x1ba8>
  80638c:	3cc00017 	ldw	r19,0(r7)
  806390:	39c00104 	addi	r7,r7,4
  806394:	983d0e0e 	bge	r19,zero,8057d0 <___vfprintf_internal_r+0x12c4>
  806398:	b8c00007 	ldb	r3,0(r23)
  80639c:	04ffffc4 	movi	r19,-1
  8063a0:	0038d906 	br	804708 <___vfprintf_internal_r+0x1fc>
  8063a4:	9cc00084 	addi	r19,r19,2
  8063a8:	dcc14515 	stw	r19,1300(sp)
  8063ac:	980f883a 	mov	r7,r19
  8063b0:	983f400e 	bge	r19,zero,8060b4 <___vfprintf_internal_r+0x1ba8>
  8063b4:	003f7306 	br	806184 <___vfprintf_internal_r+0x1c78>

008063b8 <__vfprintf_internal>:
  8063b8:	008020b4 	movhi	r2,130
  8063bc:	10bc6804 	addi	r2,r2,-3680
  8063c0:	2013883a 	mov	r9,r4
  8063c4:	11000017 	ldw	r4,0(r2)
  8063c8:	2805883a 	mov	r2,r5
  8063cc:	300f883a 	mov	r7,r6
  8063d0:	480b883a 	mov	r5,r9
  8063d4:	100d883a 	mov	r6,r2
  8063d8:	080450c1 	jmpi	80450c <___vfprintf_internal_r>

008063dc <__swsetup_r>:
  8063dc:	008020b4 	movhi	r2,130
  8063e0:	10bc6804 	addi	r2,r2,-3680
  8063e4:	10c00017 	ldw	r3,0(r2)
  8063e8:	defffd04 	addi	sp,sp,-12
  8063ec:	dc400115 	stw	r17,4(sp)
  8063f0:	dc000015 	stw	r16,0(sp)
  8063f4:	dfc00215 	stw	ra,8(sp)
  8063f8:	2023883a 	mov	r17,r4
  8063fc:	2821883a 	mov	r16,r5
  806400:	18000226 	beq	r3,zero,80640c <__swsetup_r+0x30>
  806404:	18800e17 	ldw	r2,56(r3)
  806408:	10001f26 	beq	r2,zero,806488 <__swsetup_r+0xac>
  80640c:	8100030b 	ldhu	r4,12(r16)
  806410:	2080020c 	andi	r2,r4,8
  806414:	10002826 	beq	r2,zero,8064b8 <__swsetup_r+0xdc>
  806418:	81400417 	ldw	r5,16(r16)
  80641c:	28001d26 	beq	r5,zero,806494 <__swsetup_r+0xb8>
  806420:	2080004c 	andi	r2,r4,1
  806424:	1005003a 	cmpeq	r2,r2,zero
  806428:	10000b26 	beq	r2,zero,806458 <__swsetup_r+0x7c>
  80642c:	2080008c 	andi	r2,r4,2
  806430:	10001226 	beq	r2,zero,80647c <__swsetup_r+0xa0>
  806434:	0005883a 	mov	r2,zero
  806438:	80800215 	stw	r2,8(r16)
  80643c:	28000b26 	beq	r5,zero,80646c <__swsetup_r+0x90>
  806440:	0005883a 	mov	r2,zero
  806444:	dfc00217 	ldw	ra,8(sp)
  806448:	dc400117 	ldw	r17,4(sp)
  80644c:	dc000017 	ldw	r16,0(sp)
  806450:	dec00304 	addi	sp,sp,12
  806454:	f800283a 	ret
  806458:	80800517 	ldw	r2,20(r16)
  80645c:	80000215 	stw	zero,8(r16)
  806460:	0085c83a 	sub	r2,zero,r2
  806464:	80800615 	stw	r2,24(r16)
  806468:	283ff51e 	bne	r5,zero,806440 <__swsetup_r+0x64>
  80646c:	2080200c 	andi	r2,r4,128
  806470:	103ff326 	beq	r2,zero,806440 <__swsetup_r+0x64>
  806474:	00bfffc4 	movi	r2,-1
  806478:	003ff206 	br	806444 <__swsetup_r+0x68>
  80647c:	80800517 	ldw	r2,20(r16)
  806480:	80800215 	stw	r2,8(r16)
  806484:	003fed06 	br	80643c <__swsetup_r+0x60>
  806488:	1809883a 	mov	r4,r3
  80648c:	0807f7c0 	call	807f7c <__sinit>
  806490:	003fde06 	br	80640c <__swsetup_r+0x30>
  806494:	20c0a00c 	andi	r3,r4,640
  806498:	00808004 	movi	r2,512
  80649c:	18bfe026 	beq	r3,r2,806420 <__swsetup_r+0x44>
  8064a0:	8809883a 	mov	r4,r17
  8064a4:	800b883a 	mov	r5,r16
  8064a8:	0808cf40 	call	808cf4 <__smakebuf_r>
  8064ac:	8100030b 	ldhu	r4,12(r16)
  8064b0:	81400417 	ldw	r5,16(r16)
  8064b4:	003fda06 	br	806420 <__swsetup_r+0x44>
  8064b8:	2080040c 	andi	r2,r4,16
  8064bc:	103fed26 	beq	r2,zero,806474 <__swsetup_r+0x98>
  8064c0:	2080010c 	andi	r2,r4,4
  8064c4:	10001226 	beq	r2,zero,806510 <__swsetup_r+0x134>
  8064c8:	81400c17 	ldw	r5,48(r16)
  8064cc:	28000526 	beq	r5,zero,8064e4 <__swsetup_r+0x108>
  8064d0:	80801004 	addi	r2,r16,64
  8064d4:	28800226 	beq	r5,r2,8064e0 <__swsetup_r+0x104>
  8064d8:	8809883a 	mov	r4,r17
  8064dc:	08083000 	call	808300 <_free_r>
  8064e0:	80000c15 	stw	zero,48(r16)
  8064e4:	8080030b 	ldhu	r2,12(r16)
  8064e8:	81400417 	ldw	r5,16(r16)
  8064ec:	80000115 	stw	zero,4(r16)
  8064f0:	10bff6cc 	andi	r2,r2,65499
  8064f4:	8080030d 	sth	r2,12(r16)
  8064f8:	81400015 	stw	r5,0(r16)
  8064fc:	8080030b 	ldhu	r2,12(r16)
  806500:	10800214 	ori	r2,r2,8
  806504:	113fffcc 	andi	r4,r2,65535
  806508:	8080030d 	sth	r2,12(r16)
  80650c:	003fc306 	br	80641c <__swsetup_r+0x40>
  806510:	81400417 	ldw	r5,16(r16)
  806514:	003ff906 	br	8064fc <__swsetup_r+0x120>

00806518 <quorem>:
  806518:	28c00417 	ldw	r3,16(r5)
  80651c:	20800417 	ldw	r2,16(r4)
  806520:	defff604 	addi	sp,sp,-40
  806524:	ddc00715 	stw	r23,28(sp)
  806528:	dd400515 	stw	r21,20(sp)
  80652c:	dfc00915 	stw	ra,36(sp)
  806530:	df000815 	stw	fp,32(sp)
  806534:	dd800615 	stw	r22,24(sp)
  806538:	dd000415 	stw	r20,16(sp)
  80653c:	dcc00315 	stw	r19,12(sp)
  806540:	dc800215 	stw	r18,8(sp)
  806544:	dc400115 	stw	r17,4(sp)
  806548:	dc000015 	stw	r16,0(sp)
  80654c:	202f883a 	mov	r23,r4
  806550:	282b883a 	mov	r21,r5
  806554:	10c07416 	blt	r2,r3,806728 <quorem+0x210>
  806558:	1c7fffc4 	addi	r17,r3,-1
  80655c:	8c45883a 	add	r2,r17,r17
  806560:	1085883a 	add	r2,r2,r2
  806564:	2c000504 	addi	r16,r5,20
  806568:	24c00504 	addi	r19,r4,20
  80656c:	14ed883a 	add	r22,r2,r19
  806570:	80a5883a 	add	r18,r16,r2
  806574:	b7000017 	ldw	fp,0(r22)
  806578:	91400017 	ldw	r5,0(r18)
  80657c:	e009883a 	mov	r4,fp
  806580:	29400044 	addi	r5,r5,1
  806584:	080c4580 	call	80c458 <__udivsi3>
  806588:	1029883a 	mov	r20,r2
  80658c:	10003c1e 	bne	r2,zero,806680 <quorem+0x168>
  806590:	a80b883a 	mov	r5,r21
  806594:	b809883a 	mov	r4,r23
  806598:	0809a200 	call	809a20 <__mcmp>
  80659c:	10002b16 	blt	r2,zero,80664c <quorem+0x134>
  8065a0:	a5000044 	addi	r20,r20,1
  8065a4:	980f883a 	mov	r7,r19
  8065a8:	0011883a 	mov	r8,zero
  8065ac:	0009883a 	mov	r4,zero
  8065b0:	81400017 	ldw	r5,0(r16)
  8065b4:	38c00017 	ldw	r3,0(r7)
  8065b8:	84000104 	addi	r16,r16,4
  8065bc:	28bfffcc 	andi	r2,r5,65535
  8065c0:	2085883a 	add	r2,r4,r2
  8065c4:	11bfffcc 	andi	r6,r2,65535
  8065c8:	193fffcc 	andi	r4,r3,65535
  8065cc:	1004d43a 	srli	r2,r2,16
  8065d0:	280ad43a 	srli	r5,r5,16
  8065d4:	2189c83a 	sub	r4,r4,r6
  8065d8:	2209883a 	add	r4,r4,r8
  8065dc:	1806d43a 	srli	r3,r3,16
  8065e0:	288b883a 	add	r5,r5,r2
  8065e4:	200dd43a 	srai	r6,r4,16
  8065e8:	28bfffcc 	andi	r2,r5,65535
  8065ec:	1887c83a 	sub	r3,r3,r2
  8065f0:	1987883a 	add	r3,r3,r6
  8065f4:	3900000d 	sth	r4,0(r7)
  8065f8:	38c0008d 	sth	r3,2(r7)
  8065fc:	2808d43a 	srli	r4,r5,16
  806600:	39c00104 	addi	r7,r7,4
  806604:	1811d43a 	srai	r8,r3,16
  806608:	943fe92e 	bgeu	r18,r16,8065b0 <quorem+0x98>
  80660c:	8c45883a 	add	r2,r17,r17
  806610:	1085883a 	add	r2,r2,r2
  806614:	9885883a 	add	r2,r19,r2
  806618:	10c00017 	ldw	r3,0(r2)
  80661c:	18000b1e 	bne	r3,zero,80664c <quorem+0x134>
  806620:	113fff04 	addi	r4,r2,-4
  806624:	9900082e 	bgeu	r19,r4,806648 <quorem+0x130>
  806628:	10bfff17 	ldw	r2,-4(r2)
  80662c:	10000326 	beq	r2,zero,80663c <quorem+0x124>
  806630:	00000506 	br	806648 <quorem+0x130>
  806634:	20800017 	ldw	r2,0(r4)
  806638:	1000031e 	bne	r2,zero,806648 <quorem+0x130>
  80663c:	213fff04 	addi	r4,r4,-4
  806640:	8c7fffc4 	addi	r17,r17,-1
  806644:	993ffb36 	bltu	r19,r4,806634 <quorem+0x11c>
  806648:	bc400415 	stw	r17,16(r23)
  80664c:	a005883a 	mov	r2,r20
  806650:	dfc00917 	ldw	ra,36(sp)
  806654:	df000817 	ldw	fp,32(sp)
  806658:	ddc00717 	ldw	r23,28(sp)
  80665c:	dd800617 	ldw	r22,24(sp)
  806660:	dd400517 	ldw	r21,20(sp)
  806664:	dd000417 	ldw	r20,16(sp)
  806668:	dcc00317 	ldw	r19,12(sp)
  80666c:	dc800217 	ldw	r18,8(sp)
  806670:	dc400117 	ldw	r17,4(sp)
  806674:	dc000017 	ldw	r16,0(sp)
  806678:	dec00a04 	addi	sp,sp,40
  80667c:	f800283a 	ret
  806680:	980f883a 	mov	r7,r19
  806684:	8011883a 	mov	r8,r16
  806688:	0013883a 	mov	r9,zero
  80668c:	000d883a 	mov	r6,zero
  806690:	40c00017 	ldw	r3,0(r8)
  806694:	39000017 	ldw	r4,0(r7)
  806698:	42000104 	addi	r8,r8,4
  80669c:	18bfffcc 	andi	r2,r3,65535
  8066a0:	a085383a 	mul	r2,r20,r2
  8066a4:	1806d43a 	srli	r3,r3,16
  8066a8:	217fffcc 	andi	r5,r4,65535
  8066ac:	3085883a 	add	r2,r6,r2
  8066b0:	11bfffcc 	andi	r6,r2,65535
  8066b4:	a0c7383a 	mul	r3,r20,r3
  8066b8:	1004d43a 	srli	r2,r2,16
  8066bc:	298bc83a 	sub	r5,r5,r6
  8066c0:	2a4b883a 	add	r5,r5,r9
  8066c4:	2008d43a 	srli	r4,r4,16
  8066c8:	1887883a 	add	r3,r3,r2
  8066cc:	280dd43a 	srai	r6,r5,16
  8066d0:	18bfffcc 	andi	r2,r3,65535
  8066d4:	2089c83a 	sub	r4,r4,r2
  8066d8:	2189883a 	add	r4,r4,r6
  8066dc:	3900008d 	sth	r4,2(r7)
  8066e0:	3940000d 	sth	r5,0(r7)
  8066e4:	180cd43a 	srli	r6,r3,16
  8066e8:	39c00104 	addi	r7,r7,4
  8066ec:	2013d43a 	srai	r9,r4,16
  8066f0:	923fe72e 	bgeu	r18,r8,806690 <quorem+0x178>
  8066f4:	e03fa61e 	bne	fp,zero,806590 <quorem+0x78>
  8066f8:	b0ffff04 	addi	r3,r22,-4
  8066fc:	98c0082e 	bgeu	r19,r3,806720 <quorem+0x208>
  806700:	b0bfff17 	ldw	r2,-4(r22)
  806704:	10000326 	beq	r2,zero,806714 <quorem+0x1fc>
  806708:	00000506 	br	806720 <quorem+0x208>
  80670c:	18800017 	ldw	r2,0(r3)
  806710:	1000031e 	bne	r2,zero,806720 <quorem+0x208>
  806714:	18ffff04 	addi	r3,r3,-4
  806718:	8c7fffc4 	addi	r17,r17,-1
  80671c:	98fffb36 	bltu	r19,r3,80670c <quorem+0x1f4>
  806720:	bc400415 	stw	r17,16(r23)
  806724:	003f9a06 	br	806590 <quorem+0x78>
  806728:	0005883a 	mov	r2,zero
  80672c:	003fc806 	br	806650 <quorem+0x138>

00806730 <_dtoa_r>:
  806730:	22001017 	ldw	r8,64(r4)
  806734:	deffda04 	addi	sp,sp,-152
  806738:	dd402115 	stw	r21,132(sp)
  80673c:	dd002015 	stw	r20,128(sp)
  806740:	dc801e15 	stw	r18,120(sp)
  806744:	dc401d15 	stw	r17,116(sp)
  806748:	dfc02515 	stw	ra,148(sp)
  80674c:	df002415 	stw	fp,144(sp)
  806750:	ddc02315 	stw	r23,140(sp)
  806754:	dd802215 	stw	r22,136(sp)
  806758:	dcc01f15 	stw	r19,124(sp)
  80675c:	dc001c15 	stw	r16,112(sp)
  806760:	d9001615 	stw	r4,88(sp)
  806764:	3023883a 	mov	r17,r6
  806768:	2829883a 	mov	r20,r5
  80676c:	d9c01715 	stw	r7,92(sp)
  806770:	dc802817 	ldw	r18,160(sp)
  806774:	302b883a 	mov	r21,r6
  806778:	40000a26 	beq	r8,zero,8067a4 <_dtoa_r+0x74>
  80677c:	20801117 	ldw	r2,68(r4)
  806780:	400b883a 	mov	r5,r8
  806784:	40800115 	stw	r2,4(r8)
  806788:	20c01117 	ldw	r3,68(r4)
  80678c:	00800044 	movi	r2,1
  806790:	10c4983a 	sll	r2,r2,r3
  806794:	40800215 	stw	r2,8(r8)
  806798:	08098c40 	call	8098c4 <_Bfree>
  80679c:	d8c01617 	ldw	r3,88(sp)
  8067a0:	18001015 	stw	zero,64(r3)
  8067a4:	8800a316 	blt	r17,zero,806a34 <_dtoa_r+0x304>
  8067a8:	90000015 	stw	zero,0(r18)
  8067ac:	a8dffc2c 	andhi	r3,r21,32752
  8067b0:	009ffc34 	movhi	r2,32752
  8067b4:	18809126 	beq	r3,r2,8069fc <_dtoa_r+0x2cc>
  8067b8:	000d883a 	mov	r6,zero
  8067bc:	000f883a 	mov	r7,zero
  8067c0:	a009883a 	mov	r4,r20
  8067c4:	a80b883a 	mov	r5,r21
  8067c8:	dd001215 	stw	r20,72(sp)
  8067cc:	dd401315 	stw	r21,76(sp)
  8067d0:	080c20c0 	call	80c20c <__nedf2>
  8067d4:	1000171e 	bne	r2,zero,806834 <_dtoa_r+0x104>
  8067d8:	d9802717 	ldw	r6,156(sp)
  8067dc:	00800044 	movi	r2,1
  8067e0:	30800015 	stw	r2,0(r6)
  8067e4:	d8802917 	ldw	r2,164(sp)
  8067e8:	10029b26 	beq	r2,zero,807258 <_dtoa_r+0xb28>
  8067ec:	d9002917 	ldw	r4,164(sp)
  8067f0:	008020b4 	movhi	r2,130
  8067f4:	10b4eb44 	addi	r2,r2,-11347
  8067f8:	10ffffc4 	addi	r3,r2,-1
  8067fc:	20800015 	stw	r2,0(r4)
  806800:	1805883a 	mov	r2,r3
  806804:	dfc02517 	ldw	ra,148(sp)
  806808:	df002417 	ldw	fp,144(sp)
  80680c:	ddc02317 	ldw	r23,140(sp)
  806810:	dd802217 	ldw	r22,136(sp)
  806814:	dd402117 	ldw	r21,132(sp)
  806818:	dd002017 	ldw	r20,128(sp)
  80681c:	dcc01f17 	ldw	r19,124(sp)
  806820:	dc801e17 	ldw	r18,120(sp)
  806824:	dc401d17 	ldw	r17,116(sp)
  806828:	dc001c17 	ldw	r16,112(sp)
  80682c:	dec02604 	addi	sp,sp,152
  806830:	f800283a 	ret
  806834:	d9001617 	ldw	r4,88(sp)
  806838:	d9401217 	ldw	r5,72(sp)
  80683c:	d8800104 	addi	r2,sp,4
  806840:	a80d883a 	mov	r6,r21
  806844:	d9c00204 	addi	r7,sp,8
  806848:	d8800015 	stw	r2,0(sp)
  80684c:	0809f000 	call	809f00 <__d2b>
  806850:	d8800715 	stw	r2,28(sp)
  806854:	a804d53a 	srli	r2,r21,20
  806858:	1101ffcc 	andi	r4,r2,2047
  80685c:	20008626 	beq	r4,zero,806a78 <_dtoa_r+0x348>
  806860:	d8c01217 	ldw	r3,72(sp)
  806864:	00800434 	movhi	r2,16
  806868:	10bfffc4 	addi	r2,r2,-1
  80686c:	ddc00117 	ldw	r23,4(sp)
  806870:	a884703a 	and	r2,r21,r2
  806874:	1811883a 	mov	r8,r3
  806878:	124ffc34 	orhi	r9,r2,16368
  80687c:	25bf0044 	addi	r22,r4,-1023
  806880:	d8000815 	stw	zero,32(sp)
  806884:	0005883a 	mov	r2,zero
  806888:	00cffe34 	movhi	r3,16376
  80688c:	480b883a 	mov	r5,r9
  806890:	4009883a 	mov	r4,r8
  806894:	180f883a 	mov	r7,r3
  806898:	100d883a 	mov	r6,r2
  80689c:	08031480 	call	803148 <__subdf3>
  8068a0:	0218dbf4 	movhi	r8,25455
  8068a4:	4210d844 	addi	r8,r8,17249
  8068a8:	024ff4f4 	movhi	r9,16339
  8068ac:	4a61e9c4 	addi	r9,r9,-30809
  8068b0:	480f883a 	mov	r7,r9
  8068b4:	400d883a 	mov	r6,r8
  8068b8:	180b883a 	mov	r5,r3
  8068bc:	1009883a 	mov	r4,r2
  8068c0:	080323c0 	call	80323c <__muldf3>
  8068c4:	0222d874 	movhi	r8,35681
  8068c8:	42322cc4 	addi	r8,r8,-14157
  8068cc:	024ff1f4 	movhi	r9,16327
  8068d0:	4a628a04 	addi	r9,r9,-30168
  8068d4:	480f883a 	mov	r7,r9
  8068d8:	400d883a 	mov	r6,r8
  8068dc:	180b883a 	mov	r5,r3
  8068e0:	1009883a 	mov	r4,r2
  8068e4:	08031c80 	call	8031c8 <__adddf3>
  8068e8:	b009883a 	mov	r4,r22
  8068ec:	1021883a 	mov	r16,r2
  8068f0:	1823883a 	mov	r17,r3
  8068f4:	08038e00 	call	8038e0 <__floatsidf>
  8068f8:	021427f4 	movhi	r8,20639
  8068fc:	421e7ec4 	addi	r8,r8,31227
  806900:	024ff4f4 	movhi	r9,16339
  806904:	4a5104c4 	addi	r9,r9,17427
  806908:	480f883a 	mov	r7,r9
  80690c:	400d883a 	mov	r6,r8
  806910:	180b883a 	mov	r5,r3
  806914:	1009883a 	mov	r4,r2
  806918:	080323c0 	call	80323c <__muldf3>
  80691c:	180f883a 	mov	r7,r3
  806920:	880b883a 	mov	r5,r17
  806924:	100d883a 	mov	r6,r2
  806928:	8009883a 	mov	r4,r16
  80692c:	08031c80 	call	8031c8 <__adddf3>
  806930:	1009883a 	mov	r4,r2
  806934:	180b883a 	mov	r5,r3
  806938:	1021883a 	mov	r16,r2
  80693c:	1823883a 	mov	r17,r3
  806940:	08039d80 	call	8039d8 <__fixdfsi>
  806944:	000d883a 	mov	r6,zero
  806948:	000f883a 	mov	r7,zero
  80694c:	8009883a 	mov	r4,r16
  806950:	880b883a 	mov	r5,r17
  806954:	d8800d15 	stw	r2,52(sp)
  806958:	08038580 	call	803858 <__ltdf2>
  80695c:	10031716 	blt	r2,zero,8075bc <_dtoa_r+0xe8c>
  806960:	d8c00d17 	ldw	r3,52(sp)
  806964:	00800584 	movi	r2,22
  806968:	10c1482e 	bgeu	r2,r3,806e8c <_dtoa_r+0x75c>
  80696c:	01000044 	movi	r4,1
  806970:	d9000c15 	stw	r4,48(sp)
  806974:	bd85c83a 	sub	r2,r23,r22
  806978:	11bfffc4 	addi	r6,r2,-1
  80697c:	30030b16 	blt	r6,zero,8075ac <_dtoa_r+0xe7c>
  806980:	d9800a15 	stw	r6,40(sp)
  806984:	d8001115 	stw	zero,68(sp)
  806988:	d8c00d17 	ldw	r3,52(sp)
  80698c:	1802ff16 	blt	r3,zero,80758c <_dtoa_r+0xe5c>
  806990:	d9000a17 	ldw	r4,40(sp)
  806994:	d8c00915 	stw	r3,36(sp)
  806998:	d8001015 	stw	zero,64(sp)
  80699c:	20c9883a 	add	r4,r4,r3
  8069a0:	d9000a15 	stw	r4,40(sp)
  8069a4:	d9001717 	ldw	r4,92(sp)
  8069a8:	00800244 	movi	r2,9
  8069ac:	11004636 	bltu	r2,r4,806ac8 <_dtoa_r+0x398>
  8069b0:	00800144 	movi	r2,5
  8069b4:	11020416 	blt	r2,r4,8071c8 <_dtoa_r+0xa98>
  8069b8:	04400044 	movi	r17,1
  8069bc:	d8c01717 	ldw	r3,92(sp)
  8069c0:	00800144 	movi	r2,5
  8069c4:	10c1ed36 	bltu	r2,r3,80717c <_dtoa_r+0xa4c>
  8069c8:	18c5883a 	add	r2,r3,r3
  8069cc:	1085883a 	add	r2,r2,r2
  8069d0:	00c02034 	movhi	r3,128
  8069d4:	18da7904 	addi	r3,r3,27108
  8069d8:	10c5883a 	add	r2,r2,r3
  8069dc:	11000017 	ldw	r4,0(r2)
  8069e0:	2000683a 	jmp	r4
  8069e4:	00806ad0 	cmplti	r2,zero,427
  8069e8:	00806ad0 	cmplti	r2,zero,427
  8069ec:	008074d0 	cmplti	r2,zero,467
  8069f0:	008074a8 	cmpgeui	r2,zero,466
  8069f4:	008074ec 	andhi	r2,zero,467
  8069f8:	008074f8 	rdprs	r2,zero,467
  8069fc:	d9002717 	ldw	r4,156(sp)
  806a00:	0089c3c4 	movi	r2,9999
  806a04:	20800015 	stw	r2,0(r4)
  806a08:	a0001026 	beq	r20,zero,806a4c <_dtoa_r+0x31c>
  806a0c:	00c020b4 	movhi	r3,130
  806a10:	18f4f704 	addi	r3,r3,-11300
  806a14:	d9802917 	ldw	r6,164(sp)
  806a18:	303f7926 	beq	r6,zero,806800 <_dtoa_r+0xd0>
  806a1c:	188000c7 	ldb	r2,3(r3)
  806a20:	190000c4 	addi	r4,r3,3
  806a24:	1000101e 	bne	r2,zero,806a68 <_dtoa_r+0x338>
  806a28:	d8802917 	ldw	r2,164(sp)
  806a2c:	11000015 	stw	r4,0(r2)
  806a30:	003f7306 	br	806800 <_dtoa_r+0xd0>
  806a34:	00a00034 	movhi	r2,32768
  806a38:	10bfffc4 	addi	r2,r2,-1
  806a3c:	00c00044 	movi	r3,1
  806a40:	88aa703a 	and	r21,r17,r2
  806a44:	90c00015 	stw	r3,0(r18)
  806a48:	003f5806 	br	8067ac <_dtoa_r+0x7c>
  806a4c:	00800434 	movhi	r2,16
  806a50:	10bfffc4 	addi	r2,r2,-1
  806a54:	a884703a 	and	r2,r21,r2
  806a58:	103fec1e 	bne	r2,zero,806a0c <_dtoa_r+0x2dc>
  806a5c:	00c020b4 	movhi	r3,130
  806a60:	18f4f404 	addi	r3,r3,-11312
  806a64:	003feb06 	br	806a14 <_dtoa_r+0x2e4>
  806a68:	d8802917 	ldw	r2,164(sp)
  806a6c:	19000204 	addi	r4,r3,8
  806a70:	11000015 	stw	r4,0(r2)
  806a74:	003f6206 	br	806800 <_dtoa_r+0xd0>
  806a78:	ddc00117 	ldw	r23,4(sp)
  806a7c:	d8800217 	ldw	r2,8(sp)
  806a80:	01000804 	movi	r4,32
  806a84:	b8c10c84 	addi	r3,r23,1074
  806a88:	18a3883a 	add	r17,r3,r2
  806a8c:	2441b80e 	bge	r4,r17,807170 <_dtoa_r+0xa40>
  806a90:	00c01004 	movi	r3,64
  806a94:	1c47c83a 	sub	r3,r3,r17
  806a98:	88bff804 	addi	r2,r17,-32
  806a9c:	a8c6983a 	sll	r3,r21,r3
  806aa0:	a084d83a 	srl	r2,r20,r2
  806aa4:	1888b03a 	or	r4,r3,r2
  806aa8:	0803ab00 	call	803ab0 <__floatunsidf>
  806aac:	1011883a 	mov	r8,r2
  806ab0:	00bf8434 	movhi	r2,65040
  806ab4:	01000044 	movi	r4,1
  806ab8:	10d3883a 	add	r9,r2,r3
  806abc:	8dbef344 	addi	r22,r17,-1075
  806ac0:	d9000815 	stw	r4,32(sp)
  806ac4:	003f6f06 	br	806884 <_dtoa_r+0x154>
  806ac8:	d8001715 	stw	zero,92(sp)
  806acc:	04400044 	movi	r17,1
  806ad0:	00bfffc4 	movi	r2,-1
  806ad4:	00c00044 	movi	r3,1
  806ad8:	d8800e15 	stw	r2,56(sp)
  806adc:	d8002615 	stw	zero,152(sp)
  806ae0:	d8800f15 	stw	r2,60(sp)
  806ae4:	d8c00b15 	stw	r3,44(sp)
  806ae8:	1021883a 	mov	r16,r2
  806aec:	d8801617 	ldw	r2,88(sp)
  806af0:	10001115 	stw	zero,68(r2)
  806af4:	d8801617 	ldw	r2,88(sp)
  806af8:	11401117 	ldw	r5,68(r2)
  806afc:	1009883a 	mov	r4,r2
  806b00:	0809e440 	call	809e44 <_Balloc>
  806b04:	d8c01617 	ldw	r3,88(sp)
  806b08:	d8800515 	stw	r2,20(sp)
  806b0c:	18801015 	stw	r2,64(r3)
  806b10:	00800384 	movi	r2,14
  806b14:	14006836 	bltu	r2,r16,806cb8 <_dtoa_r+0x588>
  806b18:	8805003a 	cmpeq	r2,r17,zero
  806b1c:	1000661e 	bne	r2,zero,806cb8 <_dtoa_r+0x588>
  806b20:	d9000d17 	ldw	r4,52(sp)
  806b24:	0102300e 	bge	zero,r4,8073e8 <_dtoa_r+0xcb8>
  806b28:	208003cc 	andi	r2,r4,15
  806b2c:	100490fa 	slli	r2,r2,3
  806b30:	2025d13a 	srai	r18,r4,4
  806b34:	00c020b4 	movhi	r3,130
  806b38:	18f50804 	addi	r3,r3,-11232
  806b3c:	10c5883a 	add	r2,r2,r3
  806b40:	90c0040c 	andi	r3,r18,16
  806b44:	14000017 	ldw	r16,0(r2)
  806b48:	14400117 	ldw	r17,4(r2)
  806b4c:	18036a1e 	bne	r3,zero,8078f8 <_dtoa_r+0x11c8>
  806b50:	05800084 	movi	r22,2
  806b54:	90001026 	beq	r18,zero,806b98 <_dtoa_r+0x468>
  806b58:	04c020b4 	movhi	r19,130
  806b5c:	9cf53a04 	addi	r19,r19,-11032
  806b60:	9080004c 	andi	r2,r18,1
  806b64:	1005003a 	cmpeq	r2,r2,zero
  806b68:	1000081e 	bne	r2,zero,806b8c <_dtoa_r+0x45c>
  806b6c:	99800017 	ldw	r6,0(r19)
  806b70:	99c00117 	ldw	r7,4(r19)
  806b74:	880b883a 	mov	r5,r17
  806b78:	8009883a 	mov	r4,r16
  806b7c:	080323c0 	call	80323c <__muldf3>
  806b80:	1021883a 	mov	r16,r2
  806b84:	b5800044 	addi	r22,r22,1
  806b88:	1823883a 	mov	r17,r3
  806b8c:	9025d07a 	srai	r18,r18,1
  806b90:	9cc00204 	addi	r19,r19,8
  806b94:	903ff21e 	bne	r18,zero,806b60 <_dtoa_r+0x430>
  806b98:	a80b883a 	mov	r5,r21
  806b9c:	a009883a 	mov	r4,r20
  806ba0:	880f883a 	mov	r7,r17
  806ba4:	800d883a 	mov	r6,r16
  806ba8:	08036000 	call	803600 <__divdf3>
  806bac:	1029883a 	mov	r20,r2
  806bb0:	182b883a 	mov	r21,r3
  806bb4:	d8c00c17 	ldw	r3,48(sp)
  806bb8:	1805003a 	cmpeq	r2,r3,zero
  806bbc:	1000081e 	bne	r2,zero,806be0 <_dtoa_r+0x4b0>
  806bc0:	0005883a 	mov	r2,zero
  806bc4:	00cffc34 	movhi	r3,16368
  806bc8:	180f883a 	mov	r7,r3
  806bcc:	a009883a 	mov	r4,r20
  806bd0:	a80b883a 	mov	r5,r21
  806bd4:	100d883a 	mov	r6,r2
  806bd8:	08038580 	call	803858 <__ltdf2>
  806bdc:	1003fe16 	blt	r2,zero,807bd8 <_dtoa_r+0x14a8>
  806be0:	b009883a 	mov	r4,r22
  806be4:	08038e00 	call	8038e0 <__floatsidf>
  806be8:	180b883a 	mov	r5,r3
  806bec:	1009883a 	mov	r4,r2
  806bf0:	a00d883a 	mov	r6,r20
  806bf4:	a80f883a 	mov	r7,r21
  806bf8:	080323c0 	call	80323c <__muldf3>
  806bfc:	0011883a 	mov	r8,zero
  806c00:	02500734 	movhi	r9,16412
  806c04:	1009883a 	mov	r4,r2
  806c08:	180b883a 	mov	r5,r3
  806c0c:	480f883a 	mov	r7,r9
  806c10:	400d883a 	mov	r6,r8
  806c14:	08031c80 	call	8031c8 <__adddf3>
  806c18:	d9000f17 	ldw	r4,60(sp)
  806c1c:	102d883a 	mov	r22,r2
  806c20:	00bf3034 	movhi	r2,64704
  806c24:	18b9883a 	add	fp,r3,r2
  806c28:	e02f883a 	mov	r23,fp
  806c2c:	20028f1e 	bne	r4,zero,80766c <_dtoa_r+0xf3c>
  806c30:	0005883a 	mov	r2,zero
  806c34:	00d00534 	movhi	r3,16404
  806c38:	a009883a 	mov	r4,r20
  806c3c:	a80b883a 	mov	r5,r21
  806c40:	180f883a 	mov	r7,r3
  806c44:	100d883a 	mov	r6,r2
  806c48:	08031480 	call	803148 <__subdf3>
  806c4c:	1009883a 	mov	r4,r2
  806c50:	e00f883a 	mov	r7,fp
  806c54:	180b883a 	mov	r5,r3
  806c58:	b00d883a 	mov	r6,r22
  806c5c:	1025883a 	mov	r18,r2
  806c60:	1827883a 	mov	r19,r3
  806c64:	080c2940 	call	80c294 <__gtdf2>
  806c68:	00834f16 	blt	zero,r2,8079a8 <_dtoa_r+0x1278>
  806c6c:	e0e0003c 	xorhi	r3,fp,32768
  806c70:	9009883a 	mov	r4,r18
  806c74:	980b883a 	mov	r5,r19
  806c78:	180f883a 	mov	r7,r3
  806c7c:	b00d883a 	mov	r6,r22
  806c80:	08038580 	call	803858 <__ltdf2>
  806c84:	1000080e 	bge	r2,zero,806ca8 <_dtoa_r+0x578>
  806c88:	0027883a 	mov	r19,zero
  806c8c:	0025883a 	mov	r18,zero
  806c90:	d8802617 	ldw	r2,152(sp)
  806c94:	df000517 	ldw	fp,20(sp)
  806c98:	d8000615 	stw	zero,24(sp)
  806c9c:	0084303a 	nor	r2,zero,r2
  806ca0:	d8800d15 	stw	r2,52(sp)
  806ca4:	00019b06 	br	807314 <_dtoa_r+0xbe4>
  806ca8:	d9801217 	ldw	r6,72(sp)
  806cac:	d8801317 	ldw	r2,76(sp)
  806cb0:	3029883a 	mov	r20,r6
  806cb4:	102b883a 	mov	r21,r2
  806cb8:	d8c00217 	ldw	r3,8(sp)
  806cbc:	18008516 	blt	r3,zero,806ed4 <_dtoa_r+0x7a4>
  806cc0:	d9000d17 	ldw	r4,52(sp)
  806cc4:	00800384 	movi	r2,14
  806cc8:	11008216 	blt	r2,r4,806ed4 <_dtoa_r+0x7a4>
  806ccc:	200490fa 	slli	r2,r4,3
  806cd0:	d9802617 	ldw	r6,152(sp)
  806cd4:	00c020b4 	movhi	r3,130
  806cd8:	18f50804 	addi	r3,r3,-11232
  806cdc:	10c5883a 	add	r2,r2,r3
  806ce0:	14800017 	ldw	r18,0(r2)
  806ce4:	14c00117 	ldw	r19,4(r2)
  806ce8:	30031e16 	blt	r6,zero,807964 <_dtoa_r+0x1234>
  806cec:	d9000517 	ldw	r4,20(sp)
  806cf0:	d8c00f17 	ldw	r3,60(sp)
  806cf4:	a823883a 	mov	r17,r21
  806cf8:	a021883a 	mov	r16,r20
  806cfc:	192b883a 	add	r21,r3,r4
  806d00:	2039883a 	mov	fp,r4
  806d04:	00000f06 	br	806d44 <_dtoa_r+0x614>
  806d08:	0005883a 	mov	r2,zero
  806d0c:	00d00934 	movhi	r3,16420
  806d10:	5009883a 	mov	r4,r10
  806d14:	580b883a 	mov	r5,r11
  806d18:	180f883a 	mov	r7,r3
  806d1c:	100d883a 	mov	r6,r2
  806d20:	080323c0 	call	80323c <__muldf3>
  806d24:	180b883a 	mov	r5,r3
  806d28:	000d883a 	mov	r6,zero
  806d2c:	000f883a 	mov	r7,zero
  806d30:	1009883a 	mov	r4,r2
  806d34:	1021883a 	mov	r16,r2
  806d38:	1823883a 	mov	r17,r3
  806d3c:	080c20c0 	call	80c20c <__nedf2>
  806d40:	10004526 	beq	r2,zero,806e58 <_dtoa_r+0x728>
  806d44:	900d883a 	mov	r6,r18
  806d48:	980f883a 	mov	r7,r19
  806d4c:	8009883a 	mov	r4,r16
  806d50:	880b883a 	mov	r5,r17
  806d54:	08036000 	call	803600 <__divdf3>
  806d58:	180b883a 	mov	r5,r3
  806d5c:	1009883a 	mov	r4,r2
  806d60:	08039d80 	call	8039d8 <__fixdfsi>
  806d64:	1009883a 	mov	r4,r2
  806d68:	1029883a 	mov	r20,r2
  806d6c:	08038e00 	call	8038e0 <__floatsidf>
  806d70:	180f883a 	mov	r7,r3
  806d74:	9009883a 	mov	r4,r18
  806d78:	980b883a 	mov	r5,r19
  806d7c:	100d883a 	mov	r6,r2
  806d80:	080323c0 	call	80323c <__muldf3>
  806d84:	180f883a 	mov	r7,r3
  806d88:	880b883a 	mov	r5,r17
  806d8c:	8009883a 	mov	r4,r16
  806d90:	100d883a 	mov	r6,r2
  806d94:	08031480 	call	803148 <__subdf3>
  806d98:	1015883a 	mov	r10,r2
  806d9c:	a0800c04 	addi	r2,r20,48
  806da0:	e0800005 	stb	r2,0(fp)
  806da4:	e7000044 	addi	fp,fp,1
  806da8:	1817883a 	mov	r11,r3
  806dac:	e57fd61e 	bne	fp,r21,806d08 <_dtoa_r+0x5d8>
  806db0:	500d883a 	mov	r6,r10
  806db4:	180f883a 	mov	r7,r3
  806db8:	5009883a 	mov	r4,r10
  806dbc:	180b883a 	mov	r5,r3
  806dc0:	08031c80 	call	8031c8 <__adddf3>
  806dc4:	100d883a 	mov	r6,r2
  806dc8:	9009883a 	mov	r4,r18
  806dcc:	980b883a 	mov	r5,r19
  806dd0:	180f883a 	mov	r7,r3
  806dd4:	1021883a 	mov	r16,r2
  806dd8:	1823883a 	mov	r17,r3
  806ddc:	08038580 	call	803858 <__ltdf2>
  806de0:	10000816 	blt	r2,zero,806e04 <_dtoa_r+0x6d4>
  806de4:	980b883a 	mov	r5,r19
  806de8:	800d883a 	mov	r6,r16
  806dec:	880f883a 	mov	r7,r17
  806df0:	9009883a 	mov	r4,r18
  806df4:	080c1840 	call	80c184 <__eqdf2>
  806df8:	1000171e 	bne	r2,zero,806e58 <_dtoa_r+0x728>
  806dfc:	a080004c 	andi	r2,r20,1
  806e00:	10001526 	beq	r2,zero,806e58 <_dtoa_r+0x728>
  806e04:	d8800d17 	ldw	r2,52(sp)
  806e08:	d8800415 	stw	r2,16(sp)
  806e0c:	e009883a 	mov	r4,fp
  806e10:	213fffc4 	addi	r4,r4,-1
  806e14:	20c00007 	ldb	r3,0(r4)
  806e18:	00800e44 	movi	r2,57
  806e1c:	1880081e 	bne	r3,r2,806e40 <_dtoa_r+0x710>
  806e20:	d8800517 	ldw	r2,20(sp)
  806e24:	113ffa1e 	bne	r2,r4,806e10 <_dtoa_r+0x6e0>
  806e28:	d8c00417 	ldw	r3,16(sp)
  806e2c:	d9800517 	ldw	r6,20(sp)
  806e30:	00800c04 	movi	r2,48
  806e34:	18c00044 	addi	r3,r3,1
  806e38:	d8c00415 	stw	r3,16(sp)
  806e3c:	30800005 	stb	r2,0(r6)
  806e40:	20800003 	ldbu	r2,0(r4)
  806e44:	d8c00417 	ldw	r3,16(sp)
  806e48:	27000044 	addi	fp,r4,1
  806e4c:	10800044 	addi	r2,r2,1
  806e50:	d8c00d15 	stw	r3,52(sp)
  806e54:	20800005 	stb	r2,0(r4)
  806e58:	d9001617 	ldw	r4,88(sp)
  806e5c:	d9400717 	ldw	r5,28(sp)
  806e60:	08098c40 	call	8098c4 <_Bfree>
  806e64:	e0000005 	stb	zero,0(fp)
  806e68:	d9800d17 	ldw	r6,52(sp)
  806e6c:	d8c02717 	ldw	r3,156(sp)
  806e70:	d9002917 	ldw	r4,164(sp)
  806e74:	30800044 	addi	r2,r6,1
  806e78:	18800015 	stw	r2,0(r3)
  806e7c:	20029c26 	beq	r4,zero,8078f0 <_dtoa_r+0x11c0>
  806e80:	d8c00517 	ldw	r3,20(sp)
  806e84:	27000015 	stw	fp,0(r4)
  806e88:	003e5d06 	br	806800 <_dtoa_r+0xd0>
  806e8c:	d9800d17 	ldw	r6,52(sp)
  806e90:	00c020b4 	movhi	r3,130
  806e94:	18f50804 	addi	r3,r3,-11232
  806e98:	d9001217 	ldw	r4,72(sp)
  806e9c:	300490fa 	slli	r2,r6,3
  806ea0:	d9401317 	ldw	r5,76(sp)
  806ea4:	10c5883a 	add	r2,r2,r3
  806ea8:	12000017 	ldw	r8,0(r2)
  806eac:	12400117 	ldw	r9,4(r2)
  806eb0:	400d883a 	mov	r6,r8
  806eb4:	480f883a 	mov	r7,r9
  806eb8:	08038580 	call	803858 <__ltdf2>
  806ebc:	1000030e 	bge	r2,zero,806ecc <_dtoa_r+0x79c>
  806ec0:	d8800d17 	ldw	r2,52(sp)
  806ec4:	10bfffc4 	addi	r2,r2,-1
  806ec8:	d8800d15 	stw	r2,52(sp)
  806ecc:	d8000c15 	stw	zero,48(sp)
  806ed0:	003ea806 	br	806974 <_dtoa_r+0x244>
  806ed4:	d9000b17 	ldw	r4,44(sp)
  806ed8:	202cc03a 	cmpne	r22,r4,zero
  806edc:	b000c71e 	bne	r22,zero,8071fc <_dtoa_r+0xacc>
  806ee0:	dc001117 	ldw	r16,68(sp)
  806ee4:	dc801017 	ldw	r18,64(sp)
  806ee8:	0027883a 	mov	r19,zero
  806eec:	04000b0e 	bge	zero,r16,806f1c <_dtoa_r+0x7ec>
  806ef0:	d8c00a17 	ldw	r3,40(sp)
  806ef4:	00c0090e 	bge	zero,r3,806f1c <_dtoa_r+0x7ec>
  806ef8:	8005883a 	mov	r2,r16
  806efc:	1c011316 	blt	r3,r16,80734c <_dtoa_r+0xc1c>
  806f00:	d9000a17 	ldw	r4,40(sp)
  806f04:	d9801117 	ldw	r6,68(sp)
  806f08:	80a1c83a 	sub	r16,r16,r2
  806f0c:	2089c83a 	sub	r4,r4,r2
  806f10:	308dc83a 	sub	r6,r6,r2
  806f14:	d9000a15 	stw	r4,40(sp)
  806f18:	d9801115 	stw	r6,68(sp)
  806f1c:	d8801017 	ldw	r2,64(sp)
  806f20:	0080150e 	bge	zero,r2,806f78 <_dtoa_r+0x848>
  806f24:	d8c00b17 	ldw	r3,44(sp)
  806f28:	1805003a 	cmpeq	r2,r3,zero
  806f2c:	1001c91e 	bne	r2,zero,807654 <_dtoa_r+0xf24>
  806f30:	04800e0e 	bge	zero,r18,806f6c <_dtoa_r+0x83c>
  806f34:	d9001617 	ldw	r4,88(sp)
  806f38:	980b883a 	mov	r5,r19
  806f3c:	900d883a 	mov	r6,r18
  806f40:	080a6780 	call	80a678 <__pow5mult>
  806f44:	d9001617 	ldw	r4,88(sp)
  806f48:	d9800717 	ldw	r6,28(sp)
  806f4c:	100b883a 	mov	r5,r2
  806f50:	1027883a 	mov	r19,r2
  806f54:	080a3540 	call	80a354 <__multiply>
  806f58:	d9001617 	ldw	r4,88(sp)
  806f5c:	d9400717 	ldw	r5,28(sp)
  806f60:	1023883a 	mov	r17,r2
  806f64:	08098c40 	call	8098c4 <_Bfree>
  806f68:	dc400715 	stw	r17,28(sp)
  806f6c:	d9001017 	ldw	r4,64(sp)
  806f70:	248dc83a 	sub	r6,r4,r18
  806f74:	30010e1e 	bne	r6,zero,8073b0 <_dtoa_r+0xc80>
  806f78:	d9001617 	ldw	r4,88(sp)
  806f7c:	04400044 	movi	r17,1
  806f80:	880b883a 	mov	r5,r17
  806f84:	080a53c0 	call	80a53c <__i2b>
  806f88:	d9800917 	ldw	r6,36(sp)
  806f8c:	1025883a 	mov	r18,r2
  806f90:	0180040e 	bge	zero,r6,806fa4 <_dtoa_r+0x874>
  806f94:	d9001617 	ldw	r4,88(sp)
  806f98:	100b883a 	mov	r5,r2
  806f9c:	080a6780 	call	80a678 <__pow5mult>
  806fa0:	1025883a 	mov	r18,r2
  806fa4:	d8801717 	ldw	r2,92(sp)
  806fa8:	8880f30e 	bge	r17,r2,807378 <_dtoa_r+0xc48>
  806fac:	0023883a 	mov	r17,zero
  806fb0:	d9800917 	ldw	r6,36(sp)
  806fb4:	30019e1e 	bne	r6,zero,807630 <_dtoa_r+0xf00>
  806fb8:	00c00044 	movi	r3,1
  806fbc:	d9000a17 	ldw	r4,40(sp)
  806fc0:	20c5883a 	add	r2,r4,r3
  806fc4:	10c007cc 	andi	r3,r2,31
  806fc8:	1800841e 	bne	r3,zero,8071dc <_dtoa_r+0xaac>
  806fcc:	00800704 	movi	r2,28
  806fd0:	d9000a17 	ldw	r4,40(sp)
  806fd4:	d9801117 	ldw	r6,68(sp)
  806fd8:	80a1883a 	add	r16,r16,r2
  806fdc:	2089883a 	add	r4,r4,r2
  806fe0:	308d883a 	add	r6,r6,r2
  806fe4:	d9000a15 	stw	r4,40(sp)
  806fe8:	d9801115 	stw	r6,68(sp)
  806fec:	d8801117 	ldw	r2,68(sp)
  806ff0:	0080050e 	bge	zero,r2,807008 <_dtoa_r+0x8d8>
  806ff4:	d9400717 	ldw	r5,28(sp)
  806ff8:	d9001617 	ldw	r4,88(sp)
  806ffc:	100d883a 	mov	r6,r2
  807000:	080a2080 	call	80a208 <__lshift>
  807004:	d8800715 	stw	r2,28(sp)
  807008:	d8c00a17 	ldw	r3,40(sp)
  80700c:	00c0050e 	bge	zero,r3,807024 <_dtoa_r+0x8f4>
  807010:	d9001617 	ldw	r4,88(sp)
  807014:	900b883a 	mov	r5,r18
  807018:	180d883a 	mov	r6,r3
  80701c:	080a2080 	call	80a208 <__lshift>
  807020:	1025883a 	mov	r18,r2
  807024:	d9000c17 	ldw	r4,48(sp)
  807028:	2005003a 	cmpeq	r2,r4,zero
  80702c:	10016f26 	beq	r2,zero,8075ec <_dtoa_r+0xebc>
  807030:	d9000f17 	ldw	r4,60(sp)
  807034:	0102170e 	bge	zero,r4,807894 <_dtoa_r+0x1164>
  807038:	d9800b17 	ldw	r6,44(sp)
  80703c:	3005003a 	cmpeq	r2,r6,zero
  807040:	1000881e 	bne	r2,zero,807264 <_dtoa_r+0xb34>
  807044:	0400050e 	bge	zero,r16,80705c <_dtoa_r+0x92c>
  807048:	d9001617 	ldw	r4,88(sp)
  80704c:	980b883a 	mov	r5,r19
  807050:	800d883a 	mov	r6,r16
  807054:	080a2080 	call	80a208 <__lshift>
  807058:	1027883a 	mov	r19,r2
  80705c:	8804c03a 	cmpne	r2,r17,zero
  807060:	1002541e 	bne	r2,zero,8079b4 <_dtoa_r+0x1284>
  807064:	980b883a 	mov	r5,r19
  807068:	dd800517 	ldw	r22,20(sp)
  80706c:	dcc00615 	stw	r19,24(sp)
  807070:	a700004c 	andi	fp,r20,1
  807074:	2827883a 	mov	r19,r5
  807078:	d9000717 	ldw	r4,28(sp)
  80707c:	900b883a 	mov	r5,r18
  807080:	08065180 	call	806518 <quorem>
  807084:	d9000717 	ldw	r4,28(sp)
  807088:	d9400617 	ldw	r5,24(sp)
  80708c:	1023883a 	mov	r17,r2
  807090:	8dc00c04 	addi	r23,r17,48
  807094:	0809a200 	call	809a20 <__mcmp>
  807098:	d9001617 	ldw	r4,88(sp)
  80709c:	900b883a 	mov	r5,r18
  8070a0:	980d883a 	mov	r6,r19
  8070a4:	1029883a 	mov	r20,r2
  8070a8:	080a07c0 	call	80a07c <__mdiff>
  8070ac:	102b883a 	mov	r21,r2
  8070b0:	10800317 	ldw	r2,12(r2)
  8070b4:	1001281e 	bne	r2,zero,807558 <_dtoa_r+0xe28>
  8070b8:	d9000717 	ldw	r4,28(sp)
  8070bc:	a80b883a 	mov	r5,r21
  8070c0:	0809a200 	call	809a20 <__mcmp>
  8070c4:	d9001617 	ldw	r4,88(sp)
  8070c8:	1021883a 	mov	r16,r2
  8070cc:	a80b883a 	mov	r5,r21
  8070d0:	08098c40 	call	8098c4 <_Bfree>
  8070d4:	8000041e 	bne	r16,zero,8070e8 <_dtoa_r+0x9b8>
  8070d8:	d8801717 	ldw	r2,92(sp)
  8070dc:	1000021e 	bne	r2,zero,8070e8 <_dtoa_r+0x9b8>
  8070e0:	e004c03a 	cmpne	r2,fp,zero
  8070e4:	10011726 	beq	r2,zero,807544 <_dtoa_r+0xe14>
  8070e8:	a0010616 	blt	r20,zero,807504 <_dtoa_r+0xdd4>
  8070ec:	a000041e 	bne	r20,zero,807100 <_dtoa_r+0x9d0>
  8070f0:	d8c01717 	ldw	r3,92(sp)
  8070f4:	1800021e 	bne	r3,zero,807100 <_dtoa_r+0x9d0>
  8070f8:	e004c03a 	cmpne	r2,fp,zero
  8070fc:	10010126 	beq	r2,zero,807504 <_dtoa_r+0xdd4>
  807100:	04023d16 	blt	zero,r16,8079f8 <_dtoa_r+0x12c8>
  807104:	b5c00005 	stb	r23,0(r22)
  807108:	d9800517 	ldw	r6,20(sp)
  80710c:	d9000f17 	ldw	r4,60(sp)
  807110:	b5800044 	addi	r22,r22,1
  807114:	3105883a 	add	r2,r6,r4
  807118:	b0806526 	beq	r22,r2,8072b0 <_dtoa_r+0xb80>
  80711c:	d9400717 	ldw	r5,28(sp)
  807120:	d9001617 	ldw	r4,88(sp)
  807124:	01800284 	movi	r6,10
  807128:	000f883a 	mov	r7,zero
  80712c:	080a5780 	call	80a578 <__multadd>
  807130:	d8800715 	stw	r2,28(sp)
  807134:	d8800617 	ldw	r2,24(sp)
  807138:	14c10c26 	beq	r2,r19,80756c <_dtoa_r+0xe3c>
  80713c:	d9400617 	ldw	r5,24(sp)
  807140:	d9001617 	ldw	r4,88(sp)
  807144:	01800284 	movi	r6,10
  807148:	000f883a 	mov	r7,zero
  80714c:	080a5780 	call	80a578 <__multadd>
  807150:	d9001617 	ldw	r4,88(sp)
  807154:	980b883a 	mov	r5,r19
  807158:	01800284 	movi	r6,10
  80715c:	000f883a 	mov	r7,zero
  807160:	d8800615 	stw	r2,24(sp)
  807164:	080a5780 	call	80a578 <__multadd>
  807168:	1027883a 	mov	r19,r2
  80716c:	003fc206 	br	807078 <_dtoa_r+0x948>
  807170:	2445c83a 	sub	r2,r4,r17
  807174:	a088983a 	sll	r4,r20,r2
  807178:	003e4b06 	br	806aa8 <_dtoa_r+0x378>
  80717c:	01bfffc4 	movi	r6,-1
  807180:	00800044 	movi	r2,1
  807184:	d9800e15 	stw	r6,56(sp)
  807188:	d9800f15 	stw	r6,60(sp)
  80718c:	d8800b15 	stw	r2,44(sp)
  807190:	d8c01617 	ldw	r3,88(sp)
  807194:	008005c4 	movi	r2,23
  807198:	18001115 	stw	zero,68(r3)
  80719c:	1580082e 	bgeu	r2,r22,8071c0 <_dtoa_r+0xa90>
  8071a0:	00c00104 	movi	r3,4
  8071a4:	0009883a 	mov	r4,zero
  8071a8:	18c7883a 	add	r3,r3,r3
  8071ac:	18800504 	addi	r2,r3,20
  8071b0:	21000044 	addi	r4,r4,1
  8071b4:	b0bffc2e 	bgeu	r22,r2,8071a8 <_dtoa_r+0xa78>
  8071b8:	d9801617 	ldw	r6,88(sp)
  8071bc:	31001115 	stw	r4,68(r6)
  8071c0:	dc000f17 	ldw	r16,60(sp)
  8071c4:	003e4b06 	br	806af4 <_dtoa_r+0x3c4>
  8071c8:	d9801717 	ldw	r6,92(sp)
  8071cc:	0023883a 	mov	r17,zero
  8071d0:	31bfff04 	addi	r6,r6,-4
  8071d4:	d9801715 	stw	r6,92(sp)
  8071d8:	003df806 	br	8069bc <_dtoa_r+0x28c>
  8071dc:	00800804 	movi	r2,32
  8071e0:	10c9c83a 	sub	r4,r2,r3
  8071e4:	00c00104 	movi	r3,4
  8071e8:	19005a16 	blt	r3,r4,807354 <_dtoa_r+0xc24>
  8071ec:	008000c4 	movi	r2,3
  8071f0:	113f7e16 	blt	r2,r4,806fec <_dtoa_r+0x8bc>
  8071f4:	20800704 	addi	r2,r4,28
  8071f8:	003f7506 	br	806fd0 <_dtoa_r+0x8a0>
  8071fc:	d9801717 	ldw	r6,92(sp)
  807200:	00800044 	movi	r2,1
  807204:	1180a10e 	bge	r2,r6,80748c <_dtoa_r+0xd5c>
  807208:	d9800f17 	ldw	r6,60(sp)
  80720c:	d8c01017 	ldw	r3,64(sp)
  807210:	30bfffc4 	addi	r2,r6,-1
  807214:	1881c616 	blt	r3,r2,807930 <_dtoa_r+0x1200>
  807218:	18a5c83a 	sub	r18,r3,r2
  80721c:	d8800f17 	ldw	r2,60(sp)
  807220:	10026216 	blt	r2,zero,807bac <_dtoa_r+0x147c>
  807224:	dc001117 	ldw	r16,68(sp)
  807228:	1007883a 	mov	r3,r2
  80722c:	d9800a17 	ldw	r6,40(sp)
  807230:	d8801117 	ldw	r2,68(sp)
  807234:	d9001617 	ldw	r4,88(sp)
  807238:	30cd883a 	add	r6,r6,r3
  80723c:	10c5883a 	add	r2,r2,r3
  807240:	01400044 	movi	r5,1
  807244:	d9800a15 	stw	r6,40(sp)
  807248:	d8801115 	stw	r2,68(sp)
  80724c:	080a53c0 	call	80a53c <__i2b>
  807250:	1027883a 	mov	r19,r2
  807254:	003f2506 	br	806eec <_dtoa_r+0x7bc>
  807258:	00c020b4 	movhi	r3,130
  80725c:	18f4eb04 	addi	r3,r3,-11348
  807260:	003d6706 	br	806800 <_dtoa_r+0xd0>
  807264:	dd800517 	ldw	r22,20(sp)
  807268:	04000044 	movi	r16,1
  80726c:	00000706 	br	80728c <_dtoa_r+0xb5c>
  807270:	d9400717 	ldw	r5,28(sp)
  807274:	d9001617 	ldw	r4,88(sp)
  807278:	01800284 	movi	r6,10
  80727c:	000f883a 	mov	r7,zero
  807280:	080a5780 	call	80a578 <__multadd>
  807284:	d8800715 	stw	r2,28(sp)
  807288:	84000044 	addi	r16,r16,1
  80728c:	d9000717 	ldw	r4,28(sp)
  807290:	900b883a 	mov	r5,r18
  807294:	08065180 	call	806518 <quorem>
  807298:	15c00c04 	addi	r23,r2,48
  80729c:	b5c00005 	stb	r23,0(r22)
  8072a0:	d8c00f17 	ldw	r3,60(sp)
  8072a4:	b5800044 	addi	r22,r22,1
  8072a8:	80fff116 	blt	r16,r3,807270 <_dtoa_r+0xb40>
  8072ac:	d8000615 	stw	zero,24(sp)
  8072b0:	d9400717 	ldw	r5,28(sp)
  8072b4:	d9001617 	ldw	r4,88(sp)
  8072b8:	01800044 	movi	r6,1
  8072bc:	080a2080 	call	80a208 <__lshift>
  8072c0:	1009883a 	mov	r4,r2
  8072c4:	900b883a 	mov	r5,r18
  8072c8:	d8800715 	stw	r2,28(sp)
  8072cc:	0809a200 	call	809a20 <__mcmp>
  8072d0:	00803c0e 	bge	zero,r2,8073c4 <_dtoa_r+0xc94>
  8072d4:	b009883a 	mov	r4,r22
  8072d8:	213fffc4 	addi	r4,r4,-1
  8072dc:	21400003 	ldbu	r5,0(r4)
  8072e0:	00800e44 	movi	r2,57
  8072e4:	28c03fcc 	andi	r3,r5,255
  8072e8:	18c0201c 	xori	r3,r3,128
  8072ec:	18ffe004 	addi	r3,r3,-128
  8072f0:	1881981e 	bne	r3,r2,807954 <_dtoa_r+0x1224>
  8072f4:	d9800517 	ldw	r6,20(sp)
  8072f8:	21bff71e 	bne	r4,r6,8072d8 <_dtoa_r+0xba8>
  8072fc:	d8800d17 	ldw	r2,52(sp)
  807300:	37000044 	addi	fp,r6,1
  807304:	10800044 	addi	r2,r2,1
  807308:	d8800d15 	stw	r2,52(sp)
  80730c:	00800c44 	movi	r2,49
  807310:	30800005 	stb	r2,0(r6)
  807314:	d9001617 	ldw	r4,88(sp)
  807318:	900b883a 	mov	r5,r18
  80731c:	08098c40 	call	8098c4 <_Bfree>
  807320:	983ecd26 	beq	r19,zero,806e58 <_dtoa_r+0x728>
  807324:	d8c00617 	ldw	r3,24(sp)
  807328:	18000426 	beq	r3,zero,80733c <_dtoa_r+0xc0c>
  80732c:	1cc00326 	beq	r3,r19,80733c <_dtoa_r+0xc0c>
  807330:	d9001617 	ldw	r4,88(sp)
  807334:	180b883a 	mov	r5,r3
  807338:	08098c40 	call	8098c4 <_Bfree>
  80733c:	d9001617 	ldw	r4,88(sp)
  807340:	980b883a 	mov	r5,r19
  807344:	08098c40 	call	8098c4 <_Bfree>
  807348:	003ec306 	br	806e58 <_dtoa_r+0x728>
  80734c:	1805883a 	mov	r2,r3
  807350:	003eeb06 	br	806f00 <_dtoa_r+0x7d0>
  807354:	d9800a17 	ldw	r6,40(sp)
  807358:	d8c01117 	ldw	r3,68(sp)
  80735c:	20bfff04 	addi	r2,r4,-4
  807360:	308d883a 	add	r6,r6,r2
  807364:	1887883a 	add	r3,r3,r2
  807368:	80a1883a 	add	r16,r16,r2
  80736c:	d9800a15 	stw	r6,40(sp)
  807370:	d8c01115 	stw	r3,68(sp)
  807374:	003f1d06 	br	806fec <_dtoa_r+0x8bc>
  807378:	a03f0c1e 	bne	r20,zero,806fac <_dtoa_r+0x87c>
  80737c:	00800434 	movhi	r2,16
  807380:	10bfffc4 	addi	r2,r2,-1
  807384:	a884703a 	and	r2,r21,r2
  807388:	103f081e 	bne	r2,zero,806fac <_dtoa_r+0x87c>
  80738c:	a89ffc2c 	andhi	r2,r21,32752
  807390:	103f0626 	beq	r2,zero,806fac <_dtoa_r+0x87c>
  807394:	d8c01117 	ldw	r3,68(sp)
  807398:	d9000a17 	ldw	r4,40(sp)
  80739c:	18c00044 	addi	r3,r3,1
  8073a0:	21000044 	addi	r4,r4,1
  8073a4:	d8c01115 	stw	r3,68(sp)
  8073a8:	d9000a15 	stw	r4,40(sp)
  8073ac:	003f0006 	br	806fb0 <_dtoa_r+0x880>
  8073b0:	d9400717 	ldw	r5,28(sp)
  8073b4:	d9001617 	ldw	r4,88(sp)
  8073b8:	080a6780 	call	80a678 <__pow5mult>
  8073bc:	d8800715 	stw	r2,28(sp)
  8073c0:	003eed06 	br	806f78 <_dtoa_r+0x848>
  8073c4:	1000021e 	bne	r2,zero,8073d0 <_dtoa_r+0xca0>
  8073c8:	b880004c 	andi	r2,r23,1
  8073cc:	103fc11e 	bne	r2,zero,8072d4 <_dtoa_r+0xba4>
  8073d0:	b5bfffc4 	addi	r22,r22,-1
  8073d4:	b0c00007 	ldb	r3,0(r22)
  8073d8:	00800c04 	movi	r2,48
  8073dc:	18bffc26 	beq	r3,r2,8073d0 <_dtoa_r+0xca0>
  8073e0:	b7000044 	addi	fp,r22,1
  8073e4:	003fcb06 	br	807314 <_dtoa_r+0xbe4>
  8073e8:	d9800d17 	ldw	r6,52(sp)
  8073ec:	018fc83a 	sub	r7,zero,r6
  8073f0:	3801f726 	beq	r7,zero,807bd0 <_dtoa_r+0x14a0>
  8073f4:	398003cc 	andi	r6,r7,15
  8073f8:	300c90fa 	slli	r6,r6,3
  8073fc:	014020b4 	movhi	r5,130
  807400:	29750804 	addi	r5,r5,-11232
  807404:	d9001217 	ldw	r4,72(sp)
  807408:	314d883a 	add	r6,r6,r5
  80740c:	30c00117 	ldw	r3,4(r6)
  807410:	30800017 	ldw	r2,0(r6)
  807414:	d9401317 	ldw	r5,76(sp)
  807418:	3821d13a 	srai	r16,r7,4
  80741c:	100d883a 	mov	r6,r2
  807420:	180f883a 	mov	r7,r3
  807424:	080323c0 	call	80323c <__muldf3>
  807428:	1011883a 	mov	r8,r2
  80742c:	1813883a 	mov	r9,r3
  807430:	1029883a 	mov	r20,r2
  807434:	182b883a 	mov	r21,r3
  807438:	8001e526 	beq	r16,zero,807bd0 <_dtoa_r+0x14a0>
  80743c:	05800084 	movi	r22,2
  807440:	044020b4 	movhi	r17,130
  807444:	8c753a04 	addi	r17,r17,-11032
  807448:	8080004c 	andi	r2,r16,1
  80744c:	1005003a 	cmpeq	r2,r2,zero
  807450:	1000081e 	bne	r2,zero,807474 <_dtoa_r+0xd44>
  807454:	89800017 	ldw	r6,0(r17)
  807458:	89c00117 	ldw	r7,4(r17)
  80745c:	480b883a 	mov	r5,r9
  807460:	4009883a 	mov	r4,r8
  807464:	080323c0 	call	80323c <__muldf3>
  807468:	1011883a 	mov	r8,r2
  80746c:	b5800044 	addi	r22,r22,1
  807470:	1813883a 	mov	r9,r3
  807474:	8021d07a 	srai	r16,r16,1
  807478:	8c400204 	addi	r17,r17,8
  80747c:	803ff21e 	bne	r16,zero,807448 <_dtoa_r+0xd18>
  807480:	4029883a 	mov	r20,r8
  807484:	482b883a 	mov	r21,r9
  807488:	003dca06 	br	806bb4 <_dtoa_r+0x484>
  80748c:	d9000817 	ldw	r4,32(sp)
  807490:	2005003a 	cmpeq	r2,r4,zero
  807494:	1001f61e 	bne	r2,zero,807c70 <_dtoa_r+0x1540>
  807498:	dc001117 	ldw	r16,68(sp)
  80749c:	dc801017 	ldw	r18,64(sp)
  8074a0:	18c10cc4 	addi	r3,r3,1075
  8074a4:	003f6106 	br	80722c <_dtoa_r+0xafc>
  8074a8:	d8000b15 	stw	zero,44(sp)
  8074ac:	d9802617 	ldw	r6,152(sp)
  8074b0:	d8c00d17 	ldw	r3,52(sp)
  8074b4:	30800044 	addi	r2,r6,1
  8074b8:	18ad883a 	add	r22,r3,r2
  8074bc:	b13fffc4 	addi	r4,r22,-1
  8074c0:	d9000e15 	stw	r4,56(sp)
  8074c4:	0581f60e 	bge	zero,r22,807ca0 <_dtoa_r+0x1570>
  8074c8:	dd800f15 	stw	r22,60(sp)
  8074cc:	003f3006 	br	807190 <_dtoa_r+0xa60>
  8074d0:	d8000b15 	stw	zero,44(sp)
  8074d4:	d9002617 	ldw	r4,152(sp)
  8074d8:	0101eb0e 	bge	zero,r4,807c88 <_dtoa_r+0x1558>
  8074dc:	202d883a 	mov	r22,r4
  8074e0:	d9000e15 	stw	r4,56(sp)
  8074e4:	d9000f15 	stw	r4,60(sp)
  8074e8:	003f2906 	br	807190 <_dtoa_r+0xa60>
  8074ec:	01800044 	movi	r6,1
  8074f0:	d9800b15 	stw	r6,44(sp)
  8074f4:	003ff706 	br	8074d4 <_dtoa_r+0xda4>
  8074f8:	01000044 	movi	r4,1
  8074fc:	d9000b15 	stw	r4,44(sp)
  807500:	003fea06 	br	8074ac <_dtoa_r+0xd7c>
  807504:	04000c0e 	bge	zero,r16,807538 <_dtoa_r+0xe08>
  807508:	d9400717 	ldw	r5,28(sp)
  80750c:	d9001617 	ldw	r4,88(sp)
  807510:	01800044 	movi	r6,1
  807514:	080a2080 	call	80a208 <__lshift>
  807518:	1009883a 	mov	r4,r2
  80751c:	900b883a 	mov	r5,r18
  807520:	d8800715 	stw	r2,28(sp)
  807524:	0809a200 	call	809a20 <__mcmp>
  807528:	0081e00e 	bge	zero,r2,807cac <_dtoa_r+0x157c>
  80752c:	bdc00044 	addi	r23,r23,1
  807530:	00800e84 	movi	r2,58
  807534:	b881a226 	beq	r23,r2,807bc0 <_dtoa_r+0x1490>
  807538:	b7000044 	addi	fp,r22,1
  80753c:	b5c00005 	stb	r23,0(r22)
  807540:	003f7406 	br	807314 <_dtoa_r+0xbe4>
  807544:	00800e44 	movi	r2,57
  807548:	b8819d26 	beq	r23,r2,807bc0 <_dtoa_r+0x1490>
  80754c:	053ffa0e 	bge	zero,r20,807538 <_dtoa_r+0xe08>
  807550:	8dc00c44 	addi	r23,r17,49
  807554:	003ff806 	br	807538 <_dtoa_r+0xe08>
  807558:	d9001617 	ldw	r4,88(sp)
  80755c:	a80b883a 	mov	r5,r21
  807560:	04000044 	movi	r16,1
  807564:	08098c40 	call	8098c4 <_Bfree>
  807568:	003edf06 	br	8070e8 <_dtoa_r+0x9b8>
  80756c:	d9001617 	ldw	r4,88(sp)
  807570:	980b883a 	mov	r5,r19
  807574:	01800284 	movi	r6,10
  807578:	000f883a 	mov	r7,zero
  80757c:	080a5780 	call	80a578 <__multadd>
  807580:	1027883a 	mov	r19,r2
  807584:	d8800615 	stw	r2,24(sp)
  807588:	003ebb06 	br	807078 <_dtoa_r+0x948>
  80758c:	d9801117 	ldw	r6,68(sp)
  807590:	d8800d17 	ldw	r2,52(sp)
  807594:	d8000915 	stw	zero,36(sp)
  807598:	308dc83a 	sub	r6,r6,r2
  80759c:	0087c83a 	sub	r3,zero,r2
  8075a0:	d9801115 	stw	r6,68(sp)
  8075a4:	d8c01015 	stw	r3,64(sp)
  8075a8:	003cfe06 	br	8069a4 <_dtoa_r+0x274>
  8075ac:	018dc83a 	sub	r6,zero,r6
  8075b0:	d9801115 	stw	r6,68(sp)
  8075b4:	d8000a15 	stw	zero,40(sp)
  8075b8:	003cf306 	br	806988 <_dtoa_r+0x258>
  8075bc:	d9000d17 	ldw	r4,52(sp)
  8075c0:	08038e00 	call	8038e0 <__floatsidf>
  8075c4:	880b883a 	mov	r5,r17
  8075c8:	8009883a 	mov	r4,r16
  8075cc:	180f883a 	mov	r7,r3
  8075d0:	100d883a 	mov	r6,r2
  8075d4:	080c20c0 	call	80c20c <__nedf2>
  8075d8:	103ce126 	beq	r2,zero,806960 <_dtoa_r+0x230>
  8075dc:	d9800d17 	ldw	r6,52(sp)
  8075e0:	31bfffc4 	addi	r6,r6,-1
  8075e4:	d9800d15 	stw	r6,52(sp)
  8075e8:	003cdd06 	br	806960 <_dtoa_r+0x230>
  8075ec:	d9000717 	ldw	r4,28(sp)
  8075f0:	900b883a 	mov	r5,r18
  8075f4:	0809a200 	call	809a20 <__mcmp>
  8075f8:	103e8d0e 	bge	r2,zero,807030 <_dtoa_r+0x900>
  8075fc:	d9400717 	ldw	r5,28(sp)
  807600:	d9001617 	ldw	r4,88(sp)
  807604:	01800284 	movi	r6,10
  807608:	000f883a 	mov	r7,zero
  80760c:	080a5780 	call	80a578 <__multadd>
  807610:	d9800d17 	ldw	r6,52(sp)
  807614:	d8800715 	stw	r2,28(sp)
  807618:	31bfffc4 	addi	r6,r6,-1
  80761c:	d9800d15 	stw	r6,52(sp)
  807620:	b001a71e 	bne	r22,zero,807cc0 <_dtoa_r+0x1590>
  807624:	d8800e17 	ldw	r2,56(sp)
  807628:	d8800f15 	stw	r2,60(sp)
  80762c:	003e8006 	br	807030 <_dtoa_r+0x900>
  807630:	90800417 	ldw	r2,16(r18)
  807634:	1085883a 	add	r2,r2,r2
  807638:	1085883a 	add	r2,r2,r2
  80763c:	1485883a 	add	r2,r2,r18
  807640:	11000417 	ldw	r4,16(r2)
  807644:	08098ec0 	call	8098ec <__hi0bits>
  807648:	00c00804 	movi	r3,32
  80764c:	1887c83a 	sub	r3,r3,r2
  807650:	003e5a06 	br	806fbc <_dtoa_r+0x88c>
  807654:	d9400717 	ldw	r5,28(sp)
  807658:	d9801017 	ldw	r6,64(sp)
  80765c:	d9001617 	ldw	r4,88(sp)
  807660:	080a6780 	call	80a678 <__pow5mult>
  807664:	d8800715 	stw	r2,28(sp)
  807668:	003e4306 	br	806f78 <_dtoa_r+0x848>
  80766c:	d9800f17 	ldw	r6,60(sp)
  807670:	d8800d17 	ldw	r2,52(sp)
  807674:	d9800315 	stw	r6,12(sp)
  807678:	d8800415 	stw	r2,16(sp)
  80767c:	d8c00b17 	ldw	r3,44(sp)
  807680:	1805003a 	cmpeq	r2,r3,zero
  807684:	1000e21e 	bne	r2,zero,807a10 <_dtoa_r+0x12e0>
  807688:	d9000317 	ldw	r4,12(sp)
  80768c:	0005883a 	mov	r2,zero
  807690:	00cff834 	movhi	r3,16352
  807694:	200c90fa 	slli	r6,r4,3
  807698:	010020b4 	movhi	r4,130
  80769c:	21350804 	addi	r4,r4,-11232
  8076a0:	180b883a 	mov	r5,r3
  8076a4:	310d883a 	add	r6,r6,r4
  8076a8:	327fff17 	ldw	r9,-4(r6)
  8076ac:	323ffe17 	ldw	r8,-8(r6)
  8076b0:	1009883a 	mov	r4,r2
  8076b4:	480f883a 	mov	r7,r9
  8076b8:	400d883a 	mov	r6,r8
  8076bc:	08036000 	call	803600 <__divdf3>
  8076c0:	180b883a 	mov	r5,r3
  8076c4:	b00d883a 	mov	r6,r22
  8076c8:	b80f883a 	mov	r7,r23
  8076cc:	1009883a 	mov	r4,r2
  8076d0:	08031480 	call	803148 <__subdf3>
  8076d4:	a80b883a 	mov	r5,r21
  8076d8:	a009883a 	mov	r4,r20
  8076dc:	d8c01915 	stw	r3,100(sp)
  8076e0:	d8801815 	stw	r2,96(sp)
  8076e4:	08039d80 	call	8039d8 <__fixdfsi>
  8076e8:	1009883a 	mov	r4,r2
  8076ec:	1027883a 	mov	r19,r2
  8076f0:	08038e00 	call	8038e0 <__floatsidf>
  8076f4:	a80b883a 	mov	r5,r21
  8076f8:	a009883a 	mov	r4,r20
  8076fc:	180f883a 	mov	r7,r3
  807700:	100d883a 	mov	r6,r2
  807704:	08031480 	call	803148 <__subdf3>
  807708:	d9801817 	ldw	r6,96(sp)
  80770c:	1823883a 	mov	r17,r3
  807710:	d8801415 	stw	r2,80(sp)
  807714:	302d883a 	mov	r22,r6
  807718:	d9800517 	ldw	r6,20(sp)
  80771c:	9cc00c04 	addi	r19,r19,48
  807720:	dc401515 	stw	r17,84(sp)
  807724:	d8c01917 	ldw	r3,100(sp)
  807728:	34c00005 	stb	r19,0(r6)
  80772c:	d8800517 	ldw	r2,20(sp)
  807730:	d9401917 	ldw	r5,100(sp)
  807734:	d9801417 	ldw	r6,80(sp)
  807738:	b009883a 	mov	r4,r22
  80773c:	880f883a 	mov	r7,r17
  807740:	182f883a 	mov	r23,r3
  807744:	17000044 	addi	fp,r2,1
  807748:	080c2940 	call	80c294 <__gtdf2>
  80774c:	00804e16 	blt	zero,r2,807888 <_dtoa_r+0x1158>
  807750:	d9801417 	ldw	r6,80(sp)
  807754:	0005883a 	mov	r2,zero
  807758:	00cffc34 	movhi	r3,16368
  80775c:	180b883a 	mov	r5,r3
  807760:	880f883a 	mov	r7,r17
  807764:	1009883a 	mov	r4,r2
  807768:	08031480 	call	803148 <__subdf3>
  80776c:	d9401917 	ldw	r5,100(sp)
  807770:	180f883a 	mov	r7,r3
  807774:	b009883a 	mov	r4,r22
  807778:	100d883a 	mov	r6,r2
  80777c:	080c2940 	call	80c294 <__gtdf2>
  807780:	00bda216 	blt	zero,r2,806e0c <_dtoa_r+0x6dc>
  807784:	d8c00317 	ldw	r3,12(sp)
  807788:	00800044 	movi	r2,1
  80778c:	10c01216 	blt	r2,r3,8077d8 <_dtoa_r+0x10a8>
  807790:	003d4506 	br	806ca8 <_dtoa_r+0x578>
  807794:	d9801417 	ldw	r6,80(sp)
  807798:	0005883a 	mov	r2,zero
  80779c:	00cffc34 	movhi	r3,16368
  8077a0:	180b883a 	mov	r5,r3
  8077a4:	880f883a 	mov	r7,r17
  8077a8:	1009883a 	mov	r4,r2
  8077ac:	08031480 	call	803148 <__subdf3>
  8077b0:	d9c01b17 	ldw	r7,108(sp)
  8077b4:	180b883a 	mov	r5,r3
  8077b8:	1009883a 	mov	r4,r2
  8077bc:	b00d883a 	mov	r6,r22
  8077c0:	08038580 	call	803858 <__ltdf2>
  8077c4:	103d9116 	blt	r2,zero,806e0c <_dtoa_r+0x6dc>
  8077c8:	d9800517 	ldw	r6,20(sp)
  8077cc:	d9000317 	ldw	r4,12(sp)
  8077d0:	3105883a 	add	r2,r6,r4
  8077d4:	e0bd3426 	beq	fp,r2,806ca8 <_dtoa_r+0x578>
  8077d8:	04500934 	movhi	r17,16420
  8077dc:	0021883a 	mov	r16,zero
  8077e0:	b80b883a 	mov	r5,r23
  8077e4:	b009883a 	mov	r4,r22
  8077e8:	800d883a 	mov	r6,r16
  8077ec:	880f883a 	mov	r7,r17
  8077f0:	080323c0 	call	80323c <__muldf3>
  8077f4:	d9401517 	ldw	r5,84(sp)
  8077f8:	d9001417 	ldw	r4,80(sp)
  8077fc:	880f883a 	mov	r7,r17
  807800:	000d883a 	mov	r6,zero
  807804:	d8801a15 	stw	r2,104(sp)
  807808:	d8c01b15 	stw	r3,108(sp)
  80780c:	080323c0 	call	80323c <__muldf3>
  807810:	180b883a 	mov	r5,r3
  807814:	1009883a 	mov	r4,r2
  807818:	1823883a 	mov	r17,r3
  80781c:	1021883a 	mov	r16,r2
  807820:	08039d80 	call	8039d8 <__fixdfsi>
  807824:	1009883a 	mov	r4,r2
  807828:	102b883a 	mov	r21,r2
  80782c:	08038e00 	call	8038e0 <__floatsidf>
  807830:	880b883a 	mov	r5,r17
  807834:	8009883a 	mov	r4,r16
  807838:	180f883a 	mov	r7,r3
  80783c:	100d883a 	mov	r6,r2
  807840:	08031480 	call	803148 <__subdf3>
  807844:	1021883a 	mov	r16,r2
  807848:	d9001b17 	ldw	r4,108(sp)
  80784c:	1823883a 	mov	r17,r3
  807850:	dc001415 	stw	r16,80(sp)
  807854:	ad400c04 	addi	r21,r21,48
  807858:	dc401515 	stw	r17,84(sp)
  80785c:	d8801a17 	ldw	r2,104(sp)
  807860:	e5400005 	stb	r21,0(fp)
  807864:	202f883a 	mov	r23,r4
  807868:	d9c01b17 	ldw	r7,108(sp)
  80786c:	d9001417 	ldw	r4,80(sp)
  807870:	880b883a 	mov	r5,r17
  807874:	100d883a 	mov	r6,r2
  807878:	102d883a 	mov	r22,r2
  80787c:	e7000044 	addi	fp,fp,1
  807880:	08038580 	call	803858 <__ltdf2>
  807884:	103fc30e 	bge	r2,zero,807794 <_dtoa_r+0x1064>
  807888:	d9000417 	ldw	r4,16(sp)
  80788c:	d9000d15 	stw	r4,52(sp)
  807890:	003d7106 	br	806e58 <_dtoa_r+0x728>
  807894:	d9801717 	ldw	r6,92(sp)
  807898:	00800084 	movi	r2,2
  80789c:	11bde60e 	bge	r2,r6,807038 <_dtoa_r+0x908>
  8078a0:	203cfb1e 	bne	r4,zero,806c90 <_dtoa_r+0x560>
  8078a4:	d9001617 	ldw	r4,88(sp)
  8078a8:	900b883a 	mov	r5,r18
  8078ac:	01800144 	movi	r6,5
  8078b0:	000f883a 	mov	r7,zero
  8078b4:	080a5780 	call	80a578 <__multadd>
  8078b8:	d9000717 	ldw	r4,28(sp)
  8078bc:	100b883a 	mov	r5,r2
  8078c0:	1025883a 	mov	r18,r2
  8078c4:	0809a200 	call	809a20 <__mcmp>
  8078c8:	00bcf10e 	bge	zero,r2,806c90 <_dtoa_r+0x560>
  8078cc:	d8c00d17 	ldw	r3,52(sp)
  8078d0:	d9000517 	ldw	r4,20(sp)
  8078d4:	d8000615 	stw	zero,24(sp)
  8078d8:	18c00044 	addi	r3,r3,1
  8078dc:	d8c00d15 	stw	r3,52(sp)
  8078e0:	00800c44 	movi	r2,49
  8078e4:	27000044 	addi	fp,r4,1
  8078e8:	20800005 	stb	r2,0(r4)
  8078ec:	003e8906 	br	807314 <_dtoa_r+0xbe4>
  8078f0:	d8c00517 	ldw	r3,20(sp)
  8078f4:	003bc206 	br	806800 <_dtoa_r+0xd0>
  8078f8:	018020b4 	movhi	r6,130
  8078fc:	31b53a04 	addi	r6,r6,-11032
  807900:	30c00917 	ldw	r3,36(r6)
  807904:	30800817 	ldw	r2,32(r6)
  807908:	d9001217 	ldw	r4,72(sp)
  80790c:	d9401317 	ldw	r5,76(sp)
  807910:	180f883a 	mov	r7,r3
  807914:	100d883a 	mov	r6,r2
  807918:	08036000 	call	803600 <__divdf3>
  80791c:	948003cc 	andi	r18,r18,15
  807920:	058000c4 	movi	r22,3
  807924:	1029883a 	mov	r20,r2
  807928:	182b883a 	mov	r21,r3
  80792c:	003c8906 	br	806b54 <_dtoa_r+0x424>
  807930:	d9001017 	ldw	r4,64(sp)
  807934:	d9800917 	ldw	r6,36(sp)
  807938:	0025883a 	mov	r18,zero
  80793c:	1105c83a 	sub	r2,r2,r4
  807940:	2089883a 	add	r4,r4,r2
  807944:	308d883a 	add	r6,r6,r2
  807948:	d9001015 	stw	r4,64(sp)
  80794c:	d9800915 	stw	r6,36(sp)
  807950:	003e3206 	br	80721c <_dtoa_r+0xaec>
  807954:	28800044 	addi	r2,r5,1
  807958:	27000044 	addi	fp,r4,1
  80795c:	20800005 	stb	r2,0(r4)
  807960:	003e6c06 	br	807314 <_dtoa_r+0xbe4>
  807964:	d8800f17 	ldw	r2,60(sp)
  807968:	00bce016 	blt	zero,r2,806cec <_dtoa_r+0x5bc>
  80796c:	d9800f17 	ldw	r6,60(sp)
  807970:	303cc51e 	bne	r6,zero,806c88 <_dtoa_r+0x558>
  807974:	0005883a 	mov	r2,zero
  807978:	00d00534 	movhi	r3,16404
  80797c:	980b883a 	mov	r5,r19
  807980:	180f883a 	mov	r7,r3
  807984:	9009883a 	mov	r4,r18
  807988:	100d883a 	mov	r6,r2
  80798c:	080323c0 	call	80323c <__muldf3>
  807990:	180b883a 	mov	r5,r3
  807994:	a80f883a 	mov	r7,r21
  807998:	1009883a 	mov	r4,r2
  80799c:	a00d883a 	mov	r6,r20
  8079a0:	080427c0 	call	80427c <__gedf2>
  8079a4:	103cb80e 	bge	r2,zero,806c88 <_dtoa_r+0x558>
  8079a8:	0027883a 	mov	r19,zero
  8079ac:	0025883a 	mov	r18,zero
  8079b0:	003fc606 	br	8078cc <_dtoa_r+0x119c>
  8079b4:	99400117 	ldw	r5,4(r19)
  8079b8:	d9001617 	ldw	r4,88(sp)
  8079bc:	0809e440 	call	809e44 <_Balloc>
  8079c0:	99800417 	ldw	r6,16(r19)
  8079c4:	11000304 	addi	r4,r2,12
  8079c8:	99400304 	addi	r5,r19,12
  8079cc:	318d883a 	add	r6,r6,r6
  8079d0:	318d883a 	add	r6,r6,r6
  8079d4:	31800204 	addi	r6,r6,8
  8079d8:	1023883a 	mov	r17,r2
  8079dc:	08096ac0 	call	8096ac <memcpy>
  8079e0:	d9001617 	ldw	r4,88(sp)
  8079e4:	880b883a 	mov	r5,r17
  8079e8:	01800044 	movi	r6,1
  8079ec:	080a2080 	call	80a208 <__lshift>
  8079f0:	100b883a 	mov	r5,r2
  8079f4:	003d9c06 	br	807068 <_dtoa_r+0x938>
  8079f8:	00800e44 	movi	r2,57
  8079fc:	b8807026 	beq	r23,r2,807bc0 <_dtoa_r+0x1490>
  807a00:	b8800044 	addi	r2,r23,1
  807a04:	b7000044 	addi	fp,r22,1
  807a08:	b0800005 	stb	r2,0(r22)
  807a0c:	003e4106 	br	807314 <_dtoa_r+0xbe4>
  807a10:	d8800317 	ldw	r2,12(sp)
  807a14:	018020b4 	movhi	r6,130
  807a18:	31b50804 	addi	r6,r6,-11232
  807a1c:	b009883a 	mov	r4,r22
  807a20:	100e90fa 	slli	r7,r2,3
  807a24:	b80b883a 	mov	r5,r23
  807a28:	398f883a 	add	r7,r7,r6
  807a2c:	38bffe17 	ldw	r2,-8(r7)
  807a30:	d9800517 	ldw	r6,20(sp)
  807a34:	38ffff17 	ldw	r3,-4(r7)
  807a38:	37000044 	addi	fp,r6,1
  807a3c:	180f883a 	mov	r7,r3
  807a40:	100d883a 	mov	r6,r2
  807a44:	080323c0 	call	80323c <__muldf3>
  807a48:	a80b883a 	mov	r5,r21
  807a4c:	a009883a 	mov	r4,r20
  807a50:	182f883a 	mov	r23,r3
  807a54:	102d883a 	mov	r22,r2
  807a58:	08039d80 	call	8039d8 <__fixdfsi>
  807a5c:	1009883a 	mov	r4,r2
  807a60:	1027883a 	mov	r19,r2
  807a64:	08038e00 	call	8038e0 <__floatsidf>
  807a68:	a80b883a 	mov	r5,r21
  807a6c:	a009883a 	mov	r4,r20
  807a70:	180f883a 	mov	r7,r3
  807a74:	100d883a 	mov	r6,r2
  807a78:	08031480 	call	803148 <__subdf3>
  807a7c:	180b883a 	mov	r5,r3
  807a80:	d8c00517 	ldw	r3,20(sp)
  807a84:	9cc00c04 	addi	r19,r19,48
  807a88:	1009883a 	mov	r4,r2
  807a8c:	1cc00005 	stb	r19,0(r3)
  807a90:	2021883a 	mov	r16,r4
  807a94:	d9000317 	ldw	r4,12(sp)
  807a98:	00800044 	movi	r2,1
  807a9c:	2823883a 	mov	r17,r5
  807aa0:	20802226 	beq	r4,r2,807b2c <_dtoa_r+0x13fc>
  807aa4:	1029883a 	mov	r20,r2
  807aa8:	0005883a 	mov	r2,zero
  807aac:	00d00934 	movhi	r3,16420
  807ab0:	180f883a 	mov	r7,r3
  807ab4:	100d883a 	mov	r6,r2
  807ab8:	880b883a 	mov	r5,r17
  807abc:	8009883a 	mov	r4,r16
  807ac0:	080323c0 	call	80323c <__muldf3>
  807ac4:	180b883a 	mov	r5,r3
  807ac8:	1009883a 	mov	r4,r2
  807acc:	1823883a 	mov	r17,r3
  807ad0:	1021883a 	mov	r16,r2
  807ad4:	08039d80 	call	8039d8 <__fixdfsi>
  807ad8:	1009883a 	mov	r4,r2
  807adc:	102b883a 	mov	r21,r2
  807ae0:	08038e00 	call	8038e0 <__floatsidf>
  807ae4:	880b883a 	mov	r5,r17
  807ae8:	8009883a 	mov	r4,r16
  807aec:	180f883a 	mov	r7,r3
  807af0:	100d883a 	mov	r6,r2
  807af4:	08031480 	call	803148 <__subdf3>
  807af8:	180b883a 	mov	r5,r3
  807afc:	d8c00517 	ldw	r3,20(sp)
  807b00:	1009883a 	mov	r4,r2
  807b04:	ad400c04 	addi	r21,r21,48
  807b08:	1d05883a 	add	r2,r3,r20
  807b0c:	15400005 	stb	r21,0(r2)
  807b10:	2021883a 	mov	r16,r4
  807b14:	d9000317 	ldw	r4,12(sp)
  807b18:	a5000044 	addi	r20,r20,1
  807b1c:	2823883a 	mov	r17,r5
  807b20:	a13fe11e 	bne	r20,r4,807aa8 <_dtoa_r+0x1378>
  807b24:	e505883a 	add	r2,fp,r20
  807b28:	173fffc4 	addi	fp,r2,-1
  807b2c:	0025883a 	mov	r18,zero
  807b30:	04cff834 	movhi	r19,16352
  807b34:	b009883a 	mov	r4,r22
  807b38:	b80b883a 	mov	r5,r23
  807b3c:	900d883a 	mov	r6,r18
  807b40:	980f883a 	mov	r7,r19
  807b44:	08031c80 	call	8031c8 <__adddf3>
  807b48:	180b883a 	mov	r5,r3
  807b4c:	1009883a 	mov	r4,r2
  807b50:	800d883a 	mov	r6,r16
  807b54:	880f883a 	mov	r7,r17
  807b58:	08038580 	call	803858 <__ltdf2>
  807b5c:	103cab16 	blt	r2,zero,806e0c <_dtoa_r+0x6dc>
  807b60:	0009883a 	mov	r4,zero
  807b64:	980b883a 	mov	r5,r19
  807b68:	b80f883a 	mov	r7,r23
  807b6c:	b00d883a 	mov	r6,r22
  807b70:	08031480 	call	803148 <__subdf3>
  807b74:	180b883a 	mov	r5,r3
  807b78:	880f883a 	mov	r7,r17
  807b7c:	1009883a 	mov	r4,r2
  807b80:	800d883a 	mov	r6,r16
  807b84:	080c2940 	call	80c294 <__gtdf2>
  807b88:	00bc470e 	bge	zero,r2,806ca8 <_dtoa_r+0x578>
  807b8c:	00c00c04 	movi	r3,48
  807b90:	e73fffc4 	addi	fp,fp,-1
  807b94:	e0800007 	ldb	r2,0(fp)
  807b98:	10fffd26 	beq	r2,r3,807b90 <_dtoa_r+0x1460>
  807b9c:	d9800417 	ldw	r6,16(sp)
  807ba0:	e7000044 	addi	fp,fp,1
  807ba4:	d9800d15 	stw	r6,52(sp)
  807ba8:	003cab06 	br	806e58 <_dtoa_r+0x728>
  807bac:	d8c00f17 	ldw	r3,60(sp)
  807bb0:	d9001117 	ldw	r4,68(sp)
  807bb4:	20e1c83a 	sub	r16,r4,r3
  807bb8:	0007883a 	mov	r3,zero
  807bbc:	003d9b06 	br	80722c <_dtoa_r+0xafc>
  807bc0:	00800e44 	movi	r2,57
  807bc4:	b0800005 	stb	r2,0(r22)
  807bc8:	b5800044 	addi	r22,r22,1
  807bcc:	003dc106 	br	8072d4 <_dtoa_r+0xba4>
  807bd0:	05800084 	movi	r22,2
  807bd4:	003bf706 	br	806bb4 <_dtoa_r+0x484>
  807bd8:	d9000f17 	ldw	r4,60(sp)
  807bdc:	013c000e 	bge	zero,r4,806be0 <_dtoa_r+0x4b0>
  807be0:	d9800e17 	ldw	r6,56(sp)
  807be4:	01bc300e 	bge	zero,r6,806ca8 <_dtoa_r+0x578>
  807be8:	0005883a 	mov	r2,zero
  807bec:	00d00934 	movhi	r3,16420
  807bf0:	a80b883a 	mov	r5,r21
  807bf4:	180f883a 	mov	r7,r3
  807bf8:	a009883a 	mov	r4,r20
  807bfc:	100d883a 	mov	r6,r2
  807c00:	080323c0 	call	80323c <__muldf3>
  807c04:	b1000044 	addi	r4,r22,1
  807c08:	1021883a 	mov	r16,r2
  807c0c:	1823883a 	mov	r17,r3
  807c10:	08038e00 	call	8038e0 <__floatsidf>
  807c14:	880b883a 	mov	r5,r17
  807c18:	8009883a 	mov	r4,r16
  807c1c:	180f883a 	mov	r7,r3
  807c20:	100d883a 	mov	r6,r2
  807c24:	080323c0 	call	80323c <__muldf3>
  807c28:	0011883a 	mov	r8,zero
  807c2c:	02500734 	movhi	r9,16412
  807c30:	180b883a 	mov	r5,r3
  807c34:	480f883a 	mov	r7,r9
  807c38:	1009883a 	mov	r4,r2
  807c3c:	400d883a 	mov	r6,r8
  807c40:	08031c80 	call	8031c8 <__adddf3>
  807c44:	102d883a 	mov	r22,r2
  807c48:	00bf3034 	movhi	r2,64704
  807c4c:	10ef883a 	add	r23,r2,r3
  807c50:	d8800d17 	ldw	r2,52(sp)
  807c54:	d8c00e17 	ldw	r3,56(sp)
  807c58:	8029883a 	mov	r20,r16
  807c5c:	10bfffc4 	addi	r2,r2,-1
  807c60:	882b883a 	mov	r21,r17
  807c64:	d8800415 	stw	r2,16(sp)
  807c68:	d8c00315 	stw	r3,12(sp)
  807c6c:	003e8306 	br	80767c <_dtoa_r+0xf4c>
  807c70:	d8800117 	ldw	r2,4(sp)
  807c74:	dc001117 	ldw	r16,68(sp)
  807c78:	dc801017 	ldw	r18,64(sp)
  807c7c:	00c00d84 	movi	r3,54
  807c80:	1887c83a 	sub	r3,r3,r2
  807c84:	003d6906 	br	80722c <_dtoa_r+0xafc>
  807c88:	01800044 	movi	r6,1
  807c8c:	3021883a 	mov	r16,r6
  807c90:	d9800f15 	stw	r6,60(sp)
  807c94:	d9802615 	stw	r6,152(sp)
  807c98:	d9800e15 	stw	r6,56(sp)
  807c9c:	003b9306 	br	806aec <_dtoa_r+0x3bc>
  807ca0:	b021883a 	mov	r16,r22
  807ca4:	dd800f15 	stw	r22,60(sp)
  807ca8:	003b9006 	br	806aec <_dtoa_r+0x3bc>
  807cac:	103e221e 	bne	r2,zero,807538 <_dtoa_r+0xe08>
  807cb0:	b880004c 	andi	r2,r23,1
  807cb4:	1005003a 	cmpeq	r2,r2,zero
  807cb8:	103e1f1e 	bne	r2,zero,807538 <_dtoa_r+0xe08>
  807cbc:	003e1b06 	br	80752c <_dtoa_r+0xdfc>
  807cc0:	d9001617 	ldw	r4,88(sp)
  807cc4:	980b883a 	mov	r5,r19
  807cc8:	01800284 	movi	r6,10
  807ccc:	000f883a 	mov	r7,zero
  807cd0:	080a5780 	call	80a578 <__multadd>
  807cd4:	d8c00e17 	ldw	r3,56(sp)
  807cd8:	1027883a 	mov	r19,r2
  807cdc:	d8c00f15 	stw	r3,60(sp)
  807ce0:	003cd306 	br	807030 <_dtoa_r+0x900>

00807ce4 <_fflush_r>:
  807ce4:	defffb04 	addi	sp,sp,-20
  807ce8:	dcc00315 	stw	r19,12(sp)
  807cec:	dc800215 	stw	r18,8(sp)
  807cf0:	dfc00415 	stw	ra,16(sp)
  807cf4:	dc400115 	stw	r17,4(sp)
  807cf8:	dc000015 	stw	r16,0(sp)
  807cfc:	2027883a 	mov	r19,r4
  807d00:	2825883a 	mov	r18,r5
  807d04:	20000226 	beq	r4,zero,807d10 <_fflush_r+0x2c>
  807d08:	20800e17 	ldw	r2,56(r4)
  807d0c:	10005626 	beq	r2,zero,807e68 <_fflush_r+0x184>
  807d10:	9100030b 	ldhu	r4,12(r18)
  807d14:	20ffffcc 	andi	r3,r4,65535
  807d18:	18e0001c 	xori	r3,r3,32768
  807d1c:	18e00004 	addi	r3,r3,-32768
  807d20:	1880020c 	andi	r2,r3,8
  807d24:	1000261e 	bne	r2,zero,807dc0 <_fflush_r+0xdc>
  807d28:	90c00117 	ldw	r3,4(r18)
  807d2c:	20820014 	ori	r2,r4,2048
  807d30:	9080030d 	sth	r2,12(r18)
  807d34:	1009883a 	mov	r4,r2
  807d38:	00c0400e 	bge	zero,r3,807e3c <_fflush_r+0x158>
  807d3c:	92000a17 	ldw	r8,40(r18)
  807d40:	40004026 	beq	r8,zero,807e44 <_fflush_r+0x160>
  807d44:	2084000c 	andi	r2,r4,4096
  807d48:	10005326 	beq	r2,zero,807e98 <_fflush_r+0x1b4>
  807d4c:	94001417 	ldw	r16,80(r18)
  807d50:	9080030b 	ldhu	r2,12(r18)
  807d54:	1080010c 	andi	r2,r2,4
  807d58:	1000481e 	bne	r2,zero,807e7c <_fflush_r+0x198>
  807d5c:	91400717 	ldw	r5,28(r18)
  807d60:	9809883a 	mov	r4,r19
  807d64:	800d883a 	mov	r6,r16
  807d68:	000f883a 	mov	r7,zero
  807d6c:	403ee83a 	callr	r8
  807d70:	8080261e 	bne	r16,r2,807e0c <_fflush_r+0x128>
  807d74:	9080030b 	ldhu	r2,12(r18)
  807d78:	91000417 	ldw	r4,16(r18)
  807d7c:	90000115 	stw	zero,4(r18)
  807d80:	10bdffcc 	andi	r2,r2,63487
  807d84:	10ffffcc 	andi	r3,r2,65535
  807d88:	18c4000c 	andi	r3,r3,4096
  807d8c:	9080030d 	sth	r2,12(r18)
  807d90:	91000015 	stw	r4,0(r18)
  807d94:	18002b26 	beq	r3,zero,807e44 <_fflush_r+0x160>
  807d98:	0007883a 	mov	r3,zero
  807d9c:	1805883a 	mov	r2,r3
  807da0:	94001415 	stw	r16,80(r18)
  807da4:	dfc00417 	ldw	ra,16(sp)
  807da8:	dcc00317 	ldw	r19,12(sp)
  807dac:	dc800217 	ldw	r18,8(sp)
  807db0:	dc400117 	ldw	r17,4(sp)
  807db4:	dc000017 	ldw	r16,0(sp)
  807db8:	dec00504 	addi	sp,sp,20
  807dbc:	f800283a 	ret
  807dc0:	94400417 	ldw	r17,16(r18)
  807dc4:	88001f26 	beq	r17,zero,807e44 <_fflush_r+0x160>
  807dc8:	90800017 	ldw	r2,0(r18)
  807dcc:	18c000cc 	andi	r3,r3,3
  807dd0:	94400015 	stw	r17,0(r18)
  807dd4:	1461c83a 	sub	r16,r2,r17
  807dd8:	18002526 	beq	r3,zero,807e70 <_fflush_r+0x18c>
  807ddc:	0005883a 	mov	r2,zero
  807de0:	90800215 	stw	r2,8(r18)
  807de4:	0400170e 	bge	zero,r16,807e44 <_fflush_r+0x160>
  807de8:	90c00917 	ldw	r3,36(r18)
  807dec:	91400717 	ldw	r5,28(r18)
  807df0:	880d883a 	mov	r6,r17
  807df4:	800f883a 	mov	r7,r16
  807df8:	9809883a 	mov	r4,r19
  807dfc:	183ee83a 	callr	r3
  807e00:	88a3883a 	add	r17,r17,r2
  807e04:	80a1c83a 	sub	r16,r16,r2
  807e08:	00bff616 	blt	zero,r2,807de4 <_fflush_r+0x100>
  807e0c:	9080030b 	ldhu	r2,12(r18)
  807e10:	00ffffc4 	movi	r3,-1
  807e14:	10801014 	ori	r2,r2,64
  807e18:	9080030d 	sth	r2,12(r18)
  807e1c:	1805883a 	mov	r2,r3
  807e20:	dfc00417 	ldw	ra,16(sp)
  807e24:	dcc00317 	ldw	r19,12(sp)
  807e28:	dc800217 	ldw	r18,8(sp)
  807e2c:	dc400117 	ldw	r17,4(sp)
  807e30:	dc000017 	ldw	r16,0(sp)
  807e34:	dec00504 	addi	sp,sp,20
  807e38:	f800283a 	ret
  807e3c:	90800f17 	ldw	r2,60(r18)
  807e40:	00bfbe16 	blt	zero,r2,807d3c <_fflush_r+0x58>
  807e44:	0007883a 	mov	r3,zero
  807e48:	1805883a 	mov	r2,r3
  807e4c:	dfc00417 	ldw	ra,16(sp)
  807e50:	dcc00317 	ldw	r19,12(sp)
  807e54:	dc800217 	ldw	r18,8(sp)
  807e58:	dc400117 	ldw	r17,4(sp)
  807e5c:	dc000017 	ldw	r16,0(sp)
  807e60:	dec00504 	addi	sp,sp,20
  807e64:	f800283a 	ret
  807e68:	0807f7c0 	call	807f7c <__sinit>
  807e6c:	003fa806 	br	807d10 <_fflush_r+0x2c>
  807e70:	90800517 	ldw	r2,20(r18)
  807e74:	90800215 	stw	r2,8(r18)
  807e78:	003fda06 	br	807de4 <_fflush_r+0x100>
  807e7c:	90800117 	ldw	r2,4(r18)
  807e80:	90c00c17 	ldw	r3,48(r18)
  807e84:	80a1c83a 	sub	r16,r16,r2
  807e88:	183fb426 	beq	r3,zero,807d5c <_fflush_r+0x78>
  807e8c:	90800f17 	ldw	r2,60(r18)
  807e90:	80a1c83a 	sub	r16,r16,r2
  807e94:	003fb106 	br	807d5c <_fflush_r+0x78>
  807e98:	91400717 	ldw	r5,28(r18)
  807e9c:	9809883a 	mov	r4,r19
  807ea0:	000d883a 	mov	r6,zero
  807ea4:	01c00044 	movi	r7,1
  807ea8:	403ee83a 	callr	r8
  807eac:	1021883a 	mov	r16,r2
  807eb0:	00bfffc4 	movi	r2,-1
  807eb4:	80800226 	beq	r16,r2,807ec0 <_fflush_r+0x1dc>
  807eb8:	92000a17 	ldw	r8,40(r18)
  807ebc:	003fa406 	br	807d50 <_fflush_r+0x6c>
  807ec0:	98c00017 	ldw	r3,0(r19)
  807ec4:	00800744 	movi	r2,29
  807ec8:	18bfde26 	beq	r3,r2,807e44 <_fflush_r+0x160>
  807ecc:	9080030b 	ldhu	r2,12(r18)
  807ed0:	8007883a 	mov	r3,r16
  807ed4:	10801014 	ori	r2,r2,64
  807ed8:	9080030d 	sth	r2,12(r18)
  807edc:	003fcf06 	br	807e1c <_fflush_r+0x138>

00807ee0 <fflush>:
  807ee0:	01402034 	movhi	r5,128
  807ee4:	295f3904 	addi	r5,r5,31972
  807ee8:	2007883a 	mov	r3,r4
  807eec:	20000526 	beq	r4,zero,807f04 <fflush+0x24>
  807ef0:	008020b4 	movhi	r2,130
  807ef4:	10bc6804 	addi	r2,r2,-3680
  807ef8:	11000017 	ldw	r4,0(r2)
  807efc:	180b883a 	mov	r5,r3
  807f00:	0807ce41 	jmpi	807ce4 <_fflush_r>
  807f04:	008020b4 	movhi	r2,130
  807f08:	10bc6904 	addi	r2,r2,-3676
  807f0c:	11000017 	ldw	r4,0(r2)
  807f10:	0808ab01 	jmpi	808ab0 <_fwalk_reent>

00807f14 <std>:
  807f14:	00802074 	movhi	r2,129
  807f18:	10abd704 	addi	r2,r2,-20644
  807f1c:	20800b15 	stw	r2,44(r4)
  807f20:	00802074 	movhi	r2,129
  807f24:	10ac1204 	addi	r2,r2,-20408
  807f28:	20800815 	stw	r2,32(r4)
  807f2c:	00c02074 	movhi	r3,129
  807f30:	18ebf304 	addi	r3,r3,-20532
  807f34:	00802074 	movhi	r2,129
  807f38:	10abd904 	addi	r2,r2,-20636
  807f3c:	2140030d 	sth	r5,12(r4)
  807f40:	2180038d 	sth	r6,14(r4)
  807f44:	20c00915 	stw	r3,36(r4)
  807f48:	20800a15 	stw	r2,40(r4)
  807f4c:	20000015 	stw	zero,0(r4)
  807f50:	20000115 	stw	zero,4(r4)
  807f54:	20000215 	stw	zero,8(r4)
  807f58:	20000415 	stw	zero,16(r4)
  807f5c:	20000515 	stw	zero,20(r4)
  807f60:	20000615 	stw	zero,24(r4)
  807f64:	21000715 	stw	r4,28(r4)
  807f68:	f800283a 	ret

00807f6c <__sfp_lock_acquire>:
  807f6c:	f800283a 	ret

00807f70 <__sfp_lock_release>:
  807f70:	f800283a 	ret

00807f74 <__sinit_lock_acquire>:
  807f74:	f800283a 	ret

00807f78 <__sinit_lock_release>:
  807f78:	f800283a 	ret

00807f7c <__sinit>:
  807f7c:	20800e17 	ldw	r2,56(r4)
  807f80:	defffd04 	addi	sp,sp,-12
  807f84:	dc400115 	stw	r17,4(sp)
  807f88:	dc000015 	stw	r16,0(sp)
  807f8c:	dfc00215 	stw	ra,8(sp)
  807f90:	04400044 	movi	r17,1
  807f94:	01400104 	movi	r5,4
  807f98:	000d883a 	mov	r6,zero
  807f9c:	2021883a 	mov	r16,r4
  807fa0:	2200bb04 	addi	r8,r4,748
  807fa4:	200f883a 	mov	r7,r4
  807fa8:	10000526 	beq	r2,zero,807fc0 <__sinit+0x44>
  807fac:	dfc00217 	ldw	ra,8(sp)
  807fb0:	dc400117 	ldw	r17,4(sp)
  807fb4:	dc000017 	ldw	r16,0(sp)
  807fb8:	dec00304 	addi	sp,sp,12
  807fbc:	f800283a 	ret
  807fc0:	21000117 	ldw	r4,4(r4)
  807fc4:	00802074 	movhi	r2,129
  807fc8:	10a01804 	addi	r2,r2,-32672
  807fcc:	00c000c4 	movi	r3,3
  807fd0:	80800f15 	stw	r2,60(r16)
  807fd4:	80c0b915 	stw	r3,740(r16)
  807fd8:	8200ba15 	stw	r8,744(r16)
  807fdc:	84400e15 	stw	r17,56(r16)
  807fe0:	8000b815 	stw	zero,736(r16)
  807fe4:	0807f140 	call	807f14 <std>
  807fe8:	81000217 	ldw	r4,8(r16)
  807fec:	880d883a 	mov	r6,r17
  807ff0:	800f883a 	mov	r7,r16
  807ff4:	01400284 	movi	r5,10
  807ff8:	0807f140 	call	807f14 <std>
  807ffc:	81000317 	ldw	r4,12(r16)
  808000:	800f883a 	mov	r7,r16
  808004:	01400484 	movi	r5,18
  808008:	01800084 	movi	r6,2
  80800c:	dfc00217 	ldw	ra,8(sp)
  808010:	dc400117 	ldw	r17,4(sp)
  808014:	dc000017 	ldw	r16,0(sp)
  808018:	dec00304 	addi	sp,sp,12
  80801c:	0807f141 	jmpi	807f14 <std>

00808020 <__fp_lock>:
  808020:	0005883a 	mov	r2,zero
  808024:	f800283a 	ret

00808028 <__fp_unlock>:
  808028:	0005883a 	mov	r2,zero
  80802c:	f800283a 	ret

00808030 <__fp_unlock_all>:
  808030:	008020b4 	movhi	r2,130
  808034:	10bc6804 	addi	r2,r2,-3680
  808038:	11000017 	ldw	r4,0(r2)
  80803c:	01402074 	movhi	r5,129
  808040:	29600a04 	addi	r5,r5,-32728
  808044:	0808b781 	jmpi	808b78 <_fwalk>

00808048 <__fp_lock_all>:
  808048:	008020b4 	movhi	r2,130
  80804c:	10bc6804 	addi	r2,r2,-3680
  808050:	11000017 	ldw	r4,0(r2)
  808054:	01402074 	movhi	r5,129
  808058:	29600804 	addi	r5,r5,-32736
  80805c:	0808b781 	jmpi	808b78 <_fwalk>

00808060 <_cleanup_r>:
  808060:	01402074 	movhi	r5,129
  808064:	296d0404 	addi	r5,r5,-19440
  808068:	0808b781 	jmpi	808b78 <_fwalk>

0080806c <_cleanup>:
  80806c:	008020b4 	movhi	r2,130
  808070:	10bc6904 	addi	r2,r2,-3676
  808074:	11000017 	ldw	r4,0(r2)
  808078:	08080601 	jmpi	808060 <_cleanup_r>

0080807c <__sfmoreglue>:
  80807c:	defffc04 	addi	sp,sp,-16
  808080:	dc400115 	stw	r17,4(sp)
  808084:	2c401724 	muli	r17,r5,92
  808088:	dc800215 	stw	r18,8(sp)
  80808c:	2825883a 	mov	r18,r5
  808090:	89400304 	addi	r5,r17,12
  808094:	dc000015 	stw	r16,0(sp)
  808098:	dfc00315 	stw	ra,12(sp)
  80809c:	0808e880 	call	808e88 <_malloc_r>
  8080a0:	0021883a 	mov	r16,zero
  8080a4:	880d883a 	mov	r6,r17
  8080a8:	000b883a 	mov	r5,zero
  8080ac:	10000626 	beq	r2,zero,8080c8 <__sfmoreglue+0x4c>
  8080b0:	11000304 	addi	r4,r2,12
  8080b4:	14800115 	stw	r18,4(r2)
  8080b8:	10000015 	stw	zero,0(r2)
  8080bc:	11000215 	stw	r4,8(r2)
  8080c0:	1021883a 	mov	r16,r2
  8080c4:	080982c0 	call	80982c <memset>
  8080c8:	8005883a 	mov	r2,r16
  8080cc:	dfc00317 	ldw	ra,12(sp)
  8080d0:	dc800217 	ldw	r18,8(sp)
  8080d4:	dc400117 	ldw	r17,4(sp)
  8080d8:	dc000017 	ldw	r16,0(sp)
  8080dc:	dec00404 	addi	sp,sp,16
  8080e0:	f800283a 	ret

008080e4 <__sfp>:
  8080e4:	defffd04 	addi	sp,sp,-12
  8080e8:	008020b4 	movhi	r2,130
  8080ec:	10bc6904 	addi	r2,r2,-3676
  8080f0:	dc000015 	stw	r16,0(sp)
  8080f4:	14000017 	ldw	r16,0(r2)
  8080f8:	dc400115 	stw	r17,4(sp)
  8080fc:	dfc00215 	stw	ra,8(sp)
  808100:	80800e17 	ldw	r2,56(r16)
  808104:	2023883a 	mov	r17,r4
  808108:	10002626 	beq	r2,zero,8081a4 <__sfp+0xc0>
  80810c:	8400b804 	addi	r16,r16,736
  808110:	80800117 	ldw	r2,4(r16)
  808114:	81000217 	ldw	r4,8(r16)
  808118:	10ffffc4 	addi	r3,r2,-1
  80811c:	18000916 	blt	r3,zero,808144 <__sfp+0x60>
  808120:	2080030f 	ldh	r2,12(r4)
  808124:	10000b26 	beq	r2,zero,808154 <__sfp+0x70>
  808128:	017fffc4 	movi	r5,-1
  80812c:	00000206 	br	808138 <__sfp+0x54>
  808130:	2080030f 	ldh	r2,12(r4)
  808134:	10000726 	beq	r2,zero,808154 <__sfp+0x70>
  808138:	18ffffc4 	addi	r3,r3,-1
  80813c:	21001704 	addi	r4,r4,92
  808140:	197ffb1e 	bne	r3,r5,808130 <__sfp+0x4c>
  808144:	80800017 	ldw	r2,0(r16)
  808148:	10001926 	beq	r2,zero,8081b0 <__sfp+0xcc>
  80814c:	1021883a 	mov	r16,r2
  808150:	003fef06 	br	808110 <__sfp+0x2c>
  808154:	00bfffc4 	movi	r2,-1
  808158:	00c00044 	movi	r3,1
  80815c:	2080038d 	sth	r2,14(r4)
  808160:	20c0030d 	sth	r3,12(r4)
  808164:	20000015 	stw	zero,0(r4)
  808168:	20000215 	stw	zero,8(r4)
  80816c:	20000115 	stw	zero,4(r4)
  808170:	20000415 	stw	zero,16(r4)
  808174:	20000515 	stw	zero,20(r4)
  808178:	20000615 	stw	zero,24(r4)
  80817c:	20000c15 	stw	zero,48(r4)
  808180:	20000d15 	stw	zero,52(r4)
  808184:	20001115 	stw	zero,68(r4)
  808188:	20001215 	stw	zero,72(r4)
  80818c:	2005883a 	mov	r2,r4
  808190:	dfc00217 	ldw	ra,8(sp)
  808194:	dc400117 	ldw	r17,4(sp)
  808198:	dc000017 	ldw	r16,0(sp)
  80819c:	dec00304 	addi	sp,sp,12
  8081a0:	f800283a 	ret
  8081a4:	8009883a 	mov	r4,r16
  8081a8:	0807f7c0 	call	807f7c <__sinit>
  8081ac:	003fd706 	br	80810c <__sfp+0x28>
  8081b0:	8809883a 	mov	r4,r17
  8081b4:	01400104 	movi	r5,4
  8081b8:	080807c0 	call	80807c <__sfmoreglue>
  8081bc:	80800015 	stw	r2,0(r16)
  8081c0:	103fe21e 	bne	r2,zero,80814c <__sfp+0x68>
  8081c4:	00800304 	movi	r2,12
  8081c8:	0009883a 	mov	r4,zero
  8081cc:	88800015 	stw	r2,0(r17)
  8081d0:	003fee06 	br	80818c <__sfp+0xa8>

008081d4 <_malloc_trim_r>:
  8081d4:	defffb04 	addi	sp,sp,-20
  8081d8:	dcc00315 	stw	r19,12(sp)
  8081dc:	04c020b4 	movhi	r19,130
  8081e0:	9cf6bf04 	addi	r19,r19,-9476
  8081e4:	dc800215 	stw	r18,8(sp)
  8081e8:	dc400115 	stw	r17,4(sp)
  8081ec:	dc000015 	stw	r16,0(sp)
  8081f0:	2823883a 	mov	r17,r5
  8081f4:	2025883a 	mov	r18,r4
  8081f8:	dfc00415 	stw	ra,16(sp)
  8081fc:	080d2180 	call	80d218 <__malloc_lock>
  808200:	98800217 	ldw	r2,8(r19)
  808204:	9009883a 	mov	r4,r18
  808208:	000b883a 	mov	r5,zero
  80820c:	10c00117 	ldw	r3,4(r2)
  808210:	00bfff04 	movi	r2,-4
  808214:	18a0703a 	and	r16,r3,r2
  808218:	8463c83a 	sub	r17,r16,r17
  80821c:	8c43fbc4 	addi	r17,r17,4079
  808220:	8822d33a 	srli	r17,r17,12
  808224:	0083ffc4 	movi	r2,4095
  808228:	8c7fffc4 	addi	r17,r17,-1
  80822c:	8822933a 	slli	r17,r17,12
  808230:	1440060e 	bge	r2,r17,80824c <_malloc_trim_r+0x78>
  808234:	080aeec0 	call	80aeec <_sbrk_r>
  808238:	98c00217 	ldw	r3,8(r19)
  80823c:	9009883a 	mov	r4,r18
  808240:	044bc83a 	sub	r5,zero,r17
  808244:	80c7883a 	add	r3,r16,r3
  808248:	10c00926 	beq	r2,r3,808270 <_malloc_trim_r+0x9c>
  80824c:	080d3200 	call	80d320 <__malloc_unlock>
  808250:	0005883a 	mov	r2,zero
  808254:	dfc00417 	ldw	ra,16(sp)
  808258:	dcc00317 	ldw	r19,12(sp)
  80825c:	dc800217 	ldw	r18,8(sp)
  808260:	dc400117 	ldw	r17,4(sp)
  808264:	dc000017 	ldw	r16,0(sp)
  808268:	dec00504 	addi	sp,sp,20
  80826c:	f800283a 	ret
  808270:	9009883a 	mov	r4,r18
  808274:	080aeec0 	call	80aeec <_sbrk_r>
  808278:	844dc83a 	sub	r6,r16,r17
  80827c:	00ffffc4 	movi	r3,-1
  808280:	9009883a 	mov	r4,r18
  808284:	000b883a 	mov	r5,zero
  808288:	01c020b4 	movhi	r7,130
  80828c:	39fcdf04 	addi	r7,r7,-3204
  808290:	31800054 	ori	r6,r6,1
  808294:	10c00926 	beq	r2,r3,8082bc <_malloc_trim_r+0xe8>
  808298:	38800017 	ldw	r2,0(r7)
  80829c:	98c00217 	ldw	r3,8(r19)
  8082a0:	9009883a 	mov	r4,r18
  8082a4:	1445c83a 	sub	r2,r2,r17
  8082a8:	38800015 	stw	r2,0(r7)
  8082ac:	19800115 	stw	r6,4(r3)
  8082b0:	080d3200 	call	80d320 <__malloc_unlock>
  8082b4:	00800044 	movi	r2,1
  8082b8:	003fe606 	br	808254 <_malloc_trim_r+0x80>
  8082bc:	080aeec0 	call	80aeec <_sbrk_r>
  8082c0:	99800217 	ldw	r6,8(r19)
  8082c4:	100f883a 	mov	r7,r2
  8082c8:	9009883a 	mov	r4,r18
  8082cc:	1187c83a 	sub	r3,r2,r6
  8082d0:	008003c4 	movi	r2,15
  8082d4:	19400054 	ori	r5,r3,1
  8082d8:	10ffdc0e 	bge	r2,r3,80824c <_malloc_trim_r+0x78>
  8082dc:	008020b4 	movhi	r2,130
  8082e0:	10bc6d04 	addi	r2,r2,-3660
  8082e4:	10c00017 	ldw	r3,0(r2)
  8082e8:	008020b4 	movhi	r2,130
  8082ec:	10bcdf04 	addi	r2,r2,-3204
  8082f0:	31400115 	stw	r5,4(r6)
  8082f4:	38c7c83a 	sub	r3,r7,r3
  8082f8:	10c00015 	stw	r3,0(r2)
  8082fc:	003fd306 	br	80824c <_malloc_trim_r+0x78>

00808300 <_free_r>:
  808300:	defffd04 	addi	sp,sp,-12
  808304:	dc400115 	stw	r17,4(sp)
  808308:	dc000015 	stw	r16,0(sp)
  80830c:	dfc00215 	stw	ra,8(sp)
  808310:	2821883a 	mov	r16,r5
  808314:	2023883a 	mov	r17,r4
  808318:	28005a26 	beq	r5,zero,808484 <_free_r+0x184>
  80831c:	080d2180 	call	80d218 <__malloc_lock>
  808320:	823ffe04 	addi	r8,r16,-8
  808324:	41400117 	ldw	r5,4(r8)
  808328:	00bfff84 	movi	r2,-2
  80832c:	028020b4 	movhi	r10,130
  808330:	52b6bf04 	addi	r10,r10,-9476
  808334:	288e703a 	and	r7,r5,r2
  808338:	41cd883a 	add	r6,r8,r7
  80833c:	30c00117 	ldw	r3,4(r6)
  808340:	51000217 	ldw	r4,8(r10)
  808344:	00bfff04 	movi	r2,-4
  808348:	1892703a 	and	r9,r3,r2
  80834c:	5017883a 	mov	r11,r10
  808350:	31006726 	beq	r6,r4,8084f0 <_free_r+0x1f0>
  808354:	2880004c 	andi	r2,r5,1
  808358:	1005003a 	cmpeq	r2,r2,zero
  80835c:	32400115 	stw	r9,4(r6)
  808360:	10001a1e 	bne	r2,zero,8083cc <_free_r+0xcc>
  808364:	000b883a 	mov	r5,zero
  808368:	3247883a 	add	r3,r6,r9
  80836c:	18800117 	ldw	r2,4(r3)
  808370:	1080004c 	andi	r2,r2,1
  808374:	1000231e 	bne	r2,zero,808404 <_free_r+0x104>
  808378:	280ac03a 	cmpne	r5,r5,zero
  80837c:	3a4f883a 	add	r7,r7,r9
  808380:	2800451e 	bne	r5,zero,808498 <_free_r+0x198>
  808384:	31000217 	ldw	r4,8(r6)
  808388:	008020b4 	movhi	r2,130
  80838c:	10b6c104 	addi	r2,r2,-9468
  808390:	20807b26 	beq	r4,r2,808580 <_free_r+0x280>
  808394:	30800317 	ldw	r2,12(r6)
  808398:	3a07883a 	add	r3,r7,r8
  80839c:	19c00015 	stw	r7,0(r3)
  8083a0:	11000215 	stw	r4,8(r2)
  8083a4:	20800315 	stw	r2,12(r4)
  8083a8:	38800054 	ori	r2,r7,1
  8083ac:	40800115 	stw	r2,4(r8)
  8083b0:	28001a26 	beq	r5,zero,80841c <_free_r+0x11c>
  8083b4:	8809883a 	mov	r4,r17
  8083b8:	dfc00217 	ldw	ra,8(sp)
  8083bc:	dc400117 	ldw	r17,4(sp)
  8083c0:	dc000017 	ldw	r16,0(sp)
  8083c4:	dec00304 	addi	sp,sp,12
  8083c8:	080d3201 	jmpi	80d320 <__malloc_unlock>
  8083cc:	80bffe17 	ldw	r2,-8(r16)
  8083d0:	50c00204 	addi	r3,r10,8
  8083d4:	4091c83a 	sub	r8,r8,r2
  8083d8:	41000217 	ldw	r4,8(r8)
  8083dc:	388f883a 	add	r7,r7,r2
  8083e0:	20c06126 	beq	r4,r3,808568 <_free_r+0x268>
  8083e4:	40800317 	ldw	r2,12(r8)
  8083e8:	3247883a 	add	r3,r6,r9
  8083ec:	000b883a 	mov	r5,zero
  8083f0:	11000215 	stw	r4,8(r2)
  8083f4:	20800315 	stw	r2,12(r4)
  8083f8:	18800117 	ldw	r2,4(r3)
  8083fc:	1080004c 	andi	r2,r2,1
  808400:	103fdd26 	beq	r2,zero,808378 <_free_r+0x78>
  808404:	38800054 	ori	r2,r7,1
  808408:	3a07883a 	add	r3,r7,r8
  80840c:	280ac03a 	cmpne	r5,r5,zero
  808410:	40800115 	stw	r2,4(r8)
  808414:	19c00015 	stw	r7,0(r3)
  808418:	283fe61e 	bne	r5,zero,8083b4 <_free_r+0xb4>
  80841c:	00807fc4 	movi	r2,511
  808420:	11c01f2e 	bgeu	r2,r7,8084a0 <_free_r+0x1a0>
  808424:	3806d27a 	srli	r3,r7,9
  808428:	1800481e 	bne	r3,zero,80854c <_free_r+0x24c>
  80842c:	3804d0fa 	srli	r2,r7,3
  808430:	100690fa 	slli	r3,r2,3
  808434:	1acd883a 	add	r6,r3,r11
  808438:	31400217 	ldw	r5,8(r6)
  80843c:	31405926 	beq	r6,r5,8085a4 <_free_r+0x2a4>
  808440:	28800117 	ldw	r2,4(r5)
  808444:	00ffff04 	movi	r3,-4
  808448:	10c4703a 	and	r2,r2,r3
  80844c:	3880022e 	bgeu	r7,r2,808458 <_free_r+0x158>
  808450:	29400217 	ldw	r5,8(r5)
  808454:	317ffa1e 	bne	r6,r5,808440 <_free_r+0x140>
  808458:	29800317 	ldw	r6,12(r5)
  80845c:	41800315 	stw	r6,12(r8)
  808460:	41400215 	stw	r5,8(r8)
  808464:	8809883a 	mov	r4,r17
  808468:	2a000315 	stw	r8,12(r5)
  80846c:	32000215 	stw	r8,8(r6)
  808470:	dfc00217 	ldw	ra,8(sp)
  808474:	dc400117 	ldw	r17,4(sp)
  808478:	dc000017 	ldw	r16,0(sp)
  80847c:	dec00304 	addi	sp,sp,12
  808480:	080d3201 	jmpi	80d320 <__malloc_unlock>
  808484:	dfc00217 	ldw	ra,8(sp)
  808488:	dc400117 	ldw	r17,4(sp)
  80848c:	dc000017 	ldw	r16,0(sp)
  808490:	dec00304 	addi	sp,sp,12
  808494:	f800283a 	ret
  808498:	31000217 	ldw	r4,8(r6)
  80849c:	003fbd06 	br	808394 <_free_r+0x94>
  8084a0:	3806d0fa 	srli	r3,r7,3
  8084a4:	00800044 	movi	r2,1
  8084a8:	51400117 	ldw	r5,4(r10)
  8084ac:	180890fa 	slli	r4,r3,3
  8084b0:	1807d0ba 	srai	r3,r3,2
  8084b4:	22c9883a 	add	r4,r4,r11
  8084b8:	21800217 	ldw	r6,8(r4)
  8084bc:	10c4983a 	sll	r2,r2,r3
  8084c0:	41000315 	stw	r4,12(r8)
  8084c4:	41800215 	stw	r6,8(r8)
  8084c8:	288ab03a 	or	r5,r5,r2
  8084cc:	22000215 	stw	r8,8(r4)
  8084d0:	8809883a 	mov	r4,r17
  8084d4:	51400115 	stw	r5,4(r10)
  8084d8:	32000315 	stw	r8,12(r6)
  8084dc:	dfc00217 	ldw	ra,8(sp)
  8084e0:	dc400117 	ldw	r17,4(sp)
  8084e4:	dc000017 	ldw	r16,0(sp)
  8084e8:	dec00304 	addi	sp,sp,12
  8084ec:	080d3201 	jmpi	80d320 <__malloc_unlock>
  8084f0:	2880004c 	andi	r2,r5,1
  8084f4:	3a4d883a 	add	r6,r7,r9
  8084f8:	1000071e 	bne	r2,zero,808518 <_free_r+0x218>
  8084fc:	80bffe17 	ldw	r2,-8(r16)
  808500:	4091c83a 	sub	r8,r8,r2
  808504:	41000317 	ldw	r4,12(r8)
  808508:	40c00217 	ldw	r3,8(r8)
  80850c:	308d883a 	add	r6,r6,r2
  808510:	20c00215 	stw	r3,8(r4)
  808514:	19000315 	stw	r4,12(r3)
  808518:	008020b4 	movhi	r2,130
  80851c:	10bc6c04 	addi	r2,r2,-3664
  808520:	11000017 	ldw	r4,0(r2)
  808524:	30c00054 	ori	r3,r6,1
  808528:	52000215 	stw	r8,8(r10)
  80852c:	40c00115 	stw	r3,4(r8)
  808530:	313fa036 	bltu	r6,r4,8083b4 <_free_r+0xb4>
  808534:	008020b4 	movhi	r2,130
  808538:	10bcaf04 	addi	r2,r2,-3396
  80853c:	11400017 	ldw	r5,0(r2)
  808540:	8809883a 	mov	r4,r17
  808544:	08081d40 	call	8081d4 <_malloc_trim_r>
  808548:	003f9a06 	br	8083b4 <_free_r+0xb4>
  80854c:	00800104 	movi	r2,4
  808550:	10c0072e 	bgeu	r2,r3,808570 <_free_r+0x270>
  808554:	00800504 	movi	r2,20
  808558:	10c01936 	bltu	r2,r3,8085c0 <_free_r+0x2c0>
  80855c:	188016c4 	addi	r2,r3,91
  808560:	100690fa 	slli	r3,r2,3
  808564:	003fb306 	br	808434 <_free_r+0x134>
  808568:	01400044 	movi	r5,1
  80856c:	003f7e06 	br	808368 <_free_r+0x68>
  808570:	3804d1ba 	srli	r2,r7,6
  808574:	10800e04 	addi	r2,r2,56
  808578:	100690fa 	slli	r3,r2,3
  80857c:	003fad06 	br	808434 <_free_r+0x134>
  808580:	22000315 	stw	r8,12(r4)
  808584:	22000215 	stw	r8,8(r4)
  808588:	3a05883a 	add	r2,r7,r8
  80858c:	38c00054 	ori	r3,r7,1
  808590:	11c00015 	stw	r7,0(r2)
  808594:	41000215 	stw	r4,8(r8)
  808598:	40c00115 	stw	r3,4(r8)
  80859c:	41000315 	stw	r4,12(r8)
  8085a0:	003f8406 	br	8083b4 <_free_r+0xb4>
  8085a4:	1005d0ba 	srai	r2,r2,2
  8085a8:	00c00044 	movi	r3,1
  8085ac:	51000117 	ldw	r4,4(r10)
  8085b0:	1886983a 	sll	r3,r3,r2
  8085b4:	20c8b03a 	or	r4,r4,r3
  8085b8:	51000115 	stw	r4,4(r10)
  8085bc:	003fa706 	br	80845c <_free_r+0x15c>
  8085c0:	00801504 	movi	r2,84
  8085c4:	10c00436 	bltu	r2,r3,8085d8 <_free_r+0x2d8>
  8085c8:	3804d33a 	srli	r2,r7,12
  8085cc:	10801b84 	addi	r2,r2,110
  8085d0:	100690fa 	slli	r3,r2,3
  8085d4:	003f9706 	br	808434 <_free_r+0x134>
  8085d8:	00805504 	movi	r2,340
  8085dc:	10c00436 	bltu	r2,r3,8085f0 <_free_r+0x2f0>
  8085e0:	3804d3fa 	srli	r2,r7,15
  8085e4:	10801dc4 	addi	r2,r2,119
  8085e8:	100690fa 	slli	r3,r2,3
  8085ec:	003f9106 	br	808434 <_free_r+0x134>
  8085f0:	00815504 	movi	r2,1364
  8085f4:	10c0032e 	bgeu	r2,r3,808604 <_free_r+0x304>
  8085f8:	00801f84 	movi	r2,126
  8085fc:	00c0fc04 	movi	r3,1008
  808600:	003f8c06 	br	808434 <_free_r+0x134>
  808604:	3804d4ba 	srli	r2,r7,18
  808608:	10801f04 	addi	r2,r2,124
  80860c:	100690fa 	slli	r3,r2,3
  808610:	003f8806 	br	808434 <_free_r+0x134>

00808614 <__sfvwrite_r>:
  808614:	30800217 	ldw	r2,8(r6)
  808618:	defff504 	addi	sp,sp,-44
  80861c:	df000915 	stw	fp,36(sp)
  808620:	dd800715 	stw	r22,28(sp)
  808624:	dc800315 	stw	r18,12(sp)
  808628:	dfc00a15 	stw	ra,40(sp)
  80862c:	ddc00815 	stw	r23,32(sp)
  808630:	dd400615 	stw	r21,24(sp)
  808634:	dd000515 	stw	r20,20(sp)
  808638:	dcc00415 	stw	r19,16(sp)
  80863c:	dc400215 	stw	r17,8(sp)
  808640:	dc000115 	stw	r16,4(sp)
  808644:	302d883a 	mov	r22,r6
  808648:	2039883a 	mov	fp,r4
  80864c:	2825883a 	mov	r18,r5
  808650:	10001c26 	beq	r2,zero,8086c4 <__sfvwrite_r+0xb0>
  808654:	29c0030b 	ldhu	r7,12(r5)
  808658:	3880020c 	andi	r2,r7,8
  80865c:	10002726 	beq	r2,zero,8086fc <__sfvwrite_r+0xe8>
  808660:	28800417 	ldw	r2,16(r5)
  808664:	10002526 	beq	r2,zero,8086fc <__sfvwrite_r+0xe8>
  808668:	3880008c 	andi	r2,r7,2
  80866c:	b5400017 	ldw	r21,0(r22)
  808670:	10002826 	beq	r2,zero,808714 <__sfvwrite_r+0x100>
  808674:	0021883a 	mov	r16,zero
  808678:	0023883a 	mov	r17,zero
  80867c:	880d883a 	mov	r6,r17
  808680:	e009883a 	mov	r4,fp
  808684:	00810004 	movi	r2,1024
  808688:	80006e26 	beq	r16,zero,808844 <__sfvwrite_r+0x230>
  80868c:	800f883a 	mov	r7,r16
  808690:	91400717 	ldw	r5,28(r18)
  808694:	1400012e 	bgeu	r2,r16,80869c <__sfvwrite_r+0x88>
  808698:	100f883a 	mov	r7,r2
  80869c:	90c00917 	ldw	r3,36(r18)
  8086a0:	183ee83a 	callr	r3
  8086a4:	1007883a 	mov	r3,r2
  8086a8:	80a1c83a 	sub	r16,r16,r2
  8086ac:	88a3883a 	add	r17,r17,r2
  8086b0:	00806d0e 	bge	zero,r2,808868 <__sfvwrite_r+0x254>
  8086b4:	b0800217 	ldw	r2,8(r22)
  8086b8:	10c5c83a 	sub	r2,r2,r3
  8086bc:	b0800215 	stw	r2,8(r22)
  8086c0:	103fee1e 	bne	r2,zero,80867c <__sfvwrite_r+0x68>
  8086c4:	0009883a 	mov	r4,zero
  8086c8:	2005883a 	mov	r2,r4
  8086cc:	dfc00a17 	ldw	ra,40(sp)
  8086d0:	df000917 	ldw	fp,36(sp)
  8086d4:	ddc00817 	ldw	r23,32(sp)
  8086d8:	dd800717 	ldw	r22,28(sp)
  8086dc:	dd400617 	ldw	r21,24(sp)
  8086e0:	dd000517 	ldw	r20,20(sp)
  8086e4:	dcc00417 	ldw	r19,16(sp)
  8086e8:	dc800317 	ldw	r18,12(sp)
  8086ec:	dc400217 	ldw	r17,8(sp)
  8086f0:	dc000117 	ldw	r16,4(sp)
  8086f4:	dec00b04 	addi	sp,sp,44
  8086f8:	f800283a 	ret
  8086fc:	08063dc0 	call	8063dc <__swsetup_r>
  808700:	1000e41e 	bne	r2,zero,808a94 <__sfvwrite_r+0x480>
  808704:	91c0030b 	ldhu	r7,12(r18)
  808708:	b5400017 	ldw	r21,0(r22)
  80870c:	3880008c 	andi	r2,r7,2
  808710:	103fd81e 	bne	r2,zero,808674 <__sfvwrite_r+0x60>
  808714:	3880004c 	andi	r2,r7,1
  808718:	1005003a 	cmpeq	r2,r2,zero
  80871c:	10005726 	beq	r2,zero,80887c <__sfvwrite_r+0x268>
  808720:	0029883a 	mov	r20,zero
  808724:	002f883a 	mov	r23,zero
  808728:	a0004226 	beq	r20,zero,808834 <__sfvwrite_r+0x220>
  80872c:	3880800c 	andi	r2,r7,512
  808730:	94000217 	ldw	r16,8(r18)
  808734:	10008b26 	beq	r2,zero,808964 <__sfvwrite_r+0x350>
  808738:	800d883a 	mov	r6,r16
  80873c:	a400a536 	bltu	r20,r16,8089d4 <__sfvwrite_r+0x3c0>
  808740:	3881200c 	andi	r2,r7,1152
  808744:	10002726 	beq	r2,zero,8087e4 <__sfvwrite_r+0x1d0>
  808748:	90800517 	ldw	r2,20(r18)
  80874c:	92000417 	ldw	r8,16(r18)
  808750:	91400017 	ldw	r5,0(r18)
  808754:	1087883a 	add	r3,r2,r2
  808758:	1887883a 	add	r3,r3,r2
  80875c:	1808d7fa 	srli	r4,r3,31
  808760:	2a21c83a 	sub	r16,r5,r8
  808764:	80800044 	addi	r2,r16,1
  808768:	20c9883a 	add	r4,r4,r3
  80876c:	2027d07a 	srai	r19,r4,1
  808770:	a085883a 	add	r2,r20,r2
  808774:	980d883a 	mov	r6,r19
  808778:	9880022e 	bgeu	r19,r2,808784 <__sfvwrite_r+0x170>
  80877c:	1027883a 	mov	r19,r2
  808780:	100d883a 	mov	r6,r2
  808784:	3881000c 	andi	r2,r7,1024
  808788:	1000b826 	beq	r2,zero,808a6c <__sfvwrite_r+0x458>
  80878c:	300b883a 	mov	r5,r6
  808790:	e009883a 	mov	r4,fp
  808794:	0808e880 	call	808e88 <_malloc_r>
  808798:	10003126 	beq	r2,zero,808860 <__sfvwrite_r+0x24c>
  80879c:	91400417 	ldw	r5,16(r18)
  8087a0:	1009883a 	mov	r4,r2
  8087a4:	800d883a 	mov	r6,r16
  8087a8:	1023883a 	mov	r17,r2
  8087ac:	08096ac0 	call	8096ac <memcpy>
  8087b0:	90c0030b 	ldhu	r3,12(r18)
  8087b4:	00beffc4 	movi	r2,-1025
  8087b8:	1886703a 	and	r3,r3,r2
  8087bc:	18c02014 	ori	r3,r3,128
  8087c0:	90c0030d 	sth	r3,12(r18)
  8087c4:	9c07c83a 	sub	r3,r19,r16
  8087c8:	8c05883a 	add	r2,r17,r16
  8087cc:	a00d883a 	mov	r6,r20
  8087d0:	a021883a 	mov	r16,r20
  8087d4:	90800015 	stw	r2,0(r18)
  8087d8:	90c00215 	stw	r3,8(r18)
  8087dc:	94400415 	stw	r17,16(r18)
  8087e0:	94c00515 	stw	r19,20(r18)
  8087e4:	91000017 	ldw	r4,0(r18)
  8087e8:	b80b883a 	mov	r5,r23
  8087ec:	a023883a 	mov	r17,r20
  8087f0:	080974c0 	call	80974c <memmove>
  8087f4:	90c00217 	ldw	r3,8(r18)
  8087f8:	90800017 	ldw	r2,0(r18)
  8087fc:	a027883a 	mov	r19,r20
  808800:	1c07c83a 	sub	r3,r3,r16
  808804:	1405883a 	add	r2,r2,r16
  808808:	90c00215 	stw	r3,8(r18)
  80880c:	a021883a 	mov	r16,r20
  808810:	90800015 	stw	r2,0(r18)
  808814:	b0800217 	ldw	r2,8(r22)
  808818:	1405c83a 	sub	r2,r2,r16
  80881c:	b0800215 	stw	r2,8(r22)
  808820:	103fa826 	beq	r2,zero,8086c4 <__sfvwrite_r+0xb0>
  808824:	a469c83a 	sub	r20,r20,r17
  808828:	91c0030b 	ldhu	r7,12(r18)
  80882c:	bcef883a 	add	r23,r23,r19
  808830:	a03fbe1e 	bne	r20,zero,80872c <__sfvwrite_r+0x118>
  808834:	adc00017 	ldw	r23,0(r21)
  808838:	ad000117 	ldw	r20,4(r21)
  80883c:	ad400204 	addi	r21,r21,8
  808840:	003fb906 	br	808728 <__sfvwrite_r+0x114>
  808844:	ac400017 	ldw	r17,0(r21)
  808848:	ac000117 	ldw	r16,4(r21)
  80884c:	ad400204 	addi	r21,r21,8
  808850:	003f8a06 	br	80867c <__sfvwrite_r+0x68>
  808854:	91400417 	ldw	r5,16(r18)
  808858:	e009883a 	mov	r4,fp
  80885c:	08083000 	call	808300 <_free_r>
  808860:	00800304 	movi	r2,12
  808864:	e0800015 	stw	r2,0(fp)
  808868:	9080030b 	ldhu	r2,12(r18)
  80886c:	013fffc4 	movi	r4,-1
  808870:	10801014 	ori	r2,r2,64
  808874:	9080030d 	sth	r2,12(r18)
  808878:	003f9306 	br	8086c8 <__sfvwrite_r+0xb4>
  80887c:	0027883a 	mov	r19,zero
  808880:	002f883a 	mov	r23,zero
  808884:	d8000015 	stw	zero,0(sp)
  808888:	0029883a 	mov	r20,zero
  80888c:	98001e26 	beq	r19,zero,808908 <__sfvwrite_r+0x2f4>
  808890:	d8c00017 	ldw	r3,0(sp)
  808894:	1804c03a 	cmpne	r2,r3,zero
  808898:	10005e26 	beq	r2,zero,808a14 <__sfvwrite_r+0x400>
  80889c:	9821883a 	mov	r16,r19
  8088a0:	a4c0012e 	bgeu	r20,r19,8088a8 <__sfvwrite_r+0x294>
  8088a4:	a021883a 	mov	r16,r20
  8088a8:	91000017 	ldw	r4,0(r18)
  8088ac:	90800417 	ldw	r2,16(r18)
  8088b0:	91800217 	ldw	r6,8(r18)
  8088b4:	91c00517 	ldw	r7,20(r18)
  8088b8:	1100022e 	bgeu	r2,r4,8088c4 <__sfvwrite_r+0x2b0>
  8088bc:	31e3883a 	add	r17,r6,r7
  8088c0:	8c001616 	blt	r17,r16,80891c <__sfvwrite_r+0x308>
  8088c4:	81c03816 	blt	r16,r7,8089a8 <__sfvwrite_r+0x394>
  8088c8:	90c00917 	ldw	r3,36(r18)
  8088cc:	91400717 	ldw	r5,28(r18)
  8088d0:	e009883a 	mov	r4,fp
  8088d4:	b80d883a 	mov	r6,r23
  8088d8:	183ee83a 	callr	r3
  8088dc:	1023883a 	mov	r17,r2
  8088e0:	00bfe10e 	bge	zero,r2,808868 <__sfvwrite_r+0x254>
  8088e4:	a469c83a 	sub	r20,r20,r17
  8088e8:	a0001826 	beq	r20,zero,80894c <__sfvwrite_r+0x338>
  8088ec:	b0800217 	ldw	r2,8(r22)
  8088f0:	1445c83a 	sub	r2,r2,r17
  8088f4:	b0800215 	stw	r2,8(r22)
  8088f8:	103f7226 	beq	r2,zero,8086c4 <__sfvwrite_r+0xb0>
  8088fc:	9c67c83a 	sub	r19,r19,r17
  808900:	bc6f883a 	add	r23,r23,r17
  808904:	983fe21e 	bne	r19,zero,808890 <__sfvwrite_r+0x27c>
  808908:	adc00017 	ldw	r23,0(r21)
  80890c:	acc00117 	ldw	r19,4(r21)
  808910:	ad400204 	addi	r21,r21,8
  808914:	d8000015 	stw	zero,0(sp)
  808918:	003fdc06 	br	80888c <__sfvwrite_r+0x278>
  80891c:	b80b883a 	mov	r5,r23
  808920:	880d883a 	mov	r6,r17
  808924:	080974c0 	call	80974c <memmove>
  808928:	90c00017 	ldw	r3,0(r18)
  80892c:	e009883a 	mov	r4,fp
  808930:	900b883a 	mov	r5,r18
  808934:	1c47883a 	add	r3,r3,r17
  808938:	90c00015 	stw	r3,0(r18)
  80893c:	0807ce40 	call	807ce4 <_fflush_r>
  808940:	103fc91e 	bne	r2,zero,808868 <__sfvwrite_r+0x254>
  808944:	a469c83a 	sub	r20,r20,r17
  808948:	a03fe81e 	bne	r20,zero,8088ec <__sfvwrite_r+0x2d8>
  80894c:	e009883a 	mov	r4,fp
  808950:	900b883a 	mov	r5,r18
  808954:	0807ce40 	call	807ce4 <_fflush_r>
  808958:	103fc31e 	bne	r2,zero,808868 <__sfvwrite_r+0x254>
  80895c:	d8000015 	stw	zero,0(sp)
  808960:	003fe206 	br	8088ec <__sfvwrite_r+0x2d8>
  808964:	91000017 	ldw	r4,0(r18)
  808968:	90800417 	ldw	r2,16(r18)
  80896c:	1100022e 	bgeu	r2,r4,808978 <__sfvwrite_r+0x364>
  808970:	8023883a 	mov	r17,r16
  808974:	85003136 	bltu	r16,r20,808a3c <__sfvwrite_r+0x428>
  808978:	91c00517 	ldw	r7,20(r18)
  80897c:	a1c01836 	bltu	r20,r7,8089e0 <__sfvwrite_r+0x3cc>
  808980:	90c00917 	ldw	r3,36(r18)
  808984:	91400717 	ldw	r5,28(r18)
  808988:	e009883a 	mov	r4,fp
  80898c:	b80d883a 	mov	r6,r23
  808990:	183ee83a 	callr	r3
  808994:	1021883a 	mov	r16,r2
  808998:	00bfb30e 	bge	zero,r2,808868 <__sfvwrite_r+0x254>
  80899c:	1023883a 	mov	r17,r2
  8089a0:	1027883a 	mov	r19,r2
  8089a4:	003f9b06 	br	808814 <__sfvwrite_r+0x200>
  8089a8:	b80b883a 	mov	r5,r23
  8089ac:	800d883a 	mov	r6,r16
  8089b0:	080974c0 	call	80974c <memmove>
  8089b4:	90c00217 	ldw	r3,8(r18)
  8089b8:	90800017 	ldw	r2,0(r18)
  8089bc:	8023883a 	mov	r17,r16
  8089c0:	1c07c83a 	sub	r3,r3,r16
  8089c4:	1405883a 	add	r2,r2,r16
  8089c8:	90c00215 	stw	r3,8(r18)
  8089cc:	90800015 	stw	r2,0(r18)
  8089d0:	003fc406 	br	8088e4 <__sfvwrite_r+0x2d0>
  8089d4:	a00d883a 	mov	r6,r20
  8089d8:	a021883a 	mov	r16,r20
  8089dc:	003f8106 	br	8087e4 <__sfvwrite_r+0x1d0>
  8089e0:	b80b883a 	mov	r5,r23
  8089e4:	a00d883a 	mov	r6,r20
  8089e8:	080974c0 	call	80974c <memmove>
  8089ec:	90c00217 	ldw	r3,8(r18)
  8089f0:	90800017 	ldw	r2,0(r18)
  8089f4:	a021883a 	mov	r16,r20
  8089f8:	1d07c83a 	sub	r3,r3,r20
  8089fc:	1505883a 	add	r2,r2,r20
  808a00:	a023883a 	mov	r17,r20
  808a04:	a027883a 	mov	r19,r20
  808a08:	90c00215 	stw	r3,8(r18)
  808a0c:	90800015 	stw	r2,0(r18)
  808a10:	003f8006 	br	808814 <__sfvwrite_r+0x200>
  808a14:	b809883a 	mov	r4,r23
  808a18:	01400284 	movi	r5,10
  808a1c:	980d883a 	mov	r6,r19
  808a20:	08095c80 	call	8095c8 <memchr>
  808a24:	10001726 	beq	r2,zero,808a84 <__sfvwrite_r+0x470>
  808a28:	15c5c83a 	sub	r2,r2,r23
  808a2c:	15000044 	addi	r20,r2,1
  808a30:	00800044 	movi	r2,1
  808a34:	d8800015 	stw	r2,0(sp)
  808a38:	003f9806 	br	80889c <__sfvwrite_r+0x288>
  808a3c:	b80b883a 	mov	r5,r23
  808a40:	800d883a 	mov	r6,r16
  808a44:	080974c0 	call	80974c <memmove>
  808a48:	90c00017 	ldw	r3,0(r18)
  808a4c:	e009883a 	mov	r4,fp
  808a50:	900b883a 	mov	r5,r18
  808a54:	1c07883a 	add	r3,r3,r16
  808a58:	90c00015 	stw	r3,0(r18)
  808a5c:	8027883a 	mov	r19,r16
  808a60:	0807ce40 	call	807ce4 <_fflush_r>
  808a64:	103f6b26 	beq	r2,zero,808814 <__sfvwrite_r+0x200>
  808a68:	003f7f06 	br	808868 <__sfvwrite_r+0x254>
  808a6c:	400b883a 	mov	r5,r8
  808a70:	e009883a 	mov	r4,fp
  808a74:	080a8b80 	call	80a8b8 <_realloc_r>
  808a78:	103f7626 	beq	r2,zero,808854 <__sfvwrite_r+0x240>
  808a7c:	1023883a 	mov	r17,r2
  808a80:	003f5006 	br	8087c4 <__sfvwrite_r+0x1b0>
  808a84:	00c00044 	movi	r3,1
  808a88:	9d000044 	addi	r20,r19,1
  808a8c:	d8c00015 	stw	r3,0(sp)
  808a90:	003f8206 	br	80889c <__sfvwrite_r+0x288>
  808a94:	9080030b 	ldhu	r2,12(r18)
  808a98:	00c00244 	movi	r3,9
  808a9c:	013fffc4 	movi	r4,-1
  808aa0:	10801014 	ori	r2,r2,64
  808aa4:	9080030d 	sth	r2,12(r18)
  808aa8:	e0c00015 	stw	r3,0(fp)
  808aac:	003f0606 	br	8086c8 <__sfvwrite_r+0xb4>

00808ab0 <_fwalk_reent>:
  808ab0:	defff704 	addi	sp,sp,-36
  808ab4:	dcc00315 	stw	r19,12(sp)
  808ab8:	24c0b804 	addi	r19,r4,736
  808abc:	dd800615 	stw	r22,24(sp)
  808ac0:	dd400515 	stw	r21,20(sp)
  808ac4:	dfc00815 	stw	ra,32(sp)
  808ac8:	ddc00715 	stw	r23,28(sp)
  808acc:	dd000415 	stw	r20,16(sp)
  808ad0:	dc800215 	stw	r18,8(sp)
  808ad4:	dc400115 	stw	r17,4(sp)
  808ad8:	dc000015 	stw	r16,0(sp)
  808adc:	202b883a 	mov	r21,r4
  808ae0:	282d883a 	mov	r22,r5
  808ae4:	0807f6c0 	call	807f6c <__sfp_lock_acquire>
  808ae8:	98002126 	beq	r19,zero,808b70 <_fwalk_reent+0xc0>
  808aec:	002f883a 	mov	r23,zero
  808af0:	9c800117 	ldw	r18,4(r19)
  808af4:	9c000217 	ldw	r16,8(r19)
  808af8:	90bfffc4 	addi	r2,r18,-1
  808afc:	10000d16 	blt	r2,zero,808b34 <_fwalk_reent+0x84>
  808b00:	0023883a 	mov	r17,zero
  808b04:	053fffc4 	movi	r20,-1
  808b08:	8080030f 	ldh	r2,12(r16)
  808b0c:	8c400044 	addi	r17,r17,1
  808b10:	10000626 	beq	r2,zero,808b2c <_fwalk_reent+0x7c>
  808b14:	8080038f 	ldh	r2,14(r16)
  808b18:	800b883a 	mov	r5,r16
  808b1c:	a809883a 	mov	r4,r21
  808b20:	15000226 	beq	r2,r20,808b2c <_fwalk_reent+0x7c>
  808b24:	b03ee83a 	callr	r22
  808b28:	b8aeb03a 	or	r23,r23,r2
  808b2c:	84001704 	addi	r16,r16,92
  808b30:	947ff51e 	bne	r18,r17,808b08 <_fwalk_reent+0x58>
  808b34:	9cc00017 	ldw	r19,0(r19)
  808b38:	983fed1e 	bne	r19,zero,808af0 <_fwalk_reent+0x40>
  808b3c:	0807f700 	call	807f70 <__sfp_lock_release>
  808b40:	b805883a 	mov	r2,r23
  808b44:	dfc00817 	ldw	ra,32(sp)
  808b48:	ddc00717 	ldw	r23,28(sp)
  808b4c:	dd800617 	ldw	r22,24(sp)
  808b50:	dd400517 	ldw	r21,20(sp)
  808b54:	dd000417 	ldw	r20,16(sp)
  808b58:	dcc00317 	ldw	r19,12(sp)
  808b5c:	dc800217 	ldw	r18,8(sp)
  808b60:	dc400117 	ldw	r17,4(sp)
  808b64:	dc000017 	ldw	r16,0(sp)
  808b68:	dec00904 	addi	sp,sp,36
  808b6c:	f800283a 	ret
  808b70:	002f883a 	mov	r23,zero
  808b74:	003ff106 	br	808b3c <_fwalk_reent+0x8c>

00808b78 <_fwalk>:
  808b78:	defff804 	addi	sp,sp,-32
  808b7c:	dcc00315 	stw	r19,12(sp)
  808b80:	24c0b804 	addi	r19,r4,736
  808b84:	dd400515 	stw	r21,20(sp)
  808b88:	dfc00715 	stw	ra,28(sp)
  808b8c:	dd800615 	stw	r22,24(sp)
  808b90:	dd000415 	stw	r20,16(sp)
  808b94:	dc800215 	stw	r18,8(sp)
  808b98:	dc400115 	stw	r17,4(sp)
  808b9c:	dc000015 	stw	r16,0(sp)
  808ba0:	282b883a 	mov	r21,r5
  808ba4:	0807f6c0 	call	807f6c <__sfp_lock_acquire>
  808ba8:	98001f26 	beq	r19,zero,808c28 <_fwalk+0xb0>
  808bac:	002d883a 	mov	r22,zero
  808bb0:	9c800117 	ldw	r18,4(r19)
  808bb4:	9c000217 	ldw	r16,8(r19)
  808bb8:	90bfffc4 	addi	r2,r18,-1
  808bbc:	10000c16 	blt	r2,zero,808bf0 <_fwalk+0x78>
  808bc0:	0023883a 	mov	r17,zero
  808bc4:	053fffc4 	movi	r20,-1
  808bc8:	8080030f 	ldh	r2,12(r16)
  808bcc:	8c400044 	addi	r17,r17,1
  808bd0:	10000526 	beq	r2,zero,808be8 <_fwalk+0x70>
  808bd4:	8080038f 	ldh	r2,14(r16)
  808bd8:	8009883a 	mov	r4,r16
  808bdc:	15000226 	beq	r2,r20,808be8 <_fwalk+0x70>
  808be0:	a83ee83a 	callr	r21
  808be4:	b0acb03a 	or	r22,r22,r2
  808be8:	84001704 	addi	r16,r16,92
  808bec:	947ff61e 	bne	r18,r17,808bc8 <_fwalk+0x50>
  808bf0:	9cc00017 	ldw	r19,0(r19)
  808bf4:	983fee1e 	bne	r19,zero,808bb0 <_fwalk+0x38>
  808bf8:	0807f700 	call	807f70 <__sfp_lock_release>
  808bfc:	b005883a 	mov	r2,r22
  808c00:	dfc00717 	ldw	ra,28(sp)
  808c04:	dd800617 	ldw	r22,24(sp)
  808c08:	dd400517 	ldw	r21,20(sp)
  808c0c:	dd000417 	ldw	r20,16(sp)
  808c10:	dcc00317 	ldw	r19,12(sp)
  808c14:	dc800217 	ldw	r18,8(sp)
  808c18:	dc400117 	ldw	r17,4(sp)
  808c1c:	dc000017 	ldw	r16,0(sp)
  808c20:	dec00804 	addi	sp,sp,32
  808c24:	f800283a 	ret
  808c28:	002d883a 	mov	r22,zero
  808c2c:	003ff206 	br	808bf8 <_fwalk+0x80>

00808c30 <__locale_charset>:
  808c30:	d0a00417 	ldw	r2,-32752(gp)
  808c34:	f800283a 	ret

00808c38 <_localeconv_r>:
  808c38:	008020b4 	movhi	r2,130
  808c3c:	10b4fc04 	addi	r2,r2,-11280
  808c40:	f800283a 	ret

00808c44 <localeconv>:
  808c44:	008020b4 	movhi	r2,130
  808c48:	10bc6804 	addi	r2,r2,-3680
  808c4c:	11000017 	ldw	r4,0(r2)
  808c50:	0808c381 	jmpi	808c38 <_localeconv_r>

00808c54 <_setlocale_r>:
  808c54:	defffc04 	addi	sp,sp,-16
  808c58:	00c020b4 	movhi	r3,130
  808c5c:	18f4d204 	addi	r3,r3,-11448
  808c60:	dc800215 	stw	r18,8(sp)
  808c64:	dc400115 	stw	r17,4(sp)
  808c68:	dc000015 	stw	r16,0(sp)
  808c6c:	2023883a 	mov	r17,r4
  808c70:	2825883a 	mov	r18,r5
  808c74:	dfc00315 	stw	ra,12(sp)
  808c78:	3021883a 	mov	r16,r6
  808c7c:	3009883a 	mov	r4,r6
  808c80:	180b883a 	mov	r5,r3
  808c84:	30000926 	beq	r6,zero,808cac <_setlocale_r+0x58>
  808c88:	080b0a80 	call	80b0a8 <strcmp>
  808c8c:	8009883a 	mov	r4,r16
  808c90:	014020b4 	movhi	r5,130
  808c94:	2974e304 	addi	r5,r5,-11380
  808c98:	10000b1e 	bne	r2,zero,808cc8 <_setlocale_r+0x74>
  808c9c:	8c000d15 	stw	r16,52(r17)
  808ca0:	8c800c15 	stw	r18,48(r17)
  808ca4:	00c020b4 	movhi	r3,130
  808ca8:	18f4d204 	addi	r3,r3,-11448
  808cac:	1805883a 	mov	r2,r3
  808cb0:	dfc00317 	ldw	ra,12(sp)
  808cb4:	dc800217 	ldw	r18,8(sp)
  808cb8:	dc400117 	ldw	r17,4(sp)
  808cbc:	dc000017 	ldw	r16,0(sp)
  808cc0:	dec00404 	addi	sp,sp,16
  808cc4:	f800283a 	ret
  808cc8:	080b0a80 	call	80b0a8 <strcmp>
  808ccc:	0007883a 	mov	r3,zero
  808cd0:	103ff226 	beq	r2,zero,808c9c <_setlocale_r+0x48>
  808cd4:	003ff506 	br	808cac <_setlocale_r+0x58>

00808cd8 <setlocale>:
  808cd8:	018020b4 	movhi	r6,130
  808cdc:	31bc6804 	addi	r6,r6,-3680
  808ce0:	2007883a 	mov	r3,r4
  808ce4:	31000017 	ldw	r4,0(r6)
  808ce8:	280d883a 	mov	r6,r5
  808cec:	180b883a 	mov	r5,r3
  808cf0:	0808c541 	jmpi	808c54 <_setlocale_r>

00808cf4 <__smakebuf_r>:
  808cf4:	2880030b 	ldhu	r2,12(r5)
  808cf8:	deffed04 	addi	sp,sp,-76
  808cfc:	dc401015 	stw	r17,64(sp)
  808d00:	1080008c 	andi	r2,r2,2
  808d04:	dc000f15 	stw	r16,60(sp)
  808d08:	dfc01215 	stw	ra,72(sp)
  808d0c:	dc801115 	stw	r18,68(sp)
  808d10:	2821883a 	mov	r16,r5
  808d14:	2023883a 	mov	r17,r4
  808d18:	10000b26 	beq	r2,zero,808d48 <__smakebuf_r+0x54>
  808d1c:	28c010c4 	addi	r3,r5,67
  808d20:	00800044 	movi	r2,1
  808d24:	28800515 	stw	r2,20(r5)
  808d28:	28c00415 	stw	r3,16(r5)
  808d2c:	28c00015 	stw	r3,0(r5)
  808d30:	dfc01217 	ldw	ra,72(sp)
  808d34:	dc801117 	ldw	r18,68(sp)
  808d38:	dc401017 	ldw	r17,64(sp)
  808d3c:	dc000f17 	ldw	r16,60(sp)
  808d40:	dec01304 	addi	sp,sp,76
  808d44:	f800283a 	ret
  808d48:	2940038f 	ldh	r5,14(r5)
  808d4c:	28002116 	blt	r5,zero,808dd4 <__smakebuf_r+0xe0>
  808d50:	d80d883a 	mov	r6,sp
  808d54:	080b4240 	call	80b424 <_fstat_r>
  808d58:	10001e16 	blt	r2,zero,808dd4 <__smakebuf_r+0xe0>
  808d5c:	d8800117 	ldw	r2,4(sp)
  808d60:	00e00014 	movui	r3,32768
  808d64:	113c000c 	andi	r4,r2,61440
  808d68:	20c03126 	beq	r4,r3,808e30 <__smakebuf_r+0x13c>
  808d6c:	8080030b 	ldhu	r2,12(r16)
  808d70:	00c80004 	movi	r3,8192
  808d74:	10820014 	ori	r2,r2,2048
  808d78:	8080030d 	sth	r2,12(r16)
  808d7c:	20c01e26 	beq	r4,r3,808df8 <__smakebuf_r+0x104>
  808d80:	04810004 	movi	r18,1024
  808d84:	8809883a 	mov	r4,r17
  808d88:	900b883a 	mov	r5,r18
  808d8c:	0808e880 	call	808e88 <_malloc_r>
  808d90:	1009883a 	mov	r4,r2
  808d94:	10003126 	beq	r2,zero,808e5c <__smakebuf_r+0x168>
  808d98:	80c0030b 	ldhu	r3,12(r16)
  808d9c:	00802074 	movhi	r2,129
  808da0:	10a01804 	addi	r2,r2,-32672
  808da4:	88800f15 	stw	r2,60(r17)
  808da8:	18c02014 	ori	r3,r3,128
  808dac:	84800515 	stw	r18,20(r16)
  808db0:	80c0030d 	sth	r3,12(r16)
  808db4:	81000415 	stw	r4,16(r16)
  808db8:	81000015 	stw	r4,0(r16)
  808dbc:	dfc01217 	ldw	ra,72(sp)
  808dc0:	dc801117 	ldw	r18,68(sp)
  808dc4:	dc401017 	ldw	r17,64(sp)
  808dc8:	dc000f17 	ldw	r16,60(sp)
  808dcc:	dec01304 	addi	sp,sp,76
  808dd0:	f800283a 	ret
  808dd4:	80c0030b 	ldhu	r3,12(r16)
  808dd8:	1880200c 	andi	r2,r3,128
  808ddc:	10000426 	beq	r2,zero,808df0 <__smakebuf_r+0xfc>
  808de0:	04801004 	movi	r18,64
  808de4:	18820014 	ori	r2,r3,2048
  808de8:	8080030d 	sth	r2,12(r16)
  808dec:	003fe506 	br	808d84 <__smakebuf_r+0x90>
  808df0:	04810004 	movi	r18,1024
  808df4:	003ffb06 	br	808de4 <__smakebuf_r+0xf0>
  808df8:	8140038f 	ldh	r5,14(r16)
  808dfc:	8809883a 	mov	r4,r17
  808e00:	080b4980 	call	80b498 <_isatty_r>
  808e04:	103fde26 	beq	r2,zero,808d80 <__smakebuf_r+0x8c>
  808e08:	8080030b 	ldhu	r2,12(r16)
  808e0c:	80c010c4 	addi	r3,r16,67
  808e10:	04810004 	movi	r18,1024
  808e14:	10800054 	ori	r2,r2,1
  808e18:	8080030d 	sth	r2,12(r16)
  808e1c:	00800044 	movi	r2,1
  808e20:	80c00415 	stw	r3,16(r16)
  808e24:	80800515 	stw	r2,20(r16)
  808e28:	80c00015 	stw	r3,0(r16)
  808e2c:	003fd506 	br	808d84 <__smakebuf_r+0x90>
  808e30:	80c00a17 	ldw	r3,40(r16)
  808e34:	00802074 	movhi	r2,129
  808e38:	10abd904 	addi	r2,r2,-20636
  808e3c:	18bfcb1e 	bne	r3,r2,808d6c <__smakebuf_r+0x78>
  808e40:	8080030b 	ldhu	r2,12(r16)
  808e44:	00c10004 	movi	r3,1024
  808e48:	1825883a 	mov	r18,r3
  808e4c:	10c4b03a 	or	r2,r2,r3
  808e50:	8080030d 	sth	r2,12(r16)
  808e54:	80c01315 	stw	r3,76(r16)
  808e58:	003fca06 	br	808d84 <__smakebuf_r+0x90>
  808e5c:	8100030b 	ldhu	r4,12(r16)
  808e60:	2080800c 	andi	r2,r4,512
  808e64:	103fb21e 	bne	r2,zero,808d30 <__smakebuf_r+0x3c>
  808e68:	80c010c4 	addi	r3,r16,67
  808e6c:	21000094 	ori	r4,r4,2
  808e70:	00800044 	movi	r2,1
  808e74:	80800515 	stw	r2,20(r16)
  808e78:	8100030d 	sth	r4,12(r16)
  808e7c:	80c00415 	stw	r3,16(r16)
  808e80:	80c00015 	stw	r3,0(r16)
  808e84:	003faa06 	br	808d30 <__smakebuf_r+0x3c>

00808e88 <_malloc_r>:
  808e88:	defff604 	addi	sp,sp,-40
  808e8c:	28c002c4 	addi	r3,r5,11
  808e90:	00800584 	movi	r2,22
  808e94:	dc800215 	stw	r18,8(sp)
  808e98:	dfc00915 	stw	ra,36(sp)
  808e9c:	df000815 	stw	fp,32(sp)
  808ea0:	ddc00715 	stw	r23,28(sp)
  808ea4:	dd800615 	stw	r22,24(sp)
  808ea8:	dd400515 	stw	r21,20(sp)
  808eac:	dd000415 	stw	r20,16(sp)
  808eb0:	dcc00315 	stw	r19,12(sp)
  808eb4:	dc400115 	stw	r17,4(sp)
  808eb8:	dc000015 	stw	r16,0(sp)
  808ebc:	2025883a 	mov	r18,r4
  808ec0:	10c01236 	bltu	r2,r3,808f0c <_malloc_r+0x84>
  808ec4:	04400404 	movi	r17,16
  808ec8:	8940142e 	bgeu	r17,r5,808f1c <_malloc_r+0x94>
  808ecc:	00800304 	movi	r2,12
  808ed0:	0007883a 	mov	r3,zero
  808ed4:	90800015 	stw	r2,0(r18)
  808ed8:	1805883a 	mov	r2,r3
  808edc:	dfc00917 	ldw	ra,36(sp)
  808ee0:	df000817 	ldw	fp,32(sp)
  808ee4:	ddc00717 	ldw	r23,28(sp)
  808ee8:	dd800617 	ldw	r22,24(sp)
  808eec:	dd400517 	ldw	r21,20(sp)
  808ef0:	dd000417 	ldw	r20,16(sp)
  808ef4:	dcc00317 	ldw	r19,12(sp)
  808ef8:	dc800217 	ldw	r18,8(sp)
  808efc:	dc400117 	ldw	r17,4(sp)
  808f00:	dc000017 	ldw	r16,0(sp)
  808f04:	dec00a04 	addi	sp,sp,40
  808f08:	f800283a 	ret
  808f0c:	00bffe04 	movi	r2,-8
  808f10:	18a2703a 	and	r17,r3,r2
  808f14:	883fed16 	blt	r17,zero,808ecc <_malloc_r+0x44>
  808f18:	897fec36 	bltu	r17,r5,808ecc <_malloc_r+0x44>
  808f1c:	9009883a 	mov	r4,r18
  808f20:	080d2180 	call	80d218 <__malloc_lock>
  808f24:	00807dc4 	movi	r2,503
  808f28:	14402b2e 	bgeu	r2,r17,808fd8 <_malloc_r+0x150>
  808f2c:	8806d27a 	srli	r3,r17,9
  808f30:	18003f1e 	bne	r3,zero,809030 <_malloc_r+0x1a8>
  808f34:	880cd0fa 	srli	r6,r17,3
  808f38:	300490fa 	slli	r2,r6,3
  808f3c:	02c020b4 	movhi	r11,130
  808f40:	5af6bf04 	addi	r11,r11,-9476
  808f44:	12cb883a 	add	r5,r2,r11
  808f48:	2c000317 	ldw	r16,12(r5)
  808f4c:	580f883a 	mov	r7,r11
  808f50:	2c00041e 	bne	r5,r16,808f64 <_malloc_r+0xdc>
  808f54:	00000a06 	br	808f80 <_malloc_r+0xf8>
  808f58:	1800860e 	bge	r3,zero,809174 <_malloc_r+0x2ec>
  808f5c:	84000317 	ldw	r16,12(r16)
  808f60:	2c000726 	beq	r5,r16,808f80 <_malloc_r+0xf8>
  808f64:	80800117 	ldw	r2,4(r16)
  808f68:	00ffff04 	movi	r3,-4
  808f6c:	10c8703a 	and	r4,r2,r3
  808f70:	2447c83a 	sub	r3,r4,r17
  808f74:	008003c4 	movi	r2,15
  808f78:	10fff70e 	bge	r2,r3,808f58 <_malloc_r+0xd0>
  808f7c:	31bfffc4 	addi	r6,r6,-1
  808f80:	32400044 	addi	r9,r6,1
  808f84:	028020b4 	movhi	r10,130
  808f88:	52b6c104 	addi	r10,r10,-9468
  808f8c:	54000217 	ldw	r16,8(r10)
  808f90:	8280a026 	beq	r16,r10,809214 <_malloc_r+0x38c>
  808f94:	80800117 	ldw	r2,4(r16)
  808f98:	00ffff04 	movi	r3,-4
  808f9c:	10ca703a 	and	r5,r2,r3
  808fa0:	2c4dc83a 	sub	r6,r5,r17
  808fa4:	008003c4 	movi	r2,15
  808fa8:	11808316 	blt	r2,r6,8091b8 <_malloc_r+0x330>
  808fac:	52800315 	stw	r10,12(r10)
  808fb0:	52800215 	stw	r10,8(r10)
  808fb4:	30002916 	blt	r6,zero,80905c <_malloc_r+0x1d4>
  808fb8:	8147883a 	add	r3,r16,r5
  808fbc:	18800117 	ldw	r2,4(r3)
  808fc0:	9009883a 	mov	r4,r18
  808fc4:	10800054 	ori	r2,r2,1
  808fc8:	18800115 	stw	r2,4(r3)
  808fcc:	080d3200 	call	80d320 <__malloc_unlock>
  808fd0:	80c00204 	addi	r3,r16,8
  808fd4:	003fc006 	br	808ed8 <_malloc_r+0x50>
  808fd8:	02c020b4 	movhi	r11,130
  808fdc:	5af6bf04 	addi	r11,r11,-9476
  808fe0:	8ac5883a 	add	r2,r17,r11
  808fe4:	14000317 	ldw	r16,12(r2)
  808fe8:	580f883a 	mov	r7,r11
  808fec:	8806d0fa 	srli	r3,r17,3
  808ff0:	14006c26 	beq	r2,r16,8091a4 <_malloc_r+0x31c>
  808ff4:	80c00117 	ldw	r3,4(r16)
  808ff8:	00bfff04 	movi	r2,-4
  808ffc:	81800317 	ldw	r6,12(r16)
  809000:	1886703a 	and	r3,r3,r2
  809004:	80c7883a 	add	r3,r16,r3
  809008:	18800117 	ldw	r2,4(r3)
  80900c:	81400217 	ldw	r5,8(r16)
  809010:	9009883a 	mov	r4,r18
  809014:	10800054 	ori	r2,r2,1
  809018:	18800115 	stw	r2,4(r3)
  80901c:	31400215 	stw	r5,8(r6)
  809020:	29800315 	stw	r6,12(r5)
  809024:	080d3200 	call	80d320 <__malloc_unlock>
  809028:	80c00204 	addi	r3,r16,8
  80902c:	003faa06 	br	808ed8 <_malloc_r+0x50>
  809030:	00800104 	movi	r2,4
  809034:	10c0052e 	bgeu	r2,r3,80904c <_malloc_r+0x1c4>
  809038:	00800504 	movi	r2,20
  80903c:	10c07836 	bltu	r2,r3,809220 <_malloc_r+0x398>
  809040:	198016c4 	addi	r6,r3,91
  809044:	300490fa 	slli	r2,r6,3
  809048:	003fbc06 	br	808f3c <_malloc_r+0xb4>
  80904c:	8804d1ba 	srli	r2,r17,6
  809050:	11800e04 	addi	r6,r2,56
  809054:	300490fa 	slli	r2,r6,3
  809058:	003fb806 	br	808f3c <_malloc_r+0xb4>
  80905c:	00807fc4 	movi	r2,511
  809060:	1140bb36 	bltu	r2,r5,809350 <_malloc_r+0x4c8>
  809064:	2806d0fa 	srli	r3,r5,3
  809068:	573ffe04 	addi	fp,r10,-8
  80906c:	00800044 	movi	r2,1
  809070:	180890fa 	slli	r4,r3,3
  809074:	1807d0ba 	srai	r3,r3,2
  809078:	e1c00117 	ldw	r7,4(fp)
  80907c:	5909883a 	add	r4,r11,r4
  809080:	21400217 	ldw	r5,8(r4)
  809084:	10c4983a 	sll	r2,r2,r3
  809088:	81000315 	stw	r4,12(r16)
  80908c:	81400215 	stw	r5,8(r16)
  809090:	388eb03a 	or	r7,r7,r2
  809094:	2c000315 	stw	r16,12(r5)
  809098:	24000215 	stw	r16,8(r4)
  80909c:	e1c00115 	stw	r7,4(fp)
  8090a0:	4807883a 	mov	r3,r9
  8090a4:	4800cd16 	blt	r9,zero,8093dc <_malloc_r+0x554>
  8090a8:	1807d0ba 	srai	r3,r3,2
  8090ac:	00800044 	movi	r2,1
  8090b0:	10c8983a 	sll	r4,r2,r3
  8090b4:	39004436 	bltu	r7,r4,8091c8 <_malloc_r+0x340>
  8090b8:	21c4703a 	and	r2,r4,r7
  8090bc:	10000a1e 	bne	r2,zero,8090e8 <_malloc_r+0x260>
  8090c0:	2109883a 	add	r4,r4,r4
  8090c4:	00bfff04 	movi	r2,-4
  8090c8:	4884703a 	and	r2,r9,r2
  8090cc:	3906703a 	and	r3,r7,r4
  8090d0:	12400104 	addi	r9,r2,4
  8090d4:	1800041e 	bne	r3,zero,8090e8 <_malloc_r+0x260>
  8090d8:	2109883a 	add	r4,r4,r4
  8090dc:	3904703a 	and	r2,r7,r4
  8090e0:	4a400104 	addi	r9,r9,4
  8090e4:	103ffc26 	beq	r2,zero,8090d8 <_malloc_r+0x250>
  8090e8:	480490fa 	slli	r2,r9,3
  8090ec:	4819883a 	mov	r12,r9
  8090f0:	023fff04 	movi	r8,-4
  8090f4:	589b883a 	add	r13,r11,r2
  8090f8:	6807883a 	mov	r3,r13
  8090fc:	014003c4 	movi	r5,15
  809100:	1c000317 	ldw	r16,12(r3)
  809104:	1c00041e 	bne	r3,r16,809118 <_malloc_r+0x290>
  809108:	0000a706 	br	8093a8 <_malloc_r+0x520>
  80910c:	3000ab0e 	bge	r6,zero,8093bc <_malloc_r+0x534>
  809110:	84000317 	ldw	r16,12(r16)
  809114:	1c00a426 	beq	r3,r16,8093a8 <_malloc_r+0x520>
  809118:	80800117 	ldw	r2,4(r16)
  80911c:	1204703a 	and	r2,r2,r8
  809120:	144dc83a 	sub	r6,r2,r17
  809124:	29bff90e 	bge	r5,r6,80910c <_malloc_r+0x284>
  809128:	81000317 	ldw	r4,12(r16)
  80912c:	80c00217 	ldw	r3,8(r16)
  809130:	89400054 	ori	r5,r17,1
  809134:	8445883a 	add	r2,r16,r17
  809138:	20c00215 	stw	r3,8(r4)
  80913c:	19000315 	stw	r4,12(r3)
  809140:	81400115 	stw	r5,4(r16)
  809144:	1187883a 	add	r3,r2,r6
  809148:	31000054 	ori	r4,r6,1
  80914c:	50800315 	stw	r2,12(r10)
  809150:	50800215 	stw	r2,8(r10)
  809154:	19800015 	stw	r6,0(r3)
  809158:	11000115 	stw	r4,4(r2)
  80915c:	12800215 	stw	r10,8(r2)
  809160:	12800315 	stw	r10,12(r2)
  809164:	9009883a 	mov	r4,r18
  809168:	080d3200 	call	80d320 <__malloc_unlock>
  80916c:	80c00204 	addi	r3,r16,8
  809170:	003f5906 	br	808ed8 <_malloc_r+0x50>
  809174:	8109883a 	add	r4,r16,r4
  809178:	20800117 	ldw	r2,4(r4)
  80917c:	80c00217 	ldw	r3,8(r16)
  809180:	81400317 	ldw	r5,12(r16)
  809184:	10800054 	ori	r2,r2,1
  809188:	20800115 	stw	r2,4(r4)
  80918c:	28c00215 	stw	r3,8(r5)
  809190:	19400315 	stw	r5,12(r3)
  809194:	9009883a 	mov	r4,r18
  809198:	080d3200 	call	80d320 <__malloc_unlock>
  80919c:	80c00204 	addi	r3,r16,8
  8091a0:	003f4d06 	br	808ed8 <_malloc_r+0x50>
  8091a4:	80800204 	addi	r2,r16,8
  8091a8:	14000317 	ldw	r16,12(r2)
  8091ac:	143f911e 	bne	r2,r16,808ff4 <_malloc_r+0x16c>
  8091b0:	1a400084 	addi	r9,r3,2
  8091b4:	003f7306 	br	808f84 <_malloc_r+0xfc>
  8091b8:	88c00054 	ori	r3,r17,1
  8091bc:	8445883a 	add	r2,r16,r17
  8091c0:	80c00115 	stw	r3,4(r16)
  8091c4:	003fdf06 	br	809144 <_malloc_r+0x2bc>
  8091c8:	e4000217 	ldw	r16,8(fp)
  8091cc:	00bfff04 	movi	r2,-4
  8091d0:	80c00117 	ldw	r3,4(r16)
  8091d4:	802d883a 	mov	r22,r16
  8091d8:	18aa703a 	and	r21,r3,r2
  8091dc:	ac401636 	bltu	r21,r17,809238 <_malloc_r+0x3b0>
  8091e0:	ac49c83a 	sub	r4,r21,r17
  8091e4:	008003c4 	movi	r2,15
  8091e8:	1100130e 	bge	r2,r4,809238 <_malloc_r+0x3b0>
  8091ec:	88800054 	ori	r2,r17,1
  8091f0:	8447883a 	add	r3,r16,r17
  8091f4:	80800115 	stw	r2,4(r16)
  8091f8:	20800054 	ori	r2,r4,1
  8091fc:	18800115 	stw	r2,4(r3)
  809200:	e0c00215 	stw	r3,8(fp)
  809204:	9009883a 	mov	r4,r18
  809208:	080d3200 	call	80d320 <__malloc_unlock>
  80920c:	80c00204 	addi	r3,r16,8
  809210:	003f3106 	br	808ed8 <_malloc_r+0x50>
  809214:	39c00117 	ldw	r7,4(r7)
  809218:	573ffe04 	addi	fp,r10,-8
  80921c:	003fa006 	br	8090a0 <_malloc_r+0x218>
  809220:	00801504 	movi	r2,84
  809224:	10c06736 	bltu	r2,r3,8093c4 <_malloc_r+0x53c>
  809228:	8804d33a 	srli	r2,r17,12
  80922c:	11801b84 	addi	r6,r2,110
  809230:	300490fa 	slli	r2,r6,3
  809234:	003f4106 	br	808f3c <_malloc_r+0xb4>
  809238:	d0a04817 	ldw	r2,-32480(gp)
  80923c:	d0e00617 	ldw	r3,-32744(gp)
  809240:	053fffc4 	movi	r20,-1
  809244:	10800404 	addi	r2,r2,16
  809248:	88a7883a 	add	r19,r17,r2
  80924c:	1d000326 	beq	r3,r20,80925c <_malloc_r+0x3d4>
  809250:	98c3ffc4 	addi	r3,r19,4095
  809254:	00bc0004 	movi	r2,-4096
  809258:	18a6703a 	and	r19,r3,r2
  80925c:	9009883a 	mov	r4,r18
  809260:	980b883a 	mov	r5,r19
  809264:	080aeec0 	call	80aeec <_sbrk_r>
  809268:	1009883a 	mov	r4,r2
  80926c:	15000426 	beq	r2,r20,809280 <_malloc_r+0x3f8>
  809270:	854b883a 	add	r5,r16,r21
  809274:	1029883a 	mov	r20,r2
  809278:	11405a2e 	bgeu	r2,r5,8093e4 <_malloc_r+0x55c>
  80927c:	87000c26 	beq	r16,fp,8092b0 <_malloc_r+0x428>
  809280:	e4000217 	ldw	r16,8(fp)
  809284:	80c00117 	ldw	r3,4(r16)
  809288:	00bfff04 	movi	r2,-4
  80928c:	1884703a 	and	r2,r3,r2
  809290:	14400336 	bltu	r2,r17,8092a0 <_malloc_r+0x418>
  809294:	1449c83a 	sub	r4,r2,r17
  809298:	008003c4 	movi	r2,15
  80929c:	113fd316 	blt	r2,r4,8091ec <_malloc_r+0x364>
  8092a0:	9009883a 	mov	r4,r18
  8092a4:	080d3200 	call	80d320 <__malloc_unlock>
  8092a8:	0007883a 	mov	r3,zero
  8092ac:	003f0a06 	br	808ed8 <_malloc_r+0x50>
  8092b0:	05c020b4 	movhi	r23,130
  8092b4:	bdfcdf04 	addi	r23,r23,-3204
  8092b8:	b8800017 	ldw	r2,0(r23)
  8092bc:	988d883a 	add	r6,r19,r2
  8092c0:	b9800015 	stw	r6,0(r23)
  8092c4:	d0e00617 	ldw	r3,-32744(gp)
  8092c8:	00bfffc4 	movi	r2,-1
  8092cc:	18808e26 	beq	r3,r2,809508 <_malloc_r+0x680>
  8092d0:	2145c83a 	sub	r2,r4,r5
  8092d4:	3085883a 	add	r2,r6,r2
  8092d8:	b8800015 	stw	r2,0(r23)
  8092dc:	20c001cc 	andi	r3,r4,7
  8092e0:	18005f1e 	bne	r3,zero,809460 <_malloc_r+0x5d8>
  8092e4:	000b883a 	mov	r5,zero
  8092e8:	a4c5883a 	add	r2,r20,r19
  8092ec:	1083ffcc 	andi	r2,r2,4095
  8092f0:	00c40004 	movi	r3,4096
  8092f4:	1887c83a 	sub	r3,r3,r2
  8092f8:	28e7883a 	add	r19,r5,r3
  8092fc:	9009883a 	mov	r4,r18
  809300:	980b883a 	mov	r5,r19
  809304:	080aeec0 	call	80aeec <_sbrk_r>
  809308:	1007883a 	mov	r3,r2
  80930c:	00bfffc4 	movi	r2,-1
  809310:	18807a26 	beq	r3,r2,8094fc <_malloc_r+0x674>
  809314:	1d05c83a 	sub	r2,r3,r20
  809318:	9885883a 	add	r2,r19,r2
  80931c:	10c00054 	ori	r3,r2,1
  809320:	b8800017 	ldw	r2,0(r23)
  809324:	a021883a 	mov	r16,r20
  809328:	a0c00115 	stw	r3,4(r20)
  80932c:	9885883a 	add	r2,r19,r2
  809330:	b8800015 	stw	r2,0(r23)
  809334:	e5000215 	stw	r20,8(fp)
  809338:	b7003626 	beq	r22,fp,809414 <_malloc_r+0x58c>
  80933c:	018003c4 	movi	r6,15
  809340:	35404b36 	bltu	r6,r21,809470 <_malloc_r+0x5e8>
  809344:	00800044 	movi	r2,1
  809348:	a0800115 	stw	r2,4(r20)
  80934c:	003fcd06 	br	809284 <_malloc_r+0x3fc>
  809350:	2808d27a 	srli	r4,r5,9
  809354:	2000371e 	bne	r4,zero,809434 <_malloc_r+0x5ac>
  809358:	2808d0fa 	srli	r4,r5,3
  80935c:	200690fa 	slli	r3,r4,3
  809360:	1ad1883a 	add	r8,r3,r11
  809364:	41800217 	ldw	r6,8(r8)
  809368:	41805b26 	beq	r8,r6,8094d8 <_malloc_r+0x650>
  80936c:	30800117 	ldw	r2,4(r6)
  809370:	00ffff04 	movi	r3,-4
  809374:	10c4703a 	and	r2,r2,r3
  809378:	2880022e 	bgeu	r5,r2,809384 <_malloc_r+0x4fc>
  80937c:	31800217 	ldw	r6,8(r6)
  809380:	41bffa1e 	bne	r8,r6,80936c <_malloc_r+0x4e4>
  809384:	32000317 	ldw	r8,12(r6)
  809388:	39c00117 	ldw	r7,4(r7)
  80938c:	82000315 	stw	r8,12(r16)
  809390:	81800215 	stw	r6,8(r16)
  809394:	070020b4 	movhi	fp,130
  809398:	e736bf04 	addi	fp,fp,-9476
  80939c:	34000315 	stw	r16,12(r6)
  8093a0:	44000215 	stw	r16,8(r8)
  8093a4:	003f3e06 	br	8090a0 <_malloc_r+0x218>
  8093a8:	63000044 	addi	r12,r12,1
  8093ac:	608000cc 	andi	r2,r12,3
  8093b0:	10005d26 	beq	r2,zero,809528 <_malloc_r+0x6a0>
  8093b4:	18c00204 	addi	r3,r3,8
  8093b8:	003f5106 	br	809100 <_malloc_r+0x278>
  8093bc:	8089883a 	add	r4,r16,r2
  8093c0:	003f6d06 	br	809178 <_malloc_r+0x2f0>
  8093c4:	00805504 	movi	r2,340
  8093c8:	10c02036 	bltu	r2,r3,80944c <_malloc_r+0x5c4>
  8093cc:	8804d3fa 	srli	r2,r17,15
  8093d0:	11801dc4 	addi	r6,r2,119
  8093d4:	300490fa 	slli	r2,r6,3
  8093d8:	003ed806 	br	808f3c <_malloc_r+0xb4>
  8093dc:	48c000c4 	addi	r3,r9,3
  8093e0:	003f3106 	br	8090a8 <_malloc_r+0x220>
  8093e4:	05c020b4 	movhi	r23,130
  8093e8:	bdfcdf04 	addi	r23,r23,-3204
  8093ec:	b8800017 	ldw	r2,0(r23)
  8093f0:	988d883a 	add	r6,r19,r2
  8093f4:	b9800015 	stw	r6,0(r23)
  8093f8:	293fb21e 	bne	r5,r4,8092c4 <_malloc_r+0x43c>
  8093fc:	2083ffcc 	andi	r2,r4,4095
  809400:	103fb01e 	bne	r2,zero,8092c4 <_malloc_r+0x43c>
  809404:	e4000217 	ldw	r16,8(fp)
  809408:	9d45883a 	add	r2,r19,r21
  80940c:	10800054 	ori	r2,r2,1
  809410:	80800115 	stw	r2,4(r16)
  809414:	b8c00017 	ldw	r3,0(r23)
  809418:	d0a04917 	ldw	r2,-32476(gp)
  80941c:	10c0012e 	bgeu	r2,r3,809424 <_malloc_r+0x59c>
  809420:	d0e04915 	stw	r3,-32476(gp)
  809424:	d0a04a17 	ldw	r2,-32472(gp)
  809428:	10ff962e 	bgeu	r2,r3,809284 <_malloc_r+0x3fc>
  80942c:	d0e04a15 	stw	r3,-32472(gp)
  809430:	003f9406 	br	809284 <_malloc_r+0x3fc>
  809434:	00800104 	movi	r2,4
  809438:	11001e36 	bltu	r2,r4,8094b4 <_malloc_r+0x62c>
  80943c:	2804d1ba 	srli	r2,r5,6
  809440:	11000e04 	addi	r4,r2,56
  809444:	200690fa 	slli	r3,r4,3
  809448:	003fc506 	br	809360 <_malloc_r+0x4d8>
  80944c:	00815504 	movi	r2,1364
  809450:	10c01d2e 	bgeu	r2,r3,8094c8 <_malloc_r+0x640>
  809454:	01801f84 	movi	r6,126
  809458:	0080fc04 	movi	r2,1008
  80945c:	003eb706 	br	808f3c <_malloc_r+0xb4>
  809460:	00800204 	movi	r2,8
  809464:	10cbc83a 	sub	r5,r2,r3
  809468:	2169883a 	add	r20,r4,r5
  80946c:	003f9e06 	br	8092e8 <_malloc_r+0x460>
  809470:	00bffe04 	movi	r2,-8
  809474:	a93ffd04 	addi	r4,r21,-12
  809478:	2088703a 	and	r4,r4,r2
  80947c:	b10b883a 	add	r5,r22,r4
  809480:	00c00144 	movi	r3,5
  809484:	28c00215 	stw	r3,8(r5)
  809488:	28c00115 	stw	r3,4(r5)
  80948c:	b0800117 	ldw	r2,4(r22)
  809490:	1080004c 	andi	r2,r2,1
  809494:	2084b03a 	or	r2,r4,r2
  809498:	b0800115 	stw	r2,4(r22)
  80949c:	313fdd2e 	bgeu	r6,r4,809414 <_malloc_r+0x58c>
  8094a0:	b1400204 	addi	r5,r22,8
  8094a4:	9009883a 	mov	r4,r18
  8094a8:	08083000 	call	808300 <_free_r>
  8094ac:	e4000217 	ldw	r16,8(fp)
  8094b0:	003fd806 	br	809414 <_malloc_r+0x58c>
  8094b4:	00800504 	movi	r2,20
  8094b8:	11001536 	bltu	r2,r4,809510 <_malloc_r+0x688>
  8094bc:	210016c4 	addi	r4,r4,91
  8094c0:	200690fa 	slli	r3,r4,3
  8094c4:	003fa606 	br	809360 <_malloc_r+0x4d8>
  8094c8:	8804d4ba 	srli	r2,r17,18
  8094cc:	11801f04 	addi	r6,r2,124
  8094d0:	300490fa 	slli	r2,r6,3
  8094d4:	003e9906 	br	808f3c <_malloc_r+0xb4>
  8094d8:	2009d0ba 	srai	r4,r4,2
  8094dc:	014020b4 	movhi	r5,130
  8094e0:	2976bf04 	addi	r5,r5,-9476
  8094e4:	00c00044 	movi	r3,1
  8094e8:	28800117 	ldw	r2,4(r5)
  8094ec:	1906983a 	sll	r3,r3,r4
  8094f0:	10c4b03a 	or	r2,r2,r3
  8094f4:	28800115 	stw	r2,4(r5)
  8094f8:	003fa306 	br	809388 <_malloc_r+0x500>
  8094fc:	0027883a 	mov	r19,zero
  809500:	00c00044 	movi	r3,1
  809504:	003f8606 	br	809320 <_malloc_r+0x498>
  809508:	d1200615 	stw	r4,-32744(gp)
  80950c:	003f7306 	br	8092dc <_malloc_r+0x454>
  809510:	00801504 	movi	r2,84
  809514:	11001936 	bltu	r2,r4,80957c <_malloc_r+0x6f4>
  809518:	2804d33a 	srli	r2,r5,12
  80951c:	11001b84 	addi	r4,r2,110
  809520:	200690fa 	slli	r3,r4,3
  809524:	003f8e06 	br	809360 <_malloc_r+0x4d8>
  809528:	480b883a 	mov	r5,r9
  80952c:	6807883a 	mov	r3,r13
  809530:	288000cc 	andi	r2,r5,3
  809534:	18fffe04 	addi	r3,r3,-8
  809538:	297fffc4 	addi	r5,r5,-1
  80953c:	10001526 	beq	r2,zero,809594 <_malloc_r+0x70c>
  809540:	18800217 	ldw	r2,8(r3)
  809544:	10fffa26 	beq	r2,r3,809530 <_malloc_r+0x6a8>
  809548:	2109883a 	add	r4,r4,r4
  80954c:	393f1e36 	bltu	r7,r4,8091c8 <_malloc_r+0x340>
  809550:	203f1d26 	beq	r4,zero,8091c8 <_malloc_r+0x340>
  809554:	21c4703a 	and	r2,r4,r7
  809558:	10000226 	beq	r2,zero,809564 <_malloc_r+0x6dc>
  80955c:	6013883a 	mov	r9,r12
  809560:	003ee106 	br	8090e8 <_malloc_r+0x260>
  809564:	2109883a 	add	r4,r4,r4
  809568:	3904703a 	and	r2,r7,r4
  80956c:	63000104 	addi	r12,r12,4
  809570:	103ffc26 	beq	r2,zero,809564 <_malloc_r+0x6dc>
  809574:	6013883a 	mov	r9,r12
  809578:	003edb06 	br	8090e8 <_malloc_r+0x260>
  80957c:	00805504 	movi	r2,340
  809580:	11000836 	bltu	r2,r4,8095a4 <_malloc_r+0x71c>
  809584:	2804d3fa 	srli	r2,r5,15
  809588:	11001dc4 	addi	r4,r2,119
  80958c:	200690fa 	slli	r3,r4,3
  809590:	003f7306 	br	809360 <_malloc_r+0x4d8>
  809594:	0104303a 	nor	r2,zero,r4
  809598:	388e703a 	and	r7,r7,r2
  80959c:	e1c00115 	stw	r7,4(fp)
  8095a0:	003fe906 	br	809548 <_malloc_r+0x6c0>
  8095a4:	00815504 	movi	r2,1364
  8095a8:	1100032e 	bgeu	r2,r4,8095b8 <_malloc_r+0x730>
  8095ac:	01001f84 	movi	r4,126
  8095b0:	00c0fc04 	movi	r3,1008
  8095b4:	003f6a06 	br	809360 <_malloc_r+0x4d8>
  8095b8:	2804d4ba 	srli	r2,r5,18
  8095bc:	11001f04 	addi	r4,r2,124
  8095c0:	200690fa 	slli	r3,r4,3
  8095c4:	003f6606 	br	809360 <_malloc_r+0x4d8>

008095c8 <memchr>:
  8095c8:	008000c4 	movi	r2,3
  8095cc:	29403fcc 	andi	r5,r5,255
  8095d0:	2007883a 	mov	r3,r4
  8095d4:	1180022e 	bgeu	r2,r6,8095e0 <memchr+0x18>
  8095d8:	2084703a 	and	r2,r4,r2
  8095dc:	10000b26 	beq	r2,zero,80960c <memchr+0x44>
  8095e0:	313fffc4 	addi	r4,r6,-1
  8095e4:	3000051e 	bne	r6,zero,8095fc <memchr+0x34>
  8095e8:	00002c06 	br	80969c <memchr+0xd4>
  8095ec:	213fffc4 	addi	r4,r4,-1
  8095f0:	00bfffc4 	movi	r2,-1
  8095f4:	18c00044 	addi	r3,r3,1
  8095f8:	20802826 	beq	r4,r2,80969c <memchr+0xd4>
  8095fc:	18800003 	ldbu	r2,0(r3)
  809600:	28bffa1e 	bne	r5,r2,8095ec <memchr+0x24>
  809604:	1805883a 	mov	r2,r3
  809608:	f800283a 	ret
  80960c:	0011883a 	mov	r8,zero
  809610:	0007883a 	mov	r3,zero
  809614:	01c00104 	movi	r7,4
  809618:	4004923a 	slli	r2,r8,8
  80961c:	18c00044 	addi	r3,r3,1
  809620:	1151883a 	add	r8,r2,r5
  809624:	19fffc1e 	bne	r3,r7,809618 <memchr+0x50>
  809628:	02bfbff4 	movhi	r10,65279
  80962c:	52bfbfc4 	addi	r10,r10,-257
  809630:	02602074 	movhi	r9,32897
  809634:	4a602004 	addi	r9,r9,-32640
  809638:	02c000c4 	movi	r11,3
  80963c:	20800017 	ldw	r2,0(r4)
  809640:	31bfff04 	addi	r6,r6,-4
  809644:	200f883a 	mov	r7,r4
  809648:	1204f03a 	xor	r2,r2,r8
  80964c:	1287883a 	add	r3,r2,r10
  809650:	1a46703a 	and	r3,r3,r9
  809654:	0084303a 	nor	r2,zero,r2
  809658:	10c4703a 	and	r2,r2,r3
  80965c:	10000b26 	beq	r2,zero,80968c <memchr+0xc4>
  809660:	20800003 	ldbu	r2,0(r4)
  809664:	28800f26 	beq	r5,r2,8096a4 <memchr+0xdc>
  809668:	20800043 	ldbu	r2,1(r4)
  80966c:	21c00044 	addi	r7,r4,1
  809670:	28800c26 	beq	r5,r2,8096a4 <memchr+0xdc>
  809674:	20800083 	ldbu	r2,2(r4)
  809678:	21c00084 	addi	r7,r4,2
  80967c:	28800926 	beq	r5,r2,8096a4 <memchr+0xdc>
  809680:	208000c3 	ldbu	r2,3(r4)
  809684:	21c000c4 	addi	r7,r4,3
  809688:	28800626 	beq	r5,r2,8096a4 <memchr+0xdc>
  80968c:	21000104 	addi	r4,r4,4
  809690:	59bfea36 	bltu	r11,r6,80963c <memchr+0x74>
  809694:	2007883a 	mov	r3,r4
  809698:	003fd106 	br	8095e0 <memchr+0x18>
  80969c:	0005883a 	mov	r2,zero
  8096a0:	f800283a 	ret
  8096a4:	3805883a 	mov	r2,r7
  8096a8:	f800283a 	ret

008096ac <memcpy>:
  8096ac:	01c003c4 	movi	r7,15
  8096b0:	2007883a 	mov	r3,r4
  8096b4:	3980032e 	bgeu	r7,r6,8096c4 <memcpy+0x18>
  8096b8:	2904b03a 	or	r2,r5,r4
  8096bc:	108000cc 	andi	r2,r2,3
  8096c0:	10000926 	beq	r2,zero,8096e8 <memcpy+0x3c>
  8096c4:	30000626 	beq	r6,zero,8096e0 <memcpy+0x34>
  8096c8:	30cd883a 	add	r6,r6,r3
  8096cc:	28800003 	ldbu	r2,0(r5)
  8096d0:	29400044 	addi	r5,r5,1
  8096d4:	18800005 	stb	r2,0(r3)
  8096d8:	18c00044 	addi	r3,r3,1
  8096dc:	30fffb1e 	bne	r6,r3,8096cc <memcpy+0x20>
  8096e0:	2005883a 	mov	r2,r4
  8096e4:	f800283a 	ret
  8096e8:	3811883a 	mov	r8,r7
  8096ec:	200f883a 	mov	r7,r4
  8096f0:	28c00017 	ldw	r3,0(r5)
  8096f4:	31bffc04 	addi	r6,r6,-16
  8096f8:	38c00015 	stw	r3,0(r7)
  8096fc:	28800117 	ldw	r2,4(r5)
  809700:	38800115 	stw	r2,4(r7)
  809704:	28c00217 	ldw	r3,8(r5)
  809708:	38c00215 	stw	r3,8(r7)
  80970c:	28800317 	ldw	r2,12(r5)
  809710:	29400404 	addi	r5,r5,16
  809714:	38800315 	stw	r2,12(r7)
  809718:	39c00404 	addi	r7,r7,16
  80971c:	41bff436 	bltu	r8,r6,8096f0 <memcpy+0x44>
  809720:	008000c4 	movi	r2,3
  809724:	1180072e 	bgeu	r2,r6,809744 <memcpy+0x98>
  809728:	1007883a 	mov	r3,r2
  80972c:	28800017 	ldw	r2,0(r5)
  809730:	31bfff04 	addi	r6,r6,-4
  809734:	29400104 	addi	r5,r5,4
  809738:	38800015 	stw	r2,0(r7)
  80973c:	39c00104 	addi	r7,r7,4
  809740:	19bffa36 	bltu	r3,r6,80972c <memcpy+0x80>
  809744:	3807883a 	mov	r3,r7
  809748:	003fde06 	br	8096c4 <memcpy+0x18>

0080974c <memmove>:
  80974c:	2807883a 	mov	r3,r5
  809750:	2011883a 	mov	r8,r4
  809754:	29000c2e 	bgeu	r5,r4,809788 <memmove+0x3c>
  809758:	298f883a 	add	r7,r5,r6
  80975c:	21c00a2e 	bgeu	r4,r7,809788 <memmove+0x3c>
  809760:	30000726 	beq	r6,zero,809780 <memmove+0x34>
  809764:	2187883a 	add	r3,r4,r6
  809768:	198dc83a 	sub	r6,r3,r6
  80976c:	39ffffc4 	addi	r7,r7,-1
  809770:	38800003 	ldbu	r2,0(r7)
  809774:	18ffffc4 	addi	r3,r3,-1
  809778:	18800005 	stb	r2,0(r3)
  80977c:	19bffb1e 	bne	r3,r6,80976c <memmove+0x20>
  809780:	2005883a 	mov	r2,r4
  809784:	f800283a 	ret
  809788:	01c003c4 	movi	r7,15
  80978c:	39800a36 	bltu	r7,r6,8097b8 <memmove+0x6c>
  809790:	303ffb26 	beq	r6,zero,809780 <memmove+0x34>
  809794:	400f883a 	mov	r7,r8
  809798:	320d883a 	add	r6,r6,r8
  80979c:	28800003 	ldbu	r2,0(r5)
  8097a0:	29400044 	addi	r5,r5,1
  8097a4:	38800005 	stb	r2,0(r7)
  8097a8:	39c00044 	addi	r7,r7,1
  8097ac:	39bffb1e 	bne	r7,r6,80979c <memmove+0x50>
  8097b0:	2005883a 	mov	r2,r4
  8097b4:	f800283a 	ret
  8097b8:	1904b03a 	or	r2,r3,r4
  8097bc:	108000cc 	andi	r2,r2,3
  8097c0:	103ff31e 	bne	r2,zero,809790 <memmove+0x44>
  8097c4:	3811883a 	mov	r8,r7
  8097c8:	180b883a 	mov	r5,r3
  8097cc:	200f883a 	mov	r7,r4
  8097d0:	28c00017 	ldw	r3,0(r5)
  8097d4:	31bffc04 	addi	r6,r6,-16
  8097d8:	38c00015 	stw	r3,0(r7)
  8097dc:	28800117 	ldw	r2,4(r5)
  8097e0:	38800115 	stw	r2,4(r7)
  8097e4:	28c00217 	ldw	r3,8(r5)
  8097e8:	38c00215 	stw	r3,8(r7)
  8097ec:	28800317 	ldw	r2,12(r5)
  8097f0:	29400404 	addi	r5,r5,16
  8097f4:	38800315 	stw	r2,12(r7)
  8097f8:	39c00404 	addi	r7,r7,16
  8097fc:	41bff436 	bltu	r8,r6,8097d0 <memmove+0x84>
  809800:	008000c4 	movi	r2,3
  809804:	1180072e 	bgeu	r2,r6,809824 <memmove+0xd8>
  809808:	1007883a 	mov	r3,r2
  80980c:	28800017 	ldw	r2,0(r5)
  809810:	31bfff04 	addi	r6,r6,-4
  809814:	29400104 	addi	r5,r5,4
  809818:	38800015 	stw	r2,0(r7)
  80981c:	39c00104 	addi	r7,r7,4
  809820:	19bffa36 	bltu	r3,r6,80980c <memmove+0xc0>
  809824:	3811883a 	mov	r8,r7
  809828:	003fd906 	br	809790 <memmove+0x44>

0080982c <memset>:
  80982c:	008000c4 	movi	r2,3
  809830:	29403fcc 	andi	r5,r5,255
  809834:	2007883a 	mov	r3,r4
  809838:	1180022e 	bgeu	r2,r6,809844 <memset+0x18>
  80983c:	2084703a 	and	r2,r4,r2
  809840:	10000826 	beq	r2,zero,809864 <memset+0x38>
  809844:	30000526 	beq	r6,zero,80985c <memset+0x30>
  809848:	2805883a 	mov	r2,r5
  80984c:	30cd883a 	add	r6,r6,r3
  809850:	18800005 	stb	r2,0(r3)
  809854:	18c00044 	addi	r3,r3,1
  809858:	19bffd1e 	bne	r3,r6,809850 <memset+0x24>
  80985c:	2005883a 	mov	r2,r4
  809860:	f800283a 	ret
  809864:	2804923a 	slli	r2,r5,8
  809868:	020003c4 	movi	r8,15
  80986c:	200f883a 	mov	r7,r4
  809870:	2884b03a 	or	r2,r5,r2
  809874:	1006943a 	slli	r3,r2,16
  809878:	10c6b03a 	or	r3,r2,r3
  80987c:	41800a2e 	bgeu	r8,r6,8098a8 <memset+0x7c>
  809880:	4005883a 	mov	r2,r8
  809884:	31bffc04 	addi	r6,r6,-16
  809888:	38c00015 	stw	r3,0(r7)
  80988c:	38c00115 	stw	r3,4(r7)
  809890:	38c00215 	stw	r3,8(r7)
  809894:	38c00315 	stw	r3,12(r7)
  809898:	39c00404 	addi	r7,r7,16
  80989c:	11bff936 	bltu	r2,r6,809884 <memset+0x58>
  8098a0:	008000c4 	movi	r2,3
  8098a4:	1180052e 	bgeu	r2,r6,8098bc <memset+0x90>
  8098a8:	31bfff04 	addi	r6,r6,-4
  8098ac:	008000c4 	movi	r2,3
  8098b0:	38c00015 	stw	r3,0(r7)
  8098b4:	39c00104 	addi	r7,r7,4
  8098b8:	11bffb36 	bltu	r2,r6,8098a8 <memset+0x7c>
  8098bc:	3807883a 	mov	r3,r7
  8098c0:	003fe006 	br	809844 <memset+0x18>

008098c4 <_Bfree>:
  8098c4:	28000826 	beq	r5,zero,8098e8 <_Bfree+0x24>
  8098c8:	28800117 	ldw	r2,4(r5)
  8098cc:	21001317 	ldw	r4,76(r4)
  8098d0:	1085883a 	add	r2,r2,r2
  8098d4:	1085883a 	add	r2,r2,r2
  8098d8:	1105883a 	add	r2,r2,r4
  8098dc:	10c00017 	ldw	r3,0(r2)
  8098e0:	28c00015 	stw	r3,0(r5)
  8098e4:	11400015 	stw	r5,0(r2)
  8098e8:	f800283a 	ret

008098ec <__hi0bits>:
  8098ec:	20bfffec 	andhi	r2,r4,65535
  8098f0:	10001426 	beq	r2,zero,809944 <__hi0bits+0x58>
  8098f4:	0007883a 	mov	r3,zero
  8098f8:	20bfc02c 	andhi	r2,r4,65280
  8098fc:	1000021e 	bne	r2,zero,809908 <__hi0bits+0x1c>
  809900:	2008923a 	slli	r4,r4,8
  809904:	18c00204 	addi	r3,r3,8
  809908:	20bc002c 	andhi	r2,r4,61440
  80990c:	1000021e 	bne	r2,zero,809918 <__hi0bits+0x2c>
  809910:	2008913a 	slli	r4,r4,4
  809914:	18c00104 	addi	r3,r3,4
  809918:	20b0002c 	andhi	r2,r4,49152
  80991c:	1000031e 	bne	r2,zero,80992c <__hi0bits+0x40>
  809920:	2105883a 	add	r2,r4,r4
  809924:	18c00084 	addi	r3,r3,2
  809928:	1089883a 	add	r4,r2,r2
  80992c:	20000316 	blt	r4,zero,80993c <__hi0bits+0x50>
  809930:	2090002c 	andhi	r2,r4,16384
  809934:	10000626 	beq	r2,zero,809950 <__hi0bits+0x64>
  809938:	18c00044 	addi	r3,r3,1
  80993c:	1805883a 	mov	r2,r3
  809940:	f800283a 	ret
  809944:	2008943a 	slli	r4,r4,16
  809948:	00c00404 	movi	r3,16
  80994c:	003fea06 	br	8098f8 <__hi0bits+0xc>
  809950:	00c00804 	movi	r3,32
  809954:	1805883a 	mov	r2,r3
  809958:	f800283a 	ret

0080995c <__lo0bits>:
  80995c:	20c00017 	ldw	r3,0(r4)
  809960:	188001cc 	andi	r2,r3,7
  809964:	10000a26 	beq	r2,zero,809990 <__lo0bits+0x34>
  809968:	1880004c 	andi	r2,r3,1
  80996c:	1005003a 	cmpeq	r2,r2,zero
  809970:	10002126 	beq	r2,zero,8099f8 <__lo0bits+0x9c>
  809974:	1880008c 	andi	r2,r3,2
  809978:	1000251e 	bne	r2,zero,809a10 <__lo0bits+0xb4>
  80997c:	1804d0ba 	srli	r2,r3,2
  809980:	01400084 	movi	r5,2
  809984:	20800015 	stw	r2,0(r4)
  809988:	2805883a 	mov	r2,r5
  80998c:	f800283a 	ret
  809990:	18bfffcc 	andi	r2,r3,65535
  809994:	10001526 	beq	r2,zero,8099ec <__lo0bits+0x90>
  809998:	000b883a 	mov	r5,zero
  80999c:	18803fcc 	andi	r2,r3,255
  8099a0:	1000021e 	bne	r2,zero,8099ac <__lo0bits+0x50>
  8099a4:	1806d23a 	srli	r3,r3,8
  8099a8:	29400204 	addi	r5,r5,8
  8099ac:	188003cc 	andi	r2,r3,15
  8099b0:	1000021e 	bne	r2,zero,8099bc <__lo0bits+0x60>
  8099b4:	1806d13a 	srli	r3,r3,4
  8099b8:	29400104 	addi	r5,r5,4
  8099bc:	188000cc 	andi	r2,r3,3
  8099c0:	1000021e 	bne	r2,zero,8099cc <__lo0bits+0x70>
  8099c4:	1806d0ba 	srli	r3,r3,2
  8099c8:	29400084 	addi	r5,r5,2
  8099cc:	1880004c 	andi	r2,r3,1
  8099d0:	1000031e 	bne	r2,zero,8099e0 <__lo0bits+0x84>
  8099d4:	1806d07a 	srli	r3,r3,1
  8099d8:	18000a26 	beq	r3,zero,809a04 <__lo0bits+0xa8>
  8099dc:	29400044 	addi	r5,r5,1
  8099e0:	2805883a 	mov	r2,r5
  8099e4:	20c00015 	stw	r3,0(r4)
  8099e8:	f800283a 	ret
  8099ec:	1806d43a 	srli	r3,r3,16
  8099f0:	01400404 	movi	r5,16
  8099f4:	003fe906 	br	80999c <__lo0bits+0x40>
  8099f8:	000b883a 	mov	r5,zero
  8099fc:	2805883a 	mov	r2,r5
  809a00:	f800283a 	ret
  809a04:	01400804 	movi	r5,32
  809a08:	2805883a 	mov	r2,r5
  809a0c:	f800283a 	ret
  809a10:	1804d07a 	srli	r2,r3,1
  809a14:	01400044 	movi	r5,1
  809a18:	20800015 	stw	r2,0(r4)
  809a1c:	003fda06 	br	809988 <__lo0bits+0x2c>

00809a20 <__mcmp>:
  809a20:	20800417 	ldw	r2,16(r4)
  809a24:	28c00417 	ldw	r3,16(r5)
  809a28:	10cfc83a 	sub	r7,r2,r3
  809a2c:	38000c1e 	bne	r7,zero,809a60 <__mcmp+0x40>
  809a30:	18c5883a 	add	r2,r3,r3
  809a34:	1085883a 	add	r2,r2,r2
  809a38:	10c00504 	addi	r3,r2,20
  809a3c:	21000504 	addi	r4,r4,20
  809a40:	28cb883a 	add	r5,r5,r3
  809a44:	2085883a 	add	r2,r4,r2
  809a48:	10bfff04 	addi	r2,r2,-4
  809a4c:	297fff04 	addi	r5,r5,-4
  809a50:	11800017 	ldw	r6,0(r2)
  809a54:	28c00017 	ldw	r3,0(r5)
  809a58:	30c0031e 	bne	r6,r3,809a68 <__mcmp+0x48>
  809a5c:	20bffa36 	bltu	r4,r2,809a48 <__mcmp+0x28>
  809a60:	3805883a 	mov	r2,r7
  809a64:	f800283a 	ret
  809a68:	30c00336 	bltu	r6,r3,809a78 <__mcmp+0x58>
  809a6c:	01c00044 	movi	r7,1
  809a70:	3805883a 	mov	r2,r7
  809a74:	f800283a 	ret
  809a78:	01ffffc4 	movi	r7,-1
  809a7c:	003ff806 	br	809a60 <__mcmp+0x40>

00809a80 <__ulp>:
  809a80:	295ffc2c 	andhi	r5,r5,32752
  809a84:	013f3034 	movhi	r4,64704
  809a88:	290b883a 	add	r5,r5,r4
  809a8c:	0145c83a 	sub	r2,zero,r5
  809a90:	1007d53a 	srai	r3,r2,20
  809a94:	000d883a 	mov	r6,zero
  809a98:	0140040e 	bge	zero,r5,809aac <__ulp+0x2c>
  809a9c:	280f883a 	mov	r7,r5
  809aa0:	3807883a 	mov	r3,r7
  809aa4:	3005883a 	mov	r2,r6
  809aa8:	f800283a 	ret
  809aac:	008004c4 	movi	r2,19
  809ab0:	193ffb04 	addi	r4,r3,-20
  809ab4:	10c00c0e 	bge	r2,r3,809ae8 <__ulp+0x68>
  809ab8:	008007c4 	movi	r2,31
  809abc:	1107c83a 	sub	r3,r2,r4
  809ac0:	00800784 	movi	r2,30
  809ac4:	01400044 	movi	r5,1
  809ac8:	11000216 	blt	r2,r4,809ad4 <__ulp+0x54>
  809acc:	00800044 	movi	r2,1
  809ad0:	10ca983a 	sll	r5,r2,r3
  809ad4:	000f883a 	mov	r7,zero
  809ad8:	280d883a 	mov	r6,r5
  809adc:	3807883a 	mov	r3,r7
  809ae0:	3005883a 	mov	r2,r6
  809ae4:	f800283a 	ret
  809ae8:	00800234 	movhi	r2,8
  809aec:	10cfd83a 	sra	r7,r2,r3
  809af0:	000d883a 	mov	r6,zero
  809af4:	3005883a 	mov	r2,r6
  809af8:	3807883a 	mov	r3,r7
  809afc:	f800283a 	ret

00809b00 <__b2d>:
  809b00:	20800417 	ldw	r2,16(r4)
  809b04:	defff904 	addi	sp,sp,-28
  809b08:	dd000415 	stw	r20,16(sp)
  809b0c:	1085883a 	add	r2,r2,r2
  809b10:	25000504 	addi	r20,r4,20
  809b14:	1085883a 	add	r2,r2,r2
  809b18:	dc000015 	stw	r16,0(sp)
  809b1c:	a0a1883a 	add	r16,r20,r2
  809b20:	dd400515 	stw	r21,20(sp)
  809b24:	857fff17 	ldw	r21,-4(r16)
  809b28:	dc400115 	stw	r17,4(sp)
  809b2c:	dfc00615 	stw	ra,24(sp)
  809b30:	a809883a 	mov	r4,r21
  809b34:	2823883a 	mov	r17,r5
  809b38:	dcc00315 	stw	r19,12(sp)
  809b3c:	dc800215 	stw	r18,8(sp)
  809b40:	08098ec0 	call	8098ec <__hi0bits>
  809b44:	100b883a 	mov	r5,r2
  809b48:	00800804 	movi	r2,32
  809b4c:	1145c83a 	sub	r2,r2,r5
  809b50:	88800015 	stw	r2,0(r17)
  809b54:	00800284 	movi	r2,10
  809b58:	80ffff04 	addi	r3,r16,-4
  809b5c:	11401416 	blt	r2,r5,809bb0 <__b2d+0xb0>
  809b60:	008002c4 	movi	r2,11
  809b64:	1149c83a 	sub	r4,r2,r5
  809b68:	a0c02736 	bltu	r20,r3,809c08 <__b2d+0x108>
  809b6c:	000d883a 	mov	r6,zero
  809b70:	28800544 	addi	r2,r5,21
  809b74:	a906d83a 	srl	r3,r21,r4
  809b78:	a884983a 	sll	r2,r21,r2
  809b7c:	1ccffc34 	orhi	r19,r3,16368
  809b80:	11a4b03a 	or	r18,r2,r6
  809b84:	9005883a 	mov	r2,r18
  809b88:	9807883a 	mov	r3,r19
  809b8c:	dfc00617 	ldw	ra,24(sp)
  809b90:	dd400517 	ldw	r21,20(sp)
  809b94:	dd000417 	ldw	r20,16(sp)
  809b98:	dcc00317 	ldw	r19,12(sp)
  809b9c:	dc800217 	ldw	r18,8(sp)
  809ba0:	dc400117 	ldw	r17,4(sp)
  809ba4:	dc000017 	ldw	r16,0(sp)
  809ba8:	dec00704 	addi	sp,sp,28
  809bac:	f800283a 	ret
  809bb0:	a0c00e36 	bltu	r20,r3,809bec <__b2d+0xec>
  809bb4:	293ffd44 	addi	r4,r5,-11
  809bb8:	000d883a 	mov	r6,zero
  809bbc:	20000f26 	beq	r4,zero,809bfc <__b2d+0xfc>
  809bc0:	00800804 	movi	r2,32
  809bc4:	110bc83a 	sub	r5,r2,r4
  809bc8:	a0c01236 	bltu	r20,r3,809c14 <__b2d+0x114>
  809bcc:	000f883a 	mov	r7,zero
  809bd0:	a904983a 	sll	r2,r21,r4
  809bd4:	3146d83a 	srl	r3,r6,r5
  809bd8:	3108983a 	sll	r4,r6,r4
  809bdc:	108ffc34 	orhi	r2,r2,16368
  809be0:	18a6b03a 	or	r19,r3,r2
  809be4:	3924b03a 	or	r18,r7,r4
  809be8:	003fe606 	br	809b84 <__b2d+0x84>
  809bec:	293ffd44 	addi	r4,r5,-11
  809bf0:	81bffe17 	ldw	r6,-8(r16)
  809bf4:	80fffe04 	addi	r3,r16,-8
  809bf8:	203ff11e 	bne	r4,zero,809bc0 <__b2d+0xc0>
  809bfc:	accffc34 	orhi	r19,r21,16368
  809c00:	3025883a 	mov	r18,r6
  809c04:	003fdf06 	br	809b84 <__b2d+0x84>
  809c08:	18bfff17 	ldw	r2,-4(r3)
  809c0c:	110cd83a 	srl	r6,r2,r4
  809c10:	003fd706 	br	809b70 <__b2d+0x70>
  809c14:	18bfff17 	ldw	r2,-4(r3)
  809c18:	114ed83a 	srl	r7,r2,r5
  809c1c:	003fec06 	br	809bd0 <__b2d+0xd0>

00809c20 <__ratio>:
  809c20:	defff904 	addi	sp,sp,-28
  809c24:	dc400215 	stw	r17,8(sp)
  809c28:	2823883a 	mov	r17,r5
  809c2c:	d80b883a 	mov	r5,sp
  809c30:	dfc00615 	stw	ra,24(sp)
  809c34:	dd000515 	stw	r20,20(sp)
  809c38:	dcc00415 	stw	r19,16(sp)
  809c3c:	dc800315 	stw	r18,12(sp)
  809c40:	2025883a 	mov	r18,r4
  809c44:	0809b000 	call	809b00 <__b2d>
  809c48:	8809883a 	mov	r4,r17
  809c4c:	d9400104 	addi	r5,sp,4
  809c50:	1027883a 	mov	r19,r2
  809c54:	1829883a 	mov	r20,r3
  809c58:	0809b000 	call	809b00 <__b2d>
  809c5c:	89000417 	ldw	r4,16(r17)
  809c60:	91c00417 	ldw	r7,16(r18)
  809c64:	d9800117 	ldw	r6,4(sp)
  809c68:	180b883a 	mov	r5,r3
  809c6c:	390fc83a 	sub	r7,r7,r4
  809c70:	1009883a 	mov	r4,r2
  809c74:	d8800017 	ldw	r2,0(sp)
  809c78:	380e917a 	slli	r7,r7,5
  809c7c:	2011883a 	mov	r8,r4
  809c80:	1185c83a 	sub	r2,r2,r6
  809c84:	11c5883a 	add	r2,r2,r7
  809c88:	1006953a 	slli	r3,r2,20
  809c8c:	2813883a 	mov	r9,r5
  809c90:	00800d0e 	bge	zero,r2,809cc8 <__ratio+0xa8>
  809c94:	1d29883a 	add	r20,r3,r20
  809c98:	a00b883a 	mov	r5,r20
  809c9c:	480f883a 	mov	r7,r9
  809ca0:	9809883a 	mov	r4,r19
  809ca4:	400d883a 	mov	r6,r8
  809ca8:	08036000 	call	803600 <__divdf3>
  809cac:	dfc00617 	ldw	ra,24(sp)
  809cb0:	dd000517 	ldw	r20,20(sp)
  809cb4:	dcc00417 	ldw	r19,16(sp)
  809cb8:	dc800317 	ldw	r18,12(sp)
  809cbc:	dc400217 	ldw	r17,8(sp)
  809cc0:	dec00704 	addi	sp,sp,28
  809cc4:	f800283a 	ret
  809cc8:	28d3c83a 	sub	r9,r5,r3
  809ccc:	003ff206 	br	809c98 <__ratio+0x78>

00809cd0 <_mprec_log10>:
  809cd0:	defffe04 	addi	sp,sp,-8
  809cd4:	008005c4 	movi	r2,23
  809cd8:	dc000015 	stw	r16,0(sp)
  809cdc:	dfc00115 	stw	ra,4(sp)
  809ce0:	2021883a 	mov	r16,r4
  809ce4:	11000c16 	blt	r2,r4,809d18 <_mprec_log10+0x48>
  809ce8:	200490fa 	slli	r2,r4,3
  809cec:	00c020b4 	movhi	r3,130
  809cf0:	18f50804 	addi	r3,r3,-11232
  809cf4:	10c5883a 	add	r2,r2,r3
  809cf8:	12400117 	ldw	r9,4(r2)
  809cfc:	12000017 	ldw	r8,0(r2)
  809d00:	4807883a 	mov	r3,r9
  809d04:	4005883a 	mov	r2,r8
  809d08:	dfc00117 	ldw	ra,4(sp)
  809d0c:	dc000017 	ldw	r16,0(sp)
  809d10:	dec00204 	addi	sp,sp,8
  809d14:	f800283a 	ret
  809d18:	0011883a 	mov	r8,zero
  809d1c:	024ffc34 	movhi	r9,16368
  809d20:	0005883a 	mov	r2,zero
  809d24:	00d00934 	movhi	r3,16420
  809d28:	480b883a 	mov	r5,r9
  809d2c:	4009883a 	mov	r4,r8
  809d30:	180f883a 	mov	r7,r3
  809d34:	100d883a 	mov	r6,r2
  809d38:	080323c0 	call	80323c <__muldf3>
  809d3c:	843fffc4 	addi	r16,r16,-1
  809d40:	1011883a 	mov	r8,r2
  809d44:	1813883a 	mov	r9,r3
  809d48:	803ff51e 	bne	r16,zero,809d20 <_mprec_log10+0x50>
  809d4c:	4005883a 	mov	r2,r8
  809d50:	4807883a 	mov	r3,r9
  809d54:	dfc00117 	ldw	ra,4(sp)
  809d58:	dc000017 	ldw	r16,0(sp)
  809d5c:	dec00204 	addi	sp,sp,8
  809d60:	f800283a 	ret

00809d64 <__copybits>:
  809d64:	297fffc4 	addi	r5,r5,-1
  809d68:	30800417 	ldw	r2,16(r6)
  809d6c:	280bd17a 	srai	r5,r5,5
  809d70:	31800504 	addi	r6,r6,20
  809d74:	1085883a 	add	r2,r2,r2
  809d78:	294b883a 	add	r5,r5,r5
  809d7c:	294b883a 	add	r5,r5,r5
  809d80:	1085883a 	add	r2,r2,r2
  809d84:	290b883a 	add	r5,r5,r4
  809d88:	3087883a 	add	r3,r6,r2
  809d8c:	29400104 	addi	r5,r5,4
  809d90:	30c0052e 	bgeu	r6,r3,809da8 <__copybits+0x44>
  809d94:	30800017 	ldw	r2,0(r6)
  809d98:	31800104 	addi	r6,r6,4
  809d9c:	20800015 	stw	r2,0(r4)
  809da0:	21000104 	addi	r4,r4,4
  809da4:	30fffb36 	bltu	r6,r3,809d94 <__copybits+0x30>
  809da8:	2140032e 	bgeu	r4,r5,809db8 <__copybits+0x54>
  809dac:	20000015 	stw	zero,0(r4)
  809db0:	21000104 	addi	r4,r4,4
  809db4:	217ffd36 	bltu	r4,r5,809dac <__copybits+0x48>
  809db8:	f800283a 	ret

00809dbc <__any_on>:
  809dbc:	20800417 	ldw	r2,16(r4)
  809dc0:	2807d17a 	srai	r3,r5,5
  809dc4:	21000504 	addi	r4,r4,20
  809dc8:	10c00d0e 	bge	r2,r3,809e00 <__any_on+0x44>
  809dcc:	1085883a 	add	r2,r2,r2
  809dd0:	1085883a 	add	r2,r2,r2
  809dd4:	208d883a 	add	r6,r4,r2
  809dd8:	2180182e 	bgeu	r4,r6,809e3c <__any_on+0x80>
  809ddc:	30bfff17 	ldw	r2,-4(r6)
  809de0:	30ffff04 	addi	r3,r6,-4
  809de4:	1000041e 	bne	r2,zero,809df8 <__any_on+0x3c>
  809de8:	20c0142e 	bgeu	r4,r3,809e3c <__any_on+0x80>
  809dec:	18ffff04 	addi	r3,r3,-4
  809df0:	18800017 	ldw	r2,0(r3)
  809df4:	103ffc26 	beq	r2,zero,809de8 <__any_on+0x2c>
  809df8:	00800044 	movi	r2,1
  809dfc:	f800283a 	ret
  809e00:	18800a0e 	bge	r3,r2,809e2c <__any_on+0x70>
  809e04:	294007cc 	andi	r5,r5,31
  809e08:	28000826 	beq	r5,zero,809e2c <__any_on+0x70>
  809e0c:	18c5883a 	add	r2,r3,r3
  809e10:	1085883a 	add	r2,r2,r2
  809e14:	208d883a 	add	r6,r4,r2
  809e18:	30c00017 	ldw	r3,0(r6)
  809e1c:	1944d83a 	srl	r2,r3,r5
  809e20:	1144983a 	sll	r2,r2,r5
  809e24:	18bff41e 	bne	r3,r2,809df8 <__any_on+0x3c>
  809e28:	003feb06 	br	809dd8 <__any_on+0x1c>
  809e2c:	18c5883a 	add	r2,r3,r3
  809e30:	1085883a 	add	r2,r2,r2
  809e34:	208d883a 	add	r6,r4,r2
  809e38:	003fe706 	br	809dd8 <__any_on+0x1c>
  809e3c:	0005883a 	mov	r2,zero
  809e40:	f800283a 	ret

00809e44 <_Balloc>:
  809e44:	20c01317 	ldw	r3,76(r4)
  809e48:	defffb04 	addi	sp,sp,-20
  809e4c:	dcc00315 	stw	r19,12(sp)
  809e50:	dc800215 	stw	r18,8(sp)
  809e54:	dfc00415 	stw	ra,16(sp)
  809e58:	2825883a 	mov	r18,r5
  809e5c:	dc400115 	stw	r17,4(sp)
  809e60:	dc000015 	stw	r16,0(sp)
  809e64:	2027883a 	mov	r19,r4
  809e68:	01800404 	movi	r6,16
  809e6c:	01400104 	movi	r5,4
  809e70:	18001726 	beq	r3,zero,809ed0 <_Balloc+0x8c>
  809e74:	01400044 	movi	r5,1
  809e78:	9485883a 	add	r2,r18,r18
  809e7c:	2ca2983a 	sll	r17,r5,r18
  809e80:	1085883a 	add	r2,r2,r2
  809e84:	10c7883a 	add	r3,r2,r3
  809e88:	1c000017 	ldw	r16,0(r3)
  809e8c:	8c4d883a 	add	r6,r17,r17
  809e90:	318d883a 	add	r6,r6,r6
  809e94:	9809883a 	mov	r4,r19
  809e98:	31800504 	addi	r6,r6,20
  809e9c:	80001226 	beq	r16,zero,809ee8 <_Balloc+0xa4>
  809ea0:	80800017 	ldw	r2,0(r16)
  809ea4:	18800015 	stw	r2,0(r3)
  809ea8:	80000415 	stw	zero,16(r16)
  809eac:	80000315 	stw	zero,12(r16)
  809eb0:	8005883a 	mov	r2,r16
  809eb4:	dfc00417 	ldw	ra,16(sp)
  809eb8:	dcc00317 	ldw	r19,12(sp)
  809ebc:	dc800217 	ldw	r18,8(sp)
  809ec0:	dc400117 	ldw	r17,4(sp)
  809ec4:	dc000017 	ldw	r16,0(sp)
  809ec8:	dec00504 	addi	sp,sp,20
  809ecc:	f800283a 	ret
  809ed0:	080b1dc0 	call	80b1dc <_calloc_r>
  809ed4:	1007883a 	mov	r3,r2
  809ed8:	0021883a 	mov	r16,zero
  809edc:	98801315 	stw	r2,76(r19)
  809ee0:	103fe41e 	bne	r2,zero,809e74 <_Balloc+0x30>
  809ee4:	003ff206 	br	809eb0 <_Balloc+0x6c>
  809ee8:	080b1dc0 	call	80b1dc <_calloc_r>
  809eec:	103ff026 	beq	r2,zero,809eb0 <_Balloc+0x6c>
  809ef0:	1021883a 	mov	r16,r2
  809ef4:	14800115 	stw	r18,4(r2)
  809ef8:	14400215 	stw	r17,8(r2)
  809efc:	003fea06 	br	809ea8 <_Balloc+0x64>

00809f00 <__d2b>:
  809f00:	defff504 	addi	sp,sp,-44
  809f04:	dcc00515 	stw	r19,20(sp)
  809f08:	04c00044 	movi	r19,1
  809f0c:	dc000215 	stw	r16,8(sp)
  809f10:	2821883a 	mov	r16,r5
  809f14:	980b883a 	mov	r5,r19
  809f18:	ddc00915 	stw	r23,36(sp)
  809f1c:	dd800815 	stw	r22,32(sp)
  809f20:	dd400715 	stw	r21,28(sp)
  809f24:	dd000615 	stw	r20,24(sp)
  809f28:	dc800415 	stw	r18,16(sp)
  809f2c:	dc400315 	stw	r17,12(sp)
  809f30:	dfc00a15 	stw	ra,40(sp)
  809f34:	3023883a 	mov	r17,r6
  809f38:	382d883a 	mov	r22,r7
  809f3c:	ddc00b17 	ldw	r23,44(sp)
  809f40:	0809e440 	call	809e44 <_Balloc>
  809f44:	1025883a 	mov	r18,r2
  809f48:	00a00034 	movhi	r2,32768
  809f4c:	10bfffc4 	addi	r2,r2,-1
  809f50:	8888703a 	and	r4,r17,r2
  809f54:	202ad53a 	srli	r21,r4,20
  809f58:	00800434 	movhi	r2,16
  809f5c:	10bfffc4 	addi	r2,r2,-1
  809f60:	8886703a 	and	r3,r17,r2
  809f64:	a829003a 	cmpeq	r20,r21,zero
  809f68:	800b883a 	mov	r5,r16
  809f6c:	d8c00115 	stw	r3,4(sp)
  809f70:	94000504 	addi	r16,r18,20
  809f74:	a000021e 	bne	r20,zero,809f80 <__d2b+0x80>
  809f78:	18c00434 	orhi	r3,r3,16
  809f7c:	d8c00115 	stw	r3,4(sp)
  809f80:	28002726 	beq	r5,zero,80a020 <__d2b+0x120>
  809f84:	d809883a 	mov	r4,sp
  809f88:	d9400015 	stw	r5,0(sp)
  809f8c:	080995c0 	call	80995c <__lo0bits>
  809f90:	100d883a 	mov	r6,r2
  809f94:	10003526 	beq	r2,zero,80a06c <__d2b+0x16c>
  809f98:	d8c00117 	ldw	r3,4(sp)
  809f9c:	00800804 	movi	r2,32
  809fa0:	1185c83a 	sub	r2,r2,r6
  809fa4:	d9000017 	ldw	r4,0(sp)
  809fa8:	1886983a 	sll	r3,r3,r2
  809fac:	1906b03a 	or	r3,r3,r4
  809fb0:	90c00515 	stw	r3,20(r18)
  809fb4:	d8c00117 	ldw	r3,4(sp)
  809fb8:	1986d83a 	srl	r3,r3,r6
  809fbc:	d8c00115 	stw	r3,4(sp)
  809fc0:	180b003a 	cmpeq	r5,r3,zero
  809fc4:	00800084 	movi	r2,2
  809fc8:	114bc83a 	sub	r5,r2,r5
  809fcc:	80c00115 	stw	r3,4(r16)
  809fd0:	91400415 	stw	r5,16(r18)
  809fd4:	a0001a1e 	bne	r20,zero,80a040 <__d2b+0x140>
  809fd8:	3545883a 	add	r2,r6,r21
  809fdc:	10bef344 	addi	r2,r2,-1075
  809fe0:	00c00d44 	movi	r3,53
  809fe4:	b0800015 	stw	r2,0(r22)
  809fe8:	1987c83a 	sub	r3,r3,r6
  809fec:	b8c00015 	stw	r3,0(r23)
  809ff0:	9005883a 	mov	r2,r18
  809ff4:	dfc00a17 	ldw	ra,40(sp)
  809ff8:	ddc00917 	ldw	r23,36(sp)
  809ffc:	dd800817 	ldw	r22,32(sp)
  80a000:	dd400717 	ldw	r21,28(sp)
  80a004:	dd000617 	ldw	r20,24(sp)
  80a008:	dcc00517 	ldw	r19,20(sp)
  80a00c:	dc800417 	ldw	r18,16(sp)
  80a010:	dc400317 	ldw	r17,12(sp)
  80a014:	dc000217 	ldw	r16,8(sp)
  80a018:	dec00b04 	addi	sp,sp,44
  80a01c:	f800283a 	ret
  80a020:	d9000104 	addi	r4,sp,4
  80a024:	080995c0 	call	80995c <__lo0bits>
  80a028:	11800804 	addi	r6,r2,32
  80a02c:	d8800117 	ldw	r2,4(sp)
  80a030:	94c00415 	stw	r19,16(r18)
  80a034:	980b883a 	mov	r5,r19
  80a038:	90800515 	stw	r2,20(r18)
  80a03c:	a03fe626 	beq	r20,zero,809fd8 <__d2b+0xd8>
  80a040:	2945883a 	add	r2,r5,r5
  80a044:	1085883a 	add	r2,r2,r2
  80a048:	1405883a 	add	r2,r2,r16
  80a04c:	113fff17 	ldw	r4,-4(r2)
  80a050:	30fef384 	addi	r3,r6,-1074
  80a054:	2820917a 	slli	r16,r5,5
  80a058:	b0c00015 	stw	r3,0(r22)
  80a05c:	08098ec0 	call	8098ec <__hi0bits>
  80a060:	80a1c83a 	sub	r16,r16,r2
  80a064:	bc000015 	stw	r16,0(r23)
  80a068:	003fe106 	br	809ff0 <__d2b+0xf0>
  80a06c:	d8800017 	ldw	r2,0(sp)
  80a070:	90800515 	stw	r2,20(r18)
  80a074:	d8c00117 	ldw	r3,4(sp)
  80a078:	003fd106 	br	809fc0 <__d2b+0xc0>

0080a07c <__mdiff>:
  80a07c:	defffb04 	addi	sp,sp,-20
  80a080:	dc000015 	stw	r16,0(sp)
  80a084:	2821883a 	mov	r16,r5
  80a088:	dc800215 	stw	r18,8(sp)
  80a08c:	300b883a 	mov	r5,r6
  80a090:	2025883a 	mov	r18,r4
  80a094:	8009883a 	mov	r4,r16
  80a098:	dc400115 	stw	r17,4(sp)
  80a09c:	dfc00415 	stw	ra,16(sp)
  80a0a0:	dcc00315 	stw	r19,12(sp)
  80a0a4:	3023883a 	mov	r17,r6
  80a0a8:	0809a200 	call	809a20 <__mcmp>
  80a0ac:	10004226 	beq	r2,zero,80a1b8 <__mdiff+0x13c>
  80a0b0:	10005016 	blt	r2,zero,80a1f4 <__mdiff+0x178>
  80a0b4:	0027883a 	mov	r19,zero
  80a0b8:	81400117 	ldw	r5,4(r16)
  80a0bc:	9009883a 	mov	r4,r18
  80a0c0:	0809e440 	call	809e44 <_Balloc>
  80a0c4:	1019883a 	mov	r12,r2
  80a0c8:	82800417 	ldw	r10,16(r16)
  80a0cc:	88800417 	ldw	r2,16(r17)
  80a0d0:	81800504 	addi	r6,r16,20
  80a0d4:	5287883a 	add	r3,r10,r10
  80a0d8:	1085883a 	add	r2,r2,r2
  80a0dc:	18c7883a 	add	r3,r3,r3
  80a0e0:	1085883a 	add	r2,r2,r2
  80a0e4:	8a000504 	addi	r8,r17,20
  80a0e8:	64c00315 	stw	r19,12(r12)
  80a0ec:	30db883a 	add	r13,r6,r3
  80a0f0:	4097883a 	add	r11,r8,r2
  80a0f4:	61c00504 	addi	r7,r12,20
  80a0f8:	0013883a 	mov	r9,zero
  80a0fc:	31000017 	ldw	r4,0(r6)
  80a100:	41400017 	ldw	r5,0(r8)
  80a104:	42000104 	addi	r8,r8,4
  80a108:	20bfffcc 	andi	r2,r4,65535
  80a10c:	28ffffcc 	andi	r3,r5,65535
  80a110:	10c5c83a 	sub	r2,r2,r3
  80a114:	1245883a 	add	r2,r2,r9
  80a118:	2008d43a 	srli	r4,r4,16
  80a11c:	280ad43a 	srli	r5,r5,16
  80a120:	1007d43a 	srai	r3,r2,16
  80a124:	3880000d 	sth	r2,0(r7)
  80a128:	2149c83a 	sub	r4,r4,r5
  80a12c:	20c9883a 	add	r4,r4,r3
  80a130:	3900008d 	sth	r4,2(r7)
  80a134:	31800104 	addi	r6,r6,4
  80a138:	39c00104 	addi	r7,r7,4
  80a13c:	2013d43a 	srai	r9,r4,16
  80a140:	42ffee36 	bltu	r8,r11,80a0fc <__mdiff+0x80>
  80a144:	33400c2e 	bgeu	r6,r13,80a178 <__mdiff+0xfc>
  80a148:	30800017 	ldw	r2,0(r6)
  80a14c:	31800104 	addi	r6,r6,4
  80a150:	10ffffcc 	andi	r3,r2,65535
  80a154:	1a47883a 	add	r3,r3,r9
  80a158:	1004d43a 	srli	r2,r2,16
  80a15c:	1809d43a 	srai	r4,r3,16
  80a160:	38c0000d 	sth	r3,0(r7)
  80a164:	1105883a 	add	r2,r2,r4
  80a168:	3880008d 	sth	r2,2(r7)
  80a16c:	1013d43a 	srai	r9,r2,16
  80a170:	39c00104 	addi	r7,r7,4
  80a174:	337ff436 	bltu	r6,r13,80a148 <__mdiff+0xcc>
  80a178:	38bfff17 	ldw	r2,-4(r7)
  80a17c:	38ffff04 	addi	r3,r7,-4
  80a180:	1000041e 	bne	r2,zero,80a194 <__mdiff+0x118>
  80a184:	18ffff04 	addi	r3,r3,-4
  80a188:	18800017 	ldw	r2,0(r3)
  80a18c:	52bfffc4 	addi	r10,r10,-1
  80a190:	103ffc26 	beq	r2,zero,80a184 <__mdiff+0x108>
  80a194:	6005883a 	mov	r2,r12
  80a198:	62800415 	stw	r10,16(r12)
  80a19c:	dfc00417 	ldw	ra,16(sp)
  80a1a0:	dcc00317 	ldw	r19,12(sp)
  80a1a4:	dc800217 	ldw	r18,8(sp)
  80a1a8:	dc400117 	ldw	r17,4(sp)
  80a1ac:	dc000017 	ldw	r16,0(sp)
  80a1b0:	dec00504 	addi	sp,sp,20
  80a1b4:	f800283a 	ret
  80a1b8:	9009883a 	mov	r4,r18
  80a1bc:	000b883a 	mov	r5,zero
  80a1c0:	0809e440 	call	809e44 <_Balloc>
  80a1c4:	1019883a 	mov	r12,r2
  80a1c8:	00800044 	movi	r2,1
  80a1cc:	60800415 	stw	r2,16(r12)
  80a1d0:	6005883a 	mov	r2,r12
  80a1d4:	60000515 	stw	zero,20(r12)
  80a1d8:	dfc00417 	ldw	ra,16(sp)
  80a1dc:	dcc00317 	ldw	r19,12(sp)
  80a1e0:	dc800217 	ldw	r18,8(sp)
  80a1e4:	dc400117 	ldw	r17,4(sp)
  80a1e8:	dc000017 	ldw	r16,0(sp)
  80a1ec:	dec00504 	addi	sp,sp,20
  80a1f0:	f800283a 	ret
  80a1f4:	880d883a 	mov	r6,r17
  80a1f8:	04c00044 	movi	r19,1
  80a1fc:	8023883a 	mov	r17,r16
  80a200:	3021883a 	mov	r16,r6
  80a204:	003fac06 	br	80a0b8 <__mdiff+0x3c>

0080a208 <__lshift>:
  80a208:	defff904 	addi	sp,sp,-28
  80a20c:	28800417 	ldw	r2,16(r5)
  80a210:	dc000015 	stw	r16,0(sp)
  80a214:	3021d17a 	srai	r16,r6,5
  80a218:	28c00217 	ldw	r3,8(r5)
  80a21c:	10800044 	addi	r2,r2,1
  80a220:	dc400115 	stw	r17,4(sp)
  80a224:	80a3883a 	add	r17,r16,r2
  80a228:	dd400515 	stw	r21,20(sp)
  80a22c:	dd000415 	stw	r20,16(sp)
  80a230:	dc800215 	stw	r18,8(sp)
  80a234:	dfc00615 	stw	ra,24(sp)
  80a238:	2825883a 	mov	r18,r5
  80a23c:	dcc00315 	stw	r19,12(sp)
  80a240:	3029883a 	mov	r20,r6
  80a244:	202b883a 	mov	r21,r4
  80a248:	29400117 	ldw	r5,4(r5)
  80a24c:	1c40030e 	bge	r3,r17,80a25c <__lshift+0x54>
  80a250:	18c7883a 	add	r3,r3,r3
  80a254:	29400044 	addi	r5,r5,1
  80a258:	1c7ffd16 	blt	r3,r17,80a250 <__lshift+0x48>
  80a25c:	a809883a 	mov	r4,r21
  80a260:	0809e440 	call	809e44 <_Balloc>
  80a264:	1027883a 	mov	r19,r2
  80a268:	11400504 	addi	r5,r2,20
  80a26c:	0400090e 	bge	zero,r16,80a294 <__lshift+0x8c>
  80a270:	2805883a 	mov	r2,r5
  80a274:	0007883a 	mov	r3,zero
  80a278:	18c00044 	addi	r3,r3,1
  80a27c:	10000015 	stw	zero,0(r2)
  80a280:	10800104 	addi	r2,r2,4
  80a284:	80fffc1e 	bne	r16,r3,80a278 <__lshift+0x70>
  80a288:	8405883a 	add	r2,r16,r16
  80a28c:	1085883a 	add	r2,r2,r2
  80a290:	288b883a 	add	r5,r5,r2
  80a294:	90800417 	ldw	r2,16(r18)
  80a298:	91000504 	addi	r4,r18,20
  80a29c:	a18007cc 	andi	r6,r20,31
  80a2a0:	1085883a 	add	r2,r2,r2
  80a2a4:	1085883a 	add	r2,r2,r2
  80a2a8:	208f883a 	add	r7,r4,r2
  80a2ac:	30001e26 	beq	r6,zero,80a328 <__lshift+0x120>
  80a2b0:	00800804 	movi	r2,32
  80a2b4:	1191c83a 	sub	r8,r2,r6
  80a2b8:	0007883a 	mov	r3,zero
  80a2bc:	20800017 	ldw	r2,0(r4)
  80a2c0:	1184983a 	sll	r2,r2,r6
  80a2c4:	1884b03a 	or	r2,r3,r2
  80a2c8:	28800015 	stw	r2,0(r5)
  80a2cc:	20c00017 	ldw	r3,0(r4)
  80a2d0:	21000104 	addi	r4,r4,4
  80a2d4:	29400104 	addi	r5,r5,4
  80a2d8:	1a06d83a 	srl	r3,r3,r8
  80a2dc:	21fff736 	bltu	r4,r7,80a2bc <__lshift+0xb4>
  80a2e0:	28c00015 	stw	r3,0(r5)
  80a2e4:	18000126 	beq	r3,zero,80a2ec <__lshift+0xe4>
  80a2e8:	8c400044 	addi	r17,r17,1
  80a2ec:	88bfffc4 	addi	r2,r17,-1
  80a2f0:	98800415 	stw	r2,16(r19)
  80a2f4:	a809883a 	mov	r4,r21
  80a2f8:	900b883a 	mov	r5,r18
  80a2fc:	08098c40 	call	8098c4 <_Bfree>
  80a300:	9805883a 	mov	r2,r19
  80a304:	dfc00617 	ldw	ra,24(sp)
  80a308:	dd400517 	ldw	r21,20(sp)
  80a30c:	dd000417 	ldw	r20,16(sp)
  80a310:	dcc00317 	ldw	r19,12(sp)
  80a314:	dc800217 	ldw	r18,8(sp)
  80a318:	dc400117 	ldw	r17,4(sp)
  80a31c:	dc000017 	ldw	r16,0(sp)
  80a320:	dec00704 	addi	sp,sp,28
  80a324:	f800283a 	ret
  80a328:	20800017 	ldw	r2,0(r4)
  80a32c:	21000104 	addi	r4,r4,4
  80a330:	28800015 	stw	r2,0(r5)
  80a334:	29400104 	addi	r5,r5,4
  80a338:	21ffec2e 	bgeu	r4,r7,80a2ec <__lshift+0xe4>
  80a33c:	20800017 	ldw	r2,0(r4)
  80a340:	21000104 	addi	r4,r4,4
  80a344:	28800015 	stw	r2,0(r5)
  80a348:	29400104 	addi	r5,r5,4
  80a34c:	21fff636 	bltu	r4,r7,80a328 <__lshift+0x120>
  80a350:	003fe606 	br	80a2ec <__lshift+0xe4>

0080a354 <__multiply>:
  80a354:	defff904 	addi	sp,sp,-28
  80a358:	dcc00315 	stw	r19,12(sp)
  80a35c:	dc800215 	stw	r18,8(sp)
  80a360:	2cc00417 	ldw	r19,16(r5)
  80a364:	34800417 	ldw	r18,16(r6)
  80a368:	dd000415 	stw	r20,16(sp)
  80a36c:	dc400115 	stw	r17,4(sp)
  80a370:	dfc00615 	stw	ra,24(sp)
  80a374:	dd400515 	stw	r21,20(sp)
  80a378:	dc000015 	stw	r16,0(sp)
  80a37c:	2823883a 	mov	r17,r5
  80a380:	3029883a 	mov	r20,r6
  80a384:	9c80040e 	bge	r19,r18,80a398 <__multiply+0x44>
  80a388:	9027883a 	mov	r19,r18
  80a38c:	2c800417 	ldw	r18,16(r5)
  80a390:	2829883a 	mov	r20,r5
  80a394:	3023883a 	mov	r17,r6
  80a398:	88800217 	ldw	r2,8(r17)
  80a39c:	9ca1883a 	add	r16,r19,r18
  80a3a0:	89400117 	ldw	r5,4(r17)
  80a3a4:	1400010e 	bge	r2,r16,80a3ac <__multiply+0x58>
  80a3a8:	29400044 	addi	r5,r5,1
  80a3ac:	0809e440 	call	809e44 <_Balloc>
  80a3b0:	102b883a 	mov	r21,r2
  80a3b4:	8405883a 	add	r2,r16,r16
  80a3b8:	1085883a 	add	r2,r2,r2
  80a3bc:	a9000504 	addi	r4,r21,20
  80a3c0:	209d883a 	add	r14,r4,r2
  80a3c4:	2380042e 	bgeu	r4,r14,80a3d8 <__multiply+0x84>
  80a3c8:	2005883a 	mov	r2,r4
  80a3cc:	10000015 	stw	zero,0(r2)
  80a3d0:	10800104 	addi	r2,r2,4
  80a3d4:	13bffd36 	bltu	r2,r14,80a3cc <__multiply+0x78>
  80a3d8:	9485883a 	add	r2,r18,r18
  80a3dc:	9cc7883a 	add	r3,r19,r19
  80a3e0:	a1800504 	addi	r6,r20,20
  80a3e4:	1085883a 	add	r2,r2,r2
  80a3e8:	8b400504 	addi	r13,r17,20
  80a3ec:	18c7883a 	add	r3,r3,r3
  80a3f0:	309f883a 	add	r15,r6,r2
  80a3f4:	68d7883a 	add	r11,r13,r3
  80a3f8:	33c03b2e 	bgeu	r6,r15,80a4e8 <__multiply+0x194>
  80a3fc:	2019883a 	mov	r12,r4
  80a400:	30800017 	ldw	r2,0(r6)
  80a404:	127fffcc 	andi	r9,r2,65535
  80a408:	48001826 	beq	r9,zero,80a46c <__multiply+0x118>
  80a40c:	6811883a 	mov	r8,r13
  80a410:	600f883a 	mov	r7,r12
  80a414:	0015883a 	mov	r10,zero
  80a418:	40c00017 	ldw	r3,0(r8)
  80a41c:	39400017 	ldw	r5,0(r7)
  80a420:	42000104 	addi	r8,r8,4
  80a424:	193fffcc 	andi	r4,r3,65535
  80a428:	4909383a 	mul	r4,r9,r4
  80a42c:	1806d43a 	srli	r3,r3,16
  80a430:	28bfffcc 	andi	r2,r5,65535
  80a434:	5085883a 	add	r2,r10,r2
  80a438:	2089883a 	add	r4,r4,r2
  80a43c:	48c7383a 	mul	r3,r9,r3
  80a440:	280ad43a 	srli	r5,r5,16
  80a444:	2004d43a 	srli	r2,r4,16
  80a448:	3900000d 	sth	r4,0(r7)
  80a44c:	1947883a 	add	r3,r3,r5
  80a450:	10c5883a 	add	r2,r2,r3
  80a454:	3880008d 	sth	r2,2(r7)
  80a458:	1014d43a 	srli	r10,r2,16
  80a45c:	39c00104 	addi	r7,r7,4
  80a460:	42ffed36 	bltu	r8,r11,80a418 <__multiply+0xc4>
  80a464:	3a800015 	stw	r10,0(r7)
  80a468:	30800017 	ldw	r2,0(r6)
  80a46c:	1012d43a 	srli	r9,r2,16
  80a470:	48001926 	beq	r9,zero,80a4d8 <__multiply+0x184>
  80a474:	60800017 	ldw	r2,0(r12)
  80a478:	6811883a 	mov	r8,r13
  80a47c:	600f883a 	mov	r7,r12
  80a480:	0015883a 	mov	r10,zero
  80a484:	100b883a 	mov	r5,r2
  80a488:	41000017 	ldw	r4,0(r8)
  80a48c:	2806d43a 	srli	r3,r5,16
  80a490:	3880000d 	sth	r2,0(r7)
  80a494:	20bfffcc 	andi	r2,r4,65535
  80a498:	4885383a 	mul	r2,r9,r2
  80a49c:	50c7883a 	add	r3,r10,r3
  80a4a0:	2008d43a 	srli	r4,r4,16
  80a4a4:	10c5883a 	add	r2,r2,r3
  80a4a8:	3880008d 	sth	r2,2(r7)
  80a4ac:	39c00104 	addi	r7,r7,4
  80a4b0:	39400017 	ldw	r5,0(r7)
  80a4b4:	4909383a 	mul	r4,r9,r4
  80a4b8:	1004d43a 	srli	r2,r2,16
  80a4bc:	28ffffcc 	andi	r3,r5,65535
  80a4c0:	20c9883a 	add	r4,r4,r3
  80a4c4:	1105883a 	add	r2,r2,r4
  80a4c8:	42000104 	addi	r8,r8,4
  80a4cc:	1014d43a 	srli	r10,r2,16
  80a4d0:	42ffed36 	bltu	r8,r11,80a488 <__multiply+0x134>
  80a4d4:	38800015 	stw	r2,0(r7)
  80a4d8:	31800104 	addi	r6,r6,4
  80a4dc:	33c0022e 	bgeu	r6,r15,80a4e8 <__multiply+0x194>
  80a4e0:	63000104 	addi	r12,r12,4
  80a4e4:	003fc606 	br	80a400 <__multiply+0xac>
  80a4e8:	0400090e 	bge	zero,r16,80a510 <__multiply+0x1bc>
  80a4ec:	70bfff17 	ldw	r2,-4(r14)
  80a4f0:	70ffff04 	addi	r3,r14,-4
  80a4f4:	10000326 	beq	r2,zero,80a504 <__multiply+0x1b0>
  80a4f8:	00000506 	br	80a510 <__multiply+0x1bc>
  80a4fc:	18800017 	ldw	r2,0(r3)
  80a500:	1000031e 	bne	r2,zero,80a510 <__multiply+0x1bc>
  80a504:	843fffc4 	addi	r16,r16,-1
  80a508:	18ffff04 	addi	r3,r3,-4
  80a50c:	803ffb1e 	bne	r16,zero,80a4fc <__multiply+0x1a8>
  80a510:	a805883a 	mov	r2,r21
  80a514:	ac000415 	stw	r16,16(r21)
  80a518:	dfc00617 	ldw	ra,24(sp)
  80a51c:	dd400517 	ldw	r21,20(sp)
  80a520:	dd000417 	ldw	r20,16(sp)
  80a524:	dcc00317 	ldw	r19,12(sp)
  80a528:	dc800217 	ldw	r18,8(sp)
  80a52c:	dc400117 	ldw	r17,4(sp)
  80a530:	dc000017 	ldw	r16,0(sp)
  80a534:	dec00704 	addi	sp,sp,28
  80a538:	f800283a 	ret

0080a53c <__i2b>:
  80a53c:	defffd04 	addi	sp,sp,-12
  80a540:	dc000015 	stw	r16,0(sp)
  80a544:	04000044 	movi	r16,1
  80a548:	dc800115 	stw	r18,4(sp)
  80a54c:	2825883a 	mov	r18,r5
  80a550:	800b883a 	mov	r5,r16
  80a554:	dfc00215 	stw	ra,8(sp)
  80a558:	0809e440 	call	809e44 <_Balloc>
  80a55c:	14000415 	stw	r16,16(r2)
  80a560:	14800515 	stw	r18,20(r2)
  80a564:	dfc00217 	ldw	ra,8(sp)
  80a568:	dc800117 	ldw	r18,4(sp)
  80a56c:	dc000017 	ldw	r16,0(sp)
  80a570:	dec00304 	addi	sp,sp,12
  80a574:	f800283a 	ret

0080a578 <__multadd>:
  80a578:	defffa04 	addi	sp,sp,-24
  80a57c:	dc800215 	stw	r18,8(sp)
  80a580:	2c800417 	ldw	r18,16(r5)
  80a584:	dd000415 	stw	r20,16(sp)
  80a588:	dcc00315 	stw	r19,12(sp)
  80a58c:	dc000015 	stw	r16,0(sp)
  80a590:	dfc00515 	stw	ra,20(sp)
  80a594:	3821883a 	mov	r16,r7
  80a598:	dc400115 	stw	r17,4(sp)
  80a59c:	2827883a 	mov	r19,r5
  80a5a0:	2029883a 	mov	r20,r4
  80a5a4:	2a000504 	addi	r8,r5,20
  80a5a8:	000f883a 	mov	r7,zero
  80a5ac:	40800017 	ldw	r2,0(r8)
  80a5b0:	39c00044 	addi	r7,r7,1
  80a5b4:	10ffffcc 	andi	r3,r2,65535
  80a5b8:	1987383a 	mul	r3,r3,r6
  80a5bc:	1004d43a 	srli	r2,r2,16
  80a5c0:	1c07883a 	add	r3,r3,r16
  80a5c4:	180ad43a 	srli	r5,r3,16
  80a5c8:	1185383a 	mul	r2,r2,r6
  80a5cc:	18ffffcc 	andi	r3,r3,65535
  80a5d0:	1145883a 	add	r2,r2,r5
  80a5d4:	1008943a 	slli	r4,r2,16
  80a5d8:	1020d43a 	srli	r16,r2,16
  80a5dc:	20c9883a 	add	r4,r4,r3
  80a5e0:	41000015 	stw	r4,0(r8)
  80a5e4:	42000104 	addi	r8,r8,4
  80a5e8:	3cbff016 	blt	r7,r18,80a5ac <__multadd+0x34>
  80a5ec:	80000826 	beq	r16,zero,80a610 <__multadd+0x98>
  80a5f0:	98800217 	ldw	r2,8(r19)
  80a5f4:	90800f0e 	bge	r18,r2,80a634 <__multadd+0xbc>
  80a5f8:	9485883a 	add	r2,r18,r18
  80a5fc:	1085883a 	add	r2,r2,r2
  80a600:	14c5883a 	add	r2,r2,r19
  80a604:	90c00044 	addi	r3,r18,1
  80a608:	14000515 	stw	r16,20(r2)
  80a60c:	98c00415 	stw	r3,16(r19)
  80a610:	9805883a 	mov	r2,r19
  80a614:	dfc00517 	ldw	ra,20(sp)
  80a618:	dd000417 	ldw	r20,16(sp)
  80a61c:	dcc00317 	ldw	r19,12(sp)
  80a620:	dc800217 	ldw	r18,8(sp)
  80a624:	dc400117 	ldw	r17,4(sp)
  80a628:	dc000017 	ldw	r16,0(sp)
  80a62c:	dec00604 	addi	sp,sp,24
  80a630:	f800283a 	ret
  80a634:	99400117 	ldw	r5,4(r19)
  80a638:	a009883a 	mov	r4,r20
  80a63c:	29400044 	addi	r5,r5,1
  80a640:	0809e440 	call	809e44 <_Balloc>
  80a644:	99800417 	ldw	r6,16(r19)
  80a648:	99400304 	addi	r5,r19,12
  80a64c:	11000304 	addi	r4,r2,12
  80a650:	318d883a 	add	r6,r6,r6
  80a654:	318d883a 	add	r6,r6,r6
  80a658:	31800204 	addi	r6,r6,8
  80a65c:	1023883a 	mov	r17,r2
  80a660:	08096ac0 	call	8096ac <memcpy>
  80a664:	980b883a 	mov	r5,r19
  80a668:	a009883a 	mov	r4,r20
  80a66c:	08098c40 	call	8098c4 <_Bfree>
  80a670:	8827883a 	mov	r19,r17
  80a674:	003fe006 	br	80a5f8 <__multadd+0x80>

0080a678 <__pow5mult>:
  80a678:	defffa04 	addi	sp,sp,-24
  80a67c:	308000cc 	andi	r2,r6,3
  80a680:	dd000415 	stw	r20,16(sp)
  80a684:	dcc00315 	stw	r19,12(sp)
  80a688:	dc000015 	stw	r16,0(sp)
  80a68c:	dfc00515 	stw	ra,20(sp)
  80a690:	dc800215 	stw	r18,8(sp)
  80a694:	dc400115 	stw	r17,4(sp)
  80a698:	3021883a 	mov	r16,r6
  80a69c:	2027883a 	mov	r19,r4
  80a6a0:	2829883a 	mov	r20,r5
  80a6a4:	10002b1e 	bne	r2,zero,80a754 <__pow5mult+0xdc>
  80a6a8:	8025d0ba 	srai	r18,r16,2
  80a6ac:	90001b26 	beq	r18,zero,80a71c <__pow5mult+0xa4>
  80a6b0:	9c001217 	ldw	r16,72(r19)
  80a6b4:	8000081e 	bne	r16,zero,80a6d8 <__pow5mult+0x60>
  80a6b8:	00003006 	br	80a77c <__pow5mult+0x104>
  80a6bc:	800b883a 	mov	r5,r16
  80a6c0:	800d883a 	mov	r6,r16
  80a6c4:	9809883a 	mov	r4,r19
  80a6c8:	90001426 	beq	r18,zero,80a71c <__pow5mult+0xa4>
  80a6cc:	80800017 	ldw	r2,0(r16)
  80a6d0:	10001b26 	beq	r2,zero,80a740 <__pow5mult+0xc8>
  80a6d4:	1021883a 	mov	r16,r2
  80a6d8:	9080004c 	andi	r2,r18,1
  80a6dc:	1005003a 	cmpeq	r2,r2,zero
  80a6e0:	9025d07a 	srai	r18,r18,1
  80a6e4:	800d883a 	mov	r6,r16
  80a6e8:	9809883a 	mov	r4,r19
  80a6ec:	a00b883a 	mov	r5,r20
  80a6f0:	103ff21e 	bne	r2,zero,80a6bc <__pow5mult+0x44>
  80a6f4:	080a3540 	call	80a354 <__multiply>
  80a6f8:	a00b883a 	mov	r5,r20
  80a6fc:	9809883a 	mov	r4,r19
  80a700:	1023883a 	mov	r17,r2
  80a704:	08098c40 	call	8098c4 <_Bfree>
  80a708:	8829883a 	mov	r20,r17
  80a70c:	800b883a 	mov	r5,r16
  80a710:	800d883a 	mov	r6,r16
  80a714:	9809883a 	mov	r4,r19
  80a718:	903fec1e 	bne	r18,zero,80a6cc <__pow5mult+0x54>
  80a71c:	a005883a 	mov	r2,r20
  80a720:	dfc00517 	ldw	ra,20(sp)
  80a724:	dd000417 	ldw	r20,16(sp)
  80a728:	dcc00317 	ldw	r19,12(sp)
  80a72c:	dc800217 	ldw	r18,8(sp)
  80a730:	dc400117 	ldw	r17,4(sp)
  80a734:	dc000017 	ldw	r16,0(sp)
  80a738:	dec00604 	addi	sp,sp,24
  80a73c:	f800283a 	ret
  80a740:	080a3540 	call	80a354 <__multiply>
  80a744:	80800015 	stw	r2,0(r16)
  80a748:	1021883a 	mov	r16,r2
  80a74c:	10000015 	stw	zero,0(r2)
  80a750:	003fe106 	br	80a6d8 <__pow5mult+0x60>
  80a754:	1085883a 	add	r2,r2,r2
  80a758:	00c020b4 	movhi	r3,130
  80a75c:	18f54e04 	addi	r3,r3,-10952
  80a760:	1085883a 	add	r2,r2,r2
  80a764:	10c5883a 	add	r2,r2,r3
  80a768:	11bfff17 	ldw	r6,-4(r2)
  80a76c:	000f883a 	mov	r7,zero
  80a770:	080a5780 	call	80a578 <__multadd>
  80a774:	1029883a 	mov	r20,r2
  80a778:	003fcb06 	br	80a6a8 <__pow5mult+0x30>
  80a77c:	9809883a 	mov	r4,r19
  80a780:	01409c44 	movi	r5,625
  80a784:	080a53c0 	call	80a53c <__i2b>
  80a788:	98801215 	stw	r2,72(r19)
  80a78c:	1021883a 	mov	r16,r2
  80a790:	10000015 	stw	zero,0(r2)
  80a794:	003fd006 	br	80a6d8 <__pow5mult+0x60>

0080a798 <__s2b>:
  80a798:	defff904 	addi	sp,sp,-28
  80a79c:	dcc00315 	stw	r19,12(sp)
  80a7a0:	dc800215 	stw	r18,8(sp)
  80a7a4:	2827883a 	mov	r19,r5
  80a7a8:	2025883a 	mov	r18,r4
  80a7ac:	01400244 	movi	r5,9
  80a7b0:	39000204 	addi	r4,r7,8
  80a7b4:	dd000415 	stw	r20,16(sp)
  80a7b8:	dc400115 	stw	r17,4(sp)
  80a7bc:	dfc00615 	stw	ra,24(sp)
  80a7c0:	dd400515 	stw	r21,20(sp)
  80a7c4:	dc000015 	stw	r16,0(sp)
  80a7c8:	3829883a 	mov	r20,r7
  80a7cc:	3023883a 	mov	r17,r6
  80a7d0:	080c3980 	call	80c398 <__divsi3>
  80a7d4:	00c00044 	movi	r3,1
  80a7d8:	1880350e 	bge	r3,r2,80a8b0 <__s2b+0x118>
  80a7dc:	000b883a 	mov	r5,zero
  80a7e0:	18c7883a 	add	r3,r3,r3
  80a7e4:	29400044 	addi	r5,r5,1
  80a7e8:	18bffd16 	blt	r3,r2,80a7e0 <__s2b+0x48>
  80a7ec:	9009883a 	mov	r4,r18
  80a7f0:	0809e440 	call	809e44 <_Balloc>
  80a7f4:	1011883a 	mov	r8,r2
  80a7f8:	d8800717 	ldw	r2,28(sp)
  80a7fc:	00c00044 	movi	r3,1
  80a800:	01800244 	movi	r6,9
  80a804:	40800515 	stw	r2,20(r8)
  80a808:	40c00415 	stw	r3,16(r8)
  80a80c:	3440260e 	bge	r6,r17,80a8a8 <__s2b+0x110>
  80a810:	3021883a 	mov	r16,r6
  80a814:	99ab883a 	add	r21,r19,r6
  80a818:	9c05883a 	add	r2,r19,r16
  80a81c:	11c00007 	ldb	r7,0(r2)
  80a820:	400b883a 	mov	r5,r8
  80a824:	9009883a 	mov	r4,r18
  80a828:	39fff404 	addi	r7,r7,-48
  80a82c:	01800284 	movi	r6,10
  80a830:	080a5780 	call	80a578 <__multadd>
  80a834:	84000044 	addi	r16,r16,1
  80a838:	1011883a 	mov	r8,r2
  80a83c:	8c3ff61e 	bne	r17,r16,80a818 <__s2b+0x80>
  80a840:	ac45883a 	add	r2,r21,r17
  80a844:	117ffe04 	addi	r5,r2,-8
  80a848:	880d883a 	mov	r6,r17
  80a84c:	35000c0e 	bge	r6,r20,80a880 <__s2b+0xe8>
  80a850:	a185c83a 	sub	r2,r20,r6
  80a854:	2821883a 	mov	r16,r5
  80a858:	28a3883a 	add	r17,r5,r2
  80a85c:	81c00007 	ldb	r7,0(r16)
  80a860:	400b883a 	mov	r5,r8
  80a864:	9009883a 	mov	r4,r18
  80a868:	39fff404 	addi	r7,r7,-48
  80a86c:	01800284 	movi	r6,10
  80a870:	080a5780 	call	80a578 <__multadd>
  80a874:	84000044 	addi	r16,r16,1
  80a878:	1011883a 	mov	r8,r2
  80a87c:	847ff71e 	bne	r16,r17,80a85c <__s2b+0xc4>
  80a880:	4005883a 	mov	r2,r8
  80a884:	dfc00617 	ldw	ra,24(sp)
  80a888:	dd400517 	ldw	r21,20(sp)
  80a88c:	dd000417 	ldw	r20,16(sp)
  80a890:	dcc00317 	ldw	r19,12(sp)
  80a894:	dc800217 	ldw	r18,8(sp)
  80a898:	dc400117 	ldw	r17,4(sp)
  80a89c:	dc000017 	ldw	r16,0(sp)
  80a8a0:	dec00704 	addi	sp,sp,28
  80a8a4:	f800283a 	ret
  80a8a8:	99400284 	addi	r5,r19,10
  80a8ac:	003fe706 	br	80a84c <__s2b+0xb4>
  80a8b0:	000b883a 	mov	r5,zero
  80a8b4:	003fcd06 	br	80a7ec <__s2b+0x54>

0080a8b8 <_realloc_r>:
  80a8b8:	defff404 	addi	sp,sp,-48
  80a8bc:	dd800815 	stw	r22,32(sp)
  80a8c0:	dc800415 	stw	r18,16(sp)
  80a8c4:	dc400315 	stw	r17,12(sp)
  80a8c8:	dfc00b15 	stw	ra,44(sp)
  80a8cc:	df000a15 	stw	fp,40(sp)
  80a8d0:	ddc00915 	stw	r23,36(sp)
  80a8d4:	dd400715 	stw	r21,28(sp)
  80a8d8:	dd000615 	stw	r20,24(sp)
  80a8dc:	dcc00515 	stw	r19,20(sp)
  80a8e0:	dc000215 	stw	r16,8(sp)
  80a8e4:	2825883a 	mov	r18,r5
  80a8e8:	3023883a 	mov	r17,r6
  80a8ec:	202d883a 	mov	r22,r4
  80a8f0:	2800c926 	beq	r5,zero,80ac18 <_realloc_r+0x360>
  80a8f4:	080d2180 	call	80d218 <__malloc_lock>
  80a8f8:	943ffe04 	addi	r16,r18,-8
  80a8fc:	88c002c4 	addi	r3,r17,11
  80a900:	00800584 	movi	r2,22
  80a904:	82000117 	ldw	r8,4(r16)
  80a908:	10c01b2e 	bgeu	r2,r3,80a978 <_realloc_r+0xc0>
  80a90c:	00bffe04 	movi	r2,-8
  80a910:	188e703a 	and	r7,r3,r2
  80a914:	3839883a 	mov	fp,r7
  80a918:	38001a16 	blt	r7,zero,80a984 <_realloc_r+0xcc>
  80a91c:	e4401936 	bltu	fp,r17,80a984 <_realloc_r+0xcc>
  80a920:	013fff04 	movi	r4,-4
  80a924:	4126703a 	and	r19,r8,r4
  80a928:	99c02616 	blt	r19,r7,80a9c4 <_realloc_r+0x10c>
  80a92c:	802b883a 	mov	r21,r16
  80a930:	9829883a 	mov	r20,r19
  80a934:	84000204 	addi	r16,r16,8
  80a938:	a80f883a 	mov	r7,r21
  80a93c:	a70dc83a 	sub	r6,r20,fp
  80a940:	008003c4 	movi	r2,15
  80a944:	1180c136 	bltu	r2,r6,80ac4c <_realloc_r+0x394>
  80a948:	38800117 	ldw	r2,4(r7)
  80a94c:	a549883a 	add	r4,r20,r21
  80a950:	1080004c 	andi	r2,r2,1
  80a954:	a084b03a 	or	r2,r20,r2
  80a958:	38800115 	stw	r2,4(r7)
  80a95c:	20c00117 	ldw	r3,4(r4)
  80a960:	18c00054 	ori	r3,r3,1
  80a964:	20c00115 	stw	r3,4(r4)
  80a968:	b009883a 	mov	r4,r22
  80a96c:	080d3200 	call	80d320 <__malloc_unlock>
  80a970:	8023883a 	mov	r17,r16
  80a974:	00000606 	br	80a990 <_realloc_r+0xd8>
  80a978:	01c00404 	movi	r7,16
  80a97c:	3839883a 	mov	fp,r7
  80a980:	e47fe72e 	bgeu	fp,r17,80a920 <_realloc_r+0x68>
  80a984:	00800304 	movi	r2,12
  80a988:	0023883a 	mov	r17,zero
  80a98c:	b0800015 	stw	r2,0(r22)
  80a990:	8805883a 	mov	r2,r17
  80a994:	dfc00b17 	ldw	ra,44(sp)
  80a998:	df000a17 	ldw	fp,40(sp)
  80a99c:	ddc00917 	ldw	r23,36(sp)
  80a9a0:	dd800817 	ldw	r22,32(sp)
  80a9a4:	dd400717 	ldw	r21,28(sp)
  80a9a8:	dd000617 	ldw	r20,24(sp)
  80a9ac:	dcc00517 	ldw	r19,20(sp)
  80a9b0:	dc800417 	ldw	r18,16(sp)
  80a9b4:	dc400317 	ldw	r17,12(sp)
  80a9b8:	dc000217 	ldw	r16,8(sp)
  80a9bc:	dec00c04 	addi	sp,sp,48
  80a9c0:	f800283a 	ret
  80a9c4:	008020b4 	movhi	r2,130
  80a9c8:	10b6bf04 	addi	r2,r2,-9476
  80a9cc:	12400217 	ldw	r9,8(r2)
  80a9d0:	84cd883a 	add	r6,r16,r19
  80a9d4:	802b883a 	mov	r21,r16
  80a9d8:	3240b926 	beq	r6,r9,80acc0 <_realloc_r+0x408>
  80a9dc:	31400117 	ldw	r5,4(r6)
  80a9e0:	00bfff84 	movi	r2,-2
  80a9e4:	2884703a 	and	r2,r5,r2
  80a9e8:	1185883a 	add	r2,r2,r6
  80a9ec:	10c00117 	ldw	r3,4(r2)
  80a9f0:	18c0004c 	andi	r3,r3,1
  80a9f4:	1807003a 	cmpeq	r3,r3,zero
  80a9f8:	1800a326 	beq	r3,zero,80ac88 <_realloc_r+0x3d0>
  80a9fc:	2908703a 	and	r4,r5,r4
  80aa00:	9929883a 	add	r20,r19,r4
  80aa04:	a1c0a30e 	bge	r20,r7,80ac94 <_realloc_r+0x3dc>
  80aa08:	4080004c 	andi	r2,r8,1
  80aa0c:	1000551e 	bne	r2,zero,80ab64 <_realloc_r+0x2ac>
  80aa10:	80800017 	ldw	r2,0(r16)
  80aa14:	80afc83a 	sub	r23,r16,r2
  80aa18:	b8c00117 	ldw	r3,4(r23)
  80aa1c:	00bfff04 	movi	r2,-4
  80aa20:	1884703a 	and	r2,r3,r2
  80aa24:	30002e26 	beq	r6,zero,80aae0 <_realloc_r+0x228>
  80aa28:	3240b926 	beq	r6,r9,80ad10 <_realloc_r+0x458>
  80aa2c:	98a9883a 	add	r20,r19,r2
  80aa30:	2509883a 	add	r4,r4,r20
  80aa34:	d9000015 	stw	r4,0(sp)
  80aa38:	21c02a16 	blt	r4,r7,80aae4 <_realloc_r+0x22c>
  80aa3c:	30800317 	ldw	r2,12(r6)
  80aa40:	30c00217 	ldw	r3,8(r6)
  80aa44:	01400904 	movi	r5,36
  80aa48:	99bfff04 	addi	r6,r19,-4
  80aa4c:	18800315 	stw	r2,12(r3)
  80aa50:	10c00215 	stw	r3,8(r2)
  80aa54:	b9000317 	ldw	r4,12(r23)
  80aa58:	b8800217 	ldw	r2,8(r23)
  80aa5c:	b82b883a 	mov	r21,r23
  80aa60:	bc000204 	addi	r16,r23,8
  80aa64:	20800215 	stw	r2,8(r4)
  80aa68:	11000315 	stw	r4,12(r2)
  80aa6c:	2980e436 	bltu	r5,r6,80ae00 <_realloc_r+0x548>
  80aa70:	008004c4 	movi	r2,19
  80aa74:	9009883a 	mov	r4,r18
  80aa78:	8011883a 	mov	r8,r16
  80aa7c:	11800f2e 	bgeu	r2,r6,80aabc <_realloc_r+0x204>
  80aa80:	90800017 	ldw	r2,0(r18)
  80aa84:	ba000404 	addi	r8,r23,16
  80aa88:	91000204 	addi	r4,r18,8
  80aa8c:	b8800215 	stw	r2,8(r23)
  80aa90:	90c00117 	ldw	r3,4(r18)
  80aa94:	008006c4 	movi	r2,27
  80aa98:	b8c00315 	stw	r3,12(r23)
  80aa9c:	1180072e 	bgeu	r2,r6,80aabc <_realloc_r+0x204>
  80aaa0:	90c00217 	ldw	r3,8(r18)
  80aaa4:	ba000604 	addi	r8,r23,24
  80aaa8:	91000404 	addi	r4,r18,16
  80aaac:	b8c00415 	stw	r3,16(r23)
  80aab0:	90800317 	ldw	r2,12(r18)
  80aab4:	b8800515 	stw	r2,20(r23)
  80aab8:	3140e726 	beq	r6,r5,80ae58 <_realloc_r+0x5a0>
  80aabc:	20800017 	ldw	r2,0(r4)
  80aac0:	dd000017 	ldw	r20,0(sp)
  80aac4:	b80f883a 	mov	r7,r23
  80aac8:	40800015 	stw	r2,0(r8)
  80aacc:	20c00117 	ldw	r3,4(r4)
  80aad0:	40c00115 	stw	r3,4(r8)
  80aad4:	20800217 	ldw	r2,8(r4)
  80aad8:	40800215 	stw	r2,8(r8)
  80aadc:	003f9706 	br	80a93c <_realloc_r+0x84>
  80aae0:	98a9883a 	add	r20,r19,r2
  80aae4:	a1c01f16 	blt	r20,r7,80ab64 <_realloc_r+0x2ac>
  80aae8:	b8c00317 	ldw	r3,12(r23)
  80aaec:	b8800217 	ldw	r2,8(r23)
  80aaf0:	99bfff04 	addi	r6,r19,-4
  80aaf4:	01400904 	movi	r5,36
  80aaf8:	b82b883a 	mov	r21,r23
  80aafc:	18800215 	stw	r2,8(r3)
  80ab00:	10c00315 	stw	r3,12(r2)
  80ab04:	bc000204 	addi	r16,r23,8
  80ab08:	2980c336 	bltu	r5,r6,80ae18 <_realloc_r+0x560>
  80ab0c:	008004c4 	movi	r2,19
  80ab10:	9009883a 	mov	r4,r18
  80ab14:	8011883a 	mov	r8,r16
  80ab18:	11800f2e 	bgeu	r2,r6,80ab58 <_realloc_r+0x2a0>
  80ab1c:	90800017 	ldw	r2,0(r18)
  80ab20:	ba000404 	addi	r8,r23,16
  80ab24:	91000204 	addi	r4,r18,8
  80ab28:	b8800215 	stw	r2,8(r23)
  80ab2c:	90c00117 	ldw	r3,4(r18)
  80ab30:	008006c4 	movi	r2,27
  80ab34:	b8c00315 	stw	r3,12(r23)
  80ab38:	1180072e 	bgeu	r2,r6,80ab58 <_realloc_r+0x2a0>
  80ab3c:	90c00217 	ldw	r3,8(r18)
  80ab40:	ba000604 	addi	r8,r23,24
  80ab44:	91000404 	addi	r4,r18,16
  80ab48:	b8c00415 	stw	r3,16(r23)
  80ab4c:	90800317 	ldw	r2,12(r18)
  80ab50:	b8800515 	stw	r2,20(r23)
  80ab54:	3140c726 	beq	r6,r5,80ae74 <_realloc_r+0x5bc>
  80ab58:	20800017 	ldw	r2,0(r4)
  80ab5c:	b80f883a 	mov	r7,r23
  80ab60:	003fd906 	br	80aac8 <_realloc_r+0x210>
  80ab64:	880b883a 	mov	r5,r17
  80ab68:	b009883a 	mov	r4,r22
  80ab6c:	0808e880 	call	808e88 <_malloc_r>
  80ab70:	1023883a 	mov	r17,r2
  80ab74:	10002526 	beq	r2,zero,80ac0c <_realloc_r+0x354>
  80ab78:	80800117 	ldw	r2,4(r16)
  80ab7c:	00ffff84 	movi	r3,-2
  80ab80:	893ffe04 	addi	r4,r17,-8
  80ab84:	10c4703a 	and	r2,r2,r3
  80ab88:	8085883a 	add	r2,r16,r2
  80ab8c:	20809526 	beq	r4,r2,80ade4 <_realloc_r+0x52c>
  80ab90:	99bfff04 	addi	r6,r19,-4
  80ab94:	01c00904 	movi	r7,36
  80ab98:	39804536 	bltu	r7,r6,80acb0 <_realloc_r+0x3f8>
  80ab9c:	008004c4 	movi	r2,19
  80aba0:	9009883a 	mov	r4,r18
  80aba4:	880b883a 	mov	r5,r17
  80aba8:	11800f2e 	bgeu	r2,r6,80abe8 <_realloc_r+0x330>
  80abac:	90800017 	ldw	r2,0(r18)
  80abb0:	89400204 	addi	r5,r17,8
  80abb4:	91000204 	addi	r4,r18,8
  80abb8:	88800015 	stw	r2,0(r17)
  80abbc:	90c00117 	ldw	r3,4(r18)
  80abc0:	008006c4 	movi	r2,27
  80abc4:	88c00115 	stw	r3,4(r17)
  80abc8:	1180072e 	bgeu	r2,r6,80abe8 <_realloc_r+0x330>
  80abcc:	90c00217 	ldw	r3,8(r18)
  80abd0:	89400404 	addi	r5,r17,16
  80abd4:	91000404 	addi	r4,r18,16
  80abd8:	88c00215 	stw	r3,8(r17)
  80abdc:	90800317 	ldw	r2,12(r18)
  80abe0:	88800315 	stw	r2,12(r17)
  80abe4:	31c09126 	beq	r6,r7,80ae2c <_realloc_r+0x574>
  80abe8:	20800017 	ldw	r2,0(r4)
  80abec:	28800015 	stw	r2,0(r5)
  80abf0:	20c00117 	ldw	r3,4(r4)
  80abf4:	28c00115 	stw	r3,4(r5)
  80abf8:	20800217 	ldw	r2,8(r4)
  80abfc:	28800215 	stw	r2,8(r5)
  80ac00:	900b883a 	mov	r5,r18
  80ac04:	b009883a 	mov	r4,r22
  80ac08:	08083000 	call	808300 <_free_r>
  80ac0c:	b009883a 	mov	r4,r22
  80ac10:	080d3200 	call	80d320 <__malloc_unlock>
  80ac14:	003f5e06 	br	80a990 <_realloc_r+0xd8>
  80ac18:	300b883a 	mov	r5,r6
  80ac1c:	dfc00b17 	ldw	ra,44(sp)
  80ac20:	df000a17 	ldw	fp,40(sp)
  80ac24:	ddc00917 	ldw	r23,36(sp)
  80ac28:	dd800817 	ldw	r22,32(sp)
  80ac2c:	dd400717 	ldw	r21,28(sp)
  80ac30:	dd000617 	ldw	r20,24(sp)
  80ac34:	dcc00517 	ldw	r19,20(sp)
  80ac38:	dc800417 	ldw	r18,16(sp)
  80ac3c:	dc400317 	ldw	r17,12(sp)
  80ac40:	dc000217 	ldw	r16,8(sp)
  80ac44:	dec00c04 	addi	sp,sp,48
  80ac48:	0808e881 	jmpi	808e88 <_malloc_r>
  80ac4c:	38800117 	ldw	r2,4(r7)
  80ac50:	e54b883a 	add	r5,fp,r21
  80ac54:	31000054 	ori	r4,r6,1
  80ac58:	1080004c 	andi	r2,r2,1
  80ac5c:	1704b03a 	or	r2,r2,fp
  80ac60:	38800115 	stw	r2,4(r7)
  80ac64:	29000115 	stw	r4,4(r5)
  80ac68:	2987883a 	add	r3,r5,r6
  80ac6c:	18800117 	ldw	r2,4(r3)
  80ac70:	29400204 	addi	r5,r5,8
  80ac74:	b009883a 	mov	r4,r22
  80ac78:	10800054 	ori	r2,r2,1
  80ac7c:	18800115 	stw	r2,4(r3)
  80ac80:	08083000 	call	808300 <_free_r>
  80ac84:	003f3806 	br	80a968 <_realloc_r+0xb0>
  80ac88:	000d883a 	mov	r6,zero
  80ac8c:	0009883a 	mov	r4,zero
  80ac90:	003f5d06 	br	80aa08 <_realloc_r+0x150>
  80ac94:	30c00217 	ldw	r3,8(r6)
  80ac98:	30800317 	ldw	r2,12(r6)
  80ac9c:	800f883a 	mov	r7,r16
  80aca0:	84000204 	addi	r16,r16,8
  80aca4:	10c00215 	stw	r3,8(r2)
  80aca8:	18800315 	stw	r2,12(r3)
  80acac:	003f2306 	br	80a93c <_realloc_r+0x84>
  80acb0:	8809883a 	mov	r4,r17
  80acb4:	900b883a 	mov	r5,r18
  80acb8:	080974c0 	call	80974c <memmove>
  80acbc:	003fd006 	br	80ac00 <_realloc_r+0x348>
  80acc0:	30800117 	ldw	r2,4(r6)
  80acc4:	e0c00404 	addi	r3,fp,16
  80acc8:	1108703a 	and	r4,r2,r4
  80accc:	9905883a 	add	r2,r19,r4
  80acd0:	10ff4d16 	blt	r2,r3,80aa08 <_realloc_r+0x150>
  80acd4:	1705c83a 	sub	r2,r2,fp
  80acd8:	870b883a 	add	r5,r16,fp
  80acdc:	10800054 	ori	r2,r2,1
  80ace0:	28800115 	stw	r2,4(r5)
  80ace4:	80c00117 	ldw	r3,4(r16)
  80ace8:	008020b4 	movhi	r2,130
  80acec:	10b6bf04 	addi	r2,r2,-9476
  80acf0:	b009883a 	mov	r4,r22
  80acf4:	18c0004c 	andi	r3,r3,1
  80acf8:	e0c6b03a 	or	r3,fp,r3
  80acfc:	11400215 	stw	r5,8(r2)
  80ad00:	80c00115 	stw	r3,4(r16)
  80ad04:	080d3200 	call	80d320 <__malloc_unlock>
  80ad08:	84400204 	addi	r17,r16,8
  80ad0c:	003f2006 	br	80a990 <_realloc_r+0xd8>
  80ad10:	98a9883a 	add	r20,r19,r2
  80ad14:	2509883a 	add	r4,r4,r20
  80ad18:	e0800404 	addi	r2,fp,16
  80ad1c:	d9000115 	stw	r4,4(sp)
  80ad20:	20bf7016 	blt	r4,r2,80aae4 <_realloc_r+0x22c>
  80ad24:	b8c00317 	ldw	r3,12(r23)
  80ad28:	b8800217 	ldw	r2,8(r23)
  80ad2c:	99bfff04 	addi	r6,r19,-4
  80ad30:	01400904 	movi	r5,36
  80ad34:	18800215 	stw	r2,8(r3)
  80ad38:	10c00315 	stw	r3,12(r2)
  80ad3c:	bc400204 	addi	r17,r23,8
  80ad40:	29804136 	bltu	r5,r6,80ae48 <_realloc_r+0x590>
  80ad44:	008004c4 	movi	r2,19
  80ad48:	9009883a 	mov	r4,r18
  80ad4c:	880f883a 	mov	r7,r17
  80ad50:	11800f2e 	bgeu	r2,r6,80ad90 <_realloc_r+0x4d8>
  80ad54:	90800017 	ldw	r2,0(r18)
  80ad58:	b9c00404 	addi	r7,r23,16
  80ad5c:	91000204 	addi	r4,r18,8
  80ad60:	b8800215 	stw	r2,8(r23)
  80ad64:	90c00117 	ldw	r3,4(r18)
  80ad68:	008006c4 	movi	r2,27
  80ad6c:	b8c00315 	stw	r3,12(r23)
  80ad70:	1180072e 	bgeu	r2,r6,80ad90 <_realloc_r+0x4d8>
  80ad74:	90c00217 	ldw	r3,8(r18)
  80ad78:	b9c00604 	addi	r7,r23,24
  80ad7c:	91000404 	addi	r4,r18,16
  80ad80:	b8c00415 	stw	r3,16(r23)
  80ad84:	90800317 	ldw	r2,12(r18)
  80ad88:	b8800515 	stw	r2,20(r23)
  80ad8c:	31404026 	beq	r6,r5,80ae90 <_realloc_r+0x5d8>
  80ad90:	20800017 	ldw	r2,0(r4)
  80ad94:	38800015 	stw	r2,0(r7)
  80ad98:	20c00117 	ldw	r3,4(r4)
  80ad9c:	38c00115 	stw	r3,4(r7)
  80ada0:	20800217 	ldw	r2,8(r4)
  80ada4:	38800215 	stw	r2,8(r7)
  80ada8:	d8c00117 	ldw	r3,4(sp)
  80adac:	bf0b883a 	add	r5,r23,fp
  80adb0:	b009883a 	mov	r4,r22
  80adb4:	1f05c83a 	sub	r2,r3,fp
  80adb8:	10800054 	ori	r2,r2,1
  80adbc:	28800115 	stw	r2,4(r5)
  80adc0:	b8c00117 	ldw	r3,4(r23)
  80adc4:	008020b4 	movhi	r2,130
  80adc8:	10b6bf04 	addi	r2,r2,-9476
  80adcc:	11400215 	stw	r5,8(r2)
  80add0:	18c0004c 	andi	r3,r3,1
  80add4:	e0c6b03a 	or	r3,fp,r3
  80add8:	b8c00115 	stw	r3,4(r23)
  80addc:	080d3200 	call	80d320 <__malloc_unlock>
  80ade0:	003eeb06 	br	80a990 <_realloc_r+0xd8>
  80ade4:	20800117 	ldw	r2,4(r4)
  80ade8:	00ffff04 	movi	r3,-4
  80adec:	800f883a 	mov	r7,r16
  80adf0:	10c4703a 	and	r2,r2,r3
  80adf4:	98a9883a 	add	r20,r19,r2
  80adf8:	84000204 	addi	r16,r16,8
  80adfc:	003ecf06 	br	80a93c <_realloc_r+0x84>
  80ae00:	900b883a 	mov	r5,r18
  80ae04:	8009883a 	mov	r4,r16
  80ae08:	080974c0 	call	80974c <memmove>
  80ae0c:	dd000017 	ldw	r20,0(sp)
  80ae10:	b80f883a 	mov	r7,r23
  80ae14:	003ec906 	br	80a93c <_realloc_r+0x84>
  80ae18:	900b883a 	mov	r5,r18
  80ae1c:	8009883a 	mov	r4,r16
  80ae20:	080974c0 	call	80974c <memmove>
  80ae24:	b80f883a 	mov	r7,r23
  80ae28:	003ec406 	br	80a93c <_realloc_r+0x84>
  80ae2c:	90c00417 	ldw	r3,16(r18)
  80ae30:	89400604 	addi	r5,r17,24
  80ae34:	91000604 	addi	r4,r18,24
  80ae38:	88c00415 	stw	r3,16(r17)
  80ae3c:	90800517 	ldw	r2,20(r18)
  80ae40:	88800515 	stw	r2,20(r17)
  80ae44:	003f6806 	br	80abe8 <_realloc_r+0x330>
  80ae48:	900b883a 	mov	r5,r18
  80ae4c:	8809883a 	mov	r4,r17
  80ae50:	080974c0 	call	80974c <memmove>
  80ae54:	003fd406 	br	80ada8 <_realloc_r+0x4f0>
  80ae58:	90c00417 	ldw	r3,16(r18)
  80ae5c:	91000604 	addi	r4,r18,24
  80ae60:	ba000804 	addi	r8,r23,32
  80ae64:	b8c00615 	stw	r3,24(r23)
  80ae68:	90800517 	ldw	r2,20(r18)
  80ae6c:	b8800715 	stw	r2,28(r23)
  80ae70:	003f1206 	br	80aabc <_realloc_r+0x204>
  80ae74:	90c00417 	ldw	r3,16(r18)
  80ae78:	91000604 	addi	r4,r18,24
  80ae7c:	ba000804 	addi	r8,r23,32
  80ae80:	b8c00615 	stw	r3,24(r23)
  80ae84:	90800517 	ldw	r2,20(r18)
  80ae88:	b8800715 	stw	r2,28(r23)
  80ae8c:	003f3206 	br	80ab58 <_realloc_r+0x2a0>
  80ae90:	90c00417 	ldw	r3,16(r18)
  80ae94:	91000604 	addi	r4,r18,24
  80ae98:	b9c00804 	addi	r7,r23,32
  80ae9c:	b8c00615 	stw	r3,24(r23)
  80aea0:	90800517 	ldw	r2,20(r18)
  80aea4:	b8800715 	stw	r2,28(r23)
  80aea8:	003fb906 	br	80ad90 <_realloc_r+0x4d8>

0080aeac <__isinfd>:
  80aeac:	200d883a 	mov	r6,r4
  80aeb0:	0109c83a 	sub	r4,zero,r4
  80aeb4:	2188b03a 	or	r4,r4,r6
  80aeb8:	2008d7fa 	srli	r4,r4,31
  80aebc:	00a00034 	movhi	r2,32768
  80aec0:	10bfffc4 	addi	r2,r2,-1
  80aec4:	1144703a 	and	r2,r2,r5
  80aec8:	2088b03a 	or	r4,r4,r2
  80aecc:	009ffc34 	movhi	r2,32752
  80aed0:	1105c83a 	sub	r2,r2,r4
  80aed4:	0087c83a 	sub	r3,zero,r2
  80aed8:	10c4b03a 	or	r2,r2,r3
  80aedc:	1004d7fa 	srli	r2,r2,31
  80aee0:	00c00044 	movi	r3,1
  80aee4:	1885c83a 	sub	r2,r3,r2
  80aee8:	f800283a 	ret

0080aeec <_sbrk_r>:
  80aeec:	defffd04 	addi	sp,sp,-12
  80aef0:	dc000015 	stw	r16,0(sp)
  80aef4:	040020b4 	movhi	r16,130
  80aef8:	843cb204 	addi	r16,r16,-3384
  80aefc:	dc400115 	stw	r17,4(sp)
  80af00:	80000015 	stw	zero,0(r16)
  80af04:	2023883a 	mov	r17,r4
  80af08:	2809883a 	mov	r4,r5
  80af0c:	dfc00215 	stw	ra,8(sp)
  80af10:	080ced40 	call	80ced4 <sbrk>
  80af14:	1007883a 	mov	r3,r2
  80af18:	00bfffc4 	movi	r2,-1
  80af1c:	18800626 	beq	r3,r2,80af38 <_sbrk_r+0x4c>
  80af20:	1805883a 	mov	r2,r3
  80af24:	dfc00217 	ldw	ra,8(sp)
  80af28:	dc400117 	ldw	r17,4(sp)
  80af2c:	dc000017 	ldw	r16,0(sp)
  80af30:	dec00304 	addi	sp,sp,12
  80af34:	f800283a 	ret
  80af38:	80800017 	ldw	r2,0(r16)
  80af3c:	103ff826 	beq	r2,zero,80af20 <_sbrk_r+0x34>
  80af40:	88800015 	stw	r2,0(r17)
  80af44:	1805883a 	mov	r2,r3
  80af48:	dfc00217 	ldw	ra,8(sp)
  80af4c:	dc400117 	ldw	r17,4(sp)
  80af50:	dc000017 	ldw	r16,0(sp)
  80af54:	dec00304 	addi	sp,sp,12
  80af58:	f800283a 	ret

0080af5c <__sclose>:
  80af5c:	2940038f 	ldh	r5,14(r5)
  80af60:	080b2901 	jmpi	80b290 <_close_r>

0080af64 <__sseek>:
  80af64:	defffe04 	addi	sp,sp,-8
  80af68:	dc000015 	stw	r16,0(sp)
  80af6c:	2821883a 	mov	r16,r5
  80af70:	2940038f 	ldh	r5,14(r5)
  80af74:	dfc00115 	stw	ra,4(sp)
  80af78:	080b5080 	call	80b508 <_lseek_r>
  80af7c:	1007883a 	mov	r3,r2
  80af80:	00bfffc4 	movi	r2,-1
  80af84:	18800926 	beq	r3,r2,80afac <__sseek+0x48>
  80af88:	8080030b 	ldhu	r2,12(r16)
  80af8c:	80c01415 	stw	r3,80(r16)
  80af90:	10840014 	ori	r2,r2,4096
  80af94:	8080030d 	sth	r2,12(r16)
  80af98:	1805883a 	mov	r2,r3
  80af9c:	dfc00117 	ldw	ra,4(sp)
  80afa0:	dc000017 	ldw	r16,0(sp)
  80afa4:	dec00204 	addi	sp,sp,8
  80afa8:	f800283a 	ret
  80afac:	8080030b 	ldhu	r2,12(r16)
  80afb0:	10bbffcc 	andi	r2,r2,61439
  80afb4:	8080030d 	sth	r2,12(r16)
  80afb8:	1805883a 	mov	r2,r3
  80afbc:	dfc00117 	ldw	ra,4(sp)
  80afc0:	dc000017 	ldw	r16,0(sp)
  80afc4:	dec00204 	addi	sp,sp,8
  80afc8:	f800283a 	ret

0080afcc <__swrite>:
  80afcc:	2880030b 	ldhu	r2,12(r5)
  80afd0:	defffb04 	addi	sp,sp,-20
  80afd4:	dcc00315 	stw	r19,12(sp)
  80afd8:	1080400c 	andi	r2,r2,256
  80afdc:	dc800215 	stw	r18,8(sp)
  80afe0:	dc400115 	stw	r17,4(sp)
  80afe4:	dc000015 	stw	r16,0(sp)
  80afe8:	3027883a 	mov	r19,r6
  80afec:	3825883a 	mov	r18,r7
  80aff0:	dfc00415 	stw	ra,16(sp)
  80aff4:	2821883a 	mov	r16,r5
  80aff8:	000d883a 	mov	r6,zero
  80affc:	01c00084 	movi	r7,2
  80b000:	2023883a 	mov	r17,r4
  80b004:	10000226 	beq	r2,zero,80b010 <__swrite+0x44>
  80b008:	2940038f 	ldh	r5,14(r5)
  80b00c:	080b5080 	call	80b508 <_lseek_r>
  80b010:	8080030b 	ldhu	r2,12(r16)
  80b014:	8140038f 	ldh	r5,14(r16)
  80b018:	8809883a 	mov	r4,r17
  80b01c:	10bbffcc 	andi	r2,r2,61439
  80b020:	980d883a 	mov	r6,r19
  80b024:	900f883a 	mov	r7,r18
  80b028:	8080030d 	sth	r2,12(r16)
  80b02c:	dfc00417 	ldw	ra,16(sp)
  80b030:	dcc00317 	ldw	r19,12(sp)
  80b034:	dc800217 	ldw	r18,8(sp)
  80b038:	dc400117 	ldw	r17,4(sp)
  80b03c:	dc000017 	ldw	r16,0(sp)
  80b040:	dec00504 	addi	sp,sp,20
  80b044:	080b1641 	jmpi	80b164 <_write_r>

0080b048 <__sread>:
  80b048:	defffe04 	addi	sp,sp,-8
  80b04c:	dc000015 	stw	r16,0(sp)
  80b050:	2821883a 	mov	r16,r5
  80b054:	2940038f 	ldh	r5,14(r5)
  80b058:	dfc00115 	stw	ra,4(sp)
  80b05c:	080b5800 	call	80b580 <_read_r>
  80b060:	1007883a 	mov	r3,r2
  80b064:	10000816 	blt	r2,zero,80b088 <__sread+0x40>
  80b068:	80801417 	ldw	r2,80(r16)
  80b06c:	10c5883a 	add	r2,r2,r3
  80b070:	80801415 	stw	r2,80(r16)
  80b074:	1805883a 	mov	r2,r3
  80b078:	dfc00117 	ldw	ra,4(sp)
  80b07c:	dc000017 	ldw	r16,0(sp)
  80b080:	dec00204 	addi	sp,sp,8
  80b084:	f800283a 	ret
  80b088:	8080030b 	ldhu	r2,12(r16)
  80b08c:	10bbffcc 	andi	r2,r2,61439
  80b090:	8080030d 	sth	r2,12(r16)
  80b094:	1805883a 	mov	r2,r3
  80b098:	dfc00117 	ldw	ra,4(sp)
  80b09c:	dc000017 	ldw	r16,0(sp)
  80b0a0:	dec00204 	addi	sp,sp,8
  80b0a4:	f800283a 	ret

0080b0a8 <strcmp>:
  80b0a8:	2144b03a 	or	r2,r4,r5
  80b0ac:	108000cc 	andi	r2,r2,3
  80b0b0:	10001d1e 	bne	r2,zero,80b128 <strcmp+0x80>
  80b0b4:	200f883a 	mov	r7,r4
  80b0b8:	28800017 	ldw	r2,0(r5)
  80b0bc:	21000017 	ldw	r4,0(r4)
  80b0c0:	280d883a 	mov	r6,r5
  80b0c4:	2080161e 	bne	r4,r2,80b120 <strcmp+0x78>
  80b0c8:	023fbff4 	movhi	r8,65279
  80b0cc:	423fbfc4 	addi	r8,r8,-257
  80b0d0:	2207883a 	add	r3,r4,r8
  80b0d4:	01602074 	movhi	r5,32897
  80b0d8:	29602004 	addi	r5,r5,-32640
  80b0dc:	1946703a 	and	r3,r3,r5
  80b0e0:	0104303a 	nor	r2,zero,r4
  80b0e4:	10c4703a 	and	r2,r2,r3
  80b0e8:	10001c1e 	bne	r2,zero,80b15c <strcmp+0xb4>
  80b0ec:	4013883a 	mov	r9,r8
  80b0f0:	2811883a 	mov	r8,r5
  80b0f4:	00000106 	br	80b0fc <strcmp+0x54>
  80b0f8:	1800181e 	bne	r3,zero,80b15c <strcmp+0xb4>
  80b0fc:	39c00104 	addi	r7,r7,4
  80b100:	39000017 	ldw	r4,0(r7)
  80b104:	31800104 	addi	r6,r6,4
  80b108:	31400017 	ldw	r5,0(r6)
  80b10c:	2245883a 	add	r2,r4,r9
  80b110:	1204703a 	and	r2,r2,r8
  80b114:	0106303a 	nor	r3,zero,r4
  80b118:	1886703a 	and	r3,r3,r2
  80b11c:	217ff626 	beq	r4,r5,80b0f8 <strcmp+0x50>
  80b120:	3809883a 	mov	r4,r7
  80b124:	300b883a 	mov	r5,r6
  80b128:	20c00007 	ldb	r3,0(r4)
  80b12c:	1800051e 	bne	r3,zero,80b144 <strcmp+0x9c>
  80b130:	00000606 	br	80b14c <strcmp+0xa4>
  80b134:	21000044 	addi	r4,r4,1
  80b138:	20c00007 	ldb	r3,0(r4)
  80b13c:	29400044 	addi	r5,r5,1
  80b140:	18000226 	beq	r3,zero,80b14c <strcmp+0xa4>
  80b144:	28800007 	ldb	r2,0(r5)
  80b148:	18bffa26 	beq	r3,r2,80b134 <strcmp+0x8c>
  80b14c:	20c00003 	ldbu	r3,0(r4)
  80b150:	28800003 	ldbu	r2,0(r5)
  80b154:	1885c83a 	sub	r2,r3,r2
  80b158:	f800283a 	ret
  80b15c:	0005883a 	mov	r2,zero
  80b160:	f800283a 	ret

0080b164 <_write_r>:
  80b164:	defffd04 	addi	sp,sp,-12
  80b168:	dc000015 	stw	r16,0(sp)
  80b16c:	040020b4 	movhi	r16,130
  80b170:	843cb204 	addi	r16,r16,-3384
  80b174:	dc400115 	stw	r17,4(sp)
  80b178:	80000015 	stw	zero,0(r16)
  80b17c:	2023883a 	mov	r17,r4
  80b180:	2809883a 	mov	r4,r5
  80b184:	300b883a 	mov	r5,r6
  80b188:	380d883a 	mov	r6,r7
  80b18c:	dfc00215 	stw	ra,8(sp)
  80b190:	080cf900 	call	80cf90 <write>
  80b194:	1007883a 	mov	r3,r2
  80b198:	00bfffc4 	movi	r2,-1
  80b19c:	18800626 	beq	r3,r2,80b1b8 <_write_r+0x54>
  80b1a0:	1805883a 	mov	r2,r3
  80b1a4:	dfc00217 	ldw	ra,8(sp)
  80b1a8:	dc400117 	ldw	r17,4(sp)
  80b1ac:	dc000017 	ldw	r16,0(sp)
  80b1b0:	dec00304 	addi	sp,sp,12
  80b1b4:	f800283a 	ret
  80b1b8:	80800017 	ldw	r2,0(r16)
  80b1bc:	103ff826 	beq	r2,zero,80b1a0 <_write_r+0x3c>
  80b1c0:	88800015 	stw	r2,0(r17)
  80b1c4:	1805883a 	mov	r2,r3
  80b1c8:	dfc00217 	ldw	ra,8(sp)
  80b1cc:	dc400117 	ldw	r17,4(sp)
  80b1d0:	dc000017 	ldw	r16,0(sp)
  80b1d4:	dec00304 	addi	sp,sp,12
  80b1d8:	f800283a 	ret

0080b1dc <_calloc_r>:
  80b1dc:	298b383a 	mul	r5,r5,r6
  80b1e0:	defffe04 	addi	sp,sp,-8
  80b1e4:	dc000015 	stw	r16,0(sp)
  80b1e8:	dfc00115 	stw	ra,4(sp)
  80b1ec:	0808e880 	call	808e88 <_malloc_r>
  80b1f0:	1021883a 	mov	r16,r2
  80b1f4:	01c00904 	movi	r7,36
  80b1f8:	10000d26 	beq	r2,zero,80b230 <_calloc_r+0x54>
  80b1fc:	10ffff17 	ldw	r3,-4(r2)
  80b200:	1009883a 	mov	r4,r2
  80b204:	00bfff04 	movi	r2,-4
  80b208:	1886703a 	and	r3,r3,r2
  80b20c:	1887883a 	add	r3,r3,r2
  80b210:	180d883a 	mov	r6,r3
  80b214:	000b883a 	mov	r5,zero
  80b218:	38c01736 	bltu	r7,r3,80b278 <_calloc_r+0x9c>
  80b21c:	008004c4 	movi	r2,19
  80b220:	10c00836 	bltu	r2,r3,80b244 <_calloc_r+0x68>
  80b224:	20000215 	stw	zero,8(r4)
  80b228:	20000015 	stw	zero,0(r4)
  80b22c:	20000115 	stw	zero,4(r4)
  80b230:	8005883a 	mov	r2,r16
  80b234:	dfc00117 	ldw	ra,4(sp)
  80b238:	dc000017 	ldw	r16,0(sp)
  80b23c:	dec00204 	addi	sp,sp,8
  80b240:	f800283a 	ret
  80b244:	008006c4 	movi	r2,27
  80b248:	80000015 	stw	zero,0(r16)
  80b24c:	80000115 	stw	zero,4(r16)
  80b250:	81000204 	addi	r4,r16,8
  80b254:	10fff32e 	bgeu	r2,r3,80b224 <_calloc_r+0x48>
  80b258:	80000215 	stw	zero,8(r16)
  80b25c:	80000315 	stw	zero,12(r16)
  80b260:	81000404 	addi	r4,r16,16
  80b264:	19ffef1e 	bne	r3,r7,80b224 <_calloc_r+0x48>
  80b268:	81000604 	addi	r4,r16,24
  80b26c:	80000415 	stw	zero,16(r16)
  80b270:	80000515 	stw	zero,20(r16)
  80b274:	003feb06 	br	80b224 <_calloc_r+0x48>
  80b278:	080982c0 	call	80982c <memset>
  80b27c:	8005883a 	mov	r2,r16
  80b280:	dfc00117 	ldw	ra,4(sp)
  80b284:	dc000017 	ldw	r16,0(sp)
  80b288:	dec00204 	addi	sp,sp,8
  80b28c:	f800283a 	ret

0080b290 <_close_r>:
  80b290:	defffd04 	addi	sp,sp,-12
  80b294:	dc000015 	stw	r16,0(sp)
  80b298:	040020b4 	movhi	r16,130
  80b29c:	843cb204 	addi	r16,r16,-3384
  80b2a0:	dc400115 	stw	r17,4(sp)
  80b2a4:	80000015 	stw	zero,0(r16)
  80b2a8:	2023883a 	mov	r17,r4
  80b2ac:	2809883a 	mov	r4,r5
  80b2b0:	dfc00215 	stw	ra,8(sp)
  80b2b4:	080c4680 	call	80c468 <close>
  80b2b8:	1007883a 	mov	r3,r2
  80b2bc:	00bfffc4 	movi	r2,-1
  80b2c0:	18800626 	beq	r3,r2,80b2dc <_close_r+0x4c>
  80b2c4:	1805883a 	mov	r2,r3
  80b2c8:	dfc00217 	ldw	ra,8(sp)
  80b2cc:	dc400117 	ldw	r17,4(sp)
  80b2d0:	dc000017 	ldw	r16,0(sp)
  80b2d4:	dec00304 	addi	sp,sp,12
  80b2d8:	f800283a 	ret
  80b2dc:	80800017 	ldw	r2,0(r16)
  80b2e0:	103ff826 	beq	r2,zero,80b2c4 <_close_r+0x34>
  80b2e4:	88800015 	stw	r2,0(r17)
  80b2e8:	1805883a 	mov	r2,r3
  80b2ec:	dfc00217 	ldw	ra,8(sp)
  80b2f0:	dc400117 	ldw	r17,4(sp)
  80b2f4:	dc000017 	ldw	r16,0(sp)
  80b2f8:	dec00304 	addi	sp,sp,12
  80b2fc:	f800283a 	ret

0080b300 <_fclose_r>:
  80b300:	defffc04 	addi	sp,sp,-16
  80b304:	dc400115 	stw	r17,4(sp)
  80b308:	dc000015 	stw	r16,0(sp)
  80b30c:	dfc00315 	stw	ra,12(sp)
  80b310:	dc800215 	stw	r18,8(sp)
  80b314:	2821883a 	mov	r16,r5
  80b318:	2023883a 	mov	r17,r4
  80b31c:	28002926 	beq	r5,zero,80b3c4 <_fclose_r+0xc4>
  80b320:	0807f6c0 	call	807f6c <__sfp_lock_acquire>
  80b324:	88000226 	beq	r17,zero,80b330 <_fclose_r+0x30>
  80b328:	88800e17 	ldw	r2,56(r17)
  80b32c:	10002d26 	beq	r2,zero,80b3e4 <_fclose_r+0xe4>
  80b330:	8080030f 	ldh	r2,12(r16)
  80b334:	10002226 	beq	r2,zero,80b3c0 <_fclose_r+0xc0>
  80b338:	8809883a 	mov	r4,r17
  80b33c:	800b883a 	mov	r5,r16
  80b340:	0807ce40 	call	807ce4 <_fflush_r>
  80b344:	1025883a 	mov	r18,r2
  80b348:	80800b17 	ldw	r2,44(r16)
  80b34c:	10000426 	beq	r2,zero,80b360 <_fclose_r+0x60>
  80b350:	81400717 	ldw	r5,28(r16)
  80b354:	8809883a 	mov	r4,r17
  80b358:	103ee83a 	callr	r2
  80b35c:	10002a16 	blt	r2,zero,80b408 <_fclose_r+0x108>
  80b360:	8080030b 	ldhu	r2,12(r16)
  80b364:	1080200c 	andi	r2,r2,128
  80b368:	1000231e 	bne	r2,zero,80b3f8 <_fclose_r+0xf8>
  80b36c:	81400c17 	ldw	r5,48(r16)
  80b370:	28000526 	beq	r5,zero,80b388 <_fclose_r+0x88>
  80b374:	80801004 	addi	r2,r16,64
  80b378:	28800226 	beq	r5,r2,80b384 <_fclose_r+0x84>
  80b37c:	8809883a 	mov	r4,r17
  80b380:	08083000 	call	808300 <_free_r>
  80b384:	80000c15 	stw	zero,48(r16)
  80b388:	81401117 	ldw	r5,68(r16)
  80b38c:	28000326 	beq	r5,zero,80b39c <_fclose_r+0x9c>
  80b390:	8809883a 	mov	r4,r17
  80b394:	08083000 	call	808300 <_free_r>
  80b398:	80001115 	stw	zero,68(r16)
  80b39c:	8000030d 	sth	zero,12(r16)
  80b3a0:	0807f700 	call	807f70 <__sfp_lock_release>
  80b3a4:	9005883a 	mov	r2,r18
  80b3a8:	dfc00317 	ldw	ra,12(sp)
  80b3ac:	dc800217 	ldw	r18,8(sp)
  80b3b0:	dc400117 	ldw	r17,4(sp)
  80b3b4:	dc000017 	ldw	r16,0(sp)
  80b3b8:	dec00404 	addi	sp,sp,16
  80b3bc:	f800283a 	ret
  80b3c0:	0807f700 	call	807f70 <__sfp_lock_release>
  80b3c4:	0025883a 	mov	r18,zero
  80b3c8:	9005883a 	mov	r2,r18
  80b3cc:	dfc00317 	ldw	ra,12(sp)
  80b3d0:	dc800217 	ldw	r18,8(sp)
  80b3d4:	dc400117 	ldw	r17,4(sp)
  80b3d8:	dc000017 	ldw	r16,0(sp)
  80b3dc:	dec00404 	addi	sp,sp,16
  80b3e0:	f800283a 	ret
  80b3e4:	8809883a 	mov	r4,r17
  80b3e8:	0807f7c0 	call	807f7c <__sinit>
  80b3ec:	8080030f 	ldh	r2,12(r16)
  80b3f0:	103fd11e 	bne	r2,zero,80b338 <_fclose_r+0x38>
  80b3f4:	003ff206 	br	80b3c0 <_fclose_r+0xc0>
  80b3f8:	81400417 	ldw	r5,16(r16)
  80b3fc:	8809883a 	mov	r4,r17
  80b400:	08083000 	call	808300 <_free_r>
  80b404:	003fd906 	br	80b36c <_fclose_r+0x6c>
  80b408:	04bfffc4 	movi	r18,-1
  80b40c:	003fd406 	br	80b360 <_fclose_r+0x60>

0080b410 <fclose>:
  80b410:	008020b4 	movhi	r2,130
  80b414:	10bc6804 	addi	r2,r2,-3680
  80b418:	200b883a 	mov	r5,r4
  80b41c:	11000017 	ldw	r4,0(r2)
  80b420:	080b3001 	jmpi	80b300 <_fclose_r>

0080b424 <_fstat_r>:
  80b424:	defffd04 	addi	sp,sp,-12
  80b428:	dc000015 	stw	r16,0(sp)
  80b42c:	040020b4 	movhi	r16,130
  80b430:	843cb204 	addi	r16,r16,-3384
  80b434:	dc400115 	stw	r17,4(sp)
  80b438:	80000015 	stw	zero,0(r16)
  80b43c:	2023883a 	mov	r17,r4
  80b440:	2809883a 	mov	r4,r5
  80b444:	300b883a 	mov	r5,r6
  80b448:	dfc00215 	stw	ra,8(sp)
  80b44c:	080c5f00 	call	80c5f0 <fstat>
  80b450:	1007883a 	mov	r3,r2
  80b454:	00bfffc4 	movi	r2,-1
  80b458:	18800626 	beq	r3,r2,80b474 <_fstat_r+0x50>
  80b45c:	1805883a 	mov	r2,r3
  80b460:	dfc00217 	ldw	ra,8(sp)
  80b464:	dc400117 	ldw	r17,4(sp)
  80b468:	dc000017 	ldw	r16,0(sp)
  80b46c:	dec00304 	addi	sp,sp,12
  80b470:	f800283a 	ret
  80b474:	80800017 	ldw	r2,0(r16)
  80b478:	103ff826 	beq	r2,zero,80b45c <_fstat_r+0x38>
  80b47c:	88800015 	stw	r2,0(r17)
  80b480:	1805883a 	mov	r2,r3
  80b484:	dfc00217 	ldw	ra,8(sp)
  80b488:	dc400117 	ldw	r17,4(sp)
  80b48c:	dc000017 	ldw	r16,0(sp)
  80b490:	dec00304 	addi	sp,sp,12
  80b494:	f800283a 	ret

0080b498 <_isatty_r>:
  80b498:	defffd04 	addi	sp,sp,-12
  80b49c:	dc000015 	stw	r16,0(sp)
  80b4a0:	040020b4 	movhi	r16,130
  80b4a4:	843cb204 	addi	r16,r16,-3384
  80b4a8:	dc400115 	stw	r17,4(sp)
  80b4ac:	80000015 	stw	zero,0(r16)
  80b4b0:	2023883a 	mov	r17,r4
  80b4b4:	2809883a 	mov	r4,r5
  80b4b8:	dfc00215 	stw	ra,8(sp)
  80b4bc:	080c7240 	call	80c724 <isatty>
  80b4c0:	1007883a 	mov	r3,r2
  80b4c4:	00bfffc4 	movi	r2,-1
  80b4c8:	18800626 	beq	r3,r2,80b4e4 <_isatty_r+0x4c>
  80b4cc:	1805883a 	mov	r2,r3
  80b4d0:	dfc00217 	ldw	ra,8(sp)
  80b4d4:	dc400117 	ldw	r17,4(sp)
  80b4d8:	dc000017 	ldw	r16,0(sp)
  80b4dc:	dec00304 	addi	sp,sp,12
  80b4e0:	f800283a 	ret
  80b4e4:	80800017 	ldw	r2,0(r16)
  80b4e8:	103ff826 	beq	r2,zero,80b4cc <_isatty_r+0x34>
  80b4ec:	88800015 	stw	r2,0(r17)
  80b4f0:	1805883a 	mov	r2,r3
  80b4f4:	dfc00217 	ldw	ra,8(sp)
  80b4f8:	dc400117 	ldw	r17,4(sp)
  80b4fc:	dc000017 	ldw	r16,0(sp)
  80b500:	dec00304 	addi	sp,sp,12
  80b504:	f800283a 	ret

0080b508 <_lseek_r>:
  80b508:	defffd04 	addi	sp,sp,-12
  80b50c:	dc000015 	stw	r16,0(sp)
  80b510:	040020b4 	movhi	r16,130
  80b514:	843cb204 	addi	r16,r16,-3384
  80b518:	dc400115 	stw	r17,4(sp)
  80b51c:	80000015 	stw	zero,0(r16)
  80b520:	2023883a 	mov	r17,r4
  80b524:	2809883a 	mov	r4,r5
  80b528:	300b883a 	mov	r5,r6
  80b52c:	380d883a 	mov	r6,r7
  80b530:	dfc00215 	stw	ra,8(sp)
  80b534:	080c8440 	call	80c844 <lseek>
  80b538:	1007883a 	mov	r3,r2
  80b53c:	00bfffc4 	movi	r2,-1
  80b540:	18800626 	beq	r3,r2,80b55c <_lseek_r+0x54>
  80b544:	1805883a 	mov	r2,r3
  80b548:	dfc00217 	ldw	ra,8(sp)
  80b54c:	dc400117 	ldw	r17,4(sp)
  80b550:	dc000017 	ldw	r16,0(sp)
  80b554:	dec00304 	addi	sp,sp,12
  80b558:	f800283a 	ret
  80b55c:	80800017 	ldw	r2,0(r16)
  80b560:	103ff826 	beq	r2,zero,80b544 <_lseek_r+0x3c>
  80b564:	88800015 	stw	r2,0(r17)
  80b568:	1805883a 	mov	r2,r3
  80b56c:	dfc00217 	ldw	ra,8(sp)
  80b570:	dc400117 	ldw	r17,4(sp)
  80b574:	dc000017 	ldw	r16,0(sp)
  80b578:	dec00304 	addi	sp,sp,12
  80b57c:	f800283a 	ret

0080b580 <_read_r>:
  80b580:	defffd04 	addi	sp,sp,-12
  80b584:	dc000015 	stw	r16,0(sp)
  80b588:	040020b4 	movhi	r16,130
  80b58c:	843cb204 	addi	r16,r16,-3384
  80b590:	dc400115 	stw	r17,4(sp)
  80b594:	80000015 	stw	zero,0(r16)
  80b598:	2023883a 	mov	r17,r4
  80b59c:	2809883a 	mov	r4,r5
  80b5a0:	300b883a 	mov	r5,r6
  80b5a4:	380d883a 	mov	r6,r7
  80b5a8:	dfc00215 	stw	ra,8(sp)
  80b5ac:	080ccf40 	call	80ccf4 <read>
  80b5b0:	1007883a 	mov	r3,r2
  80b5b4:	00bfffc4 	movi	r2,-1
  80b5b8:	18800626 	beq	r3,r2,80b5d4 <_read_r+0x54>
  80b5bc:	1805883a 	mov	r2,r3
  80b5c0:	dfc00217 	ldw	ra,8(sp)
  80b5c4:	dc400117 	ldw	r17,4(sp)
  80b5c8:	dc000017 	ldw	r16,0(sp)
  80b5cc:	dec00304 	addi	sp,sp,12
  80b5d0:	f800283a 	ret
  80b5d4:	80800017 	ldw	r2,0(r16)
  80b5d8:	103ff826 	beq	r2,zero,80b5bc <_read_r+0x3c>
  80b5dc:	88800015 	stw	r2,0(r17)
  80b5e0:	1805883a 	mov	r2,r3
  80b5e4:	dfc00217 	ldw	ra,8(sp)
  80b5e8:	dc400117 	ldw	r17,4(sp)
  80b5ec:	dc000017 	ldw	r16,0(sp)
  80b5f0:	dec00304 	addi	sp,sp,12
  80b5f4:	f800283a 	ret

0080b5f8 <__udivdi3>:
  80b5f8:	defff004 	addi	sp,sp,-64
  80b5fc:	2005883a 	mov	r2,r4
  80b600:	3011883a 	mov	r8,r6
  80b604:	df000e15 	stw	fp,56(sp)
  80b608:	dd000a15 	stw	r20,40(sp)
  80b60c:	dc000615 	stw	r16,24(sp)
  80b610:	dfc00f15 	stw	ra,60(sp)
  80b614:	ddc00d15 	stw	r23,52(sp)
  80b618:	dd800c15 	stw	r22,48(sp)
  80b61c:	dd400b15 	stw	r21,44(sp)
  80b620:	dcc00915 	stw	r19,36(sp)
  80b624:	dc800815 	stw	r18,32(sp)
  80b628:	dc400715 	stw	r17,28(sp)
  80b62c:	4021883a 	mov	r16,r8
  80b630:	1039883a 	mov	fp,r2
  80b634:	2829883a 	mov	r20,r5
  80b638:	38003b1e 	bne	r7,zero,80b728 <__udivdi3+0x130>
  80b63c:	2a005c36 	bltu	r5,r8,80b7b0 <__udivdi3+0x1b8>
  80b640:	4000a626 	beq	r8,zero,80b8dc <__udivdi3+0x2e4>
  80b644:	00bfffd4 	movui	r2,65535
  80b648:	14009e36 	bltu	r2,r16,80b8c4 <__udivdi3+0x2cc>
  80b64c:	00803fc4 	movi	r2,255
  80b650:	14013d36 	bltu	r2,r16,80bb48 <__udivdi3+0x550>
  80b654:	000b883a 	mov	r5,zero
  80b658:	0005883a 	mov	r2,zero
  80b65c:	8084d83a 	srl	r2,r16,r2
  80b660:	010020b4 	movhi	r4,130
  80b664:	21349204 	addi	r4,r4,-11704
  80b668:	01800804 	movi	r6,32
  80b66c:	1105883a 	add	r2,r2,r4
  80b670:	10c00003 	ldbu	r3,0(r2)
  80b674:	28c7883a 	add	r3,r5,r3
  80b678:	30edc83a 	sub	r22,r6,r3
  80b67c:	b000ee1e 	bne	r22,zero,80ba38 <__udivdi3+0x440>
  80b680:	802ad43a 	srli	r21,r16,16
  80b684:	00800044 	movi	r2,1
  80b688:	a423c83a 	sub	r17,r20,r16
  80b68c:	85ffffcc 	andi	r23,r16,65535
  80b690:	d8800315 	stw	r2,12(sp)
  80b694:	8809883a 	mov	r4,r17
  80b698:	a80b883a 	mov	r5,r21
  80b69c:	080c4580 	call	80c458 <__udivsi3>
  80b6a0:	8809883a 	mov	r4,r17
  80b6a4:	a80b883a 	mov	r5,r21
  80b6a8:	102d883a 	mov	r22,r2
  80b6ac:	080c4600 	call	80c460 <__umodsi3>
  80b6b0:	1004943a 	slli	r2,r2,16
  80b6b4:	e006d43a 	srli	r3,fp,16
  80b6b8:	bda3383a 	mul	r17,r23,r22
  80b6bc:	10c4b03a 	or	r2,r2,r3
  80b6c0:	1440042e 	bgeu	r2,r17,80b6d4 <__udivdi3+0xdc>
  80b6c4:	1405883a 	add	r2,r2,r16
  80b6c8:	b5bfffc4 	addi	r22,r22,-1
  80b6cc:	14000136 	bltu	r2,r16,80b6d4 <__udivdi3+0xdc>
  80b6d0:	14413d36 	bltu	r2,r17,80bbc8 <__udivdi3+0x5d0>
  80b6d4:	1463c83a 	sub	r17,r2,r17
  80b6d8:	8809883a 	mov	r4,r17
  80b6dc:	a80b883a 	mov	r5,r21
  80b6e0:	080c4580 	call	80c458 <__udivsi3>
  80b6e4:	8809883a 	mov	r4,r17
  80b6e8:	a80b883a 	mov	r5,r21
  80b6ec:	1029883a 	mov	r20,r2
  80b6f0:	080c4600 	call	80c460 <__umodsi3>
  80b6f4:	1004943a 	slli	r2,r2,16
  80b6f8:	bd09383a 	mul	r4,r23,r20
  80b6fc:	e0ffffcc 	andi	r3,fp,65535
  80b700:	10c4b03a 	or	r2,r2,r3
  80b704:	1100042e 	bgeu	r2,r4,80b718 <__udivdi3+0x120>
  80b708:	8085883a 	add	r2,r16,r2
  80b70c:	a53fffc4 	addi	r20,r20,-1
  80b710:	14000136 	bltu	r2,r16,80b718 <__udivdi3+0x120>
  80b714:	11012036 	bltu	r2,r4,80bb98 <__udivdi3+0x5a0>
  80b718:	b004943a 	slli	r2,r22,16
  80b71c:	d9000317 	ldw	r4,12(sp)
  80b720:	a084b03a 	or	r2,r20,r2
  80b724:	00001506 	br	80b77c <__udivdi3+0x184>
  80b728:	380d883a 	mov	r6,r7
  80b72c:	29c06236 	bltu	r5,r7,80b8b8 <__udivdi3+0x2c0>
  80b730:	00bfffd4 	movui	r2,65535
  80b734:	11c05a36 	bltu	r2,r7,80b8a0 <__udivdi3+0x2a8>
  80b738:	00803fc4 	movi	r2,255
  80b73c:	11c0fc36 	bltu	r2,r7,80bb30 <__udivdi3+0x538>
  80b740:	000b883a 	mov	r5,zero
  80b744:	0005883a 	mov	r2,zero
  80b748:	3084d83a 	srl	r2,r6,r2
  80b74c:	010020b4 	movhi	r4,130
  80b750:	21349204 	addi	r4,r4,-11704
  80b754:	01c00804 	movi	r7,32
  80b758:	1105883a 	add	r2,r2,r4
  80b75c:	10c00003 	ldbu	r3,0(r2)
  80b760:	28c7883a 	add	r3,r5,r3
  80b764:	38efc83a 	sub	r23,r7,r3
  80b768:	b800691e 	bne	r23,zero,80b910 <__udivdi3+0x318>
  80b76c:	35000136 	bltu	r6,r20,80b774 <__udivdi3+0x17c>
  80b770:	e4005136 	bltu	fp,r16,80b8b8 <__udivdi3+0x2c0>
  80b774:	00800044 	movi	r2,1
  80b778:	0009883a 	mov	r4,zero
  80b77c:	2007883a 	mov	r3,r4
  80b780:	dfc00f17 	ldw	ra,60(sp)
  80b784:	df000e17 	ldw	fp,56(sp)
  80b788:	ddc00d17 	ldw	r23,52(sp)
  80b78c:	dd800c17 	ldw	r22,48(sp)
  80b790:	dd400b17 	ldw	r21,44(sp)
  80b794:	dd000a17 	ldw	r20,40(sp)
  80b798:	dcc00917 	ldw	r19,36(sp)
  80b79c:	dc800817 	ldw	r18,32(sp)
  80b7a0:	dc400717 	ldw	r17,28(sp)
  80b7a4:	dc000617 	ldw	r16,24(sp)
  80b7a8:	dec01004 	addi	sp,sp,64
  80b7ac:	f800283a 	ret
  80b7b0:	00bfffd4 	movui	r2,65535
  80b7b4:	12005036 	bltu	r2,r8,80b8f8 <__udivdi3+0x300>
  80b7b8:	00803fc4 	movi	r2,255
  80b7bc:	1200e836 	bltu	r2,r8,80bb60 <__udivdi3+0x568>
  80b7c0:	000b883a 	mov	r5,zero
  80b7c4:	0005883a 	mov	r2,zero
  80b7c8:	8084d83a 	srl	r2,r16,r2
  80b7cc:	010020b4 	movhi	r4,130
  80b7d0:	21349204 	addi	r4,r4,-11704
  80b7d4:	01800804 	movi	r6,32
  80b7d8:	1105883a 	add	r2,r2,r4
  80b7dc:	10c00003 	ldbu	r3,0(r2)
  80b7e0:	28c7883a 	add	r3,r5,r3
  80b7e4:	30cbc83a 	sub	r5,r6,r3
  80b7e8:	28000626 	beq	r5,zero,80b804 <__udivdi3+0x20c>
  80b7ec:	3145c83a 	sub	r2,r6,r5
  80b7f0:	e084d83a 	srl	r2,fp,r2
  80b7f4:	a146983a 	sll	r3,r20,r5
  80b7f8:	e178983a 	sll	fp,fp,r5
  80b7fc:	8160983a 	sll	r16,r16,r5
  80b800:	18a8b03a 	or	r20,r3,r2
  80b804:	802ad43a 	srli	r21,r16,16
  80b808:	a009883a 	mov	r4,r20
  80b80c:	85ffffcc 	andi	r23,r16,65535
  80b810:	a80b883a 	mov	r5,r21
  80b814:	080c4580 	call	80c458 <__udivsi3>
  80b818:	a009883a 	mov	r4,r20
  80b81c:	a80b883a 	mov	r5,r21
  80b820:	102d883a 	mov	r22,r2
  80b824:	080c4600 	call	80c460 <__umodsi3>
  80b828:	1004943a 	slli	r2,r2,16
  80b82c:	e006d43a 	srli	r3,fp,16
  80b830:	bda3383a 	mul	r17,r23,r22
  80b834:	10c4b03a 	or	r2,r2,r3
  80b838:	1440042e 	bgeu	r2,r17,80b84c <__udivdi3+0x254>
  80b83c:	1405883a 	add	r2,r2,r16
  80b840:	b5bfffc4 	addi	r22,r22,-1
  80b844:	14000136 	bltu	r2,r16,80b84c <__udivdi3+0x254>
  80b848:	1440d536 	bltu	r2,r17,80bba0 <__udivdi3+0x5a8>
  80b84c:	1463c83a 	sub	r17,r2,r17
  80b850:	8809883a 	mov	r4,r17
  80b854:	a80b883a 	mov	r5,r21
  80b858:	080c4580 	call	80c458 <__udivsi3>
  80b85c:	8809883a 	mov	r4,r17
  80b860:	a80b883a 	mov	r5,r21
  80b864:	1029883a 	mov	r20,r2
  80b868:	080c4600 	call	80c460 <__umodsi3>
  80b86c:	1004943a 	slli	r2,r2,16
  80b870:	bd09383a 	mul	r4,r23,r20
  80b874:	e0ffffcc 	andi	r3,fp,65535
  80b878:	10c4b03a 	or	r2,r2,r3
  80b87c:	1100042e 	bgeu	r2,r4,80b890 <__udivdi3+0x298>
  80b880:	8085883a 	add	r2,r16,r2
  80b884:	a53fffc4 	addi	r20,r20,-1
  80b888:	14000136 	bltu	r2,r16,80b890 <__udivdi3+0x298>
  80b88c:	1100c736 	bltu	r2,r4,80bbac <__udivdi3+0x5b4>
  80b890:	b004943a 	slli	r2,r22,16
  80b894:	0009883a 	mov	r4,zero
  80b898:	a084b03a 	or	r2,r20,r2
  80b89c:	003fb706 	br	80b77c <__udivdi3+0x184>
  80b8a0:	00804034 	movhi	r2,256
  80b8a4:	10bfffc4 	addi	r2,r2,-1
  80b8a8:	11c0a436 	bltu	r2,r7,80bb3c <__udivdi3+0x544>
  80b8ac:	01400404 	movi	r5,16
  80b8b0:	2805883a 	mov	r2,r5
  80b8b4:	003fa406 	br	80b748 <__udivdi3+0x150>
  80b8b8:	0005883a 	mov	r2,zero
  80b8bc:	0009883a 	mov	r4,zero
  80b8c0:	003fae06 	br	80b77c <__udivdi3+0x184>
  80b8c4:	00804034 	movhi	r2,256
  80b8c8:	10bfffc4 	addi	r2,r2,-1
  80b8cc:	1400a136 	bltu	r2,r16,80bb54 <__udivdi3+0x55c>
  80b8d0:	01400404 	movi	r5,16
  80b8d4:	2805883a 	mov	r2,r5
  80b8d8:	003f6006 	br	80b65c <__udivdi3+0x64>
  80b8dc:	01000044 	movi	r4,1
  80b8e0:	000b883a 	mov	r5,zero
  80b8e4:	080c4580 	call	80c458 <__udivsi3>
  80b8e8:	1021883a 	mov	r16,r2
  80b8ec:	00bfffd4 	movui	r2,65535
  80b8f0:	143ff436 	bltu	r2,r16,80b8c4 <__udivdi3+0x2cc>
  80b8f4:	003f5506 	br	80b64c <__udivdi3+0x54>
  80b8f8:	00804034 	movhi	r2,256
  80b8fc:	10bfffc4 	addi	r2,r2,-1
  80b900:	12009a36 	bltu	r2,r8,80bb6c <__udivdi3+0x574>
  80b904:	01400404 	movi	r5,16
  80b908:	2805883a 	mov	r2,r5
  80b90c:	003fae06 	br	80b7c8 <__udivdi3+0x1d0>
  80b910:	3dc5c83a 	sub	r2,r7,r23
  80b914:	35c8983a 	sll	r4,r6,r23
  80b918:	8086d83a 	srl	r3,r16,r2
  80b91c:	a0a2d83a 	srl	r17,r20,r2
  80b920:	e084d83a 	srl	r2,fp,r2
  80b924:	20eab03a 	or	r21,r4,r3
  80b928:	a82cd43a 	srli	r22,r21,16
  80b92c:	a5c6983a 	sll	r3,r20,r23
  80b930:	8809883a 	mov	r4,r17
  80b934:	b00b883a 	mov	r5,r22
  80b938:	1886b03a 	or	r3,r3,r2
  80b93c:	d8c00215 	stw	r3,8(sp)
  80b940:	080c4580 	call	80c458 <__udivsi3>
  80b944:	8809883a 	mov	r4,r17
  80b948:	b00b883a 	mov	r5,r22
  80b94c:	1029883a 	mov	r20,r2
  80b950:	080c4600 	call	80c460 <__umodsi3>
  80b954:	a8ffffcc 	andi	r3,r21,65535
  80b958:	d8c00515 	stw	r3,20(sp)
  80b95c:	d9000217 	ldw	r4,8(sp)
  80b960:	d9400517 	ldw	r5,20(sp)
  80b964:	1004943a 	slli	r2,r2,16
  80b968:	2006d43a 	srli	r3,r4,16
  80b96c:	85e0983a 	sll	r16,r16,r23
  80b970:	2d23383a 	mul	r17,r5,r20
  80b974:	10c4b03a 	or	r2,r2,r3
  80b978:	dc000015 	stw	r16,0(sp)
  80b97c:	1440032e 	bgeu	r2,r17,80b98c <__udivdi3+0x394>
  80b980:	1545883a 	add	r2,r2,r21
  80b984:	a53fffc4 	addi	r20,r20,-1
  80b988:	15407f2e 	bgeu	r2,r21,80bb88 <__udivdi3+0x590>
  80b98c:	1463c83a 	sub	r17,r2,r17
  80b990:	8809883a 	mov	r4,r17
  80b994:	b00b883a 	mov	r5,r22
  80b998:	080c4580 	call	80c458 <__udivsi3>
  80b99c:	8809883a 	mov	r4,r17
  80b9a0:	b00b883a 	mov	r5,r22
  80b9a4:	1021883a 	mov	r16,r2
  80b9a8:	080c4600 	call	80c460 <__umodsi3>
  80b9ac:	d8c00517 	ldw	r3,20(sp)
  80b9b0:	d9000217 	ldw	r4,8(sp)
  80b9b4:	1004943a 	slli	r2,r2,16
  80b9b8:	1c0f383a 	mul	r7,r3,r16
  80b9bc:	20ffffcc 	andi	r3,r4,65535
  80b9c0:	10e2b03a 	or	r17,r2,r3
  80b9c4:	89c0032e 	bgeu	r17,r7,80b9d4 <__udivdi3+0x3dc>
  80b9c8:	8d63883a 	add	r17,r17,r21
  80b9cc:	843fffc4 	addi	r16,r16,-1
  80b9d0:	8d40692e 	bgeu	r17,r21,80bb78 <__udivdi3+0x580>
  80b9d4:	a008943a 	slli	r4,r20,16
  80b9d8:	d9400017 	ldw	r5,0(sp)
  80b9dc:	89e3c83a 	sub	r17,r17,r7
  80b9e0:	8110b03a 	or	r8,r16,r4
  80b9e4:	280cd43a 	srli	r6,r5,16
  80b9e8:	28ffffcc 	andi	r3,r5,65535
  80b9ec:	40bfffcc 	andi	r2,r8,65535
  80b9f0:	400ad43a 	srli	r5,r8,16
  80b9f4:	10d3383a 	mul	r9,r2,r3
  80b9f8:	1185383a 	mul	r2,r2,r6
  80b9fc:	28c7383a 	mul	r3,r5,r3
  80ba00:	4808d43a 	srli	r4,r9,16
  80ba04:	298b383a 	mul	r5,r5,r6
  80ba08:	10c5883a 	add	r2,r2,r3
  80ba0c:	2089883a 	add	r4,r4,r2
  80ba10:	20c0022e 	bgeu	r4,r3,80ba1c <__udivdi3+0x424>
  80ba14:	00800074 	movhi	r2,1
  80ba18:	288b883a 	add	r5,r5,r2
  80ba1c:	2004d43a 	srli	r2,r4,16
  80ba20:	288b883a 	add	r5,r5,r2
  80ba24:	89403f36 	bltu	r17,r5,80bb24 <__udivdi3+0x52c>
  80ba28:	89403926 	beq	r17,r5,80bb10 <__udivdi3+0x518>
  80ba2c:	4005883a 	mov	r2,r8
  80ba30:	0009883a 	mov	r4,zero
  80ba34:	003f5106 	br	80b77c <__udivdi3+0x184>
  80ba38:	85a0983a 	sll	r16,r16,r22
  80ba3c:	3585c83a 	sub	r2,r6,r22
  80ba40:	a0a2d83a 	srl	r17,r20,r2
  80ba44:	802ad43a 	srli	r21,r16,16
  80ba48:	e084d83a 	srl	r2,fp,r2
  80ba4c:	a586983a 	sll	r3,r20,r22
  80ba50:	8809883a 	mov	r4,r17
  80ba54:	a80b883a 	mov	r5,r21
  80ba58:	1886b03a 	or	r3,r3,r2
  80ba5c:	d8c00115 	stw	r3,4(sp)
  80ba60:	080c4580 	call	80c458 <__udivsi3>
  80ba64:	8809883a 	mov	r4,r17
  80ba68:	a80b883a 	mov	r5,r21
  80ba6c:	d8800415 	stw	r2,16(sp)
  80ba70:	080c4600 	call	80c460 <__umodsi3>
  80ba74:	d9000117 	ldw	r4,4(sp)
  80ba78:	d9400417 	ldw	r5,16(sp)
  80ba7c:	1004943a 	slli	r2,r2,16
  80ba80:	85ffffcc 	andi	r23,r16,65535
  80ba84:	2006d43a 	srli	r3,r4,16
  80ba88:	b963383a 	mul	r17,r23,r5
  80ba8c:	10c4b03a 	or	r2,r2,r3
  80ba90:	1440042e 	bgeu	r2,r17,80baa4 <__udivdi3+0x4ac>
  80ba94:	297fffc4 	addi	r5,r5,-1
  80ba98:	1405883a 	add	r2,r2,r16
  80ba9c:	d9400415 	stw	r5,16(sp)
  80baa0:	1400442e 	bgeu	r2,r16,80bbb4 <__udivdi3+0x5bc>
  80baa4:	1463c83a 	sub	r17,r2,r17
  80baa8:	8809883a 	mov	r4,r17
  80baac:	a80b883a 	mov	r5,r21
  80bab0:	080c4580 	call	80c458 <__udivsi3>
  80bab4:	8809883a 	mov	r4,r17
  80bab8:	a80b883a 	mov	r5,r21
  80babc:	1029883a 	mov	r20,r2
  80bac0:	080c4600 	call	80c460 <__umodsi3>
  80bac4:	d9400117 	ldw	r5,4(sp)
  80bac8:	1004943a 	slli	r2,r2,16
  80bacc:	bd09383a 	mul	r4,r23,r20
  80bad0:	28ffffcc 	andi	r3,r5,65535
  80bad4:	10c6b03a 	or	r3,r2,r3
  80bad8:	1900062e 	bgeu	r3,r4,80baf4 <__udivdi3+0x4fc>
  80badc:	1c07883a 	add	r3,r3,r16
  80bae0:	a53fffc4 	addi	r20,r20,-1
  80bae4:	1c000336 	bltu	r3,r16,80baf4 <__udivdi3+0x4fc>
  80bae8:	1900022e 	bgeu	r3,r4,80baf4 <__udivdi3+0x4fc>
  80baec:	a53fffc4 	addi	r20,r20,-1
  80baf0:	1c07883a 	add	r3,r3,r16
  80baf4:	d9400417 	ldw	r5,16(sp)
  80baf8:	e5b8983a 	sll	fp,fp,r22
  80bafc:	1923c83a 	sub	r17,r3,r4
  80bb00:	2804943a 	slli	r2,r5,16
  80bb04:	a0a8b03a 	or	r20,r20,r2
  80bb08:	dd000315 	stw	r20,12(sp)
  80bb0c:	003ee106 	br	80b694 <__udivdi3+0x9c>
  80bb10:	2004943a 	slli	r2,r4,16
  80bb14:	e5c8983a 	sll	r4,fp,r23
  80bb18:	48ffffcc 	andi	r3,r9,65535
  80bb1c:	10c5883a 	add	r2,r2,r3
  80bb20:	20bfc22e 	bgeu	r4,r2,80ba2c <__udivdi3+0x434>
  80bb24:	40bfffc4 	addi	r2,r8,-1
  80bb28:	0009883a 	mov	r4,zero
  80bb2c:	003f1306 	br	80b77c <__udivdi3+0x184>
  80bb30:	01400204 	movi	r5,8
  80bb34:	2805883a 	mov	r2,r5
  80bb38:	003f0306 	br	80b748 <__udivdi3+0x150>
  80bb3c:	01400604 	movi	r5,24
  80bb40:	2805883a 	mov	r2,r5
  80bb44:	003f0006 	br	80b748 <__udivdi3+0x150>
  80bb48:	01400204 	movi	r5,8
  80bb4c:	2805883a 	mov	r2,r5
  80bb50:	003ec206 	br	80b65c <__udivdi3+0x64>
  80bb54:	01400604 	movi	r5,24
  80bb58:	2805883a 	mov	r2,r5
  80bb5c:	003ebf06 	br	80b65c <__udivdi3+0x64>
  80bb60:	01400204 	movi	r5,8
  80bb64:	2805883a 	mov	r2,r5
  80bb68:	003f1706 	br	80b7c8 <__udivdi3+0x1d0>
  80bb6c:	01400604 	movi	r5,24
  80bb70:	2805883a 	mov	r2,r5
  80bb74:	003f1406 	br	80b7c8 <__udivdi3+0x1d0>
  80bb78:	89ff962e 	bgeu	r17,r7,80b9d4 <__udivdi3+0x3dc>
  80bb7c:	8d63883a 	add	r17,r17,r21
  80bb80:	843fffc4 	addi	r16,r16,-1
  80bb84:	003f9306 	br	80b9d4 <__udivdi3+0x3dc>
  80bb88:	147f802e 	bgeu	r2,r17,80b98c <__udivdi3+0x394>
  80bb8c:	a53fffc4 	addi	r20,r20,-1
  80bb90:	1545883a 	add	r2,r2,r21
  80bb94:	003f7d06 	br	80b98c <__udivdi3+0x394>
  80bb98:	a53fffc4 	addi	r20,r20,-1
  80bb9c:	003ede06 	br	80b718 <__udivdi3+0x120>
  80bba0:	b5bfffc4 	addi	r22,r22,-1
  80bba4:	1405883a 	add	r2,r2,r16
  80bba8:	003f2806 	br	80b84c <__udivdi3+0x254>
  80bbac:	a53fffc4 	addi	r20,r20,-1
  80bbb0:	003f3706 	br	80b890 <__udivdi3+0x298>
  80bbb4:	147fbb2e 	bgeu	r2,r17,80baa4 <__udivdi3+0x4ac>
  80bbb8:	297fffc4 	addi	r5,r5,-1
  80bbbc:	1405883a 	add	r2,r2,r16
  80bbc0:	d9400415 	stw	r5,16(sp)
  80bbc4:	003fb706 	br	80baa4 <__udivdi3+0x4ac>
  80bbc8:	b5bfffc4 	addi	r22,r22,-1
  80bbcc:	1405883a 	add	r2,r2,r16
  80bbd0:	003ec006 	br	80b6d4 <__udivdi3+0xdc>

0080bbd4 <__umoddi3>:
  80bbd4:	defff104 	addi	sp,sp,-60
  80bbd8:	dd800b15 	stw	r22,44(sp)
  80bbdc:	dd000915 	stw	r20,36(sp)
  80bbe0:	dc000515 	stw	r16,20(sp)
  80bbe4:	dfc00e15 	stw	ra,56(sp)
  80bbe8:	df000d15 	stw	fp,52(sp)
  80bbec:	ddc00c15 	stw	r23,48(sp)
  80bbf0:	dd400a15 	stw	r21,40(sp)
  80bbf4:	dcc00815 	stw	r19,32(sp)
  80bbf8:	dc800715 	stw	r18,28(sp)
  80bbfc:	dc400615 	stw	r17,24(sp)
  80bc00:	3021883a 	mov	r16,r6
  80bc04:	202d883a 	mov	r22,r4
  80bc08:	2829883a 	mov	r20,r5
  80bc0c:	38002b1e 	bne	r7,zero,80bcbc <__umoddi3+0xe8>
  80bc10:	29805036 	bltu	r5,r6,80bd54 <__umoddi3+0x180>
  80bc14:	30008a26 	beq	r6,zero,80be40 <__umoddi3+0x26c>
  80bc18:	00bfffd4 	movui	r2,65535
  80bc1c:	14008236 	bltu	r2,r16,80be28 <__umoddi3+0x254>
  80bc20:	00803fc4 	movi	r2,255
  80bc24:	14013636 	bltu	r2,r16,80c100 <__umoddi3+0x52c>
  80bc28:	000b883a 	mov	r5,zero
  80bc2c:	0005883a 	mov	r2,zero
  80bc30:	8084d83a 	srl	r2,r16,r2
  80bc34:	010020b4 	movhi	r4,130
  80bc38:	21349204 	addi	r4,r4,-11704
  80bc3c:	01800804 	movi	r6,32
  80bc40:	1105883a 	add	r2,r2,r4
  80bc44:	10c00003 	ldbu	r3,0(r2)
  80bc48:	28c7883a 	add	r3,r5,r3
  80bc4c:	30efc83a 	sub	r23,r6,r3
  80bc50:	b800941e 	bne	r23,zero,80bea4 <__umoddi3+0x2d0>
  80bc54:	802ad43a 	srli	r21,r16,16
  80bc58:	a423c83a 	sub	r17,r20,r16
  80bc5c:	0039883a 	mov	fp,zero
  80bc60:	853fffcc 	andi	r20,r16,65535
  80bc64:	8809883a 	mov	r4,r17
  80bc68:	a80b883a 	mov	r5,r21
  80bc6c:	080c4580 	call	80c458 <__udivsi3>
  80bc70:	8809883a 	mov	r4,r17
  80bc74:	a80b883a 	mov	r5,r21
  80bc78:	a0a3383a 	mul	r17,r20,r2
  80bc7c:	080c4600 	call	80c460 <__umodsi3>
  80bc80:	1004943a 	slli	r2,r2,16
  80bc84:	b006d43a 	srli	r3,r22,16
  80bc88:	10c4b03a 	or	r2,r2,r3
  80bc8c:	1440032e 	bgeu	r2,r17,80bc9c <__umoddi3+0xc8>
  80bc90:	1405883a 	add	r2,r2,r16
  80bc94:	14000136 	bltu	r2,r16,80bc9c <__umoddi3+0xc8>
  80bc98:	14413536 	bltu	r2,r17,80c170 <__umoddi3+0x59c>
  80bc9c:	1463c83a 	sub	r17,r2,r17
  80bca0:	8809883a 	mov	r4,r17
  80bca4:	a80b883a 	mov	r5,r21
  80bca8:	080c4580 	call	80c458 <__udivsi3>
  80bcac:	8809883a 	mov	r4,r17
  80bcb0:	a0a3383a 	mul	r17,r20,r2
  80bcb4:	a80b883a 	mov	r5,r21
  80bcb8:	00004d06 	br	80bdf0 <__umoddi3+0x21c>
  80bcbc:	380d883a 	mov	r6,r7
  80bcc0:	29c0102e 	bgeu	r5,r7,80bd04 <__umoddi3+0x130>
  80bcc4:	2011883a 	mov	r8,r4
  80bcc8:	2813883a 	mov	r9,r5
  80bccc:	4005883a 	mov	r2,r8
  80bcd0:	4807883a 	mov	r3,r9
  80bcd4:	dfc00e17 	ldw	ra,56(sp)
  80bcd8:	df000d17 	ldw	fp,52(sp)
  80bcdc:	ddc00c17 	ldw	r23,48(sp)
  80bce0:	dd800b17 	ldw	r22,44(sp)
  80bce4:	dd400a17 	ldw	r21,40(sp)
  80bce8:	dd000917 	ldw	r20,36(sp)
  80bcec:	dcc00817 	ldw	r19,32(sp)
  80bcf0:	dc800717 	ldw	r18,28(sp)
  80bcf4:	dc400617 	ldw	r17,24(sp)
  80bcf8:	dc000517 	ldw	r16,20(sp)
  80bcfc:	dec00f04 	addi	sp,sp,60
  80bd00:	f800283a 	ret
  80bd04:	00bfffd4 	movui	r2,65535
  80bd08:	11c05a36 	bltu	r2,r7,80be74 <__umoddi3+0x2a0>
  80bd0c:	00803fc4 	movi	r2,255
  80bd10:	11c0fe36 	bltu	r2,r7,80c10c <__umoddi3+0x538>
  80bd14:	000b883a 	mov	r5,zero
  80bd18:	0005883a 	mov	r2,zero
  80bd1c:	3084d83a 	srl	r2,r6,r2
  80bd20:	010020b4 	movhi	r4,130
  80bd24:	21349204 	addi	r4,r4,-11704
  80bd28:	01c00804 	movi	r7,32
  80bd2c:	1105883a 	add	r2,r2,r4
  80bd30:	10c00003 	ldbu	r3,0(r2)
  80bd34:	28c7883a 	add	r3,r5,r3
  80bd38:	38ebc83a 	sub	r21,r7,r3
  80bd3c:	a800851e 	bne	r21,zero,80bf54 <__umoddi3+0x380>
  80bd40:	35005236 	bltu	r6,r20,80be8c <__umoddi3+0x2b8>
  80bd44:	b400512e 	bgeu	r22,r16,80be8c <__umoddi3+0x2b8>
  80bd48:	b011883a 	mov	r8,r22
  80bd4c:	a013883a 	mov	r9,r20
  80bd50:	003fde06 	br	80bccc <__umoddi3+0xf8>
  80bd54:	00bfffd4 	movui	r2,65535
  80bd58:	11804036 	bltu	r2,r6,80be5c <__umoddi3+0x288>
  80bd5c:	00803fc4 	movi	r2,255
  80bd60:	1180ed36 	bltu	r2,r6,80c118 <__umoddi3+0x544>
  80bd64:	000b883a 	mov	r5,zero
  80bd68:	0005883a 	mov	r2,zero
  80bd6c:	8084d83a 	srl	r2,r16,r2
  80bd70:	010020b4 	movhi	r4,130
  80bd74:	21349204 	addi	r4,r4,-11704
  80bd78:	01800804 	movi	r6,32
  80bd7c:	1105883a 	add	r2,r2,r4
  80bd80:	10c00003 	ldbu	r3,0(r2)
  80bd84:	28c7883a 	add	r3,r5,r3
  80bd88:	30c7c83a 	sub	r3,r6,r3
  80bd8c:	1800bf1e 	bne	r3,zero,80c08c <__umoddi3+0x4b8>
  80bd90:	0039883a 	mov	fp,zero
  80bd94:	802ad43a 	srli	r21,r16,16
  80bd98:	a009883a 	mov	r4,r20
  80bd9c:	85ffffcc 	andi	r23,r16,65535
  80bda0:	a80b883a 	mov	r5,r21
  80bda4:	080c4580 	call	80c458 <__udivsi3>
  80bda8:	a009883a 	mov	r4,r20
  80bdac:	a80b883a 	mov	r5,r21
  80bdb0:	b8a3383a 	mul	r17,r23,r2
  80bdb4:	080c4600 	call	80c460 <__umodsi3>
  80bdb8:	1004943a 	slli	r2,r2,16
  80bdbc:	b006d43a 	srli	r3,r22,16
  80bdc0:	10c4b03a 	or	r2,r2,r3
  80bdc4:	1440032e 	bgeu	r2,r17,80bdd4 <__umoddi3+0x200>
  80bdc8:	1405883a 	add	r2,r2,r16
  80bdcc:	14000136 	bltu	r2,r16,80bdd4 <__umoddi3+0x200>
  80bdd0:	1440e536 	bltu	r2,r17,80c168 <__umoddi3+0x594>
  80bdd4:	1463c83a 	sub	r17,r2,r17
  80bdd8:	8809883a 	mov	r4,r17
  80bddc:	a80b883a 	mov	r5,r21
  80bde0:	080c4580 	call	80c458 <__udivsi3>
  80bde4:	8809883a 	mov	r4,r17
  80bde8:	b8a3383a 	mul	r17,r23,r2
  80bdec:	a80b883a 	mov	r5,r21
  80bdf0:	080c4600 	call	80c460 <__umodsi3>
  80bdf4:	1004943a 	slli	r2,r2,16
  80bdf8:	b0ffffcc 	andi	r3,r22,65535
  80bdfc:	10c4b03a 	or	r2,r2,r3
  80be00:	1440042e 	bgeu	r2,r17,80be14 <__umoddi3+0x240>
  80be04:	1405883a 	add	r2,r2,r16
  80be08:	14000236 	bltu	r2,r16,80be14 <__umoddi3+0x240>
  80be0c:	1440012e 	bgeu	r2,r17,80be14 <__umoddi3+0x240>
  80be10:	1405883a 	add	r2,r2,r16
  80be14:	1445c83a 	sub	r2,r2,r17
  80be18:	1724d83a 	srl	r18,r2,fp
  80be1c:	0013883a 	mov	r9,zero
  80be20:	9011883a 	mov	r8,r18
  80be24:	003fa906 	br	80bccc <__umoddi3+0xf8>
  80be28:	00804034 	movhi	r2,256
  80be2c:	10bfffc4 	addi	r2,r2,-1
  80be30:	1400b036 	bltu	r2,r16,80c0f4 <__umoddi3+0x520>
  80be34:	01400404 	movi	r5,16
  80be38:	2805883a 	mov	r2,r5
  80be3c:	003f7c06 	br	80bc30 <__umoddi3+0x5c>
  80be40:	01000044 	movi	r4,1
  80be44:	000b883a 	mov	r5,zero
  80be48:	080c4580 	call	80c458 <__udivsi3>
  80be4c:	1021883a 	mov	r16,r2
  80be50:	00bfffd4 	movui	r2,65535
  80be54:	143ff436 	bltu	r2,r16,80be28 <__umoddi3+0x254>
  80be58:	003f7106 	br	80bc20 <__umoddi3+0x4c>
  80be5c:	00804034 	movhi	r2,256
  80be60:	10bfffc4 	addi	r2,r2,-1
  80be64:	1180af36 	bltu	r2,r6,80c124 <__umoddi3+0x550>
  80be68:	01400404 	movi	r5,16
  80be6c:	2805883a 	mov	r2,r5
  80be70:	003fbe06 	br	80bd6c <__umoddi3+0x198>
  80be74:	00804034 	movhi	r2,256
  80be78:	10bfffc4 	addi	r2,r2,-1
  80be7c:	11c0ac36 	bltu	r2,r7,80c130 <__umoddi3+0x55c>
  80be80:	01400404 	movi	r5,16
  80be84:	2805883a 	mov	r2,r5
  80be88:	003fa406 	br	80bd1c <__umoddi3+0x148>
  80be8c:	b409c83a 	sub	r4,r22,r16
  80be90:	b105803a 	cmpltu	r2,r22,r4
  80be94:	a187c83a 	sub	r3,r20,r6
  80be98:	18a9c83a 	sub	r20,r3,r2
  80be9c:	202d883a 	mov	r22,r4
  80bea0:	003fa906 	br	80bd48 <__umoddi3+0x174>
  80bea4:	85e0983a 	sll	r16,r16,r23
  80bea8:	35c5c83a 	sub	r2,r6,r23
  80beac:	a0a2d83a 	srl	r17,r20,r2
  80beb0:	802ad43a 	srli	r21,r16,16
  80beb4:	b084d83a 	srl	r2,r22,r2
  80beb8:	a5c6983a 	sll	r3,r20,r23
  80bebc:	8809883a 	mov	r4,r17
  80bec0:	a80b883a 	mov	r5,r21
  80bec4:	1886b03a 	or	r3,r3,r2
  80bec8:	d8c00115 	stw	r3,4(sp)
  80becc:	853fffcc 	andi	r20,r16,65535
  80bed0:	080c4580 	call	80c458 <__udivsi3>
  80bed4:	8809883a 	mov	r4,r17
  80bed8:	a80b883a 	mov	r5,r21
  80bedc:	a0a3383a 	mul	r17,r20,r2
  80bee0:	080c4600 	call	80c460 <__umodsi3>
  80bee4:	d9000117 	ldw	r4,4(sp)
  80bee8:	1004943a 	slli	r2,r2,16
  80beec:	b839883a 	mov	fp,r23
  80bef0:	2006d43a 	srli	r3,r4,16
  80bef4:	10c4b03a 	or	r2,r2,r3
  80bef8:	1440022e 	bgeu	r2,r17,80bf04 <__umoddi3+0x330>
  80befc:	1405883a 	add	r2,r2,r16
  80bf00:	1400962e 	bgeu	r2,r16,80c15c <__umoddi3+0x588>
  80bf04:	1463c83a 	sub	r17,r2,r17
  80bf08:	8809883a 	mov	r4,r17
  80bf0c:	a80b883a 	mov	r5,r21
  80bf10:	080c4580 	call	80c458 <__udivsi3>
  80bf14:	8809883a 	mov	r4,r17
  80bf18:	a80b883a 	mov	r5,r21
  80bf1c:	a0a3383a 	mul	r17,r20,r2
  80bf20:	080c4600 	call	80c460 <__umodsi3>
  80bf24:	d9400117 	ldw	r5,4(sp)
  80bf28:	1004943a 	slli	r2,r2,16
  80bf2c:	28ffffcc 	andi	r3,r5,65535
  80bf30:	10c4b03a 	or	r2,r2,r3
  80bf34:	1440042e 	bgeu	r2,r17,80bf48 <__umoddi3+0x374>
  80bf38:	1405883a 	add	r2,r2,r16
  80bf3c:	14000236 	bltu	r2,r16,80bf48 <__umoddi3+0x374>
  80bf40:	1440012e 	bgeu	r2,r17,80bf48 <__umoddi3+0x374>
  80bf44:	1405883a 	add	r2,r2,r16
  80bf48:	b5ec983a 	sll	r22,r22,r23
  80bf4c:	1463c83a 	sub	r17,r2,r17
  80bf50:	003f4406 	br	80bc64 <__umoddi3+0x90>
  80bf54:	3d4fc83a 	sub	r7,r7,r21
  80bf58:	3546983a 	sll	r3,r6,r21
  80bf5c:	81c4d83a 	srl	r2,r16,r7
  80bf60:	a1e2d83a 	srl	r17,r20,r7
  80bf64:	a54c983a 	sll	r6,r20,r21
  80bf68:	18aeb03a 	or	r23,r3,r2
  80bf6c:	b828d43a 	srli	r20,r23,16
  80bf70:	b1c4d83a 	srl	r2,r22,r7
  80bf74:	8809883a 	mov	r4,r17
  80bf78:	a00b883a 	mov	r5,r20
  80bf7c:	308cb03a 	or	r6,r6,r2
  80bf80:	d9c00315 	stw	r7,12(sp)
  80bf84:	d9800215 	stw	r6,8(sp)
  80bf88:	080c4580 	call	80c458 <__udivsi3>
  80bf8c:	8809883a 	mov	r4,r17
  80bf90:	a00b883a 	mov	r5,r20
  80bf94:	1039883a 	mov	fp,r2
  80bf98:	080c4600 	call	80c460 <__umodsi3>
  80bf9c:	b8ffffcc 	andi	r3,r23,65535
  80bfa0:	d8c00415 	stw	r3,16(sp)
  80bfa4:	d9000217 	ldw	r4,8(sp)
  80bfa8:	d9400417 	ldw	r5,16(sp)
  80bfac:	1004943a 	slli	r2,r2,16
  80bfb0:	2006d43a 	srli	r3,r4,16
  80bfb4:	8560983a 	sll	r16,r16,r21
  80bfb8:	2f23383a 	mul	r17,r5,fp
  80bfbc:	10c4b03a 	or	r2,r2,r3
  80bfc0:	dc000015 	stw	r16,0(sp)
  80bfc4:	b56c983a 	sll	r22,r22,r21
  80bfc8:	1440032e 	bgeu	r2,r17,80bfd8 <__umoddi3+0x404>
  80bfcc:	15c5883a 	add	r2,r2,r23
  80bfd0:	e73fffc4 	addi	fp,fp,-1
  80bfd4:	15c05d2e 	bgeu	r2,r23,80c14c <__umoddi3+0x578>
  80bfd8:	1463c83a 	sub	r17,r2,r17
  80bfdc:	8809883a 	mov	r4,r17
  80bfe0:	a00b883a 	mov	r5,r20
  80bfe4:	080c4580 	call	80c458 <__udivsi3>
  80bfe8:	8809883a 	mov	r4,r17
  80bfec:	a00b883a 	mov	r5,r20
  80bff0:	1021883a 	mov	r16,r2
  80bff4:	080c4600 	call	80c460 <__umodsi3>
  80bff8:	d8c00417 	ldw	r3,16(sp)
  80bffc:	d9000217 	ldw	r4,8(sp)
  80c000:	1004943a 	slli	r2,r2,16
  80c004:	1c23383a 	mul	r17,r3,r16
  80c008:	20ffffcc 	andi	r3,r4,65535
  80c00c:	10ceb03a 	or	r7,r2,r3
  80c010:	3c40032e 	bgeu	r7,r17,80c020 <__umoddi3+0x44c>
  80c014:	3dcf883a 	add	r7,r7,r23
  80c018:	843fffc4 	addi	r16,r16,-1
  80c01c:	3dc0472e 	bgeu	r7,r23,80c13c <__umoddi3+0x568>
  80c020:	e004943a 	slli	r2,fp,16
  80c024:	d9400017 	ldw	r5,0(sp)
  80c028:	3c4fc83a 	sub	r7,r7,r17
  80c02c:	8084b03a 	or	r2,r16,r2
  80c030:	28ffffcc 	andi	r3,r5,65535
  80c034:	280cd43a 	srli	r6,r5,16
  80c038:	100ad43a 	srli	r5,r2,16
  80c03c:	10bfffcc 	andi	r2,r2,65535
  80c040:	10d1383a 	mul	r8,r2,r3
  80c044:	28c7383a 	mul	r3,r5,r3
  80c048:	1185383a 	mul	r2,r2,r6
  80c04c:	4008d43a 	srli	r4,r8,16
  80c050:	298b383a 	mul	r5,r5,r6
  80c054:	10c5883a 	add	r2,r2,r3
  80c058:	2089883a 	add	r4,r4,r2
  80c05c:	20c0022e 	bgeu	r4,r3,80c068 <__umoddi3+0x494>
  80c060:	00800074 	movhi	r2,1
  80c064:	288b883a 	add	r5,r5,r2
  80c068:	2004d43a 	srli	r2,r4,16
  80c06c:	2008943a 	slli	r4,r4,16
  80c070:	40ffffcc 	andi	r3,r8,65535
  80c074:	288b883a 	add	r5,r5,r2
  80c078:	20c9883a 	add	r4,r4,r3
  80c07c:	39400b36 	bltu	r7,r5,80c0ac <__umoddi3+0x4d8>
  80c080:	39403d26 	beq	r7,r5,80c178 <__umoddi3+0x5a4>
  80c084:	394bc83a 	sub	r5,r7,r5
  80c088:	00000f06 	br	80c0c8 <__umoddi3+0x4f4>
  80c08c:	30c5c83a 	sub	r2,r6,r3
  80c090:	1839883a 	mov	fp,r3
  80c094:	b084d83a 	srl	r2,r22,r2
  80c098:	a0c6983a 	sll	r3,r20,r3
  80c09c:	8720983a 	sll	r16,r16,fp
  80c0a0:	b72c983a 	sll	r22,r22,fp
  80c0a4:	18a8b03a 	or	r20,r3,r2
  80c0a8:	003f3a06 	br	80bd94 <__umoddi3+0x1c0>
  80c0ac:	d8c00017 	ldw	r3,0(sp)
  80c0b0:	20c5c83a 	sub	r2,r4,r3
  80c0b4:	2089803a 	cmpltu	r4,r4,r2
  80c0b8:	2dc7c83a 	sub	r3,r5,r23
  80c0bc:	1907c83a 	sub	r3,r3,r4
  80c0c0:	38cbc83a 	sub	r5,r7,r3
  80c0c4:	1009883a 	mov	r4,r2
  80c0c8:	b105c83a 	sub	r2,r22,r4
  80c0cc:	b087803a 	cmpltu	r3,r22,r2
  80c0d0:	28c7c83a 	sub	r3,r5,r3
  80c0d4:	d9400317 	ldw	r5,12(sp)
  80c0d8:	1544d83a 	srl	r2,r2,r21
  80c0dc:	1948983a 	sll	r4,r3,r5
  80c0e0:	1d46d83a 	srl	r3,r3,r21
  80c0e4:	20a4b03a 	or	r18,r4,r2
  80c0e8:	9011883a 	mov	r8,r18
  80c0ec:	1813883a 	mov	r9,r3
  80c0f0:	003ef606 	br	80bccc <__umoddi3+0xf8>
  80c0f4:	01400604 	movi	r5,24
  80c0f8:	2805883a 	mov	r2,r5
  80c0fc:	003ecc06 	br	80bc30 <__umoddi3+0x5c>
  80c100:	01400204 	movi	r5,8
  80c104:	2805883a 	mov	r2,r5
  80c108:	003ec906 	br	80bc30 <__umoddi3+0x5c>
  80c10c:	01400204 	movi	r5,8
  80c110:	2805883a 	mov	r2,r5
  80c114:	003f0106 	br	80bd1c <__umoddi3+0x148>
  80c118:	01400204 	movi	r5,8
  80c11c:	2805883a 	mov	r2,r5
  80c120:	003f1206 	br	80bd6c <__umoddi3+0x198>
  80c124:	01400604 	movi	r5,24
  80c128:	2805883a 	mov	r2,r5
  80c12c:	003f0f06 	br	80bd6c <__umoddi3+0x198>
  80c130:	01400604 	movi	r5,24
  80c134:	2805883a 	mov	r2,r5
  80c138:	003ef806 	br	80bd1c <__umoddi3+0x148>
  80c13c:	3c7fb82e 	bgeu	r7,r17,80c020 <__umoddi3+0x44c>
  80c140:	843fffc4 	addi	r16,r16,-1
  80c144:	3dcf883a 	add	r7,r7,r23
  80c148:	003fb506 	br	80c020 <__umoddi3+0x44c>
  80c14c:	147fa22e 	bgeu	r2,r17,80bfd8 <__umoddi3+0x404>
  80c150:	e73fffc4 	addi	fp,fp,-1
  80c154:	15c5883a 	add	r2,r2,r23
  80c158:	003f9f06 	br	80bfd8 <__umoddi3+0x404>
  80c15c:	147f692e 	bgeu	r2,r17,80bf04 <__umoddi3+0x330>
  80c160:	1405883a 	add	r2,r2,r16
  80c164:	003f6706 	br	80bf04 <__umoddi3+0x330>
  80c168:	1405883a 	add	r2,r2,r16
  80c16c:	003f1906 	br	80bdd4 <__umoddi3+0x200>
  80c170:	1405883a 	add	r2,r2,r16
  80c174:	003ec906 	br	80bc9c <__umoddi3+0xc8>
  80c178:	b13fcc36 	bltu	r22,r4,80c0ac <__umoddi3+0x4d8>
  80c17c:	000b883a 	mov	r5,zero
  80c180:	003fd106 	br	80c0c8 <__umoddi3+0x4f4>

0080c184 <__eqdf2>:
  80c184:	deffef04 	addi	sp,sp,-68
  80c188:	dc400f15 	stw	r17,60(sp)
  80c18c:	dc400404 	addi	r17,sp,16
  80c190:	2005883a 	mov	r2,r4
  80c194:	2807883a 	mov	r3,r5
  80c198:	dc000e15 	stw	r16,56(sp)
  80c19c:	d809883a 	mov	r4,sp
  80c1a0:	880b883a 	mov	r5,r17
  80c1a4:	dc000904 	addi	r16,sp,36
  80c1a8:	d8c00115 	stw	r3,4(sp)
  80c1ac:	d8800015 	stw	r2,0(sp)
  80c1b0:	d9800215 	stw	r6,8(sp)
  80c1b4:	dfc01015 	stw	ra,64(sp)
  80c1b8:	d9c00315 	stw	r7,12(sp)
  80c1bc:	080407c0 	call	80407c <__unpack_d>
  80c1c0:	d9000204 	addi	r4,sp,8
  80c1c4:	800b883a 	mov	r5,r16
  80c1c8:	080407c0 	call	80407c <__unpack_d>
  80c1cc:	d8800417 	ldw	r2,16(sp)
  80c1d0:	00c00044 	movi	r3,1
  80c1d4:	180d883a 	mov	r6,r3
  80c1d8:	1880062e 	bgeu	r3,r2,80c1f4 <__eqdf2+0x70>
  80c1dc:	d8800917 	ldw	r2,36(sp)
  80c1e0:	8809883a 	mov	r4,r17
  80c1e4:	800b883a 	mov	r5,r16
  80c1e8:	1880022e 	bgeu	r3,r2,80c1f4 <__eqdf2+0x70>
  80c1ec:	08041b40 	call	8041b4 <__fpcmp_parts_d>
  80c1f0:	100d883a 	mov	r6,r2
  80c1f4:	3005883a 	mov	r2,r6
  80c1f8:	dfc01017 	ldw	ra,64(sp)
  80c1fc:	dc400f17 	ldw	r17,60(sp)
  80c200:	dc000e17 	ldw	r16,56(sp)
  80c204:	dec01104 	addi	sp,sp,68
  80c208:	f800283a 	ret

0080c20c <__nedf2>:
  80c20c:	deffef04 	addi	sp,sp,-68
  80c210:	dc400f15 	stw	r17,60(sp)
  80c214:	dc400404 	addi	r17,sp,16
  80c218:	2005883a 	mov	r2,r4
  80c21c:	2807883a 	mov	r3,r5
  80c220:	dc000e15 	stw	r16,56(sp)
  80c224:	d809883a 	mov	r4,sp
  80c228:	880b883a 	mov	r5,r17
  80c22c:	dc000904 	addi	r16,sp,36
  80c230:	d8c00115 	stw	r3,4(sp)
  80c234:	d8800015 	stw	r2,0(sp)
  80c238:	d9800215 	stw	r6,8(sp)
  80c23c:	dfc01015 	stw	ra,64(sp)
  80c240:	d9c00315 	stw	r7,12(sp)
  80c244:	080407c0 	call	80407c <__unpack_d>
  80c248:	d9000204 	addi	r4,sp,8
  80c24c:	800b883a 	mov	r5,r16
  80c250:	080407c0 	call	80407c <__unpack_d>
  80c254:	d8800417 	ldw	r2,16(sp)
  80c258:	00c00044 	movi	r3,1
  80c25c:	180d883a 	mov	r6,r3
  80c260:	1880062e 	bgeu	r3,r2,80c27c <__nedf2+0x70>
  80c264:	d8800917 	ldw	r2,36(sp)
  80c268:	8809883a 	mov	r4,r17
  80c26c:	800b883a 	mov	r5,r16
  80c270:	1880022e 	bgeu	r3,r2,80c27c <__nedf2+0x70>
  80c274:	08041b40 	call	8041b4 <__fpcmp_parts_d>
  80c278:	100d883a 	mov	r6,r2
  80c27c:	3005883a 	mov	r2,r6
  80c280:	dfc01017 	ldw	ra,64(sp)
  80c284:	dc400f17 	ldw	r17,60(sp)
  80c288:	dc000e17 	ldw	r16,56(sp)
  80c28c:	dec01104 	addi	sp,sp,68
  80c290:	f800283a 	ret

0080c294 <__gtdf2>:
  80c294:	deffef04 	addi	sp,sp,-68
  80c298:	dc400f15 	stw	r17,60(sp)
  80c29c:	dc400404 	addi	r17,sp,16
  80c2a0:	2005883a 	mov	r2,r4
  80c2a4:	2807883a 	mov	r3,r5
  80c2a8:	dc000e15 	stw	r16,56(sp)
  80c2ac:	d809883a 	mov	r4,sp
  80c2b0:	880b883a 	mov	r5,r17
  80c2b4:	dc000904 	addi	r16,sp,36
  80c2b8:	d8c00115 	stw	r3,4(sp)
  80c2bc:	d8800015 	stw	r2,0(sp)
  80c2c0:	d9800215 	stw	r6,8(sp)
  80c2c4:	dfc01015 	stw	ra,64(sp)
  80c2c8:	d9c00315 	stw	r7,12(sp)
  80c2cc:	080407c0 	call	80407c <__unpack_d>
  80c2d0:	d9000204 	addi	r4,sp,8
  80c2d4:	800b883a 	mov	r5,r16
  80c2d8:	080407c0 	call	80407c <__unpack_d>
  80c2dc:	d8800417 	ldw	r2,16(sp)
  80c2e0:	00c00044 	movi	r3,1
  80c2e4:	01bfffc4 	movi	r6,-1
  80c2e8:	1880062e 	bgeu	r3,r2,80c304 <__gtdf2+0x70>
  80c2ec:	d8800917 	ldw	r2,36(sp)
  80c2f0:	8809883a 	mov	r4,r17
  80c2f4:	800b883a 	mov	r5,r16
  80c2f8:	1880022e 	bgeu	r3,r2,80c304 <__gtdf2+0x70>
  80c2fc:	08041b40 	call	8041b4 <__fpcmp_parts_d>
  80c300:	100d883a 	mov	r6,r2
  80c304:	3005883a 	mov	r2,r6
  80c308:	dfc01017 	ldw	ra,64(sp)
  80c30c:	dc400f17 	ldw	r17,60(sp)
  80c310:	dc000e17 	ldw	r16,56(sp)
  80c314:	dec01104 	addi	sp,sp,68
  80c318:	f800283a 	ret

0080c31c <udivmodsi4>:
  80c31c:	29001b2e 	bgeu	r5,r4,80c38c <udivmodsi4+0x70>
  80c320:	28001a16 	blt	r5,zero,80c38c <udivmodsi4+0x70>
  80c324:	00800044 	movi	r2,1
  80c328:	0007883a 	mov	r3,zero
  80c32c:	01c007c4 	movi	r7,31
  80c330:	00000306 	br	80c340 <udivmodsi4+0x24>
  80c334:	19c01326 	beq	r3,r7,80c384 <udivmodsi4+0x68>
  80c338:	18c00044 	addi	r3,r3,1
  80c33c:	28000416 	blt	r5,zero,80c350 <udivmodsi4+0x34>
  80c340:	294b883a 	add	r5,r5,r5
  80c344:	1085883a 	add	r2,r2,r2
  80c348:	293ffa36 	bltu	r5,r4,80c334 <udivmodsi4+0x18>
  80c34c:	10000d26 	beq	r2,zero,80c384 <udivmodsi4+0x68>
  80c350:	0007883a 	mov	r3,zero
  80c354:	21400236 	bltu	r4,r5,80c360 <udivmodsi4+0x44>
  80c358:	2149c83a 	sub	r4,r4,r5
  80c35c:	1886b03a 	or	r3,r3,r2
  80c360:	1004d07a 	srli	r2,r2,1
  80c364:	280ad07a 	srli	r5,r5,1
  80c368:	103ffa1e 	bne	r2,zero,80c354 <udivmodsi4+0x38>
  80c36c:	30000226 	beq	r6,zero,80c378 <udivmodsi4+0x5c>
  80c370:	2005883a 	mov	r2,r4
  80c374:	f800283a 	ret
  80c378:	1809883a 	mov	r4,r3
  80c37c:	2005883a 	mov	r2,r4
  80c380:	f800283a 	ret
  80c384:	0007883a 	mov	r3,zero
  80c388:	003ff806 	br	80c36c <udivmodsi4+0x50>
  80c38c:	00800044 	movi	r2,1
  80c390:	0007883a 	mov	r3,zero
  80c394:	003fef06 	br	80c354 <udivmodsi4+0x38>

0080c398 <__divsi3>:
  80c398:	defffe04 	addi	sp,sp,-8
  80c39c:	dc000015 	stw	r16,0(sp)
  80c3a0:	dfc00115 	stw	ra,4(sp)
  80c3a4:	0021883a 	mov	r16,zero
  80c3a8:	20000c16 	blt	r4,zero,80c3dc <__divsi3+0x44>
  80c3ac:	000d883a 	mov	r6,zero
  80c3b0:	28000e16 	blt	r5,zero,80c3ec <__divsi3+0x54>
  80c3b4:	080c31c0 	call	80c31c <udivmodsi4>
  80c3b8:	1007883a 	mov	r3,r2
  80c3bc:	8005003a 	cmpeq	r2,r16,zero
  80c3c0:	1000011e 	bne	r2,zero,80c3c8 <__divsi3+0x30>
  80c3c4:	00c7c83a 	sub	r3,zero,r3
  80c3c8:	1805883a 	mov	r2,r3
  80c3cc:	dfc00117 	ldw	ra,4(sp)
  80c3d0:	dc000017 	ldw	r16,0(sp)
  80c3d4:	dec00204 	addi	sp,sp,8
  80c3d8:	f800283a 	ret
  80c3dc:	0109c83a 	sub	r4,zero,r4
  80c3e0:	04000044 	movi	r16,1
  80c3e4:	000d883a 	mov	r6,zero
  80c3e8:	283ff20e 	bge	r5,zero,80c3b4 <__divsi3+0x1c>
  80c3ec:	014bc83a 	sub	r5,zero,r5
  80c3f0:	8021003a 	cmpeq	r16,r16,zero
  80c3f4:	003fef06 	br	80c3b4 <__divsi3+0x1c>

0080c3f8 <__modsi3>:
  80c3f8:	deffff04 	addi	sp,sp,-4
  80c3fc:	dfc00015 	stw	ra,0(sp)
  80c400:	01800044 	movi	r6,1
  80c404:	2807883a 	mov	r3,r5
  80c408:	20000416 	blt	r4,zero,80c41c <__modsi3+0x24>
  80c40c:	28000c16 	blt	r5,zero,80c440 <__modsi3+0x48>
  80c410:	dfc00017 	ldw	ra,0(sp)
  80c414:	dec00104 	addi	sp,sp,4
  80c418:	080c31c1 	jmpi	80c31c <udivmodsi4>
  80c41c:	0109c83a 	sub	r4,zero,r4
  80c420:	28000b16 	blt	r5,zero,80c450 <__modsi3+0x58>
  80c424:	180b883a 	mov	r5,r3
  80c428:	01800044 	movi	r6,1
  80c42c:	080c31c0 	call	80c31c <udivmodsi4>
  80c430:	0085c83a 	sub	r2,zero,r2
  80c434:	dfc00017 	ldw	ra,0(sp)
  80c438:	dec00104 	addi	sp,sp,4
  80c43c:	f800283a 	ret
  80c440:	014bc83a 	sub	r5,zero,r5
  80c444:	dfc00017 	ldw	ra,0(sp)
  80c448:	dec00104 	addi	sp,sp,4
  80c44c:	080c31c1 	jmpi	80c31c <udivmodsi4>
  80c450:	0147c83a 	sub	r3,zero,r5
  80c454:	003ff306 	br	80c424 <__modsi3+0x2c>

0080c458 <__udivsi3>:
  80c458:	000d883a 	mov	r6,zero
  80c45c:	080c31c1 	jmpi	80c31c <udivmodsi4>

0080c460 <__umodsi3>:
  80c460:	01800044 	movi	r6,1
  80c464:	080c31c1 	jmpi	80c31c <udivmodsi4>

0080c468 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80c468:	defff804 	addi	sp,sp,-32
  80c46c:	dfc00715 	stw	ra,28(sp)
  80c470:	df000615 	stw	fp,24(sp)
  80c474:	df000604 	addi	fp,sp,24
  80c478:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80c47c:	e0bffc17 	ldw	r2,-16(fp)
  80c480:	1004803a 	cmplt	r2,r2,zero
  80c484:	1000081e 	bne	r2,zero,80c4a8 <close+0x40>
  80c488:	e0bffc17 	ldw	r2,-16(fp)
  80c48c:	10800324 	muli	r2,r2,12
  80c490:	1007883a 	mov	r3,r2
  80c494:	008020b4 	movhi	r2,130
  80c498:	10b7cb04 	addi	r2,r2,-8404
  80c49c:	1887883a 	add	r3,r3,r2
  80c4a0:	e0ffff15 	stw	r3,-4(fp)
  80c4a4:	00000106 	br	80c4ac <close+0x44>
  80c4a8:	e03fff15 	stw	zero,-4(fp)
  80c4ac:	e0bfff17 	ldw	r2,-4(fp)
  80c4b0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80c4b4:	e0bffb17 	ldw	r2,-20(fp)
  80c4b8:	1005003a 	cmpeq	r2,r2,zero
  80c4bc:	10001d1e 	bne	r2,zero,80c534 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80c4c0:	e0bffb17 	ldw	r2,-20(fp)
  80c4c4:	10800017 	ldw	r2,0(r2)
  80c4c8:	10800417 	ldw	r2,16(r2)
  80c4cc:	1005003a 	cmpeq	r2,r2,zero
  80c4d0:	1000071e 	bne	r2,zero,80c4f0 <close+0x88>
  80c4d4:	e0bffb17 	ldw	r2,-20(fp)
  80c4d8:	10800017 	ldw	r2,0(r2)
  80c4dc:	10800417 	ldw	r2,16(r2)
  80c4e0:	e13ffb17 	ldw	r4,-20(fp)
  80c4e4:	103ee83a 	callr	r2
  80c4e8:	e0bffe15 	stw	r2,-8(fp)
  80c4ec:	00000106 	br	80c4f4 <close+0x8c>
  80c4f0:	e03ffe15 	stw	zero,-8(fp)
  80c4f4:	e0bffe17 	ldw	r2,-8(fp)
  80c4f8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c4fc:	e13ffc17 	ldw	r4,-16(fp)
  80c500:	080ce740 	call	80ce74 <alt_release_fd>
    if (rval < 0)
  80c504:	e0bffa17 	ldw	r2,-24(fp)
  80c508:	1004403a 	cmpge	r2,r2,zero
  80c50c:	1000071e 	bne	r2,zero,80c52c <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80c510:	080c5640 	call	80c564 <alt_get_errno>
  80c514:	e0fffa17 	ldw	r3,-24(fp)
  80c518:	00c7c83a 	sub	r3,zero,r3
  80c51c:	10c00015 	stw	r3,0(r2)
      return -1;
  80c520:	00bfffc4 	movi	r2,-1
  80c524:	e0bffd15 	stw	r2,-12(fp)
  80c528:	00000806 	br	80c54c <close+0xe4>
    }
    return 0;
  80c52c:	e03ffd15 	stw	zero,-12(fp)
  80c530:	00000606 	br	80c54c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c534:	080c5640 	call	80c564 <alt_get_errno>
  80c538:	1007883a 	mov	r3,r2
  80c53c:	00801444 	movi	r2,81
  80c540:	18800015 	stw	r2,0(r3)
    return -1;
  80c544:	00bfffc4 	movi	r2,-1
  80c548:	e0bffd15 	stw	r2,-12(fp)
  80c54c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80c550:	e037883a 	mov	sp,fp
  80c554:	dfc00117 	ldw	ra,4(sp)
  80c558:	df000017 	ldw	fp,0(sp)
  80c55c:	dec00204 	addi	sp,sp,8
  80c560:	f800283a 	ret

0080c564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c564:	defffd04 	addi	sp,sp,-12
  80c568:	dfc00215 	stw	ra,8(sp)
  80c56c:	df000115 	stw	fp,4(sp)
  80c570:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c574:	008020b4 	movhi	r2,130
  80c578:	10bc7304 	addi	r2,r2,-3636
  80c57c:	10800017 	ldw	r2,0(r2)
  80c580:	1005003a 	cmpeq	r2,r2,zero
  80c584:	1000061e 	bne	r2,zero,80c5a0 <alt_get_errno+0x3c>
  80c588:	008020b4 	movhi	r2,130
  80c58c:	10bc7304 	addi	r2,r2,-3636
  80c590:	10800017 	ldw	r2,0(r2)
  80c594:	103ee83a 	callr	r2
  80c598:	e0bfff15 	stw	r2,-4(fp)
  80c59c:	00000306 	br	80c5ac <alt_get_errno+0x48>
  80c5a0:	008020b4 	movhi	r2,130
  80c5a4:	10bcb204 	addi	r2,r2,-3384
  80c5a8:	e0bfff15 	stw	r2,-4(fp)
  80c5ac:	e0bfff17 	ldw	r2,-4(fp)
}
  80c5b0:	e037883a 	mov	sp,fp
  80c5b4:	dfc00117 	ldw	ra,4(sp)
  80c5b8:	df000017 	ldw	fp,0(sp)
  80c5bc:	dec00204 	addi	sp,sp,8
  80c5c0:	f800283a 	ret

0080c5c4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80c5c4:	defffc04 	addi	sp,sp,-16
  80c5c8:	df000315 	stw	fp,12(sp)
  80c5cc:	df000304 	addi	fp,sp,12
  80c5d0:	e13ffd15 	stw	r4,-12(fp)
  80c5d4:	e17ffe15 	stw	r5,-8(fp)
  80c5d8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80c5dc:	e0bfff17 	ldw	r2,-4(fp)
}
  80c5e0:	e037883a 	mov	sp,fp
  80c5e4:	df000017 	ldw	fp,0(sp)
  80c5e8:	dec00104 	addi	sp,sp,4
  80c5ec:	f800283a 	ret

0080c5f0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80c5f0:	defff904 	addi	sp,sp,-28
  80c5f4:	dfc00615 	stw	ra,24(sp)
  80c5f8:	df000515 	stw	fp,20(sp)
  80c5fc:	df000504 	addi	fp,sp,20
  80c600:	e13ffc15 	stw	r4,-16(fp)
  80c604:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c608:	e0bffc17 	ldw	r2,-16(fp)
  80c60c:	1004803a 	cmplt	r2,r2,zero
  80c610:	1000081e 	bne	r2,zero,80c634 <fstat+0x44>
  80c614:	e0bffc17 	ldw	r2,-16(fp)
  80c618:	10800324 	muli	r2,r2,12
  80c61c:	1007883a 	mov	r3,r2
  80c620:	008020b4 	movhi	r2,130
  80c624:	10b7cb04 	addi	r2,r2,-8404
  80c628:	1887883a 	add	r3,r3,r2
  80c62c:	e0ffff15 	stw	r3,-4(fp)
  80c630:	00000106 	br	80c638 <fstat+0x48>
  80c634:	e03fff15 	stw	zero,-4(fp)
  80c638:	e0bfff17 	ldw	r2,-4(fp)
  80c63c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80c640:	e0bffb17 	ldw	r2,-20(fp)
  80c644:	1005003a 	cmpeq	r2,r2,zero
  80c648:	1000121e 	bne	r2,zero,80c694 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80c64c:	e0bffb17 	ldw	r2,-20(fp)
  80c650:	10800017 	ldw	r2,0(r2)
  80c654:	10800817 	ldw	r2,32(r2)
  80c658:	1005003a 	cmpeq	r2,r2,zero
  80c65c:	1000081e 	bne	r2,zero,80c680 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80c660:	e0bffb17 	ldw	r2,-20(fp)
  80c664:	10800017 	ldw	r2,0(r2)
  80c668:	10800817 	ldw	r2,32(r2)
  80c66c:	e13ffb17 	ldw	r4,-20(fp)
  80c670:	e17ffd17 	ldw	r5,-12(fp)
  80c674:	103ee83a 	callr	r2
  80c678:	e0bffe15 	stw	r2,-8(fp)
  80c67c:	00000b06 	br	80c6ac <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80c680:	e0fffd17 	ldw	r3,-12(fp)
  80c684:	00880004 	movi	r2,8192
  80c688:	18800115 	stw	r2,4(r3)
      return 0;
  80c68c:	e03ffe15 	stw	zero,-8(fp)
  80c690:	00000606 	br	80c6ac <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c694:	080c6c40 	call	80c6c4 <alt_get_errno>
  80c698:	1007883a 	mov	r3,r2
  80c69c:	00801444 	movi	r2,81
  80c6a0:	18800015 	stw	r2,0(r3)
    return -1;
  80c6a4:	00bfffc4 	movi	r2,-1
  80c6a8:	e0bffe15 	stw	r2,-8(fp)
  80c6ac:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80c6b0:	e037883a 	mov	sp,fp
  80c6b4:	dfc00117 	ldw	ra,4(sp)
  80c6b8:	df000017 	ldw	fp,0(sp)
  80c6bc:	dec00204 	addi	sp,sp,8
  80c6c0:	f800283a 	ret

0080c6c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c6c4:	defffd04 	addi	sp,sp,-12
  80c6c8:	dfc00215 	stw	ra,8(sp)
  80c6cc:	df000115 	stw	fp,4(sp)
  80c6d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c6d4:	008020b4 	movhi	r2,130
  80c6d8:	10bc7304 	addi	r2,r2,-3636
  80c6dc:	10800017 	ldw	r2,0(r2)
  80c6e0:	1005003a 	cmpeq	r2,r2,zero
  80c6e4:	1000061e 	bne	r2,zero,80c700 <alt_get_errno+0x3c>
  80c6e8:	008020b4 	movhi	r2,130
  80c6ec:	10bc7304 	addi	r2,r2,-3636
  80c6f0:	10800017 	ldw	r2,0(r2)
  80c6f4:	103ee83a 	callr	r2
  80c6f8:	e0bfff15 	stw	r2,-4(fp)
  80c6fc:	00000306 	br	80c70c <alt_get_errno+0x48>
  80c700:	008020b4 	movhi	r2,130
  80c704:	10bcb204 	addi	r2,r2,-3384
  80c708:	e0bfff15 	stw	r2,-4(fp)
  80c70c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c710:	e037883a 	mov	sp,fp
  80c714:	dfc00117 	ldw	ra,4(sp)
  80c718:	df000017 	ldw	fp,0(sp)
  80c71c:	dec00204 	addi	sp,sp,8
  80c720:	f800283a 	ret

0080c724 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80c724:	deffeb04 	addi	sp,sp,-84
  80c728:	dfc01415 	stw	ra,80(sp)
  80c72c:	df001315 	stw	fp,76(sp)
  80c730:	df001304 	addi	fp,sp,76
  80c734:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c738:	e0bffd17 	ldw	r2,-12(fp)
  80c73c:	1004803a 	cmplt	r2,r2,zero
  80c740:	1000081e 	bne	r2,zero,80c764 <isatty+0x40>
  80c744:	e0bffd17 	ldw	r2,-12(fp)
  80c748:	10800324 	muli	r2,r2,12
  80c74c:	1007883a 	mov	r3,r2
  80c750:	008020b4 	movhi	r2,130
  80c754:	10b7cb04 	addi	r2,r2,-8404
  80c758:	1887883a 	add	r3,r3,r2
  80c75c:	e0ffff15 	stw	r3,-4(fp)
  80c760:	00000106 	br	80c768 <isatty+0x44>
  80c764:	e03fff15 	stw	zero,-4(fp)
  80c768:	e0bfff17 	ldw	r2,-4(fp)
  80c76c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80c770:	e0bfed17 	ldw	r2,-76(fp)
  80c774:	1005003a 	cmpeq	r2,r2,zero
  80c778:	10000f1e 	bne	r2,zero,80c7b8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80c77c:	e0bfed17 	ldw	r2,-76(fp)
  80c780:	10800017 	ldw	r2,0(r2)
  80c784:	10800817 	ldw	r2,32(r2)
  80c788:	1004c03a 	cmpne	r2,r2,zero
  80c78c:	1000031e 	bne	r2,zero,80c79c <isatty+0x78>
    {
      return 1;
  80c790:	00800044 	movi	r2,1
  80c794:	e0bffe15 	stw	r2,-8(fp)
  80c798:	00000c06 	br	80c7cc <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80c79c:	e17fee04 	addi	r5,fp,-72
  80c7a0:	e13ffd17 	ldw	r4,-12(fp)
  80c7a4:	080c5f00 	call	80c5f0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80c7a8:	e0bfef17 	ldw	r2,-68(fp)
  80c7ac:	10880020 	cmpeqi	r2,r2,8192
  80c7b0:	e0bffe15 	stw	r2,-8(fp)
  80c7b4:	00000506 	br	80c7cc <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c7b8:	080c7e40 	call	80c7e4 <alt_get_errno>
  80c7bc:	1007883a 	mov	r3,r2
  80c7c0:	00801444 	movi	r2,81
  80c7c4:	18800015 	stw	r2,0(r3)
    return 0;
  80c7c8:	e03ffe15 	stw	zero,-8(fp)
  80c7cc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80c7d0:	e037883a 	mov	sp,fp
  80c7d4:	dfc00117 	ldw	ra,4(sp)
  80c7d8:	df000017 	ldw	fp,0(sp)
  80c7dc:	dec00204 	addi	sp,sp,8
  80c7e0:	f800283a 	ret

0080c7e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c7e4:	defffd04 	addi	sp,sp,-12
  80c7e8:	dfc00215 	stw	ra,8(sp)
  80c7ec:	df000115 	stw	fp,4(sp)
  80c7f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c7f4:	008020b4 	movhi	r2,130
  80c7f8:	10bc7304 	addi	r2,r2,-3636
  80c7fc:	10800017 	ldw	r2,0(r2)
  80c800:	1005003a 	cmpeq	r2,r2,zero
  80c804:	1000061e 	bne	r2,zero,80c820 <alt_get_errno+0x3c>
  80c808:	008020b4 	movhi	r2,130
  80c80c:	10bc7304 	addi	r2,r2,-3636
  80c810:	10800017 	ldw	r2,0(r2)
  80c814:	103ee83a 	callr	r2
  80c818:	e0bfff15 	stw	r2,-4(fp)
  80c81c:	00000306 	br	80c82c <alt_get_errno+0x48>
  80c820:	008020b4 	movhi	r2,130
  80c824:	10bcb204 	addi	r2,r2,-3384
  80c828:	e0bfff15 	stw	r2,-4(fp)
  80c82c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c830:	e037883a 	mov	sp,fp
  80c834:	dfc00117 	ldw	ra,4(sp)
  80c838:	df000017 	ldw	fp,0(sp)
  80c83c:	dec00204 	addi	sp,sp,8
  80c840:	f800283a 	ret

0080c844 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80c844:	defff804 	addi	sp,sp,-32
  80c848:	dfc00715 	stw	ra,28(sp)
  80c84c:	df000615 	stw	fp,24(sp)
  80c850:	df000604 	addi	fp,sp,24
  80c854:	e13ffc15 	stw	r4,-16(fp)
  80c858:	e17ffd15 	stw	r5,-12(fp)
  80c85c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80c860:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c864:	e0bffc17 	ldw	r2,-16(fp)
  80c868:	1004803a 	cmplt	r2,r2,zero
  80c86c:	1000081e 	bne	r2,zero,80c890 <lseek+0x4c>
  80c870:	e0bffc17 	ldw	r2,-16(fp)
  80c874:	10800324 	muli	r2,r2,12
  80c878:	1007883a 	mov	r3,r2
  80c87c:	008020b4 	movhi	r2,130
  80c880:	10b7cb04 	addi	r2,r2,-8404
  80c884:	1887883a 	add	r3,r3,r2
  80c888:	e0ffff15 	stw	r3,-4(fp)
  80c88c:	00000106 	br	80c894 <lseek+0x50>
  80c890:	e03fff15 	stw	zero,-4(fp)
  80c894:	e0bfff17 	ldw	r2,-4(fp)
  80c898:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80c89c:	e0bffb17 	ldw	r2,-20(fp)
  80c8a0:	1005003a 	cmpeq	r2,r2,zero
  80c8a4:	1000111e 	bne	r2,zero,80c8ec <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80c8a8:	e0bffb17 	ldw	r2,-20(fp)
  80c8ac:	10800017 	ldw	r2,0(r2)
  80c8b0:	10800717 	ldw	r2,28(r2)
  80c8b4:	1005003a 	cmpeq	r2,r2,zero
  80c8b8:	1000091e 	bne	r2,zero,80c8e0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80c8bc:	e0bffb17 	ldw	r2,-20(fp)
  80c8c0:	10800017 	ldw	r2,0(r2)
  80c8c4:	10800717 	ldw	r2,28(r2)
  80c8c8:	e13ffb17 	ldw	r4,-20(fp)
  80c8cc:	e17ffd17 	ldw	r5,-12(fp)
  80c8d0:	e1bffe17 	ldw	r6,-8(fp)
  80c8d4:	103ee83a 	callr	r2
  80c8d8:	e0bffa15 	stw	r2,-24(fp)
  80c8dc:	00000506 	br	80c8f4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80c8e0:	00bfde84 	movi	r2,-134
  80c8e4:	e0bffa15 	stw	r2,-24(fp)
  80c8e8:	00000206 	br	80c8f4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80c8ec:	00bfebc4 	movi	r2,-81
  80c8f0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80c8f4:	e0bffa17 	ldw	r2,-24(fp)
  80c8f8:	1004403a 	cmpge	r2,r2,zero
  80c8fc:	1000071e 	bne	r2,zero,80c91c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80c900:	080c9340 	call	80c934 <alt_get_errno>
  80c904:	1007883a 	mov	r3,r2
  80c908:	e0bffa17 	ldw	r2,-24(fp)
  80c90c:	0085c83a 	sub	r2,zero,r2
  80c910:	18800015 	stw	r2,0(r3)
    rc = -1;
  80c914:	00bfffc4 	movi	r2,-1
  80c918:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80c91c:	e0bffa17 	ldw	r2,-24(fp)
}
  80c920:	e037883a 	mov	sp,fp
  80c924:	dfc00117 	ldw	ra,4(sp)
  80c928:	df000017 	ldw	fp,0(sp)
  80c92c:	dec00204 	addi	sp,sp,8
  80c930:	f800283a 	ret

0080c934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c934:	defffd04 	addi	sp,sp,-12
  80c938:	dfc00215 	stw	ra,8(sp)
  80c93c:	df000115 	stw	fp,4(sp)
  80c940:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c944:	008020b4 	movhi	r2,130
  80c948:	10bc7304 	addi	r2,r2,-3636
  80c94c:	10800017 	ldw	r2,0(r2)
  80c950:	1005003a 	cmpeq	r2,r2,zero
  80c954:	1000061e 	bne	r2,zero,80c970 <alt_get_errno+0x3c>
  80c958:	008020b4 	movhi	r2,130
  80c95c:	10bc7304 	addi	r2,r2,-3636
  80c960:	10800017 	ldw	r2,0(r2)
  80c964:	103ee83a 	callr	r2
  80c968:	e0bfff15 	stw	r2,-4(fp)
  80c96c:	00000306 	br	80c97c <alt_get_errno+0x48>
  80c970:	008020b4 	movhi	r2,130
  80c974:	10bcb204 	addi	r2,r2,-3384
  80c978:	e0bfff15 	stw	r2,-4(fp)
  80c97c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c980:	e037883a 	mov	sp,fp
  80c984:	dfc00117 	ldw	ra,4(sp)
  80c988:	df000017 	ldw	fp,0(sp)
  80c98c:	dec00204 	addi	sp,sp,8
  80c990:	f800283a 	ret

0080c994 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80c994:	defffb04 	addi	sp,sp,-20
  80c998:	dfc00415 	stw	ra,16(sp)
  80c99c:	df000315 	stw	fp,12(sp)
  80c9a0:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80c9a4:	0009883a 	mov	r4,zero
  80c9a8:	08156bc0 	call	8156bc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80c9ac:	080dd180 	call	80dd18 <OSInit>
  80c9b0:	01000044 	movi	r4,1
  80c9b4:	0812bdc0 	call	812bdc <OSSemCreate>
  80c9b8:	1007883a 	mov	r3,r2
  80c9bc:	008020b4 	movhi	r2,130
  80c9c0:	10bcb804 	addi	r2,r2,-3360
  80c9c4:	10c00015 	stw	r3,0(r2)
  80c9c8:	01000044 	movi	r4,1
  80c9cc:	0812bdc0 	call	812bdc <OSSemCreate>
  80c9d0:	1007883a 	mov	r3,r2
  80c9d4:	008020b4 	movhi	r2,130
  80c9d8:	10bcba04 	addi	r2,r2,-3352
  80c9dc:	10c00015 	stw	r3,0(r2)
  80c9e0:	008020b4 	movhi	r2,130
  80c9e4:	10bcb304 	addi	r2,r2,-3380
  80c9e8:	e0bffd15 	stw	r2,-12(fp)
  80c9ec:	00800044 	movi	r2,1
  80c9f0:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80c9f4:	e13ffe0b 	ldhu	r4,-8(fp)
  80c9f8:	0812bdc0 	call	812bdc <OSSemCreate>
  80c9fc:	1007883a 	mov	r3,r2
  80ca00:	e0bffd17 	ldw	r2,-12(fp)
  80ca04:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80ca08:	08156f00 	call	8156f0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80ca0c:	010020b4 	movhi	r4,130
  80ca10:	21355404 	addi	r4,r4,-10928
  80ca14:	014020b4 	movhi	r5,130
  80ca18:	29755404 	addi	r5,r5,-10928
  80ca1c:	018020b4 	movhi	r6,130
  80ca20:	31b55404 	addi	r6,r6,-10928
  80ca24:	081b7880 	call	81b788 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80ca28:	081b5680 	call	81b568 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80ca2c:	010020b4 	movhi	r4,130
  80ca30:	212d7304 	addi	r4,r4,-18996
  80ca34:	081c5480 	call	81c548 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80ca38:	d1204d17 	ldw	r4,-32460(gp)
  80ca3c:	d1604e17 	ldw	r5,-32456(gp)
  80ca40:	d1a04f17 	ldw	r6,-32452(gp)
  80ca44:	080238c0 	call	80238c <main>
  80ca48:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80ca4c:	01000044 	movi	r4,1
  80ca50:	080c4680 	call	80c468 <close>
  exit (result);
  80ca54:	e13fff17 	ldw	r4,-4(fp)
  80ca58:	081c55c0 	call	81c55c <exit>

0080ca5c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  80ca5c:	defff204 	addi	sp,sp,-56
  80ca60:	dfc00a15 	stw	ra,40(sp)
  80ca64:	df000915 	stw	fp,36(sp)
  80ca68:	df000904 	addi	fp,sp,36
  80ca6c:	e1400215 	stw	r5,8(fp)
  80ca70:	e1800315 	stw	r6,12(fp)
  80ca74:	e1c00415 	stw	r7,16(fp)
  80ca78:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
  80ca7c:	e0800204 	addi	r2,fp,8
  80ca80:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  80ca84:	e0bfff17 	ldw	r2,-4(fp)
  80ca88:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
  80ca8c:	00007806 	br	80cc70 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  80ca90:	e0bffc07 	ldb	r2,-16(fp)
  80ca94:	10800960 	cmpeqi	r2,r2,37
  80ca98:	1000031e 	bne	r2,zero,80caa8 <alt_printf+0x4c>
        {
            alt_putchar(c);
  80ca9c:	e13ffc07 	ldb	r4,-16(fp)
  80caa0:	080ccb40 	call	80ccb4 <alt_putchar>
  80caa4:	00007206 	br	80cc70 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  80caa8:	e0bffd17 	ldw	r2,-12(fp)
  80caac:	10800003 	ldbu	r2,0(r2)
  80cab0:	e0bffc05 	stb	r2,-16(fp)
  80cab4:	e0bffc07 	ldb	r2,-16(fp)
  80cab8:	1004c03a 	cmpne	r2,r2,zero
  80cabc:	1007883a 	mov	r3,r2
  80cac0:	e0bffd17 	ldw	r2,-12(fp)
  80cac4:	10800044 	addi	r2,r2,1
  80cac8:	e0bffd15 	stw	r2,-12(fp)
  80cacc:	18803fcc 	andi	r2,r3,255
  80cad0:	1005003a 	cmpeq	r2,r2,zero
  80cad4:	1000721e 	bne	r2,zero,80cca0 <alt_printf+0x244>
            {
                if (c == '%')
  80cad8:	e0bffc07 	ldb	r2,-16(fp)
  80cadc:	10800958 	cmpnei	r2,r2,37
  80cae0:	1000031e 	bne	r2,zero,80caf0 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  80cae4:	e13ffc07 	ldb	r4,-16(fp)
  80cae8:	080ccb40 	call	80ccb4 <alt_putchar>
  80caec:	00006006 	br	80cc70 <alt_printf+0x214>
                } 
                else if (c == 'c')
  80caf0:	e0bffc07 	ldb	r2,-16(fp)
  80caf4:	108018d8 	cmpnei	r2,r2,99
  80caf8:	1000091e 	bne	r2,zero,80cb20 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
  80cafc:	e0fffe17 	ldw	r3,-8(fp)
  80cb00:	18800104 	addi	r2,r3,4
  80cb04:	e0bffe15 	stw	r2,-8(fp)
  80cb08:	1805883a 	mov	r2,r3
  80cb0c:	10800017 	ldw	r2,0(r2)
  80cb10:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
  80cb14:	e13ffb17 	ldw	r4,-20(fp)
  80cb18:	080ccb40 	call	80ccb4 <alt_putchar>
  80cb1c:	00005406 	br	80cc70 <alt_printf+0x214>
                }
                else if (c == 'x')
  80cb20:	e0bffc07 	ldb	r2,-16(fp)
  80cb24:	10801e18 	cmpnei	r2,r2,120
  80cb28:	1000371e 	bne	r2,zero,80cc08 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  80cb2c:	e0fffe17 	ldw	r3,-8(fp)
  80cb30:	18800104 	addi	r2,r3,4
  80cb34:	e0bffe15 	stw	r2,-8(fp)
  80cb38:	1805883a 	mov	r2,r3
  80cb3c:	10800017 	ldw	r2,0(r2)
  80cb40:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  80cb44:	e0bffa17 	ldw	r2,-24(fp)
  80cb48:	1004c03a 	cmpne	r2,r2,zero
  80cb4c:	1000031e 	bne	r2,zero,80cb5c <alt_printf+0x100>
                    {
                        alt_putchar('0');
  80cb50:	01000c04 	movi	r4,48
  80cb54:	080ccb40 	call	80ccb4 <alt_putchar>
                        continue;
  80cb58:	00004506 	br	80cc70 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  80cb5c:	00800704 	movi	r2,28
  80cb60:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
  80cb64:	00000306 	br	80cb74 <alt_printf+0x118>
                        digit_shift -= 4;
  80cb68:	e0bff817 	ldw	r2,-32(fp)
  80cb6c:	10bfff04 	addi	r2,r2,-4
  80cb70:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  80cb74:	00c003c4 	movi	r3,15
  80cb78:	e0bff817 	ldw	r2,-32(fp)
  80cb7c:	1884983a 	sll	r2,r3,r2
  80cb80:	1007883a 	mov	r3,r2
  80cb84:	e0bffa17 	ldw	r2,-24(fp)
  80cb88:	1884703a 	and	r2,r3,r2
  80cb8c:	1005003a 	cmpeq	r2,r2,zero
  80cb90:	103ff51e 	bne	r2,zero,80cb68 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  80cb94:	00001806 	br	80cbf8 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  80cb98:	00c003c4 	movi	r3,15
  80cb9c:	e0bff817 	ldw	r2,-32(fp)
  80cba0:	1884983a 	sll	r2,r3,r2
  80cba4:	1007883a 	mov	r3,r2
  80cba8:	e0bffa17 	ldw	r2,-24(fp)
  80cbac:	1886703a 	and	r3,r3,r2
  80cbb0:	e0bff817 	ldw	r2,-32(fp)
  80cbb4:	1884d83a 	srl	r2,r3,r2
  80cbb8:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
  80cbbc:	e0bff917 	ldw	r2,-28(fp)
  80cbc0:	108002a8 	cmpgeui	r2,r2,10
  80cbc4:	1000041e 	bne	r2,zero,80cbd8 <alt_printf+0x17c>
                            c = '0' + digit;
  80cbc8:	e0bff917 	ldw	r2,-28(fp)
  80cbcc:	10800c04 	addi	r2,r2,48
  80cbd0:	e0bffc05 	stb	r2,-16(fp)
  80cbd4:	00000306 	br	80cbe4 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
  80cbd8:	e0bff917 	ldw	r2,-28(fp)
  80cbdc:	108015c4 	addi	r2,r2,87
  80cbe0:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
  80cbe4:	e13ffc07 	ldb	r4,-16(fp)
  80cbe8:	080ccb40 	call	80ccb4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  80cbec:	e0bff817 	ldw	r2,-32(fp)
  80cbf0:	10bfff04 	addi	r2,r2,-4
  80cbf4:	e0bff815 	stw	r2,-32(fp)
  80cbf8:	e0bff817 	ldw	r2,-32(fp)
  80cbfc:	1004403a 	cmpge	r2,r2,zero
  80cc00:	103fe51e 	bne	r2,zero,80cb98 <alt_printf+0x13c>
  80cc04:	00001a06 	br	80cc70 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  80cc08:	e0bffc07 	ldb	r2,-16(fp)
  80cc0c:	10801cd8 	cmpnei	r2,r2,115
  80cc10:	1000171e 	bne	r2,zero,80cc70 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  80cc14:	e0fffe17 	ldw	r3,-8(fp)
  80cc18:	18800104 	addi	r2,r3,4
  80cc1c:	e0bffe15 	stw	r2,-8(fp)
  80cc20:	1805883a 	mov	r2,r3
  80cc24:	10800017 	ldw	r2,0(r2)
  80cc28:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
  80cc2c:	00000906 	br	80cc54 <alt_printf+0x1f8>
                      alt_putchar(*s++);
  80cc30:	e0bff717 	ldw	r2,-36(fp)
  80cc34:	10800003 	ldbu	r2,0(r2)
  80cc38:	11003fcc 	andi	r4,r2,255
  80cc3c:	2100201c 	xori	r4,r4,128
  80cc40:	213fe004 	addi	r4,r4,-128
  80cc44:	e0bff717 	ldw	r2,-36(fp)
  80cc48:	10800044 	addi	r2,r2,1
  80cc4c:	e0bff715 	stw	r2,-36(fp)
  80cc50:	080ccb40 	call	80ccb4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  80cc54:	e0bff717 	ldw	r2,-36(fp)
  80cc58:	10800003 	ldbu	r2,0(r2)
  80cc5c:	10803fcc 	andi	r2,r2,255
  80cc60:	1080201c 	xori	r2,r2,128
  80cc64:	10bfe004 	addi	r2,r2,-128
  80cc68:	1004c03a 	cmpne	r2,r2,zero
  80cc6c:	103ff01e 	bne	r2,zero,80cc30 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  80cc70:	e0bffd17 	ldw	r2,-12(fp)
  80cc74:	10800003 	ldbu	r2,0(r2)
  80cc78:	e0bffc05 	stb	r2,-16(fp)
  80cc7c:	e0bffc07 	ldb	r2,-16(fp)
  80cc80:	1004c03a 	cmpne	r2,r2,zero
  80cc84:	1007883a 	mov	r3,r2
  80cc88:	e0bffd17 	ldw	r2,-12(fp)
  80cc8c:	10800044 	addi	r2,r2,1
  80cc90:	e0bffd15 	stw	r2,-12(fp)
  80cc94:	18803fcc 	andi	r2,r3,255
  80cc98:	1004c03a 	cmpne	r2,r2,zero
  80cc9c:	103f7c1e 	bne	r2,zero,80ca90 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
  80cca0:	e037883a 	mov	sp,fp
  80cca4:	dfc00117 	ldw	ra,4(sp)
  80cca8:	df000017 	ldw	fp,0(sp)
  80ccac:	dec00504 	addi	sp,sp,20
  80ccb0:	f800283a 	ret

0080ccb4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  80ccb4:	defffd04 	addi	sp,sp,-12
  80ccb8:	dfc00215 	stw	ra,8(sp)
  80ccbc:	df000115 	stw	fp,4(sp)
  80ccc0:	df000104 	addi	fp,sp,4
  80ccc4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  80ccc8:	008020b4 	movhi	r2,130
  80cccc:	10bc6804 	addi	r2,r2,-3680
  80ccd0:	10800017 	ldw	r2,0(r2)
  80ccd4:	11400217 	ldw	r5,8(r2)
  80ccd8:	e13fff17 	ldw	r4,-4(fp)
  80ccdc:	081c6080 	call	81c608 <putc>
#endif
}
  80cce0:	e037883a 	mov	sp,fp
  80cce4:	dfc00117 	ldw	ra,4(sp)
  80cce8:	df000017 	ldw	fp,0(sp)
  80ccec:	dec00204 	addi	sp,sp,8
  80ccf0:	f800283a 	ret

0080ccf4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80ccf4:	defff704 	addi	sp,sp,-36
  80ccf8:	dfc00815 	stw	ra,32(sp)
  80ccfc:	df000715 	stw	fp,28(sp)
  80cd00:	df000704 	addi	fp,sp,28
  80cd04:	e13ffb15 	stw	r4,-20(fp)
  80cd08:	e17ffc15 	stw	r5,-16(fp)
  80cd0c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80cd10:	e0bffb17 	ldw	r2,-20(fp)
  80cd14:	1004803a 	cmplt	r2,r2,zero
  80cd18:	1000081e 	bne	r2,zero,80cd3c <read+0x48>
  80cd1c:	e0bffb17 	ldw	r2,-20(fp)
  80cd20:	10800324 	muli	r2,r2,12
  80cd24:	1007883a 	mov	r3,r2
  80cd28:	008020b4 	movhi	r2,130
  80cd2c:	10b7cb04 	addi	r2,r2,-8404
  80cd30:	1887883a 	add	r3,r3,r2
  80cd34:	e0ffff15 	stw	r3,-4(fp)
  80cd38:	00000106 	br	80cd40 <read+0x4c>
  80cd3c:	e03fff15 	stw	zero,-4(fp)
  80cd40:	e0bfff17 	ldw	r2,-4(fp)
  80cd44:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80cd48:	e0bffa17 	ldw	r2,-24(fp)
  80cd4c:	1005003a 	cmpeq	r2,r2,zero
  80cd50:	1000241e 	bne	r2,zero,80cde4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80cd54:	e0bffa17 	ldw	r2,-24(fp)
  80cd58:	10800217 	ldw	r2,8(r2)
  80cd5c:	108000cc 	andi	r2,r2,3
  80cd60:	10800060 	cmpeqi	r2,r2,1
  80cd64:	10001a1e 	bne	r2,zero,80cdd0 <read+0xdc>
  80cd68:	e0bffa17 	ldw	r2,-24(fp)
  80cd6c:	10800017 	ldw	r2,0(r2)
  80cd70:	10800517 	ldw	r2,20(r2)
  80cd74:	1005003a 	cmpeq	r2,r2,zero
  80cd78:	1000151e 	bne	r2,zero,80cdd0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80cd7c:	e0bffa17 	ldw	r2,-24(fp)
  80cd80:	10800017 	ldw	r2,0(r2)
  80cd84:	10800517 	ldw	r2,20(r2)
  80cd88:	e17ffc17 	ldw	r5,-16(fp)
  80cd8c:	e1bffd17 	ldw	r6,-12(fp)
  80cd90:	e13ffa17 	ldw	r4,-24(fp)
  80cd94:	103ee83a 	callr	r2
  80cd98:	e0bff915 	stw	r2,-28(fp)
  80cd9c:	e0bff917 	ldw	r2,-28(fp)
  80cda0:	1004403a 	cmpge	r2,r2,zero
  80cda4:	1000071e 	bne	r2,zero,80cdc4 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80cda8:	080ce140 	call	80ce14 <alt_get_errno>
  80cdac:	e0fff917 	ldw	r3,-28(fp)
  80cdb0:	00c7c83a 	sub	r3,zero,r3
  80cdb4:	10c00015 	stw	r3,0(r2)
          return -1;
  80cdb8:	00bfffc4 	movi	r2,-1
  80cdbc:	e0bffe15 	stw	r2,-8(fp)
  80cdc0:	00000e06 	br	80cdfc <read+0x108>
        }
        return rval;
  80cdc4:	e0bff917 	ldw	r2,-28(fp)
  80cdc8:	e0bffe15 	stw	r2,-8(fp)
  80cdcc:	00000b06 	br	80cdfc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80cdd0:	080ce140 	call	80ce14 <alt_get_errno>
  80cdd4:	1007883a 	mov	r3,r2
  80cdd8:	00800344 	movi	r2,13
  80cddc:	18800015 	stw	r2,0(r3)
  80cde0:	00000406 	br	80cdf4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80cde4:	080ce140 	call	80ce14 <alt_get_errno>
  80cde8:	1007883a 	mov	r3,r2
  80cdec:	00801444 	movi	r2,81
  80cdf0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80cdf4:	00bfffc4 	movi	r2,-1
  80cdf8:	e0bffe15 	stw	r2,-8(fp)
  80cdfc:	e0bffe17 	ldw	r2,-8(fp)
}
  80ce00:	e037883a 	mov	sp,fp
  80ce04:	dfc00117 	ldw	ra,4(sp)
  80ce08:	df000017 	ldw	fp,0(sp)
  80ce0c:	dec00204 	addi	sp,sp,8
  80ce10:	f800283a 	ret

0080ce14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ce14:	defffd04 	addi	sp,sp,-12
  80ce18:	dfc00215 	stw	ra,8(sp)
  80ce1c:	df000115 	stw	fp,4(sp)
  80ce20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ce24:	008020b4 	movhi	r2,130
  80ce28:	10bc7304 	addi	r2,r2,-3636
  80ce2c:	10800017 	ldw	r2,0(r2)
  80ce30:	1005003a 	cmpeq	r2,r2,zero
  80ce34:	1000061e 	bne	r2,zero,80ce50 <alt_get_errno+0x3c>
  80ce38:	008020b4 	movhi	r2,130
  80ce3c:	10bc7304 	addi	r2,r2,-3636
  80ce40:	10800017 	ldw	r2,0(r2)
  80ce44:	103ee83a 	callr	r2
  80ce48:	e0bfff15 	stw	r2,-4(fp)
  80ce4c:	00000306 	br	80ce5c <alt_get_errno+0x48>
  80ce50:	008020b4 	movhi	r2,130
  80ce54:	10bcb204 	addi	r2,r2,-3384
  80ce58:	e0bfff15 	stw	r2,-4(fp)
  80ce5c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ce60:	e037883a 	mov	sp,fp
  80ce64:	dfc00117 	ldw	ra,4(sp)
  80ce68:	df000017 	ldw	fp,0(sp)
  80ce6c:	dec00204 	addi	sp,sp,8
  80ce70:	f800283a 	ret

0080ce74 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80ce74:	defffe04 	addi	sp,sp,-8
  80ce78:	df000115 	stw	fp,4(sp)
  80ce7c:	df000104 	addi	fp,sp,4
  80ce80:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80ce84:	e0bfff17 	ldw	r2,-4(fp)
  80ce88:	108000d0 	cmplti	r2,r2,3
  80ce8c:	10000d1e 	bne	r2,zero,80cec4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80ce90:	e0bfff17 	ldw	r2,-4(fp)
  80ce94:	00c020b4 	movhi	r3,130
  80ce98:	18f7cb04 	addi	r3,r3,-8404
  80ce9c:	10800324 	muli	r2,r2,12
  80cea0:	10c5883a 	add	r2,r2,r3
  80cea4:	10800204 	addi	r2,r2,8
  80cea8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80ceac:	e0bfff17 	ldw	r2,-4(fp)
  80ceb0:	00c020b4 	movhi	r3,130
  80ceb4:	18f7cb04 	addi	r3,r3,-8404
  80ceb8:	10800324 	muli	r2,r2,12
  80cebc:	10c5883a 	add	r2,r2,r3
  80cec0:	10000015 	stw	zero,0(r2)
  }
}
  80cec4:	e037883a 	mov	sp,fp
  80cec8:	df000017 	ldw	fp,0(sp)
  80cecc:	dec00104 	addi	sp,sp,4
  80ced0:	f800283a 	ret

0080ced4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80ced4:	defff804 	addi	sp,sp,-32
  80ced8:	df000715 	stw	fp,28(sp)
  80cedc:	df000704 	addi	fp,sp,28
  80cee0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cee4:	0005303a 	rdctl	r2,status
  80cee8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ceec:	e0fffb17 	ldw	r3,-20(fp)
  80cef0:	00bfff84 	movi	r2,-2
  80cef4:	1884703a 	and	r2,r3,r2
  80cef8:	1001703a 	wrctl	status,r2
  
  return context;
  80cefc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80cf00:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80cf04:	d0a00d17 	ldw	r2,-32716(gp)
  80cf08:	10c000c4 	addi	r3,r2,3
  80cf0c:	00bfff04 	movi	r2,-4
  80cf10:	1884703a 	and	r2,r3,r2
  80cf14:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80cf18:	d0e00d17 	ldw	r3,-32716(gp)
  80cf1c:	e0bffe17 	ldw	r2,-8(fp)
  80cf20:	1887883a 	add	r3,r3,r2
  80cf24:	00804034 	movhi	r2,256
  80cf28:	10800004 	addi	r2,r2,0
  80cf2c:	10c0072e 	bgeu	r2,r3,80cf4c <sbrk+0x78>
  80cf30:	e0bffd17 	ldw	r2,-12(fp)
  80cf34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cf38:	e0bffa17 	ldw	r2,-24(fp)
  80cf3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80cf40:	00bfffc4 	movi	r2,-1
  80cf44:	e0bfff15 	stw	r2,-4(fp)
  80cf48:	00000c06 	br	80cf7c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80cf4c:	d0a00d17 	ldw	r2,-32716(gp)
  80cf50:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80cf54:	d0e00d17 	ldw	r3,-32716(gp)
  80cf58:	e0bffe17 	ldw	r2,-8(fp)
  80cf5c:	1885883a 	add	r2,r3,r2
  80cf60:	d0a00d15 	stw	r2,-32716(gp)
  80cf64:	e0bffd17 	ldw	r2,-12(fp)
  80cf68:	e0bff915 	stw	r2,-28(fp)
  80cf6c:	e0bff917 	ldw	r2,-28(fp)
  80cf70:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80cf74:	e0bffc17 	ldw	r2,-16(fp)
  80cf78:	e0bfff15 	stw	r2,-4(fp)
  80cf7c:	e0bfff17 	ldw	r2,-4(fp)
} 
  80cf80:	e037883a 	mov	sp,fp
  80cf84:	df000017 	ldw	fp,0(sp)
  80cf88:	dec00104 	addi	sp,sp,4
  80cf8c:	f800283a 	ret

0080cf90 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80cf90:	defff704 	addi	sp,sp,-36
  80cf94:	dfc00815 	stw	ra,32(sp)
  80cf98:	df000715 	stw	fp,28(sp)
  80cf9c:	df000704 	addi	fp,sp,28
  80cfa0:	e13ffb15 	stw	r4,-20(fp)
  80cfa4:	e17ffc15 	stw	r5,-16(fp)
  80cfa8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80cfac:	e0bffb17 	ldw	r2,-20(fp)
  80cfb0:	1004803a 	cmplt	r2,r2,zero
  80cfb4:	1000081e 	bne	r2,zero,80cfd8 <write+0x48>
  80cfb8:	e0bffb17 	ldw	r2,-20(fp)
  80cfbc:	10800324 	muli	r2,r2,12
  80cfc0:	1007883a 	mov	r3,r2
  80cfc4:	008020b4 	movhi	r2,130
  80cfc8:	10b7cb04 	addi	r2,r2,-8404
  80cfcc:	1887883a 	add	r3,r3,r2
  80cfd0:	e0ffff15 	stw	r3,-4(fp)
  80cfd4:	00000106 	br	80cfdc <write+0x4c>
  80cfd8:	e03fff15 	stw	zero,-4(fp)
  80cfdc:	e0bfff17 	ldw	r2,-4(fp)
  80cfe0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80cfe4:	e0bffa17 	ldw	r2,-24(fp)
  80cfe8:	1005003a 	cmpeq	r2,r2,zero
  80cfec:	1000241e 	bne	r2,zero,80d080 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80cff0:	e0bffa17 	ldw	r2,-24(fp)
  80cff4:	10800217 	ldw	r2,8(r2)
  80cff8:	108000cc 	andi	r2,r2,3
  80cffc:	1005003a 	cmpeq	r2,r2,zero
  80d000:	10001a1e 	bne	r2,zero,80d06c <write+0xdc>
  80d004:	e0bffa17 	ldw	r2,-24(fp)
  80d008:	10800017 	ldw	r2,0(r2)
  80d00c:	10800617 	ldw	r2,24(r2)
  80d010:	1005003a 	cmpeq	r2,r2,zero
  80d014:	1000151e 	bne	r2,zero,80d06c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80d018:	e0bffa17 	ldw	r2,-24(fp)
  80d01c:	10800017 	ldw	r2,0(r2)
  80d020:	10800617 	ldw	r2,24(r2)
  80d024:	e17ffc17 	ldw	r5,-16(fp)
  80d028:	e1bffd17 	ldw	r6,-12(fp)
  80d02c:	e13ffa17 	ldw	r4,-24(fp)
  80d030:	103ee83a 	callr	r2
  80d034:	e0bff915 	stw	r2,-28(fp)
  80d038:	e0bff917 	ldw	r2,-28(fp)
  80d03c:	1004403a 	cmpge	r2,r2,zero
  80d040:	1000071e 	bne	r2,zero,80d060 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80d044:	080d0b00 	call	80d0b0 <alt_get_errno>
  80d048:	e0fff917 	ldw	r3,-28(fp)
  80d04c:	00c7c83a 	sub	r3,zero,r3
  80d050:	10c00015 	stw	r3,0(r2)
        return -1;
  80d054:	00bfffc4 	movi	r2,-1
  80d058:	e0bffe15 	stw	r2,-8(fp)
  80d05c:	00000e06 	br	80d098 <write+0x108>
      }
      return rval;
  80d060:	e0bff917 	ldw	r2,-28(fp)
  80d064:	e0bffe15 	stw	r2,-8(fp)
  80d068:	00000b06 	br	80d098 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80d06c:	080d0b00 	call	80d0b0 <alt_get_errno>
  80d070:	1007883a 	mov	r3,r2
  80d074:	00800344 	movi	r2,13
  80d078:	18800015 	stw	r2,0(r3)
  80d07c:	00000406 	br	80d090 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80d080:	080d0b00 	call	80d0b0 <alt_get_errno>
  80d084:	1007883a 	mov	r3,r2
  80d088:	00801444 	movi	r2,81
  80d08c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80d090:	00bfffc4 	movi	r2,-1
  80d094:	e0bffe15 	stw	r2,-8(fp)
  80d098:	e0bffe17 	ldw	r2,-8(fp)
}
  80d09c:	e037883a 	mov	sp,fp
  80d0a0:	dfc00117 	ldw	ra,4(sp)
  80d0a4:	df000017 	ldw	fp,0(sp)
  80d0a8:	dec00204 	addi	sp,sp,8
  80d0ac:	f800283a 	ret

0080d0b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d0b0:	defffd04 	addi	sp,sp,-12
  80d0b4:	dfc00215 	stw	ra,8(sp)
  80d0b8:	df000115 	stw	fp,4(sp)
  80d0bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d0c0:	008020b4 	movhi	r2,130
  80d0c4:	10bc7304 	addi	r2,r2,-3636
  80d0c8:	10800017 	ldw	r2,0(r2)
  80d0cc:	1005003a 	cmpeq	r2,r2,zero
  80d0d0:	1000061e 	bne	r2,zero,80d0ec <alt_get_errno+0x3c>
  80d0d4:	008020b4 	movhi	r2,130
  80d0d8:	10bc7304 	addi	r2,r2,-3636
  80d0dc:	10800017 	ldw	r2,0(r2)
  80d0e0:	103ee83a 	callr	r2
  80d0e4:	e0bfff15 	stw	r2,-4(fp)
  80d0e8:	00000306 	br	80d0f8 <alt_get_errno+0x48>
  80d0ec:	008020b4 	movhi	r2,130
  80d0f0:	10bcb204 	addi	r2,r2,-3384
  80d0f4:	e0bfff15 	stw	r2,-4(fp)
  80d0f8:	e0bfff17 	ldw	r2,-4(fp)
}
  80d0fc:	e037883a 	mov	sp,fp
  80d100:	dfc00117 	ldw	ra,4(sp)
  80d104:	df000017 	ldw	fp,0(sp)
  80d108:	dec00204 	addi	sp,sp,8
  80d10c:	f800283a 	ret

0080d110 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  80d110:	deffdf04 	addi	sp,sp,-132
  80d114:	dfc02015 	stw	ra,128(sp)
  80d118:	df001f15 	stw	fp,124(sp)
  80d11c:	df001f04 	addi	fp,sp,124
  80d120:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80d124:	e17fe204 	addi	r5,fp,-120
  80d128:	01003fc4 	movi	r4,255
  80d12c:	0814f640 	call	814f64 <OSTaskQuery>
  80d130:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80d134:	e0bffe83 	ldbu	r2,-6(fp)
  80d138:	10803fcc 	andi	r2,r2,255
  80d13c:	1004c03a 	cmpne	r2,r2,zero
  80d140:	1000191e 	bne	r2,zero,80d1a8 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  80d144:	e0bfee83 	ldbu	r2,-70(fp)
  80d148:	10803fcc 	andi	r2,r2,255
  80d14c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  80d150:	d1205117 	ldw	r4,-32444(gp)
  80d154:	e17ffd04 	addi	r5,fp,-12
  80d158:	08134b00 	call	8134b0 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  80d15c:	e0bffe43 	ldbu	r2,-7(fp)
  80d160:	10803fcc 	andi	r2,r2,255
  80d164:	1005003a 	cmpeq	r2,r2,zero
  80d168:	1000071e 	bne	r2,zero,80d188 <__env_lock+0x78>
  80d16c:	d0e00e17 	ldw	r3,-32712(gp)
  80d170:	e0bfe117 	ldw	r2,-124(fp)
  80d174:	10c0041e 	bne	r2,r3,80d188 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  80d178:	d0a05017 	ldw	r2,-32448(gp)
  80d17c:	10800044 	addi	r2,r2,1
  80d180:	d0a05015 	stw	r2,-32448(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  80d184:	00000806 	br	80d1a8 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  80d188:	d1205117 	ldw	r4,-32444(gp)
  80d18c:	e1bffe84 	addi	r6,fp,-6
  80d190:	000b883a 	mov	r5,zero
  80d194:	0812f900 	call	812f90 <OSSemPend>
    locks  = 1;
  80d198:	00800044 	movi	r2,1
  80d19c:	d0a05015 	stw	r2,-32448(gp)
    lockid = id;
  80d1a0:	e0bfe117 	ldw	r2,-124(fp)
  80d1a4:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80d1a8:	e037883a 	mov	sp,fp
  80d1ac:	dfc00117 	ldw	ra,4(sp)
  80d1b0:	df000017 	ldw	fp,0(sp)
  80d1b4:	dec00204 	addi	sp,sp,8
  80d1b8:	f800283a 	ret

0080d1bc <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  80d1bc:	defffd04 	addi	sp,sp,-12
  80d1c0:	dfc00215 	stw	ra,8(sp)
  80d1c4:	df000115 	stw	fp,4(sp)
  80d1c8:	df000104 	addi	fp,sp,4
  80d1cc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  80d1d0:	d0a05017 	ldw	r2,-32448(gp)
  80d1d4:	1005003a 	cmpeq	r2,r2,zero
  80d1d8:	10000a1e 	bne	r2,zero,80d204 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  80d1dc:	d0a05017 	ldw	r2,-32448(gp)
  80d1e0:	10bfffc4 	addi	r2,r2,-1
  80d1e4:	d0a05015 	stw	r2,-32448(gp)
  80d1e8:	d0a05017 	ldw	r2,-32448(gp)
  80d1ec:	1004c03a 	cmpne	r2,r2,zero
  80d1f0:	1000041e 	bne	r2,zero,80d204 <__env_unlock+0x48>
  {
    lockid = -1;
  80d1f4:	00bfffc4 	movi	r2,-1
  80d1f8:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
  80d1fc:	d1205117 	ldw	r4,-32444(gp)
  80d200:	08133880 	call	813388 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80d204:	e037883a 	mov	sp,fp
  80d208:	dfc00117 	ldw	ra,4(sp)
  80d20c:	df000017 	ldw	fp,0(sp)
  80d210:	dec00204 	addi	sp,sp,8
  80d214:	f800283a 	ret

0080d218 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  80d218:	deffdb04 	addi	sp,sp,-148
  80d21c:	dfc02415 	stw	ra,144(sp)
  80d220:	df002315 	stw	fp,140(sp)
  80d224:	df002304 	addi	fp,sp,140
  80d228:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d22c:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  80d230:	008020b4 	movhi	r2,130
  80d234:	10bcbb44 	addi	r2,r2,-3347
  80d238:	10800003 	ldbu	r2,0(r2)
  80d23c:	10803fcc 	andi	r2,r2,255
  80d240:	10800058 	cmpnei	r2,r2,1
  80d244:	1000311e 	bne	r2,zero,80d30c <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80d248:	e17fe204 	addi	r5,fp,-120
  80d24c:	01003fc4 	movi	r4,255
  80d250:	0814f640 	call	814f64 <OSTaskQuery>
  80d254:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80d258:	e0bffe83 	ldbu	r2,-6(fp)
  80d25c:	10803fcc 	andi	r2,r2,255
  80d260:	1004c03a 	cmpne	r2,r2,zero
  80d264:	1000291e 	bne	r2,zero,80d30c <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  80d268:	e0bfee83 	ldbu	r2,-70(fp)
  80d26c:	10803fcc 	andi	r2,r2,255
  80d270:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  80d274:	d1205317 	ldw	r4,-32436(gp)
  80d278:	e17ffd04 	addi	r5,fp,-12
  80d27c:	08134b00 	call	8134b0 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d280:	0005303a 	rdctl	r2,status
  80d284:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d288:	e0ffdf17 	ldw	r3,-132(fp)
  80d28c:	00bfff84 	movi	r2,-2
  80d290:	1884703a 	and	r2,r3,r2
  80d294:	1001703a 	wrctl	status,r2
  
  return context;
  80d298:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  80d29c:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  80d2a0:	e0bffd0b 	ldhu	r2,-12(fp)
  80d2a4:	10bfffcc 	andi	r2,r2,65535
  80d2a8:	1004c03a 	cmpne	r2,r2,zero
  80d2ac:	10000b1e 	bne	r2,zero,80d2dc <__malloc_lock+0xc4>
  80d2b0:	d0e00f17 	ldw	r3,-32708(gp)
  80d2b4:	e0bfe117 	ldw	r2,-124(fp)
  80d2b8:	10c0081e 	bne	r2,r3,80d2dc <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  80d2bc:	d0a05217 	ldw	r2,-32440(gp)
  80d2c0:	10800044 	addi	r2,r2,1
  80d2c4:	d0a05215 	stw	r2,-32440(gp)
  80d2c8:	e0bfe017 	ldw	r2,-128(fp)
  80d2cc:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d2d0:	e0bfde17 	ldw	r2,-136(fp)
  80d2d4:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  80d2d8:	00000c06 	br	80d30c <__malloc_lock+0xf4>
  80d2dc:	e0bfe017 	ldw	r2,-128(fp)
  80d2e0:	e0bfdd15 	stw	r2,-140(fp)
  80d2e4:	e0bfdd17 	ldw	r2,-140(fp)
  80d2e8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  80d2ec:	d1205317 	ldw	r4,-32436(gp)
  80d2f0:	e1bffe84 	addi	r6,fp,-6
  80d2f4:	000b883a 	mov	r5,zero
  80d2f8:	0812f900 	call	812f90 <OSSemPend>
    locks  = 1;
  80d2fc:	00800044 	movi	r2,1
  80d300:	d0a05215 	stw	r2,-32440(gp)
    lockid = id;
  80d304:	e0bfe117 	ldw	r2,-124(fp)
  80d308:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80d30c:	e037883a 	mov	sp,fp
  80d310:	dfc00117 	ldw	ra,4(sp)
  80d314:	df000017 	ldw	fp,0(sp)
  80d318:	dec00204 	addi	sp,sp,8
  80d31c:	f800283a 	ret

0080d320 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80d320:	defff804 	addi	sp,sp,-32
  80d324:	dfc00715 	stw	ra,28(sp)
  80d328:	df000615 	stw	fp,24(sp)
  80d32c:	df000604 	addi	fp,sp,24
  80d330:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d334:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  80d338:	008020b4 	movhi	r2,130
  80d33c:	10bcbb44 	addi	r2,r2,-3347
  80d340:	10800003 	ldbu	r2,0(r2)
  80d344:	10803fcc 	andi	r2,r2,255
  80d348:	10800058 	cmpnei	r2,r2,1
  80d34c:	1000231e 	bne	r2,zero,80d3dc <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d350:	0005303a 	rdctl	r2,status
  80d354:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d358:	e0fffd17 	ldw	r3,-12(fp)
  80d35c:	00bfff84 	movi	r2,-2
  80d360:	1884703a 	and	r2,r3,r2
  80d364:	1001703a 	wrctl	status,r2
  
  return context;
  80d368:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  80d36c:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  80d370:	d0a05217 	ldw	r2,-32440(gp)
  80d374:	1004c03a 	cmpne	r2,r2,zero
  80d378:	1000051e 	bne	r2,zero,80d390 <__malloc_unlock+0x70>
  80d37c:	e0bffe17 	ldw	r2,-8(fp)
  80d380:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d384:	e0bffc17 	ldw	r2,-16(fp)
  80d388:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  80d38c:	00001306 	br	80d3dc <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  80d390:	d0a05217 	ldw	r2,-32440(gp)
  80d394:	10bfffc4 	addi	r2,r2,-1
  80d398:	d0a05215 	stw	r2,-32440(gp)
  80d39c:	d0a05217 	ldw	r2,-32440(gp)
  80d3a0:	1004c03a 	cmpne	r2,r2,zero
  80d3a4:	1000091e 	bne	r2,zero,80d3cc <__malloc_unlock+0xac>
  {
    lockid = -1;
  80d3a8:	00bfffc4 	movi	r2,-1
  80d3ac:	d0a00f15 	stw	r2,-32708(gp)
  80d3b0:	e0bffe17 	ldw	r2,-8(fp)
  80d3b4:	e0bffb15 	stw	r2,-20(fp)
  80d3b8:	e0bffb17 	ldw	r2,-20(fp)
  80d3bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  80d3c0:	d1205317 	ldw	r4,-32436(gp)
  80d3c4:	08133880 	call	813388 <OSSemPost>
  80d3c8:	00000406 	br	80d3dc <__malloc_unlock+0xbc>
  80d3cc:	e0bffe17 	ldw	r2,-8(fp)
  80d3d0:	e0bffa15 	stw	r2,-24(fp)
  80d3d4:	e0bffa17 	ldw	r2,-24(fp)
  80d3d8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80d3dc:	e037883a 	mov	sp,fp
  80d3e0:	dfc00117 	ldw	ra,4(sp)
  80d3e4:	df000017 	ldw	fp,0(sp)
  80d3e8:	dec00204 	addi	sp,sp,8
  80d3ec:	f800283a 	ret

0080d3f0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80d3f0:	defff604 	addi	sp,sp,-40
  80d3f4:	dfc00915 	stw	ra,36(sp)
  80d3f8:	df000815 	stw	fp,32(sp)
  80d3fc:	df000804 	addi	fp,sp,32
  80d400:	e13ffc15 	stw	r4,-16(fp)
  80d404:	e17ffd15 	stw	r5,-12(fp)
  80d408:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d40c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80d410:	e0bffe17 	ldw	r2,-8(fp)
  80d414:	1004c03a 	cmpne	r2,r2,zero
  80d418:	1000021e 	bne	r2,zero,80d424 <OSEventNameGet+0x34>
        return (0);
  80d41c:	e03fff15 	stw	zero,-4(fp)
  80d420:	00003906 	br	80d508 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80d424:	e0bffc17 	ldw	r2,-16(fp)
  80d428:	1004c03a 	cmpne	r2,r2,zero
  80d42c:	1000051e 	bne	r2,zero,80d444 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80d430:	e0fffe17 	ldw	r3,-8(fp)
  80d434:	00800104 	movi	r2,4
  80d438:	18800005 	stb	r2,0(r3)
        return (0);
  80d43c:	e03fff15 	stw	zero,-4(fp)
  80d440:	00003106 	br	80d508 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80d444:	e0bffd17 	ldw	r2,-12(fp)
  80d448:	1004c03a 	cmpne	r2,r2,zero
  80d44c:	1000051e 	bne	r2,zero,80d464 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80d450:	e0fffe17 	ldw	r3,-8(fp)
  80d454:	00800304 	movi	r2,12
  80d458:	18800005 	stb	r2,0(r3)
        return (0);
  80d45c:	e03fff15 	stw	zero,-4(fp)
  80d460:	00002906 	br	80d508 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80d464:	d0a06203 	ldbu	r2,-32376(gp)
  80d468:	10803fcc 	andi	r2,r2,255
  80d46c:	1005003a 	cmpeq	r2,r2,zero
  80d470:	1000051e 	bne	r2,zero,80d488 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  80d474:	e0fffe17 	ldw	r3,-8(fp)
  80d478:	00800444 	movi	r2,17
  80d47c:	18800005 	stb	r2,0(r3)
        return (0);
  80d480:	e03fff15 	stw	zero,-4(fp)
  80d484:	00002006 	br	80d508 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  80d488:	e0bffc17 	ldw	r2,-16(fp)
  80d48c:	10800003 	ldbu	r2,0(r2)
  80d490:	10803fcc 	andi	r2,r2,255
  80d494:	10bfffc4 	addi	r2,r2,-1
  80d498:	10800128 	cmpgeui	r2,r2,4
  80d49c:	1000161e 	bne	r2,zero,80d4f8 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d4a0:	0005303a 	rdctl	r2,status
  80d4a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d4a8:	e0fff917 	ldw	r3,-28(fp)
  80d4ac:	00bfff84 	movi	r2,-2
  80d4b0:	1884703a 	and	r2,r3,r2
  80d4b4:	1001703a 	wrctl	status,r2
  
  return context;
  80d4b8:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  80d4bc:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  80d4c0:	e0bffc17 	ldw	r2,-16(fp)
  80d4c4:	11400384 	addi	r5,r2,14
  80d4c8:	e13ffd17 	ldw	r4,-12(fp)
  80d4cc:	080ef740 	call	80ef74 <OS_StrCopy>
  80d4d0:	e0bffb05 	stb	r2,-20(fp)
  80d4d4:	e0bffa17 	ldw	r2,-24(fp)
  80d4d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d4dc:	e0bff817 	ldw	r2,-32(fp)
  80d4e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80d4e4:	e0bffe17 	ldw	r2,-8(fp)
  80d4e8:	10000005 	stb	zero,0(r2)
    return (len);
  80d4ec:	e0bffb03 	ldbu	r2,-20(fp)
  80d4f0:	e0bfff15 	stw	r2,-4(fp)
  80d4f4:	00000406 	br	80d508 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80d4f8:	e0fffe17 	ldw	r3,-8(fp)
  80d4fc:	00800044 	movi	r2,1
  80d500:	18800005 	stb	r2,0(r3)
             return (0);
  80d504:	e03fff15 	stw	zero,-4(fp)
  80d508:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  80d50c:	e037883a 	mov	sp,fp
  80d510:	dfc00117 	ldw	ra,4(sp)
  80d514:	df000017 	ldw	fp,0(sp)
  80d518:	dec00204 	addi	sp,sp,8
  80d51c:	f800283a 	ret

0080d520 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80d520:	defff604 	addi	sp,sp,-40
  80d524:	dfc00915 	stw	ra,36(sp)
  80d528:	df000815 	stw	fp,32(sp)
  80d52c:	df000804 	addi	fp,sp,32
  80d530:	e13ffd15 	stw	r4,-12(fp)
  80d534:	e17ffe15 	stw	r5,-8(fp)
  80d538:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d53c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80d540:	e0bfff17 	ldw	r2,-4(fp)
  80d544:	1005003a 	cmpeq	r2,r2,zero
  80d548:	1000411e 	bne	r2,zero,80d650 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80d54c:	e0bffd17 	ldw	r2,-12(fp)
  80d550:	1004c03a 	cmpne	r2,r2,zero
  80d554:	1000041e 	bne	r2,zero,80d568 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  80d558:	e0ffff17 	ldw	r3,-4(fp)
  80d55c:	00800104 	movi	r2,4
  80d560:	18800005 	stb	r2,0(r3)
        return;
  80d564:	00003a06 	br	80d650 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80d568:	e0bffe17 	ldw	r2,-8(fp)
  80d56c:	1004c03a 	cmpne	r2,r2,zero
  80d570:	1000041e 	bne	r2,zero,80d584 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80d574:	e0ffff17 	ldw	r3,-4(fp)
  80d578:	00800304 	movi	r2,12
  80d57c:	18800005 	stb	r2,0(r3)
        return;
  80d580:	00003306 	br	80d650 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80d584:	d0a06203 	ldbu	r2,-32376(gp)
  80d588:	10803fcc 	andi	r2,r2,255
  80d58c:	1005003a 	cmpeq	r2,r2,zero
  80d590:	1000041e 	bne	r2,zero,80d5a4 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  80d594:	e0ffff17 	ldw	r3,-4(fp)
  80d598:	00800484 	movi	r2,18
  80d59c:	18800005 	stb	r2,0(r3)
        return;
  80d5a0:	00002b06 	br	80d650 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  80d5a4:	e0bffd17 	ldw	r2,-12(fp)
  80d5a8:	10800003 	ldbu	r2,0(r2)
  80d5ac:	10803fcc 	andi	r2,r2,255
  80d5b0:	10bfffc4 	addi	r2,r2,-1
  80d5b4:	10800128 	cmpgeui	r2,r2,4
  80d5b8:	10000f1e 	bne	r2,zero,80d5f8 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d5bc:	0005303a 	rdctl	r2,status
  80d5c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d5c4:	e0fffa17 	ldw	r3,-24(fp)
  80d5c8:	00bfff84 	movi	r2,-2
  80d5cc:	1884703a 	and	r2,r3,r2
  80d5d0:	1001703a 	wrctl	status,r2
  
  return context;
  80d5d4:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  80d5d8:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  80d5dc:	e13ffe17 	ldw	r4,-8(fp)
  80d5e0:	080eff40 	call	80eff4 <OS_StrLen>
  80d5e4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  80d5e8:	e0bffc03 	ldbu	r2,-16(fp)
  80d5ec:	10800828 	cmpgeui	r2,r2,32
  80d5f0:	1000051e 	bne	r2,zero,80d608 <OSEventNameSet+0xe8>
  80d5f4:	00000c06 	br	80d628 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80d5f8:	e0ffff17 	ldw	r3,-4(fp)
  80d5fc:	00800044 	movi	r2,1
  80d600:	18800005 	stb	r2,0(r3)
             return;
  80d604:	00001206 	br	80d650 <OSEventNameSet+0x130>
  80d608:	e0bffb17 	ldw	r2,-20(fp)
  80d60c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d610:	e0bff917 	ldw	r2,-28(fp)
  80d614:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  80d618:	e0ffff17 	ldw	r3,-4(fp)
  80d61c:	008002c4 	movi	r2,11
  80d620:	18800005 	stb	r2,0(r3)
        return;
  80d624:	00000a06 	br	80d650 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  80d628:	e0bffd17 	ldw	r2,-12(fp)
  80d62c:	11000384 	addi	r4,r2,14
  80d630:	e17ffe17 	ldw	r5,-8(fp)
  80d634:	080ef740 	call	80ef74 <OS_StrCopy>
  80d638:	e0bffb17 	ldw	r2,-20(fp)
  80d63c:	e0bff815 	stw	r2,-32(fp)
  80d640:	e0bff817 	ldw	r2,-32(fp)
  80d644:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80d648:	e0bfff17 	ldw	r2,-4(fp)
  80d64c:	10000005 	stb	zero,0(r2)
}
  80d650:	e037883a 	mov	sp,fp
  80d654:	dfc00117 	ldw	ra,4(sp)
  80d658:	df000017 	ldw	fp,0(sp)
  80d65c:	dec00204 	addi	sp,sp,8
  80d660:	f800283a 	ret

0080d664 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  80d664:	deffe704 	addi	sp,sp,-100
  80d668:	dfc01815 	stw	ra,96(sp)
  80d66c:	df001715 	stw	fp,92(sp)
  80d670:	df001704 	addi	fp,sp,92
  80d674:	e13ff615 	stw	r4,-40(fp)
  80d678:	e17ff715 	stw	r5,-36(fp)
  80d67c:	e1bff815 	stw	r6,-32(fp)
  80d680:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  80d684:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  80d688:	e0800217 	ldw	r2,8(fp)
  80d68c:	1004c03a 	cmpne	r2,r2,zero
  80d690:	1000021e 	bne	r2,zero,80d69c <OSEventPendMulti+0x38>
        return (0);
  80d694:	e03fff15 	stw	zero,-4(fp)
  80d698:	00019906 	br	80dd00 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  80d69c:	e0bff617 	ldw	r2,-40(fp)
  80d6a0:	1004c03a 	cmpne	r2,r2,zero
  80d6a4:	1000051e 	bne	r2,zero,80d6bc <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  80d6a8:	e0c00217 	ldw	r3,8(fp)
  80d6ac:	00800104 	movi	r2,4
  80d6b0:	18800005 	stb	r2,0(r3)
        return (0);
  80d6b4:	e03fff15 	stw	zero,-4(fp)
  80d6b8:	00019106 	br	80dd00 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  80d6bc:	e0bff717 	ldw	r2,-36(fp)
  80d6c0:	1004c03a 	cmpne	r2,r2,zero
  80d6c4:	1000051e 	bne	r2,zero,80d6dc <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  80d6c8:	e0c00217 	ldw	r3,8(fp)
  80d6cc:	00800104 	movi	r2,4
  80d6d0:	18800005 	stb	r2,0(r3)
        return (0);
  80d6d4:	e03fff15 	stw	zero,-4(fp)
  80d6d8:	00018906 	br	80dd00 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  80d6dc:	e0bff817 	ldw	r2,-32(fp)
  80d6e0:	1004c03a 	cmpne	r2,r2,zero
  80d6e4:	1000051e 	bne	r2,zero,80d6fc <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  80d6e8:	e0c00217 	ldw	r3,8(fp)
  80d6ec:	00800104 	movi	r2,4
  80d6f0:	18800005 	stb	r2,0(r3)
        return (0);
  80d6f4:	e03fff15 	stw	zero,-4(fp)
  80d6f8:	00018106 	br	80dd00 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  80d6fc:	e0bff717 	ldw	r2,-36(fp)
  80d700:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  80d704:	e0bff617 	ldw	r2,-40(fp)
  80d708:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  80d70c:	e0bff517 	ldw	r2,-44(fp)
  80d710:	10800017 	ldw	r2,0(r2)
  80d714:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  80d718:	00001806 	br	80d77c <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  80d71c:	e0bff417 	ldw	r2,-48(fp)
  80d720:	10800003 	ldbu	r2,0(r2)
  80d724:	10803fcc 	andi	r2,r2,255
  80d728:	e0bffe15 	stw	r2,-8(fp)
  80d72c:	e0fffe17 	ldw	r3,-8(fp)
  80d730:	188000a0 	cmpeqi	r2,r3,2
  80d734:	10000b1e 	bne	r2,zero,80d764 <OSEventPendMulti+0x100>
  80d738:	e0fffe17 	ldw	r3,-8(fp)
  80d73c:	188000e0 	cmpeqi	r2,r3,3
  80d740:	1000081e 	bne	r2,zero,80d764 <OSEventPendMulti+0x100>
  80d744:	e0fffe17 	ldw	r3,-8(fp)
  80d748:	18800060 	cmpeqi	r2,r3,1
  80d74c:	1000051e 	bne	r2,zero,80d764 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  80d750:	e0c00217 	ldw	r3,8(fp)
  80d754:	00800044 	movi	r2,1
  80d758:	18800005 	stb	r2,0(r3)
                 return (0);
  80d75c:	e03fff15 	stw	zero,-4(fp)
  80d760:	00016706 	br	80dd00 <OSEventPendMulti+0x69c>
        }
        pevents++;
  80d764:	e0bff517 	ldw	r2,-44(fp)
  80d768:	10800104 	addi	r2,r2,4
  80d76c:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80d770:	e0bff517 	ldw	r2,-44(fp)
  80d774:	10800017 	ldw	r2,0(r2)
  80d778:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  80d77c:	e0bff417 	ldw	r2,-48(fp)
  80d780:	1004c03a 	cmpne	r2,r2,zero
  80d784:	103fe51e 	bne	r2,zero,80d71c <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  80d788:	d0a06203 	ldbu	r2,-32376(gp)
  80d78c:	10803fcc 	andi	r2,r2,255
  80d790:	1005003a 	cmpeq	r2,r2,zero
  80d794:	1000051e 	bne	r2,zero,80d7ac <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  80d798:	e0c00217 	ldw	r3,8(fp)
  80d79c:	00800084 	movi	r2,2
  80d7a0:	18800005 	stb	r2,0(r3)
        return (0);
  80d7a4:	e03fff15 	stw	zero,-4(fp)
  80d7a8:	00015506 	br	80dd00 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  80d7ac:	d0a05403 	ldbu	r2,-32432(gp)
  80d7b0:	10803fcc 	andi	r2,r2,255
  80d7b4:	1005003a 	cmpeq	r2,r2,zero
  80d7b8:	1000051e 	bne	r2,zero,80d7d0 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  80d7bc:	e0c00217 	ldw	r3,8(fp)
  80d7c0:	00800344 	movi	r2,13
  80d7c4:	18800005 	stb	r2,0(r3)
        return (0);
  80d7c8:	e03fff15 	stw	zero,-4(fp)
  80d7cc:	00014c06 	br	80dd00 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d7d0:	0005303a 	rdctl	r2,status
  80d7d4:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d7d8:	e0ffef17 	ldw	r3,-68(fp)
  80d7dc:	00bfff84 	movi	r2,-2
  80d7e0:	1884703a 	and	r2,r3,r2
  80d7e4:	1001703a 	wrctl	status,r2
  
  return context;
  80d7e8:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80d7ec:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  80d7f0:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  80d7f4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  80d7f8:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  80d7fc:	e0bff617 	ldw	r2,-40(fp)
  80d800:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  80d804:	e0bff517 	ldw	r2,-44(fp)
  80d808:	10800017 	ldw	r2,0(r2)
  80d80c:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80d810:	00008f06 	br	80da50 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  80d814:	e0bff417 	ldw	r2,-48(fp)
  80d818:	10800003 	ldbu	r2,0(r2)
  80d81c:	10803fcc 	andi	r2,r2,255
  80d820:	e0bffd15 	stw	r2,-12(fp)
  80d824:	e0fffd17 	ldw	r3,-12(fp)
  80d828:	188000a0 	cmpeqi	r2,r3,2
  80d82c:	1000441e 	bne	r2,zero,80d940 <OSEventPendMulti+0x2dc>
  80d830:	e0fffd17 	ldw	r3,-12(fp)
  80d834:	188000e0 	cmpeqi	r2,r3,3
  80d838:	1000041e 	bne	r2,zero,80d84c <OSEventPendMulti+0x1e8>
  80d83c:	e0fffd17 	ldw	r3,-12(fp)
  80d840:	18800060 	cmpeqi	r2,r3,1
  80d844:	1000211e 	bne	r2,zero,80d8cc <OSEventPendMulti+0x268>
  80d848:	00006f06 	br	80da08 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  80d84c:	e0bff417 	ldw	r2,-48(fp)
  80d850:	1080020b 	ldhu	r2,8(r2)
  80d854:	10bfffcc 	andi	r2,r2,65535
  80d858:	1005003a 	cmpeq	r2,r2,zero
  80d85c:	1000171e 	bne	r2,zero,80d8bc <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  80d860:	e0bff417 	ldw	r2,-48(fp)
  80d864:	1080020b 	ldhu	r2,8(r2)
  80d868:	10bfffc4 	addi	r2,r2,-1
  80d86c:	1007883a 	mov	r3,r2
  80d870:	e0bff417 	ldw	r2,-48(fp)
  80d874:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  80d878:	e0fff717 	ldw	r3,-36(fp)
  80d87c:	e0bff417 	ldw	r2,-48(fp)
  80d880:	18800015 	stw	r2,0(r3)
  80d884:	e0bff717 	ldw	r2,-36(fp)
  80d888:	10800104 	addi	r2,r2,4
  80d88c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  80d890:	00800044 	movi	r2,1
  80d894:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  80d898:	e0bff817 	ldw	r2,-32(fp)
  80d89c:	10000015 	stw	zero,0(r2)
  80d8a0:	e0bff817 	ldw	r2,-32(fp)
  80d8a4:	10800104 	addi	r2,r2,4
  80d8a8:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  80d8ac:	e0bff18b 	ldhu	r2,-58(fp)
  80d8b0:	10800044 	addi	r2,r2,1
  80d8b4:	e0bff18d 	sth	r2,-58(fp)
  80d8b8:	00005f06 	br	80da38 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  80d8bc:	e0bff103 	ldbu	r2,-60(fp)
  80d8c0:	10800054 	ori	r2,r2,1
  80d8c4:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80d8c8:	00005b06 	br	80da38 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  80d8cc:	e0bff417 	ldw	r2,-48(fp)
  80d8d0:	10800117 	ldw	r2,4(r2)
  80d8d4:	1005003a 	cmpeq	r2,r2,zero
  80d8d8:	1000151e 	bne	r2,zero,80d930 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  80d8dc:	e0bff417 	ldw	r2,-48(fp)
  80d8e0:	10c00117 	ldw	r3,4(r2)
  80d8e4:	e0bff817 	ldw	r2,-32(fp)
  80d8e8:	10c00015 	stw	r3,0(r2)
  80d8ec:	e0bff817 	ldw	r2,-32(fp)
  80d8f0:	10800104 	addi	r2,r2,4
  80d8f4:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  80d8f8:	e0bff417 	ldw	r2,-48(fp)
  80d8fc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  80d900:	e0fff717 	ldw	r3,-36(fp)
  80d904:	e0bff417 	ldw	r2,-48(fp)
  80d908:	18800015 	stw	r2,0(r3)
  80d90c:	e0bff717 	ldw	r2,-36(fp)
  80d910:	10800104 	addi	r2,r2,4
  80d914:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  80d918:	00800044 	movi	r2,1
  80d91c:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80d920:	e0bff18b 	ldhu	r2,-58(fp)
  80d924:	10800044 	addi	r2,r2,1
  80d928:	e0bff18d 	sth	r2,-58(fp)
  80d92c:	00004206 	br	80da38 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  80d930:	e0bff103 	ldbu	r2,-60(fp)
  80d934:	10800094 	ori	r2,r2,2
  80d938:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80d93c:	00003e06 	br	80da38 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  80d940:	e0bff417 	ldw	r2,-48(fp)
  80d944:	10800117 	ldw	r2,4(r2)
  80d948:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  80d94c:	e0bff317 	ldw	r2,-52(fp)
  80d950:	1080058b 	ldhu	r2,22(r2)
  80d954:	10bfffcc 	andi	r2,r2,65535
  80d958:	1005003a 	cmpeq	r2,r2,zero
  80d95c:	1000261e 	bne	r2,zero,80d9f8 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  80d960:	e0bff317 	ldw	r2,-52(fp)
  80d964:	11000417 	ldw	r4,16(r2)
  80d968:	20c00017 	ldw	r3,0(r4)
  80d96c:	e0bff817 	ldw	r2,-32(fp)
  80d970:	10c00015 	stw	r3,0(r2)
  80d974:	e0bff817 	ldw	r2,-32(fp)
  80d978:	10800104 	addi	r2,r2,4
  80d97c:	e0bff815 	stw	r2,-32(fp)
  80d980:	20c00104 	addi	r3,r4,4
  80d984:	e0bff317 	ldw	r2,-52(fp)
  80d988:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  80d98c:	e0bff317 	ldw	r2,-52(fp)
  80d990:	10c00417 	ldw	r3,16(r2)
  80d994:	e0bff317 	ldw	r2,-52(fp)
  80d998:	10800217 	ldw	r2,8(r2)
  80d99c:	1880041e 	bne	r3,r2,80d9b0 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  80d9a0:	e0bff317 	ldw	r2,-52(fp)
  80d9a4:	10c00117 	ldw	r3,4(r2)
  80d9a8:	e0bff317 	ldw	r2,-52(fp)
  80d9ac:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  80d9b0:	e0bff317 	ldw	r2,-52(fp)
  80d9b4:	1080058b 	ldhu	r2,22(r2)
  80d9b8:	10bfffc4 	addi	r2,r2,-1
  80d9bc:	1007883a 	mov	r3,r2
  80d9c0:	e0bff317 	ldw	r2,-52(fp)
  80d9c4:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  80d9c8:	e0fff717 	ldw	r3,-36(fp)
  80d9cc:	e0bff417 	ldw	r2,-48(fp)
  80d9d0:	18800015 	stw	r2,0(r3)
  80d9d4:	e0bff717 	ldw	r2,-36(fp)
  80d9d8:	10800104 	addi	r2,r2,4
  80d9dc:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  80d9e0:	00800044 	movi	r2,1
  80d9e4:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80d9e8:	e0bff18b 	ldhu	r2,-58(fp)
  80d9ec:	10800044 	addi	r2,r2,1
  80d9f0:	e0bff18d 	sth	r2,-58(fp)
  80d9f4:	00001006 	br	80da38 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  80d9f8:	e0bff103 	ldbu	r2,-60(fp)
  80d9fc:	10800114 	ori	r2,r2,4
  80da00:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80da04:	00000c06 	br	80da38 <OSEventPendMulti+0x3d4>
  80da08:	e0bff017 	ldw	r2,-64(fp)
  80da0c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80da10:	e0bfee17 	ldw	r2,-72(fp)
  80da14:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  80da18:	e0bff717 	ldw	r2,-36(fp)
  80da1c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  80da20:	e0c00217 	ldw	r3,8(fp)
  80da24:	00800044 	movi	r2,1
  80da28:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  80da2c:	e0bff18b 	ldhu	r2,-58(fp)
  80da30:	e0bfff15 	stw	r2,-4(fp)
  80da34:	0000b206 	br	80dd00 <OSEventPendMulti+0x69c>
        }
        pevents++;
  80da38:	e0bff517 	ldw	r2,-44(fp)
  80da3c:	10800104 	addi	r2,r2,4
  80da40:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80da44:	e0bff517 	ldw	r2,-44(fp)
  80da48:	10800017 	ldw	r2,0(r2)
  80da4c:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80da50:	e0bff417 	ldw	r2,-48(fp)
  80da54:	1004c03a 	cmpne	r2,r2,zero
  80da58:	103f6e1e 	bne	r2,zero,80d814 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  80da5c:	e0bff203 	ldbu	r2,-56(fp)
  80da60:	10800058 	cmpnei	r2,r2,1
  80da64:	10000b1e 	bne	r2,zero,80da94 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  80da68:	e0bff717 	ldw	r2,-36(fp)
  80da6c:	10000015 	stw	zero,0(r2)
  80da70:	e0bff017 	ldw	r2,-64(fp)
  80da74:	e0bfed15 	stw	r2,-76(fp)
  80da78:	e0bfed17 	ldw	r2,-76(fp)
  80da7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  80da80:	e0800217 	ldw	r2,8(fp)
  80da84:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  80da88:	e0fff18b 	ldhu	r3,-58(fp)
  80da8c:	e0ffff15 	stw	r3,-4(fp)
  80da90:	00009b06 	br	80dd00 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  80da94:	d1206317 	ldw	r4,-32372(gp)
  80da98:	d0a06317 	ldw	r2,-32372(gp)
  80da9c:	10c00c03 	ldbu	r3,48(r2)
  80daa0:	e0bff103 	ldbu	r2,-60(fp)
  80daa4:	1884b03a 	or	r2,r3,r2
  80daa8:	1007883a 	mov	r3,r2
  80daac:	00bfe004 	movi	r2,-128
  80dab0:	1884b03a 	or	r2,r3,r2
  80dab4:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80dab8:	d0a06317 	ldw	r2,-32372(gp)
  80dabc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  80dac0:	d0e06317 	ldw	r3,-32372(gp)
  80dac4:	e0bff90b 	ldhu	r2,-28(fp)
  80dac8:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  80dacc:	e13ff617 	ldw	r4,-40(fp)
  80dad0:	080e6940 	call	80e694 <OS_EventTaskWaitMulti>
  80dad4:	e0bff017 	ldw	r2,-64(fp)
  80dad8:	e0bfec15 	stw	r2,-80(fp)
  80dadc:	e0bfec17 	ldw	r2,-80(fp)
  80dae0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  80dae4:	080ee300 	call	80ee30 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dae8:	0005303a 	rdctl	r2,status
  80daec:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80daf0:	e0ffeb17 	ldw	r3,-84(fp)
  80daf4:	00bfff84 	movi	r2,-2
  80daf8:	1884703a 	and	r2,r3,r2
  80dafc:	1001703a 	wrctl	status,r2
  
  return context;
  80db00:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  80db04:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  80db08:	d0a06317 	ldw	r2,-32372(gp)
  80db0c:	10800c43 	ldbu	r2,49(r2)
  80db10:	10803fcc 	andi	r2,r2,255
  80db14:	e0bffc15 	stw	r2,-16(fp)
  80db18:	e0fffc17 	ldw	r3,-16(fp)
  80db1c:	1805003a 	cmpeq	r2,r3,zero
  80db20:	1000041e 	bne	r2,zero,80db34 <OSEventPendMulti+0x4d0>
  80db24:	e0fffc17 	ldw	r3,-16(fp)
  80db28:	188000a0 	cmpeqi	r2,r3,2
  80db2c:	1000011e 	bne	r2,zero,80db34 <OSEventPendMulti+0x4d0>
  80db30:	00001906 	br	80db98 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  80db34:	d0a06317 	ldw	r2,-32372(gp)
  80db38:	10800717 	ldw	r2,28(r2)
  80db3c:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  80db40:	e0bff417 	ldw	r2,-48(fp)
  80db44:	1005003a 	cmpeq	r2,r2,zero
  80db48:	10000c1e 	bne	r2,zero,80db7c <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  80db4c:	e0fff717 	ldw	r3,-36(fp)
  80db50:	e0bff417 	ldw	r2,-48(fp)
  80db54:	18800015 	stw	r2,0(r3)
  80db58:	e0bff717 	ldw	r2,-36(fp)
  80db5c:	10800104 	addi	r2,r2,4
  80db60:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  80db64:	e0bff717 	ldw	r2,-36(fp)
  80db68:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  80db6c:	e0bff18b 	ldhu	r2,-58(fp)
  80db70:	10800044 	addi	r2,r2,1
  80db74:	e0bff18d 	sth	r2,-58(fp)
  80db78:	00000a06 	br	80dba4 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  80db7c:	d0a06317 	ldw	r2,-32372(gp)
  80db80:	00c00044 	movi	r3,1
  80db84:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80db88:	d1206317 	ldw	r4,-32372(gp)
  80db8c:	e17ff617 	ldw	r5,-40(fp)
  80db90:	080e8a00 	call	80e8a0 <OS_EventTaskRemoveMulti>
             }
			 break;
  80db94:	00000306 	br	80dba4 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80db98:	d1206317 	ldw	r4,-32372(gp)
  80db9c:	e17ff617 	ldw	r5,-40(fp)
  80dba0:	080e8a00 	call	80e8a0 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  80dba4:	d0a06317 	ldw	r2,-32372(gp)
  80dba8:	10800c43 	ldbu	r2,49(r2)
  80dbac:	10803fcc 	andi	r2,r2,255
  80dbb0:	e0bffb15 	stw	r2,-20(fp)
  80dbb4:	e0fffb17 	ldw	r3,-20(fp)
  80dbb8:	1805003a 	cmpeq	r2,r3,zero
  80dbbc:	1000041e 	bne	r2,zero,80dbd0 <OSEventPendMulti+0x56c>
  80dbc0:	e0fffb17 	ldw	r3,-20(fp)
  80dbc4:	188000a0 	cmpeqi	r2,r3,2
  80dbc8:	10002c1e 	bne	r2,zero,80dc7c <OSEventPendMulti+0x618>
  80dbcc:	00003406 	br	80dca0 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  80dbd0:	e0bff417 	ldw	r2,-48(fp)
  80dbd4:	10800003 	ldbu	r2,0(r2)
  80dbd8:	10803fcc 	andi	r2,r2,255
  80dbdc:	e0bffa15 	stw	r2,-24(fp)
  80dbe0:	e0fffa17 	ldw	r3,-24(fp)
  80dbe4:	18800050 	cmplti	r2,r3,1
  80dbe8:	1000151e 	bne	r2,zero,80dc40 <OSEventPendMulti+0x5dc>
  80dbec:	e0fffa17 	ldw	r3,-24(fp)
  80dbf0:	188000d0 	cmplti	r2,r3,3
  80dbf4:	10000a1e 	bne	r2,zero,80dc20 <OSEventPendMulti+0x5bc>
  80dbf8:	e0fffa17 	ldw	r3,-24(fp)
  80dbfc:	188000e0 	cmpeqi	r2,r3,3
  80dc00:	1000011e 	bne	r2,zero,80dc08 <OSEventPendMulti+0x5a4>
  80dc04:	00000e06 	br	80dc40 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  80dc08:	e0bff817 	ldw	r2,-32(fp)
  80dc0c:	10000015 	stw	zero,0(r2)
  80dc10:	e0bff817 	ldw	r2,-32(fp)
  80dc14:	10800104 	addi	r2,r2,4
  80dc18:	e0bff815 	stw	r2,-32(fp)
                      break;
  80dc1c:	00001406 	br	80dc70 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  80dc20:	d0a06317 	ldw	r2,-32372(gp)
  80dc24:	10c00917 	ldw	r3,36(r2)
  80dc28:	e0bff817 	ldw	r2,-32(fp)
  80dc2c:	10c00015 	stw	r3,0(r2)
  80dc30:	e0bff817 	ldw	r2,-32(fp)
  80dc34:	10800104 	addi	r2,r2,4
  80dc38:	e0bff815 	stw	r2,-32(fp)
                      break;
  80dc3c:	00000c06 	br	80dc70 <OSEventPendMulti+0x60c>
  80dc40:	e0bff017 	ldw	r2,-64(fp)
  80dc44:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dc48:	e0bfea17 	ldw	r2,-88(fp)
  80dc4c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  80dc50:	e0bff717 	ldw	r2,-36(fp)
  80dc54:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  80dc58:	e0c00217 	ldw	r3,8(fp)
  80dc5c:	00800044 	movi	r2,1
  80dc60:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  80dc64:	e0bff18b 	ldhu	r2,-58(fp)
  80dc68:	e0bfff15 	stw	r2,-4(fp)
  80dc6c:	00002406 	br	80dd00 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  80dc70:	e0800217 	ldw	r2,8(fp)
  80dc74:	10000005 	stb	zero,0(r2)
             break;
  80dc78:	00001106 	br	80dcc0 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  80dc7c:	e0bff817 	ldw	r2,-32(fp)
  80dc80:	10000015 	stw	zero,0(r2)
  80dc84:	e0bff817 	ldw	r2,-32(fp)
  80dc88:	10800104 	addi	r2,r2,4
  80dc8c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  80dc90:	e0c00217 	ldw	r3,8(fp)
  80dc94:	00800384 	movi	r2,14
  80dc98:	18800005 	stb	r2,0(r3)
             break;
  80dc9c:	00000806 	br	80dcc0 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  80dca0:	e0bff817 	ldw	r2,-32(fp)
  80dca4:	10000015 	stw	zero,0(r2)
  80dca8:	e0bff817 	ldw	r2,-32(fp)
  80dcac:	10800104 	addi	r2,r2,4
  80dcb0:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  80dcb4:	e0c00217 	ldw	r3,8(fp)
  80dcb8:	00800284 	movi	r2,10
  80dcbc:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  80dcc0:	d0a06317 	ldw	r2,-32372(gp)
  80dcc4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  80dcc8:	d0a06317 	ldw	r2,-32372(gp)
  80dccc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  80dcd0:	d0a06317 	ldw	r2,-32372(gp)
  80dcd4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80dcd8:	d0a06317 	ldw	r2,-32372(gp)
  80dcdc:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  80dce0:	d0a06317 	ldw	r2,-32372(gp)
  80dce4:	10000915 	stw	zero,36(r2)
  80dce8:	e0bff017 	ldw	r2,-64(fp)
  80dcec:	e0bfe915 	stw	r2,-92(fp)
  80dcf0:	e0bfe917 	ldw	r2,-92(fp)
  80dcf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  80dcf8:	e0fff18b 	ldhu	r3,-58(fp)
  80dcfc:	e0ffff15 	stw	r3,-4(fp)
  80dd00:	e0bfff17 	ldw	r2,-4(fp)
}
  80dd04:	e037883a 	mov	sp,fp
  80dd08:	dfc00117 	ldw	ra,4(sp)
  80dd0c:	df000017 	ldw	fp,0(sp)
  80dd10:	dec00204 	addi	sp,sp,8
  80dd14:	f800283a 	ret

0080dd18 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  80dd18:	defffe04 	addi	sp,sp,-8
  80dd1c:	dfc00115 	stw	ra,4(sp)
  80dd20:	df000015 	stw	fp,0(sp)
  80dd24:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  80dd28:	081c2c00 	call	81c2c0 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  80dd2c:	080eae80 	call	80eae8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  80dd30:	080eb2c0 	call	80eb2c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  80dd34:	080ec900 	call	80ec90 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  80dd38:	080ea0c0 	call	80ea0c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  80dd3c:	0810d400 	call	810d40 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  80dd40:	08117180 	call	811718 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  80dd44:	0812a700 	call	812a70 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  80dd48:	080eb980 	call	80eb98 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  80dd4c:	080ec140 	call	80ec14 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  80dd50:	081c2dc0 	call	81c2dc <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  80dd54:	080f5180 	call	80f518 <OSDebugInit>
#endif
}
  80dd58:	e037883a 	mov	sp,fp
  80dd5c:	dfc00117 	ldw	ra,4(sp)
  80dd60:	df000017 	ldw	fp,0(sp)
  80dd64:	dec00204 	addi	sp,sp,8
  80dd68:	f800283a 	ret

0080dd6c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  80dd6c:	defffc04 	addi	sp,sp,-16
  80dd70:	df000315 	stw	fp,12(sp)
  80dd74:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80dd78:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  80dd7c:	d0a05443 	ldbu	r2,-32431(gp)
  80dd80:	10803fcc 	andi	r2,r2,255
  80dd84:	10800058 	cmpnei	r2,r2,1
  80dd88:	1000131e 	bne	r2,zero,80ddd8 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dd8c:	0005303a 	rdctl	r2,status
  80dd90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dd94:	e0fffe17 	ldw	r3,-8(fp)
  80dd98:	00bfff84 	movi	r2,-2
  80dd9c:	1884703a 	and	r2,r3,r2
  80dda0:	1001703a 	wrctl	status,r2
  
  return context;
  80dda4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80dda8:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  80ddac:	d0a06203 	ldbu	r2,-32376(gp)
  80ddb0:	10803fcc 	andi	r2,r2,255
  80ddb4:	10803fe0 	cmpeqi	r2,r2,255
  80ddb8:	1000031e 	bne	r2,zero,80ddc8 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  80ddbc:	d0a06203 	ldbu	r2,-32376(gp)
  80ddc0:	10800044 	addi	r2,r2,1
  80ddc4:	d0a06205 	stb	r2,-32376(gp)
  80ddc8:	e0bfff17 	ldw	r2,-4(fp)
  80ddcc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ddd0:	e0bffd17 	ldw	r2,-12(fp)
  80ddd4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  80ddd8:	e037883a 	mov	sp,fp
  80dddc:	df000017 	ldw	fp,0(sp)
  80dde0:	dec00104 	addi	sp,sp,4
  80dde4:	f800283a 	ret

0080dde8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  80dde8:	defffb04 	addi	sp,sp,-20
  80ddec:	dfc00415 	stw	ra,16(sp)
  80ddf0:	df000315 	stw	fp,12(sp)
  80ddf4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80ddf8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  80ddfc:	d0a05443 	ldbu	r2,-32431(gp)
  80de00:	10803fcc 	andi	r2,r2,255
  80de04:	10800058 	cmpnei	r2,r2,1
  80de08:	1000321e 	bne	r2,zero,80ded4 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80de0c:	0005303a 	rdctl	r2,status
  80de10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80de14:	e0fffe17 	ldw	r3,-8(fp)
  80de18:	00bfff84 	movi	r2,-2
  80de1c:	1884703a 	and	r2,r3,r2
  80de20:	1001703a 	wrctl	status,r2
  
  return context;
  80de24:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80de28:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  80de2c:	d0a06203 	ldbu	r2,-32376(gp)
  80de30:	10803fcc 	andi	r2,r2,255
  80de34:	1005003a 	cmpeq	r2,r2,zero
  80de38:	1000031e 	bne	r2,zero,80de48 <OSIntExit+0x60>
            OSIntNesting--;
  80de3c:	d0a06203 	ldbu	r2,-32376(gp)
  80de40:	10bfffc4 	addi	r2,r2,-1
  80de44:	d0a06205 	stb	r2,-32376(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  80de48:	d0a06203 	ldbu	r2,-32376(gp)
  80de4c:	10803fcc 	andi	r2,r2,255
  80de50:	1004c03a 	cmpne	r2,r2,zero
  80de54:	10001b1e 	bne	r2,zero,80dec4 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  80de58:	d0a05403 	ldbu	r2,-32432(gp)
  80de5c:	10803fcc 	andi	r2,r2,255
  80de60:	1004c03a 	cmpne	r2,r2,zero
  80de64:	1000171e 	bne	r2,zero,80dec4 <OSIntExit+0xdc>
                OS_SchedNew();
  80de68:	080ef040 	call	80ef04 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  80de6c:	d0a05603 	ldbu	r2,-32424(gp)
  80de70:	d0e05643 	ldbu	r3,-32423(gp)
  80de74:	11003fcc 	andi	r4,r2,255
  80de78:	18803fcc 	andi	r2,r3,255
  80de7c:	20801126 	beq	r4,r2,80dec4 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  80de80:	d0a05603 	ldbu	r2,-32424(gp)
  80de84:	10803fcc 	andi	r2,r2,255
  80de88:	00c020f4 	movhi	r3,131
  80de8c:	18da9904 	addi	r3,r3,27236
  80de90:	1085883a 	add	r2,r2,r2
  80de94:	1085883a 	add	r2,r2,r2
  80de98:	10c5883a 	add	r2,r2,r3
  80de9c:	10800017 	ldw	r2,0(r2)
  80dea0:	d0a05e15 	stw	r2,-32392(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  80dea4:	d0e05e17 	ldw	r3,-32392(gp)
  80dea8:	18800e17 	ldw	r2,56(r3)
  80deac:	10800044 	addi	r2,r2,1
  80deb0:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  80deb4:	d0a05917 	ldw	r2,-32412(gp)
  80deb8:	10800044 	addi	r2,r2,1
  80debc:	d0a05915 	stw	r2,-32412(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  80dec0:	081be4c0 	call	81be4c <OSCtxSw>
  80dec4:	e0bfff17 	ldw	r2,-4(fp)
  80dec8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80decc:	e0bffd17 	ldw	r2,-12(fp)
  80ded0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80ded4:	e037883a 	mov	sp,fp
  80ded8:	dfc00117 	ldw	ra,4(sp)
  80dedc:	df000017 	ldw	fp,0(sp)
  80dee0:	dec00204 	addi	sp,sp,8
  80dee4:	f800283a 	ret

0080dee8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  80dee8:	defffc04 	addi	sp,sp,-16
  80deec:	df000315 	stw	fp,12(sp)
  80def0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80def4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  80def8:	d0a05443 	ldbu	r2,-32431(gp)
  80defc:	10803fcc 	andi	r2,r2,255
  80df00:	10800058 	cmpnei	r2,r2,1
  80df04:	1000171e 	bne	r2,zero,80df64 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80df08:	0005303a 	rdctl	r2,status
  80df0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80df10:	e0fffe17 	ldw	r3,-8(fp)
  80df14:	00bfff84 	movi	r2,-2
  80df18:	1884703a 	and	r2,r3,r2
  80df1c:	1001703a 	wrctl	status,r2
  
  return context;
  80df20:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80df24:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  80df28:	d0a06203 	ldbu	r2,-32376(gp)
  80df2c:	10803fcc 	andi	r2,r2,255
  80df30:	1004c03a 	cmpne	r2,r2,zero
  80df34:	1000071e 	bne	r2,zero,80df54 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  80df38:	d0a05403 	ldbu	r2,-32432(gp)
  80df3c:	10803fcc 	andi	r2,r2,255
  80df40:	10803fe0 	cmpeqi	r2,r2,255
  80df44:	1000031e 	bne	r2,zero,80df54 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  80df48:	d0a05403 	ldbu	r2,-32432(gp)
  80df4c:	10800044 	addi	r2,r2,1
  80df50:	d0a05405 	stb	r2,-32432(gp)
  80df54:	e0bfff17 	ldw	r2,-4(fp)
  80df58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80df5c:	e0bffd17 	ldw	r2,-12(fp)
  80df60:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80df64:	e037883a 	mov	sp,fp
  80df68:	df000017 	ldw	fp,0(sp)
  80df6c:	dec00104 	addi	sp,sp,4
  80df70:	f800283a 	ret

0080df74 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  80df74:	defff804 	addi	sp,sp,-32
  80df78:	dfc00715 	stw	ra,28(sp)
  80df7c:	df000615 	stw	fp,24(sp)
  80df80:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80df84:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  80df88:	d0a05443 	ldbu	r2,-32431(gp)
  80df8c:	10803fcc 	andi	r2,r2,255
  80df90:	10800058 	cmpnei	r2,r2,1
  80df94:	10002b1e 	bne	r2,zero,80e044 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80df98:	0005303a 	rdctl	r2,status
  80df9c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dfa0:	e0fffe17 	ldw	r3,-8(fp)
  80dfa4:	00bfff84 	movi	r2,-2
  80dfa8:	1884703a 	and	r2,r3,r2
  80dfac:	1001703a 	wrctl	status,r2
  
  return context;
  80dfb0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80dfb4:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  80dfb8:	d0a05403 	ldbu	r2,-32432(gp)
  80dfbc:	10803fcc 	andi	r2,r2,255
  80dfc0:	1005003a 	cmpeq	r2,r2,zero
  80dfc4:	10001b1e 	bne	r2,zero,80e034 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  80dfc8:	d0a05403 	ldbu	r2,-32432(gp)
  80dfcc:	10bfffc4 	addi	r2,r2,-1
  80dfd0:	d0a05405 	stb	r2,-32432(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  80dfd4:	d0a05403 	ldbu	r2,-32432(gp)
  80dfd8:	10803fcc 	andi	r2,r2,255
  80dfdc:	1004c03a 	cmpne	r2,r2,zero
  80dfe0:	10000f1e 	bne	r2,zero,80e020 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  80dfe4:	d0a06203 	ldbu	r2,-32376(gp)
  80dfe8:	10803fcc 	andi	r2,r2,255
  80dfec:	1004c03a 	cmpne	r2,r2,zero
  80dff0:	1000061e 	bne	r2,zero,80e00c <OSSchedUnlock+0x98>
  80dff4:	e0bfff17 	ldw	r2,-4(fp)
  80dff8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dffc:	e0bffd17 	ldw	r2,-12(fp)
  80e000:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  80e004:	080ee300 	call	80ee30 <OS_Sched>
  80e008:	00000e06 	br	80e044 <OSSchedUnlock+0xd0>
  80e00c:	e0bfff17 	ldw	r2,-4(fp)
  80e010:	e0bffc15 	stw	r2,-16(fp)
  80e014:	e0bffc17 	ldw	r2,-16(fp)
  80e018:	1001703a 	wrctl	status,r2
  80e01c:	00000906 	br	80e044 <OSSchedUnlock+0xd0>
  80e020:	e0bfff17 	ldw	r2,-4(fp)
  80e024:	e0bffb15 	stw	r2,-20(fp)
  80e028:	e0bffb17 	ldw	r2,-20(fp)
  80e02c:	1001703a 	wrctl	status,r2
  80e030:	00000406 	br	80e044 <OSSchedUnlock+0xd0>
  80e034:	e0bfff17 	ldw	r2,-4(fp)
  80e038:	e0bffa15 	stw	r2,-24(fp)
  80e03c:	e0bffa17 	ldw	r2,-24(fp)
  80e040:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  80e044:	e037883a 	mov	sp,fp
  80e048:	dfc00117 	ldw	ra,4(sp)
  80e04c:	df000017 	ldw	fp,0(sp)
  80e050:	dec00204 	addi	sp,sp,8
  80e054:	f800283a 	ret

0080e058 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  80e058:	defffe04 	addi	sp,sp,-8
  80e05c:	dfc00115 	stw	ra,4(sp)
  80e060:	df000015 	stw	fp,0(sp)
  80e064:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  80e068:	d0a05443 	ldbu	r2,-32431(gp)
  80e06c:	10803fcc 	andi	r2,r2,255
  80e070:	1004c03a 	cmpne	r2,r2,zero
  80e074:	10000f1e 	bne	r2,zero,80e0b4 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  80e078:	080ef040 	call	80ef04 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  80e07c:	d0a05603 	ldbu	r2,-32424(gp)
  80e080:	d0a05645 	stb	r2,-32423(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  80e084:	d0a05603 	ldbu	r2,-32424(gp)
  80e088:	10803fcc 	andi	r2,r2,255
  80e08c:	00c020f4 	movhi	r3,131
  80e090:	18da9904 	addi	r3,r3,27236
  80e094:	1085883a 	add	r2,r2,r2
  80e098:	1085883a 	add	r2,r2,r2
  80e09c:	10c5883a 	add	r2,r2,r3
  80e0a0:	10800017 	ldw	r2,0(r2)
  80e0a4:	d0a05e15 	stw	r2,-32392(gp)
        OSTCBCur      = OSTCBHighRdy;
  80e0a8:	d0a05e17 	ldw	r2,-32392(gp)
  80e0ac:	d0a06315 	stw	r2,-32372(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  80e0b0:	081bed80 	call	81bed8 <OSStartHighRdy>
    }
}
  80e0b4:	e037883a 	mov	sp,fp
  80e0b8:	dfc00117 	ldw	ra,4(sp)
  80e0bc:	df000017 	ldw	fp,0(sp)
  80e0c0:	dec00204 	addi	sp,sp,8
  80e0c4:	f800283a 	ret

0080e0c8 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  80e0c8:	defff904 	addi	sp,sp,-28
  80e0cc:	dfc00615 	stw	ra,24(sp)
  80e0d0:	df000515 	stw	fp,20(sp)
  80e0d4:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80e0d8:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  80e0dc:	01000084 	movi	r4,2
  80e0e0:	08151240 	call	815124 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e0e4:	0005303a 	rdctl	r2,status
  80e0e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e0ec:	e0fffe17 	ldw	r3,-8(fp)
  80e0f0:	00bfff84 	movi	r2,-2
  80e0f4:	1884703a 	and	r2,r3,r2
  80e0f8:	1001703a 	wrctl	status,r2
  
  return context;
  80e0fc:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  80e100:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  80e104:	d0205515 	stw	zero,-32428(gp)
  80e108:	e0bfff17 	ldw	r2,-4(fp)
  80e10c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e110:	e0bffd17 	ldw	r2,-12(fp)
  80e114:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  80e118:	01001904 	movi	r4,100
  80e11c:	08151240 	call	815124 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e120:	0005303a 	rdctl	r2,status
  80e124:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e128:	e0fffc17 	ldw	r3,-16(fp)
  80e12c:	00bfff84 	movi	r2,-2
  80e130:	1884703a 	and	r2,r3,r2
  80e134:	1001703a 	wrctl	status,r2
  
  return context;
  80e138:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  80e13c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  80e140:	d0a05517 	ldw	r2,-32428(gp)
  80e144:	d0a05a15 	stw	r2,-32408(gp)
    OSStatRdy    = OS_TRUE;
  80e148:	00800044 	movi	r2,1
  80e14c:	d0a06605 	stb	r2,-32360(gp)
  80e150:	e0bfff17 	ldw	r2,-4(fp)
  80e154:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e158:	e0bffb17 	ldw	r2,-20(fp)
  80e15c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80e160:	e037883a 	mov	sp,fp
  80e164:	dfc00117 	ldw	ra,4(sp)
  80e168:	df000017 	ldw	fp,0(sp)
  80e16c:	dec00204 	addi	sp,sp,8
  80e170:	f800283a 	ret

0080e174 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  80e174:	defff604 	addi	sp,sp,-40
  80e178:	dfc00915 	stw	ra,36(sp)
  80e17c:	df000815 	stw	fp,32(sp)
  80e180:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80e184:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  80e188:	081c2a40 	call	81c2a4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e18c:	0005303a 	rdctl	r2,status
  80e190:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e194:	e0fffb17 	ldw	r3,-20(fp)
  80e198:	00bfff84 	movi	r2,-2
  80e19c:	1884703a 	and	r2,r3,r2
  80e1a0:	1001703a 	wrctl	status,r2
  
  return context;
  80e1a4:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  80e1a8:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  80e1ac:	d0a06417 	ldw	r2,-32368(gp)
  80e1b0:	10800044 	addi	r2,r2,1
  80e1b4:	d0a06415 	stw	r2,-32368(gp)
  80e1b8:	e0bffc17 	ldw	r2,-16(fp)
  80e1bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e1c0:	e0bffa17 	ldw	r2,-24(fp)
  80e1c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  80e1c8:	d0a05443 	ldbu	r2,-32431(gp)
  80e1cc:	10803fcc 	andi	r2,r2,255
  80e1d0:	10800058 	cmpnei	r2,r2,1
  80e1d4:	1000721e 	bne	r2,zero,80e3a0 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  80e1d8:	d0a05803 	ldbu	r2,-32416(gp)
  80e1dc:	10803fcc 	andi	r2,r2,255
  80e1e0:	e0bfff15 	stw	r2,-4(fp)
  80e1e4:	e0ffff17 	ldw	r3,-4(fp)
  80e1e8:	18800060 	cmpeqi	r2,r3,1
  80e1ec:	10000a1e 	bne	r2,zero,80e218 <OSTimeTick+0xa4>
  80e1f0:	e0ffff17 	ldw	r3,-4(fp)
  80e1f4:	188000a0 	cmpeqi	r2,r3,2
  80e1f8:	1000091e 	bne	r2,zero,80e220 <OSTimeTick+0xac>
  80e1fc:	e0ffff17 	ldw	r3,-4(fp)
  80e200:	1805003a 	cmpeq	r2,r3,zero
  80e204:	1000011e 	bne	r2,zero,80e20c <OSTimeTick+0x98>
  80e208:	00000a06 	br	80e234 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  80e20c:	00800044 	movi	r2,1
  80e210:	e0bffd05 	stb	r2,-12(fp)
                 break;
  80e214:	00000a06 	br	80e240 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  80e218:	e03ffd05 	stb	zero,-12(fp)
                 break;
  80e21c:	00000806 	br	80e240 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  80e220:	00800044 	movi	r2,1
  80e224:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  80e228:	00800044 	movi	r2,1
  80e22c:	d0a05805 	stb	r2,-32416(gp)
                 break;
  80e230:	00000306 	br	80e240 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  80e234:	00800044 	movi	r2,1
  80e238:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  80e23c:	d0205805 	stb	zero,-32416(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  80e240:	e0bffd03 	ldbu	r2,-12(fp)
  80e244:	1005003a 	cmpeq	r2,r2,zero
  80e248:	1000551e 	bne	r2,zero,80e3a0 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  80e24c:	d0a05717 	ldw	r2,-32420(gp)
  80e250:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80e254:	00004d06 	br	80e38c <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e258:	0005303a 	rdctl	r2,status
  80e25c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e260:	e0fff917 	ldw	r3,-28(fp)
  80e264:	00bfff84 	movi	r2,-2
  80e268:	1884703a 	and	r2,r3,r2
  80e26c:	1001703a 	wrctl	status,r2
  
  return context;
  80e270:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  80e274:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  80e278:	e0bffe17 	ldw	r2,-8(fp)
  80e27c:	10800b8b 	ldhu	r2,46(r2)
  80e280:	10bfffcc 	andi	r2,r2,65535
  80e284:	1005003a 	cmpeq	r2,r2,zero
  80e288:	1000391e 	bne	r2,zero,80e370 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  80e28c:	e0bffe17 	ldw	r2,-8(fp)
  80e290:	10800b8b 	ldhu	r2,46(r2)
  80e294:	10bfffc4 	addi	r2,r2,-1
  80e298:	1007883a 	mov	r3,r2
  80e29c:	e0bffe17 	ldw	r2,-8(fp)
  80e2a0:	10c00b8d 	sth	r3,46(r2)
  80e2a4:	e0bffe17 	ldw	r2,-8(fp)
  80e2a8:	10800b8b 	ldhu	r2,46(r2)
  80e2ac:	10bfffcc 	andi	r2,r2,65535
  80e2b0:	1004c03a 	cmpne	r2,r2,zero
  80e2b4:	10002e1e 	bne	r2,zero,80e370 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80e2b8:	e0bffe17 	ldw	r2,-8(fp)
  80e2bc:	10800c03 	ldbu	r2,48(r2)
  80e2c0:	10803fcc 	andi	r2,r2,255
  80e2c4:	10800dcc 	andi	r2,r2,55
  80e2c8:	1005003a 	cmpeq	r2,r2,zero
  80e2cc:	10000b1e 	bne	r2,zero,80e2fc <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  80e2d0:	e0bffe17 	ldw	r2,-8(fp)
  80e2d4:	10c00c03 	ldbu	r3,48(r2)
  80e2d8:	00bff204 	movi	r2,-56
  80e2dc:	1884703a 	and	r2,r3,r2
  80e2e0:	1007883a 	mov	r3,r2
  80e2e4:	e0bffe17 	ldw	r2,-8(fp)
  80e2e8:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  80e2ec:	e0fffe17 	ldw	r3,-8(fp)
  80e2f0:	00800044 	movi	r2,1
  80e2f4:	18800c45 	stb	r2,49(r3)
  80e2f8:	00000206 	br	80e304 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80e2fc:	e0bffe17 	ldw	r2,-8(fp)
  80e300:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  80e304:	e0bffe17 	ldw	r2,-8(fp)
  80e308:	10800c03 	ldbu	r2,48(r2)
  80e30c:	10803fcc 	andi	r2,r2,255
  80e310:	1080020c 	andi	r2,r2,8
  80e314:	1004c03a 	cmpne	r2,r2,zero
  80e318:	1000151e 	bne	r2,zero,80e370 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  80e31c:	e0bffe17 	ldw	r2,-8(fp)
  80e320:	10c00d83 	ldbu	r3,54(r2)
  80e324:	d0a06003 	ldbu	r2,-32384(gp)
  80e328:	1884b03a 	or	r2,r3,r2
  80e32c:	d0a06005 	stb	r2,-32384(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80e330:	e0bffe17 	ldw	r2,-8(fp)
  80e334:	10800d03 	ldbu	r2,52(r2)
  80e338:	11003fcc 	andi	r4,r2,255
  80e33c:	e0bffe17 	ldw	r2,-8(fp)
  80e340:	10800d03 	ldbu	r2,52(r2)
  80e344:	10c03fcc 	andi	r3,r2,255
  80e348:	d0a06044 	addi	r2,gp,-32383
  80e34c:	1885883a 	add	r2,r3,r2
  80e350:	10c00003 	ldbu	r3,0(r2)
  80e354:	e0bffe17 	ldw	r2,-8(fp)
  80e358:	10800d43 	ldbu	r2,53(r2)
  80e35c:	1884b03a 	or	r2,r3,r2
  80e360:	1007883a 	mov	r3,r2
  80e364:	d0a06044 	addi	r2,gp,-32383
  80e368:	2085883a 	add	r2,r4,r2
  80e36c:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  80e370:	e0bffe17 	ldw	r2,-8(fp)
  80e374:	10800517 	ldw	r2,20(r2)
  80e378:	e0bffe15 	stw	r2,-8(fp)
  80e37c:	e0bffc17 	ldw	r2,-16(fp)
  80e380:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e384:	e0bff817 	ldw	r2,-32(fp)
  80e388:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80e38c:	e0bffe17 	ldw	r2,-8(fp)
  80e390:	10800c83 	ldbu	r2,50(r2)
  80e394:	10803fcc 	andi	r2,r2,255
  80e398:	10800518 	cmpnei	r2,r2,20
  80e39c:	103fae1e 	bne	r2,zero,80e258 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  80e3a0:	e037883a 	mov	sp,fp
  80e3a4:	dfc00117 	ldw	ra,4(sp)
  80e3a8:	df000017 	ldw	fp,0(sp)
  80e3ac:	dec00204 	addi	sp,sp,8
  80e3b0:	f800283a 	ret

0080e3b4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  80e3b4:	deffff04 	addi	sp,sp,-4
  80e3b8:	df000015 	stw	fp,0(sp)
  80e3bc:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  80e3c0:	00804784 	movi	r2,286
}
  80e3c4:	e037883a 	mov	sp,fp
  80e3c8:	df000017 	ldw	fp,0(sp)
  80e3cc:	dec00104 	addi	sp,sp,4
  80e3d0:	f800283a 	ret

0080e3d4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  80e3d4:	deffff04 	addi	sp,sp,-4
  80e3d8:	df000015 	stw	fp,0(sp)
  80e3dc:	d839883a 	mov	fp,sp
}
  80e3e0:	e037883a 	mov	sp,fp
  80e3e4:	df000017 	ldw	fp,0(sp)
  80e3e8:	dec00104 	addi	sp,sp,4
  80e3ec:	f800283a 	ret

0080e3f0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  80e3f0:	defff804 	addi	sp,sp,-32
  80e3f4:	dfc00715 	stw	ra,28(sp)
  80e3f8:	df000615 	stw	fp,24(sp)
  80e3fc:	df000604 	addi	fp,sp,24
  80e400:	e13ffc15 	stw	r4,-16(fp)
  80e404:	e17ffd15 	stw	r5,-12(fp)
  80e408:	e1bffe05 	stb	r6,-8(fp)
  80e40c:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  80e410:	e0bffc17 	ldw	r2,-16(fp)
  80e414:	10800283 	ldbu	r2,10(r2)
  80e418:	10c03fcc 	andi	r3,r2,255
  80e41c:	008020b4 	movhi	r2,130
  80e420:	10b55904 	addi	r2,r2,-10908
  80e424:	10c5883a 	add	r2,r2,r3
  80e428:	10800003 	ldbu	r2,0(r2)
  80e42c:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  80e430:	e0fffa83 	ldbu	r3,-22(fp)
  80e434:	e0bffc17 	ldw	r2,-16(fp)
  80e438:	1885883a 	add	r2,r3,r2
  80e43c:	10800204 	addi	r2,r2,8
  80e440:	108000c3 	ldbu	r2,3(r2)
  80e444:	10c03fcc 	andi	r3,r2,255
  80e448:	008020b4 	movhi	r2,130
  80e44c:	10b55904 	addi	r2,r2,-10908
  80e450:	10c5883a 	add	r2,r2,r3
  80e454:	10800003 	ldbu	r2,0(r2)
  80e458:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  80e45c:	e0bffa83 	ldbu	r2,-22(fp)
  80e460:	100490fa 	slli	r2,r2,3
  80e464:	1007883a 	mov	r3,r2
  80e468:	e0bffa43 	ldbu	r2,-23(fp)
  80e46c:	1885883a 	add	r2,r3,r2
  80e470:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  80e474:	e0bffa03 	ldbu	r2,-24(fp)
  80e478:	00c020f4 	movhi	r3,131
  80e47c:	18da9904 	addi	r3,r3,27236
  80e480:	1085883a 	add	r2,r2,r2
  80e484:	1085883a 	add	r2,r2,r2
  80e488:	10c5883a 	add	r2,r2,r3
  80e48c:	10800017 	ldw	r2,0(r2)
  80e490:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  80e494:	e0bffb17 	ldw	r2,-20(fp)
  80e498:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  80e49c:	e0fffb17 	ldw	r3,-20(fp)
  80e4a0:	e0bffd17 	ldw	r2,-12(fp)
  80e4a4:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  80e4a8:	e0bffb17 	ldw	r2,-20(fp)
  80e4ac:	10800c03 	ldbu	r2,48(r2)
  80e4b0:	1007883a 	mov	r3,r2
  80e4b4:	e0bffe03 	ldbu	r2,-8(fp)
  80e4b8:	0084303a 	nor	r2,zero,r2
  80e4bc:	1884703a 	and	r2,r3,r2
  80e4c0:	1007883a 	mov	r3,r2
  80e4c4:	e0bffb17 	ldw	r2,-20(fp)
  80e4c8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  80e4cc:	e0fffb17 	ldw	r3,-20(fp)
  80e4d0:	e0bfff03 	ldbu	r2,-4(fp)
  80e4d4:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  80e4d8:	e0bffb17 	ldw	r2,-20(fp)
  80e4dc:	10800c03 	ldbu	r2,48(r2)
  80e4e0:	10803fcc 	andi	r2,r2,255
  80e4e4:	1080020c 	andi	r2,r2,8
  80e4e8:	1004c03a 	cmpne	r2,r2,zero
  80e4ec:	1000111e 	bne	r2,zero,80e534 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  80e4f0:	e0bffb17 	ldw	r2,-20(fp)
  80e4f4:	10c00d83 	ldbu	r3,54(r2)
  80e4f8:	d0a06003 	ldbu	r2,-32384(gp)
  80e4fc:	1884b03a 	or	r2,r3,r2
  80e500:	d0a06005 	stb	r2,-32384(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  80e504:	e13ffa83 	ldbu	r4,-22(fp)
  80e508:	e0fffa83 	ldbu	r3,-22(fp)
  80e50c:	d0a06044 	addi	r2,gp,-32383
  80e510:	1885883a 	add	r2,r3,r2
  80e514:	10c00003 	ldbu	r3,0(r2)
  80e518:	e0bffb17 	ldw	r2,-20(fp)
  80e51c:	10800d43 	ldbu	r2,53(r2)
  80e520:	1884b03a 	or	r2,r3,r2
  80e524:	1007883a 	mov	r3,r2
  80e528:	d0a06044 	addi	r2,gp,-32383
  80e52c:	2085883a 	add	r2,r4,r2
  80e530:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  80e534:	e13ffb17 	ldw	r4,-20(fp)
  80e538:	e17ffc17 	ldw	r5,-16(fp)
  80e53c:	080e7e80 	call	80e7e8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  80e540:	e0bffb17 	ldw	r2,-20(fp)
  80e544:	10800817 	ldw	r2,32(r2)
  80e548:	1005003a 	cmpeq	r2,r2,zero
  80e54c:	1000071e 	bne	r2,zero,80e56c <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80e550:	e0bffb17 	ldw	r2,-20(fp)
  80e554:	11400817 	ldw	r5,32(r2)
  80e558:	e13ffb17 	ldw	r4,-20(fp)
  80e55c:	080e8a00 	call	80e8a0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  80e560:	e0fffb17 	ldw	r3,-20(fp)
  80e564:	e0bffc17 	ldw	r2,-16(fp)
  80e568:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  80e56c:	e0bffa03 	ldbu	r2,-24(fp)
}
  80e570:	e037883a 	mov	sp,fp
  80e574:	dfc00117 	ldw	ra,4(sp)
  80e578:	df000017 	ldw	fp,0(sp)
  80e57c:	dec00204 	addi	sp,sp,8
  80e580:	f800283a 	ret

0080e584 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  80e584:	defffd04 	addi	sp,sp,-12
  80e588:	df000215 	stw	fp,8(sp)
  80e58c:	df000204 	addi	fp,sp,8
  80e590:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  80e594:	d0e06317 	ldw	r3,-32372(gp)
  80e598:	e0bfff17 	ldw	r2,-4(fp)
  80e59c:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  80e5a0:	d0a06317 	ldw	r2,-32372(gp)
  80e5a4:	10800d03 	ldbu	r2,52(r2)
  80e5a8:	11003fcc 	andi	r4,r2,255
  80e5ac:	d0a06317 	ldw	r2,-32372(gp)
  80e5b0:	10800d03 	ldbu	r2,52(r2)
  80e5b4:	10c03fcc 	andi	r3,r2,255
  80e5b8:	e0bfff17 	ldw	r2,-4(fp)
  80e5bc:	1885883a 	add	r2,r3,r2
  80e5c0:	10800204 	addi	r2,r2,8
  80e5c4:	10c000c3 	ldbu	r3,3(r2)
  80e5c8:	d0a06317 	ldw	r2,-32372(gp)
  80e5cc:	10800d43 	ldbu	r2,53(r2)
  80e5d0:	1884b03a 	or	r2,r3,r2
  80e5d4:	1007883a 	mov	r3,r2
  80e5d8:	e0bfff17 	ldw	r2,-4(fp)
  80e5dc:	2085883a 	add	r2,r4,r2
  80e5e0:	10800204 	addi	r2,r2,8
  80e5e4:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80e5e8:	e0bfff17 	ldw	r2,-4(fp)
  80e5ec:	10c00283 	ldbu	r3,10(r2)
  80e5f0:	d0a06317 	ldw	r2,-32372(gp)
  80e5f4:	10800d83 	ldbu	r2,54(r2)
  80e5f8:	1884b03a 	or	r2,r3,r2
  80e5fc:	1007883a 	mov	r3,r2
  80e600:	e0bfff17 	ldw	r2,-4(fp)
  80e604:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80e608:	d0a06317 	ldw	r2,-32372(gp)
  80e60c:	10800d03 	ldbu	r2,52(r2)
  80e610:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80e614:	e13ffe03 	ldbu	r4,-8(fp)
  80e618:	e0fffe03 	ldbu	r3,-8(fp)
  80e61c:	d0a06044 	addi	r2,gp,-32383
  80e620:	1885883a 	add	r2,r3,r2
  80e624:	10800003 	ldbu	r2,0(r2)
  80e628:	1007883a 	mov	r3,r2
  80e62c:	d0a06317 	ldw	r2,-32372(gp)
  80e630:	10800d43 	ldbu	r2,53(r2)
  80e634:	0084303a 	nor	r2,zero,r2
  80e638:	1884703a 	and	r2,r3,r2
  80e63c:	1007883a 	mov	r3,r2
  80e640:	d0a06044 	addi	r2,gp,-32383
  80e644:	2085883a 	add	r2,r4,r2
  80e648:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80e64c:	e0fffe03 	ldbu	r3,-8(fp)
  80e650:	d0a06044 	addi	r2,gp,-32383
  80e654:	1885883a 	add	r2,r3,r2
  80e658:	10800003 	ldbu	r2,0(r2)
  80e65c:	10803fcc 	andi	r2,r2,255
  80e660:	1004c03a 	cmpne	r2,r2,zero
  80e664:	1000071e 	bne	r2,zero,80e684 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80e668:	d0a06317 	ldw	r2,-32372(gp)
  80e66c:	10800d83 	ldbu	r2,54(r2)
  80e670:	0084303a 	nor	r2,zero,r2
  80e674:	1007883a 	mov	r3,r2
  80e678:	d0a06003 	ldbu	r2,-32384(gp)
  80e67c:	1884703a 	and	r2,r3,r2
  80e680:	d0a06005 	stb	r2,-32384(gp)
    }
}
  80e684:	e037883a 	mov	sp,fp
  80e688:	df000017 	ldw	fp,0(sp)
  80e68c:	dec00104 	addi	sp,sp,4
  80e690:	f800283a 	ret

0080e694 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  80e694:	defffb04 	addi	sp,sp,-20
  80e698:	df000415 	stw	fp,16(sp)
  80e69c:	df000404 	addi	fp,sp,16
  80e6a0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  80e6a4:	d0a06317 	ldw	r2,-32372(gp)
  80e6a8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  80e6ac:	d0e06317 	ldw	r3,-32372(gp)
  80e6b0:	e0bfff17 	ldw	r2,-4(fp)
  80e6b4:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  80e6b8:	e0bfff17 	ldw	r2,-4(fp)
  80e6bc:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  80e6c0:	e0bffe17 	ldw	r2,-8(fp)
  80e6c4:	10800017 	ldw	r2,0(r2)
  80e6c8:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80e6cc:	00002006 	br	80e750 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  80e6d0:	d0a06317 	ldw	r2,-32372(gp)
  80e6d4:	10800d03 	ldbu	r2,52(r2)
  80e6d8:	11003fcc 	andi	r4,r2,255
  80e6dc:	d0a06317 	ldw	r2,-32372(gp)
  80e6e0:	10800d03 	ldbu	r2,52(r2)
  80e6e4:	10c03fcc 	andi	r3,r2,255
  80e6e8:	e0bffd17 	ldw	r2,-12(fp)
  80e6ec:	1885883a 	add	r2,r3,r2
  80e6f0:	10800204 	addi	r2,r2,8
  80e6f4:	10c000c3 	ldbu	r3,3(r2)
  80e6f8:	d0a06317 	ldw	r2,-32372(gp)
  80e6fc:	10800d43 	ldbu	r2,53(r2)
  80e700:	1884b03a 	or	r2,r3,r2
  80e704:	1007883a 	mov	r3,r2
  80e708:	e0bffd17 	ldw	r2,-12(fp)
  80e70c:	2085883a 	add	r2,r4,r2
  80e710:	10800204 	addi	r2,r2,8
  80e714:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80e718:	e0bffd17 	ldw	r2,-12(fp)
  80e71c:	10c00283 	ldbu	r3,10(r2)
  80e720:	d0a06317 	ldw	r2,-32372(gp)
  80e724:	10800d83 	ldbu	r2,54(r2)
  80e728:	1884b03a 	or	r2,r3,r2
  80e72c:	1007883a 	mov	r3,r2
  80e730:	e0bffd17 	ldw	r2,-12(fp)
  80e734:	10c00285 	stb	r3,10(r2)
        pevents++;
  80e738:	e0bffe17 	ldw	r2,-8(fp)
  80e73c:	10800104 	addi	r2,r2,4
  80e740:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  80e744:	e0bffe17 	ldw	r2,-8(fp)
  80e748:	10800017 	ldw	r2,0(r2)
  80e74c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80e750:	e0bffd17 	ldw	r2,-12(fp)
  80e754:	1004c03a 	cmpne	r2,r2,zero
  80e758:	103fdd1e 	bne	r2,zero,80e6d0 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80e75c:	d0a06317 	ldw	r2,-32372(gp)
  80e760:	10800d03 	ldbu	r2,52(r2)
  80e764:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80e768:	e13ffc03 	ldbu	r4,-16(fp)
  80e76c:	e0fffc03 	ldbu	r3,-16(fp)
  80e770:	d0a06044 	addi	r2,gp,-32383
  80e774:	1885883a 	add	r2,r3,r2
  80e778:	10800003 	ldbu	r2,0(r2)
  80e77c:	1007883a 	mov	r3,r2
  80e780:	d0a06317 	ldw	r2,-32372(gp)
  80e784:	10800d43 	ldbu	r2,53(r2)
  80e788:	0084303a 	nor	r2,zero,r2
  80e78c:	1884703a 	and	r2,r3,r2
  80e790:	1007883a 	mov	r3,r2
  80e794:	d0a06044 	addi	r2,gp,-32383
  80e798:	2085883a 	add	r2,r4,r2
  80e79c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80e7a0:	e0fffc03 	ldbu	r3,-16(fp)
  80e7a4:	d0a06044 	addi	r2,gp,-32383
  80e7a8:	1885883a 	add	r2,r3,r2
  80e7ac:	10800003 	ldbu	r2,0(r2)
  80e7b0:	10803fcc 	andi	r2,r2,255
  80e7b4:	1004c03a 	cmpne	r2,r2,zero
  80e7b8:	1000071e 	bne	r2,zero,80e7d8 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80e7bc:	d0a06317 	ldw	r2,-32372(gp)
  80e7c0:	10800d83 	ldbu	r2,54(r2)
  80e7c4:	0084303a 	nor	r2,zero,r2
  80e7c8:	1007883a 	mov	r3,r2
  80e7cc:	d0a06003 	ldbu	r2,-32384(gp)
  80e7d0:	1884703a 	and	r2,r3,r2
  80e7d4:	d0a06005 	stb	r2,-32384(gp)
    }
}
  80e7d8:	e037883a 	mov	sp,fp
  80e7dc:	df000017 	ldw	fp,0(sp)
  80e7e0:	dec00104 	addi	sp,sp,4
  80e7e4:	f800283a 	ret

0080e7e8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  80e7e8:	defffc04 	addi	sp,sp,-16
  80e7ec:	df000315 	stw	fp,12(sp)
  80e7f0:	df000304 	addi	fp,sp,12
  80e7f4:	e13ffe15 	stw	r4,-8(fp)
  80e7f8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  80e7fc:	e0bffe17 	ldw	r2,-8(fp)
  80e800:	10800d03 	ldbu	r2,52(r2)
  80e804:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  80e808:	e13ffd03 	ldbu	r4,-12(fp)
  80e80c:	e0fffd03 	ldbu	r3,-12(fp)
  80e810:	e0bfff17 	ldw	r2,-4(fp)
  80e814:	1885883a 	add	r2,r3,r2
  80e818:	10800204 	addi	r2,r2,8
  80e81c:	108000c3 	ldbu	r2,3(r2)
  80e820:	1007883a 	mov	r3,r2
  80e824:	e0bffe17 	ldw	r2,-8(fp)
  80e828:	10800d43 	ldbu	r2,53(r2)
  80e82c:	0084303a 	nor	r2,zero,r2
  80e830:	1884703a 	and	r2,r3,r2
  80e834:	1007883a 	mov	r3,r2
  80e838:	e0bfff17 	ldw	r2,-4(fp)
  80e83c:	2085883a 	add	r2,r4,r2
  80e840:	10800204 	addi	r2,r2,8
  80e844:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  80e848:	e0fffd03 	ldbu	r3,-12(fp)
  80e84c:	e0bfff17 	ldw	r2,-4(fp)
  80e850:	1885883a 	add	r2,r3,r2
  80e854:	10800204 	addi	r2,r2,8
  80e858:	108000c3 	ldbu	r2,3(r2)
  80e85c:	10803fcc 	andi	r2,r2,255
  80e860:	1004c03a 	cmpne	r2,r2,zero
  80e864:	10000a1e 	bne	r2,zero,80e890 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  80e868:	e0bfff17 	ldw	r2,-4(fp)
  80e86c:	10800283 	ldbu	r2,10(r2)
  80e870:	1007883a 	mov	r3,r2
  80e874:	e0bffe17 	ldw	r2,-8(fp)
  80e878:	10800d83 	ldbu	r2,54(r2)
  80e87c:	0084303a 	nor	r2,zero,r2
  80e880:	1884703a 	and	r2,r3,r2
  80e884:	1007883a 	mov	r3,r2
  80e888:	e0bfff17 	ldw	r2,-4(fp)
  80e88c:	10c00285 	stb	r3,10(r2)
    }
}
  80e890:	e037883a 	mov	sp,fp
  80e894:	df000017 	ldw	fp,0(sp)
  80e898:	dec00104 	addi	sp,sp,4
  80e89c:	f800283a 	ret

0080e8a0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  80e8a0:	defffa04 	addi	sp,sp,-24
  80e8a4:	df000515 	stw	fp,20(sp)
  80e8a8:	df000504 	addi	fp,sp,20
  80e8ac:	e13ffe15 	stw	r4,-8(fp)
  80e8b0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  80e8b4:	e0bffe17 	ldw	r2,-8(fp)
  80e8b8:	10800d03 	ldbu	r2,52(r2)
  80e8bc:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  80e8c0:	e0bffe17 	ldw	r2,-8(fp)
  80e8c4:	10800d83 	ldbu	r2,54(r2)
  80e8c8:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  80e8cc:	e0bffe17 	ldw	r2,-8(fp)
  80e8d0:	10800d43 	ldbu	r2,53(r2)
  80e8d4:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  80e8d8:	e0bfff17 	ldw	r2,-4(fp)
  80e8dc:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  80e8e0:	e0bffd17 	ldw	r2,-12(fp)
  80e8e4:	10800017 	ldw	r2,0(r2)
  80e8e8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80e8ec:	00002606 	br	80e988 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  80e8f0:	e13ffb83 	ldbu	r4,-18(fp)
  80e8f4:	e0fffb83 	ldbu	r3,-18(fp)
  80e8f8:	e0bffc17 	ldw	r2,-16(fp)
  80e8fc:	1885883a 	add	r2,r3,r2
  80e900:	10800204 	addi	r2,r2,8
  80e904:	108000c3 	ldbu	r2,3(r2)
  80e908:	1007883a 	mov	r3,r2
  80e90c:	e0bffb03 	ldbu	r2,-20(fp)
  80e910:	0084303a 	nor	r2,zero,r2
  80e914:	1884703a 	and	r2,r3,r2
  80e918:	1007883a 	mov	r3,r2
  80e91c:	e0bffc17 	ldw	r2,-16(fp)
  80e920:	2085883a 	add	r2,r4,r2
  80e924:	10800204 	addi	r2,r2,8
  80e928:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  80e92c:	e0fffb83 	ldbu	r3,-18(fp)
  80e930:	e0bffc17 	ldw	r2,-16(fp)
  80e934:	1885883a 	add	r2,r3,r2
  80e938:	10800204 	addi	r2,r2,8
  80e93c:	108000c3 	ldbu	r2,3(r2)
  80e940:	10803fcc 	andi	r2,r2,255
  80e944:	1004c03a 	cmpne	r2,r2,zero
  80e948:	1000091e 	bne	r2,zero,80e970 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  80e94c:	e0bffc17 	ldw	r2,-16(fp)
  80e950:	10800283 	ldbu	r2,10(r2)
  80e954:	1007883a 	mov	r3,r2
  80e958:	e0bffb43 	ldbu	r2,-19(fp)
  80e95c:	0084303a 	nor	r2,zero,r2
  80e960:	1884703a 	and	r2,r3,r2
  80e964:	1007883a 	mov	r3,r2
  80e968:	e0bffc17 	ldw	r2,-16(fp)
  80e96c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  80e970:	e0bffd17 	ldw	r2,-12(fp)
  80e974:	10800104 	addi	r2,r2,4
  80e978:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  80e97c:	e0bffd17 	ldw	r2,-12(fp)
  80e980:	10800017 	ldw	r2,0(r2)
  80e984:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80e988:	e0bffc17 	ldw	r2,-16(fp)
  80e98c:	1004c03a 	cmpne	r2,r2,zero
  80e990:	103fd71e 	bne	r2,zero,80e8f0 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  80e994:	e037883a 	mov	sp,fp
  80e998:	df000017 	ldw	fp,0(sp)
  80e99c:	dec00104 	addi	sp,sp,4
  80e9a0:	f800283a 	ret

0080e9a4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  80e9a4:	defffc04 	addi	sp,sp,-16
  80e9a8:	df000315 	stw	fp,12(sp)
  80e9ac:	df000304 	addi	fp,sp,12
  80e9b0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  80e9b4:	e0bfff17 	ldw	r2,-4(fp)
  80e9b8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  80e9bc:	e0bfff17 	ldw	r2,-4(fp)
  80e9c0:	108002c4 	addi	r2,r2,11
  80e9c4:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80e9c8:	e03ffd05 	stb	zero,-12(fp)
  80e9cc:	00000806 	br	80e9f0 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  80e9d0:	e0bffe17 	ldw	r2,-8(fp)
  80e9d4:	10000005 	stb	zero,0(r2)
  80e9d8:	e0bffe17 	ldw	r2,-8(fp)
  80e9dc:	10800044 	addi	r2,r2,1
  80e9e0:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80e9e4:	e0bffd03 	ldbu	r2,-12(fp)
  80e9e8:	10800044 	addi	r2,r2,1
  80e9ec:	e0bffd05 	stb	r2,-12(fp)
  80e9f0:	e0bffd03 	ldbu	r2,-12(fp)
  80e9f4:	108000f0 	cmpltui	r2,r2,3
  80e9f8:	103ff51e 	bne	r2,zero,80e9d0 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  80e9fc:	e037883a 	mov	sp,fp
  80ea00:	df000017 	ldw	fp,0(sp)
  80ea04:	dec00104 	addi	sp,sp,4
  80ea08:	f800283a 	ret

0080ea0c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  80ea0c:	defffb04 	addi	sp,sp,-20
  80ea10:	dfc00415 	stw	ra,16(sp)
  80ea14:	df000315 	stw	fp,12(sp)
  80ea18:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  80ea1c:	010020f4 	movhi	r4,131
  80ea20:	21168504 	addi	r4,r4,23060
  80ea24:	0142d004 	movi	r5,2880
  80ea28:	080ed700 	call	80ed70 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  80ea2c:	008020f4 	movhi	r2,131
  80ea30:	10968504 	addi	r2,r2,23060
  80ea34:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  80ea38:	008020f4 	movhi	r2,131
  80ea3c:	10969104 	addi	r2,r2,23108
  80ea40:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80ea44:	e03fff0d 	sth	zero,-4(fp)
  80ea48:	00001306 	br	80ea98 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80ea4c:	e0bffe17 	ldw	r2,-8(fp)
  80ea50:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  80ea54:	e0fffe17 	ldw	r3,-8(fp)
  80ea58:	e0bffd17 	ldw	r2,-12(fp)
  80ea5c:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  80ea60:	e0fffe17 	ldw	r3,-8(fp)
  80ea64:	00800fc4 	movi	r2,63
  80ea68:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  80ea6c:	e0bffe17 	ldw	r2,-8(fp)
  80ea70:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  80ea74:	e0bffe17 	ldw	r2,-8(fp)
  80ea78:	10800c04 	addi	r2,r2,48
  80ea7c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  80ea80:	e0bffd17 	ldw	r2,-12(fp)
  80ea84:	10800c04 	addi	r2,r2,48
  80ea88:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80ea8c:	e0bfff0b 	ldhu	r2,-4(fp)
  80ea90:	10800044 	addi	r2,r2,1
  80ea94:	e0bfff0d 	sth	r2,-4(fp)
  80ea98:	e0bfff0b 	ldhu	r2,-4(fp)
  80ea9c:	10800ef0 	cmpltui	r2,r2,59
  80eaa0:	103fea1e 	bne	r2,zero,80ea4c <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  80eaa4:	e0bffe17 	ldw	r2,-8(fp)
  80eaa8:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  80eaac:	e0bffe17 	ldw	r2,-8(fp)
  80eab0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  80eab4:	e0fffe17 	ldw	r3,-8(fp)
  80eab8:	00800fc4 	movi	r2,63
  80eabc:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  80eac0:	e0bffe17 	ldw	r2,-8(fp)
  80eac4:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  80eac8:	008020f4 	movhi	r2,131
  80eacc:	10968504 	addi	r2,r2,23060
  80ead0:	d0a06115 	stw	r2,-32380(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  80ead4:	e037883a 	mov	sp,fp
  80ead8:	dfc00117 	ldw	ra,4(sp)
  80eadc:	df000017 	ldw	fp,0(sp)
  80eae0:	dec00204 	addi	sp,sp,8
  80eae4:	f800283a 	ret

0080eae8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  80eae8:	deffff04 	addi	sp,sp,-4
  80eaec:	df000015 	stw	fp,0(sp)
  80eaf0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  80eaf4:	d0206415 	stw	zero,-32368(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  80eaf8:	d0206205 	stb	zero,-32376(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  80eafc:	d0205405 	stb	zero,-32432(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  80eb00:	d0205c45 	stb	zero,-32399(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  80eb04:	d0205445 	stb	zero,-32431(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  80eb08:	d0205915 	stw	zero,-32412(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  80eb0c:	d0205515 	stw	zero,-32428(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  80eb10:	d0206715 	stw	zero,-32356(gp)
    OSIdleCtrMax  = 0L;
  80eb14:	d0205a15 	stw	zero,-32408(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  80eb18:	d0206605 	stb	zero,-32360(gp)
#endif
}
  80eb1c:	e037883a 	mov	sp,fp
  80eb20:	df000017 	ldw	fp,0(sp)
  80eb24:	dec00104 	addi	sp,sp,4
  80eb28:	f800283a 	ret

0080eb2c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  80eb2c:	defffd04 	addi	sp,sp,-12
  80eb30:	df000215 	stw	fp,8(sp)
  80eb34:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  80eb38:	d0206005 	stb	zero,-32384(gp)
    prdytbl       = &OSRdyTbl[0];
  80eb3c:	d0a06044 	addi	r2,gp,-32383
  80eb40:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80eb44:	e03fff05 	stb	zero,-4(fp)
  80eb48:	00000806 	br	80eb6c <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  80eb4c:	e0bffe17 	ldw	r2,-8(fp)
  80eb50:	10000005 	stb	zero,0(r2)
  80eb54:	e0bffe17 	ldw	r2,-8(fp)
  80eb58:	10800044 	addi	r2,r2,1
  80eb5c:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80eb60:	e0bfff03 	ldbu	r2,-4(fp)
  80eb64:	10800044 	addi	r2,r2,1
  80eb68:	e0bfff05 	stb	r2,-4(fp)
  80eb6c:	e0bfff03 	ldbu	r2,-4(fp)
  80eb70:	108000f0 	cmpltui	r2,r2,3
  80eb74:	103ff51e 	bne	r2,zero,80eb4c <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  80eb78:	d0205645 	stb	zero,-32423(gp)
    OSPrioHighRdy = 0;
  80eb7c:	d0205605 	stb	zero,-32424(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  80eb80:	d0205e15 	stw	zero,-32392(gp)
    OSTCBCur      = (OS_TCB *)0;
  80eb84:	d0206315 	stw	zero,-32372(gp)
}
  80eb88:	e037883a 	mov	sp,fp
  80eb8c:	df000017 	ldw	fp,0(sp)
  80eb90:	dec00104 	addi	sp,sp,4
  80eb94:	f800283a 	ret

0080eb98 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  80eb98:	defff804 	addi	sp,sp,-32
  80eb9c:	dfc00715 	stw	ra,28(sp)
  80eba0:	df000615 	stw	fp,24(sp)
  80eba4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  80eba8:	018020f4 	movhi	r6,131
  80ebac:	31968404 	addi	r6,r6,23056
  80ebb0:	00bfffd4 	movui	r2,65535
  80ebb4:	d8800015 	stw	r2,0(sp)
  80ebb8:	008020f4 	movhi	r2,131
  80ebbc:	10948504 	addi	r2,r2,21012
  80ebc0:	d8800115 	stw	r2,4(sp)
  80ebc4:	00808004 	movi	r2,512
  80ebc8:	d8800215 	stw	r2,8(sp)
  80ebcc:	d8000315 	stw	zero,12(sp)
  80ebd0:	008000c4 	movi	r2,3
  80ebd4:	d8800415 	stw	r2,16(sp)
  80ebd8:	01002074 	movhi	r4,129
  80ebdc:	213c1304 	addi	r4,r4,-4020
  80ebe0:	000b883a 	mov	r5,zero
  80ebe4:	01c00504 	movi	r7,20
  80ebe8:	0813e2c0 	call	813e2c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  80ebec:	014020b4 	movhi	r5,130
  80ebf0:	29759904 	addi	r5,r5,-10652
  80ebf4:	01000504 	movi	r4,20
  80ebf8:	e1bfff04 	addi	r6,fp,-4
  80ebfc:	08147600 	call	814760 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  80ec00:	e037883a 	mov	sp,fp
  80ec04:	dfc00117 	ldw	ra,4(sp)
  80ec08:	df000017 	ldw	fp,0(sp)
  80ec0c:	dec00204 	addi	sp,sp,8
  80ec10:	f800283a 	ret

0080ec14 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  80ec14:	defff804 	addi	sp,sp,-32
  80ec18:	dfc00715 	stw	ra,28(sp)
  80ec1c:	df000615 	stw	fp,24(sp)
  80ec20:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  80ec24:	018020f4 	movhi	r6,131
  80ec28:	31940c04 	addi	r6,r6,20528
  80ec2c:	00bfff94 	movui	r2,65534
  80ec30:	d8800015 	stw	r2,0(sp)
  80ec34:	008020f4 	movhi	r2,131
  80ec38:	10920d04 	addi	r2,r2,18484
  80ec3c:	d8800115 	stw	r2,4(sp)
  80ec40:	00808004 	movi	r2,512
  80ec44:	d8800215 	stw	r2,8(sp)
  80ec48:	d8000315 	stw	zero,12(sp)
  80ec4c:	008000c4 	movi	r2,3
  80ec50:	d8800415 	stw	r2,16(sp)
  80ec54:	01002074 	movhi	r4,129
  80ec58:	213c2a04 	addi	r4,r4,-3928
  80ec5c:	000b883a 	mov	r5,zero
  80ec60:	01c004c4 	movi	r7,19
  80ec64:	0813e2c0 	call	813e2c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  80ec68:	014020b4 	movhi	r5,130
  80ec6c:	29759d04 	addi	r5,r5,-10636
  80ec70:	010004c4 	movi	r4,19
  80ec74:	e1bfff04 	addi	r6,fp,-4
  80ec78:	08147600 	call	814760 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  80ec7c:	e037883a 	mov	sp,fp
  80ec80:	dfc00117 	ldw	ra,4(sp)
  80ec84:	df000017 	ldw	fp,0(sp)
  80ec88:	dec00204 	addi	sp,sp,8
  80ec8c:	f800283a 	ret

0080ec90 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  80ec90:	defffb04 	addi	sp,sp,-20
  80ec94:	dfc00415 	stw	ra,16(sp)
  80ec98:	df000315 	stw	fp,12(sp)
  80ec9c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  80eca0:	010020f4 	movhi	r4,131
  80eca4:	21195504 	addi	r4,r4,25940
  80eca8:	01414404 	movi	r5,1296
  80ecac:	080ed700 	call	80ed70 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  80ecb0:	010020f4 	movhi	r4,131
  80ecb4:	211a9904 	addi	r4,r4,27236
  80ecb8:	01401504 	movi	r5,84
  80ecbc:	080ed700 	call	80ed70 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  80ecc0:	008020f4 	movhi	r2,131
  80ecc4:	10995504 	addi	r2,r2,25940
  80ecc8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  80eccc:	008020f4 	movhi	r2,131
  80ecd0:	10997004 	addi	r2,r2,26048
  80ecd4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80ecd8:	e03fff05 	stb	zero,-4(fp)
  80ecdc:	00001106 	br	80ed24 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  80ece0:	e0fffe17 	ldw	r3,-8(fp)
  80ece4:	e0bffd17 	ldw	r2,-12(fp)
  80ece8:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  80ecec:	e0fffe17 	ldw	r3,-8(fp)
  80ecf0:	00800fc4 	movi	r2,63
  80ecf4:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80ecf8:	e0bffe17 	ldw	r2,-8(fp)
  80ecfc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  80ed00:	e0bffe17 	ldw	r2,-8(fp)
  80ed04:	10801b04 	addi	r2,r2,108
  80ed08:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  80ed0c:	e0bffd17 	ldw	r2,-12(fp)
  80ed10:	10801b04 	addi	r2,r2,108
  80ed14:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80ed18:	e0bfff03 	ldbu	r2,-4(fp)
  80ed1c:	10800044 	addi	r2,r2,1
  80ed20:	e0bfff05 	stb	r2,-4(fp)
  80ed24:	e0bfff03 	ldbu	r2,-4(fp)
  80ed28:	108002f0 	cmpltui	r2,r2,11
  80ed2c:	103fec1e 	bne	r2,zero,80ece0 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  80ed30:	e0bffe17 	ldw	r2,-8(fp)
  80ed34:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  80ed38:	e0fffe17 	ldw	r3,-8(fp)
  80ed3c:	00800fc4 	movi	r2,63
  80ed40:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80ed44:	e0bffe17 	ldw	r2,-8(fp)
  80ed48:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  80ed4c:	d0205715 	stw	zero,-32420(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  80ed50:	008020f4 	movhi	r2,131
  80ed54:	10995504 	addi	r2,r2,25940
  80ed58:	d0a05b15 	stw	r2,-32404(gp)
}
  80ed5c:	e037883a 	mov	sp,fp
  80ed60:	dfc00117 	ldw	ra,4(sp)
  80ed64:	df000017 	ldw	fp,0(sp)
  80ed68:	dec00204 	addi	sp,sp,8
  80ed6c:	f800283a 	ret

0080ed70 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  80ed70:	defffd04 	addi	sp,sp,-12
  80ed74:	df000215 	stw	fp,8(sp)
  80ed78:	df000204 	addi	fp,sp,8
  80ed7c:	e13ffe15 	stw	r4,-8(fp)
  80ed80:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  80ed84:	00000806 	br	80eda8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  80ed88:	e0bffe17 	ldw	r2,-8(fp)
  80ed8c:	10000005 	stb	zero,0(r2)
  80ed90:	e0bffe17 	ldw	r2,-8(fp)
  80ed94:	10800044 	addi	r2,r2,1
  80ed98:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80ed9c:	e0bfff0b 	ldhu	r2,-4(fp)
  80eda0:	10bfffc4 	addi	r2,r2,-1
  80eda4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  80eda8:	e0bfff0b 	ldhu	r2,-4(fp)
  80edac:	1004c03a 	cmpne	r2,r2,zero
  80edb0:	103ff51e 	bne	r2,zero,80ed88 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  80edb4:	e037883a 	mov	sp,fp
  80edb8:	df000017 	ldw	fp,0(sp)
  80edbc:	dec00104 	addi	sp,sp,4
  80edc0:	f800283a 	ret

0080edc4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  80edc4:	defffc04 	addi	sp,sp,-16
  80edc8:	df000315 	stw	fp,12(sp)
  80edcc:	df000304 	addi	fp,sp,12
  80edd0:	e13ffd15 	stw	r4,-12(fp)
  80edd4:	e17ffe15 	stw	r5,-8(fp)
  80edd8:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  80eddc:	00000d06 	br	80ee14 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  80ede0:	e0bffe17 	ldw	r2,-8(fp)
  80ede4:	10c00003 	ldbu	r3,0(r2)
  80ede8:	e0bffd17 	ldw	r2,-12(fp)
  80edec:	10c00005 	stb	r3,0(r2)
  80edf0:	e0bffd17 	ldw	r2,-12(fp)
  80edf4:	10800044 	addi	r2,r2,1
  80edf8:	e0bffd15 	stw	r2,-12(fp)
  80edfc:	e0bffe17 	ldw	r2,-8(fp)
  80ee00:	10800044 	addi	r2,r2,1
  80ee04:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80ee08:	e0bfff0b 	ldhu	r2,-4(fp)
  80ee0c:	10bfffc4 	addi	r2,r2,-1
  80ee10:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  80ee14:	e0bfff0b 	ldhu	r2,-4(fp)
  80ee18:	1004c03a 	cmpne	r2,r2,zero
  80ee1c:	103ff01e 	bne	r2,zero,80ede0 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  80ee20:	e037883a 	mov	sp,fp
  80ee24:	df000017 	ldw	fp,0(sp)
  80ee28:	dec00104 	addi	sp,sp,4
  80ee2c:	f800283a 	ret

0080ee30 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  80ee30:	defffb04 	addi	sp,sp,-20
  80ee34:	dfc00415 	stw	ra,16(sp)
  80ee38:	df000315 	stw	fp,12(sp)
  80ee3c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80ee40:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ee44:	0005303a 	rdctl	r2,status
  80ee48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ee4c:	e0fffe17 	ldw	r3,-8(fp)
  80ee50:	00bfff84 	movi	r2,-2
  80ee54:	1884703a 	and	r2,r3,r2
  80ee58:	1001703a 	wrctl	status,r2
  
  return context;
  80ee5c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  80ee60:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  80ee64:	d0a06203 	ldbu	r2,-32376(gp)
  80ee68:	10803fcc 	andi	r2,r2,255
  80ee6c:	1004c03a 	cmpne	r2,r2,zero
  80ee70:	10001b1e 	bne	r2,zero,80eee0 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  80ee74:	d0a05403 	ldbu	r2,-32432(gp)
  80ee78:	10803fcc 	andi	r2,r2,255
  80ee7c:	1004c03a 	cmpne	r2,r2,zero
  80ee80:	1000171e 	bne	r2,zero,80eee0 <OS_Sched+0xb0>
            OS_SchedNew();
  80ee84:	080ef040 	call	80ef04 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  80ee88:	d0a05603 	ldbu	r2,-32424(gp)
  80ee8c:	d0e05643 	ldbu	r3,-32423(gp)
  80ee90:	11003fcc 	andi	r4,r2,255
  80ee94:	18803fcc 	andi	r2,r3,255
  80ee98:	20801126 	beq	r4,r2,80eee0 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  80ee9c:	d0a05603 	ldbu	r2,-32424(gp)
  80eea0:	10803fcc 	andi	r2,r2,255
  80eea4:	00c020f4 	movhi	r3,131
  80eea8:	18da9904 	addi	r3,r3,27236
  80eeac:	1085883a 	add	r2,r2,r2
  80eeb0:	1085883a 	add	r2,r2,r2
  80eeb4:	10c5883a 	add	r2,r2,r3
  80eeb8:	10800017 	ldw	r2,0(r2)
  80eebc:	d0a05e15 	stw	r2,-32392(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  80eec0:	d0e05e17 	ldw	r3,-32392(gp)
  80eec4:	18800e17 	ldw	r2,56(r3)
  80eec8:	10800044 	addi	r2,r2,1
  80eecc:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  80eed0:	d0a05917 	ldw	r2,-32412(gp)
  80eed4:	10800044 	addi	r2,r2,1
  80eed8:	d0a05915 	stw	r2,-32412(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  80eedc:	081be4c0 	call	81be4c <OSCtxSw>
  80eee0:	e0bfff17 	ldw	r2,-4(fp)
  80eee4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eee8:	e0bffd17 	ldw	r2,-12(fp)
  80eeec:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  80eef0:	e037883a 	mov	sp,fp
  80eef4:	dfc00117 	ldw	ra,4(sp)
  80eef8:	df000017 	ldw	fp,0(sp)
  80eefc:	dec00204 	addi	sp,sp,8
  80ef00:	f800283a 	ret

0080ef04 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  80ef04:	defffe04 	addi	sp,sp,-8
  80ef08:	df000115 	stw	fp,4(sp)
  80ef0c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  80ef10:	d0a06003 	ldbu	r2,-32384(gp)
  80ef14:	10c03fcc 	andi	r3,r2,255
  80ef18:	008020b4 	movhi	r2,130
  80ef1c:	10b55904 	addi	r2,r2,-10908
  80ef20:	10c5883a 	add	r2,r2,r3
  80ef24:	10800003 	ldbu	r2,0(r2)
  80ef28:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  80ef2c:	e0bfff03 	ldbu	r2,-4(fp)
  80ef30:	100490fa 	slli	r2,r2,3
  80ef34:	1009883a 	mov	r4,r2
  80ef38:	e0ffff03 	ldbu	r3,-4(fp)
  80ef3c:	d0a06044 	addi	r2,gp,-32383
  80ef40:	1885883a 	add	r2,r3,r2
  80ef44:	10800003 	ldbu	r2,0(r2)
  80ef48:	10c03fcc 	andi	r3,r2,255
  80ef4c:	008020b4 	movhi	r2,130
  80ef50:	10b55904 	addi	r2,r2,-10908
  80ef54:	10c5883a 	add	r2,r2,r3
  80ef58:	10800003 	ldbu	r2,0(r2)
  80ef5c:	2085883a 	add	r2,r4,r2
  80ef60:	d0a05605 	stb	r2,-32424(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  80ef64:	e037883a 	mov	sp,fp
  80ef68:	df000017 	ldw	fp,0(sp)
  80ef6c:	dec00104 	addi	sp,sp,4
  80ef70:	f800283a 	ret

0080ef74 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  80ef74:	defffc04 	addi	sp,sp,-16
  80ef78:	df000315 	stw	fp,12(sp)
  80ef7c:	df000304 	addi	fp,sp,12
  80ef80:	e13ffe15 	stw	r4,-8(fp)
  80ef84:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  80ef88:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  80ef8c:	00000d06 	br	80efc4 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  80ef90:	e0bfff17 	ldw	r2,-4(fp)
  80ef94:	10c00003 	ldbu	r3,0(r2)
  80ef98:	e0bffe17 	ldw	r2,-8(fp)
  80ef9c:	10c00005 	stb	r3,0(r2)
  80efa0:	e0bffe17 	ldw	r2,-8(fp)
  80efa4:	10800044 	addi	r2,r2,1
  80efa8:	e0bffe15 	stw	r2,-8(fp)
  80efac:	e0bfff17 	ldw	r2,-4(fp)
  80efb0:	10800044 	addi	r2,r2,1
  80efb4:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80efb8:	e0bffd03 	ldbu	r2,-12(fp)
  80efbc:	10800044 	addi	r2,r2,1
  80efc0:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80efc4:	e0bfff17 	ldw	r2,-4(fp)
  80efc8:	10800003 	ldbu	r2,0(r2)
  80efcc:	10803fcc 	andi	r2,r2,255
  80efd0:	1004c03a 	cmpne	r2,r2,zero
  80efd4:	103fee1e 	bne	r2,zero,80ef90 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  80efd8:	e0bffe17 	ldw	r2,-8(fp)
  80efdc:	10000005 	stb	zero,0(r2)
    return (len);
  80efe0:	e0bffd03 	ldbu	r2,-12(fp)
}
  80efe4:	e037883a 	mov	sp,fp
  80efe8:	df000017 	ldw	fp,0(sp)
  80efec:	dec00104 	addi	sp,sp,4
  80eff0:	f800283a 	ret

0080eff4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  80eff4:	defffd04 	addi	sp,sp,-12
  80eff8:	df000215 	stw	fp,8(sp)
  80effc:	df000204 	addi	fp,sp,8
  80f000:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  80f004:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  80f008:	00000606 	br	80f024 <OS_StrLen+0x30>
        psrc++;
  80f00c:	e0bfff17 	ldw	r2,-4(fp)
  80f010:	10800044 	addi	r2,r2,1
  80f014:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80f018:	e0bffe03 	ldbu	r2,-8(fp)
  80f01c:	10800044 	addi	r2,r2,1
  80f020:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80f024:	e0bfff17 	ldw	r2,-4(fp)
  80f028:	10800003 	ldbu	r2,0(r2)
  80f02c:	10803fcc 	andi	r2,r2,255
  80f030:	1004c03a 	cmpne	r2,r2,zero
  80f034:	103ff51e 	bne	r2,zero,80f00c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  80f038:	e0bffe03 	ldbu	r2,-8(fp)
}
  80f03c:	e037883a 	mov	sp,fp
  80f040:	df000017 	ldw	fp,0(sp)
  80f044:	dec00104 	addi	sp,sp,4
  80f048:	f800283a 	ret

0080f04c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  80f04c:	defffa04 	addi	sp,sp,-24
  80f050:	dfc00515 	stw	ra,20(sp)
  80f054:	df000415 	stw	fp,16(sp)
  80f058:	df000404 	addi	fp,sp,16
  80f05c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f060:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f064:	0005303a 	rdctl	r2,status
  80f068:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f06c:	e0fffd17 	ldw	r3,-12(fp)
  80f070:	00bfff84 	movi	r2,-2
  80f074:	1884703a 	and	r2,r3,r2
  80f078:	1001703a 	wrctl	status,r2
  
  return context;
  80f07c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  80f080:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  80f084:	d0a05517 	ldw	r2,-32428(gp)
  80f088:	10800044 	addi	r2,r2,1
  80f08c:	d0a05515 	stw	r2,-32428(gp)
  80f090:	e0bffe17 	ldw	r2,-8(fp)
  80f094:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f098:	e0bffc17 	ldw	r2,-16(fp)
  80f09c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  80f0a0:	081c2f80 	call	81c2f8 <OSTaskIdleHook>
    }
  80f0a4:	003fef06 	br	80f064 <OS_TaskIdle+0x18>

0080f0a8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  80f0a8:	defffa04 	addi	sp,sp,-24
  80f0ac:	dfc00515 	stw	ra,20(sp)
  80f0b0:	df000415 	stw	fp,16(sp)
  80f0b4:	df000404 	addi	fp,sp,16
  80f0b8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f0bc:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80f0c0:	00000206 	br	80f0cc <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  80f0c4:	01003204 	movi	r4,200
  80f0c8:	08151240 	call	815124 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80f0cc:	d0a06603 	ldbu	r2,-32360(gp)
  80f0d0:	10803fcc 	andi	r2,r2,255
  80f0d4:	1005003a 	cmpeq	r2,r2,zero
  80f0d8:	103ffa1e 	bne	r2,zero,80f0c4 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  80f0dc:	d1205a17 	ldw	r4,-32408(gp)
  80f0e0:	01401904 	movi	r5,100
  80f0e4:	080c4580 	call	80c458 <__udivsi3>
  80f0e8:	d0a05a15 	stw	r2,-32408(gp)
    if (OSIdleCtrMax == 0L) {
  80f0ec:	d0a05a17 	ldw	r2,-32408(gp)
  80f0f0:	1004c03a 	cmpne	r2,r2,zero
  80f0f4:	1000031e 	bne	r2,zero,80f104 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  80f0f8:	d0205c05 	stb	zero,-32400(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  80f0fc:	01003fc4 	movi	r4,255
  80f100:	0814d380 	call	814d38 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f104:	0005303a 	rdctl	r2,status
  80f108:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f10c:	e0fffd17 	ldw	r3,-12(fp)
  80f110:	00bfff84 	movi	r2,-2
  80f114:	1884703a 	and	r2,r3,r2
  80f118:	1001703a 	wrctl	status,r2
  
  return context;
  80f11c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  80f120:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  80f124:	d0a05517 	ldw	r2,-32428(gp)
  80f128:	d0a06715 	stw	r2,-32356(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  80f12c:	d0205515 	stw	zero,-32428(gp)
  80f130:	e0bffe17 	ldw	r2,-8(fp)
  80f134:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f138:	e0bffc17 	ldw	r2,-16(fp)
  80f13c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  80f140:	d1206717 	ldw	r4,-32356(gp)
  80f144:	d1605a17 	ldw	r5,-32408(gp)
  80f148:	080c4580 	call	80c458 <__udivsi3>
  80f14c:	1007883a 	mov	r3,r2
  80f150:	00801904 	movi	r2,100
  80f154:	10c5c83a 	sub	r2,r2,r3
  80f158:	d0a05c05 	stb	r2,-32400(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  80f15c:	081c2880 	call	81c288 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  80f160:	080f1700 	call	80f170 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  80f164:	01001904 	movi	r4,100
  80f168:	08151240 	call	815124 <OSTimeDly>
    }
  80f16c:	003fe506 	br	80f104 <OS_TaskStat+0x5c>

0080f170 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  80f170:	defffa04 	addi	sp,sp,-24
  80f174:	dfc00515 	stw	ra,20(sp)
  80f178:	df000415 	stw	fp,16(sp)
  80f17c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80f180:	e03ffc05 	stb	zero,-16(fp)
  80f184:	00002406 	br	80f218 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  80f188:	e13ffc03 	ldbu	r4,-16(fp)
  80f18c:	e17ffe04 	addi	r5,fp,-8
  80f190:	0814b3c0 	call	814b3c <OSTaskStkChk>
  80f194:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  80f198:	e0bffc43 	ldbu	r2,-15(fp)
  80f19c:	1004c03a 	cmpne	r2,r2,zero
  80f1a0:	10001a1e 	bne	r2,zero,80f20c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  80f1a4:	e0bffc03 	ldbu	r2,-16(fp)
  80f1a8:	00c020f4 	movhi	r3,131
  80f1ac:	18da9904 	addi	r3,r3,27236
  80f1b0:	1085883a 	add	r2,r2,r2
  80f1b4:	1085883a 	add	r2,r2,r2
  80f1b8:	10c5883a 	add	r2,r2,r3
  80f1bc:	10800017 	ldw	r2,0(r2)
  80f1c0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  80f1c4:	e0bffd17 	ldw	r2,-12(fp)
  80f1c8:	1005003a 	cmpeq	r2,r2,zero
  80f1cc:	10000f1e 	bne	r2,zero,80f20c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  80f1d0:	e0bffd17 	ldw	r2,-12(fp)
  80f1d4:	10800060 	cmpeqi	r2,r2,1
  80f1d8:	10000c1e 	bne	r2,zero,80f20c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  80f1dc:	e0bffd17 	ldw	r2,-12(fp)
  80f1e0:	10c00217 	ldw	r3,8(r2)
  80f1e4:	e0bffd17 	ldw	r2,-12(fp)
  80f1e8:	10800317 	ldw	r2,12(r2)
  80f1ec:	1085883a 	add	r2,r2,r2
  80f1f0:	1085883a 	add	r2,r2,r2
  80f1f4:	1887883a 	add	r3,r3,r2
  80f1f8:	e0bffd17 	ldw	r2,-12(fp)
  80f1fc:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  80f200:	e0ffff17 	ldw	r3,-4(fp)
  80f204:	e0bffd17 	ldw	r2,-12(fp)
  80f208:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80f20c:	e0bffc03 	ldbu	r2,-16(fp)
  80f210:	10800044 	addi	r2,r2,1
  80f214:	e0bffc05 	stb	r2,-16(fp)
  80f218:	e0bffc03 	ldbu	r2,-16(fp)
  80f21c:	10800570 	cmpltui	r2,r2,21
  80f220:	103fd91e 	bne	r2,zero,80f188 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  80f224:	e037883a 	mov	sp,fp
  80f228:	dfc00117 	ldw	ra,4(sp)
  80f22c:	df000017 	ldw	fp,0(sp)
  80f230:	dec00204 	addi	sp,sp,8
  80f234:	f800283a 	ret

0080f238 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  80f238:	defff104 	addi	sp,sp,-60
  80f23c:	dfc00e15 	stw	ra,56(sp)
  80f240:	df000d15 	stw	fp,52(sp)
  80f244:	df000d04 	addi	fp,sp,52
  80f248:	e17ffb15 	stw	r5,-20(fp)
  80f24c:	e1bffc15 	stw	r6,-16(fp)
  80f250:	e0800417 	ldw	r2,16(fp)
  80f254:	e13ffa05 	stb	r4,-24(fp)
  80f258:	e1fffd0d 	sth	r7,-12(fp)
  80f25c:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80f260:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f264:	0005303a 	rdctl	r2,status
  80f268:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f26c:	e0fff717 	ldw	r3,-36(fp)
  80f270:	00bfff84 	movi	r2,-2
  80f274:	1884703a 	and	r2,r3,r2
  80f278:	1001703a 	wrctl	status,r2
  
  return context;
  80f27c:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  80f280:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  80f284:	d0a05b17 	ldw	r2,-32404(gp)
  80f288:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  80f28c:	e0bff917 	ldw	r2,-28(fp)
  80f290:	1005003a 	cmpeq	r2,r2,zero
  80f294:	1000941e 	bne	r2,zero,80f4e8 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  80f298:	e0bff917 	ldw	r2,-28(fp)
  80f29c:	10800517 	ldw	r2,20(r2)
  80f2a0:	d0a05b15 	stw	r2,-32404(gp)
  80f2a4:	e0bff817 	ldw	r2,-32(fp)
  80f2a8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f2ac:	e0bff617 	ldw	r2,-40(fp)
  80f2b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  80f2b4:	e0fff917 	ldw	r3,-28(fp)
  80f2b8:	e0bffb17 	ldw	r2,-20(fp)
  80f2bc:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  80f2c0:	e0fff917 	ldw	r3,-28(fp)
  80f2c4:	e0bffa03 	ldbu	r2,-24(fp)
  80f2c8:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  80f2cc:	e0bff917 	ldw	r2,-28(fp)
  80f2d0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  80f2d4:	e0bff917 	ldw	r2,-28(fp)
  80f2d8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  80f2dc:	e0bff917 	ldw	r2,-28(fp)
  80f2e0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  80f2e4:	e0fff917 	ldw	r3,-28(fp)
  80f2e8:	e0800317 	ldw	r2,12(fp)
  80f2ec:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  80f2f0:	e0fff917 	ldw	r3,-28(fp)
  80f2f4:	e0800217 	ldw	r2,8(fp)
  80f2f8:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  80f2fc:	e0fff917 	ldw	r3,-28(fp)
  80f300:	e0bffc17 	ldw	r2,-16(fp)
  80f304:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  80f308:	e0fff917 	ldw	r3,-28(fp)
  80f30c:	e0bffe0b 	ldhu	r2,-8(fp)
  80f310:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  80f314:	e0fff917 	ldw	r3,-28(fp)
  80f318:	e0bffd0b 	ldhu	r2,-12(fp)
  80f31c:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  80f320:	e0bff917 	ldw	r2,-28(fp)
  80f324:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  80f328:	e0bffa03 	ldbu	r2,-24(fp)
  80f32c:	1004d0fa 	srli	r2,r2,3
  80f330:	1007883a 	mov	r3,r2
  80f334:	e0bff917 	ldw	r2,-28(fp)
  80f338:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  80f33c:	e0bffa03 	ldbu	r2,-24(fp)
  80f340:	108001cc 	andi	r2,r2,7
  80f344:	1007883a 	mov	r3,r2
  80f348:	e0bff917 	ldw	r2,-28(fp)
  80f34c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  80f350:	e0bff917 	ldw	r2,-28(fp)
  80f354:	10800d03 	ldbu	r2,52(r2)
  80f358:	10c03fcc 	andi	r3,r2,255
  80f35c:	00800044 	movi	r2,1
  80f360:	10c4983a 	sll	r2,r2,r3
  80f364:	1007883a 	mov	r3,r2
  80f368:	e0bff917 	ldw	r2,-28(fp)
  80f36c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  80f370:	e0bff917 	ldw	r2,-28(fp)
  80f374:	10800cc3 	ldbu	r2,51(r2)
  80f378:	10c03fcc 	andi	r3,r2,255
  80f37c:	00800044 	movi	r2,1
  80f380:	10c4983a 	sll	r2,r2,r3
  80f384:	1007883a 	mov	r3,r2
  80f388:	e0bff917 	ldw	r2,-28(fp)
  80f38c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  80f390:	e0bff917 	ldw	r2,-28(fp)
  80f394:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  80f398:	e0bff917 	ldw	r2,-28(fp)
  80f39c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  80f3a0:	e0bff917 	ldw	r2,-28(fp)
  80f3a4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  80f3a8:	e0bff917 	ldw	r2,-28(fp)
  80f3ac:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  80f3b0:	e0bff917 	ldw	r2,-28(fp)
  80f3b4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  80f3b8:	e0bff917 	ldw	r2,-28(fp)
  80f3bc:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  80f3c0:	e0bff917 	ldw	r2,-28(fp)
  80f3c4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  80f3c8:	e0bff917 	ldw	r2,-28(fp)
  80f3cc:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  80f3d0:	e0bff917 	ldw	r2,-28(fp)
  80f3d4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  80f3d8:	e0fff917 	ldw	r3,-28(fp)
  80f3dc:	00800fc4 	movi	r2,63
  80f3e0:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80f3e4:	e0bff917 	ldw	r2,-28(fp)
  80f3e8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  80f3ec:	e13ff917 	ldw	r4,-28(fp)
  80f3f0:	081c3140 	call	81c314 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  80f3f4:	e13ff917 	ldw	r4,-28(fp)
  80f3f8:	081c22c0 	call	81c22c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f3fc:	0005303a 	rdctl	r2,status
  80f400:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f404:	e0fff517 	ldw	r3,-44(fp)
  80f408:	00bfff84 	movi	r2,-2
  80f40c:	1884703a 	and	r2,r3,r2
  80f410:	1001703a 	wrctl	status,r2
  
  return context;
  80f414:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  80f418:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  80f41c:	e0bffa03 	ldbu	r2,-24(fp)
  80f420:	00c020f4 	movhi	r3,131
  80f424:	18da9904 	addi	r3,r3,27236
  80f428:	1085883a 	add	r2,r2,r2
  80f42c:	1085883a 	add	r2,r2,r2
  80f430:	10c7883a 	add	r3,r2,r3
  80f434:	e0bff917 	ldw	r2,-28(fp)
  80f438:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  80f43c:	d0e05717 	ldw	r3,-32420(gp)
  80f440:	e0bff917 	ldw	r2,-28(fp)
  80f444:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  80f448:	e0bff917 	ldw	r2,-28(fp)
  80f44c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  80f450:	d0a05717 	ldw	r2,-32420(gp)
  80f454:	1005003a 	cmpeq	r2,r2,zero
  80f458:	1000031e 	bne	r2,zero,80f468 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  80f45c:	d0e05717 	ldw	r3,-32420(gp)
  80f460:	e0bff917 	ldw	r2,-28(fp)
  80f464:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  80f468:	e0bff917 	ldw	r2,-28(fp)
  80f46c:	d0a05715 	stw	r2,-32420(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  80f470:	e0bff917 	ldw	r2,-28(fp)
  80f474:	10c00d83 	ldbu	r3,54(r2)
  80f478:	d0a06003 	ldbu	r2,-32384(gp)
  80f47c:	1884b03a 	or	r2,r3,r2
  80f480:	d0a06005 	stb	r2,-32384(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80f484:	e0bff917 	ldw	r2,-28(fp)
  80f488:	10800d03 	ldbu	r2,52(r2)
  80f48c:	11003fcc 	andi	r4,r2,255
  80f490:	e0bff917 	ldw	r2,-28(fp)
  80f494:	10800d03 	ldbu	r2,52(r2)
  80f498:	10c03fcc 	andi	r3,r2,255
  80f49c:	d0a06044 	addi	r2,gp,-32383
  80f4a0:	1885883a 	add	r2,r3,r2
  80f4a4:	10c00003 	ldbu	r3,0(r2)
  80f4a8:	e0bff917 	ldw	r2,-28(fp)
  80f4ac:	10800d43 	ldbu	r2,53(r2)
  80f4b0:	1884b03a 	or	r2,r3,r2
  80f4b4:	1007883a 	mov	r3,r2
  80f4b8:	d0a06044 	addi	r2,gp,-32383
  80f4bc:	2085883a 	add	r2,r4,r2
  80f4c0:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  80f4c4:	d0a05c43 	ldbu	r2,-32399(gp)
  80f4c8:	10800044 	addi	r2,r2,1
  80f4cc:	d0a05c45 	stb	r2,-32399(gp)
  80f4d0:	e0bff817 	ldw	r2,-32(fp)
  80f4d4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f4d8:	e0bff417 	ldw	r2,-48(fp)
  80f4dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  80f4e0:	e03fff15 	stw	zero,-4(fp)
  80f4e4:	00000606 	br	80f500 <OS_TCBInit+0x2c8>
  80f4e8:	e0bff817 	ldw	r2,-32(fp)
  80f4ec:	e0bff315 	stw	r2,-52(fp)
  80f4f0:	e0bff317 	ldw	r2,-52(fp)
  80f4f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  80f4f8:	00801084 	movi	r2,66
  80f4fc:	e0bfff15 	stw	r2,-4(fp)
  80f500:	e0bfff17 	ldw	r2,-4(fp)
}
  80f504:	e037883a 	mov	sp,fp
  80f508:	dfc00117 	ldw	ra,4(sp)
  80f50c:	df000017 	ldw	fp,0(sp)
  80f510:	dec00204 	addi	sp,sp,8
  80f514:	f800283a 	ret

0080f518 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  80f518:	defffe04 	addi	sp,sp,-8
  80f51c:	df000115 	stw	fp,4(sp)
  80f520:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  80f524:	d0a01004 	addi	r2,gp,-32704
  80f528:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  80f52c:	d0a01104 	addi	r2,gp,-32700
  80f530:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  80f534:	d0a01284 	addi	r2,gp,-32694
  80f538:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  80f53c:	d0a01304 	addi	r2,gp,-32692
  80f540:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  80f544:	d0a01204 	addi	r2,gp,-32696
  80f548:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  80f54c:	d0a01384 	addi	r2,gp,-32690
  80f550:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  80f554:	d0a01404 	addi	r2,gp,-32688
  80f558:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  80f55c:	d0a01484 	addi	r2,gp,-32686
  80f560:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  80f564:	d0a01504 	addi	r2,gp,-32684
  80f568:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  80f56c:	d0a01584 	addi	r2,gp,-32682
  80f570:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  80f574:	d0a01604 	addi	r2,gp,-32680
  80f578:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  80f57c:	d0a01684 	addi	r2,gp,-32678
  80f580:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  80f584:	d0a01704 	addi	r2,gp,-32676
  80f588:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  80f58c:	d0a01784 	addi	r2,gp,-32674
  80f590:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  80f594:	d0a01804 	addi	r2,gp,-32672
  80f598:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  80f59c:	d0a01884 	addi	r2,gp,-32670
  80f5a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  80f5a4:	d0a01904 	addi	r2,gp,-32668
  80f5a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  80f5ac:	d0a01984 	addi	r2,gp,-32666
  80f5b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  80f5b4:	d0a01a04 	addi	r2,gp,-32664
  80f5b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  80f5bc:	d0a01a84 	addi	r2,gp,-32662
  80f5c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  80f5c4:	d0a01b04 	addi	r2,gp,-32660
  80f5c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  80f5cc:	d0a01b84 	addi	r2,gp,-32658
  80f5d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  80f5d4:	d0a01c04 	addi	r2,gp,-32656
  80f5d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  80f5dc:	d0a01c84 	addi	r2,gp,-32654
  80f5e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  80f5e4:	d0a01d04 	addi	r2,gp,-32652
  80f5e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  80f5ec:	d0a01d84 	addi	r2,gp,-32650
  80f5f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  80f5f4:	d0a01e04 	addi	r2,gp,-32648
  80f5f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  80f5fc:	d0a01e84 	addi	r2,gp,-32646
  80f600:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  80f604:	d0a01f04 	addi	r2,gp,-32644
  80f608:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  80f60c:	d0a01f84 	addi	r2,gp,-32642
  80f610:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  80f614:	d0a02004 	addi	r2,gp,-32640
  80f618:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  80f61c:	d0a02084 	addi	r2,gp,-32638
  80f620:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  80f624:	d0a02104 	addi	r2,gp,-32636
  80f628:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  80f62c:	d0a02184 	addi	r2,gp,-32634
  80f630:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  80f634:	d0a02204 	addi	r2,gp,-32632
  80f638:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  80f63c:	d0a02284 	addi	r2,gp,-32630
  80f640:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  80f644:	d0a02304 	addi	r2,gp,-32628
  80f648:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  80f64c:	d0a02384 	addi	r2,gp,-32626
  80f650:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  80f654:	d0a02404 	addi	r2,gp,-32624
  80f658:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  80f65c:	d0a02484 	addi	r2,gp,-32622
  80f660:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  80f664:	d0a02504 	addi	r2,gp,-32620
  80f668:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  80f66c:	d0a02584 	addi	r2,gp,-32618
  80f670:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  80f674:	d0a02604 	addi	r2,gp,-32616
  80f678:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  80f67c:	d0a02684 	addi	r2,gp,-32614
  80f680:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  80f684:	d0a02704 	addi	r2,gp,-32612
  80f688:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  80f68c:	d0a02c04 	addi	r2,gp,-32592
  80f690:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  80f694:	e037883a 	mov	sp,fp
  80f698:	df000017 	ldw	fp,0(sp)
  80f69c:	dec00104 	addi	sp,sp,4
  80f6a0:	f800283a 	ret

0080f6a4 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  80f6a4:	defff104 	addi	sp,sp,-60
  80f6a8:	df000e15 	stw	fp,56(sp)
  80f6ac:	df000e04 	addi	fp,sp,56
  80f6b0:	e13ffa15 	stw	r4,-24(fp)
  80f6b4:	e1fffd15 	stw	r7,-12(fp)
  80f6b8:	e17ffb0d 	sth	r5,-20(fp)
  80f6bc:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80f6c0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80f6c4:	e0bffd17 	ldw	r2,-12(fp)
  80f6c8:	1004c03a 	cmpne	r2,r2,zero
  80f6cc:	1000021e 	bne	r2,zero,80f6d8 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  80f6d0:	e03fff15 	stw	zero,-4(fp)
  80f6d4:	0000bb06 	br	80f9c4 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80f6d8:	e0bffa17 	ldw	r2,-24(fp)
  80f6dc:	1004c03a 	cmpne	r2,r2,zero
  80f6e0:	1000051e 	bne	r2,zero,80f6f8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80f6e4:	e0fffd17 	ldw	r3,-12(fp)
  80f6e8:	00801b84 	movi	r2,110
  80f6ec:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80f6f0:	e03fff15 	stw	zero,-4(fp)
  80f6f4:	0000b306 	br	80f9c4 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80f6f8:	e0bffa17 	ldw	r2,-24(fp)
  80f6fc:	10800003 	ldbu	r2,0(r2)
  80f700:	10803fcc 	andi	r2,r2,255
  80f704:	10800160 	cmpeqi	r2,r2,5
  80f708:	1000051e 	bne	r2,zero,80f720 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80f70c:	e0fffd17 	ldw	r3,-12(fp)
  80f710:	00800044 	movi	r2,1
  80f714:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80f718:	e03fff15 	stw	zero,-4(fp)
  80f71c:	0000a906 	br	80f9c4 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80f720:	e0fffc03 	ldbu	r3,-16(fp)
  80f724:	00bfe004 	movi	r2,-128
  80f728:	1884703a 	and	r2,r3,r2
  80f72c:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  80f730:	e0bff943 	ldbu	r2,-27(fp)
  80f734:	1005003a 	cmpeq	r2,r2,zero
  80f738:	1000061e 	bne	r2,zero,80f754 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  80f73c:	e0bffc03 	ldbu	r2,-16(fp)
  80f740:	10801fcc 	andi	r2,r2,127
  80f744:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  80f748:	00800044 	movi	r2,1
  80f74c:	e0bff905 	stb	r2,-28(fp)
  80f750:	00000106 	br	80f758 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  80f754:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  80f758:	e0bffd17 	ldw	r2,-12(fp)
  80f75c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f760:	0005303a 	rdctl	r2,status
  80f764:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f768:	e0fff717 	ldw	r3,-36(fp)
  80f76c:	00bfff84 	movi	r2,-2
  80f770:	1884703a 	and	r2,r3,r2
  80f774:	1001703a 	wrctl	status,r2
  
  return context;
  80f778:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80f77c:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  80f780:	e0bffc03 	ldbu	r2,-16(fp)
  80f784:	e0bffe15 	stw	r2,-8(fp)
  80f788:	e0fffe17 	ldw	r3,-8(fp)
  80f78c:	18800060 	cmpeqi	r2,r3,1
  80f790:	1000651e 	bne	r2,zero,80f928 <OSFlagAccept+0x284>
  80f794:	e0fffe17 	ldw	r3,-8(fp)
  80f798:	18800088 	cmpgei	r2,r3,2
  80f79c:	1000041e 	bne	r2,zero,80f7b0 <OSFlagAccept+0x10c>
  80f7a0:	e0fffe17 	ldw	r3,-8(fp)
  80f7a4:	1805003a 	cmpeq	r2,r3,zero
  80f7a8:	1000421e 	bne	r2,zero,80f8b4 <OSFlagAccept+0x210>
  80f7ac:	00007b06 	br	80f99c <OSFlagAccept+0x2f8>
  80f7b0:	e0fffe17 	ldw	r3,-8(fp)
  80f7b4:	188000a0 	cmpeqi	r2,r3,2
  80f7b8:	1000041e 	bne	r2,zero,80f7cc <OSFlagAccept+0x128>
  80f7bc:	e0fffe17 	ldw	r3,-8(fp)
  80f7c0:	188000e0 	cmpeqi	r2,r3,3
  80f7c4:	10001e1e 	bne	r2,zero,80f840 <OSFlagAccept+0x19c>
  80f7c8:	00007406 	br	80f99c <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80f7cc:	e0bffa17 	ldw	r2,-24(fp)
  80f7d0:	10c0020b 	ldhu	r3,8(r2)
  80f7d4:	e0bffb0b 	ldhu	r2,-20(fp)
  80f7d8:	1884703a 	and	r2,r3,r2
  80f7dc:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80f7e0:	e0fff98b 	ldhu	r3,-26(fp)
  80f7e4:	e0bffb0b 	ldhu	r2,-20(fp)
  80f7e8:	18800d1e 	bne	r3,r2,80f820 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80f7ec:	e0bff903 	ldbu	r2,-28(fp)
  80f7f0:	10800058 	cmpnei	r2,r2,1
  80f7f4:	10000d1e 	bne	r2,zero,80f82c <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80f7f8:	e0bffa17 	ldw	r2,-24(fp)
  80f7fc:	1080020b 	ldhu	r2,8(r2)
  80f800:	1007883a 	mov	r3,r2
  80f804:	e0bff98b 	ldhu	r2,-26(fp)
  80f808:	0084303a 	nor	r2,zero,r2
  80f80c:	1884703a 	and	r2,r3,r2
  80f810:	1007883a 	mov	r3,r2
  80f814:	e0bffa17 	ldw	r2,-24(fp)
  80f818:	10c0020d 	sth	r3,8(r2)
  80f81c:	00000306 	br	80f82c <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80f820:	e0fffd17 	ldw	r3,-12(fp)
  80f824:	00801c04 	movi	r2,112
  80f828:	18800005 	stb	r2,0(r3)
  80f82c:	e0bff817 	ldw	r2,-32(fp)
  80f830:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f834:	e0bff617 	ldw	r2,-40(fp)
  80f838:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80f83c:	00005f06 	br	80f9bc <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80f840:	e0bffa17 	ldw	r2,-24(fp)
  80f844:	10c0020b 	ldhu	r3,8(r2)
  80f848:	e0bffb0b 	ldhu	r2,-20(fp)
  80f84c:	1884703a 	and	r2,r3,r2
  80f850:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80f854:	e0bff98b 	ldhu	r2,-26(fp)
  80f858:	1005003a 	cmpeq	r2,r2,zero
  80f85c:	10000d1e 	bne	r2,zero,80f894 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80f860:	e0bff903 	ldbu	r2,-28(fp)
  80f864:	10800058 	cmpnei	r2,r2,1
  80f868:	10000d1e 	bne	r2,zero,80f8a0 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80f86c:	e0bffa17 	ldw	r2,-24(fp)
  80f870:	1080020b 	ldhu	r2,8(r2)
  80f874:	1007883a 	mov	r3,r2
  80f878:	e0bff98b 	ldhu	r2,-26(fp)
  80f87c:	0084303a 	nor	r2,zero,r2
  80f880:	1884703a 	and	r2,r3,r2
  80f884:	1007883a 	mov	r3,r2
  80f888:	e0bffa17 	ldw	r2,-24(fp)
  80f88c:	10c0020d 	sth	r3,8(r2)
  80f890:	00000306 	br	80f8a0 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80f894:	e0fffd17 	ldw	r3,-12(fp)
  80f898:	00801c04 	movi	r2,112
  80f89c:	18800005 	stb	r2,0(r3)
  80f8a0:	e0bff817 	ldw	r2,-32(fp)
  80f8a4:	e0bff515 	stw	r2,-44(fp)
  80f8a8:	e0bff517 	ldw	r2,-44(fp)
  80f8ac:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80f8b0:	00004206 	br	80f9bc <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80f8b4:	e0bffa17 	ldw	r2,-24(fp)
  80f8b8:	1080020b 	ldhu	r2,8(r2)
  80f8bc:	0084303a 	nor	r2,zero,r2
  80f8c0:	1007883a 	mov	r3,r2
  80f8c4:	e0bffb0b 	ldhu	r2,-20(fp)
  80f8c8:	1884703a 	and	r2,r3,r2
  80f8cc:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80f8d0:	e0fff98b 	ldhu	r3,-26(fp)
  80f8d4:	e0bffb0b 	ldhu	r2,-20(fp)
  80f8d8:	18800b1e 	bne	r3,r2,80f908 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80f8dc:	e0bff903 	ldbu	r2,-28(fp)
  80f8e0:	10800058 	cmpnei	r2,r2,1
  80f8e4:	10000b1e 	bne	r2,zero,80f914 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80f8e8:	e0bffa17 	ldw	r2,-24(fp)
  80f8ec:	10c0020b 	ldhu	r3,8(r2)
  80f8f0:	e0bff98b 	ldhu	r2,-26(fp)
  80f8f4:	1884b03a 	or	r2,r3,r2
  80f8f8:	1007883a 	mov	r3,r2
  80f8fc:	e0bffa17 	ldw	r2,-24(fp)
  80f900:	10c0020d 	sth	r3,8(r2)
  80f904:	00000306 	br	80f914 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80f908:	e0fffd17 	ldw	r3,-12(fp)
  80f90c:	00801c04 	movi	r2,112
  80f910:	18800005 	stb	r2,0(r3)
  80f914:	e0bff817 	ldw	r2,-32(fp)
  80f918:	e0bff415 	stw	r2,-48(fp)
  80f91c:	e0bff417 	ldw	r2,-48(fp)
  80f920:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80f924:	00002506 	br	80f9bc <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80f928:	e0bffa17 	ldw	r2,-24(fp)
  80f92c:	1080020b 	ldhu	r2,8(r2)
  80f930:	0084303a 	nor	r2,zero,r2
  80f934:	1007883a 	mov	r3,r2
  80f938:	e0bffb0b 	ldhu	r2,-20(fp)
  80f93c:	1884703a 	and	r2,r3,r2
  80f940:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80f944:	e0bff98b 	ldhu	r2,-26(fp)
  80f948:	1005003a 	cmpeq	r2,r2,zero
  80f94c:	10000b1e 	bne	r2,zero,80f97c <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80f950:	e0bff903 	ldbu	r2,-28(fp)
  80f954:	10800058 	cmpnei	r2,r2,1
  80f958:	10000b1e 	bne	r2,zero,80f988 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80f95c:	e0bffa17 	ldw	r2,-24(fp)
  80f960:	10c0020b 	ldhu	r3,8(r2)
  80f964:	e0bff98b 	ldhu	r2,-26(fp)
  80f968:	1884b03a 	or	r2,r3,r2
  80f96c:	1007883a 	mov	r3,r2
  80f970:	e0bffa17 	ldw	r2,-24(fp)
  80f974:	10c0020d 	sth	r3,8(r2)
  80f978:	00000306 	br	80f988 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80f97c:	e0fffd17 	ldw	r3,-12(fp)
  80f980:	00801c04 	movi	r2,112
  80f984:	18800005 	stb	r2,0(r3)
  80f988:	e0bff817 	ldw	r2,-32(fp)
  80f98c:	e0bff315 	stw	r2,-52(fp)
  80f990:	e0bff317 	ldw	r2,-52(fp)
  80f994:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80f998:	00000806 	br	80f9bc <OSFlagAccept+0x318>
  80f99c:	e0bff817 	ldw	r2,-32(fp)
  80f9a0:	e0bff215 	stw	r2,-56(fp)
  80f9a4:	e0bff217 	ldw	r2,-56(fp)
  80f9a8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80f9ac:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  80f9b0:	e0fffd17 	ldw	r3,-12(fp)
  80f9b4:	00801bc4 	movi	r2,111
  80f9b8:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  80f9bc:	e0bff98b 	ldhu	r2,-26(fp)
  80f9c0:	e0bfff15 	stw	r2,-4(fp)
  80f9c4:	e0bfff17 	ldw	r2,-4(fp)
}
  80f9c8:	e037883a 	mov	sp,fp
  80f9cc:	df000017 	ldw	fp,0(sp)
  80f9d0:	dec00104 	addi	sp,sp,4
  80f9d4:	f800283a 	ret

0080f9d8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  80f9d8:	defff704 	addi	sp,sp,-36
  80f9dc:	df000815 	stw	fp,32(sp)
  80f9e0:	df000804 	addi	fp,sp,32
  80f9e4:	e17ffe15 	stw	r5,-8(fp)
  80f9e8:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  80f9ec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  80f9f0:	e0bffe17 	ldw	r2,-8(fp)
  80f9f4:	1004c03a 	cmpne	r2,r2,zero
  80f9f8:	1000021e 	bne	r2,zero,80fa04 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  80f9fc:	e03fff15 	stw	zero,-4(fp)
  80fa00:	00003f06 	br	80fb00 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  80fa04:	008020b4 	movhi	r2,130
  80fa08:	10bcc904 	addi	r2,r2,-3292
  80fa0c:	10800003 	ldbu	r2,0(r2)
  80fa10:	10803fcc 	andi	r2,r2,255
  80fa14:	1005003a 	cmpeq	r2,r2,zero
  80fa18:	1000051e 	bne	r2,zero,80fa30 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  80fa1c:	e0fffe17 	ldw	r3,-8(fp)
  80fa20:	00800404 	movi	r2,16
  80fa24:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  80fa28:	e03fff15 	stw	zero,-4(fp)
  80fa2c:	00003406 	br	80fb00 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fa30:	0005303a 	rdctl	r2,status
  80fa34:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fa38:	e0fffa17 	ldw	r3,-24(fp)
  80fa3c:	00bfff84 	movi	r2,-2
  80fa40:	1884703a 	and	r2,r3,r2
  80fa44:	1001703a 	wrctl	status,r2
  
  return context;
  80fa48:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80fa4c:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  80fa50:	008020b4 	movhi	r2,130
  80fa54:	10bccc04 	addi	r2,r2,-3280
  80fa58:	10800017 	ldw	r2,0(r2)
  80fa5c:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  80fa60:	e0bffc17 	ldw	r2,-16(fp)
  80fa64:	1005003a 	cmpeq	r2,r2,zero
  80fa68:	10001c1e 	bne	r2,zero,80fadc <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  80fa6c:	008020b4 	movhi	r2,130
  80fa70:	10bccc04 	addi	r2,r2,-3280
  80fa74:	10800017 	ldw	r2,0(r2)
  80fa78:	10800117 	ldw	r2,4(r2)
  80fa7c:	1007883a 	mov	r3,r2
  80fa80:	008020b4 	movhi	r2,130
  80fa84:	10bccc04 	addi	r2,r2,-3280
  80fa88:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  80fa8c:	e0fffc17 	ldw	r3,-16(fp)
  80fa90:	00800144 	movi	r2,5
  80fa94:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  80fa98:	e0fffc17 	ldw	r3,-16(fp)
  80fa9c:	e0bffd0b 	ldhu	r2,-12(fp)
  80faa0:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  80faa4:	e0bffc17 	ldw	r2,-16(fp)
  80faa8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  80faac:	e0fffc17 	ldw	r3,-16(fp)
  80fab0:	00800fc4 	movi	r2,63
  80fab4:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80fab8:	e0bffc17 	ldw	r2,-16(fp)
  80fabc:	100002c5 	stb	zero,11(r2)
  80fac0:	e0bffb17 	ldw	r2,-20(fp)
  80fac4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fac8:	e0bff917 	ldw	r2,-28(fp)
  80facc:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  80fad0:	e0bffe17 	ldw	r2,-8(fp)
  80fad4:	10000005 	stb	zero,0(r2)
  80fad8:	00000706 	br	80faf8 <OSFlagCreate+0x120>
  80fadc:	e0bffb17 	ldw	r2,-20(fp)
  80fae0:	e0bff815 	stw	r2,-32(fp)
  80fae4:	e0bff817 	ldw	r2,-32(fp)
  80fae8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  80faec:	e0fffe17 	ldw	r3,-8(fp)
  80faf0:	00801c84 	movi	r2,114
  80faf4:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  80faf8:	e0bffc17 	ldw	r2,-16(fp)
  80fafc:	e0bfff15 	stw	r2,-4(fp)
  80fb00:	e0bfff17 	ldw	r2,-4(fp)
}
  80fb04:	e037883a 	mov	sp,fp
  80fb08:	df000017 	ldw	fp,0(sp)
  80fb0c:	dec00104 	addi	sp,sp,4
  80fb10:	f800283a 	ret

0080fb14 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  80fb14:	defff004 	addi	sp,sp,-64
  80fb18:	dfc00f15 	stw	ra,60(sp)
  80fb1c:	df000e15 	stw	fp,56(sp)
  80fb20:	df000e04 	addi	fp,sp,56
  80fb24:	e13ffb15 	stw	r4,-20(fp)
  80fb28:	e1bffd15 	stw	r6,-12(fp)
  80fb2c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80fb30:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80fb34:	e0bffd17 	ldw	r2,-12(fp)
  80fb38:	1004c03a 	cmpne	r2,r2,zero
  80fb3c:	1000031e 	bne	r2,zero,80fb4c <OSFlagDel+0x38>
        return (pgrp);
  80fb40:	e0bffb17 	ldw	r2,-20(fp)
  80fb44:	e0bfff15 	stw	r2,-4(fp)
  80fb48:	00009606 	br	80fda4 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80fb4c:	e0bffb17 	ldw	r2,-20(fp)
  80fb50:	1004c03a 	cmpne	r2,r2,zero
  80fb54:	1000061e 	bne	r2,zero,80fb70 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80fb58:	e0fffd17 	ldw	r3,-12(fp)
  80fb5c:	00801b84 	movi	r2,110
  80fb60:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80fb64:	e0fffb17 	ldw	r3,-20(fp)
  80fb68:	e0ffff15 	stw	r3,-4(fp)
  80fb6c:	00008d06 	br	80fda4 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80fb70:	008020b4 	movhi	r2,130
  80fb74:	10bcc904 	addi	r2,r2,-3292
  80fb78:	10800003 	ldbu	r2,0(r2)
  80fb7c:	10803fcc 	andi	r2,r2,255
  80fb80:	1005003a 	cmpeq	r2,r2,zero
  80fb84:	1000061e 	bne	r2,zero,80fba0 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80fb88:	e0fffd17 	ldw	r3,-12(fp)
  80fb8c:	008003c4 	movi	r2,15
  80fb90:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80fb94:	e0bffb17 	ldw	r2,-20(fp)
  80fb98:	e0bfff15 	stw	r2,-4(fp)
  80fb9c:	00008106 	br	80fda4 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  80fba0:	e0bffb17 	ldw	r2,-20(fp)
  80fba4:	10800003 	ldbu	r2,0(r2)
  80fba8:	10803fcc 	andi	r2,r2,255
  80fbac:	10800160 	cmpeqi	r2,r2,5
  80fbb0:	1000061e 	bne	r2,zero,80fbcc <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  80fbb4:	e0fffd17 	ldw	r3,-12(fp)
  80fbb8:	00800044 	movi	r2,1
  80fbbc:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80fbc0:	e0fffb17 	ldw	r3,-20(fp)
  80fbc4:	e0ffff15 	stw	r3,-4(fp)
  80fbc8:	00007606 	br	80fda4 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fbcc:	0005303a 	rdctl	r2,status
  80fbd0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fbd4:	e0fff617 	ldw	r3,-40(fp)
  80fbd8:	00bfff84 	movi	r2,-2
  80fbdc:	1884703a 	and	r2,r3,r2
  80fbe0:	1001703a 	wrctl	status,r2
  
  return context;
  80fbe4:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80fbe8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  80fbec:	e0bffb17 	ldw	r2,-20(fp)
  80fbf0:	10800117 	ldw	r2,4(r2)
  80fbf4:	1005003a 	cmpeq	r2,r2,zero
  80fbf8:	1000031e 	bne	r2,zero,80fc08 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80fbfc:	00800044 	movi	r2,1
  80fc00:	e0bffa05 	stb	r2,-24(fp)
  80fc04:	00000106 	br	80fc0c <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80fc08:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80fc0c:	e0bffc03 	ldbu	r2,-16(fp)
  80fc10:	e0bffe15 	stw	r2,-8(fp)
  80fc14:	e0fffe17 	ldw	r3,-8(fp)
  80fc18:	1805003a 	cmpeq	r2,r3,zero
  80fc1c:	1000041e 	bne	r2,zero,80fc30 <OSFlagDel+0x11c>
  80fc20:	e0fffe17 	ldw	r3,-8(fp)
  80fc24:	18800060 	cmpeqi	r2,r3,1
  80fc28:	1000281e 	bne	r2,zero,80fccc <OSFlagDel+0x1b8>
  80fc2c:	00005206 	br	80fd78 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  80fc30:	e0bffa03 	ldbu	r2,-24(fp)
  80fc34:	1004c03a 	cmpne	r2,r2,zero
  80fc38:	10001a1e 	bne	r2,zero,80fca4 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  80fc3c:	e0fffb17 	ldw	r3,-20(fp)
  80fc40:	00800fc4 	movi	r2,63
  80fc44:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80fc48:	e0bffb17 	ldw	r2,-20(fp)
  80fc4c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80fc50:	e0bffb17 	ldw	r2,-20(fp)
  80fc54:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  80fc58:	008020b4 	movhi	r2,130
  80fc5c:	10bccc04 	addi	r2,r2,-3280
  80fc60:	10c00017 	ldw	r3,0(r2)
  80fc64:	e0bffb17 	ldw	r2,-20(fp)
  80fc68:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80fc6c:	e0bffb17 	ldw	r2,-20(fp)
  80fc70:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  80fc74:	00c020b4 	movhi	r3,130
  80fc78:	18fccc04 	addi	r3,r3,-3280
  80fc7c:	e0bffb17 	ldw	r2,-20(fp)
  80fc80:	18800015 	stw	r2,0(r3)
  80fc84:	e0bff717 	ldw	r2,-36(fp)
  80fc88:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fc8c:	e0bff517 	ldw	r2,-44(fp)
  80fc90:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  80fc94:	e0bffd17 	ldw	r2,-12(fp)
  80fc98:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  80fc9c:	e03ff815 	stw	zero,-32(fp)
  80fca0:	00003e06 	br	80fd9c <OSFlagDel+0x288>
  80fca4:	e0bff717 	ldw	r2,-36(fp)
  80fca8:	e0bff415 	stw	r2,-48(fp)
  80fcac:	e0bff417 	ldw	r2,-48(fp)
  80fcb0:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  80fcb4:	e0fffd17 	ldw	r3,-12(fp)
  80fcb8:	00801244 	movi	r2,73
  80fcbc:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  80fcc0:	e0bffb17 	ldw	r2,-20(fp)
  80fcc4:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  80fcc8:	00003406 	br	80fd9c <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80fccc:	e0bffb17 	ldw	r2,-20(fp)
  80fcd0:	10800117 	ldw	r2,4(r2)
  80fcd4:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80fcd8:	00000606 	br	80fcf4 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  80fcdc:	e13ff917 	ldw	r4,-28(fp)
  80fce0:	000b883a 	mov	r5,zero
  80fce4:	0810e240 	call	810e24 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80fce8:	e0bff917 	ldw	r2,-28(fp)
  80fcec:	10800017 	ldw	r2,0(r2)
  80fcf0:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80fcf4:	e0bff917 	ldw	r2,-28(fp)
  80fcf8:	1004c03a 	cmpne	r2,r2,zero
  80fcfc:	103ff71e 	bne	r2,zero,80fcdc <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  80fd00:	e0fffb17 	ldw	r3,-20(fp)
  80fd04:	00800fc4 	movi	r2,63
  80fd08:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80fd0c:	e0bffb17 	ldw	r2,-20(fp)
  80fd10:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80fd14:	e0bffb17 	ldw	r2,-20(fp)
  80fd18:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  80fd1c:	008020b4 	movhi	r2,130
  80fd20:	10bccc04 	addi	r2,r2,-3280
  80fd24:	10c00017 	ldw	r3,0(r2)
  80fd28:	e0bffb17 	ldw	r2,-20(fp)
  80fd2c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80fd30:	e0bffb17 	ldw	r2,-20(fp)
  80fd34:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  80fd38:	00c020b4 	movhi	r3,130
  80fd3c:	18fccc04 	addi	r3,r3,-3280
  80fd40:	e0bffb17 	ldw	r2,-20(fp)
  80fd44:	18800015 	stw	r2,0(r3)
  80fd48:	e0bff717 	ldw	r2,-36(fp)
  80fd4c:	e0bff315 	stw	r2,-52(fp)
  80fd50:	e0bff317 	ldw	r2,-52(fp)
  80fd54:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80fd58:	e0bffa03 	ldbu	r2,-24(fp)
  80fd5c:	10800058 	cmpnei	r2,r2,1
  80fd60:	1000011e 	bne	r2,zero,80fd68 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80fd64:	080ee300 	call	80ee30 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  80fd68:	e0bffd17 	ldw	r2,-12(fp)
  80fd6c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  80fd70:	e03ff815 	stw	zero,-32(fp)
             break;
  80fd74:	00000906 	br	80fd9c <OSFlagDel+0x288>
  80fd78:	e0bff717 	ldw	r2,-36(fp)
  80fd7c:	e0bff215 	stw	r2,-56(fp)
  80fd80:	e0bff217 	ldw	r2,-56(fp)
  80fd84:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  80fd88:	e0fffd17 	ldw	r3,-12(fp)
  80fd8c:	008001c4 	movi	r2,7
  80fd90:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  80fd94:	e0bffb17 	ldw	r2,-20(fp)
  80fd98:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  80fd9c:	e0bff817 	ldw	r2,-32(fp)
  80fda0:	e0bfff15 	stw	r2,-4(fp)
  80fda4:	e0bfff17 	ldw	r2,-4(fp)
}
  80fda8:	e037883a 	mov	sp,fp
  80fdac:	dfc00117 	ldw	ra,4(sp)
  80fdb0:	df000017 	ldw	fp,0(sp)
  80fdb4:	dec00204 	addi	sp,sp,8
  80fdb8:	f800283a 	ret

0080fdbc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80fdbc:	defff504 	addi	sp,sp,-44
  80fdc0:	dfc00a15 	stw	ra,40(sp)
  80fdc4:	df000915 	stw	fp,36(sp)
  80fdc8:	df000904 	addi	fp,sp,36
  80fdcc:	e13ffc15 	stw	r4,-16(fp)
  80fdd0:	e17ffd15 	stw	r5,-12(fp)
  80fdd4:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80fdd8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80fddc:	e0bffe17 	ldw	r2,-8(fp)
  80fde0:	1004c03a 	cmpne	r2,r2,zero
  80fde4:	1000021e 	bne	r2,zero,80fdf0 <OSFlagNameGet+0x34>
        return (0);
  80fde8:	e03fff15 	stw	zero,-4(fp)
  80fdec:	00003e06 	br	80fee8 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80fdf0:	e0bffc17 	ldw	r2,-16(fp)
  80fdf4:	1004c03a 	cmpne	r2,r2,zero
  80fdf8:	1000051e 	bne	r2,zero,80fe10 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80fdfc:	e0fffe17 	ldw	r3,-8(fp)
  80fe00:	00801b84 	movi	r2,110
  80fe04:	18800005 	stb	r2,0(r3)
        return (0);
  80fe08:	e03fff15 	stw	zero,-4(fp)
  80fe0c:	00003606 	br	80fee8 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80fe10:	e0bffd17 	ldw	r2,-12(fp)
  80fe14:	1004c03a 	cmpne	r2,r2,zero
  80fe18:	1000051e 	bne	r2,zero,80fe30 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80fe1c:	e0fffe17 	ldw	r3,-8(fp)
  80fe20:	00800304 	movi	r2,12
  80fe24:	18800005 	stb	r2,0(r3)
        return (0);
  80fe28:	e03fff15 	stw	zero,-4(fp)
  80fe2c:	00002e06 	br	80fee8 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80fe30:	008020b4 	movhi	r2,130
  80fe34:	10bcc904 	addi	r2,r2,-3292
  80fe38:	10800003 	ldbu	r2,0(r2)
  80fe3c:	10803fcc 	andi	r2,r2,255
  80fe40:	1005003a 	cmpeq	r2,r2,zero
  80fe44:	1000051e 	bne	r2,zero,80fe5c <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80fe48:	e0fffe17 	ldw	r3,-8(fp)
  80fe4c:	00800444 	movi	r2,17
  80fe50:	18800005 	stb	r2,0(r3)
        return (0);
  80fe54:	e03fff15 	stw	zero,-4(fp)
  80fe58:	00002306 	br	80fee8 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fe5c:	0005303a 	rdctl	r2,status
  80fe60:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fe64:	e0fff917 	ldw	r3,-28(fp)
  80fe68:	00bfff84 	movi	r2,-2
  80fe6c:	1884703a 	and	r2,r3,r2
  80fe70:	1001703a 	wrctl	status,r2
  
  return context;
  80fe74:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80fe78:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80fe7c:	e0bffc17 	ldw	r2,-16(fp)
  80fe80:	10800003 	ldbu	r2,0(r2)
  80fe84:	10803fcc 	andi	r2,r2,255
  80fe88:	10800160 	cmpeqi	r2,r2,5
  80fe8c:	1000091e 	bne	r2,zero,80feb4 <OSFlagNameGet+0xf8>
  80fe90:	e0bffa17 	ldw	r2,-24(fp)
  80fe94:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fe98:	e0bff817 	ldw	r2,-32(fp)
  80fe9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80fea0:	e0fffe17 	ldw	r3,-8(fp)
  80fea4:	00800044 	movi	r2,1
  80fea8:	18800005 	stb	r2,0(r3)
        return (0);
  80feac:	e03fff15 	stw	zero,-4(fp)
  80feb0:	00000d06 	br	80fee8 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  80feb4:	e0bffc17 	ldw	r2,-16(fp)
  80feb8:	11400284 	addi	r5,r2,10
  80febc:	e13ffd17 	ldw	r4,-12(fp)
  80fec0:	080ef740 	call	80ef74 <OS_StrCopy>
  80fec4:	e0bffb05 	stb	r2,-20(fp)
  80fec8:	e0bffa17 	ldw	r2,-24(fp)
  80fecc:	e0bff715 	stw	r2,-36(fp)
  80fed0:	e0bff717 	ldw	r2,-36(fp)
  80fed4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80fed8:	e0bffe17 	ldw	r2,-8(fp)
  80fedc:	10000005 	stb	zero,0(r2)
    return (len);
  80fee0:	e0bffb03 	ldbu	r2,-20(fp)
  80fee4:	e0bfff15 	stw	r2,-4(fp)
  80fee8:	e0bfff17 	ldw	r2,-4(fp)
}
  80feec:	e037883a 	mov	sp,fp
  80fef0:	dfc00117 	ldw	ra,4(sp)
  80fef4:	df000017 	ldw	fp,0(sp)
  80fef8:	dec00204 	addi	sp,sp,8
  80fefc:	f800283a 	ret

0080ff00 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80ff00:	defff504 	addi	sp,sp,-44
  80ff04:	dfc00a15 	stw	ra,40(sp)
  80ff08:	df000915 	stw	fp,36(sp)
  80ff0c:	df000904 	addi	fp,sp,36
  80ff10:	e13ffd15 	stw	r4,-12(fp)
  80ff14:	e17ffe15 	stw	r5,-8(fp)
  80ff18:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ff1c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80ff20:	e0bfff17 	ldw	r2,-4(fp)
  80ff24:	1005003a 	cmpeq	r2,r2,zero
  80ff28:	1000451e 	bne	r2,zero,810040 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80ff2c:	e0bffd17 	ldw	r2,-12(fp)
  80ff30:	1004c03a 	cmpne	r2,r2,zero
  80ff34:	1000041e 	bne	r2,zero,80ff48 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80ff38:	e0ffff17 	ldw	r3,-4(fp)
  80ff3c:	00801b84 	movi	r2,110
  80ff40:	18800005 	stb	r2,0(r3)
        return;
  80ff44:	00003e06 	br	810040 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80ff48:	e0bffe17 	ldw	r2,-8(fp)
  80ff4c:	1004c03a 	cmpne	r2,r2,zero
  80ff50:	1000041e 	bne	r2,zero,80ff64 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80ff54:	e0ffff17 	ldw	r3,-4(fp)
  80ff58:	00800304 	movi	r2,12
  80ff5c:	18800005 	stb	r2,0(r3)
        return;
  80ff60:	00003706 	br	810040 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80ff64:	008020b4 	movhi	r2,130
  80ff68:	10bcc904 	addi	r2,r2,-3292
  80ff6c:	10800003 	ldbu	r2,0(r2)
  80ff70:	10803fcc 	andi	r2,r2,255
  80ff74:	1005003a 	cmpeq	r2,r2,zero
  80ff78:	1000041e 	bne	r2,zero,80ff8c <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80ff7c:	e0ffff17 	ldw	r3,-4(fp)
  80ff80:	00800484 	movi	r2,18
  80ff84:	18800005 	stb	r2,0(r3)
        return;
  80ff88:	00002d06 	br	810040 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ff8c:	0005303a 	rdctl	r2,status
  80ff90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ff94:	e0fffa17 	ldw	r3,-24(fp)
  80ff98:	00bfff84 	movi	r2,-2
  80ff9c:	1884703a 	and	r2,r3,r2
  80ffa0:	1001703a 	wrctl	status,r2
  
  return context;
  80ffa4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80ffa8:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80ffac:	e0bffd17 	ldw	r2,-12(fp)
  80ffb0:	10800003 	ldbu	r2,0(r2)
  80ffb4:	10803fcc 	andi	r2,r2,255
  80ffb8:	10800160 	cmpeqi	r2,r2,5
  80ffbc:	1000081e 	bne	r2,zero,80ffe0 <OSFlagNameSet+0xe0>
  80ffc0:	e0bffb17 	ldw	r2,-20(fp)
  80ffc4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ffc8:	e0bff917 	ldw	r2,-28(fp)
  80ffcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80ffd0:	e0ffff17 	ldw	r3,-4(fp)
  80ffd4:	00800044 	movi	r2,1
  80ffd8:	18800005 	stb	r2,0(r3)
        return;
  80ffdc:	00001806 	br	810040 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80ffe0:	e13ffe17 	ldw	r4,-8(fp)
  80ffe4:	080eff40 	call	80eff4 <OS_StrLen>
  80ffe8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  80ffec:	e0bffc03 	ldbu	r2,-16(fp)
  80fff0:	10800830 	cmpltui	r2,r2,32
  80fff4:	1000081e 	bne	r2,zero,810018 <OSFlagNameSet+0x118>
  80fff8:	e0bffb17 	ldw	r2,-20(fp)
  80fffc:	e0bff815 	stw	r2,-32(fp)
  810000:	e0bff817 	ldw	r2,-32(fp)
  810004:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  810008:	e0ffff17 	ldw	r3,-4(fp)
  81000c:	00801cc4 	movi	r2,115
  810010:	18800005 	stb	r2,0(r3)
        return;
  810014:	00000a06 	br	810040 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  810018:	e0bffd17 	ldw	r2,-12(fp)
  81001c:	11000284 	addi	r4,r2,10
  810020:	e17ffe17 	ldw	r5,-8(fp)
  810024:	080ef740 	call	80ef74 <OS_StrCopy>
  810028:	e0bffb17 	ldw	r2,-20(fp)
  81002c:	e0bff715 	stw	r2,-36(fp)
  810030:	e0bff717 	ldw	r2,-36(fp)
  810034:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  810038:	e0bfff17 	ldw	r2,-4(fp)
  81003c:	10000005 	stb	zero,0(r2)
    return;
}
  810040:	e037883a 	mov	sp,fp
  810044:	dfc00117 	ldw	ra,4(sp)
  810048:	df000017 	ldw	fp,0(sp)
  81004c:	dec00204 	addi	sp,sp,8
  810050:	f800283a 	ret

00810054 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  810054:	deffe004 	addi	sp,sp,-128
  810058:	dfc01f15 	stw	ra,124(sp)
  81005c:	df001e15 	stw	fp,120(sp)
  810060:	df001e04 	addi	fp,sp,120
  810064:	e13ff915 	stw	r4,-28(fp)
  810068:	e17ffa0d 	sth	r5,-24(fp)
  81006c:	e1bffb05 	stb	r6,-20(fp)
  810070:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  810074:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  810078:	e0800217 	ldw	r2,8(fp)
  81007c:	1004c03a 	cmpne	r2,r2,zero
  810080:	1000021e 	bne	r2,zero,81008c <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  810084:	e03fff15 	stw	zero,-4(fp)
  810088:	00017d06 	br	810680 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  81008c:	e0bff917 	ldw	r2,-28(fp)
  810090:	1004c03a 	cmpne	r2,r2,zero
  810094:	1000051e 	bne	r2,zero,8100ac <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  810098:	e0c00217 	ldw	r3,8(fp)
  81009c:	00801b84 	movi	r2,110
  8100a0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8100a4:	e03fff15 	stw	zero,-4(fp)
  8100a8:	00017506 	br	810680 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8100ac:	008020b4 	movhi	r2,130
  8100b0:	10bcc904 	addi	r2,r2,-3292
  8100b4:	10800003 	ldbu	r2,0(r2)
  8100b8:	10803fcc 	andi	r2,r2,255
  8100bc:	1005003a 	cmpeq	r2,r2,zero
  8100c0:	1000051e 	bne	r2,zero,8100d8 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  8100c4:	e0c00217 	ldw	r3,8(fp)
  8100c8:	00800084 	movi	r2,2
  8100cc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8100d0:	e03fff15 	stw	zero,-4(fp)
  8100d4:	00016a06 	br	810680 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  8100d8:	008020b4 	movhi	r2,130
  8100dc:	10bcbb04 	addi	r2,r2,-3348
  8100e0:	10800003 	ldbu	r2,0(r2)
  8100e4:	10803fcc 	andi	r2,r2,255
  8100e8:	1005003a 	cmpeq	r2,r2,zero
  8100ec:	1000051e 	bne	r2,zero,810104 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  8100f0:	e0c00217 	ldw	r3,8(fp)
  8100f4:	00800344 	movi	r2,13
  8100f8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8100fc:	e03fff15 	stw	zero,-4(fp)
  810100:	00015f06 	br	810680 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  810104:	e0bff917 	ldw	r2,-28(fp)
  810108:	10800003 	ldbu	r2,0(r2)
  81010c:	10803fcc 	andi	r2,r2,255
  810110:	10800160 	cmpeqi	r2,r2,5
  810114:	1000051e 	bne	r2,zero,81012c <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  810118:	e0c00217 	ldw	r3,8(fp)
  81011c:	00800044 	movi	r2,1
  810120:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  810124:	e03fff15 	stw	zero,-4(fp)
  810128:	00015506 	br	810680 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  81012c:	e0fffb03 	ldbu	r3,-20(fp)
  810130:	00bfe004 	movi	r2,-128
  810134:	1884703a 	and	r2,r3,r2
  810138:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  81013c:	e0bff283 	ldbu	r2,-54(fp)
  810140:	1005003a 	cmpeq	r2,r2,zero
  810144:	1000071e 	bne	r2,zero,810164 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  810148:	00c01fc4 	movi	r3,127
  81014c:	e0bffb03 	ldbu	r2,-20(fp)
  810150:	10c4703a 	and	r2,r2,r3
  810154:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  810158:	00800044 	movi	r2,1
  81015c:	e0bff205 	stb	r2,-56(fp)
  810160:	00000106 	br	810168 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  810164:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810168:	0005303a 	rdctl	r2,status
  81016c:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810170:	e0fff017 	ldw	r3,-64(fp)
  810174:	00bfff84 	movi	r2,-2
  810178:	1884703a 	and	r2,r3,r2
  81017c:	1001703a 	wrctl	status,r2
  
  return context;
  810180:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  810184:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  810188:	e0bffb03 	ldbu	r2,-20(fp)
  81018c:	e0bffe15 	stw	r2,-8(fp)
  810190:	e0fffe17 	ldw	r3,-8(fp)
  810194:	18800060 	cmpeqi	r2,r3,1
  810198:	1000981e 	bne	r2,zero,8103fc <OSFlagPend+0x3a8>
  81019c:	e0fffe17 	ldw	r3,-8(fp)
  8101a0:	18800088 	cmpgei	r2,r3,2
  8101a4:	1000041e 	bne	r2,zero,8101b8 <OSFlagPend+0x164>
  8101a8:	e0fffe17 	ldw	r3,-8(fp)
  8101ac:	1805003a 	cmpeq	r2,r3,zero
  8101b0:	1000641e 	bne	r2,zero,810344 <OSFlagPend+0x2f0>
  8101b4:	0000bf06 	br	8104b4 <OSFlagPend+0x460>
  8101b8:	e0fffe17 	ldw	r3,-8(fp)
  8101bc:	188000a0 	cmpeqi	r2,r3,2
  8101c0:	1000041e 	bne	r2,zero,8101d4 <OSFlagPend+0x180>
  8101c4:	e0fffe17 	ldw	r3,-8(fp)
  8101c8:	188000e0 	cmpeqi	r2,r3,3
  8101cc:	10002f1e 	bne	r2,zero,81028c <OSFlagPend+0x238>
  8101d0:	0000b806 	br	8104b4 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  8101d4:	e0bff917 	ldw	r2,-28(fp)
  8101d8:	10c0020b 	ldhu	r3,8(r2)
  8101dc:	e0bffa0b 	ldhu	r2,-24(fp)
  8101e0:	1884703a 	and	r2,r3,r2
  8101e4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8101e8:	e0fff30b 	ldhu	r3,-52(fp)
  8101ec:	e0bffa0b 	ldhu	r2,-24(fp)
  8101f0:	18801a1e 	bne	r3,r2,81025c <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8101f4:	e0bff203 	ldbu	r2,-56(fp)
  8101f8:	10800058 	cmpnei	r2,r2,1
  8101fc:	1000091e 	bne	r2,zero,810224 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  810200:	e0bff917 	ldw	r2,-28(fp)
  810204:	1080020b 	ldhu	r2,8(r2)
  810208:	1007883a 	mov	r3,r2
  81020c:	e0bff30b 	ldhu	r2,-52(fp)
  810210:	0084303a 	nor	r2,zero,r2
  810214:	1884703a 	and	r2,r3,r2
  810218:	1007883a 	mov	r3,r2
  81021c:	e0bff917 	ldw	r2,-28(fp)
  810220:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  810224:	008020b4 	movhi	r2,130
  810228:	10bcca04 	addi	r2,r2,-3288
  81022c:	10c00017 	ldw	r3,0(r2)
  810230:	e0bff30b 	ldhu	r2,-52(fp)
  810234:	18800b0d 	sth	r2,44(r3)
  810238:	e0bff117 	ldw	r2,-60(fp)
  81023c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810240:	e0bfef17 	ldw	r2,-68(fp)
  810244:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  810248:	e0800217 	ldw	r2,8(fp)
  81024c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  810250:	e0bff30b 	ldhu	r2,-52(fp)
  810254:	e0bfff15 	stw	r2,-4(fp)
  810258:	00010906 	br	810680 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  81025c:	e1bffa0b 	ldhu	r6,-24(fp)
  810260:	e1fffb03 	ldbu	r7,-20(fp)
  810264:	e0bffc0b 	ldhu	r2,-16(fp)
  810268:	e17ff404 	addi	r5,fp,-48
  81026c:	d8800015 	stw	r2,0(sp)
  810270:	e13ff917 	ldw	r4,-28(fp)
  810274:	0810b7c0 	call	810b7c <OS_FlagBlock>
  810278:	e0bff117 	ldw	r2,-60(fp)
  81027c:	e0bfee15 	stw	r2,-72(fp)
  810280:	e0bfee17 	ldw	r2,-72(fp)
  810284:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  810288:	00009506 	br	8104e0 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  81028c:	e0bff917 	ldw	r2,-28(fp)
  810290:	10c0020b 	ldhu	r3,8(r2)
  810294:	e0bffa0b 	ldhu	r2,-24(fp)
  810298:	1884703a 	and	r2,r3,r2
  81029c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  8102a0:	e0bff30b 	ldhu	r2,-52(fp)
  8102a4:	1005003a 	cmpeq	r2,r2,zero
  8102a8:	10001a1e 	bne	r2,zero,810314 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8102ac:	e0bff203 	ldbu	r2,-56(fp)
  8102b0:	10800058 	cmpnei	r2,r2,1
  8102b4:	1000091e 	bne	r2,zero,8102dc <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  8102b8:	e0bff917 	ldw	r2,-28(fp)
  8102bc:	1080020b 	ldhu	r2,8(r2)
  8102c0:	1007883a 	mov	r3,r2
  8102c4:	e0bff30b 	ldhu	r2,-52(fp)
  8102c8:	0084303a 	nor	r2,zero,r2
  8102cc:	1884703a 	and	r2,r3,r2
  8102d0:	1007883a 	mov	r3,r2
  8102d4:	e0bff917 	ldw	r2,-28(fp)
  8102d8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8102dc:	008020b4 	movhi	r2,130
  8102e0:	10bcca04 	addi	r2,r2,-3288
  8102e4:	10c00017 	ldw	r3,0(r2)
  8102e8:	e0bff30b 	ldhu	r2,-52(fp)
  8102ec:	18800b0d 	sth	r2,44(r3)
  8102f0:	e0bff117 	ldw	r2,-60(fp)
  8102f4:	e0bfed15 	stw	r2,-76(fp)
  8102f8:	e0bfed17 	ldw	r2,-76(fp)
  8102fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  810300:	e0800217 	ldw	r2,8(fp)
  810304:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  810308:	e0fff30b 	ldhu	r3,-52(fp)
  81030c:	e0ffff15 	stw	r3,-4(fp)
  810310:	0000db06 	br	810680 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  810314:	e1bffa0b 	ldhu	r6,-24(fp)
  810318:	e1fffb03 	ldbu	r7,-20(fp)
  81031c:	e0bffc0b 	ldhu	r2,-16(fp)
  810320:	e17ff404 	addi	r5,fp,-48
  810324:	d8800015 	stw	r2,0(sp)
  810328:	e13ff917 	ldw	r4,-28(fp)
  81032c:	0810b7c0 	call	810b7c <OS_FlagBlock>
  810330:	e0bff117 	ldw	r2,-60(fp)
  810334:	e0bfec15 	stw	r2,-80(fp)
  810338:	e0bfec17 	ldw	r2,-80(fp)
  81033c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  810340:	00006706 	br	8104e0 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  810344:	e0bff917 	ldw	r2,-28(fp)
  810348:	1080020b 	ldhu	r2,8(r2)
  81034c:	0084303a 	nor	r2,zero,r2
  810350:	1007883a 	mov	r3,r2
  810354:	e0bffa0b 	ldhu	r2,-24(fp)
  810358:	1884703a 	and	r2,r3,r2
  81035c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  810360:	e0fff30b 	ldhu	r3,-52(fp)
  810364:	e0bffa0b 	ldhu	r2,-24(fp)
  810368:	1880181e 	bne	r3,r2,8103cc <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  81036c:	e0bff203 	ldbu	r2,-56(fp)
  810370:	10800058 	cmpnei	r2,r2,1
  810374:	1000071e 	bne	r2,zero,810394 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  810378:	e0bff917 	ldw	r2,-28(fp)
  81037c:	10c0020b 	ldhu	r3,8(r2)
  810380:	e0bff30b 	ldhu	r2,-52(fp)
  810384:	1884b03a 	or	r2,r3,r2
  810388:	1007883a 	mov	r3,r2
  81038c:	e0bff917 	ldw	r2,-28(fp)
  810390:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  810394:	008020b4 	movhi	r2,130
  810398:	10bcca04 	addi	r2,r2,-3288
  81039c:	10c00017 	ldw	r3,0(r2)
  8103a0:	e0bff30b 	ldhu	r2,-52(fp)
  8103a4:	18800b0d 	sth	r2,44(r3)
  8103a8:	e0bff117 	ldw	r2,-60(fp)
  8103ac:	e0bfeb15 	stw	r2,-84(fp)
  8103b0:	e0bfeb17 	ldw	r2,-84(fp)
  8103b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8103b8:	e0800217 	ldw	r2,8(fp)
  8103bc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8103c0:	e0bff30b 	ldhu	r2,-52(fp)
  8103c4:	e0bfff15 	stw	r2,-4(fp)
  8103c8:	0000ad06 	br	810680 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8103cc:	e1bffa0b 	ldhu	r6,-24(fp)
  8103d0:	e1fffb03 	ldbu	r7,-20(fp)
  8103d4:	e0bffc0b 	ldhu	r2,-16(fp)
  8103d8:	e17ff404 	addi	r5,fp,-48
  8103dc:	d8800015 	stw	r2,0(sp)
  8103e0:	e13ff917 	ldw	r4,-28(fp)
  8103e4:	0810b7c0 	call	810b7c <OS_FlagBlock>
  8103e8:	e0bff117 	ldw	r2,-60(fp)
  8103ec:	e0bfea15 	stw	r2,-88(fp)
  8103f0:	e0bfea17 	ldw	r2,-88(fp)
  8103f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8103f8:	00003906 	br	8104e0 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  8103fc:	e0bff917 	ldw	r2,-28(fp)
  810400:	1080020b 	ldhu	r2,8(r2)
  810404:	0084303a 	nor	r2,zero,r2
  810408:	1007883a 	mov	r3,r2
  81040c:	e0bffa0b 	ldhu	r2,-24(fp)
  810410:	1884703a 	and	r2,r3,r2
  810414:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  810418:	e0bff30b 	ldhu	r2,-52(fp)
  81041c:	1005003a 	cmpeq	r2,r2,zero
  810420:	1000181e 	bne	r2,zero,810484 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  810424:	e0bff203 	ldbu	r2,-56(fp)
  810428:	10800058 	cmpnei	r2,r2,1
  81042c:	1000071e 	bne	r2,zero,81044c <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  810430:	e0bff917 	ldw	r2,-28(fp)
  810434:	10c0020b 	ldhu	r3,8(r2)
  810438:	e0bff30b 	ldhu	r2,-52(fp)
  81043c:	1884b03a 	or	r2,r3,r2
  810440:	1007883a 	mov	r3,r2
  810444:	e0bff917 	ldw	r2,-28(fp)
  810448:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  81044c:	008020b4 	movhi	r2,130
  810450:	10bcca04 	addi	r2,r2,-3288
  810454:	10c00017 	ldw	r3,0(r2)
  810458:	e0bff30b 	ldhu	r2,-52(fp)
  81045c:	18800b0d 	sth	r2,44(r3)
  810460:	e0bff117 	ldw	r2,-60(fp)
  810464:	e0bfe915 	stw	r2,-92(fp)
  810468:	e0bfe917 	ldw	r2,-92(fp)
  81046c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  810470:	e0800217 	ldw	r2,8(fp)
  810474:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  810478:	e0fff30b 	ldhu	r3,-52(fp)
  81047c:	e0ffff15 	stw	r3,-4(fp)
  810480:	00007f06 	br	810680 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  810484:	e1bffa0b 	ldhu	r6,-24(fp)
  810488:	e1fffb03 	ldbu	r7,-20(fp)
  81048c:	e0bffc0b 	ldhu	r2,-16(fp)
  810490:	e17ff404 	addi	r5,fp,-48
  810494:	d8800015 	stw	r2,0(sp)
  810498:	e13ff917 	ldw	r4,-28(fp)
  81049c:	0810b7c0 	call	810b7c <OS_FlagBlock>
  8104a0:	e0bff117 	ldw	r2,-60(fp)
  8104a4:	e0bfe815 	stw	r2,-96(fp)
  8104a8:	e0bfe817 	ldw	r2,-96(fp)
  8104ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8104b0:	00000b06 	br	8104e0 <OSFlagPend+0x48c>
  8104b4:	e0bff117 	ldw	r2,-60(fp)
  8104b8:	e0bfe715 	stw	r2,-100(fp)
  8104bc:	e0bfe717 	ldw	r2,-100(fp)
  8104c0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  8104c4:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  8104c8:	e0c00217 	ldw	r3,8(fp)
  8104cc:	00801bc4 	movi	r2,111
  8104d0:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  8104d4:	e0bff30b 	ldhu	r2,-52(fp)
  8104d8:	e0bfff15 	stw	r2,-4(fp)
  8104dc:	00006806 	br	810680 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  8104e0:	080ee300 	call	80ee30 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8104e4:	0005303a 	rdctl	r2,status
  8104e8:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8104ec:	e0ffe617 	ldw	r3,-104(fp)
  8104f0:	00bfff84 	movi	r2,-2
  8104f4:	1884703a 	and	r2,r3,r2
  8104f8:	1001703a 	wrctl	status,r2
  
  return context;
  8104fc:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  810500:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  810504:	008020b4 	movhi	r2,130
  810508:	10bcca04 	addi	r2,r2,-3288
  81050c:	10800017 	ldw	r2,0(r2)
  810510:	10800c43 	ldbu	r2,49(r2)
  810514:	10803fcc 	andi	r2,r2,255
  810518:	1005003a 	cmpeq	r2,r2,zero
  81051c:	1000221e 	bne	r2,zero,8105a8 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  810520:	008020b4 	movhi	r2,130
  810524:	10bcca04 	addi	r2,r2,-3288
  810528:	10800017 	ldw	r2,0(r2)
  81052c:	10800c43 	ldbu	r2,49(r2)
  810530:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  810534:	008020b4 	movhi	r2,130
  810538:	10bcca04 	addi	r2,r2,-3288
  81053c:	10800017 	ldw	r2,0(r2)
  810540:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  810544:	e13ff404 	addi	r4,fp,-48
  810548:	0810f340 	call	810f34 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  81054c:	008020b4 	movhi	r2,130
  810550:	10bcca04 	addi	r2,r2,-3288
  810554:	10800017 	ldw	r2,0(r2)
  810558:	10000c05 	stb	zero,48(r2)
  81055c:	e0bff117 	ldw	r2,-60(fp)
  810560:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810564:	e0bfe517 	ldw	r2,-108(fp)
  810568:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  81056c:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  810570:	e0bff243 	ldbu	r2,-55(fp)
  810574:	108000a0 	cmpeqi	r2,r2,2
  810578:	1000011e 	bne	r2,zero,810580 <OSFlagPend+0x52c>
  81057c:	00000406 	br	810590 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  810580:	e0c00217 	ldw	r3,8(fp)
  810584:	00800384 	movi	r2,14
  810588:	18800005 	stb	r2,0(r3)
                 break;
  81058c:	00000306 	br	81059c <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  810590:	e0c00217 	ldw	r3,8(fp)
  810594:	00800284 	movi	r2,10
  810598:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  81059c:	e0fff30b 	ldhu	r3,-52(fp)
  8105a0:	e0ffff15 	stw	r3,-4(fp)
  8105a4:	00003606 	br	810680 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  8105a8:	008020b4 	movhi	r2,130
  8105ac:	10bcca04 	addi	r2,r2,-3288
  8105b0:	10800017 	ldw	r2,0(r2)
  8105b4:	10800b0b 	ldhu	r2,44(r2)
  8105b8:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  8105bc:	e0bff203 	ldbu	r2,-56(fp)
  8105c0:	10800058 	cmpnei	r2,r2,1
  8105c4:	1000261e 	bne	r2,zero,810660 <OSFlagPend+0x60c>
        switch (wait_type) {
  8105c8:	e0bffb03 	ldbu	r2,-20(fp)
  8105cc:	e0bffd15 	stw	r2,-12(fp)
  8105d0:	e0fffd17 	ldw	r3,-12(fp)
  8105d4:	1804803a 	cmplt	r2,r3,zero
  8105d8:	1000181e 	bne	r2,zero,81063c <OSFlagPend+0x5e8>
  8105dc:	e0fffd17 	ldw	r3,-12(fp)
  8105e0:	18800090 	cmplti	r2,r3,2
  8105e4:	10000d1e 	bne	r2,zero,81061c <OSFlagPend+0x5c8>
  8105e8:	e0fffd17 	ldw	r3,-12(fp)
  8105ec:	18800108 	cmpgei	r2,r3,4
  8105f0:	1000121e 	bne	r2,zero,81063c <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  8105f4:	e0bff917 	ldw	r2,-28(fp)
  8105f8:	1080020b 	ldhu	r2,8(r2)
  8105fc:	1007883a 	mov	r3,r2
  810600:	e0bff30b 	ldhu	r2,-52(fp)
  810604:	0084303a 	nor	r2,zero,r2
  810608:	1884703a 	and	r2,r3,r2
  81060c:	1007883a 	mov	r3,r2
  810610:	e0bff917 	ldw	r2,-28(fp)
  810614:	10c0020d 	sth	r3,8(r2)
                 break;
  810618:	00001106 	br	810660 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  81061c:	e0bff917 	ldw	r2,-28(fp)
  810620:	10c0020b 	ldhu	r3,8(r2)
  810624:	e0bff30b 	ldhu	r2,-52(fp)
  810628:	1884b03a 	or	r2,r3,r2
  81062c:	1007883a 	mov	r3,r2
  810630:	e0bff917 	ldw	r2,-28(fp)
  810634:	10c0020d 	sth	r3,8(r2)
                 break;
  810638:	00000906 	br	810660 <OSFlagPend+0x60c>
  81063c:	e0bff117 	ldw	r2,-60(fp)
  810640:	e0bfe415 	stw	r2,-112(fp)
  810644:	e0bfe417 	ldw	r2,-112(fp)
  810648:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  81064c:	e0c00217 	ldw	r3,8(fp)
  810650:	00801bc4 	movi	r2,111
  810654:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  810658:	e03fff15 	stw	zero,-4(fp)
  81065c:	00000806 	br	810680 <OSFlagPend+0x62c>
  810660:	e0bff117 	ldw	r2,-60(fp)
  810664:	e0bfe315 	stw	r2,-116(fp)
  810668:	e0bfe317 	ldw	r2,-116(fp)
  81066c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  810670:	e0800217 	ldw	r2,8(fp)
  810674:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  810678:	e0bff30b 	ldhu	r2,-52(fp)
  81067c:	e0bfff15 	stw	r2,-4(fp)
  810680:	e0bfff17 	ldw	r2,-4(fp)
}
  810684:	e037883a 	mov	sp,fp
  810688:	dfc00117 	ldw	ra,4(sp)
  81068c:	df000017 	ldw	fp,0(sp)
  810690:	dec00204 	addi	sp,sp,8
  810694:	f800283a 	ret

00810698 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  810698:	defffb04 	addi	sp,sp,-20
  81069c:	df000415 	stw	fp,16(sp)
  8106a0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8106a4:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8106a8:	0005303a 	rdctl	r2,status
  8106ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8106b0:	e0fffd17 	ldw	r3,-12(fp)
  8106b4:	00bfff84 	movi	r2,-2
  8106b8:	1884703a 	and	r2,r3,r2
  8106bc:	1001703a 	wrctl	status,r2
  
  return context;
  8106c0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  8106c4:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  8106c8:	008020b4 	movhi	r2,130
  8106cc:	10bcca04 	addi	r2,r2,-3288
  8106d0:	10800017 	ldw	r2,0(r2)
  8106d4:	10800b0b 	ldhu	r2,44(r2)
  8106d8:	e0bfff0d 	sth	r2,-4(fp)
  8106dc:	e0bffe17 	ldw	r2,-8(fp)
  8106e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8106e4:	e0bffc17 	ldw	r2,-16(fp)
  8106e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  8106ec:	e0bfff0b 	ldhu	r2,-4(fp)
}
  8106f0:	e037883a 	mov	sp,fp
  8106f4:	df000017 	ldw	fp,0(sp)
  8106f8:	dec00104 	addi	sp,sp,4
  8106fc:	f800283a 	ret

00810700 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  810700:	deffed04 	addi	sp,sp,-76
  810704:	dfc01215 	stw	ra,72(sp)
  810708:	df001115 	stw	fp,68(sp)
  81070c:	df001104 	addi	fp,sp,68
  810710:	e13ff915 	stw	r4,-28(fp)
  810714:	e1fffc15 	stw	r7,-16(fp)
  810718:	e17ffa0d 	sth	r5,-24(fp)
  81071c:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  810720:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  810724:	e0bffc17 	ldw	r2,-16(fp)
  810728:	1004c03a 	cmpne	r2,r2,zero
  81072c:	1000021e 	bne	r2,zero,810738 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  810730:	e03fff15 	stw	zero,-4(fp)
  810734:	0000d606 	br	810a90 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  810738:	e0bff917 	ldw	r2,-28(fp)
  81073c:	1004c03a 	cmpne	r2,r2,zero
  810740:	1000051e 	bne	r2,zero,810758 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  810744:	e0fffc17 	ldw	r3,-16(fp)
  810748:	00801b84 	movi	r2,110
  81074c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  810750:	e03fff15 	stw	zero,-4(fp)
  810754:	0000ce06 	br	810a90 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  810758:	e0bff917 	ldw	r2,-28(fp)
  81075c:	10800003 	ldbu	r2,0(r2)
  810760:	10803fcc 	andi	r2,r2,255
  810764:	10800160 	cmpeqi	r2,r2,5
  810768:	1000051e 	bne	r2,zero,810780 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  81076c:	e0fffc17 	ldw	r3,-16(fp)
  810770:	00800044 	movi	r2,1
  810774:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  810778:	e03fff15 	stw	zero,-4(fp)
  81077c:	0000c406 	br	810a90 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810780:	0005303a 	rdctl	r2,status
  810784:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810788:	e0fff417 	ldw	r3,-48(fp)
  81078c:	00bfff84 	movi	r2,-2
  810790:	1884703a 	and	r2,r3,r2
  810794:	1001703a 	wrctl	status,r2
  
  return context;
  810798:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  81079c:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  8107a0:	e0bffb03 	ldbu	r2,-20(fp)
  8107a4:	e0bffe15 	stw	r2,-8(fp)
  8107a8:	e0fffe17 	ldw	r3,-8(fp)
  8107ac:	1805003a 	cmpeq	r2,r3,zero
  8107b0:	1000041e 	bne	r2,zero,8107c4 <OSFlagPost+0xc4>
  8107b4:	e0fffe17 	ldw	r3,-8(fp)
  8107b8:	18800060 	cmpeqi	r2,r3,1
  8107bc:	10000b1e 	bne	r2,zero,8107ec <OSFlagPost+0xec>
  8107c0:	00001206 	br	81080c <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  8107c4:	e0bff917 	ldw	r2,-28(fp)
  8107c8:	1080020b 	ldhu	r2,8(r2)
  8107cc:	1007883a 	mov	r3,r2
  8107d0:	e0bffa0b 	ldhu	r2,-24(fp)
  8107d4:	0084303a 	nor	r2,zero,r2
  8107d8:	1884703a 	and	r2,r3,r2
  8107dc:	1007883a 	mov	r3,r2
  8107e0:	e0bff917 	ldw	r2,-28(fp)
  8107e4:	10c0020d 	sth	r3,8(r2)
             break;
  8107e8:	00001106 	br	810830 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  8107ec:	e0bff917 	ldw	r2,-28(fp)
  8107f0:	10c0020b 	ldhu	r3,8(r2)
  8107f4:	e0bffa0b 	ldhu	r2,-24(fp)
  8107f8:	1884b03a 	or	r2,r3,r2
  8107fc:	1007883a 	mov	r3,r2
  810800:	e0bff917 	ldw	r2,-28(fp)
  810804:	10c0020d 	sth	r3,8(r2)
             break;
  810808:	00000906 	br	810830 <OSFlagPost+0x130>
  81080c:	e0bff517 	ldw	r2,-44(fp)
  810810:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810814:	e0bff317 	ldw	r2,-52(fp)
  810818:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  81081c:	e0fffc17 	ldw	r3,-16(fp)
  810820:	00801c44 	movi	r2,113
  810824:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  810828:	e03fff15 	stw	zero,-4(fp)
  81082c:	00009806 	br	810a90 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  810830:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  810834:	e0bff917 	ldw	r2,-28(fp)
  810838:	10800117 	ldw	r2,4(r2)
  81083c:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  810840:	00007506 	br	810a18 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  810844:	e0bff817 	ldw	r2,-32(fp)
  810848:	10800483 	ldbu	r2,18(r2)
  81084c:	10803fcc 	andi	r2,r2,255
  810850:	e0bffd15 	stw	r2,-12(fp)
  810854:	e0fffd17 	ldw	r3,-12(fp)
  810858:	18800060 	cmpeqi	r2,r3,1
  81085c:	10004d1e 	bne	r2,zero,810994 <OSFlagPost+0x294>
  810860:	e0fffd17 	ldw	r3,-12(fp)
  810864:	18800088 	cmpgei	r2,r3,2
  810868:	1000041e 	bne	r2,zero,81087c <OSFlagPost+0x17c>
  81086c:	e0fffd17 	ldw	r3,-12(fp)
  810870:	1805003a 	cmpeq	r2,r3,zero
  810874:	1000301e 	bne	r2,zero,810938 <OSFlagPost+0x238>
  810878:	00005b06 	br	8109e8 <OSFlagPost+0x2e8>
  81087c:	e0fffd17 	ldw	r3,-12(fp)
  810880:	188000a0 	cmpeqi	r2,r3,2
  810884:	1000041e 	bne	r2,zero,810898 <OSFlagPost+0x198>
  810888:	e0fffd17 	ldw	r3,-12(fp)
  81088c:	188000e0 	cmpeqi	r2,r3,3
  810890:	1000161e 	bne	r2,zero,8108ec <OSFlagPost+0x1ec>
  810894:	00005406 	br	8109e8 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  810898:	e0bff917 	ldw	r2,-28(fp)
  81089c:	10c0020b 	ldhu	r3,8(r2)
  8108a0:	e0bff817 	ldw	r2,-32(fp)
  8108a4:	1080040b 	ldhu	r2,16(r2)
  8108a8:	1884703a 	and	r2,r3,r2
  8108ac:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  8108b0:	e0bff817 	ldw	r2,-32(fp)
  8108b4:	1080040b 	ldhu	r2,16(r2)
  8108b8:	10ffffcc 	andi	r3,r2,65535
  8108bc:	e0bff68b 	ldhu	r2,-38(fp)
  8108c0:	1880521e 	bne	r3,r2,810a0c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8108c4:	e17ff68b 	ldhu	r5,-38(fp)
  8108c8:	e13ff817 	ldw	r4,-32(fp)
  8108cc:	0810e240 	call	810e24 <OS_FlagTaskRdy>
  8108d0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  8108d4:	e0bff603 	ldbu	r2,-40(fp)
  8108d8:	10800058 	cmpnei	r2,r2,1
  8108dc:	10004b1e 	bne	r2,zero,810a0c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8108e0:	00800044 	movi	r2,1
  8108e4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  8108e8:	00004806 	br	810a0c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8108ec:	e0bff917 	ldw	r2,-28(fp)
  8108f0:	10c0020b 	ldhu	r3,8(r2)
  8108f4:	e0bff817 	ldw	r2,-32(fp)
  8108f8:	1080040b 	ldhu	r2,16(r2)
  8108fc:	1884703a 	and	r2,r3,r2
  810900:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  810904:	e0bff68b 	ldhu	r2,-38(fp)
  810908:	1005003a 	cmpeq	r2,r2,zero
  81090c:	10003f1e 	bne	r2,zero,810a0c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  810910:	e17ff68b 	ldhu	r5,-38(fp)
  810914:	e13ff817 	ldw	r4,-32(fp)
  810918:	0810e240 	call	810e24 <OS_FlagTaskRdy>
  81091c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  810920:	e0bff603 	ldbu	r2,-40(fp)
  810924:	10800058 	cmpnei	r2,r2,1
  810928:	1000381e 	bne	r2,zero,810a0c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  81092c:	00800044 	movi	r2,1
  810930:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  810934:	00003506 	br	810a0c <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  810938:	e0bff917 	ldw	r2,-28(fp)
  81093c:	1080020b 	ldhu	r2,8(r2)
  810940:	0084303a 	nor	r2,zero,r2
  810944:	1007883a 	mov	r3,r2
  810948:	e0bff817 	ldw	r2,-32(fp)
  81094c:	1080040b 	ldhu	r2,16(r2)
  810950:	1884703a 	and	r2,r3,r2
  810954:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  810958:	e0bff817 	ldw	r2,-32(fp)
  81095c:	1080040b 	ldhu	r2,16(r2)
  810960:	10ffffcc 	andi	r3,r2,65535
  810964:	e0bff68b 	ldhu	r2,-38(fp)
  810968:	1880281e 	bne	r3,r2,810a0c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  81096c:	e17ff68b 	ldhu	r5,-38(fp)
  810970:	e13ff817 	ldw	r4,-32(fp)
  810974:	0810e240 	call	810e24 <OS_FlagTaskRdy>
  810978:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  81097c:	e0bff603 	ldbu	r2,-40(fp)
  810980:	10800058 	cmpnei	r2,r2,1
  810984:	1000211e 	bne	r2,zero,810a0c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  810988:	00800044 	movi	r2,1
  81098c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  810990:	00001e06 	br	810a0c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  810994:	e0bff917 	ldw	r2,-28(fp)
  810998:	1080020b 	ldhu	r2,8(r2)
  81099c:	0084303a 	nor	r2,zero,r2
  8109a0:	1007883a 	mov	r3,r2
  8109a4:	e0bff817 	ldw	r2,-32(fp)
  8109a8:	1080040b 	ldhu	r2,16(r2)
  8109ac:	1884703a 	and	r2,r3,r2
  8109b0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  8109b4:	e0bff68b 	ldhu	r2,-38(fp)
  8109b8:	1005003a 	cmpeq	r2,r2,zero
  8109bc:	1000131e 	bne	r2,zero,810a0c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8109c0:	e17ff68b 	ldhu	r5,-38(fp)
  8109c4:	e13ff817 	ldw	r4,-32(fp)
  8109c8:	0810e240 	call	810e24 <OS_FlagTaskRdy>
  8109cc:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  8109d0:	e0bff603 	ldbu	r2,-40(fp)
  8109d4:	10800058 	cmpnei	r2,r2,1
  8109d8:	10000c1e 	bne	r2,zero,810a0c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8109dc:	00800044 	movi	r2,1
  8109e0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  8109e4:	00000906 	br	810a0c <OSFlagPost+0x30c>
  8109e8:	e0bff517 	ldw	r2,-44(fp)
  8109ec:	e0bff215 	stw	r2,-56(fp)
  8109f0:	e0bff217 	ldw	r2,-56(fp)
  8109f4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  8109f8:	e0fffc17 	ldw	r3,-16(fp)
  8109fc:	00801bc4 	movi	r2,111
  810a00:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  810a04:	e03fff15 	stw	zero,-4(fp)
  810a08:	00002106 	br	810a90 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  810a0c:	e0bff817 	ldw	r2,-32(fp)
  810a10:	10800017 	ldw	r2,0(r2)
  810a14:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  810a18:	e0bff817 	ldw	r2,-32(fp)
  810a1c:	1004c03a 	cmpne	r2,r2,zero
  810a20:	103f881e 	bne	r2,zero,810844 <OSFlagPost+0x144>
  810a24:	e0bff517 	ldw	r2,-44(fp)
  810a28:	e0bff115 	stw	r2,-60(fp)
  810a2c:	e0bff117 	ldw	r2,-60(fp)
  810a30:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  810a34:	e0bff783 	ldbu	r2,-34(fp)
  810a38:	10800058 	cmpnei	r2,r2,1
  810a3c:	1000011e 	bne	r2,zero,810a44 <OSFlagPost+0x344>
        OS_Sched();
  810a40:	080ee300 	call	80ee30 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810a44:	0005303a 	rdctl	r2,status
  810a48:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810a4c:	e0fff017 	ldw	r3,-64(fp)
  810a50:	00bfff84 	movi	r2,-2
  810a54:	1884703a 	and	r2,r3,r2
  810a58:	1001703a 	wrctl	status,r2
  
  return context;
  810a5c:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  810a60:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  810a64:	e0bff917 	ldw	r2,-28(fp)
  810a68:	1080020b 	ldhu	r2,8(r2)
  810a6c:	e0bff70d 	sth	r2,-36(fp)
  810a70:	e0bff517 	ldw	r2,-44(fp)
  810a74:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810a78:	e0bfef17 	ldw	r2,-68(fp)
  810a7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  810a80:	e0bffc17 	ldw	r2,-16(fp)
  810a84:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  810a88:	e0bff70b 	ldhu	r2,-36(fp)
  810a8c:	e0bfff15 	stw	r2,-4(fp)
  810a90:	e0bfff17 	ldw	r2,-4(fp)
}
  810a94:	e037883a 	mov	sp,fp
  810a98:	dfc00117 	ldw	ra,4(sp)
  810a9c:	df000017 	ldw	fp,0(sp)
  810aa0:	dec00204 	addi	sp,sp,8
  810aa4:	f800283a 	ret

00810aa8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  810aa8:	defff804 	addi	sp,sp,-32
  810aac:	df000715 	stw	fp,28(sp)
  810ab0:	df000704 	addi	fp,sp,28
  810ab4:	e13ffd15 	stw	r4,-12(fp)
  810ab8:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  810abc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  810ac0:	e0bffe17 	ldw	r2,-8(fp)
  810ac4:	1004c03a 	cmpne	r2,r2,zero
  810ac8:	1000021e 	bne	r2,zero,810ad4 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  810acc:	e03fff15 	stw	zero,-4(fp)
  810ad0:	00002506 	br	810b68 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  810ad4:	e0bffd17 	ldw	r2,-12(fp)
  810ad8:	1004c03a 	cmpne	r2,r2,zero
  810adc:	1000051e 	bne	r2,zero,810af4 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  810ae0:	e0fffe17 	ldw	r3,-8(fp)
  810ae4:	00801b84 	movi	r2,110
  810ae8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  810aec:	e03fff15 	stw	zero,-4(fp)
  810af0:	00001d06 	br	810b68 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  810af4:	e0bffd17 	ldw	r2,-12(fp)
  810af8:	10800003 	ldbu	r2,0(r2)
  810afc:	10803fcc 	andi	r2,r2,255
  810b00:	10800160 	cmpeqi	r2,r2,5
  810b04:	1000051e 	bne	r2,zero,810b1c <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  810b08:	e0fffe17 	ldw	r3,-8(fp)
  810b0c:	00800044 	movi	r2,1
  810b10:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  810b14:	e03fff15 	stw	zero,-4(fp)
  810b18:	00001306 	br	810b68 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810b1c:	0005303a 	rdctl	r2,status
  810b20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810b24:	e0fffa17 	ldw	r3,-24(fp)
  810b28:	00bfff84 	movi	r2,-2
  810b2c:	1884703a 	and	r2,r3,r2
  810b30:	1001703a 	wrctl	status,r2
  
  return context;
  810b34:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  810b38:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  810b3c:	e0bffd17 	ldw	r2,-12(fp)
  810b40:	1080020b 	ldhu	r2,8(r2)
  810b44:	e0bffc0d 	sth	r2,-16(fp)
  810b48:	e0bffb17 	ldw	r2,-20(fp)
  810b4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810b50:	e0bff917 	ldw	r2,-28(fp)
  810b54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  810b58:	e0bffe17 	ldw	r2,-8(fp)
  810b5c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  810b60:	e0bffc0b 	ldhu	r2,-16(fp)
  810b64:	e0bfff15 	stw	r2,-4(fp)
  810b68:	e0bfff17 	ldw	r2,-4(fp)
}
  810b6c:	e037883a 	mov	sp,fp
  810b70:	df000017 	ldw	fp,0(sp)
  810b74:	dec00104 	addi	sp,sp,4
  810b78:	f800283a 	ret

00810b7c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  810b7c:	defff804 	addi	sp,sp,-32
  810b80:	df000715 	stw	fp,28(sp)
  810b84:	df000704 	addi	fp,sp,28
  810b88:	e13ffb15 	stw	r4,-20(fp)
  810b8c:	e17ffc15 	stw	r5,-16(fp)
  810b90:	e0800117 	ldw	r2,4(fp)
  810b94:	e1bffd0d 	sth	r6,-12(fp)
  810b98:	e1fffe05 	stb	r7,-8(fp)
  810b9c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  810ba0:	008020b4 	movhi	r2,130
  810ba4:	10bcca04 	addi	r2,r2,-3288
  810ba8:	10c00017 	ldw	r3,0(r2)
  810bac:	008020b4 	movhi	r2,130
  810bb0:	10bcca04 	addi	r2,r2,-3288
  810bb4:	10800017 	ldw	r2,0(r2)
  810bb8:	10800c03 	ldbu	r2,48(r2)
  810bbc:	10800814 	ori	r2,r2,32
  810bc0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  810bc4:	008020b4 	movhi	r2,130
  810bc8:	10bcca04 	addi	r2,r2,-3288
  810bcc:	10800017 	ldw	r2,0(r2)
  810bd0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  810bd4:	008020b4 	movhi	r2,130
  810bd8:	10bcca04 	addi	r2,r2,-3288
  810bdc:	10c00017 	ldw	r3,0(r2)
  810be0:	e0bfff0b 	ldhu	r2,-4(fp)
  810be4:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  810be8:	008020b4 	movhi	r2,130
  810bec:	10bcca04 	addi	r2,r2,-3288
  810bf0:	10c00017 	ldw	r3,0(r2)
  810bf4:	e0bffc17 	ldw	r2,-16(fp)
  810bf8:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  810bfc:	e0fffc17 	ldw	r3,-16(fp)
  810c00:	e0bffd0b 	ldhu	r2,-12(fp)
  810c04:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  810c08:	e0fffc17 	ldw	r3,-16(fp)
  810c0c:	e0bffe03 	ldbu	r2,-8(fp)
  810c10:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  810c14:	008020b4 	movhi	r2,130
  810c18:	10bcca04 	addi	r2,r2,-3288
  810c1c:	10c00017 	ldw	r3,0(r2)
  810c20:	e0bffc17 	ldw	r2,-16(fp)
  810c24:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  810c28:	e0bffb17 	ldw	r2,-20(fp)
  810c2c:	10c00117 	ldw	r3,4(r2)
  810c30:	e0bffc17 	ldw	r2,-16(fp)
  810c34:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  810c38:	e0bffc17 	ldw	r2,-16(fp)
  810c3c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  810c40:	e0fffc17 	ldw	r3,-16(fp)
  810c44:	e0bffb17 	ldw	r2,-20(fp)
  810c48:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  810c4c:	e0bffb17 	ldw	r2,-20(fp)
  810c50:	10800117 	ldw	r2,4(r2)
  810c54:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  810c58:	e0bffa17 	ldw	r2,-24(fp)
  810c5c:	1005003a 	cmpeq	r2,r2,zero
  810c60:	1000031e 	bne	r2,zero,810c70 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  810c64:	e0fffa17 	ldw	r3,-24(fp)
  810c68:	e0bffc17 	ldw	r2,-16(fp)
  810c6c:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  810c70:	e0fffb17 	ldw	r3,-20(fp)
  810c74:	e0bffc17 	ldw	r2,-16(fp)
  810c78:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  810c7c:	008020b4 	movhi	r2,130
  810c80:	10bcca04 	addi	r2,r2,-3288
  810c84:	10800017 	ldw	r2,0(r2)
  810c88:	10800d03 	ldbu	r2,52(r2)
  810c8c:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  810c90:	e13ff903 	ldbu	r4,-28(fp)
  810c94:	e0fff903 	ldbu	r3,-28(fp)
  810c98:	008020b4 	movhi	r2,130
  810c9c:	10bcc744 	addi	r2,r2,-3299
  810ca0:	10c5883a 	add	r2,r2,r3
  810ca4:	10800003 	ldbu	r2,0(r2)
  810ca8:	1007883a 	mov	r3,r2
  810cac:	008020b4 	movhi	r2,130
  810cb0:	10bcca04 	addi	r2,r2,-3288
  810cb4:	10800017 	ldw	r2,0(r2)
  810cb8:	10800d43 	ldbu	r2,53(r2)
  810cbc:	0084303a 	nor	r2,zero,r2
  810cc0:	1884703a 	and	r2,r3,r2
  810cc4:	1007883a 	mov	r3,r2
  810cc8:	008020b4 	movhi	r2,130
  810ccc:	10bcc744 	addi	r2,r2,-3299
  810cd0:	1105883a 	add	r2,r2,r4
  810cd4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  810cd8:	e0fff903 	ldbu	r3,-28(fp)
  810cdc:	008020b4 	movhi	r2,130
  810ce0:	10bcc744 	addi	r2,r2,-3299
  810ce4:	10c5883a 	add	r2,r2,r3
  810ce8:	10800003 	ldbu	r2,0(r2)
  810cec:	10803fcc 	andi	r2,r2,255
  810cf0:	1004c03a 	cmpne	r2,r2,zero
  810cf4:	10000e1e 	bne	r2,zero,810d30 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  810cf8:	008020b4 	movhi	r2,130
  810cfc:	10bcca04 	addi	r2,r2,-3288
  810d00:	10800017 	ldw	r2,0(r2)
  810d04:	10800d83 	ldbu	r2,54(r2)
  810d08:	0084303a 	nor	r2,zero,r2
  810d0c:	1007883a 	mov	r3,r2
  810d10:	008020b4 	movhi	r2,130
  810d14:	10bcc704 	addi	r2,r2,-3300
  810d18:	10800003 	ldbu	r2,0(r2)
  810d1c:	1884703a 	and	r2,r3,r2
  810d20:	1007883a 	mov	r3,r2
  810d24:	008020b4 	movhi	r2,130
  810d28:	10bcc704 	addi	r2,r2,-3300
  810d2c:	10c00005 	stb	r3,0(r2)
    }
}
  810d30:	e037883a 	mov	sp,fp
  810d34:	df000017 	ldw	fp,0(sp)
  810d38:	dec00104 	addi	sp,sp,4
  810d3c:	f800283a 	ret

00810d40 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  810d40:	defffb04 	addi	sp,sp,-20
  810d44:	dfc00415 	stw	ra,16(sp)
  810d48:	df000315 	stw	fp,12(sp)
  810d4c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  810d50:	010020f4 	movhi	r4,131
  810d54:	210e2504 	addi	r4,r4,14484
  810d58:	0140dc04 	movi	r5,880
  810d5c:	080ed700 	call	80ed70 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  810d60:	008020f4 	movhi	r2,131
  810d64:	108e2504 	addi	r2,r2,14484
  810d68:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  810d6c:	008020f4 	movhi	r2,131
  810d70:	108e3004 	addi	r2,r2,14528
  810d74:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  810d78:	e03fff0d 	sth	zero,-4(fp)
  810d7c:	00001306 	br	810dcc <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  810d80:	e0bffe17 	ldw	r2,-8(fp)
  810d84:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  810d88:	e0fffe17 	ldw	r3,-8(fp)
  810d8c:	e0bffd17 	ldw	r2,-12(fp)
  810d90:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  810d94:	e0fffe17 	ldw	r3,-8(fp)
  810d98:	00800fc4 	movi	r2,63
  810d9c:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  810da0:	e0bffe17 	ldw	r2,-8(fp)
  810da4:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  810da8:	e0bffe17 	ldw	r2,-8(fp)
  810dac:	10800b04 	addi	r2,r2,44
  810db0:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  810db4:	e0bffd17 	ldw	r2,-12(fp)
  810db8:	10800b04 	addi	r2,r2,44
  810dbc:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  810dc0:	e0bfff0b 	ldhu	r2,-4(fp)
  810dc4:	10800044 	addi	r2,r2,1
  810dc8:	e0bfff0d 	sth	r2,-4(fp)
  810dcc:	e0bfff0b 	ldhu	r2,-4(fp)
  810dd0:	108004f0 	cmpltui	r2,r2,19
  810dd4:	103fea1e 	bne	r2,zero,810d80 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  810dd8:	e0bffe17 	ldw	r2,-8(fp)
  810ddc:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  810de0:	e0bffe17 	ldw	r2,-8(fp)
  810de4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  810de8:	e0fffe17 	ldw	r3,-8(fp)
  810dec:	00800fc4 	movi	r2,63
  810df0:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  810df4:	e0bffe17 	ldw	r2,-8(fp)
  810df8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  810dfc:	00c020b4 	movhi	r3,130
  810e00:	18fccc04 	addi	r3,r3,-3280
  810e04:	008020f4 	movhi	r2,131
  810e08:	108e2504 	addi	r2,r2,14484
  810e0c:	18800015 	stw	r2,0(r3)
#endif
}
  810e10:	e037883a 	mov	sp,fp
  810e14:	dfc00117 	ldw	ra,4(sp)
  810e18:	df000017 	ldw	fp,0(sp)
  810e1c:	dec00204 	addi	sp,sp,8
  810e20:	f800283a 	ret

00810e24 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  810e24:	defffa04 	addi	sp,sp,-24
  810e28:	dfc00515 	stw	ra,20(sp)
  810e2c:	df000415 	stw	fp,16(sp)
  810e30:	df000404 	addi	fp,sp,16
  810e34:	e13ffe15 	stw	r4,-8(fp)
  810e38:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  810e3c:	e0bffe17 	ldw	r2,-8(fp)
  810e40:	10800217 	ldw	r2,8(r2)
  810e44:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  810e48:	e0bffd17 	ldw	r2,-12(fp)
  810e4c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  810e50:	e0fffd17 	ldw	r3,-12(fp)
  810e54:	e0bfff0b 	ldhu	r2,-4(fp)
  810e58:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  810e5c:	e0bffd17 	ldw	r2,-12(fp)
  810e60:	10c00c03 	ldbu	r3,48(r2)
  810e64:	00bff7c4 	movi	r2,-33
  810e68:	1884703a 	and	r2,r3,r2
  810e6c:	1007883a 	mov	r3,r2
  810e70:	e0bffd17 	ldw	r2,-12(fp)
  810e74:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  810e78:	e0bffd17 	ldw	r2,-12(fp)
  810e7c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  810e80:	e0bffd17 	ldw	r2,-12(fp)
  810e84:	10800c03 	ldbu	r2,48(r2)
  810e88:	10803fcc 	andi	r2,r2,255
  810e8c:	1004c03a 	cmpne	r2,r2,zero
  810e90:	10001f1e 	bne	r2,zero,810f10 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  810e94:	e0bffd17 	ldw	r2,-12(fp)
  810e98:	10c00d83 	ldbu	r3,54(r2)
  810e9c:	008020b4 	movhi	r2,130
  810ea0:	10bcc704 	addi	r2,r2,-3300
  810ea4:	10800003 	ldbu	r2,0(r2)
  810ea8:	1884b03a 	or	r2,r3,r2
  810eac:	1007883a 	mov	r3,r2
  810eb0:	008020b4 	movhi	r2,130
  810eb4:	10bcc704 	addi	r2,r2,-3300
  810eb8:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  810ebc:	e0bffd17 	ldw	r2,-12(fp)
  810ec0:	10800d03 	ldbu	r2,52(r2)
  810ec4:	11003fcc 	andi	r4,r2,255
  810ec8:	e0bffd17 	ldw	r2,-12(fp)
  810ecc:	10800d03 	ldbu	r2,52(r2)
  810ed0:	10c03fcc 	andi	r3,r2,255
  810ed4:	008020b4 	movhi	r2,130
  810ed8:	10bcc744 	addi	r2,r2,-3299
  810edc:	10c5883a 	add	r2,r2,r3
  810ee0:	10c00003 	ldbu	r3,0(r2)
  810ee4:	e0bffd17 	ldw	r2,-12(fp)
  810ee8:	10800d43 	ldbu	r2,53(r2)
  810eec:	1884b03a 	or	r2,r3,r2
  810ef0:	1007883a 	mov	r3,r2
  810ef4:	008020b4 	movhi	r2,130
  810ef8:	10bcc744 	addi	r2,r2,-3299
  810efc:	1105883a 	add	r2,r2,r4
  810f00:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  810f04:	00800044 	movi	r2,1
  810f08:	e0bffc05 	stb	r2,-16(fp)
  810f0c:	00000106 	br	810f14 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  810f10:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  810f14:	e13ffe17 	ldw	r4,-8(fp)
  810f18:	0810f340 	call	810f34 <OS_FlagUnlink>
    return (sched);
  810f1c:	e0bffc03 	ldbu	r2,-16(fp)
}
  810f20:	e037883a 	mov	sp,fp
  810f24:	dfc00117 	ldw	ra,4(sp)
  810f28:	df000017 	ldw	fp,0(sp)
  810f2c:	dec00204 	addi	sp,sp,8
  810f30:	f800283a 	ret

00810f34 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  810f34:	defffa04 	addi	sp,sp,-24
  810f38:	df000515 	stw	fp,20(sp)
  810f3c:	df000504 	addi	fp,sp,20
  810f40:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  810f44:	e0bfff17 	ldw	r2,-4(fp)
  810f48:	10800117 	ldw	r2,4(r2)
  810f4c:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  810f50:	e0bfff17 	ldw	r2,-4(fp)
  810f54:	10800017 	ldw	r2,0(r2)
  810f58:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  810f5c:	e0bffc17 	ldw	r2,-16(fp)
  810f60:	1004c03a 	cmpne	r2,r2,zero
  810f64:	10000c1e 	bne	r2,zero,810f98 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  810f68:	e0bfff17 	ldw	r2,-4(fp)
  810f6c:	10800317 	ldw	r2,12(r2)
  810f70:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  810f74:	e0fffd17 	ldw	r3,-12(fp)
  810f78:	e0bffb17 	ldw	r2,-20(fp)
  810f7c:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  810f80:	e0bffb17 	ldw	r2,-20(fp)
  810f84:	1005003a 	cmpeq	r2,r2,zero
  810f88:	10000c1e 	bne	r2,zero,810fbc <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  810f8c:	e0bffb17 	ldw	r2,-20(fp)
  810f90:	10000115 	stw	zero,4(r2)
  810f94:	00000906 	br	810fbc <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  810f98:	e0fffc17 	ldw	r3,-16(fp)
  810f9c:	e0bffb17 	ldw	r2,-20(fp)
  810fa0:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  810fa4:	e0bffb17 	ldw	r2,-20(fp)
  810fa8:	1005003a 	cmpeq	r2,r2,zero
  810fac:	1000031e 	bne	r2,zero,810fbc <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  810fb0:	e0fffb17 	ldw	r3,-20(fp)
  810fb4:	e0bffc17 	ldw	r2,-16(fp)
  810fb8:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  810fbc:	e0bfff17 	ldw	r2,-4(fp)
  810fc0:	10800217 	ldw	r2,8(r2)
  810fc4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  810fc8:	e0bffe17 	ldw	r2,-8(fp)
  810fcc:	10000a15 	stw	zero,40(r2)
#endif
}
  810fd0:	e037883a 	mov	sp,fp
  810fd4:	df000017 	ldw	fp,0(sp)
  810fd8:	dec00104 	addi	sp,sp,4
  810fdc:	f800283a 	ret

00810fe0 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  810fe0:	defff304 	addi	sp,sp,-52
  810fe4:	df000c15 	stw	fp,48(sp)
  810fe8:	df000c04 	addi	fp,sp,48
  810fec:	e13ffb15 	stw	r4,-20(fp)
  810ff0:	e17ffc15 	stw	r5,-16(fp)
  810ff4:	e1bffd15 	stw	r6,-12(fp)
  810ff8:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810ffc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  811000:	e0bffe17 	ldw	r2,-8(fp)
  811004:	1004c03a 	cmpne	r2,r2,zero
  811008:	1000021e 	bne	r2,zero,811014 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  81100c:	e03fff15 	stw	zero,-4(fp)
  811010:	00007506 	br	8111e8 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  811014:	e0bffb17 	ldw	r2,-20(fp)
  811018:	1004c03a 	cmpne	r2,r2,zero
  81101c:	1000051e 	bne	r2,zero,811034 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  811020:	e0fffe17 	ldw	r3,-8(fp)
  811024:	00801884 	movi	r2,98
  811028:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  81102c:	e03fff15 	stw	zero,-4(fp)
  811030:	00006d06 	br	8111e8 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  811034:	e0bffb17 	ldw	r2,-20(fp)
  811038:	108000cc 	andi	r2,r2,3
  81103c:	1005003a 	cmpeq	r2,r2,zero
  811040:	1000051e 	bne	r2,zero,811058 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  811044:	e0fffe17 	ldw	r3,-8(fp)
  811048:	00801884 	movi	r2,98
  81104c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  811050:	e03fff15 	stw	zero,-4(fp)
  811054:	00006406 	br	8111e8 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  811058:	e0bffc17 	ldw	r2,-16(fp)
  81105c:	108000a8 	cmpgeui	r2,r2,2
  811060:	1000051e 	bne	r2,zero,811078 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  811064:	e0fffe17 	ldw	r3,-8(fp)
  811068:	008016c4 	movi	r2,91
  81106c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  811070:	e03fff15 	stw	zero,-4(fp)
  811074:	00005c06 	br	8111e8 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  811078:	e0bffd17 	ldw	r2,-12(fp)
  81107c:	10800128 	cmpgeui	r2,r2,4
  811080:	1000051e 	bne	r2,zero,811098 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  811084:	e0fffe17 	ldw	r3,-8(fp)
  811088:	00801704 	movi	r2,92
  81108c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  811090:	e03fff15 	stw	zero,-4(fp)
  811094:	00005406 	br	8111e8 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811098:	0005303a 	rdctl	r2,status
  81109c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8110a0:	e0fff517 	ldw	r3,-44(fp)
  8110a4:	00bfff84 	movi	r2,-2
  8110a8:	1884703a 	and	r2,r3,r2
  8110ac:	1001703a 	wrctl	status,r2
  
  return context;
  8110b0:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8110b4:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  8110b8:	008020b4 	movhi	r2,130
  8110bc:	10bcc404 	addi	r2,r2,-3312
  8110c0:	10800017 	ldw	r2,0(r2)
  8110c4:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  8110c8:	008020b4 	movhi	r2,130
  8110cc:	10bcc404 	addi	r2,r2,-3312
  8110d0:	10800017 	ldw	r2,0(r2)
  8110d4:	1005003a 	cmpeq	r2,r2,zero
  8110d8:	1000081e 	bne	r2,zero,8110fc <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  8110dc:	008020b4 	movhi	r2,130
  8110e0:	10bcc404 	addi	r2,r2,-3312
  8110e4:	10800017 	ldw	r2,0(r2)
  8110e8:	10800117 	ldw	r2,4(r2)
  8110ec:	1007883a 	mov	r3,r2
  8110f0:	008020b4 	movhi	r2,130
  8110f4:	10bcc404 	addi	r2,r2,-3312
  8110f8:	10c00015 	stw	r3,0(r2)
  8110fc:	e0bff617 	ldw	r2,-40(fp)
  811100:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811104:	e0bff417 	ldw	r2,-48(fp)
  811108:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  81110c:	e0bffa17 	ldw	r2,-24(fp)
  811110:	1004c03a 	cmpne	r2,r2,zero
  811114:	1000051e 	bne	r2,zero,81112c <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  811118:	e0fffe17 	ldw	r3,-8(fp)
  81111c:	00801684 	movi	r2,90
  811120:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  811124:	e03fff15 	stw	zero,-4(fp)
  811128:	00002f06 	br	8111e8 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  81112c:	e0bffb17 	ldw	r2,-20(fp)
  811130:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  811134:	e0bffb17 	ldw	r2,-20(fp)
  811138:	1007883a 	mov	r3,r2
  81113c:	e0bffd17 	ldw	r2,-12(fp)
  811140:	1885883a 	add	r2,r3,r2
  811144:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  811148:	e03ff715 	stw	zero,-36(fp)
  81114c:	00000d06 	br	811184 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  811150:	e0fff817 	ldw	r3,-32(fp)
  811154:	e0bff917 	ldw	r2,-28(fp)
  811158:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  81115c:	e0bff917 	ldw	r2,-28(fp)
  811160:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  811164:	e0bff917 	ldw	r2,-28(fp)
  811168:	1007883a 	mov	r3,r2
  81116c:	e0bffd17 	ldw	r2,-12(fp)
  811170:	1885883a 	add	r2,r3,r2
  811174:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  811178:	e0bff717 	ldw	r2,-36(fp)
  81117c:	10800044 	addi	r2,r2,1
  811180:	e0bff715 	stw	r2,-36(fp)
  811184:	e0bffc17 	ldw	r2,-16(fp)
  811188:	10ffffc4 	addi	r3,r2,-1
  81118c:	e0bff717 	ldw	r2,-36(fp)
  811190:	10ffef36 	bltu	r2,r3,811150 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  811194:	e0bff817 	ldw	r2,-32(fp)
  811198:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  81119c:	e0fffa17 	ldw	r3,-24(fp)
  8111a0:	e0bffb17 	ldw	r2,-20(fp)
  8111a4:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  8111a8:	e0fffa17 	ldw	r3,-24(fp)
  8111ac:	e0bffb17 	ldw	r2,-20(fp)
  8111b0:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  8111b4:	e0fffa17 	ldw	r3,-24(fp)
  8111b8:	e0bffc17 	ldw	r2,-16(fp)
  8111bc:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  8111c0:	e0fffa17 	ldw	r3,-24(fp)
  8111c4:	e0bffc17 	ldw	r2,-16(fp)
  8111c8:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  8111cc:	e0fffa17 	ldw	r3,-24(fp)
  8111d0:	e0bffd17 	ldw	r2,-12(fp)
  8111d4:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  8111d8:	e0bffe17 	ldw	r2,-8(fp)
  8111dc:	10000005 	stb	zero,0(r2)
    return (pmem);
  8111e0:	e0bffa17 	ldw	r2,-24(fp)
  8111e4:	e0bfff15 	stw	r2,-4(fp)
  8111e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8111ec:	e037883a 	mov	sp,fp
  8111f0:	df000017 	ldw	fp,0(sp)
  8111f4:	dec00104 	addi	sp,sp,4
  8111f8:	f800283a 	ret

008111fc <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  8111fc:	defff704 	addi	sp,sp,-36
  811200:	df000815 	stw	fp,32(sp)
  811204:	df000804 	addi	fp,sp,32
  811208:	e13ffd15 	stw	r4,-12(fp)
  81120c:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  811210:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  811214:	e0bffe17 	ldw	r2,-8(fp)
  811218:	1004c03a 	cmpne	r2,r2,zero
  81121c:	1000021e 	bne	r2,zero,811228 <OSMemGet+0x2c>
        return ((void *)0);
  811220:	e03fff15 	stw	zero,-4(fp)
  811224:	00003106 	br	8112ec <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  811228:	e0bffd17 	ldw	r2,-12(fp)
  81122c:	1004c03a 	cmpne	r2,r2,zero
  811230:	1000051e 	bne	r2,zero,811248 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  811234:	e0fffe17 	ldw	r3,-8(fp)
  811238:	00801804 	movi	r2,96
  81123c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  811240:	e03fff15 	stw	zero,-4(fp)
  811244:	00002906 	br	8112ec <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811248:	0005303a 	rdctl	r2,status
  81124c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811250:	e0fffa17 	ldw	r3,-24(fp)
  811254:	00bfff84 	movi	r2,-2
  811258:	1884703a 	and	r2,r3,r2
  81125c:	1001703a 	wrctl	status,r2
  
  return context;
  811260:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811264:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  811268:	e0bffd17 	ldw	r2,-12(fp)
  81126c:	10800417 	ldw	r2,16(r2)
  811270:	1005003a 	cmpeq	r2,r2,zero
  811274:	1000151e 	bne	r2,zero,8112cc <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  811278:	e0bffd17 	ldw	r2,-12(fp)
  81127c:	10800117 	ldw	r2,4(r2)
  811280:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  811284:	e0bffc17 	ldw	r2,-16(fp)
  811288:	10c00017 	ldw	r3,0(r2)
  81128c:	e0bffd17 	ldw	r2,-12(fp)
  811290:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  811294:	e0bffd17 	ldw	r2,-12(fp)
  811298:	10800417 	ldw	r2,16(r2)
  81129c:	10ffffc4 	addi	r3,r2,-1
  8112a0:	e0bffd17 	ldw	r2,-12(fp)
  8112a4:	10c00415 	stw	r3,16(r2)
  8112a8:	e0bffb17 	ldw	r2,-20(fp)
  8112ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8112b0:	e0bff917 	ldw	r2,-28(fp)
  8112b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  8112b8:	e0bffe17 	ldw	r2,-8(fp)
  8112bc:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  8112c0:	e0bffc17 	ldw	r2,-16(fp)
  8112c4:	e0bfff15 	stw	r2,-4(fp)
  8112c8:	00000806 	br	8112ec <OSMemGet+0xf0>
  8112cc:	e0bffb17 	ldw	r2,-20(fp)
  8112d0:	e0bff815 	stw	r2,-32(fp)
  8112d4:	e0bff817 	ldw	r2,-32(fp)
  8112d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  8112dc:	e0fffe17 	ldw	r3,-8(fp)
  8112e0:	00801744 	movi	r2,93
  8112e4:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  8112e8:	e03fff15 	stw	zero,-4(fp)
  8112ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8112f0:	e037883a 	mov	sp,fp
  8112f4:	df000017 	ldw	fp,0(sp)
  8112f8:	dec00104 	addi	sp,sp,4
  8112fc:	f800283a 	ret

00811300 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  811300:	defff604 	addi	sp,sp,-40
  811304:	dfc00915 	stw	ra,36(sp)
  811308:	df000815 	stw	fp,32(sp)
  81130c:	df000804 	addi	fp,sp,32
  811310:	e13ffc15 	stw	r4,-16(fp)
  811314:	e17ffd15 	stw	r5,-12(fp)
  811318:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81131c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  811320:	e0bffe17 	ldw	r2,-8(fp)
  811324:	1004c03a 	cmpne	r2,r2,zero
  811328:	1000021e 	bne	r2,zero,811334 <OSMemNameGet+0x34>
        return (0);
  81132c:	e03fff15 	stw	zero,-4(fp)
  811330:	00003006 	br	8113f4 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  811334:	e0bffc17 	ldw	r2,-16(fp)
  811338:	1004c03a 	cmpne	r2,r2,zero
  81133c:	1000051e 	bne	r2,zero,811354 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  811340:	e0fffe17 	ldw	r3,-8(fp)
  811344:	00801804 	movi	r2,96
  811348:	18800005 	stb	r2,0(r3)
        return (0);
  81134c:	e03fff15 	stw	zero,-4(fp)
  811350:	00002806 	br	8113f4 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  811354:	e0bffd17 	ldw	r2,-12(fp)
  811358:	1004c03a 	cmpne	r2,r2,zero
  81135c:	1000051e 	bne	r2,zero,811374 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  811360:	e0fffe17 	ldw	r3,-8(fp)
  811364:	00800304 	movi	r2,12
  811368:	18800005 	stb	r2,0(r3)
        return (0);
  81136c:	e03fff15 	stw	zero,-4(fp)
  811370:	00002006 	br	8113f4 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  811374:	008020b4 	movhi	r2,130
  811378:	10bcc904 	addi	r2,r2,-3292
  81137c:	10800003 	ldbu	r2,0(r2)
  811380:	10803fcc 	andi	r2,r2,255
  811384:	1005003a 	cmpeq	r2,r2,zero
  811388:	1000051e 	bne	r2,zero,8113a0 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  81138c:	e0fffe17 	ldw	r3,-8(fp)
  811390:	00800444 	movi	r2,17
  811394:	18800005 	stb	r2,0(r3)
        return (0);
  811398:	e03fff15 	stw	zero,-4(fp)
  81139c:	00001506 	br	8113f4 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8113a0:	0005303a 	rdctl	r2,status
  8113a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8113a8:	e0fff917 	ldw	r3,-28(fp)
  8113ac:	00bfff84 	movi	r2,-2
  8113b0:	1884703a 	and	r2,r3,r2
  8113b4:	1001703a 	wrctl	status,r2
  
  return context;
  8113b8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8113bc:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  8113c0:	e0bffc17 	ldw	r2,-16(fp)
  8113c4:	11400504 	addi	r5,r2,20
  8113c8:	e13ffd17 	ldw	r4,-12(fp)
  8113cc:	080ef740 	call	80ef74 <OS_StrCopy>
  8113d0:	e0bffb05 	stb	r2,-20(fp)
  8113d4:	e0bffa17 	ldw	r2,-24(fp)
  8113d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8113dc:	e0bff817 	ldw	r2,-32(fp)
  8113e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8113e4:	e0bffe17 	ldw	r2,-8(fp)
  8113e8:	10000005 	stb	zero,0(r2)
    return (len);
  8113ec:	e0bffb03 	ldbu	r2,-20(fp)
  8113f0:	e0bfff15 	stw	r2,-4(fp)
  8113f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8113f8:	e037883a 	mov	sp,fp
  8113fc:	dfc00117 	ldw	ra,4(sp)
  811400:	df000017 	ldw	fp,0(sp)
  811404:	dec00204 	addi	sp,sp,8
  811408:	f800283a 	ret

0081140c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  81140c:	defff604 	addi	sp,sp,-40
  811410:	dfc00915 	stw	ra,36(sp)
  811414:	df000815 	stw	fp,32(sp)
  811418:	df000804 	addi	fp,sp,32
  81141c:	e13ffd15 	stw	r4,-12(fp)
  811420:	e17ffe15 	stw	r5,-8(fp)
  811424:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811428:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  81142c:	e0bfff17 	ldw	r2,-4(fp)
  811430:	1005003a 	cmpeq	r2,r2,zero
  811434:	1000381e 	bne	r2,zero,811518 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  811438:	e0bffd17 	ldw	r2,-12(fp)
  81143c:	1004c03a 	cmpne	r2,r2,zero
  811440:	1000041e 	bne	r2,zero,811454 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  811444:	e0ffff17 	ldw	r3,-4(fp)
  811448:	00801804 	movi	r2,96
  81144c:	18800005 	stb	r2,0(r3)
        return;
  811450:	00003106 	br	811518 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  811454:	e0bffe17 	ldw	r2,-8(fp)
  811458:	1004c03a 	cmpne	r2,r2,zero
  81145c:	1000041e 	bne	r2,zero,811470 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  811460:	e0ffff17 	ldw	r3,-4(fp)
  811464:	00800304 	movi	r2,12
  811468:	18800005 	stb	r2,0(r3)
        return;
  81146c:	00002a06 	br	811518 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  811470:	008020b4 	movhi	r2,130
  811474:	10bcc904 	addi	r2,r2,-3292
  811478:	10800003 	ldbu	r2,0(r2)
  81147c:	10803fcc 	andi	r2,r2,255
  811480:	1005003a 	cmpeq	r2,r2,zero
  811484:	1000041e 	bne	r2,zero,811498 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  811488:	e0ffff17 	ldw	r3,-4(fp)
  81148c:	00800484 	movi	r2,18
  811490:	18800005 	stb	r2,0(r3)
        return;
  811494:	00002006 	br	811518 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811498:	0005303a 	rdctl	r2,status
  81149c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8114a0:	e0fffa17 	ldw	r3,-24(fp)
  8114a4:	00bfff84 	movi	r2,-2
  8114a8:	1884703a 	and	r2,r3,r2
  8114ac:	1001703a 	wrctl	status,r2
  
  return context;
  8114b0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  8114b4:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  8114b8:	e13ffe17 	ldw	r4,-8(fp)
  8114bc:	080eff40 	call	80eff4 <OS_StrLen>
  8114c0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  8114c4:	e0bffc03 	ldbu	r2,-16(fp)
  8114c8:	10800830 	cmpltui	r2,r2,32
  8114cc:	1000081e 	bne	r2,zero,8114f0 <OSMemNameSet+0xe4>
  8114d0:	e0bffb17 	ldw	r2,-20(fp)
  8114d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8114d8:	e0bff917 	ldw	r2,-28(fp)
  8114dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  8114e0:	e0ffff17 	ldw	r3,-4(fp)
  8114e4:	008018c4 	movi	r2,99
  8114e8:	18800005 	stb	r2,0(r3)
        return;
  8114ec:	00000a06 	br	811518 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  8114f0:	e0bffd17 	ldw	r2,-12(fp)
  8114f4:	11000504 	addi	r4,r2,20
  8114f8:	e17ffe17 	ldw	r5,-8(fp)
  8114fc:	080ef740 	call	80ef74 <OS_StrCopy>
  811500:	e0bffb17 	ldw	r2,-20(fp)
  811504:	e0bff815 	stw	r2,-32(fp)
  811508:	e0bff817 	ldw	r2,-32(fp)
  81150c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  811510:	e0bfff17 	ldw	r2,-4(fp)
  811514:	10000005 	stb	zero,0(r2)
}
  811518:	e037883a 	mov	sp,fp
  81151c:	dfc00117 	ldw	ra,4(sp)
  811520:	df000017 	ldw	fp,0(sp)
  811524:	dec00204 	addi	sp,sp,8
  811528:	f800283a 	ret

0081152c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  81152c:	defff804 	addi	sp,sp,-32
  811530:	df000715 	stw	fp,28(sp)
  811534:	df000704 	addi	fp,sp,28
  811538:	e13ffd15 	stw	r4,-12(fp)
  81153c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811540:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  811544:	e0bffd17 	ldw	r2,-12(fp)
  811548:	1004c03a 	cmpne	r2,r2,zero
  81154c:	1000031e 	bne	r2,zero,81155c <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  811550:	00801804 	movi	r2,96
  811554:	e0bfff15 	stw	r2,-4(fp)
  811558:	00002b06 	br	811608 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  81155c:	e0bffe17 	ldw	r2,-8(fp)
  811560:	1004c03a 	cmpne	r2,r2,zero
  811564:	1000031e 	bne	r2,zero,811574 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  811568:	008017c4 	movi	r2,95
  81156c:	e0bfff15 	stw	r2,-4(fp)
  811570:	00002506 	br	811608 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811574:	0005303a 	rdctl	r2,status
  811578:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81157c:	e0fffb17 	ldw	r3,-20(fp)
  811580:	00bfff84 	movi	r2,-2
  811584:	1884703a 	and	r2,r3,r2
  811588:	1001703a 	wrctl	status,r2
  
  return context;
  81158c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811590:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  811594:	e0bffd17 	ldw	r2,-12(fp)
  811598:	10c00417 	ldw	r3,16(r2)
  81159c:	e0bffd17 	ldw	r2,-12(fp)
  8115a0:	10800317 	ldw	r2,12(r2)
  8115a4:	18800736 	bltu	r3,r2,8115c4 <OSMemPut+0x98>
  8115a8:	e0bffc17 	ldw	r2,-16(fp)
  8115ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8115b0:	e0bffa17 	ldw	r2,-24(fp)
  8115b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  8115b8:	00801784 	movi	r2,94
  8115bc:	e0bfff15 	stw	r2,-4(fp)
  8115c0:	00001106 	br	811608 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  8115c4:	e0fffe17 	ldw	r3,-8(fp)
  8115c8:	e0bffd17 	ldw	r2,-12(fp)
  8115cc:	10800117 	ldw	r2,4(r2)
  8115d0:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  8115d4:	e0fffd17 	ldw	r3,-12(fp)
  8115d8:	e0bffe17 	ldw	r2,-8(fp)
  8115dc:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  8115e0:	e0bffd17 	ldw	r2,-12(fp)
  8115e4:	10800417 	ldw	r2,16(r2)
  8115e8:	10c00044 	addi	r3,r2,1
  8115ec:	e0bffd17 	ldw	r2,-12(fp)
  8115f0:	10c00415 	stw	r3,16(r2)
  8115f4:	e0bffc17 	ldw	r2,-16(fp)
  8115f8:	e0bff915 	stw	r2,-28(fp)
  8115fc:	e0bff917 	ldw	r2,-28(fp)
  811600:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  811604:	e03fff15 	stw	zero,-4(fp)
  811608:	e0bfff17 	ldw	r2,-4(fp)
}
  81160c:	e037883a 	mov	sp,fp
  811610:	df000017 	ldw	fp,0(sp)
  811614:	dec00104 	addi	sp,sp,4
  811618:	f800283a 	ret

0081161c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  81161c:	defff904 	addi	sp,sp,-28
  811620:	df000615 	stw	fp,24(sp)
  811624:	df000604 	addi	fp,sp,24
  811628:	e13ffd15 	stw	r4,-12(fp)
  81162c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811630:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  811634:	e0bffd17 	ldw	r2,-12(fp)
  811638:	1004c03a 	cmpne	r2,r2,zero
  81163c:	1000031e 	bne	r2,zero,81164c <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  811640:	00801804 	movi	r2,96
  811644:	e0bfff15 	stw	r2,-4(fp)
  811648:	00002e06 	br	811704 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  81164c:	e0bffe17 	ldw	r2,-8(fp)
  811650:	1004c03a 	cmpne	r2,r2,zero
  811654:	1000031e 	bne	r2,zero,811664 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  811658:	00801844 	movi	r2,97
  81165c:	e0bfff15 	stw	r2,-4(fp)
  811660:	00002806 	br	811704 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811664:	0005303a 	rdctl	r2,status
  811668:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81166c:	e0fffb17 	ldw	r3,-20(fp)
  811670:	00bfff84 	movi	r2,-2
  811674:	1884703a 	and	r2,r3,r2
  811678:	1001703a 	wrctl	status,r2
  
  return context;
  81167c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811680:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  811684:	e0bffd17 	ldw	r2,-12(fp)
  811688:	10c00017 	ldw	r3,0(r2)
  81168c:	e0bffe17 	ldw	r2,-8(fp)
  811690:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  811694:	e0bffd17 	ldw	r2,-12(fp)
  811698:	10c00117 	ldw	r3,4(r2)
  81169c:	e0bffe17 	ldw	r2,-8(fp)
  8116a0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  8116a4:	e0bffd17 	ldw	r2,-12(fp)
  8116a8:	10c00217 	ldw	r3,8(r2)
  8116ac:	e0bffe17 	ldw	r2,-8(fp)
  8116b0:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  8116b4:	e0bffd17 	ldw	r2,-12(fp)
  8116b8:	10c00317 	ldw	r3,12(r2)
  8116bc:	e0bffe17 	ldw	r2,-8(fp)
  8116c0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  8116c4:	e0bffd17 	ldw	r2,-12(fp)
  8116c8:	10c00417 	ldw	r3,16(r2)
  8116cc:	e0bffe17 	ldw	r2,-8(fp)
  8116d0:	10c00415 	stw	r3,16(r2)
  8116d4:	e0bffc17 	ldw	r2,-16(fp)
  8116d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8116dc:	e0bffa17 	ldw	r2,-24(fp)
  8116e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  8116e4:	e0bffe17 	ldw	r2,-8(fp)
  8116e8:	10c00317 	ldw	r3,12(r2)
  8116ec:	e0bffe17 	ldw	r2,-8(fp)
  8116f0:	10800417 	ldw	r2,16(r2)
  8116f4:	1887c83a 	sub	r3,r3,r2
  8116f8:	e0bffe17 	ldw	r2,-8(fp)
  8116fc:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  811700:	e03fff15 	stw	zero,-4(fp)
  811704:	e0bfff17 	ldw	r2,-4(fp)
}
  811708:	e037883a 	mov	sp,fp
  81170c:	df000017 	ldw	fp,0(sp)
  811710:	dec00104 	addi	sp,sp,4
  811714:	f800283a 	ret

00811718 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  811718:	defffc04 	addi	sp,sp,-16
  81171c:	dfc00315 	stw	ra,12(sp)
  811720:	df000215 	stw	fp,8(sp)
  811724:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  811728:	010020f4 	movhi	r4,131
  81172c:	210f0104 	addi	r4,r4,15364
  811730:	01430c04 	movi	r5,3120
  811734:	080ed700 	call	80ed70 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  811738:	008020f4 	movhi	r2,131
  81173c:	108f0104 	addi	r2,r2,15364
  811740:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  811744:	e03ffe0d 	sth	zero,-8(fp)
  811748:	00001306 	br	811798 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  81174c:	e0bffe0b 	ldhu	r2,-8(fp)
  811750:	10800d24 	muli	r2,r2,52
  811754:	1007883a 	mov	r3,r2
  811758:	008020f4 	movhi	r2,131
  81175c:	108f0e04 	addi	r2,r2,15416
  811760:	1887883a 	add	r3,r3,r2
  811764:	e0bfff17 	ldw	r2,-4(fp)
  811768:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  81176c:	e0ffff17 	ldw	r3,-4(fp)
  811770:	00800fc4 	movi	r2,63
  811774:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  811778:	e0bfff17 	ldw	r2,-4(fp)
  81177c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  811780:	e0bfff17 	ldw	r2,-4(fp)
  811784:	10800d04 	addi	r2,r2,52
  811788:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  81178c:	e0bffe0b 	ldhu	r2,-8(fp)
  811790:	10800044 	addi	r2,r2,1
  811794:	e0bffe0d 	sth	r2,-8(fp)
  811798:	e0bffe0b 	ldhu	r2,-8(fp)
  81179c:	10800ef0 	cmpltui	r2,r2,59
  8117a0:	103fea1e 	bne	r2,zero,81174c <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  8117a4:	e0bfff17 	ldw	r2,-4(fp)
  8117a8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  8117ac:	e0ffff17 	ldw	r3,-4(fp)
  8117b0:	00800fc4 	movi	r2,63
  8117b4:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  8117b8:	e0bfff17 	ldw	r2,-4(fp)
  8117bc:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  8117c0:	00c020b4 	movhi	r3,130
  8117c4:	18fcc404 	addi	r3,r3,-3312
  8117c8:	008020f4 	movhi	r2,131
  8117cc:	108f0104 	addi	r2,r2,15364
  8117d0:	18800015 	stw	r2,0(r3)
#endif
}
  8117d4:	e037883a 	mov	sp,fp
  8117d8:	dfc00117 	ldw	ra,4(sp)
  8117dc:	df000017 	ldw	fp,0(sp)
  8117e0:	dec00204 	addi	sp,sp,8
  8117e4:	f800283a 	ret

008117e8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  8117e8:	defff704 	addi	sp,sp,-36
  8117ec:	df000815 	stw	fp,32(sp)
  8117f0:	df000804 	addi	fp,sp,32
  8117f4:	e13ffd15 	stw	r4,-12(fp)
  8117f8:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8117fc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  811800:	e0bffe17 	ldw	r2,-8(fp)
  811804:	1004c03a 	cmpne	r2,r2,zero
  811808:	1000021e 	bne	r2,zero,811814 <OSQAccept+0x2c>
        return ((void *)0);
  81180c:	e03fff15 	stw	zero,-4(fp)
  811810:	00004506 	br	811928 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  811814:	e0bffd17 	ldw	r2,-12(fp)
  811818:	1004c03a 	cmpne	r2,r2,zero
  81181c:	1000051e 	bne	r2,zero,811834 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  811820:	e0fffe17 	ldw	r3,-8(fp)
  811824:	00800104 	movi	r2,4
  811828:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81182c:	e03fff15 	stw	zero,-4(fp)
  811830:	00003d06 	br	811928 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  811834:	e0bffd17 	ldw	r2,-12(fp)
  811838:	10800003 	ldbu	r2,0(r2)
  81183c:	10803fcc 	andi	r2,r2,255
  811840:	108000a0 	cmpeqi	r2,r2,2
  811844:	1000051e 	bne	r2,zero,81185c <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  811848:	e0fffe17 	ldw	r3,-8(fp)
  81184c:	00800044 	movi	r2,1
  811850:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  811854:	e03fff15 	stw	zero,-4(fp)
  811858:	00003306 	br	811928 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81185c:	0005303a 	rdctl	r2,status
  811860:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811864:	e0fff917 	ldw	r3,-28(fp)
  811868:	00bfff84 	movi	r2,-2
  81186c:	1884703a 	and	r2,r3,r2
  811870:	1001703a 	wrctl	status,r2
  
  return context;
  811874:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  811878:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  81187c:	e0bffd17 	ldw	r2,-12(fp)
  811880:	10800117 	ldw	r2,4(r2)
  811884:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  811888:	e0bffb17 	ldw	r2,-20(fp)
  81188c:	1080058b 	ldhu	r2,22(r2)
  811890:	10bfffcc 	andi	r2,r2,65535
  811894:	1005003a 	cmpeq	r2,r2,zero
  811898:	1000191e 	bne	r2,zero,811900 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  81189c:	e0bffb17 	ldw	r2,-20(fp)
  8118a0:	10c00417 	ldw	r3,16(r2)
  8118a4:	18800017 	ldw	r2,0(r3)
  8118a8:	e0bffc15 	stw	r2,-16(fp)
  8118ac:	18c00104 	addi	r3,r3,4
  8118b0:	e0bffb17 	ldw	r2,-20(fp)
  8118b4:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  8118b8:	e0bffb17 	ldw	r2,-20(fp)
  8118bc:	1080058b 	ldhu	r2,22(r2)
  8118c0:	10bfffc4 	addi	r2,r2,-1
  8118c4:	1007883a 	mov	r3,r2
  8118c8:	e0bffb17 	ldw	r2,-20(fp)
  8118cc:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  8118d0:	e0bffb17 	ldw	r2,-20(fp)
  8118d4:	10c00417 	ldw	r3,16(r2)
  8118d8:	e0bffb17 	ldw	r2,-20(fp)
  8118dc:	10800217 	ldw	r2,8(r2)
  8118e0:	1880041e 	bne	r3,r2,8118f4 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  8118e4:	e0bffb17 	ldw	r2,-20(fp)
  8118e8:	10c00117 	ldw	r3,4(r2)
  8118ec:	e0bffb17 	ldw	r2,-20(fp)
  8118f0:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  8118f4:	e0bffe17 	ldw	r2,-8(fp)
  8118f8:	10000005 	stb	zero,0(r2)
  8118fc:	00000406 	br	811910 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  811900:	e0fffe17 	ldw	r3,-8(fp)
  811904:	008007c4 	movi	r2,31
  811908:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  81190c:	e03ffc15 	stw	zero,-16(fp)
  811910:	e0bffa17 	ldw	r2,-24(fp)
  811914:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811918:	e0bff817 	ldw	r2,-32(fp)
  81191c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  811920:	e0bffc17 	ldw	r2,-16(fp)
  811924:	e0bfff15 	stw	r2,-4(fp)
  811928:	e0bfff17 	ldw	r2,-4(fp)
}
  81192c:	e037883a 	mov	sp,fp
  811930:	df000017 	ldw	fp,0(sp)
  811934:	dec00104 	addi	sp,sp,4
  811938:	f800283a 	ret

0081193c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  81193c:	defff304 	addi	sp,sp,-52
  811940:	dfc00c15 	stw	ra,48(sp)
  811944:	df000b15 	stw	fp,44(sp)
  811948:	df000b04 	addi	fp,sp,44
  81194c:	e13ffd15 	stw	r4,-12(fp)
  811950:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811954:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  811958:	008020b4 	movhi	r2,130
  81195c:	10bcc904 	addi	r2,r2,-3292
  811960:	10800003 	ldbu	r2,0(r2)
  811964:	10803fcc 	andi	r2,r2,255
  811968:	1005003a 	cmpeq	r2,r2,zero
  81196c:	1000021e 	bne	r2,zero,811978 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  811970:	e03fff15 	stw	zero,-4(fp)
  811974:	00007006 	br	811b38 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811978:	0005303a 	rdctl	r2,status
  81197c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811980:	e0fff917 	ldw	r3,-28(fp)
  811984:	00bfff84 	movi	r2,-2
  811988:	1884703a 	and	r2,r3,r2
  81198c:	1001703a 	wrctl	status,r2
  
  return context;
  811990:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  811994:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  811998:	008020b4 	movhi	r2,130
  81199c:	10bcc804 	addi	r2,r2,-3296
  8119a0:	10800017 	ldw	r2,0(r2)
  8119a4:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  8119a8:	008020b4 	movhi	r2,130
  8119ac:	10bcc804 	addi	r2,r2,-3296
  8119b0:	10800017 	ldw	r2,0(r2)
  8119b4:	1005003a 	cmpeq	r2,r2,zero
  8119b8:	1000081e 	bne	r2,zero,8119dc <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  8119bc:	008020b4 	movhi	r2,130
  8119c0:	10bcc804 	addi	r2,r2,-3296
  8119c4:	10800017 	ldw	r2,0(r2)
  8119c8:	10800117 	ldw	r2,4(r2)
  8119cc:	1007883a 	mov	r3,r2
  8119d0:	008020b4 	movhi	r2,130
  8119d4:	10bcc804 	addi	r2,r2,-3296
  8119d8:	10c00015 	stw	r3,0(r2)
  8119dc:	e0bffa17 	ldw	r2,-24(fp)
  8119e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8119e4:	e0bff817 	ldw	r2,-32(fp)
  8119e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  8119ec:	e0bffc17 	ldw	r2,-16(fp)
  8119f0:	1005003a 	cmpeq	r2,r2,zero
  8119f4:	10004e1e 	bne	r2,zero,811b30 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8119f8:	0005303a 	rdctl	r2,status
  8119fc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811a00:	e0fff717 	ldw	r3,-36(fp)
  811a04:	00bfff84 	movi	r2,-2
  811a08:	1884703a 	and	r2,r3,r2
  811a0c:	1001703a 	wrctl	status,r2
  
  return context;
  811a10:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  811a14:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  811a18:	008020b4 	movhi	r2,130
  811a1c:	10bcc604 	addi	r2,r2,-3304
  811a20:	10800017 	ldw	r2,0(r2)
  811a24:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  811a28:	e0bffb17 	ldw	r2,-20(fp)
  811a2c:	1005003a 	cmpeq	r2,r2,zero
  811a30:	1000311e 	bne	r2,zero,811af8 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  811a34:	008020b4 	movhi	r2,130
  811a38:	10bcc604 	addi	r2,r2,-3304
  811a3c:	10800017 	ldw	r2,0(r2)
  811a40:	10c00017 	ldw	r3,0(r2)
  811a44:	008020b4 	movhi	r2,130
  811a48:	10bcc604 	addi	r2,r2,-3304
  811a4c:	10c00015 	stw	r3,0(r2)
  811a50:	e0bffa17 	ldw	r2,-24(fp)
  811a54:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811a58:	e0bff617 	ldw	r2,-40(fp)
  811a5c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  811a60:	e0fffb17 	ldw	r3,-20(fp)
  811a64:	e0bffd17 	ldw	r2,-12(fp)
  811a68:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  811a6c:	e0bffe0b 	ldhu	r2,-8(fp)
  811a70:	1085883a 	add	r2,r2,r2
  811a74:	1085883a 	add	r2,r2,r2
  811a78:	1007883a 	mov	r3,r2
  811a7c:	e0bffd17 	ldw	r2,-12(fp)
  811a80:	1887883a 	add	r3,r3,r2
  811a84:	e0bffb17 	ldw	r2,-20(fp)
  811a88:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  811a8c:	e0fffb17 	ldw	r3,-20(fp)
  811a90:	e0bffd17 	ldw	r2,-12(fp)
  811a94:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  811a98:	e0fffb17 	ldw	r3,-20(fp)
  811a9c:	e0bffd17 	ldw	r2,-12(fp)
  811aa0:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  811aa4:	e0fffb17 	ldw	r3,-20(fp)
  811aa8:	e0bffe0b 	ldhu	r2,-8(fp)
  811aac:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  811ab0:	e0bffb17 	ldw	r2,-20(fp)
  811ab4:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  811ab8:	e0fffc17 	ldw	r3,-16(fp)
  811abc:	00800084 	movi	r2,2
  811ac0:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  811ac4:	e0bffc17 	ldw	r2,-16(fp)
  811ac8:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  811acc:	e0fffc17 	ldw	r3,-16(fp)
  811ad0:	e0bffb17 	ldw	r2,-20(fp)
  811ad4:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  811ad8:	e0fffc17 	ldw	r3,-16(fp)
  811adc:	00800fc4 	movi	r2,63
  811ae0:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  811ae4:	e0bffc17 	ldw	r2,-16(fp)
  811ae8:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  811aec:	e13ffc17 	ldw	r4,-16(fp)
  811af0:	080e9a40 	call	80e9a4 <OS_EventWaitListInit>
  811af4:	00000e06 	br	811b30 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  811af8:	008020b4 	movhi	r2,130
  811afc:	10bcc804 	addi	r2,r2,-3296
  811b00:	10c00017 	ldw	r3,0(r2)
  811b04:	e0bffc17 	ldw	r2,-16(fp)
  811b08:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  811b0c:	00c020b4 	movhi	r3,130
  811b10:	18fcc804 	addi	r3,r3,-3296
  811b14:	e0bffc17 	ldw	r2,-16(fp)
  811b18:	18800015 	stw	r2,0(r3)
  811b1c:	e0bffa17 	ldw	r2,-24(fp)
  811b20:	e0bff515 	stw	r2,-44(fp)
  811b24:	e0bff517 	ldw	r2,-44(fp)
  811b28:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  811b2c:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  811b30:	e0bffc17 	ldw	r2,-16(fp)
  811b34:	e0bfff15 	stw	r2,-4(fp)
  811b38:	e0bfff17 	ldw	r2,-4(fp)
}
  811b3c:	e037883a 	mov	sp,fp
  811b40:	dfc00117 	ldw	ra,4(sp)
  811b44:	df000017 	ldw	fp,0(sp)
  811b48:	dec00204 	addi	sp,sp,8
  811b4c:	f800283a 	ret

00811b50 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  811b50:	defff004 	addi	sp,sp,-64
  811b54:	dfc00f15 	stw	ra,60(sp)
  811b58:	df000e15 	stw	fp,56(sp)
  811b5c:	df000e04 	addi	fp,sp,56
  811b60:	e13ffb15 	stw	r4,-20(fp)
  811b64:	e1bffd15 	stw	r6,-12(fp)
  811b68:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  811b6c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  811b70:	e0bffd17 	ldw	r2,-12(fp)
  811b74:	1004c03a 	cmpne	r2,r2,zero
  811b78:	1000031e 	bne	r2,zero,811b88 <OSQDel+0x38>
        return (pevent);
  811b7c:	e0bffb17 	ldw	r2,-20(fp)
  811b80:	e0bfff15 	stw	r2,-4(fp)
  811b84:	0000ac06 	br	811e38 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  811b88:	e0bffb17 	ldw	r2,-20(fp)
  811b8c:	1004c03a 	cmpne	r2,r2,zero
  811b90:	1000061e 	bne	r2,zero,811bac <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  811b94:	e0fffd17 	ldw	r3,-12(fp)
  811b98:	00800104 	movi	r2,4
  811b9c:	18800005 	stb	r2,0(r3)
        return (pevent);
  811ba0:	e0fffb17 	ldw	r3,-20(fp)
  811ba4:	e0ffff15 	stw	r3,-4(fp)
  811ba8:	0000a306 	br	811e38 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  811bac:	e0bffb17 	ldw	r2,-20(fp)
  811bb0:	10800003 	ldbu	r2,0(r2)
  811bb4:	10803fcc 	andi	r2,r2,255
  811bb8:	108000a0 	cmpeqi	r2,r2,2
  811bbc:	1000061e 	bne	r2,zero,811bd8 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  811bc0:	e0fffd17 	ldw	r3,-12(fp)
  811bc4:	00800044 	movi	r2,1
  811bc8:	18800005 	stb	r2,0(r3)
        return (pevent);
  811bcc:	e0bffb17 	ldw	r2,-20(fp)
  811bd0:	e0bfff15 	stw	r2,-4(fp)
  811bd4:	00009806 	br	811e38 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  811bd8:	008020b4 	movhi	r2,130
  811bdc:	10bcc904 	addi	r2,r2,-3292
  811be0:	10800003 	ldbu	r2,0(r2)
  811be4:	10803fcc 	andi	r2,r2,255
  811be8:	1005003a 	cmpeq	r2,r2,zero
  811bec:	1000061e 	bne	r2,zero,811c08 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  811bf0:	e0fffd17 	ldw	r3,-12(fp)
  811bf4:	008003c4 	movi	r2,15
  811bf8:	18800005 	stb	r2,0(r3)
        return (pevent);
  811bfc:	e0fffb17 	ldw	r3,-20(fp)
  811c00:	e0ffff15 	stw	r3,-4(fp)
  811c04:	00008c06 	br	811e38 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811c08:	0005303a 	rdctl	r2,status
  811c0c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811c10:	e0fff617 	ldw	r3,-40(fp)
  811c14:	00bfff84 	movi	r2,-2
  811c18:	1884703a 	and	r2,r3,r2
  811c1c:	1001703a 	wrctl	status,r2
  
  return context;
  811c20:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  811c24:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  811c28:	e0bffb17 	ldw	r2,-20(fp)
  811c2c:	10800283 	ldbu	r2,10(r2)
  811c30:	10803fcc 	andi	r2,r2,255
  811c34:	1005003a 	cmpeq	r2,r2,zero
  811c38:	1000031e 	bne	r2,zero,811c48 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  811c3c:	00800044 	movi	r2,1
  811c40:	e0bffa05 	stb	r2,-24(fp)
  811c44:	00000106 	br	811c4c <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  811c48:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  811c4c:	e0bffc03 	ldbu	r2,-16(fp)
  811c50:	e0bffe15 	stw	r2,-8(fp)
  811c54:	e0fffe17 	ldw	r3,-8(fp)
  811c58:	1805003a 	cmpeq	r2,r3,zero
  811c5c:	1000041e 	bne	r2,zero,811c70 <OSQDel+0x120>
  811c60:	e0fffe17 	ldw	r3,-8(fp)
  811c64:	18800060 	cmpeqi	r2,r3,1
  811c68:	1000391e 	bne	r2,zero,811d50 <OSQDel+0x200>
  811c6c:	00006706 	br	811e0c <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  811c70:	e0bffa03 	ldbu	r2,-24(fp)
  811c74:	1004c03a 	cmpne	r2,r2,zero
  811c78:	1000261e 	bne	r2,zero,811d14 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  811c7c:	e0fffb17 	ldw	r3,-20(fp)
  811c80:	00800fc4 	movi	r2,63
  811c84:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  811c88:	e0bffb17 	ldw	r2,-20(fp)
  811c8c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  811c90:	e0bffb17 	ldw	r2,-20(fp)
  811c94:	10800117 	ldw	r2,4(r2)
  811c98:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  811c9c:	008020b4 	movhi	r2,130
  811ca0:	10bcc604 	addi	r2,r2,-3304
  811ca4:	10c00017 	ldw	r3,0(r2)
  811ca8:	e0bff817 	ldw	r2,-32(fp)
  811cac:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  811cb0:	00c020b4 	movhi	r3,130
  811cb4:	18fcc604 	addi	r3,r3,-3304
  811cb8:	e0bff817 	ldw	r2,-32(fp)
  811cbc:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  811cc0:	e0bffb17 	ldw	r2,-20(fp)
  811cc4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  811cc8:	008020b4 	movhi	r2,130
  811ccc:	10bcc804 	addi	r2,r2,-3296
  811cd0:	10c00017 	ldw	r3,0(r2)
  811cd4:	e0bffb17 	ldw	r2,-20(fp)
  811cd8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  811cdc:	e0bffb17 	ldw	r2,-20(fp)
  811ce0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  811ce4:	00c020b4 	movhi	r3,130
  811ce8:	18fcc804 	addi	r3,r3,-3296
  811cec:	e0bffb17 	ldw	r2,-20(fp)
  811cf0:	18800015 	stw	r2,0(r3)
  811cf4:	e0bff717 	ldw	r2,-36(fp)
  811cf8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811cfc:	e0bff517 	ldw	r2,-44(fp)
  811d00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  811d04:	e0bffd17 	ldw	r2,-12(fp)
  811d08:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  811d0c:	e03ff915 	stw	zero,-28(fp)
  811d10:	00004706 	br	811e30 <OSQDel+0x2e0>
  811d14:	e0bff717 	ldw	r2,-36(fp)
  811d18:	e0bff415 	stw	r2,-48(fp)
  811d1c:	e0bff417 	ldw	r2,-48(fp)
  811d20:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  811d24:	e0fffd17 	ldw	r3,-12(fp)
  811d28:	00801244 	movi	r2,73
  811d2c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  811d30:	e0bffb17 	ldw	r2,-20(fp)
  811d34:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  811d38:	00003d06 	br	811e30 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  811d3c:	e13ffb17 	ldw	r4,-20(fp)
  811d40:	000b883a 	mov	r5,zero
  811d44:	01800104 	movi	r6,4
  811d48:	000f883a 	mov	r7,zero
  811d4c:	080e3f00 	call	80e3f0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  811d50:	e0bffb17 	ldw	r2,-20(fp)
  811d54:	10800283 	ldbu	r2,10(r2)
  811d58:	10803fcc 	andi	r2,r2,255
  811d5c:	1004c03a 	cmpne	r2,r2,zero
  811d60:	103ff61e 	bne	r2,zero,811d3c <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  811d64:	e0fffb17 	ldw	r3,-20(fp)
  811d68:	00800fc4 	movi	r2,63
  811d6c:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  811d70:	e0bffb17 	ldw	r2,-20(fp)
  811d74:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  811d78:	e0bffb17 	ldw	r2,-20(fp)
  811d7c:	10800117 	ldw	r2,4(r2)
  811d80:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  811d84:	008020b4 	movhi	r2,130
  811d88:	10bcc604 	addi	r2,r2,-3304
  811d8c:	10c00017 	ldw	r3,0(r2)
  811d90:	e0bff817 	ldw	r2,-32(fp)
  811d94:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  811d98:	00c020b4 	movhi	r3,130
  811d9c:	18fcc604 	addi	r3,r3,-3304
  811da0:	e0bff817 	ldw	r2,-32(fp)
  811da4:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  811da8:	e0bffb17 	ldw	r2,-20(fp)
  811dac:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  811db0:	008020b4 	movhi	r2,130
  811db4:	10bcc804 	addi	r2,r2,-3296
  811db8:	10c00017 	ldw	r3,0(r2)
  811dbc:	e0bffb17 	ldw	r2,-20(fp)
  811dc0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  811dc4:	e0bffb17 	ldw	r2,-20(fp)
  811dc8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  811dcc:	00c020b4 	movhi	r3,130
  811dd0:	18fcc804 	addi	r3,r3,-3296
  811dd4:	e0bffb17 	ldw	r2,-20(fp)
  811dd8:	18800015 	stw	r2,0(r3)
  811ddc:	e0bff717 	ldw	r2,-36(fp)
  811de0:	e0bff315 	stw	r2,-52(fp)
  811de4:	e0bff317 	ldw	r2,-52(fp)
  811de8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  811dec:	e0bffa03 	ldbu	r2,-24(fp)
  811df0:	10800058 	cmpnei	r2,r2,1
  811df4:	1000011e 	bne	r2,zero,811dfc <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  811df8:	080ee300 	call	80ee30 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  811dfc:	e0bffd17 	ldw	r2,-12(fp)
  811e00:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  811e04:	e03ff915 	stw	zero,-28(fp)
             break;
  811e08:	00000906 	br	811e30 <OSQDel+0x2e0>
  811e0c:	e0bff717 	ldw	r2,-36(fp)
  811e10:	e0bff215 	stw	r2,-56(fp)
  811e14:	e0bff217 	ldw	r2,-56(fp)
  811e18:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  811e1c:	e0fffd17 	ldw	r3,-12(fp)
  811e20:	008001c4 	movi	r2,7
  811e24:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  811e28:	e0bffb17 	ldw	r2,-20(fp)
  811e2c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  811e30:	e0bff917 	ldw	r2,-28(fp)
  811e34:	e0bfff15 	stw	r2,-4(fp)
  811e38:	e0bfff17 	ldw	r2,-4(fp)
}
  811e3c:	e037883a 	mov	sp,fp
  811e40:	dfc00117 	ldw	ra,4(sp)
  811e44:	df000017 	ldw	fp,0(sp)
  811e48:	dec00204 	addi	sp,sp,8
  811e4c:	f800283a 	ret

00811e50 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  811e50:	defff904 	addi	sp,sp,-28
  811e54:	df000615 	stw	fp,24(sp)
  811e58:	df000604 	addi	fp,sp,24
  811e5c:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  811e60:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  811e64:	e0bffe17 	ldw	r2,-8(fp)
  811e68:	1004c03a 	cmpne	r2,r2,zero
  811e6c:	1000031e 	bne	r2,zero,811e7c <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  811e70:	00800104 	movi	r2,4
  811e74:	e0bfff15 	stw	r2,-4(fp)
  811e78:	00002206 	br	811f04 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  811e7c:	e0bffe17 	ldw	r2,-8(fp)
  811e80:	10800003 	ldbu	r2,0(r2)
  811e84:	10803fcc 	andi	r2,r2,255
  811e88:	108000a0 	cmpeqi	r2,r2,2
  811e8c:	1000031e 	bne	r2,zero,811e9c <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  811e90:	00800044 	movi	r2,1
  811e94:	e0bfff15 	stw	r2,-4(fp)
  811e98:	00001a06 	br	811f04 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811e9c:	0005303a 	rdctl	r2,status
  811ea0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811ea4:	e0fffb17 	ldw	r3,-20(fp)
  811ea8:	00bfff84 	movi	r2,-2
  811eac:	1884703a 	and	r2,r3,r2
  811eb0:	1001703a 	wrctl	status,r2
  
  return context;
  811eb4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811eb8:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  811ebc:	e0bffe17 	ldw	r2,-8(fp)
  811ec0:	10800117 	ldw	r2,4(r2)
  811ec4:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  811ec8:	e0bffd17 	ldw	r2,-12(fp)
  811ecc:	10c00117 	ldw	r3,4(r2)
  811ed0:	e0bffd17 	ldw	r2,-12(fp)
  811ed4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  811ed8:	e0bffd17 	ldw	r2,-12(fp)
  811edc:	10c00117 	ldw	r3,4(r2)
  811ee0:	e0bffd17 	ldw	r2,-12(fp)
  811ee4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  811ee8:	e0bffd17 	ldw	r2,-12(fp)
  811eec:	1000058d 	sth	zero,22(r2)
  811ef0:	e0bffc17 	ldw	r2,-16(fp)
  811ef4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811ef8:	e0bffa17 	ldw	r2,-24(fp)
  811efc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  811f00:	e03fff15 	stw	zero,-4(fp)
  811f04:	e0bfff17 	ldw	r2,-4(fp)
}
  811f08:	e037883a 	mov	sp,fp
  811f0c:	df000017 	ldw	fp,0(sp)
  811f10:	dec00104 	addi	sp,sp,4
  811f14:	f800283a 	ret

00811f18 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  811f18:	defff104 	addi	sp,sp,-60
  811f1c:	dfc00e15 	stw	ra,56(sp)
  811f20:	df000d15 	stw	fp,52(sp)
  811f24:	df000d04 	addi	fp,sp,52
  811f28:	e13ffb15 	stw	r4,-20(fp)
  811f2c:	e1bffd15 	stw	r6,-12(fp)
  811f30:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811f34:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  811f38:	e0bffd17 	ldw	r2,-12(fp)
  811f3c:	1004c03a 	cmpne	r2,r2,zero
  811f40:	1000021e 	bne	r2,zero,811f4c <OSQPend+0x34>
        return ((void *)0);
  811f44:	e03fff15 	stw	zero,-4(fp)
  811f48:	0000b506 	br	812220 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  811f4c:	e0bffb17 	ldw	r2,-20(fp)
  811f50:	1004c03a 	cmpne	r2,r2,zero
  811f54:	1000051e 	bne	r2,zero,811f6c <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  811f58:	e0fffd17 	ldw	r3,-12(fp)
  811f5c:	00800104 	movi	r2,4
  811f60:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  811f64:	e03fff15 	stw	zero,-4(fp)
  811f68:	0000ad06 	br	812220 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  811f6c:	e0bffb17 	ldw	r2,-20(fp)
  811f70:	10800003 	ldbu	r2,0(r2)
  811f74:	10803fcc 	andi	r2,r2,255
  811f78:	108000a0 	cmpeqi	r2,r2,2
  811f7c:	1000051e 	bne	r2,zero,811f94 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  811f80:	e0fffd17 	ldw	r3,-12(fp)
  811f84:	00800044 	movi	r2,1
  811f88:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  811f8c:	e03fff15 	stw	zero,-4(fp)
  811f90:	0000a306 	br	812220 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  811f94:	008020b4 	movhi	r2,130
  811f98:	10bcc904 	addi	r2,r2,-3292
  811f9c:	10800003 	ldbu	r2,0(r2)
  811fa0:	10803fcc 	andi	r2,r2,255
  811fa4:	1005003a 	cmpeq	r2,r2,zero
  811fa8:	1000051e 	bne	r2,zero,811fc0 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  811fac:	e0fffd17 	ldw	r3,-12(fp)
  811fb0:	00800084 	movi	r2,2
  811fb4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  811fb8:	e03fff15 	stw	zero,-4(fp)
  811fbc:	00009806 	br	812220 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  811fc0:	008020b4 	movhi	r2,130
  811fc4:	10bcbb04 	addi	r2,r2,-3348
  811fc8:	10800003 	ldbu	r2,0(r2)
  811fcc:	10803fcc 	andi	r2,r2,255
  811fd0:	1005003a 	cmpeq	r2,r2,zero
  811fd4:	1000051e 	bne	r2,zero,811fec <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  811fd8:	e0fffd17 	ldw	r3,-12(fp)
  811fdc:	00800344 	movi	r2,13
  811fe0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  811fe4:	e03fff15 	stw	zero,-4(fp)
  811fe8:	00008d06 	br	812220 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811fec:	0005303a 	rdctl	r2,status
  811ff0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811ff4:	e0fff717 	ldw	r3,-36(fp)
  811ff8:	00bfff84 	movi	r2,-2
  811ffc:	1884703a 	and	r2,r3,r2
  812000:	1001703a 	wrctl	status,r2
  
  return context;
  812004:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  812008:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  81200c:	e0bffb17 	ldw	r2,-20(fp)
  812010:	10800117 	ldw	r2,4(r2)
  812014:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  812018:	e0bff917 	ldw	r2,-28(fp)
  81201c:	1080058b 	ldhu	r2,22(r2)
  812020:	10bfffcc 	andi	r2,r2,65535
  812024:	1005003a 	cmpeq	r2,r2,zero
  812028:	10001f1e 	bne	r2,zero,8120a8 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  81202c:	e0bff917 	ldw	r2,-28(fp)
  812030:	10c00417 	ldw	r3,16(r2)
  812034:	18800017 	ldw	r2,0(r3)
  812038:	e0bffa15 	stw	r2,-24(fp)
  81203c:	18c00104 	addi	r3,r3,4
  812040:	e0bff917 	ldw	r2,-28(fp)
  812044:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  812048:	e0bff917 	ldw	r2,-28(fp)
  81204c:	1080058b 	ldhu	r2,22(r2)
  812050:	10bfffc4 	addi	r2,r2,-1
  812054:	1007883a 	mov	r3,r2
  812058:	e0bff917 	ldw	r2,-28(fp)
  81205c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  812060:	e0bff917 	ldw	r2,-28(fp)
  812064:	10c00417 	ldw	r3,16(r2)
  812068:	e0bff917 	ldw	r2,-28(fp)
  81206c:	10800217 	ldw	r2,8(r2)
  812070:	1880041e 	bne	r3,r2,812084 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  812074:	e0bff917 	ldw	r2,-28(fp)
  812078:	10c00117 	ldw	r3,4(r2)
  81207c:	e0bff917 	ldw	r2,-28(fp)
  812080:	10c00415 	stw	r3,16(r2)
  812084:	e0bff817 	ldw	r2,-32(fp)
  812088:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81208c:	e0bff617 	ldw	r2,-40(fp)
  812090:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  812094:	e0bffd17 	ldw	r2,-12(fp)
  812098:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  81209c:	e0bffa17 	ldw	r2,-24(fp)
  8120a0:	e0bfff15 	stw	r2,-4(fp)
  8120a4:	00005e06 	br	812220 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  8120a8:	008020b4 	movhi	r2,130
  8120ac:	10bcca04 	addi	r2,r2,-3288
  8120b0:	10c00017 	ldw	r3,0(r2)
  8120b4:	008020b4 	movhi	r2,130
  8120b8:	10bcca04 	addi	r2,r2,-3288
  8120bc:	10800017 	ldw	r2,0(r2)
  8120c0:	10800c03 	ldbu	r2,48(r2)
  8120c4:	10800114 	ori	r2,r2,4
  8120c8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8120cc:	008020b4 	movhi	r2,130
  8120d0:	10bcca04 	addi	r2,r2,-3288
  8120d4:	10800017 	ldw	r2,0(r2)
  8120d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  8120dc:	008020b4 	movhi	r2,130
  8120e0:	10bcca04 	addi	r2,r2,-3288
  8120e4:	10c00017 	ldw	r3,0(r2)
  8120e8:	e0bffc0b 	ldhu	r2,-16(fp)
  8120ec:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  8120f0:	e13ffb17 	ldw	r4,-20(fp)
  8120f4:	080e5840 	call	80e584 <OS_EventTaskWait>
  8120f8:	e0bff817 	ldw	r2,-32(fp)
  8120fc:	e0bff515 	stw	r2,-44(fp)
  812100:	e0bff517 	ldw	r2,-44(fp)
  812104:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  812108:	080ee300 	call	80ee30 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81210c:	0005303a 	rdctl	r2,status
  812110:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812114:	e0fff417 	ldw	r3,-48(fp)
  812118:	00bfff84 	movi	r2,-2
  81211c:	1884703a 	and	r2,r3,r2
  812120:	1001703a 	wrctl	status,r2
  
  return context;
  812124:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  812128:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  81212c:	008020b4 	movhi	r2,130
  812130:	10bcca04 	addi	r2,r2,-3288
  812134:	10800017 	ldw	r2,0(r2)
  812138:	10800c43 	ldbu	r2,49(r2)
  81213c:	10803fcc 	andi	r2,r2,255
  812140:	e0bffe15 	stw	r2,-8(fp)
  812144:	e0fffe17 	ldw	r3,-8(fp)
  812148:	1805003a 	cmpeq	r2,r3,zero
  81214c:	1000041e 	bne	r2,zero,812160 <OSQPend+0x248>
  812150:	e0fffe17 	ldw	r3,-8(fp)
  812154:	188000a0 	cmpeqi	r2,r3,2
  812158:	1000091e 	bne	r2,zero,812180 <OSQPend+0x268>
  81215c:	00000d06 	br	812194 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  812160:	008020b4 	movhi	r2,130
  812164:	10bcca04 	addi	r2,r2,-3288
  812168:	10800017 	ldw	r2,0(r2)
  81216c:	10800917 	ldw	r2,36(r2)
  812170:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  812174:	e0bffd17 	ldw	r2,-12(fp)
  812178:	10000005 	stb	zero,0(r2)
             break;
  81217c:	00000e06 	br	8121b8 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  812180:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  812184:	e0fffd17 	ldw	r3,-12(fp)
  812188:	00800384 	movi	r2,14
  81218c:	18800005 	stb	r2,0(r3)
             break;
  812190:	00000906 	br	8121b8 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  812194:	008020b4 	movhi	r2,130
  812198:	10bcca04 	addi	r2,r2,-3288
  81219c:	11000017 	ldw	r4,0(r2)
  8121a0:	e17ffb17 	ldw	r5,-20(fp)
  8121a4:	080e7e80 	call	80e7e8 <OS_EventTaskRemove>
             pmsg = (void *)0;
  8121a8:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  8121ac:	e0fffd17 	ldw	r3,-12(fp)
  8121b0:	00800284 	movi	r2,10
  8121b4:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  8121b8:	008020b4 	movhi	r2,130
  8121bc:	10bcca04 	addi	r2,r2,-3288
  8121c0:	10800017 	ldw	r2,0(r2)
  8121c4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  8121c8:	008020b4 	movhi	r2,130
  8121cc:	10bcca04 	addi	r2,r2,-3288
  8121d0:	10800017 	ldw	r2,0(r2)
  8121d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  8121d8:	008020b4 	movhi	r2,130
  8121dc:	10bcca04 	addi	r2,r2,-3288
  8121e0:	10800017 	ldw	r2,0(r2)
  8121e4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8121e8:	008020b4 	movhi	r2,130
  8121ec:	10bcca04 	addi	r2,r2,-3288
  8121f0:	10800017 	ldw	r2,0(r2)
  8121f4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  8121f8:	008020b4 	movhi	r2,130
  8121fc:	10bcca04 	addi	r2,r2,-3288
  812200:	10800017 	ldw	r2,0(r2)
  812204:	10000915 	stw	zero,36(r2)
  812208:	e0bff817 	ldw	r2,-32(fp)
  81220c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812210:	e0bff317 	ldw	r2,-52(fp)
  812214:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  812218:	e0bffa17 	ldw	r2,-24(fp)
  81221c:	e0bfff15 	stw	r2,-4(fp)
  812220:	e0bfff17 	ldw	r2,-4(fp)
}
  812224:	e037883a 	mov	sp,fp
  812228:	dfc00117 	ldw	ra,4(sp)
  81222c:	df000017 	ldw	fp,0(sp)
  812230:	dec00204 	addi	sp,sp,8
  812234:	f800283a 	ret

00812238 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  812238:	defff504 	addi	sp,sp,-44
  81223c:	dfc00a15 	stw	ra,40(sp)
  812240:	df000915 	stw	fp,36(sp)
  812244:	df000904 	addi	fp,sp,36
  812248:	e13ffc15 	stw	r4,-16(fp)
  81224c:	e1bffe15 	stw	r6,-8(fp)
  812250:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  812254:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  812258:	e0bffe17 	ldw	r2,-8(fp)
  81225c:	1004c03a 	cmpne	r2,r2,zero
  812260:	1000021e 	bne	r2,zero,81226c <OSQPendAbort+0x34>
        return (0);
  812264:	e03fff15 	stw	zero,-4(fp)
  812268:	00004c06 	br	81239c <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  81226c:	e0bffc17 	ldw	r2,-16(fp)
  812270:	1004c03a 	cmpne	r2,r2,zero
  812274:	1000051e 	bne	r2,zero,81228c <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  812278:	e0fffe17 	ldw	r3,-8(fp)
  81227c:	00800104 	movi	r2,4
  812280:	18800005 	stb	r2,0(r3)
        return (0);
  812284:	e03fff15 	stw	zero,-4(fp)
  812288:	00004406 	br	81239c <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  81228c:	e0bffc17 	ldw	r2,-16(fp)
  812290:	10800003 	ldbu	r2,0(r2)
  812294:	10803fcc 	andi	r2,r2,255
  812298:	108000a0 	cmpeqi	r2,r2,2
  81229c:	1000051e 	bne	r2,zero,8122b4 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  8122a0:	e0fffe17 	ldw	r3,-8(fp)
  8122a4:	00800044 	movi	r2,1
  8122a8:	18800005 	stb	r2,0(r3)
        return (0);
  8122ac:	e03fff15 	stw	zero,-4(fp)
  8122b0:	00003a06 	br	81239c <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8122b4:	0005303a 	rdctl	r2,status
  8122b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8122bc:	e0fff917 	ldw	r3,-28(fp)
  8122c0:	00bfff84 	movi	r2,-2
  8122c4:	1884703a 	and	r2,r3,r2
  8122c8:	1001703a 	wrctl	status,r2
  
  return context;
  8122cc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8122d0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  8122d4:	e0bffc17 	ldw	r2,-16(fp)
  8122d8:	10800283 	ldbu	r2,10(r2)
  8122dc:	10803fcc 	andi	r2,r2,255
  8122e0:	1005003a 	cmpeq	r2,r2,zero
  8122e4:	1000261e 	bne	r2,zero,812380 <OSQPendAbort+0x148>
        nbr_tasks = 0;
  8122e8:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  8122ec:	e0bffd03 	ldbu	r2,-12(fp)
  8122f0:	10800060 	cmpeqi	r2,r2,1
  8122f4:	1000091e 	bne	r2,zero,81231c <OSQPendAbort+0xe4>
  8122f8:	00000e06 	br	812334 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  8122fc:	e13ffc17 	ldw	r4,-16(fp)
  812300:	000b883a 	mov	r5,zero
  812304:	01800104 	movi	r6,4
  812308:	01c00084 	movi	r7,2
  81230c:	080e3f00 	call	80e3f0 <OS_EventTaskRdy>
                     nbr_tasks++;
  812310:	e0bffb03 	ldbu	r2,-20(fp)
  812314:	10800044 	addi	r2,r2,1
  812318:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  81231c:	e0bffc17 	ldw	r2,-16(fp)
  812320:	10800283 	ldbu	r2,10(r2)
  812324:	10803fcc 	andi	r2,r2,255
  812328:	1004c03a 	cmpne	r2,r2,zero
  81232c:	103ff31e 	bne	r2,zero,8122fc <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  812330:	00000806 	br	812354 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  812334:	e13ffc17 	ldw	r4,-16(fp)
  812338:	000b883a 	mov	r5,zero
  81233c:	01800104 	movi	r6,4
  812340:	01c00084 	movi	r7,2
  812344:	080e3f00 	call	80e3f0 <OS_EventTaskRdy>
                 nbr_tasks++;
  812348:	e0bffb03 	ldbu	r2,-20(fp)
  81234c:	10800044 	addi	r2,r2,1
  812350:	e0bffb05 	stb	r2,-20(fp)
  812354:	e0bffa17 	ldw	r2,-24(fp)
  812358:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81235c:	e0bff817 	ldw	r2,-32(fp)
  812360:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  812364:	080ee300 	call	80ee30 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  812368:	e0fffe17 	ldw	r3,-8(fp)
  81236c:	00800384 	movi	r2,14
  812370:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  812374:	e0bffb03 	ldbu	r2,-20(fp)
  812378:	e0bfff15 	stw	r2,-4(fp)
  81237c:	00000706 	br	81239c <OSQPendAbort+0x164>
  812380:	e0bffa17 	ldw	r2,-24(fp)
  812384:	e0bff715 	stw	r2,-36(fp)
  812388:	e0bff717 	ldw	r2,-36(fp)
  81238c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  812390:	e0bffe17 	ldw	r2,-8(fp)
  812394:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  812398:	e03fff15 	stw	zero,-4(fp)
  81239c:	e0bfff17 	ldw	r2,-4(fp)
}
  8123a0:	e037883a 	mov	sp,fp
  8123a4:	dfc00117 	ldw	ra,4(sp)
  8123a8:	df000017 	ldw	fp,0(sp)
  8123ac:	dec00204 	addi	sp,sp,8
  8123b0:	f800283a 	ret

008123b4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  8123b4:	defff504 	addi	sp,sp,-44
  8123b8:	dfc00a15 	stw	ra,40(sp)
  8123bc:	df000915 	stw	fp,36(sp)
  8123c0:	df000904 	addi	fp,sp,36
  8123c4:	e13ffd15 	stw	r4,-12(fp)
  8123c8:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8123cc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  8123d0:	e0bffd17 	ldw	r2,-12(fp)
  8123d4:	1004c03a 	cmpne	r2,r2,zero
  8123d8:	1000031e 	bne	r2,zero,8123e8 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  8123dc:	00800104 	movi	r2,4
  8123e0:	e0bfff15 	stw	r2,-4(fp)
  8123e4:	00004d06 	br	81251c <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  8123e8:	e0bffd17 	ldw	r2,-12(fp)
  8123ec:	10800003 	ldbu	r2,0(r2)
  8123f0:	10803fcc 	andi	r2,r2,255
  8123f4:	108000a0 	cmpeqi	r2,r2,2
  8123f8:	1000031e 	bne	r2,zero,812408 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  8123fc:	00800044 	movi	r2,1
  812400:	e0bfff15 	stw	r2,-4(fp)
  812404:	00004506 	br	81251c <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812408:	0005303a 	rdctl	r2,status
  81240c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812410:	e0fffa17 	ldw	r3,-24(fp)
  812414:	00bfff84 	movi	r2,-2
  812418:	1884703a 	and	r2,r3,r2
  81241c:	1001703a 	wrctl	status,r2
  
  return context;
  812420:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  812424:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  812428:	e0bffd17 	ldw	r2,-12(fp)
  81242c:	10800283 	ldbu	r2,10(r2)
  812430:	10803fcc 	andi	r2,r2,255
  812434:	1005003a 	cmpeq	r2,r2,zero
  812438:	10000c1e 	bne	r2,zero,81246c <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81243c:	e13ffd17 	ldw	r4,-12(fp)
  812440:	e17ffe17 	ldw	r5,-8(fp)
  812444:	01800104 	movi	r6,4
  812448:	000f883a 	mov	r7,zero
  81244c:	080e3f00 	call	80e3f0 <OS_EventTaskRdy>
  812450:	e0bffb17 	ldw	r2,-20(fp)
  812454:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812458:	e0bff917 	ldw	r2,-28(fp)
  81245c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  812460:	080ee300 	call	80ee30 <OS_Sched>
        return (OS_ERR_NONE);
  812464:	e03fff15 	stw	zero,-4(fp)
  812468:	00002c06 	br	81251c <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  81246c:	e0bffd17 	ldw	r2,-12(fp)
  812470:	10800117 	ldw	r2,4(r2)
  812474:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  812478:	e0bffc17 	ldw	r2,-16(fp)
  81247c:	10c0058b 	ldhu	r3,22(r2)
  812480:	e0bffc17 	ldw	r2,-16(fp)
  812484:	1080050b 	ldhu	r2,20(r2)
  812488:	18ffffcc 	andi	r3,r3,65535
  81248c:	10bfffcc 	andi	r2,r2,65535
  812490:	18800736 	bltu	r3,r2,8124b0 <OSQPost+0xfc>
  812494:	e0bffb17 	ldw	r2,-20(fp)
  812498:	e0bff815 	stw	r2,-32(fp)
  81249c:	e0bff817 	ldw	r2,-32(fp)
  8124a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8124a4:	00800784 	movi	r2,30
  8124a8:	e0bfff15 	stw	r2,-4(fp)
  8124ac:	00001b06 	br	81251c <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  8124b0:	e0bffc17 	ldw	r2,-16(fp)
  8124b4:	10c00317 	ldw	r3,12(r2)
  8124b8:	e0bffe17 	ldw	r2,-8(fp)
  8124bc:	18800015 	stw	r2,0(r3)
  8124c0:	18c00104 	addi	r3,r3,4
  8124c4:	e0bffc17 	ldw	r2,-16(fp)
  8124c8:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  8124cc:	e0bffc17 	ldw	r2,-16(fp)
  8124d0:	1080058b 	ldhu	r2,22(r2)
  8124d4:	10800044 	addi	r2,r2,1
  8124d8:	1007883a 	mov	r3,r2
  8124dc:	e0bffc17 	ldw	r2,-16(fp)
  8124e0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  8124e4:	e0bffc17 	ldw	r2,-16(fp)
  8124e8:	10c00317 	ldw	r3,12(r2)
  8124ec:	e0bffc17 	ldw	r2,-16(fp)
  8124f0:	10800217 	ldw	r2,8(r2)
  8124f4:	1880041e 	bne	r3,r2,812508 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  8124f8:	e0bffc17 	ldw	r2,-16(fp)
  8124fc:	10c00117 	ldw	r3,4(r2)
  812500:	e0bffc17 	ldw	r2,-16(fp)
  812504:	10c00315 	stw	r3,12(r2)
  812508:	e0bffb17 	ldw	r2,-20(fp)
  81250c:	e0bff715 	stw	r2,-36(fp)
  812510:	e0bff717 	ldw	r2,-36(fp)
  812514:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  812518:	e03fff15 	stw	zero,-4(fp)
  81251c:	e0bfff17 	ldw	r2,-4(fp)
}
  812520:	e037883a 	mov	sp,fp
  812524:	dfc00117 	ldw	ra,4(sp)
  812528:	df000017 	ldw	fp,0(sp)
  81252c:	dec00204 	addi	sp,sp,8
  812530:	f800283a 	ret

00812534 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  812534:	defff504 	addi	sp,sp,-44
  812538:	dfc00a15 	stw	ra,40(sp)
  81253c:	df000915 	stw	fp,36(sp)
  812540:	df000904 	addi	fp,sp,36
  812544:	e13ffd15 	stw	r4,-12(fp)
  812548:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81254c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  812550:	e0bffd17 	ldw	r2,-12(fp)
  812554:	1004c03a 	cmpne	r2,r2,zero
  812558:	1000031e 	bne	r2,zero,812568 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  81255c:	00800104 	movi	r2,4
  812560:	e0bfff15 	stw	r2,-4(fp)
  812564:	00004f06 	br	8126a4 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  812568:	e0bffd17 	ldw	r2,-12(fp)
  81256c:	10800003 	ldbu	r2,0(r2)
  812570:	10803fcc 	andi	r2,r2,255
  812574:	108000a0 	cmpeqi	r2,r2,2
  812578:	1000031e 	bne	r2,zero,812588 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  81257c:	00800044 	movi	r2,1
  812580:	e0bfff15 	stw	r2,-4(fp)
  812584:	00004706 	br	8126a4 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812588:	0005303a 	rdctl	r2,status
  81258c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812590:	e0fffa17 	ldw	r3,-24(fp)
  812594:	00bfff84 	movi	r2,-2
  812598:	1884703a 	and	r2,r3,r2
  81259c:	1001703a 	wrctl	status,r2
  
  return context;
  8125a0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  8125a4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  8125a8:	e0bffd17 	ldw	r2,-12(fp)
  8125ac:	10800283 	ldbu	r2,10(r2)
  8125b0:	10803fcc 	andi	r2,r2,255
  8125b4:	1005003a 	cmpeq	r2,r2,zero
  8125b8:	10000c1e 	bne	r2,zero,8125ec <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8125bc:	e13ffd17 	ldw	r4,-12(fp)
  8125c0:	e17ffe17 	ldw	r5,-8(fp)
  8125c4:	01800104 	movi	r6,4
  8125c8:	000f883a 	mov	r7,zero
  8125cc:	080e3f00 	call	80e3f0 <OS_EventTaskRdy>
  8125d0:	e0bffb17 	ldw	r2,-20(fp)
  8125d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8125d8:	e0bff917 	ldw	r2,-28(fp)
  8125dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  8125e0:	080ee300 	call	80ee30 <OS_Sched>
        return (OS_ERR_NONE);
  8125e4:	e03fff15 	stw	zero,-4(fp)
  8125e8:	00002e06 	br	8126a4 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  8125ec:	e0bffd17 	ldw	r2,-12(fp)
  8125f0:	10800117 	ldw	r2,4(r2)
  8125f4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  8125f8:	e0bffc17 	ldw	r2,-16(fp)
  8125fc:	10c0058b 	ldhu	r3,22(r2)
  812600:	e0bffc17 	ldw	r2,-16(fp)
  812604:	1080050b 	ldhu	r2,20(r2)
  812608:	18ffffcc 	andi	r3,r3,65535
  81260c:	10bfffcc 	andi	r2,r2,65535
  812610:	18800736 	bltu	r3,r2,812630 <OSQPostFront+0xfc>
  812614:	e0bffb17 	ldw	r2,-20(fp)
  812618:	e0bff815 	stw	r2,-32(fp)
  81261c:	e0bff817 	ldw	r2,-32(fp)
  812620:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  812624:	00800784 	movi	r2,30
  812628:	e0bfff15 	stw	r2,-4(fp)
  81262c:	00001d06 	br	8126a4 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  812630:	e0bffc17 	ldw	r2,-16(fp)
  812634:	10c00417 	ldw	r3,16(r2)
  812638:	e0bffc17 	ldw	r2,-16(fp)
  81263c:	10800117 	ldw	r2,4(r2)
  812640:	1880041e 	bne	r3,r2,812654 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  812644:	e0bffc17 	ldw	r2,-16(fp)
  812648:	10c00217 	ldw	r3,8(r2)
  81264c:	e0bffc17 	ldw	r2,-16(fp)
  812650:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  812654:	e0bffc17 	ldw	r2,-16(fp)
  812658:	10800417 	ldw	r2,16(r2)
  81265c:	10ffff04 	addi	r3,r2,-4
  812660:	e0bffc17 	ldw	r2,-16(fp)
  812664:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  812668:	e0bffc17 	ldw	r2,-16(fp)
  81266c:	10c00417 	ldw	r3,16(r2)
  812670:	e0bffe17 	ldw	r2,-8(fp)
  812674:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  812678:	e0bffc17 	ldw	r2,-16(fp)
  81267c:	1080058b 	ldhu	r2,22(r2)
  812680:	10800044 	addi	r2,r2,1
  812684:	1007883a 	mov	r3,r2
  812688:	e0bffc17 	ldw	r2,-16(fp)
  81268c:	10c0058d 	sth	r3,22(r2)
  812690:	e0bffb17 	ldw	r2,-20(fp)
  812694:	e0bff715 	stw	r2,-36(fp)
  812698:	e0bff717 	ldw	r2,-36(fp)
  81269c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8126a0:	e03fff15 	stw	zero,-4(fp)
  8126a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8126a8:	e037883a 	mov	sp,fp
  8126ac:	dfc00117 	ldw	ra,4(sp)
  8126b0:	df000017 	ldw	fp,0(sp)
  8126b4:	dec00204 	addi	sp,sp,8
  8126b8:	f800283a 	ret

008126bc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  8126bc:	defff404 	addi	sp,sp,-48
  8126c0:	dfc00b15 	stw	ra,44(sp)
  8126c4:	df000a15 	stw	fp,40(sp)
  8126c8:	df000a04 	addi	fp,sp,40
  8126cc:	e13ffc15 	stw	r4,-16(fp)
  8126d0:	e17ffd15 	stw	r5,-12(fp)
  8126d4:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8126d8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8126dc:	e0bffc17 	ldw	r2,-16(fp)
  8126e0:	1004c03a 	cmpne	r2,r2,zero
  8126e4:	1000031e 	bne	r2,zero,8126f4 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  8126e8:	00800104 	movi	r2,4
  8126ec:	e0bfff15 	stw	r2,-4(fp)
  8126f0:	00007906 	br	8128d8 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  8126f4:	e0bffc17 	ldw	r2,-16(fp)
  8126f8:	10800003 	ldbu	r2,0(r2)
  8126fc:	10803fcc 	andi	r2,r2,255
  812700:	108000a0 	cmpeqi	r2,r2,2
  812704:	1000031e 	bne	r2,zero,812714 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  812708:	00800044 	movi	r2,1
  81270c:	e0bfff15 	stw	r2,-4(fp)
  812710:	00007106 	br	8128d8 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812714:	0005303a 	rdctl	r2,status
  812718:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81271c:	e0fff917 	ldw	r3,-28(fp)
  812720:	00bfff84 	movi	r2,-2
  812724:	1884703a 	and	r2,r3,r2
  812728:	1001703a 	wrctl	status,r2
  
  return context;
  81272c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  812730:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  812734:	e0bffc17 	ldw	r2,-16(fp)
  812738:	10800283 	ldbu	r2,10(r2)
  81273c:	10803fcc 	andi	r2,r2,255
  812740:	1005003a 	cmpeq	r2,r2,zero
  812744:	1000211e 	bne	r2,zero,8127cc <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  812748:	e0bffe03 	ldbu	r2,-8(fp)
  81274c:	1080004c 	andi	r2,r2,1
  812750:	10803fcc 	andi	r2,r2,255
  812754:	1005003a 	cmpeq	r2,r2,zero
  812758:	10000c1e 	bne	r2,zero,81278c <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  81275c:	00000506 	br	812774 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  812760:	e13ffc17 	ldw	r4,-16(fp)
  812764:	e17ffd17 	ldw	r5,-12(fp)
  812768:	01800104 	movi	r6,4
  81276c:	000f883a 	mov	r7,zero
  812770:	080e3f00 	call	80e3f0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  812774:	e0bffc17 	ldw	r2,-16(fp)
  812778:	10800283 	ldbu	r2,10(r2)
  81277c:	10803fcc 	andi	r2,r2,255
  812780:	1004c03a 	cmpne	r2,r2,zero
  812784:	103ff61e 	bne	r2,zero,812760 <OSQPostOpt+0xa4>
  812788:	00000506 	br	8127a0 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  81278c:	e13ffc17 	ldw	r4,-16(fp)
  812790:	e17ffd17 	ldw	r5,-12(fp)
  812794:	01800104 	movi	r6,4
  812798:	000f883a 	mov	r7,zero
  81279c:	080e3f00 	call	80e3f0 <OS_EventTaskRdy>
  8127a0:	e0bffa17 	ldw	r2,-24(fp)
  8127a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8127a8:	e0bff817 	ldw	r2,-32(fp)
  8127ac:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  8127b0:	e0bffe03 	ldbu	r2,-8(fp)
  8127b4:	1080010c 	andi	r2,r2,4
  8127b8:	1004c03a 	cmpne	r2,r2,zero
  8127bc:	1000011e 	bne	r2,zero,8127c4 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  8127c0:	080ee300 	call	80ee30 <OS_Sched>
        }
        return (OS_ERR_NONE);
  8127c4:	e03fff15 	stw	zero,-4(fp)
  8127c8:	00004306 	br	8128d8 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  8127cc:	e0bffc17 	ldw	r2,-16(fp)
  8127d0:	10800117 	ldw	r2,4(r2)
  8127d4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  8127d8:	e0bffb17 	ldw	r2,-20(fp)
  8127dc:	10c0058b 	ldhu	r3,22(r2)
  8127e0:	e0bffb17 	ldw	r2,-20(fp)
  8127e4:	1080050b 	ldhu	r2,20(r2)
  8127e8:	18ffffcc 	andi	r3,r3,65535
  8127ec:	10bfffcc 	andi	r2,r2,65535
  8127f0:	18800736 	bltu	r3,r2,812810 <OSQPostOpt+0x154>
  8127f4:	e0bffa17 	ldw	r2,-24(fp)
  8127f8:	e0bff715 	stw	r2,-36(fp)
  8127fc:	e0bff717 	ldw	r2,-36(fp)
  812800:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  812804:	00800784 	movi	r2,30
  812808:	e0bfff15 	stw	r2,-4(fp)
  81280c:	00003206 	br	8128d8 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  812810:	e0bffe03 	ldbu	r2,-8(fp)
  812814:	1080008c 	andi	r2,r2,2
  812818:	1005003a 	cmpeq	r2,r2,zero
  81281c:	1000131e 	bne	r2,zero,81286c <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  812820:	e0bffb17 	ldw	r2,-20(fp)
  812824:	10c00417 	ldw	r3,16(r2)
  812828:	e0bffb17 	ldw	r2,-20(fp)
  81282c:	10800117 	ldw	r2,4(r2)
  812830:	1880041e 	bne	r3,r2,812844 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  812834:	e0bffb17 	ldw	r2,-20(fp)
  812838:	10c00217 	ldw	r3,8(r2)
  81283c:	e0bffb17 	ldw	r2,-20(fp)
  812840:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  812844:	e0bffb17 	ldw	r2,-20(fp)
  812848:	10800417 	ldw	r2,16(r2)
  81284c:	10ffff04 	addi	r3,r2,-4
  812850:	e0bffb17 	ldw	r2,-20(fp)
  812854:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  812858:	e0bffb17 	ldw	r2,-20(fp)
  81285c:	10c00417 	ldw	r3,16(r2)
  812860:	e0bffd17 	ldw	r2,-12(fp)
  812864:	18800015 	stw	r2,0(r3)
  812868:	00001006 	br	8128ac <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  81286c:	e0bffb17 	ldw	r2,-20(fp)
  812870:	10c00317 	ldw	r3,12(r2)
  812874:	e0bffd17 	ldw	r2,-12(fp)
  812878:	18800015 	stw	r2,0(r3)
  81287c:	18c00104 	addi	r3,r3,4
  812880:	e0bffb17 	ldw	r2,-20(fp)
  812884:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  812888:	e0bffb17 	ldw	r2,-20(fp)
  81288c:	10c00317 	ldw	r3,12(r2)
  812890:	e0bffb17 	ldw	r2,-20(fp)
  812894:	10800217 	ldw	r2,8(r2)
  812898:	1880041e 	bne	r3,r2,8128ac <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  81289c:	e0bffb17 	ldw	r2,-20(fp)
  8128a0:	10c00117 	ldw	r3,4(r2)
  8128a4:	e0bffb17 	ldw	r2,-20(fp)
  8128a8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  8128ac:	e0bffb17 	ldw	r2,-20(fp)
  8128b0:	1080058b 	ldhu	r2,22(r2)
  8128b4:	10800044 	addi	r2,r2,1
  8128b8:	1007883a 	mov	r3,r2
  8128bc:	e0bffb17 	ldw	r2,-20(fp)
  8128c0:	10c0058d 	sth	r3,22(r2)
  8128c4:	e0bffa17 	ldw	r2,-24(fp)
  8128c8:	e0bff615 	stw	r2,-40(fp)
  8128cc:	e0bff617 	ldw	r2,-40(fp)
  8128d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8128d4:	e03fff15 	stw	zero,-4(fp)
  8128d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8128dc:	e037883a 	mov	sp,fp
  8128e0:	dfc00117 	ldw	ra,4(sp)
  8128e4:	df000017 	ldw	fp,0(sp)
  8128e8:	dec00204 	addi	sp,sp,8
  8128ec:	f800283a 	ret

008128f0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  8128f0:	defff504 	addi	sp,sp,-44
  8128f4:	df000a15 	stw	fp,40(sp)
  8128f8:	df000a04 	addi	fp,sp,40
  8128fc:	e13ffd15 	stw	r4,-12(fp)
  812900:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  812904:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  812908:	e0bffd17 	ldw	r2,-12(fp)
  81290c:	1004c03a 	cmpne	r2,r2,zero
  812910:	1000031e 	bne	r2,zero,812920 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  812914:	00800104 	movi	r2,4
  812918:	e0bfff15 	stw	r2,-4(fp)
  81291c:	00004f06 	br	812a5c <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  812920:	e0bffe17 	ldw	r2,-8(fp)
  812924:	1004c03a 	cmpne	r2,r2,zero
  812928:	1000031e 	bne	r2,zero,812938 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  81292c:	00800244 	movi	r2,9
  812930:	e0bfff15 	stw	r2,-4(fp)
  812934:	00004906 	br	812a5c <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  812938:	e0bffd17 	ldw	r2,-12(fp)
  81293c:	10800003 	ldbu	r2,0(r2)
  812940:	10803fcc 	andi	r2,r2,255
  812944:	108000a0 	cmpeqi	r2,r2,2
  812948:	1000031e 	bne	r2,zero,812958 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  81294c:	00800044 	movi	r2,1
  812950:	e0bfff15 	stw	r2,-4(fp)
  812954:	00004106 	br	812a5c <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812958:	0005303a 	rdctl	r2,status
  81295c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812960:	e0fff717 	ldw	r3,-36(fp)
  812964:	00bfff84 	movi	r2,-2
  812968:	1884703a 	and	r2,r3,r2
  81296c:	1001703a 	wrctl	status,r2
  
  return context;
  812970:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  812974:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  812978:	e0bffd17 	ldw	r2,-12(fp)
  81297c:	10c00283 	ldbu	r3,10(r2)
  812980:	e0bffe17 	ldw	r2,-8(fp)
  812984:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  812988:	e0bffd17 	ldw	r2,-12(fp)
  81298c:	108002c4 	addi	r2,r2,11
  812990:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  812994:	e0bffe17 	ldw	r2,-8(fp)
  812998:	10800204 	addi	r2,r2,8
  81299c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8129a0:	e03ffb05 	stb	zero,-20(fp)
  8129a4:	00000d06 	br	8129dc <OSQQuery+0xec>
        *pdest++ = *psrc++;
  8129a8:	e0bffa17 	ldw	r2,-24(fp)
  8129ac:	10c00003 	ldbu	r3,0(r2)
  8129b0:	e0bff917 	ldw	r2,-28(fp)
  8129b4:	10c00005 	stb	r3,0(r2)
  8129b8:	e0bff917 	ldw	r2,-28(fp)
  8129bc:	10800044 	addi	r2,r2,1
  8129c0:	e0bff915 	stw	r2,-28(fp)
  8129c4:	e0bffa17 	ldw	r2,-24(fp)
  8129c8:	10800044 	addi	r2,r2,1
  8129cc:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8129d0:	e0bffb03 	ldbu	r2,-20(fp)
  8129d4:	10800044 	addi	r2,r2,1
  8129d8:	e0bffb05 	stb	r2,-20(fp)
  8129dc:	e0bffb03 	ldbu	r2,-20(fp)
  8129e0:	108000f0 	cmpltui	r2,r2,3
  8129e4:	103ff01e 	bne	r2,zero,8129a8 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  8129e8:	e0bffd17 	ldw	r2,-12(fp)
  8129ec:	10800117 	ldw	r2,4(r2)
  8129f0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  8129f4:	e0bffc17 	ldw	r2,-16(fp)
  8129f8:	1080058b 	ldhu	r2,22(r2)
  8129fc:	10bfffcc 	andi	r2,r2,65535
  812a00:	1005003a 	cmpeq	r2,r2,zero
  812a04:	1000061e 	bne	r2,zero,812a20 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  812a08:	e0bffc17 	ldw	r2,-16(fp)
  812a0c:	10800417 	ldw	r2,16(r2)
  812a10:	10c00017 	ldw	r3,0(r2)
  812a14:	e0bffe17 	ldw	r2,-8(fp)
  812a18:	10c00015 	stw	r3,0(r2)
  812a1c:	00000206 	br	812a28 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  812a20:	e0bffe17 	ldw	r2,-8(fp)
  812a24:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  812a28:	e0bffc17 	ldw	r2,-16(fp)
  812a2c:	10c0058b 	ldhu	r3,22(r2)
  812a30:	e0bffe17 	ldw	r2,-8(fp)
  812a34:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  812a38:	e0bffc17 	ldw	r2,-16(fp)
  812a3c:	10c0050b 	ldhu	r3,20(r2)
  812a40:	e0bffe17 	ldw	r2,-8(fp)
  812a44:	10c0018d 	sth	r3,6(r2)
  812a48:	e0bff817 	ldw	r2,-32(fp)
  812a4c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812a50:	e0bff617 	ldw	r2,-40(fp)
  812a54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  812a58:	e03fff15 	stw	zero,-4(fp)
  812a5c:	e0bfff17 	ldw	r2,-4(fp)
}
  812a60:	e037883a 	mov	sp,fp
  812a64:	df000017 	ldw	fp,0(sp)
  812a68:	dec00104 	addi	sp,sp,4
  812a6c:	f800283a 	ret

00812a70 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  812a70:	defffb04 	addi	sp,sp,-20
  812a74:	dfc00415 	stw	ra,16(sp)
  812a78:	df000315 	stw	fp,12(sp)
  812a7c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  812a80:	010020f4 	movhi	r4,131
  812a84:	21140d04 	addi	r4,r4,20532
  812a88:	01407804 	movi	r5,480
  812a8c:	080ed700 	call	80ed70 <OS_MemClr>
    pq1 = &OSQTbl[0];
  812a90:	008020f4 	movhi	r2,131
  812a94:	10940d04 	addi	r2,r2,20532
  812a98:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  812a9c:	008020f4 	movhi	r2,131
  812aa0:	10941304 	addi	r2,r2,20556
  812aa4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  812aa8:	e03fff0d 	sth	zero,-4(fp)
  812aac:	00000c06 	br	812ae0 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  812ab0:	e0fffe17 	ldw	r3,-8(fp)
  812ab4:	e0bffd17 	ldw	r2,-12(fp)
  812ab8:	18800015 	stw	r2,0(r3)
        pq1++;
  812abc:	e0bffe17 	ldw	r2,-8(fp)
  812ac0:	10800604 	addi	r2,r2,24
  812ac4:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  812ac8:	e0bffd17 	ldw	r2,-12(fp)
  812acc:	10800604 	addi	r2,r2,24
  812ad0:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  812ad4:	e0bfff0b 	ldhu	r2,-4(fp)
  812ad8:	10800044 	addi	r2,r2,1
  812adc:	e0bfff0d 	sth	r2,-4(fp)
  812ae0:	e0bfff0b 	ldhu	r2,-4(fp)
  812ae4:	108004f0 	cmpltui	r2,r2,19
  812ae8:	103ff11e 	bne	r2,zero,812ab0 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  812aec:	e0bffe17 	ldw	r2,-8(fp)
  812af0:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  812af4:	00c020b4 	movhi	r3,130
  812af8:	18fcc604 	addi	r3,r3,-3304
  812afc:	008020f4 	movhi	r2,131
  812b00:	10940d04 	addi	r2,r2,20532
  812b04:	18800015 	stw	r2,0(r3)
#endif
}
  812b08:	e037883a 	mov	sp,fp
  812b0c:	dfc00117 	ldw	ra,4(sp)
  812b10:	df000017 	ldw	fp,0(sp)
  812b14:	dec00204 	addi	sp,sp,8
  812b18:	f800283a 	ret

00812b1c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  812b1c:	defff904 	addi	sp,sp,-28
  812b20:	df000615 	stw	fp,24(sp)
  812b24:	df000604 	addi	fp,sp,24
  812b28:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812b2c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  812b30:	e0bffe17 	ldw	r2,-8(fp)
  812b34:	1004c03a 	cmpne	r2,r2,zero
  812b38:	1000021e 	bne	r2,zero,812b44 <OSSemAccept+0x28>
        return (0);
  812b3c:	e03fff15 	stw	zero,-4(fp)
  812b40:	00002106 	br	812bc8 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  812b44:	e0bffe17 	ldw	r2,-8(fp)
  812b48:	10800003 	ldbu	r2,0(r2)
  812b4c:	10803fcc 	andi	r2,r2,255
  812b50:	108000e0 	cmpeqi	r2,r2,3
  812b54:	1000021e 	bne	r2,zero,812b60 <OSSemAccept+0x44>
        return (0);
  812b58:	e03fff15 	stw	zero,-4(fp)
  812b5c:	00001a06 	br	812bc8 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812b60:	0005303a 	rdctl	r2,status
  812b64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812b68:	e0fffb17 	ldw	r3,-20(fp)
  812b6c:	00bfff84 	movi	r2,-2
  812b70:	1884703a 	and	r2,r3,r2
  812b74:	1001703a 	wrctl	status,r2
  
  return context;
  812b78:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  812b7c:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  812b80:	e0bffe17 	ldw	r2,-8(fp)
  812b84:	1080020b 	ldhu	r2,8(r2)
  812b88:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  812b8c:	e0bffd0b 	ldhu	r2,-12(fp)
  812b90:	1005003a 	cmpeq	r2,r2,zero
  812b94:	1000061e 	bne	r2,zero,812bb0 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  812b98:	e0bffe17 	ldw	r2,-8(fp)
  812b9c:	1080020b 	ldhu	r2,8(r2)
  812ba0:	10bfffc4 	addi	r2,r2,-1
  812ba4:	1007883a 	mov	r3,r2
  812ba8:	e0bffe17 	ldw	r2,-8(fp)
  812bac:	10c0020d 	sth	r3,8(r2)
  812bb0:	e0bffc17 	ldw	r2,-16(fp)
  812bb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812bb8:	e0bffa17 	ldw	r2,-24(fp)
  812bbc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  812bc0:	e0bffd0b 	ldhu	r2,-12(fp)
  812bc4:	e0bfff15 	stw	r2,-4(fp)
  812bc8:	e0bfff17 	ldw	r2,-4(fp)
}
  812bcc:	e037883a 	mov	sp,fp
  812bd0:	df000017 	ldw	fp,0(sp)
  812bd4:	dec00104 	addi	sp,sp,4
  812bd8:	f800283a 	ret

00812bdc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  812bdc:	defff804 	addi	sp,sp,-32
  812be0:	dfc00715 	stw	ra,28(sp)
  812be4:	df000615 	stw	fp,24(sp)
  812be8:	df000604 	addi	fp,sp,24
  812bec:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  812bf0:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  812bf4:	008020b4 	movhi	r2,130
  812bf8:	10bcc904 	addi	r2,r2,-3292
  812bfc:	10800003 	ldbu	r2,0(r2)
  812c00:	10803fcc 	andi	r2,r2,255
  812c04:	1005003a 	cmpeq	r2,r2,zero
  812c08:	1000021e 	bne	r2,zero,812c14 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  812c0c:	e03fff15 	stw	zero,-4(fp)
  812c10:	00003106 	br	812cd8 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812c14:	0005303a 	rdctl	r2,status
  812c18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812c1c:	e0fffb17 	ldw	r3,-20(fp)
  812c20:	00bfff84 	movi	r2,-2
  812c24:	1884703a 	and	r2,r3,r2
  812c28:	1001703a 	wrctl	status,r2
  
  return context;
  812c2c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  812c30:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  812c34:	008020b4 	movhi	r2,130
  812c38:	10bcc804 	addi	r2,r2,-3296
  812c3c:	10800017 	ldw	r2,0(r2)
  812c40:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  812c44:	008020b4 	movhi	r2,130
  812c48:	10bcc804 	addi	r2,r2,-3296
  812c4c:	10800017 	ldw	r2,0(r2)
  812c50:	1005003a 	cmpeq	r2,r2,zero
  812c54:	1000081e 	bne	r2,zero,812c78 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  812c58:	008020b4 	movhi	r2,130
  812c5c:	10bcc804 	addi	r2,r2,-3296
  812c60:	10800017 	ldw	r2,0(r2)
  812c64:	10800117 	ldw	r2,4(r2)
  812c68:	1007883a 	mov	r3,r2
  812c6c:	008020b4 	movhi	r2,130
  812c70:	10bcc804 	addi	r2,r2,-3296
  812c74:	10c00015 	stw	r3,0(r2)
  812c78:	e0bffc17 	ldw	r2,-16(fp)
  812c7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812c80:	e0bffa17 	ldw	r2,-24(fp)
  812c84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  812c88:	e0bffd17 	ldw	r2,-12(fp)
  812c8c:	1005003a 	cmpeq	r2,r2,zero
  812c90:	10000f1e 	bne	r2,zero,812cd0 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  812c94:	e0fffd17 	ldw	r3,-12(fp)
  812c98:	008000c4 	movi	r2,3
  812c9c:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  812ca0:	e0fffd17 	ldw	r3,-12(fp)
  812ca4:	e0bffe0b 	ldhu	r2,-8(fp)
  812ca8:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  812cac:	e0bffd17 	ldw	r2,-12(fp)
  812cb0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  812cb4:	e0fffd17 	ldw	r3,-12(fp)
  812cb8:	00800fc4 	movi	r2,63
  812cbc:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  812cc0:	e0bffd17 	ldw	r2,-12(fp)
  812cc4:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  812cc8:	e13ffd17 	ldw	r4,-12(fp)
  812ccc:	080e9a40 	call	80e9a4 <OS_EventWaitListInit>
    }
    return (pevent);
  812cd0:	e0bffd17 	ldw	r2,-12(fp)
  812cd4:	e0bfff15 	stw	r2,-4(fp)
  812cd8:	e0bfff17 	ldw	r2,-4(fp)
}
  812cdc:	e037883a 	mov	sp,fp
  812ce0:	dfc00117 	ldw	ra,4(sp)
  812ce4:	df000017 	ldw	fp,0(sp)
  812ce8:	dec00204 	addi	sp,sp,8
  812cec:	f800283a 	ret

00812cf0 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  812cf0:	defff104 	addi	sp,sp,-60
  812cf4:	dfc00e15 	stw	ra,56(sp)
  812cf8:	df000d15 	stw	fp,52(sp)
  812cfc:	df000d04 	addi	fp,sp,52
  812d00:	e13ffb15 	stw	r4,-20(fp)
  812d04:	e1bffd15 	stw	r6,-12(fp)
  812d08:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  812d0c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  812d10:	e0bffd17 	ldw	r2,-12(fp)
  812d14:	1004c03a 	cmpne	r2,r2,zero
  812d18:	1000031e 	bne	r2,zero,812d28 <OSSemDel+0x38>
        return (pevent);
  812d1c:	e0bffb17 	ldw	r2,-20(fp)
  812d20:	e0bfff15 	stw	r2,-4(fp)
  812d24:	00009406 	br	812f78 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  812d28:	e0bffb17 	ldw	r2,-20(fp)
  812d2c:	1004c03a 	cmpne	r2,r2,zero
  812d30:	1000061e 	bne	r2,zero,812d4c <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  812d34:	e0fffd17 	ldw	r3,-12(fp)
  812d38:	00800104 	movi	r2,4
  812d3c:	18800005 	stb	r2,0(r3)
        return (pevent);
  812d40:	e0fffb17 	ldw	r3,-20(fp)
  812d44:	e0ffff15 	stw	r3,-4(fp)
  812d48:	00008b06 	br	812f78 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  812d4c:	e0bffb17 	ldw	r2,-20(fp)
  812d50:	10800003 	ldbu	r2,0(r2)
  812d54:	10803fcc 	andi	r2,r2,255
  812d58:	108000e0 	cmpeqi	r2,r2,3
  812d5c:	1000061e 	bne	r2,zero,812d78 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  812d60:	e0fffd17 	ldw	r3,-12(fp)
  812d64:	00800044 	movi	r2,1
  812d68:	18800005 	stb	r2,0(r3)
        return (pevent);
  812d6c:	e0bffb17 	ldw	r2,-20(fp)
  812d70:	e0bfff15 	stw	r2,-4(fp)
  812d74:	00008006 	br	812f78 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  812d78:	008020b4 	movhi	r2,130
  812d7c:	10bcc904 	addi	r2,r2,-3292
  812d80:	10800003 	ldbu	r2,0(r2)
  812d84:	10803fcc 	andi	r2,r2,255
  812d88:	1005003a 	cmpeq	r2,r2,zero
  812d8c:	1000061e 	bne	r2,zero,812da8 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  812d90:	e0fffd17 	ldw	r3,-12(fp)
  812d94:	008003c4 	movi	r2,15
  812d98:	18800005 	stb	r2,0(r3)
        return (pevent);
  812d9c:	e0fffb17 	ldw	r3,-20(fp)
  812da0:	e0ffff15 	stw	r3,-4(fp)
  812da4:	00007406 	br	812f78 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812da8:	0005303a 	rdctl	r2,status
  812dac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812db0:	e0fff717 	ldw	r3,-36(fp)
  812db4:	00bfff84 	movi	r2,-2
  812db8:	1884703a 	and	r2,r3,r2
  812dbc:	1001703a 	wrctl	status,r2
  
  return context;
  812dc0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  812dc4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  812dc8:	e0bffb17 	ldw	r2,-20(fp)
  812dcc:	10800283 	ldbu	r2,10(r2)
  812dd0:	10803fcc 	andi	r2,r2,255
  812dd4:	1005003a 	cmpeq	r2,r2,zero
  812dd8:	1000031e 	bne	r2,zero,812de8 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  812ddc:	00800044 	movi	r2,1
  812de0:	e0bffa05 	stb	r2,-24(fp)
  812de4:	00000106 	br	812dec <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  812de8:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  812dec:	e0bffc03 	ldbu	r2,-16(fp)
  812df0:	e0bffe15 	stw	r2,-8(fp)
  812df4:	e0fffe17 	ldw	r3,-8(fp)
  812df8:	1805003a 	cmpeq	r2,r3,zero
  812dfc:	1000041e 	bne	r2,zero,812e10 <OSSemDel+0x120>
  812e00:	e0fffe17 	ldw	r3,-8(fp)
  812e04:	18800060 	cmpeqi	r2,r3,1
  812e08:	10002d1e 	bne	r2,zero,812ec0 <OSSemDel+0x1d0>
  812e0c:	00004f06 	br	812f4c <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  812e10:	e0bffa03 	ldbu	r2,-24(fp)
  812e14:	1004c03a 	cmpne	r2,r2,zero
  812e18:	10001a1e 	bne	r2,zero,812e84 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  812e1c:	e0fffb17 	ldw	r3,-20(fp)
  812e20:	00800fc4 	movi	r2,63
  812e24:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  812e28:	e0bffb17 	ldw	r2,-20(fp)
  812e2c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  812e30:	e0bffb17 	ldw	r2,-20(fp)
  812e34:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  812e38:	008020b4 	movhi	r2,130
  812e3c:	10bcc804 	addi	r2,r2,-3296
  812e40:	10c00017 	ldw	r3,0(r2)
  812e44:	e0bffb17 	ldw	r2,-20(fp)
  812e48:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  812e4c:	e0bffb17 	ldw	r2,-20(fp)
  812e50:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  812e54:	00c020b4 	movhi	r3,130
  812e58:	18fcc804 	addi	r3,r3,-3296
  812e5c:	e0bffb17 	ldw	r2,-20(fp)
  812e60:	18800015 	stw	r2,0(r3)
  812e64:	e0bff817 	ldw	r2,-32(fp)
  812e68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812e6c:	e0bff617 	ldw	r2,-40(fp)
  812e70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  812e74:	e0bffd17 	ldw	r2,-12(fp)
  812e78:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  812e7c:	e03ff915 	stw	zero,-28(fp)
  812e80:	00003b06 	br	812f70 <OSSemDel+0x280>
  812e84:	e0bff817 	ldw	r2,-32(fp)
  812e88:	e0bff515 	stw	r2,-44(fp)
  812e8c:	e0bff517 	ldw	r2,-44(fp)
  812e90:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  812e94:	e0fffd17 	ldw	r3,-12(fp)
  812e98:	00801244 	movi	r2,73
  812e9c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  812ea0:	e0bffb17 	ldw	r2,-20(fp)
  812ea4:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  812ea8:	00003106 	br	812f70 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  812eac:	e13ffb17 	ldw	r4,-20(fp)
  812eb0:	000b883a 	mov	r5,zero
  812eb4:	01800044 	movi	r6,1
  812eb8:	000f883a 	mov	r7,zero
  812ebc:	080e3f00 	call	80e3f0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  812ec0:	e0bffb17 	ldw	r2,-20(fp)
  812ec4:	10800283 	ldbu	r2,10(r2)
  812ec8:	10803fcc 	andi	r2,r2,255
  812ecc:	1004c03a 	cmpne	r2,r2,zero
  812ed0:	103ff61e 	bne	r2,zero,812eac <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  812ed4:	e0fffb17 	ldw	r3,-20(fp)
  812ed8:	00800fc4 	movi	r2,63
  812edc:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  812ee0:	e0bffb17 	ldw	r2,-20(fp)
  812ee4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  812ee8:	e0bffb17 	ldw	r2,-20(fp)
  812eec:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  812ef0:	008020b4 	movhi	r2,130
  812ef4:	10bcc804 	addi	r2,r2,-3296
  812ef8:	10c00017 	ldw	r3,0(r2)
  812efc:	e0bffb17 	ldw	r2,-20(fp)
  812f00:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  812f04:	e0bffb17 	ldw	r2,-20(fp)
  812f08:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  812f0c:	00c020b4 	movhi	r3,130
  812f10:	18fcc804 	addi	r3,r3,-3296
  812f14:	e0bffb17 	ldw	r2,-20(fp)
  812f18:	18800015 	stw	r2,0(r3)
  812f1c:	e0bff817 	ldw	r2,-32(fp)
  812f20:	e0bff415 	stw	r2,-48(fp)
  812f24:	e0bff417 	ldw	r2,-48(fp)
  812f28:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  812f2c:	e0bffa03 	ldbu	r2,-24(fp)
  812f30:	10800058 	cmpnei	r2,r2,1
  812f34:	1000011e 	bne	r2,zero,812f3c <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  812f38:	080ee300 	call	80ee30 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  812f3c:	e0bffd17 	ldw	r2,-12(fp)
  812f40:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  812f44:	e03ff915 	stw	zero,-28(fp)
             break;
  812f48:	00000906 	br	812f70 <OSSemDel+0x280>
  812f4c:	e0bff817 	ldw	r2,-32(fp)
  812f50:	e0bff315 	stw	r2,-52(fp)
  812f54:	e0bff317 	ldw	r2,-52(fp)
  812f58:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  812f5c:	e0fffd17 	ldw	r3,-12(fp)
  812f60:	008001c4 	movi	r2,7
  812f64:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  812f68:	e0bffb17 	ldw	r2,-20(fp)
  812f6c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  812f70:	e0bff917 	ldw	r2,-28(fp)
  812f74:	e0bfff15 	stw	r2,-4(fp)
  812f78:	e0bfff17 	ldw	r2,-4(fp)
}
  812f7c:	e037883a 	mov	sp,fp
  812f80:	dfc00117 	ldw	ra,4(sp)
  812f84:	df000017 	ldw	fp,0(sp)
  812f88:	dec00204 	addi	sp,sp,8
  812f8c:	f800283a 	ret

00812f90 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  812f90:	defff404 	addi	sp,sp,-48
  812f94:	dfc00b15 	stw	ra,44(sp)
  812f98:	df000a15 	stw	fp,40(sp)
  812f9c:	df000a04 	addi	fp,sp,40
  812fa0:	e13ffc15 	stw	r4,-16(fp)
  812fa4:	e1bffe15 	stw	r6,-8(fp)
  812fa8:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812fac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  812fb0:	e0bffe17 	ldw	r2,-8(fp)
  812fb4:	1005003a 	cmpeq	r2,r2,zero
  812fb8:	10008f1e 	bne	r2,zero,8131f8 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  812fbc:	e0bffc17 	ldw	r2,-16(fp)
  812fc0:	1004c03a 	cmpne	r2,r2,zero
  812fc4:	1000041e 	bne	r2,zero,812fd8 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  812fc8:	e0fffe17 	ldw	r3,-8(fp)
  812fcc:	00800104 	movi	r2,4
  812fd0:	18800005 	stb	r2,0(r3)
        return;
  812fd4:	00008806 	br	8131f8 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  812fd8:	e0bffc17 	ldw	r2,-16(fp)
  812fdc:	10800003 	ldbu	r2,0(r2)
  812fe0:	10803fcc 	andi	r2,r2,255
  812fe4:	108000e0 	cmpeqi	r2,r2,3
  812fe8:	1000041e 	bne	r2,zero,812ffc <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  812fec:	e0fffe17 	ldw	r3,-8(fp)
  812ff0:	00800044 	movi	r2,1
  812ff4:	18800005 	stb	r2,0(r3)
        return;
  812ff8:	00007f06 	br	8131f8 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  812ffc:	008020b4 	movhi	r2,130
  813000:	10bcc904 	addi	r2,r2,-3292
  813004:	10800003 	ldbu	r2,0(r2)
  813008:	10803fcc 	andi	r2,r2,255
  81300c:	1005003a 	cmpeq	r2,r2,zero
  813010:	1000041e 	bne	r2,zero,813024 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  813014:	e0fffe17 	ldw	r3,-8(fp)
  813018:	00800084 	movi	r2,2
  81301c:	18800005 	stb	r2,0(r3)
        return;
  813020:	00007506 	br	8131f8 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  813024:	008020b4 	movhi	r2,130
  813028:	10bcbb04 	addi	r2,r2,-3348
  81302c:	10800003 	ldbu	r2,0(r2)
  813030:	10803fcc 	andi	r2,r2,255
  813034:	1005003a 	cmpeq	r2,r2,zero
  813038:	1000041e 	bne	r2,zero,81304c <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  81303c:	e0fffe17 	ldw	r3,-8(fp)
  813040:	00800344 	movi	r2,13
  813044:	18800005 	stb	r2,0(r3)
        return;
  813048:	00006b06 	br	8131f8 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81304c:	0005303a 	rdctl	r2,status
  813050:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813054:	e0fffa17 	ldw	r3,-24(fp)
  813058:	00bfff84 	movi	r2,-2
  81305c:	1884703a 	and	r2,r3,r2
  813060:	1001703a 	wrctl	status,r2
  
  return context;
  813064:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  813068:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  81306c:	e0bffc17 	ldw	r2,-16(fp)
  813070:	1080020b 	ldhu	r2,8(r2)
  813074:	10bfffcc 	andi	r2,r2,65535
  813078:	1005003a 	cmpeq	r2,r2,zero
  81307c:	10000d1e 	bne	r2,zero,8130b4 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  813080:	e0bffc17 	ldw	r2,-16(fp)
  813084:	1080020b 	ldhu	r2,8(r2)
  813088:	10bfffc4 	addi	r2,r2,-1
  81308c:	1007883a 	mov	r3,r2
  813090:	e0bffc17 	ldw	r2,-16(fp)
  813094:	10c0020d 	sth	r3,8(r2)
  813098:	e0bffb17 	ldw	r2,-20(fp)
  81309c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8130a0:	e0bff917 	ldw	r2,-28(fp)
  8130a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  8130a8:	e0bffe17 	ldw	r2,-8(fp)
  8130ac:	10000005 	stb	zero,0(r2)
        return;
  8130b0:	00005106 	br	8131f8 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  8130b4:	008020b4 	movhi	r2,130
  8130b8:	10bcca04 	addi	r2,r2,-3288
  8130bc:	10c00017 	ldw	r3,0(r2)
  8130c0:	008020b4 	movhi	r2,130
  8130c4:	10bcca04 	addi	r2,r2,-3288
  8130c8:	10800017 	ldw	r2,0(r2)
  8130cc:	10800c03 	ldbu	r2,48(r2)
  8130d0:	10800054 	ori	r2,r2,1
  8130d4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8130d8:	008020b4 	movhi	r2,130
  8130dc:	10bcca04 	addi	r2,r2,-3288
  8130e0:	10800017 	ldw	r2,0(r2)
  8130e4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  8130e8:	008020b4 	movhi	r2,130
  8130ec:	10bcca04 	addi	r2,r2,-3288
  8130f0:	10c00017 	ldw	r3,0(r2)
  8130f4:	e0bffd0b 	ldhu	r2,-12(fp)
  8130f8:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  8130fc:	e13ffc17 	ldw	r4,-16(fp)
  813100:	080e5840 	call	80e584 <OS_EventTaskWait>
  813104:	e0bffb17 	ldw	r2,-20(fp)
  813108:	e0bff815 	stw	r2,-32(fp)
  81310c:	e0bff817 	ldw	r2,-32(fp)
  813110:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  813114:	080ee300 	call	80ee30 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813118:	0005303a 	rdctl	r2,status
  81311c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813120:	e0fff717 	ldw	r3,-36(fp)
  813124:	00bfff84 	movi	r2,-2
  813128:	1884703a 	and	r2,r3,r2
  81312c:	1001703a 	wrctl	status,r2
  
  return context;
  813130:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  813134:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  813138:	008020b4 	movhi	r2,130
  81313c:	10bcca04 	addi	r2,r2,-3288
  813140:	10800017 	ldw	r2,0(r2)
  813144:	10800c43 	ldbu	r2,49(r2)
  813148:	10803fcc 	andi	r2,r2,255
  81314c:	e0bfff15 	stw	r2,-4(fp)
  813150:	e0ffff17 	ldw	r3,-4(fp)
  813154:	1805003a 	cmpeq	r2,r3,zero
  813158:	1000041e 	bne	r2,zero,81316c <OSSemPend+0x1dc>
  81315c:	e0ffff17 	ldw	r3,-4(fp)
  813160:	188000a0 	cmpeqi	r2,r3,2
  813164:	1000041e 	bne	r2,zero,813178 <OSSemPend+0x1e8>
  813168:	00000706 	br	813188 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  81316c:	e0bffe17 	ldw	r2,-8(fp)
  813170:	10000005 	stb	zero,0(r2)
             break;
  813174:	00000c06 	br	8131a8 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  813178:	e0fffe17 	ldw	r3,-8(fp)
  81317c:	00800384 	movi	r2,14
  813180:	18800005 	stb	r2,0(r3)
             break;
  813184:	00000806 	br	8131a8 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  813188:	008020b4 	movhi	r2,130
  81318c:	10bcca04 	addi	r2,r2,-3288
  813190:	11000017 	ldw	r4,0(r2)
  813194:	e17ffc17 	ldw	r5,-16(fp)
  813198:	080e7e80 	call	80e7e8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  81319c:	e0fffe17 	ldw	r3,-8(fp)
  8131a0:	00800284 	movi	r2,10
  8131a4:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  8131a8:	008020b4 	movhi	r2,130
  8131ac:	10bcca04 	addi	r2,r2,-3288
  8131b0:	10800017 	ldw	r2,0(r2)
  8131b4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  8131b8:	008020b4 	movhi	r2,130
  8131bc:	10bcca04 	addi	r2,r2,-3288
  8131c0:	10800017 	ldw	r2,0(r2)
  8131c4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  8131c8:	008020b4 	movhi	r2,130
  8131cc:	10bcca04 	addi	r2,r2,-3288
  8131d0:	10800017 	ldw	r2,0(r2)
  8131d4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8131d8:	008020b4 	movhi	r2,130
  8131dc:	10bcca04 	addi	r2,r2,-3288
  8131e0:	10800017 	ldw	r2,0(r2)
  8131e4:	10000815 	stw	zero,32(r2)
  8131e8:	e0bffb17 	ldw	r2,-20(fp)
  8131ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8131f0:	e0bff617 	ldw	r2,-40(fp)
  8131f4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  8131f8:	e037883a 	mov	sp,fp
  8131fc:	dfc00117 	ldw	ra,4(sp)
  813200:	df000017 	ldw	fp,0(sp)
  813204:	dec00204 	addi	sp,sp,8
  813208:	f800283a 	ret

0081320c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  81320c:	defff504 	addi	sp,sp,-44
  813210:	dfc00a15 	stw	ra,40(sp)
  813214:	df000915 	stw	fp,36(sp)
  813218:	df000904 	addi	fp,sp,36
  81321c:	e13ffc15 	stw	r4,-16(fp)
  813220:	e1bffe15 	stw	r6,-8(fp)
  813224:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  813228:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81322c:	e0bffe17 	ldw	r2,-8(fp)
  813230:	1004c03a 	cmpne	r2,r2,zero
  813234:	1000021e 	bne	r2,zero,813240 <OSSemPendAbort+0x34>
        return (0);
  813238:	e03fff15 	stw	zero,-4(fp)
  81323c:	00004c06 	br	813370 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  813240:	e0bffc17 	ldw	r2,-16(fp)
  813244:	1004c03a 	cmpne	r2,r2,zero
  813248:	1000051e 	bne	r2,zero,813260 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81324c:	e0fffe17 	ldw	r3,-8(fp)
  813250:	00800104 	movi	r2,4
  813254:	18800005 	stb	r2,0(r3)
        return (0);
  813258:	e03fff15 	stw	zero,-4(fp)
  81325c:	00004406 	br	813370 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  813260:	e0bffc17 	ldw	r2,-16(fp)
  813264:	10800003 	ldbu	r2,0(r2)
  813268:	10803fcc 	andi	r2,r2,255
  81326c:	108000e0 	cmpeqi	r2,r2,3
  813270:	1000051e 	bne	r2,zero,813288 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  813274:	e0fffe17 	ldw	r3,-8(fp)
  813278:	00800044 	movi	r2,1
  81327c:	18800005 	stb	r2,0(r3)
        return (0);
  813280:	e03fff15 	stw	zero,-4(fp)
  813284:	00003a06 	br	813370 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813288:	0005303a 	rdctl	r2,status
  81328c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813290:	e0fff917 	ldw	r3,-28(fp)
  813294:	00bfff84 	movi	r2,-2
  813298:	1884703a 	and	r2,r3,r2
  81329c:	1001703a 	wrctl	status,r2
  
  return context;
  8132a0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8132a4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  8132a8:	e0bffc17 	ldw	r2,-16(fp)
  8132ac:	10800283 	ldbu	r2,10(r2)
  8132b0:	10803fcc 	andi	r2,r2,255
  8132b4:	1005003a 	cmpeq	r2,r2,zero
  8132b8:	1000261e 	bne	r2,zero,813354 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  8132bc:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  8132c0:	e0bffd03 	ldbu	r2,-12(fp)
  8132c4:	10800060 	cmpeqi	r2,r2,1
  8132c8:	1000091e 	bne	r2,zero,8132f0 <OSSemPendAbort+0xe4>
  8132cc:	00000e06 	br	813308 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8132d0:	e13ffc17 	ldw	r4,-16(fp)
  8132d4:	000b883a 	mov	r5,zero
  8132d8:	01800044 	movi	r6,1
  8132dc:	01c00084 	movi	r7,2
  8132e0:	080e3f00 	call	80e3f0 <OS_EventTaskRdy>
                     nbr_tasks++;
  8132e4:	e0bffb03 	ldbu	r2,-20(fp)
  8132e8:	10800044 	addi	r2,r2,1
  8132ec:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  8132f0:	e0bffc17 	ldw	r2,-16(fp)
  8132f4:	10800283 	ldbu	r2,10(r2)
  8132f8:	10803fcc 	andi	r2,r2,255
  8132fc:	1004c03a 	cmpne	r2,r2,zero
  813300:	103ff31e 	bne	r2,zero,8132d0 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  813304:	00000806 	br	813328 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  813308:	e13ffc17 	ldw	r4,-16(fp)
  81330c:	000b883a 	mov	r5,zero
  813310:	01800044 	movi	r6,1
  813314:	01c00084 	movi	r7,2
  813318:	080e3f00 	call	80e3f0 <OS_EventTaskRdy>
                 nbr_tasks++;
  81331c:	e0bffb03 	ldbu	r2,-20(fp)
  813320:	10800044 	addi	r2,r2,1
  813324:	e0bffb05 	stb	r2,-20(fp)
  813328:	e0bffa17 	ldw	r2,-24(fp)
  81332c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813330:	e0bff817 	ldw	r2,-32(fp)
  813334:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  813338:	080ee300 	call	80ee30 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  81333c:	e0fffe17 	ldw	r3,-8(fp)
  813340:	00800384 	movi	r2,14
  813344:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  813348:	e0bffb03 	ldbu	r2,-20(fp)
  81334c:	e0bfff15 	stw	r2,-4(fp)
  813350:	00000706 	br	813370 <OSSemPendAbort+0x164>
  813354:	e0bffa17 	ldw	r2,-24(fp)
  813358:	e0bff715 	stw	r2,-36(fp)
  81335c:	e0bff717 	ldw	r2,-36(fp)
  813360:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  813364:	e0bffe17 	ldw	r2,-8(fp)
  813368:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  81336c:	e03fff15 	stw	zero,-4(fp)
  813370:	e0bfff17 	ldw	r2,-4(fp)
}
  813374:	e037883a 	mov	sp,fp
  813378:	dfc00117 	ldw	ra,4(sp)
  81337c:	df000017 	ldw	fp,0(sp)
  813380:	dec00204 	addi	sp,sp,8
  813384:	f800283a 	ret

00813388 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  813388:	defff704 	addi	sp,sp,-36
  81338c:	dfc00815 	stw	ra,32(sp)
  813390:	df000715 	stw	fp,28(sp)
  813394:	df000704 	addi	fp,sp,28
  813398:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81339c:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8133a0:	e0bffe17 	ldw	r2,-8(fp)
  8133a4:	1004c03a 	cmpne	r2,r2,zero
  8133a8:	1000031e 	bne	r2,zero,8133b8 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  8133ac:	00800104 	movi	r2,4
  8133b0:	e0bfff15 	stw	r2,-4(fp)
  8133b4:	00003806 	br	813498 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8133b8:	e0bffe17 	ldw	r2,-8(fp)
  8133bc:	10800003 	ldbu	r2,0(r2)
  8133c0:	10803fcc 	andi	r2,r2,255
  8133c4:	108000e0 	cmpeqi	r2,r2,3
  8133c8:	1000031e 	bne	r2,zero,8133d8 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  8133cc:	00800044 	movi	r2,1
  8133d0:	e0bfff15 	stw	r2,-4(fp)
  8133d4:	00003006 	br	813498 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8133d8:	0005303a 	rdctl	r2,status
  8133dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8133e0:	e0fffc17 	ldw	r3,-16(fp)
  8133e4:	00bfff84 	movi	r2,-2
  8133e8:	1884703a 	and	r2,r3,r2
  8133ec:	1001703a 	wrctl	status,r2
  
  return context;
  8133f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8133f4:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  8133f8:	e0bffe17 	ldw	r2,-8(fp)
  8133fc:	10800283 	ldbu	r2,10(r2)
  813400:	10803fcc 	andi	r2,r2,255
  813404:	1005003a 	cmpeq	r2,r2,zero
  813408:	10000c1e 	bne	r2,zero,81343c <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  81340c:	e13ffe17 	ldw	r4,-8(fp)
  813410:	000b883a 	mov	r5,zero
  813414:	01800044 	movi	r6,1
  813418:	000f883a 	mov	r7,zero
  81341c:	080e3f00 	call	80e3f0 <OS_EventTaskRdy>
  813420:	e0bffd17 	ldw	r2,-12(fp)
  813424:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813428:	e0bffb17 	ldw	r2,-20(fp)
  81342c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  813430:	080ee300 	call	80ee30 <OS_Sched>
        return (OS_ERR_NONE);
  813434:	e03fff15 	stw	zero,-4(fp)
  813438:	00001706 	br	813498 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  81343c:	e0bffe17 	ldw	r2,-8(fp)
  813440:	1080020b 	ldhu	r2,8(r2)
  813444:	10ffffcc 	andi	r3,r2,65535
  813448:	00bfffd4 	movui	r2,65535
  81344c:	18800c26 	beq	r3,r2,813480 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  813450:	e0bffe17 	ldw	r2,-8(fp)
  813454:	1080020b 	ldhu	r2,8(r2)
  813458:	10800044 	addi	r2,r2,1
  81345c:	1007883a 	mov	r3,r2
  813460:	e0bffe17 	ldw	r2,-8(fp)
  813464:	10c0020d 	sth	r3,8(r2)
  813468:	e0bffd17 	ldw	r2,-12(fp)
  81346c:	e0bffa15 	stw	r2,-24(fp)
  813470:	e0bffa17 	ldw	r2,-24(fp)
  813474:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  813478:	e03fff15 	stw	zero,-4(fp)
  81347c:	00000606 	br	813498 <OSSemPost+0x110>
  813480:	e0bffd17 	ldw	r2,-12(fp)
  813484:	e0bff915 	stw	r2,-28(fp)
  813488:	e0bff917 	ldw	r2,-28(fp)
  81348c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  813490:	00800c84 	movi	r2,50
  813494:	e0bfff15 	stw	r2,-4(fp)
  813498:	e0bfff17 	ldw	r2,-4(fp)
}
  81349c:	e037883a 	mov	sp,fp
  8134a0:	dfc00117 	ldw	ra,4(sp)
  8134a4:	df000017 	ldw	fp,0(sp)
  8134a8:	dec00204 	addi	sp,sp,8
  8134ac:	f800283a 	ret

008134b0 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  8134b0:	defff604 	addi	sp,sp,-40
  8134b4:	df000915 	stw	fp,36(sp)
  8134b8:	df000904 	addi	fp,sp,36
  8134bc:	e13ffd15 	stw	r4,-12(fp)
  8134c0:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8134c4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8134c8:	e0bffd17 	ldw	r2,-12(fp)
  8134cc:	1004c03a 	cmpne	r2,r2,zero
  8134d0:	1000031e 	bne	r2,zero,8134e0 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  8134d4:	00800104 	movi	r2,4
  8134d8:	e0bfff15 	stw	r2,-4(fp)
  8134dc:	00003b06 	br	8135cc <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  8134e0:	e0bffe17 	ldw	r2,-8(fp)
  8134e4:	1004c03a 	cmpne	r2,r2,zero
  8134e8:	1000031e 	bne	r2,zero,8134f8 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  8134ec:	00800244 	movi	r2,9
  8134f0:	e0bfff15 	stw	r2,-4(fp)
  8134f4:	00003506 	br	8135cc <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  8134f8:	e0bffd17 	ldw	r2,-12(fp)
  8134fc:	10800003 	ldbu	r2,0(r2)
  813500:	10803fcc 	andi	r2,r2,255
  813504:	108000e0 	cmpeqi	r2,r2,3
  813508:	1000031e 	bne	r2,zero,813518 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  81350c:	00800044 	movi	r2,1
  813510:	e0bfff15 	stw	r2,-4(fp)
  813514:	00002d06 	br	8135cc <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813518:	0005303a 	rdctl	r2,status
  81351c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813520:	e0fff817 	ldw	r3,-32(fp)
  813524:	00bfff84 	movi	r2,-2
  813528:	1884703a 	and	r2,r3,r2
  81352c:	1001703a 	wrctl	status,r2
  
  return context;
  813530:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  813534:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  813538:	e0bffd17 	ldw	r2,-12(fp)
  81353c:	10c00283 	ldbu	r3,10(r2)
  813540:	e0bffe17 	ldw	r2,-8(fp)
  813544:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  813548:	e0bffd17 	ldw	r2,-12(fp)
  81354c:	108002c4 	addi	r2,r2,11
  813550:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  813554:	e0bffe17 	ldw	r2,-8(fp)
  813558:	10800084 	addi	r2,r2,2
  81355c:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  813560:	e03ffa05 	stb	zero,-24(fp)
  813564:	00000d06 	br	81359c <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  813568:	e0bffc17 	ldw	r2,-16(fp)
  81356c:	10c00003 	ldbu	r3,0(r2)
  813570:	e0bffb17 	ldw	r2,-20(fp)
  813574:	10c00005 	stb	r3,0(r2)
  813578:	e0bffb17 	ldw	r2,-20(fp)
  81357c:	10800044 	addi	r2,r2,1
  813580:	e0bffb15 	stw	r2,-20(fp)
  813584:	e0bffc17 	ldw	r2,-16(fp)
  813588:	10800044 	addi	r2,r2,1
  81358c:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  813590:	e0bffa03 	ldbu	r2,-24(fp)
  813594:	10800044 	addi	r2,r2,1
  813598:	e0bffa05 	stb	r2,-24(fp)
  81359c:	e0bffa03 	ldbu	r2,-24(fp)
  8135a0:	108000f0 	cmpltui	r2,r2,3
  8135a4:	103ff01e 	bne	r2,zero,813568 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  8135a8:	e0bffd17 	ldw	r2,-12(fp)
  8135ac:	10c0020b 	ldhu	r3,8(r2)
  8135b0:	e0bffe17 	ldw	r2,-8(fp)
  8135b4:	10c0000d 	sth	r3,0(r2)
  8135b8:	e0bff917 	ldw	r2,-28(fp)
  8135bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8135c0:	e0bff717 	ldw	r2,-36(fp)
  8135c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8135c8:	e03fff15 	stw	zero,-4(fp)
  8135cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8135d0:	e037883a 	mov	sp,fp
  8135d4:	df000017 	ldw	fp,0(sp)
  8135d8:	dec00104 	addi	sp,sp,4
  8135dc:	f800283a 	ret

008135e0 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  8135e0:	defff904 	addi	sp,sp,-28
  8135e4:	df000615 	stw	fp,24(sp)
  8135e8:	df000604 	addi	fp,sp,24
  8135ec:	e13ffd15 	stw	r4,-12(fp)
  8135f0:	e1bfff15 	stw	r6,-4(fp)
  8135f4:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8135f8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8135fc:	e0bfff17 	ldw	r2,-4(fp)
  813600:	1005003a 	cmpeq	r2,r2,zero
  813604:	1000331e 	bne	r2,zero,8136d4 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  813608:	e0bffd17 	ldw	r2,-12(fp)
  81360c:	1004c03a 	cmpne	r2,r2,zero
  813610:	1000041e 	bne	r2,zero,813624 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  813614:	e0ffff17 	ldw	r3,-4(fp)
  813618:	00800104 	movi	r2,4
  81361c:	18800005 	stb	r2,0(r3)
        return;
  813620:	00002c06 	br	8136d4 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  813624:	e0bffd17 	ldw	r2,-12(fp)
  813628:	10800003 	ldbu	r2,0(r2)
  81362c:	10803fcc 	andi	r2,r2,255
  813630:	108000e0 	cmpeqi	r2,r2,3
  813634:	1000041e 	bne	r2,zero,813648 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  813638:	e0ffff17 	ldw	r3,-4(fp)
  81363c:	00800044 	movi	r2,1
  813640:	18800005 	stb	r2,0(r3)
        return;
  813644:	00002306 	br	8136d4 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813648:	0005303a 	rdctl	r2,status
  81364c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813650:	e0fffb17 	ldw	r3,-20(fp)
  813654:	00bfff84 	movi	r2,-2
  813658:	1884703a 	and	r2,r3,r2
  81365c:	1001703a 	wrctl	status,r2
  
  return context;
  813660:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  813664:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  813668:	e0bfff17 	ldw	r2,-4(fp)
  81366c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  813670:	e0bffd17 	ldw	r2,-12(fp)
  813674:	1080020b 	ldhu	r2,8(r2)
  813678:	10bfffcc 	andi	r2,r2,65535
  81367c:	1005003a 	cmpeq	r2,r2,zero
  813680:	1000041e 	bne	r2,zero,813694 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  813684:	e0fffd17 	ldw	r3,-12(fp)
  813688:	e0bffe0b 	ldhu	r2,-8(fp)
  81368c:	1880020d 	sth	r2,8(r3)
  813690:	00000c06 	br	8136c4 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  813694:	e0bffd17 	ldw	r2,-12(fp)
  813698:	10800283 	ldbu	r2,10(r2)
  81369c:	10803fcc 	andi	r2,r2,255
  8136a0:	1004c03a 	cmpne	r2,r2,zero
  8136a4:	1000041e 	bne	r2,zero,8136b8 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  8136a8:	e0fffd17 	ldw	r3,-12(fp)
  8136ac:	e0bffe0b 	ldhu	r2,-8(fp)
  8136b0:	1880020d 	sth	r2,8(r3)
  8136b4:	00000306 	br	8136c4 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  8136b8:	e0ffff17 	ldw	r3,-4(fp)
  8136bc:	00801244 	movi	r2,73
  8136c0:	18800005 	stb	r2,0(r3)
  8136c4:	e0bffc17 	ldw	r2,-16(fp)
  8136c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8136cc:	e0bffa17 	ldw	r2,-24(fp)
  8136d0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  8136d4:	e037883a 	mov	sp,fp
  8136d8:	df000017 	ldw	fp,0(sp)
  8136dc:	dec00104 	addi	sp,sp,4
  8136e0:	f800283a 	ret

008136e4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  8136e4:	defff004 	addi	sp,sp,-64
  8136e8:	dfc00f15 	stw	ra,60(sp)
  8136ec:	df000e15 	stw	fp,56(sp)
  8136f0:	df000e04 	addi	fp,sp,56
  8136f4:	e13ffd05 	stb	r4,-12(fp)
  8136f8:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  8136fc:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  813700:	e0bffd03 	ldbu	r2,-12(fp)
  813704:	10800530 	cmpltui	r2,r2,20
  813708:	1000061e 	bne	r2,zero,813724 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  81370c:	e0bffd03 	ldbu	r2,-12(fp)
  813710:	10803fe0 	cmpeqi	r2,r2,255
  813714:	1000031e 	bne	r2,zero,813724 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  813718:	00800a84 	movi	r2,42
  81371c:	e0bfff15 	stw	r2,-4(fp)
  813720:	00014706 	br	813c40 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  813724:	e0bffe03 	ldbu	r2,-8(fp)
  813728:	10800530 	cmpltui	r2,r2,20
  81372c:	1000031e 	bne	r2,zero,81373c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  813730:	00800a84 	movi	r2,42
  813734:	e0bfff15 	stw	r2,-4(fp)
  813738:	00014106 	br	813c40 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81373c:	0005303a 	rdctl	r2,status
  813740:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813744:	e0fff617 	ldw	r3,-40(fp)
  813748:	00bfff84 	movi	r2,-2
  81374c:	1884703a 	and	r2,r3,r2
  813750:	1001703a 	wrctl	status,r2
  
  return context;
  813754:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  813758:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  81375c:	e0bffe03 	ldbu	r2,-8(fp)
  813760:	00c020f4 	movhi	r3,131
  813764:	18da9904 	addi	r3,r3,27236
  813768:	1085883a 	add	r2,r2,r2
  81376c:	1085883a 	add	r2,r2,r2
  813770:	10c5883a 	add	r2,r2,r3
  813774:	10800017 	ldw	r2,0(r2)
  813778:	1005003a 	cmpeq	r2,r2,zero
  81377c:	1000071e 	bne	r2,zero,81379c <OSTaskChangePrio+0xb8>
  813780:	e0bff717 	ldw	r2,-36(fp)
  813784:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813788:	e0bff517 	ldw	r2,-44(fp)
  81378c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  813790:	00800a04 	movi	r2,40
  813794:	e0bfff15 	stw	r2,-4(fp)
  813798:	00012906 	br	813c40 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  81379c:	e0bffd03 	ldbu	r2,-12(fp)
  8137a0:	10803fd8 	cmpnei	r2,r2,255
  8137a4:	1000051e 	bne	r2,zero,8137bc <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  8137a8:	008020b4 	movhi	r2,130
  8137ac:	10bcca04 	addi	r2,r2,-3288
  8137b0:	10800017 	ldw	r2,0(r2)
  8137b4:	10800c83 	ldbu	r2,50(r2)
  8137b8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  8137bc:	e0bffd03 	ldbu	r2,-12(fp)
  8137c0:	00c020f4 	movhi	r3,131
  8137c4:	18da9904 	addi	r3,r3,27236
  8137c8:	1085883a 	add	r2,r2,r2
  8137cc:	1085883a 	add	r2,r2,r2
  8137d0:	10c5883a 	add	r2,r2,r3
  8137d4:	10800017 	ldw	r2,0(r2)
  8137d8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  8137dc:	e0bffa17 	ldw	r2,-24(fp)
  8137e0:	1004c03a 	cmpne	r2,r2,zero
  8137e4:	1000071e 	bne	r2,zero,813804 <OSTaskChangePrio+0x120>
  8137e8:	e0bff717 	ldw	r2,-36(fp)
  8137ec:	e0bff415 	stw	r2,-48(fp)
  8137f0:	e0bff417 	ldw	r2,-48(fp)
  8137f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  8137f8:	00800a44 	movi	r2,41
  8137fc:	e0bfff15 	stw	r2,-4(fp)
  813800:	00010f06 	br	813c40 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  813804:	e0bffa17 	ldw	r2,-24(fp)
  813808:	10800058 	cmpnei	r2,r2,1
  81380c:	1000071e 	bne	r2,zero,81382c <OSTaskChangePrio+0x148>
  813810:	e0bff717 	ldw	r2,-36(fp)
  813814:	e0bff315 	stw	r2,-52(fp)
  813818:	e0bff317 	ldw	r2,-52(fp)
  81381c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  813820:	008010c4 	movi	r2,67
  813824:	e0bfff15 	stw	r2,-4(fp)
  813828:	00010506 	br	813c40 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  81382c:	e0bffe03 	ldbu	r2,-8(fp)
  813830:	1004d0fa 	srli	r2,r2,3
  813834:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  813838:	e0bffe03 	ldbu	r2,-8(fp)
  81383c:	108001cc 	andi	r2,r2,7
  813840:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  813844:	e0fff983 	ldbu	r3,-26(fp)
  813848:	00800044 	movi	r2,1
  81384c:	10c4983a 	sll	r2,r2,r3
  813850:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  813854:	e0fff943 	ldbu	r3,-27(fp)
  813858:	00800044 	movi	r2,1
  81385c:	10c4983a 	sll	r2,r2,r3
  813860:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  813864:	e0bffd03 	ldbu	r2,-12(fp)
  813868:	00c020f4 	movhi	r3,131
  81386c:	18da9904 	addi	r3,r3,27236
  813870:	1085883a 	add	r2,r2,r2
  813874:	1085883a 	add	r2,r2,r2
  813878:	10c5883a 	add	r2,r2,r3
  81387c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  813880:	e0bffe03 	ldbu	r2,-8(fp)
  813884:	00c020f4 	movhi	r3,131
  813888:	18da9904 	addi	r3,r3,27236
  81388c:	1085883a 	add	r2,r2,r2
  813890:	1085883a 	add	r2,r2,r2
  813894:	10c7883a 	add	r3,r2,r3
  813898:	e0bffa17 	ldw	r2,-24(fp)
  81389c:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  8138a0:	e0bffa17 	ldw	r2,-24(fp)
  8138a4:	10800d03 	ldbu	r2,52(r2)
  8138a8:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  8138ac:	e0bffa17 	ldw	r2,-24(fp)
  8138b0:	10800d83 	ldbu	r2,54(r2)
  8138b4:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  8138b8:	e0bffa17 	ldw	r2,-24(fp)
  8138bc:	10800d43 	ldbu	r2,53(r2)
  8138c0:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  8138c4:	e0fff903 	ldbu	r3,-28(fp)
  8138c8:	008020b4 	movhi	r2,130
  8138cc:	10bcc744 	addi	r2,r2,-3299
  8138d0:	10c5883a 	add	r2,r2,r3
  8138d4:	10c00003 	ldbu	r3,0(r2)
  8138d8:	e0bff803 	ldbu	r2,-32(fp)
  8138dc:	1884703a 	and	r2,r3,r2
  8138e0:	10803fcc 	andi	r2,r2,255
  8138e4:	1005003a 	cmpeq	r2,r2,zero
  8138e8:	1000381e 	bne	r2,zero,8139cc <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  8138ec:	e13ff903 	ldbu	r4,-28(fp)
  8138f0:	e0fff903 	ldbu	r3,-28(fp)
  8138f4:	008020b4 	movhi	r2,130
  8138f8:	10bcc744 	addi	r2,r2,-3299
  8138fc:	10c5883a 	add	r2,r2,r3
  813900:	10800003 	ldbu	r2,0(r2)
  813904:	1007883a 	mov	r3,r2
  813908:	e0bff803 	ldbu	r2,-32(fp)
  81390c:	0084303a 	nor	r2,zero,r2
  813910:	1884703a 	and	r2,r3,r2
  813914:	1007883a 	mov	r3,r2
  813918:	008020b4 	movhi	r2,130
  81391c:	10bcc744 	addi	r2,r2,-3299
  813920:	1105883a 	add	r2,r2,r4
  813924:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  813928:	e0fff903 	ldbu	r3,-28(fp)
  81392c:	008020b4 	movhi	r2,130
  813930:	10bcc744 	addi	r2,r2,-3299
  813934:	10c5883a 	add	r2,r2,r3
  813938:	10800003 	ldbu	r2,0(r2)
  81393c:	10803fcc 	andi	r2,r2,255
  813940:	1004c03a 	cmpne	r2,r2,zero
  813944:	10000b1e 	bne	r2,zero,813974 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  813948:	e0bff843 	ldbu	r2,-31(fp)
  81394c:	0084303a 	nor	r2,zero,r2
  813950:	1007883a 	mov	r3,r2
  813954:	008020b4 	movhi	r2,130
  813958:	10bcc704 	addi	r2,r2,-3300
  81395c:	10800003 	ldbu	r2,0(r2)
  813960:	1884703a 	and	r2,r3,r2
  813964:	1007883a 	mov	r3,r2
  813968:	008020b4 	movhi	r2,130
  81396c:	10bcc704 	addi	r2,r2,-3300
  813970:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  813974:	008020b4 	movhi	r2,130
  813978:	10bcc704 	addi	r2,r2,-3300
  81397c:	10c00003 	ldbu	r3,0(r2)
  813980:	e0bff8c3 	ldbu	r2,-29(fp)
  813984:	1884b03a 	or	r2,r3,r2
  813988:	1007883a 	mov	r3,r2
  81398c:	008020b4 	movhi	r2,130
  813990:	10bcc704 	addi	r2,r2,-3300
  813994:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  813998:	e13ff983 	ldbu	r4,-26(fp)
  81399c:	e0fff983 	ldbu	r3,-26(fp)
  8139a0:	008020b4 	movhi	r2,130
  8139a4:	10bcc744 	addi	r2,r2,-3299
  8139a8:	10c5883a 	add	r2,r2,r3
  8139ac:	10c00003 	ldbu	r3,0(r2)
  8139b0:	e0bff883 	ldbu	r2,-30(fp)
  8139b4:	1884b03a 	or	r2,r3,r2
  8139b8:	1007883a 	mov	r3,r2
  8139bc:	008020b4 	movhi	r2,130
  8139c0:	10bcc744 	addi	r2,r2,-3299
  8139c4:	1105883a 	add	r2,r2,r4
  8139c8:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  8139cc:	e0bffa17 	ldw	r2,-24(fp)
  8139d0:	10800717 	ldw	r2,28(r2)
  8139d4:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  8139d8:	e0bffc17 	ldw	r2,-16(fp)
  8139dc:	1005003a 	cmpeq	r2,r2,zero
  8139e0:	1000341e 	bne	r2,zero,813ab4 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  8139e4:	e13ff903 	ldbu	r4,-28(fp)
  8139e8:	e0fff903 	ldbu	r3,-28(fp)
  8139ec:	e0bffc17 	ldw	r2,-16(fp)
  8139f0:	1885883a 	add	r2,r3,r2
  8139f4:	10800204 	addi	r2,r2,8
  8139f8:	108000c3 	ldbu	r2,3(r2)
  8139fc:	1007883a 	mov	r3,r2
  813a00:	e0bff803 	ldbu	r2,-32(fp)
  813a04:	0084303a 	nor	r2,zero,r2
  813a08:	1884703a 	and	r2,r3,r2
  813a0c:	1007883a 	mov	r3,r2
  813a10:	e0bffc17 	ldw	r2,-16(fp)
  813a14:	2085883a 	add	r2,r4,r2
  813a18:	10800204 	addi	r2,r2,8
  813a1c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  813a20:	e0fff903 	ldbu	r3,-28(fp)
  813a24:	e0bffc17 	ldw	r2,-16(fp)
  813a28:	1885883a 	add	r2,r3,r2
  813a2c:	10800204 	addi	r2,r2,8
  813a30:	108000c3 	ldbu	r2,3(r2)
  813a34:	10803fcc 	andi	r2,r2,255
  813a38:	1004c03a 	cmpne	r2,r2,zero
  813a3c:	1000091e 	bne	r2,zero,813a64 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  813a40:	e0bffc17 	ldw	r2,-16(fp)
  813a44:	10800283 	ldbu	r2,10(r2)
  813a48:	1007883a 	mov	r3,r2
  813a4c:	e0bff843 	ldbu	r2,-31(fp)
  813a50:	0084303a 	nor	r2,zero,r2
  813a54:	1884703a 	and	r2,r3,r2
  813a58:	1007883a 	mov	r3,r2
  813a5c:	e0bffc17 	ldw	r2,-16(fp)
  813a60:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  813a64:	e0bffc17 	ldw	r2,-16(fp)
  813a68:	10c00283 	ldbu	r3,10(r2)
  813a6c:	e0bff8c3 	ldbu	r2,-29(fp)
  813a70:	1884b03a 	or	r2,r3,r2
  813a74:	1007883a 	mov	r3,r2
  813a78:	e0bffc17 	ldw	r2,-16(fp)
  813a7c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  813a80:	e13ff983 	ldbu	r4,-26(fp)
  813a84:	e0fff983 	ldbu	r3,-26(fp)
  813a88:	e0bffc17 	ldw	r2,-16(fp)
  813a8c:	1885883a 	add	r2,r3,r2
  813a90:	10800204 	addi	r2,r2,8
  813a94:	10c000c3 	ldbu	r3,3(r2)
  813a98:	e0bff883 	ldbu	r2,-30(fp)
  813a9c:	1884b03a 	or	r2,r3,r2
  813aa0:	1007883a 	mov	r3,r2
  813aa4:	e0bffc17 	ldw	r2,-16(fp)
  813aa8:	2085883a 	add	r2,r4,r2
  813aac:	10800204 	addi	r2,r2,8
  813ab0:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  813ab4:	e0bffa17 	ldw	r2,-24(fp)
  813ab8:	10800817 	ldw	r2,32(r2)
  813abc:	1005003a 	cmpeq	r2,r2,zero
  813ac0:	1000441e 	bne	r2,zero,813bd4 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  813ac4:	e0bffa17 	ldw	r2,-24(fp)
  813ac8:	10800817 	ldw	r2,32(r2)
  813acc:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  813ad0:	e0bffb17 	ldw	r2,-20(fp)
  813ad4:	10800017 	ldw	r2,0(r2)
  813ad8:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  813adc:	00003a06 	br	813bc8 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  813ae0:	e13ff903 	ldbu	r4,-28(fp)
  813ae4:	e0fff903 	ldbu	r3,-28(fp)
  813ae8:	e0bffc17 	ldw	r2,-16(fp)
  813aec:	1885883a 	add	r2,r3,r2
  813af0:	10800204 	addi	r2,r2,8
  813af4:	108000c3 	ldbu	r2,3(r2)
  813af8:	1007883a 	mov	r3,r2
  813afc:	e0bff803 	ldbu	r2,-32(fp)
  813b00:	0084303a 	nor	r2,zero,r2
  813b04:	1884703a 	and	r2,r3,r2
  813b08:	1007883a 	mov	r3,r2
  813b0c:	e0bffc17 	ldw	r2,-16(fp)
  813b10:	2085883a 	add	r2,r4,r2
  813b14:	10800204 	addi	r2,r2,8
  813b18:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  813b1c:	e0fff903 	ldbu	r3,-28(fp)
  813b20:	e0bffc17 	ldw	r2,-16(fp)
  813b24:	1885883a 	add	r2,r3,r2
  813b28:	10800204 	addi	r2,r2,8
  813b2c:	108000c3 	ldbu	r2,3(r2)
  813b30:	10803fcc 	andi	r2,r2,255
  813b34:	1004c03a 	cmpne	r2,r2,zero
  813b38:	1000091e 	bne	r2,zero,813b60 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  813b3c:	e0bffc17 	ldw	r2,-16(fp)
  813b40:	10800283 	ldbu	r2,10(r2)
  813b44:	1007883a 	mov	r3,r2
  813b48:	e0bff843 	ldbu	r2,-31(fp)
  813b4c:	0084303a 	nor	r2,zero,r2
  813b50:	1884703a 	and	r2,r3,r2
  813b54:	1007883a 	mov	r3,r2
  813b58:	e0bffc17 	ldw	r2,-16(fp)
  813b5c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  813b60:	e0bffc17 	ldw	r2,-16(fp)
  813b64:	10c00283 	ldbu	r3,10(r2)
  813b68:	e0bff8c3 	ldbu	r2,-29(fp)
  813b6c:	1884b03a 	or	r2,r3,r2
  813b70:	1007883a 	mov	r3,r2
  813b74:	e0bffc17 	ldw	r2,-16(fp)
  813b78:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  813b7c:	e13ff983 	ldbu	r4,-26(fp)
  813b80:	e0fff983 	ldbu	r3,-26(fp)
  813b84:	e0bffc17 	ldw	r2,-16(fp)
  813b88:	1885883a 	add	r2,r3,r2
  813b8c:	10800204 	addi	r2,r2,8
  813b90:	10c000c3 	ldbu	r3,3(r2)
  813b94:	e0bff883 	ldbu	r2,-30(fp)
  813b98:	1884b03a 	or	r2,r3,r2
  813b9c:	1007883a 	mov	r3,r2
  813ba0:	e0bffc17 	ldw	r2,-16(fp)
  813ba4:	2085883a 	add	r2,r4,r2
  813ba8:	10800204 	addi	r2,r2,8
  813bac:	10c000c5 	stb	r3,3(r2)
            pevents++;
  813bb0:	e0bffb17 	ldw	r2,-20(fp)
  813bb4:	10800104 	addi	r2,r2,4
  813bb8:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  813bbc:	e0bffb17 	ldw	r2,-20(fp)
  813bc0:	10800017 	ldw	r2,0(r2)
  813bc4:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  813bc8:	e0bffc17 	ldw	r2,-16(fp)
  813bcc:	1004c03a 	cmpne	r2,r2,zero
  813bd0:	103fc31e 	bne	r2,zero,813ae0 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  813bd4:	e0fffa17 	ldw	r3,-24(fp)
  813bd8:	e0bffe03 	ldbu	r2,-8(fp)
  813bdc:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  813be0:	e0fffa17 	ldw	r3,-24(fp)
  813be4:	e0bff983 	ldbu	r2,-26(fp)
  813be8:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  813bec:	e0fffa17 	ldw	r3,-24(fp)
  813bf0:	e0bff943 	ldbu	r2,-27(fp)
  813bf4:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  813bf8:	e0fffa17 	ldw	r3,-24(fp)
  813bfc:	e0bff8c3 	ldbu	r2,-29(fp)
  813c00:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  813c04:	e0fffa17 	ldw	r3,-24(fp)
  813c08:	e0bff883 	ldbu	r2,-30(fp)
  813c0c:	18800d45 	stb	r2,53(r3)
  813c10:	e0bff717 	ldw	r2,-36(fp)
  813c14:	e0bff215 	stw	r2,-56(fp)
  813c18:	e0bff217 	ldw	r2,-56(fp)
  813c1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  813c20:	008020b4 	movhi	r2,130
  813c24:	10bcbb44 	addi	r2,r2,-3347
  813c28:	10800003 	ldbu	r2,0(r2)
  813c2c:	10803fcc 	andi	r2,r2,255
  813c30:	10800058 	cmpnei	r2,r2,1
  813c34:	1000011e 	bne	r2,zero,813c3c <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  813c38:	080ee300 	call	80ee30 <OS_Sched>
    }
    return (OS_ERR_NONE);
  813c3c:	e03fff15 	stw	zero,-4(fp)
  813c40:	e0bfff17 	ldw	r2,-4(fp)
}
  813c44:	e037883a 	mov	sp,fp
  813c48:	dfc00117 	ldw	ra,4(sp)
  813c4c:	df000017 	ldw	fp,0(sp)
  813c50:	dec00204 	addi	sp,sp,8
  813c54:	f800283a 	ret

00813c58 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  813c58:	deffed04 	addi	sp,sp,-76
  813c5c:	dfc01215 	stw	ra,72(sp)
  813c60:	df001115 	stw	fp,68(sp)
  813c64:	df001104 	addi	fp,sp,68
  813c68:	e13ffb15 	stw	r4,-20(fp)
  813c6c:	e17ffc15 	stw	r5,-16(fp)
  813c70:	e1bffd15 	stw	r6,-12(fp)
  813c74:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  813c78:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  813c7c:	e0bffe03 	ldbu	r2,-8(fp)
  813c80:	10800570 	cmpltui	r2,r2,21
  813c84:	1000031e 	bne	r2,zero,813c94 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  813c88:	00800a84 	movi	r2,42
  813c8c:	e0bfff15 	stw	r2,-4(fp)
  813c90:	00006006 	br	813e14 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813c94:	0005303a 	rdctl	r2,status
  813c98:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813c9c:	e0fff717 	ldw	r3,-36(fp)
  813ca0:	00bfff84 	movi	r2,-2
  813ca4:	1884703a 	and	r2,r3,r2
  813ca8:	1001703a 	wrctl	status,r2
  
  return context;
  813cac:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  813cb0:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  813cb4:	008020b4 	movhi	r2,130
  813cb8:	10bcc904 	addi	r2,r2,-3292
  813cbc:	10800003 	ldbu	r2,0(r2)
  813cc0:	10803fcc 	andi	r2,r2,255
  813cc4:	1005003a 	cmpeq	r2,r2,zero
  813cc8:	1000071e 	bne	r2,zero,813ce8 <OSTaskCreate+0x90>
  813ccc:	e0bff817 	ldw	r2,-32(fp)
  813cd0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813cd4:	e0bff617 	ldw	r2,-40(fp)
  813cd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  813cdc:	00800f04 	movi	r2,60
  813ce0:	e0bfff15 	stw	r2,-4(fp)
  813ce4:	00004b06 	br	813e14 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  813ce8:	e0bffe03 	ldbu	r2,-8(fp)
  813cec:	00c020f4 	movhi	r3,131
  813cf0:	18da9904 	addi	r3,r3,27236
  813cf4:	1085883a 	add	r2,r2,r2
  813cf8:	1085883a 	add	r2,r2,r2
  813cfc:	10c5883a 	add	r2,r2,r3
  813d00:	10800017 	ldw	r2,0(r2)
  813d04:	1004c03a 	cmpne	r2,r2,zero
  813d08:	10003c1e 	bne	r2,zero,813dfc <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  813d0c:	e0bffe03 	ldbu	r2,-8(fp)
  813d10:	00c020f4 	movhi	r3,131
  813d14:	18da9904 	addi	r3,r3,27236
  813d18:	1085883a 	add	r2,r2,r2
  813d1c:	1085883a 	add	r2,r2,r2
  813d20:	10c7883a 	add	r3,r2,r3
  813d24:	00800044 	movi	r2,1
  813d28:	18800015 	stw	r2,0(r3)
  813d2c:	e0bff817 	ldw	r2,-32(fp)
  813d30:	e0bff515 	stw	r2,-44(fp)
  813d34:	e0bff517 	ldw	r2,-44(fp)
  813d38:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  813d3c:	e13ffb17 	ldw	r4,-20(fp)
  813d40:	e17ffc17 	ldw	r5,-16(fp)
  813d44:	e1bffd17 	ldw	r6,-12(fp)
  813d48:	000f883a 	mov	r7,zero
  813d4c:	081bf1c0 	call	81bf1c <OSTaskStkInit>
  813d50:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  813d54:	e13ffe03 	ldbu	r4,-8(fp)
  813d58:	d8000015 	stw	zero,0(sp)
  813d5c:	d8000115 	stw	zero,4(sp)
  813d60:	d8000215 	stw	zero,8(sp)
  813d64:	e17ffa17 	ldw	r5,-24(fp)
  813d68:	000d883a 	mov	r6,zero
  813d6c:	000f883a 	mov	r7,zero
  813d70:	080f2380 	call	80f238 <OS_TCBInit>
  813d74:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  813d78:	e0bff903 	ldbu	r2,-28(fp)
  813d7c:	1004c03a 	cmpne	r2,r2,zero
  813d80:	1000081e 	bne	r2,zero,813da4 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  813d84:	008020b4 	movhi	r2,130
  813d88:	10bcbb44 	addi	r2,r2,-3347
  813d8c:	10800003 	ldbu	r2,0(r2)
  813d90:	10803fcc 	andi	r2,r2,255
  813d94:	10800058 	cmpnei	r2,r2,1
  813d98:	1000151e 	bne	r2,zero,813df0 <OSTaskCreate+0x198>
                OS_Sched();
  813d9c:	080ee300 	call	80ee30 <OS_Sched>
  813da0:	00001306 	br	813df0 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813da4:	0005303a 	rdctl	r2,status
  813da8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813dac:	e0fff417 	ldw	r3,-48(fp)
  813db0:	00bfff84 	movi	r2,-2
  813db4:	1884703a 	and	r2,r3,r2
  813db8:	1001703a 	wrctl	status,r2
  
  return context;
  813dbc:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  813dc0:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  813dc4:	e0bffe03 	ldbu	r2,-8(fp)
  813dc8:	00c020f4 	movhi	r3,131
  813dcc:	18da9904 	addi	r3,r3,27236
  813dd0:	1085883a 	add	r2,r2,r2
  813dd4:	1085883a 	add	r2,r2,r2
  813dd8:	10c5883a 	add	r2,r2,r3
  813ddc:	10000015 	stw	zero,0(r2)
  813de0:	e0bff817 	ldw	r2,-32(fp)
  813de4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813de8:	e0bff317 	ldw	r2,-52(fp)
  813dec:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  813df0:	e0bff903 	ldbu	r2,-28(fp)
  813df4:	e0bfff15 	stw	r2,-4(fp)
  813df8:	00000606 	br	813e14 <OSTaskCreate+0x1bc>
  813dfc:	e0bff817 	ldw	r2,-32(fp)
  813e00:	e0bff215 	stw	r2,-56(fp)
  813e04:	e0bff217 	ldw	r2,-56(fp)
  813e08:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  813e0c:	00800a04 	movi	r2,40
  813e10:	e0bfff15 	stw	r2,-4(fp)
  813e14:	e0bfff17 	ldw	r2,-4(fp)
}
  813e18:	e037883a 	mov	sp,fp
  813e1c:	dfc00117 	ldw	ra,4(sp)
  813e20:	df000017 	ldw	fp,0(sp)
  813e24:	dec00204 	addi	sp,sp,8
  813e28:	f800283a 	ret

00813e2c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  813e2c:	deffeb04 	addi	sp,sp,-84
  813e30:	dfc01415 	stw	ra,80(sp)
  813e34:	df001315 	stw	fp,76(sp)
  813e38:	df001304 	addi	fp,sp,76
  813e3c:	e13ff915 	stw	r4,-28(fp)
  813e40:	e17ffa15 	stw	r5,-24(fp)
  813e44:	e1bffb15 	stw	r6,-20(fp)
  813e48:	e0800217 	ldw	r2,8(fp)
  813e4c:	e0c00617 	ldw	r3,24(fp)
  813e50:	e1fffc05 	stb	r7,-16(fp)
  813e54:	e0bffd0d 	sth	r2,-12(fp)
  813e58:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  813e5c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  813e60:	e0bffc03 	ldbu	r2,-16(fp)
  813e64:	10800570 	cmpltui	r2,r2,21
  813e68:	1000031e 	bne	r2,zero,813e78 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  813e6c:	00800a84 	movi	r2,42
  813e70:	e0bfff15 	stw	r2,-4(fp)
  813e74:	00006706 	br	814014 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813e78:	0005303a 	rdctl	r2,status
  813e7c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813e80:	e0fff517 	ldw	r3,-44(fp)
  813e84:	00bfff84 	movi	r2,-2
  813e88:	1884703a 	and	r2,r3,r2
  813e8c:	1001703a 	wrctl	status,r2
  
  return context;
  813e90:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  813e94:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  813e98:	008020b4 	movhi	r2,130
  813e9c:	10bcc904 	addi	r2,r2,-3292
  813ea0:	10800003 	ldbu	r2,0(r2)
  813ea4:	10803fcc 	andi	r2,r2,255
  813ea8:	1005003a 	cmpeq	r2,r2,zero
  813eac:	1000071e 	bne	r2,zero,813ecc <OSTaskCreateExt+0xa0>
  813eb0:	e0bff617 	ldw	r2,-40(fp)
  813eb4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813eb8:	e0bff417 	ldw	r2,-48(fp)
  813ebc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  813ec0:	00800f04 	movi	r2,60
  813ec4:	e0bfff15 	stw	r2,-4(fp)
  813ec8:	00005206 	br	814014 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  813ecc:	e0bffc03 	ldbu	r2,-16(fp)
  813ed0:	00c020f4 	movhi	r3,131
  813ed4:	18da9904 	addi	r3,r3,27236
  813ed8:	1085883a 	add	r2,r2,r2
  813edc:	1085883a 	add	r2,r2,r2
  813ee0:	10c5883a 	add	r2,r2,r3
  813ee4:	10800017 	ldw	r2,0(r2)
  813ee8:	1004c03a 	cmpne	r2,r2,zero
  813eec:	1000431e 	bne	r2,zero,813ffc <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  813ef0:	e0bffc03 	ldbu	r2,-16(fp)
  813ef4:	00c020f4 	movhi	r3,131
  813ef8:	18da9904 	addi	r3,r3,27236
  813efc:	1085883a 	add	r2,r2,r2
  813f00:	1085883a 	add	r2,r2,r2
  813f04:	10c7883a 	add	r3,r2,r3
  813f08:	00800044 	movi	r2,1
  813f0c:	18800015 	stw	r2,0(r3)
  813f10:	e0bff617 	ldw	r2,-40(fp)
  813f14:	e0bff315 	stw	r2,-52(fp)
  813f18:	e0bff317 	ldw	r2,-52(fp)
  813f1c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  813f20:	e1bffe0b 	ldhu	r6,-8(fp)
  813f24:	e1000317 	ldw	r4,12(fp)
  813f28:	e1400417 	ldw	r5,16(fp)
  813f2c:	08150a80 	call	8150a8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  813f30:	e1fffe0b 	ldhu	r7,-8(fp)
  813f34:	e13ff917 	ldw	r4,-28(fp)
  813f38:	e17ffa17 	ldw	r5,-24(fp)
  813f3c:	e1bffb17 	ldw	r6,-20(fp)
  813f40:	081bf1c0 	call	81bf1c <OSTaskStkInit>
  813f44:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  813f48:	e13ffc03 	ldbu	r4,-16(fp)
  813f4c:	e1fffd0b 	ldhu	r7,-12(fp)
  813f50:	e0fffe0b 	ldhu	r3,-8(fp)
  813f54:	e0800417 	ldw	r2,16(fp)
  813f58:	d8800015 	stw	r2,0(sp)
  813f5c:	e0800517 	ldw	r2,20(fp)
  813f60:	d8800115 	stw	r2,4(sp)
  813f64:	d8c00215 	stw	r3,8(sp)
  813f68:	e17ff817 	ldw	r5,-32(fp)
  813f6c:	e1800317 	ldw	r6,12(fp)
  813f70:	080f2380 	call	80f238 <OS_TCBInit>
  813f74:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  813f78:	e0bff703 	ldbu	r2,-36(fp)
  813f7c:	1004c03a 	cmpne	r2,r2,zero
  813f80:	1000081e 	bne	r2,zero,813fa4 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  813f84:	008020b4 	movhi	r2,130
  813f88:	10bcbb44 	addi	r2,r2,-3347
  813f8c:	10800003 	ldbu	r2,0(r2)
  813f90:	10803fcc 	andi	r2,r2,255
  813f94:	10800058 	cmpnei	r2,r2,1
  813f98:	1000151e 	bne	r2,zero,813ff0 <OSTaskCreateExt+0x1c4>
                OS_Sched();
  813f9c:	080ee300 	call	80ee30 <OS_Sched>
  813fa0:	00001306 	br	813ff0 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813fa4:	0005303a 	rdctl	r2,status
  813fa8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813fac:	e0fff217 	ldw	r3,-56(fp)
  813fb0:	00bfff84 	movi	r2,-2
  813fb4:	1884703a 	and	r2,r3,r2
  813fb8:	1001703a 	wrctl	status,r2
  
  return context;
  813fbc:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  813fc0:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  813fc4:	e0bffc03 	ldbu	r2,-16(fp)
  813fc8:	00c020f4 	movhi	r3,131
  813fcc:	18da9904 	addi	r3,r3,27236
  813fd0:	1085883a 	add	r2,r2,r2
  813fd4:	1085883a 	add	r2,r2,r2
  813fd8:	10c5883a 	add	r2,r2,r3
  813fdc:	10000015 	stw	zero,0(r2)
  813fe0:	e0bff617 	ldw	r2,-40(fp)
  813fe4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813fe8:	e0bff117 	ldw	r2,-60(fp)
  813fec:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  813ff0:	e0bff703 	ldbu	r2,-36(fp)
  813ff4:	e0bfff15 	stw	r2,-4(fp)
  813ff8:	00000606 	br	814014 <OSTaskCreateExt+0x1e8>
  813ffc:	e0bff617 	ldw	r2,-40(fp)
  814000:	e0bff015 	stw	r2,-64(fp)
  814004:	e0bff017 	ldw	r2,-64(fp)
  814008:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  81400c:	00800a04 	movi	r2,40
  814010:	e0bfff15 	stw	r2,-4(fp)
  814014:	e0bfff17 	ldw	r2,-4(fp)
}
  814018:	e037883a 	mov	sp,fp
  81401c:	dfc00117 	ldw	ra,4(sp)
  814020:	df000017 	ldw	fp,0(sp)
  814024:	dec00204 	addi	sp,sp,8
  814028:	f800283a 	ret

0081402c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  81402c:	defff304 	addi	sp,sp,-52
  814030:	dfc00c15 	stw	ra,48(sp)
  814034:	df000b15 	stw	fp,44(sp)
  814038:	df000b04 	addi	fp,sp,44
  81403c:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  814040:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  814044:	008020b4 	movhi	r2,130
  814048:	10bcc904 	addi	r2,r2,-3292
  81404c:	10800003 	ldbu	r2,0(r2)
  814050:	10803fcc 	andi	r2,r2,255
  814054:	1005003a 	cmpeq	r2,r2,zero
  814058:	1000031e 	bne	r2,zero,814068 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  81405c:	00801004 	movi	r2,64
  814060:	e0bfff15 	stw	r2,-4(fp)
  814064:	0000ee06 	br	814420 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  814068:	e0bffe03 	ldbu	r2,-8(fp)
  81406c:	10800518 	cmpnei	r2,r2,20
  814070:	1000031e 	bne	r2,zero,814080 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  814074:	00800f84 	movi	r2,62
  814078:	e0bfff15 	stw	r2,-4(fp)
  81407c:	0000e806 	br	814420 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  814080:	e0bffe03 	ldbu	r2,-8(fp)
  814084:	10800530 	cmpltui	r2,r2,20
  814088:	1000061e 	bne	r2,zero,8140a4 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  81408c:	e0bffe03 	ldbu	r2,-8(fp)
  814090:	10803fe0 	cmpeqi	r2,r2,255
  814094:	1000031e 	bne	r2,zero,8140a4 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  814098:	00800a84 	movi	r2,42
  81409c:	e0bfff15 	stw	r2,-4(fp)
  8140a0:	0000df06 	br	814420 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8140a4:	0005303a 	rdctl	r2,status
  8140a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8140ac:	e0fffa17 	ldw	r3,-24(fp)
  8140b0:	00bfff84 	movi	r2,-2
  8140b4:	1884703a 	and	r2,r3,r2
  8140b8:	1001703a 	wrctl	status,r2
  
  return context;
  8140bc:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  8140c0:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  8140c4:	e0bffe03 	ldbu	r2,-8(fp)
  8140c8:	10803fd8 	cmpnei	r2,r2,255
  8140cc:	1000051e 	bne	r2,zero,8140e4 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  8140d0:	008020b4 	movhi	r2,130
  8140d4:	10bcca04 	addi	r2,r2,-3288
  8140d8:	10800017 	ldw	r2,0(r2)
  8140dc:	10800c83 	ldbu	r2,50(r2)
  8140e0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8140e4:	e0bffe03 	ldbu	r2,-8(fp)
  8140e8:	00c020f4 	movhi	r3,131
  8140ec:	18da9904 	addi	r3,r3,27236
  8140f0:	1085883a 	add	r2,r2,r2
  8140f4:	1085883a 	add	r2,r2,r2
  8140f8:	10c5883a 	add	r2,r2,r3
  8140fc:	10800017 	ldw	r2,0(r2)
  814100:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  814104:	e0bffc17 	ldw	r2,-16(fp)
  814108:	1004c03a 	cmpne	r2,r2,zero
  81410c:	1000071e 	bne	r2,zero,81412c <OSTaskDel+0x100>
  814110:	e0bffb17 	ldw	r2,-20(fp)
  814114:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814118:	e0bff917 	ldw	r2,-28(fp)
  81411c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  814120:	008010c4 	movi	r2,67
  814124:	e0bfff15 	stw	r2,-4(fp)
  814128:	0000bd06 	br	814420 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  81412c:	e0bffc17 	ldw	r2,-16(fp)
  814130:	10800058 	cmpnei	r2,r2,1
  814134:	1000071e 	bne	r2,zero,814154 <OSTaskDel+0x128>
  814138:	e0bffb17 	ldw	r2,-20(fp)
  81413c:	e0bff815 	stw	r2,-32(fp)
  814140:	e0bff817 	ldw	r2,-32(fp)
  814144:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  814148:	00800f44 	movi	r2,61
  81414c:	e0bfff15 	stw	r2,-4(fp)
  814150:	0000b306 	br	814420 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  814154:	e0bffc17 	ldw	r2,-16(fp)
  814158:	10800d03 	ldbu	r2,52(r2)
  81415c:	11003fcc 	andi	r4,r2,255
  814160:	e0bffc17 	ldw	r2,-16(fp)
  814164:	10800d03 	ldbu	r2,52(r2)
  814168:	10c03fcc 	andi	r3,r2,255
  81416c:	008020b4 	movhi	r2,130
  814170:	10bcc744 	addi	r2,r2,-3299
  814174:	10c5883a 	add	r2,r2,r3
  814178:	10800003 	ldbu	r2,0(r2)
  81417c:	1007883a 	mov	r3,r2
  814180:	e0bffc17 	ldw	r2,-16(fp)
  814184:	10800d43 	ldbu	r2,53(r2)
  814188:	0084303a 	nor	r2,zero,r2
  81418c:	1884703a 	and	r2,r3,r2
  814190:	1007883a 	mov	r3,r2
  814194:	008020b4 	movhi	r2,130
  814198:	10bcc744 	addi	r2,r2,-3299
  81419c:	1105883a 	add	r2,r2,r4
  8141a0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  8141a4:	e0bffc17 	ldw	r2,-16(fp)
  8141a8:	10800d03 	ldbu	r2,52(r2)
  8141ac:	10c03fcc 	andi	r3,r2,255
  8141b0:	008020b4 	movhi	r2,130
  8141b4:	10bcc744 	addi	r2,r2,-3299
  8141b8:	10c5883a 	add	r2,r2,r3
  8141bc:	10800003 	ldbu	r2,0(r2)
  8141c0:	10803fcc 	andi	r2,r2,255
  8141c4:	1004c03a 	cmpne	r2,r2,zero
  8141c8:	10000c1e 	bne	r2,zero,8141fc <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  8141cc:	e0bffc17 	ldw	r2,-16(fp)
  8141d0:	10800d83 	ldbu	r2,54(r2)
  8141d4:	0084303a 	nor	r2,zero,r2
  8141d8:	1007883a 	mov	r3,r2
  8141dc:	008020b4 	movhi	r2,130
  8141e0:	10bcc704 	addi	r2,r2,-3300
  8141e4:	10800003 	ldbu	r2,0(r2)
  8141e8:	1884703a 	and	r2,r3,r2
  8141ec:	1007883a 	mov	r3,r2
  8141f0:	008020b4 	movhi	r2,130
  8141f4:	10bcc704 	addi	r2,r2,-3300
  8141f8:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  8141fc:	e0bffc17 	ldw	r2,-16(fp)
  814200:	10800717 	ldw	r2,28(r2)
  814204:	1005003a 	cmpeq	r2,r2,zero
  814208:	1000041e 	bne	r2,zero,81421c <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  81420c:	e0bffc17 	ldw	r2,-16(fp)
  814210:	11400717 	ldw	r5,28(r2)
  814214:	e13ffc17 	ldw	r4,-16(fp)
  814218:	080e7e80 	call	80e7e8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  81421c:	e0bffc17 	ldw	r2,-16(fp)
  814220:	10800817 	ldw	r2,32(r2)
  814224:	1005003a 	cmpeq	r2,r2,zero
  814228:	1000041e 	bne	r2,zero,81423c <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  81422c:	e0bffc17 	ldw	r2,-16(fp)
  814230:	11400817 	ldw	r5,32(r2)
  814234:	e13ffc17 	ldw	r4,-16(fp)
  814238:	080e8a00 	call	80e8a0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  81423c:	e0bffc17 	ldw	r2,-16(fp)
  814240:	10800a17 	ldw	r2,40(r2)
  814244:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  814248:	e0bffd17 	ldw	r2,-12(fp)
  81424c:	1005003a 	cmpeq	r2,r2,zero
  814250:	1000021e 	bne	r2,zero,81425c <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  814254:	e13ffd17 	ldw	r4,-12(fp)
  814258:	0810f340 	call	810f34 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  81425c:	e0bffc17 	ldw	r2,-16(fp)
  814260:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  814264:	e0bffc17 	ldw	r2,-16(fp)
  814268:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  81426c:	e0bffc17 	ldw	r2,-16(fp)
  814270:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  814274:	008020b4 	movhi	r2,130
  814278:	10bcbb04 	addi	r2,r2,-3348
  81427c:	10800003 	ldbu	r2,0(r2)
  814280:	10803fcc 	andi	r2,r2,255
  814284:	10803fe0 	cmpeqi	r2,r2,255
  814288:	1000081e 	bne	r2,zero,8142ac <OSTaskDel+0x280>
        OSLockNesting++;
  81428c:	008020b4 	movhi	r2,130
  814290:	10bcbb04 	addi	r2,r2,-3348
  814294:	10800003 	ldbu	r2,0(r2)
  814298:	10800044 	addi	r2,r2,1
  81429c:	1007883a 	mov	r3,r2
  8142a0:	008020b4 	movhi	r2,130
  8142a4:	10bcbb04 	addi	r2,r2,-3348
  8142a8:	10c00005 	stb	r3,0(r2)
  8142ac:	e0bffb17 	ldw	r2,-20(fp)
  8142b0:	e0bff715 	stw	r2,-36(fp)
  8142b4:	e0bff717 	ldw	r2,-36(fp)
  8142b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  8142bc:	080e3d40 	call	80e3d4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8142c0:	0005303a 	rdctl	r2,status
  8142c4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8142c8:	e0fff617 	ldw	r3,-40(fp)
  8142cc:	00bfff84 	movi	r2,-2
  8142d0:	1884703a 	and	r2,r3,r2
  8142d4:	1001703a 	wrctl	status,r2
  
  return context;
  8142d8:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  8142dc:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  8142e0:	008020b4 	movhi	r2,130
  8142e4:	10bcbb04 	addi	r2,r2,-3348
  8142e8:	10800003 	ldbu	r2,0(r2)
  8142ec:	10803fcc 	andi	r2,r2,255
  8142f0:	1005003a 	cmpeq	r2,r2,zero
  8142f4:	1000081e 	bne	r2,zero,814318 <OSTaskDel+0x2ec>
        OSLockNesting--;
  8142f8:	008020b4 	movhi	r2,130
  8142fc:	10bcbb04 	addi	r2,r2,-3348
  814300:	10800003 	ldbu	r2,0(r2)
  814304:	10bfffc4 	addi	r2,r2,-1
  814308:	1007883a 	mov	r3,r2
  81430c:	008020b4 	movhi	r2,130
  814310:	10bcbb04 	addi	r2,r2,-3348
  814314:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  814318:	e13ffc17 	ldw	r4,-16(fp)
  81431c:	081c24c0 	call	81c24c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  814320:	008020b4 	movhi	r2,130
  814324:	10bcc344 	addi	r2,r2,-3315
  814328:	10800003 	ldbu	r2,0(r2)
  81432c:	10bfffc4 	addi	r2,r2,-1
  814330:	1007883a 	mov	r3,r2
  814334:	008020b4 	movhi	r2,130
  814338:	10bcc344 	addi	r2,r2,-3315
  81433c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  814340:	e0bffe03 	ldbu	r2,-8(fp)
  814344:	00c020f4 	movhi	r3,131
  814348:	18da9904 	addi	r3,r3,27236
  81434c:	1085883a 	add	r2,r2,r2
  814350:	1085883a 	add	r2,r2,r2
  814354:	10c5883a 	add	r2,r2,r3
  814358:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  81435c:	e0bffc17 	ldw	r2,-16(fp)
  814360:	10800617 	ldw	r2,24(r2)
  814364:	1004c03a 	cmpne	r2,r2,zero
  814368:	1000091e 	bne	r2,zero,814390 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  81436c:	e0bffc17 	ldw	r2,-16(fp)
  814370:	10800517 	ldw	r2,20(r2)
  814374:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  814378:	e0bffc17 	ldw	r2,-16(fp)
  81437c:	10c00517 	ldw	r3,20(r2)
  814380:	008020b4 	movhi	r2,130
  814384:	10bcbe04 	addi	r2,r2,-3336
  814388:	10c00015 	stw	r3,0(r2)
  81438c:	00000a06 	br	8143b8 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  814390:	e0bffc17 	ldw	r2,-16(fp)
  814394:	10c00617 	ldw	r3,24(r2)
  814398:	e0bffc17 	ldw	r2,-16(fp)
  81439c:	10800517 	ldw	r2,20(r2)
  8143a0:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  8143a4:	e0bffc17 	ldw	r2,-16(fp)
  8143a8:	10c00517 	ldw	r3,20(r2)
  8143ac:	e0bffc17 	ldw	r2,-16(fp)
  8143b0:	10800617 	ldw	r2,24(r2)
  8143b4:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  8143b8:	008020b4 	movhi	r2,130
  8143bc:	10bcc204 	addi	r2,r2,-3320
  8143c0:	10c00017 	ldw	r3,0(r2)
  8143c4:	e0bffc17 	ldw	r2,-16(fp)
  8143c8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  8143cc:	00c020b4 	movhi	r3,130
  8143d0:	18fcc204 	addi	r3,r3,-3320
  8143d4:	e0bffc17 	ldw	r2,-16(fp)
  8143d8:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  8143dc:	e0fffc17 	ldw	r3,-16(fp)
  8143e0:	00800fc4 	movi	r2,63
  8143e4:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  8143e8:	e0bffc17 	ldw	r2,-16(fp)
  8143ec:	10001345 	stb	zero,77(r2)
  8143f0:	e0bffb17 	ldw	r2,-20(fp)
  8143f4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8143f8:	e0bff517 	ldw	r2,-44(fp)
  8143fc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  814400:	008020b4 	movhi	r2,130
  814404:	10bcbb44 	addi	r2,r2,-3347
  814408:	10800003 	ldbu	r2,0(r2)
  81440c:	10803fcc 	andi	r2,r2,255
  814410:	10800058 	cmpnei	r2,r2,1
  814414:	1000011e 	bne	r2,zero,81441c <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  814418:	080ee300 	call	80ee30 <OS_Sched>
    }
    return (OS_ERR_NONE);
  81441c:	e03fff15 	stw	zero,-4(fp)
  814420:	e0bfff17 	ldw	r2,-4(fp)
}
  814424:	e037883a 	mov	sp,fp
  814428:	dfc00117 	ldw	ra,4(sp)
  81442c:	df000017 	ldw	fp,0(sp)
  814430:	dec00204 	addi	sp,sp,8
  814434:	f800283a 	ret

00814438 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  814438:	defff404 	addi	sp,sp,-48
  81443c:	df000b15 	stw	fp,44(sp)
  814440:	df000b04 	addi	fp,sp,44
  814444:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814448:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  81444c:	e0bffe03 	ldbu	r2,-8(fp)
  814450:	10800518 	cmpnei	r2,r2,20
  814454:	1000031e 	bne	r2,zero,814464 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  814458:	00800f84 	movi	r2,62
  81445c:	e0bfff15 	stw	r2,-4(fp)
  814460:	00004c06 	br	814594 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  814464:	e0bffe03 	ldbu	r2,-8(fp)
  814468:	10800530 	cmpltui	r2,r2,20
  81446c:	1000061e 	bne	r2,zero,814488 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  814470:	e0bffe03 	ldbu	r2,-8(fp)
  814474:	10803fe0 	cmpeqi	r2,r2,255
  814478:	1000031e 	bne	r2,zero,814488 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  81447c:	00800a84 	movi	r2,42
  814480:	e0bfff15 	stw	r2,-4(fp)
  814484:	00004306 	br	814594 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  814488:	e0bffe03 	ldbu	r2,-8(fp)
  81448c:	10803fd8 	cmpnei	r2,r2,255
  814490:	1000141e 	bne	r2,zero,8144e4 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814494:	0005303a 	rdctl	r2,status
  814498:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81449c:	e0fffa17 	ldw	r3,-24(fp)
  8144a0:	00bfff84 	movi	r2,-2
  8144a4:	1884703a 	and	r2,r3,r2
  8144a8:	1001703a 	wrctl	status,r2
  
  return context;
  8144ac:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  8144b0:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  8144b4:	008020b4 	movhi	r2,130
  8144b8:	10bcca04 	addi	r2,r2,-3288
  8144bc:	10800017 	ldw	r2,0(r2)
  8144c0:	10800dc3 	ldbu	r2,55(r2)
  8144c4:	e0bffd05 	stb	r2,-12(fp)
  8144c8:	e0bffb17 	ldw	r2,-20(fp)
  8144cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8144d0:	e0bff917 	ldw	r2,-28(fp)
  8144d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  8144d8:	e0bffd03 	ldbu	r2,-12(fp)
  8144dc:	e0bfff15 	stw	r2,-4(fp)
  8144e0:	00002c06 	br	814594 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8144e4:	0005303a 	rdctl	r2,status
  8144e8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8144ec:	e0fff817 	ldw	r3,-32(fp)
  8144f0:	00bfff84 	movi	r2,-2
  8144f4:	1884703a 	and	r2,r3,r2
  8144f8:	1001703a 	wrctl	status,r2
  
  return context;
  8144fc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  814500:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  814504:	e0bffe03 	ldbu	r2,-8(fp)
  814508:	00c020f4 	movhi	r3,131
  81450c:	18da9904 	addi	r3,r3,27236
  814510:	1085883a 	add	r2,r2,r2
  814514:	1085883a 	add	r2,r2,r2
  814518:	10c5883a 	add	r2,r2,r3
  81451c:	10800017 	ldw	r2,0(r2)
  814520:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  814524:	e0bffc17 	ldw	r2,-16(fp)
  814528:	1004c03a 	cmpne	r2,r2,zero
  81452c:	1000071e 	bne	r2,zero,81454c <OSTaskDelReq+0x114>
  814530:	e0bffb17 	ldw	r2,-20(fp)
  814534:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814538:	e0bff717 	ldw	r2,-36(fp)
  81453c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  814540:	008010c4 	movi	r2,67
  814544:	e0bfff15 	stw	r2,-4(fp)
  814548:	00001206 	br	814594 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  81454c:	e0bffc17 	ldw	r2,-16(fp)
  814550:	10800058 	cmpnei	r2,r2,1
  814554:	1000071e 	bne	r2,zero,814574 <OSTaskDelReq+0x13c>
  814558:	e0bffb17 	ldw	r2,-20(fp)
  81455c:	e0bff615 	stw	r2,-40(fp)
  814560:	e0bff617 	ldw	r2,-40(fp)
  814564:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  814568:	00800f44 	movi	r2,61
  81456c:	e0bfff15 	stw	r2,-4(fp)
  814570:	00000806 	br	814594 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  814574:	e0fffc17 	ldw	r3,-16(fp)
  814578:	00800fc4 	movi	r2,63
  81457c:	18800dc5 	stb	r2,55(r3)
  814580:	e0bffb17 	ldw	r2,-20(fp)
  814584:	e0bff515 	stw	r2,-44(fp)
  814588:	e0bff517 	ldw	r2,-44(fp)
  81458c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  814590:	e03fff15 	stw	zero,-4(fp)
  814594:	e0bfff17 	ldw	r2,-4(fp)
}
  814598:	e037883a 	mov	sp,fp
  81459c:	df000017 	ldw	fp,0(sp)
  8145a0:	dec00104 	addi	sp,sp,4
  8145a4:	f800283a 	ret

008145a8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  8145a8:	defff304 	addi	sp,sp,-52
  8145ac:	dfc00c15 	stw	ra,48(sp)
  8145b0:	df000b15 	stw	fp,44(sp)
  8145b4:	df000b04 	addi	fp,sp,44
  8145b8:	e17ffd15 	stw	r5,-12(fp)
  8145bc:	e1bffe15 	stw	r6,-8(fp)
  8145c0:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  8145c4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  8145c8:	e0bffe17 	ldw	r2,-8(fp)
  8145cc:	1004c03a 	cmpne	r2,r2,zero
  8145d0:	1000021e 	bne	r2,zero,8145dc <OSTaskNameGet+0x34>
        return (0);
  8145d4:	e03fff15 	stw	zero,-4(fp)
  8145d8:	00005b06 	br	814748 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  8145dc:	e0bffc03 	ldbu	r2,-16(fp)
  8145e0:	10800570 	cmpltui	r2,r2,21
  8145e4:	1000081e 	bne	r2,zero,814608 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  8145e8:	e0bffc03 	ldbu	r2,-16(fp)
  8145ec:	10803fe0 	cmpeqi	r2,r2,255
  8145f0:	1000051e 	bne	r2,zero,814608 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  8145f4:	e0fffe17 	ldw	r3,-8(fp)
  8145f8:	00800a84 	movi	r2,42
  8145fc:	18800005 	stb	r2,0(r3)
            return (0);
  814600:	e03fff15 	stw	zero,-4(fp)
  814604:	00005006 	br	814748 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  814608:	e0bffd17 	ldw	r2,-12(fp)
  81460c:	1004c03a 	cmpne	r2,r2,zero
  814610:	1000051e 	bne	r2,zero,814628 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  814614:	e0fffe17 	ldw	r3,-8(fp)
  814618:	00800304 	movi	r2,12
  81461c:	18800005 	stb	r2,0(r3)
        return (0);
  814620:	e03fff15 	stw	zero,-4(fp)
  814624:	00004806 	br	814748 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  814628:	008020b4 	movhi	r2,130
  81462c:	10bcc904 	addi	r2,r2,-3292
  814630:	10800003 	ldbu	r2,0(r2)
  814634:	10803fcc 	andi	r2,r2,255
  814638:	1005003a 	cmpeq	r2,r2,zero
  81463c:	1000051e 	bne	r2,zero,814654 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  814640:	e0fffe17 	ldw	r3,-8(fp)
  814644:	00800444 	movi	r2,17
  814648:	18800005 	stb	r2,0(r3)
        return (0);
  81464c:	e03fff15 	stw	zero,-4(fp)
  814650:	00003d06 	br	814748 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814654:	0005303a 	rdctl	r2,status
  814658:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81465c:	e0fff817 	ldw	r3,-32(fp)
  814660:	00bfff84 	movi	r2,-2
  814664:	1884703a 	and	r2,r3,r2
  814668:	1001703a 	wrctl	status,r2
  
  return context;
  81466c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  814670:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  814674:	e0bffc03 	ldbu	r2,-16(fp)
  814678:	10803fd8 	cmpnei	r2,r2,255
  81467c:	1000051e 	bne	r2,zero,814694 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  814680:	008020b4 	movhi	r2,130
  814684:	10bcca04 	addi	r2,r2,-3288
  814688:	10800017 	ldw	r2,0(r2)
  81468c:	10800c83 	ldbu	r2,50(r2)
  814690:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  814694:	e0bffc03 	ldbu	r2,-16(fp)
  814698:	00c020f4 	movhi	r3,131
  81469c:	18da9904 	addi	r3,r3,27236
  8146a0:	1085883a 	add	r2,r2,r2
  8146a4:	1085883a 	add	r2,r2,r2
  8146a8:	10c5883a 	add	r2,r2,r3
  8146ac:	10800017 	ldw	r2,0(r2)
  8146b0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  8146b4:	e0bffb17 	ldw	r2,-20(fp)
  8146b8:	1004c03a 	cmpne	r2,r2,zero
  8146bc:	1000091e 	bne	r2,zero,8146e4 <OSTaskNameGet+0x13c>
  8146c0:	e0bff917 	ldw	r2,-28(fp)
  8146c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8146c8:	e0bff717 	ldw	r2,-36(fp)
  8146cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8146d0:	e0fffe17 	ldw	r3,-8(fp)
  8146d4:	008010c4 	movi	r2,67
  8146d8:	18800005 	stb	r2,0(r3)
        return (0);
  8146dc:	e03fff15 	stw	zero,-4(fp)
  8146e0:	00001906 	br	814748 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  8146e4:	e0bffb17 	ldw	r2,-20(fp)
  8146e8:	10800058 	cmpnei	r2,r2,1
  8146ec:	1000091e 	bne	r2,zero,814714 <OSTaskNameGet+0x16c>
  8146f0:	e0bff917 	ldw	r2,-28(fp)
  8146f4:	e0bff615 	stw	r2,-40(fp)
  8146f8:	e0bff617 	ldw	r2,-40(fp)
  8146fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  814700:	e0fffe17 	ldw	r3,-8(fp)
  814704:	008010c4 	movi	r2,67
  814708:	18800005 	stb	r2,0(r3)
        return (0);
  81470c:	e03fff15 	stw	zero,-4(fp)
  814710:	00000d06 	br	814748 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  814714:	e0bffb17 	ldw	r2,-20(fp)
  814718:	11401304 	addi	r5,r2,76
  81471c:	e13ffd17 	ldw	r4,-12(fp)
  814720:	080ef740 	call	80ef74 <OS_StrCopy>
  814724:	e0bffa05 	stb	r2,-24(fp)
  814728:	e0bff917 	ldw	r2,-28(fp)
  81472c:	e0bff515 	stw	r2,-44(fp)
  814730:	e0bff517 	ldw	r2,-44(fp)
  814734:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  814738:	e0bffe17 	ldw	r2,-8(fp)
  81473c:	10000005 	stb	zero,0(r2)
    return (len);
  814740:	e0bffa03 	ldbu	r2,-24(fp)
  814744:	e0bfff15 	stw	r2,-4(fp)
  814748:	e0bfff17 	ldw	r2,-4(fp)
}
  81474c:	e037883a 	mov	sp,fp
  814750:	dfc00117 	ldw	ra,4(sp)
  814754:	df000017 	ldw	fp,0(sp)
  814758:	dec00204 	addi	sp,sp,8
  81475c:	f800283a 	ret

00814760 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  814760:	defff304 	addi	sp,sp,-52
  814764:	dfc00c15 	stw	ra,48(sp)
  814768:	df000b15 	stw	fp,44(sp)
  81476c:	df000b04 	addi	fp,sp,44
  814770:	e17ffe15 	stw	r5,-8(fp)
  814774:	e1bfff15 	stw	r6,-4(fp)
  814778:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  81477c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  814780:	e0bfff17 	ldw	r2,-4(fp)
  814784:	1005003a 	cmpeq	r2,r2,zero
  814788:	1000611e 	bne	r2,zero,814910 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  81478c:	e0bffd03 	ldbu	r2,-12(fp)
  814790:	10800570 	cmpltui	r2,r2,21
  814794:	1000071e 	bne	r2,zero,8147b4 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  814798:	e0bffd03 	ldbu	r2,-12(fp)
  81479c:	10803fe0 	cmpeqi	r2,r2,255
  8147a0:	1000041e 	bne	r2,zero,8147b4 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  8147a4:	e0ffff17 	ldw	r3,-4(fp)
  8147a8:	00800a84 	movi	r2,42
  8147ac:	18800005 	stb	r2,0(r3)
            return;
  8147b0:	00005706 	br	814910 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  8147b4:	e0bffe17 	ldw	r2,-8(fp)
  8147b8:	1004c03a 	cmpne	r2,r2,zero
  8147bc:	1000041e 	bne	r2,zero,8147d0 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  8147c0:	e0ffff17 	ldw	r3,-4(fp)
  8147c4:	00800304 	movi	r2,12
  8147c8:	18800005 	stb	r2,0(r3)
        return;
  8147cc:	00005006 	br	814910 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  8147d0:	008020b4 	movhi	r2,130
  8147d4:	10bcc904 	addi	r2,r2,-3292
  8147d8:	10800003 	ldbu	r2,0(r2)
  8147dc:	10803fcc 	andi	r2,r2,255
  8147e0:	1005003a 	cmpeq	r2,r2,zero
  8147e4:	1000041e 	bne	r2,zero,8147f8 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  8147e8:	e0ffff17 	ldw	r3,-4(fp)
  8147ec:	00800484 	movi	r2,18
  8147f0:	18800005 	stb	r2,0(r3)
        return;
  8147f4:	00004606 	br	814910 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8147f8:	0005303a 	rdctl	r2,status
  8147fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814800:	e0fff917 	ldw	r3,-28(fp)
  814804:	00bfff84 	movi	r2,-2
  814808:	1884703a 	and	r2,r3,r2
  81480c:	1001703a 	wrctl	status,r2
  
  return context;
  814810:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  814814:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  814818:	e0bffd03 	ldbu	r2,-12(fp)
  81481c:	10803fd8 	cmpnei	r2,r2,255
  814820:	1000051e 	bne	r2,zero,814838 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  814824:	008020b4 	movhi	r2,130
  814828:	10bcca04 	addi	r2,r2,-3288
  81482c:	10800017 	ldw	r2,0(r2)
  814830:	10800c83 	ldbu	r2,50(r2)
  814834:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  814838:	e0bffd03 	ldbu	r2,-12(fp)
  81483c:	00c020f4 	movhi	r3,131
  814840:	18da9904 	addi	r3,r3,27236
  814844:	1085883a 	add	r2,r2,r2
  814848:	1085883a 	add	r2,r2,r2
  81484c:	10c5883a 	add	r2,r2,r3
  814850:	10800017 	ldw	r2,0(r2)
  814854:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  814858:	e0bffb17 	ldw	r2,-20(fp)
  81485c:	1004c03a 	cmpne	r2,r2,zero
  814860:	1000081e 	bne	r2,zero,814884 <OSTaskNameSet+0x124>
  814864:	e0bffa17 	ldw	r2,-24(fp)
  814868:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81486c:	e0bff817 	ldw	r2,-32(fp)
  814870:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  814874:	e0ffff17 	ldw	r3,-4(fp)
  814878:	008010c4 	movi	r2,67
  81487c:	18800005 	stb	r2,0(r3)
        return;
  814880:	00002306 	br	814910 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  814884:	e0bffb17 	ldw	r2,-20(fp)
  814888:	10800058 	cmpnei	r2,r2,1
  81488c:	1000081e 	bne	r2,zero,8148b0 <OSTaskNameSet+0x150>
  814890:	e0bffa17 	ldw	r2,-24(fp)
  814894:	e0bff715 	stw	r2,-36(fp)
  814898:	e0bff717 	ldw	r2,-36(fp)
  81489c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8148a0:	e0ffff17 	ldw	r3,-4(fp)
  8148a4:	008010c4 	movi	r2,67
  8148a8:	18800005 	stb	r2,0(r3)
        return;
  8148ac:	00001806 	br	814910 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  8148b0:	e13ffe17 	ldw	r4,-8(fp)
  8148b4:	080eff40 	call	80eff4 <OS_StrLen>
  8148b8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  8148bc:	e0bffc03 	ldbu	r2,-16(fp)
  8148c0:	10800830 	cmpltui	r2,r2,32
  8148c4:	1000081e 	bne	r2,zero,8148e8 <OSTaskNameSet+0x188>
  8148c8:	e0bffa17 	ldw	r2,-24(fp)
  8148cc:	e0bff615 	stw	r2,-40(fp)
  8148d0:	e0bff617 	ldw	r2,-40(fp)
  8148d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  8148d8:	e0ffff17 	ldw	r3,-4(fp)
  8148dc:	00801044 	movi	r2,65
  8148e0:	18800005 	stb	r2,0(r3)
        return;
  8148e4:	00000a06 	br	814910 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  8148e8:	e0bffb17 	ldw	r2,-20(fp)
  8148ec:	11001304 	addi	r4,r2,76
  8148f0:	e17ffe17 	ldw	r5,-8(fp)
  8148f4:	080ef740 	call	80ef74 <OS_StrCopy>
  8148f8:	e0bffa17 	ldw	r2,-24(fp)
  8148fc:	e0bff515 	stw	r2,-44(fp)
  814900:	e0bff517 	ldw	r2,-44(fp)
  814904:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  814908:	e0bfff17 	ldw	r2,-4(fp)
  81490c:	10000005 	stb	zero,0(r2)
}
  814910:	e037883a 	mov	sp,fp
  814914:	dfc00117 	ldw	ra,4(sp)
  814918:	df000017 	ldw	fp,0(sp)
  81491c:	dec00204 	addi	sp,sp,8
  814920:	f800283a 	ret

00814924 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  814924:	defff304 	addi	sp,sp,-52
  814928:	dfc00c15 	stw	ra,48(sp)
  81492c:	df000b15 	stw	fp,44(sp)
  814930:	df000b04 	addi	fp,sp,44
  814934:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  814938:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  81493c:	e0bffe03 	ldbu	r2,-8(fp)
  814940:	10800530 	cmpltui	r2,r2,20
  814944:	1000031e 	bne	r2,zero,814954 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  814948:	00800a84 	movi	r2,42
  81494c:	e0bfff15 	stw	r2,-4(fp)
  814950:	00007406 	br	814b24 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814954:	0005303a 	rdctl	r2,status
  814958:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81495c:	e0fffb17 	ldw	r3,-20(fp)
  814960:	00bfff84 	movi	r2,-2
  814964:	1884703a 	and	r2,r3,r2
  814968:	1001703a 	wrctl	status,r2
  
  return context;
  81496c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814970:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  814974:	e0bffe03 	ldbu	r2,-8(fp)
  814978:	00c020f4 	movhi	r3,131
  81497c:	18da9904 	addi	r3,r3,27236
  814980:	1085883a 	add	r2,r2,r2
  814984:	1085883a 	add	r2,r2,r2
  814988:	10c5883a 	add	r2,r2,r3
  81498c:	10800017 	ldw	r2,0(r2)
  814990:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  814994:	e0bffd17 	ldw	r2,-12(fp)
  814998:	1004c03a 	cmpne	r2,r2,zero
  81499c:	1000071e 	bne	r2,zero,8149bc <OSTaskResume+0x98>
  8149a0:	e0bffc17 	ldw	r2,-16(fp)
  8149a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8149a8:	e0bffa17 	ldw	r2,-24(fp)
  8149ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  8149b0:	00801184 	movi	r2,70
  8149b4:	e0bfff15 	stw	r2,-4(fp)
  8149b8:	00005a06 	br	814b24 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  8149bc:	e0bffd17 	ldw	r2,-12(fp)
  8149c0:	10800058 	cmpnei	r2,r2,1
  8149c4:	1000071e 	bne	r2,zero,8149e4 <OSTaskResume+0xc0>
  8149c8:	e0bffc17 	ldw	r2,-16(fp)
  8149cc:	e0bff915 	stw	r2,-28(fp)
  8149d0:	e0bff917 	ldw	r2,-28(fp)
  8149d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8149d8:	008010c4 	movi	r2,67
  8149dc:	e0bfff15 	stw	r2,-4(fp)
  8149e0:	00005006 	br	814b24 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  8149e4:	e0bffd17 	ldw	r2,-12(fp)
  8149e8:	10800c03 	ldbu	r2,48(r2)
  8149ec:	10803fcc 	andi	r2,r2,255
  8149f0:	1080020c 	andi	r2,r2,8
  8149f4:	1005003a 	cmpeq	r2,r2,zero
  8149f8:	1000441e 	bne	r2,zero,814b0c <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  8149fc:	e0bffd17 	ldw	r2,-12(fp)
  814a00:	10c00c03 	ldbu	r3,48(r2)
  814a04:	00bffdc4 	movi	r2,-9
  814a08:	1884703a 	and	r2,r3,r2
  814a0c:	1007883a 	mov	r3,r2
  814a10:	e0bffd17 	ldw	r2,-12(fp)
  814a14:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  814a18:	e0bffd17 	ldw	r2,-12(fp)
  814a1c:	10800c03 	ldbu	r2,48(r2)
  814a20:	10803fcc 	andi	r2,r2,255
  814a24:	1004c03a 	cmpne	r2,r2,zero
  814a28:	1000321e 	bne	r2,zero,814af4 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  814a2c:	e0bffd17 	ldw	r2,-12(fp)
  814a30:	10800b8b 	ldhu	r2,46(r2)
  814a34:	10bfffcc 	andi	r2,r2,65535
  814a38:	1004c03a 	cmpne	r2,r2,zero
  814a3c:	1000281e 	bne	r2,zero,814ae0 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  814a40:	e0bffd17 	ldw	r2,-12(fp)
  814a44:	10c00d83 	ldbu	r3,54(r2)
  814a48:	008020b4 	movhi	r2,130
  814a4c:	10bcc704 	addi	r2,r2,-3300
  814a50:	10800003 	ldbu	r2,0(r2)
  814a54:	1884b03a 	or	r2,r3,r2
  814a58:	1007883a 	mov	r3,r2
  814a5c:	008020b4 	movhi	r2,130
  814a60:	10bcc704 	addi	r2,r2,-3300
  814a64:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  814a68:	e0bffd17 	ldw	r2,-12(fp)
  814a6c:	10800d03 	ldbu	r2,52(r2)
  814a70:	11003fcc 	andi	r4,r2,255
  814a74:	e0bffd17 	ldw	r2,-12(fp)
  814a78:	10800d03 	ldbu	r2,52(r2)
  814a7c:	10c03fcc 	andi	r3,r2,255
  814a80:	008020b4 	movhi	r2,130
  814a84:	10bcc744 	addi	r2,r2,-3299
  814a88:	10c5883a 	add	r2,r2,r3
  814a8c:	10c00003 	ldbu	r3,0(r2)
  814a90:	e0bffd17 	ldw	r2,-12(fp)
  814a94:	10800d43 	ldbu	r2,53(r2)
  814a98:	1884b03a 	or	r2,r3,r2
  814a9c:	1007883a 	mov	r3,r2
  814aa0:	008020b4 	movhi	r2,130
  814aa4:	10bcc744 	addi	r2,r2,-3299
  814aa8:	1105883a 	add	r2,r2,r4
  814aac:	10c00005 	stb	r3,0(r2)
  814ab0:	e0bffc17 	ldw	r2,-16(fp)
  814ab4:	e0bff815 	stw	r2,-32(fp)
  814ab8:	e0bff817 	ldw	r2,-32(fp)
  814abc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  814ac0:	008020b4 	movhi	r2,130
  814ac4:	10bcbb44 	addi	r2,r2,-3347
  814ac8:	10800003 	ldbu	r2,0(r2)
  814acc:	10803fcc 	andi	r2,r2,255
  814ad0:	10800058 	cmpnei	r2,r2,1
  814ad4:	10000b1e 	bne	r2,zero,814b04 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  814ad8:	080ee300 	call	80ee30 <OS_Sched>
  814adc:	00000906 	br	814b04 <OSTaskResume+0x1e0>
  814ae0:	e0bffc17 	ldw	r2,-16(fp)
  814ae4:	e0bff715 	stw	r2,-36(fp)
  814ae8:	e0bff717 	ldw	r2,-36(fp)
  814aec:	1001703a 	wrctl	status,r2
  814af0:	00000406 	br	814b04 <OSTaskResume+0x1e0>
  814af4:	e0bffc17 	ldw	r2,-16(fp)
  814af8:	e0bff615 	stw	r2,-40(fp)
  814afc:	e0bff617 	ldw	r2,-40(fp)
  814b00:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  814b04:	e03fff15 	stw	zero,-4(fp)
  814b08:	00000606 	br	814b24 <OSTaskResume+0x200>
  814b0c:	e0bffc17 	ldw	r2,-16(fp)
  814b10:	e0bff515 	stw	r2,-44(fp)
  814b14:	e0bff517 	ldw	r2,-44(fp)
  814b18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  814b1c:	00801104 	movi	r2,68
  814b20:	e0bfff15 	stw	r2,-4(fp)
  814b24:	e0bfff17 	ldw	r2,-4(fp)
}
  814b28:	e037883a 	mov	sp,fp
  814b2c:	dfc00117 	ldw	ra,4(sp)
  814b30:	df000017 	ldw	fp,0(sp)
  814b34:	dec00204 	addi	sp,sp,8
  814b38:	f800283a 	ret

00814b3c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  814b3c:	defff204 	addi	sp,sp,-56
  814b40:	df000d15 	stw	fp,52(sp)
  814b44:	df000d04 	addi	fp,sp,52
  814b48:	e17ffe15 	stw	r5,-8(fp)
  814b4c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  814b50:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  814b54:	e0bffd03 	ldbu	r2,-12(fp)
  814b58:	10800570 	cmpltui	r2,r2,21
  814b5c:	1000061e 	bne	r2,zero,814b78 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  814b60:	e0bffd03 	ldbu	r2,-12(fp)
  814b64:	10803fe0 	cmpeqi	r2,r2,255
  814b68:	1000031e 	bne	r2,zero,814b78 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  814b6c:	00800a84 	movi	r2,42
  814b70:	e0bfff15 	stw	r2,-4(fp)
  814b74:	00006b06 	br	814d24 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  814b78:	e0bffe17 	ldw	r2,-8(fp)
  814b7c:	1004c03a 	cmpne	r2,r2,zero
  814b80:	1000031e 	bne	r2,zero,814b90 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  814b84:	00800244 	movi	r2,9
  814b88:	e0bfff15 	stw	r2,-4(fp)
  814b8c:	00006506 	br	814d24 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  814b90:	e0bffe17 	ldw	r2,-8(fp)
  814b94:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  814b98:	e0bffe17 	ldw	r2,-8(fp)
  814b9c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814ba0:	0005303a 	rdctl	r2,status
  814ba4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814ba8:	e0fff717 	ldw	r3,-36(fp)
  814bac:	00bfff84 	movi	r2,-2
  814bb0:	1884703a 	and	r2,r3,r2
  814bb4:	1001703a 	wrctl	status,r2
  
  return context;
  814bb8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  814bbc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  814bc0:	e0bffd03 	ldbu	r2,-12(fp)
  814bc4:	10803fd8 	cmpnei	r2,r2,255
  814bc8:	1000051e 	bne	r2,zero,814be0 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  814bcc:	008020b4 	movhi	r2,130
  814bd0:	10bcca04 	addi	r2,r2,-3288
  814bd4:	10800017 	ldw	r2,0(r2)
  814bd8:	10800c83 	ldbu	r2,50(r2)
  814bdc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  814be0:	e0bffd03 	ldbu	r2,-12(fp)
  814be4:	00c020f4 	movhi	r3,131
  814be8:	18da9904 	addi	r3,r3,27236
  814bec:	1085883a 	add	r2,r2,r2
  814bf0:	1085883a 	add	r2,r2,r2
  814bf4:	10c5883a 	add	r2,r2,r3
  814bf8:	10800017 	ldw	r2,0(r2)
  814bfc:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  814c00:	e0bffc17 	ldw	r2,-16(fp)
  814c04:	1004c03a 	cmpne	r2,r2,zero
  814c08:	1000071e 	bne	r2,zero,814c28 <OSTaskStkChk+0xec>
  814c0c:	e0bff817 	ldw	r2,-32(fp)
  814c10:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814c14:	e0bff617 	ldw	r2,-40(fp)
  814c18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  814c1c:	008010c4 	movi	r2,67
  814c20:	e0bfff15 	stw	r2,-4(fp)
  814c24:	00003f06 	br	814d24 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  814c28:	e0bffc17 	ldw	r2,-16(fp)
  814c2c:	10800058 	cmpnei	r2,r2,1
  814c30:	1000071e 	bne	r2,zero,814c50 <OSTaskStkChk+0x114>
  814c34:	e0bff817 	ldw	r2,-32(fp)
  814c38:	e0bff515 	stw	r2,-44(fp)
  814c3c:	e0bff517 	ldw	r2,-44(fp)
  814c40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  814c44:	008010c4 	movi	r2,67
  814c48:	e0bfff15 	stw	r2,-4(fp)
  814c4c:	00003506 	br	814d24 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  814c50:	e0bffc17 	ldw	r2,-16(fp)
  814c54:	1080040b 	ldhu	r2,16(r2)
  814c58:	10bfffcc 	andi	r2,r2,65535
  814c5c:	1080004c 	andi	r2,r2,1
  814c60:	1004c03a 	cmpne	r2,r2,zero
  814c64:	1000071e 	bne	r2,zero,814c84 <OSTaskStkChk+0x148>
  814c68:	e0bff817 	ldw	r2,-32(fp)
  814c6c:	e0bff415 	stw	r2,-48(fp)
  814c70:	e0bff417 	ldw	r2,-48(fp)
  814c74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  814c78:	00801144 	movi	r2,69
  814c7c:	e0bfff15 	stw	r2,-4(fp)
  814c80:	00002806 	br	814d24 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  814c84:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  814c88:	e0bffc17 	ldw	r2,-16(fp)
  814c8c:	10800317 	ldw	r2,12(r2)
  814c90:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  814c94:	e0bffc17 	ldw	r2,-16(fp)
  814c98:	10800217 	ldw	r2,8(r2)
  814c9c:	e0bffb15 	stw	r2,-20(fp)
  814ca0:	e0bff817 	ldw	r2,-32(fp)
  814ca4:	e0bff315 	stw	r2,-52(fp)
  814ca8:	e0bff317 	ldw	r2,-52(fp)
  814cac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  814cb0:	00000306 	br	814cc0 <OSTaskStkChk+0x184>
        nfree++;
  814cb4:	e0bffa17 	ldw	r2,-24(fp)
  814cb8:	10800044 	addi	r2,r2,1
  814cbc:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  814cc0:	e0bffb17 	ldw	r2,-20(fp)
  814cc4:	10800017 	ldw	r2,0(r2)
  814cc8:	1005003a 	cmpeq	r2,r2,zero
  814ccc:	1007883a 	mov	r3,r2
  814cd0:	e0bffb17 	ldw	r2,-20(fp)
  814cd4:	10800104 	addi	r2,r2,4
  814cd8:	e0bffb15 	stw	r2,-20(fp)
  814cdc:	18803fcc 	andi	r2,r3,255
  814ce0:	1004c03a 	cmpne	r2,r2,zero
  814ce4:	103ff31e 	bne	r2,zero,814cb4 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  814ce8:	e0bffa17 	ldw	r2,-24(fp)
  814cec:	1085883a 	add	r2,r2,r2
  814cf0:	1085883a 	add	r2,r2,r2
  814cf4:	1007883a 	mov	r3,r2
  814cf8:	e0bffe17 	ldw	r2,-8(fp)
  814cfc:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  814d00:	e0fff917 	ldw	r3,-28(fp)
  814d04:	e0bffa17 	ldw	r2,-24(fp)
  814d08:	1885c83a 	sub	r2,r3,r2
  814d0c:	1085883a 	add	r2,r2,r2
  814d10:	1085883a 	add	r2,r2,r2
  814d14:	1007883a 	mov	r3,r2
  814d18:	e0bffe17 	ldw	r2,-8(fp)
  814d1c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  814d20:	e03fff15 	stw	zero,-4(fp)
  814d24:	e0bfff17 	ldw	r2,-4(fp)
}
  814d28:	e037883a 	mov	sp,fp
  814d2c:	df000017 	ldw	fp,0(sp)
  814d30:	dec00104 	addi	sp,sp,4
  814d34:	f800283a 	ret

00814d38 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  814d38:	defff404 	addi	sp,sp,-48
  814d3c:	dfc00b15 	stw	ra,44(sp)
  814d40:	df000a15 	stw	fp,40(sp)
  814d44:	df000a04 	addi	fp,sp,40
  814d48:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814d4c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  814d50:	e0bffe03 	ldbu	r2,-8(fp)
  814d54:	10800518 	cmpnei	r2,r2,20
  814d58:	1000031e 	bne	r2,zero,814d68 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  814d5c:	008011c4 	movi	r2,71
  814d60:	e0bfff15 	stw	r2,-4(fp)
  814d64:	00007906 	br	814f4c <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  814d68:	e0bffe03 	ldbu	r2,-8(fp)
  814d6c:	10800530 	cmpltui	r2,r2,20
  814d70:	1000061e 	bne	r2,zero,814d8c <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  814d74:	e0bffe03 	ldbu	r2,-8(fp)
  814d78:	10803fe0 	cmpeqi	r2,r2,255
  814d7c:	1000031e 	bne	r2,zero,814d8c <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  814d80:	00800a84 	movi	r2,42
  814d84:	e0bfff15 	stw	r2,-4(fp)
  814d88:	00007006 	br	814f4c <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814d8c:	0005303a 	rdctl	r2,status
  814d90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814d94:	e0fff917 	ldw	r3,-28(fp)
  814d98:	00bfff84 	movi	r2,-2
  814d9c:	1884703a 	and	r2,r3,r2
  814da0:	1001703a 	wrctl	status,r2
  
  return context;
  814da4:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  814da8:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  814dac:	e0bffe03 	ldbu	r2,-8(fp)
  814db0:	10803fd8 	cmpnei	r2,r2,255
  814db4:	1000081e 	bne	r2,zero,814dd8 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  814db8:	008020b4 	movhi	r2,130
  814dbc:	10bcca04 	addi	r2,r2,-3288
  814dc0:	10800017 	ldw	r2,0(r2)
  814dc4:	10800c83 	ldbu	r2,50(r2)
  814dc8:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  814dcc:	00800044 	movi	r2,1
  814dd0:	e0bffd05 	stb	r2,-12(fp)
  814dd4:	00000b06 	br	814e04 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  814dd8:	008020b4 	movhi	r2,130
  814ddc:	10bcca04 	addi	r2,r2,-3288
  814de0:	10800017 	ldw	r2,0(r2)
  814de4:	10800c83 	ldbu	r2,50(r2)
  814de8:	10c03fcc 	andi	r3,r2,255
  814dec:	e0bffe03 	ldbu	r2,-8(fp)
  814df0:	1880031e 	bne	r3,r2,814e00 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  814df4:	00800044 	movi	r2,1
  814df8:	e0bffd05 	stb	r2,-12(fp)
  814dfc:	00000106 	br	814e04 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  814e00:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  814e04:	e0bffe03 	ldbu	r2,-8(fp)
  814e08:	00c020f4 	movhi	r3,131
  814e0c:	18da9904 	addi	r3,r3,27236
  814e10:	1085883a 	add	r2,r2,r2
  814e14:	1085883a 	add	r2,r2,r2
  814e18:	10c5883a 	add	r2,r2,r3
  814e1c:	10800017 	ldw	r2,0(r2)
  814e20:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  814e24:	e0bffc17 	ldw	r2,-16(fp)
  814e28:	1004c03a 	cmpne	r2,r2,zero
  814e2c:	1000071e 	bne	r2,zero,814e4c <OSTaskSuspend+0x114>
  814e30:	e0bffa17 	ldw	r2,-24(fp)
  814e34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814e38:	e0bff817 	ldw	r2,-32(fp)
  814e3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  814e40:	00801204 	movi	r2,72
  814e44:	e0bfff15 	stw	r2,-4(fp)
  814e48:	00004006 	br	814f4c <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  814e4c:	e0bffc17 	ldw	r2,-16(fp)
  814e50:	10800058 	cmpnei	r2,r2,1
  814e54:	1000071e 	bne	r2,zero,814e74 <OSTaskSuspend+0x13c>
  814e58:	e0bffa17 	ldw	r2,-24(fp)
  814e5c:	e0bff715 	stw	r2,-36(fp)
  814e60:	e0bff717 	ldw	r2,-36(fp)
  814e64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  814e68:	008010c4 	movi	r2,67
  814e6c:	e0bfff15 	stw	r2,-4(fp)
  814e70:	00003606 	br	814f4c <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  814e74:	e0bffc17 	ldw	r2,-16(fp)
  814e78:	10800d03 	ldbu	r2,52(r2)
  814e7c:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  814e80:	e13ffb03 	ldbu	r4,-20(fp)
  814e84:	e0fffb03 	ldbu	r3,-20(fp)
  814e88:	008020b4 	movhi	r2,130
  814e8c:	10bcc744 	addi	r2,r2,-3299
  814e90:	10c5883a 	add	r2,r2,r3
  814e94:	10800003 	ldbu	r2,0(r2)
  814e98:	1007883a 	mov	r3,r2
  814e9c:	e0bffc17 	ldw	r2,-16(fp)
  814ea0:	10800d43 	ldbu	r2,53(r2)
  814ea4:	0084303a 	nor	r2,zero,r2
  814ea8:	1884703a 	and	r2,r3,r2
  814eac:	1007883a 	mov	r3,r2
  814eb0:	008020b4 	movhi	r2,130
  814eb4:	10bcc744 	addi	r2,r2,-3299
  814eb8:	1105883a 	add	r2,r2,r4
  814ebc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  814ec0:	e0fffb03 	ldbu	r3,-20(fp)
  814ec4:	008020b4 	movhi	r2,130
  814ec8:	10bcc744 	addi	r2,r2,-3299
  814ecc:	10c5883a 	add	r2,r2,r3
  814ed0:	10800003 	ldbu	r2,0(r2)
  814ed4:	10803fcc 	andi	r2,r2,255
  814ed8:	1004c03a 	cmpne	r2,r2,zero
  814edc:	10000c1e 	bne	r2,zero,814f10 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  814ee0:	e0bffc17 	ldw	r2,-16(fp)
  814ee4:	10800d83 	ldbu	r2,54(r2)
  814ee8:	0084303a 	nor	r2,zero,r2
  814eec:	1007883a 	mov	r3,r2
  814ef0:	008020b4 	movhi	r2,130
  814ef4:	10bcc704 	addi	r2,r2,-3300
  814ef8:	10800003 	ldbu	r2,0(r2)
  814efc:	1884703a 	and	r2,r3,r2
  814f00:	1007883a 	mov	r3,r2
  814f04:	008020b4 	movhi	r2,130
  814f08:	10bcc704 	addi	r2,r2,-3300
  814f0c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  814f10:	e0bffc17 	ldw	r2,-16(fp)
  814f14:	10800c03 	ldbu	r2,48(r2)
  814f18:	10800214 	ori	r2,r2,8
  814f1c:	1007883a 	mov	r3,r2
  814f20:	e0bffc17 	ldw	r2,-16(fp)
  814f24:	10c00c05 	stb	r3,48(r2)
  814f28:	e0bffa17 	ldw	r2,-24(fp)
  814f2c:	e0bff615 	stw	r2,-40(fp)
  814f30:	e0bff617 	ldw	r2,-40(fp)
  814f34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  814f38:	e0bffd03 	ldbu	r2,-12(fp)
  814f3c:	10800058 	cmpnei	r2,r2,1
  814f40:	1000011e 	bne	r2,zero,814f48 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  814f44:	080ee300 	call	80ee30 <OS_Sched>
    }
    return (OS_ERR_NONE);
  814f48:	e03fff15 	stw	zero,-4(fp)
  814f4c:	e0bfff17 	ldw	r2,-4(fp)
}
  814f50:	e037883a 	mov	sp,fp
  814f54:	dfc00117 	ldw	ra,4(sp)
  814f58:	df000017 	ldw	fp,0(sp)
  814f5c:	dec00204 	addi	sp,sp,8
  814f60:	f800283a 	ret

00814f64 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  814f64:	defff504 	addi	sp,sp,-44
  814f68:	dfc00a15 	stw	ra,40(sp)
  814f6c:	df000915 	stw	fp,36(sp)
  814f70:	df000904 	addi	fp,sp,36
  814f74:	e17ffe15 	stw	r5,-8(fp)
  814f78:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814f7c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  814f80:	e0bffd03 	ldbu	r2,-12(fp)
  814f84:	10800570 	cmpltui	r2,r2,21
  814f88:	1000061e 	bne	r2,zero,814fa4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  814f8c:	e0bffd03 	ldbu	r2,-12(fp)
  814f90:	10803fe0 	cmpeqi	r2,r2,255
  814f94:	1000031e 	bne	r2,zero,814fa4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  814f98:	00800a84 	movi	r2,42
  814f9c:	e0bfff15 	stw	r2,-4(fp)
  814fa0:	00003b06 	br	815090 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  814fa4:	e0bffe17 	ldw	r2,-8(fp)
  814fa8:	1004c03a 	cmpne	r2,r2,zero
  814fac:	1000031e 	bne	r2,zero,814fbc <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  814fb0:	00800244 	movi	r2,9
  814fb4:	e0bfff15 	stw	r2,-4(fp)
  814fb8:	00003506 	br	815090 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814fbc:	0005303a 	rdctl	r2,status
  814fc0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814fc4:	e0fffa17 	ldw	r3,-24(fp)
  814fc8:	00bfff84 	movi	r2,-2
  814fcc:	1884703a 	and	r2,r3,r2
  814fd0:	1001703a 	wrctl	status,r2
  
  return context;
  814fd4:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814fd8:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  814fdc:	e0bffd03 	ldbu	r2,-12(fp)
  814fe0:	10803fd8 	cmpnei	r2,r2,255
  814fe4:	1000051e 	bne	r2,zero,814ffc <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  814fe8:	008020b4 	movhi	r2,130
  814fec:	10bcca04 	addi	r2,r2,-3288
  814ff0:	10800017 	ldw	r2,0(r2)
  814ff4:	10800c83 	ldbu	r2,50(r2)
  814ff8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  814ffc:	e0bffd03 	ldbu	r2,-12(fp)
  815000:	00c020f4 	movhi	r3,131
  815004:	18da9904 	addi	r3,r3,27236
  815008:	1085883a 	add	r2,r2,r2
  81500c:	1085883a 	add	r2,r2,r2
  815010:	10c5883a 	add	r2,r2,r3
  815014:	10800017 	ldw	r2,0(r2)
  815018:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  81501c:	e0bffc17 	ldw	r2,-16(fp)
  815020:	1004c03a 	cmpne	r2,r2,zero
  815024:	1000071e 	bne	r2,zero,815044 <OSTaskQuery+0xe0>
  815028:	e0bffb17 	ldw	r2,-20(fp)
  81502c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815030:	e0bff917 	ldw	r2,-28(fp)
  815034:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  815038:	00800a44 	movi	r2,41
  81503c:	e0bfff15 	stw	r2,-4(fp)
  815040:	00001306 	br	815090 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  815044:	e0bffc17 	ldw	r2,-16(fp)
  815048:	10800058 	cmpnei	r2,r2,1
  81504c:	1000071e 	bne	r2,zero,81506c <OSTaskQuery+0x108>
  815050:	e0bffb17 	ldw	r2,-20(fp)
  815054:	e0bff815 	stw	r2,-32(fp)
  815058:	e0bff817 	ldw	r2,-32(fp)
  81505c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  815060:	008010c4 	movi	r2,67
  815064:	e0bfff15 	stw	r2,-4(fp)
  815068:	00000906 	br	815090 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  81506c:	e13ffe17 	ldw	r4,-8(fp)
  815070:	e17ffc17 	ldw	r5,-16(fp)
  815074:	01801b04 	movi	r6,108
  815078:	080edc40 	call	80edc4 <OS_MemCopy>
  81507c:	e0bffb17 	ldw	r2,-20(fp)
  815080:	e0bff715 	stw	r2,-36(fp)
  815084:	e0bff717 	ldw	r2,-36(fp)
  815088:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81508c:	e03fff15 	stw	zero,-4(fp)
  815090:	e0bfff17 	ldw	r2,-4(fp)
}
  815094:	e037883a 	mov	sp,fp
  815098:	dfc00117 	ldw	ra,4(sp)
  81509c:	df000017 	ldw	fp,0(sp)
  8150a0:	dec00204 	addi	sp,sp,8
  8150a4:	f800283a 	ret

008150a8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  8150a8:	defffc04 	addi	sp,sp,-16
  8150ac:	df000315 	stw	fp,12(sp)
  8150b0:	df000304 	addi	fp,sp,12
  8150b4:	e13ffd15 	stw	r4,-12(fp)
  8150b8:	e17ffe15 	stw	r5,-8(fp)
  8150bc:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  8150c0:	e0bfff0b 	ldhu	r2,-4(fp)
  8150c4:	1080004c 	andi	r2,r2,1
  8150c8:	10803fcc 	andi	r2,r2,255
  8150cc:	1005003a 	cmpeq	r2,r2,zero
  8150d0:	1000101e 	bne	r2,zero,815114 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  8150d4:	e0bfff0b 	ldhu	r2,-4(fp)
  8150d8:	1080008c 	andi	r2,r2,2
  8150dc:	1005003a 	cmpeq	r2,r2,zero
  8150e0:	10000c1e 	bne	r2,zero,815114 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  8150e4:	00000806 	br	815108 <OS_TaskStkClr+0x60>
                size--;
  8150e8:	e0bffe17 	ldw	r2,-8(fp)
  8150ec:	10bfffc4 	addi	r2,r2,-1
  8150f0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  8150f4:	e0bffd17 	ldw	r2,-12(fp)
  8150f8:	10000015 	stw	zero,0(r2)
  8150fc:	e0bffd17 	ldw	r2,-12(fp)
  815100:	10800104 	addi	r2,r2,4
  815104:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  815108:	e0bffe17 	ldw	r2,-8(fp)
  81510c:	1004c03a 	cmpne	r2,r2,zero
  815110:	103ff51e 	bne	r2,zero,8150e8 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  815114:	e037883a 	mov	sp,fp
  815118:	df000017 	ldw	fp,0(sp)
  81511c:	dec00104 	addi	sp,sp,4
  815120:	f800283a 	ret

00815124 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  815124:	defff904 	addi	sp,sp,-28
  815128:	dfc00615 	stw	ra,24(sp)
  81512c:	df000515 	stw	fp,20(sp)
  815130:	df000504 	addi	fp,sp,20
  815134:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815138:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81513c:	008020b4 	movhi	r2,130
  815140:	10bcc904 	addi	r2,r2,-3292
  815144:	10800003 	ldbu	r2,0(r2)
  815148:	10803fcc 	andi	r2,r2,255
  81514c:	1004c03a 	cmpne	r2,r2,zero
  815150:	1000421e 	bne	r2,zero,81525c <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  815154:	e0bfff0b 	ldhu	r2,-4(fp)
  815158:	1005003a 	cmpeq	r2,r2,zero
  81515c:	10003f1e 	bne	r2,zero,81525c <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815160:	0005303a 	rdctl	r2,status
  815164:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815168:	e0fffc17 	ldw	r3,-16(fp)
  81516c:	00bfff84 	movi	r2,-2
  815170:	1884703a 	and	r2,r3,r2
  815174:	1001703a 	wrctl	status,r2
  
  return context;
  815178:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  81517c:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  815180:	008020b4 	movhi	r2,130
  815184:	10bcca04 	addi	r2,r2,-3288
  815188:	10800017 	ldw	r2,0(r2)
  81518c:	10800d03 	ldbu	r2,52(r2)
  815190:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  815194:	e13ffe03 	ldbu	r4,-8(fp)
  815198:	e0fffe03 	ldbu	r3,-8(fp)
  81519c:	008020b4 	movhi	r2,130
  8151a0:	10bcc744 	addi	r2,r2,-3299
  8151a4:	10c5883a 	add	r2,r2,r3
  8151a8:	10800003 	ldbu	r2,0(r2)
  8151ac:	1007883a 	mov	r3,r2
  8151b0:	008020b4 	movhi	r2,130
  8151b4:	10bcca04 	addi	r2,r2,-3288
  8151b8:	10800017 	ldw	r2,0(r2)
  8151bc:	10800d43 	ldbu	r2,53(r2)
  8151c0:	0084303a 	nor	r2,zero,r2
  8151c4:	1884703a 	and	r2,r3,r2
  8151c8:	1007883a 	mov	r3,r2
  8151cc:	008020b4 	movhi	r2,130
  8151d0:	10bcc744 	addi	r2,r2,-3299
  8151d4:	1105883a 	add	r2,r2,r4
  8151d8:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  8151dc:	e0fffe03 	ldbu	r3,-8(fp)
  8151e0:	008020b4 	movhi	r2,130
  8151e4:	10bcc744 	addi	r2,r2,-3299
  8151e8:	10c5883a 	add	r2,r2,r3
  8151ec:	10800003 	ldbu	r2,0(r2)
  8151f0:	10803fcc 	andi	r2,r2,255
  8151f4:	1004c03a 	cmpne	r2,r2,zero
  8151f8:	10000e1e 	bne	r2,zero,815234 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  8151fc:	008020b4 	movhi	r2,130
  815200:	10bcca04 	addi	r2,r2,-3288
  815204:	10800017 	ldw	r2,0(r2)
  815208:	10800d83 	ldbu	r2,54(r2)
  81520c:	0084303a 	nor	r2,zero,r2
  815210:	1007883a 	mov	r3,r2
  815214:	008020b4 	movhi	r2,130
  815218:	10bcc704 	addi	r2,r2,-3300
  81521c:	10800003 	ldbu	r2,0(r2)
  815220:	1884703a 	and	r2,r3,r2
  815224:	1007883a 	mov	r3,r2
  815228:	008020b4 	movhi	r2,130
  81522c:	10bcc704 	addi	r2,r2,-3300
  815230:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  815234:	008020b4 	movhi	r2,130
  815238:	10bcca04 	addi	r2,r2,-3288
  81523c:	10c00017 	ldw	r3,0(r2)
  815240:	e0bfff0b 	ldhu	r2,-4(fp)
  815244:	18800b8d 	sth	r2,46(r3)
  815248:	e0bffd17 	ldw	r2,-12(fp)
  81524c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815250:	e0bffb17 	ldw	r2,-20(fp)
  815254:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  815258:	080ee300 	call	80ee30 <OS_Sched>
    }
}
  81525c:	e037883a 	mov	sp,fp
  815260:	dfc00117 	ldw	ra,4(sp)
  815264:	df000017 	ldw	fp,0(sp)
  815268:	dec00204 	addi	sp,sp,8
  81526c:	f800283a 	ret

00815270 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  815270:	defff604 	addi	sp,sp,-40
  815274:	dfc00915 	stw	ra,36(sp)
  815278:	df000815 	stw	fp,32(sp)
  81527c:	dc000715 	stw	r16,28(sp)
  815280:	df000704 	addi	fp,sp,28
  815284:	e13ffb05 	stb	r4,-20(fp)
  815288:	e17ffc05 	stb	r5,-16(fp)
  81528c:	e1bffd05 	stb	r6,-12(fp)
  815290:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  815294:	008020b4 	movhi	r2,130
  815298:	10bcc904 	addi	r2,r2,-3292
  81529c:	10800003 	ldbu	r2,0(r2)
  8152a0:	10803fcc 	andi	r2,r2,255
  8152a4:	1005003a 	cmpeq	r2,r2,zero
  8152a8:	1000031e 	bne	r2,zero,8152b8 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  8152ac:	00801544 	movi	r2,85
  8152b0:	e0bfff15 	stw	r2,-4(fp)
  8152b4:	00004406 	br	8153c8 <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  8152b8:	e0bffb03 	ldbu	r2,-20(fp)
  8152bc:	1004c03a 	cmpne	r2,r2,zero
  8152c0:	10000c1e 	bne	r2,zero,8152f4 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  8152c4:	e0bffc03 	ldbu	r2,-16(fp)
  8152c8:	1004c03a 	cmpne	r2,r2,zero
  8152cc:	1000091e 	bne	r2,zero,8152f4 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  8152d0:	e0bffd03 	ldbu	r2,-12(fp)
  8152d4:	1004c03a 	cmpne	r2,r2,zero
  8152d8:	1000061e 	bne	r2,zero,8152f4 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  8152dc:	e0bffe0b 	ldhu	r2,-8(fp)
  8152e0:	1004c03a 	cmpne	r2,r2,zero
  8152e4:	1000031e 	bne	r2,zero,8152f4 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  8152e8:	00801504 	movi	r2,84
  8152ec:	e0bfff15 	stw	r2,-4(fp)
  8152f0:	00003506 	br	8153c8 <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
  8152f4:	e0bffc03 	ldbu	r2,-16(fp)
  8152f8:	10800f30 	cmpltui	r2,r2,60
  8152fc:	1000031e 	bne	r2,zero,81530c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  815300:	00801444 	movi	r2,81
  815304:	e0bfff15 	stw	r2,-4(fp)
  815308:	00002f06 	br	8153c8 <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
  81530c:	e0bffd03 	ldbu	r2,-12(fp)
  815310:	10800f30 	cmpltui	r2,r2,60
  815314:	1000031e 	bne	r2,zero,815324 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  815318:	00801484 	movi	r2,82
  81531c:	e0bfff15 	stw	r2,-4(fp)
  815320:	00002906 	br	8153c8 <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
  815324:	e0bffe0b 	ldhu	r2,-8(fp)
  815328:	1080fa30 	cmpltui	r2,r2,1000
  81532c:	1000031e 	bne	r2,zero,81533c <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  815330:	008014c4 	movi	r2,83
  815334:	e0bfff15 	stw	r2,-4(fp)
  815338:	00002306 	br	8153c8 <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  81533c:	e0bffb03 	ldbu	r2,-20(fp)
  815340:	10c38424 	muli	r3,r2,3600
  815344:	e0bffc03 	ldbu	r2,-16(fp)
  815348:	10800f24 	muli	r2,r2,60
  81534c:	1887883a 	add	r3,r3,r2
  815350:	e0bffd03 	ldbu	r2,-12(fp)
  815354:	1885883a 	add	r2,r3,r2
  815358:	1400fa24 	muli	r16,r2,1000
  81535c:	e0bffe0b 	ldhu	r2,-8(fp)
  815360:	1100fa24 	muli	r4,r2,1000
  815364:	0140fa04 	movi	r5,1000
  815368:	080c4580 	call	80c458 <__udivsi3>
  81536c:	8085883a 	add	r2,r16,r2
  815370:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  815374:	e0bffa17 	ldw	r2,-24(fp)
  815378:	1004d43a 	srli	r2,r2,16
  81537c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  815380:	e0bffa17 	ldw	r2,-24(fp)
  815384:	10bfffcc 	andi	r2,r2,65535
  815388:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  81538c:	e0bffa17 	ldw	r2,-24(fp)
  815390:	113fffcc 	andi	r4,r2,65535
  815394:	08151240 	call	815124 <OSTimeDly>
    while (loops > 0) {
  815398:	00000706 	br	8153b8 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
  81539c:	01200014 	movui	r4,32768
  8153a0:	08151240 	call	815124 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  8153a4:	01200014 	movui	r4,32768
  8153a8:	08151240 	call	815124 <OSTimeDly>
        loops--;
  8153ac:	e0bff90b 	ldhu	r2,-28(fp)
  8153b0:	10bfffc4 	addi	r2,r2,-1
  8153b4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  8153b8:	e0bff90b 	ldhu	r2,-28(fp)
  8153bc:	1004c03a 	cmpne	r2,r2,zero
  8153c0:	103ff61e 	bne	r2,zero,81539c <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  8153c4:	e03fff15 	stw	zero,-4(fp)
  8153c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8153cc:	e037883a 	mov	sp,fp
  8153d0:	dfc00217 	ldw	ra,8(sp)
  8153d4:	df000117 	ldw	fp,4(sp)
  8153d8:	dc000017 	ldw	r16,0(sp)
  8153dc:	dec00304 	addi	sp,sp,12
  8153e0:	f800283a 	ret

008153e4 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  8153e4:	defff404 	addi	sp,sp,-48
  8153e8:	dfc00b15 	stw	ra,44(sp)
  8153ec:	df000a15 	stw	fp,40(sp)
  8153f0:	df000a04 	addi	fp,sp,40
  8153f4:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8153f8:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  8153fc:	e0bffe03 	ldbu	r2,-8(fp)
  815400:	10800530 	cmpltui	r2,r2,20
  815404:	1000031e 	bne	r2,zero,815414 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  815408:	00800a84 	movi	r2,42
  81540c:	e0bfff15 	stw	r2,-4(fp)
  815410:	00007206 	br	8155dc <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815414:	0005303a 	rdctl	r2,status
  815418:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81541c:	e0fffb17 	ldw	r3,-20(fp)
  815420:	00bfff84 	movi	r2,-2
  815424:	1884703a 	and	r2,r3,r2
  815428:	1001703a 	wrctl	status,r2
  
  return context;
  81542c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  815430:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  815434:	e0bffe03 	ldbu	r2,-8(fp)
  815438:	00c020f4 	movhi	r3,131
  81543c:	18da9904 	addi	r3,r3,27236
  815440:	1085883a 	add	r2,r2,r2
  815444:	1085883a 	add	r2,r2,r2
  815448:	10c5883a 	add	r2,r2,r3
  81544c:	10800017 	ldw	r2,0(r2)
  815450:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  815454:	e0bffd17 	ldw	r2,-12(fp)
  815458:	1004c03a 	cmpne	r2,r2,zero
  81545c:	1000071e 	bne	r2,zero,81547c <OSTimeDlyResume+0x98>
  815460:	e0bffc17 	ldw	r2,-16(fp)
  815464:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815468:	e0bffa17 	ldw	r2,-24(fp)
  81546c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  815470:	008010c4 	movi	r2,67
  815474:	e0bfff15 	stw	r2,-4(fp)
  815478:	00005806 	br	8155dc <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  81547c:	e0bffd17 	ldw	r2,-12(fp)
  815480:	10800058 	cmpnei	r2,r2,1
  815484:	1000071e 	bne	r2,zero,8154a4 <OSTimeDlyResume+0xc0>
  815488:	e0bffc17 	ldw	r2,-16(fp)
  81548c:	e0bff915 	stw	r2,-28(fp)
  815490:	e0bff917 	ldw	r2,-28(fp)
  815494:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  815498:	008010c4 	movi	r2,67
  81549c:	e0bfff15 	stw	r2,-4(fp)
  8154a0:	00004e06 	br	8155dc <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  8154a4:	e0bffd17 	ldw	r2,-12(fp)
  8154a8:	10800b8b 	ldhu	r2,46(r2)
  8154ac:	10bfffcc 	andi	r2,r2,65535
  8154b0:	1004c03a 	cmpne	r2,r2,zero
  8154b4:	1000071e 	bne	r2,zero,8154d4 <OSTimeDlyResume+0xf0>
  8154b8:	e0bffc17 	ldw	r2,-16(fp)
  8154bc:	e0bff815 	stw	r2,-32(fp)
  8154c0:	e0bff817 	ldw	r2,-32(fp)
  8154c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  8154c8:	00801404 	movi	r2,80
  8154cc:	e0bfff15 	stw	r2,-4(fp)
  8154d0:	00004206 	br	8155dc <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  8154d4:	e0bffd17 	ldw	r2,-12(fp)
  8154d8:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  8154dc:	e0bffd17 	ldw	r2,-12(fp)
  8154e0:	10800c03 	ldbu	r2,48(r2)
  8154e4:	10803fcc 	andi	r2,r2,255
  8154e8:	10800dcc 	andi	r2,r2,55
  8154ec:	1005003a 	cmpeq	r2,r2,zero
  8154f0:	10000b1e 	bne	r2,zero,815520 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  8154f4:	e0bffd17 	ldw	r2,-12(fp)
  8154f8:	10c00c03 	ldbu	r3,48(r2)
  8154fc:	00bff204 	movi	r2,-56
  815500:	1884703a 	and	r2,r3,r2
  815504:	1007883a 	mov	r3,r2
  815508:	e0bffd17 	ldw	r2,-12(fp)
  81550c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  815510:	e0fffd17 	ldw	r3,-12(fp)
  815514:	00800044 	movi	r2,1
  815518:	18800c45 	stb	r2,49(r3)
  81551c:	00000206 	br	815528 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  815520:	e0bffd17 	ldw	r2,-12(fp)
  815524:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  815528:	e0bffd17 	ldw	r2,-12(fp)
  81552c:	10800c03 	ldbu	r2,48(r2)
  815530:	10803fcc 	andi	r2,r2,255
  815534:	1080020c 	andi	r2,r2,8
  815538:	1004c03a 	cmpne	r2,r2,zero
  81553c:	1000221e 	bne	r2,zero,8155c8 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  815540:	e0bffd17 	ldw	r2,-12(fp)
  815544:	10c00d83 	ldbu	r3,54(r2)
  815548:	008020b4 	movhi	r2,130
  81554c:	10bcc704 	addi	r2,r2,-3300
  815550:	10800003 	ldbu	r2,0(r2)
  815554:	1884b03a 	or	r2,r3,r2
  815558:	1007883a 	mov	r3,r2
  81555c:	008020b4 	movhi	r2,130
  815560:	10bcc704 	addi	r2,r2,-3300
  815564:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  815568:	e0bffd17 	ldw	r2,-12(fp)
  81556c:	10800d03 	ldbu	r2,52(r2)
  815570:	11003fcc 	andi	r4,r2,255
  815574:	e0bffd17 	ldw	r2,-12(fp)
  815578:	10800d03 	ldbu	r2,52(r2)
  81557c:	10c03fcc 	andi	r3,r2,255
  815580:	008020b4 	movhi	r2,130
  815584:	10bcc744 	addi	r2,r2,-3299
  815588:	10c5883a 	add	r2,r2,r3
  81558c:	10c00003 	ldbu	r3,0(r2)
  815590:	e0bffd17 	ldw	r2,-12(fp)
  815594:	10800d43 	ldbu	r2,53(r2)
  815598:	1884b03a 	or	r2,r3,r2
  81559c:	1007883a 	mov	r3,r2
  8155a0:	008020b4 	movhi	r2,130
  8155a4:	10bcc744 	addi	r2,r2,-3299
  8155a8:	1105883a 	add	r2,r2,r4
  8155ac:	10c00005 	stb	r3,0(r2)
  8155b0:	e0bffc17 	ldw	r2,-16(fp)
  8155b4:	e0bff715 	stw	r2,-36(fp)
  8155b8:	e0bff717 	ldw	r2,-36(fp)
  8155bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  8155c0:	080ee300 	call	80ee30 <OS_Sched>
  8155c4:	00000406 	br	8155d8 <OSTimeDlyResume+0x1f4>
  8155c8:	e0bffc17 	ldw	r2,-16(fp)
  8155cc:	e0bff615 	stw	r2,-40(fp)
  8155d0:	e0bff617 	ldw	r2,-40(fp)
  8155d4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  8155d8:	e03fff15 	stw	zero,-4(fp)
  8155dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8155e0:	e037883a 	mov	sp,fp
  8155e4:	dfc00117 	ldw	ra,4(sp)
  8155e8:	df000017 	ldw	fp,0(sp)
  8155ec:	dec00204 	addi	sp,sp,8
  8155f0:	f800283a 	ret

008155f4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  8155f4:	defffb04 	addi	sp,sp,-20
  8155f8:	df000415 	stw	fp,16(sp)
  8155fc:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815600:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815604:	0005303a 	rdctl	r2,status
  815608:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81560c:	e0fffd17 	ldw	r3,-12(fp)
  815610:	00bfff84 	movi	r2,-2
  815614:	1884703a 	and	r2,r3,r2
  815618:	1001703a 	wrctl	status,r2
  
  return context;
  81561c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  815620:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  815624:	008020b4 	movhi	r2,130
  815628:	10bccb04 	addi	r2,r2,-3284
  81562c:	10800017 	ldw	r2,0(r2)
  815630:	e0bfff15 	stw	r2,-4(fp)
  815634:	e0bffe17 	ldw	r2,-8(fp)
  815638:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81563c:	e0bffc17 	ldw	r2,-16(fp)
  815640:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  815644:	e0bfff17 	ldw	r2,-4(fp)
}
  815648:	e037883a 	mov	sp,fp
  81564c:	df000017 	ldw	fp,0(sp)
  815650:	dec00104 	addi	sp,sp,4
  815654:	f800283a 	ret

00815658 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  815658:	defffb04 	addi	sp,sp,-20
  81565c:	df000415 	stw	fp,16(sp)
  815660:	df000404 	addi	fp,sp,16
  815664:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815668:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81566c:	0005303a 	rdctl	r2,status
  815670:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815674:	e0fffd17 	ldw	r3,-12(fp)
  815678:	00bfff84 	movi	r2,-2
  81567c:	1884703a 	and	r2,r3,r2
  815680:	1001703a 	wrctl	status,r2
  
  return context;
  815684:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  815688:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  81568c:	00c020b4 	movhi	r3,130
  815690:	18fccb04 	addi	r3,r3,-3284
  815694:	e0bfff17 	ldw	r2,-4(fp)
  815698:	18800015 	stw	r2,0(r3)
  81569c:	e0bffe17 	ldw	r2,-8(fp)
  8156a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8156a4:	e0bffc17 	ldw	r2,-16(fp)
  8156a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  8156ac:	e037883a 	mov	sp,fp
  8156b0:	df000017 	ldw	fp,0(sp)
  8156b4:	dec00104 	addi	sp,sp,4
  8156b8:	f800283a 	ret

008156bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8156bc:	defffd04 	addi	sp,sp,-12
  8156c0:	dfc00215 	stw	ra,8(sp)
  8156c4:	df000115 	stw	fp,4(sp)
  8156c8:	df000104 	addi	fp,sp,4
  8156cc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  8156d0:	081be2c0 	call	81be2c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8156d4:	00800044 	movi	r2,1
  8156d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8156dc:	e037883a 	mov	sp,fp
  8156e0:	dfc00117 	ldw	ra,4(sp)
  8156e4:	df000017 	ldw	fp,0(sp)
  8156e8:	dec00204 	addi	sp,sp,8
  8156ec:	f800283a 	ret

008156f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8156f0:	defffe04 	addi	sp,sp,-8
  8156f4:	dfc00115 	stw	ra,4(sp)
  8156f8:	df000015 	stw	fp,0(sp)
  8156fc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  815700:	01006474 	movhi	r4,401
  815704:	21250004 	addi	r4,r4,-27648
  815708:	000b883a 	mov	r5,zero
  81570c:	000d883a 	mov	r6,zero
  815710:	01c0fa04 	movi	r7,1000
  815714:	08165800 	call	816580 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  815718:	010020b4 	movhi	r4,130
  81571c:	21383504 	addi	r4,r4,-7980
  815720:	000b883a 	mov	r5,zero
  815724:	01800044 	movi	r6,1
  815728:	08158fc0 	call	8158fc <altera_avalon_jtag_uart_init>
  81572c:	010020b4 	movhi	r4,130
  815730:	21382b04 	addi	r4,r4,-8020
  815734:	081577c0 	call	81577c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  815738:	010020b4 	movhi	r4,130
  81573c:	213c4604 	addi	r4,r4,-3816
  815740:	08166b80 	call	8166b8 <alt_up_character_lcd_init>
  815744:	010020b4 	movhi	r4,130
  815748:	213c4604 	addi	r4,r4,-3816
  81574c:	081577c0 	call	81577c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
  815750:	010020b4 	movhi	r4,130
  815754:	213c5104 	addi	r4,r4,-3772
  815758:	081577c0 	call	81577c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
  81575c:	010020b4 	movhi	r4,130
  815760:	213c5c04 	addi	r4,r4,-3728
  815764:	081577c0 	call	81577c <alt_dev_reg>
}
  815768:	e037883a 	mov	sp,fp
  81576c:	dfc00117 	ldw	ra,4(sp)
  815770:	df000017 	ldw	fp,0(sp)
  815774:	dec00204 	addi	sp,sp,8
  815778:	f800283a 	ret

0081577c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  81577c:	defffd04 	addi	sp,sp,-12
  815780:	dfc00215 	stw	ra,8(sp)
  815784:	df000115 	stw	fp,4(sp)
  815788:	df000104 	addi	fp,sp,4
  81578c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  815790:	e13fff17 	ldw	r4,-4(fp)
  815794:	014020b4 	movhi	r5,130
  815798:	297c7004 	addi	r5,r5,-3648
  81579c:	081b4540 	call	81b454 <alt_dev_llist_insert>
}
  8157a0:	e037883a 	mov	sp,fp
  8157a4:	dfc00117 	ldw	ra,4(sp)
  8157a8:	df000017 	ldw	fp,0(sp)
  8157ac:	dec00204 	addi	sp,sp,8
  8157b0:	f800283a 	ret

008157b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8157b4:	defffa04 	addi	sp,sp,-24
  8157b8:	dfc00515 	stw	ra,20(sp)
  8157bc:	df000415 	stw	fp,16(sp)
  8157c0:	df000404 	addi	fp,sp,16
  8157c4:	e13ffd15 	stw	r4,-12(fp)
  8157c8:	e17ffe15 	stw	r5,-8(fp)
  8157cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8157d0:	e0bffd17 	ldw	r2,-12(fp)
  8157d4:	10800017 	ldw	r2,0(r2)
  8157d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8157dc:	e0bffc17 	ldw	r2,-16(fp)
  8157e0:	11000a04 	addi	r4,r2,40
  8157e4:	e0bffd17 	ldw	r2,-12(fp)
  8157e8:	11c00217 	ldw	r7,8(r2)
  8157ec:	e17ffe17 	ldw	r5,-8(fp)
  8157f0:	e1bfff17 	ldw	r6,-4(fp)
  8157f4:	0815f700 	call	815f70 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8157f8:	e037883a 	mov	sp,fp
  8157fc:	dfc00117 	ldw	ra,4(sp)
  815800:	df000017 	ldw	fp,0(sp)
  815804:	dec00204 	addi	sp,sp,8
  815808:	f800283a 	ret

0081580c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81580c:	defffa04 	addi	sp,sp,-24
  815810:	dfc00515 	stw	ra,20(sp)
  815814:	df000415 	stw	fp,16(sp)
  815818:	df000404 	addi	fp,sp,16
  81581c:	e13ffd15 	stw	r4,-12(fp)
  815820:	e17ffe15 	stw	r5,-8(fp)
  815824:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  815828:	e0bffd17 	ldw	r2,-12(fp)
  81582c:	10800017 	ldw	r2,0(r2)
  815830:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  815834:	e0bffc17 	ldw	r2,-16(fp)
  815838:	11000a04 	addi	r4,r2,40
  81583c:	e0bffd17 	ldw	r2,-12(fp)
  815840:	11c00217 	ldw	r7,8(r2)
  815844:	e17ffe17 	ldw	r5,-8(fp)
  815848:	e1bfff17 	ldw	r6,-4(fp)
  81584c:	08162300 	call	816230 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  815850:	e037883a 	mov	sp,fp
  815854:	dfc00117 	ldw	ra,4(sp)
  815858:	df000017 	ldw	fp,0(sp)
  81585c:	dec00204 	addi	sp,sp,8
  815860:	f800283a 	ret

00815864 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  815864:	defffc04 	addi	sp,sp,-16
  815868:	dfc00315 	stw	ra,12(sp)
  81586c:	df000215 	stw	fp,8(sp)
  815870:	df000204 	addi	fp,sp,8
  815874:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  815878:	e0bfff17 	ldw	r2,-4(fp)
  81587c:	10800017 	ldw	r2,0(r2)
  815880:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  815884:	e0bffe17 	ldw	r2,-8(fp)
  815888:	11000a04 	addi	r4,r2,40
  81588c:	e0bfff17 	ldw	r2,-4(fp)
  815890:	11400217 	ldw	r5,8(r2)
  815894:	0815e080 	call	815e08 <altera_avalon_jtag_uart_close>
}
  815898:	e037883a 	mov	sp,fp
  81589c:	dfc00117 	ldw	ra,4(sp)
  8158a0:	df000017 	ldw	fp,0(sp)
  8158a4:	dec00204 	addi	sp,sp,8
  8158a8:	f800283a 	ret

008158ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8158ac:	defffa04 	addi	sp,sp,-24
  8158b0:	dfc00515 	stw	ra,20(sp)
  8158b4:	df000415 	stw	fp,16(sp)
  8158b8:	df000404 	addi	fp,sp,16
  8158bc:	e13ffd15 	stw	r4,-12(fp)
  8158c0:	e17ffe15 	stw	r5,-8(fp)
  8158c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8158c8:	e0bffd17 	ldw	r2,-12(fp)
  8158cc:	10800017 	ldw	r2,0(r2)
  8158d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8158d4:	e0bffc17 	ldw	r2,-16(fp)
  8158d8:	11000a04 	addi	r4,r2,40
  8158dc:	e17ffe17 	ldw	r5,-8(fp)
  8158e0:	e1bfff17 	ldw	r6,-4(fp)
  8158e4:	0815e7c0 	call	815e7c <altera_avalon_jtag_uart_ioctl>
}
  8158e8:	e037883a 	mov	sp,fp
  8158ec:	dfc00117 	ldw	ra,4(sp)
  8158f0:	df000017 	ldw	fp,0(sp)
  8158f4:	dec00204 	addi	sp,sp,8
  8158f8:	f800283a 	ret

008158fc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8158fc:	defff504 	addi	sp,sp,-44
  815900:	dfc00a15 	stw	ra,40(sp)
  815904:	df000915 	stw	fp,36(sp)
  815908:	df000904 	addi	fp,sp,36
  81590c:	e13ffd15 	stw	r4,-12(fp)
  815910:	e17ffe15 	stw	r5,-8(fp)
  815914:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  815918:	e0bffd17 	ldw	r2,-12(fp)
  81591c:	10800c04 	addi	r2,r2,48
  815920:	e0bffb15 	stw	r2,-20(fp)
  815924:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  815928:	e13ffc0b 	ldhu	r4,-16(fp)
  81592c:	e17ffc84 	addi	r5,fp,-14
  815930:	080f9d80 	call	80f9d8 <OSFlagCreate>
  815934:	1007883a 	mov	r3,r2
  815938:	e0bffb17 	ldw	r2,-20(fp)
  81593c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  815940:	e0bffd17 	ldw	r2,-12(fp)
  815944:	10800a04 	addi	r2,r2,40
  815948:	e0bff915 	stw	r2,-28(fp)
  81594c:	00800044 	movi	r2,1
  815950:	e0bffa0d 	sth	r2,-24(fp)
  815954:	e13ffa0b 	ldhu	r4,-24(fp)
  815958:	0812bdc0 	call	812bdc <OSSemCreate>
  81595c:	1007883a 	mov	r3,r2
  815960:	e0bff917 	ldw	r2,-28(fp)
  815964:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  815968:	e0bffd17 	ldw	r2,-12(fp)
  81596c:	10800b04 	addi	r2,r2,44
  815970:	e0bff715 	stw	r2,-36(fp)
  815974:	00800044 	movi	r2,1
  815978:	e0bff80d 	sth	r2,-32(fp)
  81597c:	e13ff80b 	ldhu	r4,-32(fp)
  815980:	0812bdc0 	call	812bdc <OSSemCreate>
  815984:	1007883a 	mov	r3,r2
  815988:	e0bff717 	ldw	r2,-36(fp)
  81598c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  815990:	e0fffd17 	ldw	r3,-12(fp)
  815994:	00800044 	movi	r2,1
  815998:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  81599c:	e0bffd17 	ldw	r2,-12(fp)
  8159a0:	10800017 	ldw	r2,0(r2)
  8159a4:	11000104 	addi	r4,r2,4
  8159a8:	e0bffd17 	ldw	r2,-12(fp)
  8159ac:	10800817 	ldw	r2,32(r2)
  8159b0:	1007883a 	mov	r3,r2
  8159b4:	2005883a 	mov	r2,r4
  8159b8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  8159bc:	e13fff17 	ldw	r4,-4(fp)
  8159c0:	e17ffd17 	ldw	r5,-12(fp)
  8159c4:	01802074 	movhi	r6,129
  8159c8:	31968b04 	addi	r6,r6,23084
  8159cc:	081b8000 	call	81b800 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8159d0:	e0bffd17 	ldw	r2,-12(fp)
  8159d4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8159d8:	e0bffd17 	ldw	r2,-12(fp)
  8159dc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8159e0:	008020b4 	movhi	r2,130
  8159e4:	10bcdd04 	addi	r2,r2,-3212
  8159e8:	10800017 	ldw	r2,0(r2)
  8159ec:	100b883a 	mov	r5,r2
  8159f0:	01802074 	movhi	r6,129
  8159f4:	31973d04 	addi	r6,r6,23796
  8159f8:	e1fffd17 	ldw	r7,-12(fp)
  8159fc:	081b3000 	call	81b300 <alt_alarm_start>
  815a00:	1004403a 	cmpge	r2,r2,zero
  815a04:	1000041e 	bne	r2,zero,815a18 <altera_avalon_jtag_uart_init+0x11c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  815a08:	e0fffd17 	ldw	r3,-12(fp)
  815a0c:	00a00034 	movhi	r2,32768
  815a10:	10bfffc4 	addi	r2,r2,-1
  815a14:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  815a18:	e037883a 	mov	sp,fp
  815a1c:	dfc00117 	ldw	ra,4(sp)
  815a20:	df000017 	ldw	fp,0(sp)
  815a24:	dec00204 	addi	sp,sp,8
  815a28:	f800283a 	ret

00815a2c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  815a2c:	defff104 	addi	sp,sp,-60
  815a30:	dfc00e15 	stw	ra,56(sp)
  815a34:	df000d15 	stw	fp,52(sp)
  815a38:	df000d04 	addi	fp,sp,52
  815a3c:	e13ffe15 	stw	r4,-8(fp)
  815a40:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  815a44:	e0bffe17 	ldw	r2,-8(fp)
  815a48:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
  815a4c:	e0bffc17 	ldw	r2,-16(fp)
  815a50:	10800017 	ldw	r2,0(r2)
  815a54:	e0bffb15 	stw	r2,-20(fp)
  815a58:	00000006 	br	815a5c <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  815a5c:	e0bffb17 	ldw	r2,-20(fp)
  815a60:	10800104 	addi	r2,r2,4
  815a64:	10800037 	ldwio	r2,0(r2)
  815a68:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  815a6c:	e0bffa17 	ldw	r2,-24(fp)
  815a70:	1080c00c 	andi	r2,r2,768
  815a74:	1005003a 	cmpeq	r2,r2,zero
  815a78:	1000991e 	bne	r2,zero,815ce0 <altera_avalon_jtag_uart_irq+0x2b4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  815a7c:	e0bffa17 	ldw	r2,-24(fp)
  815a80:	1080400c 	andi	r2,r2,256
  815a84:	1005003a 	cmpeq	r2,r2,zero
  815a88:	1000481e 	bne	r2,zero,815bac <altera_avalon_jtag_uart_irq+0x180>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  815a8c:	00800074 	movhi	r2,1
  815a90:	e0bff915 	stw	r2,-28(fp)
  815a94:	00000006 	br	815a98 <altera_avalon_jtag_uart_irq+0x6c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815a98:	e0bffc17 	ldw	r2,-16(fp)
  815a9c:	10800d17 	ldw	r2,52(r2)
  815aa0:	10800044 	addi	r2,r2,1
  815aa4:	1081ffcc 	andi	r2,r2,2047
  815aa8:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
  815aac:	e0bffc17 	ldw	r2,-16(fp)
  815ab0:	10c00e17 	ldw	r3,56(r2)
  815ab4:	e0bff817 	ldw	r2,-32(fp)
  815ab8:	18802826 	beq	r3,r2,815b5c <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  815abc:	e0bffb17 	ldw	r2,-20(fp)
  815ac0:	10800037 	ldwio	r2,0(r2)
  815ac4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  815ac8:	e0bff917 	ldw	r2,-28(fp)
  815acc:	10a0000c 	andi	r2,r2,32768
  815ad0:	1005003a 	cmpeq	r2,r2,zero
  815ad4:	1000211e 	bne	r2,zero,815b5c <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  815ad8:	e0bffc17 	ldw	r2,-16(fp)
  815adc:	10c00d17 	ldw	r3,52(r2)
  815ae0:	e0bff917 	ldw	r2,-28(fp)
  815ae4:	1009883a 	mov	r4,r2
  815ae8:	e0bffc17 	ldw	r2,-16(fp)
  815aec:	1885883a 	add	r2,r3,r2
  815af0:	10801104 	addi	r2,r2,68
  815af4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815af8:	e0bffc17 	ldw	r2,-16(fp)
  815afc:	10800d17 	ldw	r2,52(r2)
  815b00:	10800044 	addi	r2,r2,1
  815b04:	10c1ffcc 	andi	r3,r2,2047
  815b08:	e0bffc17 	ldw	r2,-16(fp)
  815b0c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  815b10:	e0bffc17 	ldw	r2,-16(fp)
  815b14:	10800c17 	ldw	r2,48(r2)
  815b18:	e0bff515 	stw	r2,-44(fp)
  815b1c:	00800044 	movi	r2,1
  815b20:	e0bff60d 	sth	r2,-40(fp)
  815b24:	00800044 	movi	r2,1
  815b28:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  815b2c:	008020b4 	movhi	r2,130
  815b30:	10bcbb44 	addi	r2,r2,-3347
  815b34:	10800003 	ldbu	r2,0(r2)
  815b38:	10803fcc 	andi	r2,r2,255
  815b3c:	1005003a 	cmpeq	r2,r2,zero
  815b40:	103fd51e 	bne	r2,zero,815a98 <altera_avalon_jtag_uart_irq+0x6c>
  {
    OSFlagPost (group, flags, opt, &err);
  815b44:	e17ff60b 	ldhu	r5,-40(fp)
  815b48:	e1bff683 	ldbu	r6,-38(fp)
  815b4c:	e1fffd04 	addi	r7,fp,-12
  815b50:	e13ff517 	ldw	r4,-44(fp)
  815b54:	08107000 	call	810700 <OSFlagPost>
    return err;
  815b58:	003fcf06 	br	815a98 <altera_avalon_jtag_uart_irq+0x6c>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  815b5c:	e0bff917 	ldw	r2,-28(fp)
  815b60:	10bfffec 	andhi	r2,r2,65535
  815b64:	1005003a 	cmpeq	r2,r2,zero
  815b68:	1000101e 	bne	r2,zero,815bac <altera_avalon_jtag_uart_irq+0x180>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  815b6c:	e0bffc17 	ldw	r2,-16(fp)
  815b70:	10c00817 	ldw	r3,32(r2)
  815b74:	00bfff84 	movi	r2,-2
  815b78:	1886703a 	and	r3,r3,r2
  815b7c:	e0bffc17 	ldw	r2,-16(fp)
  815b80:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  815b84:	e0bffb17 	ldw	r2,-20(fp)
  815b88:	11000104 	addi	r4,r2,4
  815b8c:	e0bffc17 	ldw	r2,-16(fp)
  815b90:	10800817 	ldw	r2,32(r2)
  815b94:	1007883a 	mov	r3,r2
  815b98:	2005883a 	mov	r2,r4
  815b9c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  815ba0:	e0bffb17 	ldw	r2,-20(fp)
  815ba4:	10800104 	addi	r2,r2,4
  815ba8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  815bac:	e0bffa17 	ldw	r2,-24(fp)
  815bb0:	1080800c 	andi	r2,r2,512
  815bb4:	1005003a 	cmpeq	r2,r2,zero
  815bb8:	103fa81e 	bne	r2,zero,815a5c <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  815bbc:	e0bffa17 	ldw	r2,-24(fp)
  815bc0:	10bfffec 	andhi	r2,r2,65535
  815bc4:	1004d43a 	srli	r2,r2,16
  815bc8:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  815bcc:	00002706 	br	815c6c <altera_avalon_jtag_uart_irq+0x240>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  815bd0:	e13ffb17 	ldw	r4,-20(fp)
  815bd4:	e0bffc17 	ldw	r2,-16(fp)
  815bd8:	10c01017 	ldw	r3,64(r2)
  815bdc:	e0bffc17 	ldw	r2,-16(fp)
  815be0:	1885883a 	add	r2,r3,r2
  815be4:	10821104 	addi	r2,r2,2116
  815be8:	10800003 	ldbu	r2,0(r2)
  815bec:	10c03fcc 	andi	r3,r2,255
  815bf0:	18c0201c 	xori	r3,r3,128
  815bf4:	18ffe004 	addi	r3,r3,-128
  815bf8:	2005883a 	mov	r2,r4
  815bfc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815c00:	e0bffc17 	ldw	r2,-16(fp)
  815c04:	10801017 	ldw	r2,64(r2)
  815c08:	10800044 	addi	r2,r2,1
  815c0c:	10c1ffcc 	andi	r3,r2,2047
  815c10:	e0bffc17 	ldw	r2,-16(fp)
  815c14:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  815c18:	e0bffc17 	ldw	r2,-16(fp)
  815c1c:	10800c17 	ldw	r2,48(r2)
  815c20:	e0bff315 	stw	r2,-52(fp)
  815c24:	00800084 	movi	r2,2
  815c28:	e0bff40d 	sth	r2,-48(fp)
  815c2c:	00800044 	movi	r2,1
  815c30:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  815c34:	008020b4 	movhi	r2,130
  815c38:	10bcbb44 	addi	r2,r2,-3347
  815c3c:	10800003 	ldbu	r2,0(r2)
  815c40:	10803fcc 	andi	r2,r2,255
  815c44:	1005003a 	cmpeq	r2,r2,zero
  815c48:	1000051e 	bne	r2,zero,815c60 <altera_avalon_jtag_uart_irq+0x234>
  {
    OSFlagPost (group, flags, opt, &err);
  815c4c:	e17ff40b 	ldhu	r5,-48(fp)
  815c50:	e1bff483 	ldbu	r6,-46(fp)
  815c54:	e1fffd44 	addi	r7,fp,-11
  815c58:	e13ff317 	ldw	r4,-52(fp)
  815c5c:	08107000 	call	810700 <OSFlagPost>

        space--;
  815c60:	e0bff717 	ldw	r2,-36(fp)
  815c64:	10bfffc4 	addi	r2,r2,-1
  815c68:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  815c6c:	e0bff717 	ldw	r2,-36(fp)
  815c70:	1005003a 	cmpeq	r2,r2,zero
  815c74:	1000051e 	bne	r2,zero,815c8c <altera_avalon_jtag_uart_irq+0x260>
  815c78:	e0bffc17 	ldw	r2,-16(fp)
  815c7c:	10c01017 	ldw	r3,64(r2)
  815c80:	e0bffc17 	ldw	r2,-16(fp)
  815c84:	10800f17 	ldw	r2,60(r2)
  815c88:	18bfd11e 	bne	r3,r2,815bd0 <altera_avalon_jtag_uart_irq+0x1a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  815c8c:	e0bff717 	ldw	r2,-36(fp)
  815c90:	1005003a 	cmpeq	r2,r2,zero
  815c94:	103f711e 	bne	r2,zero,815a5c <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  815c98:	e0bffc17 	ldw	r2,-16(fp)
  815c9c:	10c00817 	ldw	r3,32(r2)
  815ca0:	00bfff44 	movi	r2,-3
  815ca4:	1886703a 	and	r3,r3,r2
  815ca8:	e0bffc17 	ldw	r2,-16(fp)
  815cac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  815cb0:	e0bffc17 	ldw	r2,-16(fp)
  815cb4:	10800017 	ldw	r2,0(r2)
  815cb8:	11000104 	addi	r4,r2,4
  815cbc:	e0bffc17 	ldw	r2,-16(fp)
  815cc0:	10800817 	ldw	r2,32(r2)
  815cc4:	1007883a 	mov	r3,r2
  815cc8:	2005883a 	mov	r2,r4
  815ccc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  815cd0:	e0bffb17 	ldw	r2,-20(fp)
  815cd4:	10800104 	addi	r2,r2,4
  815cd8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  815cdc:	003f5f06 	br	815a5c <altera_avalon_jtag_uart_irq+0x30>
}
  815ce0:	e037883a 	mov	sp,fp
  815ce4:	dfc00117 	ldw	ra,4(sp)
  815ce8:	df000017 	ldw	fp,0(sp)
  815cec:	dec00204 	addi	sp,sp,8
  815cf0:	f800283a 	ret

00815cf4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  815cf4:	defff804 	addi	sp,sp,-32
  815cf8:	dfc00715 	stw	ra,28(sp)
  815cfc:	df000615 	stw	fp,24(sp)
  815d00:	df000604 	addi	fp,sp,24
  815d04:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  815d08:	e0bfff17 	ldw	r2,-4(fp)
  815d0c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  815d10:	e0bffd17 	ldw	r2,-12(fp)
  815d14:	10800017 	ldw	r2,0(r2)
  815d18:	10800104 	addi	r2,r2,4
  815d1c:	10800037 	ldwio	r2,0(r2)
  815d20:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  815d24:	e0bffc17 	ldw	r2,-16(fp)
  815d28:	1081000c 	andi	r2,r2,1024
  815d2c:	1005003a 	cmpeq	r2,r2,zero
  815d30:	10000c1e 	bne	r2,zero,815d64 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  815d34:	e0bffd17 	ldw	r2,-12(fp)
  815d38:	10800017 	ldw	r2,0(r2)
  815d3c:	11000104 	addi	r4,r2,4
  815d40:	e0bffd17 	ldw	r2,-12(fp)
  815d44:	10800817 	ldw	r2,32(r2)
  815d48:	10810014 	ori	r2,r2,1024
  815d4c:	1007883a 	mov	r3,r2
  815d50:	2005883a 	mov	r2,r4
  815d54:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  815d58:	e0bffd17 	ldw	r2,-12(fp)
  815d5c:	10000915 	stw	zero,36(r2)
  815d60:	00002106 	br	815de8 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  815d64:	e0bffd17 	ldw	r2,-12(fp)
  815d68:	10c00917 	ldw	r3,36(r2)
  815d6c:	00a00034 	movhi	r2,32768
  815d70:	10bfff04 	addi	r2,r2,-4
  815d74:	10c01c36 	bltu	r2,r3,815de8 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  815d78:	e0bffd17 	ldw	r2,-12(fp)
  815d7c:	10800917 	ldw	r2,36(r2)
  815d80:	10c00044 	addi	r3,r2,1
  815d84:	e0bffd17 	ldw	r2,-12(fp)
  815d88:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  815d8c:	e0bffd17 	ldw	r2,-12(fp)
  815d90:	10c00917 	ldw	r3,36(r2)
  815d94:	e0bffd17 	ldw	r2,-12(fp)
  815d98:	10800117 	ldw	r2,4(r2)
  815d9c:	18801236 	bltu	r3,r2,815de8 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  815da0:	e0bffd17 	ldw	r2,-12(fp)
  815da4:	10800c17 	ldw	r2,48(r2)
  815da8:	e0bffa15 	stw	r2,-24(fp)
  815dac:	00800104 	movi	r2,4
  815db0:	e0bffb0d 	sth	r2,-20(fp)
  815db4:	00800044 	movi	r2,1
  815db8:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  815dbc:	008020b4 	movhi	r2,130
  815dc0:	10bcbb44 	addi	r2,r2,-3347
  815dc4:	10800003 	ldbu	r2,0(r2)
  815dc8:	10803fcc 	andi	r2,r2,255
  815dcc:	1005003a 	cmpeq	r2,r2,zero
  815dd0:	1000051e 	bne	r2,zero,815de8 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  815dd4:	e17ffb0b 	ldhu	r5,-20(fp)
  815dd8:	e1bffb83 	ldbu	r6,-18(fp)
  815ddc:	e1fffe04 	addi	r7,fp,-8
  815de0:	e13ffa17 	ldw	r4,-24(fp)
  815de4:	08107000 	call	810700 <OSFlagPost>
  815de8:	008020b4 	movhi	r2,130
  815dec:	10bcdd04 	addi	r2,r2,-3212
  815df0:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  815df4:	e037883a 	mov	sp,fp
  815df8:	dfc00117 	ldw	ra,4(sp)
  815dfc:	df000017 	ldw	fp,0(sp)
  815e00:	dec00204 	addi	sp,sp,8
  815e04:	f800283a 	ret

00815e08 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  815e08:	defffc04 	addi	sp,sp,-16
  815e0c:	df000315 	stw	fp,12(sp)
  815e10:	df000304 	addi	fp,sp,12
  815e14:	e13ffd15 	stw	r4,-12(fp)
  815e18:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  815e1c:	00000706 	br	815e3c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  815e20:	e0bffe17 	ldw	r2,-8(fp)
  815e24:	1090000c 	andi	r2,r2,16384
  815e28:	1005003a 	cmpeq	r2,r2,zero
  815e2c:	1000031e 	bne	r2,zero,815e3c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  815e30:	00bffd44 	movi	r2,-11
  815e34:	e0bfff15 	stw	r2,-4(fp)
  815e38:	00000b06 	br	815e68 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  815e3c:	e0bffd17 	ldw	r2,-12(fp)
  815e40:	10c01017 	ldw	r3,64(r2)
  815e44:	e0bffd17 	ldw	r2,-12(fp)
  815e48:	10800f17 	ldw	r2,60(r2)
  815e4c:	18800526 	beq	r3,r2,815e64 <altera_avalon_jtag_uart_close+0x5c>
  815e50:	e0bffd17 	ldw	r2,-12(fp)
  815e54:	10c00917 	ldw	r3,36(r2)
  815e58:	e0bffd17 	ldw	r2,-12(fp)
  815e5c:	10800117 	ldw	r2,4(r2)
  815e60:	18bfef36 	bltu	r3,r2,815e20 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  815e64:	e03fff15 	stw	zero,-4(fp)
  815e68:	e0bfff17 	ldw	r2,-4(fp)
}
  815e6c:	e037883a 	mov	sp,fp
  815e70:	df000017 	ldw	fp,0(sp)
  815e74:	dec00104 	addi	sp,sp,4
  815e78:	f800283a 	ret

00815e7c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  815e7c:	defff804 	addi	sp,sp,-32
  815e80:	df000715 	stw	fp,28(sp)
  815e84:	df000704 	addi	fp,sp,28
  815e88:	e13ffb15 	stw	r4,-20(fp)
  815e8c:	e17ffc15 	stw	r5,-16(fp)
  815e90:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  815e94:	00bff9c4 	movi	r2,-25
  815e98:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  815e9c:	e0bffc17 	ldw	r2,-16(fp)
  815ea0:	e0bfff15 	stw	r2,-4(fp)
  815ea4:	e0ffff17 	ldw	r3,-4(fp)
  815ea8:	189a8060 	cmpeqi	r2,r3,27137
  815eac:	1000041e 	bne	r2,zero,815ec0 <altera_avalon_jtag_uart_ioctl+0x44>
  815eb0:	e0ffff17 	ldw	r3,-4(fp)
  815eb4:	189a80a0 	cmpeqi	r2,r3,27138
  815eb8:	10001b1e 	bne	r2,zero,815f28 <altera_avalon_jtag_uart_ioctl+0xac>
  815ebc:	00002706 	br	815f5c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  815ec0:	e0bffb17 	ldw	r2,-20(fp)
  815ec4:	10c00117 	ldw	r3,4(r2)
  815ec8:	00a00034 	movhi	r2,32768
  815ecc:	10bfffc4 	addi	r2,r2,-1
  815ed0:	18802226 	beq	r3,r2,815f5c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  815ed4:	e0bffd17 	ldw	r2,-12(fp)
  815ed8:	10800017 	ldw	r2,0(r2)
  815edc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  815ee0:	e0bff917 	ldw	r2,-28(fp)
  815ee4:	10800090 	cmplti	r2,r2,2
  815ee8:	1000071e 	bne	r2,zero,815f08 <altera_avalon_jtag_uart_ioctl+0x8c>
  815eec:	e0fff917 	ldw	r3,-28(fp)
  815ef0:	00a00034 	movhi	r2,32768
  815ef4:	10bfffc4 	addi	r2,r2,-1
  815ef8:	18800326 	beq	r3,r2,815f08 <altera_avalon_jtag_uart_ioctl+0x8c>
  815efc:	e0bff917 	ldw	r2,-28(fp)
  815f00:	e0bffe15 	stw	r2,-8(fp)
  815f04:	00000306 	br	815f14 <altera_avalon_jtag_uart_ioctl+0x98>
  815f08:	00e00034 	movhi	r3,32768
  815f0c:	18ffff84 	addi	r3,r3,-2
  815f10:	e0fffe15 	stw	r3,-8(fp)
  815f14:	e0bffb17 	ldw	r2,-20(fp)
  815f18:	e0fffe17 	ldw	r3,-8(fp)
  815f1c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  815f20:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  815f24:	00000d06 	br	815f5c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  815f28:	e0bffb17 	ldw	r2,-20(fp)
  815f2c:	10c00117 	ldw	r3,4(r2)
  815f30:	00a00034 	movhi	r2,32768
  815f34:	10bfffc4 	addi	r2,r2,-1
  815f38:	18800826 	beq	r3,r2,815f5c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  815f3c:	e13ffd17 	ldw	r4,-12(fp)
  815f40:	e0bffb17 	ldw	r2,-20(fp)
  815f44:	10c00917 	ldw	r3,36(r2)
  815f48:	e0bffb17 	ldw	r2,-20(fp)
  815f4c:	10800117 	ldw	r2,4(r2)
  815f50:	1885803a 	cmpltu	r2,r3,r2
  815f54:	20800015 	stw	r2,0(r4)
      rc = 0;
  815f58:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  815f5c:	e0bffa17 	ldw	r2,-24(fp)
}
  815f60:	e037883a 	mov	sp,fp
  815f64:	df000017 	ldw	fp,0(sp)
  815f68:	dec00104 	addi	sp,sp,4
  815f6c:	f800283a 	ret

00815f70 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  815f70:	deffeb04 	addi	sp,sp,-84
  815f74:	dfc01415 	stw	ra,80(sp)
  815f78:	df001315 	stw	fp,76(sp)
  815f7c:	df001304 	addi	fp,sp,76
  815f80:	e13ffb15 	stw	r4,-20(fp)
  815f84:	e17ffc15 	stw	r5,-16(fp)
  815f88:	e1bffd15 	stw	r6,-12(fp)
  815f8c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  815f90:	e0bffc17 	ldw	r2,-16(fp)
  815f94:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  815f98:	e0bffb17 	ldw	r2,-20(fp)
  815f9c:	10800a17 	ldw	r2,40(r2)
  815fa0:	e0bff315 	stw	r2,-52(fp)
  815fa4:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  815fa8:	e17ff40b 	ldhu	r5,-48(fp)
  815fac:	e1bffa44 	addi	r6,fp,-23
  815fb0:	e13ff317 	ldw	r4,-52(fp)
  815fb4:	0812f900 	call	812f90 <OSSemPend>

  while (space > 0)
  815fb8:	00006406 	br	81614c <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  815fbc:	e0bffb17 	ldw	r2,-20(fp)
  815fc0:	10800d17 	ldw	r2,52(r2)
  815fc4:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  815fc8:	e0bffb17 	ldw	r2,-20(fp)
  815fcc:	10800e17 	ldw	r2,56(r2)
  815fd0:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  815fd4:	e0fff617 	ldw	r3,-40(fp)
  815fd8:	e0bff517 	ldw	r2,-44(fp)
  815fdc:	18800536 	bltu	r3,r2,815ff4 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  815fe0:	e0bff617 	ldw	r2,-40(fp)
  815fe4:	e0fff517 	ldw	r3,-44(fp)
  815fe8:	10c5c83a 	sub	r2,r2,r3
  815fec:	e0bff715 	stw	r2,-36(fp)
  815ff0:	00000406 	br	816004 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  815ff4:	00820004 	movi	r2,2048
  815ff8:	e0fff517 	ldw	r3,-44(fp)
  815ffc:	10c5c83a 	sub	r2,r2,r3
  816000:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  816004:	e0bff717 	ldw	r2,-36(fp)
  816008:	1005003a 	cmpeq	r2,r2,zero
  81600c:	10001f1e 	bne	r2,zero,81608c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  816010:	e0fffd17 	ldw	r3,-12(fp)
  816014:	e0bff717 	ldw	r2,-36(fp)
  816018:	1880022e 	bgeu	r3,r2,816024 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  81601c:	e0bffd17 	ldw	r2,-12(fp)
  816020:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  816024:	e0bffb17 	ldw	r2,-20(fp)
  816028:	10c01104 	addi	r3,r2,68
  81602c:	e0bff517 	ldw	r2,-44(fp)
  816030:	1887883a 	add	r3,r3,r2
  816034:	e0bff917 	ldw	r2,-28(fp)
  816038:	1009883a 	mov	r4,r2
  81603c:	180b883a 	mov	r5,r3
  816040:	e1bff717 	ldw	r6,-36(fp)
  816044:	08096ac0 	call	8096ac <memcpy>
      ptr   += n;
  816048:	e0fff717 	ldw	r3,-36(fp)
  81604c:	e0bff917 	ldw	r2,-28(fp)
  816050:	10c5883a 	add	r2,r2,r3
  816054:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  816058:	e0fffd17 	ldw	r3,-12(fp)
  81605c:	e0bff717 	ldw	r2,-36(fp)
  816060:	1885c83a 	sub	r2,r3,r2
  816064:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  816068:	e0fff517 	ldw	r3,-44(fp)
  81606c:	e0bff717 	ldw	r2,-36(fp)
  816070:	1885883a 	add	r2,r3,r2
  816074:	10c1ffcc 	andi	r3,r2,2047
  816078:	e0bffb17 	ldw	r2,-20(fp)
  81607c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  816080:	e0bffd17 	ldw	r2,-12(fp)
  816084:	10800048 	cmpgei	r2,r2,1
  816088:	103fcc1e 	bne	r2,zero,815fbc <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  81608c:	e0fff917 	ldw	r3,-28(fp)
  816090:	e0bffc17 	ldw	r2,-16(fp)
  816094:	1880301e 	bne	r3,r2,816158 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  816098:	e0bffe17 	ldw	r2,-8(fp)
  81609c:	1090000c 	andi	r2,r2,16384
  8160a0:	1004c03a 	cmpne	r2,r2,zero
  8160a4:	10002c1e 	bne	r2,zero,816158 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  8160a8:	008020b4 	movhi	r2,130
  8160ac:	10bcbb44 	addi	r2,r2,-3347
  8160b0:	10800003 	ldbu	r2,0(r2)
  8160b4:	10803fcc 	andi	r2,r2,255
  8160b8:	10800058 	cmpnei	r2,r2,1
  8160bc:	1000161e 	bne	r2,zero,816118 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  8160c0:	e0bffb17 	ldw	r2,-20(fp)
  8160c4:	10800c17 	ldw	r2,48(r2)
  8160c8:	e0bff015 	stw	r2,-64(fp)
  8160cc:	00800144 	movi	r2,5
  8160d0:	e0bff10d 	sth	r2,-60(fp)
  8160d4:	00bfe0c4 	movi	r2,-125
  8160d8:	e0bff185 	stb	r2,-58(fp)
  8160dc:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  8160e0:	008020b4 	movhi	r2,130
  8160e4:	10bcbb44 	addi	r2,r2,-3347
  8160e8:	10800003 	ldbu	r2,0(r2)
  8160ec:	10803fcc 	andi	r2,r2,255
  8160f0:	1005003a 	cmpeq	r2,r2,zero
  8160f4:	1000111e 	bne	r2,zero,81613c <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  8160f8:	e17ff10b 	ldhu	r5,-60(fp)
  8160fc:	e1bff183 	ldbu	r6,-58(fp)
  816100:	e1fff20b 	ldhu	r7,-56(fp)
  816104:	e0bffa04 	addi	r2,fp,-24
  816108:	d8800015 	stw	r2,0(sp)
  81610c:	e13ff017 	ldw	r4,-64(fp)
  816110:	08100540 	call	810054 <OSFlagPend>
    return err;
  816114:	00000906 	br	81613c <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  816118:	e0bffb17 	ldw	r2,-20(fp)
  81611c:	10c00d17 	ldw	r3,52(r2)
  816120:	e0bff617 	ldw	r2,-40(fp)
  816124:	1880051e 	bne	r3,r2,81613c <altera_avalon_jtag_uart_read+0x1cc>
  816128:	e0bffb17 	ldw	r2,-20(fp)
  81612c:	10c00917 	ldw	r3,36(r2)
  816130:	e0bffb17 	ldw	r2,-20(fp)
  816134:	10800117 	ldw	r2,4(r2)
  816138:	18bff736 	bltu	r3,r2,816118 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  81613c:	e0bffb17 	ldw	r2,-20(fp)
  816140:	10c00d17 	ldw	r3,52(r2)
  816144:	e0bff617 	ldw	r2,-40(fp)
  816148:	18800326 	beq	r3,r2,816158 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81614c:	e0bffd17 	ldw	r2,-12(fp)
  816150:	10800048 	cmpgei	r2,r2,1
  816154:	103f991e 	bne	r2,zero,815fbc <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  816158:	e0bffb17 	ldw	r2,-20(fp)
  81615c:	11000a17 	ldw	r4,40(r2)
  816160:	08133880 	call	813388 <OSSemPost>

  if (ptr != buffer)
  816164:	e0fff917 	ldw	r3,-28(fp)
  816168:	e0bffc17 	ldw	r2,-16(fp)
  81616c:	18801926 	beq	r3,r2,8161d4 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816170:	0005303a 	rdctl	r2,status
  816174:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816178:	e0ffef17 	ldw	r3,-68(fp)
  81617c:	00bfff84 	movi	r2,-2
  816180:	1884703a 	and	r2,r3,r2
  816184:	1001703a 	wrctl	status,r2
  
  return context;
  816188:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  81618c:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  816190:	e0bffb17 	ldw	r2,-20(fp)
  816194:	10800817 	ldw	r2,32(r2)
  816198:	10c00054 	ori	r3,r2,1
  81619c:	e0bffb17 	ldw	r2,-20(fp)
  8161a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8161a4:	e0bffb17 	ldw	r2,-20(fp)
  8161a8:	10800017 	ldw	r2,0(r2)
  8161ac:	11000104 	addi	r4,r2,4
  8161b0:	e0bffb17 	ldw	r2,-20(fp)
  8161b4:	10800817 	ldw	r2,32(r2)
  8161b8:	1007883a 	mov	r3,r2
  8161bc:	2005883a 	mov	r2,r4
  8161c0:	10c00035 	stwio	r3,0(r2)
  8161c4:	e0bff817 	ldw	r2,-32(fp)
  8161c8:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8161cc:	e0bfee17 	ldw	r2,-72(fp)
  8161d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8161d4:	e0fff917 	ldw	r3,-28(fp)
  8161d8:	e0bffc17 	ldw	r2,-16(fp)
  8161dc:	18800526 	beq	r3,r2,8161f4 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  8161e0:	e0fff917 	ldw	r3,-28(fp)
  8161e4:	e0bffc17 	ldw	r2,-16(fp)
  8161e8:	1887c83a 	sub	r3,r3,r2
  8161ec:	e0ffff15 	stw	r3,-4(fp)
  8161f0:	00000906 	br	816218 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  8161f4:	e0bffe17 	ldw	r2,-8(fp)
  8161f8:	1090000c 	andi	r2,r2,16384
  8161fc:	1005003a 	cmpeq	r2,r2,zero
  816200:	1000031e 	bne	r2,zero,816210 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  816204:	00bffd44 	movi	r2,-11
  816208:	e0bfff15 	stw	r2,-4(fp)
  81620c:	00000206 	br	816218 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  816210:	00bffec4 	movi	r2,-5
  816214:	e0bfff15 	stw	r2,-4(fp)
  816218:	e0bfff17 	ldw	r2,-4(fp)
}
  81621c:	e037883a 	mov	sp,fp
  816220:	dfc00117 	ldw	ra,4(sp)
  816224:	df000017 	ldw	fp,0(sp)
  816228:	dec00204 	addi	sp,sp,8
  81622c:	f800283a 	ret

00816230 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  816230:	deffeb04 	addi	sp,sp,-84
  816234:	dfc01415 	stw	ra,80(sp)
  816238:	df001315 	stw	fp,76(sp)
  81623c:	df001304 	addi	fp,sp,76
  816240:	e13ffb15 	stw	r4,-20(fp)
  816244:	e17ffc15 	stw	r5,-16(fp)
  816248:	e1bffd15 	stw	r6,-12(fp)
  81624c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  816250:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  816254:	e0bffc17 	ldw	r2,-16(fp)
  816258:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  81625c:	e0bffb17 	ldw	r2,-20(fp)
  816260:	10800b17 	ldw	r2,44(r2)
  816264:	e0bff315 	stw	r2,-52(fp)
  816268:	e03ff40d 	sth	zero,-48(fp)
  81626c:	e17ff40b 	ldhu	r5,-48(fp)
  816270:	e1bffa04 	addi	r6,fp,-24
  816274:	e13ff317 	ldw	r4,-52(fp)
  816278:	0812f900 	call	812f90 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81627c:	00003a06 	br	816368 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  816280:	e0bffb17 	ldw	r2,-20(fp)
  816284:	10800f17 	ldw	r2,60(r2)
  816288:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  81628c:	e0bffb17 	ldw	r2,-20(fp)
  816290:	10801017 	ldw	r2,64(r2)
  816294:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  816298:	e0fff917 	ldw	r3,-28(fp)
  81629c:	e0bff817 	ldw	r2,-32(fp)
  8162a0:	1880062e 	bgeu	r3,r2,8162bc <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  8162a4:	e0fff817 	ldw	r3,-32(fp)
  8162a8:	e0bff917 	ldw	r2,-28(fp)
  8162ac:	1885c83a 	sub	r2,r3,r2
  8162b0:	10bfffc4 	addi	r2,r2,-1
  8162b4:	e0bff715 	stw	r2,-36(fp)
  8162b8:	00000c06 	br	8162ec <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  8162bc:	e0bff817 	ldw	r2,-32(fp)
  8162c0:	1005003a 	cmpeq	r2,r2,zero
  8162c4:	1000051e 	bne	r2,zero,8162dc <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8162c8:	00820004 	movi	r2,2048
  8162cc:	e0fff917 	ldw	r3,-28(fp)
  8162d0:	10c5c83a 	sub	r2,r2,r3
  8162d4:	e0bff715 	stw	r2,-36(fp)
  8162d8:	00000406 	br	8162ec <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8162dc:	0081ffc4 	movi	r2,2047
  8162e0:	e0fff917 	ldw	r3,-28(fp)
  8162e4:	10c5c83a 	sub	r2,r2,r3
  8162e8:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  8162ec:	e0bff717 	ldw	r2,-36(fp)
  8162f0:	1005003a 	cmpeq	r2,r2,zero
  8162f4:	10001f1e 	bne	r2,zero,816374 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  8162f8:	e0fffd17 	ldw	r3,-12(fp)
  8162fc:	e0bff717 	ldw	r2,-36(fp)
  816300:	1880022e 	bgeu	r3,r2,81630c <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  816304:	e0bffd17 	ldw	r2,-12(fp)
  816308:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  81630c:	e0bffb17 	ldw	r2,-20(fp)
  816310:	10c21104 	addi	r3,r2,2116
  816314:	e0bff917 	ldw	r2,-28(fp)
  816318:	1885883a 	add	r2,r3,r2
  81631c:	e0fffc17 	ldw	r3,-16(fp)
  816320:	1009883a 	mov	r4,r2
  816324:	180b883a 	mov	r5,r3
  816328:	e1bff717 	ldw	r6,-36(fp)
  81632c:	08096ac0 	call	8096ac <memcpy>
      ptr   += n;
  816330:	e0fff717 	ldw	r3,-36(fp)
  816334:	e0bffc17 	ldw	r2,-16(fp)
  816338:	10c5883a 	add	r2,r2,r3
  81633c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  816340:	e0fffd17 	ldw	r3,-12(fp)
  816344:	e0bff717 	ldw	r2,-36(fp)
  816348:	1885c83a 	sub	r2,r3,r2
  81634c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  816350:	e0fff917 	ldw	r3,-28(fp)
  816354:	e0bff717 	ldw	r2,-36(fp)
  816358:	1885883a 	add	r2,r3,r2
  81635c:	10c1ffcc 	andi	r3,r2,2047
  816360:	e0bffb17 	ldw	r2,-20(fp)
  816364:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  816368:	e0bffd17 	ldw	r2,-12(fp)
  81636c:	10800048 	cmpgei	r2,r2,1
  816370:	103fc31e 	bne	r2,zero,816280 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816374:	0005303a 	rdctl	r2,status
  816378:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81637c:	e0fff217 	ldw	r3,-56(fp)
  816380:	00bfff84 	movi	r2,-2
  816384:	1884703a 	and	r2,r3,r2
  816388:	1001703a 	wrctl	status,r2
  
  return context;
  81638c:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  816390:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  816394:	e0bffb17 	ldw	r2,-20(fp)
  816398:	10800817 	ldw	r2,32(r2)
  81639c:	10c00094 	ori	r3,r2,2
  8163a0:	e0bffb17 	ldw	r2,-20(fp)
  8163a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8163a8:	e0bffb17 	ldw	r2,-20(fp)
  8163ac:	10800017 	ldw	r2,0(r2)
  8163b0:	11000104 	addi	r4,r2,4
  8163b4:	e0bffb17 	ldw	r2,-20(fp)
  8163b8:	10800817 	ldw	r2,32(r2)
  8163bc:	1007883a 	mov	r3,r2
  8163c0:	2005883a 	mov	r2,r4
  8163c4:	10c00035 	stwio	r3,0(r2)
  8163c8:	e0bff617 	ldw	r2,-40(fp)
  8163cc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8163d0:	e0bff117 	ldw	r2,-60(fp)
  8163d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8163d8:	e0bffd17 	ldw	r2,-12(fp)
  8163dc:	10800050 	cmplti	r2,r2,1
  8163e0:	10002d1e 	bne	r2,zero,816498 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  8163e4:	e0bffe17 	ldw	r2,-8(fp)
  8163e8:	1090000c 	andi	r2,r2,16384
  8163ec:	1004c03a 	cmpne	r2,r2,zero
  8163f0:	10002c1e 	bne	r2,zero,8164a4 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  8163f4:	008020b4 	movhi	r2,130
  8163f8:	10bcbb44 	addi	r2,r2,-3347
  8163fc:	10800003 	ldbu	r2,0(r2)
  816400:	10803fcc 	andi	r2,r2,255
  816404:	10800058 	cmpnei	r2,r2,1
  816408:	1000161e 	bne	r2,zero,816464 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  81640c:	e0bffb17 	ldw	r2,-20(fp)
  816410:	10800c17 	ldw	r2,48(r2)
  816414:	e0bfee15 	stw	r2,-72(fp)
  816418:	00800184 	movi	r2,6
  81641c:	e0bfef0d 	sth	r2,-68(fp)
  816420:	00bfe0c4 	movi	r2,-125
  816424:	e0bfef85 	stb	r2,-66(fp)
  816428:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  81642c:	008020b4 	movhi	r2,130
  816430:	10bcbb44 	addi	r2,r2,-3347
  816434:	10800003 	ldbu	r2,0(r2)
  816438:	10803fcc 	andi	r2,r2,255
  81643c:	1005003a 	cmpeq	r2,r2,zero
  816440:	1000111e 	bne	r2,zero,816488 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  816444:	e17fef0b 	ldhu	r5,-68(fp)
  816448:	e1bfef83 	ldbu	r6,-66(fp)
  81644c:	e1fff00b 	ldhu	r7,-64(fp)
  816450:	e0bffa44 	addi	r2,fp,-23
  816454:	d8800015 	stw	r2,0(sp)
  816458:	e13fee17 	ldw	r4,-72(fp)
  81645c:	08100540 	call	810054 <OSFlagPend>
    return err;
  816460:	00000906 	br	816488 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  816464:	e0bffb17 	ldw	r2,-20(fp)
  816468:	10c01017 	ldw	r3,64(r2)
  81646c:	e0bff817 	ldw	r2,-32(fp)
  816470:	1880051e 	bne	r3,r2,816488 <altera_avalon_jtag_uart_write+0x258>
  816474:	e0bffb17 	ldw	r2,-20(fp)
  816478:	10c00917 	ldw	r3,36(r2)
  81647c:	e0bffb17 	ldw	r2,-20(fp)
  816480:	10800117 	ldw	r2,4(r2)
  816484:	18bff736 	bltu	r3,r2,816464 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  816488:	e0bffb17 	ldw	r2,-20(fp)
  81648c:	10c01017 	ldw	r3,64(r2)
  816490:	e0bff817 	ldw	r2,-32(fp)
  816494:	18800326 	beq	r3,r2,8164a4 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  816498:	e0bffd17 	ldw	r2,-12(fp)
  81649c:	10800048 	cmpgei	r2,r2,1
  8164a0:	103fb11e 	bne	r2,zero,816368 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  8164a4:	e0bffb17 	ldw	r2,-20(fp)
  8164a8:	11000b17 	ldw	r4,44(r2)
  8164ac:	08133880 	call	813388 <OSSemPost>

  if (ptr != start)
  8164b0:	e0fffc17 	ldw	r3,-16(fp)
  8164b4:	e0bff517 	ldw	r2,-44(fp)
  8164b8:	18800526 	beq	r3,r2,8164d0 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  8164bc:	e0fffc17 	ldw	r3,-16(fp)
  8164c0:	e0bff517 	ldw	r2,-44(fp)
  8164c4:	1887c83a 	sub	r3,r3,r2
  8164c8:	e0ffff15 	stw	r3,-4(fp)
  8164cc:	00000906 	br	8164f4 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  8164d0:	e0bffe17 	ldw	r2,-8(fp)
  8164d4:	1090000c 	andi	r2,r2,16384
  8164d8:	1005003a 	cmpeq	r2,r2,zero
  8164dc:	1000031e 	bne	r2,zero,8164ec <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  8164e0:	00bffd44 	movi	r2,-11
  8164e4:	e0bfff15 	stw	r2,-4(fp)
  8164e8:	00000206 	br	8164f4 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  8164ec:	00bffec4 	movi	r2,-5
  8164f0:	e0bfff15 	stw	r2,-4(fp)
  8164f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8164f8:	e037883a 	mov	sp,fp
  8164fc:	dfc00117 	ldw	ra,4(sp)
  816500:	df000017 	ldw	fp,0(sp)
  816504:	dec00204 	addi	sp,sp,8
  816508:	f800283a 	ret

0081650c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  81650c:	defff904 	addi	sp,sp,-28
  816510:	dfc00615 	stw	ra,24(sp)
  816514:	df000515 	stw	fp,20(sp)
  816518:	df000504 	addi	fp,sp,20
  81651c:	e13ffe15 	stw	r4,-8(fp)
  816520:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  816524:	e0bffe17 	ldw	r2,-8(fp)
  816528:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  81652c:	e0bffe17 	ldw	r2,-8(fp)
  816530:	10800104 	addi	r2,r2,4
  816534:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816538:	0005303a 	rdctl	r2,status
  81653c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816540:	e0fffc17 	ldw	r3,-16(fp)
  816544:	00bfff84 	movi	r2,-2
  816548:	1884703a 	and	r2,r3,r2
  81654c:	1001703a 	wrctl	status,r2
  
  return context;
  816550:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  816554:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  816558:	081bd1c0 	call	81bd1c <alt_tick>
  81655c:	e0bffd17 	ldw	r2,-12(fp)
  816560:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816564:	e0bffb17 	ldw	r2,-20(fp)
  816568:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  81656c:	e037883a 	mov	sp,fp
  816570:	dfc00117 	ldw	ra,4(sp)
  816574:	df000017 	ldw	fp,0(sp)
  816578:	dec00204 	addi	sp,sp,8
  81657c:	f800283a 	ret

00816580 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  816580:	defff904 	addi	sp,sp,-28
  816584:	dfc00615 	stw	ra,24(sp)
  816588:	df000515 	stw	fp,20(sp)
  81658c:	df000504 	addi	fp,sp,20
  816590:	e13ffc15 	stw	r4,-16(fp)
  816594:	e17ffd15 	stw	r5,-12(fp)
  816598:	e1bffe15 	stw	r6,-8(fp)
  81659c:	e1ffff15 	stw	r7,-4(fp)
  8165a0:	e0bfff17 	ldw	r2,-4(fp)
  8165a4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8165a8:	008020b4 	movhi	r2,130
  8165ac:	10bcdd04 	addi	r2,r2,-3212
  8165b0:	10800017 	ldw	r2,0(r2)
  8165b4:	1004c03a 	cmpne	r2,r2,zero
  8165b8:	1000041e 	bne	r2,zero,8165cc <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  8165bc:	00c020b4 	movhi	r3,130
  8165c0:	18fcdd04 	addi	r3,r3,-3212
  8165c4:	e0bffb17 	ldw	r2,-20(fp)
  8165c8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8165cc:	e0bffc17 	ldw	r2,-16(fp)
  8165d0:	10800104 	addi	r2,r2,4
  8165d4:	1007883a 	mov	r3,r2
  8165d8:	008001c4 	movi	r2,7
  8165dc:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  8165e0:	e13ffe17 	ldw	r4,-8(fp)
  8165e4:	e17ffc17 	ldw	r5,-16(fp)
  8165e8:	01802074 	movhi	r6,129
  8165ec:	31994304 	addi	r6,r6,25868
  8165f0:	081b8000 	call	81b800 <alt_irq_register>
#endif  
}
  8165f4:	e037883a 	mov	sp,fp
  8165f8:	dfc00117 	ldw	ra,4(sp)
  8165fc:	df000017 	ldw	fp,0(sp)
  816600:	dec00204 	addi	sp,sp,8
  816604:	f800283a 	ret

00816608 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  816608:	defffc04 	addi	sp,sp,-16
  81660c:	df000315 	stw	fp,12(sp)
  816610:	df000304 	addi	fp,sp,12
  816614:	e13ffe15 	stw	r4,-8(fp)
  816618:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  81661c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  816620:	e0bfff17 	ldw	r2,-4(fp)
  816624:	1004c03a 	cmpne	r2,r2,zero
  816628:	1000061e 	bne	r2,zero,816644 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  81662c:	e0bffe17 	ldw	r2,-8(fp)
  816630:	1007883a 	mov	r3,r2
  816634:	e0bffd03 	ldbu	r2,-12(fp)
  816638:	10c4b03a 	or	r2,r2,r3
  81663c:	e0bffd05 	stb	r2,-12(fp)
  816640:	00000806 	br	816664 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  816644:	e0bffe17 	ldw	r2,-8(fp)
  816648:	1007883a 	mov	r3,r2
  81664c:	e0bffd03 	ldbu	r2,-12(fp)
  816650:	10c4b03a 	or	r2,r2,r3
  816654:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  816658:	e0bffd03 	ldbu	r2,-12(fp)
  81665c:	10801014 	ori	r2,r2,64
  816660:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  816664:	e0fffd03 	ldbu	r3,-12(fp)
  816668:	00bfe004 	movi	r2,-128
  81666c:	1884b03a 	or	r2,r3,r2
  816670:	10803fcc 	andi	r2,r2,255
}
  816674:	e037883a 	mov	sp,fp
  816678:	df000017 	ldw	fp,0(sp)
  81667c:	dec00104 	addi	sp,sp,4
  816680:	f800283a 	ret

00816684 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  816684:	defffd04 	addi	sp,sp,-12
  816688:	df000215 	stw	fp,8(sp)
  81668c:	df000204 	addi	fp,sp,8
  816690:	e13ffe15 	stw	r4,-8(fp)
  816694:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  816698:	e0bffe17 	ldw	r2,-8(fp)
  81669c:	10800a17 	ldw	r2,40(r2)
  8166a0:	e0ffff03 	ldbu	r3,-4(fp)
  8166a4:	10c00025 	stbio	r3,0(r2)
}
  8166a8:	e037883a 	mov	sp,fp
  8166ac:	df000017 	ldw	fp,0(sp)
  8166b0:	dec00104 	addi	sp,sp,4
  8166b4:	f800283a 	ret

008166b8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  8166b8:	defffe04 	addi	sp,sp,-8
  8166bc:	df000115 	stw	fp,4(sp)
  8166c0:	df000104 	addi	fp,sp,4
  8166c4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  8166c8:	e0bfff17 	ldw	r2,-4(fp)
  8166cc:	10800a17 	ldw	r2,40(r2)
  8166d0:	1007883a 	mov	r3,r2
  8166d4:	00800044 	movi	r2,1
  8166d8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  8166dc:	e037883a 	mov	sp,fp
  8166e0:	df000017 	ldw	fp,0(sp)
  8166e4:	dec00104 	addi	sp,sp,4
  8166e8:	f800283a 	ret

008166ec <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  8166ec:	defffc04 	addi	sp,sp,-16
  8166f0:	dfc00315 	stw	ra,12(sp)
  8166f4:	df000215 	stw	fp,8(sp)
  8166f8:	df000204 	addi	fp,sp,8
  8166fc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  816700:	e13fff17 	ldw	r4,-4(fp)
  816704:	014020b4 	movhi	r5,130
  816708:	297c7004 	addi	r5,r5,-3648
  81670c:	081b6300 	call	81b630 <alt_find_dev>
  816710:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  816714:	e0bffe17 	ldw	r2,-8(fp)
}
  816718:	e037883a 	mov	sp,fp
  81671c:	dfc00117 	ldw	ra,4(sp)
  816720:	df000017 	ldw	fp,0(sp)
  816724:	dec00204 	addi	sp,sp,8
  816728:	f800283a 	ret

0081672c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  81672c:	defffb04 	addi	sp,sp,-20
  816730:	df000415 	stw	fp,16(sp)
  816734:	df000404 	addi	fp,sp,16
  816738:	e13ffd15 	stw	r4,-12(fp)
  81673c:	e17ffe15 	stw	r5,-8(fp)
  816740:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  816744:	e03ffc15 	stw	zero,-16(fp)
  816748:	00000f06 	br	816788 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  81674c:	e0bffd17 	ldw	r2,-12(fp)
  816750:	10800a17 	ldw	r2,40(r2)
  816754:	11000044 	addi	r4,r2,1
  816758:	e0fffc17 	ldw	r3,-16(fp)
  81675c:	e0bffe17 	ldw	r2,-8(fp)
  816760:	1885883a 	add	r2,r3,r2
  816764:	10800003 	ldbu	r2,0(r2)
  816768:	10c03fcc 	andi	r3,r2,255
  81676c:	18c0201c 	xori	r3,r3,128
  816770:	18ffe004 	addi	r3,r3,-128
  816774:	2005883a 	mov	r2,r4
  816778:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  81677c:	e0bffc17 	ldw	r2,-16(fp)
  816780:	10800044 	addi	r2,r2,1
  816784:	e0bffc15 	stw	r2,-16(fp)
  816788:	e0fffc17 	ldw	r3,-16(fp)
  81678c:	e0bfff17 	ldw	r2,-4(fp)
  816790:	18bfee36 	bltu	r3,r2,81674c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  816794:	e037883a 	mov	sp,fp
  816798:	df000017 	ldw	fp,0(sp)
  81679c:	dec00104 	addi	sp,sp,4
  8167a0:	f800283a 	ret

008167a4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  8167a4:	defffd04 	addi	sp,sp,-12
  8167a8:	df000215 	stw	fp,8(sp)
  8167ac:	df000204 	addi	fp,sp,8
  8167b0:	e13ffe15 	stw	r4,-8(fp)
  8167b4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  8167b8:	00000d06 	br	8167f0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  8167bc:	e0bffe17 	ldw	r2,-8(fp)
  8167c0:	10800a17 	ldw	r2,40(r2)
  8167c4:	11000044 	addi	r4,r2,1
  8167c8:	e0bfff17 	ldw	r2,-4(fp)
  8167cc:	10800003 	ldbu	r2,0(r2)
  8167d0:	10c03fcc 	andi	r3,r2,255
  8167d4:	18c0201c 	xori	r3,r3,128
  8167d8:	18ffe004 	addi	r3,r3,-128
  8167dc:	2005883a 	mov	r2,r4
  8167e0:	10c00025 	stbio	r3,0(r2)
		++ptr;
  8167e4:	e0bfff17 	ldw	r2,-4(fp)
  8167e8:	10800044 	addi	r2,r2,1
  8167ec:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  8167f0:	e0bfff17 	ldw	r2,-4(fp)
  8167f4:	10800003 	ldbu	r2,0(r2)
  8167f8:	10803fcc 	andi	r2,r2,255
  8167fc:	1080201c 	xori	r2,r2,128
  816800:	10bfe004 	addi	r2,r2,-128
  816804:	1004c03a 	cmpne	r2,r2,zero
  816808:	103fec1e 	bne	r2,zero,8167bc <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  81680c:	e037883a 	mov	sp,fp
  816810:	df000017 	ldw	fp,0(sp)
  816814:	dec00104 	addi	sp,sp,4
  816818:	f800283a 	ret

0081681c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  81681c:	defffb04 	addi	sp,sp,-20
  816820:	dfc00415 	stw	ra,16(sp)
  816824:	df000315 	stw	fp,12(sp)
  816828:	df000304 	addi	fp,sp,12
  81682c:	e13ffd15 	stw	r4,-12(fp)
  816830:	e17ffe15 	stw	r5,-8(fp)
  816834:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  816838:	e0bffd17 	ldw	r2,-12(fp)
  81683c:	10800017 	ldw	r2,0(r2)
  816840:	1009883a 	mov	r4,r2
  816844:	e1bfff17 	ldw	r6,-4(fp)
  816848:	e17ffe17 	ldw	r5,-8(fp)
  81684c:	081672c0 	call	81672c <alt_up_character_lcd_write>
	return 0;
  816850:	0005883a 	mov	r2,zero
}
  816854:	e037883a 	mov	sp,fp
  816858:	dfc00117 	ldw	ra,4(sp)
  81685c:	df000017 	ldw	fp,0(sp)
  816860:	dec00204 	addi	sp,sp,8
  816864:	f800283a 	ret

00816868 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  816868:	defff904 	addi	sp,sp,-28
  81686c:	dfc00615 	stw	ra,24(sp)
  816870:	df000515 	stw	fp,20(sp)
  816874:	df000504 	addi	fp,sp,20
  816878:	e13ffc15 	stw	r4,-16(fp)
  81687c:	e17ffd15 	stw	r5,-12(fp)
  816880:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  816884:	e0bffd17 	ldw	r2,-12(fp)
  816888:	10800a28 	cmpgeui	r2,r2,40
  81688c:	1000031e 	bne	r2,zero,81689c <alt_up_character_lcd_set_cursor_pos+0x34>
  816890:	e0bffe17 	ldw	r2,-8(fp)
  816894:	108000b0 	cmpltui	r2,r2,2
  816898:	1000031e 	bne	r2,zero,8168a8 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  81689c:	00bfffc4 	movi	r2,-1
  8168a0:	e0bfff15 	stw	r2,-4(fp)
  8168a4:	00000806 	br	8168c8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  8168a8:	e13ffd17 	ldw	r4,-12(fp)
  8168ac:	e17ffe17 	ldw	r5,-8(fp)
  8168b0:	08166080 	call	816608 <get_DDRAM_addr>
  8168b4:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  8168b8:	e17ffb03 	ldbu	r5,-20(fp)
  8168bc:	e13ffc17 	ldw	r4,-16(fp)
  8168c0:	08166840 	call	816684 <alt_up_character_lcd_send_cmd>
	return 0;
  8168c4:	e03fff15 	stw	zero,-4(fp)
  8168c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8168cc:	e037883a 	mov	sp,fp
  8168d0:	dfc00117 	ldw	ra,4(sp)
  8168d4:	df000017 	ldw	fp,0(sp)
  8168d8:	dec00204 	addi	sp,sp,8
  8168dc:	f800283a 	ret

008168e0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  8168e0:	defff904 	addi	sp,sp,-28
  8168e4:	dfc00615 	stw	ra,24(sp)
  8168e8:	df000515 	stw	fp,20(sp)
  8168ec:	df000504 	addi	fp,sp,20
  8168f0:	e13ffc15 	stw	r4,-16(fp)
  8168f4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  8168f8:	e0bffd17 	ldw	r2,-12(fp)
  8168fc:	1005003a 	cmpeq	r2,r2,zero
  816900:	10001e1e 	bne	r2,zero,81697c <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  816904:	e0bffd17 	ldw	r2,-12(fp)
  816908:	10800050 	cmplti	r2,r2,1
  81690c:	1000031e 	bne	r2,zero,81691c <alt_up_character_lcd_shift_cursor+0x3c>
  816910:	00800504 	movi	r2,20
  816914:	e0bfff05 	stb	r2,-4(fp)
  816918:	00000206 	br	816924 <alt_up_character_lcd_shift_cursor+0x44>
  81691c:	00c00404 	movi	r3,16
  816920:	e0ffff05 	stb	r3,-4(fp)
  816924:	e0bfff03 	ldbu	r2,-4(fp)
  816928:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  81692c:	e0fffd17 	ldw	r3,-12(fp)
  816930:	e0fffe15 	stw	r3,-8(fp)
  816934:	e0fffe17 	ldw	r3,-8(fp)
  816938:	1804403a 	cmpge	r2,r3,zero
  81693c:	1000031e 	bne	r2,zero,81694c <alt_up_character_lcd_shift_cursor+0x6c>
  816940:	e0bffe17 	ldw	r2,-8(fp)
  816944:	0085c83a 	sub	r2,zero,r2
  816948:	e0bffe15 	stw	r2,-8(fp)
  81694c:	e0fffe17 	ldw	r3,-8(fp)
  816950:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  816954:	00000306 	br	816964 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  816958:	e17ffb43 	ldbu	r5,-19(fp)
  81695c:	e13ffc17 	ldw	r4,-16(fp)
  816960:	08166840 	call	816684 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  816964:	e0bffb03 	ldbu	r2,-20(fp)
  816968:	10bfffc4 	addi	r2,r2,-1
  81696c:	e0bffb05 	stb	r2,-20(fp)
  816970:	e0bffb03 	ldbu	r2,-20(fp)
  816974:	10803fd8 	cmpnei	r2,r2,255
  816978:	103ff71e 	bne	r2,zero,816958 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  81697c:	e037883a 	mov	sp,fp
  816980:	dfc00117 	ldw	ra,4(sp)
  816984:	df000017 	ldw	fp,0(sp)
  816988:	dec00204 	addi	sp,sp,8
  81698c:	f800283a 	ret

00816990 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  816990:	defff904 	addi	sp,sp,-28
  816994:	dfc00615 	stw	ra,24(sp)
  816998:	df000515 	stw	fp,20(sp)
  81699c:	df000504 	addi	fp,sp,20
  8169a0:	e13ffc15 	stw	r4,-16(fp)
  8169a4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  8169a8:	e0bffd17 	ldw	r2,-12(fp)
  8169ac:	1005003a 	cmpeq	r2,r2,zero
  8169b0:	10001e1e 	bne	r2,zero,816a2c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  8169b4:	e0bffd17 	ldw	r2,-12(fp)
  8169b8:	10800050 	cmplti	r2,r2,1
  8169bc:	1000031e 	bne	r2,zero,8169cc <alt_up_character_lcd_shift_display+0x3c>
  8169c0:	00800704 	movi	r2,28
  8169c4:	e0bfff05 	stb	r2,-4(fp)
  8169c8:	00000206 	br	8169d4 <alt_up_character_lcd_shift_display+0x44>
  8169cc:	00c00604 	movi	r3,24
  8169d0:	e0ffff05 	stb	r3,-4(fp)
  8169d4:	e0bfff03 	ldbu	r2,-4(fp)
  8169d8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  8169dc:	e0fffd17 	ldw	r3,-12(fp)
  8169e0:	e0fffe15 	stw	r3,-8(fp)
  8169e4:	e0fffe17 	ldw	r3,-8(fp)
  8169e8:	1804403a 	cmpge	r2,r3,zero
  8169ec:	1000031e 	bne	r2,zero,8169fc <alt_up_character_lcd_shift_display+0x6c>
  8169f0:	e0bffe17 	ldw	r2,-8(fp)
  8169f4:	0085c83a 	sub	r2,zero,r2
  8169f8:	e0bffe15 	stw	r2,-8(fp)
  8169fc:	e0fffe17 	ldw	r3,-8(fp)
  816a00:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  816a04:	00000306 	br	816a14 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  816a08:	e17ffb43 	ldbu	r5,-19(fp)
  816a0c:	e13ffc17 	ldw	r4,-16(fp)
  816a10:	08166840 	call	816684 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  816a14:	e0bffb03 	ldbu	r2,-20(fp)
  816a18:	10bfffc4 	addi	r2,r2,-1
  816a1c:	e0bffb05 	stb	r2,-20(fp)
  816a20:	e0bffb03 	ldbu	r2,-20(fp)
  816a24:	10803fd8 	cmpnei	r2,r2,255
  816a28:	103ff71e 	bne	r2,zero,816a08 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  816a2c:	e037883a 	mov	sp,fp
  816a30:	dfc00117 	ldw	ra,4(sp)
  816a34:	df000017 	ldw	fp,0(sp)
  816a38:	dec00204 	addi	sp,sp,8
  816a3c:	f800283a 	ret

00816a40 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  816a40:	defff904 	addi	sp,sp,-28
  816a44:	dfc00615 	stw	ra,24(sp)
  816a48:	df000515 	stw	fp,20(sp)
  816a4c:	df000504 	addi	fp,sp,20
  816a50:	e13ffc15 	stw	r4,-16(fp)
  816a54:	e17ffd15 	stw	r5,-12(fp)
  816a58:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  816a5c:	e0bffd17 	ldw	r2,-12(fp)
  816a60:	10800a28 	cmpgeui	r2,r2,40
  816a64:	1000031e 	bne	r2,zero,816a74 <alt_up_character_lcd_erase_pos+0x34>
  816a68:	e0bffe17 	ldw	r2,-8(fp)
  816a6c:	108000b0 	cmpltui	r2,r2,2
  816a70:	1000031e 	bne	r2,zero,816a80 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  816a74:	00bfffc4 	movi	r2,-1
  816a78:	e0bfff15 	stw	r2,-4(fp)
  816a7c:	00000e06 	br	816ab8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  816a80:	e13ffd17 	ldw	r4,-12(fp)
  816a84:	e17ffe17 	ldw	r5,-8(fp)
  816a88:	08166080 	call	816608 <get_DDRAM_addr>
  816a8c:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  816a90:	e17ffb03 	ldbu	r5,-20(fp)
  816a94:	e13ffc17 	ldw	r4,-16(fp)
  816a98:	08166840 	call	816684 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	// NEM Bug Fix. Next loc sends | to the LCD instead of erase
	// Changed to send a simple space. Not really erase but good enough
	//IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, ' ');
  816a9c:	e0bffc17 	ldw	r2,-16(fp)
  816aa0:	10800a17 	ldw	r2,40(r2)
  816aa4:	10800044 	addi	r2,r2,1
  816aa8:	1007883a 	mov	r3,r2
  816aac:	00800804 	movi	r2,32
  816ab0:	18800025 	stbio	r2,0(r3)
	// END NEM Bug Fixs
	return 0;
  816ab4:	e03fff15 	stw	zero,-4(fp)
  816ab8:	e0bfff17 	ldw	r2,-4(fp)
}
  816abc:	e037883a 	mov	sp,fp
  816ac0:	dfc00117 	ldw	ra,4(sp)
  816ac4:	df000017 	ldw	fp,0(sp)
  816ac8:	dec00204 	addi	sp,sp,8
  816acc:	f800283a 	ret

00816ad0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  816ad0:	defffd04 	addi	sp,sp,-12
  816ad4:	dfc00215 	stw	ra,8(sp)
  816ad8:	df000115 	stw	fp,4(sp)
  816adc:	df000104 	addi	fp,sp,4
  816ae0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  816ae4:	e13fff17 	ldw	r4,-4(fp)
  816ae8:	01400304 	movi	r5,12
  816aec:	08166840 	call	816684 <alt_up_character_lcd_send_cmd>
}
  816af0:	e037883a 	mov	sp,fp
  816af4:	dfc00117 	ldw	ra,4(sp)
  816af8:	df000017 	ldw	fp,0(sp)
  816afc:	dec00204 	addi	sp,sp,8
  816b00:	f800283a 	ret

00816b04 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  816b04:	defffd04 	addi	sp,sp,-12
  816b08:	dfc00215 	stw	ra,8(sp)
  816b0c:	df000115 	stw	fp,4(sp)
  816b10:	df000104 	addi	fp,sp,4
  816b14:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  816b18:	e13fff17 	ldw	r4,-4(fp)
  816b1c:	014003c4 	movi	r5,15
  816b20:	08166840 	call	816684 <alt_up_character_lcd_send_cmd>
}
  816b24:	e037883a 	mov	sp,fp
  816b28:	dfc00117 	ldw	ra,4(sp)
  816b2c:	df000017 	ldw	fp,0(sp)
  816b30:	dec00204 	addi	sp,sp,8
  816b34:	f800283a 	ret

00816b38 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
  816b38:	defffd04 	addi	sp,sp,-12
  816b3c:	df000215 	stw	fp,8(sp)
  816b40:	df000204 	addi	fp,sp,8
  816b44:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  816b48:	e0bfff17 	ldw	r2,-4(fp)
  816b4c:	10800a17 	ldw	r2,40(r2)
  816b50:	10800104 	addi	r2,r2,4
  816b54:	10800037 	ldwio	r2,0(r2)
  816b58:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
  816b5c:	e0bffe17 	ldw	r2,-8(fp)
  816b60:	10800054 	ori	r2,r2,1
  816b64:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  816b68:	e0bfff17 	ldw	r2,-4(fp)
  816b6c:	10800a17 	ldw	r2,40(r2)
  816b70:	10800104 	addi	r2,r2,4
  816b74:	e0fffe17 	ldw	r3,-8(fp)
  816b78:	10c00035 	stwio	r3,0(r2)
}
  816b7c:	e037883a 	mov	sp,fp
  816b80:	df000017 	ldw	fp,0(sp)
  816b84:	dec00104 	addi	sp,sp,4
  816b88:	f800283a 	ret

00816b8c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
  816b8c:	defffd04 	addi	sp,sp,-12
  816b90:	df000215 	stw	fp,8(sp)
  816b94:	df000204 	addi	fp,sp,8
  816b98:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  816b9c:	e0bfff17 	ldw	r2,-4(fp)
  816ba0:	10800a17 	ldw	r2,40(r2)
  816ba4:	10800104 	addi	r2,r2,4
  816ba8:	10800037 	ldwio	r2,0(r2)
  816bac:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
  816bb0:	e0fffe17 	ldw	r3,-8(fp)
  816bb4:	00bfff84 	movi	r2,-2
  816bb8:	1884703a 	and	r2,r3,r2
  816bbc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  816bc0:	e0bfff17 	ldw	r2,-4(fp)
  816bc4:	10800a17 	ldw	r2,40(r2)
  816bc8:	10800104 	addi	r2,r2,4
  816bcc:	e0fffe17 	ldw	r3,-8(fp)
  816bd0:	10c00035 	stwio	r3,0(r2)
}
  816bd4:	e037883a 	mov	sp,fp
  816bd8:	df000017 	ldw	fp,0(sp)
  816bdc:	dec00104 	addi	sp,sp,4
  816be0:	f800283a 	ret

00816be4 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
  816be4:	defffd04 	addi	sp,sp,-12
  816be8:	df000215 	stw	fp,8(sp)
  816bec:	df000204 	addi	fp,sp,8
  816bf0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
  816bf4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
  816bf8:	e0bfff17 	ldw	r2,-4(fp)
  816bfc:	10800a17 	ldw	r2,40(r2)
  816c00:	10800084 	addi	r2,r2,2
  816c04:	1080002b 	ldhuio	r2,0(r2)
  816c08:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
  816c0c:	e0bffe0b 	ldhu	r2,-8(fp)
}
  816c10:	e037883a 	mov	sp,fp
  816c14:	df000017 	ldw	fp,0(sp)
  816c18:	dec00104 	addi	sp,sp,4
  816c1c:	f800283a 	ret

00816c20 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
  816c20:	defffd04 	addi	sp,sp,-12
  816c24:	df000215 	stw	fp,8(sp)
  816c28:	df000204 	addi	fp,sp,8
  816c2c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  816c30:	e0bfff17 	ldw	r2,-4(fp)
  816c34:	10800a17 	ldw	r2,40(r2)
  816c38:	10800104 	addi	r2,r2,4
  816c3c:	10800037 	ldwio	r2,0(r2)
  816c40:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
  816c44:	e0bffe17 	ldw	r2,-8(fp)
  816c48:	10bfffec 	andhi	r2,r2,65535
  816c4c:	1004d43a 	srli	r2,r2,16
}
  816c50:	e037883a 	mov	sp,fp
  816c54:	df000017 	ldw	fp,0(sp)
  816c58:	dec00104 	addi	sp,sp,4
  816c5c:	f800283a 	ret

00816c60 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
  816c60:	defffc04 	addi	sp,sp,-16
  816c64:	df000315 	stw	fp,12(sp)
  816c68:	df000304 	addi	fp,sp,12
  816c6c:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
  816c70:	e0bffe17 	ldw	r2,-8(fp)
  816c74:	1080800c 	andi	r2,r2,512
  816c78:	1004d27a 	srli	r2,r2,9
  816c7c:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
  816c80:	e0bffd17 	ldw	r2,-12(fp)
  816c84:	1005003a 	cmpeq	r2,r2,zero
  816c88:	1000031e 	bne	r2,zero,816c98 <alt_up_rs232_check_parity+0x38>
  816c8c:	00bfffc4 	movi	r2,-1
  816c90:	e0bfff15 	stw	r2,-4(fp)
  816c94:	00000106 	br	816c9c <alt_up_rs232_check_parity+0x3c>
  816c98:	e03fff15 	stw	zero,-4(fp)
  816c9c:	e0bfff17 	ldw	r2,-4(fp)
}
  816ca0:	e037883a 	mov	sp,fp
  816ca4:	df000017 	ldw	fp,0(sp)
  816ca8:	dec00104 	addi	sp,sp,4
  816cac:	f800283a 	ret

00816cb0 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
  816cb0:	defffc04 	addi	sp,sp,-16
  816cb4:	df000315 	stw	fp,12(sp)
  816cb8:	df000304 	addi	fp,sp,12
  816cbc:	e13ffe15 	stw	r4,-8(fp)
  816cc0:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  816cc4:	e0bffe17 	ldw	r2,-8(fp)
  816cc8:	10800a17 	ldw	r2,40(r2)
  816ccc:	10800037 	ldwio	r2,0(r2)
  816cd0:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
  816cd4:	e0bffe17 	ldw	r2,-8(fp)
  816cd8:	10800a17 	ldw	r2,40(r2)
  816cdc:	e0ffff03 	ldbu	r3,-4(fp)
  816ce0:	10c00035 	stwio	r3,0(r2)
	return 0;
  816ce4:	0005883a 	mov	r2,zero
}
  816ce8:	e037883a 	mov	sp,fp
  816cec:	df000017 	ldw	fp,0(sp)
  816cf0:	dec00104 	addi	sp,sp,4
  816cf4:	f800283a 	ret

00816cf8 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
  816cf8:	defffa04 	addi	sp,sp,-24
  816cfc:	dfc00515 	stw	ra,20(sp)
  816d00:	df000415 	stw	fp,16(sp)
  816d04:	df000404 	addi	fp,sp,16
  816d08:	e13ffd15 	stw	r4,-12(fp)
  816d0c:	e17ffe15 	stw	r5,-8(fp)
  816d10:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  816d14:	e0bffd17 	ldw	r2,-12(fp)
  816d18:	10800a17 	ldw	r2,40(r2)
  816d1c:	10800037 	ldwio	r2,0(r2)
  816d20:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
  816d24:	e0bffc17 	ldw	r2,-16(fp)
  816d28:	1007883a 	mov	r3,r2
  816d2c:	e0bffe17 	ldw	r2,-8(fp)
  816d30:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
  816d34:	e13ffc17 	ldw	r4,-16(fp)
  816d38:	0816c600 	call	816c60 <alt_up_rs232_check_parity>
  816d3c:	1007883a 	mov	r3,r2
  816d40:	e0bfff17 	ldw	r2,-4(fp)
  816d44:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
  816d48:	e0bffc17 	ldw	r2,-16(fp)
  816d4c:	10a0000c 	andi	r2,r2,32768
  816d50:	1004d3fa 	srli	r2,r2,15
  816d54:	10bfffc4 	addi	r2,r2,-1
}
  816d58:	e037883a 	mov	sp,fp
  816d5c:	dfc00117 	ldw	ra,4(sp)
  816d60:	df000017 	ldw	fp,0(sp)
  816d64:	dec00204 	addi	sp,sp,8
  816d68:	f800283a 	ret

00816d6c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
  816d6c:	defff804 	addi	sp,sp,-32
  816d70:	dfc00715 	stw	ra,28(sp)
  816d74:	df000615 	stw	fp,24(sp)
  816d78:	df000604 	addi	fp,sp,24
  816d7c:	e13ffd15 	stw	r4,-12(fp)
  816d80:	e17ffe15 	stw	r5,-8(fp)
  816d84:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  816d88:	e0bffd17 	ldw	r2,-12(fp)
  816d8c:	10800017 	ldw	r2,0(r2)
  816d90:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
  816d94:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
  816d98:	00000c06 	br	816dcc <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
  816d9c:	e17ffe17 	ldw	r5,-8(fp)
  816da0:	e0bffe17 	ldw	r2,-8(fp)
  816da4:	10800044 	addi	r2,r2,1
  816da8:	e0bffe15 	stw	r2,-8(fp)
  816dac:	e1bffc04 	addi	r6,fp,-16
  816db0:	e13ffb17 	ldw	r4,-20(fp)
  816db4:	0816cf80 	call	816cf8 <alt_up_rs232_read_data>
  816db8:	1004c03a 	cmpne	r2,r2,zero
  816dbc:	1000091e 	bne	r2,zero,816de4 <alt_up_rs232_read_fd+0x78>
			count++;
  816dc0:	e0bffa17 	ldw	r2,-24(fp)
  816dc4:	10800044 	addi	r2,r2,1
  816dc8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
  816dcc:	e0bfff17 	ldw	r2,-4(fp)
  816dd0:	10bfffc4 	addi	r2,r2,-1
  816dd4:	e0bfff15 	stw	r2,-4(fp)
  816dd8:	e0bfff17 	ldw	r2,-4(fp)
  816ddc:	10bfffd8 	cmpnei	r2,r2,-1
  816de0:	103fee1e 	bne	r2,zero,816d9c <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
  816de4:	e0bffa17 	ldw	r2,-24(fp)
}
  816de8:	e037883a 	mov	sp,fp
  816dec:	dfc00117 	ldw	ra,4(sp)
  816df0:	df000017 	ldw	fp,0(sp)
  816df4:	dec00204 	addi	sp,sp,8
  816df8:	f800283a 	ret

00816dfc <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
  816dfc:	defff904 	addi	sp,sp,-28
  816e00:	dfc00615 	stw	ra,24(sp)
  816e04:	df000515 	stw	fp,20(sp)
  816e08:	df000504 	addi	fp,sp,20
  816e0c:	e13ffd15 	stw	r4,-12(fp)
  816e10:	e17ffe15 	stw	r5,-8(fp)
  816e14:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  816e18:	e0bffd17 	ldw	r2,-12(fp)
  816e1c:	10800017 	ldw	r2,0(r2)
  816e20:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
  816e24:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
  816e28:	00000d06 	br	816e60 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
  816e2c:	e0bffe17 	ldw	r2,-8(fp)
  816e30:	10800003 	ldbu	r2,0(r2)
  816e34:	11403fcc 	andi	r5,r2,255
  816e38:	e13ffc17 	ldw	r4,-16(fp)
  816e3c:	0816cb00 	call	816cb0 <alt_up_rs232_write_data>
  816e40:	1004c03a 	cmpne	r2,r2,zero
  816e44:	10000c1e 	bne	r2,zero,816e78 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
  816e48:	e0bffb17 	ldw	r2,-20(fp)
  816e4c:	10800044 	addi	r2,r2,1
  816e50:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
  816e54:	e0bffe17 	ldw	r2,-8(fp)
  816e58:	10800044 	addi	r2,r2,1
  816e5c:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
  816e60:	e0bfff17 	ldw	r2,-4(fp)
  816e64:	10bfffc4 	addi	r2,r2,-1
  816e68:	e0bfff15 	stw	r2,-4(fp)
  816e6c:	e0bfff17 	ldw	r2,-4(fp)
  816e70:	10bfffd8 	cmpnei	r2,r2,-1
  816e74:	103fed1e 	bne	r2,zero,816e2c <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
  816e78:	e0bffb17 	ldw	r2,-20(fp)
}
  816e7c:	e037883a 	mov	sp,fp
  816e80:	dfc00117 	ldw	ra,4(sp)
  816e84:	df000017 	ldw	fp,0(sp)
  816e88:	dec00204 	addi	sp,sp,8
  816e8c:	f800283a 	ret

00816e90 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
  816e90:	defffc04 	addi	sp,sp,-16
  816e94:	dfc00315 	stw	ra,12(sp)
  816e98:	df000215 	stw	fp,8(sp)
  816e9c:	df000204 	addi	fp,sp,8
  816ea0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
  816ea4:	e13fff17 	ldw	r4,-4(fp)
  816ea8:	014020b4 	movhi	r5,130
  816eac:	297c7004 	addi	r5,r5,-3648
  816eb0:	081b6300 	call	81b630 <alt_find_dev>
  816eb4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  816eb8:	e0bffe17 	ldw	r2,-8(fp)
}
  816ebc:	e037883a 	mov	sp,fp
  816ec0:	dfc00117 	ldw	ra,4(sp)
  816ec4:	df000017 	ldw	fp,0(sp)
  816ec8:	dec00204 	addi	sp,sp,8
  816ecc:	f800283a 	ret

00816ed0 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
  816ed0:	defffa04 	addi	sp,sp,-24
  816ed4:	dfc00515 	stw	ra,20(sp)
  816ed8:	df000415 	stw	fp,16(sp)
  816edc:	df000404 	addi	fp,sp,16
  816ee0:	e13ffe15 	stw	r4,-8(fp)
  816ee4:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
  816ee8:	e03ffd15 	stw	zero,-12(fp)
    
    if (alt_up_sd_card_is_Present())
  816eec:	0819cf00 	call	819cf0 <alt_up_sd_card_is_Present>
  816ef0:	1005003a 	cmpeq	r2,r2,zero
  816ef4:	1000221e 	bne	r2,zero,816f80 <Write_Sector_Data+0xb0>
    {
        short int reg_state = 0xff;
  816ef8:	00803fc4 	movi	r2,255
  816efc:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  816f00:	d0a06e17 	ldw	r2,-32328(gp)
  816f04:	1009883a 	mov	r4,r2
  816f08:	e0fffe17 	ldw	r3,-8(fp)
  816f0c:	e0bfff17 	ldw	r2,-4(fp)
  816f10:	1885883a 	add	r2,r3,r2
  816f14:	1006927a 	slli	r3,r2,9
  816f18:	2005883a 	mov	r2,r4
  816f1c:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  816f20:	d0a06d17 	ldw	r2,-32332(gp)
  816f24:	1007883a 	mov	r3,r2
  816f28:	00800604 	movi	r2,24
  816f2c:	1880002d 	sthio	r2,0(r3)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  816f30:	d0a06a17 	ldw	r2,-32344(gp)
  816f34:	1080002b 	ldhuio	r2,0(r2)
  816f38:	e0bffc0d 	sth	r2,-16(fp)
        } while ((reg_state & 0x04)!=0);
  816f3c:	e0bffc0b 	ldhu	r2,-16(fp)
  816f40:	10bfffcc 	andi	r2,r2,65535
  816f44:	1080010c 	andi	r2,r2,4
  816f48:	1004c03a 	cmpne	r2,r2,zero
  816f4c:	103ff81e 	bne	r2,zero,816f30 <Write_Sector_Data+0x60>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
  816f50:	e0bffc0b 	ldhu	r2,-16(fp)
  816f54:	10bfffcc 	andi	r2,r2,65535
  816f58:	1080040c 	andi	r2,r2,16
  816f5c:	1004c03a 	cmpne	r2,r2,zero
  816f60:	1000071e 	bne	r2,zero,816f80 <Write_Sector_Data+0xb0>
        {
            result = true;
  816f64:	00800044 	movi	r2,1
  816f68:	e0bffd15 	stw	r2,-12(fp)
            current_sector_modified = false;
  816f6c:	d0207315 	stw	zero,-32308(gp)
            current_sector_index = sector_index+partition_offset;
  816f70:	e0fffe17 	ldw	r3,-8(fp)
  816f74:	e0bfff17 	ldw	r2,-4(fp)
  816f78:	1885883a 	add	r2,r3,r2
  816f7c:	d0a07415 	stw	r2,-32304(gp)
        }
    }
    return result;
  816f80:	e0bffd17 	ldw	r2,-12(fp)
}
  816f84:	e037883a 	mov	sp,fp
  816f88:	dfc00117 	ldw	ra,4(sp)
  816f8c:	df000017 	ldw	fp,0(sp)
  816f90:	dec00204 	addi	sp,sp,8
  816f94:	f800283a 	ret

00816f98 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
  816f98:	defffd04 	addi	sp,sp,-12
  816f9c:	dfc00215 	stw	ra,8(sp)
  816fa0:	df000115 	stw	fp,4(sp)
  816fa4:	df000104 	addi	fp,sp,4
    bool result = true;
  816fa8:	00800044 	movi	r2,1
  816fac:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
  816fb0:	d0a07317 	ldw	r2,-32308(gp)
  816fb4:	1005003a 	cmpeq	r2,r2,zero
  816fb8:	1000051e 	bne	r2,zero,816fd0 <Save_Modified_Sector+0x38>
    {
        result = Write_Sector_Data(current_sector_index, 0);
  816fbc:	d0a07417 	ldw	r2,-32304(gp)
  816fc0:	1009883a 	mov	r4,r2
  816fc4:	000b883a 	mov	r5,zero
  816fc8:	0816ed00 	call	816ed0 <Write_Sector_Data>
  816fcc:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
  816fd0:	e0bfff17 	ldw	r2,-4(fp)
}
  816fd4:	e037883a 	mov	sp,fp
  816fd8:	dfc00117 	ldw	ra,4(sp)
  816fdc:	df000017 	ldw	fp,0(sp)
  816fe0:	dec00204 	addi	sp,sp,8
  816fe4:	f800283a 	ret

00816fe8 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  816fe8:	defff904 	addi	sp,sp,-28
  816fec:	dfc00615 	stw	ra,24(sp)
  816ff0:	df000515 	stw	fp,20(sp)
  816ff4:	df000504 	addi	fp,sp,20
  816ff8:	e13ffd15 	stw	r4,-12(fp)
  816ffc:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  817000:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
  817004:	0819cf00 	call	819cf0 <alt_up_sd_card_is_Present>
  817008:	1005003a 	cmpeq	r2,r2,zero
  81700c:	10002d1e 	bne	r2,zero,8170c4 <Read_Sector_Data+0xdc>
	{
		short int reg_state = 0xff;
  817010:	00803fc4 	movi	r2,255
  817014:	e0bffb0d 	sth	r2,-20(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
  817018:	d0a07317 	ldw	r2,-32308(gp)
  81701c:	1005003a 	cmpeq	r2,r2,zero
  817020:	1000081e 	bne	r2,zero,817044 <Read_Sector_Data+0x5c>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
  817024:	d0a07417 	ldw	r2,-32304(gp)
  817028:	1009883a 	mov	r4,r2
  81702c:	000b883a 	mov	r5,zero
  817030:	0816ed00 	call	816ed0 <Write_Sector_Data>
  817034:	1004c03a 	cmpne	r2,r2,zero
  817038:	1000021e 	bne	r2,zero,817044 <Read_Sector_Data+0x5c>
            {
                return false;
  81703c:	e03fff15 	stw	zero,-4(fp)
  817040:	00002206 	br	8170cc <Read_Sector_Data+0xe4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  817044:	d0a06e17 	ldw	r2,-32328(gp)
  817048:	1009883a 	mov	r4,r2
  81704c:	e0fffd17 	ldw	r3,-12(fp)
  817050:	e0bffe17 	ldw	r2,-8(fp)
  817054:	1885883a 	add	r2,r3,r2
  817058:	1006927a 	slli	r3,r2,9
  81705c:	2005883a 	mov	r2,r4
  817060:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  817064:	d0a06d17 	ldw	r2,-32332(gp)
  817068:	1007883a 	mov	r3,r2
  81706c:	00800444 	movi	r2,17
  817070:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  817074:	d0a06a17 	ldw	r2,-32344(gp)
  817078:	1080002b 	ldhuio	r2,0(r2)
  81707c:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04)!=0);
  817080:	e0bffb0b 	ldhu	r2,-20(fp)
  817084:	10bfffcc 	andi	r2,r2,65535
  817088:	1080010c 	andi	r2,r2,4
  81708c:	1004c03a 	cmpne	r2,r2,zero
  817090:	103ff81e 	bne	r2,zero,817074 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
  817094:	e0bffb0b 	ldhu	r2,-20(fp)
  817098:	10bfffcc 	andi	r2,r2,65535
  81709c:	1080040c 	andi	r2,r2,16
  8170a0:	1004c03a 	cmpne	r2,r2,zero
  8170a4:	1000071e 	bne	r2,zero,8170c4 <Read_Sector_Data+0xdc>
		{
			result = true;
  8170a8:	00800044 	movi	r2,1
  8170ac:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
  8170b0:	d0207315 	stw	zero,-32308(gp)
            current_sector_index = sector_index+partition_offset;
  8170b4:	e0fffd17 	ldw	r3,-12(fp)
  8170b8:	e0bffe17 	ldw	r2,-8(fp)
  8170bc:	1885883a 	add	r2,r3,r2
  8170c0:	d0a07415 	stw	r2,-32304(gp)
		}
	}
	return result;
  8170c4:	e0bffc17 	ldw	r2,-16(fp)
  8170c8:	e0bfff15 	stw	r2,-4(fp)
  8170cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8170d0:	e037883a 	mov	sp,fp
  8170d4:	dfc00117 	ldw	ra,4(sp)
  8170d8:	df000017 	ldw	fp,0(sp)
  8170dc:	dec00204 	addi	sp,sp,8
  8170e0:	f800283a 	ret

008170e4 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  8170e4:	defffa04 	addi	sp,sp,-24
  8170e8:	dfc00515 	stw	ra,20(sp)
  8170ec:	df000415 	stw	fp,16(sp)
  8170f0:	df000404 	addi	fp,sp,16
  8170f4:	e13ffd15 	stw	r4,-12(fp)
  8170f8:	e17ffe15 	stw	r5,-8(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  8170fc:	e0bffd17 	ldw	r2,-12(fp)
  817100:	1006d23a 	srli	r3,r2,8
  817104:	d0a07017 	ldw	r2,-32320(gp)
  817108:	1885883a 	add	r2,r3,r2
  81710c:	e0bffc15 	stw	r2,-16(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  817110:	008020f4 	movhi	r2,131
  817114:	109ab304 	addi	r2,r2,27340
  817118:	10c01117 	ldw	r3,68(r2)
  81711c:	e0bffc17 	ldw	r2,-16(fp)
  817120:	10c5883a 	add	r2,r2,r3
  817124:	e0bffc15 	stw	r2,-16(fp)
     
    if (sector_index != current_sector_index)
  817128:	d0e07417 	ldw	r3,-32304(gp)
  81712c:	e0bffc17 	ldw	r2,-16(fp)
  817130:	10c00726 	beq	r2,r3,817150 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  817134:	e13ffc17 	ldw	r4,-16(fp)
  817138:	000b883a 	mov	r5,zero
  81713c:	0816fe80 	call	816fe8 <Read_Sector_Data>
  817140:	1004c03a 	cmpne	r2,r2,zero
  817144:	1000021e 	bne	r2,zero,817150 <get_cluster_flag+0x6c>
        {
            return false;
  817148:	e03fff15 	stw	zero,-4(fp)
  81714c:	00000d06 	br	817184 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  817150:	d0a07217 	ldw	r2,-32312(gp)
  817154:	10800a17 	ldw	r2,40(r2)
  817158:	1007883a 	mov	r3,r2
  81715c:	e0bffd17 	ldw	r2,-12(fp)
  817160:	10803fcc 	andi	r2,r2,255
  817164:	1085883a 	add	r2,r2,r2
  817168:	1885883a 	add	r2,r3,r2
  81716c:	1080002b 	ldhuio	r2,0(r2)
  817170:	1007883a 	mov	r3,r2
  817174:	e0bffe17 	ldw	r2,-8(fp)
  817178:	10c0000d 	sth	r3,0(r2)
    return true;
  81717c:	00800044 	movi	r2,1
  817180:	e0bfff15 	stw	r2,-4(fp)
  817184:	e0bfff17 	ldw	r2,-4(fp)
}
  817188:	e037883a 	mov	sp,fp
  81718c:	dfc00117 	ldw	ra,4(sp)
  817190:	df000017 	ldw	fp,0(sp)
  817194:	dec00204 	addi	sp,sp,8
  817198:	f800283a 	ret

0081719c <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  81719c:	defff904 	addi	sp,sp,-28
  8171a0:	dfc00615 	stw	ra,24(sp)
  8171a4:	df000515 	stw	fp,20(sp)
  8171a8:	df000504 	addi	fp,sp,20
  8171ac:	e13ffc15 	stw	r4,-16(fp)
  8171b0:	e1bffe15 	stw	r6,-8(fp)
  8171b4:	e17ffd0d 	sth	r5,-12(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  8171b8:	e0bffc17 	ldw	r2,-16(fp)
  8171bc:	1006d23a 	srli	r3,r2,8
  8171c0:	d0a07017 	ldw	r2,-32320(gp)
  8171c4:	1885883a 	add	r2,r3,r2
  8171c8:	e0bffb15 	stw	r2,-20(fp)
    
    if (first_fat)
  8171cc:	e0bffe17 	ldw	r2,-8(fp)
  8171d0:	1005003a 	cmpeq	r2,r2,zero
  8171d4:	1000071e 	bne	r2,zero,8171f4 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  8171d8:	008020f4 	movhi	r2,131
  8171dc:	109ab304 	addi	r2,r2,27340
  8171e0:	10c01117 	ldw	r3,68(r2)
  8171e4:	e0bffb17 	ldw	r2,-20(fp)
  8171e8:	10c5883a 	add	r2,r2,r3
  8171ec:	e0bffb15 	stw	r2,-20(fp)
  8171f0:	00000606 	br	81720c <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  8171f4:	008020f4 	movhi	r2,131
  8171f8:	109ab304 	addi	r2,r2,27340
  8171fc:	10c01217 	ldw	r3,72(r2)
  817200:	e0bffb17 	ldw	r2,-20(fp)
  817204:	10c5883a 	add	r2,r2,r3
  817208:	e0bffb15 	stw	r2,-20(fp)
    }
     
    if (sector_index != current_sector_index)
  81720c:	d0e07417 	ldw	r3,-32304(gp)
  817210:	e0bffb17 	ldw	r2,-20(fp)
  817214:	10c00726 	beq	r2,r3,817234 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  817218:	e13ffb17 	ldw	r4,-20(fp)
  81721c:	000b883a 	mov	r5,zero
  817220:	0816fe80 	call	816fe8 <Read_Sector_Data>
  817224:	1004c03a 	cmpne	r2,r2,zero
  817228:	1000021e 	bne	r2,zero,817234 <mark_cluster+0x98>
        {
            return false;
  81722c:	e03fff15 	stw	zero,-4(fp)
  817230:	00000d06 	br	817268 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  817234:	d0a07217 	ldw	r2,-32312(gp)
  817238:	10800a17 	ldw	r2,40(r2)
  81723c:	1007883a 	mov	r3,r2
  817240:	e0bffc17 	ldw	r2,-16(fp)
  817244:	10803fcc 	andi	r2,r2,255
  817248:	1085883a 	add	r2,r2,r2
  81724c:	1885883a 	add	r2,r3,r2
  817250:	e0fffd0f 	ldh	r3,-12(fp)
  817254:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
  817258:	00800044 	movi	r2,1
  81725c:	d0a07315 	stw	r2,-32308(gp)
    return true;
  817260:	00800044 	movi	r2,1
  817264:	e0bfff15 	stw	r2,-4(fp)
  817268:	e0bfff17 	ldw	r2,-4(fp)
}
  81726c:	e037883a 	mov	sp,fp
  817270:	dfc00117 	ldw	ra,4(sp)
  817274:	df000017 	ldw	fp,0(sp)
  817278:	dec00204 	addi	sp,sp,8
  81727c:	f800283a 	ret

00817280 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  817280:	defff704 	addi	sp,sp,-36
  817284:	dfc00815 	stw	ra,32(sp)
  817288:	df000715 	stw	fp,28(sp)
  81728c:	df000704 	addi	fp,sp,28
	bool result = false;
  817290:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
  817294:	0009883a 	mov	r4,zero
  817298:	000b883a 	mov	r5,zero
  81729c:	0816fe80 	call	816fe8 <Read_Sector_Data>
  8172a0:	1005003a 	cmpeq	r2,r2,zero
  8172a4:	10005c1e 	bne	r2,zero,817418 <Check_for_Master_Boot_Record+0x198>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  8172a8:	d0a07217 	ldw	r2,-32312(gp)
  8172ac:	10800a17 	ldw	r2,40(r2)
  8172b0:	10807f84 	addi	r2,r2,510
  8172b4:	1080002b 	ldhuio	r2,0(r2)
  8172b8:	10bfffcc 	andi	r2,r2,65535
  8172bc:	10a0001c 	xori	r2,r2,32768
  8172c0:	10a00004 	addi	r2,r2,-32768
  8172c4:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
  8172c8:	e0bffd17 	ldw	r2,-12(fp)
  8172cc:	10ffffcc 	andi	r3,r2,65535
  8172d0:	00aa9554 	movui	r2,43605
  8172d4:	1880501e 	bne	r3,r2,817418 <Check_for_Master_Boot_Record+0x198>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
  8172d8:	e03ffe15 	stw	zero,-8(fp)
  8172dc:	00004b06 	br	81740c <Check_for_Master_Boot_Record+0x18c>
			{
				int partition_data_offset = (index * 16) + 0x01be;
  8172e0:	e0bffe17 	ldw	r2,-8(fp)
  8172e4:	1004913a 	slli	r2,r2,4
  8172e8:	10806f84 	addi	r2,r2,446
  8172ec:	e0bffa15 	stw	r2,-24(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  8172f0:	d0a07217 	ldw	r2,-32312(gp)
  8172f4:	10800a17 	ldw	r2,40(r2)
  8172f8:	1007883a 	mov	r3,r2
  8172fc:	e0bffa17 	ldw	r2,-24(fp)
  817300:	1885883a 	add	r2,r3,r2
  817304:	10800104 	addi	r2,r2,4
  817308:	10800023 	ldbuio	r2,0(r2)
  81730c:	e0bff905 	stb	r2,-28(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  817310:	e0bff907 	ldb	r2,-28(fp)
  817314:	10800060 	cmpeqi	r2,r2,1
  817318:	1000091e 	bne	r2,zero,817340 <Check_for_Master_Boot_Record+0xc0>
  81731c:	e0bff907 	ldb	r2,-28(fp)
  817320:	10800120 	cmpeqi	r2,r2,4
  817324:	1000061e 	bne	r2,zero,817340 <Check_for_Master_Boot_Record+0xc0>
  817328:	e0bff907 	ldb	r2,-28(fp)
  81732c:	108001a0 	cmpeqi	r2,r2,6
  817330:	1000031e 	bne	r2,zero,817340 <Check_for_Master_Boot_Record+0xc0>
  817334:	e0bff907 	ldb	r2,-28(fp)
  817338:	10800398 	cmpnei	r2,r2,14
  81733c:	1000301e 	bne	r2,zero,817400 <Check_for_Master_Boot_Record+0x180>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  817340:	d0a07217 	ldw	r2,-32312(gp)
  817344:	10800a17 	ldw	r2,40(r2)
  817348:	1007883a 	mov	r3,r2
  81734c:	e0bffa17 	ldw	r2,-24(fp)
  817350:	1885883a 	add	r2,r3,r2
  817354:	10800284 	addi	r2,r2,10
  817358:	1080002b 	ldhuio	r2,0(r2)
  81735c:	10bfffcc 	andi	r2,r2,65535
  817360:	1008943a 	slli	r4,r2,16
  817364:	d0a07217 	ldw	r2,-32312(gp)
  817368:	10800a17 	ldw	r2,40(r2)
  81736c:	1007883a 	mov	r3,r2
  817370:	e0bffa17 	ldw	r2,-24(fp)
  817374:	1885883a 	add	r2,r3,r2
  817378:	10800204 	addi	r2,r2,8
  81737c:	1080002b 	ldhuio	r2,0(r2)
  817380:	10bfffcc 	andi	r2,r2,65535
  817384:	2084b03a 	or	r2,r4,r2
  817388:	e0bffc15 	stw	r2,-16(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  81738c:	d0a07217 	ldw	r2,-32312(gp)
  817390:	10800a17 	ldw	r2,40(r2)
  817394:	1007883a 	mov	r3,r2
  817398:	e0bffa17 	ldw	r2,-24(fp)
  81739c:	1885883a 	add	r2,r3,r2
  8173a0:	10800384 	addi	r2,r2,14
  8173a4:	1080002b 	ldhuio	r2,0(r2)
  8173a8:	10bfffcc 	andi	r2,r2,65535
  8173ac:	1008943a 	slli	r4,r2,16
  8173b0:	d0a07217 	ldw	r2,-32312(gp)
  8173b4:	10800a17 	ldw	r2,40(r2)
  8173b8:	1007883a 	mov	r3,r2
  8173bc:	e0bffa17 	ldw	r2,-24(fp)
  8173c0:	1885883a 	add	r2,r3,r2
  8173c4:	10800304 	addi	r2,r2,12
  8173c8:	1080002b 	ldhuio	r2,0(r2)
  8173cc:	10bfffcc 	andi	r2,r2,65535
  8173d0:	2084b03a 	or	r2,r4,r2
  8173d4:	e0bffb15 	stw	r2,-20(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
  8173d8:	e0bffb17 	ldw	r2,-20(fp)
  8173dc:	10800050 	cmplti	r2,r2,1
  8173e0:	1000071e 	bne	r2,zero,817400 <Check_for_Master_Boot_Record+0x180>
					{
						result = true;
  8173e4:	00800044 	movi	r2,1
  8173e8:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
  8173ec:	e0bffb17 	ldw	r2,-20(fp)
  8173f0:	d0a07115 	stw	r2,-32316(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  8173f4:	e0bffc17 	ldw	r2,-16(fp)
  8173f8:	d0a07015 	stw	r2,-32320(gp)
						break;
  8173fc:	00000606 	br	817418 <Check_for_Master_Boot_Record+0x198>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
  817400:	e0bffe17 	ldw	r2,-8(fp)
  817404:	10800044 	addi	r2,r2,1
  817408:	e0bffe15 	stw	r2,-8(fp)
  81740c:	e0bffe17 	ldw	r2,-8(fp)
  817410:	10800110 	cmplti	r2,r2,4
  817414:	103fb21e 	bne	r2,zero,8172e0 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
  817418:	e0bfff17 	ldw	r2,-4(fp)
}
  81741c:	e037883a 	mov	sp,fp
  817420:	dfc00117 	ldw	ra,4(sp)
  817424:	df000017 	ldw	fp,0(sp)
  817428:	dec00204 	addi	sp,sp,8
  81742c:	f800283a 	ret

00817430 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  817430:	defff804 	addi	sp,sp,-32
  817434:	dfc00715 	stw	ra,28(sp)
  817438:	df000615 	stw	fp,24(sp)
  81743c:	df000604 	addi	fp,sp,24
  817440:	e13ffc15 	stw	r4,-16(fp)
  817444:	e17ffd15 	stw	r5,-12(fp)
  817448:	e1bffe15 	stw	r6,-8(fp)
  81744c:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
  817450:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  817454:	e0bffc17 	ldw	r2,-16(fp)
  817458:	108007cc 	andi	r2,r2,31
  81745c:	1004c03a 	cmpne	r2,r2,zero
  817460:	10008e1e 	bne	r2,zero,81769c <Read_File_Record_At_Offset+0x26c>
  817464:	0819cf00 	call	819cf0 <alt_up_sd_card_is_Present>
  817468:	1005003a 	cmpeq	r2,r2,zero
  81746c:	10008b1e 	bne	r2,zero,81769c <Read_File_Record_At_Offset+0x26c>
  817470:	d0a06917 	ldw	r2,-32348(gp)
  817474:	1005003a 	cmpeq	r2,r2,zero
  817478:	1000881e 	bne	r2,zero,81769c <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
  81747c:	e03ffa15 	stw	zero,-24(fp)
  817480:	00001006 	br	8174c4 <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
  817484:	e17ffa17 	ldw	r5,-24(fp)
  817488:	d0a07217 	ldw	r2,-32312(gp)
  81748c:	10800a17 	ldw	r2,40(r2)
  817490:	1009883a 	mov	r4,r2
  817494:	e0fffc17 	ldw	r3,-16(fp)
  817498:	e0bffa17 	ldw	r2,-24(fp)
  81749c:	1885883a 	add	r2,r3,r2
  8174a0:	2085883a 	add	r2,r4,r2
  8174a4:	10800023 	ldbuio	r2,0(r2)
  8174a8:	1007883a 	mov	r3,r2
  8174ac:	e0bffd17 	ldw	r2,-12(fp)
  8174b0:	1145883a 	add	r2,r2,r5
  8174b4:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
  8174b8:	e0bffa17 	ldw	r2,-24(fp)
  8174bc:	10800044 	addi	r2,r2,1
  8174c0:	e0bffa15 	stw	r2,-24(fp)
  8174c4:	e0bffa17 	ldw	r2,-24(fp)
  8174c8:	10800210 	cmplti	r2,r2,8
  8174cc:	103fed1e 	bne	r2,zero,817484 <Read_File_Record_At_Offset+0x54>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
  8174d0:	e03ffa15 	stw	zero,-24(fp)
  8174d4:	00001206 	br	817520 <Read_File_Record_At_Offset+0xf0>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
  8174d8:	e17ffa17 	ldw	r5,-24(fp)
  8174dc:	d0a07217 	ldw	r2,-32312(gp)
  8174e0:	10800a17 	ldw	r2,40(r2)
  8174e4:	1009883a 	mov	r4,r2
  8174e8:	e0fffc17 	ldw	r3,-16(fp)
  8174ec:	e0bffa17 	ldw	r2,-24(fp)
  8174f0:	1885883a 	add	r2,r3,r2
  8174f4:	2085883a 	add	r2,r4,r2
  8174f8:	10800204 	addi	r2,r2,8
  8174fc:	10800023 	ldbuio	r2,0(r2)
  817500:	1007883a 	mov	r3,r2
  817504:	e0bffd17 	ldw	r2,-12(fp)
  817508:	2885883a 	add	r2,r5,r2
  81750c:	10800204 	addi	r2,r2,8
  817510:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
  817514:	e0bffa17 	ldw	r2,-24(fp)
  817518:	10800044 	addi	r2,r2,1
  81751c:	e0bffa15 	stw	r2,-24(fp)
  817520:	e0bffa17 	ldw	r2,-24(fp)
  817524:	108000d0 	cmplti	r2,r2,3
  817528:	103feb1e 	bne	r2,zero,8174d8 <Read_File_Record_At_Offset+0xa8>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
  81752c:	d0a07217 	ldw	r2,-32312(gp)
  817530:	10800a17 	ldw	r2,40(r2)
  817534:	1007883a 	mov	r3,r2
  817538:	e0bffc17 	ldw	r2,-16(fp)
  81753c:	1885883a 	add	r2,r3,r2
  817540:	108002c4 	addi	r2,r2,11
  817544:	10800023 	ldbuio	r2,0(r2)
  817548:	1007883a 	mov	r3,r2
  81754c:	e0bffd17 	ldw	r2,-12(fp)
  817550:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
  817554:	d0a07217 	ldw	r2,-32312(gp)
  817558:	10800a17 	ldw	r2,40(r2)
  81755c:	1007883a 	mov	r3,r2
  817560:	e0bffc17 	ldw	r2,-16(fp)
  817564:	1885883a 	add	r2,r3,r2
  817568:	10800384 	addi	r2,r2,14
  81756c:	1080002b 	ldhuio	r2,0(r2)
  817570:	1007883a 	mov	r3,r2
  817574:	e0bffd17 	ldw	r2,-12(fp)
  817578:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
  81757c:	d0a07217 	ldw	r2,-32312(gp)
  817580:	10800a17 	ldw	r2,40(r2)
  817584:	1007883a 	mov	r3,r2
  817588:	e0bffc17 	ldw	r2,-16(fp)
  81758c:	1885883a 	add	r2,r3,r2
  817590:	10800404 	addi	r2,r2,16
  817594:	1080002b 	ldhuio	r2,0(r2)
  817598:	1007883a 	mov	r3,r2
  81759c:	e0bffd17 	ldw	r2,-12(fp)
  8175a0:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
  8175a4:	d0a07217 	ldw	r2,-32312(gp)
  8175a8:	10800a17 	ldw	r2,40(r2)
  8175ac:	1007883a 	mov	r3,r2
  8175b0:	e0bffc17 	ldw	r2,-16(fp)
  8175b4:	1885883a 	add	r2,r3,r2
  8175b8:	10800484 	addi	r2,r2,18
  8175bc:	1080002b 	ldhuio	r2,0(r2)
  8175c0:	1007883a 	mov	r3,r2
  8175c4:	e0bffd17 	ldw	r2,-12(fp)
  8175c8:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
  8175cc:	d0a07217 	ldw	r2,-32312(gp)
  8175d0:	10800a17 	ldw	r2,40(r2)
  8175d4:	1007883a 	mov	r3,r2
  8175d8:	e0bffc17 	ldw	r2,-16(fp)
  8175dc:	1885883a 	add	r2,r3,r2
  8175e0:	10800584 	addi	r2,r2,22
  8175e4:	1080002b 	ldhuio	r2,0(r2)
  8175e8:	1007883a 	mov	r3,r2
  8175ec:	e0bffd17 	ldw	r2,-12(fp)
  8175f0:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
  8175f4:	d0a07217 	ldw	r2,-32312(gp)
  8175f8:	10800a17 	ldw	r2,40(r2)
  8175fc:	1007883a 	mov	r3,r2
  817600:	e0bffc17 	ldw	r2,-16(fp)
  817604:	1885883a 	add	r2,r3,r2
  817608:	10800604 	addi	r2,r2,24
  81760c:	1080002b 	ldhuio	r2,0(r2)
  817610:	1007883a 	mov	r3,r2
  817614:	e0bffd17 	ldw	r2,-12(fp)
  817618:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
  81761c:	d0a07217 	ldw	r2,-32312(gp)
  817620:	10800a17 	ldw	r2,40(r2)
  817624:	1007883a 	mov	r3,r2
  817628:	e0bffc17 	ldw	r2,-16(fp)
  81762c:	1885883a 	add	r2,r3,r2
  817630:	10800684 	addi	r2,r2,26
  817634:	1080002b 	ldhuio	r2,0(r2)
  817638:	1007883a 	mov	r3,r2
  81763c:	e0bffd17 	ldw	r2,-12(fp)
  817640:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
  817644:	d0a07217 	ldw	r2,-32312(gp)
  817648:	10800a17 	ldw	r2,40(r2)
  81764c:	1007883a 	mov	r3,r2
  817650:	e0bffc17 	ldw	r2,-16(fp)
  817654:	1885883a 	add	r2,r3,r2
  817658:	10800704 	addi	r2,r2,28
  81765c:	10800037 	ldwio	r2,0(r2)
  817660:	1007883a 	mov	r3,r2
  817664:	e0bffd17 	ldw	r2,-12(fp)
  817668:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
  81766c:	e0fffd17 	ldw	r3,-12(fp)
  817670:	e0bffe17 	ldw	r2,-8(fp)
  817674:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
  817678:	e0fffd17 	ldw	r3,-12(fp)
  81767c:	e0bfff17 	ldw	r2,-4(fp)
  817680:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
  817684:	e0bffc17 	ldw	r2,-16(fp)
  817688:	1007883a 	mov	r3,r2
  81768c:	e0bffd17 	ldw	r2,-12(fp)
  817690:	10c00c0d 	sth	r3,48(r2)
		result = true;
  817694:	00800044 	movi	r2,1
  817698:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  81769c:	e0bffb17 	ldw	r2,-20(fp)
}
  8176a0:	e037883a 	mov	sp,fp
  8176a4:	dfc00117 	ldw	ra,4(sp)
  8176a8:	df000017 	ldw	fp,0(sp)
  8176ac:	dec00204 	addi	sp,sp,8
  8176b0:	f800283a 	ret

008176b4 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  8176b4:	defff904 	addi	sp,sp,-28
  8176b8:	dfc00615 	stw	ra,24(sp)
  8176bc:	df000515 	stw	fp,20(sp)
  8176c0:	df000504 	addi	fp,sp,20
  8176c4:	e13ffe15 	stw	r4,-8(fp)
  8176c8:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
  8176cc:	e03ffd15 	stw	zero,-12(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  8176d0:	e0bffe17 	ldw	r2,-8(fp)
  8176d4:	108007cc 	andi	r2,r2,31
  8176d8:	1004c03a 	cmpne	r2,r2,zero
  8176dc:	10009d1e 	bne	r2,zero,817954 <Write_File_Record_At_Offset+0x2a0>
  8176e0:	0819cf00 	call	819cf0 <alt_up_sd_card_is_Present>
  8176e4:	1005003a 	cmpeq	r2,r2,zero
  8176e8:	10009a1e 	bne	r2,zero,817954 <Write_File_Record_At_Offset+0x2a0>
  8176ec:	d0a06917 	ldw	r2,-32348(gp)
  8176f0:	1005003a 	cmpeq	r2,r2,zero
  8176f4:	1000971e 	bne	r2,zero,817954 <Write_File_Record_At_Offset+0x2a0>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
  8176f8:	e03ffc15 	stw	zero,-16(fp)
  8176fc:	00001e06 	br	817778 <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
  817700:	e0bffc17 	ldw	r2,-16(fp)
  817704:	10c00044 	addi	r3,r2,1
  817708:	e0bfff17 	ldw	r2,-4(fp)
  81770c:	10c5883a 	add	r2,r2,r3
  817710:	10800003 	ldbu	r2,0(r2)
  817714:	10803fcc 	andi	r2,r2,255
  817718:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars << 8;
  81771c:	e0bffb0f 	ldh	r2,-20(fp)
  817720:	1004923a 	slli	r2,r2,8
  817724:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars | record->name[counter];
  817728:	e0fffc17 	ldw	r3,-16(fp)
  81772c:	e0bfff17 	ldw	r2,-4(fp)
  817730:	10c5883a 	add	r2,r2,r3
  817734:	10800003 	ldbu	r2,0(r2)
  817738:	10c03fcc 	andi	r3,r2,255
  81773c:	e0bffb0b 	ldhu	r2,-20(fp)
  817740:	10c4b03a 	or	r2,r2,r3
  817744:	e0bffb0d 	sth	r2,-20(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  817748:	d0a07217 	ldw	r2,-32312(gp)
  81774c:	10800a17 	ldw	r2,40(r2)
  817750:	1009883a 	mov	r4,r2
  817754:	e0fffe17 	ldw	r3,-8(fp)
  817758:	e0bffc17 	ldw	r2,-16(fp)
  81775c:	1885883a 	add	r2,r3,r2
  817760:	2085883a 	add	r2,r4,r2
  817764:	e0fffb0f 	ldh	r3,-20(fp)
  817768:	10c0002d 	sthio	r3,0(r2)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
  81776c:	e0bffc17 	ldw	r2,-16(fp)
  817770:	10800084 	addi	r2,r2,2
  817774:	e0bffc15 	stw	r2,-16(fp)
  817778:	e0bffc17 	ldw	r2,-16(fp)
  81777c:	10800210 	cmplti	r2,r2,8
  817780:	103fdf1e 	bne	r2,zero,817700 <Write_File_Record_At_Offset+0x4c>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
  817784:	e03ffc15 	stw	zero,-16(fp)
  817788:	00001306 	br	8177d8 <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  81778c:	d0a07217 	ldw	r2,-32312(gp)
  817790:	10800a17 	ldw	r2,40(r2)
  817794:	1009883a 	mov	r4,r2
  817798:	e0fffe17 	ldw	r3,-8(fp)
  81779c:	e0bffc17 	ldw	r2,-16(fp)
  8177a0:	1885883a 	add	r2,r3,r2
  8177a4:	2085883a 	add	r2,r4,r2
  8177a8:	11000204 	addi	r4,r2,8
  8177ac:	e0fffc17 	ldw	r3,-16(fp)
  8177b0:	e0bfff17 	ldw	r2,-4(fp)
  8177b4:	1885883a 	add	r2,r3,r2
  8177b8:	10800204 	addi	r2,r2,8
  8177bc:	10800003 	ldbu	r2,0(r2)
  8177c0:	10c03fcc 	andi	r3,r2,255
  8177c4:	2005883a 	mov	r2,r4
  8177c8:	10c00025 	stbio	r3,0(r2)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
  8177cc:	e0bffc17 	ldw	r2,-16(fp)
  8177d0:	10800044 	addi	r2,r2,1
  8177d4:	e0bffc15 	stw	r2,-16(fp)
  8177d8:	e0bffc17 	ldw	r2,-16(fp)
  8177dc:	108000d0 	cmplti	r2,r2,3
  8177e0:	103fea1e 	bne	r2,zero,81778c <Write_File_Record_At_Offset+0xd8>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  8177e4:	d0a07217 	ldw	r2,-32312(gp)
  8177e8:	10800a17 	ldw	r2,40(r2)
  8177ec:	1007883a 	mov	r3,r2
  8177f0:	e0bffe17 	ldw	r2,-8(fp)
  8177f4:	1885883a 	add	r2,r3,r2
  8177f8:	110002c4 	addi	r4,r2,11
  8177fc:	e0bfff17 	ldw	r2,-4(fp)
  817800:	108002c3 	ldbu	r2,11(r2)
  817804:	10c03fcc 	andi	r3,r2,255
  817808:	2005883a 	mov	r2,r4
  81780c:	10c00025 	stbio	r3,0(r2)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  817810:	d0a07217 	ldw	r2,-32312(gp)
  817814:	10800a17 	ldw	r2,40(r2)
  817818:	1007883a 	mov	r3,r2
  81781c:	e0bffe17 	ldw	r2,-8(fp)
  817820:	1885883a 	add	r2,r3,r2
  817824:	11000384 	addi	r4,r2,14
  817828:	e0bfff17 	ldw	r2,-4(fp)
  81782c:	1080030b 	ldhu	r2,12(r2)
  817830:	10ffffcc 	andi	r3,r2,65535
  817834:	2005883a 	mov	r2,r4
  817838:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  81783c:	d0a07217 	ldw	r2,-32312(gp)
  817840:	10800a17 	ldw	r2,40(r2)
  817844:	1007883a 	mov	r3,r2
  817848:	e0bffe17 	ldw	r2,-8(fp)
  81784c:	1885883a 	add	r2,r3,r2
  817850:	11000404 	addi	r4,r2,16
  817854:	e0bfff17 	ldw	r2,-4(fp)
  817858:	1080038b 	ldhu	r2,14(r2)
  81785c:	10ffffcc 	andi	r3,r2,65535
  817860:	2005883a 	mov	r2,r4
  817864:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  817868:	d0a07217 	ldw	r2,-32312(gp)
  81786c:	10800a17 	ldw	r2,40(r2)
  817870:	1007883a 	mov	r3,r2
  817874:	e0bffe17 	ldw	r2,-8(fp)
  817878:	1885883a 	add	r2,r3,r2
  81787c:	11000484 	addi	r4,r2,18
  817880:	e0bfff17 	ldw	r2,-4(fp)
  817884:	1080040b 	ldhu	r2,16(r2)
  817888:	10ffffcc 	andi	r3,r2,65535
  81788c:	2005883a 	mov	r2,r4
  817890:	10c0002d 	sthio	r3,0(r2)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  817894:	d0a07217 	ldw	r2,-32312(gp)
  817898:	10800a17 	ldw	r2,40(r2)
  81789c:	1007883a 	mov	r3,r2
  8178a0:	e0bffe17 	ldw	r2,-8(fp)
  8178a4:	1885883a 	add	r2,r3,r2
  8178a8:	11000584 	addi	r4,r2,22
  8178ac:	e0bfff17 	ldw	r2,-4(fp)
  8178b0:	1080048b 	ldhu	r2,18(r2)
  8178b4:	10ffffcc 	andi	r3,r2,65535
  8178b8:	2005883a 	mov	r2,r4
  8178bc:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  8178c0:	d0a07217 	ldw	r2,-32312(gp)
  8178c4:	10800a17 	ldw	r2,40(r2)
  8178c8:	1007883a 	mov	r3,r2
  8178cc:	e0bffe17 	ldw	r2,-8(fp)
  8178d0:	1885883a 	add	r2,r3,r2
  8178d4:	11000604 	addi	r4,r2,24
  8178d8:	e0bfff17 	ldw	r2,-4(fp)
  8178dc:	1080050b 	ldhu	r2,20(r2)
  8178e0:	10ffffcc 	andi	r3,r2,65535
  8178e4:	2005883a 	mov	r2,r4
  8178e8:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  8178ec:	d0a07217 	ldw	r2,-32312(gp)
  8178f0:	10800a17 	ldw	r2,40(r2)
  8178f4:	1007883a 	mov	r3,r2
  8178f8:	e0bffe17 	ldw	r2,-8(fp)
  8178fc:	1885883a 	add	r2,r3,r2
  817900:	11000684 	addi	r4,r2,26
  817904:	e0bfff17 	ldw	r2,-4(fp)
  817908:	1080058b 	ldhu	r2,22(r2)
  81790c:	10ffffcc 	andi	r3,r2,65535
  817910:	2005883a 	mov	r2,r4
  817914:	10c0002d 	sthio	r3,0(r2)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  817918:	d0a07217 	ldw	r2,-32312(gp)
  81791c:	10800a17 	ldw	r2,40(r2)
  817920:	1007883a 	mov	r3,r2
  817924:	e0bffe17 	ldw	r2,-8(fp)
  817928:	1885883a 	add	r2,r3,r2
  81792c:	11000704 	addi	r4,r2,28
  817930:	e0bfff17 	ldw	r2,-4(fp)
  817934:	10800617 	ldw	r2,24(r2)
  817938:	1007883a 	mov	r3,r2
  81793c:	2005883a 	mov	r2,r4
  817940:	10c00035 	stwio	r3,0(r2)
        current_sector_modified = true;                  
  817944:	00800044 	movi	r2,1
  817948:	d0a07315 	stw	r2,-32308(gp)
        result = true;
  81794c:	00800044 	movi	r2,1
  817950:	e0bffd15 	stw	r2,-12(fp)
    }
    return result;
  817954:	e0bffd17 	ldw	r2,-12(fp)
}
  817958:	e037883a 	mov	sp,fp
  81795c:	dfc00117 	ldw	ra,4(sp)
  817960:	df000017 	ldw	fp,0(sp)
  817964:	dec00204 	addi	sp,sp,8
  817968:	f800283a 	ret

0081796c <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  81796c:	defff804 	addi	sp,sp,-32
  817970:	dfc00715 	stw	ra,28(sp)
  817974:	df000615 	stw	fp,24(sp)
  817978:	dc000515 	stw	r16,20(sp)
  81797c:	df000504 	addi	fp,sp,20
  817980:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
  817984:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
  817988:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
  81798c:	0009883a 	mov	r4,zero
  817990:	e17fff17 	ldw	r5,-4(fp)
  817994:	0816fe80 	call	816fe8 <Read_Sector_Data>
  817998:	e0bffe15 	stw	r2,-8(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  81799c:	d0a07217 	ldw	r2,-32312(gp)
  8179a0:	10800a17 	ldw	r2,40(r2)
  8179a4:	10807f84 	addi	r2,r2,510
  8179a8:	1080002b 	ldhuio	r2,0(r2)
  8179ac:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
  8179b0:	e0bffc0f 	ldh	r2,-16(fp)
  8179b4:	10ffffcc 	andi	r3,r2,65535
  8179b8:	00aa9554 	movui	r2,43605
  8179bc:	1881751e 	bne	r3,r2,817f94 <Check_for_DOS_FAT+0x628>
  8179c0:	e0bffe17 	ldw	r2,-8(fp)
  8179c4:	1005003a 	cmpeq	r2,r2,zero
  8179c8:	1001721e 	bne	r2,zero,817f94 <Check_for_DOS_FAT+0x628>
	{
		int num_clusters = 0;
  8179cc:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
  8179d0:	d0a07217 	ldw	r2,-32312(gp)
  8179d4:	10800a17 	ldw	r2,40(r2)
  8179d8:	10800023 	ldbuio	r2,0(r2)
  8179dc:	1007883a 	mov	r3,r2
  8179e0:	008020f4 	movhi	r2,131
  8179e4:	109ab304 	addi	r2,r2,27340
  8179e8:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
  8179ec:	d0a07217 	ldw	r2,-32312(gp)
  8179f0:	10800a17 	ldw	r2,40(r2)
  8179f4:	10800044 	addi	r2,r2,1
  8179f8:	10800023 	ldbuio	r2,0(r2)
  8179fc:	1007883a 	mov	r3,r2
  817a00:	008020f4 	movhi	r2,131
  817a04:	109ab304 	addi	r2,r2,27340
  817a08:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
  817a0c:	d0a07217 	ldw	r2,-32312(gp)
  817a10:	10800a17 	ldw	r2,40(r2)
  817a14:	10800084 	addi	r2,r2,2
  817a18:	10800023 	ldbuio	r2,0(r2)
  817a1c:	1007883a 	mov	r3,r2
  817a20:	008020f4 	movhi	r2,131
  817a24:	109ab304 	addi	r2,r2,27340
  817a28:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
  817a2c:	e03ffd15 	stw	zero,-12(fp)
  817a30:	00001006 	br	817a74 <Check_for_DOS_FAT+0x108>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
  817a34:	e13ffd17 	ldw	r4,-12(fp)
  817a38:	d0a07217 	ldw	r2,-32312(gp)
  817a3c:	10800a17 	ldw	r2,40(r2)
  817a40:	1007883a 	mov	r3,r2
  817a44:	e0bffd17 	ldw	r2,-12(fp)
  817a48:	1885883a 	add	r2,r3,r2
  817a4c:	108000c4 	addi	r2,r2,3
  817a50:	10800023 	ldbuio	r2,0(r2)
  817a54:	1007883a 	mov	r3,r2
  817a58:	008020f4 	movhi	r2,131
  817a5c:	109ab304 	addi	r2,r2,27340
  817a60:	1105883a 	add	r2,r2,r4
  817a64:	10c000c5 	stb	r3,3(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
  817a68:	e0bffd17 	ldw	r2,-12(fp)
  817a6c:	10800044 	addi	r2,r2,1
  817a70:	e0bffd15 	stw	r2,-12(fp)
  817a74:	e0bffd17 	ldw	r2,-12(fp)
  817a78:	10800210 	cmplti	r2,r2,8
  817a7c:	103fed1e 	bne	r2,zero,817a34 <Check_for_DOS_FAT+0xc8>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
  817a80:	d0a07217 	ldw	r2,-32312(gp)
  817a84:	10800a17 	ldw	r2,40(r2)
  817a88:	10800304 	addi	r2,r2,12
  817a8c:	10800023 	ldbuio	r2,0(r2)
  817a90:	10803fcc 	andi	r2,r2,255
  817a94:	1004923a 	slli	r2,r2,8
  817a98:	1007883a 	mov	r3,r2
  817a9c:	d0a07217 	ldw	r2,-32312(gp)
  817aa0:	10800a17 	ldw	r2,40(r2)
  817aa4:	108002c4 	addi	r2,r2,11
  817aa8:	10800023 	ldbuio	r2,0(r2)
  817aac:	10803fcc 	andi	r2,r2,255
  817ab0:	1080201c 	xori	r2,r2,128
  817ab4:	10bfe004 	addi	r2,r2,-128
  817ab8:	1884b03a 	or	r2,r3,r2
  817abc:	1007883a 	mov	r3,r2
  817ac0:	008020f4 	movhi	r2,131
  817ac4:	109ab304 	addi	r2,r2,27340
  817ac8:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
  817acc:	d0a07217 	ldw	r2,-32312(gp)
  817ad0:	10800a17 	ldw	r2,40(r2)
  817ad4:	10800344 	addi	r2,r2,13
  817ad8:	10800023 	ldbuio	r2,0(r2)
  817adc:	1007883a 	mov	r3,r2
  817ae0:	008020f4 	movhi	r2,131
  817ae4:	109ab304 	addi	r2,r2,27340
  817ae8:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
  817aec:	d0a07217 	ldw	r2,-32312(gp)
  817af0:	10800a17 	ldw	r2,40(r2)
  817af4:	10800384 	addi	r2,r2,14
  817af8:	1080002b 	ldhuio	r2,0(r2)
  817afc:	1007883a 	mov	r3,r2
  817b00:	008020f4 	movhi	r2,131
  817b04:	109ab304 	addi	r2,r2,27340
  817b08:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
  817b0c:	d0a07217 	ldw	r2,-32312(gp)
  817b10:	10800a17 	ldw	r2,40(r2)
  817b14:	10800404 	addi	r2,r2,16
  817b18:	10800023 	ldbuio	r2,0(r2)
  817b1c:	1007883a 	mov	r3,r2
  817b20:	008020f4 	movhi	r2,131
  817b24:	109ab304 	addi	r2,r2,27340
  817b28:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
  817b2c:	d0a07217 	ldw	r2,-32312(gp)
  817b30:	10800a17 	ldw	r2,40(r2)
  817b34:	10800484 	addi	r2,r2,18
  817b38:	10800023 	ldbuio	r2,0(r2)
  817b3c:	10803fcc 	andi	r2,r2,255
  817b40:	1004923a 	slli	r2,r2,8
  817b44:	1007883a 	mov	r3,r2
  817b48:	d0a07217 	ldw	r2,-32312(gp)
  817b4c:	10800a17 	ldw	r2,40(r2)
  817b50:	10800444 	addi	r2,r2,17
  817b54:	10800023 	ldbuio	r2,0(r2)
  817b58:	10803fcc 	andi	r2,r2,255
  817b5c:	1884b03a 	or	r2,r3,r2
  817b60:	1007883a 	mov	r3,r2
  817b64:	008020f4 	movhi	r2,131
  817b68:	109ab304 	addi	r2,r2,27340
  817b6c:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
  817b70:	d0a07217 	ldw	r2,-32312(gp)
  817b74:	10800a17 	ldw	r2,40(r2)
  817b78:	10800504 	addi	r2,r2,20
  817b7c:	10800023 	ldbuio	r2,0(r2)
  817b80:	10803fcc 	andi	r2,r2,255
  817b84:	1004923a 	slli	r2,r2,8
  817b88:	1007883a 	mov	r3,r2
  817b8c:	d0a07217 	ldw	r2,-32312(gp)
  817b90:	10800a17 	ldw	r2,40(r2)
  817b94:	108004c4 	addi	r2,r2,19
  817b98:	10800023 	ldbuio	r2,0(r2)
  817b9c:	10803fcc 	andi	r2,r2,255
  817ba0:	1884b03a 	or	r2,r3,r2
  817ba4:	1007883a 	mov	r3,r2
  817ba8:	008020f4 	movhi	r2,131
  817bac:	109ab304 	addi	r2,r2,27340
  817bb0:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
  817bb4:	d0a07217 	ldw	r2,-32312(gp)
  817bb8:	10800a17 	ldw	r2,40(r2)
  817bbc:	10800544 	addi	r2,r2,21
  817bc0:	10800023 	ldbuio	r2,0(r2)
  817bc4:	1007883a 	mov	r3,r2
  817bc8:	008020f4 	movhi	r2,131
  817bcc:	109ab304 	addi	r2,r2,27340
  817bd0:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
  817bd4:	d0a07217 	ldw	r2,-32312(gp)
  817bd8:	10800a17 	ldw	r2,40(r2)
  817bdc:	10800584 	addi	r2,r2,22
  817be0:	1080002b 	ldhuio	r2,0(r2)
  817be4:	1007883a 	mov	r3,r2
  817be8:	008020f4 	movhi	r2,131
  817bec:	109ab304 	addi	r2,r2,27340
  817bf0:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
  817bf4:	d0a07217 	ldw	r2,-32312(gp)
  817bf8:	10800a17 	ldw	r2,40(r2)
  817bfc:	10800604 	addi	r2,r2,24
  817c00:	1080002b 	ldhuio	r2,0(r2)
  817c04:	1007883a 	mov	r3,r2
  817c08:	008020f4 	movhi	r2,131
  817c0c:	109ab304 	addi	r2,r2,27340
  817c10:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
  817c14:	d0a07217 	ldw	r2,-32312(gp)
  817c18:	10800a17 	ldw	r2,40(r2)
  817c1c:	10800684 	addi	r2,r2,26
  817c20:	1080002b 	ldhuio	r2,0(r2)
  817c24:	1007883a 	mov	r3,r2
  817c28:	008020f4 	movhi	r2,131
  817c2c:	109ab304 	addi	r2,r2,27340
  817c30:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
  817c34:	d0a07217 	ldw	r2,-32312(gp)
  817c38:	10800a17 	ldw	r2,40(r2)
  817c3c:	10800704 	addi	r2,r2,28
  817c40:	10800037 	ldwio	r2,0(r2)
  817c44:	1007883a 	mov	r3,r2
  817c48:	008020f4 	movhi	r2,131
  817c4c:	109ab304 	addi	r2,r2,27340
  817c50:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
  817c54:	d0a07217 	ldw	r2,-32312(gp)
  817c58:	10800a17 	ldw	r2,40(r2)
  817c5c:	10800804 	addi	r2,r2,32
  817c60:	10800037 	ldwio	r2,0(r2)
  817c64:	1007883a 	mov	r3,r2
  817c68:	008020f4 	movhi	r2,131
  817c6c:	109ab304 	addi	r2,r2,27340
  817c70:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
  817c74:	d0a07217 	ldw	r2,-32312(gp)
  817c78:	10800a17 	ldw	r2,40(r2)
  817c7c:	10800904 	addi	r2,r2,36
  817c80:	10800023 	ldbuio	r2,0(r2)
  817c84:	1007883a 	mov	r3,r2
  817c88:	008020f4 	movhi	r2,131
  817c8c:	109ab304 	addi	r2,r2,27340
  817c90:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
  817c94:	d0a07217 	ldw	r2,-32312(gp)
  817c98:	10800a17 	ldw	r2,40(r2)
  817c9c:	10800944 	addi	r2,r2,37
  817ca0:	10800023 	ldbuio	r2,0(r2)
  817ca4:	1007883a 	mov	r3,r2
  817ca8:	008020f4 	movhi	r2,131
  817cac:	109ab304 	addi	r2,r2,27340
  817cb0:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
  817cb4:	d0a07217 	ldw	r2,-32312(gp)
  817cb8:	10800a17 	ldw	r2,40(r2)
  817cbc:	10800984 	addi	r2,r2,38
  817cc0:	10800023 	ldbuio	r2,0(r2)
  817cc4:	1007883a 	mov	r3,r2
  817cc8:	008020f4 	movhi	r2,131
  817ccc:	109ab304 	addi	r2,r2,27340
  817cd0:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
  817cd4:	008020f4 	movhi	r2,131
  817cd8:	109ab304 	addi	r2,r2,27340
  817cdc:	1080040b 	ldhu	r2,16(r2)
  817ce0:	10ffffcc 	andi	r3,r2,65535
  817ce4:	008020f4 	movhi	r2,131
  817ce8:	109ab304 	addi	r2,r2,27340
  817cec:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
  817cf0:	008020f4 	movhi	r2,131
  817cf4:	109ab304 	addi	r2,r2,27340
  817cf8:	10c01117 	ldw	r3,68(r2)
  817cfc:	008020f4 	movhi	r2,131
  817d00:	109ab304 	addi	r2,r2,27340
  817d04:	1080068b 	ldhu	r2,26(r2)
  817d08:	10bfffcc 	andi	r2,r2,65535
  817d0c:	1887883a 	add	r3,r3,r2
  817d10:	008020f4 	movhi	r2,131
  817d14:	109ab304 	addi	r2,r2,27340
  817d18:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
  817d1c:	008020f4 	movhi	r2,131
  817d20:	109ab304 	addi	r2,r2,27340
  817d24:	10c01217 	ldw	r3,72(r2)
  817d28:	008020f4 	movhi	r2,131
  817d2c:	109ab304 	addi	r2,r2,27340
  817d30:	1080068b 	ldhu	r2,26(r2)
  817d34:	10bfffcc 	andi	r2,r2,65535
  817d38:	1887883a 	add	r3,r3,r2
  817d3c:	008020f4 	movhi	r2,131
  817d40:	109ab304 	addi	r2,r2,27340
  817d44:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
  817d48:	008020f4 	movhi	r2,131
  817d4c:	109ab304 	addi	r2,r2,27340
  817d50:	14001317 	ldw	r16,76(r2)
  817d54:	008020f4 	movhi	r2,131
  817d58:	109ab304 	addi	r2,r2,27340
  817d5c:	1080050b 	ldhu	r2,20(r2)
  817d60:	10bfffcc 	andi	r2,r2,65535
  817d64:	1008917a 	slli	r4,r2,5
  817d68:	008020f4 	movhi	r2,131
  817d6c:	109ab304 	addi	r2,r2,27340
  817d70:	1080030b 	ldhu	r2,12(r2)
  817d74:	117fffcc 	andi	r5,r2,65535
  817d78:	080c3980 	call	80c398 <__divsi3>
  817d7c:	8087883a 	add	r3,r16,r2
  817d80:	008020f4 	movhi	r2,131
  817d84:	109ab304 	addi	r2,r2,27340
  817d88:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
  817d8c:	008020f4 	movhi	r2,131
  817d90:	109ab304 	addi	r2,r2,27340
  817d94:	1080058b 	ldhu	r2,22(r2)
  817d98:	10bfffcc 	andi	r2,r2,65535
  817d9c:	1005003a 	cmpeq	r2,r2,zero
  817da0:	10000b1e 	bne	r2,zero,817dd0 <Check_for_DOS_FAT+0x464>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
  817da4:	008020f4 	movhi	r2,131
  817da8:	109ab304 	addi	r2,r2,27340
  817dac:	1080058b 	ldhu	r2,22(r2)
  817db0:	113fffcc 	andi	r4,r2,65535
  817db4:	008020f4 	movhi	r2,131
  817db8:	109ab304 	addi	r2,r2,27340
  817dbc:	10800383 	ldbu	r2,14(r2)
  817dc0:	11403fcc 	andi	r5,r2,255
  817dc4:	080c3980 	call	80c398 <__divsi3>
  817dc8:	e0bffb15 	stw	r2,-20(fp)
  817dcc:	00000906 	br	817df4 <Check_for_DOS_FAT+0x488>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
  817dd0:	008020f4 	movhi	r2,131
  817dd4:	109ab304 	addi	r2,r2,27340
  817dd8:	11000917 	ldw	r4,36(r2)
  817ddc:	008020f4 	movhi	r2,131
  817de0:	109ab304 	addi	r2,r2,27340
  817de4:	10800383 	ldbu	r2,14(r2)
  817de8:	11403fcc 	andi	r5,r2,255
  817dec:	080c4580 	call	80c458 <__udivsi3>
  817df0:	e0bffb15 	stw	r2,-20(fp)
		}
		if (num_clusters < 4087)
  817df4:	e0bffb17 	ldw	r2,-20(fp)
  817df8:	1083fdc8 	cmpgei	r2,r2,4087
  817dfc:	1000051e 	bne	r2,zero,817e14 <Check_for_DOS_FAT+0x4a8>
		{
			boot_sector_data.bits_for_cluster_index = 12;
  817e00:	00c020f4 	movhi	r3,131
  817e04:	18dab304 	addi	r3,r3,27340
  817e08:	00800304 	movi	r2,12
  817e0c:	18801085 	stb	r2,66(r3)
  817e10:	00000c06 	br	817e44 <Check_for_DOS_FAT+0x4d8>
		}
		else if (num_clusters <= 65517)
  817e14:	e0fffb17 	ldw	r3,-20(fp)
  817e18:	00bffb54 	movui	r2,65517
  817e1c:	10c00516 	blt	r2,r3,817e34 <Check_for_DOS_FAT+0x4c8>
		{
			boot_sector_data.bits_for_cluster_index = 16;
  817e20:	00c020f4 	movhi	r3,131
  817e24:	18dab304 	addi	r3,r3,27340
  817e28:	00800404 	movi	r2,16
  817e2c:	18801085 	stb	r2,66(r3)
  817e30:	00000406 	br	817e44 <Check_for_DOS_FAT+0x4d8>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
  817e34:	00c020f4 	movhi	r3,131
  817e38:	18dab304 	addi	r3,r3,27340
  817e3c:	00800804 	movi	r2,32
  817e40:	18801085 	stb	r2,66(r3)
		}
	    
		for (counter = 0; counter < 4; counter++)
  817e44:	e03ffd15 	stw	zero,-12(fp)
  817e48:	00001106 	br	817e90 <Check_for_DOS_FAT+0x524>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
  817e4c:	e13ffd17 	ldw	r4,-12(fp)
  817e50:	d0a07217 	ldw	r2,-32312(gp)
  817e54:	10800a17 	ldw	r2,40(r2)
  817e58:	1007883a 	mov	r3,r2
  817e5c:	e0bffd17 	ldw	r2,-12(fp)
  817e60:	1885883a 	add	r2,r3,r2
  817e64:	108009c4 	addi	r2,r2,39
  817e68:	10800023 	ldbuio	r2,0(r2)
  817e6c:	1007883a 	mov	r3,r2
  817e70:	008020f4 	movhi	r2,131
  817e74:	109ab304 	addi	r2,r2,27340
  817e78:	2085883a 	add	r2,r4,r2
  817e7c:	10800a04 	addi	r2,r2,40
  817e80:	10c000c5 	stb	r3,3(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
  817e84:	e0bffd17 	ldw	r2,-12(fp)
  817e88:	10800044 	addi	r2,r2,1
  817e8c:	e0bffd15 	stw	r2,-12(fp)
  817e90:	e0bffd17 	ldw	r2,-12(fp)
  817e94:	10800110 	cmplti	r2,r2,4
  817e98:	103fec1e 	bne	r2,zero,817e4c <Check_for_DOS_FAT+0x4e0>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
  817e9c:	e03ffd15 	stw	zero,-12(fp)
  817ea0:	00001106 	br	817ee8 <Check_for_DOS_FAT+0x57c>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
  817ea4:	e13ffd17 	ldw	r4,-12(fp)
  817ea8:	d0a07217 	ldw	r2,-32312(gp)
  817eac:	10800a17 	ldw	r2,40(r2)
  817eb0:	1007883a 	mov	r3,r2
  817eb4:	e0bffd17 	ldw	r2,-12(fp)
  817eb8:	1885883a 	add	r2,r3,r2
  817ebc:	10800ac4 	addi	r2,r2,43
  817ec0:	10800023 	ldbuio	r2,0(r2)
  817ec4:	1007883a 	mov	r3,r2
  817ec8:	008020f4 	movhi	r2,131
  817ecc:	109ab304 	addi	r2,r2,27340
  817ed0:	2085883a 	add	r2,r4,r2
  817ed4:	10800b04 	addi	r2,r2,44
  817ed8:	10c000c5 	stb	r3,3(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
  817edc:	e0bffd17 	ldw	r2,-12(fp)
  817ee0:	10800044 	addi	r2,r2,1
  817ee4:	e0bffd15 	stw	r2,-12(fp)
  817ee8:	e0bffd17 	ldw	r2,-12(fp)
  817eec:	108002d0 	cmplti	r2,r2,11
  817ef0:	103fec1e 	bne	r2,zero,817ea4 <Check_for_DOS_FAT+0x538>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
  817ef4:	e03ffd15 	stw	zero,-12(fp)
  817ef8:	00001106 	br	817f40 <Check_for_DOS_FAT+0x5d4>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
  817efc:	e13ffd17 	ldw	r4,-12(fp)
  817f00:	d0a07217 	ldw	r2,-32312(gp)
  817f04:	10800a17 	ldw	r2,40(r2)
  817f08:	1007883a 	mov	r3,r2
  817f0c:	e0bffd17 	ldw	r2,-12(fp)
  817f10:	1885883a 	add	r2,r3,r2
  817f14:	10800d84 	addi	r2,r2,54
  817f18:	10800023 	ldbuio	r2,0(r2)
  817f1c:	1007883a 	mov	r3,r2
  817f20:	008020f4 	movhi	r2,131
  817f24:	109ab304 	addi	r2,r2,27340
  817f28:	2085883a 	add	r2,r4,r2
  817f2c:	10800e04 	addi	r2,r2,56
  817f30:	10c00085 	stb	r3,2(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
  817f34:	e0bffd17 	ldw	r2,-12(fp)
  817f38:	10800044 	addi	r2,r2,1
  817f3c:	e0bffd15 	stw	r2,-12(fp)
  817f40:	e0bffd17 	ldw	r2,-12(fp)
  817f44:	10800210 	cmplti	r2,r2,8
  817f48:	103fec1e 	bne	r2,zero,817efc <Check_for_DOS_FAT+0x590>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
  817f4c:	e03ffd15 	stw	zero,-12(fp)
  817f50:	00000a06 	br	817f7c <Check_for_DOS_FAT+0x610>
		{
			active_files[counter].in_use = false;
  817f54:	e0bffd17 	ldw	r2,-12(fp)
  817f58:	00c020f4 	movhi	r3,131
  817f5c:	18dac804 	addi	r3,r3,27424
  817f60:	100491ba 	slli	r2,r2,6
  817f64:	10c5883a 	add	r2,r2,r3
  817f68:	10800f04 	addi	r2,r2,60
  817f6c:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
  817f70:	e0bffd17 	ldw	r2,-12(fp)
  817f74:	10800044 	addi	r2,r2,1
  817f78:	e0bffd15 	stw	r2,-12(fp)
  817f7c:	e0bffd17 	ldw	r2,-12(fp)
  817f80:	10800510 	cmplti	r2,r2,20
  817f84:	103ff31e 	bne	r2,zero,817f54 <Check_for_DOS_FAT+0x5e8>
		{
			active_files[counter].in_use = false;
		}
		result = true;
  817f88:	00800044 	movi	r2,1
  817f8c:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
  817f90:	00000106 	br	817f98 <Check_for_DOS_FAT+0x62c>
		}
		result = true;
	}
    else
    {
        result = false;
  817f94:	e03ffe15 	stw	zero,-8(fp)
    }
	return result;
  817f98:	e0bffe17 	ldw	r2,-8(fp)
}
  817f9c:	e037883a 	mov	sp,fp
  817fa0:	dfc00217 	ldw	ra,8(sp)
  817fa4:	df000117 	ldw	fp,4(sp)
  817fa8:	dc000017 	ldw	r16,0(sp)
  817fac:	dec00304 	addi	sp,sp,12
  817fb0:	f800283a 	ret

00817fb4 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  817fb4:	defffc04 	addi	sp,sp,-16
  817fb8:	dfc00315 	stw	ra,12(sp)
  817fbc:	df000215 	stw	fp,8(sp)
  817fc0:	df000204 	addi	fp,sp,8
	bool result = false;
  817fc4:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
  817fc8:	0819cf00 	call	819cf0 <alt_up_sd_card_is_Present>
  817fcc:	1005003a 	cmpeq	r2,r2,zero
  817fd0:	1000301e 	bne	r2,zero,818094 <Look_for_FAT16+0xe0>
	{
		short int csd_file_format = *CSD_register_w0;
  817fd4:	d0a06c17 	ldw	r2,-32336(gp)
  817fd8:	1080000b 	ldhu	r2,0(r2)
  817fdc:	e0bffe0d 	sth	r2,-8(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
  817fe0:	d0207015 	stw	zero,-32320(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
  817fe4:	d0207115 	stw	zero,-32316(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
  817fe8:	e0bffe0f 	ldh	r2,-8(fp)
  817fec:	1004803a 	cmplt	r2,r2,zero
  817ff0:	1000281e 	bne	r2,zero,818094 <Look_for_FAT16+0xe0>
  817ff4:	e0bffe0b 	ldhu	r2,-8(fp)
  817ff8:	10bfffcc 	andi	r2,r2,65535
  817ffc:	1083000c 	andi	r2,r2,3072
  818000:	10830020 	cmpeqi	r2,r2,3072
  818004:	1000231e 	bne	r2,zero,818094 <Look_for_FAT16+0xe0>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
  818008:	e0bffe0b 	ldhu	r2,-8(fp)
  81800c:	10bfffcc 	andi	r2,r2,65535
  818010:	1083000c 	andi	r2,r2,3072
  818014:	10810018 	cmpnei	r2,r2,1024
  818018:	1000031e 	bne	r2,zero,818028 <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  81801c:	0009883a 	mov	r4,zero
  818020:	081796c0 	call	81796c <Check_for_DOS_FAT>
  818024:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
  818028:	e0bffe0b 	ldhu	r2,-8(fp)
  81802c:	10bfffcc 	andi	r2,r2,65535
  818030:	1083000c 	andi	r2,r2,3072
  818034:	1004c03a 	cmpne	r2,r2,zero
  818038:	1000061e 	bne	r2,zero,818054 <Look_for_FAT16+0xa0>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
  81803c:	08172800 	call	817280 <Check_for_Master_Boot_Record>
  818040:	1005003a 	cmpeq	r2,r2,zero
  818044:	1000031e 	bne	r2,zero,818054 <Look_for_FAT16+0xa0>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
  818048:	d1207017 	ldw	r4,-32320(gp)
  81804c:	081796c0 	call	81796c <Check_for_DOS_FAT>
  818050:	e0bfff15 	stw	r2,-4(fp)
				}                        
			}
			if (result == true)
  818054:	e0bfff17 	ldw	r2,-4(fp)
  818058:	10800058 	cmpnei	r2,r2,1
  81805c:	10000d1e 	bne	r2,zero,818094 <Look_for_FAT16+0xe0>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
  818060:	008020f4 	movhi	r2,131
  818064:	109ab304 	addi	r2,r2,27340
  818068:	10801083 	ldbu	r2,66(r2)
  81806c:	10803fcc 	andi	r2,r2,255
  818070:	10800420 	cmpeqi	r2,r2,16
  818074:	1000021e 	bne	r2,zero,818080 <Look_for_FAT16+0xcc>
				{
					result = false;
  818078:	e03fff15 	stw	zero,-4(fp)
  81807c:	00000506 	br	818094 <Look_for_FAT16+0xe0>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  818080:	008020f4 	movhi	r2,131
  818084:	109ab304 	addi	r2,r2,27340
  818088:	1080058b 	ldhu	r2,22(r2)
  81808c:	10bfffcc 	andi	r2,r2,65535
  818090:	d0a07115 	stw	r2,-32316(gp)
				}
			}
		}
	}
	return result;
  818094:	e0bfff17 	ldw	r2,-4(fp)
}
  818098:	e037883a 	mov	sp,fp
  81809c:	dfc00117 	ldw	ra,4(sp)
  8180a0:	df000017 	ldw	fp,0(sp)
  8180a4:	dec00204 	addi	sp,sp,8
  8180a8:	f800283a 	ret

008180ac <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  8180ac:	defffb04 	addi	sp,sp,-20
  8180b0:	dfc00415 	stw	ra,16(sp)
  8180b4:	df000315 	stw	fp,12(sp)
  8180b8:	df000304 	addi	fp,sp,12
  8180bc:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
  8180c0:	e13fff17 	ldw	r4,-4(fp)
  8180c4:	08044400 	call	804440 <strlen>
  8180c8:	e0bffd15 	stw	r2,-12(fp)
    
    for (index = 0; index < length; index++)
  8180cc:	e03ffe15 	stw	zero,-8(fp)
  8180d0:	00002206 	br	81815c <filename_to_upper_case+0xb0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  8180d4:	e0bffe17 	ldw	r2,-8(fp)
  8180d8:	1007883a 	mov	r3,r2
  8180dc:	e0bfff17 	ldw	r2,-4(fp)
  8180e0:	1885883a 	add	r2,r3,r2
  8180e4:	10800003 	ldbu	r2,0(r2)
  8180e8:	10803fcc 	andi	r2,r2,255
  8180ec:	1080201c 	xori	r2,r2,128
  8180f0:	10bfe004 	addi	r2,r2,-128
  8180f4:	10801850 	cmplti	r2,r2,97
  8180f8:	1000151e 	bne	r2,zero,818150 <filename_to_upper_case+0xa4>
  8180fc:	e0bffe17 	ldw	r2,-8(fp)
  818100:	1007883a 	mov	r3,r2
  818104:	e0bfff17 	ldw	r2,-4(fp)
  818108:	1885883a 	add	r2,r3,r2
  81810c:	10800003 	ldbu	r2,0(r2)
  818110:	10803fcc 	andi	r2,r2,255
  818114:	1080201c 	xori	r2,r2,128
  818118:	10bfe004 	addi	r2,r2,-128
  81811c:	10801ec8 	cmpgei	r2,r2,123
  818120:	10000b1e 	bne	r2,zero,818150 <filename_to_upper_case+0xa4>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  818124:	e0bffe17 	ldw	r2,-8(fp)
  818128:	1007883a 	mov	r3,r2
  81812c:	e0bfff17 	ldw	r2,-4(fp)
  818130:	1889883a 	add	r4,r3,r2
  818134:	e0bffe17 	ldw	r2,-8(fp)
  818138:	1007883a 	mov	r3,r2
  81813c:	e0bfff17 	ldw	r2,-4(fp)
  818140:	1885883a 	add	r2,r3,r2
  818144:	10800003 	ldbu	r2,0(r2)
  818148:	10bff804 	addi	r2,r2,-32
  81814c:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
  818150:	e0bffe17 	ldw	r2,-8(fp)
  818154:	10800044 	addi	r2,r2,1
  818158:	e0bffe15 	stw	r2,-8(fp)
  81815c:	e0fffe17 	ldw	r3,-8(fp)
  818160:	e0bffd17 	ldw	r2,-12(fp)
  818164:	18bfdb16 	blt	r3,r2,8180d4 <filename_to_upper_case+0x28>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
  818168:	e037883a 	mov	sp,fp
  81816c:	dfc00117 	ldw	ra,4(sp)
  818170:	df000017 	ldw	fp,0(sp)
  818174:	dec00204 	addi	sp,sp,8
  818178:	f800283a 	ret

0081817c <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  81817c:	defff804 	addi	sp,sp,-32
  818180:	dfc00715 	stw	ra,28(sp)
  818184:	df000615 	stw	fp,24(sp)
  818188:	df000604 	addi	fp,sp,24
  81818c:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
  818190:	e13fff17 	ldw	r4,-4(fp)
  818194:	08044400 	call	804440 <strlen>
  818198:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
  81819c:	00bfffc4 	movi	r2,-1
  8181a0:	e0bffc15 	stw	r2,-16(fp)
    int last_period = -1;
  8181a4:	00bfffc4 	movi	r2,-1
  8181a8:	e0bffb15 	stw	r2,-20(fp)
    bool result = true;
  8181ac:	00800044 	movi	r2,1
  8181b0:	e0bffa15 	stw	r2,-24(fp)
    
    for(index = 0; index < length; index++)
  8181b4:	e03ffd15 	stw	zero,-12(fp)
  8181b8:	00007606 	br	818394 <check_file_name_for_FAT16_compliance+0x218>
    {
        if ((file_name[index] == ' ') ||
  8181bc:	e0bffd17 	ldw	r2,-12(fp)
  8181c0:	1007883a 	mov	r3,r2
  8181c4:	e0bfff17 	ldw	r2,-4(fp)
  8181c8:	1885883a 	add	r2,r3,r2
  8181cc:	10800003 	ldbu	r2,0(r2)
  8181d0:	10803fcc 	andi	r2,r2,255
  8181d4:	1080201c 	xori	r2,r2,128
  8181d8:	10bfe004 	addi	r2,r2,-128
  8181dc:	10800820 	cmpeqi	r2,r2,32
  8181e0:	1000431e 	bne	r2,zero,8182f0 <check_file_name_for_FAT16_compliance+0x174>
  8181e4:	e0bffd17 	ldw	r2,-12(fp)
  8181e8:	10ffffc4 	addi	r3,r2,-1
  8181ec:	e0bffc17 	ldw	r2,-16(fp)
  8181f0:	1880141e 	bne	r3,r2,818244 <check_file_name_for_FAT16_compliance+0xc8>
  8181f4:	e0bffd17 	ldw	r2,-12(fp)
  8181f8:	1007883a 	mov	r3,r2
  8181fc:	e0bfff17 	ldw	r2,-4(fp)
  818200:	1885883a 	add	r2,r3,r2
  818204:	10800003 	ldbu	r2,0(r2)
  818208:	10803fcc 	andi	r2,r2,255
  81820c:	1080201c 	xori	r2,r2,128
  818210:	10bfe004 	addi	r2,r2,-128
  818214:	10801720 	cmpeqi	r2,r2,92
  818218:	1000351e 	bne	r2,zero,8182f0 <check_file_name_for_FAT16_compliance+0x174>
  81821c:	e0bffd17 	ldw	r2,-12(fp)
  818220:	1007883a 	mov	r3,r2
  818224:	e0bfff17 	ldw	r2,-4(fp)
  818228:	1885883a 	add	r2,r3,r2
  81822c:	10800003 	ldbu	r2,0(r2)
  818230:	10803fcc 	andi	r2,r2,255
  818234:	1080201c 	xori	r2,r2,128
  818238:	10bfe004 	addi	r2,r2,-128
  81823c:	10800be0 	cmpeqi	r2,r2,47
  818240:	10002b1e 	bne	r2,zero,8182f0 <check_file_name_for_FAT16_compliance+0x174>
  818244:	e0fffd17 	ldw	r3,-12(fp)
  818248:	e0bffb17 	ldw	r2,-20(fp)
  81824c:	1885c83a 	sub	r2,r3,r2
  818250:	10800258 	cmpnei	r2,r2,9
  818254:	10000a1e 	bne	r2,zero,818280 <check_file_name_for_FAT16_compliance+0x104>
  818258:	e0bffd17 	ldw	r2,-12(fp)
  81825c:	1007883a 	mov	r3,r2
  818260:	e0bfff17 	ldw	r2,-4(fp)
  818264:	1885883a 	add	r2,r3,r2
  818268:	10800003 	ldbu	r2,0(r2)
  81826c:	10803fcc 	andi	r2,r2,255
  818270:	1080201c 	xori	r2,r2,128
  818274:	10bfe004 	addi	r2,r2,-128
  818278:	10800b98 	cmpnei	r2,r2,46
  81827c:	10001c1e 	bne	r2,zero,8182f0 <check_file_name_for_FAT16_compliance+0x174>
  818280:	e0fffc17 	ldw	r3,-16(fp)
  818284:	e0bffb17 	ldw	r2,-20(fp)
  818288:	18801b26 	beq	r3,r2,8182f8 <check_file_name_for_FAT16_compliance+0x17c>
  81828c:	e0fffd17 	ldw	r3,-12(fp)
  818290:	e0bffb17 	ldw	r2,-20(fp)
  818294:	1885c83a 	sub	r2,r3,r2
  818298:	10800110 	cmplti	r2,r2,4
  81829c:	1000161e 	bne	r2,zero,8182f8 <check_file_name_for_FAT16_compliance+0x17c>
  8182a0:	e0bffd17 	ldw	r2,-12(fp)
  8182a4:	1007883a 	mov	r3,r2
  8182a8:	e0bfff17 	ldw	r2,-4(fp)
  8182ac:	1885883a 	add	r2,r3,r2
  8182b0:	10800003 	ldbu	r2,0(r2)
  8182b4:	10803fcc 	andi	r2,r2,255
  8182b8:	1080201c 	xori	r2,r2,128
  8182bc:	10bfe004 	addi	r2,r2,-128
  8182c0:	10801720 	cmpeqi	r2,r2,92
  8182c4:	10000c1e 	bne	r2,zero,8182f8 <check_file_name_for_FAT16_compliance+0x17c>
  8182c8:	e0bffd17 	ldw	r2,-12(fp)
  8182cc:	1007883a 	mov	r3,r2
  8182d0:	e0bfff17 	ldw	r2,-4(fp)
  8182d4:	1885883a 	add	r2,r3,r2
  8182d8:	10800003 	ldbu	r2,0(r2)
  8182dc:	10803fcc 	andi	r2,r2,255
  8182e0:	1080201c 	xori	r2,r2,128
  8182e4:	10bfe004 	addi	r2,r2,-128
  8182e8:	10800be0 	cmpeqi	r2,r2,47
  8182ec:	1000021e 	bne	r2,zero,8182f8 <check_file_name_for_FAT16_compliance+0x17c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
             (file_name[index] != '\\') && (file_name[index] != '/'))
           )
        {
            result = false;
  8182f0:	e03ffa15 	stw	zero,-24(fp)
            break;
  8182f4:	00002a06 	br	8183a0 <check_file_name_for_FAT16_compliance+0x224>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
  8182f8:	e0bffd17 	ldw	r2,-12(fp)
  8182fc:	1007883a 	mov	r3,r2
  818300:	e0bfff17 	ldw	r2,-4(fp)
  818304:	1885883a 	add	r2,r3,r2
  818308:	10800003 	ldbu	r2,0(r2)
  81830c:	10803fcc 	andi	r2,r2,255
  818310:	1080201c 	xori	r2,r2,128
  818314:	10bfe004 	addi	r2,r2,-128
  818318:	10801720 	cmpeqi	r2,r2,92
  81831c:	10000a1e 	bne	r2,zero,818348 <check_file_name_for_FAT16_compliance+0x1cc>
  818320:	e0bffd17 	ldw	r2,-12(fp)
  818324:	1007883a 	mov	r3,r2
  818328:	e0bfff17 	ldw	r2,-4(fp)
  81832c:	1885883a 	add	r2,r3,r2
  818330:	10800003 	ldbu	r2,0(r2)
  818334:	10803fcc 	andi	r2,r2,255
  818338:	1080201c 	xori	r2,r2,128
  81833c:	10bfe004 	addi	r2,r2,-128
  818340:	10800bd8 	cmpnei	r2,r2,47
  818344:	1000041e 	bne	r2,zero,818358 <check_file_name_for_FAT16_compliance+0x1dc>
        {
            last_period = index;
  818348:	e0bffd17 	ldw	r2,-12(fp)
  81834c:	e0bffb15 	stw	r2,-20(fp)
            last_dir_break_position = index;
  818350:	e0bffd17 	ldw	r2,-12(fp)
  818354:	e0bffc15 	stw	r2,-16(fp)
        }
        if (file_name[index] == '.')
  818358:	e0bffd17 	ldw	r2,-12(fp)
  81835c:	1007883a 	mov	r3,r2
  818360:	e0bfff17 	ldw	r2,-4(fp)
  818364:	1885883a 	add	r2,r3,r2
  818368:	10800003 	ldbu	r2,0(r2)
  81836c:	10803fcc 	andi	r2,r2,255
  818370:	1080201c 	xori	r2,r2,128
  818374:	10bfe004 	addi	r2,r2,-128
  818378:	10800b98 	cmpnei	r2,r2,46
  81837c:	1000021e 	bne	r2,zero,818388 <check_file_name_for_FAT16_compliance+0x20c>
        {
            last_period = index;
  818380:	e0bffd17 	ldw	r2,-12(fp)
  818384:	e0bffb15 	stw	r2,-20(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
  818388:	e0bffd17 	ldw	r2,-12(fp)
  81838c:	10800044 	addi	r2,r2,1
  818390:	e0bffd15 	stw	r2,-12(fp)
  818394:	e0fffd17 	ldw	r3,-12(fp)
  818398:	e0bffe17 	ldw	r2,-8(fp)
  81839c:	18bf8716 	blt	r3,r2,8181bc <check_file_name_for_FAT16_compliance+0x40>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  8183a0:	e0fffe17 	ldw	r3,-8(fp)
  8183a4:	e0bfff17 	ldw	r2,-4(fp)
  8183a8:	1885883a 	add	r2,r3,r2
  8183ac:	10bfffc4 	addi	r2,r2,-1
  8183b0:	10800003 	ldbu	r2,0(r2)
  8183b4:	10803fcc 	andi	r2,r2,255
  8183b8:	1080201c 	xori	r2,r2,128
  8183bc:	10bfe004 	addi	r2,r2,-128
  8183c0:	10801720 	cmpeqi	r2,r2,92
  8183c4:	10000a1e 	bne	r2,zero,8183f0 <check_file_name_for_FAT16_compliance+0x274>
  8183c8:	e0fffe17 	ldw	r3,-8(fp)
  8183cc:	e0bfff17 	ldw	r2,-4(fp)
  8183d0:	1885883a 	add	r2,r3,r2
  8183d4:	10bfffc4 	addi	r2,r2,-1
  8183d8:	10800003 	ldbu	r2,0(r2)
  8183dc:	10803fcc 	andi	r2,r2,255
  8183e0:	1080201c 	xori	r2,r2,128
  8183e4:	10bfe004 	addi	r2,r2,-128
  8183e8:	10800bd8 	cmpnei	r2,r2,47
  8183ec:	1000011e 	bne	r2,zero,8183f4 <check_file_name_for_FAT16_compliance+0x278>
    {
        result = false;
  8183f0:	e03ffa15 	stw	zero,-24(fp)
    }
    return result;
  8183f4:	e0bffa17 	ldw	r2,-24(fp)
}
  8183f8:	e037883a 	mov	sp,fp
  8183fc:	dfc00117 	ldw	ra,4(sp)
  818400:	df000017 	ldw	fp,0(sp)
  818404:	dec00204 	addi	sp,sp,8
  818408:	f800283a 	ret

0081840c <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  81840c:	defffb04 	addi	sp,sp,-20
  818410:	dfc00415 	stw	ra,16(sp)
  818414:	df000315 	stw	fp,12(sp)
  818418:	df000304 	addi	fp,sp,12
  81841c:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
  818420:	e03ffe15 	stw	zero,-8(fp)
    int length = strlen(name);
  818424:	e13fff17 	ldw	r4,-4(fp)
  818428:	08044400 	call	804440 <strlen>
  81842c:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
  818430:	e03ffe15 	stw	zero,-8(fp)
  818434:	00001706 	br	818494 <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  818438:	e0bffe17 	ldw	r2,-8(fp)
  81843c:	1007883a 	mov	r3,r2
  818440:	e0bfff17 	ldw	r2,-4(fp)
  818444:	1885883a 	add	r2,r3,r2
  818448:	10800003 	ldbu	r2,0(r2)
  81844c:	10803fcc 	andi	r2,r2,255
  818450:	1080201c 	xori	r2,r2,128
  818454:	10bfe004 	addi	r2,r2,-128
  818458:	10801720 	cmpeqi	r2,r2,92
  81845c:	1000101e 	bne	r2,zero,8184a0 <get_dir_divider_location+0x94>
  818460:	e0bffe17 	ldw	r2,-8(fp)
  818464:	1007883a 	mov	r3,r2
  818468:	e0bfff17 	ldw	r2,-4(fp)
  81846c:	1885883a 	add	r2,r3,r2
  818470:	10800003 	ldbu	r2,0(r2)
  818474:	10803fcc 	andi	r2,r2,255
  818478:	1080201c 	xori	r2,r2,128
  81847c:	10bfe004 	addi	r2,r2,-128
  818480:	10800be0 	cmpeqi	r2,r2,47
  818484:	1000061e 	bne	r2,zero,8184a0 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
  818488:	e0bffe17 	ldw	r2,-8(fp)
  81848c:	10800044 	addi	r2,r2,1
  818490:	e0bffe15 	stw	r2,-8(fp)
  818494:	e0fffe17 	ldw	r3,-8(fp)
  818498:	e0bffd17 	ldw	r2,-12(fp)
  81849c:	18bfe616 	blt	r3,r2,818438 <get_dir_divider_location+0x2c>
        {
            break;
        }
    }
    
    if (index == length)
  8184a0:	e0fffe17 	ldw	r3,-8(fp)
  8184a4:	e0bffd17 	ldw	r2,-12(fp)
  8184a8:	1880021e 	bne	r3,r2,8184b4 <get_dir_divider_location+0xa8>
    {
        index = -1;
  8184ac:	00bfffc4 	movi	r2,-1
  8184b0:	e0bffe15 	stw	r2,-8(fp)
    }
    
    return index;
  8184b4:	e0bffe17 	ldw	r2,-8(fp)
}
  8184b8:	e037883a 	mov	sp,fp
  8184bc:	dfc00117 	ldw	ra,4(sp)
  8184c0:	df000017 	ldw	fp,0(sp)
  8184c4:	dec00204 	addi	sp,sp,8
  8184c8:	f800283a 	ret

008184cc <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
  8184cc:	defff604 	addi	sp,sp,-40
  8184d0:	df000915 	stw	fp,36(sp)
  8184d4:	df000904 	addi	fp,sp,36
  8184d8:	e13ff915 	stw	r4,-28(fp)
  8184dc:	e17ffa15 	stw	r5,-24(fp)
  8184e0:	e1bffb15 	stw	r6,-20(fp)
    bool match = true;
  8184e4:	00800044 	movi	r2,1
  8184e8:	e0bff815 	stw	r2,-32(fp)
	int index;

    for (index = 0; index < 8; index++)
  8184ec:	e03ff715 	stw	zero,-36(fp)
  8184f0:	00005006 	br	818634 <match_file_record_to_name_ext+0x168>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  8184f4:	e0fff717 	ldw	r3,-36(fp)
  8184f8:	e0bff917 	ldw	r2,-28(fp)
  8184fc:	10c5883a 	add	r2,r2,r3
  818500:	10800003 	ldbu	r2,0(r2)
  818504:	10803fcc 	andi	r2,r2,255
  818508:	10801870 	cmpltui	r2,r2,97
  81850c:	1000111e 	bne	r2,zero,818554 <match_file_record_to_name_ext+0x88>
  818510:	e0fff717 	ldw	r3,-36(fp)
  818514:	e0bff917 	ldw	r2,-28(fp)
  818518:	10c5883a 	add	r2,r2,r3
  81851c:	10800003 	ldbu	r2,0(r2)
  818520:	10803fcc 	andi	r2,r2,255
  818524:	10801ee8 	cmpgeui	r2,r2,123
  818528:	10000a1e 	bne	r2,zero,818554 <match_file_record_to_name_ext+0x88>
  81852c:	e0fff717 	ldw	r3,-36(fp)
  818530:	e0bff917 	ldw	r2,-28(fp)
  818534:	10c5883a 	add	r2,r2,r3
  818538:	10800003 	ldbu	r2,0(r2)
  81853c:	10bff804 	addi	r2,r2,-32
  818540:	10803fcc 	andi	r2,r2,255
  818544:	1080201c 	xori	r2,r2,128
  818548:	10bfe004 	addi	r2,r2,-128
  81854c:	e0bfff15 	stw	r2,-4(fp)
  818550:	00000806 	br	818574 <match_file_record_to_name_ext+0xa8>
  818554:	e0fff717 	ldw	r3,-36(fp)
  818558:	e0bff917 	ldw	r2,-28(fp)
  81855c:	10c5883a 	add	r2,r2,r3
  818560:	10800003 	ldbu	r2,0(r2)
  818564:	10803fcc 	andi	r2,r2,255
  818568:	1080201c 	xori	r2,r2,128
  81856c:	10bfe004 	addi	r2,r2,-128
  818570:	e0bfff15 	stw	r2,-4(fp)
  818574:	e0bff717 	ldw	r2,-36(fp)
  818578:	1007883a 	mov	r3,r2
  81857c:	e0bffa17 	ldw	r2,-24(fp)
  818580:	1885883a 	add	r2,r3,r2
  818584:	10800003 	ldbu	r2,0(r2)
  818588:	10803fcc 	andi	r2,r2,255
  81858c:	1080201c 	xori	r2,r2,128
  818590:	10bfe004 	addi	r2,r2,-128
  818594:	10801850 	cmplti	r2,r2,97
  818598:	1000151e 	bne	r2,zero,8185f0 <match_file_record_to_name_ext+0x124>
  81859c:	e0bff717 	ldw	r2,-36(fp)
  8185a0:	1007883a 	mov	r3,r2
  8185a4:	e0bffa17 	ldw	r2,-24(fp)
  8185a8:	1885883a 	add	r2,r3,r2
  8185ac:	10800003 	ldbu	r2,0(r2)
  8185b0:	10803fcc 	andi	r2,r2,255
  8185b4:	1080201c 	xori	r2,r2,128
  8185b8:	10bfe004 	addi	r2,r2,-128
  8185bc:	10801ec8 	cmpgei	r2,r2,123
  8185c0:	10000b1e 	bne	r2,zero,8185f0 <match_file_record_to_name_ext+0x124>
  8185c4:	e0bff717 	ldw	r2,-36(fp)
  8185c8:	1007883a 	mov	r3,r2
  8185cc:	e0bffa17 	ldw	r2,-24(fp)
  8185d0:	1885883a 	add	r2,r3,r2
  8185d4:	10800003 	ldbu	r2,0(r2)
  8185d8:	10bff804 	addi	r2,r2,-32
  8185dc:	10803fcc 	andi	r2,r2,255
  8185e0:	1080201c 	xori	r2,r2,128
  8185e4:	10bfe004 	addi	r2,r2,-128
  8185e8:	e0bffe15 	stw	r2,-8(fp)
  8185ec:	00000906 	br	818614 <match_file_record_to_name_ext+0x148>
  8185f0:	e0bff717 	ldw	r2,-36(fp)
  8185f4:	1007883a 	mov	r3,r2
  8185f8:	e0bffa17 	ldw	r2,-24(fp)
  8185fc:	1885883a 	add	r2,r3,r2
  818600:	10800003 	ldbu	r2,0(r2)
  818604:	10803fcc 	andi	r2,r2,255
  818608:	1080201c 	xori	r2,r2,128
  81860c:	10bfe004 	addi	r2,r2,-128
  818610:	e0bffe15 	stw	r2,-8(fp)
  818614:	e0bfff17 	ldw	r2,-4(fp)
  818618:	e0fffe17 	ldw	r3,-8(fp)
  81861c:	10c00226 	beq	r2,r3,818628 <match_file_record_to_name_ext+0x15c>
        {
            match = false;
  818620:	e03ff815 	stw	zero,-32(fp)
			break;
  818624:	00000606 	br	818640 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
  818628:	e0bff717 	ldw	r2,-36(fp)
  81862c:	10800044 	addi	r2,r2,1
  818630:	e0bff715 	stw	r2,-36(fp)
  818634:	e0bff717 	ldw	r2,-36(fp)
  818638:	10800210 	cmplti	r2,r2,8
  81863c:	103fad1e 	bne	r2,zero,8184f4 <match_file_record_to_name_ext+0x28>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
  818640:	e03ff715 	stw	zero,-36(fp)
  818644:	00005406 	br	818798 <match_file_record_to_name_ext+0x2cc>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  818648:	e0fff717 	ldw	r3,-36(fp)
  81864c:	e0bff917 	ldw	r2,-28(fp)
  818650:	1885883a 	add	r2,r3,r2
  818654:	10800204 	addi	r2,r2,8
  818658:	10800003 	ldbu	r2,0(r2)
  81865c:	10803fcc 	andi	r2,r2,255
  818660:	10801870 	cmpltui	r2,r2,97
  818664:	1000131e 	bne	r2,zero,8186b4 <match_file_record_to_name_ext+0x1e8>
  818668:	e0fff717 	ldw	r3,-36(fp)
  81866c:	e0bff917 	ldw	r2,-28(fp)
  818670:	1885883a 	add	r2,r3,r2
  818674:	10800204 	addi	r2,r2,8
  818678:	10800003 	ldbu	r2,0(r2)
  81867c:	10803fcc 	andi	r2,r2,255
  818680:	10801ee8 	cmpgeui	r2,r2,123
  818684:	10000b1e 	bne	r2,zero,8186b4 <match_file_record_to_name_ext+0x1e8>
  818688:	e0fff717 	ldw	r3,-36(fp)
  81868c:	e0bff917 	ldw	r2,-28(fp)
  818690:	1885883a 	add	r2,r3,r2
  818694:	10800204 	addi	r2,r2,8
  818698:	10800003 	ldbu	r2,0(r2)
  81869c:	10bff804 	addi	r2,r2,-32
  8186a0:	10803fcc 	andi	r2,r2,255
  8186a4:	1080201c 	xori	r2,r2,128
  8186a8:	10bfe004 	addi	r2,r2,-128
  8186ac:	e0bffd15 	stw	r2,-12(fp)
  8186b0:	00000906 	br	8186d8 <match_file_record_to_name_ext+0x20c>
  8186b4:	e0fff717 	ldw	r3,-36(fp)
  8186b8:	e0bff917 	ldw	r2,-28(fp)
  8186bc:	1885883a 	add	r2,r3,r2
  8186c0:	10800204 	addi	r2,r2,8
  8186c4:	10800003 	ldbu	r2,0(r2)
  8186c8:	10803fcc 	andi	r2,r2,255
  8186cc:	1080201c 	xori	r2,r2,128
  8186d0:	10bfe004 	addi	r2,r2,-128
  8186d4:	e0bffd15 	stw	r2,-12(fp)
  8186d8:	e0bff717 	ldw	r2,-36(fp)
  8186dc:	1007883a 	mov	r3,r2
  8186e0:	e0bffb17 	ldw	r2,-20(fp)
  8186e4:	1885883a 	add	r2,r3,r2
  8186e8:	10800003 	ldbu	r2,0(r2)
  8186ec:	10803fcc 	andi	r2,r2,255
  8186f0:	1080201c 	xori	r2,r2,128
  8186f4:	10bfe004 	addi	r2,r2,-128
  8186f8:	10801850 	cmplti	r2,r2,97
  8186fc:	1000151e 	bne	r2,zero,818754 <match_file_record_to_name_ext+0x288>
  818700:	e0bff717 	ldw	r2,-36(fp)
  818704:	1007883a 	mov	r3,r2
  818708:	e0bffb17 	ldw	r2,-20(fp)
  81870c:	1885883a 	add	r2,r3,r2
  818710:	10800003 	ldbu	r2,0(r2)
  818714:	10803fcc 	andi	r2,r2,255
  818718:	1080201c 	xori	r2,r2,128
  81871c:	10bfe004 	addi	r2,r2,-128
  818720:	10801ec8 	cmpgei	r2,r2,123
  818724:	10000b1e 	bne	r2,zero,818754 <match_file_record_to_name_ext+0x288>
  818728:	e0bff717 	ldw	r2,-36(fp)
  81872c:	1007883a 	mov	r3,r2
  818730:	e0bffb17 	ldw	r2,-20(fp)
  818734:	1885883a 	add	r2,r3,r2
  818738:	10800003 	ldbu	r2,0(r2)
  81873c:	10bff804 	addi	r2,r2,-32
  818740:	10803fcc 	andi	r2,r2,255
  818744:	1080201c 	xori	r2,r2,128
  818748:	10bfe004 	addi	r2,r2,-128
  81874c:	e0bffc15 	stw	r2,-16(fp)
  818750:	00000906 	br	818778 <match_file_record_to_name_ext+0x2ac>
  818754:	e0bff717 	ldw	r2,-36(fp)
  818758:	1007883a 	mov	r3,r2
  81875c:	e0bffb17 	ldw	r2,-20(fp)
  818760:	1885883a 	add	r2,r3,r2
  818764:	10800003 	ldbu	r2,0(r2)
  818768:	10803fcc 	andi	r2,r2,255
  81876c:	1080201c 	xori	r2,r2,128
  818770:	10bfe004 	addi	r2,r2,-128
  818774:	e0bffc15 	stw	r2,-16(fp)
  818778:	e0bffd17 	ldw	r2,-12(fp)
  81877c:	e0fffc17 	ldw	r3,-16(fp)
  818780:	10c00226 	beq	r2,r3,81878c <match_file_record_to_name_ext+0x2c0>
        {
            match = false;
  818784:	e03ff815 	stw	zero,-32(fp)
			break;
  818788:	00000606 	br	8187a4 <match_file_record_to_name_ext+0x2d8>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
  81878c:	e0bff717 	ldw	r2,-36(fp)
  818790:	10800044 	addi	r2,r2,1
  818794:	e0bff715 	stw	r2,-36(fp)
  818798:	e0bff717 	ldw	r2,-36(fp)
  81879c:	108000d0 	cmplti	r2,r2,3
  8187a0:	103fa91e 	bne	r2,zero,818648 <match_file_record_to_name_ext+0x17c>
        {
            match = false;
			break;
        }
    }
	return match;
  8187a4:	e0bff817 	ldw	r2,-32(fp)
}
  8187a8:	e037883a 	mov	sp,fp
  8187ac:	df000017 	ldw	fp,0(sp)
  8187b0:	dec00104 	addi	sp,sp,4
  8187b4:	f800283a 	ret

008187b8 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  8187b8:	deffe604 	addi	sp,sp,-104
  8187bc:	dfc01915 	stw	ra,100(sp)
  8187c0:	df001815 	stw	fp,96(sp)
  8187c4:	df001804 	addi	fp,sp,96
  8187c8:	e13ffc15 	stw	r4,-16(fp)
  8187cc:	e17ffd15 	stw	r5,-12(fp)
  8187d0:	e1bffe15 	stw	r6,-8(fp)
    bool result = false;
  8187d4:	e03ff715 	stw	zero,-36(fp)
    int home_dir_cluster = 0;
  8187d8:	e03ff615 	stw	zero,-40(fp)
    int location, index;
    int start_location = 0;
  8187dc:	e03ff315 	stw	zero,-52(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
  8187e0:	e13ffc17 	ldw	r4,-16(fp)
  8187e4:	081840c0 	call	81840c <get_dir_divider_location>
  8187e8:	e0bff515 	stw	r2,-44(fp)
    while (location > 0)
  8187ec:	00012206 	br	818c78 <get_home_directory_cluster_for_file+0x4c0>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  8187f0:	00800804 	movi	r2,32
  8187f4:	e0bff805 	stb	r2,-32(fp)
  8187f8:	00800804 	movi	r2,32
  8187fc:	e0bff845 	stb	r2,-31(fp)
  818800:	00800804 	movi	r2,32
  818804:	e0bff885 	stb	r2,-30(fp)
  818808:	00800804 	movi	r2,32
  81880c:	e0bff8c5 	stb	r2,-29(fp)
  818810:	00800804 	movi	r2,32
  818814:	e0bff905 	stb	r2,-28(fp)
  818818:	00800804 	movi	r2,32
  81881c:	e0bff945 	stb	r2,-27(fp)
  818820:	00800804 	movi	r2,32
  818824:	e0bff985 	stb	r2,-26(fp)
  818828:	00800804 	movi	r2,32
  81882c:	e0bff9c5 	stb	r2,-25(fp)
        char extension[3] = { ' ', ' ', ' ' };
  818830:	00800804 	movi	r2,32
  818834:	e0bffa05 	stb	r2,-24(fp)
  818838:	00800804 	movi	r2,32
  81883c:	e0bffa45 	stb	r2,-23(fp)
  818840:	00800804 	movi	r2,32
  818844:	e0bffa85 	stb	r2,-22(fp)
        int ext_index = -1;
  818848:	00bfffc4 	movi	r2,-1
  81884c:	e0bff215 	stw	r2,-56(fp)
        int new_cluster = home_dir_cluster;
  818850:	e0bff617 	ldw	r2,-40(fp)
  818854:	e0bff115 	stw	r2,-60(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
  818858:	e03ff415 	stw	zero,-48(fp)
  81885c:	00002e06 	br	818918 <get_home_directory_cluster_for_file+0x160>
        {
            if (file_name[index+start_location] == '.')
  818860:	e0fff417 	ldw	r3,-48(fp)
  818864:	e0bff317 	ldw	r2,-52(fp)
  818868:	1885883a 	add	r2,r3,r2
  81886c:	1007883a 	mov	r3,r2
  818870:	e0bffc17 	ldw	r2,-16(fp)
  818874:	1885883a 	add	r2,r3,r2
  818878:	10800003 	ldbu	r2,0(r2)
  81887c:	10803fcc 	andi	r2,r2,255
  818880:	1080201c 	xori	r2,r2,128
  818884:	10bfe004 	addi	r2,r2,-128
  818888:	10800b98 	cmpnei	r2,r2,46
  81888c:	1000031e 	bne	r2,zero,81889c <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
  818890:	e0bff417 	ldw	r2,-48(fp)
  818894:	e0bff215 	stw	r2,-56(fp)
  818898:	00001c06 	br	81890c <get_home_directory_cluster_for_file+0x154>
            }
            else if (ext_index < 0)
  81889c:	e0bff217 	ldw	r2,-56(fp)
  8188a0:	1004403a 	cmpge	r2,r2,zero
  8188a4:	10000c1e 	bne	r2,zero,8188d8 <get_home_directory_cluster_for_file+0x120>
            {
                name[index] = file_name[index+start_location];
  8188a8:	e13ff417 	ldw	r4,-48(fp)
  8188ac:	e0fff417 	ldw	r3,-48(fp)
  8188b0:	e0bff317 	ldw	r2,-52(fp)
  8188b4:	1885883a 	add	r2,r3,r2
  8188b8:	1007883a 	mov	r3,r2
  8188bc:	e0bffc17 	ldw	r2,-16(fp)
  8188c0:	1885883a 	add	r2,r3,r2
  8188c4:	10c00003 	ldbu	r3,0(r2)
  8188c8:	e0bff804 	addi	r2,fp,-32
  8188cc:	1105883a 	add	r2,r2,r4
  8188d0:	10c00005 	stb	r3,0(r2)
  8188d4:	00000d06 	br	81890c <get_home_directory_cluster_for_file+0x154>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
  8188d8:	e0fff417 	ldw	r3,-48(fp)
  8188dc:	e0bff217 	ldw	r2,-56(fp)
  8188e0:	1889c83a 	sub	r4,r3,r2
  8188e4:	e0fff417 	ldw	r3,-48(fp)
  8188e8:	e0bff317 	ldw	r2,-52(fp)
  8188ec:	1885883a 	add	r2,r3,r2
  8188f0:	1007883a 	mov	r3,r2
  8188f4:	e0bffc17 	ldw	r2,-16(fp)
  8188f8:	1885883a 	add	r2,r3,r2
  8188fc:	10c00003 	ldbu	r3,0(r2)
  818900:	e0bffa04 	addi	r2,fp,-24
  818904:	1105883a 	add	r2,r2,r4
  818908:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
  81890c:	e0bff417 	ldw	r2,-48(fp)
  818910:	10800044 	addi	r2,r2,1
  818914:	e0bff415 	stw	r2,-48(fp)
  818918:	e0fff417 	ldw	r3,-48(fp)
  81891c:	e0bff517 	ldw	r2,-44(fp)
  818920:	18bfcf16 	blt	r3,r2,818860 <get_home_directory_cluster_for_file+0xa8>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
  818924:	e0bff617 	ldw	r2,-40(fp)
  818928:	1004c03a 	cmpne	r2,r2,zero
  81892c:	1000551e 	bne	r2,zero,818a84 <get_home_directory_cluster_for_file+0x2cc>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  818930:	008020f4 	movhi	r2,131
  818934:	109ab304 	addi	r2,r2,27340
  818938:	1080050b 	ldhu	r2,20(r2)
  81893c:	10bfffcc 	andi	r2,r2,65535
  818940:	1008917a 	slli	r4,r2,5
  818944:	008020f4 	movhi	r2,131
  818948:	109ab304 	addi	r2,r2,27340
  81894c:	1080030b 	ldhu	r2,12(r2)
  818950:	117fffcc 	andi	r5,r2,65535
  818954:	080c3980 	call	80c398 <__divsi3>
  818958:	e0bff015 	stw	r2,-64(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  81895c:	e03fef15 	stw	zero,-68(fp)
  818960:	00003806 	br	818a44 <get_home_directory_cluster_for_file+0x28c>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
  818964:	008020f4 	movhi	r2,131
  818968:	109ab304 	addi	r2,r2,27340
  81896c:	10c01317 	ldw	r3,76(r2)
  818970:	e0bfef17 	ldw	r2,-68(fp)
  818974:	1885883a 	add	r2,r3,r2
  818978:	1009883a 	mov	r4,r2
  81897c:	d1607017 	ldw	r5,-32320(gp)
  818980:	0816fe80 	call	816fe8 <Read_Sector_Data>
  818984:	1005003a 	cmpeq	r2,r2,zero
  818988:	1000311e 	bne	r2,zero,818a50 <get_home_directory_cluster_for_file+0x298>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  81898c:	e03fee15 	stw	zero,-72(fp)
  818990:	00002306 	br	818a20 <get_home_directory_cluster_for_file+0x268>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  818994:	e0bfee17 	ldw	r2,-72(fp)
  818998:	1008917a 	slli	r4,r2,5
  81899c:	e1ffef17 	ldw	r7,-68(fp)
  8189a0:	e17ffe17 	ldw	r5,-8(fp)
  8189a4:	000d883a 	mov	r6,zero
  8189a8:	08174300 	call	817430 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  8189ac:	e0bffe17 	ldw	r2,-8(fp)
  8189b0:	10800003 	ldbu	r2,0(r2)
  8189b4:	10803fcc 	andi	r2,r2,255
  8189b8:	10803960 	cmpeqi	r2,r2,229
  8189bc:	1000151e 	bne	r2,zero,818a14 <get_home_directory_cluster_for_file+0x25c>
  8189c0:	e0bffe17 	ldw	r2,-8(fp)
  8189c4:	10800003 	ldbu	r2,0(r2)
  8189c8:	10803fcc 	andi	r2,r2,255
  8189cc:	1005003a 	cmpeq	r2,r2,zero
  8189d0:	1000101e 	bne	r2,zero,818a14 <get_home_directory_cluster_for_file+0x25c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
  8189d4:	e17ff804 	addi	r5,fp,-32
  8189d8:	e1bffa04 	addi	r6,fp,-24
  8189dc:	e13ffe17 	ldw	r4,-8(fp)
  8189e0:	08184cc0 	call	8184cc <match_file_record_to_name_ext>
  8189e4:	e0bfed15 	stw	r2,-76(fp)
                            if (match)
  8189e8:	e0bfed17 	ldw	r2,-76(fp)
  8189ec:	1005003a 	cmpeq	r2,r2,zero
  8189f0:	1000081e 	bne	r2,zero,818a14 <get_home_directory_cluster_for_file+0x25c>
                            {
                                new_cluster = file_record->start_cluster_index;
  8189f4:	e0bffe17 	ldw	r2,-8(fp)
  8189f8:	1080058b 	ldhu	r2,22(r2)
  8189fc:	10bfffcc 	andi	r2,r2,65535
  818a00:	e0bff115 	stw	r2,-60(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  818a04:	e0fffe17 	ldw	r3,-8(fp)
  818a08:	00800044 	movi	r2,1
  818a0c:	18800a15 	stw	r2,40(r3)
                                break;
  818a10:	00000606 	br	818a2c <get_home_directory_cluster_for_file+0x274>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  818a14:	e0bfee17 	ldw	r2,-72(fp)
  818a18:	10800044 	addi	r2,r2,1
  818a1c:	e0bfee15 	stw	r2,-72(fp)
  818a20:	e0bfee17 	ldw	r2,-72(fp)
  818a24:	10800410 	cmplti	r2,r2,16
  818a28:	103fda1e 	bne	r2,zero,818994 <get_home_directory_cluster_for_file+0x1dc>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
  818a2c:	e0fff117 	ldw	r3,-60(fp)
  818a30:	e0bff617 	ldw	r2,-40(fp)
  818a34:	1880061e 	bne	r3,r2,818a50 <get_home_directory_cluster_for_file+0x298>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  818a38:	e0bfef17 	ldw	r2,-68(fp)
  818a3c:	10800044 	addi	r2,r2,1
  818a40:	e0bfef15 	stw	r2,-68(fp)
  818a44:	e0ffef17 	ldw	r3,-68(fp)
  818a48:	e0bff017 	ldw	r2,-64(fp)
  818a4c:	18bfc516 	blt	r3,r2,818964 <get_home_directory_cluster_for_file+0x1ac>
                if (new_cluster != home_dir_cluster)
                {
                    break;
                }
            }
            if (new_cluster != home_dir_cluster)
  818a50:	e0fff117 	ldw	r3,-60(fp)
  818a54:	e0bff617 	ldw	r2,-40(fp)
  818a58:	18800826 	beq	r3,r2,818a7c <get_home_directory_cluster_for_file+0x2c4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
  818a5c:	e0bff117 	ldw	r2,-60(fp)
  818a60:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
  818a64:	e0fff317 	ldw	r3,-52(fp)
  818a68:	e0bff517 	ldw	r2,-44(fp)
  818a6c:	1885883a 	add	r2,r3,r2
  818a70:	10800044 	addi	r2,r2,1
  818a74:	e0bff315 	stw	r2,-52(fp)
  818a78:	00007406 	br	818c4c <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
  818a7c:	e03fff15 	stw	zero,-4(fp)
  818a80:	00008c06 	br	818cb4 <get_home_directory_cluster_for_file+0x4fc>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
  818a84:	e0bff617 	ldw	r2,-40(fp)
  818a88:	e0bfec15 	stw	r2,-80(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  818a8c:	e0bfec17 	ldw	r2,-80(fp)
  818a90:	10ffff84 	addi	r3,r2,-2
  818a94:	008020f4 	movhi	r2,131
  818a98:	109ab304 	addi	r2,r2,27340
  818a9c:	10800383 	ldbu	r2,14(r2)
  818aa0:	10803fcc 	andi	r2,r2,255
  818aa4:	1885383a 	mul	r2,r3,r2
  818aa8:	1007883a 	mov	r3,r2
  818aac:	008020f4 	movhi	r2,131
  818ab0:	109ab304 	addi	r2,r2,27340
  818ab4:	10801417 	ldw	r2,80(r2)
  818ab8:	1885883a 	add	r2,r3,r2
  818abc:	e0bfeb15 	stw	r2,-84(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  818ac0:	e03fea15 	stw	zero,-88(fp)
  818ac4:	00003206 	br	818b90 <get_home_directory_cluster_for_file+0x3d8>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  818ac8:	e0ffea17 	ldw	r3,-88(fp)
  818acc:	e0bfeb17 	ldw	r2,-84(fp)
  818ad0:	1889883a 	add	r4,r3,r2
  818ad4:	d1607017 	ldw	r5,-32320(gp)
  818ad8:	0816fe80 	call	816fe8 <Read_Sector_Data>
  818adc:	1005003a 	cmpeq	r2,r2,zero
  818ae0:	1000311e 	bne	r2,zero,818ba8 <get_home_directory_cluster_for_file+0x3f0>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
  818ae4:	e03fe915 	stw	zero,-92(fp)
  818ae8:	00002006 	br	818b6c <get_home_directory_cluster_for_file+0x3b4>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  818aec:	e0bfe917 	ldw	r2,-92(fp)
  818af0:	1008917a 	slli	r4,r2,5
  818af4:	e1bfec17 	ldw	r6,-80(fp)
  818af8:	e1ffea17 	ldw	r7,-88(fp)
  818afc:	e17ffe17 	ldw	r5,-8(fp)
  818b00:	08174300 	call	817430 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  818b04:	e0bffe17 	ldw	r2,-8(fp)
  818b08:	10800003 	ldbu	r2,0(r2)
  818b0c:	10803fcc 	andi	r2,r2,255
  818b10:	10803960 	cmpeqi	r2,r2,229
  818b14:	1000121e 	bne	r2,zero,818b60 <get_home_directory_cluster_for_file+0x3a8>
  818b18:	e0bffe17 	ldw	r2,-8(fp)
  818b1c:	10800003 	ldbu	r2,0(r2)
  818b20:	10803fcc 	andi	r2,r2,255
  818b24:	1005003a 	cmpeq	r2,r2,zero
  818b28:	10000d1e 	bne	r2,zero,818b60 <get_home_directory_cluster_for_file+0x3a8>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
  818b2c:	e17ff804 	addi	r5,fp,-32
  818b30:	e1bffa04 	addi	r6,fp,-24
  818b34:	e13ffe17 	ldw	r4,-8(fp)
  818b38:	08184cc0 	call	8184cc <match_file_record_to_name_ext>
  818b3c:	e0bfe815 	stw	r2,-96(fp)
                                if (match)
  818b40:	e0bfe817 	ldw	r2,-96(fp)
  818b44:	1005003a 	cmpeq	r2,r2,zero
  818b48:	1000051e 	bne	r2,zero,818b60 <get_home_directory_cluster_for_file+0x3a8>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
  818b4c:	e0bffe17 	ldw	r2,-8(fp)
  818b50:	1080058b 	ldhu	r2,22(r2)
  818b54:	10bfffcc 	andi	r2,r2,65535
  818b58:	e0bff115 	stw	r2,-60(fp)
                                    break;
  818b5c:	00000606 	br	818b78 <get_home_directory_cluster_for_file+0x3c0>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
  818b60:	e0bfe917 	ldw	r2,-92(fp)
  818b64:	10800044 	addi	r2,r2,1
  818b68:	e0bfe915 	stw	r2,-92(fp)
  818b6c:	e0bfe917 	ldw	r2,-92(fp)
  818b70:	10800410 	cmplti	r2,r2,16
  818b74:	103fdd1e 	bne	r2,zero,818aec <get_home_directory_cluster_for_file+0x334>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
  818b78:	e0fff117 	ldw	r3,-60(fp)
  818b7c:	e0bff617 	ldw	r2,-40(fp)
  818b80:	1880091e 	bne	r3,r2,818ba8 <get_home_directory_cluster_for_file+0x3f0>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  818b84:	e0bfea17 	ldw	r2,-88(fp)
  818b88:	10800044 	addi	r2,r2,1
  818b8c:	e0bfea15 	stw	r2,-88(fp)
  818b90:	008020f4 	movhi	r2,131
  818b94:	109ab304 	addi	r2,r2,27340
  818b98:	10800383 	ldbu	r2,14(r2)
  818b9c:	10c03fcc 	andi	r3,r2,255
  818ba0:	e0bfea17 	ldw	r2,-88(fp)
  818ba4:	10ffc816 	blt	r2,r3,818ac8 <get_home_directory_cluster_for_file+0x310>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
  818ba8:	e0fff117 	ldw	r3,-60(fp)
  818bac:	e0bff617 	ldw	r2,-40(fp)
  818bb0:	1880131e 	bne	r3,r2,818c00 <get_home_directory_cluster_for_file+0x448>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
  818bb4:	e13ff117 	ldw	r4,-60(fp)
  818bb8:	e17ffb04 	addi	r5,fp,-20
  818bbc:	08170e40 	call	8170e4 <get_cluster_flag>
  818bc0:	1005003a 	cmpeq	r2,r2,zero
  818bc4:	10000c1e 	bne	r2,zero,818bf8 <get_home_directory_cluster_for_file+0x440>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  818bc8:	e0bffb0b 	ldhu	r2,-20(fp)
  818bcc:	10bfffcc 	andi	r2,r2,65535
  818bd0:	10fffe0c 	andi	r3,r2,65528
  818bd4:	00bffe14 	movui	r2,65528
  818bd8:	1880021e 	bne	r3,r2,818be4 <get_home_directory_cluster_for_file+0x42c>
						{
							return false;
  818bdc:	e03fff15 	stw	zero,-4(fp)
  818be0:	00003406 	br	818cb4 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
  818be4:	e0bffb0b 	ldhu	r2,-20(fp)
  818be8:	10bfffcc 	andi	r2,r2,65535
  818bec:	10bffe0c 	andi	r2,r2,65528
  818bf0:	e0bff115 	stw	r2,-60(fp)
  818bf4:	00000206 	br	818c00 <get_home_directory_cluster_for_file+0x448>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
  818bf8:	e03fff15 	stw	zero,-4(fp)
  818bfc:	00002d06 	br	818cb4 <get_home_directory_cluster_for_file+0x4fc>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
  818c00:	e0ffec17 	ldw	r3,-80(fp)
  818c04:	00bffdd4 	movui	r2,65527
  818c08:	10c00316 	blt	r2,r3,818c18 <get_home_directory_cluster_for_file+0x460>
  818c0c:	e0fff117 	ldw	r3,-60(fp)
  818c10:	e0bff617 	ldw	r2,-40(fp)
  818c14:	18bf9d26 	beq	r3,r2,818a8c <get_home_directory_cluster_for_file+0x2d4>
            if (new_cluster != home_dir_cluster)
  818c18:	e0fff117 	ldw	r3,-60(fp)
  818c1c:	e0bff617 	ldw	r2,-40(fp)
  818c20:	18800826 	beq	r3,r2,818c44 <get_home_directory_cluster_for_file+0x48c>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
  818c24:	e0bff117 	ldw	r2,-60(fp)
  818c28:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
  818c2c:	e0fff317 	ldw	r3,-52(fp)
  818c30:	e0bff517 	ldw	r2,-44(fp)
  818c34:	1885883a 	add	r2,r3,r2
  818c38:	10800044 	addi	r2,r2,1
  818c3c:	e0bff315 	stw	r2,-52(fp)
  818c40:	00000206 	br	818c4c <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
  818c44:	e03fff15 	stw	zero,-4(fp)
  818c48:	00001a06 	br	818cb4 <get_home_directory_cluster_for_file+0x4fc>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
  818c4c:	e0bff317 	ldw	r2,-52(fp)
  818c50:	1007883a 	mov	r3,r2
  818c54:	e0bffc17 	ldw	r2,-16(fp)
  818c58:	1889883a 	add	r4,r3,r2
  818c5c:	081840c0 	call	81840c <get_dir_divider_location>
  818c60:	e0bff515 	stw	r2,-44(fp)
        if (location < 0)
  818c64:	e0bff517 	ldw	r2,-44(fp)
  818c68:	1004403a 	cmpge	r2,r2,zero
  818c6c:	1000021e 	bne	r2,zero,818c78 <get_home_directory_cluster_for_file+0x4c0>
        {
            // Directory has been located.
            result = true;
  818c70:	00800044 	movi	r2,1
  818c74:	e0bff715 	stw	r2,-36(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
  818c78:	e0bff517 	ldw	r2,-44(fp)
  818c7c:	10800048 	cmpgei	r2,r2,1
  818c80:	103edb1e 	bne	r2,zero,8187f0 <get_home_directory_cluster_for_file+0x38>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
  818c84:	e0fffd17 	ldw	r3,-12(fp)
  818c88:	e0bff617 	ldw	r2,-40(fp)
  818c8c:	18800015 	stw	r2,0(r3)
    if (home_dir_cluster == 0)
  818c90:	e0bff617 	ldw	r2,-40(fp)
  818c94:	1004c03a 	cmpne	r2,r2,zero
  818c98:	1000041e 	bne	r2,zero,818cac <get_home_directory_cluster_for_file+0x4f4>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
  818c9c:	e0bffe17 	ldw	r2,-8(fp)
  818ca0:	10000a15 	stw	zero,40(r2)
		result = true;
  818ca4:	00800044 	movi	r2,1
  818ca8:	e0bff715 	stw	r2,-36(fp)
    }
    return result;
  818cac:	e0bff717 	ldw	r2,-36(fp)
  818cb0:	e0bfff15 	stw	r2,-4(fp)
  818cb4:	e0bfff17 	ldw	r2,-4(fp)
}
  818cb8:	e037883a 	mov	sp,fp
  818cbc:	dfc00117 	ldw	ra,4(sp)
  818cc0:	df000017 	ldw	fp,0(sp)
  818cc4:	dec00204 	addi	sp,sp,8
  818cc8:	f800283a 	ret

00818ccc <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  818ccc:	deffe704 	addi	sp,sp,-100
  818cd0:	dfc01815 	stw	ra,96(sp)
  818cd4:	df001715 	stw	fp,92(sp)
  818cd8:	df001704 	addi	fp,sp,92
  818cdc:	e13ffc15 	stw	r4,-16(fp)
  818ce0:	e17ffd15 	stw	r5,-12(fp)
  818ce4:	e1bffe15 	stw	r6,-8(fp)
    int location = get_dir_divider_location( file_name );
  818ce8:	e13ffd17 	ldw	r4,-12(fp)
  818cec:	081840c0 	call	81840c <get_dir_divider_location>
  818cf0:	e0bff715 	stw	r2,-36(fp)
    int last_dir_separator = 0;
  818cf4:	e03ff615 	stw	zero,-40(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  818cf8:	00800804 	movi	r2,32
  818cfc:	e0bff805 	stb	r2,-32(fp)
  818d00:	00800804 	movi	r2,32
  818d04:	e0bff845 	stb	r2,-31(fp)
  818d08:	00800804 	movi	r2,32
  818d0c:	e0bff885 	stb	r2,-30(fp)
  818d10:	00800804 	movi	r2,32
  818d14:	e0bff8c5 	stb	r2,-29(fp)
  818d18:	00800804 	movi	r2,32
  818d1c:	e0bff905 	stb	r2,-28(fp)
  818d20:	00800804 	movi	r2,32
  818d24:	e0bff945 	stb	r2,-27(fp)
  818d28:	00800804 	movi	r2,32
  818d2c:	e0bff985 	stb	r2,-26(fp)
  818d30:	00800804 	movi	r2,32
  818d34:	e0bff9c5 	stb	r2,-25(fp)
    char extension[3] = { ' ', ' ', ' ' };
  818d38:	00800804 	movi	r2,32
  818d3c:	e0bffa05 	stb	r2,-24(fp)
  818d40:	00800804 	movi	r2,32
  818d44:	e0bffa45 	stb	r2,-23(fp)
  818d48:	00800804 	movi	r2,32
  818d4c:	e0bffa85 	stb	r2,-22(fp)
    int ext_index = -1;
  818d50:	00bfffc4 	movi	r2,-1
  818d54:	e0bff515 	stw	r2,-44(fp)
    int cluster = directory_start_cluster;
  818d58:	e0bffc17 	ldw	r2,-16(fp)
  818d5c:	e0bff415 	stw	r2,-48(fp)
    int index;
	int length = strlen(file_name);
  818d60:	e13ffd17 	ldw	r4,-12(fp)
  818d64:	08044400 	call	804440 <strlen>
  818d68:	e0bff215 	stw	r2,-56(fp)
    bool result = false;
  818d6c:	e03ff115 	stw	zero,-60(fp)
    
    // Skip through all directory separators.
    while (location > 0)
  818d70:	00000b06 	br	818da0 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
  818d74:	e0fff617 	ldw	r3,-40(fp)
  818d78:	e0bff717 	ldw	r2,-36(fp)
  818d7c:	1885883a 	add	r2,r3,r2
  818d80:	10800044 	addi	r2,r2,1
  818d84:	e0bff615 	stw	r2,-40(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
  818d88:	e0bff617 	ldw	r2,-40(fp)
  818d8c:	1007883a 	mov	r3,r2
  818d90:	e0bffd17 	ldw	r2,-12(fp)
  818d94:	1889883a 	add	r4,r3,r2
  818d98:	081840c0 	call	81840c <get_dir_divider_location>
  818d9c:	e0bff715 	stw	r2,-36(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
  818da0:	e0bff717 	ldw	r2,-36(fp)
  818da4:	10800048 	cmpgei	r2,r2,1
  818da8:	103ff21e 	bne	r2,zero,818d74 <find_file_in_directory+0xa8>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  818dac:	e0bff617 	ldw	r2,-40(fp)
  818db0:	e0bff315 	stw	r2,-52(fp)
  818db4:	00002b06 	br	818e64 <find_file_in_directory+0x198>
    {
        if (file_name[index] == '.')
  818db8:	e0bff317 	ldw	r2,-52(fp)
  818dbc:	1007883a 	mov	r3,r2
  818dc0:	e0bffd17 	ldw	r2,-12(fp)
  818dc4:	1885883a 	add	r2,r3,r2
  818dc8:	10800003 	ldbu	r2,0(r2)
  818dcc:	10803fcc 	andi	r2,r2,255
  818dd0:	1080201c 	xori	r2,r2,128
  818dd4:	10bfe004 	addi	r2,r2,-128
  818dd8:	10800b98 	cmpnei	r2,r2,46
  818ddc:	1000031e 	bne	r2,zero,818dec <find_file_in_directory+0x120>
        {
            ext_index = index;
  818de0:	e0bff317 	ldw	r2,-52(fp)
  818de4:	e0bff515 	stw	r2,-44(fp)
  818de8:	00001b06 	br	818e58 <find_file_in_directory+0x18c>
        }
        else if (ext_index < 0)
  818dec:	e0bff517 	ldw	r2,-44(fp)
  818df0:	1004403a 	cmpge	r2,r2,zero
  818df4:	10000c1e 	bne	r2,zero,818e28 <find_file_in_directory+0x15c>
        {
            name[index-last_dir_separator] = file_name[index];
  818df8:	e0fff317 	ldw	r3,-52(fp)
  818dfc:	e0bff617 	ldw	r2,-40(fp)
  818e00:	1889c83a 	sub	r4,r3,r2
  818e04:	e0bff317 	ldw	r2,-52(fp)
  818e08:	1007883a 	mov	r3,r2
  818e0c:	e0bffd17 	ldw	r2,-12(fp)
  818e10:	1885883a 	add	r2,r3,r2
  818e14:	10c00003 	ldbu	r3,0(r2)
  818e18:	e0bff804 	addi	r2,fp,-32
  818e1c:	1105883a 	add	r2,r2,r4
  818e20:	10c00005 	stb	r3,0(r2)
  818e24:	00000c06 	br	818e58 <find_file_in_directory+0x18c>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
  818e28:	e0fff317 	ldw	r3,-52(fp)
  818e2c:	e0bff517 	ldw	r2,-44(fp)
  818e30:	1885c83a 	sub	r2,r3,r2
  818e34:	113fffc4 	addi	r4,r2,-1
  818e38:	e0bff317 	ldw	r2,-52(fp)
  818e3c:	1007883a 	mov	r3,r2
  818e40:	e0bffd17 	ldw	r2,-12(fp)
  818e44:	1885883a 	add	r2,r3,r2
  818e48:	10c00003 	ldbu	r3,0(r2)
  818e4c:	e0bffa04 	addi	r2,fp,-24
  818e50:	1105883a 	add	r2,r2,r4
  818e54:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  818e58:	e0bff317 	ldw	r2,-52(fp)
  818e5c:	10800044 	addi	r2,r2,1
  818e60:	e0bff315 	stw	r2,-52(fp)
  818e64:	e0fff317 	ldw	r3,-52(fp)
  818e68:	e0bff217 	ldw	r2,-56(fp)
  818e6c:	18bfd216 	blt	r3,r2,818db8 <find_file_in_directory+0xec>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
  818e70:	e0bffc17 	ldw	r2,-16(fp)
  818e74:	1004c03a 	cmpne	r2,r2,zero
  818e78:	1000441e 	bne	r2,zero,818f8c <find_file_in_directory+0x2c0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  818e7c:	008020f4 	movhi	r2,131
  818e80:	109ab304 	addi	r2,r2,27340
  818e84:	1080050b 	ldhu	r2,20(r2)
  818e88:	10bfffcc 	andi	r2,r2,65535
  818e8c:	1008917a 	slli	r4,r2,5
  818e90:	008020f4 	movhi	r2,131
  818e94:	109ab304 	addi	r2,r2,27340
  818e98:	1080030b 	ldhu	r2,12(r2)
  818e9c:	117fffcc 	andi	r5,r2,65535
  818ea0:	080c3980 	call	80c398 <__divsi3>
  818ea4:	e0bff015 	stw	r2,-64(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  818ea8:	e03fef15 	stw	zero,-68(fp)
  818eac:	00003306 	br	818f7c <find_file_in_directory+0x2b0>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  818eb0:	008020f4 	movhi	r2,131
  818eb4:	109ab304 	addi	r2,r2,27340
  818eb8:	10c01317 	ldw	r3,76(r2)
  818ebc:	e0bfef17 	ldw	r2,-68(fp)
  818ec0:	1885883a 	add	r2,r3,r2
  818ec4:	1009883a 	mov	r4,r2
  818ec8:	d1607017 	ldw	r5,-32320(gp)
  818ecc:	0816fe80 	call	816fe8 <Read_Sector_Data>
  818ed0:	1005003a 	cmpeq	r2,r2,zero
  818ed4:	10008e1e 	bne	r2,zero,819110 <find_file_in_directory+0x444>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  818ed8:	e03fee15 	stw	zero,-72(fp)
  818edc:	00001e06 	br	818f58 <find_file_in_directory+0x28c>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  818ee0:	e0bfee17 	ldw	r2,-72(fp)
  818ee4:	1008917a 	slli	r4,r2,5
  818ee8:	e1ffef17 	ldw	r7,-68(fp)
  818eec:	e17ffe17 	ldw	r5,-8(fp)
  818ef0:	000d883a 	mov	r6,zero
  818ef4:	08174300 	call	817430 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  818ef8:	e0bffe17 	ldw	r2,-8(fp)
  818efc:	10800003 	ldbu	r2,0(r2)
  818f00:	10803fcc 	andi	r2,r2,255
  818f04:	10803960 	cmpeqi	r2,r2,229
  818f08:	1000101e 	bne	r2,zero,818f4c <find_file_in_directory+0x280>
  818f0c:	e0bffe17 	ldw	r2,-8(fp)
  818f10:	10800003 	ldbu	r2,0(r2)
  818f14:	10803fcc 	andi	r2,r2,255
  818f18:	1005003a 	cmpeq	r2,r2,zero
  818f1c:	10000b1e 	bne	r2,zero,818f4c <find_file_in_directory+0x280>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
  818f20:	e17ff804 	addi	r5,fp,-32
  818f24:	e1bffa04 	addi	r6,fp,-24
  818f28:	e13ffe17 	ldw	r4,-8(fp)
  818f2c:	08184cc0 	call	8184cc <match_file_record_to_name_ext>
  818f30:	e0bfed15 	stw	r2,-76(fp)

                        if (match)
  818f34:	e0bfed17 	ldw	r2,-76(fp)
  818f38:	1005003a 	cmpeq	r2,r2,zero
  818f3c:	1000031e 	bne	r2,zero,818f4c <find_file_in_directory+0x280>
                        {
                            result = true;
  818f40:	00800044 	movi	r2,1
  818f44:	e0bff115 	stw	r2,-60(fp)
                            break;
  818f48:	00000606 	br	818f64 <find_file_in_directory+0x298>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  818f4c:	e0bfee17 	ldw	r2,-72(fp)
  818f50:	10800044 	addi	r2,r2,1
  818f54:	e0bfee15 	stw	r2,-72(fp)
  818f58:	e0bfee17 	ldw	r2,-72(fp)
  818f5c:	10800410 	cmplti	r2,r2,16
  818f60:	103fdf1e 	bne	r2,zero,818ee0 <find_file_in_directory+0x214>
            }
            else
            {
                break;
            }
            if (result)
  818f64:	e0bff117 	ldw	r2,-60(fp)
  818f68:	1004c03a 	cmpne	r2,r2,zero
  818f6c:	1000681e 	bne	r2,zero,819110 <find_file_in_directory+0x444>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  818f70:	e0bfef17 	ldw	r2,-68(fp)
  818f74:	10800044 	addi	r2,r2,1
  818f78:	e0bfef15 	stw	r2,-68(fp)
  818f7c:	e0ffef17 	ldw	r3,-68(fp)
  818f80:	e0bff017 	ldw	r2,-64(fp)
  818f84:	18bfca16 	blt	r3,r2,818eb0 <find_file_in_directory+0x1e4>
  818f88:	00006106 	br	819110 <find_file_in_directory+0x444>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  818f8c:	e0bff417 	ldw	r2,-48(fp)
  818f90:	10ffff84 	addi	r3,r2,-2
  818f94:	008020f4 	movhi	r2,131
  818f98:	109ab304 	addi	r2,r2,27340
  818f9c:	10800383 	ldbu	r2,14(r2)
  818fa0:	10803fcc 	andi	r2,r2,255
  818fa4:	1885383a 	mul	r2,r3,r2
  818fa8:	1007883a 	mov	r3,r2
  818fac:	008020f4 	movhi	r2,131
  818fb0:	109ab304 	addi	r2,r2,27340
  818fb4:	10801417 	ldw	r2,80(r2)
  818fb8:	1885883a 	add	r2,r3,r2
  818fbc:	e0bfec15 	stw	r2,-80(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  818fc0:	e03feb15 	stw	zero,-84(fp)
  818fc4:	00003006 	br	819088 <find_file_in_directory+0x3bc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  818fc8:	e0ffeb17 	ldw	r3,-84(fp)
  818fcc:	e0bfec17 	ldw	r2,-80(fp)
  818fd0:	1889883a 	add	r4,r3,r2
  818fd4:	d1607017 	ldw	r5,-32320(gp)
  818fd8:	0816fe80 	call	816fe8 <Read_Sector_Data>
  818fdc:	1005003a 	cmpeq	r2,r2,zero
  818fe0:	10002f1e 	bne	r2,zero,8190a0 <find_file_in_directory+0x3d4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  818fe4:	e03fea15 	stw	zero,-88(fp)
  818fe8:	00001e06 	br	819064 <find_file_in_directory+0x398>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  818fec:	e0bfea17 	ldw	r2,-88(fp)
  818ff0:	1008917a 	slli	r4,r2,5
  818ff4:	e1bff417 	ldw	r6,-48(fp)
  818ff8:	e1ffeb17 	ldw	r7,-84(fp)
  818ffc:	e17ffe17 	ldw	r5,-8(fp)
  819000:	08174300 	call	817430 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  819004:	e0bffe17 	ldw	r2,-8(fp)
  819008:	10800003 	ldbu	r2,0(r2)
  81900c:	10803fcc 	andi	r2,r2,255
  819010:	10803960 	cmpeqi	r2,r2,229
  819014:	1000101e 	bne	r2,zero,819058 <find_file_in_directory+0x38c>
  819018:	e0bffe17 	ldw	r2,-8(fp)
  81901c:	10800003 	ldbu	r2,0(r2)
  819020:	10803fcc 	andi	r2,r2,255
  819024:	1005003a 	cmpeq	r2,r2,zero
  819028:	10000b1e 	bne	r2,zero,819058 <find_file_in_directory+0x38c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
  81902c:	e17ff804 	addi	r5,fp,-32
  819030:	e1bffa04 	addi	r6,fp,-24
  819034:	e13ffe17 	ldw	r4,-8(fp)
  819038:	08184cc0 	call	8184cc <match_file_record_to_name_ext>
  81903c:	e0bfe915 	stw	r2,-92(fp)

                            if (match)
  819040:	e0bfe917 	ldw	r2,-92(fp)
  819044:	1005003a 	cmpeq	r2,r2,zero
  819048:	1000031e 	bne	r2,zero,819058 <find_file_in_directory+0x38c>
                            {                               
                                result = true;
  81904c:	00800044 	movi	r2,1
  819050:	e0bff115 	stw	r2,-60(fp)
                                break;
  819054:	00000606 	br	819070 <find_file_in_directory+0x3a4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
  819058:	e0bfea17 	ldw	r2,-88(fp)
  81905c:	10800044 	addi	r2,r2,1
  819060:	e0bfea15 	stw	r2,-88(fp)
  819064:	e0bfea17 	ldw	r2,-88(fp)
  819068:	10800410 	cmplti	r2,r2,16
  81906c:	103fdf1e 	bne	r2,zero,818fec <find_file_in_directory+0x320>
                }
                else
                {
                    break;
                }
                if (result)
  819070:	e0bff117 	ldw	r2,-60(fp)
  819074:	1004c03a 	cmpne	r2,r2,zero
  819078:	1000091e 	bne	r2,zero,8190a0 <find_file_in_directory+0x3d4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  81907c:	e0bfeb17 	ldw	r2,-84(fp)
  819080:	10800044 	addi	r2,r2,1
  819084:	e0bfeb15 	stw	r2,-84(fp)
  819088:	008020f4 	movhi	r2,131
  81908c:	109ab304 	addi	r2,r2,27340
  819090:	10800383 	ldbu	r2,14(r2)
  819094:	10c03fcc 	andi	r3,r2,255
  819098:	e0bfeb17 	ldw	r2,-84(fp)
  81909c:	10ffca16 	blt	r2,r3,818fc8 <find_file_in_directory+0x2fc>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
  8190a0:	e0bff117 	ldw	r2,-60(fp)
  8190a4:	1004c03a 	cmpne	r2,r2,zero
  8190a8:	1000131e 	bne	r2,zero,8190f8 <find_file_in_directory+0x42c>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
  8190ac:	e13ff417 	ldw	r4,-48(fp)
  8190b0:	e17ffb04 	addi	r5,fp,-20
  8190b4:	08170e40 	call	8170e4 <get_cluster_flag>
  8190b8:	1005003a 	cmpeq	r2,r2,zero
  8190bc:	10000c1e 	bne	r2,zero,8190f0 <find_file_in_directory+0x424>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  8190c0:	e0bffb0b 	ldhu	r2,-20(fp)
  8190c4:	10bfffcc 	andi	r2,r2,65535
  8190c8:	10fffe0c 	andi	r3,r2,65528
  8190cc:	00bffe14 	movui	r2,65528
  8190d0:	1880021e 	bne	r3,r2,8190dc <find_file_in_directory+0x410>
					{
						return false;
  8190d4:	e03fff15 	stw	zero,-4(fp)
  8190d8:	00000f06 	br	819118 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
  8190dc:	e0bffb0b 	ldhu	r2,-20(fp)
  8190e0:	10bfffcc 	andi	r2,r2,65535
  8190e4:	10bffe0c 	andi	r2,r2,65528
  8190e8:	e0bff415 	stw	r2,-48(fp)
  8190ec:	00000206 	br	8190f8 <find_file_in_directory+0x42c>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
  8190f0:	e03fff15 	stw	zero,-4(fp)
  8190f4:	00000806 	br	819118 <find_file_in_directory+0x44c>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
  8190f8:	e0fff417 	ldw	r3,-48(fp)
  8190fc:	00bffdd4 	movui	r2,65527
  819100:	10c00316 	blt	r2,r3,819110 <find_file_in_directory+0x444>
  819104:	e0bff117 	ldw	r2,-60(fp)
  819108:	1005003a 	cmpeq	r2,r2,zero
  81910c:	103f9f1e 	bne	r2,zero,818f8c <find_file_in_directory+0x2c0>
    }
    
    return result;   
  819110:	e0bff117 	ldw	r2,-60(fp)
  819114:	e0bfff15 	stw	r2,-4(fp)
  819118:	e0bfff17 	ldw	r2,-4(fp)
}
  81911c:	e037883a 	mov	sp,fp
  819120:	dfc00117 	ldw	ra,4(sp)
  819124:	df000017 	ldw	fp,0(sp)
  819128:	dec00204 	addi	sp,sp,8
  81912c:	f800283a 	ret

00819130 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  819130:	defff504 	addi	sp,sp,-44
  819134:	dfc00a15 	stw	ra,40(sp)
  819138:	df000915 	stw	fp,36(sp)
  81913c:	df000904 	addi	fp,sp,36
  819140:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  819144:	008020f4 	movhi	r2,131
  819148:	109ab304 	addi	r2,r2,27340
  81914c:	10801117 	ldw	r2,68(r2)
  819150:	e0bffe15 	stw	r2,-8(fp)
    unsigned int cluster_index = 2;
  819154:	00800084 	movi	r2,2
  819158:	e0bffd15 	stw	r2,-12(fp)
    short int cluster = -1;
  81915c:	00bfffc4 	movi	r2,-1
  819160:	e0bffc0d 	sth	r2,-16(fp)
    bool result = false;
  819164:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
  819168:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
  81916c:	008020f4 	movhi	r2,131
  819170:	109ab304 	addi	r2,r2,27340
  819174:	10801417 	ldw	r2,80(r2)
  819178:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
  81917c:	008020f4 	movhi	r2,131
  819180:	109ab304 	addi	r2,r2,27340
  819184:	1080058b 	ldhu	r2,22(r2)
  819188:	10bfffcc 	andi	r2,r2,65535
  81918c:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
  819190:	008020f4 	movhi	r2,131
  819194:	109ab304 	addi	r2,r2,27340
  819198:	10800917 	ldw	r2,36(r2)
  81919c:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32)
  8191a0:	e0fff817 	ldw	r3,-32(fp)
  8191a4:	e0bff717 	ldw	r2,-36(fp)
  8191a8:	10c00b2e 	bgeu	r2,r3,8191d8 <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
  8191ac:	e0fff817 	ldw	r3,-32(fp)
  8191b0:	e0bff917 	ldw	r2,-28(fp)
  8191b4:	1889c83a 	sub	r4,r3,r2
  8191b8:	008020f4 	movhi	r2,131
  8191bc:	109ab304 	addi	r2,r2,27340
  8191c0:	10800383 	ldbu	r2,14(r2)
  8191c4:	11403fcc 	andi	r5,r2,255
  8191c8:	080c4580 	call	80c458 <__udivsi3>
  8191cc:	10800044 	addi	r2,r2,1
  8191d0:	e0bffa15 	stw	r2,-24(fp)
  8191d4:	00002906 	br	81927c <find_first_empty_cluster+0x14c>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
  8191d8:	e0fff717 	ldw	r3,-36(fp)
  8191dc:	e0bff917 	ldw	r2,-28(fp)
  8191e0:	1889c83a 	sub	r4,r3,r2
  8191e4:	008020f4 	movhi	r2,131
  8191e8:	109ab304 	addi	r2,r2,27340
  8191ec:	10800383 	ldbu	r2,14(r2)
  8191f0:	11403fcc 	andi	r5,r2,255
  8191f4:	080c4580 	call	80c458 <__udivsi3>
  8191f8:	10800044 	addi	r2,r2,1
  8191fc:	e0bffa15 	stw	r2,-24(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  819200:	00001e06 	br	81927c <find_first_empty_cluster+0x14c>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  819204:	e13ffe17 	ldw	r4,-8(fp)
  819208:	d1607017 	ldw	r5,-32320(gp)
  81920c:	0816fe80 	call	816fe8 <Read_Sector_Data>
  819210:	1005003a 	cmpeq	r2,r2,zero
  819214:	1000131e 	bne	r2,zero,819264 <find_first_empty_cluster+0x134>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  819218:	d0a07217 	ldw	r2,-32312(gp)
  81921c:	10800a17 	ldw	r2,40(r2)
  819220:	1007883a 	mov	r3,r2
  819224:	e0bffd17 	ldw	r2,-12(fp)
  819228:	10803fcc 	andi	r2,r2,255
  81922c:	1085883a 	add	r2,r2,r2
  819230:	1885883a 	add	r2,r3,r2
  819234:	1080002b 	ldhuio	r2,0(r2)
  819238:	e0bffc0d 	sth	r2,-16(fp)
                if (cluster == 0)
  81923c:	e0bffc0f 	ldh	r2,-16(fp)
  819240:	1005003a 	cmpeq	r2,r2,zero
  819244:	1000071e 	bne	r2,zero,819264 <find_first_empty_cluster+0x134>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
  819248:	e0bffd17 	ldw	r2,-12(fp)
  81924c:	10800044 	addi	r2,r2,1
  819250:	e0bffd15 	stw	r2,-12(fp)
                } 
            } while ((cluster_index % 256) != 0);
  819254:	e0bffd17 	ldw	r2,-12(fp)
  819258:	10803fcc 	andi	r2,r2,255
  81925c:	1004c03a 	cmpne	r2,r2,zero
  819260:	103fed1e 	bne	r2,zero,819218 <find_first_empty_cluster+0xe8>
        }
        if (cluster == 0)
  819264:	e0bffc0f 	ldh	r2,-16(fp)
  819268:	1005003a 	cmpeq	r2,r2,zero
  81926c:	1000081e 	bne	r2,zero,819290 <find_first_empty_cluster+0x160>
        {
            break;
        }
        sector++;
  819270:	e0bffe17 	ldw	r2,-8(fp)
  819274:	10800044 	addi	r2,r2,1
  819278:	e0bffe15 	stw	r2,-8(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  81927c:	008020f4 	movhi	r2,131
  819280:	109ab304 	addi	r2,r2,27340
  819284:	10c01217 	ldw	r3,72(r2)
  819288:	e0bffe17 	ldw	r2,-8(fp)
  81928c:	18bfdd1e 	bne	r3,r2,819204 <find_first_empty_cluster+0xd4>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  819290:	e0bffc0f 	ldh	r2,-16(fp)
  819294:	1004c03a 	cmpne	r2,r2,zero
  819298:	1000081e 	bne	r2,zero,8192bc <find_first_empty_cluster+0x18c>
  81929c:	e0fffc0f 	ldh	r3,-16(fp)
  8192a0:	e0bffa17 	ldw	r2,-24(fp)
  8192a4:	10c00536 	bltu	r2,r3,8192bc <find_first_empty_cluster+0x18c>
    {
        *cluster_number = cluster_index;
  8192a8:	e0bfff17 	ldw	r2,-4(fp)
  8192ac:	e0fffd17 	ldw	r3,-12(fp)
  8192b0:	10c00015 	stw	r3,0(r2)
		result = true;
  8192b4:	00800044 	movi	r2,1
  8192b8:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
  8192bc:	e0bffb17 	ldw	r2,-20(fp)
}
  8192c0:	e037883a 	mov	sp,fp
  8192c4:	dfc00117 	ldw	ra,4(sp)
  8192c8:	df000017 	ldw	fp,0(sp)
  8192cc:	dec00204 	addi	sp,sp,8
  8192d0:	f800283a 	ret

008192d4 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  8192d4:	defff404 	addi	sp,sp,-48
  8192d8:	dfc00b15 	stw	ra,44(sp)
  8192dc:	df000a15 	stw	fp,40(sp)
  8192e0:	df000a04 	addi	fp,sp,40
  8192e4:	e13ffe15 	stw	r4,-8(fp)
    int result = -1;
  8192e8:	00bfffc4 	movi	r2,-1
  8192ec:	e0bffb15 	stw	r2,-20(fp)
    int cluster = start_cluster_index;
  8192f0:	e0bffe17 	ldw	r2,-8(fp)
  8192f4:	e0bffa15 	stw	r2,-24(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  8192f8:	e0bffa17 	ldw	r2,-24(fp)
  8192fc:	10ffff84 	addi	r3,r2,-2
  819300:	008020f4 	movhi	r2,131
  819304:	109ab304 	addi	r2,r2,27340
  819308:	10800383 	ldbu	r2,14(r2)
  81930c:	10803fcc 	andi	r2,r2,255
  819310:	1885383a 	mul	r2,r3,r2
  819314:	1007883a 	mov	r3,r2
  819318:	008020f4 	movhi	r2,131
  81931c:	109ab304 	addi	r2,r2,27340
  819320:	10801417 	ldw	r2,80(r2)
  819324:	1885883a 	add	r2,r3,r2
  819328:	e0bff915 	stw	r2,-28(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  81932c:	e03ff815 	stw	zero,-32(fp)
  819330:	00002c06 	br	8193e4 <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  819334:	e0fff817 	ldw	r3,-32(fp)
  819338:	e0bff917 	ldw	r2,-28(fp)
  81933c:	1889883a 	add	r4,r3,r2
  819340:	d1607017 	ldw	r5,-32320(gp)
  819344:	0816fe80 	call	816fe8 <Read_Sector_Data>
  819348:	1005003a 	cmpeq	r2,r2,zero
  81934c:	10002b1e 	bne	r2,zero,8193fc <find_first_empty_record_in_a_subdirectory+0x128>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  819350:	e03ff715 	stw	zero,-36(fp)
  819354:	00001d06 	br	8193cc <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  819358:	d0a07217 	ldw	r2,-32312(gp)
  81935c:	10800a17 	ldw	r2,40(r2)
  819360:	1007883a 	mov	r3,r2
  819364:	e0bff717 	ldw	r2,-36(fp)
  819368:	1004917a 	slli	r2,r2,5
  81936c:	1885883a 	add	r2,r3,r2
  819370:	10800023 	ldbuio	r2,0(r2)
  819374:	10803fcc 	andi	r2,r2,255
  819378:	e0bff60d 	sth	r2,-40(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
  81937c:	e0bff60b 	ldhu	r2,-40(fp)
  819380:	10803960 	cmpeqi	r2,r2,229
  819384:	1000031e 	bne	r2,zero,819394 <find_first_empty_record_in_a_subdirectory+0xc0>
  819388:	e0bff60b 	ldhu	r2,-40(fp)
  81938c:	1004c03a 	cmpne	r2,r2,zero
  819390:	10000b1e 	bne	r2,zero,8193c0 <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
  819394:	e0bff817 	ldw	r2,-32(fp)
  819398:	1006913a 	slli	r3,r2,4
  81939c:	e0bff717 	ldw	r2,-36(fp)
  8193a0:	1885883a 	add	r2,r3,r2
  8193a4:	1006943a 	slli	r3,r2,16
  8193a8:	e0bffa17 	ldw	r2,-24(fp)
  8193ac:	1884b03a 	or	r2,r3,r2
  8193b0:	e0bffb15 	stw	r2,-20(fp)
                        return result;
  8193b4:	e0bffb17 	ldw	r2,-20(fp)
  8193b8:	e0bfff15 	stw	r2,-4(fp)
  8193bc:	00005206 	br	819508 <find_first_empty_record_in_a_subdirectory+0x234>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
  8193c0:	e0bff717 	ldw	r2,-36(fp)
  8193c4:	10800044 	addi	r2,r2,1
  8193c8:	e0bff715 	stw	r2,-36(fp)
  8193cc:	e0bff717 	ldw	r2,-36(fp)
  8193d0:	10800410 	cmplti	r2,r2,16
  8193d4:	103fe01e 	bne	r2,zero,819358 <find_first_empty_record_in_a_subdirectory+0x84>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  8193d8:	e0bff817 	ldw	r2,-32(fp)
  8193dc:	10800044 	addi	r2,r2,1
  8193e0:	e0bff815 	stw	r2,-32(fp)
  8193e4:	008020f4 	movhi	r2,131
  8193e8:	109ab304 	addi	r2,r2,27340
  8193ec:	10800383 	ldbu	r2,14(r2)
  8193f0:	10c03fcc 	andi	r3,r2,255
  8193f4:	e0bff817 	ldw	r2,-32(fp)
  8193f8:	10ffce16 	blt	r2,r3,819334 <find_first_empty_record_in_a_subdirectory+0x60>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
  8193fc:	e0bffb17 	ldw	r2,-20(fp)
  819400:	1004403a 	cmpge	r2,r2,zero
  819404:	1000381e 	bne	r2,zero,8194e8 <find_first_empty_record_in_a_subdirectory+0x214>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
  819408:	e13ffa17 	ldw	r4,-24(fp)
  81940c:	e17ffc04 	addi	r5,fp,-16
  819410:	08170e40 	call	8170e4 <get_cluster_flag>
  819414:	1005003a 	cmpeq	r2,r2,zero
  819418:	1000311e 	bne	r2,zero,8194e0 <find_first_empty_record_in_a_subdirectory+0x20c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  81941c:	e0bffc0b 	ldhu	r2,-16(fp)
  819420:	10bfffcc 	andi	r2,r2,65535
  819424:	10fffe0c 	andi	r3,r2,65528
  819428:	00bffe14 	movui	r2,65528
  81942c:	18802e1e 	bne	r3,r2,8194e8 <find_first_empty_record_in_a_subdirectory+0x214>
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
  819430:	e13ffd04 	addi	r4,fp,-12
  819434:	08191300 	call	819130 <find_first_empty_cluster>
  819438:	1005003a 	cmpeq	r2,r2,zero
  81943c:	1000231e 	bne	r2,zero,8194cc <find_first_empty_record_in_a_subdirectory+0x1f8>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
  819440:	e13ffa17 	ldw	r4,-24(fp)
  819444:	e0bffd17 	ldw	r2,-12(fp)
  819448:	117fffcc 	andi	r5,r2,65535
  81944c:	2960001c 	xori	r5,r5,32768
  819450:	29600004 	addi	r5,r5,-32768
  819454:	01800044 	movi	r6,1
  819458:	081719c0 	call	81719c <mark_cluster>
  81945c:	1005003a 	cmpeq	r2,r2,zero
  819460:	10001a1e 	bne	r2,zero,8194cc <find_first_empty_record_in_a_subdirectory+0x1f8>
  819464:	e0bffd17 	ldw	r2,-12(fp)
  819468:	1009883a 	mov	r4,r2
  81946c:	017fffc4 	movi	r5,-1
  819470:	01800044 	movi	r6,1
  819474:	081719c0 	call	81719c <mark_cluster>
  819478:	1005003a 	cmpeq	r2,r2,zero
  81947c:	1000131e 	bne	r2,zero,8194cc <find_first_empty_record_in_a_subdirectory+0x1f8>
  819480:	e13ffa17 	ldw	r4,-24(fp)
  819484:	e0bffd17 	ldw	r2,-12(fp)
  819488:	117fffcc 	andi	r5,r2,65535
  81948c:	2960001c 	xori	r5,r5,32768
  819490:	29600004 	addi	r5,r5,-32768
  819494:	000d883a 	mov	r6,zero
  819498:	081719c0 	call	81719c <mark_cluster>
  81949c:	1005003a 	cmpeq	r2,r2,zero
  8194a0:	10000a1e 	bne	r2,zero,8194cc <find_first_empty_record_in_a_subdirectory+0x1f8>
  8194a4:	e0bffd17 	ldw	r2,-12(fp)
  8194a8:	1009883a 	mov	r4,r2
  8194ac:	017fffc4 	movi	r5,-1
  8194b0:	000d883a 	mov	r6,zero
  8194b4:	081719c0 	call	81719c <mark_cluster>
  8194b8:	1005003a 	cmpeq	r2,r2,zero
  8194bc:	1000031e 	bne	r2,zero,8194cc <find_first_empty_record_in_a_subdirectory+0x1f8>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
  8194c0:	0816f980 	call	816f98 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
  8194c4:	e0bffd17 	ldw	r2,-12(fp)
  8194c8:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
  8194cc:	e0bffc0b 	ldhu	r2,-16(fp)
  8194d0:	10bfffcc 	andi	r2,r2,65535
  8194d4:	10bffe0c 	andi	r2,r2,65528
  8194d8:	e0bffa15 	stw	r2,-24(fp)
  8194dc:	00000206 	br	8194e8 <find_first_empty_record_in_a_subdirectory+0x214>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
  8194e0:	00bfffc4 	movi	r2,-1
  8194e4:	e0bffb15 	stw	r2,-20(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
  8194e8:	e0fffa17 	ldw	r3,-24(fp)
  8194ec:	00bffdd4 	movui	r2,65527
  8194f0:	10c00316 	blt	r2,r3,819500 <find_first_empty_record_in_a_subdirectory+0x22c>
  8194f4:	e0bffb17 	ldw	r2,-20(fp)
  8194f8:	10bfffe0 	cmpeqi	r2,r2,-1
  8194fc:	103f7e1e 	bne	r2,zero,8192f8 <find_first_empty_record_in_a_subdirectory+0x24>
    return result; 
  819500:	e0bffb17 	ldw	r2,-20(fp)
  819504:	e0bfff15 	stw	r2,-4(fp)
  819508:	e0bfff17 	ldw	r2,-4(fp)
}
  81950c:	e037883a 	mov	sp,fp
  819510:	dfc00117 	ldw	ra,4(sp)
  819514:	df000017 	ldw	fp,0(sp)
  819518:	dec00204 	addi	sp,sp,8
  81951c:	f800283a 	ret

00819520 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  819520:	defff804 	addi	sp,sp,-32
  819524:	dfc00715 	stw	ra,28(sp)
  819528:	df000615 	stw	fp,24(sp)
  81952c:	df000604 	addi	fp,sp,24
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  819530:	008020f4 	movhi	r2,131
  819534:	109ab304 	addi	r2,r2,27340
  819538:	1080050b 	ldhu	r2,20(r2)
  81953c:	10bfffcc 	andi	r2,r2,65535
  819540:	1008917a 	slli	r4,r2,5
  819544:	008020f4 	movhi	r2,131
  819548:	109ab304 	addi	r2,r2,27340
  81954c:	1080030b 	ldhu	r2,12(r2)
  819550:	117fffcc 	andi	r5,r2,65535
  819554:	080c3980 	call	80c398 <__divsi3>
  819558:	e0bffe15 	stw	r2,-8(fp)
    int sector_index;
    int result = -1;
  81955c:	00bfffc4 	movi	r2,-1
  819560:	e0bffc15 	stw	r2,-16(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  819564:	e03ffd15 	stw	zero,-12(fp)
  819568:	00002d06 	br	819620 <find_first_empty_record_in_root_directory+0x100>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  81956c:	008020f4 	movhi	r2,131
  819570:	109ab304 	addi	r2,r2,27340
  819574:	10c01317 	ldw	r3,76(r2)
  819578:	e0bffd17 	ldw	r2,-12(fp)
  81957c:	1885883a 	add	r2,r3,r2
  819580:	1009883a 	mov	r4,r2
  819584:	d1607017 	ldw	r5,-32320(gp)
  819588:	0816fe80 	call	816fe8 <Read_Sector_Data>
  81958c:	1005003a 	cmpeq	r2,r2,zero
  819590:	1000261e 	bne	r2,zero,81962c <find_first_empty_record_in_root_directory+0x10c>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  819594:	e03ffb15 	stw	zero,-20(fp)
  819598:	00001b06 	br	819608 <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  81959c:	d0a07217 	ldw	r2,-32312(gp)
  8195a0:	10800a17 	ldw	r2,40(r2)
  8195a4:	1007883a 	mov	r3,r2
  8195a8:	e0bffb17 	ldw	r2,-20(fp)
  8195ac:	1004917a 	slli	r2,r2,5
  8195b0:	1885883a 	add	r2,r3,r2
  8195b4:	10800023 	ldbuio	r2,0(r2)
  8195b8:	10803fcc 	andi	r2,r2,255
  8195bc:	e0bffa0d 	sth	r2,-24(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
  8195c0:	e0bffa0b 	ldhu	r2,-24(fp)
  8195c4:	10803960 	cmpeqi	r2,r2,229
  8195c8:	1000031e 	bne	r2,zero,8195d8 <find_first_empty_record_in_root_directory+0xb8>
  8195cc:	e0bffa0b 	ldhu	r2,-24(fp)
  8195d0:	1004c03a 	cmpne	r2,r2,zero
  8195d4:	1000091e 	bne	r2,zero,8195fc <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
  8195d8:	e0bffd17 	ldw	r2,-12(fp)
  8195dc:	1006913a 	slli	r3,r2,4
  8195e0:	e0bffb17 	ldw	r2,-20(fp)
  8195e4:	1885883a 	add	r2,r3,r2
  8195e8:	1004943a 	slli	r2,r2,16
  8195ec:	e0bffc15 	stw	r2,-16(fp)
                    return result;
  8195f0:	e0bffc17 	ldw	r2,-16(fp)
  8195f4:	e0bfff15 	stw	r2,-4(fp)
  8195f8:	00000e06 	br	819634 <find_first_empty_record_in_root_directory+0x114>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
  8195fc:	e0bffb17 	ldw	r2,-20(fp)
  819600:	10800044 	addi	r2,r2,1
  819604:	e0bffb15 	stw	r2,-20(fp)
  819608:	e0bffb17 	ldw	r2,-20(fp)
  81960c:	10800410 	cmplti	r2,r2,16
  819610:	103fe21e 	bne	r2,zero,81959c <find_first_empty_record_in_root_directory+0x7c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  819614:	e0bffd17 	ldw	r2,-12(fp)
  819618:	10800044 	addi	r2,r2,1
  81961c:	e0bffd15 	stw	r2,-12(fp)
  819620:	e0fffd17 	ldw	r3,-12(fp)
  819624:	e0bffe17 	ldw	r2,-8(fp)
  819628:	18bfd016 	blt	r3,r2,81956c <find_first_empty_record_in_root_directory+0x4c>
        else
        {
            break;
        }
    }
    return result;
  81962c:	e0bffc17 	ldw	r2,-16(fp)
  819630:	e0bfff15 	stw	r2,-4(fp)
  819634:	e0bfff17 	ldw	r2,-4(fp)
}
  819638:	e037883a 	mov	sp,fp
  81963c:	dfc00117 	ldw	ra,4(sp)
  819640:	df000017 	ldw	fp,0(sp)
  819644:	dec00204 	addi	sp,sp,8
  819648:	f800283a 	ret

0081964c <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
  81964c:	defffa04 	addi	sp,sp,-24
  819650:	df000515 	stw	fp,20(sp)
  819654:	df000504 	addi	fp,sp,20
  819658:	e13ffd15 	stw	r4,-12(fp)
  81965c:	e17ffe15 	stw	r5,-8(fp)
  819660:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
  819664:	e03ffb15 	stw	zero,-20(fp)
    
    for(counter = 0; counter < 8; counter++)
  819668:	e03ffc15 	stw	zero,-16(fp)
  81966c:	00002b06 	br	81971c <convert_filename_to_name_extension+0xd0>
    {
        if (filename[local] != '.')
  819670:	e0bffb17 	ldw	r2,-20(fp)
  819674:	1007883a 	mov	r3,r2
  819678:	e0bffd17 	ldw	r2,-12(fp)
  81967c:	1885883a 	add	r2,r3,r2
  819680:	10800003 	ldbu	r2,0(r2)
  819684:	10803fcc 	andi	r2,r2,255
  819688:	1080201c 	xori	r2,r2,128
  81968c:	10bfe004 	addi	r2,r2,-128
  819690:	10800ba0 	cmpeqi	r2,r2,46
  819694:	1000181e 	bne	r2,zero,8196f8 <convert_filename_to_name_extension+0xac>
        {
            name[counter] = filename[local];
  819698:	e0bffc17 	ldw	r2,-16(fp)
  81969c:	1007883a 	mov	r3,r2
  8196a0:	e0bffe17 	ldw	r2,-8(fp)
  8196a4:	1889883a 	add	r4,r3,r2
  8196a8:	e0bffb17 	ldw	r2,-20(fp)
  8196ac:	1007883a 	mov	r3,r2
  8196b0:	e0bffd17 	ldw	r2,-12(fp)
  8196b4:	1885883a 	add	r2,r3,r2
  8196b8:	10800003 	ldbu	r2,0(r2)
  8196bc:	20800005 	stb	r2,0(r4)
            if (filename[local] != 0) local++;
  8196c0:	e0bffb17 	ldw	r2,-20(fp)
  8196c4:	1007883a 	mov	r3,r2
  8196c8:	e0bffd17 	ldw	r2,-12(fp)
  8196cc:	1885883a 	add	r2,r3,r2
  8196d0:	10800003 	ldbu	r2,0(r2)
  8196d4:	10803fcc 	andi	r2,r2,255
  8196d8:	1080201c 	xori	r2,r2,128
  8196dc:	10bfe004 	addi	r2,r2,-128
  8196e0:	1005003a 	cmpeq	r2,r2,zero
  8196e4:	10000a1e 	bne	r2,zero,819710 <convert_filename_to_name_extension+0xc4>
  8196e8:	e0bffb17 	ldw	r2,-20(fp)
  8196ec:	10800044 	addi	r2,r2,1
  8196f0:	e0bffb15 	stw	r2,-20(fp)
  8196f4:	00000606 	br	819710 <convert_filename_to_name_extension+0xc4>
        }
        else
        {
            name[counter] = ' ';
  8196f8:	e0bffc17 	ldw	r2,-16(fp)
  8196fc:	1007883a 	mov	r3,r2
  819700:	e0bffe17 	ldw	r2,-8(fp)
  819704:	1887883a 	add	r3,r3,r2
  819708:	00800804 	movi	r2,32
  81970c:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
  819710:	e0bffc17 	ldw	r2,-16(fp)
  819714:	10800044 	addi	r2,r2,1
  819718:	e0bffc15 	stw	r2,-16(fp)
  81971c:	e0bffc17 	ldw	r2,-16(fp)
  819720:	10800210 	cmplti	r2,r2,8
  819724:	103fd21e 	bne	r2,zero,819670 <convert_filename_to_name_extension+0x24>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
  819728:	e0bffb17 	ldw	r2,-20(fp)
  81972c:	1007883a 	mov	r3,r2
  819730:	e0bffd17 	ldw	r2,-12(fp)
  819734:	1885883a 	add	r2,r3,r2
  819738:	10800003 	ldbu	r2,0(r2)
  81973c:	10803fcc 	andi	r2,r2,255
  819740:	1080201c 	xori	r2,r2,128
  819744:	10bfe004 	addi	r2,r2,-128
  819748:	10800b98 	cmpnei	r2,r2,46
  81974c:	1000031e 	bne	r2,zero,81975c <convert_filename_to_name_extension+0x110>
  819750:	e0bffb17 	ldw	r2,-20(fp)
  819754:	10800044 	addi	r2,r2,1
  819758:	e0bffb15 	stw	r2,-20(fp)
    for(counter = 0; counter < 3; counter++)
  81975c:	e03ffc15 	stw	zero,-16(fp)
  819760:	00002106 	br	8197e8 <convert_filename_to_name_extension+0x19c>
    {
        if (filename[local] != 0)
  819764:	e0bffb17 	ldw	r2,-20(fp)
  819768:	1007883a 	mov	r3,r2
  81976c:	e0bffd17 	ldw	r2,-12(fp)
  819770:	1885883a 	add	r2,r3,r2
  819774:	10800003 	ldbu	r2,0(r2)
  819778:	10803fcc 	andi	r2,r2,255
  81977c:	1080201c 	xori	r2,r2,128
  819780:	10bfe004 	addi	r2,r2,-128
  819784:	1005003a 	cmpeq	r2,r2,zero
  819788:	10000e1e 	bne	r2,zero,8197c4 <convert_filename_to_name_extension+0x178>
        {
            extension[counter] = filename[local];
  81978c:	e0bffc17 	ldw	r2,-16(fp)
  819790:	1007883a 	mov	r3,r2
  819794:	e0bfff17 	ldw	r2,-4(fp)
  819798:	1889883a 	add	r4,r3,r2
  81979c:	e0bffb17 	ldw	r2,-20(fp)
  8197a0:	1007883a 	mov	r3,r2
  8197a4:	e0bffd17 	ldw	r2,-12(fp)
  8197a8:	1885883a 	add	r2,r3,r2
  8197ac:	10800003 	ldbu	r2,0(r2)
  8197b0:	20800005 	stb	r2,0(r4)
            local++;
  8197b4:	e0bffb17 	ldw	r2,-20(fp)
  8197b8:	10800044 	addi	r2,r2,1
  8197bc:	e0bffb15 	stw	r2,-20(fp)
  8197c0:	00000606 	br	8197dc <convert_filename_to_name_extension+0x190>
        }
        else
        {
            extension[counter] = ' ';
  8197c4:	e0bffc17 	ldw	r2,-16(fp)
  8197c8:	1007883a 	mov	r3,r2
  8197cc:	e0bfff17 	ldw	r2,-4(fp)
  8197d0:	1887883a 	add	r3,r3,r2
  8197d4:	00800804 	movi	r2,32
  8197d8:	18800005 	stb	r2,0(r3)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
  8197dc:	e0bffc17 	ldw	r2,-16(fp)
  8197e0:	10800044 	addi	r2,r2,1
  8197e4:	e0bffc15 	stw	r2,-16(fp)
  8197e8:	e0bffc17 	ldw	r2,-16(fp)
  8197ec:	108000d0 	cmplti	r2,r2,3
  8197f0:	103fdc1e 	bne	r2,zero,819764 <convert_filename_to_name_extension+0x118>
        {
            extension[counter] = ' ';
        }
    }

}
  8197f4:	e037883a 	mov	sp,fp
  8197f8:	df000017 	ldw	fp,0(sp)
  8197fc:	dec00104 	addi	sp,sp,4
  819800:	f800283a 	ret

00819804 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  819804:	defff304 	addi	sp,sp,-52
  819808:	dfc00c15 	stw	ra,48(sp)
  81980c:	df000b15 	stw	fp,44(sp)
  819810:	df000b04 	addi	fp,sp,44
  819814:	e13ffb15 	stw	r4,-20(fp)
  819818:	e17ffc15 	stw	r5,-16(fp)
  81981c:	e1bffd15 	stw	r6,-12(fp)
    unsigned int cluster_number;
    bool result = false;
  819820:	e03ff915 	stw	zero,-28(fp)
    
    if (find_first_empty_cluster(&cluster_number))
  819824:	e13ffa04 	addi	r4,fp,-24
  819828:	08191300 	call	819130 <find_first_empty_cluster>
  81982c:	1005003a 	cmpeq	r2,r2,zero
  819830:	1000a31e 	bne	r2,zero,819ac0 <create_file+0x2bc>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
  819834:	e0bffd17 	ldw	r2,-12(fp)
  819838:	10800a17 	ldw	r2,40(r2)
  81983c:	1004c03a 	cmpne	r2,r2,zero
  819840:	1000031e 	bne	r2,zero,819850 <create_file+0x4c>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
  819844:	08195200 	call	819520 <find_first_empty_record_in_root_directory>
  819848:	e0bff815 	stw	r2,-32(fp)
  81984c:	00000506 	br	819864 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
  819850:	e0bffd17 	ldw	r2,-12(fp)
  819854:	1080058b 	ldhu	r2,22(r2)
  819858:	113fffcc 	andi	r4,r2,65535
  81985c:	08192d40 	call	8192d4 <find_first_empty_record_in_a_subdirectory>
  819860:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
  819864:	e0bff817 	ldw	r2,-32(fp)
  819868:	1004803a 	cmplt	r2,r2,zero
  81986c:	1000941e 	bne	r2,zero,819ac0 <create_file+0x2bc>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
  819870:	e13ffb17 	ldw	r4,-20(fp)
  819874:	081840c0 	call	81840c <get_dir_divider_location>
  819878:	e0bff615 	stw	r2,-40(fp)
            int last_dir_separator = 0;
  81987c:	e03ff515 	stw	zero,-44(fp)

            // Skip through all directory separators.
            while (location > 0)
  819880:	00000b06 	br	8198b0 <create_file+0xac>
            {
                last_dir_separator = last_dir_separator+location+1;
  819884:	e0fff517 	ldw	r3,-44(fp)
  819888:	e0bff617 	ldw	r2,-40(fp)
  81988c:	1885883a 	add	r2,r3,r2
  819890:	10800044 	addi	r2,r2,1
  819894:	e0bff515 	stw	r2,-44(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
  819898:	e0bff517 	ldw	r2,-44(fp)
  81989c:	1007883a 	mov	r3,r2
  8198a0:	e0bffb17 	ldw	r2,-20(fp)
  8198a4:	1889883a 	add	r4,r3,r2
  8198a8:	081840c0 	call	81840c <get_dir_divider_location>
  8198ac:	e0bff615 	stw	r2,-40(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
  8198b0:	e0bff617 	ldw	r2,-40(fp)
  8198b4:	10800048 	cmpgei	r2,r2,1
  8198b8:	103ff21e 	bne	r2,zero,819884 <create_file+0x80>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
  8198bc:	e0bff517 	ldw	r2,-44(fp)
  8198c0:	1007883a 	mov	r3,r2
  8198c4:	e0bffb17 	ldw	r2,-20(fp)
  8198c8:	1889883a 	add	r4,r3,r2
  8198cc:	e0bffc17 	ldw	r2,-16(fp)
  8198d0:	100b883a 	mov	r5,r2
  8198d4:	e0bffc17 	ldw	r2,-16(fp)
  8198d8:	10800204 	addi	r2,r2,8
  8198dc:	100d883a 	mov	r6,r2
  8198e0:	081964c0 	call	81964c <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
  8198e4:	e0bffc17 	ldw	r2,-16(fp)
  8198e8:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
  8198ec:	e0bffc17 	ldw	r2,-16(fp)
  8198f0:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
  8198f4:	e0bffc17 	ldw	r2,-16(fp)
  8198f8:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
  8198fc:	e0bffc17 	ldw	r2,-16(fp)
  819900:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
  819904:	e0bffc17 	ldw	r2,-16(fp)
  819908:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
  81990c:	e0bffc17 	ldw	r2,-16(fp)
  819910:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
  819914:	e0bffa17 	ldw	r2,-24(fp)
  819918:	1007883a 	mov	r3,r2
  81991c:	e0bffc17 	ldw	r2,-16(fp)
  819920:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
  819924:	e0bffc17 	ldw	r2,-16(fp)
  819928:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
  81992c:	e0fffa17 	ldw	r3,-24(fp)
  819930:	e0bffc17 	ldw	r2,-16(fp)
  819934:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
  819938:	e0bffc17 	ldw	r2,-16(fp)
  81993c:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
  819940:	e0bffc17 	ldw	r2,-16(fp)
  819944:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
  819948:	e0bff817 	ldw	r2,-32(fp)
  81994c:	10ffffcc 	andi	r3,r2,65535
  819950:	e0bffc17 	ldw	r2,-16(fp)
  819954:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
  819958:	e0bff817 	ldw	r2,-32(fp)
  81995c:	1005d43a 	srai	r2,r2,16
  819960:	10bfffcc 	andi	r2,r2,65535
  819964:	e0bfff15 	stw	r2,-4(fp)
  819968:	e0ffff17 	ldw	r3,-4(fp)
  81996c:	1804403a 	cmpge	r2,r3,zero
  819970:	1000031e 	bne	r2,zero,819980 <create_file+0x17c>
  819974:	e0bfff17 	ldw	r2,-4(fp)
  819978:	108003c4 	addi	r2,r2,15
  81997c:	e0bfff15 	stw	r2,-4(fp)
  819980:	e0ffff17 	ldw	r3,-4(fp)
  819984:	1805d13a 	srai	r2,r3,4
  819988:	1007883a 	mov	r3,r2
  81998c:	e0bffc17 	ldw	r2,-16(fp)
  819990:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
  819994:	e0bff817 	ldw	r2,-32(fp)
  819998:	1005d43a 	srai	r2,r2,16
  81999c:	108003cc 	andi	r2,r2,15
  8199a0:	1004917a 	slli	r2,r2,5
  8199a4:	1007883a 	mov	r3,r2
  8199a8:	e0bffc17 	ldw	r2,-16(fp)
  8199ac:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
  8199b0:	e0bffd17 	ldw	r2,-12(fp)
  8199b4:	1080058b 	ldhu	r2,22(r2)
  8199b8:	10ffffcc 	andi	r3,r2,65535
  8199bc:	e0bffc17 	ldw	r2,-16(fp)
  8199c0:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
  8199c4:	e0fffc17 	ldw	r3,-16(fp)
  8199c8:	00800044 	movi	r2,1
  8199cc:	18800f15 	stw	r2,60(r3)
            file_record->modified = true;
  8199d0:	e0fffc17 	ldw	r3,-16(fp)
  8199d4:	00800044 	movi	r2,1
  8199d8:	18800e15 	stw	r2,56(r3)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
  8199dc:	e0bffc17 	ldw	r2,-16(fp)
  8199e0:	10800a17 	ldw	r2,40(r2)
  8199e4:	1004c03a 	cmpne	r2,r2,zero
  8199e8:	1000081e 	bne	r2,zero,819a0c <create_file+0x208>
  8199ec:	008020f4 	movhi	r2,131
  8199f0:	109ab304 	addi	r2,r2,27340
  8199f4:	10c01317 	ldw	r3,76(r2)
  8199f8:	e0bffc17 	ldw	r2,-16(fp)
  8199fc:	10800b17 	ldw	r2,44(r2)
  819a00:	1887883a 	add	r3,r3,r2
  819a04:	e0fffe15 	stw	r3,-8(fp)
  819a08:	00001006 	br	819a4c <create_file+0x248>
  819a0c:	008020f4 	movhi	r2,131
  819a10:	109ab304 	addi	r2,r2,27340
  819a14:	11001417 	ldw	r4,80(r2)
  819a18:	e0bffc17 	ldw	r2,-16(fp)
  819a1c:	10800a17 	ldw	r2,40(r2)
  819a20:	10ffff84 	addi	r3,r2,-2
  819a24:	008020f4 	movhi	r2,131
  819a28:	109ab304 	addi	r2,r2,27340
  819a2c:	10800383 	ldbu	r2,14(r2)
  819a30:	10803fcc 	andi	r2,r2,255
  819a34:	1885383a 	mul	r2,r3,r2
  819a38:	2087883a 	add	r3,r4,r2
  819a3c:	e0bffc17 	ldw	r2,-16(fp)
  819a40:	10800b17 	ldw	r2,44(r2)
  819a44:	1887883a 	add	r3,r3,r2
  819a48:	e0fffe15 	stw	r3,-8(fp)
  819a4c:	e0bffe17 	ldw	r2,-8(fp)
  819a50:	e0bff715 	stw	r2,-36(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
  819a54:	e13ff717 	ldw	r4,-36(fp)
  819a58:	d1607017 	ldw	r5,-32320(gp)
  819a5c:	0816fe80 	call	816fe8 <Read_Sector_Data>
  819a60:	1005003a 	cmpeq	r2,r2,zero
  819a64:	1000161e 	bne	r2,zero,819ac0 <create_file+0x2bc>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
  819a68:	e0bffc17 	ldw	r2,-16(fp)
  819a6c:	10800c0b 	ldhu	r2,48(r2)
  819a70:	113fffcc 	andi	r4,r2,65535
  819a74:	2120001c 	xori	r4,r4,32768
  819a78:	21200004 	addi	r4,r4,-32768
  819a7c:	e17ffc17 	ldw	r5,-16(fp)
  819a80:	08176b40 	call	8176b4 <Write_File_Record_At_Offset>
  819a84:	1005003a 	cmpeq	r2,r2,zero
  819a88:	10000d1e 	bne	r2,zero,819ac0 <create_file+0x2bc>
                {
                    Save_Modified_Sector();
  819a8c:	0816f980 	call	816f98 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
  819a90:	e13ffa17 	ldw	r4,-24(fp)
  819a94:	017fffc4 	movi	r5,-1
  819a98:	01800044 	movi	r6,1
  819a9c:	081719c0 	call	81719c <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
  819aa0:	e13ffa17 	ldw	r4,-24(fp)
  819aa4:	017fffc4 	movi	r5,-1
  819aa8:	000d883a 	mov	r6,zero
  819aac:	081719c0 	call	81719c <mark_cluster>
  819ab0:	1005003a 	cmpeq	r2,r2,zero
  819ab4:	1000021e 	bne	r2,zero,819ac0 <create_file+0x2bc>
                    {
                        result = true;
  819ab8:	00800044 	movi	r2,1
  819abc:	e0bff915 	stw	r2,-28(fp)
                }
            }
        }

    }
    return result;           
  819ac0:	e0bff917 	ldw	r2,-28(fp)
}
  819ac4:	e037883a 	mov	sp,fp
  819ac8:	dfc00117 	ldw	ra,4(sp)
  819acc:	df000017 	ldw	fp,0(sp)
  819ad0:	dec00204 	addi	sp,sp,8
  819ad4:	f800283a 	ret

00819ad8 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
  819ad8:	defffb04 	addi	sp,sp,-20
  819adc:	df000415 	stw	fp,16(sp)
  819ae0:	df000404 	addi	fp,sp,16
  819ae4:	e13ffe15 	stw	r4,-8(fp)
  819ae8:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
  819aec:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
  819af0:	e03ffd15 	stw	zero,-12(fp)
  819af4:	00001606 	br	819b50 <copy_file_record_name_to_string+0x78>
	{
		if (file_record->name[index] != ' ')
  819af8:	e0fffd17 	ldw	r3,-12(fp)
  819afc:	e0bffe17 	ldw	r2,-8(fp)
  819b00:	10c5883a 	add	r2,r2,r3
  819b04:	10800003 	ldbu	r2,0(r2)
  819b08:	10803fcc 	andi	r2,r2,255
  819b0c:	10800820 	cmpeqi	r2,r2,32
  819b10:	10000c1e 	bne	r2,zero,819b44 <copy_file_record_name_to_string+0x6c>
		{
			file_name[flength] = file_record->name[index];
  819b14:	e0bffc17 	ldw	r2,-16(fp)
  819b18:	1007883a 	mov	r3,r2
  819b1c:	e0bfff17 	ldw	r2,-4(fp)
  819b20:	1889883a 	add	r4,r3,r2
  819b24:	e0fffd17 	ldw	r3,-12(fp)
  819b28:	e0bffe17 	ldw	r2,-8(fp)
  819b2c:	10c5883a 	add	r2,r2,r3
  819b30:	10800003 	ldbu	r2,0(r2)
  819b34:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
  819b38:	e0bffc17 	ldw	r2,-16(fp)
  819b3c:	10800044 	addi	r2,r2,1
  819b40:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
  819b44:	e0bffd17 	ldw	r2,-12(fp)
  819b48:	10800044 	addi	r2,r2,1
  819b4c:	e0bffd15 	stw	r2,-12(fp)
  819b50:	e0bffd17 	ldw	r2,-12(fp)
  819b54:	10800210 	cmplti	r2,r2,8
  819b58:	103fe71e 	bne	r2,zero,819af8 <copy_file_record_name_to_string+0x20>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
  819b5c:	e0bffe17 	ldw	r2,-8(fp)
  819b60:	10800203 	ldbu	r2,8(r2)
  819b64:	10803fcc 	andi	r2,r2,255
  819b68:	10800820 	cmpeqi	r2,r2,32
  819b6c:	1000261e 	bne	r2,zero,819c08 <copy_file_record_name_to_string+0x130>
	{
		file_name[flength] = '.';
  819b70:	e0bffc17 	ldw	r2,-16(fp)
  819b74:	1007883a 	mov	r3,r2
  819b78:	e0bfff17 	ldw	r2,-4(fp)
  819b7c:	1887883a 	add	r3,r3,r2
  819b80:	00800b84 	movi	r2,46
  819b84:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  819b88:	e0bffc17 	ldw	r2,-16(fp)
  819b8c:	10800044 	addi	r2,r2,1
  819b90:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++)
  819b94:	e03ffd15 	stw	zero,-12(fp)
  819b98:	00001806 	br	819bfc <copy_file_record_name_to_string+0x124>
		{
			if (file_record->extension[index] != ' ')
  819b9c:	e0fffd17 	ldw	r3,-12(fp)
  819ba0:	e0bffe17 	ldw	r2,-8(fp)
  819ba4:	1885883a 	add	r2,r3,r2
  819ba8:	10800204 	addi	r2,r2,8
  819bac:	10800003 	ldbu	r2,0(r2)
  819bb0:	10803fcc 	andi	r2,r2,255
  819bb4:	10800820 	cmpeqi	r2,r2,32
  819bb8:	10000d1e 	bne	r2,zero,819bf0 <copy_file_record_name_to_string+0x118>
			{
				file_name[flength] = file_record->extension[index];
  819bbc:	e0bffc17 	ldw	r2,-16(fp)
  819bc0:	1007883a 	mov	r3,r2
  819bc4:	e0bfff17 	ldw	r2,-4(fp)
  819bc8:	1889883a 	add	r4,r3,r2
  819bcc:	e0fffd17 	ldw	r3,-12(fp)
  819bd0:	e0bffe17 	ldw	r2,-8(fp)
  819bd4:	1885883a 	add	r2,r3,r2
  819bd8:	10800204 	addi	r2,r2,8
  819bdc:	10800003 	ldbu	r2,0(r2)
  819be0:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
  819be4:	e0bffc17 	ldw	r2,-16(fp)
  819be8:	10800044 	addi	r2,r2,1
  819bec:	e0bffc15 	stw	r2,-16(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
  819bf0:	e0bffd17 	ldw	r2,-12(fp)
  819bf4:	10800044 	addi	r2,r2,1
  819bf8:	e0bffd15 	stw	r2,-12(fp)
  819bfc:	e0bffd17 	ldw	r2,-12(fp)
  819c00:	108000d0 	cmplti	r2,r2,3
  819c04:	103fe51e 	bne	r2,zero,819b9c <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
  819c08:	e0bffc17 	ldw	r2,-16(fp)
  819c0c:	1007883a 	mov	r3,r2
  819c10:	e0bfff17 	ldw	r2,-4(fp)
  819c14:	1885883a 	add	r2,r3,r2
  819c18:	10000005 	stb	zero,0(r2)
}
  819c1c:	e037883a 	mov	sp,fp
  819c20:	df000017 	ldw	fp,0(sp)
  819c24:	dec00104 	addi	sp,sp,4
  819c28:	f800283a 	ret

00819c2c <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
  819c2c:	defffc04 	addi	sp,sp,-16
  819c30:	dfc00315 	stw	ra,12(sp)
  819c34:	df000215 	stw	fp,8(sp)
  819c38:	df000204 	addi	fp,sp,8
  819c3c:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
  819c40:	e13fff17 	ldw	r4,-4(fp)
  819c44:	014020b4 	movhi	r5,130
  819c48:	297c7004 	addi	r5,r5,-3648
  819c4c:	081b6300 	call	81b630 <alt_find_dev>
  819c50:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
  819c54:	e0bffe17 	ldw	r2,-8(fp)
  819c58:	1005003a 	cmpeq	r2,r2,zero
  819c5c:	10001e1e 	bne	r2,zero,819cd8 <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  819c60:	e0bffe17 	ldw	r2,-8(fp)
  819c64:	10800a17 	ldw	r2,40(r2)
  819c68:	10808d04 	addi	r2,r2,564
  819c6c:	d0a06a15 	stw	r2,-32344(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  819c70:	e0bffe17 	ldw	r2,-8(fp)
  819c74:	10800a17 	ldw	r2,40(r2)
  819c78:	10808904 	addi	r2,r2,548
  819c7c:	d0a06b15 	stw	r2,-32340(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  819c80:	e0bffe17 	ldw	r2,-8(fp)
  819c84:	10800a17 	ldw	r2,40(r2)
  819c88:	10808404 	addi	r2,r2,528
  819c8c:	d0a06c15 	stw	r2,-32336(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  819c90:	e0bffe17 	ldw	r2,-8(fp)
  819c94:	10800a17 	ldw	r2,40(r2)
  819c98:	10808c04 	addi	r2,r2,560
  819c9c:	d0a06d15 	stw	r2,-32332(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  819ca0:	e0bffe17 	ldw	r2,-8(fp)
  819ca4:	10800a17 	ldw	r2,40(r2)
  819ca8:	10808b04 	addi	r2,r2,556
  819cac:	d0a06e15 	stw	r2,-32328(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  819cb0:	e0bffe17 	ldw	r2,-8(fp)
  819cb4:	10800a17 	ldw	r2,40(r2)
  819cb8:	d0a06f15 	stw	r2,-32324(gp)
		device_pointer = dev;
  819cbc:	e0bffe17 	ldw	r2,-8(fp)
  819cc0:	d0a07215 	stw	r2,-32312(gp)
		initialized = false;
  819cc4:	d0206815 	stw	zero,-32352(gp)
		is_sd_card_formated_as_FAT16 = false;
  819cc8:	d0206915 	stw	zero,-32348(gp)
		search_data.valid = false;
  819ccc:	008020f4 	movhi	r2,131
  819cd0:	109aae04 	addi	r2,r2,27320
  819cd4:	10000415 	stw	zero,16(r2)
	}
	return dev;
  819cd8:	e0bffe17 	ldw	r2,-8(fp)
}
  819cdc:	e037883a 	mov	sp,fp
  819ce0:	dfc00117 	ldw	ra,4(sp)
  819ce4:	df000017 	ldw	fp,0(sp)
  819ce8:	dec00204 	addi	sp,sp,8
  819cec:	f800283a 	ret

00819cf0 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
  819cf0:	defffd04 	addi	sp,sp,-12
  819cf4:	df000215 	stw	fp,8(sp)
  819cf8:	df000204 	addi	fp,sp,8
    bool result = false;
  819cfc:	e03fff15 	stw	zero,-4(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  819d00:	d0a07217 	ldw	r2,-32312(gp)
  819d04:	1005003a 	cmpeq	r2,r2,zero
  819d08:	1000081e 	bne	r2,zero,819d2c <alt_up_sd_card_is_Present+0x3c>
  819d0c:	d0a06a17 	ldw	r2,-32344(gp)
  819d10:	1080002b 	ldhuio	r2,0(r2)
  819d14:	1080008c 	andi	r2,r2,2
  819d18:	1005003a 	cmpeq	r2,r2,zero
  819d1c:	1000031e 	bne	r2,zero,819d2c <alt_up_sd_card_is_Present+0x3c>
    {
        result = true;
  819d20:	00800044 	movi	r2,1
  819d24:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  819d28:	00001e06 	br	819da4 <alt_up_sd_card_is_Present+0xb4>
    {
        result = true;
    }
	else if (initialized == true)
  819d2c:	d0a06817 	ldw	r2,-32352(gp)
  819d30:	10800058 	cmpnei	r2,r2,1
  819d34:	10001b1e 	bne	r2,zero,819da4 <alt_up_sd_card_is_Present+0xb4>
	{
		int index;

		initialized = false;
  819d38:	d0206815 	stw	zero,-32352(gp)
		search_data.valid = false;
  819d3c:	008020f4 	movhi	r2,131
  819d40:	109aae04 	addi	r2,r2,27320
  819d44:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
  819d48:	d0206915 	stw	zero,-32348(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
  819d4c:	e03ffe15 	stw	zero,-8(fp)
  819d50:	00001106 	br	819d98 <alt_up_sd_card_is_Present+0xa8>
		{
			active_files[index].in_use = false;
  819d54:	e0bffe17 	ldw	r2,-8(fp)
  819d58:	00c020f4 	movhi	r3,131
  819d5c:	18dac804 	addi	r3,r3,27424
  819d60:	100491ba 	slli	r2,r2,6
  819d64:	10c5883a 	add	r2,r2,r3
  819d68:	10800f04 	addi	r2,r2,60
  819d6c:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
  819d70:	e0bffe17 	ldw	r2,-8(fp)
  819d74:	00c020f4 	movhi	r3,131
  819d78:	18dac804 	addi	r3,r3,27424
  819d7c:	100491ba 	slli	r2,r2,6
  819d80:	10c5883a 	add	r2,r2,r3
  819d84:	10800e04 	addi	r2,r2,56
  819d88:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
  819d8c:	e0bffe17 	ldw	r2,-8(fp)
  819d90:	10800044 	addi	r2,r2,1
  819d94:	e0bffe15 	stw	r2,-8(fp)
  819d98:	e0bffe17 	ldw	r2,-8(fp)
  819d9c:	10800510 	cmplti	r2,r2,20
  819da0:	103fec1e 	bne	r2,zero,819d54 <alt_up_sd_card_is_Present+0x64>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
  819da4:	e0bfff17 	ldw	r2,-4(fp)
}
  819da8:	e037883a 	mov	sp,fp
  819dac:	df000017 	ldw	fp,0(sp)
  819db0:	dec00104 	addi	sp,sp,4
  819db4:	f800283a 	ret

00819db8 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  819db8:	defffd04 	addi	sp,sp,-12
  819dbc:	dfc00215 	stw	ra,8(sp)
  819dc0:	df000115 	stw	fp,4(sp)
  819dc4:	df000104 	addi	fp,sp,4
	bool result = false;
  819dc8:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
  819dcc:	0819cf00 	call	819cf0 <alt_up_sd_card_is_Present>
  819dd0:	1005003a 	cmpeq	r2,r2,zero
  819dd4:	10000d1e 	bne	r2,zero,819e0c <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
  819dd8:	d0a06817 	ldw	r2,-32352(gp)
  819ddc:	1004c03a 	cmpne	r2,r2,zero
  819de0:	1000071e 	bne	r2,zero,819e00 <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  819de4:	0817fb40 	call	817fb4 <Look_for_FAT16>
  819de8:	d0a06915 	stw	r2,-32348(gp)
			initialized = is_sd_card_formated_as_FAT16;
  819dec:	d0a06917 	ldw	r2,-32348(gp)
  819df0:	d0a06815 	stw	r2,-32352(gp)
			search_data.valid = false;
  819df4:	008020f4 	movhi	r2,131
  819df8:	109aae04 	addi	r2,r2,27320
  819dfc:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
  819e00:	d0a06917 	ldw	r2,-32348(gp)
  819e04:	e0bfff15 	stw	r2,-4(fp)
  819e08:	00000206 	br	819e14 <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
  819e0c:	d0206815 	stw	zero,-32352(gp)
		is_sd_card_formated_as_FAT16 = false;
  819e10:	d0206915 	stw	zero,-32348(gp)
	}

	return result;
  819e14:	e0bfff17 	ldw	r2,-4(fp)
}
  819e18:	e037883a 	mov	sp,fp
  819e1c:	dfc00117 	ldw	ra,4(sp)
  819e20:	df000017 	ldw	fp,0(sp)
  819e24:	dec00204 	addi	sp,sp,8
  819e28:	f800283a 	ret

00819e2c <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  819e2c:	deffea04 	addi	sp,sp,-88
  819e30:	dfc01515 	stw	ra,84(sp)
  819e34:	df001415 	stw	fp,80(sp)
  819e38:	df001404 	addi	fp,sp,80
  819e3c:	e13ffe15 	stw	r4,-8(fp)
  819e40:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
  819e44:	00800084 	movi	r2,2
  819e48:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  819e4c:	0819cf00 	call	819cf0 <alt_up_sd_card_is_Present>
  819e50:	1005003a 	cmpeq	r2,r2,zero
  819e54:	1000241e 	bne	r2,zero,819ee8 <alt_up_sd_card_find_first+0xbc>
  819e58:	d0a06917 	ldw	r2,-32348(gp)
  819e5c:	1005003a 	cmpeq	r2,r2,zero
  819e60:	1000211e 	bne	r2,zero,819ee8 <alt_up_sd_card_find_first+0xbc>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
  819e64:	e17fed04 	addi	r5,fp,-76
  819e68:	e1bfee04 	addi	r6,fp,-72
  819e6c:	e13ffe17 	ldw	r4,-8(fp)
  819e70:	08187b80 	call	8187b8 <get_home_directory_cluster_for_file>
  819e74:	1005003a 	cmpeq	r2,r2,zero
  819e78:	1000191e 	bne	r2,zero,819ee0 <alt_up_sd_card_find_first+0xb4>
		{
			search_data.directory_root_cluster = home_directory_cluster;
  819e7c:	e0bfed17 	ldw	r2,-76(fp)
  819e80:	1007883a 	mov	r3,r2
  819e84:	008020f4 	movhi	r2,131
  819e88:	109aae04 	addi	r2,r2,27320
  819e8c:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
  819e90:	e0bfed17 	ldw	r2,-76(fp)
  819e94:	1007883a 	mov	r3,r2
  819e98:	008020f4 	movhi	r2,131
  819e9c:	109aae04 	addi	r2,r2,27320
  819ea0:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
  819ea4:	008020f4 	movhi	r2,131
  819ea8:	109aae04 	addi	r2,r2,27320
  819eac:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
  819eb0:	00c020f4 	movhi	r3,131
  819eb4:	18daae04 	addi	r3,r3,27320
  819eb8:	00bfffc4 	movi	r2,-1
  819ebc:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
  819ec0:	00c020f4 	movhi	r3,131
  819ec4:	18daae04 	addi	r3,r3,27320
  819ec8:	00800044 	movi	r2,1
  819ecc:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
  819ed0:	e13fff17 	ldw	r4,-4(fp)
  819ed4:	0819f000 	call	819f00 <alt_up_sd_card_find_next>
  819ed8:	e0bfec0d 	sth	r2,-80(fp)
  819edc:	00000206 	br	819ee8 <alt_up_sd_card_find_first+0xbc>
		}
		else
		{
			result = 1;
  819ee0:	00800044 	movi	r2,1
  819ee4:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
  819ee8:	e0bfec0f 	ldh	r2,-80(fp)
}
  819eec:	e037883a 	mov	sp,fp
  819ef0:	dfc00117 	ldw	ra,4(sp)
  819ef4:	df000017 	ldw	fp,0(sp)
  819ef8:	dec00204 	addi	sp,sp,8
  819efc:	f800283a 	ret

00819f00 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  819f00:	deffe404 	addi	sp,sp,-112
  819f04:	dfc01b15 	stw	ra,108(sp)
  819f08:	df001a15 	stw	fp,104(sp)
  819f0c:	df001a04 	addi	fp,sp,104
  819f10:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
  819f14:	00800084 	movi	r2,2
  819f18:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  819f1c:	0819cf00 	call	819cf0 <alt_up_sd_card_is_Present>
  819f20:	1005003a 	cmpeq	r2,r2,zero
  819f24:	1000da1e 	bne	r2,zero,81a290 <alt_up_sd_card_find_next+0x390>
  819f28:	d0a06917 	ldw	r2,-32348(gp)
  819f2c:	1005003a 	cmpeq	r2,r2,zero
  819f30:	1000d71e 	bne	r2,zero,81a290 <alt_up_sd_card_find_next+0x390>
	{
		if (search_data.valid)
  819f34:	008020f4 	movhi	r2,131
  819f38:	109aae04 	addi	r2,r2,27320
  819f3c:	10800417 	ldw	r2,16(r2)
  819f40:	1005003a 	cmpeq	r2,r2,zero
  819f44:	1000d01e 	bne	r2,zero,81a288 <alt_up_sd_card_find_next+0x388>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  819f48:	008020f4 	movhi	r2,131
  819f4c:	109aae04 	addi	r2,r2,27320
  819f50:	10800117 	ldw	r2,4(r2)
  819f54:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0)
  819f58:	e0bfec17 	ldw	r2,-80(fp)
  819f5c:	1004c03a 	cmpne	r2,r2,zero
  819f60:	1000511e 	bne	r2,zero,81a0a8 <alt_up_sd_card_find_next+0x1a8>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  819f64:	008020f4 	movhi	r2,131
  819f68:	109ab304 	addi	r2,r2,27340
  819f6c:	1080050b 	ldhu	r2,20(r2)
  819f70:	10bfffcc 	andi	r2,r2,65535
  819f74:	1008917a 	slli	r4,r2,5
  819f78:	008020f4 	movhi	r2,131
  819f7c:	109ab304 	addi	r2,r2,27340
  819f80:	1080030b 	ldhu	r2,12(r2)
  819f84:	117fffcc 	andi	r5,r2,65535
  819f88:	080c3980 	call	80c398 <__divsi3>
  819f8c:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
  819f90:	008020f4 	movhi	r2,131
  819f94:	109aae04 	addi	r2,r2,27320
  819f98:	10800217 	ldw	r2,8(r2)
  819f9c:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector+1;
  819fa0:	008020f4 	movhi	r2,131
  819fa4:	109aae04 	addi	r2,r2,27320
  819fa8:	1080030b 	ldhu	r2,12(r2)
  819fac:	10bfffcc 	andi	r2,r2,65535
  819fb0:	10a0001c 	xori	r2,r2,32768
  819fb4:	10a00004 	addi	r2,r2,-32768
  819fb8:	10800044 	addi	r2,r2,1
  819fbc:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
  819fc0:	00003306 	br	81a090 <alt_up_sd_card_find_next+0x190>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  819fc4:	008020f4 	movhi	r2,131
  819fc8:	109ab304 	addi	r2,r2,27340
  819fcc:	10c01317 	ldw	r3,76(r2)
  819fd0:	e0bfea17 	ldw	r2,-88(fp)
  819fd4:	1885883a 	add	r2,r3,r2
  819fd8:	1009883a 	mov	r4,r2
  819fdc:	d1607017 	ldw	r5,-32320(gp)
  819fe0:	0816fe80 	call	816fe8 <Read_Sector_Data>
  819fe4:	1005003a 	cmpeq	r2,r2,zero
  819fe8:	10002c1e 	bne	r2,zero,81a09c <alt_up_sd_card_find_next+0x19c>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  819fec:	00002106 	br	81a074 <alt_up_sd_card_find_next+0x174>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
  819ff0:	e0bfe917 	ldw	r2,-92(fp)
  819ff4:	1008917a 	slli	r4,r2,5
  819ff8:	e1ffea17 	ldw	r7,-88(fp)
  819ffc:	e17fee04 	addi	r5,fp,-72
  81a000:	000d883a 	mov	r6,zero
  81a004:	08174300 	call	817430 <Read_File_Record_At_Offset>
  81a008:	1005003a 	cmpeq	r2,r2,zero
  81a00c:	1000161e 	bne	r2,zero,81a068 <alt_up_sd_card_find_next+0x168>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  81a010:	e0bfee03 	ldbu	r2,-72(fp)
  81a014:	10803fcc 	andi	r2,r2,255
  81a018:	1005003a 	cmpeq	r2,r2,zero
  81a01c:	1000121e 	bne	r2,zero,81a068 <alt_up_sd_card_find_next+0x168>
  81a020:	e0bfee03 	ldbu	r2,-72(fp)
  81a024:	10803fcc 	andi	r2,r2,255
  81a028:	10803960 	cmpeqi	r2,r2,229
  81a02c:	10000e1e 	bne	r2,zero,81a068 <alt_up_sd_card_find_next+0x168>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
  81a030:	e0bfe917 	ldw	r2,-92(fp)
  81a034:	1007883a 	mov	r3,r2
  81a038:	008020f4 	movhi	r2,131
  81a03c:	109aae04 	addi	r2,r2,27320
  81a040:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
  81a044:	e0ffea17 	ldw	r3,-88(fp)
  81a048:	008020f4 	movhi	r2,131
  81a04c:	109aae04 	addi	r2,r2,27320
  81a050:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
  81a054:	e13fee04 	addi	r4,fp,-72
  81a058:	e17ffe17 	ldw	r5,-8(fp)
  81a05c:	0819ad80 	call	819ad8 <copy_file_record_name_to_string>
									return 0;
  81a060:	e03fff15 	stw	zero,-4(fp)
  81a064:	00008c06 	br	81a298 <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  81a068:	e0bfe917 	ldw	r2,-92(fp)
  81a06c:	10800044 	addi	r2,r2,1
  81a070:	e0bfe915 	stw	r2,-92(fp)
  81a074:	e0bfe917 	ldw	r2,-92(fp)
  81a078:	10800410 	cmplti	r2,r2,16
  81a07c:	103fdc1e 	bne	r2,zero,819ff0 <alt_up_sd_card_find_next+0xf0>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
  81a080:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
  81a084:	e0bfea17 	ldw	r2,-88(fp)
  81a088:	10800044 	addi	r2,r2,1
  81a08c:	e0bfea15 	stw	r2,-88(fp)
  81a090:	e0ffea17 	ldw	r3,-88(fp)
  81a094:	e0bfeb17 	ldw	r2,-84(fp)
  81a098:	18bfca16 	blt	r3,r2,819fc4 <alt_up_sd_card_find_next+0xc4>
					else
					{
						break;
					}
				}
				result = -1;
  81a09c:	00bfffc4 	movi	r2,-1
  81a0a0:	e0bfed0d 	sth	r2,-76(fp)
  81a0a4:	00007a06 	br	81a290 <alt_up_sd_card_find_next+0x390>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
  81a0a8:	008020f4 	movhi	r2,131
  81a0ac:	109aae04 	addi	r2,r2,27320
  81a0b0:	1080030b 	ldhu	r2,12(r2)
  81a0b4:	10bfffcc 	andi	r2,r2,65535
  81a0b8:	10a0001c 	xori	r2,r2,32768
  81a0bc:	10a00004 	addi	r2,r2,-32768
  81a0c0:	10800044 	addi	r2,r2,1
  81a0c4:	e0bfe815 	stw	r2,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  81a0c8:	e0bfec17 	ldw	r2,-80(fp)
  81a0cc:	10ffff84 	addi	r3,r2,-2
  81a0d0:	008020f4 	movhi	r2,131
  81a0d4:	109ab304 	addi	r2,r2,27340
  81a0d8:	10800383 	ldbu	r2,14(r2)
  81a0dc:	10803fcc 	andi	r2,r2,255
  81a0e0:	1885383a 	mul	r2,r3,r2
  81a0e4:	1007883a 	mov	r3,r2
  81a0e8:	008020f4 	movhi	r2,131
  81a0ec:	109ab304 	addi	r2,r2,27340
  81a0f0:	10801417 	ldw	r2,80(r2)
  81a0f4:	1885883a 	add	r2,r3,r2
  81a0f8:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
  81a0fc:	008020f4 	movhi	r2,131
  81a100:	109aae04 	addi	r2,r2,27320
  81a104:	10800217 	ldw	r2,8(r2)
  81a108:	e0bfe615 	stw	r2,-104(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  81a10c:	00003406 	br	81a1e0 <alt_up_sd_card_find_next+0x2e0>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  81a110:	e0ffe617 	ldw	r3,-104(fp)
  81a114:	e0bfe717 	ldw	r2,-100(fp)
  81a118:	1889883a 	add	r4,r3,r2
  81a11c:	d1607017 	ldw	r5,-32320(gp)
  81a120:	0816fe80 	call	816fe8 <Read_Sector_Data>
  81a124:	1005003a 	cmpeq	r2,r2,zero
  81a128:	1000331e 	bne	r2,zero,81a1f8 <alt_up_sd_card_find_next+0x2f8>
						{        
							for (; file_counter < 16; file_counter++)
  81a12c:	00002506 	br	81a1c4 <alt_up_sd_card_find_next+0x2c4>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
  81a130:	e0bfe817 	ldw	r2,-96(fp)
  81a134:	1008917a 	slli	r4,r2,5
  81a138:	e1bfec17 	ldw	r6,-80(fp)
  81a13c:	e1ffe617 	ldw	r7,-104(fp)
  81a140:	e17fee04 	addi	r5,fp,-72
  81a144:	08174300 	call	817430 <Read_File_Record_At_Offset>
  81a148:	1005003a 	cmpeq	r2,r2,zero
  81a14c:	10001a1e 	bne	r2,zero,81a1b8 <alt_up_sd_card_find_next+0x2b8>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  81a150:	e0bfee03 	ldbu	r2,-72(fp)
  81a154:	10803fcc 	andi	r2,r2,255
  81a158:	1005003a 	cmpeq	r2,r2,zero
  81a15c:	1000161e 	bne	r2,zero,81a1b8 <alt_up_sd_card_find_next+0x2b8>
  81a160:	e0bfee03 	ldbu	r2,-72(fp)
  81a164:	10803fcc 	andi	r2,r2,255
  81a168:	10803960 	cmpeqi	r2,r2,229
  81a16c:	1000121e 	bne	r2,zero,81a1b8 <alt_up_sd_card_find_next+0x2b8>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
  81a170:	e0ffec17 	ldw	r3,-80(fp)
  81a174:	008020f4 	movhi	r2,131
  81a178:	109aae04 	addi	r2,r2,27320
  81a17c:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
  81a180:	e0bfe817 	ldw	r2,-96(fp)
  81a184:	1007883a 	mov	r3,r2
  81a188:	008020f4 	movhi	r2,131
  81a18c:	109aae04 	addi	r2,r2,27320
  81a190:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
  81a194:	e0ffe617 	ldw	r3,-104(fp)
  81a198:	008020f4 	movhi	r2,131
  81a19c:	109aae04 	addi	r2,r2,27320
  81a1a0:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
  81a1a4:	e13fee04 	addi	r4,fp,-72
  81a1a8:	e17ffe17 	ldw	r5,-8(fp)
  81a1ac:	0819ad80 	call	819ad8 <copy_file_record_name_to_string>
										return 0;
  81a1b0:	e03fff15 	stw	zero,-4(fp)
  81a1b4:	00003806 	br	81a298 <alt_up_sd_card_find_next+0x398>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
  81a1b8:	e0bfe817 	ldw	r2,-96(fp)
  81a1bc:	10800044 	addi	r2,r2,1
  81a1c0:	e0bfe815 	stw	r2,-96(fp)
  81a1c4:	e0bfe817 	ldw	r2,-96(fp)
  81a1c8:	10800410 	cmplti	r2,r2,16
  81a1cc:	103fd81e 	bne	r2,zero,81a130 <alt_up_sd_card_find_next+0x230>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
  81a1d0:	e03fe815 	stw	zero,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  81a1d4:	e0bfe617 	ldw	r2,-104(fp)
  81a1d8:	10800044 	addi	r2,r2,1
  81a1dc:	e0bfe615 	stw	r2,-104(fp)
  81a1e0:	008020f4 	movhi	r2,131
  81a1e4:	109ab304 	addi	r2,r2,27340
  81a1e8:	10800383 	ldbu	r2,14(r2)
  81a1ec:	10c03fcc 	andi	r3,r2,255
  81a1f0:	e0bfe617 	ldw	r2,-104(fp)
  81a1f4:	10ffc616 	blt	r2,r3,81a110 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
  81a1f8:	008020f4 	movhi	r2,131
  81a1fc:	109ab304 	addi	r2,r2,27340
  81a200:	10800383 	ldbu	r2,14(r2)
  81a204:	10c03fcc 	andi	r3,r2,255
  81a208:	e0bfe617 	ldw	r2,-104(fp)
  81a20c:	10c01a16 	blt	r2,r3,81a278 <alt_up_sd_card_find_next+0x378>
					{
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
  81a210:	e13fec17 	ldw	r4,-80(fp)
  81a214:	e17fed84 	addi	r5,fp,-74
  81a218:	08170e40 	call	8170e4 <get_cluster_flag>
  81a21c:	1005003a 	cmpeq	r2,r2,zero
  81a220:	1000131e 	bne	r2,zero,81a270 <alt_up_sd_card_find_next+0x370>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  81a224:	e0bfed8b 	ldhu	r2,-74(fp)
  81a228:	10bfffcc 	andi	r2,r2,65535
  81a22c:	10a0001c 	xori	r2,r2,32768
  81a230:	10a00004 	addi	r2,r2,-32768
  81a234:	10fffe0c 	andi	r3,r2,65528
  81a238:	00bffe14 	movui	r2,65528
  81a23c:	1880051e 	bne	r3,r2,81a254 <alt_up_sd_card_find_next+0x354>
							{
								result = -1;
  81a240:	00bfffc4 	movi	r2,-1
  81a244:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
  81a248:	008020f4 	movhi	r2,131
  81a24c:	109aae04 	addi	r2,r2,27320
  81a250:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
  81a254:	e0bfed8b 	ldhu	r2,-74(fp)
  81a258:	10bfffcc 	andi	r2,r2,65535
  81a25c:	10a0001c 	xori	r2,r2,32768
  81a260:	10a00004 	addi	r2,r2,-32768
  81a264:	10bffe0c 	andi	r2,r2,65528
  81a268:	e0bfec15 	stw	r2,-80(fp)
  81a26c:	00000206 	br	81a278 <alt_up_sd_card_find_next+0x378>
						}
						else
						{
							// Error encountered.                 
							result = -1;
  81a270:	00bfffc4 	movi	r2,-1
  81a274:	e0bfed0d 	sth	r2,-76(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
  81a278:	e0ffec17 	ldw	r3,-80(fp)
  81a27c:	00bffdd4 	movui	r2,65527
  81a280:	10ff910e 	bge	r2,r3,81a0c8 <alt_up_sd_card_find_next+0x1c8>
  81a284:	00000206 	br	81a290 <alt_up_sd_card_find_next+0x390>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
  81a288:	008000c4 	movi	r2,3
  81a28c:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
  81a290:	e0bfed0f 	ldh	r2,-76(fp)
  81a294:	e0bfff15 	stw	r2,-4(fp)
  81a298:	e0bfff17 	ldw	r2,-4(fp)
}
  81a29c:	e037883a 	mov	sp,fp
  81a2a0:	dfc00117 	ldw	ra,4(sp)
  81a2a4:	df000017 	ldw	fp,0(sp)
  81a2a8:	dec00204 	addi	sp,sp,8
  81a2ac:	f800283a 	ret

0081a2b0 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  81a2b0:	deffe804 	addi	sp,sp,-96
  81a2b4:	dfc01715 	stw	ra,92(sp)
  81a2b8:	df001615 	stw	fp,88(sp)
  81a2bc:	df001604 	addi	fp,sp,88
  81a2c0:	e13ffd15 	stw	r4,-12(fp)
  81a2c4:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
  81a2c8:	00bfffc4 	movi	r2,-1
  81a2cc:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  81a2d0:	0819cf00 	call	819cf0 <alt_up_sd_card_is_Present>
  81a2d4:	1005003a 	cmpeq	r2,r2,zero
  81a2d8:	1000d71e 	bne	r2,zero,81a638 <alt_up_sd_card_fopen+0x388>
  81a2dc:	d0a06917 	ldw	r2,-32348(gp)
  81a2e0:	1005003a 	cmpeq	r2,r2,zero
  81a2e4:	1000d41e 	bne	r2,zero,81a638 <alt_up_sd_card_fopen+0x388>
	{
        unsigned int home_directory_cluster = 0;
  81a2e8:	e03fec15 	stw	zero,-80(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
  81a2ec:	e13ffd17 	ldw	r4,-12(fp)
  81a2f0:	08180ac0 	call	8180ac <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
  81a2f4:	e13ffd17 	ldw	r4,-12(fp)
  81a2f8:	081817c0 	call	81817c <check_file_name_for_FAT16_compliance>
  81a2fc:	1005003a 	cmpeq	r2,r2,zero
  81a300:	1000cd1e 	bne	r2,zero,81a638 <alt_up_sd_card_fopen+0x388>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, &home_directory_cluster, &home_dir))
  81a304:	e17fec04 	addi	r5,fp,-80
  81a308:	e1bfed04 	addi	r6,fp,-76
  81a30c:	e13ffd17 	ldw	r4,-12(fp)
  81a310:	08187b80 	call	8187b8 <get_home_directory_cluster_for_file>
  81a314:	1004c03a 	cmpne	r2,r2,zero
  81a318:	1000031e 	bne	r2,zero,81a328 <alt_up_sd_card_fopen+0x78>
            {
                return file_record_index;
  81a31c:	e0bfeb0f 	ldh	r2,-84(fp)
  81a320:	e0bfff15 	stw	r2,-4(fp)
  81a324:	0000c606 	br	81a640 <alt_up_sd_card_fopen+0x390>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
  81a328:	e03fea15 	stw	zero,-88(fp)
  81a32c:	00000f06 	br	81a36c <alt_up_sd_card_fopen+0xbc>
    		{
    			if (active_files[index].in_use == false)
  81a330:	e0bfea17 	ldw	r2,-88(fp)
  81a334:	00c020f4 	movhi	r3,131
  81a338:	18dac804 	addi	r3,r3,27424
  81a33c:	100491ba 	slli	r2,r2,6
  81a340:	10c5883a 	add	r2,r2,r3
  81a344:	10800f04 	addi	r2,r2,60
  81a348:	10800017 	ldw	r2,0(r2)
  81a34c:	1004c03a 	cmpne	r2,r2,zero
  81a350:	1000031e 	bne	r2,zero,81a360 <alt_up_sd_card_fopen+0xb0>
    			{
    				file_record_index = index;
  81a354:	e0bfea17 	ldw	r2,-88(fp)
  81a358:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
  81a35c:	00000606 	br	81a378 <alt_up_sd_card_fopen+0xc8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
  81a360:	e0bfea17 	ldw	r2,-88(fp)
  81a364:	10800044 	addi	r2,r2,1
  81a368:	e0bfea15 	stw	r2,-88(fp)
  81a36c:	e0bfea17 	ldw	r2,-88(fp)
  81a370:	10800510 	cmplti	r2,r2,20
  81a374:	103fee1e 	bne	r2,zero,81a330 <alt_up_sd_card_fopen+0x80>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
  81a378:	e0bfeb0f 	ldh	r2,-84(fp)
  81a37c:	1004803a 	cmplt	r2,r2,zero
  81a380:	1000ad1e 	bne	r2,zero,81a638 <alt_up_sd_card_fopen+0x388>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
  81a384:	e0bfec17 	ldw	r2,-80(fp)
  81a388:	1009883a 	mov	r4,r2
  81a38c:	e0bfeb0f 	ldh	r2,-84(fp)
  81a390:	100491ba 	slli	r2,r2,6
  81a394:	1007883a 	mov	r3,r2
  81a398:	008020f4 	movhi	r2,131
  81a39c:	109ac804 	addi	r2,r2,27424
  81a3a0:	188d883a 	add	r6,r3,r2
  81a3a4:	e17ffd17 	ldw	r5,-12(fp)
  81a3a8:	0818ccc0 	call	818ccc <find_file_in_directory>
  81a3ac:	1005003a 	cmpeq	r2,r2,zero
  81a3b0:	10007d1e 	bne	r2,zero,81a5a8 <alt_up_sd_card_fopen+0x2f8>
                {
                    if (create)
  81a3b4:	e0bffe17 	ldw	r2,-8(fp)
  81a3b8:	1005003a 	cmpeq	r2,r2,zero
  81a3bc:	1000031e 	bne	r2,zero,81a3cc <alt_up_sd_card_fopen+0x11c>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
  81a3c0:	00bfffc4 	movi	r2,-1
  81a3c4:	e0bfff15 	stw	r2,-4(fp)
  81a3c8:	00009d06 	br	81a640 <alt_up_sd_card_fopen+0x390>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
  81a3cc:	e17feb0f 	ldh	r5,-84(fp)
  81a3d0:	e0bfeb0f 	ldh	r2,-84(fp)
  81a3d4:	00c020f4 	movhi	r3,131
  81a3d8:	18dac804 	addi	r3,r3,27424
  81a3dc:	100491ba 	slli	r2,r2,6
  81a3e0:	10c5883a 	add	r2,r2,r3
  81a3e4:	10800504 	addi	r2,r2,20
  81a3e8:	1080008b 	ldhu	r2,2(r2)
  81a3ec:	113fffcc 	andi	r4,r2,65535
  81a3f0:	00c020f4 	movhi	r3,131
  81a3f4:	18dac804 	addi	r3,r3,27424
  81a3f8:	280491ba 	slli	r2,r5,6
  81a3fc:	10c5883a 	add	r2,r2,r3
  81a400:	10800704 	addi	r2,r2,28
  81a404:	11000015 	stw	r4,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
  81a408:	e0bfeb0f 	ldh	r2,-84(fp)
  81a40c:	00c020f4 	movhi	r3,131
  81a410:	18dac804 	addi	r3,r3,27424
  81a414:	100491ba 	slli	r2,r2,6
  81a418:	10c5883a 	add	r2,r2,r3
  81a41c:	10800804 	addi	r2,r2,32
  81a420:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
  81a424:	e0bfeb0f 	ldh	r2,-84(fp)
  81a428:	00c020f4 	movhi	r3,131
  81a42c:	18dac804 	addi	r3,r3,27424
  81a430:	100491ba 	slli	r2,r2,6
  81a434:	10c5883a 	add	r2,r2,r3
  81a438:	10800904 	addi	r2,r2,36
  81a43c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
  81a440:	e0bfeb0f 	ldh	r2,-84(fp)
  81a444:	00c020f4 	movhi	r3,131
  81a448:	18dac804 	addi	r3,r3,27424
  81a44c:	100491ba 	slli	r2,r2,6
  81a450:	10c5883a 	add	r2,r2,r3
  81a454:	10c00f04 	addi	r3,r2,60
  81a458:	00800044 	movi	r2,1
  81a45c:	18800015 	stw	r2,0(r3)
    				active_files[file_record_index].modified = false;
  81a460:	e0bfeb0f 	ldh	r2,-84(fp)
  81a464:	00c020f4 	movhi	r3,131
  81a468:	18dac804 	addi	r3,r3,27424
  81a46c:	100491ba 	slli	r2,r2,6
  81a470:	10c5883a 	add	r2,r2,r3
  81a474:	10800e04 	addi	r2,r2,56
  81a478:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
  81a47c:	e03fea15 	stw	zero,-88(fp)
  81a480:	00004506 	br	81a598 <alt_up_sd_card_fopen+0x2e8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
  81a484:	e0ffeb0f 	ldh	r3,-84(fp)
  81a488:	e0bfea17 	ldw	r2,-88(fp)
  81a48c:	18803f26 	beq	r3,r2,81a58c <alt_up_sd_card_fopen+0x2dc>
  81a490:	e0bfea17 	ldw	r2,-88(fp)
  81a494:	00c020f4 	movhi	r3,131
  81a498:	18dac804 	addi	r3,r3,27424
  81a49c:	100491ba 	slli	r2,r2,6
  81a4a0:	10c5883a 	add	r2,r2,r3
  81a4a4:	10800f04 	addi	r2,r2,60
  81a4a8:	10800017 	ldw	r2,0(r2)
  81a4ac:	10800058 	cmpnei	r2,r2,1
  81a4b0:	1000361e 	bne	r2,zero,81a58c <alt_up_sd_card_fopen+0x2dc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
  81a4b4:	e0bfeb0f 	ldh	r2,-84(fp)
  81a4b8:	00c020f4 	movhi	r3,131
  81a4bc:	18dac804 	addi	r3,r3,27424
  81a4c0:	100491ba 	slli	r2,r2,6
  81a4c4:	10c5883a 	add	r2,r2,r3
  81a4c8:	10800a04 	addi	r2,r2,40
  81a4cc:	11000017 	ldw	r4,0(r2)
  81a4d0:	e0bfea17 	ldw	r2,-88(fp)
  81a4d4:	00c020f4 	movhi	r3,131
  81a4d8:	18dac804 	addi	r3,r3,27424
  81a4dc:	100491ba 	slli	r2,r2,6
  81a4e0:	10c5883a 	add	r2,r2,r3
  81a4e4:	10800a04 	addi	r2,r2,40
  81a4e8:	10800017 	ldw	r2,0(r2)
  81a4ec:	2080271e 	bne	r4,r2,81a58c <alt_up_sd_card_fopen+0x2dc>
  81a4f0:	e0bfeb0f 	ldh	r2,-84(fp)
  81a4f4:	00c020f4 	movhi	r3,131
  81a4f8:	18dac804 	addi	r3,r3,27424
  81a4fc:	100491ba 	slli	r2,r2,6
  81a500:	10c5883a 	add	r2,r2,r3
  81a504:	10800b04 	addi	r2,r2,44
  81a508:	11000017 	ldw	r4,0(r2)
  81a50c:	e0bfea17 	ldw	r2,-88(fp)
  81a510:	00c020f4 	movhi	r3,131
  81a514:	18dac804 	addi	r3,r3,27424
  81a518:	100491ba 	slli	r2,r2,6
  81a51c:	10c5883a 	add	r2,r2,r3
  81a520:	10800b04 	addi	r2,r2,44
  81a524:	10800017 	ldw	r2,0(r2)
  81a528:	2080181e 	bne	r4,r2,81a58c <alt_up_sd_card_fopen+0x2dc>
  81a52c:	e0bfeb0f 	ldh	r2,-84(fp)
  81a530:	00c020f4 	movhi	r3,131
  81a534:	18dac804 	addi	r3,r3,27424
  81a538:	100491ba 	slli	r2,r2,6
  81a53c:	10c5883a 	add	r2,r2,r3
  81a540:	10800c04 	addi	r2,r2,48
  81a544:	1100000b 	ldhu	r4,0(r2)
  81a548:	e0bfea17 	ldw	r2,-88(fp)
  81a54c:	00c020f4 	movhi	r3,131
  81a550:	18dac804 	addi	r3,r3,27424
  81a554:	100491ba 	slli	r2,r2,6
  81a558:	10c5883a 	add	r2,r2,r3
  81a55c:	10800c04 	addi	r2,r2,48
  81a560:	1080000b 	ldhu	r2,0(r2)
  81a564:	20ffffcc 	andi	r3,r4,65535
  81a568:	18e0001c 	xori	r3,r3,32768
  81a56c:	18e00004 	addi	r3,r3,-32768
  81a570:	10bfffcc 	andi	r2,r2,65535
  81a574:	10a0001c 	xori	r2,r2,32768
  81a578:	10a00004 	addi	r2,r2,-32768
  81a57c:	1880031e 	bne	r3,r2,81a58c <alt_up_sd_card_fopen+0x2dc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
  81a580:	00bfff84 	movi	r2,-2
  81a584:	e0bfeb0d 	sth	r2,-84(fp)
								break;
  81a588:	00002b06 	br	81a638 <alt_up_sd_card_fopen+0x388>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
  81a58c:	e0bfea17 	ldw	r2,-88(fp)
  81a590:	10800044 	addi	r2,r2,1
  81a594:	e0bfea15 	stw	r2,-88(fp)
  81a598:	e0bfea17 	ldw	r2,-88(fp)
  81a59c:	10800510 	cmplti	r2,r2,20
  81a5a0:	103fb81e 	bne	r2,zero,81a484 <alt_up_sd_card_fopen+0x1d4>
  81a5a4:	00002406 	br	81a638 <alt_up_sd_card_fopen+0x388>
							}
						}
					}

                }
                else if (create)
  81a5a8:	e0bffe17 	ldw	r2,-8(fp)
  81a5ac:	1005003a 	cmpeq	r2,r2,zero
  81a5b0:	10001f1e 	bne	r2,zero,81a630 <alt_up_sd_card_fopen+0x380>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
  81a5b4:	e0bfeb0f 	ldh	r2,-84(fp)
  81a5b8:	100491ba 	slli	r2,r2,6
  81a5bc:	1007883a 	mov	r3,r2
  81a5c0:	008020f4 	movhi	r2,131
  81a5c4:	109ac804 	addi	r2,r2,27424
  81a5c8:	188b883a 	add	r5,r3,r2
  81a5cc:	e1bfed04 	addi	r6,fp,-76
  81a5d0:	e13ffd17 	ldw	r4,-12(fp)
  81a5d4:	08198040 	call	819804 <create_file>
  81a5d8:	1005003a 	cmpeq	r2,r2,zero
  81a5dc:	1000111e 	bne	r2,zero,81a624 <alt_up_sd_card_fopen+0x374>
                    {
                        active_files[file_record_index].in_use = true;
  81a5e0:	e0bfeb0f 	ldh	r2,-84(fp)
  81a5e4:	00c020f4 	movhi	r3,131
  81a5e8:	18dac804 	addi	r3,r3,27424
  81a5ec:	100491ba 	slli	r2,r2,6
  81a5f0:	10c5883a 	add	r2,r2,r3
  81a5f4:	10c00f04 	addi	r3,r2,60
  81a5f8:	00800044 	movi	r2,1
  81a5fc:	18800015 	stw	r2,0(r3)
    					active_files[file_record_index].modified = true;
  81a600:	e0bfeb0f 	ldh	r2,-84(fp)
  81a604:	00c020f4 	movhi	r3,131
  81a608:	18dac804 	addi	r3,r3,27424
  81a60c:	100491ba 	slli	r2,r2,6
  81a610:	10c5883a 	add	r2,r2,r3
  81a614:	10c00e04 	addi	r3,r2,56
  81a618:	00800044 	movi	r2,1
  81a61c:	18800015 	stw	r2,0(r3)
  81a620:	00000506 	br	81a638 <alt_up_sd_card_fopen+0x388>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
  81a624:	00bfffc4 	movi	r2,-1
  81a628:	e0bfeb0d 	sth	r2,-84(fp)
  81a62c:	00000206 	br	81a638 <alt_up_sd_card_fopen+0x388>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
  81a630:	00bfffc4 	movi	r2,-1
  81a634:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
  81a638:	e0bfeb0f 	ldh	r2,-84(fp)
  81a63c:	e0bfff15 	stw	r2,-4(fp)
  81a640:	e0bfff17 	ldw	r2,-4(fp)
}
  81a644:	e037883a 	mov	sp,fp
  81a648:	dfc00117 	ldw	ra,4(sp)
  81a64c:	df000017 	ldw	fp,0(sp)
  81a650:	dec00204 	addi	sp,sp,8
  81a654:	f800283a 	ret

0081a658 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  81a658:	defffd04 	addi	sp,sp,-12
  81a65c:	df000215 	stw	fp,8(sp)
  81a660:	df000204 	addi	fp,sp,8
  81a664:	e13ffe0d 	sth	r4,-8(fp)
  81a668:	e17fff0d 	sth	r5,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  81a66c:	e0bffe0f 	ldh	r2,-8(fp)
  81a670:	1004803a 	cmplt	r2,r2,zero
  81a674:	1000181e 	bne	r2,zero,81a6d8 <alt_up_sd_card_set_attributes+0x80>
  81a678:	e0bffe0f 	ldh	r2,-8(fp)
  81a67c:	10800508 	cmpgei	r2,r2,20
  81a680:	1000151e 	bne	r2,zero,81a6d8 <alt_up_sd_card_set_attributes+0x80>
    {
        if (active_files[file_handle].in_use)
  81a684:	e0bffe0f 	ldh	r2,-8(fp)
  81a688:	00c020f4 	movhi	r3,131
  81a68c:	18dac804 	addi	r3,r3,27424
  81a690:	100491ba 	slli	r2,r2,6
  81a694:	10c5883a 	add	r2,r2,r3
  81a698:	10800f04 	addi	r2,r2,60
  81a69c:	10800017 	ldw	r2,0(r2)
  81a6a0:	1005003a 	cmpeq	r2,r2,zero
  81a6a4:	10000c1e 	bne	r2,zero,81a6d8 <alt_up_sd_card_set_attributes+0x80>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
  81a6a8:	e17ffe0f 	ldh	r5,-8(fp)
  81a6ac:	e0bfff0b 	ldhu	r2,-4(fp)
  81a6b0:	1007883a 	mov	r3,r2
  81a6b4:	00bfffc4 	movi	r2,-1
  81a6b8:	1884703a 	and	r2,r3,r2
  81a6bc:	1009883a 	mov	r4,r2
  81a6c0:	00c020f4 	movhi	r3,131
  81a6c4:	18dac804 	addi	r3,r3,27424
  81a6c8:	280491ba 	slli	r2,r5,6
  81a6cc:	10c5883a 	add	r2,r2,r3
  81a6d0:	10800204 	addi	r2,r2,8
  81a6d4:	110000c5 	stb	r4,3(r2)
        }
    }
}
  81a6d8:	e037883a 	mov	sp,fp
  81a6dc:	df000017 	ldw	fp,0(sp)
  81a6e0:	dec00104 	addi	sp,sp,4
  81a6e4:	f800283a 	ret

0081a6e8 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  81a6e8:	defffd04 	addi	sp,sp,-12
  81a6ec:	df000215 	stw	fp,8(sp)
  81a6f0:	df000204 	addi	fp,sp,8
  81a6f4:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
  81a6f8:	00bfffc4 	movi	r2,-1
  81a6fc:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  81a700:	e0bfff0f 	ldh	r2,-4(fp)
  81a704:	1004803a 	cmplt	r2,r2,zero
  81a708:	1000151e 	bne	r2,zero,81a760 <alt_up_sd_card_get_attributes+0x78>
  81a70c:	e0bfff0f 	ldh	r2,-4(fp)
  81a710:	10800508 	cmpgei	r2,r2,20
  81a714:	1000121e 	bne	r2,zero,81a760 <alt_up_sd_card_get_attributes+0x78>
    {
        if (active_files[file_handle].in_use)
  81a718:	e0bfff0f 	ldh	r2,-4(fp)
  81a71c:	00c020f4 	movhi	r3,131
  81a720:	18dac804 	addi	r3,r3,27424
  81a724:	100491ba 	slli	r2,r2,6
  81a728:	10c5883a 	add	r2,r2,r3
  81a72c:	10800f04 	addi	r2,r2,60
  81a730:	10800017 	ldw	r2,0(r2)
  81a734:	1005003a 	cmpeq	r2,r2,zero
  81a738:	1000091e 	bne	r2,zero,81a760 <alt_up_sd_card_get_attributes+0x78>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
  81a73c:	e0bfff0f 	ldh	r2,-4(fp)
  81a740:	00c020f4 	movhi	r3,131
  81a744:	18dac804 	addi	r3,r3,27424
  81a748:	100491ba 	slli	r2,r2,6
  81a74c:	10c5883a 	add	r2,r2,r3
  81a750:	10800204 	addi	r2,r2,8
  81a754:	108000c3 	ldbu	r2,3(r2)
  81a758:	10803fcc 	andi	r2,r2,255
  81a75c:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
  81a760:	e0bffe0f 	ldh	r2,-8(fp)
}
  81a764:	e037883a 	mov	sp,fp
  81a768:	df000017 	ldw	fp,0(sp)
  81a76c:	dec00104 	addi	sp,sp,4
  81a770:	f800283a 	ret

0081a774 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  81a774:	defffa04 	addi	sp,sp,-24
  81a778:	dfc00515 	stw	ra,20(sp)
  81a77c:	df000415 	stw	fp,16(sp)
  81a780:	df000404 	addi	fp,sp,16
  81a784:	e13ffe0d 	sth	r4,-8(fp)
    short int ch = -1;
  81a788:	00bfffc4 	movi	r2,-1
  81a78c:	e0bffd0d 	sth	r2,-12(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  81a790:	e0bffe0f 	ldh	r2,-8(fp)
  81a794:	1004803a 	cmplt	r2,r2,zero
  81a798:	1000d51e 	bne	r2,zero,81aaf0 <alt_up_sd_card_read+0x37c>
  81a79c:	e0bffe0f 	ldh	r2,-8(fp)
  81a7a0:	10800508 	cmpgei	r2,r2,20
  81a7a4:	1000d21e 	bne	r2,zero,81aaf0 <alt_up_sd_card_read+0x37c>
    {
        if (active_files[file_handle].in_use)
  81a7a8:	e0bffe0f 	ldh	r2,-8(fp)
  81a7ac:	00c020f4 	movhi	r3,131
  81a7b0:	18dac804 	addi	r3,r3,27424
  81a7b4:	100491ba 	slli	r2,r2,6
  81a7b8:	10c5883a 	add	r2,r2,r3
  81a7bc:	10800f04 	addi	r2,r2,60
  81a7c0:	10800017 	ldw	r2,0(r2)
  81a7c4:	1005003a 	cmpeq	r2,r2,zero
  81a7c8:	1000c91e 	bne	r2,zero,81aaf0 <alt_up_sd_card_read+0x37c>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  81a7cc:	e0bffe0f 	ldh	r2,-8(fp)
  81a7d0:	00c020f4 	movhi	r3,131
  81a7d4:	18dac804 	addi	r3,r3,27424
  81a7d8:	100491ba 	slli	r2,r2,6
  81a7dc:	10c5883a 	add	r2,r2,r3
  81a7e0:	10800904 	addi	r2,r2,36
  81a7e4:	11000017 	ldw	r4,0(r2)
  81a7e8:	e0bffe0f 	ldh	r2,-8(fp)
  81a7ec:	00c020f4 	movhi	r3,131
  81a7f0:	18dac804 	addi	r3,r3,27424
  81a7f4:	100491ba 	slli	r2,r2,6
  81a7f8:	10c5883a 	add	r2,r2,r3
  81a7fc:	10800604 	addi	r2,r2,24
  81a800:	10800017 	ldw	r2,0(r2)
  81a804:	2080ba2e 	bgeu	r4,r2,81aaf0 <alt_up_sd_card_read+0x37c>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                                  active_files[file_handle].current_sector_in_cluster;
  81a808:	008020f4 	movhi	r2,131
  81a80c:	109ab304 	addi	r2,r2,27340
  81a810:	11001417 	ldw	r4,80(r2)
  81a814:	e0bffe0f 	ldh	r2,-8(fp)
  81a818:	00c020f4 	movhi	r3,131
  81a81c:	18dac804 	addi	r3,r3,27424
  81a820:	100491ba 	slli	r2,r2,6
  81a824:	10c5883a 	add	r2,r2,r3
  81a828:	10800704 	addi	r2,r2,28
  81a82c:	10800017 	ldw	r2,0(r2)
  81a830:	10ffff84 	addi	r3,r2,-2
  81a834:	008020f4 	movhi	r2,131
  81a838:	109ab304 	addi	r2,r2,27340
  81a83c:	10800383 	ldbu	r2,14(r2)
  81a840:	10803fcc 	andi	r2,r2,255
  81a844:	1885383a 	mul	r2,r3,r2
  81a848:	2089883a 	add	r4,r4,r2
  81a84c:	e0bffe0f 	ldh	r2,-8(fp)
  81a850:	00c020f4 	movhi	r3,131
  81a854:	18dac804 	addi	r3,r3,27424
  81a858:	100491ba 	slli	r2,r2,6
  81a85c:	10c5883a 	add	r2,r2,r3
  81a860:	10800804 	addi	r2,r2,32
  81a864:	10800017 	ldw	r2,0(r2)
  81a868:	2085883a 	add	r2,r4,r2
  81a86c:	e0bffc15 	stw	r2,-16(fp)
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
  81a870:	e0bffe0f 	ldh	r2,-8(fp)
  81a874:	00c020f4 	movhi	r3,131
  81a878:	18dac804 	addi	r3,r3,27424
  81a87c:	100491ba 	slli	r2,r2,6
  81a880:	10c5883a 	add	r2,r2,r3
  81a884:	10800904 	addi	r2,r2,36
  81a888:	10800017 	ldw	r2,0(r2)
  81a88c:	1005003a 	cmpeq	r2,r2,zero
  81a890:	10006a1e 	bne	r2,zero,81aa3c <alt_up_sd_card_read+0x2c8>
  81a894:	e0bffe0f 	ldh	r2,-8(fp)
  81a898:	00c020f4 	movhi	r3,131
  81a89c:	18dac804 	addi	r3,r3,27424
  81a8a0:	100491ba 	slli	r2,r2,6
  81a8a4:	10c5883a 	add	r2,r2,r3
  81a8a8:	10800904 	addi	r2,r2,36
  81a8ac:	10800017 	ldw	r2,0(r2)
  81a8b0:	10807fcc 	andi	r2,r2,511
  81a8b4:	1004c03a 	cmpne	r2,r2,zero
  81a8b8:	1000601e 	bne	r2,zero,81aa3c <alt_up_sd_card_read+0x2c8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  81a8bc:	e0bffe0f 	ldh	r2,-8(fp)
  81a8c0:	00c020f4 	movhi	r3,131
  81a8c4:	18dac804 	addi	r3,r3,27424
  81a8c8:	100491ba 	slli	r2,r2,6
  81a8cc:	10c5883a 	add	r2,r2,r3
  81a8d0:	10800804 	addi	r2,r2,32
  81a8d4:	10c00017 	ldw	r3,0(r2)
  81a8d8:	008020f4 	movhi	r2,131
  81a8dc:	109ab304 	addi	r2,r2,27340
  81a8e0:	10800383 	ldbu	r2,14(r2)
  81a8e4:	10803fcc 	andi	r2,r2,255
  81a8e8:	10bfffc4 	addi	r2,r2,-1
  81a8ec:	1880411e 	bne	r3,r2,81a9f4 <alt_up_sd_card_read+0x280>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  81a8f0:	e0bffe0f 	ldh	r2,-8(fp)
  81a8f4:	00c020f4 	movhi	r3,131
  81a8f8:	18dac804 	addi	r3,r3,27424
  81a8fc:	100491ba 	slli	r2,r2,6
  81a900:	10c5883a 	add	r2,r2,r3
  81a904:	10800704 	addi	r2,r2,28
  81a908:	11000017 	ldw	r4,0(r2)
  81a90c:	e17ffd84 	addi	r5,fp,-10
  81a910:	08170e40 	call	8170e4 <get_cluster_flag>
  81a914:	1005003a 	cmpeq	r2,r2,zero
  81a918:	1000331e 	bne	r2,zero,81a9e8 <alt_up_sd_card_read+0x274>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  81a91c:	e0bffd8b 	ldhu	r2,-10(fp)
  81a920:	10bfffcc 	andi	r2,r2,65535
  81a924:	10fffe0c 	andi	r3,r2,65528
  81a928:	00bffe14 	movui	r2,65528
  81a92c:	1880031e 	bne	r3,r2,81a93c <alt_up_sd_card_read+0x1c8>
                            {
                                /* End of file */
                                return -1;
  81a930:	00bfffc4 	movi	r2,-1
  81a934:	e0bfff15 	stw	r2,-4(fp)
  81a938:	00006f06 	br	81aaf8 <alt_up_sd_card_read+0x384>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  81a93c:	e13ffe0f 	ldh	r4,-8(fp)
  81a940:	e0bffd8b 	ldhu	r2,-10(fp)
  81a944:	117fffcc 	andi	r5,r2,65535
  81a948:	00c020f4 	movhi	r3,131
  81a94c:	18dac804 	addi	r3,r3,27424
  81a950:	200491ba 	slli	r2,r4,6
  81a954:	10c5883a 	add	r2,r2,r3
  81a958:	10800704 	addi	r2,r2,28
  81a95c:	11400015 	stw	r5,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
  81a960:	e0bffe0f 	ldh	r2,-8(fp)
  81a964:	00c020f4 	movhi	r3,131
  81a968:	18dac804 	addi	r3,r3,27424
  81a96c:	100491ba 	slli	r2,r2,6
  81a970:	10c5883a 	add	r2,r2,r3
  81a974:	10800804 	addi	r2,r2,32
  81a978:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  81a97c:	008020f4 	movhi	r2,131
  81a980:	109ab304 	addi	r2,r2,27340
  81a984:	11001417 	ldw	r4,80(r2)
  81a988:	e0bffe0f 	ldh	r2,-8(fp)
  81a98c:	00c020f4 	movhi	r3,131
  81a990:	18dac804 	addi	r3,r3,27424
  81a994:	100491ba 	slli	r2,r2,6
  81a998:	10c5883a 	add	r2,r2,r3
  81a99c:	10800704 	addi	r2,r2,28
  81a9a0:	10800017 	ldw	r2,0(r2)
  81a9a4:	10ffff84 	addi	r3,r2,-2
  81a9a8:	008020f4 	movhi	r2,131
  81a9ac:	109ab304 	addi	r2,r2,27340
  81a9b0:	10800383 	ldbu	r2,14(r2)
  81a9b4:	10803fcc 	andi	r2,r2,255
  81a9b8:	1885383a 	mul	r2,r3,r2
  81a9bc:	2089883a 	add	r4,r4,r2
  81a9c0:	e0bffe0f 	ldh	r2,-8(fp)
  81a9c4:	00c020f4 	movhi	r3,131
  81a9c8:	18dac804 	addi	r3,r3,27424
  81a9cc:	100491ba 	slli	r2,r2,6
  81a9d0:	10c5883a 	add	r2,r2,r3
  81a9d4:	10800804 	addi	r2,r2,32
  81a9d8:	10800017 	ldw	r2,0(r2)
  81a9dc:	2085883a 	add	r2,r4,r2
  81a9e0:	e0bffc15 	stw	r2,-16(fp)
  81a9e4:	00001506 	br	81aa3c <alt_up_sd_card_read+0x2c8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
  81a9e8:	00bfff84 	movi	r2,-2
  81a9ec:	e0bfff15 	stw	r2,-4(fp)
  81a9f0:	00004106 	br	81aaf8 <alt_up_sd_card_read+0x384>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  81a9f4:	e17ffe0f 	ldh	r5,-8(fp)
  81a9f8:	e0bffe0f 	ldh	r2,-8(fp)
  81a9fc:	00c020f4 	movhi	r3,131
  81aa00:	18dac804 	addi	r3,r3,27424
  81aa04:	100491ba 	slli	r2,r2,6
  81aa08:	10c5883a 	add	r2,r2,r3
  81aa0c:	10800804 	addi	r2,r2,32
  81aa10:	10800017 	ldw	r2,0(r2)
  81aa14:	11000044 	addi	r4,r2,1
  81aa18:	00c020f4 	movhi	r3,131
  81aa1c:	18dac804 	addi	r3,r3,27424
  81aa20:	280491ba 	slli	r2,r5,6
  81aa24:	10c5883a 	add	r2,r2,r3
  81aa28:	10800804 	addi	r2,r2,32
  81aa2c:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
  81aa30:	e0bffc17 	ldw	r2,-16(fp)
  81aa34:	10800044 	addi	r2,r2,1
  81aa38:	e0bffc15 	stw	r2,-16(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
  81aa3c:	d0e07017 	ldw	r3,-32320(gp)
  81aa40:	e0bffc17 	ldw	r2,-16(fp)
  81aa44:	1885883a 	add	r2,r3,r2
  81aa48:	1007883a 	mov	r3,r2
  81aa4c:	d0a07417 	ldw	r2,-32304(gp)
  81aa50:	18800826 	beq	r3,r2,81aa74 <alt_up_sd_card_read+0x300>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  81aa54:	d1607017 	ldw	r5,-32320(gp)
  81aa58:	e13ffc17 	ldw	r4,-16(fp)
  81aa5c:	0816fe80 	call	816fe8 <Read_Sector_Data>
  81aa60:	1004c03a 	cmpne	r2,r2,zero
  81aa64:	1000031e 	bne	r2,zero,81aa74 <alt_up_sd_card_read+0x300>
                    {
						return -2;
  81aa68:	00bfff84 	movi	r2,-2
  81aa6c:	e0bfff15 	stw	r2,-4(fp)
  81aa70:	00002106 	br	81aaf8 <alt_up_sd_card_read+0x384>
                    }
                }

                ch = (signed char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
  81aa74:	e0bffe0f 	ldh	r2,-8(fp)
  81aa78:	00c020f4 	movhi	r3,131
  81aa7c:	18dac804 	addi	r3,r3,27424
  81aa80:	100491ba 	slli	r2,r2,6
  81aa84:	10c5883a 	add	r2,r2,r3
  81aa88:	10800904 	addi	r2,r2,36
  81aa8c:	10800017 	ldw	r2,0(r2)
  81aa90:	10807fcc 	andi	r2,r2,511
  81aa94:	1007883a 	mov	r3,r2
  81aa98:	d0a06f17 	ldw	r2,-32324(gp)
  81aa9c:	1885883a 	add	r2,r3,r2
  81aaa0:	10800023 	ldbuio	r2,0(r2)
  81aaa4:	10803fcc 	andi	r2,r2,255
  81aaa8:	1080201c 	xori	r2,r2,128
  81aaac:	10bfe004 	addi	r2,r2,-128
  81aab0:	e0bffd0d 	sth	r2,-12(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  81aab4:	e17ffe0f 	ldh	r5,-8(fp)
  81aab8:	e0bffe0f 	ldh	r2,-8(fp)
  81aabc:	00c020f4 	movhi	r3,131
  81aac0:	18dac804 	addi	r3,r3,27424
  81aac4:	100491ba 	slli	r2,r2,6
  81aac8:	10c5883a 	add	r2,r2,r3
  81aacc:	10800904 	addi	r2,r2,36
  81aad0:	10800017 	ldw	r2,0(r2)
  81aad4:	11000044 	addi	r4,r2,1
  81aad8:	00c020f4 	movhi	r3,131
  81aadc:	18dac804 	addi	r3,r3,27424
  81aae0:	280491ba 	slli	r2,r5,6
  81aae4:	10c5883a 	add	r2,r2,r3
  81aae8:	10800904 	addi	r2,r2,36
  81aaec:	11000015 	stw	r4,0(r2)
            }
        }
    }
    
    return ch;
  81aaf0:	e0bffd0f 	ldh	r2,-12(fp)
  81aaf4:	e0bfff15 	stw	r2,-4(fp)
  81aaf8:	e0bfff17 	ldw	r2,-4(fp)
}
  81aafc:	e037883a 	mov	sp,fp
  81ab00:	dfc00117 	ldw	ra,4(sp)
  81ab04:	df000017 	ldw	fp,0(sp)
  81ab08:	dec00204 	addi	sp,sp,8
  81ab0c:	f800283a 	ret

0081ab10 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  81ab10:	defff504 	addi	sp,sp,-44
  81ab14:	dfc00a15 	stw	ra,40(sp)
  81ab18:	df000915 	stw	fp,36(sp)
  81ab1c:	dc000815 	stw	r16,32(sp)
  81ab20:	df000804 	addi	fp,sp,32
  81ab24:	e13ffd0d 	sth	r4,-12(fp)
  81ab28:	e17ffe05 	stb	r5,-8(fp)
    bool result = false;
  81ab2c:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  81ab30:	e0bffd0f 	ldh	r2,-12(fp)
  81ab34:	1004803a 	cmplt	r2,r2,zero
  81ab38:	1001751e 	bne	r2,zero,81b110 <alt_up_sd_card_write+0x600>
  81ab3c:	e0bffd0f 	ldh	r2,-12(fp)
  81ab40:	10800508 	cmpgei	r2,r2,20
  81ab44:	1001721e 	bne	r2,zero,81b110 <alt_up_sd_card_write+0x600>
    {
        if (active_files[file_handle].in_use)
  81ab48:	e0bffd0f 	ldh	r2,-12(fp)
  81ab4c:	00c020f4 	movhi	r3,131
  81ab50:	18dac804 	addi	r3,r3,27424
  81ab54:	100491ba 	slli	r2,r2,6
  81ab58:	10c5883a 	add	r2,r2,r3
  81ab5c:	10800f04 	addi	r2,r2,60
  81ab60:	10800017 	ldw	r2,0(r2)
  81ab64:	1005003a 	cmpeq	r2,r2,zero
  81ab68:	1001691e 	bne	r2,zero,81b110 <alt_up_sd_card_write+0x600>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
  81ab6c:	008020f4 	movhi	r2,131
  81ab70:	109ab304 	addi	r2,r2,27340
  81ab74:	11001417 	ldw	r4,80(r2)
  81ab78:	e0bffd0f 	ldh	r2,-12(fp)
  81ab7c:	00c020f4 	movhi	r3,131
  81ab80:	18dac804 	addi	r3,r3,27424
  81ab84:	100491ba 	slli	r2,r2,6
  81ab88:	10c5883a 	add	r2,r2,r3
  81ab8c:	10800704 	addi	r2,r2,28
  81ab90:	10800017 	ldw	r2,0(r2)
  81ab94:	10ffff84 	addi	r3,r2,-2
  81ab98:	008020f4 	movhi	r2,131
  81ab9c:	109ab304 	addi	r2,r2,27340
  81aba0:	10800383 	ldbu	r2,14(r2)
  81aba4:	10803fcc 	andi	r2,r2,255
  81aba8:	1885383a 	mul	r2,r3,r2
  81abac:	2089883a 	add	r4,r4,r2
  81abb0:	e0bffd0f 	ldh	r2,-12(fp)
  81abb4:	00c020f4 	movhi	r3,131
  81abb8:	18dac804 	addi	r3,r3,27424
  81abbc:	100491ba 	slli	r2,r2,6
  81abc0:	10c5883a 	add	r2,r2,r3
  81abc4:	10800804 	addi	r2,r2,32
  81abc8:	10800017 	ldw	r2,0(r2)
  81abcc:	2085883a 	add	r2,r4,r2
  81abd0:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  81abd4:	e0bffd0f 	ldh	r2,-12(fp)
  81abd8:	00c020f4 	movhi	r3,131
  81abdc:	18dac804 	addi	r3,r3,27424
  81abe0:	100491ba 	slli	r2,r2,6
  81abe4:	10c5883a 	add	r2,r2,r3
  81abe8:	10800904 	addi	r2,r2,36
  81abec:	11000017 	ldw	r4,0(r2)
  81abf0:	008020f4 	movhi	r2,131
  81abf4:	109ab304 	addi	r2,r2,27340
  81abf8:	1080030b 	ldhu	r2,12(r2)
  81abfc:	117fffcc 	andi	r5,r2,65535
  81ac00:	080c4600 	call	80c460 <__umodsi3>
  81ac04:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  81ac08:	e0bffd0f 	ldh	r2,-12(fp)
  81ac0c:	00c020f4 	movhi	r3,131
  81ac10:	18dac804 	addi	r3,r3,27424
  81ac14:	100491ba 	slli	r2,r2,6
  81ac18:	10c5883a 	add	r2,r2,r3
  81ac1c:	10800904 	addi	r2,r2,36
  81ac20:	11000017 	ldw	r4,0(r2)
  81ac24:	e0bffd0f 	ldh	r2,-12(fp)
  81ac28:	00c020f4 	movhi	r3,131
  81ac2c:	18dac804 	addi	r3,r3,27424
  81ac30:	100491ba 	slli	r2,r2,6
  81ac34:	10c5883a 	add	r2,r2,r3
  81ac38:	10800604 	addi	r2,r2,24
  81ac3c:	10800017 	ldw	r2,0(r2)
  81ac40:	2080682e 	bgeu	r4,r2,81ade4 <alt_up_sd_card_write+0x2d4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  81ac44:	e0bffd0f 	ldh	r2,-12(fp)
  81ac48:	00c020f4 	movhi	r3,131
  81ac4c:	18dac804 	addi	r3,r3,27424
  81ac50:	100491ba 	slli	r2,r2,6
  81ac54:	10c5883a 	add	r2,r2,r3
  81ac58:	10800904 	addi	r2,r2,36
  81ac5c:	10800017 	ldw	r2,0(r2)
  81ac60:	1005003a 	cmpeq	r2,r2,zero
  81ac64:	1000de1e 	bne	r2,zero,81afe0 <alt_up_sd_card_write+0x4d0>
  81ac68:	e0bff80f 	ldh	r2,-32(fp)
  81ac6c:	1004c03a 	cmpne	r2,r2,zero
  81ac70:	1000db1e 	bne	r2,zero,81afe0 <alt_up_sd_card_write+0x4d0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  81ac74:	e0bffd0f 	ldh	r2,-12(fp)
  81ac78:	00c020f4 	movhi	r3,131
  81ac7c:	18dac804 	addi	r3,r3,27424
  81ac80:	100491ba 	slli	r2,r2,6
  81ac84:	10c5883a 	add	r2,r2,r3
  81ac88:	10800804 	addi	r2,r2,32
  81ac8c:	10c00017 	ldw	r3,0(r2)
  81ac90:	008020f4 	movhi	r2,131
  81ac94:	109ab304 	addi	r2,r2,27340
  81ac98:	10800383 	ldbu	r2,14(r2)
  81ac9c:	10803fcc 	andi	r2,r2,255
  81aca0:	10bfffc4 	addi	r2,r2,-1
  81aca4:	18803c1e 	bne	r3,r2,81ad98 <alt_up_sd_card_write+0x288>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  81aca8:	e0bffd0f 	ldh	r2,-12(fp)
  81acac:	00c020f4 	movhi	r3,131
  81acb0:	18dac804 	addi	r3,r3,27424
  81acb4:	100491ba 	slli	r2,r2,6
  81acb8:	10c5883a 	add	r2,r2,r3
  81acbc:	10800704 	addi	r2,r2,28
  81acc0:	11000017 	ldw	r4,0(r2)
  81acc4:	e17ffb04 	addi	r5,fp,-20
  81acc8:	08170e40 	call	8170e4 <get_cluster_flag>
  81accc:	1005003a 	cmpeq	r2,r2,zero
  81acd0:	10002f1e 	bne	r2,zero,81ad90 <alt_up_sd_card_write+0x280>
                        {
                            if (next_cluster < 0x0000fff8)
  81acd4:	e0bffb0b 	ldhu	r2,-20(fp)
  81acd8:	10ffffcc 	andi	r3,r2,65535
  81acdc:	00bffdd4 	movui	r2,65527
  81ace0:	10c0bf36 	bltu	r2,r3,81afe0 <alt_up_sd_card_write+0x4d0>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  81ace4:	e13ffd0f 	ldh	r4,-12(fp)
  81ace8:	e0bffb0b 	ldhu	r2,-20(fp)
  81acec:	117fffcc 	andi	r5,r2,65535
  81acf0:	00c020f4 	movhi	r3,131
  81acf4:	18dac804 	addi	r3,r3,27424
  81acf8:	200491ba 	slli	r2,r4,6
  81acfc:	10c5883a 	add	r2,r2,r3
  81ad00:	10800704 	addi	r2,r2,28
  81ad04:	11400015 	stw	r5,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
  81ad08:	e0bffd0f 	ldh	r2,-12(fp)
  81ad0c:	00c020f4 	movhi	r3,131
  81ad10:	18dac804 	addi	r3,r3,27424
  81ad14:	100491ba 	slli	r2,r2,6
  81ad18:	10c5883a 	add	r2,r2,r3
  81ad1c:	10800804 	addi	r2,r2,32
  81ad20:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  81ad24:	008020f4 	movhi	r2,131
  81ad28:	109ab304 	addi	r2,r2,27340
  81ad2c:	11001417 	ldw	r4,80(r2)
  81ad30:	e0bffd0f 	ldh	r2,-12(fp)
  81ad34:	00c020f4 	movhi	r3,131
  81ad38:	18dac804 	addi	r3,r3,27424
  81ad3c:	100491ba 	slli	r2,r2,6
  81ad40:	10c5883a 	add	r2,r2,r3
  81ad44:	10800704 	addi	r2,r2,28
  81ad48:	10800017 	ldw	r2,0(r2)
  81ad4c:	10ffff84 	addi	r3,r2,-2
  81ad50:	008020f4 	movhi	r2,131
  81ad54:	109ab304 	addi	r2,r2,27340
  81ad58:	10800383 	ldbu	r2,14(r2)
  81ad5c:	10803fcc 	andi	r2,r2,255
  81ad60:	1885383a 	mul	r2,r3,r2
  81ad64:	2089883a 	add	r4,r4,r2
  81ad68:	e0bffd0f 	ldh	r2,-12(fp)
  81ad6c:	00c020f4 	movhi	r3,131
  81ad70:	18dac804 	addi	r3,r3,27424
  81ad74:	100491ba 	slli	r2,r2,6
  81ad78:	10c5883a 	add	r2,r2,r3
  81ad7c:	10800804 	addi	r2,r2,32
  81ad80:	10800017 	ldw	r2,0(r2)
  81ad84:	2085883a 	add	r2,r4,r2
  81ad88:	e0bff915 	stw	r2,-28(fp)
  81ad8c:	00009406 	br	81afe0 <alt_up_sd_card_write+0x4d0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
  81ad90:	e03fff15 	stw	zero,-4(fp)
  81ad94:	0000e006 	br	81b118 <alt_up_sd_card_write+0x608>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  81ad98:	e17ffd0f 	ldh	r5,-12(fp)
  81ad9c:	e0bffd0f 	ldh	r2,-12(fp)
  81ada0:	00c020f4 	movhi	r3,131
  81ada4:	18dac804 	addi	r3,r3,27424
  81ada8:	100491ba 	slli	r2,r2,6
  81adac:	10c5883a 	add	r2,r2,r3
  81adb0:	10800804 	addi	r2,r2,32
  81adb4:	10800017 	ldw	r2,0(r2)
  81adb8:	11000044 	addi	r4,r2,1
  81adbc:	00c020f4 	movhi	r3,131
  81adc0:	18dac804 	addi	r3,r3,27424
  81adc4:	280491ba 	slli	r2,r5,6
  81adc8:	10c5883a 	add	r2,r2,r3
  81adcc:	10800804 	addi	r2,r2,32
  81add0:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
  81add4:	e0bff917 	ldw	r2,-28(fp)
  81add8:	10800044 	addi	r2,r2,1
  81addc:	e0bff915 	stw	r2,-28(fp)
  81ade0:	00007f06 	br	81afe0 <alt_up_sd_card_write+0x4d0>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  81ade4:	e0bffd0f 	ldh	r2,-12(fp)
  81ade8:	00c020f4 	movhi	r3,131
  81adec:	18dac804 	addi	r3,r3,27424
  81adf0:	100491ba 	slli	r2,r2,6
  81adf4:	10c5883a 	add	r2,r2,r3
  81adf8:	10800904 	addi	r2,r2,36
  81adfc:	10800017 	ldw	r2,0(r2)
  81ae00:	1005003a 	cmpeq	r2,r2,zero
  81ae04:	1000761e 	bne	r2,zero,81afe0 <alt_up_sd_card_write+0x4d0>
  81ae08:	e0bff80f 	ldh	r2,-32(fp)
  81ae0c:	1004c03a 	cmpne	r2,r2,zero
  81ae10:	1000731e 	bne	r2,zero,81afe0 <alt_up_sd_card_write+0x4d0>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  81ae14:	e0bffd0f 	ldh	r2,-12(fp)
  81ae18:	00c020f4 	movhi	r3,131
  81ae1c:	18dac804 	addi	r3,r3,27424
  81ae20:	100491ba 	slli	r2,r2,6
  81ae24:	10c5883a 	add	r2,r2,r3
  81ae28:	10800804 	addi	r2,r2,32
  81ae2c:	10c00017 	ldw	r3,0(r2)
  81ae30:	008020f4 	movhi	r2,131
  81ae34:	109ab304 	addi	r2,r2,27340
  81ae38:	10800383 	ldbu	r2,14(r2)
  81ae3c:	10803fcc 	andi	r2,r2,255
  81ae40:	10bfffc4 	addi	r2,r2,-1
  81ae44:	1880381e 	bne	r3,r2,81af28 <alt_up_sd_card_write+0x418>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
  81ae48:	e13ffc04 	addi	r4,fp,-16
  81ae4c:	08191300 	call	819130 <find_first_empty_cluster>
  81ae50:	1005003a 	cmpeq	r2,r2,zero
  81ae54:	1000321e 	bne	r2,zero,81af20 <alt_up_sd_card_write+0x410>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
  81ae58:	e0bffd0f 	ldh	r2,-12(fp)
  81ae5c:	00c020f4 	movhi	r3,131
  81ae60:	18dac804 	addi	r3,r3,27424
  81ae64:	100491ba 	slli	r2,r2,6
  81ae68:	10c5883a 	add	r2,r2,r3
  81ae6c:	10800704 	addi	r2,r2,28
  81ae70:	11000017 	ldw	r4,0(r2)
  81ae74:	e0bffc17 	ldw	r2,-16(fp)
  81ae78:	117fffcc 	andi	r5,r2,65535
  81ae7c:	2960001c 	xori	r5,r5,32768
  81ae80:	29600004 	addi	r5,r5,-32768
  81ae84:	01800044 	movi	r6,1
  81ae88:	081719c0 	call	81719c <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
  81ae8c:	e13ffc17 	ldw	r4,-16(fp)
  81ae90:	017fffc4 	movi	r5,-1
  81ae94:	01800044 	movi	r6,1
  81ae98:	081719c0 	call	81719c <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
  81ae9c:	e0bffd0f 	ldh	r2,-12(fp)
  81aea0:	00c020f4 	movhi	r3,131
  81aea4:	18dac804 	addi	r3,r3,27424
  81aea8:	100491ba 	slli	r2,r2,6
  81aeac:	10c5883a 	add	r2,r2,r3
  81aeb0:	10800704 	addi	r2,r2,28
  81aeb4:	11000017 	ldw	r4,0(r2)
  81aeb8:	e0bffc17 	ldw	r2,-16(fp)
  81aebc:	117fffcc 	andi	r5,r2,65535
  81aec0:	2960001c 	xori	r5,r5,32768
  81aec4:	29600004 	addi	r5,r5,-32768
  81aec8:	000d883a 	mov	r6,zero
  81aecc:	081719c0 	call	81719c <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
  81aed0:	e13ffc17 	ldw	r4,-16(fp)
  81aed4:	017fffc4 	movi	r5,-1
  81aed8:	000d883a 	mov	r6,zero
  81aedc:	081719c0 	call	81719c <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
  81aee0:	e0bffd0f 	ldh	r2,-12(fp)
  81aee4:	e13ffc17 	ldw	r4,-16(fp)
  81aee8:	00c020f4 	movhi	r3,131
  81aeec:	18dac804 	addi	r3,r3,27424
  81aef0:	100491ba 	slli	r2,r2,6
  81aef4:	10c5883a 	add	r2,r2,r3
  81aef8:	10800704 	addi	r2,r2,28
  81aefc:	11000015 	stw	r4,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
  81af00:	e0bffd0f 	ldh	r2,-12(fp)
  81af04:	00c020f4 	movhi	r3,131
  81af08:	18dac804 	addi	r3,r3,27424
  81af0c:	100491ba 	slli	r2,r2,6
  81af10:	10c5883a 	add	r2,r2,r3
  81af14:	10800804 	addi	r2,r2,32
  81af18:	10000015 	stw	zero,0(r2)
  81af1c:	00001606 	br	81af78 <alt_up_sd_card_write+0x468>
						}
						else
						{
							return false;
  81af20:	e03fff15 	stw	zero,-4(fp)
  81af24:	00007c06 	br	81b118 <alt_up_sd_card_write+0x608>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
  81af28:	e43ffd0f 	ldh	r16,-12(fp)
  81af2c:	e0bffd0f 	ldh	r2,-12(fp)
  81af30:	00c020f4 	movhi	r3,131
  81af34:	18dac804 	addi	r3,r3,27424
  81af38:	100491ba 	slli	r2,r2,6
  81af3c:	10c5883a 	add	r2,r2,r3
  81af40:	10800904 	addi	r2,r2,36
  81af44:	11000017 	ldw	r4,0(r2)
  81af48:	008020f4 	movhi	r2,131
  81af4c:	109ab304 	addi	r2,r2,27340
  81af50:	1080030b 	ldhu	r2,12(r2)
  81af54:	117fffcc 	andi	r5,r2,65535
  81af58:	080c4580 	call	80c458 <__udivsi3>
  81af5c:	1009883a 	mov	r4,r2
  81af60:	00c020f4 	movhi	r3,131
  81af64:	18dac804 	addi	r3,r3,27424
  81af68:	800491ba 	slli	r2,r16,6
  81af6c:	10c5883a 	add	r2,r2,r3
  81af70:	10800804 	addi	r2,r2,32
  81af74:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  81af78:	008020f4 	movhi	r2,131
  81af7c:	109ab304 	addi	r2,r2,27340
  81af80:	11001417 	ldw	r4,80(r2)
  81af84:	e0bffd0f 	ldh	r2,-12(fp)
  81af88:	00c020f4 	movhi	r3,131
  81af8c:	18dac804 	addi	r3,r3,27424
  81af90:	100491ba 	slli	r2,r2,6
  81af94:	10c5883a 	add	r2,r2,r3
  81af98:	10800704 	addi	r2,r2,28
  81af9c:	10800017 	ldw	r2,0(r2)
  81afa0:	10ffff84 	addi	r3,r2,-2
  81afa4:	008020f4 	movhi	r2,131
  81afa8:	109ab304 	addi	r2,r2,27340
  81afac:	10800383 	ldbu	r2,14(r2)
  81afb0:	10803fcc 	andi	r2,r2,255
  81afb4:	1885383a 	mul	r2,r3,r2
  81afb8:	2089883a 	add	r4,r4,r2
  81afbc:	e0bffd0f 	ldh	r2,-12(fp)
  81afc0:	00c020f4 	movhi	r3,131
  81afc4:	18dac804 	addi	r3,r3,27424
  81afc8:	100491ba 	slli	r2,r2,6
  81afcc:	10c5883a 	add	r2,r2,r3
  81afd0:	10800804 	addi	r2,r2,32
  81afd4:	10800017 	ldw	r2,0(r2)
  81afd8:	2085883a 	add	r2,r4,r2
  81afdc:	e0bff915 	stw	r2,-28(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
  81afe0:	d0e07017 	ldw	r3,-32320(gp)
  81afe4:	e0bff917 	ldw	r2,-28(fp)
  81afe8:	1885883a 	add	r2,r3,r2
  81afec:	1007883a 	mov	r3,r2
  81aff0:	d0a07417 	ldw	r2,-32304(gp)
  81aff4:	18800726 	beq	r3,r2,81b014 <alt_up_sd_card_write+0x504>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  81aff8:	d1607017 	ldw	r5,-32320(gp)
  81affc:	e13ff917 	ldw	r4,-28(fp)
  81b000:	0816fe80 	call	816fe8 <Read_Sector_Data>
  81b004:	1004c03a 	cmpne	r2,r2,zero
  81b008:	1000021e 	bne	r2,zero,81b014 <alt_up_sd_card_write+0x504>
                {
					return false;
  81b00c:	e03fff15 	stw	zero,-4(fp)
  81b010:	00004106 	br	81b118 <alt_up_sd_card_write+0x608>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  81b014:	e0bff80f 	ldh	r2,-32(fp)
  81b018:	1007883a 	mov	r3,r2
  81b01c:	d0a06f17 	ldw	r2,-32324(gp)
  81b020:	1885883a 	add	r2,r3,r2
  81b024:	e0fffe07 	ldb	r3,-8(fp)
  81b028:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  81b02c:	e17ffd0f 	ldh	r5,-12(fp)
  81b030:	e0bffd0f 	ldh	r2,-12(fp)
  81b034:	00c020f4 	movhi	r3,131
  81b038:	18dac804 	addi	r3,r3,27424
  81b03c:	100491ba 	slli	r2,r2,6
  81b040:	10c5883a 	add	r2,r2,r3
  81b044:	10800904 	addi	r2,r2,36
  81b048:	10800017 	ldw	r2,0(r2)
  81b04c:	11000044 	addi	r4,r2,1
  81b050:	00c020f4 	movhi	r3,131
  81b054:	18dac804 	addi	r3,r3,27424
  81b058:	280491ba 	slli	r2,r5,6
  81b05c:	10c5883a 	add	r2,r2,r3
  81b060:	10800904 	addi	r2,r2,36
  81b064:	11000015 	stw	r4,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
  81b068:	e0bffd0f 	ldh	r2,-12(fp)
  81b06c:	00c020f4 	movhi	r3,131
  81b070:	18dac804 	addi	r3,r3,27424
  81b074:	100491ba 	slli	r2,r2,6
  81b078:	10c5883a 	add	r2,r2,r3
  81b07c:	10800904 	addi	r2,r2,36
  81b080:	11000017 	ldw	r4,0(r2)
  81b084:	e0bffd0f 	ldh	r2,-12(fp)
  81b088:	00c020f4 	movhi	r3,131
  81b08c:	18dac804 	addi	r3,r3,27424
  81b090:	100491ba 	slli	r2,r2,6
  81b094:	10c5883a 	add	r2,r2,r3
  81b098:	10800604 	addi	r2,r2,24
  81b09c:	10800017 	ldw	r2,0(r2)
  81b0a0:	20801736 	bltu	r4,r2,81b100 <alt_up_sd_card_write+0x5f0>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
  81b0a4:	e17ffd0f 	ldh	r5,-12(fp)
  81b0a8:	e0bffd0f 	ldh	r2,-12(fp)
  81b0ac:	00c020f4 	movhi	r3,131
  81b0b0:	18dac804 	addi	r3,r3,27424
  81b0b4:	100491ba 	slli	r2,r2,6
  81b0b8:	10c5883a 	add	r2,r2,r3
  81b0bc:	10800604 	addi	r2,r2,24
  81b0c0:	10800017 	ldw	r2,0(r2)
  81b0c4:	11000044 	addi	r4,r2,1
  81b0c8:	00c020f4 	movhi	r3,131
  81b0cc:	18dac804 	addi	r3,r3,27424
  81b0d0:	280491ba 	slli	r2,r5,6
  81b0d4:	10c5883a 	add	r2,r2,r3
  81b0d8:	10800604 	addi	r2,r2,24
  81b0dc:	11000015 	stw	r4,0(r2)
				active_files[file_handle].modified = true;
  81b0e0:	e0bffd0f 	ldh	r2,-12(fp)
  81b0e4:	00c020f4 	movhi	r3,131
  81b0e8:	18dac804 	addi	r3,r3,27424
  81b0ec:	100491ba 	slli	r2,r2,6
  81b0f0:	10c5883a 	add	r2,r2,r3
  81b0f4:	10c00e04 	addi	r3,r2,56
  81b0f8:	00800044 	movi	r2,1
  81b0fc:	18800015 	stw	r2,0(r3)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
  81b100:	00800044 	movi	r2,1
  81b104:	d0a07315 	stw	r2,-32308(gp)
			result = true;
  81b108:	00800044 	movi	r2,1
  81b10c:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
  81b110:	e0bffa17 	ldw	r2,-24(fp)
  81b114:	e0bfff15 	stw	r2,-4(fp)
  81b118:	e0bfff17 	ldw	r2,-4(fp)
}
  81b11c:	e037883a 	mov	sp,fp
  81b120:	dfc00217 	ldw	ra,8(sp)
  81b124:	df000117 	ldw	fp,4(sp)
  81b128:	dc000017 	ldw	r16,0(sp)
  81b12c:	dec00304 	addi	sp,sp,12
  81b130:	f800283a 	ret

0081b134 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  81b134:	defffb04 	addi	sp,sp,-20
  81b138:	dfc00415 	stw	ra,16(sp)
  81b13c:	df000315 	stw	fp,12(sp)
  81b140:	df000304 	addi	fp,sp,12
  81b144:	e13fff0d 	sth	r4,-4(fp)
    bool result = false;
  81b148:	e03ffe15 	stw	zero,-8(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  81b14c:	0819cf00 	call	819cf0 <alt_up_sd_card_is_Present>
  81b150:	1005003a 	cmpeq	r2,r2,zero
  81b154:	1000641e 	bne	r2,zero,81b2e8 <alt_up_sd_card_fclose+0x1b4>
  81b158:	d0a06917 	ldw	r2,-32348(gp)
  81b15c:	1005003a 	cmpeq	r2,r2,zero
  81b160:	1000611e 	bne	r2,zero,81b2e8 <alt_up_sd_card_fclose+0x1b4>
    {
        if (active_files[file_handle].in_use) 
  81b164:	e0bfff0f 	ldh	r2,-4(fp)
  81b168:	00c020f4 	movhi	r3,131
  81b16c:	18dac804 	addi	r3,r3,27424
  81b170:	100491ba 	slli	r2,r2,6
  81b174:	10c5883a 	add	r2,r2,r3
  81b178:	10800f04 	addi	r2,r2,60
  81b17c:	10800017 	ldw	r2,0(r2)
  81b180:	1005003a 	cmpeq	r2,r2,zero
  81b184:	1000581e 	bne	r2,zero,81b2e8 <alt_up_sd_card_fclose+0x1b4>
        {
			if (active_files[file_handle].modified)
  81b188:	e0bfff0f 	ldh	r2,-4(fp)
  81b18c:	00c020f4 	movhi	r3,131
  81b190:	18dac804 	addi	r3,r3,27424
  81b194:	100491ba 	slli	r2,r2,6
  81b198:	10c5883a 	add	r2,r2,r3
  81b19c:	10800e04 	addi	r2,r2,56
  81b1a0:	10800017 	ldw	r2,0(r2)
  81b1a4:	1005003a 	cmpeq	r2,r2,zero
  81b1a8:	1000461e 	bne	r2,zero,81b2c4 <alt_up_sd_card_fclose+0x190>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
  81b1ac:	e0bfff0f 	ldh	r2,-4(fp)
  81b1b0:	00c020f4 	movhi	r3,131
  81b1b4:	18dac804 	addi	r3,r3,27424
  81b1b8:	100491ba 	slli	r2,r2,6
  81b1bc:	10c5883a 	add	r2,r2,r3
  81b1c0:	10800b04 	addi	r2,r2,44
  81b1c4:	10800017 	ldw	r2,0(r2)
  81b1c8:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0)
  81b1cc:	e0bfff0f 	ldh	r2,-4(fp)
  81b1d0:	00c020f4 	movhi	r3,131
  81b1d4:	18dac804 	addi	r3,r3,27424
  81b1d8:	100491ba 	slli	r2,r2,6
  81b1dc:	10c5883a 	add	r2,r2,r3
  81b1e0:	10800a04 	addi	r2,r2,40
  81b1e4:	10800017 	ldw	r2,0(r2)
  81b1e8:	1004c03a 	cmpne	r2,r2,zero
  81b1ec:	1000071e 	bne	r2,zero,81b20c <alt_up_sd_card_fclose+0xd8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
  81b1f0:	008020f4 	movhi	r2,131
  81b1f4:	109ab304 	addi	r2,r2,27340
  81b1f8:	10c01317 	ldw	r3,76(r2)
  81b1fc:	e0bffd17 	ldw	r2,-12(fp)
  81b200:	10c5883a 	add	r2,r2,r3
  81b204:	e0bffd15 	stw	r2,-12(fp)
  81b208:	00001406 	br	81b25c <alt_up_sd_card_fclose+0x128>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
  81b20c:	008020f4 	movhi	r2,131
  81b210:	109ab304 	addi	r2,r2,27340
  81b214:	10c01417 	ldw	r3,80(r2)
  81b218:	e0bffd17 	ldw	r2,-12(fp)
  81b21c:	1889883a 	add	r4,r3,r2
  81b220:	e0bfff0f 	ldh	r2,-4(fp)
  81b224:	00c020f4 	movhi	r3,131
  81b228:	18dac804 	addi	r3,r3,27424
  81b22c:	100491ba 	slli	r2,r2,6
  81b230:	10c5883a 	add	r2,r2,r3
  81b234:	10800a04 	addi	r2,r2,40
  81b238:	10800017 	ldw	r2,0(r2)
  81b23c:	10ffff84 	addi	r3,r2,-2
  81b240:	008020f4 	movhi	r2,131
  81b244:	109ab304 	addi	r2,r2,27340
  81b248:	10800383 	ldbu	r2,14(r2)
  81b24c:	10803fcc 	andi	r2,r2,255
  81b250:	1885383a 	mul	r2,r3,r2
  81b254:	2085883a 	add	r2,r4,r2
  81b258:	e0bffd15 	stw	r2,-12(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
  81b25c:	e13ffd17 	ldw	r4,-12(fp)
  81b260:	d1607017 	ldw	r5,-32320(gp)
  81b264:	0816fe80 	call	816fe8 <Read_Sector_Data>
  81b268:	1005003a 	cmpeq	r2,r2,zero
  81b26c:	1000151e 	bne	r2,zero,81b2c4 <alt_up_sd_card_fclose+0x190>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
  81b270:	e0bfff0f 	ldh	r2,-4(fp)
  81b274:	00c020f4 	movhi	r3,131
  81b278:	18dac804 	addi	r3,r3,27424
  81b27c:	100491ba 	slli	r2,r2,6
  81b280:	10c5883a 	add	r2,r2,r3
  81b284:	10800c04 	addi	r2,r2,48
  81b288:	1080000b 	ldhu	r2,0(r2)
  81b28c:	113fffcc 	andi	r4,r2,65535
  81b290:	2120001c 	xori	r4,r4,32768
  81b294:	21200004 	addi	r4,r4,-32768
  81b298:	e0bfff0f 	ldh	r2,-4(fp)
  81b29c:	100491ba 	slli	r2,r2,6
  81b2a0:	1007883a 	mov	r3,r2
  81b2a4:	008020f4 	movhi	r2,131
  81b2a8:	109ac804 	addi	r2,r2,27424
  81b2ac:	188b883a 	add	r5,r3,r2
  81b2b0:	08176b40 	call	8176b4 <Write_File_Record_At_Offset>
  81b2b4:	1005003a 	cmpeq	r2,r2,zero
  81b2b8:	1000021e 	bne	r2,zero,81b2c4 <alt_up_sd_card_fclose+0x190>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
  81b2bc:	0816f980 	call	816f98 <Save_Modified_Sector>
  81b2c0:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
  81b2c4:	e0bfff0f 	ldh	r2,-4(fp)
  81b2c8:	00c020f4 	movhi	r3,131
  81b2cc:	18dac804 	addi	r3,r3,27424
  81b2d0:	100491ba 	slli	r2,r2,6
  81b2d4:	10c5883a 	add	r2,r2,r3
  81b2d8:	10800f04 	addi	r2,r2,60
  81b2dc:	10000015 	stw	zero,0(r2)
			result = true;
  81b2e0:	00800044 	movi	r2,1
  81b2e4:	e0bffe15 	stw	r2,-8(fp)
        }
    }
    
    return result;
  81b2e8:	e0bffe17 	ldw	r2,-8(fp)
}
  81b2ec:	e037883a 	mov	sp,fp
  81b2f0:	dfc00117 	ldw	ra,4(sp)
  81b2f4:	df000017 	ldw	fp,0(sp)
  81b2f8:	dec00204 	addi	sp,sp,8
  81b2fc:	f800283a 	ret

0081b300 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  81b300:	defff404 	addi	sp,sp,-48
  81b304:	df000b15 	stw	fp,44(sp)
  81b308:	df000b04 	addi	fp,sp,44
  81b30c:	e13ffb15 	stw	r4,-20(fp)
  81b310:	e17ffc15 	stw	r5,-16(fp)
  81b314:	e1bffd15 	stw	r6,-12(fp)
  81b318:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81b31c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81b320:	008020b4 	movhi	r2,130
  81b324:	10bcdd04 	addi	r2,r2,-3212
  81b328:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  81b32c:	1005003a 	cmpeq	r2,r2,zero
  81b330:	1000411e 	bne	r2,zero,81b438 <alt_alarm_start+0x138>
  {
    if (alarm)
  81b334:	e0bffb17 	ldw	r2,-20(fp)
  81b338:	1005003a 	cmpeq	r2,r2,zero
  81b33c:	10003b1e 	bne	r2,zero,81b42c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  81b340:	e0fffb17 	ldw	r3,-20(fp)
  81b344:	e0bffd17 	ldw	r2,-12(fp)
  81b348:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  81b34c:	e0fffb17 	ldw	r3,-20(fp)
  81b350:	e0bffe17 	ldw	r2,-8(fp)
  81b354:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b358:	0005303a 	rdctl	r2,status
  81b35c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b360:	e0fff817 	ldw	r3,-32(fp)
  81b364:	00bfff84 	movi	r2,-2
  81b368:	1884703a 	and	r2,r3,r2
  81b36c:	1001703a 	wrctl	status,r2
  
  return context;
  81b370:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81b374:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81b378:	008020b4 	movhi	r2,130
  81b37c:	10bcde04 	addi	r2,r2,-3208
  81b380:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81b384:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81b388:	e0fffc17 	ldw	r3,-16(fp)
  81b38c:	e0bff917 	ldw	r2,-28(fp)
  81b390:	1885883a 	add	r2,r3,r2
  81b394:	10c00044 	addi	r3,r2,1
  81b398:	e0bffb17 	ldw	r2,-20(fp)
  81b39c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81b3a0:	e0bffb17 	ldw	r2,-20(fp)
  81b3a4:	10c00217 	ldw	r3,8(r2)
  81b3a8:	e0bff917 	ldw	r2,-28(fp)
  81b3ac:	1880042e 	bgeu	r3,r2,81b3c0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  81b3b0:	e0fffb17 	ldw	r3,-20(fp)
  81b3b4:	00800044 	movi	r2,1
  81b3b8:	18800405 	stb	r2,16(r3)
  81b3bc:	00000206 	br	81b3c8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  81b3c0:	e0bffb17 	ldw	r2,-20(fp)
  81b3c4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81b3c8:	e0fffb17 	ldw	r3,-20(fp)
  81b3cc:	008020b4 	movhi	r2,130
  81b3d0:	10bc9504 	addi	r2,r2,-3500
  81b3d4:	e0bff615 	stw	r2,-40(fp)
  81b3d8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81b3dc:	e0fff717 	ldw	r3,-36(fp)
  81b3e0:	e0bff617 	ldw	r2,-40(fp)
  81b3e4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81b3e8:	e0bff617 	ldw	r2,-40(fp)
  81b3ec:	10c00017 	ldw	r3,0(r2)
  81b3f0:	e0bff717 	ldw	r2,-36(fp)
  81b3f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81b3f8:	e0bff617 	ldw	r2,-40(fp)
  81b3fc:	10c00017 	ldw	r3,0(r2)
  81b400:	e0bff717 	ldw	r2,-36(fp)
  81b404:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81b408:	e0fff617 	ldw	r3,-40(fp)
  81b40c:	e0bff717 	ldw	r2,-36(fp)
  81b410:	18800015 	stw	r2,0(r3)
  81b414:	e0bffa17 	ldw	r2,-24(fp)
  81b418:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b41c:	e0bff517 	ldw	r2,-44(fp)
  81b420:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81b424:	e03fff15 	stw	zero,-4(fp)
  81b428:	00000506 	br	81b440 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  81b42c:	00bffa84 	movi	r2,-22
  81b430:	e0bfff15 	stw	r2,-4(fp)
  81b434:	00000206 	br	81b440 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  81b438:	00bfde84 	movi	r2,-134
  81b43c:	e0bfff15 	stw	r2,-4(fp)
  81b440:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81b444:	e037883a 	mov	sp,fp
  81b448:	df000017 	ldw	fp,0(sp)
  81b44c:	dec00104 	addi	sp,sp,4
  81b450:	f800283a 	ret

0081b454 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81b454:	defff904 	addi	sp,sp,-28
  81b458:	dfc00615 	stw	ra,24(sp)
  81b45c:	df000515 	stw	fp,20(sp)
  81b460:	df000504 	addi	fp,sp,20
  81b464:	e13ffd15 	stw	r4,-12(fp)
  81b468:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81b46c:	e0bffd17 	ldw	r2,-12(fp)
  81b470:	1005003a 	cmpeq	r2,r2,zero
  81b474:	1000041e 	bne	r2,zero,81b488 <alt_dev_llist_insert+0x34>
  81b478:	e0bffd17 	ldw	r2,-12(fp)
  81b47c:	10800217 	ldw	r2,8(r2)
  81b480:	1004c03a 	cmpne	r2,r2,zero
  81b484:	1000071e 	bne	r2,zero,81b4a4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  81b488:	081b5080 	call	81b508 <alt_get_errno>
  81b48c:	1007883a 	mov	r3,r2
  81b490:	00800584 	movi	r2,22
  81b494:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81b498:	00bffa84 	movi	r2,-22
  81b49c:	e0bfff15 	stw	r2,-4(fp)
  81b4a0:	00001306 	br	81b4f0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  81b4a4:	e0fffd17 	ldw	r3,-12(fp)
  81b4a8:	e0bffe17 	ldw	r2,-8(fp)
  81b4ac:	e0bffb15 	stw	r2,-20(fp)
  81b4b0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81b4b4:	e0fffc17 	ldw	r3,-16(fp)
  81b4b8:	e0bffb17 	ldw	r2,-20(fp)
  81b4bc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81b4c0:	e0bffb17 	ldw	r2,-20(fp)
  81b4c4:	10c00017 	ldw	r3,0(r2)
  81b4c8:	e0bffc17 	ldw	r2,-16(fp)
  81b4cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81b4d0:	e0bffb17 	ldw	r2,-20(fp)
  81b4d4:	10c00017 	ldw	r3,0(r2)
  81b4d8:	e0bffc17 	ldw	r2,-16(fp)
  81b4dc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81b4e0:	e0fffb17 	ldw	r3,-20(fp)
  81b4e4:	e0bffc17 	ldw	r2,-16(fp)
  81b4e8:	18800015 	stw	r2,0(r3)

  return 0;  
  81b4ec:	e03fff15 	stw	zero,-4(fp)
  81b4f0:	e0bfff17 	ldw	r2,-4(fp)
}
  81b4f4:	e037883a 	mov	sp,fp
  81b4f8:	dfc00117 	ldw	ra,4(sp)
  81b4fc:	df000017 	ldw	fp,0(sp)
  81b500:	dec00204 	addi	sp,sp,8
  81b504:	f800283a 	ret

0081b508 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81b508:	defffd04 	addi	sp,sp,-12
  81b50c:	dfc00215 	stw	ra,8(sp)
  81b510:	df000115 	stw	fp,4(sp)
  81b514:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81b518:	008020b4 	movhi	r2,130
  81b51c:	10bc7304 	addi	r2,r2,-3636
  81b520:	10800017 	ldw	r2,0(r2)
  81b524:	1005003a 	cmpeq	r2,r2,zero
  81b528:	1000061e 	bne	r2,zero,81b544 <alt_get_errno+0x3c>
  81b52c:	008020b4 	movhi	r2,130
  81b530:	10bc7304 	addi	r2,r2,-3636
  81b534:	10800017 	ldw	r2,0(r2)
  81b538:	103ee83a 	callr	r2
  81b53c:	e0bfff15 	stw	r2,-4(fp)
  81b540:	00000306 	br	81b550 <alt_get_errno+0x48>
  81b544:	008020b4 	movhi	r2,130
  81b548:	10bcb204 	addi	r2,r2,-3384
  81b54c:	e0bfff15 	stw	r2,-4(fp)
  81b550:	e0bfff17 	ldw	r2,-4(fp)
}
  81b554:	e037883a 	mov	sp,fp
  81b558:	dfc00117 	ldw	ra,4(sp)
  81b55c:	df000017 	ldw	fp,0(sp)
  81b560:	dec00204 	addi	sp,sp,8
  81b564:	f800283a 	ret

0081b568 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81b568:	defffd04 	addi	sp,sp,-12
  81b56c:	dfc00215 	stw	ra,8(sp)
  81b570:	df000115 	stw	fp,4(sp)
  81b574:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81b578:	00bfff04 	movi	r2,-4
  81b57c:	00c020b4 	movhi	r3,130
  81b580:	18f32604 	addi	r3,r3,-13160
  81b584:	1885883a 	add	r2,r3,r2
  81b588:	e0bfff15 	stw	r2,-4(fp)
  81b58c:	00000606 	br	81b5a8 <_do_ctors+0x40>
        (*ctor) (); 
  81b590:	e0bfff17 	ldw	r2,-4(fp)
  81b594:	10800017 	ldw	r2,0(r2)
  81b598:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81b59c:	e0bfff17 	ldw	r2,-4(fp)
  81b5a0:	10bfff04 	addi	r2,r2,-4
  81b5a4:	e0bfff15 	stw	r2,-4(fp)
  81b5a8:	e0ffff17 	ldw	r3,-4(fp)
  81b5ac:	008020b4 	movhi	r2,130
  81b5b0:	10b32504 	addi	r2,r2,-13164
  81b5b4:	18bff62e 	bgeu	r3,r2,81b590 <_do_ctors+0x28>
        (*ctor) (); 
}
  81b5b8:	e037883a 	mov	sp,fp
  81b5bc:	dfc00117 	ldw	ra,4(sp)
  81b5c0:	df000017 	ldw	fp,0(sp)
  81b5c4:	dec00204 	addi	sp,sp,8
  81b5c8:	f800283a 	ret

0081b5cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81b5cc:	defffd04 	addi	sp,sp,-12
  81b5d0:	dfc00215 	stw	ra,8(sp)
  81b5d4:	df000115 	stw	fp,4(sp)
  81b5d8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81b5dc:	00bfff04 	movi	r2,-4
  81b5e0:	00c020b4 	movhi	r3,130
  81b5e4:	18f32604 	addi	r3,r3,-13160
  81b5e8:	1885883a 	add	r2,r3,r2
  81b5ec:	e0bfff15 	stw	r2,-4(fp)
  81b5f0:	00000606 	br	81b60c <_do_dtors+0x40>
        (*dtor) (); 
  81b5f4:	e0bfff17 	ldw	r2,-4(fp)
  81b5f8:	10800017 	ldw	r2,0(r2)
  81b5fc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81b600:	e0bfff17 	ldw	r2,-4(fp)
  81b604:	10bfff04 	addi	r2,r2,-4
  81b608:	e0bfff15 	stw	r2,-4(fp)
  81b60c:	e0ffff17 	ldw	r3,-4(fp)
  81b610:	008020b4 	movhi	r2,130
  81b614:	10b32604 	addi	r2,r2,-13160
  81b618:	18bff62e 	bgeu	r3,r2,81b5f4 <_do_dtors+0x28>
        (*dtor) (); 
}
  81b61c:	e037883a 	mov	sp,fp
  81b620:	dfc00117 	ldw	ra,4(sp)
  81b624:	df000017 	ldw	fp,0(sp)
  81b628:	dec00204 	addi	sp,sp,8
  81b62c:	f800283a 	ret

0081b630 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81b630:	defff904 	addi	sp,sp,-28
  81b634:	dfc00615 	stw	ra,24(sp)
  81b638:	df000515 	stw	fp,20(sp)
  81b63c:	df000504 	addi	fp,sp,20
  81b640:	e13ffd15 	stw	r4,-12(fp)
  81b644:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81b648:	e0bffe17 	ldw	r2,-8(fp)
  81b64c:	10800017 	ldw	r2,0(r2)
  81b650:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81b654:	e13ffd17 	ldw	r4,-12(fp)
  81b658:	08044400 	call	804440 <strlen>
  81b65c:	10800044 	addi	r2,r2,1
  81b660:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81b664:	00000d06 	br	81b69c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81b668:	e0bffc17 	ldw	r2,-16(fp)
  81b66c:	11000217 	ldw	r4,8(r2)
  81b670:	e1bffb17 	ldw	r6,-20(fp)
  81b674:	e17ffd17 	ldw	r5,-12(fp)
  81b678:	081c5940 	call	81c594 <memcmp>
  81b67c:	1004c03a 	cmpne	r2,r2,zero
  81b680:	1000031e 	bne	r2,zero,81b690 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81b684:	e0bffc17 	ldw	r2,-16(fp)
  81b688:	e0bfff15 	stw	r2,-4(fp)
  81b68c:	00000706 	br	81b6ac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81b690:	e0bffc17 	ldw	r2,-16(fp)
  81b694:	10800017 	ldw	r2,0(r2)
  81b698:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81b69c:	e0fffe17 	ldw	r3,-8(fp)
  81b6a0:	e0bffc17 	ldw	r2,-16(fp)
  81b6a4:	10fff01e 	bne	r2,r3,81b668 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81b6a8:	e03fff15 	stw	zero,-4(fp)
  81b6ac:	e0bfff17 	ldw	r2,-4(fp)
}
  81b6b0:	e037883a 	mov	sp,fp
  81b6b4:	dfc00117 	ldw	ra,4(sp)
  81b6b8:	df000017 	ldw	fp,0(sp)
  81b6bc:	dec00204 	addi	sp,sp,8
  81b6c0:	f800283a 	ret

0081b6c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81b6c4:	defff904 	addi	sp,sp,-28
  81b6c8:	dfc00615 	stw	ra,24(sp)
  81b6cc:	df000515 	stw	fp,20(sp)
  81b6d0:	df000504 	addi	fp,sp,20
  81b6d4:	e13ffc15 	stw	r4,-16(fp)
  81b6d8:	e17ffd15 	stw	r5,-12(fp)
  81b6dc:	e1bffe15 	stw	r6,-8(fp)
  81b6e0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81b6e4:	e13ffd17 	ldw	r4,-12(fp)
  81b6e8:	e17ffe17 	ldw	r5,-8(fp)
  81b6ec:	e1bfff17 	ldw	r6,-4(fp)
  81b6f0:	081ba9c0 	call	81ba9c <open>
  81b6f4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81b6f8:	e0bffb17 	ldw	r2,-20(fp)
  81b6fc:	1004803a 	cmplt	r2,r2,zero
  81b700:	10001c1e 	bne	r2,zero,81b774 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81b704:	e0bffb17 	ldw	r2,-20(fp)
  81b708:	00c020b4 	movhi	r3,130
  81b70c:	18f7cb04 	addi	r3,r3,-8404
  81b710:	10800324 	muli	r2,r2,12
  81b714:	10c5883a 	add	r2,r2,r3
  81b718:	10c00017 	ldw	r3,0(r2)
  81b71c:	e0bffc17 	ldw	r2,-16(fp)
  81b720:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81b724:	e0bffb17 	ldw	r2,-20(fp)
  81b728:	00c020b4 	movhi	r3,130
  81b72c:	18f7cb04 	addi	r3,r3,-8404
  81b730:	10800324 	muli	r2,r2,12
  81b734:	10c5883a 	add	r2,r2,r3
  81b738:	10800104 	addi	r2,r2,4
  81b73c:	10c00017 	ldw	r3,0(r2)
  81b740:	e0bffc17 	ldw	r2,-16(fp)
  81b744:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81b748:	e0bffb17 	ldw	r2,-20(fp)
  81b74c:	00c020b4 	movhi	r3,130
  81b750:	18f7cb04 	addi	r3,r3,-8404
  81b754:	10800324 	muli	r2,r2,12
  81b758:	10c5883a 	add	r2,r2,r3
  81b75c:	10800204 	addi	r2,r2,8
  81b760:	10c00017 	ldw	r3,0(r2)
  81b764:	e0bffc17 	ldw	r2,-16(fp)
  81b768:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81b76c:	e13ffb17 	ldw	r4,-20(fp)
  81b770:	080ce740 	call	80ce74 <alt_release_fd>
  }
} 
  81b774:	e037883a 	mov	sp,fp
  81b778:	dfc00117 	ldw	ra,4(sp)
  81b77c:	df000017 	ldw	fp,0(sp)
  81b780:	dec00204 	addi	sp,sp,8
  81b784:	f800283a 	ret

0081b788 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81b788:	defffb04 	addi	sp,sp,-20
  81b78c:	dfc00415 	stw	ra,16(sp)
  81b790:	df000315 	stw	fp,12(sp)
  81b794:	df000304 	addi	fp,sp,12
  81b798:	e13ffd15 	stw	r4,-12(fp)
  81b79c:	e17ffe15 	stw	r5,-8(fp)
  81b7a0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81b7a4:	010020b4 	movhi	r4,130
  81b7a8:	2137ce04 	addi	r4,r4,-8392
  81b7ac:	e17ffd17 	ldw	r5,-12(fp)
  81b7b0:	01800044 	movi	r6,1
  81b7b4:	01c07fc4 	movi	r7,511
  81b7b8:	081b6c40 	call	81b6c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81b7bc:	010020b4 	movhi	r4,130
  81b7c0:	2137cb04 	addi	r4,r4,-8404
  81b7c4:	e17ffe17 	ldw	r5,-8(fp)
  81b7c8:	000d883a 	mov	r6,zero
  81b7cc:	01c07fc4 	movi	r7,511
  81b7d0:	081b6c40 	call	81b6c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81b7d4:	010020b4 	movhi	r4,130
  81b7d8:	2137d104 	addi	r4,r4,-8380
  81b7dc:	e17fff17 	ldw	r5,-4(fp)
  81b7e0:	01800044 	movi	r6,1
  81b7e4:	01c07fc4 	movi	r7,511
  81b7e8:	081b6c40 	call	81b6c4 <alt_open_fd>
}  
  81b7ec:	e037883a 	mov	sp,fp
  81b7f0:	dfc00117 	ldw	ra,4(sp)
  81b7f4:	df000017 	ldw	fp,0(sp)
  81b7f8:	dec00204 	addi	sp,sp,8
  81b7fc:	f800283a 	ret

0081b800 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  81b800:	deffef04 	addi	sp,sp,-68
  81b804:	df001015 	stw	fp,64(sp)
  81b808:	df001004 	addi	fp,sp,64
  81b80c:	e13ffc15 	stw	r4,-16(fp)
  81b810:	e17ffd15 	stw	r5,-12(fp)
  81b814:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  81b818:	00bffa84 	movi	r2,-22
  81b81c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  81b820:	e0bffc17 	ldw	r2,-16(fp)
  81b824:	10800828 	cmpgeui	r2,r2,32
  81b828:	1000601e 	bne	r2,zero,81b9ac <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b82c:	0005303a 	rdctl	r2,status
  81b830:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b834:	e0fff917 	ldw	r3,-28(fp)
  81b838:	00bfff84 	movi	r2,-2
  81b83c:	1884703a 	and	r2,r3,r2
  81b840:	1001703a 	wrctl	status,r2
  
  return context;
  81b844:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  81b848:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  81b84c:	e0bffc17 	ldw	r2,-16(fp)
  81b850:	00c020f4 	movhi	r3,131
  81b854:	18dc0804 	addi	r3,r3,28704
  81b858:	100490fa 	slli	r2,r2,3
  81b85c:	10c7883a 	add	r3,r2,r3
  81b860:	e0bffe17 	ldw	r2,-8(fp)
  81b864:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  81b868:	e0bffc17 	ldw	r2,-16(fp)
  81b86c:	00c020f4 	movhi	r3,131
  81b870:	18dc0804 	addi	r3,r3,28704
  81b874:	100490fa 	slli	r2,r2,3
  81b878:	10c5883a 	add	r2,r2,r3
  81b87c:	10c00104 	addi	r3,r2,4
  81b880:	e0bffd17 	ldw	r2,-12(fp)
  81b884:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  81b888:	e0bffe17 	ldw	r2,-8(fp)
  81b88c:	1005003a 	cmpeq	r2,r2,zero
  81b890:	1000201e 	bne	r2,zero,81b914 <alt_irq_register+0x114>
  81b894:	e0bffc17 	ldw	r2,-16(fp)
  81b898:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b89c:	0005303a 	rdctl	r2,status
  81b8a0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b8a4:	e0fff617 	ldw	r3,-40(fp)
  81b8a8:	00bfff84 	movi	r2,-2
  81b8ac:	1884703a 	and	r2,r3,r2
  81b8b0:	1001703a 	wrctl	status,r2
  
  return context;
  81b8b4:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81b8b8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  81b8bc:	e0fff717 	ldw	r3,-36(fp)
  81b8c0:	00800044 	movi	r2,1
  81b8c4:	10c4983a 	sll	r2,r2,r3
  81b8c8:	1007883a 	mov	r3,r2
  81b8cc:	008020b4 	movhi	r2,130
  81b8d0:	10bcdc04 	addi	r2,r2,-3216
  81b8d4:	10800017 	ldw	r2,0(r2)
  81b8d8:	1886b03a 	or	r3,r3,r2
  81b8dc:	008020b4 	movhi	r2,130
  81b8e0:	10bcdc04 	addi	r2,r2,-3216
  81b8e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81b8e8:	008020b4 	movhi	r2,130
  81b8ec:	10bcdc04 	addi	r2,r2,-3216
  81b8f0:	10800017 	ldw	r2,0(r2)
  81b8f4:	100170fa 	wrctl	ienable,r2
  81b8f8:	e0bff817 	ldw	r2,-32(fp)
  81b8fc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b900:	e0bff517 	ldw	r2,-44(fp)
  81b904:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81b908:	0005883a 	mov	r2,zero
  81b90c:	e0bfff15 	stw	r2,-4(fp)
  81b910:	00002006 	br	81b994 <alt_irq_register+0x194>
  81b914:	e0bffc17 	ldw	r2,-16(fp)
  81b918:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b91c:	0005303a 	rdctl	r2,status
  81b920:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b924:	e0fff217 	ldw	r3,-56(fp)
  81b928:	00bfff84 	movi	r2,-2
  81b92c:	1884703a 	and	r2,r3,r2
  81b930:	1001703a 	wrctl	status,r2
  
  return context;
  81b934:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81b938:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  81b93c:	e0fff317 	ldw	r3,-52(fp)
  81b940:	00800044 	movi	r2,1
  81b944:	10c4983a 	sll	r2,r2,r3
  81b948:	0084303a 	nor	r2,zero,r2
  81b94c:	1007883a 	mov	r3,r2
  81b950:	008020b4 	movhi	r2,130
  81b954:	10bcdc04 	addi	r2,r2,-3216
  81b958:	10800017 	ldw	r2,0(r2)
  81b95c:	1886703a 	and	r3,r3,r2
  81b960:	008020b4 	movhi	r2,130
  81b964:	10bcdc04 	addi	r2,r2,-3216
  81b968:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81b96c:	008020b4 	movhi	r2,130
  81b970:	10bcdc04 	addi	r2,r2,-3216
  81b974:	10800017 	ldw	r2,0(r2)
  81b978:	100170fa 	wrctl	ienable,r2
  81b97c:	e0bff417 	ldw	r2,-48(fp)
  81b980:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b984:	e0bff117 	ldw	r2,-60(fp)
  81b988:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81b98c:	0005883a 	mov	r2,zero
  81b990:	e0bfff15 	stw	r2,-4(fp)
  81b994:	e0bfff17 	ldw	r2,-4(fp)
  81b998:	e0bffb15 	stw	r2,-20(fp)
  81b99c:	e0bffa17 	ldw	r2,-24(fp)
  81b9a0:	e0bff015 	stw	r2,-64(fp)
  81b9a4:	e0bff017 	ldw	r2,-64(fp)
  81b9a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  81b9ac:	e0bffb17 	ldw	r2,-20(fp)
}
  81b9b0:	e037883a 	mov	sp,fp
  81b9b4:	df000017 	ldw	fp,0(sp)
  81b9b8:	dec00104 	addi	sp,sp,4
  81b9bc:	f800283a 	ret

0081b9c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81b9c0:	defffc04 	addi	sp,sp,-16
  81b9c4:	df000315 	stw	fp,12(sp)
  81b9c8:	df000304 	addi	fp,sp,12
  81b9cc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81b9d0:	e0bffe17 	ldw	r2,-8(fp)
  81b9d4:	10800217 	ldw	r2,8(r2)
  81b9d8:	10d00034 	orhi	r3,r2,16384
  81b9dc:	e0bffe17 	ldw	r2,-8(fp)
  81b9e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81b9e4:	e03ffd15 	stw	zero,-12(fp)
  81b9e8:	00002006 	br	81ba6c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81b9ec:	e0bffd17 	ldw	r2,-12(fp)
  81b9f0:	00c020b4 	movhi	r3,130
  81b9f4:	18f7cb04 	addi	r3,r3,-8404
  81b9f8:	10800324 	muli	r2,r2,12
  81b9fc:	10c5883a 	add	r2,r2,r3
  81ba00:	10c00017 	ldw	r3,0(r2)
  81ba04:	e0bffe17 	ldw	r2,-8(fp)
  81ba08:	10800017 	ldw	r2,0(r2)
  81ba0c:	1880141e 	bne	r3,r2,81ba60 <alt_file_locked+0xa0>
  81ba10:	e0bffd17 	ldw	r2,-12(fp)
  81ba14:	00c020b4 	movhi	r3,130
  81ba18:	18f7cb04 	addi	r3,r3,-8404
  81ba1c:	10800324 	muli	r2,r2,12
  81ba20:	10c5883a 	add	r2,r2,r3
  81ba24:	10800204 	addi	r2,r2,8
  81ba28:	10800017 	ldw	r2,0(r2)
  81ba2c:	1004403a 	cmpge	r2,r2,zero
  81ba30:	10000b1e 	bne	r2,zero,81ba60 <alt_file_locked+0xa0>
  81ba34:	e0bffd17 	ldw	r2,-12(fp)
  81ba38:	10800324 	muli	r2,r2,12
  81ba3c:	1007883a 	mov	r3,r2
  81ba40:	008020b4 	movhi	r2,130
  81ba44:	10b7cb04 	addi	r2,r2,-8404
  81ba48:	1887883a 	add	r3,r3,r2
  81ba4c:	e0bffe17 	ldw	r2,-8(fp)
  81ba50:	18800326 	beq	r3,r2,81ba60 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81ba54:	00bffcc4 	movi	r2,-13
  81ba58:	e0bfff15 	stw	r2,-4(fp)
  81ba5c:	00000a06 	br	81ba88 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81ba60:	e0bffd17 	ldw	r2,-12(fp)
  81ba64:	10800044 	addi	r2,r2,1
  81ba68:	e0bffd15 	stw	r2,-12(fp)
  81ba6c:	008020b4 	movhi	r2,130
  81ba70:	10bc7204 	addi	r2,r2,-3640
  81ba74:	10800017 	ldw	r2,0(r2)
  81ba78:	1007883a 	mov	r3,r2
  81ba7c:	e0bffd17 	ldw	r2,-12(fp)
  81ba80:	18bfda2e 	bgeu	r3,r2,81b9ec <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81ba84:	e03fff15 	stw	zero,-4(fp)
  81ba88:	e0bfff17 	ldw	r2,-4(fp)
}
  81ba8c:	e037883a 	mov	sp,fp
  81ba90:	df000017 	ldw	fp,0(sp)
  81ba94:	dec00104 	addi	sp,sp,4
  81ba98:	f800283a 	ret

0081ba9c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81ba9c:	defff404 	addi	sp,sp,-48
  81baa0:	dfc00b15 	stw	ra,44(sp)
  81baa4:	df000a15 	stw	fp,40(sp)
  81baa8:	df000a04 	addi	fp,sp,40
  81baac:	e13ffb15 	stw	r4,-20(fp)
  81bab0:	e17ffc15 	stw	r5,-16(fp)
  81bab4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81bab8:	00bfffc4 	movi	r2,-1
  81babc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  81bac0:	00bffb44 	movi	r2,-19
  81bac4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  81bac8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  81bacc:	e13ffb17 	ldw	r4,-20(fp)
  81bad0:	014020b4 	movhi	r5,130
  81bad4:	297c7004 	addi	r5,r5,-3648
  81bad8:	081b6300 	call	81b630 <alt_find_dev>
  81badc:	e0bffa15 	stw	r2,-24(fp)
  81bae0:	e0bffa17 	ldw	r2,-24(fp)
  81bae4:	1004c03a 	cmpne	r2,r2,zero
  81bae8:	1000051e 	bne	r2,zero,81bb00 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81baec:	e13ffb17 	ldw	r4,-20(fp)
  81baf0:	081c3340 	call	81c334 <alt_find_file>
  81baf4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  81baf8:	00800044 	movi	r2,1
  81bafc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81bb00:	e0bffa17 	ldw	r2,-24(fp)
  81bb04:	1005003a 	cmpeq	r2,r2,zero
  81bb08:	1000301e 	bne	r2,zero,81bbcc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81bb0c:	e13ffa17 	ldw	r4,-24(fp)
  81bb10:	081c4540 	call	81c454 <alt_get_fd>
  81bb14:	e0bff815 	stw	r2,-32(fp)
  81bb18:	e0bff817 	ldw	r2,-32(fp)
  81bb1c:	1004403a 	cmpge	r2,r2,zero
  81bb20:	1000031e 	bne	r2,zero,81bb30 <open+0x94>
    {
      status = index;
  81bb24:	e0bff817 	ldw	r2,-32(fp)
  81bb28:	e0bff715 	stw	r2,-36(fp)
  81bb2c:	00002906 	br	81bbd4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  81bb30:	e0bff817 	ldw	r2,-32(fp)
  81bb34:	10800324 	muli	r2,r2,12
  81bb38:	1007883a 	mov	r3,r2
  81bb3c:	008020b4 	movhi	r2,130
  81bb40:	10b7cb04 	addi	r2,r2,-8404
  81bb44:	1885883a 	add	r2,r3,r2
  81bb48:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81bb4c:	e0fffc17 	ldw	r3,-16(fp)
  81bb50:	00900034 	movhi	r2,16384
  81bb54:	10bfffc4 	addi	r2,r2,-1
  81bb58:	1886703a 	and	r3,r3,r2
  81bb5c:	e0bff917 	ldw	r2,-28(fp)
  81bb60:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81bb64:	e0bff617 	ldw	r2,-40(fp)
  81bb68:	1004c03a 	cmpne	r2,r2,zero
  81bb6c:	1000061e 	bne	r2,zero,81bb88 <open+0xec>
  81bb70:	e13ff917 	ldw	r4,-28(fp)
  81bb74:	081b9c00 	call	81b9c0 <alt_file_locked>
  81bb78:	e0bff715 	stw	r2,-36(fp)
  81bb7c:	e0bff717 	ldw	r2,-36(fp)
  81bb80:	1004803a 	cmplt	r2,r2,zero
  81bb84:	1000131e 	bne	r2,zero,81bbd4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81bb88:	e0bffa17 	ldw	r2,-24(fp)
  81bb8c:	10800317 	ldw	r2,12(r2)
  81bb90:	1005003a 	cmpeq	r2,r2,zero
  81bb94:	1000091e 	bne	r2,zero,81bbbc <open+0x120>
  81bb98:	e0bffa17 	ldw	r2,-24(fp)
  81bb9c:	10800317 	ldw	r2,12(r2)
  81bba0:	e13ff917 	ldw	r4,-28(fp)
  81bba4:	e17ffb17 	ldw	r5,-20(fp)
  81bba8:	e1bffc17 	ldw	r6,-16(fp)
  81bbac:	e1fffd17 	ldw	r7,-12(fp)
  81bbb0:	103ee83a 	callr	r2
  81bbb4:	e0bfff15 	stw	r2,-4(fp)
  81bbb8:	00000106 	br	81bbc0 <open+0x124>
  81bbbc:	e03fff15 	stw	zero,-4(fp)
  81bbc0:	e0bfff17 	ldw	r2,-4(fp)
  81bbc4:	e0bff715 	stw	r2,-36(fp)
  81bbc8:	00000206 	br	81bbd4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81bbcc:	00bffb44 	movi	r2,-19
  81bbd0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81bbd4:	e0bff717 	ldw	r2,-36(fp)
  81bbd8:	1004403a 	cmpge	r2,r2,zero
  81bbdc:	1000091e 	bne	r2,zero,81bc04 <open+0x168>
  {
    alt_release_fd (index);  
  81bbe0:	e13ff817 	ldw	r4,-32(fp)
  81bbe4:	080ce740 	call	80ce74 <alt_release_fd>
    ALT_ERRNO = -status;
  81bbe8:	081bc240 	call	81bc24 <alt_get_errno>
  81bbec:	e0fff717 	ldw	r3,-36(fp)
  81bbf0:	00c7c83a 	sub	r3,zero,r3
  81bbf4:	10c00015 	stw	r3,0(r2)
    return -1;
  81bbf8:	00bfffc4 	movi	r2,-1
  81bbfc:	e0bffe15 	stw	r2,-8(fp)
  81bc00:	00000206 	br	81bc0c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  81bc04:	e0bff817 	ldw	r2,-32(fp)
  81bc08:	e0bffe15 	stw	r2,-8(fp)
  81bc0c:	e0bffe17 	ldw	r2,-8(fp)
}
  81bc10:	e037883a 	mov	sp,fp
  81bc14:	dfc00117 	ldw	ra,4(sp)
  81bc18:	df000017 	ldw	fp,0(sp)
  81bc1c:	dec00204 	addi	sp,sp,8
  81bc20:	f800283a 	ret

0081bc24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81bc24:	defffd04 	addi	sp,sp,-12
  81bc28:	dfc00215 	stw	ra,8(sp)
  81bc2c:	df000115 	stw	fp,4(sp)
  81bc30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81bc34:	008020b4 	movhi	r2,130
  81bc38:	10bc7304 	addi	r2,r2,-3636
  81bc3c:	10800017 	ldw	r2,0(r2)
  81bc40:	1005003a 	cmpeq	r2,r2,zero
  81bc44:	1000061e 	bne	r2,zero,81bc60 <alt_get_errno+0x3c>
  81bc48:	008020b4 	movhi	r2,130
  81bc4c:	10bc7304 	addi	r2,r2,-3636
  81bc50:	10800017 	ldw	r2,0(r2)
  81bc54:	103ee83a 	callr	r2
  81bc58:	e0bfff15 	stw	r2,-4(fp)
  81bc5c:	00000306 	br	81bc6c <alt_get_errno+0x48>
  81bc60:	008020b4 	movhi	r2,130
  81bc64:	10bcb204 	addi	r2,r2,-3384
  81bc68:	e0bfff15 	stw	r2,-4(fp)
  81bc6c:	e0bfff17 	ldw	r2,-4(fp)
}
  81bc70:	e037883a 	mov	sp,fp
  81bc74:	dfc00117 	ldw	ra,4(sp)
  81bc78:	df000017 	ldw	fp,0(sp)
  81bc7c:	dec00204 	addi	sp,sp,8
  81bc80:	f800283a 	ret

0081bc84 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81bc84:	defffa04 	addi	sp,sp,-24
  81bc88:	df000515 	stw	fp,20(sp)
  81bc8c:	df000504 	addi	fp,sp,20
  81bc90:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81bc94:	0005303a 	rdctl	r2,status
  81bc98:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81bc9c:	e0fffd17 	ldw	r3,-12(fp)
  81bca0:	00bfff84 	movi	r2,-2
  81bca4:	1884703a 	and	r2,r3,r2
  81bca8:	1001703a 	wrctl	status,r2
  
  return context;
  81bcac:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  81bcb0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  81bcb4:	e0bfff17 	ldw	r2,-4(fp)
  81bcb8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81bcbc:	e0bffc17 	ldw	r2,-16(fp)
  81bcc0:	10c00017 	ldw	r3,0(r2)
  81bcc4:	e0bffc17 	ldw	r2,-16(fp)
  81bcc8:	10800117 	ldw	r2,4(r2)
  81bccc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  81bcd0:	e0bffc17 	ldw	r2,-16(fp)
  81bcd4:	10c00117 	ldw	r3,4(r2)
  81bcd8:	e0bffc17 	ldw	r2,-16(fp)
  81bcdc:	10800017 	ldw	r2,0(r2)
  81bce0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  81bce4:	e0fffc17 	ldw	r3,-16(fp)
  81bce8:	e0bffc17 	ldw	r2,-16(fp)
  81bcec:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  81bcf0:	e0fffc17 	ldw	r3,-16(fp)
  81bcf4:	e0bffc17 	ldw	r2,-16(fp)
  81bcf8:	18800015 	stw	r2,0(r3)
  81bcfc:	e0bffe17 	ldw	r2,-8(fp)
  81bd00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81bd04:	e0bffb17 	ldw	r2,-20(fp)
  81bd08:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  81bd0c:	e037883a 	mov	sp,fp
  81bd10:	df000017 	ldw	fp,0(sp)
  81bd14:	dec00104 	addi	sp,sp,4
  81bd18:	f800283a 	ret

0081bd1c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81bd1c:	defffb04 	addi	sp,sp,-20
  81bd20:	dfc00415 	stw	ra,16(sp)
  81bd24:	df000315 	stw	fp,12(sp)
  81bd28:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  81bd2c:	d0a02e17 	ldw	r2,-32584(gp)
  81bd30:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81bd34:	d0a07717 	ldw	r2,-32292(gp)
  81bd38:	10800044 	addi	r2,r2,1
  81bd3c:	d0a07715 	stw	r2,-32292(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81bd40:	00003106 	br	81be08 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  81bd44:	e0bffe17 	ldw	r2,-8(fp)
  81bd48:	10800017 	ldw	r2,0(r2)
  81bd4c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  81bd50:	e0bffe17 	ldw	r2,-8(fp)
  81bd54:	10800403 	ldbu	r2,16(r2)
  81bd58:	10803fcc 	andi	r2,r2,255
  81bd5c:	1005003a 	cmpeq	r2,r2,zero
  81bd60:	1000051e 	bne	r2,zero,81bd78 <alt_tick+0x5c>
  81bd64:	d0a07717 	ldw	r2,-32292(gp)
  81bd68:	1004c03a 	cmpne	r2,r2,zero
  81bd6c:	1000021e 	bne	r2,zero,81bd78 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  81bd70:	e0bffe17 	ldw	r2,-8(fp)
  81bd74:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81bd78:	e0bffe17 	ldw	r2,-8(fp)
  81bd7c:	10c00217 	ldw	r3,8(r2)
  81bd80:	d0a07717 	ldw	r2,-32292(gp)
  81bd84:	10c01e36 	bltu	r2,r3,81be00 <alt_tick+0xe4>
  81bd88:	e0bffe17 	ldw	r2,-8(fp)
  81bd8c:	10800403 	ldbu	r2,16(r2)
  81bd90:	10803fcc 	andi	r2,r2,255
  81bd94:	1004c03a 	cmpne	r2,r2,zero
  81bd98:	1000191e 	bne	r2,zero,81be00 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  81bd9c:	e0bffe17 	ldw	r2,-8(fp)
  81bda0:	10c00317 	ldw	r3,12(r2)
  81bda4:	e0bffe17 	ldw	r2,-8(fp)
  81bda8:	11000517 	ldw	r4,20(r2)
  81bdac:	183ee83a 	callr	r3
  81bdb0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  81bdb4:	e0bffd17 	ldw	r2,-12(fp)
  81bdb8:	1004c03a 	cmpne	r2,r2,zero
  81bdbc:	1000031e 	bne	r2,zero,81bdcc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  81bdc0:	e13ffe17 	ldw	r4,-8(fp)
  81bdc4:	081bc840 	call	81bc84 <alt_alarm_stop>
  81bdc8:	00000d06 	br	81be00 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  81bdcc:	e0bffe17 	ldw	r2,-8(fp)
  81bdd0:	10c00217 	ldw	r3,8(r2)
  81bdd4:	e0bffd17 	ldw	r2,-12(fp)
  81bdd8:	1887883a 	add	r3,r3,r2
  81bddc:	e0bffe17 	ldw	r2,-8(fp)
  81bde0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81bde4:	e0bffe17 	ldw	r2,-8(fp)
  81bde8:	10c00217 	ldw	r3,8(r2)
  81bdec:	d0a07717 	ldw	r2,-32292(gp)
  81bdf0:	1880032e 	bgeu	r3,r2,81be00 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  81bdf4:	e0fffe17 	ldw	r3,-8(fp)
  81bdf8:	00800044 	movi	r2,1
  81bdfc:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  81be00:	e0bfff17 	ldw	r2,-4(fp)
  81be04:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81be08:	d0e02e04 	addi	r3,gp,-32584
  81be0c:	e0bffe17 	ldw	r2,-8(fp)
  81be10:	10ffcc1e 	bne	r2,r3,81bd44 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  81be14:	080e1740 	call	80e174 <OSTimeTick>
}
  81be18:	e037883a 	mov	sp,fp
  81be1c:	dfc00117 	ldw	ra,4(sp)
  81be20:	df000017 	ldw	fp,0(sp)
  81be24:	dec00204 	addi	sp,sp,8
  81be28:	f800283a 	ret

0081be2c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  81be2c:	deffff04 	addi	sp,sp,-4
  81be30:	df000015 	stw	fp,0(sp)
  81be34:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81be38:	000170fa 	wrctl	ienable,zero
}
  81be3c:	e037883a 	mov	sp,fp
  81be40:	df000017 	ldw	fp,0(sp)
  81be44:	dec00104 	addi	sp,sp,4
  81be48:	f800283a 	ret

0081be4c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  81be4c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  81be50:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  81be54:	d1206317 	ldw	r4,-32372(gp)

      stw ra,  0(sp)
  81be58:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  81be5c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  81be60:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  81be64:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  81be68:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  81be6c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  81be70:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  81be74:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  81be78:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  81be7c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  81be80:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  81be84:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81be88:	081c26c0 	call	81c26c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  81be8c:	d1205e17 	ldw	r4,-32392(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  81be90:	d1605607 	ldb	r5,-32424(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  81be94:	d1206315 	stw	r4,-32372(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  81be98:	d1605645 	stb	r5,-32423(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  81be9c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  81bea0:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  81bea4:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  81bea8:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  81beac:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  81beb0:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  81beb4:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  81beb8:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  81bebc:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  81bec0:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  81bec4:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  81bec8:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  81becc:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  81bed0:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  81bed4:	f800283a 	ret

0081bed8 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  81bed8:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  81bedc:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  81bee0:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  81bee4:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81bee8:	081c26c0 	call	81c26c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  81beec:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  81bef0:	d4a05445 	stb	r18,-32431(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  81bef4:	003fe506 	br	81be8c <OSCtxSw+0x40>

0081bef8 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  81bef8:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  81befc:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  81bf00:	10800054 	ori	r2,r2,1
      wrctl status, r2
  81bf04:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  81bf08:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  81bf0c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  81bf10:	dec00204 	addi	sp,sp,8

      callr r2
  81bf14:	103ee83a 	callr	r2

      nop
  81bf18:	0001883a 	nop

0081bf1c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  81bf1c:	defff704 	addi	sp,sp,-36
  81bf20:	dfc00815 	stw	ra,32(sp)
  81bf24:	df000715 	stw	fp,28(sp)
  81bf28:	df000704 	addi	fp,sp,28
  81bf2c:	e13ffc15 	stw	r4,-16(fp)
  81bf30:	e17ffd15 	stw	r5,-12(fp)
  81bf34:	e1bffe15 	stw	r6,-8(fp)
  81bf38:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  81bf3c:	e0bffe17 	ldw	r2,-8(fp)
  81bf40:	1007883a 	mov	r3,r2
  81bf44:	00bfff04 	movi	r2,-4
  81bf48:	1884703a 	and	r2,r3,r2
  81bf4c:	10bf0004 	addi	r2,r2,-1024
  81bf50:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  81bf54:	e0bff917 	ldw	r2,-28(fp)
  81bf58:	10000015 	stw	zero,0(r2)
  81bf5c:	e0bff917 	ldw	r2,-28(fp)
  81bf60:	10c0bb04 	addi	r3,r2,748
  81bf64:	e0bff917 	ldw	r2,-28(fp)
  81bf68:	10c00115 	stw	r3,4(r2)
  81bf6c:	e0bff917 	ldw	r2,-28(fp)
  81bf70:	1080bb04 	addi	r2,r2,748
  81bf74:	10c01704 	addi	r3,r2,92
  81bf78:	e0bff917 	ldw	r2,-28(fp)
  81bf7c:	10c00215 	stw	r3,8(r2)
  81bf80:	e0bff917 	ldw	r2,-28(fp)
  81bf84:	1080bb04 	addi	r2,r2,748
  81bf88:	10c02e04 	addi	r3,r2,184
  81bf8c:	e0bff917 	ldw	r2,-28(fp)
  81bf90:	10c00315 	stw	r3,12(r2)
  81bf94:	e0bff917 	ldw	r2,-28(fp)
  81bf98:	10000415 	stw	zero,16(r2)
  81bf9c:	e0bff917 	ldw	r2,-28(fp)
  81bfa0:	10800504 	addi	r2,r2,20
  81bfa4:	1009883a 	mov	r4,r2
  81bfa8:	01800644 	movi	r6,25
  81bfac:	000b883a 	mov	r5,zero
  81bfb0:	080982c0 	call	80982c <memset>
  81bfb4:	e0bff917 	ldw	r2,-28(fp)
  81bfb8:	10000c15 	stw	zero,48(r2)
  81bfbc:	e0fff917 	ldw	r3,-28(fp)
  81bfc0:	008020b4 	movhi	r2,130
  81bfc4:	10b5bb04 	addi	r2,r2,-10516
  81bfc8:	18800d15 	stw	r2,52(r3)
  81bfcc:	e0bff917 	ldw	r2,-28(fp)
  81bfd0:	10000e15 	stw	zero,56(r2)
  81bfd4:	e0bff917 	ldw	r2,-28(fp)
  81bfd8:	10000f15 	stw	zero,60(r2)
  81bfdc:	e0bff917 	ldw	r2,-28(fp)
  81bfe0:	10001015 	stw	zero,64(r2)
  81bfe4:	e0bff917 	ldw	r2,-28(fp)
  81bfe8:	10001115 	stw	zero,68(r2)
  81bfec:	e0bff917 	ldw	r2,-28(fp)
  81bff0:	10001215 	stw	zero,72(r2)
  81bff4:	e0bff917 	ldw	r2,-28(fp)
  81bff8:	10001315 	stw	zero,76(r2)
  81bffc:	e0bff917 	ldw	r2,-28(fp)
  81c000:	10001415 	stw	zero,80(r2)
  81c004:	e0bff917 	ldw	r2,-28(fp)
  81c008:	10001515 	stw	zero,84(r2)
  81c00c:	e0bff917 	ldw	r2,-28(fp)
  81c010:	10001615 	stw	zero,88(r2)
  81c014:	e0bff917 	ldw	r2,-28(fp)
  81c018:	10001715 	stw	zero,92(r2)
  81c01c:	e0bff917 	ldw	r2,-28(fp)
  81c020:	10001805 	stb	zero,96(r2)
  81c024:	e0bff917 	ldw	r2,-28(fp)
  81c028:	10801f04 	addi	r2,r2,124
  81c02c:	10000015 	stw	zero,0(r2)
  81c030:	10000115 	stw	zero,4(r2)
  81c034:	10000215 	stw	zero,8(r2)
  81c038:	10000315 	stw	zero,12(r2)
  81c03c:	10000415 	stw	zero,16(r2)
  81c040:	10000515 	stw	zero,20(r2)
  81c044:	10000615 	stw	zero,24(r2)
  81c048:	10000715 	stw	zero,28(r2)
  81c04c:	10000815 	stw	zero,32(r2)
  81c050:	e0bff917 	ldw	r2,-28(fp)
  81c054:	10002815 	stw	zero,160(r2)
  81c058:	e0fff917 	ldw	r3,-28(fp)
  81c05c:	00800044 	movi	r2,1
  81c060:	18802915 	stw	r2,164(r3)
  81c064:	18002a15 	stw	zero,168(r3)
  81c068:	e0fff917 	ldw	r3,-28(fp)
  81c06c:	008cc384 	movi	r2,13070
  81c070:	18802b0d 	sth	r2,172(r3)
  81c074:	e0fff917 	ldw	r3,-28(fp)
  81c078:	00aaf344 	movi	r2,-21555
  81c07c:	18802b8d 	sth	r2,174(r3)
  81c080:	e0fff917 	ldw	r3,-28(fp)
  81c084:	00848d04 	movi	r2,4660
  81c088:	18802c0d 	sth	r2,176(r3)
  81c08c:	e0fff917 	ldw	r3,-28(fp)
  81c090:	00b99b44 	movi	r2,-6547
  81c094:	18802c8d 	sth	r2,178(r3)
  81c098:	e0fff917 	ldw	r3,-28(fp)
  81c09c:	00b7bb04 	movi	r2,-8468
  81c0a0:	18802d0d 	sth	r2,180(r3)
  81c0a4:	e0fff917 	ldw	r3,-28(fp)
  81c0a8:	00800144 	movi	r2,5
  81c0ac:	18802d8d 	sth	r2,182(r3)
  81c0b0:	e0fff917 	ldw	r3,-28(fp)
  81c0b4:	008002c4 	movi	r2,11
  81c0b8:	18802e0d 	sth	r2,184(r3)
  81c0bc:	e0bff917 	ldw	r2,-28(fp)
  81c0c0:	10002f15 	stw	zero,188(r2)
  81c0c4:	e0bff917 	ldw	r2,-28(fp)
  81c0c8:	10003015 	stw	zero,192(r2)
  81c0cc:	e0bff917 	ldw	r2,-28(fp)
  81c0d0:	10003115 	stw	zero,196(r2)
  81c0d4:	e0bff917 	ldw	r2,-28(fp)
  81c0d8:	10003215 	stw	zero,200(r2)
  81c0dc:	e0bff917 	ldw	r2,-28(fp)
  81c0e0:	10003315 	stw	zero,204(r2)
  81c0e4:	e0bff917 	ldw	r2,-28(fp)
  81c0e8:	10003415 	stw	zero,208(r2)
  81c0ec:	e0bff917 	ldw	r2,-28(fp)
  81c0f0:	10003e15 	stw	zero,248(r2)
  81c0f4:	e0bff917 	ldw	r2,-28(fp)
  81c0f8:	10003f15 	stw	zero,252(r2)
  81c0fc:	e0bff917 	ldw	r2,-28(fp)
  81c100:	10004015 	stw	zero,256(r2)
  81c104:	e0bff917 	ldw	r2,-28(fp)
  81c108:	10004115 	stw	zero,260(r2)
  81c10c:	e0bff917 	ldw	r2,-28(fp)
  81c110:	10004215 	stw	zero,264(r2)
  81c114:	e0bff917 	ldw	r2,-28(fp)
  81c118:	10004315 	stw	zero,268(r2)
  81c11c:	e0bff917 	ldw	r2,-28(fp)
  81c120:	10004415 	stw	zero,272(r2)
  81c124:	e0bff917 	ldw	r2,-28(fp)
  81c128:	10004515 	stw	zero,276(r2)
  81c12c:	e0bff917 	ldw	r2,-28(fp)
  81c130:	10004615 	stw	zero,280(r2)
  81c134:	e0bff917 	ldw	r2,-28(fp)
  81c138:	10004715 	stw	zero,284(r2)
  81c13c:	e0bff917 	ldw	r2,-28(fp)
  81c140:	10003505 	stb	zero,212(r2)
  81c144:	e0bff917 	ldw	r2,-28(fp)
  81c148:	10003705 	stb	zero,220(r2)
  81c14c:	e0bff917 	ldw	r2,-28(fp)
  81c150:	10003d15 	stw	zero,244(r2)
  81c154:	e0bff917 	ldw	r2,-28(fp)
  81c158:	10005215 	stw	zero,328(r2)
  81c15c:	e0bff917 	ldw	r2,-28(fp)
  81c160:	10005315 	stw	zero,332(r2)
  81c164:	e0bff917 	ldw	r2,-28(fp)
  81c168:	10005415 	stw	zero,336(r2)
  81c16c:	e0bff917 	ldw	r2,-28(fp)
  81c170:	10005515 	stw	zero,340(r2)
  81c174:	e0bff917 	ldw	r2,-28(fp)
  81c178:	1000b515 	stw	zero,724(r2)
  81c17c:	e0bff917 	ldw	r2,-28(fp)
  81c180:	10007515 	stw	zero,468(r2)
  81c184:	e0bff917 	ldw	r2,-28(fp)
  81c188:	1000b715 	stw	zero,732(r2)
  81c18c:	e0bff917 	ldw	r2,-28(fp)
  81c190:	1000b815 	stw	zero,736(r2)
  81c194:	e0bff917 	ldw	r2,-28(fp)
  81c198:	1000b915 	stw	zero,740(r2)
  81c19c:	e0bff917 	ldw	r2,-28(fp)
  81c1a0:	1000ba15 	stw	zero,744(r2)
  81c1a4:	e0bff917 	ldw	r2,-28(fp)
  81c1a8:	1080bb04 	addi	r2,r2,748
  81c1ac:	1009883a 	mov	r4,r2
  81c1b0:	01804504 	movi	r6,276
  81c1b4:	000b883a 	mov	r5,zero
  81c1b8:	080982c0 	call	80982c <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  81c1bc:	e0bff917 	ldw	r2,-28(fp)
  81c1c0:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  81c1c4:	e0bffb17 	ldw	r2,-20(fp)
  81c1c8:	10bff304 	addi	r2,r2,-52
  81c1cc:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  81c1d0:	e0bffa17 	ldw	r2,-24(fp)
  81c1d4:	10c00c04 	addi	r3,r2,48
  81c1d8:	e0bffc17 	ldw	r2,-16(fp)
  81c1dc:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  81c1e0:	e0bffa17 	ldw	r2,-24(fp)
  81c1e4:	10c00b04 	addi	r3,r2,44
  81c1e8:	e0bffd17 	ldw	r2,-12(fp)
  81c1ec:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  81c1f0:	e0bffa17 	ldw	r2,-24(fp)
  81c1f4:	10c00a04 	addi	r3,r2,40
  81c1f8:	e0bff917 	ldw	r2,-28(fp)
  81c1fc:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  81c200:	008020b4 	movhi	r2,130
  81c204:	10afbe04 	addi	r2,r2,-16648
  81c208:	10c00104 	addi	r3,r2,4
  81c20c:	e0bffa17 	ldw	r2,-24(fp)
  81c210:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  81c214:	e0bffa17 	ldw	r2,-24(fp)
}
  81c218:	e037883a 	mov	sp,fp
  81c21c:	dfc00117 	ldw	ra,4(sp)
  81c220:	df000017 	ldw	fp,0(sp)
  81c224:	dec00204 	addi	sp,sp,8
  81c228:	f800283a 	ret

0081c22c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  81c22c:	defffe04 	addi	sp,sp,-8
  81c230:	df000115 	stw	fp,4(sp)
  81c234:	df000104 	addi	fp,sp,4
  81c238:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  81c23c:	e037883a 	mov	sp,fp
  81c240:	df000017 	ldw	fp,0(sp)
  81c244:	dec00104 	addi	sp,sp,4
  81c248:	f800283a 	ret

0081c24c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  81c24c:	defffe04 	addi	sp,sp,-8
  81c250:	df000115 	stw	fp,4(sp)
  81c254:	df000104 	addi	fp,sp,4
  81c258:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  81c25c:	e037883a 	mov	sp,fp
  81c260:	df000017 	ldw	fp,0(sp)
  81c264:	dec00104 	addi	sp,sp,4
  81c268:	f800283a 	ret

0081c26c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  81c26c:	deffff04 	addi	sp,sp,-4
  81c270:	df000015 	stw	fp,0(sp)
  81c274:	d839883a 	mov	fp,sp
}
  81c278:	e037883a 	mov	sp,fp
  81c27c:	df000017 	ldw	fp,0(sp)
  81c280:	dec00104 	addi	sp,sp,4
  81c284:	f800283a 	ret

0081c288 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  81c288:	deffff04 	addi	sp,sp,-4
  81c28c:	df000015 	stw	fp,0(sp)
  81c290:	d839883a 	mov	fp,sp
}
  81c294:	e037883a 	mov	sp,fp
  81c298:	df000017 	ldw	fp,0(sp)
  81c29c:	dec00104 	addi	sp,sp,4
  81c2a0:	f800283a 	ret

0081c2a4 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  81c2a4:	deffff04 	addi	sp,sp,-4
  81c2a8:	df000015 	stw	fp,0(sp)
  81c2ac:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  81c2b0:	e037883a 	mov	sp,fp
  81c2b4:	df000017 	ldw	fp,0(sp)
  81c2b8:	dec00104 	addi	sp,sp,4
  81c2bc:	f800283a 	ret

0081c2c0 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  81c2c0:	deffff04 	addi	sp,sp,-4
  81c2c4:	df000015 	stw	fp,0(sp)
  81c2c8:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  81c2cc:	e037883a 	mov	sp,fp
  81c2d0:	df000017 	ldw	fp,0(sp)
  81c2d4:	dec00104 	addi	sp,sp,4
  81c2d8:	f800283a 	ret

0081c2dc <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  81c2dc:	deffff04 	addi	sp,sp,-4
  81c2e0:	df000015 	stw	fp,0(sp)
  81c2e4:	d839883a 	mov	fp,sp
}
  81c2e8:	e037883a 	mov	sp,fp
  81c2ec:	df000017 	ldw	fp,0(sp)
  81c2f0:	dec00104 	addi	sp,sp,4
  81c2f4:	f800283a 	ret

0081c2f8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  81c2f8:	deffff04 	addi	sp,sp,-4
  81c2fc:	df000015 	stw	fp,0(sp)
  81c300:	d839883a 	mov	fp,sp
}
  81c304:	e037883a 	mov	sp,fp
  81c308:	df000017 	ldw	fp,0(sp)
  81c30c:	dec00104 	addi	sp,sp,4
  81c310:	f800283a 	ret

0081c314 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  81c314:	defffe04 	addi	sp,sp,-8
  81c318:	df000115 	stw	fp,4(sp)
  81c31c:	df000104 	addi	fp,sp,4
  81c320:	e13fff15 	stw	r4,-4(fp)
}
  81c324:	e037883a 	mov	sp,fp
  81c328:	df000017 	ldw	fp,0(sp)
  81c32c:	dec00104 	addi	sp,sp,4
  81c330:	f800283a 	ret

0081c334 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81c334:	defffa04 	addi	sp,sp,-24
  81c338:	dfc00515 	stw	ra,20(sp)
  81c33c:	df000415 	stw	fp,16(sp)
  81c340:	df000404 	addi	fp,sp,16
  81c344:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81c348:	008020b4 	movhi	r2,130
  81c34c:	10bc6e04 	addi	r2,r2,-3656
  81c350:	10800017 	ldw	r2,0(r2)
  81c354:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81c358:	00003306 	br	81c428 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  81c35c:	e0bffd17 	ldw	r2,-12(fp)
  81c360:	11000217 	ldw	r4,8(r2)
  81c364:	08044400 	call	804440 <strlen>
  81c368:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  81c36c:	e0bffd17 	ldw	r2,-12(fp)
  81c370:	10c00217 	ldw	r3,8(r2)
  81c374:	e0bffc17 	ldw	r2,-16(fp)
  81c378:	1885883a 	add	r2,r3,r2
  81c37c:	10bfffc4 	addi	r2,r2,-1
  81c380:	10800003 	ldbu	r2,0(r2)
  81c384:	10803fcc 	andi	r2,r2,255
  81c388:	1080201c 	xori	r2,r2,128
  81c38c:	10bfe004 	addi	r2,r2,-128
  81c390:	10800bd8 	cmpnei	r2,r2,47
  81c394:	1000031e 	bne	r2,zero,81c3a4 <alt_find_file+0x70>
    {
      len -= 1;
  81c398:	e0bffc17 	ldw	r2,-16(fp)
  81c39c:	10bfffc4 	addi	r2,r2,-1
  81c3a0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81c3a4:	e0bffc17 	ldw	r2,-16(fp)
  81c3a8:	1007883a 	mov	r3,r2
  81c3ac:	e0bffe17 	ldw	r2,-8(fp)
  81c3b0:	1885883a 	add	r2,r3,r2
  81c3b4:	10800003 	ldbu	r2,0(r2)
  81c3b8:	10803fcc 	andi	r2,r2,255
  81c3bc:	1080201c 	xori	r2,r2,128
  81c3c0:	10bfe004 	addi	r2,r2,-128
  81c3c4:	10800be0 	cmpeqi	r2,r2,47
  81c3c8:	10000a1e 	bne	r2,zero,81c3f4 <alt_find_file+0xc0>
  81c3cc:	e0bffc17 	ldw	r2,-16(fp)
  81c3d0:	1007883a 	mov	r3,r2
  81c3d4:	e0bffe17 	ldw	r2,-8(fp)
  81c3d8:	1885883a 	add	r2,r3,r2
  81c3dc:	10800003 	ldbu	r2,0(r2)
  81c3e0:	10803fcc 	andi	r2,r2,255
  81c3e4:	1080201c 	xori	r2,r2,128
  81c3e8:	10bfe004 	addi	r2,r2,-128
  81c3ec:	1004c03a 	cmpne	r2,r2,zero
  81c3f0:	10000a1e 	bne	r2,zero,81c41c <alt_find_file+0xe8>
  81c3f4:	e0bffd17 	ldw	r2,-12(fp)
  81c3f8:	11000217 	ldw	r4,8(r2)
  81c3fc:	e1bffc17 	ldw	r6,-16(fp)
  81c400:	e17ffe17 	ldw	r5,-8(fp)
  81c404:	081c5940 	call	81c594 <memcmp>
  81c408:	1004c03a 	cmpne	r2,r2,zero
  81c40c:	1000031e 	bne	r2,zero,81c41c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81c410:	e0bffd17 	ldw	r2,-12(fp)
  81c414:	e0bfff15 	stw	r2,-4(fp)
  81c418:	00000806 	br	81c43c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  81c41c:	e0bffd17 	ldw	r2,-12(fp)
  81c420:	10800017 	ldw	r2,0(r2)
  81c424:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81c428:	00c020b4 	movhi	r3,130
  81c42c:	18fc6e04 	addi	r3,r3,-3656
  81c430:	e0bffd17 	ldw	r2,-12(fp)
  81c434:	10ffc91e 	bne	r2,r3,81c35c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81c438:	e03fff15 	stw	zero,-4(fp)
  81c43c:	e0bfff17 	ldw	r2,-4(fp)
}
  81c440:	e037883a 	mov	sp,fp
  81c444:	dfc00117 	ldw	ra,4(sp)
  81c448:	df000017 	ldw	fp,0(sp)
  81c44c:	dec00204 	addi	sp,sp,8
  81c450:	f800283a 	ret

0081c454 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81c454:	defff804 	addi	sp,sp,-32
  81c458:	dfc00715 	stw	ra,28(sp)
  81c45c:	df000615 	stw	fp,24(sp)
  81c460:	df000604 	addi	fp,sp,24
  81c464:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81c468:	00bffa04 	movi	r2,-24
  81c46c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  81c470:	008020b4 	movhi	r2,130
  81c474:	10bcb304 	addi	r2,r2,-3380
  81c478:	10800017 	ldw	r2,0(r2)
  81c47c:	e0bffa15 	stw	r2,-24(fp)
  81c480:	e03ffb0d 	sth	zero,-20(fp)
  81c484:	e17ffb0b 	ldhu	r5,-20(fp)
  81c488:	e1bffe04 	addi	r6,fp,-8
  81c48c:	e13ffa17 	ldw	r4,-24(fp)
  81c490:	0812f900 	call	812f90 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81c494:	e03ffd15 	stw	zero,-12(fp)
  81c498:	00001e06 	br	81c514 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  81c49c:	e0bffd17 	ldw	r2,-12(fp)
  81c4a0:	00c020b4 	movhi	r3,130
  81c4a4:	18f7cb04 	addi	r3,r3,-8404
  81c4a8:	10800324 	muli	r2,r2,12
  81c4ac:	10c5883a 	add	r2,r2,r3
  81c4b0:	10800017 	ldw	r2,0(r2)
  81c4b4:	1004c03a 	cmpne	r2,r2,zero
  81c4b8:	1000131e 	bne	r2,zero,81c508 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  81c4bc:	e0bffd17 	ldw	r2,-12(fp)
  81c4c0:	00c020b4 	movhi	r3,130
  81c4c4:	18f7cb04 	addi	r3,r3,-8404
  81c4c8:	10800324 	muli	r2,r2,12
  81c4cc:	10c7883a 	add	r3,r2,r3
  81c4d0:	e0bfff17 	ldw	r2,-4(fp)
  81c4d4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  81c4d8:	008020b4 	movhi	r2,130
  81c4dc:	10bc7204 	addi	r2,r2,-3640
  81c4e0:	10c00017 	ldw	r3,0(r2)
  81c4e4:	e0bffd17 	ldw	r2,-12(fp)
  81c4e8:	1880040e 	bge	r3,r2,81c4fc <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  81c4ec:	00c020b4 	movhi	r3,130
  81c4f0:	18fc7204 	addi	r3,r3,-3640
  81c4f4:	e0bffd17 	ldw	r2,-12(fp)
  81c4f8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  81c4fc:	e0bffd17 	ldw	r2,-12(fp)
  81c500:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  81c504:	00000606 	br	81c520 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81c508:	e0bffd17 	ldw	r2,-12(fp)
  81c50c:	10800044 	addi	r2,r2,1
  81c510:	e0bffd15 	stw	r2,-12(fp)
  81c514:	e0bffd17 	ldw	r2,-12(fp)
  81c518:	10800810 	cmplti	r2,r2,32
  81c51c:	103fdf1e 	bne	r2,zero,81c49c <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  81c520:	008020b4 	movhi	r2,130
  81c524:	10bcb304 	addi	r2,r2,-3380
  81c528:	11000017 	ldw	r4,0(r2)
  81c52c:	08133880 	call	813388 <OSSemPost>

  return rc;
  81c530:	e0bffc17 	ldw	r2,-16(fp)
}
  81c534:	e037883a 	mov	sp,fp
  81c538:	dfc00117 	ldw	ra,4(sp)
  81c53c:	df000017 	ldw	fp,0(sp)
  81c540:	dec00204 	addi	sp,sp,8
  81c544:	f800283a 	ret

0081c548 <atexit>:
  81c548:	200b883a 	mov	r5,r4
  81c54c:	000d883a 	mov	r6,zero
  81c550:	0009883a 	mov	r4,zero
  81c554:	000f883a 	mov	r7,zero
  81c558:	081c9401 	jmpi	81c940 <__register_exitproc>

0081c55c <exit>:
  81c55c:	defffe04 	addi	sp,sp,-8
  81c560:	000b883a 	mov	r5,zero
  81c564:	dc000015 	stw	r16,0(sp)
  81c568:	dfc00115 	stw	ra,4(sp)
  81c56c:	2021883a 	mov	r16,r4
  81c570:	081ca780 	call	81ca78 <__call_exitprocs>
  81c574:	008020b4 	movhi	r2,130
  81c578:	10bc6904 	addi	r2,r2,-3676
  81c57c:	11000017 	ldw	r4,0(r2)
  81c580:	20800f17 	ldw	r2,60(r4)
  81c584:	10000126 	beq	r2,zero,81c58c <exit+0x30>
  81c588:	103ee83a 	callr	r2
  81c58c:	8009883a 	mov	r4,r16
  81c590:	081cc680 	call	81cc68 <_exit>

0081c594 <memcmp>:
  81c594:	00c000c4 	movi	r3,3
  81c598:	1980032e 	bgeu	r3,r6,81c5a8 <memcmp+0x14>
  81c59c:	2144b03a 	or	r2,r4,r5
  81c5a0:	10c4703a 	and	r2,r2,r3
  81c5a4:	10000f26 	beq	r2,zero,81c5e4 <memcmp+0x50>
  81c5a8:	31ffffc4 	addi	r7,r6,-1
  81c5ac:	3000061e 	bne	r6,zero,81c5c8 <memcmp+0x34>
  81c5b0:	00000a06 	br	81c5dc <memcmp+0x48>
  81c5b4:	39ffffc4 	addi	r7,r7,-1
  81c5b8:	00bfffc4 	movi	r2,-1
  81c5bc:	21000044 	addi	r4,r4,1
  81c5c0:	29400044 	addi	r5,r5,1
  81c5c4:	38800526 	beq	r7,r2,81c5dc <memcmp+0x48>
  81c5c8:	20c00003 	ldbu	r3,0(r4)
  81c5cc:	28800003 	ldbu	r2,0(r5)
  81c5d0:	18bff826 	beq	r3,r2,81c5b4 <memcmp+0x20>
  81c5d4:	1885c83a 	sub	r2,r3,r2
  81c5d8:	f800283a 	ret
  81c5dc:	0005883a 	mov	r2,zero
  81c5e0:	f800283a 	ret
  81c5e4:	180f883a 	mov	r7,r3
  81c5e8:	20c00017 	ldw	r3,0(r4)
  81c5ec:	28800017 	ldw	r2,0(r5)
  81c5f0:	18bfed1e 	bne	r3,r2,81c5a8 <memcmp+0x14>
  81c5f4:	31bfff04 	addi	r6,r6,-4
  81c5f8:	21000104 	addi	r4,r4,4
  81c5fc:	29400104 	addi	r5,r5,4
  81c600:	39bff936 	bltu	r7,r6,81c5e8 <memcmp+0x54>
  81c604:	003fe806 	br	81c5a8 <memcmp+0x14>

0081c608 <putc>:
  81c608:	defffc04 	addi	sp,sp,-16
  81c60c:	dc800215 	stw	r18,8(sp)
  81c610:	048020b4 	movhi	r18,130
  81c614:	94bc6804 	addi	r18,r18,-3680
  81c618:	90c00017 	ldw	r3,0(r18)
  81c61c:	dc400115 	stw	r17,4(sp)
  81c620:	dc000015 	stw	r16,0(sp)
  81c624:	dfc00315 	stw	ra,12(sp)
  81c628:	2023883a 	mov	r17,r4
  81c62c:	2821883a 	mov	r16,r5
  81c630:	18000226 	beq	r3,zero,81c63c <putc+0x34>
  81c634:	18800e17 	ldw	r2,56(r3)
  81c638:	10001126 	beq	r2,zero,81c680 <putc+0x78>
  81c63c:	80800217 	ldw	r2,8(r16)
  81c640:	10ffffc4 	addi	r3,r2,-1
  81c644:	80c00215 	stw	r3,8(r16)
  81c648:	18001316 	blt	r3,zero,81c698 <putc+0x90>
  81c64c:	80800017 	ldw	r2,0(r16)
  81c650:	14400005 	stb	r17,0(r2)
  81c654:	80c00017 	ldw	r3,0(r16)
  81c658:	18800044 	addi	r2,r3,1
  81c65c:	18c00003 	ldbu	r3,0(r3)
  81c660:	80800015 	stw	r2,0(r16)
  81c664:	1805883a 	mov	r2,r3
  81c668:	dfc00317 	ldw	ra,12(sp)
  81c66c:	dc800217 	ldw	r18,8(sp)
  81c670:	dc400117 	ldw	r17,4(sp)
  81c674:	dc000017 	ldw	r16,0(sp)
  81c678:	dec00404 	addi	sp,sp,16
  81c67c:	f800283a 	ret
  81c680:	1809883a 	mov	r4,r3
  81c684:	0807f7c0 	call	807f7c <__sinit>
  81c688:	80800217 	ldw	r2,8(r16)
  81c68c:	10ffffc4 	addi	r3,r2,-1
  81c690:	80c00215 	stw	r3,8(r16)
  81c694:	183fed0e 	bge	r3,zero,81c64c <putc+0x44>
  81c698:	80800617 	ldw	r2,24(r16)
  81c69c:	18800f16 	blt	r3,r2,81c6dc <putc+0xd4>
  81c6a0:	80800017 	ldw	r2,0(r16)
  81c6a4:	14400005 	stb	r17,0(r2)
  81c6a8:	81000017 	ldw	r4,0(r16)
  81c6ac:	00800284 	movi	r2,10
  81c6b0:	20c00003 	ldbu	r3,0(r4)
  81c6b4:	18801226 	beq	r3,r2,81c700 <putc+0xf8>
  81c6b8:	20800044 	addi	r2,r4,1
  81c6bc:	80800015 	stw	r2,0(r16)
  81c6c0:	1805883a 	mov	r2,r3
  81c6c4:	dfc00317 	ldw	ra,12(sp)
  81c6c8:	dc800217 	ldw	r18,8(sp)
  81c6cc:	dc400117 	ldw	r17,4(sp)
  81c6d0:	dc000017 	ldw	r16,0(sp)
  81c6d4:	dec00404 	addi	sp,sp,16
  81c6d8:	f800283a 	ret
  81c6dc:	91000017 	ldw	r4,0(r18)
  81c6e0:	880b883a 	mov	r5,r17
  81c6e4:	800d883a 	mov	r6,r16
  81c6e8:	dfc00317 	ldw	ra,12(sp)
  81c6ec:	dc800217 	ldw	r18,8(sp)
  81c6f0:	dc400117 	ldw	r17,4(sp)
  81c6f4:	dc000017 	ldw	r16,0(sp)
  81c6f8:	dec00404 	addi	sp,sp,16
  81c6fc:	081c7f41 	jmpi	81c7f4 <__swbuf_r>
  81c700:	91000017 	ldw	r4,0(r18)
  81c704:	180b883a 	mov	r5,r3
  81c708:	003ff606 	br	81c6e4 <putc+0xdc>

0081c70c <_putc_r>:
  81c70c:	defffc04 	addi	sp,sp,-16
  81c710:	dc400215 	stw	r17,8(sp)
  81c714:	dc000115 	stw	r16,4(sp)
  81c718:	dfc00315 	stw	ra,12(sp)
  81c71c:	2021883a 	mov	r16,r4
  81c720:	2823883a 	mov	r17,r5
  81c724:	20000226 	beq	r4,zero,81c730 <_putc_r+0x24>
  81c728:	20800e17 	ldw	r2,56(r4)
  81c72c:	10001026 	beq	r2,zero,81c770 <_putc_r+0x64>
  81c730:	30800217 	ldw	r2,8(r6)
  81c734:	10ffffc4 	addi	r3,r2,-1
  81c738:	30c00215 	stw	r3,8(r6)
  81c73c:	18001316 	blt	r3,zero,81c78c <_putc_r+0x80>
  81c740:	30800017 	ldw	r2,0(r6)
  81c744:	14400005 	stb	r17,0(r2)
  81c748:	30c00017 	ldw	r3,0(r6)
  81c74c:	18800044 	addi	r2,r3,1
  81c750:	18c00003 	ldbu	r3,0(r3)
  81c754:	30800015 	stw	r2,0(r6)
  81c758:	1805883a 	mov	r2,r3
  81c75c:	dfc00317 	ldw	ra,12(sp)
  81c760:	dc400217 	ldw	r17,8(sp)
  81c764:	dc000117 	ldw	r16,4(sp)
  81c768:	dec00404 	addi	sp,sp,16
  81c76c:	f800283a 	ret
  81c770:	d9800015 	stw	r6,0(sp)
  81c774:	0807f7c0 	call	807f7c <__sinit>
  81c778:	d9800017 	ldw	r6,0(sp)
  81c77c:	30800217 	ldw	r2,8(r6)
  81c780:	10ffffc4 	addi	r3,r2,-1
  81c784:	30c00215 	stw	r3,8(r6)
  81c788:	183fed0e 	bge	r3,zero,81c740 <_putc_r+0x34>
  81c78c:	30800617 	ldw	r2,24(r6)
  81c790:	18800e16 	blt	r3,r2,81c7cc <_putc_r+0xc0>
  81c794:	30800017 	ldw	r2,0(r6)
  81c798:	14400005 	stb	r17,0(r2)
  81c79c:	31000017 	ldw	r4,0(r6)
  81c7a0:	00800284 	movi	r2,10
  81c7a4:	20c00003 	ldbu	r3,0(r4)
  81c7a8:	18800f26 	beq	r3,r2,81c7e8 <_putc_r+0xdc>
  81c7ac:	20800044 	addi	r2,r4,1
  81c7b0:	30800015 	stw	r2,0(r6)
  81c7b4:	1805883a 	mov	r2,r3
  81c7b8:	dfc00317 	ldw	ra,12(sp)
  81c7bc:	dc400217 	ldw	r17,8(sp)
  81c7c0:	dc000117 	ldw	r16,4(sp)
  81c7c4:	dec00404 	addi	sp,sp,16
  81c7c8:	f800283a 	ret
  81c7cc:	8009883a 	mov	r4,r16
  81c7d0:	880b883a 	mov	r5,r17
  81c7d4:	dfc00317 	ldw	ra,12(sp)
  81c7d8:	dc400217 	ldw	r17,8(sp)
  81c7dc:	dc000117 	ldw	r16,4(sp)
  81c7e0:	dec00404 	addi	sp,sp,16
  81c7e4:	081c7f41 	jmpi	81c7f4 <__swbuf_r>
  81c7e8:	8009883a 	mov	r4,r16
  81c7ec:	180b883a 	mov	r5,r3
  81c7f0:	003ff806 	br	81c7d4 <_putc_r+0xc8>

0081c7f4 <__swbuf_r>:
  81c7f4:	defffc04 	addi	sp,sp,-16
  81c7f8:	dc400215 	stw	r17,8(sp)
  81c7fc:	dc000115 	stw	r16,4(sp)
  81c800:	dfc00315 	stw	ra,12(sp)
  81c804:	2023883a 	mov	r17,r4
  81c808:	2821883a 	mov	r16,r5
  81c80c:	20000226 	beq	r4,zero,81c818 <__swbuf_r+0x24>
  81c810:	20800e17 	ldw	r2,56(r4)
  81c814:	10002f26 	beq	r2,zero,81c8d4 <__swbuf_r+0xe0>
  81c818:	3080030b 	ldhu	r2,12(r6)
  81c81c:	30c00617 	ldw	r3,24(r6)
  81c820:	1080020c 	andi	r2,r2,8
  81c824:	30c00215 	stw	r3,8(r6)
  81c828:	10002226 	beq	r2,zero,81c8b4 <__swbuf_r+0xc0>
  81c82c:	30c00417 	ldw	r3,16(r6)
  81c830:	18002026 	beq	r3,zero,81c8b4 <__swbuf_r+0xc0>
  81c834:	31000017 	ldw	r4,0(r6)
  81c838:	30800517 	ldw	r2,20(r6)
  81c83c:	20c7c83a 	sub	r3,r4,r3
  81c840:	18802f0e 	bge	r3,r2,81c900 <__swbuf_r+0x10c>
  81c844:	19400044 	addi	r5,r3,1
  81c848:	30800217 	ldw	r2,8(r6)
  81c84c:	84003fcc 	andi	r16,r16,255
  81c850:	20c00044 	addi	r3,r4,1
  81c854:	10bfffc4 	addi	r2,r2,-1
  81c858:	30800215 	stw	r2,8(r6)
  81c85c:	24000005 	stb	r16,0(r4)
  81c860:	30800517 	ldw	r2,20(r6)
  81c864:	30c00015 	stw	r3,0(r6)
  81c868:	11400c26 	beq	r2,r5,81c89c <__swbuf_r+0xa8>
  81c86c:	3080030b 	ldhu	r2,12(r6)
  81c870:	1080004c 	andi	r2,r2,1
  81c874:	1005003a 	cmpeq	r2,r2,zero
  81c878:	10000626 	beq	r2,zero,81c894 <__swbuf_r+0xa0>
  81c87c:	8005883a 	mov	r2,r16
  81c880:	dfc00317 	ldw	ra,12(sp)
  81c884:	dc400217 	ldw	r17,8(sp)
  81c888:	dc000117 	ldw	r16,4(sp)
  81c88c:	dec00404 	addi	sp,sp,16
  81c890:	f800283a 	ret
  81c894:	00800284 	movi	r2,10
  81c898:	80bff81e 	bne	r16,r2,81c87c <__swbuf_r+0x88>
  81c89c:	8809883a 	mov	r4,r17
  81c8a0:	300b883a 	mov	r5,r6
  81c8a4:	0807ce40 	call	807ce4 <_fflush_r>
  81c8a8:	103ff426 	beq	r2,zero,81c87c <__swbuf_r+0x88>
  81c8ac:	043fffc4 	movi	r16,-1
  81c8b0:	003ff206 	br	81c87c <__swbuf_r+0x88>
  81c8b4:	300b883a 	mov	r5,r6
  81c8b8:	8809883a 	mov	r4,r17
  81c8bc:	d9800015 	stw	r6,0(sp)
  81c8c0:	08063dc0 	call	8063dc <__swsetup_r>
  81c8c4:	d9800017 	ldw	r6,0(sp)
  81c8c8:	1000061e 	bne	r2,zero,81c8e4 <__swbuf_r+0xf0>
  81c8cc:	30c00417 	ldw	r3,16(r6)
  81c8d0:	003fd806 	br	81c834 <__swbuf_r+0x40>
  81c8d4:	d9800015 	stw	r6,0(sp)
  81c8d8:	0807f7c0 	call	807f7c <__sinit>
  81c8dc:	d9800017 	ldw	r6,0(sp)
  81c8e0:	003fcd06 	br	81c818 <__swbuf_r+0x24>
  81c8e4:	3080030b 	ldhu	r2,12(r6)
  81c8e8:	00c00244 	movi	r3,9
  81c8ec:	043fffc4 	movi	r16,-1
  81c8f0:	10801014 	ori	r2,r2,64
  81c8f4:	3080030d 	sth	r2,12(r6)
  81c8f8:	88c00015 	stw	r3,0(r17)
  81c8fc:	003fdf06 	br	81c87c <__swbuf_r+0x88>
  81c900:	300b883a 	mov	r5,r6
  81c904:	8809883a 	mov	r4,r17
  81c908:	d9800015 	stw	r6,0(sp)
  81c90c:	0807ce40 	call	807ce4 <_fflush_r>
  81c910:	d9800017 	ldw	r6,0(sp)
  81c914:	103fe51e 	bne	r2,zero,81c8ac <__swbuf_r+0xb8>
  81c918:	31000017 	ldw	r4,0(r6)
  81c91c:	01400044 	movi	r5,1
  81c920:	003fc906 	br	81c848 <__swbuf_r+0x54>

0081c924 <__swbuf>:
  81c924:	018020b4 	movhi	r6,130
  81c928:	31bc6804 	addi	r6,r6,-3680
  81c92c:	2007883a 	mov	r3,r4
  81c930:	31000017 	ldw	r4,0(r6)
  81c934:	280d883a 	mov	r6,r5
  81c938:	180b883a 	mov	r5,r3
  81c93c:	081c7f41 	jmpi	81c7f4 <__swbuf_r>

0081c940 <__register_exitproc>:
  81c940:	defffa04 	addi	sp,sp,-24
  81c944:	008020b4 	movhi	r2,130
  81c948:	10bc6904 	addi	r2,r2,-3676
  81c94c:	dc000015 	stw	r16,0(sp)
  81c950:	14000017 	ldw	r16,0(r2)
  81c954:	dd000415 	stw	r20,16(sp)
  81c958:	2829883a 	mov	r20,r5
  81c95c:	81405217 	ldw	r5,328(r16)
  81c960:	dcc00315 	stw	r19,12(sp)
  81c964:	dc800215 	stw	r18,8(sp)
  81c968:	dc400115 	stw	r17,4(sp)
  81c96c:	dfc00515 	stw	ra,20(sp)
  81c970:	2023883a 	mov	r17,r4
  81c974:	3027883a 	mov	r19,r6
  81c978:	3825883a 	mov	r18,r7
  81c97c:	28002526 	beq	r5,zero,81ca14 <__register_exitproc+0xd4>
  81c980:	29000117 	ldw	r4,4(r5)
  81c984:	008007c4 	movi	r2,31
  81c988:	11002716 	blt	r2,r4,81ca28 <__register_exitproc+0xe8>
  81c98c:	8800101e 	bne	r17,zero,81c9d0 <__register_exitproc+0x90>
  81c990:	2105883a 	add	r2,r4,r4
  81c994:	1085883a 	add	r2,r2,r2
  81c998:	20c00044 	addi	r3,r4,1
  81c99c:	1145883a 	add	r2,r2,r5
  81c9a0:	0009883a 	mov	r4,zero
  81c9a4:	15000215 	stw	r20,8(r2)
  81c9a8:	28c00115 	stw	r3,4(r5)
  81c9ac:	2005883a 	mov	r2,r4
  81c9b0:	dfc00517 	ldw	ra,20(sp)
  81c9b4:	dd000417 	ldw	r20,16(sp)
  81c9b8:	dcc00317 	ldw	r19,12(sp)
  81c9bc:	dc800217 	ldw	r18,8(sp)
  81c9c0:	dc400117 	ldw	r17,4(sp)
  81c9c4:	dc000017 	ldw	r16,0(sp)
  81c9c8:	dec00604 	addi	sp,sp,24
  81c9cc:	f800283a 	ret
  81c9d0:	29802204 	addi	r6,r5,136
  81c9d4:	00800044 	movi	r2,1
  81c9d8:	110e983a 	sll	r7,r2,r4
  81c9dc:	30c04017 	ldw	r3,256(r6)
  81c9e0:	2105883a 	add	r2,r4,r4
  81c9e4:	1085883a 	add	r2,r2,r2
  81c9e8:	1185883a 	add	r2,r2,r6
  81c9ec:	19c6b03a 	or	r3,r3,r7
  81c9f0:	14802015 	stw	r18,128(r2)
  81c9f4:	14c00015 	stw	r19,0(r2)
  81c9f8:	00800084 	movi	r2,2
  81c9fc:	30c04015 	stw	r3,256(r6)
  81ca00:	88bfe31e 	bne	r17,r2,81c990 <__register_exitproc+0x50>
  81ca04:	30804117 	ldw	r2,260(r6)
  81ca08:	11c4b03a 	or	r2,r2,r7
  81ca0c:	30804115 	stw	r2,260(r6)
  81ca10:	003fdf06 	br	81c990 <__register_exitproc+0x50>
  81ca14:	008020f4 	movhi	r2,131
  81ca18:	109c4804 	addi	r2,r2,28960
  81ca1c:	100b883a 	mov	r5,r2
  81ca20:	80805215 	stw	r2,328(r16)
  81ca24:	003fd606 	br	81c980 <__register_exitproc+0x40>
  81ca28:	00800034 	movhi	r2,0
  81ca2c:	10800004 	addi	r2,r2,0
  81ca30:	1000021e 	bne	r2,zero,81ca3c <__register_exitproc+0xfc>
  81ca34:	013fffc4 	movi	r4,-1
  81ca38:	003fdc06 	br	81c9ac <__register_exitproc+0x6c>
  81ca3c:	01006404 	movi	r4,400
  81ca40:	103ee83a 	callr	r2
  81ca44:	1007883a 	mov	r3,r2
  81ca48:	103ffa26 	beq	r2,zero,81ca34 <__register_exitproc+0xf4>
  81ca4c:	80805217 	ldw	r2,328(r16)
  81ca50:	180b883a 	mov	r5,r3
  81ca54:	18000115 	stw	zero,4(r3)
  81ca58:	18800015 	stw	r2,0(r3)
  81ca5c:	80c05215 	stw	r3,328(r16)
  81ca60:	18006215 	stw	zero,392(r3)
  81ca64:	18006315 	stw	zero,396(r3)
  81ca68:	0009883a 	mov	r4,zero
  81ca6c:	883fc826 	beq	r17,zero,81c990 <__register_exitproc+0x50>
  81ca70:	003fd706 	br	81c9d0 <__register_exitproc+0x90>

0081ca74 <register_fini>:
  81ca74:	f800283a 	ret

0081ca78 <__call_exitprocs>:
  81ca78:	008020b4 	movhi	r2,130
  81ca7c:	10bc6904 	addi	r2,r2,-3676
  81ca80:	10800017 	ldw	r2,0(r2)
  81ca84:	defff304 	addi	sp,sp,-52
  81ca88:	df000b15 	stw	fp,44(sp)
  81ca8c:	d8800115 	stw	r2,4(sp)
  81ca90:	00800034 	movhi	r2,0
  81ca94:	10800004 	addi	r2,r2,0
  81ca98:	1005003a 	cmpeq	r2,r2,zero
  81ca9c:	d8800215 	stw	r2,8(sp)
  81caa0:	d8800117 	ldw	r2,4(sp)
  81caa4:	dd400815 	stw	r21,32(sp)
  81caa8:	dd000715 	stw	r20,28(sp)
  81caac:	10805204 	addi	r2,r2,328
  81cab0:	dfc00c15 	stw	ra,48(sp)
  81cab4:	ddc00a15 	stw	r23,40(sp)
  81cab8:	dd800915 	stw	r22,36(sp)
  81cabc:	dcc00615 	stw	r19,24(sp)
  81cac0:	dc800515 	stw	r18,20(sp)
  81cac4:	dc400415 	stw	r17,16(sp)
  81cac8:	dc000315 	stw	r16,12(sp)
  81cacc:	282b883a 	mov	r21,r5
  81cad0:	2039883a 	mov	fp,r4
  81cad4:	d8800015 	stw	r2,0(sp)
  81cad8:	2829003a 	cmpeq	r20,r5,zero
  81cadc:	d8800117 	ldw	r2,4(sp)
  81cae0:	14405217 	ldw	r17,328(r2)
  81cae4:	88001026 	beq	r17,zero,81cb28 <__call_exitprocs+0xb0>
  81cae8:	ddc00017 	ldw	r23,0(sp)
  81caec:	88800117 	ldw	r2,4(r17)
  81caf0:	8c802204 	addi	r18,r17,136
  81caf4:	143fffc4 	addi	r16,r2,-1
  81caf8:	80000916 	blt	r16,zero,81cb20 <__call_exitprocs+0xa8>
  81cafc:	05bfffc4 	movi	r22,-1
  81cb00:	a000151e 	bne	r20,zero,81cb58 <__call_exitprocs+0xe0>
  81cb04:	8409883a 	add	r4,r16,r16
  81cb08:	2105883a 	add	r2,r4,r4
  81cb0c:	1485883a 	add	r2,r2,r18
  81cb10:	10c02017 	ldw	r3,128(r2)
  81cb14:	a8c01126 	beq	r21,r3,81cb5c <__call_exitprocs+0xe4>
  81cb18:	843fffc4 	addi	r16,r16,-1
  81cb1c:	85bff81e 	bne	r16,r22,81cb00 <__call_exitprocs+0x88>
  81cb20:	d8800217 	ldw	r2,8(sp)
  81cb24:	10003126 	beq	r2,zero,81cbec <__call_exitprocs+0x174>
  81cb28:	dfc00c17 	ldw	ra,48(sp)
  81cb2c:	df000b17 	ldw	fp,44(sp)
  81cb30:	ddc00a17 	ldw	r23,40(sp)
  81cb34:	dd800917 	ldw	r22,36(sp)
  81cb38:	dd400817 	ldw	r21,32(sp)
  81cb3c:	dd000717 	ldw	r20,28(sp)
  81cb40:	dcc00617 	ldw	r19,24(sp)
  81cb44:	dc800517 	ldw	r18,20(sp)
  81cb48:	dc400417 	ldw	r17,16(sp)
  81cb4c:	dc000317 	ldw	r16,12(sp)
  81cb50:	dec00d04 	addi	sp,sp,52
  81cb54:	f800283a 	ret
  81cb58:	8409883a 	add	r4,r16,r16
  81cb5c:	88c00117 	ldw	r3,4(r17)
  81cb60:	2105883a 	add	r2,r4,r4
  81cb64:	1445883a 	add	r2,r2,r17
  81cb68:	18ffffc4 	addi	r3,r3,-1
  81cb6c:	11800217 	ldw	r6,8(r2)
  81cb70:	1c001526 	beq	r3,r16,81cbc8 <__call_exitprocs+0x150>
  81cb74:	10000215 	stw	zero,8(r2)
  81cb78:	303fe726 	beq	r6,zero,81cb18 <__call_exitprocs+0xa0>
  81cb7c:	00c00044 	movi	r3,1
  81cb80:	1c06983a 	sll	r3,r3,r16
  81cb84:	90804017 	ldw	r2,256(r18)
  81cb88:	8cc00117 	ldw	r19,4(r17)
  81cb8c:	1884703a 	and	r2,r3,r2
  81cb90:	10001426 	beq	r2,zero,81cbe4 <__call_exitprocs+0x16c>
  81cb94:	90804117 	ldw	r2,260(r18)
  81cb98:	1884703a 	and	r2,r3,r2
  81cb9c:	10000c1e 	bne	r2,zero,81cbd0 <__call_exitprocs+0x158>
  81cba0:	2105883a 	add	r2,r4,r4
  81cba4:	1485883a 	add	r2,r2,r18
  81cba8:	11400017 	ldw	r5,0(r2)
  81cbac:	e009883a 	mov	r4,fp
  81cbb0:	303ee83a 	callr	r6
  81cbb4:	88800117 	ldw	r2,4(r17)
  81cbb8:	98bfc81e 	bne	r19,r2,81cadc <__call_exitprocs+0x64>
  81cbbc:	b8800017 	ldw	r2,0(r23)
  81cbc0:	147fd526 	beq	r2,r17,81cb18 <__call_exitprocs+0xa0>
  81cbc4:	003fc506 	br	81cadc <__call_exitprocs+0x64>
  81cbc8:	8c000115 	stw	r16,4(r17)
  81cbcc:	003fea06 	br	81cb78 <__call_exitprocs+0x100>
  81cbd0:	2105883a 	add	r2,r4,r4
  81cbd4:	1485883a 	add	r2,r2,r18
  81cbd8:	11000017 	ldw	r4,0(r2)
  81cbdc:	303ee83a 	callr	r6
  81cbe0:	003ff406 	br	81cbb4 <__call_exitprocs+0x13c>
  81cbe4:	303ee83a 	callr	r6
  81cbe8:	003ff206 	br	81cbb4 <__call_exitprocs+0x13c>
  81cbec:	88800117 	ldw	r2,4(r17)
  81cbf0:	1000081e 	bne	r2,zero,81cc14 <__call_exitprocs+0x19c>
  81cbf4:	89000017 	ldw	r4,0(r17)
  81cbf8:	20000726 	beq	r4,zero,81cc18 <__call_exitprocs+0x1a0>
  81cbfc:	b9000015 	stw	r4,0(r23)
  81cc00:	8809883a 	mov	r4,r17
  81cc04:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  81cc08:	bc400017 	ldw	r17,0(r23)
  81cc0c:	883fb71e 	bne	r17,zero,81caec <__call_exitprocs+0x74>
  81cc10:	003fc506 	br	81cb28 <__call_exitprocs+0xb0>
  81cc14:	89000017 	ldw	r4,0(r17)
  81cc18:	882f883a 	mov	r23,r17
  81cc1c:	2023883a 	mov	r17,r4
  81cc20:	883fb21e 	bne	r17,zero,81caec <__call_exitprocs+0x74>
  81cc24:	003fc006 	br	81cb28 <__call_exitprocs+0xb0>

0081cc28 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  81cc28:	defffd04 	addi	sp,sp,-12
  81cc2c:	df000215 	stw	fp,8(sp)
  81cc30:	df000204 	addi	fp,sp,8
  81cc34:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  81cc38:	e0bfff17 	ldw	r2,-4(fp)
  81cc3c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81cc40:	e0bffe17 	ldw	r2,-8(fp)
  81cc44:	1005003a 	cmpeq	r2,r2,zero
  81cc48:	1000021e 	bne	r2,zero,81cc54 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  81cc4c:	002af070 	cmpltui	zero,zero,43969
  81cc50:	00000106 	br	81cc58 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  81cc54:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  81cc58:	e037883a 	mov	sp,fp
  81cc5c:	df000017 	ldw	fp,0(sp)
  81cc60:	dec00104 	addi	sp,sp,4
  81cc64:	f800283a 	ret

0081cc68 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81cc68:	defffd04 	addi	sp,sp,-12
  81cc6c:	dfc00215 	stw	ra,8(sp)
  81cc70:	df000115 	stw	fp,4(sp)
  81cc74:	df000104 	addi	fp,sp,4
  81cc78:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81cc7c:	008020b4 	movhi	r2,130
  81cc80:	10bcbb44 	addi	r2,r2,-3347
  81cc84:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  81cc88:	e13fff17 	ldw	r4,-4(fp)
  81cc8c:	081cc280 	call	81cc28 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81cc90:	003fff06 	br	81cc90 <_exit+0x28>
  81cc94:	0081ca74 	movhi	r2,1833
